LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
  return result;
}

          v160 = (void *)v62;
          goto LABEL_201;
        }

        v183 = v65;
        v133 = 1LL << *(_BYTE *)(MEMORY[0x18961AFF0] + 32LL);
        v134 = -1LL;
        if (v133 < 64) {
          v134 = ~(-1LL << v133);
        }
        v135 = v134 & *(void *)(MEMORY[0x18961AFF0] + 64LL);
        v189 = (unint64_t)(v133 + 63) >> 6;
        if (v135)
        {
          v136 = __clz(__rbit64(v135));
          goto LABEL_144;
        }

        v137 = 1LL;
        if (v189 > 1)
        {
          v138 = *(void *)(MEMORY[0x18961AFF0] + 72LL);
          if (v138)
          {
LABEL_143:
            v136 = __clz(__rbit64(v138)) + (v137 << 6);
LABEL_144:
            __asm { BR              X9 }
          }

          v139 = 2LL;
          if (v189 > 2)
          {
            v138 = *(void *)(MEMORY[0x18961AFF0] + 80LL);
            if (v138) {
              goto LABEL_142;
            }
            v139 = 3LL;
            if (v189 <= 3) {
              goto LABEL_149;
            }
            v138 = *(void *)(MEMORY[0x18961AFF0] + 88LL);
            if (v138)
            {
LABEL_142:
              v137 = v139;
              goto LABEL_143;
            }

            v139 = 4LL;
            if (v189 > 4)
            {
              v138 = *(void *)(MEMORY[0x18961AFF0] + 96LL);
              if (!v138)
              {
                while (1)
                {
                  v137 = v139 + 1;
                  if (__OFADD__(v139, 1LL)) {
                    goto LABEL_214;
                  }
                  if (v137 >= v189) {
                    goto LABEL_149;
                  }
                  v138 = *(void *)(MEMORY[0x18961AFF0] + 8 * v137 + 64);
                  ++v139;
                  if (v138) {
                    goto LABEL_143;
                  }
                }
              }

              goto LABEL_142;
            }
          }
        }

                          v274 = (unsigned __int8 *)v275;
LABEL_201:
                          v337._nsError._reserved = v274;
                          goto LABEL_202;
                        }

  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  __break(1u);
LABEL_205:
  __break(1u);
LABEL_206:
  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:
  __break(1u);
LABEL_210:
  if (!v9) {
    __break(1u);
  }
LABEL_212:
  __break(1u);
LABEL_213:
  if (!v9) {
    __break(1u);
  }
LABEL_215:
  __break(1u);
  return result;
}

uint64_t AttributedString.Runs.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v163 = 0LL;
  unint64_t v164 = 0xE000000000000000LL;
  uint64_t v2 = swift_retain();
  AttributedString.Runs.init(_:in:)(v2, &v190);
  v3 = v191;
  uint64_t v4 = v190;
  __int128 v122 = v199;
  uint64_t v5 = v199;
  if (v191 == (void *)v199)
  {
    uint64_t v6 = 0LL;
    goto LABEL_151;
  }

  uint64_t v120 = v193;
  uint64_t v121 = v192;
  uint64_t v7 = v194;
  unint64_t v8 = v195;
  uint64_t v118 = v197;
  uint64_t v119 = v196;
  __int128 v113 = v201;
  __int128 v114 = v200;
  __int128 v112 = v202;
  uint64_t v9 = v198;
  unint64_t v10 = v203;
  uint64_t v125 = v205;
  uint64_t v126 = v204;
  uint64_t v124 = v206;
  __int128 v117 = v207;
  v108 = (__int128 *)(v1 + 16);
  __int128 v110 = v208;
  uint64_t result = outlined retain of AttributedString.Runs((uint64_t)&v190);
  uint64_t v127 = v10;
  unint64_t v109 = v10 >> 10;
  v123 = (__int128 *)(v4 + 16);
  uint64_t v12 = v120;
  uint64_t v133 = v7;
  v134._uint64_t countAndFlagsBits = v121;
  unint64_t v115 = v8;
  uint64_t v116 = v7;
  uint64_t v130 = v119;
  unint64_t v131 = v8;
  uint64_t v129 = v118;
  uint64_t v111 = v9;
  uint64_t v137 = v9;
  uint64_t v13 = (uint64_t)v3;
  v132 = (void *)v4;
  uint64_t v106 = v5;
  v107 = v3;
  while (2)
  {
    if (v13 >= v5) {
      goto LABEL_156;
    }
    v149._uint64_t countAndFlagsBits = v4;
    v149._unint64_t object = v3;
    *(void *)&__int128 v150 = v121;
    *((void *)&v150 + 1) = v120;
    *(void *)&__int128 v151 = v116;
    *((void *)&v151 + 1) = v115;
    *(void *)&__int128 v152 = v119;
    *((void *)&v152 + 1) = v118;
    *(_OWORD *)&v153[8] = v122;
    __int128 v154 = v114;
    __int128 v155 = v113;
    __int128 v156 = v112;
    *(void *)v153 = v111;
    uint64_t v157 = v127;
    uint64_t v158 = v126;
    uint64_t v159 = v125;
    uint64_t v160 = v124;
    __int128 v161 = v117;
    __int128 v162 = v110;
    v148[0] = v13;
    v148[1] = v134._countAndFlagsBits;
    v148[2] = v12;
    v148[3] = v133;
    v148[4] = v131;
    v148[5] = v130;
    v148[6] = v129;
    v148[7] = v137;
    uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)(v148, &v140._countAndFlagsBits);
    if (v140._countAndFlagsBits != *(void *)(v4 + 88))
    {
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
      goto LABEL_160;
    }

    v134._unint64_t object = (void *)v12;
    uint64_t v138 = v13;
    unint64_t object = (unint64_t)v140._object;
    unint64_t v16 = *((void *)&v142 + 1);
    __int128 v18 = v143;
    uint64_t v17 = v144;
    if ((void)v141)
    {
      uint64_t v19 = v141 + 24 * (((unint64_t)v140._object >> ((4 * *(_BYTE *)(v141 + 18) + 8) & 0x3C)) & 0xF);
      unint64_t v20 = *(void *)(v19 + 24);
      uint64_t v21 = *(void *)(v19 + 32);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v22 = v132[8];
      uint64_t v23 = v144;
      swift_retain();
      swift_unknownObjectRetain();
      uint64_t v17 = v23;
      unint64_t v20 = specialized Rope._Node.subscript.getter(object, v22);
      uint64_t v21 = v24;
      uint64_t result = swift_unknownObjectRelease();
    }

    if (v109 >= v16 >> 10) {
      unint64_t v25 = v127;
    }
    else {
      unint64_t v25 = v16;
    }
    if (v109 >= v16 >> 10) {
      uint64_t v26 = v126;
    }
    else {
      uint64_t v26 = v18;
    }
    if (v109 >= v16 >> 10) {
      uint64_t v27 = v125;
    }
    else {
      uint64_t v27 = *((void *)&v18 + 1);
    }
    if (v109 >= v16 >> 10) {
      uint64_t v28 = v124;
    }
    else {
      uint64_t v28 = v17;
    }
    if (__OFADD__(v20, v16 >> 11)) {
      goto LABEL_158;
    }
    else {
      unint64_t v29 = (unint64_t)v117 >> 11;
    }
    __int128 v30 = v123[1];
    __int128 v187 = *v123;
    __int128 v188 = v30;
    __int128 v189 = v123[2];
    uint64_t result = BigString.utf8.getter();
    if (__OFSUB__(v29, v25 >> 11)) {
      goto LABEL_159;
    }
    unint64_t v31 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t result = outlined release of Locale((uint64_t)v165);
    if (v31 >> 10 < v25 >> 10)
    {
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }

    unint64_t v170 = v25;
    uint64_t v171 = v26;
    uint64_t v172 = v27;
    uint64_t v173 = v28;
    unint64_t v174 = v31;
    uint64_t v175 = v33;
    uint64_t v176 = v35;
    uint64_t v177 = v37;
    uint64_t v38 = v133;
    unint64_t v40 = v132[8];
    uint64_t v39 = v132[9];
    uint64_t countAndFlagsBits = v134._countAndFlagsBits;
    uint64_t v128 = v132[10];
    uint64_t v136 = v132[11];
    if (v133 == 1 || v134._countAndFlagsBits != v132[11])
    {
      uint64_t v135 = v132[9];
      if (v40) {
        uint64_t v44 = v132[9];
      }
      else {
        uint64_t v44 = 0LL;
      }
      uint64_t v45 = v138;
      if (v138 < 0 || v44 < v138)
      {
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
        goto LABEL_174;
      }

      if (v40 && v138 < v135 && *(_WORD *)(v40 + 16))
      {
        uint64_t v46 = *(unsigned __int8 *)(v40 + 18);
        if (*(_BYTE *)(v40 + 18))
        {
          swift_unknownObjectRetain_n();
          uint64_t result = swift_retain();
          unint64_t v47 = v40;
          while (1)
          {
            unint64_t v50 = *(unsigned __int16 *)(v47 + 16);
            if (*(_WORD *)(v47 + 16))
            {
              uint64_t v51 = *(void *)(v47 + 32);
              BOOL v52 = __OFSUB__(v45, v51);
              uint64_t v53 = v45 - v51;
              if (v52) {
                goto LABEL_154;
              }
              if (__OFADD__(v53, 1LL)) {
                goto LABEL_155;
              }
              if (v53 + 1 <= 0)
              {
                unint64_t v50 = 0LL;
                goto LABEL_45;
              }

              if ((_DWORD)v50 != 1)
              {
                uint64_t v54 = *(void *)(v47 + 56);
                uint64_t v45 = v53 - v54;
                if (__OFSUB__(v53, v54)) {
                  goto LABEL_168;
                }
                if (__OFADD__(v45, 1LL)) {
                  goto LABEL_169;
                }
                if (v45 + 1 < 1)
                {
                  unint64_t v50 = 1LL;
                  uint64_t v45 = v53;
                  goto LABEL_45;
                }

                if ((_DWORD)v50 == 2) {
                  goto LABEL_44;
                }
                uint64_t v55 = *(void *)(v47 + 80);
                BOOL v52 = __OFSUB__(v45, v55);
                uint64_t v53 = v45 - v55;
                if (v52) {
                  goto LABEL_172;
                }
                if (__OFADD__(v53, 1LL)) {
                  goto LABEL_173;
                }
                if (v53 + 1 < 1)
                {
                  unint64_t v50 = 2LL;
                  goto LABEL_45;
                }

                if ((_DWORD)v50 != 3)
                {
                  uint64_t v56 = 3LL;
                  if (v50 > 3) {
                    uint64_t v56 = *(unsigned __int16 *)(v47 + 16);
                  }
                  v57 = (void *)(v47 + 104);
                  uint64_t v58 = 3LL;
                  while (1)
                  {
                    if (v56 == v58) {
                      goto LABEL_164;
                    }
                    uint64_t v45 = v53 - *v57;
                    if (__OFSUB__(v53, *v57)) {
                      goto LABEL_165;
                    }
                    if (__OFADD__(v45, 1LL)) {
                      goto LABEL_166;
                    }
                    if (v45 + 1 < 1) {
                      break;
                    }
                    ++v58;
                    v57 += 3;
                    uint64_t v53 = v45;
                    if (v50 == v58) {
                      goto LABEL_44;
                    }
                  }

                  unint64_t v50 = v58;
                  uint64_t v45 = v53;
                  goto LABEL_45;
                }
              }

              uint64_t v45 = v53;
            }

BOOL static AttributedString.Runs.Index.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL static AttributedString.Runs.Index.< infix(_:_:)(void *a1, void *a2)
{
  return *a1 < *a2;
}

uint64_t AttributedString.Runs.Index.distance(to:)(void *a1)
{
  BOOL v2 = __OFSUB__(*a1, *v1);
  uint64_t result = *a1 - *v1;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t AttributedString.Runs.Index.advanced(by:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*v2, result))
  {
    __break(1u);
  }

  else
  {
    *a2 = *v2 + result;
    a2[1] = 0LL;
    a2[2] = 0LL;
    a2[3] = 1LL;
    a2[4] = 0LL;
    a2[5] = 0LL;
    a2[6] = 0LL;
    a2[7] = 2LL;
  }

  return result;
}

void *protocol witness for Strideable.distance(to:) in conformance AttributedString.Runs.Index@<X0>( void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, *v2)) {
    __break(1u);
  }
  else {
    *a2 = *result - *v2;
  }
  return result;
}

void *protocol witness for Strideable.advanced(by:) in conformance AttributedString.Runs.Index@<X0>( void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*v2, *result))
  {
    __break(1u);
  }

  else
  {
    *a2 = *v2 + *result;
    a2[1] = 0LL;
    a2[2] = 0LL;
    a2[3] = 1LL;
    a2[4] = 0LL;
    a2[5] = 0LL;
    a2[6] = 0LL;
    a2[7] = 2LL;
  }

  return result;
}

void *protocol witness for static Strideable._step(after:from:by:) in conformance AttributedString.Runs.Index( void *result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  if (__OFADD__(*a4, *a6))
  {
    __break(1u);
  }

  else
  {
    *uint64_t result = *a4 + *a6;
    result[1] = 0LL;
    result[2] = 0LL;
    result[3] = 1LL;
    result[4] = 0LL;
    result[5] = 0LL;
    result[6] = 0LL;
    result[7] = 2LL;
    return 0LL;
  }

  return result;
}

uint64_t *AttributedString.Runs._resolveRun(_:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *result;
  if (*result >= v2[1] && v2[9] >= v4)
  {
    uint64_t v6 = result[3];
    uint64_t v7 = (void *)*v2;
    if (v6 == 1)
    {
      uint64_t v8 = v7[11];
    }

    else
    {
      uint64_t v9 = result[1];
      uint64_t v8 = v7[11];
      if (v9 == v8)
      {
        unint64_t v10 = result[2];
        if (result[7] != 2)
        {
          uint64_t v14 = (unint64_t)result[4] >> 11;
          goto LABEL_13;
        }

        uint64_t v11 = v7[8];
        if (!v11)
        {
          uint64_t v14 = 0LL;
          goto LABEL_13;
        }

        uint64_t v13 = v7[9];
        uint64_t v12 = v7[10];
        swift_unknownObjectRetain();
        uint64_t v14 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v10, v6, v11, v13, v12);
LABEL_12:
        uint64_t result = (uint64_t *)swift_unknownObjectRelease();
LABEL_13:
        *a2 = v9;
        a2[1] = v10;
        a2[2] = v6;
        a2[3] = v4;
        a2[4] = v14;
        return result;
      }
    }

    uint64_t v15 = v7[8];
    uint64_t v16 = v7[9];
    uint64_t v17 = v7[10];
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.index(atRunOffset:)(v4, v15, v16, v17, v8, v18);
    uint64_t v9 = v18[0];
    unint64_t v10 = v18[1];
    uint64_t v6 = v18[2];
    uint64_t v4 = v18[3];
    uint64_t v14 = v18[4];
    goto LABEL_12;
  }

  __break(1u);
  return result;
}

uint64_t *AttributedString.Runs._resolve(_:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *result;
  if (*result < v2[1] || v2[9] < v4)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }

  uint64_t v6 = result[3];
  unint64_t v5 = result[4];
  uint64_t v7 = *v2;
  if (v6 == 1)
  {
    uint64_t v8 = *(void *)(v7 + 88);
  }

  else
  {
    uint64_t v9 = result[1];
    uint64_t v8 = *(void *)(v7 + 88);
    if (v9 == v8)
    {
      unint64_t v59 = result[2];
      if (result[7] == 2)
      {
        uint64_t v10 = *(void *)(v7 + 64);
        if (v10)
        {
          uint64_t v12 = *(void *)(v7 + 72);
          uint64_t v11 = *(void *)(v7 + 80);
          swift_unknownObjectRetain();
          uint64_t v13 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v59, v6, v10, v12, v11);
          swift_unknownObjectRelease();
        }

        else
        {
          uint64_t v13 = 0LL;
        }

        goto LABEL_71;
      }

      uint64_t v13 = v5 >> 11;
LABEL_68:
      v57 = a2;
      uint64_t v40 = v9;
      uint64_t v41 = v4;
      uint64_t v42 = v5 >> 11;
      if (v5 >> 11 == v13)
      {
        __int128 v43 = *(_OWORD *)(v7 + 32);
        __int128 v61 = *(_OWORD *)(v7 + 16);
        __int128 v62 = v43;
        __int128 v63 = *(_OWORD *)(v7 + 48);
        BigString.utf8.getter();
        uint64_t v44 = BigString.UTF8View.index(roundingDown:)();
        uint64_t v46 = v45;
        uint64_t v48 = v47;
        uint64_t v50 = v49;
        uint64_t v13 = v42;
        uint64_t v4 = v41;
        uint64_t v9 = v40;
        a2 = v57;
LABEL_72:
        uint64_t result = (uint64_t *)outlined release of Locale((uint64_t)v60);
        *a2 = v9;
        a2[1] = v59;
        a2[2] = v6;
        a2[3] = v4;
        a2[4] = v13;
        a2[5] = v44;
        a2[6] = v46;
        a2[7] = v48;
        a2[8] = v50;
        return result;
      }

      uint64_t v4 = v41;
      uint64_t v9 = v40;
      a2 = v57;
LABEL_71:
      __int128 v51 = *(_OWORD *)(v7 + 32);
      __int128 v61 = *(_OWORD *)(v7 + 16);
      __int128 v62 = v51;
      __int128 v63 = *(_OWORD *)(v7 + 48);
      BigString.utf8.getter();
      BigString.startIndex.getter();
      uint64_t v44 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v46 = v52;
      uint64_t v48 = v53;
      uint64_t v50 = v54;
      goto LABEL_72;
    }
  }

  uint64_t v15 = *(void *)(v7 + 64);
  uint64_t v14 = *(void *)(v7 + 72);
  if (v15) {
    uint64_t v16 = *(void *)(v7 + 72);
  }
  else {
    uint64_t v16 = 0LL;
  }
  if (v4 < 0 || v16 < v4)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }

  uint64_t v56 = *(void *)(v7 + 80);
  uint64_t v58 = result[7];
  if (!v15 || (v4 < v14 ? (BOOL v17 = *(unsigned __int16 *)(v15 + 16) == 0) : (BOOL v17 = 1), v17))
  {
    unint64_t v18 = swift_unknownObjectRetain_n();
    unint64_t v59 = specialized Rope._endPath.getter(v18);
    swift_unknownObjectRelease();
    uint64_t v6 = 0LL;
    if (v15) {
      goto LABEL_21;
    }
    uint64_t v13 = 0LL;
LABEL_67:
    uint64_t v9 = v8;
    if (v58 == 2) {
      goto LABEL_71;
    }
    goto LABEL_68;
  }

  uint64_t v55 = *(void *)(v7 + 72);
  uint64_t v19 = *(unsigned __int8 *)(v15 + 18);
  if (!*(_BYTE *)(v15 + 18))
  {
    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    unint64_t v29 = 0LL;
    uint64_t v20 = v4;
    uint64_t v6 = v15;
    uint64_t v30 = *(unsigned __int16 *)(v15 + 16);
    if (*(_WORD *)(v15 + 16)) {
      goto LABEL_41;
    }
LABEL_53:
    unint64_t v31 = v20;
    goto LABEL_64;
  }

  uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  uint64_t v20 = v4;
  uint64_t v6 = v15;
  do
  {
    uint64_t v22 = *(unsigned __int16 *)(v6 + 16);
    if (*(_WORD *)(v6 + 16))
    {
      uint64_t v23 = *(void *)(v6 + 32);
      BOOL v24 = __OFSUB__(v20, v23);
      uint64_t v25 = v20 - v23;
      if (v24) {
        goto LABEL_77;
      }
      if (__OFADD__(v25, 1LL)) {
        goto LABEL_78;
      }
      if (v25 + 1 < 1)
      {
        uint64_t v22 = 0LL;
        goto LABEL_26;
      }

      if ((_DWORD)v22 != 1)
      {
        uint64_t v26 = (uint64_t *)(v6 + 56);
        uint64_t v27 = 1LL;
        while (1)
        {
          uint64_t v28 = *v26;
          v26 += 3;
          uint64_t v20 = v25 - v28;
          if (__OFSUB__(v25, v28)) {
            break;
          }
          if (__OFADD__(v20, 1LL)) {
            goto LABEL_75;
          }
          if (v20 + 1 < 1)
          {
            uint64_t v22 = v27;
            uint64_t v20 = v25;
            goto LABEL_26;
          }

          ++v27;
          uint64_t v25 = v20;
          if (v22 == v27) {
            goto LABEL_25;
          }
        }

        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }

      uint64_t v20 = v25;
    }

__n128 AttributedString.Runs.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 40);
  __int128 v4 = *(_OWORD *)(v1 + 56);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 AttributedString.Runs.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 104);
  __int128 v4 = *(_OWORD *)(v1 + 120);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t AttributedString.Runs.index(after:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[9];
  if (*(void *)result < v5 || v4 >= v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v9 = *(void *)(result + 40);
  uint64_t v8 = *(void *)(result + 48);
  uint64_t v10 = *(void *)(result + 56);
  uint64_t v11 = *v2;
  uint64_t v12 = v2[16];
  uint64_t v13 = v2[8];
  uint64_t v14 = *(void *)(result + 24);
  unint64_t v15 = *(void *)(result + 32);
  uint64_t v16 = *(void *)(*v2 + 64);
  uint64_t v40 = *(void *)(*v2 + 72);
  uint64_t v17 = *(void *)(*v2 + 88);
  uint64_t v39 = *(void *)(*v2 + 80);
  *(void *)&__int128 v48 = *v2;
  *((void *)&v48 + 1) = v5;
  __int128 v18 = *((_OWORD *)v2 + 2);
  __int128 v49 = *((_OWORD *)v2 + 1);
  __int128 v50 = v18;
  __int128 v51 = *((_OWORD *)v2 + 3);
  uint64_t v52 = v13;
  uint64_t v53 = v6;
  __int128 v19 = *((_OWORD *)v2 + 6);
  __int128 v54 = *((_OWORD *)v2 + 5);
  __int128 v55 = v19;
  __int128 v56 = *((_OWORD *)v2 + 7);
  uint64_t v57 = v12;
  __int128 v20 = *(_OWORD *)(v2 + 17);
  __int128 v21 = *(_OWORD *)(v2 + 19);
  __int128 v22 = *(_OWORD *)(v2 + 21);
  __int128 v61 = *(_OWORD *)(v2 + 23);
  __int128 v60 = v22;
  __int128 v59 = v21;
  __int128 v58 = v20;
  uint64_t v41 = v4;
  __int128 v42 = *(_OWORD *)(result + 8);
  uint64_t v43 = v14;
  unint64_t v44 = v15;
  uint64_t v45 = v9;
  uint64_t v46 = v8;
  uint64_t v47 = v10;
  swift_unknownObjectRetain();
  __n128 result = (uint64_t)AttributedString.Runs._resolveRun(_:)(&v41, (uint64_t *)&v62);
  __int128 v66 = v62;
  uint64_t v67 = v63;
  uint64_t v23 = v65;
  __int128 v48 = v62;
  *(void *)&__int128 v49 = v63;
  if (__OFADD__(v64, 1LL)) {
    goto LABEL_16;
  }
  if ((void)v66 != v17)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v38 = v64 + 1;
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)&v67, (uint64_t)v68);
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)v68, (uint64_t)v69);
  if (v69[0])
  {
    unint64_t v24 = *(void *)(v69[0] + 24 * ((*((void *)&v66 + 1) >> ((4 * *(_BYTE *)(v69[0] + 18) + 8) & 0x3C)) & 0xFLL) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    unint64_t v25 = *((void *)&v66 + 1);
    swift_unknownObjectRetain();
    unint64_t v24 = specialized Rope._Node.subscript.getter(v25, v16);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  __n128 result = swift_bridgeObjectRelease();
  if (__OFADD__(v23, v24)) {
    goto LABEL_18;
  }
  swift_unknownObjectRetain();
  specialized Rope.formIndex(after:)(&v48, v16, v40, v39, v17);
  swift_unknownObjectRelease_n();
  __int128 v26 = v48;
  uint64_t v27 = (__int128 *)(v11 + 16);
  uint64_t v28 = v49;
  if (v10 == 2)
  {
    __int128 v29 = v27[1];
    __int128 v48 = *v27;
    __int128 v49 = v29;
    __int128 v50 = v27[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
LABEL_15:
    uint64_t v31 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    __n128 result = outlined release of Locale((uint64_t)&v41);
    *(void *)a2 = v38;
    *(_OWORD *)(a2 + 8) = v26;
    *(void *)(a2 + 24) = v28;
    *(void *)(a2 + 32) = v31;
    *(void *)(a2 + 40) = v33;
    *(void *)(a2 + 48) = v35;
    *(void *)(a2 + 56) = v37;
    return result;
  }

  __int128 v30 = v27[1];
  __int128 v48 = *v27;
  __int128 v49 = v30;
  __int128 v50 = v27[2];
  __n128 result = BigString.utf8.getter();
  if (!__OFSUB__(v23 + v24, v15 >> 11)) {
    goto LABEL_15;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t *AttributedString.Runs.index(before:)@<X0>(uint64_t *result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = *result;
  if (v2[1] >= *result) {
    goto LABEL_94;
  }
  if (v2[9] < v4)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }

  uint64_t v5 = result[3];
  uint64_t v6 = (void *)*v2;
  uint64_t v7 = *(void *)(*v2 + 64LL);
  uint64_t v8 = v6[9];
  uint64_t v9 = v6[11];
  uint64_t v63 = result[7];
  uint64_t v64 = v6[10];
  unint64_t v60 = result[4];
  if (v5 != 1)
  {
    uint64_t v10 = result[1];
    if (v10 == v9)
    {
      unint64_t v11 = result[2];
      if (result[7] == 2)
      {
        if (v7)
        {
          swift_unknownObjectRetain_n();
          uint64_t v12 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v11, v5, v7, v8, v64);
          __n128 result = (uint64_t *)swift_unknownObjectRelease();
        }

        else
        {
          uint64_t v12 = 0LL;
        }
      }

      else
      {
        uint64_t v12 = (unint64_t)result[4] >> 11;
        __n128 result = (uint64_t *)swift_unknownObjectRetain();
      }

uint64_t *AttributedString.Runs._index(_:offsetBy:)@<X0>( uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *result;
  if (*result < v3[1] || v3[9] < v4)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }

  uint64_t v5 = a2;
  uint64_t v6 = result[3];
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 64LL);
  uint64_t v9 = *(void *)(*v3 + 72LL);
  uint64_t v10 = *(void *)(*v3 + 80LL);
  uint64_t v11 = *(void *)(v7 + 88);
  unint64_t v54 = result[4];
  unint64_t v60 = (_OWORD *)v7;
  uint64_t v61 = result[7];
  uint64_t v62 = *result;
  if (v6 != 1)
  {
    uint64_t v12 = result[1];
    if (v12 == v11)
    {
      uint64_t v13 = v10;
      unint64_t v14 = result[2];
      if (result[7] == 2)
      {
        if (v8)
        {
          swift_unknownObjectRetain();
          uint64_t v57 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v14, v6, v8, v9, v13);
        }

        else
        {
          uint64_t v57 = 0LL;
        }
      }

      else
      {
        uint64_t v57 = (unint64_t)result[4] >> 11;
        swift_unknownObjectRetain();
      }

      uint64_t v18 = v11;
LABEL_67:
      *(void *)&__int128 v65 = v12;
      *((void *)&v65 + 1) = v14;
      *(void *)&__int128 v66 = v6;
      v64[0] = v5;
      swift_unknownObjectRetain();
      specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)((uint64_t)&v65, v64, 0, v8, v9, v13, v18);
      swift_unknownObjectRelease();
      __int128 v40 = v65;
      unint64_t v41 = v14;
      uint64_t v42 = v66;
      swift_unknownObjectRetain();
      uint64_t v56 = v42;
      uint64_t v43 = specialized Rope.distance<A>(from:to:in:)( v12,  v41,  v6,  v40,  *((unint64_t *)&v40 + 1),  v42,  v8,  v9,  v13,  v18);
      __n128 result = (uint64_t *)swift_unknownObjectRelease_n();
      if (!__OFADD__(v62, a2))
      {
        if (!__OFADD__(v57, v43))
        {
          unint64_t v44 = v60 + 1;
          if (v61 == 2)
          {
            __int128 v45 = v60[2];
            __int128 v65 = *v44;
            __int128 v66 = v45;
            __int128 v67 = v60[3];
            BigString.utf8.getter();
            BigString.startIndex.getter();
LABEL_72:
            uint64_t v47 = BigString.UTF8View.index(_:offsetBy:)();
            uint64_t v49 = v48;
            uint64_t v51 = v50;
            uint64_t v53 = v52;
            __n128 result = (uint64_t *)outlined release of Locale((uint64_t)v64);
            *(void *)a3 = v62 + a2;
            *(_OWORD *)(a3 + 8) = v40;
            *(void *)(a3 + 24) = v56;
            *(void *)(a3 + 32) = v47;
            *(void *)(a3 + 40) = v49;
            *(void *)(a3 + 48) = v51;
            *(void *)(a3 + 56) = v53;
            return result;
          }

          __int128 v46 = v60[2];
          __int128 v65 = *v44;
          __int128 v66 = v46;
          __int128 v67 = v60[3];
          BigString.utf8.getter();
          __n128 result = (uint64_t *)v54;
          if (!__OFSUB__(v57 + v43, v54 >> 11)) {
            goto LABEL_72;
          }
LABEL_83:
          __break(1u);
          goto LABEL_84;
        }

        goto LABEL_81;
      }

uint64_t *AttributedString.Runs.index(_:offsetBy:limitedBy:)@<X0>( uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, void *a4@<X2>)
{
  uint64_t v4 = *a4 - *result;
  if (__OFSUB__(*a4, *result))
  {
    __break(1u);
  }

  else
  {
    if (a2 < 1)
    {
      if (v4 <= 0 && v4 > a2) {
        goto LABEL_5;
      }
    }

    else if ((v4 & 0x8000000000000000LL) == 0 && v4 < (unint64_t)a2)
    {
LABEL_5:
      *(void *)a3 = 0LL;
      *(void *)(a3 + 8) = 0LL;
      *(void *)(a3 + 16) = 0LL;
      *(void *)(a3 + 24) = 2LL;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      return result;
    }

    return AttributedString.Runs._index(_:offsetBy:)(result, a2, a3);
  }

  return result;
}

__int128 *AttributedString.Runs.subscript.getter@<X0>(__int128 *result@<X0>, void *a2@<X8>)
{
  __int128 v4 = *result;
  __int128 v5 = result[1];
  __int128 v6 = result[2];
  __int128 v7 = result[3];
  __int128 v8 = *(_OWORD *)(v2 + 176);
  __int128 v56 = *(_OWORD *)(v2 + 160);
  __int128 v57 = v8;
  uint64_t v58 = *(void *)(v2 + 192);
  __int128 v9 = *(_OWORD *)(v2 + 112);
  __int128 v52 = *(_OWORD *)(v2 + 96);
  __int128 v53 = v9;
  __int128 v10 = *(_OWORD *)(v2 + 144);
  __int128 v54 = *(_OWORD *)(v2 + 128);
  __int128 v55 = v10;
  __int128 v11 = *(_OWORD *)(v2 + 48);
  v49[2] = *(_OWORD *)(v2 + 32);
  v49[3] = v11;
  __int128 v12 = *(_OWORD *)(v2 + 80);
  __int128 v50 = *(_OWORD *)(v2 + 64);
  __int128 v51 = v12;
  __int128 v13 = *(_OWORD *)(v2 + 16);
  v49[0] = *(_OWORD *)v2;
  v49[1] = v13;
  if ((uint64_t)v4 < *((uint64_t *)&v49[0] + 1) || (uint64_t)v4 >= *((uint64_t *)&v50 + 1))
  {
    __break(1u);
    goto LABEL_27;
  }

  v48[0] = v4;
  v48[1] = v5;
  v48[2] = v6;
  v48[3] = v7;
  __n128 result = (__int128 *)AttributedString.Runs._resolve(_:)((uint64_t *)v48, (uint64_t *)&v42);
  unint64_t v14 = *(_OWORD **)&v49[0];
  if ((void)v42 != *(void *)(*(void *)&v49[0] + 88LL))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  unint64_t v15 = *((void *)&v42 + 1);
  unint64_t v17 = *((void *)&v44 + 1);
  uint64_t v16 = v45;
  uint64_t v18 = v46;
  uint64_t v19 = v47;
  if ((void)v43)
  {
    uint64_t v20 = (void *)(v43 + 24 * ((*((void *)&v42 + 1) >> ((4 * *(_BYTE *)(v43 + 18) + 8) & 0x3C)) & 0xFLL));
    unint64_t v21 = v20[3];
    uint64_t v22 = v20[4];
    uint64_t v23 = v20[5];
    outlined retain of AttributedString.Runs((uint64_t)v49);
    uint64_t v41 = v22;
    swift_bridgeObjectRetain();
    uint64_t v40 = v23;
    __n128 result = (__int128 *)swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v24 = *(void *)(*(void *)&v49[0] + 64LL);
    outlined retain of AttributedString.Runs((uint64_t)v49);
    swift_unknownObjectRetain();
    unint64_t v21 = specialized Rope._Node.subscript.getter(v15, v24);
    uint64_t v40 = v26;
    uint64_t v41 = v25;
    __n128 result = (__int128 *)swift_unknownObjectRelease();
  }

  if (*((void *)&v54 + 1) >> 10 >= v17 >> 10) {
    unint64_t v27 = *((void *)&v54 + 1);
  }
  else {
    unint64_t v27 = v17;
  }
  if (*((void *)&v54 + 1) >> 10 >= v17 >> 10) {
    uint64_t v28 = v55;
  }
  else {
    uint64_t v28 = v16;
  }
  if (*((void *)&v54 + 1) >> 10 >= v17 >> 10) {
    uint64_t v29 = *((void *)&v55 + 1);
  }
  else {
    uint64_t v29 = v18;
  }
  if (*((void *)&v54 + 1) >> 10 >= v17 >> 10) {
    uint64_t v30 = v56;
  }
  else {
    uint64_t v30 = v19;
  }
  if (__OFADD__(v21, v17 >> 11)) {
    goto LABEL_28;
  }
  else {
    unint64_t v31 = *((void *)&v56 + 1) >> 11;
  }
  __int128 v32 = v14[2];
  __int128 v42 = v14[1];
  __int128 v43 = v32;
  __int128 v44 = v14[3];
  __n128 result = (__int128 *)BigString.utf8.getter();
  if (__OFSUB__(v31, v27 >> 11)) {
    goto LABEL_29;
  }
  unint64_t v33 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  __n128 result = (__int128 *)outlined release of Locale((uint64_t)v48);
  if (v33 >> 10 >= v27 >> 10)
  {
    *a2 = v41;
    a2[1] = v40;
    a2[2] = v27;
    a2[3] = v28;
    a2[4] = v29;
    a2[5] = v30;
    a2[6] = v33;
    a2[7] = v35;
    a2[8] = v37;
    a2[9] = v39;
    a2[10] = v14;
    return result;
  }

uint64_t AttributedString.Runs.subscript.getter@<X0>( uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  __int128 v8 = (_OWORD *)*v6;
  unint64_t v10 = v6[17];
  uint64_t v9 = v6[18];
  uint64_t v11 = v6[19];
  uint64_t v12 = v6[20];
  unint64_t v13 = v6[21];
  uint64_t v14 = *(void *)(*v6 + 64LL);
  uint64_t v15 = *(void *)(*v6 + 88LL);
  __int128 v46 = *(_OWORD *)result;
  uint64_t v47 = *(void *)(result + 16);
  if ((void)v46 != v15)
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v39 = v12;
  uint64_t v40 = v11;
  unint64_t v38 = v13;
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)&v47, (uint64_t)v48);
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)v48, (uint64_t)&v52);
  if (v52)
  {
    uint64_t v18 = (void *)(v52 + 24 * ((*((void *)&v46 + 1) >> ((4 * *(_BYTE *)(v52 + 18) + 8) & 0x3C)) & 0xFLL));
    unint64_t v19 = v18[3];
    uint64_t v20 = v18[4];
    uint64_t v21 = v18[5];
    swift_bridgeObjectRetain();
    __n128 result = swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    unint64_t v19 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v46 + 1), v14);
    uint64_t v20 = v22;
    uint64_t v21 = v23;
    __n128 result = swift_unknownObjectRelease();
  }

  BOOL v24 = v10 >> 10 >= a2 >> 10;
  if (v10 >> 10 >= a2 >> 10) {
    unint64_t v25 = v10;
  }
  else {
    unint64_t v25 = a2;
  }
  if (v10 >> 10 >= a2 >> 10) {
    uint64_t v26 = v9;
  }
  else {
    uint64_t v26 = a3;
  }
  if (v24) {
    uint64_t v27 = v40;
  }
  else {
    uint64_t v27 = a4;
  }
  if (v24) {
    uint64_t v28 = v39;
  }
  else {
    uint64_t v28 = a5;
  }
  if (__OFADD__(v19, a2 >> 11)) {
    goto LABEL_25;
  }
  else {
    unint64_t v29 = v38 >> 11;
  }
  __int128 v30 = v8[2];
  __int128 v49 = v8[1];
  __int128 v50 = v30;
  __int128 v51 = v8[3];
  __n128 result = BigString.utf8.getter();
  if (__OFSUB__(v29, v25 >> 11)) {
    goto LABEL_26;
  }
  uint64_t v42 = v20;
  uint64_t v44 = v21;
  unint64_t v31 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  __n128 result = outlined release of Locale((uint64_t)v45);
  if (v31 >> 10 >= v25 >> 10)
  {
    *a6 = v42;
    a6[1] = v44;
    a6[2] = v25;
    a6[3] = v26;
    a6[4] = v27;
    a6[5] = v28;
    a6[6] = v31;
    a6[7] = v33;
    a6[8] = v35;
    a6[9] = v37;
    a6[10] = v8;
    return swift_retain();
  }

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs( uint64_t *result)
{
  uint64_t v2 = *result;
  if (v1[1] >= *result) {
    goto LABEL_93;
  }
  if (v1[9] < v2)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }

  v3 = result;
  __int128 v4 = (void *)*v1;
  uint64_t v5 = result[3];
  uint64_t v6 = result[7];
  uint64_t v7 = *(void *)(*v1 + 64LL);
  uint64_t v8 = v4[9];
  uint64_t v9 = v4[11];
  uint64_t v61 = v4[10];
  uint64_t v62 = v9;
  unint64_t v59 = result[4];
  if (v5 != 1)
  {
    uint64_t v10 = result[1];
    if (v10 == v9)
    {
      unint64_t v11 = result[2];
      if (v6 != 2)
      {
        unint64_t v12 = (unint64_t)result[4] >> 11;
        __n128 result = (uint64_t *)swift_unknownObjectRetain();
        goto LABEL_66;
      }

      if (v7)
      {
        swift_unknownObjectRetain_n();
        unint64_t v12 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v11, v5, v7, v8, v61);
        __n128 result = (uint64_t *)swift_unknownObjectRelease();
        goto LABEL_66;
      }

__n128 protocol witness for Collection.startIndex.getter in conformance AttributedString.Runs@<Q0>( uint64_t a1@<X8>)
{
  __int128 v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 40);
  __int128 v4 = *(_OWORD *)(v1 + 56);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 protocol witness for Collection.endIndex.getter in conformance AttributedString.Runs@<Q0>( uint64_t a1@<X8>)
{
  __int128 v2 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 104);
  __int128 v4 = *(_OWORD *)(v1 + 120);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs( void *a1, __int128 *a2))(void **a1)
{
  __int128 v4 = malloc(0x58uLL);
  *a1 = v4;
  AttributedString.Runs.subscript.getter(a2, v4);
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  free(v1);
}

__int128 *protocol witness for Collection.subscript.getter in conformance AttributedString.Runs@<X0>( __int128 *result@<X0>, uint64_t a2@<X8>)
{
  __int128 v3 = *result;
  __int128 v4 = result[1];
  __int128 v5 = result[2];
  __int128 v6 = result[3];
  __int128 v7 = result[4];
  __int128 v8 = result[5];
  __int128 v9 = result[6];
  __int128 v10 = result[7];
  __int128 v11 = *(_OWORD *)(v2 + 176);
  __int128 v30 = *(_OWORD *)(v2 + 160);
  __int128 v31 = v11;
  uint64_t v32 = *(void *)(v2 + 192);
  __int128 v12 = *(_OWORD *)(v2 + 112);
  __int128 v26 = *(_OWORD *)(v2 + 96);
  __int128 v27 = v12;
  __int128 v13 = *(_OWORD *)(v2 + 144);
  __int128 v28 = *(_OWORD *)(v2 + 128);
  __int128 v29 = v13;
  __int128 v14 = *(_OWORD *)(v2 + 48);
  v23[2] = *(_OWORD *)(v2 + 32);
  v23[3] = v14;
  __int128 v15 = *(_OWORD *)(v2 + 80);
  __int128 v24 = *(_OWORD *)(v2 + 64);
  __int128 v25 = v15;
  __int128 v16 = *(_OWORD *)(v2 + 16);
  v23[0] = *(_OWORD *)v2;
  v23[1] = v16;
  if (*((uint64_t *)&v24 + 1) < *((uint64_t *)&v23[0] + 1))
  {
    __break(1u);
    goto LABEL_6;
  }

  if ((uint64_t)v3 < *((uint64_t *)&v23[0] + 1))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (*((uint64_t *)&v24 + 1) >= (uint64_t)v7)
  {
    __int128 v17 = *(_OWORD *)(v2 + 176);
    *(_OWORD *)(a2 + 288) = *(_OWORD *)(v2 + 160);
    *(_OWORD *)(a2 + 304) = v17;
    *(void *)(a2 + 320) = *(void *)(v2 + 192);
    __int128 v18 = *(_OWORD *)(v2 + 112);
    *(_OWORD *)(a2 + 224) = *(_OWORD *)(v2 + 96);
    *(_OWORD *)(a2 + 240) = v18;
    __int128 v19 = *(_OWORD *)(v2 + 144);
    *(_OWORD *)(a2 + 256) = *(_OWORD *)(v2 + 128);
    *(_OWORD *)(a2 + 272) = v19;
    __int128 v20 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(a2 + 176) = v20;
    __int128 v21 = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(a2 + 208) = v21;
    __int128 v22 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(a2 + 128) = *(_OWORD *)v2;
    *(_OWORD *)(a2 + 144) = v22;
    *(_OWORD *)a2 = v3;
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v5;
    *(_OWORD *)(a2 + 48) = v6;
    *(_OWORD *)(a2 + 64) = v7;
    *(_OWORD *)(a2 + 80) = v8;
    *(_OWORD *)(a2 + 96) = v9;
    *(_OWORD *)(a2 + 112) = v10;
    return (__int128 *)outlined retain of AttributedString.Runs((uint64_t)v23);
  }

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString.Runs@<X0>( uint64_t a1@<X8>)
{
  __int128 v2 = *(_OWORD *)(v1 + 144);
  __int128 v3 = *(_OWORD *)(v1 + 176);
  __int128 v24 = *(_OWORD *)(v1 + 160);
  __int128 v25 = v3;
  __int128 v4 = *(_OWORD *)(v1 + 80);
  __int128 v5 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)&v22[96] = *(_OWORD *)(v1 + 96);
  __int128 v6 = *(_OWORD *)&v22[96];
  *(_OWORD *)&v22[112] = v5;
  __int128 v7 = *(_OWORD *)(v1 + 112);
  __int128 v8 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v22[128] = *(_OWORD *)(v1 + 128);
  __int128 v9 = *(_OWORD *)&v22[128];
  __int128 v23 = v8;
  __int128 v10 = *(_OWORD *)(v1 + 16);
  __int128 v11 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)&v22[32] = *(_OWORD *)(v1 + 32);
  __int128 v12 = *(_OWORD *)&v22[32];
  *(_OWORD *)&v22[48] = v11;
  __int128 v13 = *(_OWORD *)(v1 + 48);
  __int128 v14 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)&v22[64] = *(_OWORD *)(v1 + 64);
  __int128 v15 = *(_OWORD *)&v22[64];
  *(_OWORD *)&v22[80] = v14;
  __int128 v16 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)__int128 v22 = *(_OWORD *)v1;
  __int128 v17 = *(_OWORD *)v22;
  *(_OWORD *)&v22[16] = v16;
  __int128 v18 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(a1 + 160) = v24;
  *(_OWORD *)(a1 + 176) = v18;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v4;
  uint64_t v26 = *(void *)(v1 + 192);
  *(void *)(a1 + 192) = *(void *)(v1 + 192);
  *(_OWORD *)a1 = v17;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v22[8];
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v22[24];
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v22[40];
  *(_OWORD *)(a1 + 248) = *(_OWORD *)&v22[56];
  __int128 v19 = *(_OWORD *)&v22[88];
  *(_OWORD *)(a1 + 264) = *(_OWORD *)&v22[72];
  *(_OWORD *)(a1 + 280) = v19;
  __int128 v20 = *(_OWORD *)&v22[120];
  *(_OWORD *)(a1 + 296) = *(_OWORD *)&v22[104];
  *(_OWORD *)(a1 + 312) = v20;
  return outlined retain of AttributedString.Runs((uint64_t)v22);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AttributedString.Runs()
{
  return *(void *)(v0 + 8) == *(void *)(v0 + 72);
}

double protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance AttributedString.Runs@<D0>( uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 3LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance AttributedString.Runs( void *a1, void *a2)
{
  BOOL v2 = __OFSUB__(*a2, *a1);
  uint64_t result = *a2 - *a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString.Runs( uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[8];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }

  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }

  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString.Runs( void *result, void *a2)
{
  if (*result < *a2 || a2[8] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[8] < result[8]) {
    __break(1u);
  }
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs( uint64_t *result)
{
  uint64_t v2 = *result;
  if (*result < v1[1] || v2 >= v1[9]) {
    goto LABEL_82;
  }
  uint64_t v3 = result;
  BOOL v4 = (void *)*v1;
  uint64_t v5 = result[3];
  uint64_t v6 = result[7];
  uint64_t v7 = *(void *)(*v1 + 64LL);
  uint64_t v8 = v4[9];
  uint64_t v10 = v4[10];
  uint64_t v9 = v4[11];
  uint64_t v57 = v4;
  uint64_t v58 = v9;
  unint64_t v56 = result[4];
  if (v5 != 1)
  {
    uint64_t v11 = result[1];
    if (v11 == v9)
    {
      unint64_t v12 = result[2];
      if (v6 == 2)
      {
        if (v7)
        {
          swift_unknownObjectRetain();
          uint64_t v13 = v10;
          uint64_t result = (uint64_t *)specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v12, v5, v7, v8, v10);
          uint64_t v9 = v58;
          __int128 v14 = result;
        }

        else
        {
          uint64_t v13 = v4[10];
          __int128 v14 = 0LL;
        }
      }

      else
      {
        uint64_t v13 = v4[10];
        __int128 v14 = (uint64_t *)((unint64_t)result[4] >> 11);
        uint64_t result = (uint64_t *)swift_unknownObjectRetain();
        uint64_t v9 = v58;
      }

      goto LABEL_66;
    }
  }

  if (v7) {
    uint64_t v15 = v4[9];
  }
  else {
    uint64_t v15 = 0LL;
  }
  if (v2 < 0 || v15 < v2) {
    goto LABEL_86;
  }
  if (!v7 || (v2 < v8 ? (BOOL v16 = *(unsigned __int16 *)(v7 + 16) == 0) : (BOOL v16 = 1), v16))
  {
    unint64_t v17 = swift_unknownObjectRetain_n();
    unint64_t v12 = specialized Rope._endPath.getter(v17);
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    uint64_t v5 = 0LL;
    if (!v7)
    {
      uint64_t v13 = v10;
      __int128 v14 = 0LL;
      uint64_t v9 = v58;
      uint64_t v11 = v58;
      goto LABEL_66;
    }

__n128 protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs@<Q0>( uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(v1 + 17);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(v1 + 19);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(v1 + 21);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(v1 + 23);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(v1 + 9);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 11);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(v1 + 13);
  __n128 result = *(__n128 *)(v1 + 15);
  *(__n128 *)(a1 + 120) = result;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 200) = v3;
  *(void *)(a1 + 208) = v4;
  *(void *)(a1 + 216) = v5;
  *(void *)(a1 + 224) = v6;
  *(void *)(a1 + 232) = v7;
  *(void *)(a1 + 240) = v8;
  *(void *)(a1 + 248) = v9;
  *(void *)(a1 + 256) = v10;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance AttributedString.Runs()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1)) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs()
{
  __int128 v1 = *(_OWORD *)(v0 + 176);
  v9[10] = *(_OWORD *)(v0 + 160);
  v9[11] = v1;
  uint64_t v10 = *(void *)(v0 + 192);
  __int128 v2 = *(_OWORD *)(v0 + 112);
  v9[6] = *(_OWORD *)(v0 + 96);
  v9[7] = v2;
  __int128 v3 = *(_OWORD *)(v0 + 144);
  v9[8] = *(_OWORD *)(v0 + 128);
  v9[9] = v3;
  __int128 v4 = *(_OWORD *)(v0 + 48);
  v9[2] = *(_OWORD *)(v0 + 32);
  v9[3] = v4;
  __int128 v5 = *(_OWORD *)(v0 + 80);
  v9[4] = *(_OWORD *)(v0 + 64);
  v9[5] = v5;
  __int128 v6 = *(_OWORD *)(v0 + 16);
  v9[0] = *(_OWORD *)v0;
  v9[1] = v6;
  uint64_t v7 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v9);
  outlined release of AttributedString.Runs((uint64_t)v9);
  return v7;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString.Runs( uint64_t a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString.Runs@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

void *AttributedString.Runs._firstOfMatchingRuns(with:comparing:)@<X0>( void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!*(void *)(a2 + 16)) {
    goto LABEL_40;
  }
  __int128 v5 = result;
  uint64_t v6 = *v3;
  uint64_t v35 = *(void *)(*v3 + 88LL);
  if (*result == v35)
  {
    uint64_t v33 = v3[1];
    unint64_t v7 = result[1];
    uint64_t v8 = result[2];
    if (v8)
    {
      uint64_t v32 = *(void *)(v8 + 24 * ((v7 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 32);
      swift_bridgeObjectRetain();
      uint64_t result = (void *)swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v9 = *(void *)(v6 + 64);
      swift_unknownObjectRetain();
      uint64_t v8 = 0LL;
      specialized Rope._Node.subscript.getter(v7, v9);
      uint64_t v32 = v10;
      uint64_t result = (void *)swift_unknownObjectRelease();
    }

    uint64_t v11 = v5[3];
    uint64_t v34 = v5[4];
    if (v33 < v11)
    {
      uint64_t v29 = a3;
      while (1)
      {
        uint64_t v12 = *(void *)(v6 + 64);
        uint64_t v13 = *(void *)(v6 + 88);
        uint64_t v37 = v35;
        unint64_t v38 = v7;
        uint64_t v39 = v8;
        if (v35 != v13)
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }

        if (v12)
        {
          unint64_t v14 = *(unsigned __int8 *)(v12 + 18);
          uint64_t result = (void *)swift_unknownObjectRetain_n();
          if (v7 <= v14) {
            goto LABEL_35;
          }
        }

        else if (!v7)
        {
          goto LABEL_35;
        }

        uint64_t v30 = v8;
        if (v8)
        {
          char v15 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
          if (((v7 >> v15) & 0xF) != 0) {
            break;
          }
        }

        int v18 = *(unsigned __int8 *)(v12 + 18);
        char v19 = (4 * v18 + 8) & 0x3C;
        uint64_t v20 = (v7 >> v19) & 0xF;
        uint64_t v36 = v20;
        if (v18)
        {
          swift_unknownObjectRetain();
          char v21 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v12 + 16, v12 + 24, &v36, (uint64_t)&v37, v18);
          uint64_t result = (void *)swift_unknownObjectRelease();
          if ((v21 & 1) == 0) {
            goto LABEL_39;
          }
          if (v37 != v35) {
            goto LABEL_36;
          }
          unint64_t v16 = v38;
          uint64_t v17 = v39;
          if (v39) {
            goto LABEL_20;
          }
        }

        else
        {
          if (!v20) {
            goto LABEL_39;
          }
          unint64_t v16 = ((v20 - 1) << v19) | ((-15LL << v19) - 1) & v7;
          unint64_t v38 = v16;
          uint64_t v17 = v12;
          if (v12) {
            goto LABEL_20;
          }
        }

        swift_unknownObjectRetain();
        unint64_t v22 = specialized Rope._Node.subscript.getter(v16, v12);
        swift_unknownObjectRelease_n();
        char v23 = 1;
LABEL_24:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        uint64_t v24 = v34 - v22;
        if (__OFSUB__(v34, v22)) {
          goto LABEL_37;
        }
        if (v35 != *(void *)(v6 + 88)) {
          goto LABEL_38;
        }
        if ((v23 & 1) != 0)
        {
          uint64_t v25 = *(void *)(v6 + 64);
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v16, v25);
          uint64_t v27 = v26;
          swift_unknownObjectRelease();
        }

        else
        {
          uint64_t v27 = *(void *)(v17 + 24 * ((v16 >> ((4 * *(_BYTE *)(v17 + 18) + 8) & 0x3C)) & 0xF) + 32);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        char v28 = specialized AttributedString._AttributeStorage.isEqual(to:comparing:)(v27, a2, v32);
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if ((v28 & 1) == 0)
        {
          a3 = v29;
          uint64_t v8 = v30;
          goto LABEL_33;
        }

        --v11;
        v34 -= v22;
        unint64_t v7 = v16;
        uint64_t v8 = v17;
        if (v33 >= v11)
        {
          uint64_t v34 = v24;
          uint64_t v11 = v33;
          unint64_t v7 = v16;
          uint64_t v8 = v17;
          a3 = v29;
          goto LABEL_33;
        }
      }

      unint64_t v16 = ((((v7 >> v15) & 0xF) - 1) << v15) | ((-15LL << v15) - 1) & v7;
      unint64_t v38 = v16;
      uint64_t v17 = v8;
LABEL_20:
      unint64_t v22 = *(void *)(v17 + 24 * ((v16 >> ((4 * *(_BYTE *)(v17 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease();
      char v23 = 0;
      goto LABEL_24;
    }

uint64_t *AttributedString.Runs._lastOfMatchingRuns(with:comparing:)@<X0>( uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = result[3];
  uint64_t v5 = v3[9];
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v80 = v5;
  if (v6) {
    BOOL v7 = v4 < v5;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    goto LABEL_81;
  }
  uint64_t v88 = v6;
  uint64_t v8 = *result;
  unint64_t v9 = result[1];
  uint64_t v10 = (uint64_t *)result[2];
  uint64_t v11 = result[4];
  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 64LL);
  uint64_t v84 = v12;
  uint64_t v14 = *(void *)(v12 + 88);
  __int128 v125 = *(_OWORD *)result;
  uint64_t v126 = result[2];
  if ((void)v125 != v14)
  {
LABEL_82:
    __break(1u);
    return result;
  }

  uint64_t v83 = v8;
  uint64_t v69 = a3;
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)&v126, (uint64_t)v127);
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)v127, (uint64_t)v128);
  if (v128[0])
  {
    uint64_t v16 = v128[0] + 24 * ((*((void *)&v125 + 1) >> ((4 * *(_BYTE *)(v128[0] + 18) + 8) & 0x3C)) & 0xFLL);
    uint64_t v17 = *(void *)(v16 + 40);
    uint64_t v89 = *(void *)(v16 + 32);
    swift_bridgeObjectRetain();
    uint64_t v68 = v17;
    uint64_t result = (uint64_t *)swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(*((unint64_t *)&v125 + 1), v13);
    uint64_t v89 = v18;
    uint64_t v68 = v19;
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
  }

  uint64_t v20 = v83;
  char v21 = *(uint64_t **)(v84 + 64);
  uint64_t v85 = v4 + 1;
  uint64_t v22 = *(void *)(v84 + 88);
  int64_t v92 = (__int128 *)&v102;
  unint64_t v93 = &v113;
  uint64_t v78 = a2;
  uint64_t v79 = (uint64_t *)(a2 + 40);
  uint64_t v109 = v83;
  unint64_t v110 = v9;
  uint64_t v111 = v10;
LABEL_11:
  if (v20 != v22)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }

  uint64_t v82 = v22;
  if (v10)
  {
    unint64_t v23 = v10[3 * ((v9 >> ((4 * *((_BYTE *)v10 + 18) + 8) & 0x3C)) & 0xF) + 3];
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    unint64_t v23 = specialized Rope._Node.subscript.getter(v9, (uint64_t)v21);
  }

  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  if (__OFADD__(v11, v23)) {
    goto LABEL_78;
  }
  uint64_t v73 = v11 + v23;
  if (v21)
  {
    unint64_t v24 = ((-15LL << ((4 * *((_BYTE *)v21 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v21 + 18) | ((unint64_t)*((unsigned __int16 *)v21 + 8) << ((4 * *((_BYTE *)v21 + 18) + 8) & 0x3C));
    uint64_t result = (uint64_t *)swift_unknownObjectRetain();
  }

  else
  {
    unint64_t v24 = 0LL;
  }

  uint64_t v25 = v82;
  if (v9 >= v24) {
    goto LABEL_79;
  }
  if (v10)
  {
    char v26 = (4 * *((_BYTE *)v10 + 18) + 8) & 0x3C;
    unint64_t v27 = ((v9 >> v26) & 0xF) + 1;
    if (v27 < *((unsigned __int16 *)v10 + 8))
    {
      unint64_t v28 = (v27 << v26) | ((-15LL << v26) - 1) & v9;
      uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
LABEL_26:
      char v21 = v111;
      goto LABEL_33;
    }
  }

  int v29 = *((unsigned __int8 *)v21 + 18);
  char v30 = (4 * v29 + 8) & 0x3C;
  uint64_t v31 = (v9 >> v30) & 0xF;
  *(void *)&__int128 v100 = v31;
  if (v29)
  {
    swift_unknownObjectRetain();
    char v32 = specialized closure #1 in Rope._Node.formSuccessor(of:)( (uint64_t)(v21 + 3),  (uint64_t *)&v100,  (uint64_t)&v109,  (uint64_t)v21,  v29);
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    if ((v32 & 1) != 0)
    {
      uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
      unint64_t v28 = v110;
      goto LABEL_26;
    }
  }

  else
  {
    uint64_t v33 = v31 + 1;
    if (v31 + 1 < (unint64_t)*((unsigned __int16 *)v21 + 8))
    {
      uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
      unint64_t v28 = (v33 << v30) | ((-15LL << v30) - 1) & v9;
      goto LABEL_33;
    }
  }

  if (v21)
  {
    int v34 = *((unsigned __int8 *)v21 + 18);
    uint64_t v35 = *((unsigned __int16 *)v21 + 8);
    uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
    unint64_t v28 = ((-15LL << ((4 * v34 + 8) & 0x3C)) - 1) & v34 | (unint64_t)(v35 << ((4 * v34 + 8) & 0x3C));
  }

  else
  {
    unint64_t v28 = 0LL;
  }

  char v21 = 0LL;
  uint64_t v109 = v25;
LABEL_33:
  if (v85 != v80)
  {
    if (v109 == *(void *)(v84 + 88))
    {
      uint64_t v83 = v109;
      uint64_t v76 = v11;
      uint64_t v77 = v4;
      unint64_t v74 = v9;
      v75 = v10;
      uint64_t v71 = v21;
      unint64_t v72 = v28;
      if (v21)
      {
        uint64_t v36 = &v21[3 * ((v28 >> ((4 * *((_BYTE *)v21 + 18) + 8) & 0x3C)) & 0xF)];
        uint64_t v37 = v36[4];
        uint64_t v38 = v36[5];
        swift_bridgeObjectRetain();
        uint64_t v81 = v38;
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v39 = *(void *)(v84 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v28, v39);
        uint64_t v81 = v40;
        uint64_t v37 = v41;
        swift_unknownObjectRelease();
      }

      uint64_t v70 = v85;
      uint64_t result = (uint64_t *)swift_bridgeObjectRetain();
      uint64_t v42 = 0LL;
      __int128 v43 = v79;
      uint64_t v44 = v88;
      uint64_t v45 = v89;
      uint64_t v94 = v37;
      while (1)
      {
        uint64_t v47 = v42 + 1;
        if (__OFADD__(v42, 1LL))
        {
          __break(1u);
          goto LABEL_77;
        }

        uint64_t v49 = *(v43 - 1);
        uint64_t v48 = *v43;
        if (*(void *)(v45 + 16))
        {
          swift_bridgeObjectRetain_n();
          unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v48);
          if ((v51 & 1) != 0)
          {
            outlined init with copy of AttributedString._AttributeValue( *(void *)(v45 + 56) + 72 * v50,  (uint64_t)&v120);
          }

          else
          {
            uint64_t v124 = 0LL;
            __int128 v122 = 0u;
            __int128 v123 = 0u;
            __int128 v120 = 0u;
            __int128 v121 = 0u;
          }

          swift_bridgeObjectRelease();
          uint64_t v37 = v94;
          if (!*(void *)(v94 + 16))
          {
LABEL_48:
            uint64_t v119 = 0LL;
            __int128 v117 = 0u;
            __int128 v118 = 0u;
            __int128 v115 = 0u;
            __int128 v116 = 0u;
            goto LABEL_55;
          }
        }

        else
        {
          uint64_t v124 = 0LL;
          __int128 v122 = 0u;
          __int128 v123 = 0u;
          __int128 v120 = 0u;
          __int128 v121 = 0u;
          swift_bridgeObjectRetain();
          if (!*(void *)(v37 + 16)) {
            goto LABEL_48;
          }
        }

        swift_bridgeObjectRetain();
        unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v48);
        if ((v53 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v37 + 56) + 72 * v52, (uint64_t)&v115);
        }

        else
        {
          uint64_t v119 = 0LL;
          __int128 v117 = 0u;
          __int128 v118 = 0u;
          __int128 v115 = 0u;
          __int128 v116 = 0u;
        }

        swift_bridgeObjectRelease();
LABEL_55:
        swift_bridgeObjectRelease();
        char v21 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
        outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v120,  (uint64_t)&v109,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v115,  (uint64_t)v93,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if (!v112)
        {
          if (v114) {
            goto LABEL_72;
          }
          outlined destroy of Any?( (uint64_t)&v109,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)&v115,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t result = (uint64_t *)outlined destroy of Any?( (uint64_t)&v120,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          goto LABEL_42;
        }

        outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v109,  (uint64_t)v108,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if (!v114) {
          goto LABEL_71;
        }
        __int128 v54 = *((_OWORD *)v93 + 3);
        v106[2] = *((_OWORD *)v93 + 2);
        v106[3] = v54;
        uint64_t v107 = v93[8];
        __int128 v55 = *((_OWORD *)v93 + 1);
        v106[0] = *(_OWORD *)v93;
        v106[1] = v55;
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v108,  (uint64_t)v105);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v106,  (uint64_t)v104);
        outlined init with copy of (Hashable & Sendable)?( (uint64_t)v105,  (uint64_t)&v100,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined init with copy of (Hashable & Sendable)?( (uint64_t)v104,  (uint64_t)v92,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
        if (v101)
        {
          if (!v103)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
LABEL_40:
            char v46 = 0;
            goto LABEL_41;
          }

          outlined init with take of any PredicateExpression<Self.Output == B1>(&v100, (uint64_t)v97);
          outlined init with take of any PredicateExpression<Self.Output == B1>(v92, (uint64_t)v96);
          uint64_t v56 = v98;
          uint64_t v87 = v99;
          Swift::String v86 = __swift_project_boxed_opaque_existential_1(v97, v98);
          int64_t v91 = &v68;
          uint64_t v57 = *(void *)(v56 - 8);
          MEMORY[0x1895F8858](v86);
          unint64_t v59 = (char *)&v68 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v96,  (uint64_t)&v95);
          uint64_t v60 = type metadata accessor for Optional();
          unint64_t v90 = &v68;
          uint64_t v61 = *(void *)(v60 - 8);
          MEMORY[0x1895F8858](v60);
          uint64_t v63 = (char *)&v68 - v62;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          int v64 = swift_dynamicCast();
          __int128 v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
          if (v64)
          {
            v65(v63, 0LL, 1LL, v56);
            (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v59, v63, v56);
            char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v56);
          }

          else
          {
            v65(v63, 1LL, 1LL, v56);
            (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v60);
            char v46 = 0;
          }

          uint64_t v44 = v88;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
          uint64_t v45 = v89;
        }

        else
        {
          if (v103)
          {
            outlined destroy of Any?( (uint64_t)v92,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            goto LABEL_40;
          }

          char v46 = 1;
        }

uint64_t BigString._firstConstraintBreak(in:with:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[4];
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *a1;
    if ((unint64_t)*a1 >> 10 != v3 >> 10)
    {
      unint64_t v29 = (unint64_t)*a1 >> 10;
      uint64_t v31 = a1[7];
      uint64_t v32 = a1[6];
      uint64_t v33 = a1[5];
      uint64_t v6 = a1[1];
      uint64_t v30 = a1[2];
      uint64_t v7 = a1[3];
      swift_bridgeObjectRetain();
      uint64_t v8 = 40LL;
      uint64_t v9 = v4;
      while (*(void *)(a2 + v8))
      {
        swift_bridgeObjectRelease();
        v8 += 16LL;
        if (!--v9)
        {
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v12 = v32;
          uint64_t v11 = v33;
          uint64_t v14 = v30;
          uint64_t v13 = v31;
          goto LABEL_10;
        }
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      BigString.utf8.getter();
      BigString.UTF8View.subscript.getter();
      outlined release of Locale((uint64_t)v34);
      v50[0] = v5;
      v50[1] = v6;
      uint64_t v14 = v30;
      v50[2] = v30;
      v50[3] = v7;
      v50[4] = v5;
      v50[5] = v6;
      v50[6] = v30;
      v50[7] = v7;
      specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, v50, v37);
      uint64_t result = outlined release of Locale((uint64_t)v35);
      uint64_t v12 = v32;
      uint64_t v11 = v33;
      uint64_t v13 = v31;
      if (v41 != 2)
      {
        unint64_t v3 = v38;
        if (v29 > v38 >> 10)
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }

        uint64_t v11 = v39;
        uint64_t v12 = v40;
        uint64_t v13 = v41;
      }

unint64_t BigString._lastConstraintBreak(in:with:)(unint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    unint64_t v5 = a1[4];
    if (v5 >> 10 != v3 >> 10)
    {
      unint64_t v39 = a1[3];
      unint64_t v40 = a1[2];
      unint64_t v38 = v5 >> 10;
      uint64_t v42 = a1[1];
      unint64_t v6 = a1[5];
      unint64_t v7 = a1[6];
      unint64_t v8 = a1[7];
      swift_bridgeObjectRetain();
      uint64_t v9 = 40LL;
      uint64_t v10 = v4;
      unint64_t v41 = v3;
      while (*(void *)(a2 + v9))
      {
        swift_bridgeObjectRelease();
        v9 += 16LL;
        if (!--v10)
        {
          unint64_t result = swift_bridgeObjectRelease();
          goto LABEL_12;
        }
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      unint64_t result = BigString.startIndex.getter();
      if (v38 > result >> 10)
      {
        BigString.utf8.getter();
        uint64_t v12 = BigString.UTF8View.index(before:)();
        uint64_t v36 = v13;
        unint64_t v37 = v7;
        unint64_t v14 = v12;
        uint64_t v34 = v16;
        uint64_t v35 = v15;
        outlined release of Locale((uint64_t)v43);
        BigString.utf8.getter();
        BigString.UTF8View.subscript.getter();
        unint64_t result = outlined release of Locale((uint64_t)v44);
        if (v38 < v14 >> 10)
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
        }

        else
        {
          v59[0] = v14;
          v59[1] = v36;
          v59[2] = v35;
          v59[3] = v34;
          v59[4] = v5;
          v59[5] = v6;
          unint64_t v7 = v37;
          v59[6] = v37;
          v59[7] = v8;
          specialized BidirectionalCollection<>._getBlock(for:in:)(1LL, v59, &v47);
          unint64_t result = outlined release of Locale((uint64_t)v45);
          uint64_t v17 = v42;
          unint64_t v19 = v39;
          unint64_t v18 = v40;
          if (v50 == 2) {
            goto LABEL_13;
          }
          unint64_t v41 = v47;
          if (v38 >= v47 >> 10)
          {
            uint64_t v17 = v48;
            unint64_t v18 = v49;
            unint64_t v19 = v50;
            goto LABEL_13;
          }
        }

        __break(1u);
        return result;
      }

unint64_t BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(v1 + 80) >> 10;
  if (v2 <= *(void *)(v1 + 48) >> 10) {
    return 0LL;
  }
  uint64_t v4 = BigSubstring.UnicodeScalarView.subscript.getter();
  char v5 = specialized Sequence<>.contains(_:)(v4, a1);
  unint64_t result = BigSubstring.UnicodeScalarView.index(after:)();
  if ((v5 & 1) != 0) {
    return result;
  }
  if (v2 <= result >> 10) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = result;
  while (1)
  {
    unint64_t result = BigSubstring.UnicodeScalarView.subscript.getter();
    if (v7)
    {
      if (*(_DWORD *)(a1 + 32) == (_DWORD)result) {
        return v8;
      }
      if (v7 != 1)
      {
        if (*(_DWORD *)(a1 + 36) == (_DWORD)result) {
          return v8;
        }
        if (v7 != 2) {
          break;
        }
      }
    }

uint64_t BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)(uint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + 48) >> 10;
  if (v3 == *(void *)(v1 + 80) >> 10) {
    return 0LL;
  }
  unint64_t v4 = BigSubstring.UnicodeScalarView.index(before:)();
  uint64_t v5 = BigSubstring.UnicodeScalarView.subscript.getter();
  uint64_t v11 = a1;
  if ((specialized Sequence<>.contains(_:)(v5, a1) & 1) != 0) {
    return v4;
  }
  if (v3 >= v4 >> 10) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  while (1)
  {
    unint64_t v8 = BigSubstring.UnicodeScalarView.index(before:)();
    uint64_t result = BigSubstring.UnicodeScalarView.subscript.getter();
    if (v7)
    {
      if (*(_DWORD *)(v11 + 32) == (_DWORD)result) {
        return v4;
      }
      if (v7 != 1)
      {
        if (*(_DWORD *)(v11 + 36) == (_DWORD)result) {
          return v4;
        }
        if (v7 != 2) {
          break;
        }
      }
    }

__int128 *specialized static AttributedString.Runs.== infix(_:_:)(__int128 *result, uint64_t a2)
{
  __int128 v2 = result[11];
  __int128 v35 = result[10];
  __int128 v36 = v2;
  uint64_t v37 = *((void *)result + 24);
  __int128 v3 = result[7];
  __int128 v31 = result[6];
  __int128 v32 = v3;
  __int128 v4 = result[9];
  __int128 v33 = result[8];
  __int128 v34 = v4;
  __int128 v5 = result[3];
  __int128 v27 = result[2];
  __int128 v28 = v5;
  __int128 v6 = result[5];
  __int128 v29 = result[4];
  __int128 v30 = v6;
  __int128 v7 = result[1];
  __int128 v25 = *result;
  __int128 v26 = v7;
  __int128 v8 = *(_OWORD *)(a2 + 176);
  __int128 v22 = *(_OWORD *)(a2 + 160);
  __int128 v23 = v8;
  uint64_t v24 = *(void *)(a2 + 192);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  __int128 v18 = *(_OWORD *)(a2 + 96);
  __int128 v19 = v9;
  __int128 v10 = *(_OWORD *)(a2 + 144);
  __int128 v20 = *(_OWORD *)(a2 + 128);
  __int128 v21 = v10;
  __int128 v11 = *(_OWORD *)(a2 + 48);
  v15[2] = *(_OWORD *)(a2 + 32);
  v15[3] = v11;
  __int128 v12 = *(_OWORD *)(a2 + 80);
  __int128 v16 = *(_OWORD *)(a2 + 64);
  __int128 v17 = v12;
  __int128 v13 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v13;
  if ((*((void *)&v35 + 1) >> 11) - (*((void *)&v33 + 1) >> 11) != (*((void *)&v22 + 1) >> 11)
                                                                      - (*((void *)&v20 + 1) >> 11))
    goto LABEL_6;
  if (__OFSUB__(*((void *)&v29 + 1), *((void *)&v25 + 1)))
  {
    __break(1u);
  }

  else if (!__OFSUB__(*((void *)&v16 + 1), *((void *)&v15[0] + 1)))
  {
    if (*((void *)&v29 + 1) - *((void *)&v25 + 1) == *((void *)&v16 + 1) - *((void *)&v15[0] + 1))
    {
      char v14 = specialized Sequence<>.elementsEqual<A>(_:)((uint64_t)v15);
      return (__int128 *)(v14 & 1);
    }

uint64_t outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.Runs.Index,  &type metadata for AttributedString.Runs.Index);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.Runs.Index,  &type metadata for AttributedString.Runs.Index);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index);
  }

  return result;
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in AttributedString.Runs.Index()
{
  return MEMORY[0x189618790];
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.Runs,  &type metadata for AttributedString.Runs);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.Runs,  &type metadata for AttributedString.Runs);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.Runs,  &type metadata for AttributedString.Runs);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs> and conformance <> DefaultIndices<A>( &lazy protocol witness table cache variable for type DefaultIndices<AttributedString.Runs> and conformance <> DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<AttributedString.Runs>,  MEMORY[0x189617A18]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs> and conformance <> DefaultIndices<A>( &lazy protocol witness table cache variable for type Slice<AttributedString.Runs> and conformance <> Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString.Runs>,  MEMORY[0x18961A5C8]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs> and conformance <> DefaultIndices<A>( unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    unint64_t v7 = lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs();
    uint64_t result = MEMORY[0x186E20D4C](a3, v6, &v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type DefaultIndices<AttributedString.Runs> and conformance DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<AttributedString.Runs>,  MEMORY[0x189617A28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Slice<AttributedString.Runs> and conformance Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString.Runs>,  MEMORY[0x18961A5E8]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IndexingIterator<AttributedString.Runs> and conformance IndexingIterator<A>,  &demangling cache variable for type metadata for IndexingIterator<AttributedString.Runs>,  MEMORY[0x189619678]);
}

uint64_t initializeWithCopy for AttributedString.Runs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.Runs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __int128 v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  __int128 v9 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  __int128 v9 = *(_OWORD *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for AttributedString.Runs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v4;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 200)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 200) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 200) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString.Runs()
{
  return &type metadata for AttributedString.Runs;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.Index(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.Index( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(_BYTE *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString.Runs.Index()
{
  return &type metadata for AttributedString.Runs.Index;
}

uint64_t NSNotificationCenter.notifications(named:object:)(void *a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectRetain();
  NSNotificationCenter.Notifications.init(center:name:object:)(v2, a1, a2);
  return v5;
}

uint64_t type metadata accessor for NSNotificationCenter.Notifications()
{
  return objc_opt_self();
}

uint64_t NSNotificationCenter.Notifications.Iterator.next()(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t NSNotificationCenter.Notifications.Iterator.next()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
  *uint64_t v1 = v0;
  v1[1] = NSNotificationCenter.Notifications.Iterator.next();
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NSNotificationCenter.Notifications.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = closure #1 in NSNotificationCenter.Notifications.Iterator.next();
  v5[35] = a1;
  v5[36] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in NSNotificationCenter.Notifications.Iterator.next()()
{
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t NSNotificationCenter.Notifications.next()(uint64_t a1)
{
  *(void *)(v2 + 280) = a1;
  *(void *)(v2 + 288) = v1;
  return swift_task_switch();
}

uint64_t NSNotificationCenter.Notifications.next()()
{
  uint64_t v1 = (uint64_t)(v0 + 10);
  uint64_t v2 = v0[36];
  v0[7] = v0 + 23;
  v0[2] = v0;
  v0[3] = NSNotificationCenter.Notifications.next();
  uint64_t v3 = swift_continuation_init();
  int v4 = *(os_unfair_lock_s **)(v2 + 24);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v3;
  int v6 = v4 + 4;
  v4 += 16;
  os_unfair_lock_lock(v4);
  closure #1 in closure #1 in NSNotificationCenter.Notifications.next()(v6, *(void *)(v5 + 16), (uint64_t)(v0 + 10));
  os_unfair_lock_unlock(v4);
  swift_task_dealloc();
  uint64_t v7 = v0[10];
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t)(v0 + 29);
    uint64_t v10 = (uint64_t)(v0 + 11);
    swift_bridgeObjectRetain();
    uint64_t v11 = 0LL;
    do
    {
      uint64_t v12 = *(void *)(v7 + 8 * v11++ + 32);
      outlined init with copy of (Hashable & Sendable)?( v10,  v9,  &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
      outlined init with take of LocalePreferences?( v9,  *(void *)(*(void *)(v12 + 64) + 40LL),  &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
      swift_continuation_resume();
    }

    while (v8 != v11);
    swift_bridgeObjectRelease();
  }

  outlined destroy of NSNotificationCenter.Notifications.Resumption(v1);
  return swift_continuation_await();
}

{
  void *v0;
  outlined init with take of LocalePreferences?( *v0 + 184LL,  *v0 + 136LL,  &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
  return swift_task_switch();
}

{
  uint64_t v0;
  _OWORD *v1;
  outlined init with take of LocalePreferences?( v0 + 136,  v0 + 80,  &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
  uint64_t v1 = *(_OWORD **)(v0 + 280);
  if (*(void *)(v0 + 80))
  {
    outlined init with copy of Notification(v0 + 80, *(void **)(v0 + 280));
    outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper(v0 + 80);
  }

  else
  {
    outlined destroy of Any?( v0 + 80,  &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    *uint64_t v1 = 0u;
    v1[1] = 0u;
    v1[2] = 0u;
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSNotificationCenter.Notifications.Iterator( uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = *v1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSNotificationCenter.Notifications.Iterator()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AsyncIteratorProtocol.next() in conformance NSNotificationCenter.Notifications.Iterator;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW( uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  if (a2)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }

  return swift_task_switch();
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_()
{
  *(void *)(v0 + 32) = **(void **)(v0 + 24);
  return swift_task_switch();
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY1_()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
  *uint64_t v1 = v0;
  v1[1] = _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ2_;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ2_()
{
  return swift_task_switch();
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY3_()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NSNotificationCenter.Notifications.init(center:name:object:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v10 = MEMORY[0x18961AFE8];
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t v13 = MEMORY[0x18961AFE8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSNotificationCenter.Notifications.State, os_unfair_lock_s>);
  uint64_t v7 = (os_unfair_lock_s *)swift_allocObject();
  v7[16]._os_unfair_lock_opaque = 0;
  outlined init with copy of NSNotificationCenter.Notifications.State(&v10, (uint64_t)&v7[4]);
  outlined destroy of NSNotificationCenter.Notifications.State((uint64_t)&v10);
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v7;
  id v8 = a1;
  swift_retain();
  os_unfair_lock_lock(v7 + 16);
  closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)((uint64_t)&v7[4], v8, (uint64_t)a2, a3);
  os_unfair_lock_unlock(v7 + 16);
  swift_release();

  swift_unknownObjectRelease();
  return v3;
}

uint64_t partial apply for closure #1 in NSNotificationCenter.Notifications.Iterator.next()(uint64_t a1)
{
  int v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *int v4 = v2;
  v4[1] = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  return closure #1 in NSNotificationCenter.Notifications.Iterator.next()(a1, v1);
}

uint64_t closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  char v14 = partial apply for closure #1 in closure #1 in NSNotificationCenter.Notifications.init(center:name:object:);
  uint64_t v15 = v8;
  v12[0] = MEMORY[0x1895F87A8];
  v12[1] = 1107296256LL;
  v12[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  ObjectType = &block_descriptor_11;
  uint64_t v9 = _Block_copy(v12);
  swift_release();
  id v10 = objc_msgSend(a2, sel__addObserverForName_object_queue_usingBlock_, a3, a4, 0, v9);
  _Block_release(v9);
  ObjectType = (void *)swift_getObjectType();
  v12[0] = v10;
  return outlined assign with take of NSNotificationCenter.Notifications.NotificationWrapper?( (uint64_t)v12,  a1 + 8,  &demangling cache variable for type metadata for Sendable?);
}

uint64_t closure #1 in closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)(uint64_t a1)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    outlined init with copy of Notification(a1, v3);
    NSNotificationCenter.Notifications.send(_:)((uint64_t)v3);
    swift_release();
    return outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper((uint64_t)v3);
  }

  return result;
}

uint64_t NSNotificationCenter.Notifications.send(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  int v4 = v3 + 4;
  uint64_t v5 = v3 + 16;
  os_unfair_lock_lock(v3 + 16);
  closure #1 in NSNotificationCenter.Notifications.send(_:)(v4, a1, (uint64_t)v13);
  os_unfair_lock_unlock(v5);
  outlined init with copy of (Hashable & Sendable)?( (uint64_t)v13,  (uint64_t)&v9,  &demangling cache variable for type metadata for (UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>, NSNotificationCenter.Notifications.NotificationWrapper?)?);
  uint64_t v6 = v9;
  if (v9)
  {
    uint64_t v11 = v9;
    outlined init with take of LocalePreferences?( (uint64_t)v10,  (uint64_t)v12,  &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    uint64_t v9 = v6;
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v12,  (uint64_t)v10,  &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    outlined init with take of LocalePreferences?( (uint64_t)v10,  *(void *)(*(void *)(v6 + 64) + 40LL),  &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    swift_continuation_resume();
    outlined destroy of Any?( (uint64_t)&v11,  &demangling cache variable for type metadata for (UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>, NSNotificationCenter.Notifications.NotificationWrapper?));
    uint64_t v7 = (uint64_t *)v13;
  }

  else
  {
    outlined destroy of Any?( (uint64_t)v13,  &demangling cache variable for type metadata for (UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>, NSNotificationCenter.Notifications.NotificationWrapper?)?);
    uint64_t v7 = &v9;
  }

  return outlined destroy of Any?( (uint64_t)v7,  &demangling cache variable for type metadata for (UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>, NSNotificationCenter.Notifications.NotificationWrapper?)?);
}

uint64_t NSNotificationCenter.Notifications.deinit()
{
  swift_release();
  return v0;
}

Swift::Void __swiftcall NSNotificationCenter.Notifications.teardown()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v3 = (uint64_t)&v2[4];
  int v4 = v2 + 16;
  os_unfair_lock_lock(v2 + 16);
  closure #1 in NSNotificationCenter.Notifications.teardown()(v3, (uint64_t)&v12);
  os_unfair_lock_unlock(v4);
  outlined init with take of LocalePreferences?( (uint64_t)&v12,  (uint64_t)v20,  &demangling cache variable for type metadata for Sendable?);
  v18[0] = v14;
  v18[1] = v15;
  v18[2] = v16;
  uint64_t v19 = v17;
  outlined init with copy of (Hashable & Sendable)?( (uint64_t)v20,  (uint64_t)&v10,  &demangling cache variable for type metadata for Sendable?);
  if (v11)
  {
    outlined init with take of Any(&v10, &v12);
    uint64_t v5 = *(void **)(v1 + 16);
    __swift_project_boxed_opaque_existential_1(&v12, v13);
    objc_msgSend(v5, sel_removeObserver_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v10, &demangling cache variable for type metadata for Sendable?);
  }

  uint64_t v6 = *(void *)&v18[0];
  uint64_t v7 = *(void *)(*(void *)&v18[0] + 16LL);
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = 0LL;
    do
    {
      uint64_t v9 = *(void *)(v6 + 8 * v8++ + 32);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v18 + 8,  (uint64_t)&v12,  &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
      outlined init with take of LocalePreferences?( (uint64_t)&v12,  *(void *)(*(void *)(v9 + 64) + 40LL),  &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
      swift_continuation_resume();
    }

    while (v7 != v8);
    swift_bridgeObjectRelease();
  }

  outlined destroy of NSNotificationCenter.Notifications.Resumption((uint64_t)v18);
  outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for Sendable?);
}

uint64_t NSNotificationCenter.Notifications.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

double closure #1 in NSNotificationCenter.Notifications.send(_:)@<D0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((void *)&v26 + 1);
  outlined destroy of Any?((uint64_t)&v25, &demangling cache variable for type metadata for Sendable?);
  if (v6)
  {
    uint64_t v7 = (void *)*a1;
    unint64_t v8 = *(void *)(*a1 + 16LL);
    if (v8)
    {
      if (v8 >= 7) {
        specialized Array.replaceSubrange<A>(_:with:)(0LL, 1LL);
      }
      outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper(a2, &v25);
      uint64_t v9 = (void *)*a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v11 = v9[2];
      unint64_t v10 = v9[3];
      if (v11 >= v10 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v10 > 1),  v11 + 1,  1,  v9);
      }
      v9[2] = v11 + 1;
      uint64_t v7 = v9 + 4;
      __int128 v12 = &v9[6 * v11 + 4];
      __int128 v13 = v25;
      __int128 v14 = v27;
      v12[1] = v26;
      v12[2] = v14;
      *__int128 v12 = v13;
      *a1 = v9;
      uint64_t v15 = a1[5];
      if (!*(void *)(v15 + 16)) {
        goto LABEL_18;
      }
      uint64_t v16 = *(void *)(v15 + 32);
      specialized Array.replaceSubrange<A>(_:with:)(0LL, 1LL);
      *(void *)a3 = v16;
      if (v9[2])
      {
        outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper( (uint64_t)(v9 + 4),  (void *)(a3 + 8));
        specialized Array.replaceSubrange<A>(_:with:)(0LL, 1LL);
        return result;
      }

      __break(1u);
    }

    else
    {
      uint64_t v18 = a1[5];
      if (*(void *)(v18 + 16))
      {
        uint64_t v19 = *(void *)(v18 + 32);
        specialized Array.replaceSubrange<A>(_:with:)(0LL, 1LL);
        *(void *)a3 = v19;
        outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper(a2, (void *)(a3 + 8));
        return result;
      }

      outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper(a2, &v25);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
        goto LABEL_15;
      }
    }

    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, 1LL, 1, v7);
LABEL_15:
    unint64_t v21 = v7[2];
    unint64_t v20 = v7[3];
    if (v21 >= v20 >> 1) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v20 > 1),  v21 + 1,  1,  v7);
    }
    v7[2] = v21 + 1;
    __int128 v22 = &v7[6 * v21];
    __int128 v23 = v25;
    __int128 v24 = v27;
    v22[3] = v26;
    v22[4] = v24;
    v22[2] = v23;
    *a1 = v7;
  }

uint64_t closure #1 in closure #1 in NSNotificationCenter.Notifications.next()@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 5;
  uint64_t v7 = (void *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v7[2] + 1LL,  1,  v7);
  }
  unint64_t v9 = v7[2];
  unint64_t v8 = v7[3];
  if (v9 >= v8 >> 1) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v7);
  }
  v7[2] = v9 + 1;
  v7[v9 + 4] = a2;
  a1[5] = v7;
  outlined init with copy of (Hashable & Sendable)?( (uint64_t)(a1 + 1),  (uint64_t)v19,  &demangling cache variable for type metadata for Sendable?);
  uint64_t v10 = *(void *)&v19[24];
  uint64_t result = outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for Sendable?);
  if (!v10)
  {
    uint64_t v15 = *v6;
    memset(&v19[8], 0, 48);
    *(void *)uint64_t v19 = v15;
    swift_bridgeObjectRetain();
    outlined destroy of Any?( (uint64_t)&v19[8],  &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    memset(&v19[8], 0, 48);
    __int128 v16 = *(_OWORD *)&v19[16];
    *(_OWORD *)a3 = *(_OWORD *)v19;
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v19[32];
    *(void *)(a3 + 48) = *(void *)&v19[48];
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v6 = MEMORY[0x18961AFE8];
    return result;
  }

  uint64_t v12 = *a1;
  if (!*(void *)(*a1 + 16LL))
  {
    memset(&v19[8], 0, 48);
    *(void *)uint64_t v19 = MEMORY[0x18961AFE8];
    uint64_t result = outlined destroy of Any?( (uint64_t)&v19[8],  &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    memset(&v19[8], 0, 48);
    goto LABEL_12;
  }

  if (*(void *)(*v6 + 16LL))
  {
    uint64_t v13 = *(void *)(*v6 + 32LL);
    uint64_t result = (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(0LL, 1LL);
    if (*(void *)(v12 + 16))
    {
      outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper(v12 + 32, v18);
      specialized Array.replaceSubrange<A>(_:with:)(0LL, 1LL);
      memset(&v19[8], 0, 48);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_183720D90;
      *(void *)(v14 + 32) = v13;
      *(void *)uint64_t v19 = v14;
      uint64_t result = outlined assign with take of NSNotificationCenter.Notifications.NotificationWrapper?( (uint64_t)v18,  (uint64_t)&v19[8],  &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
LABEL_12:
      __int128 v17 = *(_OWORD *)&v19[16];
      *(_OWORD *)a3 = *(_OWORD *)v19;
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&v19[32];
      *(void *)(a3 + 48) = *(void *)&v19[48];
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t closure #1 in NSNotificationCenter.Notifications.teardown()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  outlined init with copy of (Hashable & Sendable)?( (uint64_t)v8,  a2,  &demangling cache variable for type metadata for Sendable?);
  uint64_t v4 = *(void *)(a1 + 40);
  memset(&v7[8], 0, 48);
  *(void *)uint64_t v7 = v4;
  swift_bridgeObjectRetain();
  outlined destroy of Any?( (uint64_t)&v7[8],  &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
  memset(&v7[8], 0, 48);
  __int128 v5 = *(_OWORD *)&v7[16];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v7;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&v7[32];
  *(void *)(a2 + 80) = *(void *)&v7[48];
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = MEMORY[0x18961AFE8];
  return outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for Sendable?);
}

void NSNotificationCenter.Notifications.makeAsyncIterator()(void *a1@<X8>)
{
  *a1 = v1;
}

unint64_t lazy protocol witness table accessor for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator;
  if (!lazy protocol witness table cache variable for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSNotificationCenter.Notifications.Iterator,  &type metadata for NSNotificationCenter.Notifications.Iterator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator);
  }

  return result;
}

uint64_t method lookup function for NSNotificationCenter.Notifications()
{
  return swift_lookUpClassMethod();
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Notifications.Iterator()
{
  return &type metadata for NSNotificationCenter.Notifications.Iterator;
}

uint64_t destroy for NSNotificationCenter.Notifications.State(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NSNotificationCenter.Notifications.State(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  __int128 v5 = a2 + 1;
  uint64_t v6 = a2[4];
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
  }

  else
  {
    __int128 v7 = v5[1];
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 24) = v7;
  }

  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NSNotificationCenter.Notifications.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v4)
    {
      *(void *)(a1 + 32) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
      goto LABEL_8;
    }

uint64_t assignWithTake for NSNotificationCenter.Notifications.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Notifications.State()
{
  return &type metadata for NSNotificationCenter.Notifications.State;
}

uint64_t closure #1 in NSNotificationCenter.Notifications.Iterator.next()partial apply(uint64_t a1)
{
  __int128 v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *__int128 v4 = v2;
  v4[1] = partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  return closure #1 in NSNotificationCenter.Notifications.Iterator.next()(a1, v1);
}

uint64_t outlined destroy of NSNotificationCenter.Notifications.Resumption(uint64_t a1)
{
  return a1;
}

void *outlined init with copy of Notification(uint64_t a1, void *a2)
{
  return a2;
}

uint64_t outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper(uint64_t a1)
{
  return a1;
}

void *outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper( uint64_t a1, void *a2)
{
  return a2;
}

uint64_t outlined init with copy of NSNotificationCenter.Notifications.State(void *a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of NSNotificationCenter.Notifications.State(uint64_t a1)
{
  return a1;
}

uint64_t sub_1831BD8EC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)( uint64_t a1)
{
  return closure #1 in closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)(a1);
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t outlined assign with take of NSNotificationCenter.Notifications.NotificationWrapper?( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t destroy for NSNotificationCenter.Notifications.Resumption(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {

    if (*(void *)(a1 + 40)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    }
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t initializeWithCopy for NSNotificationCenter.Notifications.Resumption(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int128 v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 8);
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = *(void *)(a2 + 40);
    id v8 = v6;
    if (v7)
    {
      *(void *)(a1 + 40) = v7;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 16, a2 + 16, v7);
    }

    else
    {
      __int128 v10 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v10;
    }

    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v9 = v5[1];
    *__int128 v4 = *v5;
    *(_OWORD *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + 40) = v5[2];
  }

  return a1;
}

uint64_t assignWithCopy for NSNotificationCenter.Notifications.Resumption(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int128 v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v7 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 8);
  if (v5)
  {
    if (v6)
    {
      *(void *)(a1 + 8) = v6;
      id v8 = v6;

      uint64_t v9 = *(void *)(a2 + 40);
      if (*(void *)(a1 + 40))
      {
        if (v9)
        {
          __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
LABEL_15:
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }

        __swift_destroy_boxed_opaque_existential_1(a1 + 16);
      }

      else if (v9)
      {
        *(void *)(a1 + 40) = v9;
        (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 16, a2 + 16);
        goto LABEL_15;
      }

      __int128 v16 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v16;
      goto LABEL_15;
    }

    outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper(a1 + 8);
    __int128 v13 = *(_OWORD *)(a2 + 24);
    __int128 v12 = *(_OWORD *)(a2 + 40);
    *__int128 v4 = *v7;
    *(_OWORD *)(a1 + 24) = v13;
    *(_OWORD *)(a1 + 40) = v12;
  }

  else if (v6)
  {
    *(void *)(a1 + 8) = v6;
    uint64_t v10 = *(void *)(a2 + 40);
    id v11 = v6;
    if (v10)
    {
      *(void *)(a1 + 40) = v10;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8))(a1 + 16, a2 + 16, v10);
    }

    else
    {
      __int128 v17 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v17;
    }

    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v14 = *v7;
    __int128 v15 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v15;
    *__int128 v4 = v14;
  }

  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NSNotificationCenter.Notifications.Resumption(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  __int128 v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v4) {
    goto LABEL_7;
  }
  if (!v5)
  {
    outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper(a1 + 8);
LABEL_7:
    __int128 v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }

  *(void *)(a1 + 8) = v5;

  if (*(void *)(a1 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NSNotificationCenter.Notifications.Resumption(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSNotificationCenter.Notifications.Resumption( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Notifications.Resumption()
{
  return &type metadata for NSNotificationCenter.Notifications.Resumption;
}

void *initializeWithCopy for NSNotificationCenter.Notifications.NotificationWrapper( void *a1, uint64_t a2)
{
  __int128 v4 = *(void **)a2;
  *a1 = *(void *)a2;
  uint64_t v5 = a1 + 1;
  __int128 v6 = (_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 32);
  id v8 = v4;
  if (v7)
  {
    a1[4] = v7;
    (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v7 - 8))(v5, v6, v7);
  }

  else
  {
    __int128 v9 = v6[1];
    *uint64_t v5 = *v6;
    v5[1] = v9;
  }

  a1[5] = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NSNotificationCenter.Notifications.NotificationWrapper(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v7)
    {
      *(void *)(a1 + 32) = v7;
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, a2 + 8);
      goto LABEL_8;
    }

uint64_t assignWithTake for NSNotificationCenter.Notifications.NotificationWrapper(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  __int128 v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NSNotificationCenter.Notifications.State(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSNotificationCenter.Notifications.State( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Notifications.NotificationWrapper()
{
  return &type metadata for NSNotificationCenter.Notifications.NotificationWrapper;
}

double parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)@<D0>( char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = qword_1837BF9D8[*a1];
  if (*(void *)(a2 + 16)
    && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(qword_1837BF9D8[*a1]), (v10 & 1) != 0))
  {
    id v11 = (void *)(*(void *)(a2 + 56) + 16 * v8);
    uint64_t v12 = v11[1];
    *a4 = *v11;
    a4[1] = v12;
    swift_bridgeObjectRetain();
  }

  else if ((v6 & a3) != 0)
  {
    *a4 = 0LL;
    a4[1] = 0LL;
  }

  else
  {
    double result = 0.0;
    *(_OWORD *)a4 = xmmword_183723F60;
  }

  return result;
}

unint64_t parseStrategyForPort #1 () in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)@<X0>( unint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (*(void *)(result + 16))
  {
    unint64_t v5 = result;
    double result = specialized __RawDictionaryStorage.find<A>(_:)(16LL);
    if ((v6 & 1) != 0)
    {
      uint64_t v7 = (uint64_t *)(*(void *)(v5 + 56) + 16 * result);
      uint64_t v8 = *v7;
      unint64_t v9 = v7[1];
      uint64_t v10 = HIBYTE(v9) & 0xF;
      uint64_t v11 = *v7 & 0xFFFFFFFFFFFFLL;
      if ((v9 & 0x2000000000000000LL) != 0 ? HIBYTE(v9) & 0xF : *v7 & 0xFFFFFFFFFFFFLL)
      {
        if ((v9 & 0x1000000000000000LL) == 0)
        {
          if ((v9 & 0x2000000000000000LL) == 0)
          {
            if ((v8 & 0x1000000000000000LL) != 0) {
              __int128 v13 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else {
              __int128 v13 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            }
            double result = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v13, v11, 10LL);
            uint64_t v14 = result;
            char v16 = v15 & 1;
            goto LABEL_34;
          }

          v31[0] = *v7;
          v31[1] = v9 & 0xFFFFFFFFFFFFFFLL;
          if (v8 == 43)
          {
            if (!v10) {
              goto LABEL_63;
            }
            if (v10 == 1) {
              goto LABEL_61;
            }
            uint64_t v14 = (BYTE1(v8) - 48);
            if (v10 != 2)
            {
              uint64_t v14 = 10LL * (BYTE1(v8) - 48) + (BYTE2(v8) - 48);
              uint64_t v17 = v10 - 3;
              if (v10 != 3)
              {
                uint64_t v18 = (unsigned __int8 *)v31 + 3;
                do
                {
                  unsigned int v19 = *v18 - 48;
                  if (v19 > 9) {
                    goto LABEL_33;
                  }
                  uint64_t v20 = 10 * v14;
                  uint64_t v14 = v20 + v19;
                  ++v18;
                }

                while (--v17);
              }
            }
          }

          else
          {
            if (v8 == 45)
            {
              if (v10)
              {
                if (v10 != 1)
                {
                  if ((BYTE1(v8) - 48) < 0xAu)
                  {
                    if (v10 == 2)
                    {
                      uint64_t v14 = -(uint64_t)(BYTE1(v8) - 48);
                      char v32 = 0;
                      goto LABEL_35;
                    }

                    if ((BYTE2(v8) - 48) <= 9u)
                    {
                      uint64_t v14 = -10LL * (BYTE1(v8) - 48) - (BYTE2(v8) - 48);
                      uint64_t v25 = v10 - 3;
                      if (v10 == 3) {
                        goto LABEL_48;
                      }
                      __int128 v26 = (unsigned __int8 *)v31 + 3;
                      while (1)
                      {
                        unsigned int v27 = *v26 - 48;
                        if (v27 > 9) {
                          break;
                        }
                        uint64_t v28 = 10 * v14;
                        uint64_t v14 = v28 - v27;
                        ++v26;
                        if (!--v25) {
                          goto LABEL_48;
                        }
                      }
                    }
                  }

uint64_t closure #1 in _NSSwiftURLComponents.components.getter@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v2 = a1[7];
  __int128 v3 = a1[5];
  __int128 v19 = a1[6];
  __int128 v20 = v2;
  __int128 v4 = a1[7];
  v21[0] = a1[8];
  *(_OWORD *)((char *)v21 + 10) = *(_OWORD *)((char *)a1 + 138);
  __int128 v5 = a1[3];
  __int128 v7 = a1[1];
  __int128 v15 = a1[2];
  __int128 v6 = v15;
  __int128 v16 = v5;
  __int128 v8 = a1[3];
  __int128 v9 = a1[5];
  __int128 v17 = a1[4];
  __int128 v10 = v17;
  __int128 v18 = v9;
  __int128 v11 = a1[1];
  v14[0] = *a1;
  __int128 v12 = v14[0];
  v14[1] = v11;
  a2[6] = v19;
  a2[7] = v4;
  a2[8] = a1[8];
  *(_OWORD *)((char *)a2 + 138) = *(_OWORD *)((char *)a1 + 138);
  a2[2] = v6;
  a2[3] = v8;
  a2[4] = v10;
  a2[5] = v3;
  *a2 = v12;
  a2[1] = v7;
  return outlined retain of URLComponents((uint64_t)v14);
}

id _NSSwiftURLComponents.init(string:)(uint64_t a1, unint64_t a2)
{
  __int128 v5 = v2;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(a1, a2, 1, (uint64_t)v24);
  outlined init with take of LocalePreferences?( (uint64_t)v24,  (uint64_t)v27,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?( (uint64_t)v24,  (uint64_t)v25,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v25) == 1)
  {

    swift_bridgeObjectRelease();
    type metadata accessor for _NSSwiftURLComponents();
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  else
  {
    __int128 v20 = v25[6];
    __int128 v21 = v25[7];
    v22[0] = v26[0];
    *(_OWORD *)((char *)v22 + 10) = *(_OWORD *)((char *)v26 + 10);
    __int128 v16 = v25[2];
    __int128 v17 = v25[3];
    __int128 v18 = v25[4];
    __int128 v19 = v25[5];
    __int128 v14 = v25[0];
    __int128 v15 = v25[1];
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
    uint64_t v7 = swift_allocObject();
    *(_DWORD *)(v7 + 172) = 0;
    __int128 v8 = v21;
    *(_OWORD *)(v7 + 112) = v20;
    *(_OWORD *)(v7 + 128) = v8;
    *(_OWORD *)(v7 + 144) = v22[0];
    *(_OWORD *)(v7 + 154) = *(_OWORD *)((char *)v22 + 10);
    __int128 v9 = v17;
    *(_OWORD *)(v7 + 48) = v16;
    *(_OWORD *)(v7 + 64) = v9;
    __int128 v10 = v19;
    *(_OWORD *)(v7 + 80) = v18;
    *(_OWORD *)(v7 + 96) = v10;
    __int128 v11 = v15;
    *(_OWORD *)(v7 + 16) = v14;
    *(_OWORD *)(v7 + 32) = v11;
    *(void *)&v5[OBJC_IVAR____NSSwiftURLComponents_lock] = v7;
    outlined init with take of LocalePreferences?( (uint64_t)v27,  (uint64_t)v23,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v23);

    v13.receiver = v5;
    v13.super_class = (Class)type metadata accessor for _NSSwiftURLComponents();
    id v6 = objc_msgSendSuper2(&v13, sel_init);
    outlined release of URLComponents?(v24);
  }

  return v6;
}

uint64_t _NSSwiftURLComponents.init(url:resolvingAgainstBaseURL:)(uint64_t a1, char a2)
{
  __int128 v3 = v2;
  __int128 v5 = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    *(void *)&__int128 v34 = *(void *)a1;
    *((void *)&v34 + 1) = v4;
    *(void *)&__int128 v35 = v6;
    uint64_t v7 = v2;
    uint64_t v8 = URL.absoluteString.getter();
    unint64_t v10 = v9;

LABEL_7:
    swift_release();
    goto LABEL_8;
  }

  __int128 v11 = v2;
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    id v13 = objc_msgSend(v5, sel_relativeString);
    uint64_t v8 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    unint64_t v10 = v14;

    goto LABEL_7;
  }

  if (!v4)
  {
    __break(1u);
    return result;
  }

  uint64_t v8 = *(void *)(v4 + 16);
  unint64_t v10 = *(void *)(v4 + 24);
  swift_bridgeObjectRetain();
  swift_release();

LABEL_8:
  swift_release();
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v8, v10, 1, (uint64_t)v33);
  outlined init with take of LocalePreferences?( (uint64_t)v33,  (uint64_t)v32,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?( (uint64_t)v33,  (uint64_t)&v34,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v34) == 1)
  {

    swift_bridgeObjectRelease();
    type metadata accessor for _NSSwiftURLComponents();
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  else
  {
    __int128 v28 = v40;
    __int128 v29 = v41;
    v30[0] = v42[0];
    *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)((char *)v42 + 10);
    __int128 v24 = v36;
    __int128 v25 = v37;
    __int128 v26 = v38;
    __int128 v27 = v39;
    __int128 v22 = v34;
    __int128 v23 = v35;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
    uint64_t v16 = swift_allocObject();
    *(_DWORD *)(v16 + 172) = 0;
    __int128 v17 = v29;
    *(_OWORD *)(v16 + 112) = v28;
    *(_OWORD *)(v16 + 128) = v17;
    *(_OWORD *)(v16 + 144) = v30[0];
    *(_OWORD *)(v16 + 154) = *(_OWORD *)((char *)v30 + 10);
    __int128 v18 = v25;
    *(_OWORD *)(v16 + 48) = v24;
    *(_OWORD *)(v16 + 64) = v18;
    __int128 v19 = v27;
    *(_OWORD *)(v16 + 80) = v26;
    *(_OWORD *)(v16 + 96) = v19;
    __int128 v20 = v23;
    *(_OWORD *)(v16 + 16) = v22;
    *(_OWORD *)(v16 + 32) = v20;
    *(void *)&v3[OBJC_IVAR____NSSwiftURLComponents_lock] = v16;
    outlined init with take of LocalePreferences?( (uint64_t)v32,  (uint64_t)v31,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v31);

    v21.receiver = v3;
    v21.super_class = (Class)type metadata accessor for _NSSwiftURLComponents();
    id v15 = objc_msgSendSuper2(&v21, sel_init);
    outlined release of URLComponents?(v33);
  }

  return (uint64_t)v15;
}

uint64_t _NSSwiftURLComponents.isEqual(_:)(uint64_t a1)
{
  if (*((void *)&v84 + 1))
  {
    type metadata accessor for _NSSwiftURLComponents();
    if ((swift_dynamicCast() & 1) != 0)
    {
      __int128 v3 = (char *)v74;
      uint64_t v4 = *(void *)(v1 + OBJC_IVAR____NSSwiftURLComponents_lock);
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 172));
      __int128 v5 = *(_OWORD *)(v4 + 16);
      __int128 v6 = *(_OWORD *)(v4 + 32);
      __int128 v7 = *(_OWORD *)(v4 + 48);
      __int128 v8 = *(_OWORD *)(v4 + 64);
      __int128 v9 = *(_OWORD *)(v4 + 96);
      __int128 v87 = *(_OWORD *)(v4 + 80);
      __int128 v88 = v9;
      __int128 v85 = v7;
      __int128 v86 = v8;
      __int128 v10 = *(_OWORD *)(v4 + 112);
      __int128 v11 = *(_OWORD *)(v4 + 128);
      __int128 v12 = *(_OWORD *)(v4 + 144);
      *(_OWORD *)((char *)v91 + 10) = *(_OWORD *)(v4 + 154);
      __int128 v90 = v11;
      v91[0] = v12;
      __int128 v89 = v10;
      __int128 v83 = v5;
      __int128 v84 = v6;
      __int128 v13 = *(_OWORD *)(v4 + 128);
      __int128 v80 = *(_OWORD *)(v4 + 112);
      __int128 v81 = v13;
      v82[0] = *(_OWORD *)(v4 + 144);
      *(_OWORD *)((char *)v82 + 10) = *(_OWORD *)(v4 + 154);
      __int128 v14 = *(_OWORD *)(v4 + 64);
      __int128 v76 = *(_OWORD *)(v4 + 48);
      __int128 v77 = v14;
      __int128 v15 = *(_OWORD *)(v4 + 96);
      __int128 v78 = *(_OWORD *)(v4 + 80);
      __int128 v79 = v15;
      __int128 v16 = *(_OWORD *)(v4 + 32);
      __int128 v74 = *(_OWORD *)(v4 + 16);
      __int128 v75 = v16;
      outlined retain of URLComponents((uint64_t)&v83);
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 172));
      v72[6] = v80;
      v72[7] = v81;
      v73[0] = v82[0];
      *(_OWORD *)((char *)v73 + 10) = *(_OWORD *)((char *)v82 + 10);
      v72[2] = v76;
      v72[3] = v77;
      v72[4] = v78;
      v72[5] = v79;
      v72[0] = v74;
      v72[1] = v75;
      v71[0] = v80;
      v71[1] = v81;
      v71[2] = v82[0];
      *(_OWORD *)((char *)&v71[2] + 10) = *(_OWORD *)((char *)v82 + 10);
      *(_OWORD *)&v70[16] = v76;
      *(_OWORD *)&v70[32] = v77;
      *(_OWORD *)&v70[48] = v78;
      *(_OWORD *)&v70[64] = v79;
      __int128 v69 = v74;
      *(_OWORD *)uint64_t v70 = v75;
      uint64_t v17 = *(void *)&v3[OBJC_IVAR____NSSwiftURLComponents_lock];
      os_unfair_lock_lock((os_unfair_lock_t)(v17 + 172));
      __int128 v18 = *(_OWORD *)(v17 + 16);
      __int128 v19 = *(_OWORD *)(v17 + 32);
      __int128 v20 = *(_OWORD *)(v17 + 48);
      __int128 v21 = *(_OWORD *)(v17 + 64);
      __int128 v22 = *(_OWORD *)(v17 + 96);
      __int128 v87 = *(_OWORD *)(v17 + 80);
      __int128 v88 = v22;
      __int128 v85 = v20;
      __int128 v86 = v21;
      __int128 v23 = *(_OWORD *)(v17 + 112);
      __int128 v24 = *(_OWORD *)(v17 + 128);
      __int128 v25 = *(_OWORD *)(v17 + 144);
      *(_OWORD *)((char *)v91 + 10) = *(_OWORD *)(v17 + 154);
      __int128 v90 = v24;
      v91[0] = v25;
      __int128 v89 = v23;
      __int128 v83 = v18;
      __int128 v84 = v19;
      __int128 v26 = *(_OWORD *)(v17 + 128);
      __int128 v65 = *(_OWORD *)(v17 + 112);
      __int128 v66 = v26;
      v67[0] = *(_OWORD *)(v17 + 144);
      *(_OWORD *)((char *)v67 + 10) = *(_OWORD *)(v17 + 154);
      __int128 v27 = *(_OWORD *)(v17 + 64);
      __int128 v61 = *(_OWORD *)(v17 + 48);
      __int128 v62 = v27;
      __int128 v28 = *(_OWORD *)(v17 + 96);
      __int128 v63 = *(_OWORD *)(v17 + 80);
      __int128 v64 = v28;
      __int128 v29 = *(_OWORD *)(v17 + 32);
      __int128 v59 = *(_OWORD *)(v17 + 16);
      __int128 v60 = v29;
      outlined retain of URLComponents((uint64_t)&v83);
      os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 172));
      __int128 v89 = v65;
      __int128 v90 = v66;
      v91[0] = v67[0];
      *(_OWORD *)((char *)v91 + 10) = *(_OWORD *)((char *)v67 + 10);
      __int128 v85 = v61;
      __int128 v86 = v62;
      __int128 v87 = v63;
      __int128 v88 = v64;
      __int128 v83 = v59;
      __int128 v84 = v60;
      __int128 v56 = v65;
      __int128 v57 = v66;
      v58[0] = v67[0];
      *(_OWORD *)((char *)v58 + 10) = *(_OWORD *)((char *)v67 + 10);
      __int128 v52 = v61;
      __int128 v53 = v62;
      __int128 v54 = v63;
      __int128 v55 = v64;
      __int128 v50 = v59;
      __int128 v51 = v60;
      char v30 = specialized static URLComponents.== infix(_:_:)(&v69, &v50);

      outlined release of URLComponents((uint64_t)&v83);
      outlined release of URLComponents((uint64_t)v72);
      return v30 & 1;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v83);
  }

  outlined init with copy of (Hashable & Sendable)?( a1,  (uint64_t)&v83,  &demangling cache variable for type metadata for Any?);
  if (!*((void *)&v84 + 1))
  {
    outlined destroy of Any?((uint64_t)&v83);
    goto LABEL_10;
  }

  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSURLComponents);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    char v30 = 0;
    return v30 & 1;
  }

  __int128 v31 = (void *)v74;
  uint64_t v32 = *(void *)(v1 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v32 + 172));
  __int128 v33 = *(_OWORD *)(v32 + 16);
  __int128 v34 = *(_OWORD *)(v32 + 32);
  __int128 v35 = *(_OWORD *)(v32 + 48);
  __int128 v36 = *(_OWORD *)(v32 + 64);
  __int128 v37 = *(_OWORD *)(v32 + 96);
  __int128 v87 = *(_OWORD *)(v32 + 80);
  __int128 v88 = v37;
  __int128 v85 = v35;
  __int128 v86 = v36;
  __int128 v38 = *(_OWORD *)(v32 + 112);
  __int128 v39 = *(_OWORD *)(v32 + 128);
  __int128 v40 = *(_OWORD *)(v32 + 144);
  *(_OWORD *)((char *)v91 + 10) = *(_OWORD *)(v32 + 154);
  __int128 v90 = v39;
  v91[0] = v40;
  __int128 v89 = v38;
  __int128 v83 = v33;
  __int128 v84 = v34;
  __int128 v41 = *(_OWORD *)(v32 + 128);
  __int128 v80 = *(_OWORD *)(v32 + 112);
  __int128 v81 = v41;
  v82[0] = *(_OWORD *)(v32 + 144);
  *(_OWORD *)((char *)v82 + 10) = *(_OWORD *)(v32 + 154);
  __int128 v42 = *(_OWORD *)(v32 + 64);
  __int128 v76 = *(_OWORD *)(v32 + 48);
  __int128 v77 = v42;
  __int128 v43 = *(_OWORD *)(v32 + 96);
  __int128 v78 = *(_OWORD *)(v32 + 80);
  __int128 v79 = v43;
  __int128 v44 = *(_OWORD *)(v32 + 32);
  __int128 v74 = *(_OWORD *)(v32 + 16);
  __int128 v75 = v44;
  outlined retain of URLComponents((uint64_t)&v83);
  os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 172));
  __int128 v65 = v80;
  __int128 v66 = v81;
  v67[0] = v82[0];
  *(_OWORD *)((char *)v67 + 10) = *(_OWORD *)((char *)v82 + 10);
  __int128 v61 = v76;
  __int128 v62 = v77;
  __int128 v63 = v78;
  __int128 v64 = v79;
  __int128 v59 = v74;
  __int128 v60 = v75;
  __int128 v56 = v80;
  __int128 v57 = v81;
  v58[0] = v82[0];
  *(_OWORD *)((char *)v58 + 10) = *(_OWORD *)((char *)v82 + 10);
  __int128 v52 = v76;
  __int128 v53 = v77;
  __int128 v54 = v78;
  __int128 v55 = v79;
  __int128 v50 = v74;
  __int128 v51 = v75;
  char v68 = 1;
  __int128 v69 = 0uLL;
  v70[0] = 0;
  memset(&v70[8], 0, 72);
  LOBYTE(v71[0]) = 1;
  memset((char *)v71 + 8, 0, 50);
  destructiveProjectEnumData for PredicateCodableError(&v69, v45);
  outlined init with take of LocalePreferences?( (uint64_t)&v69,  (uint64_t)v48,  &demangling cache variable for type metadata for URLComponents?);
  id v46 = v31;
  static URLComponents._conditionallyBridgeFromObjectiveC(_:result:)((unint64_t)v46, (uint64_t)v48);
  outlined init with take of LocalePreferences?( (uint64_t)v48,  (uint64_t)v72,  &demangling cache variable for type metadata for URLComponents?);
  outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)&v83,  &demangling cache variable for type metadata for URLComponents?);
  uint64_t result = _s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v83);
  if ((_DWORD)result != 1)
  {

    v48[6] = v89;
    v48[7] = v90;
    v49[0] = v91[0];
    *(_OWORD *)((char *)v49 + 10) = *(_OWORD *)((char *)v91 + 10);
    v48[2] = v85;
    v48[3] = v86;
    _OWORD v48[4] = v87;
    v48[5] = v88;
    v48[0] = v83;
    v48[1] = v84;
    char v30 = specialized static URLComponents.== infix(_:_:)(&v50, v48);

    outlined release of URLComponents?((uint64_t *)v72);
    outlined release of URLComponents((uint64_t)&v59);
    return v30 & 1;
  }

  __break(1u);
  return result;
}

id _NSSwiftURLComponents.copy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 172));
  __int128 v4 = *(_OWORD *)(v3 + 128);
  v30[6] = *(_OWORD *)(v3 + 112);
  v30[7] = v4;
  v31[0] = *(_OWORD *)(v3 + 144);
  *(_OWORD *)((char *)v31 + 10) = *(_OWORD *)(v3 + 154);
  __int128 v5 = *(_OWORD *)(v3 + 64);
  _OWORD v30[2] = *(_OWORD *)(v3 + 48);
  v30[3] = v5;
  __int128 v6 = *(_OWORD *)(v3 + 96);
  v30[4] = *(_OWORD *)(v3 + 80);
  v30[5] = v6;
  __int128 v7 = *(_OWORD *)(v3 + 32);
  v30[0] = *(_OWORD *)(v3 + 16);
  v30[1] = v7;
  __int128 v8 = *(_OWORD *)(v3 + 128);
  __int128 v27 = *(_OWORD *)(v3 + 112);
  __int128 v28 = v8;
  v29[0] = *(_OWORD *)(v3 + 144);
  *(_OWORD *)((char *)v29 + 10) = *(_OWORD *)(v3 + 154);
  __int128 v9 = *(_OWORD *)(v3 + 64);
  __int128 v23 = *(_OWORD *)(v3 + 48);
  __int128 v24 = v9;
  __int128 v10 = *(_OWORD *)(v3 + 96);
  __int128 v25 = *(_OWORD *)(v3 + 80);
  __int128 v26 = v10;
  __int128 v11 = *(_OWORD *)(v3 + 32);
  __int128 v21 = *(_OWORD *)(v3 + 16);
  __int128 v22 = v11;
  outlined retain of URLComponents((uint64_t)v30);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 172));
  __int128 v12 = (objc_class *)type metadata accessor for _NSSwiftURLComponents();
  __int128 v13 = (char *)objc_allocWithZone(v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 172) = 0;
  __int128 v15 = v28;
  *(_OWORD *)(v14 + 112) = v27;
  *(_OWORD *)(v14 + 128) = v15;
  *(_OWORD *)(v14 + 144) = v29[0];
  *(_OWORD *)(v14 + 154) = *(_OWORD *)((char *)v29 + 10);
  __int128 v16 = v24;
  *(_OWORD *)(v14 + 48) = v23;
  *(_OWORD *)(v14 + 64) = v16;
  __int128 v17 = v26;
  *(_OWORD *)(v14 + 80) = v25;
  *(_OWORD *)(v14 + 96) = v17;
  __int128 v18 = v22;
  *(_OWORD *)(v14 + 16) = v21;
  *(_OWORD *)(v14 + 32) = v18;
  *(void *)&v13[OBJC_IVAR____NSSwiftURLComponents_lock] = v14;
  v20.receiver = v13;
  v20.super_class = v12;
  id result = objc_msgSendSuper2(&v20, sel_init);
  a1[3] = v12;
  *a1 = result;
  return result;
}

void _NSSwiftURLComponents.url.getter(uint64_t a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v3 = *(void *)&v1[OBJC_IVAR____NSSwiftURLComponents_lock];
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 172));
    __int128 v4 = *(_OWORD *)(v3 + 16);
    __int128 v5 = *(_OWORD *)(v3 + 32);
    __int128 v6 = *(_OWORD *)(v3 + 48);
    __int128 v7 = *(_OWORD *)(v3 + 64);
    __int128 v8 = *(_OWORD *)(v3 + 96);
    __int128 v29 = *(_OWORD *)(v3 + 80);
    __int128 v30 = v8;
    __int128 v27 = v6;
    __int128 v28 = v7;
    __int128 v9 = *(_OWORD *)(v3 + 112);
    __int128 v10 = *(_OWORD *)(v3 + 128);
    __int128 v11 = *(_OWORD *)(v3 + 144);
    *(_OWORD *)((char *)v33 + 10) = *(_OWORD *)(v3 + 154);
    __int128 v32 = v10;
    v33[0] = v11;
    __int128 v31 = v9;
    *(_OWORD *)__int128 v26 = v4;
    *(_OWORD *)&v26[16] = v5;
    __int128 v23 = *(_OWORD *)(v3 + 112);
    __int128 v24 = *(_OWORD *)(v3 + 128);
    *(_OWORD *)__int128 v25 = *(_OWORD *)(v3 + 144);
    *(_OWORD *)&v25[10] = *(_OWORD *)(v3 + 154);
    __int128 v19 = *(_OWORD *)(v3 + 48);
    __int128 v20 = *(_OWORD *)(v3 + 64);
    __int128 v21 = *(_OWORD *)(v3 + 80);
    __int128 v22 = *(_OWORD *)(v3 + 96);
    __int128 v17 = *(_OWORD *)(v3 + 16);
    __int128 v18 = *(_OWORD *)(v3 + 32);
    outlined retain of URLComponents((uint64_t)v26);
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 172));
    __int128 v31 = v23;
    __int128 v32 = v24;
    v33[0] = *(_OWORD *)v25;
    *(_OWORD *)((char *)v33 + 10) = *(_OWORD *)&v25[10];
    __int128 v27 = v19;
    __int128 v28 = v20;
    __int128 v29 = v21;
    __int128 v30 = v22;
    *(_OWORD *)__int128 v26 = v17;
    *(_OWORD *)&v26[16] = v18;
    URLComponents.url.getter((uint64_t *)a1);
    outlined release of URLComponents((uint64_t)v26);
  }

  else
  {
    __int128 v12 = (const __CFString *)objc_msgSend(v1, sel_string);
    if (v12)
    {
      __int128 v13 = (__CFString *)v12;
      CFURLRef v14 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x189604DB0], v12, 0LL);

      if (v14)
      {
        URL.init(reference:)(v14, v26);

        uint64_t v15 = *(void *)v26;
        __int128 v16 = *(_OWORD *)&v26[8];
      }

      else
      {
        uint64_t v15 = 0LL;
        __int128 v16 = 0uLL;
      }

      *(void *)a1 = v15;
      *(_OWORD *)(a1 + 8) = v16;
    }

    else
    {
      *(void *)a1 = 0LL;
      *(void *)(a1 + 8) = 0LL;
      *(void *)(a1 + 16) = 0LL;
    }
  }

void _NSSwiftURLComponents.url(relativeTo:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v5 = *(id *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v7 = *(void *)&v2[OBJC_IVAR____NSSwiftURLComponents_lock];
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 172));
    __int128 v8 = *(_OWORD *)(v7 + 16);
    __int128 v9 = *(_OWORD *)(v7 + 32);
    __int128 v10 = *(_OWORD *)(v7 + 48);
    __int128 v11 = *(_OWORD *)(v7 + 64);
    __int128 v12 = *(_OWORD *)(v7 + 96);
    __int128 v48 = *(_OWORD *)(v7 + 80);
    __int128 v49 = v12;
    __int128 v46 = v10;
    __int128 v47 = v11;
    v45[1] = v9;
    __int128 v13 = *(_OWORD *)(v7 + 112);
    __int128 v14 = *(_OWORD *)(v7 + 128);
    __int128 v15 = *(_OWORD *)(v7 + 144);
    *(_OWORD *)((char *)v52 + 10) = *(_OWORD *)(v7 + 154);
    __int128 v51 = v14;
    v52[0] = v15;
    __int128 v50 = v13;
    v45[0] = v8;
    __int128 v16 = *(_OWORD *)(v7 + 128);
    __int128 v42 = *(_OWORD *)(v7 + 112);
    __int128 v43 = v16;
    v44[0] = *(_OWORD *)(v7 + 144);
    *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v7 + 154);
    __int128 v17 = *(_OWORD *)(v7 + 64);
    __int128 v38 = *(_OWORD *)(v7 + 48);
    __int128 v39 = v17;
    __int128 v18 = *(_OWORD *)(v7 + 96);
    __int128 v40 = *(_OWORD *)(v7 + 80);
    __int128 v41 = v18;
    __int128 v19 = *(_OWORD *)(v7 + 32);
    __int128 v36 = *(_OWORD *)(v7 + 16);
    __int128 v37 = v19;
    outlined retain of URLComponents((uint64_t)v45);
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 172));
    __int128 v50 = v42;
    __int128 v51 = v43;
    v52[0] = v44[0];
    *(_OWORD *)((char *)v52 + 10) = *(_OWORD *)((char *)v44 + 10);
    __int128 v46 = v38;
    __int128 v47 = v39;
    __int128 v48 = v40;
    __int128 v49 = v41;
    v45[0] = v36;
    v45[1] = v37;
    __int128 v32 = v41;
    __int128 v33 = v42;
    __int128 v34 = v43;
    v35[0] = v44[0];
    *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)((char *)v44 + 10);
    __int128 v29 = v38;
    __int128 v30 = v39;
    __int128 v31 = v40;
    __int128 v27 = v36;
    __int128 v28 = v37;
    v26[0] = v5;
    v26[1] = v4;
    _OWORD v26[2] = v6;
    URLComponents.url(relativeTo:)((uint64_t)v26, (uint64_t *)a2);
    outlined release of URLComponents((uint64_t)v45);
  }

  else
  {
    __int128 v20 = (__CFString *)objc_msgSend(v2, sel_string);
    if (v20)
    {
      __int128 v21 = v20;
      __int128 v22 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      if (v5) {
        id v5 = v5;
      }
      CFURLRef v23 = CFURLCreateWithString(v22, v21, (CFURLRef)v5);

      if (v23)
      {
        URL.init(reference:)(v23, v45);

        uint64_t v24 = *(void *)&v45[0];
        __int128 v25 = *(_OWORD *)((char *)v45 + 8);
      }

      else
      {
        uint64_t v24 = 0LL;
        __int128 v25 = 0uLL;
      }

      *(void *)a2 = v24;
      *(_OWORD *)(a2 + 8) = v25;
    }

    else
    {
      *(void *)a2 = 0LL;
      *(void *)(a2 + 8) = 0LL;
      *(void *)(a2 + 16) = 0LL;
    }
  }

uint64_t _NSSwiftURLComponents.string.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  __int128 v2 = *(_OWORD *)(v1 + 16);
  __int128 v3 = *(_OWORD *)(v1 + 32);
  __int128 v4 = *(_OWORD *)(v1 + 48);
  __int128 v5 = *(_OWORD *)(v1 + 64);
  __int128 v6 = *(_OWORD *)(v1 + 96);
  __int128 v31 = *(_OWORD *)(v1 + 80);
  __int128 v32 = v6;
  __int128 v29 = v4;
  __int128 v30 = v5;
  __int128 v7 = *(_OWORD *)(v1 + 112);
  __int128 v8 = *(_OWORD *)(v1 + 128);
  __int128 v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v1 + 154);
  __int128 v34 = v8;
  v35[0] = v9;
  __int128 v33 = v7;
  __int128 v27 = v2;
  __int128 v28 = v3;
  __int128 v10 = *(_OWORD *)(v1 + 128);
  __int128 v24 = *(_OWORD *)(v1 + 112);
  __int128 v25 = v10;
  v26[0] = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)(v1 + 154);
  __int128 v11 = *(_OWORD *)(v1 + 64);
  __int128 v20 = *(_OWORD *)(v1 + 48);
  __int128 v21 = v11;
  __int128 v12 = *(_OWORD *)(v1 + 96);
  __int128 v22 = *(_OWORD *)(v1 + 80);
  __int128 v23 = v12;
  __int128 v13 = *(_OWORD *)(v1 + 32);
  __int128 v18 = *(_OWORD *)(v1 + 16);
  __int128 v19 = v13;
  outlined retain of URLComponents((uint64_t)&v27);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  v16[6] = v24;
  v16[7] = v25;
  v17[0] = v26[0];
  *(_OWORD *)((char *)v17 + 10) = *(_OWORD *)((char *)v26 + 10);
  v16[2] = v20;
  v16[3] = v21;
  v16[4] = v22;
  v16[5] = v23;
  v16[0] = v18;
  v16[1] = v19;
  __int128 v33 = v24;
  __int128 v34 = v25;
  v35[0] = v26[0];
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)((char *)v26 + 10);
  __int128 v29 = v20;
  __int128 v30 = v21;
  __int128 v31 = v22;
  __int128 v32 = v23;
  __int128 v27 = v18;
  __int128 v28 = v19;
  if (BYTE8(v18) == 1)
  {
    if (*(void *)&v16[0])
    {
      uint64_t v14 = *(void *)(*(void *)&v16[0] + 16LL);
      swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v14 = 0LL;
    }
  }

  else
  {
    uint64_t v14 = URLComponents._URLComponents.computedString.getter();
  }

  outlined release of URLComponents((uint64_t)v16);
  return v14;
}

uint64_t _NSSwiftURLComponents._scheme.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  __int128 v2 = *(_OWORD *)(v1 + 16);
  __int128 v3 = *(_OWORD *)(v1 + 32);
  __int128 v4 = *(_OWORD *)(v1 + 48);
  __int128 v5 = *(_OWORD *)(v1 + 64);
  __int128 v6 = *(_OWORD *)(v1 + 96);
  __int128 v26 = *(_OWORD *)(v1 + 80);
  __int128 v27 = v6;
  __int128 v24 = v4;
  __int128 v25 = v5;
  __int128 v7 = *(_OWORD *)(v1 + 112);
  __int128 v8 = *(_OWORD *)(v1 + 128);
  __int128 v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)(v1 + 154);
  __int128 v29 = v8;
  v30[0] = v9;
  __int128 v28 = v7;
  __int128 v22 = v2;
  __int128 v23 = v3;
  __int128 v19 = *(_OWORD *)(v1 + 112);
  __int128 v20 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)__int128 v21 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v21[10] = *(_OWORD *)(v1 + 154);
  __int128 v15 = *(_OWORD *)(v1 + 48);
  __int128 v16 = *(_OWORD *)(v1 + 64);
  __int128 v17 = *(_OWORD *)(v1 + 80);
  __int128 v18 = *(_OWORD *)(v1 + 96);
  __int128 v13 = *(_OWORD *)(v1 + 16);
  __int128 v14 = *(_OWORD *)(v1 + 32);
  outlined retain of URLComponents((uint64_t)&v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  __int128 v28 = v19;
  __int128 v29 = v20;
  v30[0] = *(_OWORD *)v21;
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)&v21[10];
  __int128 v24 = v15;
  __int128 v25 = v16;
  __int128 v26 = v17;
  __int128 v27 = v18;
  __int128 v22 = v13;
  __int128 v23 = v14;
  if ((void)v15)
  {
    uint64_t v10 = *((void *)&v23 + 1);
  }

  else if ((BYTE9(v22) & 1) != 0 && (void)v22 && (*(_BYTE *)(v22 + 48) & 1) == 0)
  {
    uint64_t v12 = String.subscript.getter();
    uint64_t v10 = MEMORY[0x186E1B610](v12);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v22);
  return v10;
}

uint64_t closure #1 in _NSSwiftURLComponents.user.setter( uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  if (!a3)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 40) = a2;
    *(void *)(a1 + 48) = a3;
    return result;
  }

  if ((a3 & 0x1000000000000000LL) != 0)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    __int128 v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents, v27, v28);
    id v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      __int128 v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v15 = objc_msgSend(v14, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v12,  (uint64_t)v15,  2u,  0);
    }

    else
    {
      char v16 = specialized Sequence.allSatisfy(_:)(a2, a3, 2);
    }

    uint64_t v9 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v27 = a2;
      uint64_t v28 = a3 & 0xFFFFFFFFFFFFFFLL;
      __int128 v6 = (char *)&v27;
    }

    else if ((a2 & 0x1000000000000000LL) != 0)
    {
      __int128 v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      __int128 v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 0);
    uint64_t v9 = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
  }

  uint64_t v17 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    MEMORY[0x1895F8858](v9);
    v25[2] = &v27;
    char v26 = 2;
    swift_bridgeObjectRetain();
    __int128 v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v25,  a2,  a3);
    if (v19)
    {
      uint64_t v20 = (uint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }

    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      uint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v20;
  *(void *)(a1 + 48) = v21;
  return result;
}

uint64_t closure #1 in _NSSwiftURLComponents.password.setter( uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 11) = 0;
  if (!a3)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 56) = a2;
    *(void *)(a1 + 64) = a3;
    return result;
  }

  if ((a3 & 0x1000000000000000LL) != 0)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    __int128 v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents, v27, v28);
    id v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      __int128 v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v15 = objc_msgSend(v14, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v12,  (uint64_t)v15,  2u,  0);
    }

    else
    {
      char v16 = specialized Sequence.allSatisfy(_:)(a2, a3, 2);
    }

    uint64_t v9 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v27 = a2;
      uint64_t v28 = a3 & 0xFFFFFFFFFFFFFFLL;
      __int128 v6 = (char *)&v27;
    }

    else if ((a2 & 0x1000000000000000LL) != 0)
    {
      __int128 v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      __int128 v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 0);
    uint64_t v9 = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
  }

  uint64_t v17 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    MEMORY[0x1895F8858](v9);
    v25[2] = &v27;
    char v26 = 2;
    swift_bridgeObjectRetain();
    __int128 v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v25,  a2,  a3);
    if (v19)
    {
      uint64_t v20 = (uint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }

    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      uint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = v20;
  *(void *)(a1 + 64) = v21;
  return result;
}

uint64_t _NSSwiftURLComponents.host.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  __int128 v2 = *(_OWORD *)(v1 + 16);
  __int128 v3 = *(_OWORD *)(v1 + 32);
  __int128 v4 = *(_OWORD *)(v1 + 48);
  __int128 v5 = *(_OWORD *)(v1 + 64);
  __int128 v6 = *(_OWORD *)(v1 + 96);
  __int128 v77 = *(_OWORD *)(v1 + 80);
  __int128 v78 = v6;
  __int128 v75 = v4;
  __int128 v76 = v5;
  __int128 v7 = *(_OWORD *)(v1 + 112);
  __int128 v8 = *(_OWORD *)(v1 + 128);
  __int128 v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v81 + 10) = *(_OWORD *)(v1 + 154);
  __int128 v80 = v8;
  v81[0] = v9;
  __int128 v79 = v7;
  __int128 v73 = v2;
  __int128 v74 = v3;
  __int128 v10 = *(_OWORD *)(v1 + 128);
  __int128 v70 = *(_OWORD *)(v1 + 112);
  __int128 v71 = v10;
  v72[0] = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v72 + 10) = *(_OWORD *)(v1 + 154);
  __int128 v11 = *(_OWORD *)(v1 + 64);
  __int128 v66 = *(_OWORD *)(v1 + 48);
  __int128 v67 = v11;
  __int128 v12 = *(_OWORD *)(v1 + 96);
  __int128 v68 = *(_OWORD *)(v1 + 80);
  __int128 v69 = v12;
  __int128 v13 = *(_OWORD *)(v1 + 32);
  __int128 v64 = *(_OWORD *)(v1 + 16);
  __int128 v65 = v13;
  outlined retain of URLComponents((uint64_t)&v73);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  __int128 v61 = v70;
  __int128 v62 = v71;
  v63[0] = v72[0];
  *(_OWORD *)((char *)v63 + 10) = *(_OWORD *)((char *)v72 + 10);
  _OWORD v58[2] = v66;
  v58[3] = v67;
  __int128 v59 = v68;
  __int128 v60 = v69;
  v58[0] = v64;
  v58[1] = v65;
  __int128 v79 = v70;
  __int128 v80 = v71;
  v81[0] = v72[0];
  *(_OWORD *)((char *)v81 + 10) = *(_OWORD *)((char *)v72 + 10);
  __int128 v75 = v66;
  __int128 v76 = v67;
  __int128 v77 = v68;
  __int128 v78 = v69;
  __int128 v73 = v64;
  __int128 v74 = v65;
  if ((void)v69)
  {
    uint64_t v15 = *((void *)&v59 + 1);
    unint64_t v16 = v60;
  }

  else if ((BYTE12(v58[0]) & 1) != 0 && *(void *)&v58[0] && (*(_BYTE *)(*(void *)&v58[0] + 120LL) & 1) == 0)
  {
    uint64_t v38 = String.subscript.getter();
    uint64_t v15 = MEMORY[0x186E1B610](v38);
    unint64_t v16 = v39;
    uint64_t v14 = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v14 = URLComponents._URLComponents.port.getter();
    if ((v17 & 1) != 0)
    {
      uint64_t v18 = URLComponents._URLComponents.percentEncodedUser.getter();
      uint64_t v20 = v19;
      uint64_t v14 = swift_bridgeObjectRelease();
      if (!v20)
      {
        outlined release of URLComponents((uint64_t)v58);
        return v18;
      }
    }

    uint64_t v15 = 0LL;
    unint64_t v16 = 0xE000000000000000LL;
  }

  uint64_t v21 = v15 & 0xFFFFFFFFFFFFLL;
  if ((v16 & 0x2000000000000000LL) != 0) {
    uint64_t v22 = HIBYTE(v16) & 0xF;
  }
  else {
    uint64_t v22 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (v22)
  {
    if ((BYTE8(v63[1]) & 1) != 0)
    {
      __int128 v56 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v15;
      uint64_t v57 = v16;
      MEMORY[0x1895F8858](v14);
      __int128 v51 = &v56;
      uint64_t v52 = MEMORY[0x18961AFF8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v23 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)&v50,  v15,  v16);
      if (v24 == 1)
      {
        __int128 v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v56;
        unint64_t v26 = v57;
        swift_bridgeObjectRetain();
        uint64_t v18 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( (Swift::Int)v25,  v26,  MEMORY[0x18961AFF8]);
        swift_bridgeObjectRelease_n();
LABEL_40:
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }

      uint64_t v18 = (uint64_t)v23;
LABEL_27:
      swift_bridgeObjectRelease_n();
LABEL_41:
      outlined release of URLComponents((uint64_t)v58);
      return v18;
    }

    if ((v16 & 0x1000000000000000LL) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      if ((v16 & 0x2000000000000000LL) != 0)
      {
        __int128 v56 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v15;
        uint64_t v57 = v16 & 0xFFFFFFFFFFFFFFLL;
        __int128 v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v55 = 0LL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v56,  HIBYTE(v16) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54,  0,  (unsigned __int8 *)&v56,  HIBYTE(v16) & 0xF,  v53);
        uint64_t v18 = v53[0];
        uint64_t v29 = v53[1];
        swift_release();
      }

      else
      {
        if ((v15 & 0x1000000000000000LL) != 0)
        {
          unint64_t v27 = (unsigned __int8 *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }

        else
        {
          unint64_t v27 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          uint64_t v21 = v45;
        }

        __int128 v56 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v57 = 0LL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        uint64_t v18 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v27,  v21,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56,  0,  v27,  v21);
        uint64_t v29 = v28;
      }

      swift_bridgeObjectRelease();
      if (v29 != 1) {
        goto LABEL_27;
      }
    }

    __int128 v56 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v15;
    uint64_t v57 = v16;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    __int128 v30 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v31 = objc_msgSend(v30, sel__fastCharacterContents);
    id v32 = v30;
    if (v31)
    {
      __int128 v56 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v15;
      uint64_t v57 = v16;
      StringProtocol._ephemeralString.getter();
      __int128 v33 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v34 = objc_msgSend(v33, sel_length);
      uint64_t v35 = swift_unknownObjectRelease();
      MEMORY[0x1895F8858](v35);
      LOBYTE(v51) = 0;
      MEMORY[0x1895F8858](v36);
      _OWORD v49[2] = v31;
      v49[3] = v34;
      uint64_t v18 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v31,  (uint64_t)v34,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  v37,  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)v49);
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)v58);
      return v18;
    }

    __int128 v56 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v15;
    uint64_t v57 = v16;
    swift_bridgeObjectRetain();
    uint64_t v41 = String.init<A>(_:)();
    unint64_t v42 = v40;
    if ((v40 & 0x1000000000000000LL) != 0)
    {
      uint64_t v41 = static String._copying(_:)();
      unint64_t v47 = v46;
      swift_bridgeObjectRelease();
      unint64_t v42 = v47;
      if ((v47 & 0x2000000000000000LL) == 0) {
        goto LABEL_32;
      }
    }

    else if ((v40 & 0x2000000000000000LL) == 0)
    {
LABEL_32:
      if ((v41 & 0x1000000000000000LL) != 0)
      {
        __int128 v43 = (unsigned __int8 *)((v42 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v44 = v41 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        __int128 v43 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }

      __int128 v56 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      uint64_t v57 = 0LL;
      uint64_t v18 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v43,  v44,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56,  0,  v43,  v44);
      goto LABEL_39;
    }

    __int128 v56 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v41;
    uint64_t v57 = v42 & 0xFFFFFFFFFFFFFFLL;
    __int128 v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v55 = 0LL;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v56,  HIBYTE(v42) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54,  0,  (unsigned __int8 *)&v56,  HIBYTE(v42) & 0xF,  v53);
    uint64_t v18 = v53[0];
    swift_release();
LABEL_39:
    swift_bridgeObjectRelease_n();
    goto LABEL_40;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)v58);
  return 0LL;
}

id _NSSwiftURLComponents._port.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  __int128 v2 = *(_OWORD *)(v1 + 16);
  __int128 v3 = *(_OWORD *)(v1 + 32);
  __int128 v4 = *(_OWORD *)(v1 + 48);
  __int128 v5 = *(_OWORD *)(v1 + 64);
  __int128 v6 = *(_OWORD *)(v1 + 96);
  __int128 v27 = *(_OWORD *)(v1 + 80);
  __int128 v28 = v6;
  __int128 v25 = v4;
  __int128 v26 = v5;
  __int128 v7 = *(_OWORD *)(v1 + 112);
  __int128 v8 = *(_OWORD *)(v1 + 128);
  __int128 v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v31 + 10) = *(_OWORD *)(v1 + 154);
  __int128 v30 = v8;
  v31[0] = v9;
  __int128 v29 = v7;
  __int128 v23 = v2;
  __int128 v24 = v3;
  __int128 v20 = *(_OWORD *)(v1 + 112);
  __int128 v21 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v22[10] = *(_OWORD *)(v1 + 154);
  __int128 v16 = *(_OWORD *)(v1 + 48);
  __int128 v17 = *(_OWORD *)(v1 + 64);
  __int128 v18 = *(_OWORD *)(v1 + 80);
  __int128 v19 = *(_OWORD *)(v1 + 96);
  __int128 v14 = *(_OWORD *)(v1 + 16);
  __int128 v15 = *(_OWORD *)(v1 + 32);
  outlined retain of URLComponents((uint64_t)&v23);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  __int128 v29 = v20;
  __int128 v30 = v21;
  v31[0] = *(_OWORD *)v22;
  *(_OWORD *)((char *)v31 + 10) = *(_OWORD *)&v22[10];
  __int128 v25 = v16;
  __int128 v26 = v17;
  __int128 v27 = v18;
  __int128 v28 = v19;
  __int128 v23 = v14;
  __int128 v24 = v15;
  *(_WORD *)__int128 v13 = *(_WORD *)&v22[8];
  *(_OWORD *)&v13[2] = *(_OWORD *)&v22[10];
  uint64_t v10 = URLComponents.port.getter();
  LOBYTE(v1) = v11;
  outlined release of URLComponents((uint64_t)&v23);
  if ((v1 & 1) != 0) {
    return 0LL;
  }
  else {
    return objc_msgSend( objc_allocWithZone((Class)NSNumber),  sel_initWithInteger_,  v10,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  *(void *)v22,  *(void *)v13,  (unint64_t)(*(_OWORD *)&v22[10] >> 48),  *(void *)&v13[16]);
  }
}

uint64_t closure #1 in _NSSwiftURLComponents._setPort(_:)(uint64_t a1, id a2)
{
  if (a2)
  {
    uint64_t result = (uint64_t)objc_msgSend(a2, sel_integerValue);
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 13) = 0;
    if (result < 0)
    {
      lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
      swift_allocError();
      *__int128 v5 = 4;
      return swift_willThrow();
    }
  }

  else
  {
    uint64_t result = 0LL;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 13) = 0;
  }

  *(void *)(a1 + 88) = result;
  *(_BYTE *)(a1 + 96) = a2 == 0LL;
  return result;
}

uint64_t closure #1 in _NSSwiftURLComponents.path.setter( uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = 0LL;
  }
  if (a3) {
    unint64_t v5 = a3;
  }
  else {
    unint64_t v5 = 0xE000000000000000LL;
  }
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  if ((v5 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = HIBYTE(v5) & 0xF;
  }
  else {
    uint64_t v6 = v4 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v6 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v4, v5);
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    unint64_t v8 = 0xE000000000000000LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = v6;
  *(void *)(a1 + 112) = v8;
  return result;
}

uint64_t closure #1 in _NSSwiftURLComponents.query.setter( uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 15) = 0;
  if (!a3)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 120) = a2;
    *(void *)(a1 + 128) = a3;
    return result;
  }

  if ((a3 & 0x1000000000000000LL) != 0)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    char v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    __int128 v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents, v27, v28);
    id v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      __int128 v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v15 = objc_msgSend(v14, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v12,  (uint64_t)v15,  0x40u,  0);
    }

    else
    {
      char v16 = specialized Sequence.allSatisfy(_:)(a2, a3, 64);
    }

    uint64_t v9 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v27 = a2;
      uint64_t v28 = a3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v27;
    }

    else if ((a2 & 0x1000000000000000LL) != 0)
    {
      uint64_t v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 0);
    uint64_t v9 = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
  }

  uint64_t v17 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    MEMORY[0x1895F8858](v9);
    v25[2] = &v27;
    char v26 = 64;
    swift_bridgeObjectRetain();
    __int128 v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v25,  a2,  a3);
    if (v19)
    {
      uint64_t v20 = (uint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }

    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      uint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = v20;
  *(void *)(a1 + 128) = v21;
  return result;
}

uint64_t @objc _NSSwiftURLComponents.user.setter( void *a1, uint64_t a2, void *a3, void (*a4)(os_unfair_lock_s *))
{
  if (a3) {
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  }
  else {
    id v6 = 0LL;
  }
  MEMORY[0x1895F8858](v6);
  BOOL v8 = v7 + 4;
  uint64_t v9 = v7 + 43;
  id v10 = a1;
  os_unfair_lock_lock(v9);
  a4(v8);
  os_unfair_lock_unlock(v9);

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in _NSSwiftURLComponents.fragment.setter( uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (!a3)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 136) = a2;
    *(void *)(a1 + 144) = a3;
    return result;
  }

  if ((a3 & 0x1000000000000000LL) != 0)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    char v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    __int128 v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents, v27, v28);
    id v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      __int128 v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v15 = objc_msgSend(v14, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v12,  (uint64_t)v15,  0x40u,  0);
    }

    else
    {
      char v16 = specialized Sequence.allSatisfy(_:)(a2, a3, 64);
    }

    uint64_t v9 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v27 = a2;
      uint64_t v28 = a3 & 0xFFFFFFFFFFFFFFLL;
      id v6 = (char *)&v27;
    }

    else if ((a2 & 0x1000000000000000LL) != 0)
    {
      id v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      id v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 0);
    uint64_t v9 = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
  }

  uint64_t v17 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    MEMORY[0x1895F8858](v9);
    v25[2] = &v27;
    char v26 = 64;
    swift_bridgeObjectRetain();
    __int128 v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (uint64_t)v25,  a2,  a3);
    if (v19)
    {
      uint64_t v20 = (uint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }

    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      uint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = v20;
  *(void *)(a1 + 144) = v21;
  return result;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedUser(_:)( uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  if (!a3)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 40) = a2;
    *(void *)(a1 + 48) = a3;
    return result;
  }

  if ((a3 & 0x1000000000000000LL) != 0)
  {
    unint64_t v17 = a2;
    uint64_t v18 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents, v17, v18);
    id v11 = v9;
    if (v10)
    {
      StringProtocol._ephemeralString.getter();
      __int128 v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v10,  (uint64_t)v13,  2u,  1);
    }

    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 2u, 1);
    }

    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v17 = a2;
      uint64_t v18 = a3 & 0xFFFFFFFFFFFFFFLL;
      id v6 = (char *)&v17;
    }

    else if ((a2 & 0x1000000000000000LL) != 0)
    {
      id v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      id v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 1)) {
      goto LABEL_8;
    }
  }

  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *char v16 = 1;
  return swift_willThrow();
}

uint64_t @objc _NSSwiftURLComponents._setPercentEncodedFragment(_:)( void *a1, uint64_t a2, void *a3, void (*a4)(os_unfair_lock_s *))
{
  if (a3) {
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  }
  else {
    id v6 = 0LL;
  }
  MEMORY[0x1895F8858](v6);
  BOOL v8 = v7 + 4;
  uint64_t v9 = v7 + 43;
  id v10 = a1;
  os_unfair_lock_lock(v9);
  a4(v8);
  os_unfair_lock_unlock(v9);

  swift_bridgeObjectRelease();
  return 1LL;
}

uint64_t _NSSwiftURLComponents._percentEncodedPassword.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  __int128 v2 = *(_OWORD *)(v1 + 16);
  __int128 v3 = *(_OWORD *)(v1 + 32);
  __int128 v4 = *(_OWORD *)(v1 + 48);
  __int128 v5 = *(_OWORD *)(v1 + 64);
  __int128 v6 = *(_OWORD *)(v1 + 96);
  __int128 v26 = *(_OWORD *)(v1 + 80);
  __int128 v27 = v6;
  __int128 v24 = v4;
  __int128 v25 = v5;
  __int128 v7 = *(_OWORD *)(v1 + 112);
  __int128 v8 = *(_OWORD *)(v1 + 128);
  __int128 v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)(v1 + 154);
  __int128 v29 = v8;
  v30[0] = v9;
  __int128 v28 = v7;
  __int128 v22 = v2;
  __int128 v23 = v3;
  __int128 v19 = *(_OWORD *)(v1 + 112);
  __int128 v20 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)unint64_t v21 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v21[10] = *(_OWORD *)(v1 + 154);
  __int128 v15 = *(_OWORD *)(v1 + 48);
  __int128 v16 = *(_OWORD *)(v1 + 64);
  __int128 v17 = *(_OWORD *)(v1 + 80);
  __int128 v18 = *(_OWORD *)(v1 + 96);
  __int128 v13 = *(_OWORD *)(v1 + 16);
  __int128 v14 = *(_OWORD *)(v1 + 32);
  outlined retain of URLComponents((uint64_t)&v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  __int128 v28 = v19;
  __int128 v29 = v20;
  v30[0] = *(_OWORD *)v21;
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)&v21[10];
  __int128 v24 = v15;
  __int128 v25 = v16;
  __int128 v26 = v17;
  __int128 v27 = v18;
  __int128 v22 = v13;
  __int128 v23 = v14;
  if ((void)v17)
  {
    uint64_t v10 = *((void *)&v25 + 1);
  }

  else if ((BYTE11(v22) & 1) != 0 && (void)v22 && (*(_BYTE *)(v22 + 96) & 1) == 0)
  {
    uint64_t v12 = String.subscript.getter();
    uint64_t v10 = MEMORY[0x186E1B610](v12);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v22);
  return v10;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedPassword(_:)( uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 11) = 0;
  if (!a3)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 56) = a2;
    *(void *)(a1 + 64) = a3;
    return result;
  }

  if ((a3 & 0x1000000000000000LL) != 0)
  {
    unint64_t v17 = a2;
    uint64_t v18 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    __int128 v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents, v17, v18);
    id v11 = v9;
    if (v10)
    {
      StringProtocol._ephemeralString.getter();
      uint64_t v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v10,  (uint64_t)v13,  2u,  1);
    }

    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 2u, 1);
    }

    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v17 = a2;
      uint64_t v18 = a3 & 0xFFFFFFFFFFFFFFLL;
      __int128 v6 = (char *)&v17;
    }

    else if ((a2 & 0x1000000000000000LL) != 0)
    {
      __int128 v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      __int128 v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 1)) {
      goto LABEL_8;
    }
  }

  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *__int128 v16 = 2;
  return swift_willThrow();
}

uint64_t @objc _NSSwiftURLComponents._setScheme(_:)( void *a1, uint64_t a2, void *a3, uint64_t (*a4)(void, void))
{
  if (a3) {
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  }
  else {
    id v6 = 0LL;
  }
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (uint64_t)&v7[4];
  __int128 v9 = v7 + 43;
  id v10 = a1;
  os_unfair_lock_lock(v9);
  partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedHost(_:)(v8, a4);
  os_unfair_lock_unlock(v9);

  swift_bridgeObjectRelease();
  return 1LL;
}

id @objc _NSSwiftURLComponents.user.getter( char *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void))
{
  uint64_t v4 = *(void *)&a1[OBJC_IVAR____NSSwiftURLComponents_lock];
  __int128 v5 = (_OWORD *)(v4 + 16);
  id v6 = (os_unfair_lock_s *)(v4 + 172);
  uint64_t v7 = a1;
  os_unfair_lock_lock(v6);
  closure #1 in _NSSwiftURLComponents.components.getter(v5, &v22);
  os_unfair_lock_unlock(v6);
  v20[6] = v28;
  v20[7] = v29;
  v21[0] = v30[0];
  *(_OWORD *)((char *)v21 + 10) = *(_OWORD *)((char *)v30 + 10);
  _OWORD v30[8] = v28;
  v30[9] = v29;
  v31[0] = v30[0];
  *(_OWORD *)((char *)v31 + 10) = *(_OWORD *)((char *)v30 + 10);
  v30[4] = v24;
  v30[5] = v25;
  v30[6] = v26;
  v30[7] = v27;
  _OWORD v30[2] = v22;
  v30[3] = v23;
  a3( v8,  v9,  v10,  v11,  v12,  v13,  v14,  v15,  v22,  *((void *)&v22 + 1),  v23,  *((void *)&v23 + 1),  v24,  *((void *)&v24 + 1),  v25,  *((void *)&v25 + 1),  v26,  *((void *)&v26 + 1),  v27,  *((void *)&v27 + 1));
  uint64_t v17 = v16;
  outlined release of URLComponents((uint64_t)v20);

  if (!v17) {
    return 0LL;
  }
  uint64_t v18 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t closure #1 in _NSSwiftURLComponents._setEncodedHost(_:)( uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_WORD *)(a1 + 152) = 0;
  if (!a3)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 72) = a2;
    *(void *)(a1 + 80) = 0LL;
    return result;
  }

  unint64_t v6 = specialized Collection.first.getter(a2, a3);
  if ((v6 & 0x1FF) != 0x5B) {
    goto LABEL_23;
  }
  if ((a3 & 0x1000000000000000LL) == 0)
  {
    uint64_t v7 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (!v7)
    {
      __break(1u);
      goto LABEL_35;
    }

    unint64_t v6 = (v7 << 16) - 65532;
    LOBYTE(v8) = 1;
LABEL_8:
    if ((v6 & 0xC) != 4LL << v8)
    {
LABEL_9:
      unint64_t v9 = HIBYTE(a3) & 0xF;
      if ((a3 & 0x2000000000000000LL) == 0) {
        unint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v10 = v6 >> 16;
      if (v6 >> 16 >= v9)
      {
        __break(1u);
        goto LABEL_37;
      }

      if ((a3 & 0x1000000000000000LL) != 0)
      {
        char v12 = String.UTF8View._foreignSubscript(position:)();
      }

      else if ((a3 & 0x2000000000000000LL) != 0)
      {
        unint64_t v28 = a2;
        uint64_t v29 = a3 & 0xFFFFFFFFFFFFFFLL;
        char v12 = *((_BYTE *)&v28 + v10);
      }

      else
      {
        if ((a2 & 0x1000000000000000LL) != 0) {
          uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else {
          uint64_t v11 = _StringObject.sharedUTF8.getter();
        }
        char v12 = *(_BYTE *)(v11 + v10);
      }

      if (v12 == 93)
      {
        swift_bridgeObjectRetain();
        char v14 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a2, a3);
        swift_bridgeObjectRelease();
        if ((v14 & 1) == 0)
        {
LABEL_22:
          lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
          swift_allocError();
          *uint64_t v15 = 3;
          return swift_willThrow();
        }

        goto LABEL_29;
      }

uint64_t _NSSwiftURLComponents._percentEncodedPath.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  __int128 v2 = *(_OWORD *)(v1 + 16);
  __int128 v3 = *(_OWORD *)(v1 + 32);
  __int128 v4 = *(_OWORD *)(v1 + 48);
  __int128 v5 = *(_OWORD *)(v1 + 64);
  __int128 v6 = *(_OWORD *)(v1 + 96);
  __int128 v26 = *(_OWORD *)(v1 + 80);
  __int128 v27 = v6;
  __int128 v24 = v4;
  __int128 v25 = v5;
  __int128 v7 = *(_OWORD *)(v1 + 112);
  __int128 v8 = *(_OWORD *)(v1 + 128);
  __int128 v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)(v1 + 154);
  __int128 v29 = v8;
  v30[0] = v9;
  __int128 v28 = v7;
  __int128 v22 = v2;
  __int128 v23 = v3;
  __int128 v19 = *(_OWORD *)(v1 + 112);
  __int128 v20 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)unint64_t v21 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v21[10] = *(_OWORD *)(v1 + 154);
  __int128 v15 = *(_OWORD *)(v1 + 48);
  __int128 v16 = *(_OWORD *)(v1 + 64);
  __int128 v17 = *(_OWORD *)(v1 + 80);
  __int128 v18 = *(_OWORD *)(v1 + 96);
  __int128 v13 = *(_OWORD *)(v1 + 16);
  __int128 v14 = *(_OWORD *)(v1 + 32);
  outlined retain of URLComponents((uint64_t)&v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  __int128 v28 = v19;
  __int128 v29 = v20;
  v30[0] = *(_OWORD *)v21;
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)&v21[10];
  __int128 v24 = v15;
  __int128 v25 = v16;
  __int128 v26 = v17;
  __int128 v27 = v18;
  __int128 v22 = v13;
  __int128 v23 = v14;
  if ((void)v20)
  {
    uint64_t v10 = *((void *)&v28 + 1);
  }

  else if ((BYTE14(v22) & 1) != 0 && (void)v22)
  {
    if ((*(_BYTE *)(v22 + 168) & 1) != 0) {
      uint64_t v11 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      uint64_t v11 = String.subscript.getter();
    }
    uint64_t v10 = MEMORY[0x186E1B610](v11);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v22);
  return v10;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedPath(_:)( uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = 0LL;
  }
  if (a3) {
    unint64_t v5 = a3;
  }
  else {
    unint64_t v5 = 0xE000000000000000LL;
  }
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  if ((v5 & 0x1000000000000000LL) != 0)
  {
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents, v4, v5);
    id v12 = v10;
    if (v11)
    {
      StringProtocol._ephemeralString.getter();
      __int128 v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v13, sel_length, v4, v5);
      swift_unknownObjectRelease();
      char v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v11,  (uint64_t)v14,  0x10u,  1);
    }

    else
    {
      char v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v4, v5, 0x10u, 1);
    }

    char v16 = v15;
    swift_bridgeObjectRelease_n();
    if ((v16 & 1) != 0) {
      goto LABEL_13;
    }
  }

  else
  {
    if ((v5 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(v5) & 0xF;
      v18[0] = v4;
      v18[1] = v5 & 0xFFFFFFFFFFFFFFLL;
      __int128 v6 = (char *)v18;
    }

    else if ((v4 & 0x1000000000000000LL) != 0)
    {
      __int128 v6 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      __int128 v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x10u, 1);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_13:
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = v4;
      *(void *)(a1 + 112) = v5;
      return result;
    }
  }

  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *__int128 v17 = 5;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t _NSSwiftURLComponents._percentEncodedQuery.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  __int128 v2 = *(_OWORD *)(v1 + 16);
  __int128 v3 = *(_OWORD *)(v1 + 32);
  __int128 v4 = *(_OWORD *)(v1 + 48);
  __int128 v5 = *(_OWORD *)(v1 + 64);
  __int128 v6 = *(_OWORD *)(v1 + 96);
  __int128 v26 = *(_OWORD *)(v1 + 80);
  __int128 v27 = v6;
  __int128 v24 = v4;
  __int128 v25 = v5;
  __int128 v7 = *(_OWORD *)(v1 + 112);
  __int128 v8 = *(_OWORD *)(v1 + 128);
  __int128 v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)(v1 + 154);
  __int128 v29 = v8;
  v30[0] = v9;
  __int128 v28 = v7;
  __int128 v22 = v2;
  __int128 v23 = v3;
  __int128 v19 = *(_OWORD *)(v1 + 112);
  __int128 v20 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)unint64_t v21 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v21[10] = *(_OWORD *)(v1 + 154);
  __int128 v15 = *(_OWORD *)(v1 + 48);
  __int128 v16 = *(_OWORD *)(v1 + 64);
  __int128 v17 = *(_OWORD *)(v1 + 80);
  __int128 v18 = *(_OWORD *)(v1 + 96);
  __int128 v13 = *(_OWORD *)(v1 + 16);
  __int128 v14 = *(_OWORD *)(v1 + 32);
  outlined retain of URLComponents((uint64_t)&v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  __int128 v28 = v19;
  __int128 v29 = v20;
  v30[0] = *(_OWORD *)v21;
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)&v21[10];
  __int128 v24 = v15;
  __int128 v25 = v16;
  __int128 v26 = v17;
  __int128 v27 = v18;
  __int128 v22 = v13;
  __int128 v23 = v14;
  if (*(void *)v21)
  {
    uint64_t v10 = *((void *)&v29 + 1);
  }

  else if ((HIBYTE(v22) & 1) != 0 && (void)v22 && (*(_BYTE *)(v22 + 192) & 1) == 0)
  {
    uint64_t v12 = String.subscript.getter();
    uint64_t v10 = MEMORY[0x186E1B610](v12);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v22);
  return v10;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedQuery(_:)( uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 15) = 0;
  if (!a3)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 120) = a2;
    *(void *)(a1 + 128) = a3;
    return result;
  }

  if ((a3 & 0x1000000000000000LL) != 0)
  {
    unint64_t v17 = a2;
    uint64_t v18 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    __int128 v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents, v17, v18);
    id v11 = v9;
    if (v10)
    {
      StringProtocol._ephemeralString.getter();
      uint64_t v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v10,  (uint64_t)v13,  0x40u,  1);
    }

    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 0x40u, 1);
    }

    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v17 = a2;
      uint64_t v18 = a3 & 0xFFFFFFFFFFFFFFLL;
      __int128 v6 = (char *)&v17;
    }

    else if ((a2 & 0x1000000000000000LL) != 0)
    {
      __int128 v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      __int128 v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 1)) {
      goto LABEL_8;
    }
  }

  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *__int128 v16 = 6;
  return swift_willThrow();
}

id @objc _NSSwiftURLComponents.string.getter(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();
  uint64_t v6 = v5;

  if (v6)
  {
    uint64_t v7 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

uint64_t _NSSwiftURLComponents._percentEncodedFragment.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  __int128 v2 = *(_OWORD *)(v1 + 16);
  __int128 v3 = *(_OWORD *)(v1 + 32);
  __int128 v4 = *(_OWORD *)(v1 + 48);
  __int128 v5 = *(_OWORD *)(v1 + 64);
  __int128 v6 = *(_OWORD *)(v1 + 96);
  __int128 v26 = *(_OWORD *)(v1 + 80);
  __int128 v27 = v6;
  __int128 v24 = v4;
  __int128 v25 = v5;
  __int128 v7 = *(_OWORD *)(v1 + 112);
  __int128 v8 = *(_OWORD *)(v1 + 128);
  __int128 v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&_OWORD v30[10] = *(_OWORD *)(v1 + 154);
  __int128 v29 = v8;
  *(_OWORD *)__int128 v30 = v9;
  __int128 v28 = v7;
  __int128 v22 = v2;
  __int128 v23 = v3;
  __int128 v19 = *(_OWORD *)(v1 + 112);
  __int128 v20 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)unint64_t v21 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v21[10] = *(_OWORD *)(v1 + 154);
  __int128 v15 = *(_OWORD *)(v1 + 48);
  __int128 v16 = *(_OWORD *)(v1 + 64);
  __int128 v17 = *(_OWORD *)(v1 + 80);
  __int128 v18 = *(_OWORD *)(v1 + 96);
  __int128 v13 = *(_OWORD *)(v1 + 16);
  __int128 v14 = *(_OWORD *)(v1 + 32);
  outlined retain of URLComponents((uint64_t)&v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  __int128 v28 = v19;
  __int128 v29 = v20;
  *(_OWORD *)__int128 v30 = *(_OWORD *)v21;
  *(_OWORD *)&_OWORD v30[10] = *(_OWORD *)&v21[10];
  __int128 v24 = v15;
  __int128 v25 = v16;
  __int128 v26 = v17;
  __int128 v27 = v18;
  __int128 v22 = v13;
  __int128 v23 = v14;
  if ((unint64_t)(*(_OWORD *)&v21[10] >> 48))
  {
    uint64_t v10 = *(void *)&v30[8];
  }

  else if ((v23 & 1) != 0 && (void)v22 && (*(_BYTE *)(v22 + 216) & 1) == 0)
  {
    uint64_t v12 = String.subscript.getter();
    uint64_t v10 = MEMORY[0x186E1B610](v12);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v22);
  return v10;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedFragment(_:)( uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (!a3)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 136) = a2;
    *(void *)(a1 + 144) = a3;
    return result;
  }

  if ((a3 & 0x1000000000000000LL) != 0)
  {
    unint64_t v17 = a2;
    uint64_t v18 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    __int128 v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents, v17, v18);
    id v11 = v9;
    if (v10)
    {
      StringProtocol._ephemeralString.getter();
      uint64_t v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v10,  (uint64_t)v13,  0x40u,  1);
    }

    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 0x40u, 1);
    }

    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v17 = a2;
      uint64_t v18 = a3 & 0xFFFFFFFFFFFFFFLL;
      __int128 v6 = (char *)&v17;
    }

    else if ((a2 & 0x1000000000000000LL) != 0)
    {
      __int128 v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      __int128 v6 = (char *)_StringObject.sharedUTF8.getter();
    }

    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 1)) {
      goto LABEL_8;
    }
  }

  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *__int128 v16 = 8;
  return swift_willThrow();
}

id @objc _NSSwiftURLComponents.queryItems.getter(char *a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(void *)&a1[OBJC_IVAR____NSSwiftURLComponents_lock];
  __int128 v5 = (_OWORD *)(v4 + 16);
  __int128 v6 = (os_unfair_lock_s *)(v4 + 172);
  uint64_t v7 = a1;
  os_unfair_lock_lock(v6);
  closure #1 in _NSSwiftURLComponents.components.getter(v5, &v13);
  os_unfair_lock_unlock(v6);
  v11[6] = v19;
  v11[7] = v20;
  v12[0] = v21[0];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v21 + 10);
  v11[2] = v15;
  v11[3] = v16;
  v11[4] = v17;
  v11[5] = v18;
  v11[0] = v13;
  v11[1] = v14;
  v21[8] = v19;
  v21[9] = v20;
  v22[0] = v21[0];
  *(_OWORD *)((char *)v22 + 10) = *(_OWORD *)((char *)v21 + 10);
  v21[4] = v15;
  v21[5] = v16;
  v21[6] = v17;
  v21[7] = v18;
  _OWORD v21[2] = v13;
  _OWORD v21[3] = v14;
  unint64_t v8 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(a3 & 1);
  outlined release of URLComponents((uint64_t)v11);

  if (v8) {
    __int128 v9 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }
  else {
    __int128 v9 = 0LL;
  }
  return v9;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedQueryItems(_:)(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 15) = 0;
  if (!a2)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 120) = 0LL;
    *(void *)(a1 + 128) = 0LL;
    return result;
  }

  int64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)(a1 + 120) = xmmword_183725730;
    return result;
  }

  unint64_t v45 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  __int128 v5 = (unint64_t *)(a2 + 56);
  while (1)
  {
    unint64_t v7 = *(v5 - 3);
    unint64_t v6 = *(v5 - 2);
    unint64_t v9 = *(v5 - 1);
    unint64_t v8 = *v5;
    if ((v6 & 0x1000000000000000LL) != 0)
    {
      unint64_t v43 = *(v5 - 3);
      uint64_t v44 = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      unint64_t v21 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      __int128 v22 = (unsigned __int16 *)objc_msgSend(v21, sel__fastCharacterContents);
      id v23 = v21;
      if (v22)
      {
        unint64_t v43 = v7;
        uint64_t v44 = v6;
        unint64_t v40 = v22;
        StringProtocol._ephemeralString.getter();
        __int128 v24 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v25 = objc_msgSend(v24, sel_length);
        swift_unknownObjectRelease();
        char v26 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v40,  (uint64_t)v25,  0x80u,  1);
      }

      else
      {
        char v26 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v6, 0x80u, 1);
      }

      char v33 = v26;
      swift_bridgeObjectRelease_n();
      if ((v33 & 1) == 0) {
        goto LABEL_37;
      }
    }

    else
    {
      if ((v6 & 0x2000000000000000LL) != 0)
      {
        uint64_t v11 = HIBYTE(v6) & 0xF;
        unint64_t v43 = *(v5 - 3);
        uint64_t v44 = v6 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v10 = (char *)&v43;
      }

      else if ((v7 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v10 = (char *)_StringObject.sharedUTF8.getter();
      }

      BOOL v12 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, v11, 0x80u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v12) {
        goto LABEL_37;
      }
    }

    unint64_t v43 = v7;
    uint64_t v44 = v6;
    if (v8) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_19:
    unint64_t v17 = v45;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v17 + 16) + 1LL,  1);
      unint64_t v17 = v45;
    }

    unint64_t v19 = *(void *)(v17 + 16);
    unint64_t v18 = *(void *)(v17 + 24);
    if (v19 >= v18 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      unint64_t v17 = v45;
    }

    v5 += 4;
    *(void *)(v17 + 16) = v19 + 1;
    unint64_t v20 = v17 + 16 * v19;
    *(void *)(v20 + 32) = v7;
    *(void *)(v20 + 40) = v6;
    if (!--v4)
    {
      unint64_t v43 = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v36 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v38 = v37;
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = v36;
      *(void *)(a1 + 128) = v38;
      return result;
    }
  }

  if ((v8 & 0x1000000000000000LL) == 0)
  {
    if ((v8 & 0x2000000000000000LL) != 0)
    {
      uint64_t v14 = HIBYTE(v8) & 0xF;
      v42._uint64_t countAndFlagsBits = v9;
      v42._unint64_t object = (void *)(v8 & 0xFFFFFFFFFFFFFFLL);
      __int128 v13 = (char *)&v42;
    }

    else if ((v9 & 0x1000000000000000LL) != 0)
    {
      __int128 v13 = (char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = v9 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      __int128 v13 = (char *)_StringObject.sharedUTF8.getter();
    }

    BOOL v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v13, v14, 0x40u, 1);
    swift_bridgeObjectRetain();
    if (!v15) {
      goto LABEL_36;
    }
    goto LABEL_18;
  }

  v42._uint64_t countAndFlagsBits = v9;
  v42._unint64_t object = (void *)v8;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  StringProtocol._ephemeralString.getter();
  __int128 v27 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  __int128 v28 = (unsigned __int16 *)objc_msgSend(v27, sel__fastCharacterContents);
  id v29 = v27;
  if (v28)
  {
    v42._uint64_t countAndFlagsBits = v9;
    v42._unint64_t object = (void *)v8;
    uint64_t v41 = v28;
    StringProtocol._ephemeralString.getter();
    __int128 v30 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v31 = objc_msgSend(v30, sel_length);
    swift_unknownObjectRelease();
    char v32 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v41,  (uint64_t)v31,  0x40u,  1);
  }

  else
  {
    char v32 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v8, 0x40u, 1);
  }

  char v34 = v32;
  swift_bridgeObjectRelease_n();
  if ((v34 & 1) != 0)
  {
LABEL_18:
    v42._uint64_t countAndFlagsBits = 61LL;
    v42._unint64_t object = (void *)0xE100000000000000LL;
    v16._uint64_t countAndFlagsBits = v9;
    v16._unint64_t object = (void *)v8;
    String.append(_:)(v16);
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v7 = v43;
    unint64_t v6 = v44;
    goto LABEL_19;
  }

uint64_t _NSSwiftURLComponents.rangeOfScheme.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  __int128 v3 = *(_OWORD *)(v2 + 16);
  __int128 v4 = *(_OWORD *)(v2 + 32);
  __int128 v5 = *(_OWORD *)(v2 + 48);
  __int128 v6 = *(_OWORD *)(v2 + 64);
  __int128 v7 = *(_OWORD *)(v2 + 96);
  __int128 v40 = *(_OWORD *)(v2 + 80);
  __int128 v41 = v7;
  __int128 v38 = v5;
  __int128 v39 = v6;
  __int128 v8 = *(_OWORD *)(v2 + 112);
  __int128 v9 = *(_OWORD *)(v2 + 128);
  __int128 v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v43 = v9;
  v44[0] = v10;
  __int128 v42 = v8;
  __int128 v36 = v3;
  __int128 v37 = v4;
  __int128 v11 = *(_OWORD *)(v2 + 128);
  __int128 v33 = *(_OWORD *)(v2 + 112);
  __int128 v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v12 = *(_OWORD *)(v2 + 64);
  __int128 v29 = *(_OWORD *)(v2 + 48);
  __int128 v30 = v12;
  __int128 v13 = *(_OWORD *)(v2 + 96);
  __int128 v31 = *(_OWORD *)(v2 + 80);
  __int128 v32 = v13;
  __int128 v14 = *(_OWORD *)(v2 + 32);
  __int128 v27 = *(_OWORD *)(v2 + 16);
  __int128 v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  void v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  __int128 v42 = v33;
  __int128 v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  __int128 v38 = v29;
  __int128 v39 = v30;
  __int128 v40 = v31;
  __int128 v41 = v32;
  __int128 v36 = v27;
  __int128 v37 = v28;
  if ((void)v27)
  {
    if (BYTE8(v27))
    {
      char v15 = *(_BYTE *)(*(void *)&v25[0] + 48LL);
      goto LABEL_9;
    }
  }

  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    char v15 = 1;
    goto LABEL_9;
  }

  uint64_t v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17) {
    goto LABEL_8;
  }
  char v15 = 1;
  Swift::Int v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    char v15 = *(_BYTE *)(v18 + 48);
    swift_release();
  }

uint64_t _NSSwiftURLComponents.rangeOfUser.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  __int128 v3 = *(_OWORD *)(v2 + 16);
  __int128 v4 = *(_OWORD *)(v2 + 32);
  __int128 v5 = *(_OWORD *)(v2 + 48);
  __int128 v6 = *(_OWORD *)(v2 + 64);
  __int128 v7 = *(_OWORD *)(v2 + 96);
  __int128 v40 = *(_OWORD *)(v2 + 80);
  __int128 v41 = v7;
  __int128 v38 = v5;
  __int128 v39 = v6;
  __int128 v8 = *(_OWORD *)(v2 + 112);
  __int128 v9 = *(_OWORD *)(v2 + 128);
  __int128 v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v43 = v9;
  v44[0] = v10;
  __int128 v42 = v8;
  __int128 v36 = v3;
  __int128 v37 = v4;
  __int128 v11 = *(_OWORD *)(v2 + 128);
  __int128 v33 = *(_OWORD *)(v2 + 112);
  __int128 v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v12 = *(_OWORD *)(v2 + 64);
  __int128 v29 = *(_OWORD *)(v2 + 48);
  __int128 v30 = v12;
  __int128 v13 = *(_OWORD *)(v2 + 96);
  __int128 v31 = *(_OWORD *)(v2 + 80);
  __int128 v32 = v13;
  __int128 v14 = *(_OWORD *)(v2 + 32);
  __int128 v27 = *(_OWORD *)(v2 + 16);
  __int128 v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  void v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  __int128 v42 = v33;
  __int128 v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  __int128 v38 = v29;
  __int128 v39 = v30;
  __int128 v40 = v31;
  __int128 v41 = v32;
  __int128 v36 = v27;
  __int128 v37 = v28;
  if ((void)v27)
  {
    if (BYTE8(v27))
    {
      char v15 = *(_BYTE *)(*(void *)&v25[0] + 72LL);
      goto LABEL_9;
    }
  }

  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    char v15 = 1;
    goto LABEL_9;
  }

  uint64_t v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17) {
    goto LABEL_8;
  }
  char v15 = 1;
  Swift::Int v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    char v15 = *(_BYTE *)(v18 + 72);
    swift_release();
  }

uint64_t _NSSwiftURLComponents.rangeOfPassword.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  __int128 v3 = *(_OWORD *)(v2 + 16);
  __int128 v4 = *(_OWORD *)(v2 + 32);
  __int128 v5 = *(_OWORD *)(v2 + 48);
  __int128 v6 = *(_OWORD *)(v2 + 64);
  __int128 v7 = *(_OWORD *)(v2 + 96);
  __int128 v40 = *(_OWORD *)(v2 + 80);
  __int128 v41 = v7;
  __int128 v38 = v5;
  __int128 v39 = v6;
  __int128 v8 = *(_OWORD *)(v2 + 112);
  __int128 v9 = *(_OWORD *)(v2 + 128);
  __int128 v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v43 = v9;
  v44[0] = v10;
  __int128 v42 = v8;
  __int128 v36 = v3;
  __int128 v37 = v4;
  __int128 v11 = *(_OWORD *)(v2 + 128);
  __int128 v33 = *(_OWORD *)(v2 + 112);
  __int128 v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v12 = *(_OWORD *)(v2 + 64);
  __int128 v29 = *(_OWORD *)(v2 + 48);
  __int128 v30 = v12;
  __int128 v13 = *(_OWORD *)(v2 + 96);
  __int128 v31 = *(_OWORD *)(v2 + 80);
  __int128 v32 = v13;
  __int128 v14 = *(_OWORD *)(v2 + 32);
  __int128 v27 = *(_OWORD *)(v2 + 16);
  __int128 v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  void v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  __int128 v42 = v33;
  __int128 v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  __int128 v38 = v29;
  __int128 v39 = v30;
  __int128 v40 = v31;
  __int128 v41 = v32;
  __int128 v36 = v27;
  __int128 v37 = v28;
  if ((void)v27)
  {
    if (BYTE8(v27))
    {
      char v15 = *(_BYTE *)(*(void *)&v25[0] + 96LL);
      goto LABEL_9;
    }
  }

  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    char v15 = 1;
    goto LABEL_9;
  }

  uint64_t v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17) {
    goto LABEL_8;
  }
  char v15 = 1;
  Swift::Int v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    char v15 = *(_BYTE *)(v18 + 96);
    swift_release();
  }

uint64_t _NSSwiftURLComponents.rangeOfHost.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  __int128 v3 = *(_OWORD *)(v2 + 16);
  __int128 v4 = *(_OWORD *)(v2 + 32);
  __int128 v5 = *(_OWORD *)(v2 + 48);
  __int128 v6 = *(_OWORD *)(v2 + 64);
  __int128 v7 = *(_OWORD *)(v2 + 96);
  __int128 v40 = *(_OWORD *)(v2 + 80);
  __int128 v41 = v7;
  __int128 v38 = v5;
  __int128 v39 = v6;
  __int128 v8 = *(_OWORD *)(v2 + 112);
  __int128 v9 = *(_OWORD *)(v2 + 128);
  __int128 v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v43 = v9;
  v44[0] = v10;
  __int128 v42 = v8;
  __int128 v36 = v3;
  __int128 v37 = v4;
  __int128 v11 = *(_OWORD *)(v2 + 128);
  __int128 v33 = *(_OWORD *)(v2 + 112);
  __int128 v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v12 = *(_OWORD *)(v2 + 64);
  __int128 v29 = *(_OWORD *)(v2 + 48);
  __int128 v30 = v12;
  __int128 v13 = *(_OWORD *)(v2 + 96);
  __int128 v31 = *(_OWORD *)(v2 + 80);
  __int128 v32 = v13;
  __int128 v14 = *(_OWORD *)(v2 + 32);
  __int128 v27 = *(_OWORD *)(v2 + 16);
  __int128 v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  void v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  __int128 v42 = v33;
  __int128 v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  __int128 v38 = v29;
  __int128 v39 = v30;
  __int128 v40 = v31;
  __int128 v41 = v32;
  __int128 v36 = v27;
  __int128 v37 = v28;
  if ((void)v27)
  {
    if (BYTE8(v27))
    {
      char v15 = *(_BYTE *)(*(void *)&v25[0] + 120LL);
      goto LABEL_9;
    }
  }

  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    char v15 = 1;
    goto LABEL_9;
  }

  uint64_t v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17) {
    goto LABEL_8;
  }
  char v15 = 1;
  Swift::Int v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    char v15 = *(_BYTE *)(v18 + 120);
    swift_release();
  }

uint64_t _NSSwiftURLComponents.rangeOfPort.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  __int128 v3 = *(_OWORD *)(v2 + 16);
  __int128 v4 = *(_OWORD *)(v2 + 32);
  __int128 v5 = *(_OWORD *)(v2 + 48);
  __int128 v6 = *(_OWORD *)(v2 + 64);
  __int128 v7 = *(_OWORD *)(v2 + 96);
  __int128 v40 = *(_OWORD *)(v2 + 80);
  __int128 v41 = v7;
  __int128 v38 = v5;
  __int128 v39 = v6;
  __int128 v8 = *(_OWORD *)(v2 + 112);
  __int128 v9 = *(_OWORD *)(v2 + 128);
  __int128 v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v43 = v9;
  v44[0] = v10;
  __int128 v42 = v8;
  __int128 v36 = v3;
  __int128 v37 = v4;
  __int128 v11 = *(_OWORD *)(v2 + 128);
  __int128 v33 = *(_OWORD *)(v2 + 112);
  __int128 v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v12 = *(_OWORD *)(v2 + 64);
  __int128 v29 = *(_OWORD *)(v2 + 48);
  __int128 v30 = v12;
  __int128 v13 = *(_OWORD *)(v2 + 96);
  __int128 v31 = *(_OWORD *)(v2 + 80);
  __int128 v32 = v13;
  __int128 v14 = *(_OWORD *)(v2 + 32);
  __int128 v27 = *(_OWORD *)(v2 + 16);
  __int128 v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  void v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  __int128 v42 = v33;
  __int128 v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  __int128 v38 = v29;
  __int128 v39 = v30;
  __int128 v40 = v31;
  __int128 v41 = v32;
  __int128 v36 = v27;
  __int128 v37 = v28;
  if ((void)v27)
  {
    if (BYTE8(v27))
    {
      char v15 = *(_BYTE *)(*(void *)&v25[0] + 144LL);
      goto LABEL_9;
    }
  }

  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    char v15 = 1;
    goto LABEL_9;
  }

  uint64_t v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17) {
    goto LABEL_8;
  }
  char v15 = 1;
  Swift::Int v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    char v15 = *(_BYTE *)(v18 + 144);
    swift_release();
  }

uint64_t _NSSwiftURLComponents.rangeOfPath.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  __int128 v3 = *(_OWORD *)(v2 + 16);
  __int128 v4 = *(_OWORD *)(v2 + 32);
  __int128 v5 = *(_OWORD *)(v2 + 48);
  __int128 v6 = *(_OWORD *)(v2 + 64);
  __int128 v7 = *(_OWORD *)(v2 + 96);
  __int128 v40 = *(_OWORD *)(v2 + 80);
  __int128 v41 = v7;
  __int128 v38 = v5;
  __int128 v39 = v6;
  __int128 v8 = *(_OWORD *)(v2 + 112);
  __int128 v9 = *(_OWORD *)(v2 + 128);
  __int128 v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v43 = v9;
  v44[0] = v10;
  __int128 v42 = v8;
  __int128 v36 = v3;
  __int128 v37 = v4;
  __int128 v11 = *(_OWORD *)(v2 + 128);
  __int128 v33 = *(_OWORD *)(v2 + 112);
  __int128 v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v12 = *(_OWORD *)(v2 + 64);
  __int128 v29 = *(_OWORD *)(v2 + 48);
  __int128 v30 = v12;
  __int128 v13 = *(_OWORD *)(v2 + 96);
  __int128 v31 = *(_OWORD *)(v2 + 80);
  __int128 v32 = v13;
  __int128 v14 = *(_OWORD *)(v2 + 32);
  __int128 v27 = *(_OWORD *)(v2 + 16);
  __int128 v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  void v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  __int128 v42 = v33;
  __int128 v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  __int128 v38 = v29;
  __int128 v39 = v30;
  __int128 v40 = v31;
  __int128 v41 = v32;
  __int128 v36 = v27;
  __int128 v37 = v28;
  if ((void)v27)
  {
    if (BYTE8(v27))
    {
      char v15 = *(_BYTE *)(*(void *)&v25[0] + 168LL);
      goto LABEL_9;
    }
  }

  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    char v15 = 1;
    goto LABEL_9;
  }

  uint64_t v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17) {
    goto LABEL_8;
  }
  char v15 = 1;
  Swift::Int v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    char v15 = *(_BYTE *)(v18 + 168);
    swift_release();
  }

uint64_t _NSSwiftURLComponents.rangeOfQuery.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  __int128 v3 = *(_OWORD *)(v2 + 16);
  __int128 v4 = *(_OWORD *)(v2 + 32);
  __int128 v5 = *(_OWORD *)(v2 + 48);
  __int128 v6 = *(_OWORD *)(v2 + 64);
  __int128 v7 = *(_OWORD *)(v2 + 96);
  __int128 v40 = *(_OWORD *)(v2 + 80);
  __int128 v41 = v7;
  __int128 v38 = v5;
  __int128 v39 = v6;
  __int128 v8 = *(_OWORD *)(v2 + 112);
  __int128 v9 = *(_OWORD *)(v2 + 128);
  __int128 v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v43 = v9;
  v44[0] = v10;
  __int128 v42 = v8;
  __int128 v36 = v3;
  __int128 v37 = v4;
  __int128 v11 = *(_OWORD *)(v2 + 128);
  __int128 v33 = *(_OWORD *)(v2 + 112);
  __int128 v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v12 = *(_OWORD *)(v2 + 64);
  __int128 v29 = *(_OWORD *)(v2 + 48);
  __int128 v30 = v12;
  __int128 v13 = *(_OWORD *)(v2 + 96);
  __int128 v31 = *(_OWORD *)(v2 + 80);
  __int128 v32 = v13;
  __int128 v14 = *(_OWORD *)(v2 + 32);
  __int128 v27 = *(_OWORD *)(v2 + 16);
  __int128 v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  void v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  __int128 v42 = v33;
  __int128 v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  __int128 v38 = v29;
  __int128 v39 = v30;
  __int128 v40 = v31;
  __int128 v41 = v32;
  __int128 v36 = v27;
  __int128 v37 = v28;
  if ((void)v27)
  {
    if (BYTE8(v27))
    {
      char v15 = *(_BYTE *)(*(void *)&v25[0] + 192LL);
      goto LABEL_9;
    }
  }

  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    char v15 = 1;
    goto LABEL_9;
  }

  uint64_t v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17) {
    goto LABEL_8;
  }
  char v15 = 1;
  Swift::Int v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    char v15 = *(_BYTE *)(v18 + 192);
    swift_release();
  }

uint64_t _NSSwiftURLComponents.rangeOfFragment.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  __int128 v3 = *(_OWORD *)(v2 + 16);
  __int128 v4 = *(_OWORD *)(v2 + 32);
  __int128 v5 = *(_OWORD *)(v2 + 48);
  __int128 v6 = *(_OWORD *)(v2 + 64);
  __int128 v7 = *(_OWORD *)(v2 + 96);
  __int128 v40 = *(_OWORD *)(v2 + 80);
  __int128 v41 = v7;
  __int128 v38 = v5;
  __int128 v39 = v6;
  __int128 v8 = *(_OWORD *)(v2 + 112);
  __int128 v9 = *(_OWORD *)(v2 + 128);
  __int128 v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v43 = v9;
  v44[0] = v10;
  __int128 v42 = v8;
  __int128 v36 = v3;
  __int128 v37 = v4;
  __int128 v11 = *(_OWORD *)(v2 + 128);
  __int128 v33 = *(_OWORD *)(v2 + 112);
  __int128 v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  __int128 v12 = *(_OWORD *)(v2 + 64);
  __int128 v29 = *(_OWORD *)(v2 + 48);
  __int128 v30 = v12;
  __int128 v13 = *(_OWORD *)(v2 + 96);
  __int128 v31 = *(_OWORD *)(v2 + 80);
  __int128 v32 = v13;
  __int128 v14 = *(_OWORD *)(v2 + 32);
  __int128 v27 = *(_OWORD *)(v2 + 16);
  __int128 v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  void v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  __int128 v42 = v33;
  __int128 v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  __int128 v38 = v29;
  __int128 v39 = v30;
  __int128 v40 = v31;
  __int128 v41 = v32;
  __int128 v36 = v27;
  __int128 v37 = v28;
  if ((void)v27)
  {
    if (BYTE8(v27))
    {
      char v15 = *(_BYTE *)(*(void *)&v25[0] + 216LL);
      goto LABEL_9;
    }
  }

  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    char v15 = 1;
    goto LABEL_9;
  }

  uint64_t v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17) {
    goto LABEL_8;
  }
  char v15 = 1;
  Swift::Int v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    char v15 = *(_BYTE *)(v18 + 216);
    swift_release();
  }

id _NSSwiftURLComponents.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _NSSwiftURLComponents();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for _NSSwiftURLComponents()
{
  return objc_opt_self();
}

uint64_t _NSSwiftURLQueryItem.isEqual(_:)(uint64_t a1)
{
  if (!v29)
  {
    outlined destroy of Any?((uint64_t)v28);
LABEL_16:
    outlined init with copy of (Hashable & Sendable)?( a1,  (uint64_t)v28,  &demangling cache variable for type metadata for Any?);
    if (v29)
    {
      type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSURLQueryItem);
      if ((swift_dynamicCast() & 1) != 0)
      {
        id v13 = *(id *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem);
        uint64_t v14 = *(void *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 8);
        id v16 = *(id *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 16);
        uint64_t v15 = *(void *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 24);
        id v17 = objc_msgSend(v27, sel_name);
        id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        uint64_t v20 = v19;

        id v21 = objc_msgSend(v27, sel_value);
        if (v21)
        {
          uint64_t v22 = v21;
          id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          uint64_t v25 = v24;

          if (v13 != v18)
          {
LABEL_27:
            char v11 = 0;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
LABEL_35:
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              return v11 & 1;
            }

uint64_t @objc _NSSwiftURLComponents.isEqual(_:)( void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }

  char v8 = a4(v10);

  outlined destroy of Any?((uint64_t)v10);
  return v8 & 1;
}

void _NSSwiftURLQueryItem.copy(with:)(void *a1@<X8>)
{
  uint64_t v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem);
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 8);
  uint64_t v8 = *(void *)(v2 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 16);
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 24);
  uint64_t v9 = (char *)objc_allocWithZone(ObjectType);
  BOOL v10 = &v9[OBJC_IVAR____NSSwiftURLQueryItem_queryItem];
  *(void *)BOOL v10 = v6;
  *((void *)v10 + 1) = v5;
  *((void *)v10 + 2) = v8;
  *((void *)v10 + 3) = v7;
  uint64_t v11 = String._bridgeToObjectiveCImpl()();
  if (v7) {
    __int128 v12 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    __int128 v12 = 0LL;
  }
  v14.receiver = v9;
  v14.super_class = ObjectType;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = objc_msgSendSuper2(&v14, sel_initWithName_value_, v11, v12);
  swift_unknownObjectRelease();

  a1[3] = ObjectType;
  *a1 = v13;
}

uint64_t @objc _NSSwiftURLComponents.copy(with:)( void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr))
{
  id v5 = a1;
  a4(v8);

  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  uint64_t v6 = _bridgeAnythingToObjectiveC<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

Swift::Int _NSSwiftURLQueryItem.hash.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t _NSSwiftURLQueryItem.init(coder:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = v1;
  if (objc_msgSend(a1, sel_allowsKeyedCoding))
  {
    id v5 = (void *)specialized NSCoder.decodeObject<A>(of:forKey:)(0x656D616E2E534ELL, 0xE700000000000000LL);
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      uint64_t v9 = v8;

      BOOL v10 = (void *)specialized NSCoder.decodeObject<A>(of:forKey:)(0x65756C61762E534ELL, 0xE800000000000000LL);
      if (v10)
      {
        uint64_t v11 = v10;
        id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        uint64_t v14 = v13;
      }

      else
      {
        id v12 = 0LL;
        uint64_t v14 = 0LL;
      }

      id v52 = objc_msgSend(a1, sel_error);
      if (!v52)
      {
        __int128 v54 = &v4[OBJC_IVAR____NSSwiftURLQueryItem_queryItem];
        *(void *)__int128 v54 = v7;
        *((void *)v54 + 1) = v9;
        *((void *)v54 + 2) = v12;
        *((void *)v54 + 3) = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();

        uint64_t v55 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (v14)
        {
          __int128 v56 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
        }

        else
        {
          __int128 v56 = 0LL;
        }

        v59.receiver = v4;
        v59.super_class = ObjectType;
        id v58 = objc_msgSendSuper2(&v59, sel_initWithName_value_, v55, v56);
        swift_unknownObjectRelease();

        return (unint64_t)v58;
      }

      __int128 v53 = v52;
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
LABEL_23:
      swift_deallocPartialClassInstance();
      return 0LL;
    }

    goto LABEL_11;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 40) = v16;
  *(void *)(inited + 48) = 0xD000000000000026LL;
  *(void *)(inited + 56) = 0x80000001839CC750LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  id v17 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?( inited + 32,  (uint64_t)&v60,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
  uint64_t v18 = v60;
  uint64_t v19 = v61;
  swift_retain();
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
  if ((v21 & 1) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }

  v17[(result >> 6) + 8] |= 1LL << result;
  uint64_t v22 = (uint64_t *)(v17[6] + 16 * result);
  *uint64_t v22 = v18;
  v22[1] = v19;
  unint64_t result = (unint64_t)outlined init with take of Any(v62, (_OWORD *)(v17[7] + 32 * result));
  uint64_t v23 = v17[2];
  BOOL v24 = __OFADD__(v23, 1LL);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  _OWORD v17[2] = v25;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v26 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v27 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v28 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v29 = objc_msgSend(v28, sel_domain);
  id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v32 = v31;

  if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v32 == v33) {
    goto LABEL_15;
  }
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v34 & 1) != 0)
  {
LABEL_22:
    objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
    swift_unknownObjectRelease();

    goto LABEL_23;
  }

  __break(1u);
LABEL_11:

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v35 = swift_initStackObject();
  *(_OWORD *)(v35 + 16) = xmmword_183720D90;
  *(void *)(v35 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(v35 + 72) = MEMORY[0x189617FA8];
  *(void *)(v35 + 40) = v36;
  *(void *)(v35 + 48) = 0xD00000000000001DLL;
  *(void *)(v35 + 56) = 0x80000001839CC780LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  __int128 v37 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?( v35 + 32,  (uint64_t)&v60,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
  uint64_t v38 = v60;
  uint64_t v39 = v61;
  swift_retain();
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
  if ((v40 & 1) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  v37[(result >> 6) + 8] |= 1LL << result;
  __int128 v41 = (uint64_t *)(v37[6] + 16 * result);
  *__int128 v41 = v38;
  v41[1] = v39;
  unint64_t result = (unint64_t)outlined init with take of Any(v62, (_OWORD *)(v37[7] + 32 * result));
  uint64_t v42 = v37[2];
  BOOL v24 = __OFADD__(v42, 1LL);
  uint64_t v43 = v42 + 1;
  if (v24)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  v37[2] = v43;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v44 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v45 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v46 = objc_msgSend(v44, sel_initWithDomain_code_userInfo_, v45, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v47 = objc_msgSend(v46, sel_domain);
  id v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  uint64_t v50 = v49;

  if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v50 == v51)
  {
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_22;
  }

  char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  if ((v57 & 1) != 0) {
    goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _NSSwiftURLQueryItem()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedQueryItems(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setPercentEncodedQueryItems(_:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.queryItems.setter()
{
  v1.value._rawValue = (void *)swift_bridgeObjectRetain();
  URLComponents._URLComponents.setQueryItems(_:)(v1);
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedFragment(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setPercentEncodedFragment(_:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedQuery(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setPercentEncodedQuery(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedPath(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setPercentEncodedPath(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setEncodedHost(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setEncodedHost(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedPassword(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setPercentEncodedPassword(_:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedUser(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setPercentEncodedUser(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.fragment.setter(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents.fragment.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.query.setter(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents.query.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.path.setter(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents.path.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPort(_:)(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents._setPort(_:)(a1, *(id *)(v1 + 16));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.host.setter()
{
  unint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return URLComponents._URLComponents.host.setter(v2, v1);
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.password.setter(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents.password.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.user.setter(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents.user.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedHost(_:)( uint64_t a1, uint64_t (*a2)(void, void))
{
  return a2(*(void *)(v2 + 16), *(void *)(v2 + 24));
}

id specialized static NSURLComponents._componentsWith(url:resolvingAgainstBaseURL:)(uint64_t a1, char a2)
{
  *(void *)uint64_t v13 = *(void *)a1;
  *(_OWORD *)&v13[8] = *(_OWORD *)(a1 + 8);
  URLComponents.init(url:resolvingAgainstBaseURL:)((uint64_t)v13, a2, (uint64_t)v11);
  outlined init with take of LocalePreferences?( (uint64_t)v11,  (uint64_t)v12,  &demangling cache variable for type metadata for URLComponents?);
  outlined init with take of LocalePreferences?( (uint64_t)v12,  (uint64_t)v13,  &demangling cache variable for type metadata for URLComponents?);
  uint64_t v3 = (objc_class *)type metadata accessor for _NSSwiftURLComponents();
  uint64_t v4 = (char *)objc_allocWithZone(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 172) = 0;
  __int128 v6 = v19;
  *(_OWORD *)(v5 + 112) = v18;
  *(_OWORD *)(v5 + 128) = v6;
  *(_OWORD *)(v5 + 144) = v20[0];
  *(_OWORD *)(v5 + 154) = *(_OWORD *)((char *)v20 + 10);
  __int128 v7 = v15;
  *(_OWORD *)(v5 + 48) = v14;
  *(_OWORD *)(v5 + 64) = v7;
  __int128 v8 = v17;
  *(_OWORD *)(v5 + 80) = v16;
  *(_OWORD *)(v5 + 96) = v8;
  __int128 v9 = *(_OWORD *)&v13[16];
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v13;
  *(_OWORD *)(v5 + 32) = v9;
  *(void *)&v4[OBJC_IVAR____NSSwiftURLComponents_lock] = v5;
  v10.receiver = v4;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t specialized static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  LOBYTE(v75[0]) = 0;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)( (char *)v75,  a4,  a3,  &v76);
  uint64_t v33 = *((void *)&v76 + 1);
  uint64_t v34 = v76;
  LOBYTE(v64) = 1;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)( (char *)&v64,  a4,  a3,  v75);
  uint64_t v31 = v75[1];
  uint64_t v32 = v75[0];
  LOBYTE(v55) = 2;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)( (char *)&v55,  a4,  a3,  &v64);
  uint64_t v29 = *((void *)&v64 + 1);
  uint64_t v30 = v64;
  LOBYTE(v46) = 3;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)( (char *)&v46,  a4,  a3,  &v55);
  uint64_t v27 = *((void *)&v55 + 1);
  uint64_t v28 = v55;
  parseStrategyForPort #1 () in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)( a4,  a3,  (uint64_t)&v73);
  uint64_t v9 = v73;
  char v10 = v74;
  LOBYTE(v36) = 5;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)( (char *)&v36,  a4,  a3,  &v46);
  __int128 v11 = v46;
  LOBYTE(v85) = 6;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)( (char *)&v85,  a4,  a3,  &v36);
  __int128 v12 = v36;
  LOBYTE(v85) = 7;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)( (char *)&v85,  a4,  a3,  &v45);
  *(void *)&__int128 v85 = v34;
  *((void *)&v85 + 1) = v33;
  *(void *)&__int128 v86 = v32;
  *((void *)&v86 + 1) = v31;
  *(void *)&__int128 v87 = v30;
  *((void *)&v87 + 1) = v29;
  *(void *)&__int128 v88 = v28;
  *((void *)&v88 + 1) = v27;
  *(void *)&__int128 v89 = v9;
  BYTE8(v89) = v10;
  __int128 v90 = v11;
  __int128 v91 = v12;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v13 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
  }
  __int128 v92 = v45;
  if (v13)
  {
    do
    {
      String.subscript.getter();
      char v14 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
    }

    while ((v14 & 1) == 0 && 4 * v13 != (unint64_t)String.index(after:)() >> 14);
  }

  *(void *)&__int128 v76 = String.subscript.getter();
  *((void *)&v76 + 1) = v15;
  *(void *)&__int128 v77 = v16;
  *((void *)&v77 + 1) = v17;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v18 = String.init<A>(_:)();
  unint64_t v20 = v19;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v18, v20, 1, (uint64_t)v75);
  outlined init with take of LocalePreferences?( (uint64_t)v75,  (uint64_t)&v76,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v76) == 1)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    outlined release of URL.ParseStrategy((uint64_t *)&v85);
    *a5 = 0LL;
    return 0x7FFFFFFFFFFFFFFFLL;
  }

  __int128 v61 = v82;
  __int128 v62 = v83;
  v63[0] = v84[0];
  *(_OWORD *)((char *)v63 + 10) = *(_OWORD *)((char *)v84 + 10);
  __int128 v57 = v78;
  __int128 v58 = v79;
  __int128 v59 = v80;
  __int128 v60 = v81;
  __int128 v55 = v76;
  __int128 v56 = v77;
  swift_bridgeObjectRelease();
  __int128 v52 = v61;
  __int128 v53 = v62;
  v54[0] = v63[0];
  *(_OWORD *)((char *)v54 + 10) = *(_OWORD *)((char *)v63 + 10);
  __int128 v48 = v57;
  __int128 v49 = v58;
  __int128 v50 = v59;
  __int128 v51 = v60;
  __int128 v46 = v55;
  __int128 v47 = v56;
  __int128 v70 = v61;
  __int128 v71 = v62;
  v72[0] = v63[0];
  *(_OWORD *)((char *)v72 + 10) = *(_OWORD *)((char *)v63 + 10);
  __int128 v66 = v57;
  __int128 v67 = v58;
  __int128 v68 = v59;
  __int128 v69 = v60;
  __int128 v64 = v55;
  __int128 v65 = v56;
  __int128 v40 = v89;
  __int128 v41 = v90;
  __int128 v42 = v91;
  __int128 v43 = v92;
  __int128 v36 = v85;
  __int128 v37 = v86;
  __int128 v38 = v87;
  __int128 v39 = v88;
  if ((URL.ParseStrategy.validate(_:)(&v46) & 1) == 0)
  {
LABEL_15:
    outlined release of URLComponents?(v75);
    goto LABEL_16;
  }

  __int128 v50 = v89;
  __int128 v51 = v90;
  __int128 v52 = v91;
  __int128 v53 = v92;
  __int128 v46 = v85;
  __int128 v47 = v86;
  __int128 v48 = v87;
  __int128 v49 = v88;
  URL.ParseStrategy.fillDefaultValues(for:)(&v64);
  __int128 v52 = v70;
  __int128 v53 = v71;
  v54[0] = v72[0];
  *(_OWORD *)((char *)v54 + 10) = *(_OWORD *)((char *)v72 + 10);
  __int128 v48 = v66;
  __int128 v49 = v67;
  __int128 v50 = v68;
  __int128 v51 = v69;
  __int128 v46 = v64;
  __int128 v47 = v65;
  __int128 v42 = v70;
  __int128 v43 = v71;
  v44[0] = v72[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v72 + 10);
  __int128 v38 = v66;
  __int128 v39 = v67;
  __int128 v40 = v68;
  __int128 v41 = v69;
  __int128 v36 = v64;
  __int128 v37 = v65;
  URLComponents.url.getter((uint64_t *)&v45);
  outlined release of URLComponents((uint64_t)&v46);
  outlined release of URL.ParseStrategy((uint64_t *)&v85);
  char v21 = (void *)v45;
  if ((void)v45) {
    id v22 = (id)v45;
  }
  *a5 = v21;
  *(void *)&__int128 v36 = a1;
  *((void *)&v36 + 1) = a2;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v23 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v25 = v24;
  outlined consume of URL?(v21);
  if (__OFSUB__(v25, v23))
  {
    __break(1u);
    goto LABEL_15;
  }

  return v23;
}

uint64_t *outlined release of URL.ParseStrategy(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[10];
  unint64_t v9 = a1[11];
  uint64_t v10 = a1[12];
  uint64_t v14 = a1[14];
  unint64_t v12 = a1[13];
  unint64_t v13 = a1[15];
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(*a1, a1[1]);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v2, v3);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v6, v7);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v8, v9);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v10, v12);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v14, v13);
  return a1;
}

uint64_t DiscreteFormatStyle<>.input(before:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v13 - v7;
  dispatch thunk of static FloatingPoint.infinity.getter();
  dispatch thunk of RawRepresentable.init(rawValue:)();
  unint64_t v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v5, AssociatedTypeWitness);
  char v10 = dispatch thunk of static Comparable.> infix(_:_:)();
  v9(v8, AssociatedTypeWitness);
  if ((v10 & 1) != 0)
  {
    dispatch thunk of FloatingPoint.nextDown.getter();
    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v11 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, v11, 1LL, AssociatedTypeWitness);
}

uint64_t DiscreteFormatStyle<>.input(after:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v5 = (char *)&v9 - v4;
  dispatch thunk of static FloatingPoint.infinity.getter();
  char v6 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  if ((v6 & 1) != 0)
  {
    dispatch thunk of FloatingPoint.nextUp.getter();
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, v7, 1LL, AssociatedTypeWitness);
}

uint64_t DiscreteFormatStyle<>.input(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return DiscreteFormatStyle<>.input(before:)( a1,  a2,  MEMORY[0x1896197A0],  (uint64_t (*)(uint64_t, char *, uint64_t, void))MEMORY[0x189617B38],  (void (*)(uint64_t, char *, uint64_t, void))MEMORY[0x1896198C8],  a3);
}

uint64_t DiscreteFormatStyle<>.input(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return DiscreteFormatStyle<>.input(before:)( a1,  a2,  (void (*)(__n128))MEMORY[0x189619798],  (uint64_t (*)(uint64_t, char *, uint64_t, void))MEMORY[0x189617B40],  (void (*)(uint64_t, char *, uint64_t, void))MEMORY[0x1896198C0],  a3);
}

uint64_t DiscreteFormatStyle<>.input(before:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X3>, void (*a3)(__n128)@<X4>, uint64_t (*a4)(uint64_t, char *, uint64_t, void)@<X5>, void (*a5)(uint64_t, char *, uint64_t, void)@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  id v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a6;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v24 = *(void *)(v7 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v23 - v12;
  v26(v11);
  uint64_t v14 = *(void *)(v7 + 32);
  uint64_t v15 = a1;
  char v16 = v27(a1, v13, v9, *(void *)(v14 + 8));
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, v9);
  if ((v16 & 1) != 0)
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x186E1CDF8](&qword_1837BFA28, 512LL, AssociatedTypeWitness, AssociatedConformanceWitness);
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    uint64_t v19 = v28;
    v25(v15, v13, v9, *(void *)(v24 + 8));
    v17(v13, v9);
    uint64_t v20 = 0LL;
    uint64_t v21 = v19;
  }

  else
  {
    uint64_t v20 = 1LL;
    uint64_t v21 = v28;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v21, v20, 1LL, v9);
}

double *DiscreteFormatStyle<>.input(before:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  double v2 = *result;
  double v3 = 0.0;
  if (*result > -6.31140768e10)
  {
    double v4 = 0.0 - v2;
    if (0.0 - v2 < INFINITY) {
      *(void *)&v4 += (*(uint64_t *)&v4 >> 63) | 1;
    }
    double v3 = -v4;
  }

  *(double *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v2 <= -6.31140768e10;
  return result;
}

double Date.nextDown.getter@<D0>(double *a1@<X8>)
{
  double v2 = 0.0 - *v1;
  if (v2 < INFINITY) {
    *(void *)&v2 += (*(uint64_t *)&v2 >> 63) | 1;
  }
  double result = -v2;
  *a1 = result;
  return result;
}

double *DiscreteFormatStyle<>.input(after:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  double v2 = *result;
  double v3 = 0.0;
  if (*result < 6.3113904e10)
  {
    double v3 = v2 + 0.0;
    if (v2 + 0.0 < INFINITY) {
      *(void *)&v3 += (*(uint64_t *)&v3 >> 63) | 1;
    }
  }

  *(double *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v2 >= 6.3113904e10;
  return result;
}

void Date.nextUp.getter(double *a1@<X8>)
{
  double v2 = *v1 + 0.0;
  if (v2 < INFINITY) {
    *(void *)&v2 += (*(uint64_t *)&v2 >> 63) | 1;
  }
  *a1 = v2;
}

uint64_t DiscreteFormatStyle<>.input(before:)(uint64_t a1, uint64_t a2)
{
  char v4 = static Duration.< infix(_:_:)();
  uint64_t result = 0LL;
  if ((v4 & 1) != 0)
  {
    uint64_t v6 = Duration.init(secondsComponent:attosecondsComponent:)();
    return MEMORY[0x186E1D11C](a1, a2, v6, v7);
  }

  return result;
}

uint64_t Duration.nextDown.getter(uint64_t a1, uint64_t a2)
{
  return Duration.nextDown.getter( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x18961AE98]);
}

uint64_t DiscreteFormatStyle<>.input(after:)(uint64_t a1, uint64_t a2)
{
  if ((static Duration.< infix(_:_:)() & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = Duration.init(secondsComponent:attosecondsComponent:)();
  return MEMORY[0x186E1D110](a1, a2, v4, v5);
}

uint64_t Duration.nextUp.getter(uint64_t a1, uint64_t a2)
{
  return Duration.nextDown.getter( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x18961AE90]);
}

uint64_t Duration.nextDown.getter( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = Duration.init(secondsComponent:attosecondsComponent:)();
  return a3(a1, a2, v5, v6);
}

uint64_t dispatch thunk of DiscreteFormatStyle.discreteInput(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of DiscreteFormatStyle.discreteInput(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of DiscreteFormatStyle.input(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of DiscreteFormatStyle.input(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t protocol witness for DiscreteFormatStyle.input(before:) in conformance Duration.TimeFormatStyle.Attributed@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  char v5 = static Duration.< infix(_:_:)();
  uint64_t result = 0LL;
  uint64_t v7 = 0LL;
  if ((v5 & 1) != 0)
  {
    uint64_t v8 = Duration.init(secondsComponent:attosecondsComponent:)();
    uint64_t result = MEMORY[0x186E1D11C](v3, v4, v8, v9);
  }

  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = (v5 & 1) == 0;
  return result;
}

uint64_t protocol witness for DiscreteFormatStyle.input(after:) in conformance Duration.TimeFormatStyle.Attributed@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  char v5 = static Duration.< infix(_:_:)();
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = Duration.init(secondsComponent:attosecondsComponent:)();
    uint64_t result = MEMORY[0x186E1D110](v3, v4, v6, v7);
  }

  else
  {
    uint64_t result = 0LL;
    uint64_t v9 = 0LL;
  }

  *(void *)a2 = result;
  *(void *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = (v5 & 1) == 0;
  return result;
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinuteSecond.getter@<X0>(void *a1@<X8>)
{
  return static Duration.TimeFormatStyle.Pattern.hourMinuteSecond.getter(a1);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char *v6;
  double v2 = (char *)a1
  *a1 = 0LL;
  uint64_t v3 = *MEMORY[0x189619F70];
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104LL))(v2, v3, v4);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  uint64_t v6 = (char *)a1 + *(int *)(result + 20);
  *(void *)uint64_t v6 = 0LL;
  v6[8] = 1;
  return result;
}

uint64_t type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for Duration.TimeFormatStyle.Pattern.Fields);
}

uint64_t type metadata accessor for Duration.TimeFormatStyle.Pattern(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for Duration.TimeFormatStyle.Pattern);
}

__n128 Duration.TimeFormatStyle.init(pattern:locale:)@<Q0>( uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  *(_BYTE *)(a3 + *(int *)(v6 + 20)) = 0;
  outlined init with take of ICUNumberFormatter.Signature( a1,  a3,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
  __n128 result = *a2;
  *(__n128 *)(a3 + *(int *)(v6 + 24)) = *a2;
  return result;
}

uint64_t type metadata accessor for Duration.TimeFormatStyle.Attributed(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for Duration.TimeFormatStyle.Attributed);
}

unint64_t Duration.TimeFormatStyle.format(_:)(uint64_t a1, uint64_t a2)
{
  double v2 = v19;
  __int128 v3 = v19[1];
  __int128 v4 = v19[3];
  v44[1] = v19[2];
  _OWORD v44[2] = v4;
  v44[0] = v3;
  unint64_t v5 = BigString.startIndex.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  unint64_t result = BigString.endIndex.getter();
  unint64_t v36 = v5;
  uint64_t v37 = v7;
  uint64_t v38 = v9;
  uint64_t v39 = v11;
  unint64_t v40 = result;
  uint64_t v41 = v13;
  uint64_t v42 = v14;
  uint64_t v43 = v15;
  if (result >> 10 < v5 >> 10)
  {
    __break(1u);
  }

  else
  {
    swift_retain_n();
    outlined retain of Locale((uint64_t)v44);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v44);
    outlined release of Locale((uint64_t)v20);
    swift_release_n();
    __int128 v30 = v21;
    __int128 v31 = v22;
    __int128 v32 = v23;
    __int128 v33 = v24;
    v45[0] = v21;
    v45[1] = v22;
    _OWORD v45[2] = v23;
    v45[3] = v24;
    __int128 v47 = v21;
    __int128 v48 = v22;
    __int128 v49 = v23;
    __int128 v50 = v24;
    __int128 v46 = v2;
    uint64_t v51 = 0LL;
    __int128 v16 = v2[1];
    __int128 v17 = v2[3];
    v35[1] = v2[2];
    _OWORD v35[2] = v17;
    v35[0] = v16;
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v45);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v45);
    swift_retain();
    outlined retain of Locale((uint64_t)v35);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v35);
    outlined release of Locale((uint64_t)v25);
    swift_release_n();
    __int128 v18 = v2[2];
    v34[0] = v2[1];
    v34[1] = v18;
    v34[2] = v2[3];
    v34[3] = v26;
    v34[4] = v27;
    v34[5] = v28;
    v34[6] = v29;
    swift_unknownObjectRetain();
    swift_release_n();
    return MEMORY[0x186E1B6C4](v34);
  }

  return result;
}

uint64_t Duration.TimeFormatStyle.Pattern.Fields.hash(into:)()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  __int128 v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (Swift::UInt *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of ICUNumberFormatter.Signature(v0, (uint64_t)v7, v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v10 = *v7;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, (char *)v7 + *(int *)(v11 + 48), v1);
      Swift::UInt v12 = 1LL;
    }

    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, (char *)v7 + *(int *)(v13 + 48), v1);
      Swift::UInt v12 = 2LL;
    }

    Hasher._combine(_:)(v12);
  }

  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v2 + 32))(v4, v7, v1);
    Swift::UInt v10 = 0LL;
  }

  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t Duration.TimeFormatStyle.Pattern.Fields.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys>);
  uint64_t v48 = *(void *)(v2 - 8);
  uint64_t v49 = v2;
  MEMORY[0x1895F8858](v2);
  __int128 v47 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys>);
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  MEMORY[0x1895F8858](v4);
  id v44 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys>);
  uint64_t v6 = *(void *)(v50 - 8);
  MEMORY[0x1895F8858](v50);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v53 = *(void *)(v55 - 8);
  MEMORY[0x1895F8858](v55);
  uint64_t v43 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v42 = (char *)&v42 - v11;
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v42 - v13;
  uint64_t v15 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v15);
  __int128 v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.Fields.CodingKeys>);
  uint64_t v52 = *(void *)(v54 - 8);
  MEMORY[0x1895F8858](v54);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys();
  __int128 v57 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICUNumberFormatter.Signature( v56,  (uint64_t)v17,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v31 = v53;
    uint64_t v32 = v55;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v14, v17, v55);
    char v58 = 0;
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys();
    uint64_t v33 = v54;
    uint64_t v34 = v57;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule,  (uint64_t (*)(uint64_t))MEMORY[0x189619F98],  (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v50);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v34, v33);
  }

  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
    uint64_t v36 = v53;
    uint64_t v37 = v43;
    uint64_t v38 = v55;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v43, &v17[*(int *)(v35 + 48)], v55);
    char v64 = 2;
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys();
    uint64_t v39 = v47;
    uint64_t v33 = v54;
    uint64_t v34 = v57;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v63 = 0;
    uint64_t v40 = v49;
    uint64_t v41 = v51;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v41)
    {
      char v62 = 1;
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule,  (uint64_t (*)(uint64_t))MEMORY[0x189619F98],  (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }

    (*(void (**)(char *, uint64_t))(v48 + 8))(v39, v40);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v34, v33);
  }

  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
  uint64_t v22 = v53;
  __int128 v23 = v42;
  uint64_t v24 = v55;
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v42, &v17[*(int *)(v21 + 48)], v55);
  char v61 = 1;
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys();
  uint64_t v25 = v44;
  uint64_t v26 = v54;
  __int128 v27 = v57;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  char v60 = 0;
  uint64_t v28 = v46;
  uint64_t v29 = v51;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v25, v28);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v27, v26);
  }

  else
  {
    char v59 = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule,  (uint64_t (*)(uint64_t))MEMORY[0x189619F98],  (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v25, v28);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v57, v26);
  }

uint64_t Duration.TimeFormatStyle.Pattern.Fields.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v63 = v3;
  uint64_t v64 = v4;
  MEMORY[0x1895F8858](v3);
  __int128 v69 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys>);
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v62 = v6;
  MEMORY[0x1895F8858](v6);
  __int128 v65 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys>);
  uint64_t v59 = *(void *)(v8 - 8);
  uint64_t v60 = v8;
  MEMORY[0x1895F8858](v8);
  __int128 v67 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.Fields.CodingKeys>);
  uint64_t v66 = *(void *)(v68 - 8);
  MEMORY[0x1895F8858](v68);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (uint64_t *)((char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v15);
  __int128 v17 = (uint64_t *)((char *)&v54 - v16);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v54 - v19;
  MEMORY[0x1895F8858](v21);
  __int128 v23 = (char *)&v54 - v22;
  uint64_t v24 = a1[3];
  __int128 v70 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v24);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys();
  uint64_t v25 = v71;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25) {
    goto LABEL_9;
  }
  __int128 v71 = v20;
  uint64_t v55 = v17;
  uint64_t v56 = v14;
  uint64_t v26 = v69;
  __int128 v57 = v23;
  __int128 v27 = (char *)v12;
  uint64_t v29 = v67;
  uint64_t v28 = v68;
  uint64_t v30 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v30 + 16) != 1LL)
  {
    uint64_t v33 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v34 = v28;
    uint64_t v36 = v35;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v36 = v27;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v33 - 8) + 104LL))( v36,  *MEMORY[0x189619358],  v33);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v11, v34);
LABEL_9:
    uint64_t v48 = (uint64_t)v70;
    return __swift_destroy_boxed_opaque_existential_1(v48);
  }

  if (*(_BYTE *)(v30 + 32))
  {
    if (*(_BYTE *)(v30 + 32) == 1)
    {
      char v75 = 1;
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys();
      uint64_t v31 = v65;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v74 = 0;
      uint64_t v32 = v62;
      uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      uint64_t v46 = v28;
      __int128 v47 = v55;
      __int128 v71 = (char *)v55 + *(int *)(v45 + 48);
      *uint64_t v55 = v44;
      type metadata accessor for FloatingPointRoundingRule();
      char v73 = 1;
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule,  (uint64_t (*)(uint64_t))MEMORY[0x189619F98],  (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v31, v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v11, v46);
      uint64_t v48 = (uint64_t)v70;
      swift_storeEnumTagMultiPayload();
      uint64_t v49 = (uint64_t)v47;
    }

    else
    {
      char v78 = 2;
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys();
      uint64_t v40 = v26;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v42 = v28;
      char v77 = 0;
      uint64_t v43 = v63;
      uint64_t v50 = KeyedDecodingContainer.decode(_:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      *uint64_t v56 = v50;
      type metadata accessor for FloatingPointRoundingRule();
      char v76 = 1;
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule,  (uint64_t (*)(uint64_t))MEMORY[0x189619F98],  (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v51 = v66;
      (*(void (**)(char *, uint64_t))(v64 + 8))(v40, v43);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v11, v42);
      uint64_t v52 = v56;
      swift_storeEnumTagMultiPayload();
      uint64_t v49 = (uint64_t)v52;
      uint64_t v48 = (uint64_t)v70;
    }
  }

  else
  {
    char v72 = 0;
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    __int128 v69 = v27;
    type metadata accessor for FloatingPointRoundingRule();
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule,  (uint64_t (*)(uint64_t))MEMORY[0x189619F98],  (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    uint64_t v37 = (uint64_t)v71;
    uint64_t v38 = v28;
    uint64_t v39 = v60;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v29, v39);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v11, v38);
    uint64_t v48 = (uint64_t)v70;
    swift_storeEnumTagMultiPayload();
    uint64_t v49 = v37;
  }

  uint64_t v53 = (uint64_t)v57;
  outlined init with take of ICUNumberFormatter.Signature( v49,  (uint64_t)v57,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  outlined init with take of ICUNumberFormatter.Signature( v53,  v58,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  return __swift_destroy_boxed_opaque_existential_1(v48);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys()
{
  unint64_t v1 = 0xD000000000000010LL;
  if (*v0 != 1) {
    unint64_t v1 = 0x65536574756E696DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x756E694D72756F68LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Duration.TimeFormatStyle.Pattern.Fields.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys()
{
  return 0x636553646E756F72LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x636553646E756F72LL && a2 == 0xEC00000073646E6FLL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys()
{
  if (*v0) {
    return 0xD000000000000016LL;
  }
  else {
    return 0xD000000000000017LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Duration.TimeFormatStyle.Pattern.Fields()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.TimeFormatStyle.Pattern.Fields()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.TimeFormatStyle.Pattern.Fields@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.Pattern.Fields.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.TimeFormatStyle.Pattern.Fields( void *a1)
{
  return Duration.TimeFormatStyle.Pattern.Fields.encode(to:)(a1);
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinute.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x189619F70];
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  uint64_t v5 = a1 + *(int *)(result + 20);
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + 8) = 1;
  return result;
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinute(padHourToLength:roundSeconds:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a3, a2, v6);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  uint64_t v8 = a3 + *(int *)(result + 20);
  *(void *)uint64_t v8 = a1;
  *(_BYTE *)(v8 + 8) = 0;
  return result;
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinuteSecond(padHourToLength:fractionalSecondsLength:roundFractionalSeconds:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return static Duration.TimeFormatStyle.Pattern.hourMinuteSecond(padHourToLength:fractionalSecondsLength:roundFractionalSeconds:)( a1,  a2,  a3,  a4);
}

{
  char *v8;
  uint64_t v9;
  uint64_t result;
  char *v11;
  uint64_t v8 = (char *)a4
  *a4 = a2;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))(v8, a3, v9);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  uint64_t v11 = (char *)a4 + *(int *)(result + 20);
  *(void *)uint64_t v11 = a1;
  _OWORD v11[8] = 0;
  return result;
}

uint64_t static Duration.TimeFormatStyle.Pattern.minuteSecond.getter@<X0>(void *a1@<X8>)
{
  return static Duration.TimeFormatStyle.Pattern.hourMinuteSecond.getter(a1);
}

uint64_t static Duration.TimeFormatStyle.Pattern.minuteSecond(padMinuteToLength:fractionalSecondsLength:roundFractionalSeconds:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return static Duration.TimeFormatStyle.Pattern.hourMinuteSecond(padHourToLength:fractionalSecondsLength:roundFractionalSeconds:)( a1,  a2,  a3,  a4);
}

void Duration.TimeFormatStyle.Pattern.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (Swift::UInt *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of ICUNumberFormatter.Signature(v1, (uint64_t)v8, v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v11 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v12 + 48), v2);
      Swift::UInt v13 = 1LL;
    }

    else
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v14 + 48), v2);
      Swift::UInt v13 = 2LL;
    }

    Hasher._combine(_:)(v13);
  }

  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    Swift::UInt v11 = 0LL;
  }

  Hasher._combine(_:)(v11);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v15 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  if (*(_BYTE *)(v15 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v16 = *(void *)v15;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
  }

uint64_t static Duration.TimeFormatStyle.Pattern.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  uint64_t v5 = (void *)(a1 + v4);
  char v6 = *(_BYTE *)(a1 + v4 + 8);
  uint64_t v7 = (void *)(a2 + v4);
  char v8 = *(_BYTE *)(a2 + v4 + 8);
  if ((v6 & 1) != 0)
  {
    if ((v8 & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    if (*v5 != *v7) {
      char v8 = 1;
    }
    if ((v8 & 1) != 0) {
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Pattern.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000016LL;
  }
  else {
    return 0x73646C656966LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Pattern.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Duration.TimeFormatStyle.Pattern.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.TimeFormatStyle.Pattern.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  char v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Duration.TimeFormatStyle.Pattern.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v6);
  char v8 = (Swift::UInt *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Hasher.init(_seed:)();
  outlined init with copy of ICUNumberFormatter.Signature( v1,  (uint64_t)v8,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v10 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      Swift::UInt v12 = 1LL;
    }

    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v13 + 48), v2);
      Swift::UInt v12 = 2LL;
    }

    Hasher._combine(_:)(v12);
  }

  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    Swift::UInt v10 = 0LL;
  }

  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v14 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  if (*(_BYTE *)(v14 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v15 = *(void *)v14;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }

  return Hasher._finalize()();
}

uint64_t Duration.TimeFormatStyle.Pattern.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v3 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v19 = (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.CodingKeys>);
  uint64_t v5 = *(void *)(v20 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  MEMORY[0x1895F8858](v8);
  Swift::UInt v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::UInt v12 = &v10[*(int *)(v11 + 20)];
  *(void *)Swift::UInt v12 = 0LL;
  v12[8] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys();
  uint64_t v13 = v21;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v23 = 0;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of ICUNumberFormatter.Signature( v19,  (uint64_t)v10,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  char v22 = 1;
  uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v16 = v15;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
  *(void *)Swift::UInt v12 = v14;
  v12[8] = v16 & 1;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v10,  v18,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v10,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
}

void protocol witness for Hashable.hash(into:) in conformance Duration.TimeFormatStyle.Pattern( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (Swift::UInt *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of ICUNumberFormatter.Signature(v4, (uint64_t)v11, v12);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v14 = *v11;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v15 + 48), v5);
      Swift::UInt v16 = 1LL;
    }

    else
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v17 + 48), v5);
      Swift::UInt v16 = 2LL;
    }

    Hasher._combine(_:)(v16);
  }

  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v6 + 32))(v8, v11, v5);
    Swift::UInt v14 = 0LL;
  }

  Hasher._combine(_:)(v14);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v18 = v4 + *(int *)(a2 + 20);
  if (*(_BYTE *)(v18 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v19 = *(void *)v18;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.TimeFormatStyle.Pattern( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (Swift::UInt *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Hasher.init(_seed:)();
  outlined init with copy of ICUNumberFormatter.Signature( v4,  (uint64_t)v11,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v13 = *v11;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v14 + 48), v5);
      Swift::UInt v15 = 1LL;
    }

    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v16 + 48), v5);
      Swift::UInt v15 = 2LL;
    }

    Hasher._combine(_:)(v15);
  }

  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v6 + 32))(v8, v11, v5);
    Swift::UInt v13 = 0LL;
  }

  Hasher._combine(_:)(v13);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v4 + *(int *)(a2 + 20);
  if (*(_BYTE *)(v17 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v18 = *(void *)v17;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }

  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.TimeFormatStyle.Pattern@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.Pattern.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.TimeFormatStyle.Pattern( void *a1)
{
  return Duration.TimeFormatStyle.Pattern.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Duration.TimeFormatStyle.Pattern( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(a1, a2) & 1) != 0)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (void *)(a1 + v6);
    char v8 = *(_BYTE *)(a1 + v6 + 8);
    uint64_t v9 = (void *)(a2 + v6);
    int v10 = *(unsigned __int8 *)(a2 + v6 + 8);
    if ((v8 & 1) != 0)
    {
      if (v10) {
        return 1LL;
      }
    }

    else
    {
      if (*v7 != *v9) {
        LOBYTE(v10) = 1;
      }
      if ((v10 & 1) == 0) {
        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t Duration.TimeFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL) + 24));
  return swift_unknownObjectRetain();
}

__n128 key path setter for Duration.TimeFormatStyle.locale : Duration.TimeFormatStyle( __n128 *a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL) + 24);
  __n128 v6 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v6;
  *(__n128 *)(a2 + v4) = v6;
  return result;
}

__n128 Duration.TimeFormatStyle.locale.setter(__n128 *a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL) + 24);
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + v3) = *a1;
  return result;
}

uint64_t (*Duration.TimeFormatStyle.locale.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + v3);
  swift_unknownObjectRetain();
  return Duration.TimeFormatStyle.locale.modify;
}

uint64_t Duration.TimeFormatStyle.locale.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(a1[2] + *((int *)a1 + 6));
  uint64_t v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    void *v3 = v4;
    v3[1] = v2;
    return swift_unknownObjectRelease();
  }

  else
  {
    uint64_t result = swift_unknownObjectRelease();
    void *v3 = v4;
    v3[1] = v2;
  }

  return result;
}

uint64_t Duration.TimeFormatStyle.pattern.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ICUNumberFormatter.Signature( v1,  a1,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
}

uint64_t key path setter for Duration.TimeFormatStyle.pattern : Duration.TimeFormatStyle( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  MEMORY[0x1895F8858](v4);
  __n128 v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature(a1, (uint64_t)v6, v7);
  return outlined assign with take of Duration.TimeFormatStyle.Pattern((uint64_t)v6, a2);
}

uint64_t Duration.TimeFormatStyle.pattern.setter(uint64_t a1)
{
  return outlined assign with take of Duration.TimeFormatStyle.Pattern(a1, v1);
}

void (*Duration.TimeFormatStyle.pattern.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) - 8) + 64LL);
  a1[1] = (uint64_t)malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2] = (uint64_t)v4;
  outlined init with copy of ICUNumberFormatter.Signature( v1,  (uint64_t)v4,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
  return Duration.TimeFormatStyle.pattern.modify;
}

void Duration.TimeFormatStyle.pattern.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)a1[1];
  size_t v3 = (void *)a1[2];
  uint64_t v4 = *a1;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of ICUNumberFormatter.Signature( a1[2],  (uint64_t)v2,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
    outlined assign with take of Duration.TimeFormatStyle.Pattern((uint64_t)v2, v4);
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v3,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
  }

  else
  {
    outlined assign with take of Duration.TimeFormatStyle.Pattern(a1[2], v4);
  }

  free(v3);
  free(v2);
}

uint64_t Duration.TimeFormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ICUNumberFormatter.Signature( v1,  a1,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t Duration.TimeFormatStyle.Attributed.format(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5 = v3;
  uint64_t v189 = a2;
  __int128 v187 = a3;
  uint64_t v202 = *MEMORY[0x1895F89C0];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v191 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  __int128 v185 = (char *)&v178 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v190 = (char *)&v178 - v10;
  uint64_t v11 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  MEMORY[0x1895F8858](v11);
  Swift::UInt v13 = (char *)&v178 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v17 = (uint64_t *)((char *)&v178 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v15);
  Swift::UInt v19 = (char *)&v178 - v18;
  uint64_t v20 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  uint64_t v21 = MEMORY[0x1895F8858](v20);
  char v23 = (char *)&v178 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  uint64_t v25 = (char *)&v178 - v24;
  outlined init with copy of ICUNumberFormatter.Signature(v3, (uint64_t)&v178 - v24, v26);
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v25,  (uint64_t)v19,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      int v200 = 1;
      uint64_t v29 = 0x3A276D6D273A2768LL;
      unint64_t v30 = 0xEB00000000737327LL;
    }

    else
    {
      int v200 = 2;
      uint64_t v29 = 0x7373273A276DLL;
      unint64_t v30 = 0xE600000000000000LL;
    }

    uint64_t v198 = v29;
    unint64_t v199 = v30;
    uint64_t v31 = *(void (**)(char *, uint64_t))(v191 + 8);
    v31(v28, v7);
  }

  else
  {
    int v200 = 0;
    uint64_t v198 = 0x6D6D273A2768LL;
    unint64_t v199 = 0xE600000000000000LL;
    uint64_t v31 = *(void (**)(char *, uint64_t))(v191 + 8);
    v31(v19, v7);
  }

  v201._uint64_t countAndFlagsBits = 0LL;
  v201._unint64_t object = 0LL;
  uint64_t v32 = outlined init with copy of ICUNumberFormatter.Signature( v3,  (uint64_t)v13,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
  MEMORY[0x1895F8858](v32);
  closure #1 in Duration.TimeFormatStyle.Attributed.format(_:)( (uint64_t)(&v178 - 32),  128LL,  (uint64_t)v13,  (uint64_t)&v200,  128LL,  &v201,  &v198);
  outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v13,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
  outlined init with copy of ICUNumberFormatter.Signature( v3,  (uint64_t)v23,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v23,  (uint64_t)v17,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int v33 = swift_getEnumCaseMultiPayload();
  if (v33)
  {
    uint64_t v34 = a1;
    if (v33 == 1) {
      uint64_t v35 = &outlined read-only object #1 of Duration.TimeFormatStyle.Attributed.format(_:);
    }
    else {
      uint64_t v35 = &outlined read-only object #2 of Duration.TimeFormatStyle.Attributed.format(_:);
    }
    uint64_t v36 = *v17;
    uint64_t v17 = (uint64_t *)((char *)v17
  }

  else
  {
    uint64_t v36 = 0LL;
    uint64_t v35 = &outlined read-only object #0 of Duration.TimeFormatStyle.Attributed.format(_:);
    uint64_t v34 = a1;
  }

  (*(void (**)(char *, uint64_t *, uint64_t))(v191 + 32))(v190, v17, v7);
  uint64_t v37 = v35[2];
  uint64_t v188 = v7;
  uint64_t v192 = v37;
  __int128 v186 = v31;
  if (v37)
  {
    unint64_t v38 = *((char *)v35 + v37 + 31);
    if (v38 <= 4)
    {
      static Duration.interval(fractionalSecondsLength:)(v36);
      unint64_t v193 = qword_1837C0620[v38];
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v41 = static Duration.* infix<A>(_:_:)();
    }

    else
    {
      if ((v38 - 5) >= 3u)
      {
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        uint64_t v172 = (void *)swift_allocError();
        swift_willThrow();
        id v195 = v172;
        swift_bridgeObjectRetain_n();
        id v173 = v172;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_154;
        }
        unint64_t v193 = 0LL;
        unint64_t v194 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(30LL);
        v174._unint64_t object = (void *)0x80000001839C8CD0LL;
        v174._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v174);
        _print_unlocked<A, B>(_:_:)();
        v175._uint64_t countAndFlagsBits = 39LL;
        v175._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v175);
        int v177 = 0;
        uint64_t v176 = 783LL;
LABEL_152:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_153:
        swift_bridgeObjectRetain_n();
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_154:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        swift_unexpectedError();
        __break(1u);
        swift_willThrow();
        __break(1u);
        JUMPOUT(0x1831CA00CLL);
      }

      uint64_t v39 = 3LL * (v38 - 5) + 3;
      uint64_t v40 = v39 ^ 0x7FFFFFFFFFFFFFFFLL;
      if ((v39 ^ 0x7FFFFFFFFFFFFFFFLL) >= v36) {
        uint64_t v40 = v36;
      }
      if (__OFADD__(v39, v40)) {
        goto LABEL_138;
      }
      uint64_t v41 = static Duration.interval(fractionalSecondsLength:)(v39 + v40);
    }

    uint64_t v45 = v41;
    uint64_t v46 = v42;
    static Duration.zero.getter();
    if ((static Duration.== infix(_:_:)() & 1) != 0)
    {
LABEL_73:
      uint64_t v44 = (void *)Duration.factor(intoUnits:)((uint64_t)v35);
      unint64_t v43 = v44[2];
      uint64_t v135 = Duration.components.getter();
      Duration.components.getter();
      uint64_t v137 = v136;
      double v138 = 3.0;
      double v4 = 604800.0;
      switch((int)v38)
      {
        case 0:
          goto LABEL_81;
        case 1:
          double v4 = 86400.0;
          goto LABEL_81;
        case 2:
          double v4 = 3600.0;
          goto LABEL_81;
        case 3:
          double v4 = 60.0;
          goto LABEL_81;
        case 4:
          double v4 = 1.0;
          goto LABEL_81;
        case 5:
          goto LABEL_80;
        case 6:
          double v138 = 6.0;
          goto LABEL_80;
        case 7:
          double v138 = 9.0;
LABEL_80:
          double v4 = pow(0.1, v138);
LABEL_81:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_135;
          }
          if (v43) {
            goto LABEL_83;
          }
          goto LABEL_136;
        default:
          goto LABEL_149;
      }
    }

    static Duration.zero.getter();
    char v47 = static Duration.< infix(_:_:)();
    uint64_t v182 = v5;
    unint64_t v181 = v38;
    if ((v47 & 1) != 0)
    {
      uint64_t v48 = static Duration.zero.getter();
      uint64_t v45 = MEMORY[0x186E1D11C](v48);
      uint64_t v46 = v49;
    }

    static Duration.zero.getter();
    uint64_t v50 = v34;
    uint64_t v51 = v189;
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      uint64_t v52 = static Duration.zero.getter();
      uint64_t v50 = MEMORY[0x186E1D11C](v52);
      uint64_t v51 = v53;
    }

    uint64_t v54 = Duration.components.getter();
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      uint64_t v55 = static Duration.zero.getter();
      MEMORY[0x186E1D11C](v55);
    }

    uint64_t v184 = v45;
    uint64_t v56 = Duration.components.getter();
    unint64_t v58 = v57;
    if (v56)
    {
      if (!v57)
      {
        uint64_t v65 = v56;
        if (v54 == 0x8000000000000000LL && v56 == -1) {
          goto LABEL_146;
        }
        uint64_t v66 = v54 / v56;
        uint64_t v59 = Duration.init(secondsComponent:attosecondsComponent:)();
        uint64_t v68 = v189;
        uint64_t v61 = v67;
        uint64_t v69 = Duration.init(secondsComponent:attosecondsComponent:)();
        uint64_t v71 = v70;
        goto LABEL_46;
      }

      if ((static Duration.< infix(_:_:)() & 1) != 0)
      {
        uint64_t v59 = static Duration.zero.getter();
        uint64_t v61 = v60;
        uint64_t v62 = static Duration.zero.getter();
      }

      else
      {
        static Duration./ infix(_:_:)();
        if ((~*(void *)&v72 & 0x7FF0000000000000LL) == 0) {
          goto LABEL_140;
        }
        if (v72 <= -1.0) {
          goto LABEL_141;
        }
        if (v72 >= 1.84467441e19) {
          goto LABEL_142;
        }
        unint64_t v73 = (unint64_t)v72;
        unint64_t v193 = (unint64_t)v72;
        lazy protocol witness table accessor for type UInt64 and conformance UInt64();
        uint64_t v74 = static Duration.* infix<A>(_:_:)();
        MEMORY[0x186E1D11C](v50, v51, v74, v75);
        static Duration./ infix(_:_:)();
        if ((~*(void *)&v76 & 0x7FF0000000000000LL) == 0) {
          goto LABEL_143;
        }
        if (v76 <= -9.22337204e18) {
          goto LABEL_144;
        }
        if (v76 >= 9.22337204e18) {
          goto LABEL_145;
        }
        uint64_t v77 = (uint64_t)v76;
        uint64_t v183 = (uint64_t)v76;
        Duration.init(secondsComponent:attosecondsComponent:)();
        unint64_t v193 = v73;
        uint64_t v78 = static Duration.* infix<A>(_:_:)();
        unint64_t v180 = v73;
        uint64_t v79 = v78;
        uint64_t v179 = v80;
        Duration.init(secondsComponent:attosecondsComponent:)();
        unint64_t v193 = v77;
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        uint64_t v81 = static Duration.* infix<A>(_:_:)();
        uint64_t v83 = MEMORY[0x186E1D110](v79, v179, v81, v82);
        uint64_t v85 = v84;
        unint64_t v193 = v180;
        uint64_t v86 = static Duration.* infix<A>(_:_:)();
        uint64_t v88 = v87;
        unint64_t v193 = v183;
        uint64_t v59 = v83;
        uint64_t v89 = static Duration.* infix<A>(_:_:)();
        uint64_t v90 = v86;
        uint64_t v61 = v85;
        uint64_t v62 = MEMORY[0x186E1D110](v90, v88, v89, v91);
      }
    }

    else
    {
      unint64_t v193 = v57;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v59 = static Duration./ infix<A>(_:_:)();
      uint64_t v61 = v64;
      unint64_t v193 = v58;
      uint64_t v62 = static Duration.* infix<A>(_:_:)();
    }

    uint64_t v69 = v62;
    uint64_t v71 = v63;
    uint64_t v68 = v189;
LABEL_46:
    static Duration.zero.getter();
    int v92 = static Duration.< infix(_:_:)() & 1;
    static Duration.zero.getter();
    if (v92 == (static Duration.< infix(_:_:)() & 1))
    {
      uint64_t v183 = v61;
    }

    else
    {
      uint64_t v93 = static Duration.zero.getter();
      uint64_t v69 = MEMORY[0x186E1D11C](v93);
      uint64_t v71 = v94;
      uint64_t v95 = static Duration.zero.getter();
      uint64_t v59 = MEMORY[0x186E1D11C](v95);
      uint64_t v183 = v96;
    }

    static Duration.zero.getter();
    uint64_t v97 = v69;
    uint64_t v98 = v71;
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      uint64_t v99 = static Duration.zero.getter();
      uint64_t v97 = MEMORY[0x186E1D11C](v99);
      uint64_t v98 = v100;
    }

    static Duration.zero.getter();
    char v101 = static Duration.< infix(_:_:)();
    uint64_t v102 = v34;
    uint64_t v103 = v68;
    if ((v101 & 1) != 0)
    {
      uint64_t v104 = static Duration.zero.getter();
      uint64_t v102 = MEMORY[0x186E1D11C](v104);
      uint64_t v103 = v105;
    }

    MEMORY[0x186E1D11C](v97, v98, v102, v103);
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      uint64_t v106 = static Duration.zero.getter();
      MEMORY[0x186E1D11C](v106);
    }

    static Duration.zero.getter();
    if ((static Duration.== infix(_:_:)() & 1) != 0)
    {
      unint64_t v193 = 2LL;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v107 = v183;
      static Duration./ infix<A>(_:_:)();
      unint64_t v193 = 2LL;
      uint64_t v108 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x186E1D11C](v59, v107, v108, v109);
      static Duration.zero.getter();
LABEL_72:
      static Duration.== infix(_:_:)();
      uint64_t v37 = v192;
      LODWORD(v38) = v181;
      goto LABEL_73;
    }

    static Duration.zero.getter();
    char v110 = static Duration.< infix(_:_:)();
    unint64_t v180 = v59;
    if ((v110 & 1) != 0)
    {
      uint64_t v111 = static Duration.zero.getter();
      uint64_t v112 = MEMORY[0x186E1D11C](v111);
      uint64_t v46 = v113;
    }

    else
    {
      uint64_t v112 = v184;
    }

    uint64_t v114 = MEMORY[0x186E1D110](v69, v71, v112, v46);
    uint64_t v116 = v115;
    static Duration.zero.getter();
    char v117 = static Duration.< infix(_:_:)();
    uint64_t v189 = v114;
    uint64_t v118 = v116;
    if ((v117 & 1) != 0)
    {
      uint64_t v119 = static Duration.zero.getter();
      uint64_t v114 = MEMORY[0x186E1D11C](v119);
      uint64_t v118 = v120;
    }

    static Duration.zero.getter();
    char v121 = static Duration.< infix(_:_:)();
    uint64_t v184 = v116;
    if ((v121 & 1) != 0)
    {
      uint64_t v122 = static Duration.zero.getter();
      uint64_t v34 = MEMORY[0x186E1D11C](v122);
      uint64_t v68 = v123;
    }

    MEMORY[0x186E1D11C](v114, v118, v34, v68);
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      uint64_t v124 = static Duration.zero.getter();
      MEMORY[0x186E1D11C](v124);
    }

    uint64_t v125 = v191;
    uint64_t v126 = v185;
    uint64_t v127 = v188;
    (*(void (**)(char *, char *, uint64_t))(v191 + 16))(v185, v190, v188);
    int v128 = (*(uint64_t (**)(char *, uint64_t))(v125 + 88))(v126, v127);
    if (v128 == *MEMORY[0x189619F78])
    {
      char v129 = static Duration.< infix(_:_:)();
      goto LABEL_68;
    }

    if (v128 == *MEMORY[0x189619F70])
    {
      uint64_t v130 = v71;
      if ((static Duration.< infix(_:_:)() & 1) != 0) {
        goto LABEL_71;
      }
      char v165 = static Duration.== infix(_:_:)();
      uint64_t v130 = v184;
      if ((v165 & 1) == 0) {
        goto LABEL_71;
      }
      unint64_t v193 = 2LL;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      unint64_t v166 = v180;
      uint64_t v167 = v183;
      static Duration./ infix<A>(_:_:)();
      unint64_t v193 = 2LL;
      uint64_t v168 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x186E1D11C](v166, v167, v168, v169);
      static Duration.zero.getter();
      char v129 = static Duration.== infix(_:_:)();
LABEL_68:
      if ((v129 & 1) != 0) {
        uint64_t v130 = v71;
      }
      else {
        uint64_t v130 = v184;
      }
LABEL_71:
      unint64_t v193 = 2LL;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      unint64_t v131 = v180;
      uint64_t v132 = v183;
      static Duration./ infix<A>(_:_:)();
      unint64_t v193 = 2LL;
      uint64_t v133 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x186E1D11C](v131, v132, v133, v134);
      static Duration.zero.getter();
      static Duration.== infix(_:_:)();
      uint64_t v189 = v130;
      goto LABEL_72;
    }

    if (v128 == *MEMORY[0x189619F88])
    {
      uint64_t v170 = v184;
      if ((static Duration.< infix(_:_:)() & 1) != 0) {
        uint64_t v130 = v71;
      }
      else {
        uint64_t v130 = v170;
      }
      goto LABEL_71;
    }

    if (v128 == *MEMORY[0x189619F90])
    {
      uint64_t v171 = v184;
      if ((static Duration.< infix(_:_:)() & 1) != 0) {
        uint64_t v130 = v171;
      }
      else {
        uint64_t v130 = v71;
      }
      goto LABEL_71;
    }

    uint64_t v130 = v71;
    if (v128 == *MEMORY[0x189619F60]) {
      goto LABEL_71;
    }
    uint64_t v130 = v184;
    if (v128 == *MEMORY[0x189619F68]) {
      goto LABEL_71;
    }
    int v177 = 0;
    uint64_t v176 = 55LL;
    goto LABEL_152;
  }

  unint64_t v43 = 0LL;
  uint64_t v44 = (void *)MEMORY[0x18961AFE8];
  while (1)
  {
    uint64_t v135 = v44[2] >= v43 ? v43 : v44[2];
    if (v135)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Duration.UnitsFormatStyle.Unit, Double>);
      uint64_t v137 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }

    else
    {
      uint64_t v137 = (void *)MEMORY[0x18961AFF0];
    }

    uint64_t v197 = v137;
    swift_bridgeObjectRetain_n();
    if (!v37) {
      break;
    }
    unint64_t v139 = 0LL;
    while (v43 != v139)
    {
      unint64_t v140 = v44[2];
      if (v139 == v140) {
        goto LABEL_103;
      }
      if (v139 >= v140) {
        goto LABEL_132;
      }
      uint64_t v135 = *((unsigned __int8 *)v35 + v139 + 32);
      if ((_DWORD)v135 == 8) {
        goto LABEL_103;
      }
      uint64_t v37 = v44[v139 + 4];
      char v196 = *((_BYTE *)v35 + v139 + 32);
      unint64_t v141 = specialized __RawDictionaryStorage.find<A>(_:)(v135);
      uint64_t v143 = v137[2];
      BOOL v144 = (v142 & 1) == 0;
      BOOL v145 = __OFADD__(v143, v144);
      uint64_t v146 = v143 + v144;
      if (v145) {
        goto LABEL_133;
      }
      char v147 = v142;
      if (v137[3] < v146)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v146, 1);
        uint64_t v137 = v197;
        unint64_t v141 = specialized __RawDictionaryStorage.find<A>(_:)(v135);
        if ((v147 & 1) != (v148 & 1)) {
          goto LABEL_153;
        }
      }

      if ((v147 & 1) != 0) {
        goto LABEL_150;
      }
      v137[(v141 >> 6) + 8] |= 1LL << v141;
      *(_BYTE *)(v137[6] + v141) = v135;
      *(void *)(v137[7] + 8 * v141) = v37;
      uint64_t v149 = v137[2];
      BOOL v145 = __OFADD__(v149, 1LL);
      uint64_t v150 = v149 + 1;
      if (v145) {
        goto LABEL_134;
      }
      ++v139;
      v137[2] = v150;
      if (v192 == v139) {
        goto LABEL_103;
      }
    }

    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
    if (!v43)
    {
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
    }

__n128 Duration.TimeFormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL) + 24);
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *(__n128 *)(a2 + v5) = v7;
  return result;
}

void Duration.TimeFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v23)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  Swift::UInt8 v53;
  Swift::UInt8 v54;
  Swift::UInt8 v55;
  _BYTE v57[144];
  _BYTE v58[8];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  char v74;
  char v75;
  void v76[18];
  _BYTE v77[144];
  _BYTE v78[152];
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  __n128 v7 = &v57[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (Swift::UInt *)&v57[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v10, v11);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v13 = *v10;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 32))(v7, (char *)v10 + *(int *)(v14 + 48), v4);
      Swift::UInt v15 = 1LL;
    }

    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 32))(v7, (char *)v10 + *(int *)(v16 + 48), v4);
      Swift::UInt v15 = 2LL;
    }

    Hasher._combine(_:)(v15);
  }

  else
  {
    (*(void (**)(_BYTE *, Swift::UInt *, uint64_t))(v5 + 32))(v7, v10, v4);
    Swift::UInt v13 = 0LL;
  }

  Hasher._combine(_:)(v13);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v17 = v2 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  if (*(_BYTE *)(v17 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v18 = *(void *)v17;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }

  uint64_t v19 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(v19 + 20)));
  uint64_t v20 = *(void *)(v2 + *(int *)(v19 + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 48))(ObjectType, v20) & 1) != 0)
  {
    Swift::UInt8 v22 = 1;
LABEL_14:
    Hasher._combine(_:)(v22);
    return;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v20 + 64))(ObjectType, v20);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v23 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v20 + 464);
  swift_unknownObjectRetain();
  v23(v76, ObjectType, v20);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v76,  (uint64_t)v77,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)v78,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v78) == 1)
  {
    Swift::UInt8 v22 = 0;
    goto LABEL_14;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)v58,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v58[0] == 2)
  {
    uint64_t v24 = 0;
  }

  else
  {
    uint64_t v24 = v58[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v24);
  uint64_t v25 = v59;
  if (!v59)
  {
    Hasher._combine(_:)(0);
    unint64_t v30 = v58;
    goto LABEL_29;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v25 + 16));
  uint64_t v26 = *(void *)(v25 + 16);
  if (!v26)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)v57,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    unint64_t v30 = v57;
LABEL_29:
    outlined retain of LocalePreferences(v30);
    if (!v60) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }

  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v27 = v25 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v27 += 16LL;
    --v26;
  }

  while (v26);
  swift_bridgeObjectRelease();
  if (!v60)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v61) {
      goto LABEL_24;
    }
    goto LABEL_31;
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.CodingKeys()
{
  return 0x756269727474615FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x756269727474615FLL && a2 == 0xEB00000000646574LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.TimeFormatStyle.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed,  type metadata accessor for Duration.TimeFormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int Duration.TimeFormatStyle.hashValue.getter()
{
  void (*v20)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  _BYTE v55[144];
  _BYTE v56[8];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  void v74[18];
  _BYTE v75[144];
  _BYTE v76[144];
  _BYTE v77[72];
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  char v5 = &v55[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (Swift::UInt *)&v55[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  Hasher.init(_seed:)();
  outlined init with copy of ICUNumberFormatter.Signature( v1,  (uint64_t)v8,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v10 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      Swift::UInt v12 = 1LL;
    }

    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v13 + 48), v2);
      Swift::UInt v12 = 2LL;
    }

    Hasher._combine(_:)(v12);
  }

  else
  {
    (*(void (**)(_BYTE *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    Swift::UInt v10 = 0LL;
  }

  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v14 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  if (*(_BYTE *)(v14 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v15 = *(void *)v14;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }

  uint64_t v16 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + *(int *)(v16 + 20)));
  uint64_t v17 = *(void *)(v1 + *(int *)(v16 + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(ObjectType, v17) & 1) != 0)
  {
    Swift::UInt8 v19 = 1;
LABEL_14:
    Hasher._combine(_:)(v19);
    return Hasher._finalize()();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v17 + 64))(ObjectType, v17);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 464);
  swift_unknownObjectRetain();
  v20(v74, ObjectType, v17);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v75,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v75,  (uint64_t)v76,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v76) == 1)
  {
    Swift::UInt8 v19 = 0;
    goto LABEL_14;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v75,  (uint64_t)v56,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v56[0] == 2)
  {
    uint64_t v21 = 0;
  }

  else
  {
    uint64_t v21 = v56[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v21);
  Swift::UInt8 v22 = v57;
  if (!v57)
  {
    Hasher._combine(_:)(0);
    __int128 v27 = v56;
    goto LABEL_29;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v22 + 16));
  char v23 = *(void *)(v22 + 16);
  if (!v23)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v75,  (uint64_t)v55,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    __int128 v27 = v55;
LABEL_29:
    outlined retain of LocalePreferences(v27);
    if (!v58) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }

  outlined retain of LocalePreferences?( (uint64_t)v75,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v24 = v22 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v24 += 16LL;
    --v23;
  }

  while (v23);
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v59) {
      goto LABEL_24;
    }
    goto LABEL_31;
  }

uint64_t Duration.TimeFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed,  type metadata accessor for Duration.TimeFormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of ICUNumberFormatter.Signature( v15,  (uint64_t)v11,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v11,  v13,  type metadata accessor for Duration.TimeFormatStyle);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t protocol witness for FormatStyle.format(_:) in conformance Duration.TimeFormatStyle@<X0>( uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = Duration.TimeFormatStyle.format(_:)(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  return result;
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance Duration.TimeFormatStyle@<Q0>( __n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL) + 24);
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *(__n128 *)(a2 + v5) = v7;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.TimeFormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.TimeFormatStyle(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed,  type metadata accessor for Duration.TimeFormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.TimeFormatStyle()
{
  void (*v20)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  Swift::UInt v47;
  Swift::UInt v48;
  Swift::UInt8 v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  void v72[18];
  _BYTE v73[144];
  _BYTE v74[144];
  _BYTE v75[72];
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (Swift::UInt *)((char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Hasher.init(_seed:)();
  outlined init with copy of ICUNumberFormatter.Signature( v1,  (uint64_t)v8,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v10 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      Swift::UInt v12 = 1LL;
    }

    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v13 + 48), v2);
      Swift::UInt v12 = 2LL;
    }

    Hasher._combine(_:)(v12);
  }

  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    Swift::UInt v10 = 0LL;
  }

  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v14 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  if (*(_BYTE *)(v14 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v15 = *(void *)v14;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }

  uint64_t v16 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + *(int *)(v16 + 20)));
  uint64_t v17 = *(void *)(v1 + *(int *)(v16 + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(ObjectType, v17) & 1) != 0)
  {
    Swift::UInt8 v19 = 1;
LABEL_14:
    Hasher._combine(_:)(v19);
    return Hasher._finalize()();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v17 + 64))(ObjectType, v17);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 464);
  swift_unknownObjectRetain();
  v20(v72, ObjectType, v17);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)v73,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v73,  (uint64_t)v74,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v74) == 1)
  {
    Swift::UInt8 v19 = 0;
    goto LABEL_14;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v73,  (uint64_t)&v54,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v54 == 2)
  {
    uint64_t v21 = 0;
  }

  else
  {
    uint64_t v21 = v54 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v21);
  Swift::UInt8 v22 = v55;
  if (!v55)
  {
    Hasher._combine(_:)(0);
LABEL_28:
    outlined retain of LocalePreferences(&v54);
    if (!v56) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v22 + 16));
  char v23 = *(void *)(v22 + 16);
  if (!v23) {
    goto LABEL_28;
  }
  outlined retain of LocalePreferences?( (uint64_t)v73,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v24 = v22 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v24 += 16LL;
    --v23;
  }

  while (v23);
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v57) {
      goto LABEL_24;
    }
    goto LABEL_30;
  }

uint64_t static FormatStyle<>.time(pattern:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v3 = static LocaleCache.cache + 16;
  uint64_t v4 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v3, &v9);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  uint64_t v5 = v9;
  uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  *(_BYTE *)(a2 + *(int *)(result + 20)) = 0;
  uint64_t v8 = (uint64_t *)(a2 + *(int *)(result + 24));
  *uint64_t v8 = v5;
  v8[1] = v6;
  return result;
}

__n128 Duration.TimeFormatStyle.Attributed.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL) + 24);
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *(__n128 *)(a2 + v5) = v7;
  return result;
}

uint64_t closure #1 in Duration.TimeFormatStyle.Attributed.format(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Swift::String *a6, uint64_t *a7)
{
  uint64_t v11 = *(void *)(a3 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL) + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 64);
  swift_unknownObjectRetain();
  v13(ObjectType, v11);
  swift_unknownObjectRelease();
  if (!a1) {
LABEL_11:
  }
    __break(1u);
  if (a5 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (a5 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int TimePattern = uatmufmt_getTimePattern();
  swift_release();
  specialized String.init(_utf16:)(a1, TimePattern);
  if (v16)
  {
    Swift::String v17 = String.lowercased()();
    swift_bridgeObjectRelease();
    *a6 = v17;
  }

  else
  {
    Swift::UInt v15 = (void *)a7[1];
    a6->_uint64_t countAndFlagsBits = *a7;
    a6->_unint64_t object = v15;
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRelease();
}

uint64_t Duration.TimeFormatStyle.Attributed.formatWithPatternComponents(_:hour:minute:second:)@<X0>( uint64_t a1@<X0>, unint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v142 = a1;
  uint64_t v137 = a2;
  uint64_t v141 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v141);
  uint64_t v136 = (char **)((char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v9);
  uint64_t v143 = (uint64_t)&v130 - v11;
  uint64_t v146 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v146);
  uint64_t v132 = (uint64_t)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v138 = (uint64_t)&v130 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v16 = MEMORY[0x1895F8858](v15);
  uint64_t v150 = (uint64_t)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v152 = (uint64_t)&v130 - v19;
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  unint64_t v131 = (char *)&v130 - v21;
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  uint64_t v130 = (char *)&v130 - v23;
  uint64_t v24 = MEMORY[0x1895F8858](v22);
  uint64_t v135 = (uint64_t)&v130 - v25;
  uint64_t v26 = MEMORY[0x1895F8858](v24);
  uint64_t v134 = (uint64_t)&v130 - v27;
  uint64_t v28 = MEMORY[0x1895F8858](v26);
  uint64_t v133 = (uint64_t)&v130 - v29;
  uint64_t v30 = MEMORY[0x1895F8858](v28);
  uint64_t v144 = (uint64_t)&v130 - v31;
  uint64_t v32 = MEMORY[0x1895F8858](v30);
  uint64_t v34 = (_OWORD *)((char *)&v130 - v33);
  MEMORY[0x1895F8858](v32);
  uint64_t v36 = (char *)&v130 - v35;
  uint64_t v37 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  uint64_t v38 = *(int *)(v37 + 24);
  uint64_t v39 = (char *)v34 + *(int *)(v15 + 36);
  *(void *)uint64_t v39 = 0LL;
  v39[8] = 1;
  *((void *)v39 + 2) = 0LL;
  *((void *)v39 + 3) = 0LL;
  *((void *)v39 + 4) = 0LL;
  *((void *)v39 + 5) = 0x1FFFFFFFELL;
  *((void *)v39 + 7) = 0LL;
  *((void *)v39 + 8) = 0LL;
  *((void *)v39 + 6) = 0LL;
  *((_DWORD *)v39 + 18) = 131584;
  *((_WORD *)v39 + 38) = 512;
  uint64_t v40 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v41 = &v39[v40[9]];
  uint64_t v42 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v139 = *(void *)(v42 - 8);
  uint64_t v140 = v42;
  unint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v139 + 56);
  __int128 v162 = *(_OWORD *)(v5 + v38);
  v43(v41, 1LL, 1LL);
  uint64_t v44 = &v39[v40[10]];
  *(void *)uint64_t v44 = 0LL;
  v44[8] = -1;
  v39[v40[11]] = 3;
  *uint64_t v34 = v162;
  uint64_t v45 = *(int *)(v37 + 20);
  uint64_t v151 = v5;
  LOBYTE(v37) = *(_BYTE *)(v5 + v45);
  outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v34, (uint64_t)v36);
  uint64_t v154 = v15;
  unint64_t v155 = v36;
  v36[*(int *)(v15 + 36) + 73] = v37;
  swift_unknownObjectRetain();
  outlined destroy of Any?( (uint64_t)v34,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  BigString.init()();
  v163[0] = 0LL;
  MEMORY[0x186E20E78](v163, 8LL);
  uint64_t v46 = v163[0];
  uint64_t v153 = type metadata accessor for AttributedString.Guts();
  unint64_t v47 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) == 0)
  {
    __break(1u);
    return result;
  }

  __int128 v49 = v170;
  *(_OWORD *)(v47 + 16) = v169;
  *(_OWORD *)(v47 + 32) = v49;
  *(_OWORD *)(v47 + 48) = v171;
  *(void *)(v47 + 64) = 0LL;
  *(void *)(v47 + 72) = 0LL;
  *(void *)(v47 + 80) = 0LL;
  *(void *)(v47 + 88) = v46;
  BOOL v50 = a3 < 0.0;
  if (a4 < 0.0) {
    BOOL v50 = 1;
  }
  if (a5 < 0.0) {
    BOOL v50 = 1;
  }
  BOOL v145 = v50;
  uint64_t v51 = *(void *)(v142 + 16);
  if (!v51) {
    goto LABEL_98;
  }
  uint64_t v149 = v152 + 74;
  uint64_t v52 = (_BYTE *)(swift_bridgeObjectRetain() + 40);
  __int128 v148 = xmmword_183723F60;
  unint64_t v147 = 0x80000001839CDE70LL;
  while (1)
  {
    unint64_t v57 = (void *)*((void *)v52 - 1);
    if (*v52 != 1)
    {
      *(void *)&__int128 v162 = v52;
      v163[0] = (uint64_t)v57;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Character]);
      lazy protocol witness table accessor for type [Character] and conformance [A]();
      String.init<A>(_:)();
      goto LABEL_29;
    }

    uint64_t v58 = v57[2];
    if (!v58) {
      goto LABEL_11;
    }
    uint64_t v59 = v57[4];
    uint64_t v60 = v57[5];
    BOOL v61 = v59 == 104 && v60 == 0xE100000000000000LL;
    *(void *)&__int128 v162 = v52;
    if (!v61 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      BOOL v72 = v59 == 109 && v60 == 0xE100000000000000LL;
      if (v72 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v73 = v138;
        outlined init with copy of ICUNumberFormatter.Signature( v151,  v138,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
        outlined init with take of ICUNumberFormatter.Signature( v73,  v143,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload != 1)
          {
            uint64_t v99 = v151 + *(int *)(v146 + 20);
            if ((*(_BYTE *)(v99 + 8) & 1) == 0)
            {
              uint64_t v100 = *(void *)v99;
              if (v58 <= v100) {
                uint64_t v58 = v100;
              }
            }

            if (v58 >= 999) {
              uint64_t v101 = 999LL;
            }
            else {
              uint64_t v101 = v58;
            }
            uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
            uint64_t v103 = v143 + *(int *)(v102 + 48);
            uint64_t v104 = (uint64_t)v155;
            uint64_t v105 = v135;
            outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v155, v135);
            uint64_t v106 = v105 + *(int *)(v154 + 36);
            *(void *)(v106 + 16) = v101;
            *(void *)(v106 + 24) = 0LL;
            *(void *)(v106 + 32) = 0LL;
            *(void *)(v106 + 40) = 1LL;
            *(void *)(v106 + 56) = 0LL;
            *(void *)(v106 + 64) = 0LL;
            *(void *)(v106 + 48) = 0LL;
            *(_BYTE *)(v106 + 72) = 0x80;
            outlined destroy of Any?( v104,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
            outlined init with take of LocalePreferences?( v105,  v104,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
            (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v103, v140);
            char v68 = 3;
            if (v145)
            {
              uint64_t v69 = v51;
              goto LABEL_27;
            }

            uint64_t v69 = v51;
LABEL_65:
            int v70 = 65793;
            goto LABEL_89;
          }

          uint64_t v69 = v51;
          else {
            uint64_t v75 = v58;
          }
          uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
          uint64_t v77 = v143 + *(int *)(v76 + 48);
          uint64_t v78 = (uint64_t)v155;
          uint64_t v79 = v134;
          outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v155, v134);
          uint64_t v80 = v79 + *(int *)(v154 + 36);
          *(void *)(v80 + 16) = v75;
          *(void *)(v80 + 24) = 0LL;
          *(void *)(v80 + 32) = 0LL;
          *(void *)(v80 + 40) = 1LL;
          *(void *)(v80 + 56) = 0LL;
          *(void *)(v80 + 64) = 0LL;
          *(void *)(v80 + 48) = 0LL;
          *(_BYTE *)(v80 + 72) = 0x80;
          outlined destroy of Any?( v78,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          outlined init with take of LocalePreferences?( v79,  v78,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v77, v140);
        }

        else
        {
          uint64_t v69 = v51;
          else {
            uint64_t v95 = v58;
          }
          uint64_t v96 = (uint64_t)v155;
          uint64_t v97 = v133;
          outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v155, v133);
          uint64_t v98 = v97 + *(int *)(v154 + 36);
          *(void *)(v98 + 16) = v95;
          *(void *)(v98 + 24) = 0LL;
          *(void *)(v98 + 32) = 0LL;
          *(void *)(v98 + 40) = 1LL;
          *(void *)(v98 + 56) = 0LL;
          *(void *)(v98 + 64) = 0LL;
          *(void *)(v98 + 48) = 0LL;
          *(_BYTE *)(v98 + 72) = 0x80;
          outlined destroy of Any?( v96,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          outlined init with take of LocalePreferences?( v97,  v96,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v143, v140);
        }

        char v68 = 3;
        goto LABEL_65;
      }

      BOOL v81 = v59 == 115 && v60 == 0xE100000000000000LL;
      if (v81 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v82 = v132;
        outlined init with copy of ICUNumberFormatter.Signature( v151,  v132,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
        outlined init with take of ICUNumberFormatter.Signature( v82,  (uint64_t)v136,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
        int v83 = swift_getEnumCaseMultiPayload();
        uint64_t v69 = v51;
        if (v83)
        {
          if (v83 == 1)
          {
            uint64_t v84 = v136;
            uint64_t v85 = *v136;
            else {
              uint64_t v86 = v58;
            }
            if (v85 >= 998) {
              uint64_t v87 = 998LL;
            }
            else {
              uint64_t v87 = *v136;
            }
            uint64_t v88 = v87 & ~(v87 >> 63);
            uint64_t v89 = v85 & ~(v85 >> 63);
            if (v89 >= 998) {
              uint64_t v90 = 998LL;
            }
            else {
              uint64_t v90 = v89;
            }
            uint64_t v91 = (char *)v84
            uint64_t v92 = (uint64_t)v155;
            uint64_t v93 = (uint64_t)v155;
            uint64_t v94 = (uint64_t)v130;
          }

          else
          {
            uint64_t v107 = v136;
            uint64_t v108 = *v136;
            else {
              uint64_t v86 = v58;
            }
            if (v108 >= 998) {
              uint64_t v109 = 998LL;
            }
            else {
              uint64_t v109 = *v136;
            }
            uint64_t v88 = v109 & ~(v109 >> 63);
            uint64_t v110 = v108 & ~(v108 >> 63);
            if (v110 >= 998) {
              uint64_t v90 = 998LL;
            }
            else {
              uint64_t v90 = v110;
            }
            uint64_t v91 = (char *)v107
            uint64_t v92 = (uint64_t)v155;
            uint64_t v93 = (uint64_t)v155;
            uint64_t v94 = (uint64_t)v131;
          }

          outlined init with copy of FloatingPointFormatStyle<Double>(v93, v94);
          uint64_t v111 = v94 + *(int *)(v154 + 36);
          *(void *)(v111 + 16) = v86;
          *(void *)(v111 + 24) = 0LL;
          *(void *)(v111 + 32) = 0LL;
          *(void *)(v111 + 40) = 1LL;
          *(void *)(v111 + 48) = v88;
          *(void *)(v111 + 56) = 0LL;
          *(void *)(v111 + 64) = v90;
          *(_BYTE *)(v111 + 72) = 0x80;
          outlined destroy of Any?( v92,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          outlined init with take of LocalePreferences?( v94,  v92,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          (*(void (**)(char *, uint64_t))(v139 + 8))(v91, v140);
        }

        else
        {
          (*(void (**)(void *, uint64_t))(v139 + 8))(v136, v140);
        }

        char v68 = 4;
        int v70 = 65793;
        goto LABEL_89;
      }

      v163[0] = (uint64_t)v57;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Character]);
      lazy protocol witness table accessor for type [Character] and conformance [A]();
      String.init<A>(_:)();
LABEL_29:
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v173, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], v163);
      uint64_t v71 = (_OWORD *)v163[0];
      goto LABEL_90;
    }

    uint64_t v62 = v151 + *(int *)(v146 + 20);
    if ((*(_BYTE *)(v62 + 8) & 1) == 0)
    {
      uint64_t v63 = *(void *)v62;
      if (v58 <= v63) {
        uint64_t v58 = v63;
      }
    }

    if (v58 >= 999) {
      uint64_t v64 = 999LL;
    }
    else {
      uint64_t v64 = v58;
    }
    uint64_t v65 = (uint64_t)v155;
    uint64_t v66 = v144;
    outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v155, v144);
    uint64_t v67 = v66 + *(int *)(v154 + 36);
    *(void *)(v67 + 16) = v64;
    *(void *)(v67 + 24) = 0LL;
    *(void *)(v67 + 32) = 0LL;
    *(void *)(v67 + 40) = 1LL;
    *(void *)(v67 + 56) = 0LL;
    *(void *)(v67 + 64) = 0LL;
    *(void *)(v67 + 48) = 0LL;
    *(_BYTE *)(v67 + 72) = 0x80;
    outlined destroy of Any?(v65, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    outlined init with take of LocalePreferences?( v66,  v65,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    char v68 = 2;
    if (!v145)
    {
      uint64_t v69 = v51;
      int v70 = 65793;
      goto LABEL_89;
    }

    uint64_t v69 = v51;
LABEL_27:
    int v70 = 0;
LABEL_89:
    uint64_t v112 = v150;
    outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v155, v150);
    uint64_t v113 = v152;
    outlined init with copy of FloatingPointFormatStyle<Double>(v112, v152);
    uint64_t v114 = v149 + *(int *)(v154 + 36);
    *(_BYTE *)(v114 + 2) = BYTE2(v70);
    *(_WORD *)uint64_t v114 = v70;
    outlined destroy of Any?(v112, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    specialized FloatingPointFormatStyle.format(_:)();
    outlined destroy of Any?(v113, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v167 = MEMORY[0x18961AFF0];
    uint64_t v168 = MEMORY[0x18961AFF8];
    v163[3] = (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
    v163[4] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
    LOBYTE(v163[0]) = v68;
    __int128 v164 = v148;
    char v165 = 1;
    uint64_t v166 = 0LL;
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v163, 0xD000000000000021LL, v147);
    uint64_t v115 = v167;
    uint64_t v116 = v168;
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v172, v115, v116, v163);
    uint64_t v71 = (_OWORD *)v163[0];
    uint64_t v51 = v69;
LABEL_90:
    __int128 v117 = *(_OWORD *)(v47 + 32);
    __int128 v181 = *(_OWORD *)(v47 + 16);
    __int128 v182 = v117;
    __int128 v183 = *(_OWORD *)(v47 + 48);
    uint64_t v118 = BigString.endIndex.getter();
    uint64_t v120 = v119;
    uint64_t v122 = v121;
    uint64_t v124 = v123;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
      goto LABEL_10;
    }
    __int128 v125 = *(_OWORD *)(v47 + 32);
    __int128 v178 = *(_OWORD *)(v47 + 16);
    __int128 v179 = v125;
    __int128 v180 = *(_OWORD *)(v47 + 48);
    uint64_t v126 = (void *)v47;
    unint64_t v47 = *(void *)(v47 + 64);
    uint64_t v127 = v126[9];
    uint64_t v158 = v126[10];
    uint64_t v159 = v51;
    double v156 = v126;
    uint64_t v160 = v126[11];
    uint64_t v161 = v127;
    uint64_t v128 = swift_allocObject();
    int v157 = BigString.isEmpty.getter();
    if (v47)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v178);
      swift_unknownObjectRelease();
    }

    else
    {
      v184[0] = v178;
      v184[1] = v179;
      v184[2] = v180;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v184, (uint64_t)v185);
      outlined retain of Locale((uint64_t)v185);
    }

    swift_unknownObjectRetain();
    uint64_t v129 = v158;
    specialized Rope._endPath.getter(v47);
    swift_unknownObjectRelease();
    if (!v47)
    {
      uint64_t v51 = v159;
      if ((v157 & 1) == 0) {
        break;
      }
      goto LABEL_9;
    }

    swift_unknownObjectRelease();
    uint64_t v51 = v159;
    if ((((v129 == 0) ^ v157) & 1) != 0) {
      break;
    }
LABEL_9:
    __int128 v53 = v179;
    *(_OWORD *)(v128 + 16) = v178;
    *(_OWORD *)(v128 + 32) = v53;
    *(_OWORD *)(v128 + 48) = v180;
    uint64_t v54 = v161;
    *(void *)(v128 + 64) = v47;
    *(void *)(v128 + 72) = v54;
    uint64_t v55 = v160;
    *(void *)(v128 + 80) = v129;
    *(void *)(v128 + 88) = v55;
    swift_release();
    unint64_t v47 = v128;
LABEL_10:
    __int128 v56 = *(_OWORD *)(v47 + 32);
    __int128 v175 = *(_OWORD *)(v47 + 16);
    __int128 v176 = v56;
    __int128 v177 = *(_OWORD *)(v47 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    v174[0] = v118;
    v174[1] = v120;
    v174[2] = v122;
    v174[3] = v124;
    v174[4] = v118;
    v174[5] = v120;
    v174[6] = v122;
    v174[7] = v124;
    specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(v174, v71);
    swift_release_n();
    uint64_t v52 = (_BYTE *)v162;
LABEL_11:
    v52 += 32;
    if (!--v51) {
      goto LABEL_97;
    }
  }

  __break(1u);
LABEL_97:
  swift_bridgeObjectRelease();
LABEL_98:
  uint64_t result = outlined destroy of Any?( (uint64_t)v155,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  *uint64_t v137 = v47;
  return result;
}

uint64_t Duration.TimeFormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  void (*v24)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  Swift::UInt v52;
  Swift::UInt v53;
  Swift::UInt8 v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  id v58;
  _BYTE v59[144];
  _BYTE v60[8];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  char v76;
  char v77;
  void v78[18];
  _BYTE v79[144];
  _BYTE v80[152];
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  __n128 v7 = &v59[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (Swift::UInt *)&v59[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v10, v11);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v13 = *v10;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 32))(v7, (char *)v10 + *(int *)(v14 + 48), v4);
      Swift::UInt v15 = 1LL;
    }

    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 32))(v7, (char *)v10 + *(int *)(v16 + 48), v4);
      Swift::UInt v15 = 2LL;
    }

    Hasher._combine(_:)(v15);
  }

  else
  {
    (*(void (**)(_BYTE *, Swift::UInt *, uint64_t))(v5 + 32))(v7, v10, v4);
    Swift::UInt v13 = 0LL;
  }

  Hasher._combine(_:)(v13);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v17 = v2 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  if (*(_BYTE *)(v17 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v18 = *(void *)v17;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }

  uint64_t v19 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(v19 + 20)));
  uint64_t v20 = *(void *)(v2 + *(int *)(v19 + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 48);
  swift_unknownObjectRetain();
  if ((v22(ObjectType, v20) & 1) != 0)
  {
    Swift::UInt8 v23 = 1;
LABEL_14:
    Hasher._combine(_:)(v23);
    return swift_unknownObjectRelease();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v20 + 64))(ObjectType, v20);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v20 + 464);
  swift_unknownObjectRetain();
  v24(v78, ObjectType, v20);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)v79,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v79,  (uint64_t)v80,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v80) == 1)
  {
    Swift::UInt8 v23 = 0;
    goto LABEL_14;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v79,  (uint64_t)v60,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v60[0] == 2)
  {
    uint64_t v25 = 0;
  }

  else
  {
    uint64_t v25 = v60[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v25);
  uint64_t v26 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    uint64_t v31 = v60;
    goto LABEL_29;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v26 + 16));
  uint64_t v27 = *(void *)(v26 + 16);
  if (!v27)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v79,  (uint64_t)v59,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v31 = v59;
LABEL_29:
    outlined retain of LocalePreferences(v31);
    if (!v62) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }

  outlined retain of LocalePreferences?( (uint64_t)v79,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v28 = v26 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v28 += 16LL;
    --v27;
  }

  while (v27);
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v63) {
      goto LABEL_24;
    }
    goto LABEL_31;
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Attributed.CodingKeys()
{
  uint64_t v1 = 0x676E6970756F7267LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x656C61636F6CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E726574746170LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Attributed.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Duration.TimeFormatStyle.Attributed.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Attributed.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Attributed.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.TimeFormatStyle.Attributed.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Attributed.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern and conformance Duration.TimeFormatStyle.Pattern,  type metadata accessor for Duration.TimeFormatStyle.Pattern,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
    LOBYTE(v11) = *(_BYTE *)(v3 + *(int *)(v9 + 20));
    char v12 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    __int128 v11 = *(_OWORD *)(v3 + *(int *)(v9 + 24));
    char v12 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Duration.TimeFormatStyle.Attributed.hashValue.getter()
{
  void (*v20)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  _BYTE v55[144];
  _BYTE v56[8];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  void v74[18];
  _BYTE v75[144];
  _BYTE v76[144];
  _BYTE v77[72];
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = &v55[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (Swift::UInt *)&v55[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  Hasher.init(_seed:)();
  outlined init with copy of ICUNumberFormatter.Signature( v1,  (uint64_t)v8,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v10 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      Swift::UInt v12 = 1LL;
    }

    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v13 + 48), v2);
      Swift::UInt v12 = 2LL;
    }

    Hasher._combine(_:)(v12);
  }

  else
  {
    (*(void (**)(_BYTE *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    Swift::UInt v10 = 0LL;
  }

  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v14 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  if (*(_BYTE *)(v14 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v15 = *(void *)v14;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }

  uint64_t v16 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + *(int *)(v16 + 20)));
  uint64_t v17 = *(void *)(v1 + *(int *)(v16 + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(ObjectType, v17) & 1) != 0)
  {
    Swift::UInt8 v19 = 1;
LABEL_14:
    Hasher._combine(_:)(v19);
    return Hasher._finalize()();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v17 + 64))(ObjectType, v17);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 464);
  swift_unknownObjectRetain();
  v20(v74, ObjectType, v17);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v75,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v75,  (uint64_t)v76,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v76) == 1)
  {
    Swift::UInt8 v19 = 0;
    goto LABEL_14;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v75,  (uint64_t)v56,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v56[0] == 2)
  {
    uint64_t v21 = 0;
  }

  else
  {
    uint64_t v21 = v56[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v21);
  uint64_t v22 = v57;
  if (!v57)
  {
    Hasher._combine(_:)(0);
    uint64_t v27 = v56;
    goto LABEL_29;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v22 + 16));
  Swift::UInt8 v23 = *(void *)(v22 + 16);
  if (!v23)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v75,  (uint64_t)v55,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v27 = v55;
LABEL_29:
    outlined retain of LocalePreferences(v27);
    if (!v58) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }

  outlined retain of LocalePreferences?( (uint64_t)v75,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v24 = v22 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v24 += 16LL;
    --v23;
  }

  while (v23);
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v59) {
      goto LABEL_24;
    }
    goto LABEL_31;
  }

uint64_t Duration.TimeFormatStyle.Attributed.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v21 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  MEMORY[0x1895F8858](v21);
  Swift::UInt8 v23 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Attributed.CodingKeys>);
  uint64_t v4 = *(void *)(v24 - 8);
  MEMORY[0x1895F8858](v24);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(int *)(v10 + 20);
  v9[v11] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys();
  uint64_t v22 = v6;
  uint64_t v12 = (uint64_t)v25;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v19 = v11;
  uint64_t v25 = a1;
  uint64_t v13 = (uint64_t)v9;
  LOBYTE(v26) = 0;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern and conformance Duration.TimeFormatStyle.Pattern,  type metadata accessor for Duration.TimeFormatStyle.Pattern,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern);
  uint64_t v14 = (uint64_t)v23;
  uint64_t v15 = v24;
  uint64_t v16 = v22;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of ICUNumberFormatter.Signature( v14,  v13,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
  char v27 = 1;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_BYTE *)(v13 + v19) = v26;
  char v27 = 2;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v16, v15);
  *(_OWORD *)(v13 + *(int *)(v7 + 24)) = v26;
  outlined init with copy of ICUNumberFormatter.Signature( v13,  v20,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return outlined destroy of ICUNumberFormatter.Signature( v13,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Duration.TimeFormatStyle.Attributed@<X0>( uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return Duration.TimeFormatStyle.Attributed.format(_:)(*a1, a1[1], a2);
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance Duration.TimeFormatStyle.Attributed@<Q0>( __n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(int *)(a2 + 24);
  __n128 v9 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v9;
  *(__n128 *)(a3 + v7) = v9;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.TimeFormatStyle.Attributed@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.TimeFormatStyle.Attributed( void *a1)
{
  return Duration.TimeFormatStyle.Attributed.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance Duration.TimeFormatStyle.Attributed( uint64_t a1, uint64_t a2)
{
  void (*v24)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  Swift::UInt8 v53;
  Swift::UInt8 v54;
  Swift::UInt8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  char v74;
  void v75[18];
  _BYTE v76[144];
  _BYTE v77[152];
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  __n128 v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (Swift::UInt *)((char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  outlined init with copy of ICUNumberFormatter.Signature(v4, (uint64_t)v12, v13);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v15 = *v12;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, (char *)v12 + *(int *)(v16 + 48), v6);
      Swift::UInt v17 = 1LL;
    }

    else
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, (char *)v12 + *(int *)(v18 + 48), v6);
      Swift::UInt v17 = 2LL;
    }

    Hasher._combine(_:)(v17);
  }

  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v7 + 32))(v9, v12, v6);
    Swift::UInt v15 = 0LL;
  }

  Hasher._combine(_:)(v15);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v19 = v4 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  if (*(_BYTE *)(v19 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v20 = *(void *)v19;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v4 + *(int *)(a2 + 20)));
  uint64_t v21 = *(void *)(v4 + *(int *)(a2 + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v21 + 48))(ObjectType, v21) & 1) != 0)
  {
    Swift::UInt8 v23 = 1;
LABEL_14:
    Hasher._combine(_:)(v23);
    return;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v21 + 64))(ObjectType, v21);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v21 + 464);
  swift_unknownObjectRetain();
  v24(v75, ObjectType, v21);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v75,  (uint64_t)v76,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v76,  (uint64_t)v77,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v77) == 1)
  {
    Swift::UInt8 v23 = 0;
    goto LABEL_14;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v76,  (uint64_t)&v57,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v57 == 2)
  {
    uint64_t v25 = 0;
  }

  else
  {
    uint64_t v25 = v57 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v25);
  __int128 v26 = v58;
  if (!v58)
  {
    Hasher._combine(_:)(0);
LABEL_28:
    outlined retain of LocalePreferences(&v57);
    if (!v59) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v26 + 16));
  char v27 = *(void *)(v26 + 16);
  if (!v27) {
    goto LABEL_28;
  }
  outlined retain of LocalePreferences?( (uint64_t)v76,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v28 = v26 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v28 += 16LL;
    --v27;
  }

  while (v27);
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v60) {
      goto LABEL_24;
    }
    goto LABEL_30;
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.TimeFormatStyle.Attributed( uint64_t a1, uint64_t a2)
{
  void (*v22)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  void v73[18];
  _BYTE v74[144];
  _BYTE v75[144];
  _BYTE v76[80];
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (Swift::UInt *)((char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Hasher.init(_seed:)();
  outlined init with copy of ICUNumberFormatter.Signature( v4,  (uint64_t)v11,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    Swift::UInt v13 = *v11;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v14 + 48), v5);
      Swift::UInt v15 = 1LL;
    }

    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v16 + 48), v5);
      Swift::UInt v15 = 2LL;
    }

    Hasher._combine(_:)(v15);
  }

  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v6 + 32))(v8, v11, v5);
    Swift::UInt v13 = 0LL;
  }

  Hasher._combine(_:)(v13);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v4 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  if (*(_BYTE *)(v17 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v18 = *(void *)v17;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v4 + *(int *)(a2 + 20)));
  uint64_t v19 = *(void *)(v4 + *(int *)(a2 + 24) + 8);
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(ObjectType, v19) & 1) != 0)
  {
    Swift::UInt8 v21 = 1;
LABEL_14:
    Hasher._combine(_:)(v21);
    return Hasher._finalize()();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v19 + 64))(ObjectType, v19);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v19 + 464);
  swift_unknownObjectRetain();
  v22(v73, ObjectType, v19);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v73,  (uint64_t)v74,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v75,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    Swift::UInt8 v21 = 0;
    goto LABEL_14;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)&v55,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55 == 2)
  {
    Swift::UInt8 v23 = 0;
  }

  else
  {
    Swift::UInt8 v23 = v55 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v23);
  uint64_t v24 = v56;
  if (!v56)
  {
    Hasher._combine(_:)(0);
LABEL_28:
    outlined retain of LocalePreferences(&v55);
    if (!v57) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v24 + 16));
  uint64_t v25 = *(void *)(v24 + 16);
  if (!v25) {
    goto LABEL_28;
  }
  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v26 = v24 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v26 += 16LL;
    --v25;
  }

  while (v25);
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v58) {
      goto LABEL_24;
    }
    goto LABEL_30;
  }

uint64_t Duration.TimeFormatStyle.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.grouping(_:)(a1, type metadata accessor for Duration.TimeFormatStyle, a2);
}

uint64_t Duration.TimeFormatStyle.grouping.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t Duration.TimeFormatStyle.grouping.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = v2;
  return result;
}

uint64_t (*Duration.TimeFormatStyle.grouping.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v3;
  return Measurement<>.FormatStyle<>.hidesScaleName.modify;
}

uint64_t Duration.TimeFormatStyle.Attributed.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.grouping(_:)(a1, type metadata accessor for Duration.TimeFormatStyle.Attributed, a2);
}

uint64_t Duration.TimeFormatStyle.grouping(_:)@<X0>( char *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  char v5 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature(v3, a3, a2);
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  *(_BYTE *)(a3 + *(int *)(result + 20)) = v5;
  return result;
}

uint64_t Duration.TimeFormatStyle.Attributed.subscript.getter(uint64_t a1)
{
  return Duration.TimeFormatStyle.Attributed.subscript.getter(a1);
}

{
  return Duration.TimeFormatStyle.Attributed.subscript.getter(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  MEMORY[0x1895F8858](a1);
  uint64_t v3 = (char *)&v5 - v2;
  outlined init with copy of ICUNumberFormatter.Signature( v1,  (uint64_t)&v5 - v2,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
  swift_getAtKeyPath();
  return outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v3,  type metadata accessor for Duration.TimeFormatStyle);
}

uint64_t Duration.TimeFormatStyle.Attributed.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  specialized Duration.TimeFormatStyle.Attributed.subscript.setter(a1);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x189619628] + v3 + 8) - 8LL) + 8LL))(a1);
}

void (*Duration.TimeFormatStyle.Attributed.subscript.modify( void *a1, void *a2))(uint64_t **a1, char a2)
{
  char v5 = malloc(0x40uLL);
  *a1 = v5;
  *char v5 = a2;
  v5[1] = v2;
  uint64_t v6 = (void *)(*a2 + *MEMORY[0x189619628]);
  uint64_t v7 = malloc(*(void *)(*(void *)(*v6 - 8LL) + 64LL));
  v5[2] = v7;
  uint64_t v8 = v6[1];
  v5[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v5[5] = malloc(v10);
  v5[6] = malloc(v10);
  v5[7] = malloc(v10);
  outlined init with copy of ICUNumberFormatter.Signature( v2,  (uint64_t)v7,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
  swift_getAtKeyPath();
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for Duration.TimeFormatStyle);
  return Duration.TimeFormatStyle.Attributed.subscript.modify;
}

void Duration.TimeFormatStyle.Attributed.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[4] + 16);
  v4((*a1)[6], v3[7], v3[3]);
  char v5 = (void *)v3[6];
  uint64_t v6 = (void *)v3[7];
  uint64_t v7 = (void *)v3[5];
  uint64_t v12 = v3[4];
  uint64_t v8 = (void *)v3[2];
  uint64_t v9 = v3[3];
  uint64_t v10 = v3[1];
  if ((a2 & 1) != 0)
  {
    v4((uint64_t)v7, (uint64_t)v5, v3[3]);
    outlined init with copy of ICUNumberFormatter.Signature( v10,  (uint64_t)v8,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
    swift_retain();
    swift_setAtWritableKeyPath();
    outlined destroy of ICUNumberFormatter.Signature( v10,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v8,  v10,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
    swift_release();
    uint64_t v11 = *(void (**)(void *, uint64_t))(v12 + 8);
    v11(v5, v9);
  }

  else
  {
    outlined init with copy of ICUNumberFormatter.Signature( v3[1],  v3[2],  type metadata accessor for Duration.TimeFormatStyle.Attributed);
    swift_retain();
    swift_setAtWritableKeyPath();
    outlined destroy of ICUNumberFormatter.Signature( v10,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v8,  v10,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
    swift_release();
    uint64_t v11 = *(void (**)(void *, uint64_t))(v12 + 8);
  }

  v11(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v8);
  free(v3);
}

uint64_t Duration.TimeFormatStyle.Attributed.discreteInput(before:)( uint64_t a1, void (*a2)(void, void, void))
{
  return Duration.TimeFormatStyle.Attributed.discreteInput(before:)( a1,  a2,  1,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x18961AE98]);
}

uint64_t Duration.TimeFormatStyle.discreteInput(before:)( uint64_t a1, void (*a2)(void, void, void))
{
  return Duration.TimeFormatStyle.discreteInput(before:)( a1,  a2,  1,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x18961AE98]);
}

uint64_t Duration.TimeFormatStyle.Attributed.discreteInput(after:)( uint64_t a1, void (*a2)(void, void, void))
{
  return Duration.TimeFormatStyle.Attributed.discreteInput(before:)( a1,  a2,  0,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x18961AE90]);
}

uint64_t Duration.TimeFormatStyle.Attributed.discreteInput(before:)( uint64_t a1, void (*a2)(void, void, void), int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v48 = a4;
  int v52 = a3;
  uint64_t v5 = v4;
  __int128 v53 = a2;
  uint64_t v51 = a1;
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v54 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  BOOL v50 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v47 - v9;
  uint64_t v11 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v11);
  Swift::UInt v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (uint64_t *)((char *)&v47 - v15);
  uint64_t v17 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)&v47 - v21;
  uint64_t v23 = type metadata accessor for Duration.TimeFormatStyle(0LL);
  MEMORY[0x1895F8858](v23);
  uint64_t v25 = (char *)&v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature( v5,  (uint64_t)v25,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
  uint64_t v26 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  uint64_t v27 = *(int *)(v26 + 24);
  v25[*(int *)(v26 + 20)] = 0;
  uint64_t v28 = *(int *)(v26 + 24);
  __int128 v49 = *(_OWORD *)(v5 + v27);
  *(_OWORD *)&v25[v28] = v49;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v25,  (uint64_t)v22,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v22,  (uint64_t)v16,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v29 = *v16;
    uint64_t v30 = (char *)v16
    swift_unknownObjectRetain();
    static Duration.interval(fractionalSecondsLength:)(v29);
    uint64_t v55 = 1LL;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    uint64_t v31 = static Duration.* infix<A>(_:_:)();
    uint64_t v33 = v32;
    uint64_t v34 = *(void (**)(char *, uint64_t))(v54 + 8);
    v34(v30, v6);
  }

  else
  {
    uint64_t v34 = *(void (**)(char *, uint64_t))(v54 + 8);
    swift_unknownObjectRetain();
    v34((char *)v16, v6);
    uint64_t v31 = 0x40AAD21B3B700000LL;
    uint64_t v33 = 3LL;
  }

  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v25,  (uint64_t)v19,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v19,  (uint64_t)v13,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v36 = v50;
  if (EnumCaseMultiPayload)
  {
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
    v38(v36, v37, v6);
  }

  else
  {
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
    v38(v50, v13, v6);
  }

  v38(v10, v36, v6);
  outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v19,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
  uint64_t v39 = static Duration.bound(for:in:countingDown:roundingRule:)(v51, v53, v31, v33, v52 & 1, (uint64_t)v10);
  uint64_t v41 = v40;
  char v43 = v42;
  v34(v10, v6);
  if ((v43 & 1) != 0)
  {
    uint64_t v44 = Duration.init(secondsComponent:attosecondsComponent:)();
    uint64_t v39 = v48(v39, v41, v44, v45);
  }

  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v25, type metadata accessor for Duration.TimeFormatStyle);
  return v39;
}

uint64_t Duration.TimeFormatStyle.discreteInput(after:)( uint64_t a1, void (*a2)(void, void, void))
{
  return Duration.TimeFormatStyle.discreteInput(before:)( a1,  a2,  0,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x18961AE90]);
}

uint64_t Duration.TimeFormatStyle.discreteInput(before:)( uint64_t a1, void (*a2)(void, void, void), int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  char v42 = a4;
  int v46 = a3;
  uint64_t v47 = a2;
  uint64_t v45 = a1;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v43 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v11 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v11);
  Swift::UInt v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (uint64_t *)((char *)&v41 - v15);
  uint64_t v17 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)&v41 - v21;
  uint64_t v44 = v4;
  outlined init with copy of ICUNumberFormatter.Signature(v4, (uint64_t)&v41 - v21, v23);
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v22,  (uint64_t)v16,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v24 = *v16;
    uint64_t v25 = (char *)v16
    static Duration.interval(fractionalSecondsLength:)(v24);
    uint64_t v48 = 1LL;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    uint64_t v26 = static Duration.* infix<A>(_:_:)();
    uint64_t v28 = v27;
    uint64_t v29 = *(void (**)(char *, uint64_t))(v6 + 8);
    v29(v25, v5);
  }

  else
  {
    uint64_t v29 = *(void (**)(char *, uint64_t))(v6 + 8);
    v29((char *)v16, v5);
    uint64_t v26 = 0x40AAD21B3B700000LL;
    uint64_t v28 = 3LL;
  }

  uint64_t v30 = v43;
  outlined init with copy of ICUNumberFormatter.Signature( v44,  (uint64_t)v19,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v19,  (uint64_t)v13,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v32(v30, v31, v5);
  }

  else
  {
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v32(v30, v13, v5);
  }

  v32(v10, v30, v5);
  outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v19,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
  uint64_t v33 = static Duration.bound(for:in:countingDown:roundingRule:)(v45, v47, v26, v28, v46 & 1, (uint64_t)v10);
  uint64_t v35 = v34;
  char v37 = v36;
  v29(v10, v5);
  if ((v37 & 1) != 0)
  {
    uint64_t v38 = Duration.init(secondsComponent:attosecondsComponent:)();
    return v42(v33, v35, v38, v39);
  }

  return v33;
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed( a1,  (uint64_t (*)(void, void))Duration.TimeFormatStyle.Attributed.discreteInput(before:),  a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Duration.TimeFormatStyle.Attributed@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed( a1,  (uint64_t (*)(void, void))Duration.TimeFormatStyle.Attributed.discreteInput(after:),  a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed@<X0>( void *a1@<X0>, uint64_t (*a2)(void, void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1, a1[1]);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed( a1,  (uint64_t (*)(void, void))Duration.TimeFormatStyle.discreteInput(before:),  a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Duration.TimeFormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed( a1,  (uint64_t (*)(void, void))Duration.TimeFormatStyle.discreteInput(after:),  a2);
}

uint64_t specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  MEMORY[0x1895F8858](v4);
  uint64_t v48 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  __int128 v49 = (char *)&v48 - v7;
  MEMORY[0x1895F8858](v8);
  BOOL v50 = (char *)&v48 - v9;
  MEMORY[0x1895F8858](v10);
  uint64_t v51 = (char *)&v48 - v11;
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v15 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (uint64_t *)((char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (uint64_t *)((char *)&v48 - v19);
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Duration.TimeFormatStyle.Pattern.Fields, Duration.TimeFormatStyle.Pattern.Fields));
  MEMORY[0x1895F8858](v24);
  uint64_t v26 = (char *)&v48 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = &v26[*(int *)(v27 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature( a1,  (uint64_t)v26,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  outlined init with copy of ICUNumberFormatter.Signature( a2,  (uint64_t)v28,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v26,  (uint64_t)v20,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
      uint64_t v23 = (char *)v20 + v30;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v31 = *v20;
        uint64_t v32 = *(void *)v28;
        uint64_t v33 = &v28[v30];
        uint64_t v35 = v51;
        uint64_t v34 = v52;
        char v36 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
        uint64_t v37 = v53;
        v36(v51, v23, v53);
        uint64_t v38 = v50;
LABEL_9:
        v36(v38, v33, v37);
        if (v31 == v32)
        {
          char v41 = static FloatingPointRoundingRule.== infix(_:_:)();
          char v42 = *(void (**)(char *, uint64_t))(v34 + 8);
          v42(v38, v37);
          char v43 = v35;
          uint64_t v44 = v37;
          goto LABEL_11;
        }

        int v46 = *(void (**)(char *, uint64_t))(v34 + 8);
        v46(v38, v37);
        v46(v35, v37);
        outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v26,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
LABEL_14:
        char v41 = 0;
        return v41 & 1;
      }
    }

    else
    {
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v26,  (uint64_t)v17,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
      uint64_t v23 = (char *)v17 + v45;
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v31 = *v17;
        uint64_t v32 = *(void *)v28;
        uint64_t v33 = &v28[v45];
        uint64_t v34 = v52;
        uint64_t v37 = v53;
        char v36 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
        uint64_t v35 = v49;
        v36(v49, v23, v53);
        uint64_t v38 = v48;
        goto LABEL_9;
      }
    }

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.CodingKeys,  &unk_189C81EB0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.CodingKeys,  &unk_189C81EB0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.CodingKeys,  &unk_189C81EB0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.CodingKeys,  &unk_189C81EB0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys);
  }

  return result;
}

uint64_t outlined assign with take of Duration.TimeFormatStyle.Pattern(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t specialized static Duration.TimeFormatStyle.Attributed.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(a1, a2) & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v4 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  uint64_t v5 = (void *)(a1 + v4);
  char v6 = *(_BYTE *)(a1 + v4 + 8);
  uint64_t v7 = (void *)(a2 + v4);
  int v8 = *(unsigned __int8 *)(a2 + v4 + 8);
  if ((v6 & 1) != 0)
  {
    if (!v8) {
      goto LABEL_9;
    }
  }

  else
  {
    if (*v5 != *v7) {
      LOBYTE(v8) = 1;
    }
    if ((v8 & 1) != 0) {
      goto LABEL_9;
    }
  }

  uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  if (*(unsigned __int8 *)(a1 + *(int *)(v9 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v9 + 20)))
  {
    uint64_t v12 = *(int *)(v9 + 24);
    __int128 v13 = *(_OWORD *)(a1 + v12);
    __int128 v14 = *(_OWORD *)(a2 + v12);
    __int128 v15 = v13;
    char v10 = specialized static Locale.== infix(_:_:)((uint64_t)&v15, (uint64_t)&v14);
    return v10 & 1;
  }

uint64_t specialized static Duration.TimeFormatStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  uint64_t v5 = (void *)(a1 + v4);
  char v6 = *(_BYTE *)(a1 + v4 + 8);
  uint64_t v7 = (void *)(a2 + v4);
  int v8 = *(unsigned __int8 *)(a2 + v4 + 8);
  if ((v6 & 1) != 0)
  {
    if (!v8) {
      return 0LL;
    }
  }

  else
  {
    if (*v5 != *v7) {
      LOBYTE(v8) = 1;
    }
    if ((v8 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  if (*(unsigned __int8 *)(a1 + *(int *)(v9 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v9 + 20)))
  {
    uint64_t v10 = *(int *)(v9 + 24);
    __int128 v11 = *(_OWORD *)(a1 + v10);
    __int128 v13 = *(_OWORD *)(a2 + v10);
    __int128 v14 = v11;
  }

  return 0LL;
}

void *specialized static Duration.TimeFormatStyle.Attributed.componentsFromPatternString(_:patternSet:)( uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  v50[0] = a1;
  v50[1] = a2;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v50[2] = 0LL;
  v50[3] = v4;
  swift_bridgeObjectRetain();
  uint64_t v5 = v50;
  Swift::String_optional v7 = String.Iterator.next()();
  unint64_t object = v7.value._object;
  if (v7.value._object)
  {
    uint64_t countAndFlagsBits = v7.value._countAndFlagsBits;
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    __int128 v11 = 0LL;
    char v43 = a3;
    uint64_t v12 = a3 + 9;
    uint64_t v13 = 0LL;
    char v41 = v12;
    char v48 = 1;
    char v49 = 0;
    __int128 v14 = (void *)MEMORY[0x18961AFE8];
    uint64_t v47 = (void *)MEMORY[0x18961AFE8];
    while (1)
    {
      uint64_t v16 = v9 + 1;
      if (__OFADD__(v9, 1LL))
      {
        __break(1u);
        goto LABEL_80;
      }

      uint64_t v17 = v13;
      uint64_t v5 = v11;
      __int128 v11 = object;
      uint64_t v13 = countAndFlagsBits;
      if ((v49 & 1) != 0) {
        break;
      }
      uint64_t v18 = v43[2];
      if (!v18) {
        goto LABEL_26;
      }
      BOOL v19 = v43[4] == countAndFlagsBits && object == (void *)v43[5];
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v10 >= v9) {
          goto LABEL_41;
        }
      }

      else
      {
        if (v18 == 1)
        {
LABEL_26:
          if (v10 >= v9) {
            goto LABEL_53;
          }
          goto LABEL_27;
        }

        uint64_t v45 = v10;
        if ((v43[6] != countAndFlagsBits || v11 != (void *)v43[7])
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v18 != 2)
          {
            uint64_t v25 = v41;
            uint64_t v10 = 2LL;
            while (!__OFADD__(v10, 1LL))
            {
              if (*(v25 - 1) == countAndFlagsBits && v11 == (void *)*v25) {
                goto LABEL_40;
              }
              uint64_t v42 = v10 + 1;
              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_40;
              }
              v25 += 2;
              ++v10;
              if (v42 == v18) {
                goto LABEL_52;
              }
            }

uint64_t type metadata accessor for Duration.TimeFormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for Duration.TimeFormatStyle);
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.CodingKeys,  &unk_189C81E20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.CodingKeys,  &unk_189C81E20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.CodingKeys,  &unk_189C81E20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.CodingKeys,  &unk_189C81E20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Attributed.CodingKeys,  &unk_189C81D90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Attributed.CodingKeys,  &unk_189C81D90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Attributed.CodingKeys,  &unk_189C81D90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Attributed.CodingKeys,  &unk_189C81D90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

uint64_t specialized Duration.TimeFormatStyle.Pattern.Fields.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x756E694D72756F68LL && a2 == 0xEA00000000006574LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0xD000000000000010LL && a2 == 0x80000001839CDEA0LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x65536574756E696DLL && a2 == 0xEC000000646E6F63LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t specialized Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000017LL && a2 == 0x80000001839CDEC0LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0xD000000000000016LL && a2 == 0x80000001839CDEE0LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized Duration.TimeFormatStyle.Pattern.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73646C656966LL && a2 == 0xE600000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0xD000000000000016LL && a2 == 0x80000001839CDE50LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized Duration.TimeFormatStyle.Attributed.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E726574746170LL && a2 == 0xE700000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x676E6970756F7267LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t specialized Duration.TimeFormatStyle.Attributed.subscript.setter(uint64_t a1)
{
  uint64_t v3 = (char *)&v9 - v2;
  __n128 v5 = MEMORY[0x1895F8858](v4);
  (*(void (**)(char *, __n128))(v6 + 16))((char *)&v9 - v7, v5);
  outlined init with copy of ICUNumberFormatter.Signature( v1,  (uint64_t)v3,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
  swift_setAtWritableKeyPath();
  outlined destroy of ICUNumberFormatter.Signature(v1, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  return outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v3,  v1,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t base witness table accessor for Equatable in Duration.TimeFormatStyle.Pattern()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern and conformance Duration.TimeFormatStyle.Pattern,  type metadata accessor for Duration.TimeFormatStyle.Pattern,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern);
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle,  type metadata accessor for Duration.TimeFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle,  type metadata accessor for Duration.TimeFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle);
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle,  type metadata accessor for Duration.TimeFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in Duration.TimeFormatStyle()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle,  type metadata accessor for Duration.TimeFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle.Attributed( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed,  type metadata accessor for Duration.TimeFormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed,  type metadata accessor for Duration.TimeFormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed,  type metadata accessor for Duration.TimeFormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in Duration.TimeFormatStyle.Attributed()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed,  type metadata accessor for Duration.TimeFormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle.Attributed( uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed,  type metadata accessor for Duration.TimeFormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle,  type metadata accessor for Duration.TimeFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1831D195C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL) + 24));
  return swift_unknownObjectRetain();
}

uint64_t sub_1831D1998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of ICUNumberFormatter.Signature( a1,  a2,  type metadata accessor for Duration.TimeFormatStyle.Pattern);
}

uint64_t sub_1831D19BC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  *a2 = *(_BYTE *)(a1 + *(int *)(result + 20));
  return result;
}

uint64_t sub_1831D19F0(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  *(_BYTE *)(a2 + *(int *)(result + 20)) = v3;
  return result;
}

uint64_t sub_1831D1A20(uint64_t a1, uint64_t *a2)
{
  return Duration.TimeFormatStyle.Attributed.subscript.getter(*a2);
}

uint64_t sub_1831D1A44(uint64_t a1)
{
  return swift_release();
}

uint64_t sub_1831D1A88()
{
  return 8LL;
}

void *sub_1831D1A94(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for Duration.TimeFormatStyle(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v6 = v4;
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    }

    else
    {
      uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
    }

    swift_storeEnumTagMultiPayload();
    uint64_t v14 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
    Swift::String_optional v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)Swift::String_optional v15 = *(void *)v16;
    v15[8] = v16[8];
    *((_BYTE *)a1 + *(int *)(v6 + 20)) = *((_BYTE *)a2 + *(int *)(v6 + 20));
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
    swift_unknownObjectRetain();
  }

  return a1;
}

uint64_t destroy for Duration.TimeFormatStyle(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    uint64_t v4 = a1
    uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }

  else if (!EnumCaseMultiPayload)
  {
    uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  }

  type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  return swift_unknownObjectRelease();
}

void *initializeWithCopy for Duration.TimeFormatStyle(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  else
  {
    uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
  }

  swift_storeEnumTagMultiPayload();
  uint64_t v10 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  _OWORD v11[8] = v12[8];
  uint64_t v13 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  *((_BYTE *)a1 + *(int *)(v13 + 20)) = *((_BYTE *)a2 + *(int *)(v13 + 20));
  *(_OWORD *)((char *)a1 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 24));
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for Duration.TimeFormatStyle(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
    }

    else
    {
      uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
    }

    swift_storeEnumTagMultiPayload();
  }

  uint64_t v10 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[8];
  *(void *)uint64_t v11 = *(void *)v12;
  _OWORD v11[8] = v13;
  uint64_t v14 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  *((_BYTE *)a1 + *(int *)(v14 + 20)) = *((_BYTE *)a2 + *(int *)(v14 + 20));
  uint64_t v15 = *(int *)(v14 + 24);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v16[1] = v18;
  return a1;
}

void *initializeWithTake for Duration.TimeFormatStyle(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  }

  else
  {
    uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
  }

  swift_storeEnumTagMultiPayload();
  uint64_t v10 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  _OWORD v11[8] = v12[8];
  uint64_t v13 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  *((_BYTE *)a1 + *(int *)(v13 + 20)) = *((_BYTE *)a2 + *(int *)(v13 + 20));
  *(_OWORD *)((char *)a1 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 24));
  return a1;
}

void *assignWithTake for Duration.TimeFormatStyle(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
    }

    else
    {
      uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
    }

    swift_storeEnumTagMultiPayload();
  }

  uint64_t v10 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  _OWORD v11[8] = v12[8];
  uint64_t v13 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  *((_BYTE *)a1 + *(int *)(v13 + 20)) = *((_BYTE *)a2 + *(int *)(v13 + 20));
  uint64_t v14 = *(int *)(v13 + 24);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  swift_unknownObjectRelease();
  v15[1] = v17;
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.TimeFormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1831D231C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm( a1,  a2,  a3,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1831D2334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm( a1,  a2,  a3,  a4,  type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t type metadata completion function for Duration.TimeFormatStyle()
{
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Attributed(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Duration.TimeFormatStyle.Pattern( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    }

    else
    {
      uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
    }

    swift_storeEnumTagMultiPayload();
    uint64_t v14 = *(int *)(a3 + 20);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
  }

  return a1;
}

uint64_t destroy for Duration.TimeFormatStyle.Pattern(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2 || (_DWORD)result == 1)
  {
    goto LABEL_6;
  }

  if (!(_DWORD)result)
  {
LABEL_6:
    uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  }

  return result;
}

void *initializeWithCopy for Duration.TimeFormatStyle.Pattern(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  }

  else
  {
    uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
  }

  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  return a1;
}

void *assignWithCopy for Duration.TimeFormatStyle.Pattern(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    }

    else
    {
      uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
    }

    swift_storeEnumTagMultiPayload();
  }

  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = v15;
  return a1;
}

void *initializeWithTake for Duration.TimeFormatStyle.Pattern(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  }

  else
  {
    uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a1, a2, v11);
  }

  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  return a1;
}

void *assignWithTake for Duration.TimeFormatStyle.Pattern(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    }

    else
    {
      uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a1, a2, v11);
    }

    swift_storeEnumTagMultiPayload();
  }

  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.TimeFormatStyle.Pattern()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1831D2B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm( a1,  a2,  a3,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle.Pattern()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1831D2B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm( a1,  a2,  a3,  a4,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
}

uint64_t type metadata completion function for Duration.TimeFormatStyle.Pattern()
{
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for Duration.TimeFormatStyle.Attributed( void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    }

    else
    {
      uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
    }

    swift_storeEnumTagMultiPayload();
    uint64_t v14 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
    swift_unknownObjectRetain();
  }

  return a1;
}

uint64_t destroy for Duration.TimeFormatStyle.Attributed(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    uint64_t v4 = a1
    uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }

  else if (!EnumCaseMultiPayload)
  {
    uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  }

  return swift_unknownObjectRelease();
}

void *initializeWithCopy for Duration.TimeFormatStyle.Attributed(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  }

  else
  {
    uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
  }

  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for Duration.TimeFormatStyle.Attributed(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    }

    else
    {
      uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
    }

    swift_storeEnumTagMultiPayload();
  }

  uint64_t v12 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  char v15 = v14[8];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v15;
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v17[1] = v19;
  return a1;
}

void *initializeWithTake for Duration.TimeFormatStyle.Attributed(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  }

  else
  {
    uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a1, a2, v11);
  }

  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  return a1;
}

void *assignWithTake for Duration.TimeFormatStyle.Attributed(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    }

    else
    {
      uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a1, a2, v11);
    }

    swift_storeEnumTagMultiPayload();
  }

  uint64_t v12 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)((char *)a2 + v15);
  uint64_t v19 = *((void *)v17 + 1);
  *uint64_t v16 = v18;
  swift_unknownObjectRelease();
  v16[1] = v19;
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.TimeFormatStyle.Attributed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1831D33F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle.Attributed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1831D347C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for Duration.TimeFormatStyle.Attributed()
{
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Pattern(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *type metadata accessor for Duration.TimeFormatStyle.Attributed.CodingKeys()
{
  return &unk_189C81D90;
}

void *type metadata accessor for Duration.TimeFormatStyle.CodingKeys()
{
  return &unk_189C81E20;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.CodingKeys()
{
  return &unk_189C81EB0;
}

uint64_t *initializeBufferWithCopyOfBuffer for Duration.TimeFormatStyle.Pattern.Fields( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    }

    else
    {
      uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
    }

    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

uint64_t destroy for Duration.TimeFormatStyle.Pattern.Fields(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2 || (_DWORD)result == 1)
  {
    goto LABEL_6;
  }

  if (!(_DWORD)result)
  {
LABEL_6:
    uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  }

  return result;
}

void *initializeWithCopy for Duration.TimeFormatStyle.Pattern.Fields(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  else
  {
    uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
  }

  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for Duration.TimeFormatStyle.Pattern.Fields(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
    }

    else
    {
      uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
    }

    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

void *initializeWithTake for Duration.TimeFormatStyle.Pattern.Fields(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  }

  else
  {
    uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
  }

  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for Duration.TimeFormatStyle.Pattern.Fields(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
    }

    else
    {
      uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
    }

    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

uint64_t type metadata completion function for Duration.TimeFormatStyle.Pattern.Fields()
{
  uint64_t result = type metadata accessor for FloatingPointRoundingRule();
  if (v1 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_getTupleTypeLayout2();
    uint64_t v5 = &v3;
    swift_getTupleTypeLayout2();
    uint64_t v6 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0LL;
  }

  return result;
}

uint64_t base witness table accessor for Equatable in Duration.TimeFormatStyle.Pattern.Fields()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields,  (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields);
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.CodingKeys,  &unk_189C81FC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.CodingKeys,  &unk_189C81FC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.CodingKeys,  &unk_189C81FC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.CodingKeys,  &unk_189C81FC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys,  &unk_189C82178);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys,  &unk_189C82178);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys,  &unk_189C82178);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys,  &unk_189C82178);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys,  &unk_189C820E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys,  &unk_189C820E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys,  &unk_189C820E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys,  &unk_189C820E8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys,  &unk_189C82058);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys,  &unk_189C82058);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys,  &unk_189C82058);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys,  &unk_189C82058);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys);
  }

  return result;
}

uint64_t outlined init with copy of FloatingPointFormatStyle<Double>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [Character] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Character] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Character] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Character]);
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618470], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [Character] and conformance [A]);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field,  &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field,  &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field,  &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field,  &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field,  &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }

  return result;
}

uint64_t initializeWithCopy for Duration.TimeFormatStyle.Attributed.PatternComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Duration.TimeFormatStyle.Attributed.PatternComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for Duration.TimeFormatStyle.Attributed.PatternComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for Duration.TimeFormatStyle.Attributed.PatternComponent()
{
  return &type metadata for Duration.TimeFormatStyle.Attributed.PatternComponent;
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle.Attributed.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1831D427C + 4 * byte_1837BFA65[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1831D42B0 + 4 * asc_1837BFA60[v4]))();
}

uint64_t sub_1831D42B0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831D42B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1831D42C0LL);
  }
  return result;
}

uint64_t sub_1831D42CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1831D42D4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1831D42D8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831D42E0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields.CodingKeys()
{
  return &unk_189C81FC8;
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1831D433C + 4 * byte_1837BFA6A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1831D435C + 4 * byte_1837BFA6F[v4]))();
  }
}

_BYTE *sub_1831D433C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1831D435C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1831D4364(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1831D436C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1831D4374(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1831D437C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys()
{
  return &unk_189C82058;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys()
{
  return &unk_189C820E8;
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle.Pattern.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1831D43F4 + 4 * byte_1837BFA79[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1831D4428 + 4 * byte_1837BFA74[v4]))();
}

uint64_t sub_1831D4428(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831D4430(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1831D4438LL);
  }
  return result;
}

uint64_t sub_1831D4444(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1831D444CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1831D4450(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831D4458(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys()
{
  return &unk_189C82178;
}

unint64_t specialized ICULegacyNumberFormatter.parseAsDecimal<A>(_:upperBound:)( unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  uint64_t v10 = String.UTF16View.distance(from:to:)();
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v10, 0LL);
    uint64_t v13 = specialized Sequence._copySequenceContents(initializing:)(&v19, (uint64_t)(v12 + 4), v11, a1, a2, a3, a4);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    if (v13 != v11)
    {
      __break(1u);
LABEL_18:
      __break(1u);
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v12 = (void *)MEMORY[0x18961AFE8];
  }

  ufmt_open();
  if (v12[2] >> 31) {
    goto LABEL_18;
  }
  unum_parseToUFormattable();
  swift_release();
  *a5 = 0LL;
  if (!ufmt_getDecNumChars())
  {
    ufmt_close();
    unint64_t v14 = 0LL;
LABEL_8:
    char v15 = 1;
    goto LABEL_9;
  }

  unint64_t v17 = MEMORY[0x186E1B634]();
  unint64_t v14 = v18;
  if (!v18)
  {
    ufmt_close();
    goto LABEL_8;
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( v17,  v18,  0x2EuLL,  0xE100000000000000LL,  0,  (uint64_t)v21);
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v21, (uint64_t)&v19);
  char v15 = v20;
  if (v20 == 1) {
    unint64_t v14 = 0LL;
  }
  else {
    unint64_t v14 = v19;
  }
  ufmt_close();
LABEL_9:
  LOBYTE(v19) = v15;
  return v14;
}

uint64_t NSDecimal.ParseStrategy.parse(_:startingAt:in:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, int64_t a6)
{
  uint64_t v134 = a2;
  uint64_t v132 = a1;
  uint64_t v137 = type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
  uint64_t v139 = *(void *)(v137 - 8);
  MEMORY[0x1895F8858](v137);
  uint64_t v140 = (uint64_t)&v122 - ((unint64_t)(v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v136 = v9;
  MEMORY[0x1895F8858](v10);
  uint64_t v138 = (char *)&v122 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle.Currency?);
  MEMORY[0x1895F8858](v12);
  uint64_t v127 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v126 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  uint64_t v125 = *(void *)(v126 - 8);
  MEMORY[0x1895F8858](v126);
  uint64_t v122 = (uint64_t *)((char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle.Percent?);
  MEMORY[0x1895F8858](v15);
  uint64_t v130 = (char *)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  uint64_t v128 = *(void *)(v17 - 8);
  uint64_t v129 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v124 = (uint64_t *)((char *)&v122 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle?);
  MEMORY[0x1895F8858](v19);
  uint64_t v21 = (char *)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v135 = a6;
  uint64_t v22 = *(void *)(a6 + 16);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1895F8858](v24);
  uint64_t v123 = (char *)&v122 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v26);
  unint64_t v28 = (char *)&v122 - v27;
  MEMORY[0x1895F8858](v29);
  uint64_t v31 = (char *)&v122 - v30;
  uint64_t v32 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x1895F8858](v32);
  uint64_t v35 = (uint64_t *)((char *)&v122 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v36 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  __n128 v37 = MEMORY[0x1895F8858](v36);
  uint64_t v141 = (uint64_t)&v122 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v131 = a3;
  unint64_t v133 = a5;
  if (a3 >> 14 >= a5 >> 14) {
    goto LABEL_18;
  }
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16);
  v39(v31, v142, v22, v37);
  int v40 = swift_dynamicCast();
  char v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
  if (v40)
  {
    v41(v21, 0LL, 1LL, v32);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v21,  (uint64_t)v35,  type metadata accessor for NSDecimal.FormatStyle);
    uint64_t v42 = v141;
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v35 + *(int *)(v32 + 20),  v141,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
    swift_storeEnumTagMultiPayload();
    uint64_t v44 = *v35;
    unint64_t v43 = v35[1];
    uint64_t v45 = (uint64_t)v138;
    uint64_t v46 = v142;
  }

  else
  {
    v41(v21, 1LL, 1LL, v32);
    outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for NSDecimal.FormatStyle?);
    uint64_t v46 = v142;
    ((void (*)(char *, uint64_t, uint64_t))v39)(v28, v142, v22);
    uint64_t v47 = (uint64_t)v130;
    uint64_t v48 = v129;
    int v49 = swift_dynamicCast();
    BOOL v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v128 + 56);
    uint64_t v42 = v141;
    if (v49)
    {
      v50(v47, 0LL, 1LL, v48);
      uint64_t v51 = v124;
      outlined init with take of ICUNumberFormatter.Signature( v47,  (uint64_t)v124,  type metadata accessor for NSDecimal.FormatStyle.Percent);
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v51 + *(int *)(v48 + 20),  v42,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
      swift_storeEnumTagMultiPayload();
      uint64_t v44 = *v51;
      unint64_t v43 = v51[1];
      uint64_t v45 = (uint64_t)v138;
    }

    else
    {
      v50(v47, 1LL, 1LL, v48);
      outlined destroy of Any?(v47, &demangling cache variable for type metadata for NSDecimal.FormatStyle.Percent?);
      ((void (*)(char *, uint64_t, uint64_t))v39)(v123, v46, v22);
      uint64_t v52 = (uint64_t)v127;
      uint64_t v53 = v126;
      int v54 = swift_dynamicCast();
      uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 56);
      uint64_t v45 = (uint64_t)v138;
      if (!v54)
      {
        v55(v52, 1LL, 1LL, v53);
        outlined destroy of Any?(v52, &demangling cache variable for type metadata for NSDecimal.FormatStyle.Currency?);
        *(void *)uint64_t v42 = 0LL;
        *(_BYTE *)(v42 + 8) = 1;
        *(void *)(v42 + 16) = 0LL;
        *(void *)(v42 + 24) = 0LL;
        *(void *)(v42 + 32) = 0LL;
        *(void *)(v42 + 40) = 0x1FFFFFFFELL;
        *(void *)(v42 + 56) = 0LL;
        *(void *)(v42 + 64) = 0LL;
        *(void *)(v42 + 48) = 0LL;
        *(_DWORD *)(v42 + 72) = 131584;
        *(_WORD *)(v42 + 76) = 512;
        uint64_t v58 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
        uint64_t v59 = v42 + v58[9];
        uint64_t v60 = type metadata accessor for FloatingPointRoundingRule();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56LL))(v59, 1LL, 1LL, v60);
        uint64_t v61 = v42 + v58[10];
        *(void *)uint64_t v61 = 0LL;
        *(_BYTE *)(v61 + 8) = -1;
        *(_BYTE *)(v42 + v58[11]) = 3;
        swift_storeEnumTagMultiPayload();
        if (one-time initialization token for cache != -1) {
          goto LABEL_32;
        }
        goto LABEL_9;
      }

      v55(v52, 0LL, 1LL, v53);
      uint64_t v56 = v52;
      unint64_t v57 = v122;
      outlined init with take of ICUNumberFormatter.Signature( v56,  (uint64_t)v122,  type metadata accessor for NSDecimal.FormatStyle.Currency);
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v57 + *(int *)(v53 + 24),  v42,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
      swift_storeEnumTagMultiPayload();
      uint64_t v44 = *v57;
      unint64_t v43 = v57[1];
      swift_unknownObjectRetain();
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v57,  type metadata accessor for NSDecimal.FormatStyle.Currency);
    }
  }

  while (1)
  {
    char v64 = *(_BYTE *)(v46 + *(int *)(v135 + 36));
    outlined init with copy of ICUNumberFormatter.Signature( v42,  v45,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v66 = *(uint64_t (**)(uint64_t, unint64_t))(v43 + 64);
    swift_unknownObjectRetain_n();
    uint64_t v67 = v66(ObjectType, v43);
    uint64_t v69 = v68;
    swift_unknownObjectRelease();
    uint64_t v70 = v137;
    uint64_t v71 = (uint64_t *)(v45 + *(int *)(v137 + 20));
    *uint64_t v71 = v67;
    v71[1] = v69;
    *(_BYTE *)(v45 + *(int *)(v70 + 24)) = v64;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v73 = static ICULegacyNumberFormatter.cache;
    uint64_t v72 = unk_18C5CB2B0;
    uint64_t v74 = v140;
    outlined init with copy of ICUNumberFormatter.Signature( v45,  v140,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    unint64_t v75 = (*(unsigned __int8 *)(v139 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80);
    uint64_t v142 = swift_allocObject();
    outlined init with take of ICUNumberFormatter.Signature( v74,  v142 + v75,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    uint64_t v76 = (uint64_t *)(v72 + 16);
    uint64_t v46 = v72 + 24;
    swift_retain_n();
    os_unfair_lock_lock((os_unfair_lock_t)(v72 + 24));
    specialized closure #1 in FormatterCache.formatter(for:creator:)(v72 + 16, v45, v143);
    os_unfair_lock_unlock((os_unfair_lock_t)(v72 + 24));
    swift_release();
    if (v143[0])
    {
      swift_release();
      goto LABEL_14;
    }

    implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
    uint64_t v89 = v88;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v72 + 24));
    if (v73 >= *(void *)(*(void *)(v72 + 16) + 16LL)) {
      swift_bridgeObjectRetain();
    }
    else {
      *uint64_t v76 = MEMORY[0x18961AFF0];
    }
    swift_retain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v144[0] = *v76;
    uint64_t v91 = v144[0];
    *uint64_t v76 = 0x8000000000000000LL;
    unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(v45);
    uint64_t v94 = *(void *)(v91 + 16);
    BOOL v95 = (v92 & 1) == 0;
    uint64_t v96 = v94 + v95;
    if (!__OFADD__(v94, v95)) {
      break;
    }
    __break(1u);
LABEL_32:
    swift_once();
LABEL_9:
    uint64_t v62 = static LocaleCache.cache + 16;
    uint64_t v63 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
    swift_retain_n();
    os_unfair_lock_lock(v63);
    closure #1 in LocaleCache.autoupdatingCurrent.getter(v62, v143);
    os_unfair_lock_unlock(v63);
    swift_release_n();
    uint64_t v44 = v143[0];
    unint64_t v43 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  }

  if (*(void *)(v91 + 24) < v96)
  {
    char v97 = v92;
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v96, isUniquelyReferenced_nonNull_native);
    uint64_t v98 = v144[0];
    unint64_t v99 = specialized __RawDictionaryStorage.find<A>(_:)(v45);
    if ((v97 & 1) != (v100 & 1)) {
      goto LABEL_72;
    }
    unint64_t v93 = v99;
    if ((v97 & 1) == 0)
    {
LABEL_68:
      uint64_t v120 = v140;
      unint64_t v121 = v93;
      outlined init with copy of ICUNumberFormatter.Signature( v45,  v140,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v121, v120, v89, (void *)v98);
LABEL_69:
      *(void *)(v72 + 16) = v98;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock((os_unfair_lock_t)(v72 + 24));
      swift_release_n();
      swift_bridgeObjectRelease();
LABEL_14:
      outlined destroy of ICUNumberFormatter.Signature( v45,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      swift_unknownObjectRelease();
      swift_release();
      unint64_t v77 = String.subscript.getter();
      uint64_t v79 = v78;
      uint64_t v81 = v80;
      uint64_t v83 = v82;
      v144[0] = 0LL;
      specialized ICULegacyNumberFormatter.parseAsDecimal<A>(_:upperBound:)(v77, v78, v80, v82, v144);
      if ((v84 & 0x100000000LL) == 0)
      {
        v143[0] = v77;
        v143[1] = v79;
        v143[2] = v81;
        v143[3] = v83;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        uint64_t v85 = String.Index.init<A>(utf16Offset:in:)();
        swift_unknownObjectRelease();
        swift_release();
        outlined destroy of ICUNumberFormatter.Signature( v141,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
        char v86 = 0;
LABEL_19:
        LOBYTE(v143[0]) = v86;
        return v85;
      }

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature( v42,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
LABEL_18:
      uint64_t v85 = 0LL;
      char v86 = 1;
      goto LABEL_19;
    }

uint64_t NSDecimal.ParseStrategy.formatStyle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t NSDecimal.ParseStrategy.formatStyle.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 40LL))(v2, a1);
}

uint64_t (*NSDecimal.ParseStrategy.formatStyle.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSDecimal.ParseStrategy.lenient.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t NSDecimal.ParseStrategy.lenient.setter(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*NSDecimal.ParseStrategy.lenient.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void NSDecimal.ParseStrategy.hash(into:)(uint64_t a1, uint64_t a2)
{
}

uint64_t static NSDecimal.ParseStrategy.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    uint64_t v9 = type metadata accessor for NSDecimal.ParseStrategy(0LL, a3, a4, v8);
    char v10 = *(_BYTE *)(a1 + *(int *)(v9 + 36)) ^ *(_BYTE *)(a2 + *(int *)(v9 + 36)) ^ 1;
  }

  else
  {
    char v10 = 0;
  }

  return v10 & 1;
}

uint64_t type metadata accessor for NSDecimal.ParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for NSDecimal.ParseStrategy);
}

uint64_t NSDecimal.ParseStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x745374616D726F66LL && a2 == 0xEB00000000656C79LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x746E65696E656CLL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t NSDecimal.ParseStrategy.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x746E65696E656CLL;
  }
  else {
    return 0x745374616D726F66LL;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static PredicateExpressions.KeyPath<>.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.ParseStrategy<A>.CodingKeys()
{
  return PredicateExpressions.KeyPath<>.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys( uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.ParseStrategy<A>.CodingKeys()
{
  return NSDecimal.ParseStrategy.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = NSDecimal.ParseStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = protocol witness for Sequence._customContainsEquatableElement(_:) in conformance _DarwinSearchPathsSequence();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.ParseStrategy<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.ParseStrategy<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t NSDecimal.ParseStrategy.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a2;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for NSDecimal.ParseStrategy.CodingKeys(255LL, v14, v5, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDecimal.ParseStrategy<A>.CodingKeys, v6);
  uint64_t v7 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  char v10 = (char *)&v13 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  uint64_t v11 = v15;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    char v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t type metadata accessor for NSDecimal.ParseStrategy.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for NSDecimal.ParseStrategy.CodingKeys);
}

Swift::Int NSDecimal.ParseStrategy.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t NSDecimal.ParseStrategy.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v32 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  __n128 v37 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NSDecimal.ParseStrategy.CodingKeys(255LL, v8, v9, v10);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDecimal.ParseStrategy<A>.CodingKeys, v11);
  uint64_t v36 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v31 = *(void *)(v36 - 8);
  MEMORY[0x1895F8858](v36);
  uint64_t v13 = (char *)&v29 - v12;
  uint64_t v35 = a2;
  uint64_t v33 = a3;
  uint64_t v15 = type metadata accessor for NSDecimal.ParseStrategy(0LL, a2, a3, v14);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v29 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v34 = v13;
  uint64_t v19 = (uint64_t)v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v29 = v16;
  uint64_t v38 = a1;
  uint64_t v20 = v18;
  uint64_t v22 = v31;
  uint64_t v21 = v32;
  char v40 = 0;
  uint64_t v23 = v34;
  uint64_t v24 = v36;
  uint64_t v25 = v35;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v20, v37, v25);
  char v39 = 1;
  char v26 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v24);
  v20[*(int *)(v15 + 36)] = v26 & 1;
  uint64_t v27 = v29;
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))(v30, v20, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v20, v15);
}

void protocol witness for ParseStrategy.parse(_:) in conformance NSDecimal.ParseStrategy<A>( NSDecimal **a1@<X0>, uint64_t a2@<X8>)
{
  if (!v6)
  {
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = v4;
    *(_DWORD *)(a2 + 16) = v5;
  }

uint64_t specialized NSDecimal.ParseStrategy.parse(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v196 = *MEMORY[0x1895F89C0];
  uint64_t v6 = type metadata accessor for ICUNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v170 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = a1;
  }
  uint64_t v10 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v10 = 11LL;
  }
  specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, 0xFuLL, 15LL, v10 | (v9 << 16));
  if ((v12 & 0x100000000LL) == 0) {
    return v11;
  }
  swift_bridgeObjectRetain();
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( a1,  a2,  0x2EuLL,  0xE100000000000000LL,  0,  (uint64_t)v193);
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v193, (uint64_t)&v194);
  if (v195 != 1) {
    return v194;
  }
  __int128 v181 = v3;
  unint64_t v182 = specialized NSDecimal.init(_:)(3.14);
  uint64_t v184 = v13;
  LODWORD(v183) = v14;
  uint64_t v179 = v2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
  uint64_t v15 = *(void *)(v2 + 8);
  uint64_t v176 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 472);
  swift_unknownObjectRetain();
  uint64_t v180 = v17(ObjectType, v15);
  uint64_t v178 = v18;
  swift_unknownObjectRelease();
  uint64_t v19 = *(uint64_t **)(v15 + 464);
  swift_unknownObjectRetain();
  ((void (*)(_BYTE *__return_ptr, uint64_t, uint64_t))v19)(v191, ObjectType, v15);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v191, (uint64_t)v192);
  outlined init with copy of ICUNumberFormatter.Signature( v179,  (uint64_t)v8,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v20 = (uint64_t *)&v8[*(int *)(v6 + 20)];
  uint64_t v21 = v178;
  *uint64_t v20 = v180;
  v20[1] = v21;
  uint64_t v177 = v6;
  outlined init with take of LocalePreferences?((uint64_t)v192, (uint64_t)&v8[*(int *)(v6 + 24)]);
  uint64_t v22 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v8);
  uint64_t v178 = (uint64_t)v8;
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v8, type metadata accessor for ICUNumberFormatter.Signature);
  unint64_t v174 = a1;
  __int128 v175 = (void *)a2;
  if (v22)
  {
    uint64_t v23 = *(void *)(v22 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    uint64_t v19 = v181;
    unint64_t v24 = v182;
    uint64_t v25 = v184;
    LODWORD(v26) = v183;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v23, v182, v184, v183);
    if (!v19) {
      goto LABEL_41;
    }

    swift_release();
    unint64_t v27 = v25;
    __int128 v181 = 0LL;
  }

  else
  {
    LODWORD(v26) = v183;
    unint64_t v24 = v182;
    unint64_t v27 = v184;
  }

  while (2)
  {
    *(void *)uint64_t v191 = v24;
    unint64_t v29 = HIDWORD(v24);
    unint64_t v30 = HIWORD(v24);
    unint64_t v31 = v27 >> 16;
    *(_DWORD *)&v191[8] = v27;
    unint64_t v32 = HIDWORD(v27);
    unint64_t v33 = HIWORD(v27);
    *(_WORD *)&v191[12] = WORD2(v27);
    unsigned int v34 = v26;
    __int16 v35 = v33;
    unsigned int v36 = HIWORD(v34);
    *(_WORD *)&v191[14] = v33;
    *(_DWORD *)&v191[16] = v34;
    if (!_So9NSDecimala__length_getter(v191))
    {
      *(void *)uint64_t v191 = v24;
      *(_WORD *)&v191[8] = v184;
      *(_WORD *)&v191[10] = v31;
      *(_WORD *)&v191[12] = v32;
      *(_WORD *)&v191[14] = v35;
      *(_DWORD *)&v191[16] = v34;
      if (_So9NSDecimala__isNegative_getter(v191))
      {
        uint64_t v60 = 5136718LL;
        unint64_t v61 = 0xE300000000000000LL;
        goto LABEL_56;
      }
    }

    *(void *)uint64_t v191 = v24;
    *(_WORD *)&v191[8] = v184;
    *(_WORD *)&v191[10] = v31;
    *(_WORD *)&v191[12] = v32;
    *(_WORD *)&v191[14] = v35;
    *(_DWORD *)&v191[16] = v34;
    if (!_So9NSDecimala__length_getter(v191))
    {
      unint64_t v61 = 0xE100000000000000LL;
      uint64_t v60 = 48LL;
      goto LABEL_56;
    }

    *(void *)uint64_t v189 = 0LL;
    *(void *)&v189[8] = 0xE000000000000000LL;
    *(void *)uint64_t v191 = v24;
    *(_WORD *)&v191[8] = v184;
    *(_WORD *)&v191[10] = v31;
    *(_WORD *)&v191[12] = v32;
    *(_WORD *)&v191[14] = v35;
    *(_DWORD *)&v191[16] = v34;
    *(void *)uint64_t v190 = v24;
    *(_WORD *)&v190[8] = v184;
    *(_WORD *)&v190[10] = v31;
    *(_WORD *)&v190[12] = v32;
    *(_WORD *)&v190[14] = v35;
    *(_DWORD *)&v190[16] = v34;
    if ((int)_So9NSDecimala__exponent_getter(v190) >= 1)
    {
      do
      {
        LODWORD(v183) = v34;
        v37._uint64_t countAndFlagsBits = 48LL;
        v37._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v37);
        *(_DWORD *)uint64_t v190 = v24;
        *(_WORD *)&v190[4] = v29;
        *(_WORD *)&v190[6] = v30;
        *(_WORD *)&v190[8] = v184;
        *(_WORD *)&v190[10] = v31;
        *(_WORD *)&v190[12] = v32;
        *(_WORD *)&v190[14] = v35;
        *(_WORD *)&v190[16] = v183;
        *(_WORD *)&v190[18] = v36;
        int v38 = _So9NSDecimala__exponent_getter(v190);
        _So9NSDecimala__exponent_setter((v38 - 1), v191);
        unint64_t v24 = *(unsigned int *)v191;
        LOWORD(v29) = *(_WORD *)&v191[4];
        LOWORD(v30) = *(_WORD *)&v191[6];
        LOWORD(v31) = *(_WORD *)&v191[10];
        LOWORD(v32) = *(_WORD *)&v191[12];
        __int16 v35 = *(_WORD *)&v191[14];
        unsigned int v34 = *(unsigned __int16 *)&v191[16];
        unsigned int v36 = *(unsigned __int16 *)&v191[18];
        *(_DWORD *)uint64_t v190 = *(_DWORD *)v191;
        *(_WORD *)&v190[4] = *(_WORD *)&v191[4];
        *(_WORD *)&v190[6] = *(_WORD *)&v191[6];
        uint64_t v184 = *(unsigned __int16 *)&v191[8];
        *(_WORD *)&v190[8] = *(_WORD *)&v191[8];
        *(_WORD *)&v190[10] = *(_WORD *)&v191[10];
        *(_WORD *)&v190[12] = *(_WORD *)&v191[12];
        *(_WORD *)&v190[14] = *(_WORD *)&v191[14];
        *(_WORD *)&v190[16] = *(_WORD *)&v191[16];
        *(_WORD *)&v190[18] = *(_WORD *)&v191[18];
      }

      while ((int)_So9NSDecimala__exponent_getter(v190) > 0);
    }

    *(_DWORD *)uint64_t v190 = v24;
    *(_WORD *)&v190[4] = v29;
    *(_WORD *)&v190[6] = v30;
    *(_WORD *)&v190[8] = v184;
    *(_WORD *)&v190[10] = v31;
    *(_WORD *)&v190[12] = v32;
    *(_WORD *)&v190[14] = v35;
    *(_WORD *)&v190[16] = v34;
    *(_WORD *)&v190[18] = v36;
    int v39 = _So9NSDecimala__exponent_getter(v190);
    uint64_t v40 = v184;
    if (!v39)
    {
      _So9NSDecimala__exponent_setter(1LL, v191);
      unint64_t v24 = *(unsigned int *)v191;
      LOWORD(v29) = *(_WORD *)&v191[4];
      LOWORD(v30) = *(_WORD *)&v191[6];
      uint64_t v40 = *(unsigned __int16 *)&v191[8];
      LOWORD(v31) = *(_WORD *)&v191[10];
      LOWORD(v32) = *(_WORD *)&v191[12];
      __int16 v35 = *(_WORD *)&v191[14];
      unsigned int v34 = *(unsigned __int16 *)&v191[16];
      unsigned int v36 = *(unsigned __int16 *)&v191[18];
    }

    unint64_t v182 = v24;
    *(_DWORD *)uint64_t v190 = v24;
    *(_WORD *)&v190[4] = v29;
    *(_WORD *)&v190[6] = v30;
    uint64_t v184 = v40;
    *(_WORD *)&v190[8] = v40;
    *(_WORD *)&v190[10] = v31;
    *(_WORD *)&v190[12] = v32;
    *(_WORD *)&v190[14] = v35;
    *(_WORD *)&v190[16] = v34;
    LODWORD(v180) = v36;
    *(_WORD *)&v190[18] = v36;
    if (!_So9NSDecimala__length_getter(v190))
    {
      unint64_t v41 = v182;
      uint64_t v42 = v184;
      int v43 = v180;
LABEL_45:
      LODWORD(v180) = v43;
      *(_DWORD *)uint64_t v190 = v41;
      *(_WORD *)&v190[4] = v29;
      *(_WORD *)&v190[6] = v30;
      *(_WORD *)&v190[8] = v42;
      *(_WORD *)&v190[10] = v31;
      *(_WORD *)&v190[12] = v32;
      *(_WORD *)&v190[14] = v35;
      *(_WORD *)&v190[16] = v34;
      *(_WORD *)&v190[18] = v43;
      uint64_t v64 = v42;
      unint64_t v65 = v41;
      int v66 = _So9NSDecimala__exponent_getter(v190);
      int v67 = v65;
      if (v66 <= 0)
      {
        unint64_t v182 = v65;
        *(_DWORD *)uint64_t v190 = v65;
        *(_WORD *)&v190[4] = v29;
        *(_WORD *)&v190[6] = v30;
        uint64_t v184 = v64;
        *(_WORD *)&v190[8] = v64;
        *(_WORD *)&v190[10] = v31;
        *(_WORD *)&v190[12] = v32;
        *(_WORD *)&v190[14] = v35;
        *(_WORD *)&v190[16] = v34;
        int v69 = v180;
        *(_WORD *)&v190[18] = v180;
        int v70 = _So9NSDecimala__exponent_getter(v190);
        LODWORD(v183) = v34;
        if (v70)
        {
          __int16 v68 = v184;
          do
          {
            v71._uint64_t countAndFlagsBits = 48LL;
            v71._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v71);
            *(_DWORD *)uint64_t v190 = v182;
            *(_WORD *)&v190[4] = v29;
            *(_WORD *)&v190[6] = v30;
            *(_WORD *)&v190[8] = v68;
            *(_WORD *)&v190[10] = v31;
            *(_WORD *)&v190[12] = v32;
            *(_WORD *)&v190[14] = v35;
            *(_WORD *)&v190[16] = v183;
            *(_WORD *)&v190[18] = v69;
            int v72 = _So9NSDecimala__exponent_getter(v190);
            _So9NSDecimala__exponent_setter((v72 + 1), v191);
            LOWORD(v29) = *(_WORD *)&v191[4];
            LOWORD(v30) = *(_WORD *)&v191[6];
            __int16 v68 = *(_WORD *)&v191[8];
            LOWORD(v31) = *(_WORD *)&v191[10];
            LOWORD(v32) = *(_WORD *)&v191[12];
            __int16 v35 = *(_WORD *)&v191[14];
            int v69 = *(unsigned __int16 *)&v191[18];
            unint64_t v182 = *(unsigned int *)v191;
            *(_DWORD *)uint64_t v190 = *(_DWORD *)v191;
            *(_WORD *)&v190[4] = *(_WORD *)&v191[4];
            *(_WORD *)&v190[6] = *(_WORD *)&v191[6];
            *(_WORD *)&v190[8] = *(_WORD *)&v191[8];
            *(_WORD *)&v190[10] = *(_WORD *)&v191[10];
            *(_WORD *)&v190[12] = *(_WORD *)&v191[12];
            *(_WORD *)&v190[14] = *(_WORD *)&v191[14];
            LODWORD(v183) = *(unsigned __int16 *)&v191[16];
            *(_WORD *)&v190[16] = *(_WORD *)&v191[16];
            *(_WORD *)&v190[18] = *(_WORD *)&v191[18];
          }

          while (_So9NSDecimala__exponent_getter(v190));
        }

        else
        {
          __int16 v68 = v184;
        }

        LODWORD(v180) = v69;
        v73._uint64_t countAndFlagsBits = 46LL;
        v73._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v73);
        v74._uint64_t countAndFlagsBits = 48LL;
        v74._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v74);
        LOWORD(v34) = v183;
        int v67 = v182;
      }

      else
      {
        __int16 v68 = v64;
      }

      *(_DWORD *)uint64_t v190 = v67;
      *(_WORD *)&v190[4] = v29;
      *(_WORD *)&v190[6] = v30;
      *(_WORD *)&v190[8] = v68;
      *(_WORD *)&v190[10] = v31;
      *(_WORD *)&v190[12] = v32;
      *(_WORD *)&v190[14] = v35;
      *(_WORD *)&v190[16] = v34;
      *(_WORD *)&v190[18] = v180;
      if (_So9NSDecimala__isNegative_getter(v190))
      {
        v75._uint64_t countAndFlagsBits = 45LL;
        v75._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v75);
      }

      *(void *)uint64_t v190 = *(void *)v189;
      *(void *)&v190[8] = *(void *)&v189[8];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
      uint64_t v60 = String.init<A>(_:)();
      unint64_t v61 = v76;
      goto LABEL_56;
    }

    unint64_t v24 = 3435973837LL;
    unint64_t v41 = v182;
    uint64_t v42 = v184;
    int v43 = v180;
    while (1)
    {
      unint64_t v182 = v41;
      uint64_t v184 = v42;
      LODWORD(v180) = v43;
      *(_DWORD *)uint64_t v190 = v41;
      *(_WORD *)&v190[4] = v29;
      *(_WORD *)&v190[6] = v30;
      *(_WORD *)&v190[8] = v42;
      *(_WORD *)&v190[10] = v31;
      *(_WORD *)&v190[12] = v32;
      *(_WORD *)&v190[14] = v35;
      *(_WORD *)&v190[16] = v34;
      *(_WORD *)&v190[18] = v43;
      if (!_So9NSDecimala__exponent_getter(v190))
      {
        LODWORD(v183) = v34;
        v44._uint64_t countAndFlagsBits = 46LL;
        v44._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v44);
        LOWORD(v34) = v183;
      }

      *(_DWORD *)uint64_t v190 = v182;
      *(_WORD *)&v190[4] = v29;
      *(_WORD *)&v190[6] = v30;
      *(_WORD *)&v190[8] = v184;
      *(_WORD *)&v190[10] = v31;
      *(_WORD *)&v190[12] = v32;
      *(_WORD *)&v190[14] = v35;
      *(_WORD *)&v190[16] = v34;
      *(_WORD *)&v190[18] = v180;
      int v45 = _So9NSDecimala__exponent_getter(v190);
      _So9NSDecimala__exponent_setter((v45 + 1), v191);
      uint64_t v46 = *(unsigned int *)v191;
      __int16 v47 = *(_WORD *)&v191[6];
      uint64_t v183 = *(unsigned __int16 *)&v191[8];
      uint64_t v184 = *(unsigned __int16 *)&v191[4];
      unint64_t v182 = *(unsigned __int16 *)&v191[10];
      uint64_t v180 = *(unsigned __int16 *)&v191[12];
      uint64_t v172 = *(unsigned __int16 *)&v191[14];
      LODWORD(v173) = *(unsigned __int16 *)&v191[16];
      int v171 = *(unsigned __int16 *)&v191[18];
      NSDecimal.asVariableLengthInteger()( *(unsigned int *)v191 | ((unint64_t)*(unsigned __int16 *)&v191[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v191[6] << 48),  *(unsigned __int16 *)&v191[8] | ((unint64_t)*(unsigned __int16 *)&v191[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v191[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v191[14] << 48),  *(unsigned __int16 *)&v191[16] | (*(unsigned __int16 *)&v191[18] << 16));
      uint64_t v49 = v48;
      uint64_t v50 = *(void *)(v48 + 16);
      if (v50) {
        break;
      }
      LODWORD(v30) = 0;
      uint64_t v26 = MEMORY[0x18961AFE8];
      uint64_t v54 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (v54)
      {
LABEL_31:
        if (!*(_WORD *)(v26 + 2 * v54 + 30))
        {
          do
          {
            *(void *)(v26 + 16) = v54 - 1;
            if (v54 == 1) {
              break;
            }
          }

          while (!*(unsigned __int16 *)(v26 + 28 + 2 * v54--));
        }
      }

{
  uint64_t v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  Swift::String v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  Swift::String v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v47;
  Swift::String v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  Swift::String v58;
  int v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  unint64_t v63;
  int v64;
  __int16 v65;
  __int16 v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  unint64_t v79;
  Swift::String v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  Swift::String v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v100;
  Swift::String v101;
  int v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  __int16 v111;
  int v112;
  int v113;
  __int16 v114;
  __int16 v115;
  __int16 v116;
  int v117;
  Swift::String v118;
  int v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  unint64_t v123;
  uint64_t inited;
  uint64_t v125;
  Swift::String v126;
  Swift::String v127;
  Swift::String v128;
  uint64_t v129;
  Swift::String v130;
  Swift::String v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  uint64_t *v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  id v145;
  id v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  _BYTE v152[40];
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t *v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  _BYTE v172[20];
  _BYTE v173[120];
  _BYTE v174[40];
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v177 = *MEMORY[0x1895F89C0];
  uint64_t v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = a1;
  }
  uint64_t v7 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v7 = 11LL;
  }
  specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, 0xFuLL, 15LL, v7 | (v6 << 16));
  if ((v9 & 0x100000000LL) == 0) {
    return v8;
  }
  swift_bridgeObjectRetain();
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( a1,  a2,  0x2EuLL,  0xE100000000000000LL,  0,  (uint64_t)v174);
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v174, (uint64_t)&v175);
  if (v176 != 1) {
    return v175;
  }
  id v160 = (void *)a2;
  uint64_t v10 = specialized NSDecimal.init(_:)(3.14);
  uint64_t v12 = v11;
  int v14 = v13;
  uint64_t v15 = type metadata accessor for ICUPercentNumberFormatter();
  uint64_t v16 = static ICUPercentNumberFormatter.create(for:)(v2);
  uint64_t v159 = a1;
  id v161 = (uint64_t *)v15;
  id v162 = v2;
  char v167 = v10;
  uint64_t v165 = v12;
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 16);
    char v166 = v16;
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v17, v10, v12, v14);
    uint64_t v18 = v14;
    if (!v3) {
      goto LABEL_41;
    }

    swift_release();
    uint64_t v163 = 0LL;
  }

  else
  {
    uint64_t v163 = v3;
    uint64_t v18 = v14;
  }

  while (2)
  {
    *(void *)uint64_t v173 = v167;
    uint64_t v20 = HIDWORD(v167);
    uint64_t v21 = HIWORD(v167);
    uint64_t v22 = v165;
    uint64_t v23 = v165 >> 16;
    *(void *)&v173[8] = v165;
    unint64_t v24 = HIDWORD(v165);
    uint64_t v25 = HIWORD(v165);
    uint64_t v26 = HIWORD(v18);
    *(_DWORD *)&v173[16] = v18;
    if (!_So9NSDecimala__length_getter(v173))
    {
      *(_DWORD *)uint64_t v173 = v167;
      *(_WORD *)&v173[4] = v20;
      *(_WORD *)&v173[6] = v21;
      *(_WORD *)&v173[8] = v22;
      *(_WORD *)&v173[10] = v23;
      *(_WORD *)&v173[12] = v24;
      *(_WORD *)&v173[14] = v25;
      *(_DWORD *)&v173[16] = v18;
      if (_So9NSDecimala__isNegative_getter(v173))
      {
        unsigned int v51 = 5136718LL;
        unsigned int v52 = 0xE300000000000000LL;
        goto LABEL_55;
      }
    }

    *(_DWORD *)uint64_t v173 = v167;
    *(_WORD *)&v173[4] = v20;
    *(_WORD *)&v173[6] = v21;
    *(_WORD *)&v173[8] = v22;
    *(_WORD *)&v173[10] = v23;
    *(_WORD *)&v173[12] = v24;
    *(_WORD *)&v173[14] = v25;
    *(_DWORD *)&v173[16] = v18;
    if (!_So9NSDecimala__length_getter(v173))
    {
      unsigned int v52 = 0xE100000000000000LL;
      unsigned int v51 = 48LL;
      goto LABEL_55;
    }

    uint64_t v170 = 0LL;
    int v171 = 0xE000000000000000LL;
    *(_DWORD *)uint64_t v173 = v167;
    *(_WORD *)&v173[4] = v20;
    *(_WORD *)&v173[6] = v21;
    *(_WORD *)&v173[8] = v22;
    *(_WORD *)&v173[10] = v23;
    *(_WORD *)&v173[12] = v24;
    *(_WORD *)&v173[14] = v25;
    *(_DWORD *)&v173[16] = v18;
    *(_DWORD *)uint64_t v172 = v167;
    *(_WORD *)&v172[4] = v20;
    *(_WORD *)&v172[6] = v21;
    *(_WORD *)&v172[8] = v22;
    *(_WORD *)&v172[10] = v23;
    *(_WORD *)&v172[12] = v24;
    *(_WORD *)&v172[14] = v25;
    *(_DWORD *)&v172[16] = v18;
    if ((int)_So9NSDecimala__exponent_getter(v172) >= 1)
    {
      do
      {
        LODWORD(v166) = v18;
        v27._uint64_t countAndFlagsBits = 48LL;
        v27._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v27);
        *(_DWORD *)uint64_t v172 = v167;
        *(_WORD *)&v172[4] = v20;
        *(_WORD *)&v172[6] = v21;
        *(_WORD *)&v172[8] = v22;
        *(_WORD *)&v172[10] = v23;
        *(_WORD *)&v172[12] = v24;
        *(_WORD *)&v172[14] = v25;
        *(_WORD *)&v172[16] = v166;
        *(_WORD *)&v172[18] = v26;
        unint64_t v28 = _So9NSDecimala__exponent_getter(v172);
        _So9NSDecimala__exponent_setter((v28 - 1), v173);
        LOWORD(v20) = *(_WORD *)&v173[4];
        LOWORD(v21) = *(_WORD *)&v173[6];
        uint64_t v22 = *(unsigned __int16 *)&v173[8];
        LOWORD(v23) = *(_WORD *)&v173[10];
        LOWORD(v24) = *(_WORD *)&v173[12];
        LOWORD(v25) = *(_WORD *)&v173[14];
        uint64_t v18 = *(unsigned __int16 *)&v173[16];
        uint64_t v26 = *(unsigned __int16 *)&v173[18];
        char v167 = *(unsigned int *)v173;
        *(_DWORD *)uint64_t v172 = *(_DWORD *)v173;
        *(_WORD *)&v172[4] = *(_WORD *)&v173[4];
        *(_WORD *)&v172[6] = *(_WORD *)&v173[6];
        *(_DWORD *)&v172[8] = *(_DWORD *)&v173[8];
        *(_WORD *)&v172[12] = *(_WORD *)&v173[12];
        *(_WORD *)&v172[14] = *(_WORD *)&v173[14];
        *(_WORD *)&v172[16] = *(_WORD *)&v173[16];
        *(_WORD *)&v172[18] = *(_WORD *)&v173[18];
      }

      while ((int)_So9NSDecimala__exponent_getter(v172) > 0);
    }

    *(_DWORD *)uint64_t v172 = v167;
    *(_WORD *)&v172[4] = v20;
    *(_WORD *)&v172[6] = v21;
    *(_WORD *)&v172[8] = v22;
    *(_WORD *)&v172[10] = v23;
    *(_WORD *)&v172[12] = v24;
    *(_WORD *)&v172[14] = v25;
    *(_WORD *)&v172[16] = v18;
    *(_WORD *)&v172[18] = v26;
    unint64_t v29 = _So9NSDecimala__exponent_getter(v172);
    unint64_t v30 = v167;
    if (!v29)
    {
      _So9NSDecimala__exponent_setter(1LL, v173);
      unint64_t v30 = *(unsigned int *)v173;
      LOWORD(v20) = *(_WORD *)&v173[4];
      LOWORD(v21) = *(_WORD *)&v173[6];
      uint64_t v22 = *(unsigned __int16 *)&v173[8];
      LOWORD(v23) = *(_WORD *)&v173[10];
      LOWORD(v24) = *(_WORD *)&v173[12];
      LOWORD(v25) = *(_WORD *)&v173[14];
      uint64_t v18 = *(unsigned __int16 *)&v173[16];
      uint64_t v26 = *(unsigned __int16 *)&v173[18];
    }

    char v167 = v30;
    *(_DWORD *)uint64_t v172 = v30;
    *(_WORD *)&v172[4] = v20;
    *(_WORD *)&v172[6] = v21;
    *(_WORD *)&v172[8] = v22;
    *(_WORD *)&v172[10] = v23;
    *(_WORD *)&v172[12] = v24;
    *(_WORD *)&v172[14] = v25;
    LODWORD(v166) = v18;
    *(_WORD *)&v172[16] = v18;
    LODWORD(v164) = v26;
    *(_WORD *)&v172[18] = v26;
    if (!_So9NSDecimala__length_getter(v172))
    {
      unint64_t v31 = v167;
      unint64_t v32 = v166;
      unint64_t v33 = v164;
LABEL_45:
      LODWORD(v164) = v33;
      *(_DWORD *)uint64_t v172 = v31;
      *(_WORD *)&v172[4] = v20;
      *(_WORD *)&v172[6] = v21;
      *(_WORD *)&v172[8] = v22;
      *(_WORD *)&v172[10] = v23;
      *(_WORD *)&v172[12] = v24;
      *(_WORD *)&v172[14] = v25;
      *(_WORD *)&v172[16] = v32;
      *(_WORD *)&v172[18] = v33;
      uint64_t v54 = v31;
      uint64_t v55 = v32;
      if ((int)_So9NSDecimala__exponent_getter(v172) <= 0)
      {
        char v167 = v54;
        *(_DWORD *)uint64_t v172 = v54;
        *(_WORD *)&v172[4] = v20;
        *(_WORD *)&v172[6] = v21;
        *(_WORD *)&v172[8] = v22;
        *(_WORD *)&v172[10] = v23;
        *(_WORD *)&v172[12] = v24;
        *(_WORD *)&v172[14] = v25;
        LODWORD(v166) = v55;
        *(_WORD *)&v172[16] = v55;
        *(_WORD *)&v172[18] = v164;
        unint64_t v56 = _So9NSDecimala__exponent_getter(v172);
        uint64_t v165 = v22;
        if (v56)
        {
          LOWORD(v55) = v166;
          LOWORD(v57) = v164;
          do
          {
            v58._uint64_t countAndFlagsBits = 48LL;
            v58._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v58);
            *(_DWORD *)uint64_t v172 = v167;
            *(_WORD *)&v172[4] = v20;
            *(_WORD *)&v172[6] = v21;
            *(_WORD *)&v172[8] = v165;
            *(_WORD *)&v172[10] = v23;
            *(_WORD *)&v172[12] = v24;
            *(_WORD *)&v172[14] = v25;
            *(_WORD *)&v172[16] = v55;
            *(_WORD *)&v172[18] = v57;
            int v59 = _So9NSDecimala__exponent_getter(v172);
            _So9NSDecimala__exponent_setter((v59 + 1), v173);
            LOWORD(v20) = *(_WORD *)&v173[4];
            LOWORD(v21) = *(_WORD *)&v173[6];
            LOWORD(v23) = *(_WORD *)&v173[10];
            LOWORD(v24) = *(_WORD *)&v173[12];
            LOWORD(v25) = *(_WORD *)&v173[14];
            LOWORD(v55) = *(_WORD *)&v173[16];
            Swift::String v57 = *(unsigned __int16 *)&v173[18];
            char v167 = *(unsigned int *)v173;
            *(_DWORD *)uint64_t v172 = *(_DWORD *)v173;
            *(_WORD *)&v172[4] = *(_WORD *)&v173[4];
            *(_WORD *)&v172[6] = *(_WORD *)&v173[6];
            uint64_t v165 = *(unsigned __int16 *)&v173[8];
            *(_DWORD *)&v172[8] = *(_DWORD *)&v173[8];
            *(_WORD *)&v172[12] = *(_WORD *)&v173[12];
            *(_WORD *)&v172[14] = *(_WORD *)&v173[14];
            *(_WORD *)&v172[16] = *(_WORD *)&v173[16];
            *(_WORD *)&v172[18] = *(_WORD *)&v173[18];
          }

          while (_So9NSDecimala__exponent_getter(v172));
        }

        else
        {
          LOWORD(v55) = v166;
          Swift::String v57 = v164;
        }

        LODWORD(v164) = v57;
        v60._uint64_t countAndFlagsBits = 46LL;
        v60._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v60);
        v61._uint64_t countAndFlagsBits = 48LL;
        v61._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v61);
        LOWORD(v22) = v165;
        LODWORD(v54) = v167;
      }

      *(_DWORD *)uint64_t v172 = v54;
      *(_WORD *)&v172[4] = v20;
      *(_WORD *)&v172[6] = v21;
      *(_WORD *)&v172[8] = v22;
      *(_WORD *)&v172[10] = v23;
      *(_WORD *)&v172[12] = v24;
      *(_WORD *)&v172[14] = v25;
      *(_WORD *)&v172[16] = v55;
      *(_WORD *)&v172[18] = v164;
      if (_So9NSDecimala__isNegative_getter(v172))
      {
        v62._uint64_t countAndFlagsBits = 45LL;
        v62._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v62);
      }

      *(void *)uint64_t v172 = v170;
      *(void *)&v172[8] = v171;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
      unsigned int v51 = String.init<A>(_:)();
      unsigned int v52 = v63;
      goto LABEL_55;
    }

    uint64_t v18 = -858993459;
    unint64_t v31 = v167;
    unint64_t v32 = v166;
    unint64_t v33 = v164;
    while (1)
    {
      char v167 = v31;
      LODWORD(v166) = v32;
      LODWORD(v164) = v33;
      *(_DWORD *)uint64_t v172 = v31;
      *(_WORD *)&v172[4] = v20;
      *(_WORD *)&v172[6] = v21;
      *(_WORD *)&v172[8] = v22;
      *(_WORD *)&v172[10] = v23;
      *(_WORD *)&v172[12] = v24;
      *(_WORD *)&v172[14] = v25;
      *(_WORD *)&v172[16] = v32;
      *(_WORD *)&v172[18] = v33;
      if (!_So9NSDecimala__exponent_getter(v172))
      {
        uint64_t v165 = v22;
        v34._uint64_t countAndFlagsBits = 46LL;
        v34._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v34);
        LOWORD(v22) = v165;
      }

      *(_DWORD *)uint64_t v172 = v167;
      *(_WORD *)&v172[4] = v20;
      *(_WORD *)&v172[6] = v21;
      *(_WORD *)&v172[8] = v22;
      *(_WORD *)&v172[10] = v23;
      *(_WORD *)&v172[12] = v24;
      *(_WORD *)&v172[14] = v25;
      *(_WORD *)&v172[16] = v166;
      *(_WORD *)&v172[18] = v164;
      __int16 v35 = _So9NSDecimala__exponent_getter(v172);
      _So9NSDecimala__exponent_setter((v35 + 1), v173);
      unsigned int v36 = *(unsigned int *)v173;
      Swift::String v37 = *(_WORD *)&v173[6];
      char v166 = *(unsigned __int16 *)&v173[8];
      char v167 = *(unsigned __int16 *)&v173[4];
      uint64_t v164 = *(unsigned __int16 *)&v173[12];
      uint64_t v165 = *(unsigned __int16 *)&v173[10];
      uint64_t v157 = *(unsigned __int16 *)&v173[14];
      LODWORD(v158) = *(unsigned __int16 *)&v173[16];
      BOOL v156 = *(unsigned __int16 *)&v173[18];
      NSDecimal.asVariableLengthInteger()( *(unsigned int *)v173 | ((unint64_t)*(unsigned __int16 *)&v173[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v173[6] << 48),  *(unsigned __int16 *)&v173[8] | ((unint64_t)*(unsigned __int16 *)&v173[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v173[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v173[14] << 48),  *(unsigned __int16 *)&v173[16] | (*(unsigned __int16 *)&v173[18] << 16));
      int v39 = v38;
      uint64_t v40 = *(void *)(v38 + 16);
      if (v40) {
        break;
      }
      LODWORD(v20) = 0;
      unint64_t v41 = MEMORY[0x18961AFE8];
LABEL_30:
      int v45 = *(void *)(v41 + 16);
      if (v45 && !*(_WORD *)(v41 + 2 * v45 + 30))
      {
        do
        {
          *(void *)(v41 + 16) = v45 - 1;
          if (v45 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v41 + 28 + 2 * v45--));
      }

      swift_bridgeObjectRelease();
      *(_DWORD *)uint64_t v172 = v36;
      *(_WORD *)&v172[4] = v167;
      *(_WORD *)&v172[6] = v37;
      *(_WORD *)&v172[8] = v166;
      *(_WORD *)&v172[10] = v165;
      *(_WORD *)&v172[12] = v164;
      *(_WORD *)&v172[14] = v157;
      *(_WORD *)&v172[16] = v158;
      *(_WORD *)&v172[18] = v156;
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v41);
      if (v3)
      {
LABEL_113:
        swift_bridgeObjectRelease();
        swift_unexpectedError();
        __break(1u);
LABEL_114:
        uint64_t v154 = 0;
        char v153 = 3455LL;
        v152[32] = 2;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_115;
      }

      uint64_t v163 = 0LL;
      __int16 v47 = *(void *)(v41 + 16);
      swift_bridgeObjectRelease();
      if (HIDWORD(v47)) {
        goto LABEL_114;
      }
      _So9NSDecimala__length_setter(v47, v172);
      *(_DWORD *)uint64_t v173 = *(_DWORD *)v172;
      *(_OWORD *)&v173[4] = *(_OWORD *)&v172[4];
      *(void *)uint64_t v172 = v20 | 0x30;
      v48._uint64_t countAndFlagsBits = MEMORY[0x186E1B6AC](v172, 1LL);
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      char v167 = *(unsigned int *)v173;
      LOWORD(v20) = *(_WORD *)&v173[4];
      LOWORD(v21) = *(_WORD *)&v173[6];
      uint64_t v165 = *(unsigned __int16 *)&v173[8];
      LOWORD(v23) = *(_WORD *)&v173[10];
      LOWORD(v24) = *(_WORD *)&v173[12];
      LOWORD(v25) = *(_WORD *)&v173[14];
      LODWORD(v166) = *(unsigned __int16 *)&v173[16];
      uint64_t v49 = *(unsigned __int16 *)&v173[18];
      *(_DWORD *)uint64_t v172 = *(_DWORD *)v173;
      *(_WORD *)&v172[4] = *(_WORD *)&v173[4];
      *(_WORD *)&v172[6] = *(_WORD *)&v173[6];
      *(_DWORD *)&v172[8] = *(_DWORD *)&v173[8];
      *(_WORD *)&v172[12] = *(_WORD *)&v173[12];
      *(_WORD *)&v172[14] = *(_WORD *)&v173[14];
      *(_WORD *)&v172[16] = *(_WORD *)&v173[16];
      *(_WORD *)&v172[18] = *(_WORD *)&v173[18];
      uint64_t v50 = _So9NSDecimala__length_getter(v172);
      unint64_t v32 = v166;
      unint64_t v31 = v167;
      unint64_t v33 = v49;
      uint64_t v22 = v165;
      if (!v50) {
        goto LABEL_45;
      }
    }

    uint64_t v155 = v36;
    unint64_t v41 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v41 + 16) = v40;
    bzero((void *)(v41 + 32), 2 * v40);
    uint64_t v42 = *(unsigned __int16 *)(2 * v40 + v39 + 30);
    int v43 = v42 / 0xA;
    do
    {
      *(_WORD *)(v41 + 30 + 2 * v40) = v43;
      LODWORD(v20) = v42 % 0xA;
      if (v40 == 1)
      {
        LODWORD(v36) = v155;
        goto LABEL_30;
      }

      uint64_t v42 = *(unsigned __int16 *)(v39 + 28 + 2 * v40) | ((_DWORD)v20 << 16);
      int v43 = v42 / 0xA;
      Swift::String v44 = v40 - 2;
      --v40;
    }

    while (v44 < *(void *)(v41 + 16));
    __break(1u);
LABEL_41:
    unint64_t v53 = swift_retain_n();
    MEMORY[0x1895F8858](v53);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v152, (uint64_t *)v173);
    if (!v3)
    {
      unsigned int v51 = *(void *)v173;
      unsigned int v52 = *(void *)&v173[8];
      swift_release();
      swift_release_n();
      uint64_t v163 = 0LL;
      if (!v52) {
        continue;
      }
LABEL_55:
      uint64_t v170 = v51;
      int v171 = v52;
      *(void *)uint64_t v173 = specialized NSDecimal.init(_:)(0x3039uLL);
      *(_DWORD *)&v173[8] = v64;
      *(_WORD *)&v173[12] = v65;
      *(_WORD *)&v173[14] = v66;
      *(_DWORD *)&v173[16] = v67;
      _So9NSDecimala__isNegative_setter_0(v173);
      __int16 v68 = *(unsigned int *)v173;
      char v167 = *(unsigned __int16 *)&v173[4];
      uint64_t v165 = *(unsigned __int16 *)&v173[6];
      int v69 = *(unsigned __int16 *)&v173[8];
      int v70 = *(unsigned __int16 *)&v173[10];
      Swift::String v71 = *(unsigned __int16 *)&v173[12];
      int v72 = *(unsigned __int16 *)&v173[14];
      LODWORD(v73) = *(unsigned __int16 *)&v173[16];
      Swift::String v74 = *(unsigned __int16 *)&v173[18];
      Swift::String v75 = static ICUPercentNumberFormatter.create(for:)(v162);
      if (v75)
      {
        unint64_t v76 = *(void *)(v75 + 16);
        char v166 = v75;
        type metadata accessor for ICUNumberFormatterBase.FormatResult();
        swift_initStackObject();
        uint64_t v3 = v163;
        int v77 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)( v76,  v68 | (v167 << 32) | (v165 << 48),  v69 | (v70 << 16) | (v71 << 32) | (v72 << 48),  v73 | (v74 << 16));
        if (!v3) {
          goto LABEL_87;
        }

        swift_release();
        uint64_t v163 = 0LL;
      }

      __int16 v78 = v167;
      while (1)
      {
        *(_DWORD *)uint64_t v173 = v68;
        *(_WORD *)&v173[4] = v78;
        __int16 v79 = v165;
        *(_WORD *)&v173[6] = v165;
        *(_WORD *)&v173[8] = v69;
        *(_WORD *)&v173[10] = v70;
        *(_WORD *)&v173[12] = v71;
        *(_WORD *)&v173[14] = v72;
        *(_WORD *)&v173[16] = v73;
        *(_WORD *)&v173[18] = v74;
        if (!_So9NSDecimala__length_getter(v173))
        {
          *(_DWORD *)uint64_t v173 = v68;
          *(_WORD *)&v173[4] = v167;
          *(_WORD *)&v173[6] = v79;
          *(_WORD *)&v173[8] = v69;
          *(_WORD *)&v173[10] = v70;
          *(_WORD *)&v173[12] = v71;
          *(_WORD *)&v173[14] = v72;
          *(_WORD *)&v173[16] = v73;
          *(_WORD *)&v173[18] = v74;
          if (_So9NSDecimala__isNegative_getter(v173))
          {
            uint64_t v104 = 5136718LL;
            uint64_t v105 = 0xE300000000000000LL;
            goto LABEL_102;
          }
        }

        *(_DWORD *)uint64_t v173 = v68;
        *(_WORD *)&v173[4] = v167;
        *(_WORD *)&v173[6] = v79;
        *(_WORD *)&v173[8] = v69;
        *(_WORD *)&v173[10] = v70;
        *(_WORD *)&v173[12] = v71;
        *(_WORD *)&v173[14] = v72;
        *(_WORD *)&v173[16] = v73;
        *(_WORD *)&v173[18] = v74;
        if (!_So9NSDecimala__length_getter(v173))
        {
          uint64_t v105 = 0xE100000000000000LL;
          uint64_t v104 = 48LL;
          goto LABEL_102;
        }

        uint64_t v168 = 0LL;
        int v169 = 0xE000000000000000LL;
        *(_DWORD *)uint64_t v173 = v68;
        *(_WORD *)&v173[4] = v167;
        *(_WORD *)&v173[6] = v79;
        *(_WORD *)&v173[8] = v69;
        *(_WORD *)&v173[10] = v70;
        *(_WORD *)&v173[12] = v71;
        *(_WORD *)&v173[14] = v72;
        *(_WORD *)&v173[16] = v73;
        *(_WORD *)&v173[18] = v74;
        *(_DWORD *)uint64_t v172 = v68;
        *(_WORD *)&v172[4] = v167;
        *(_WORD *)&v172[6] = v79;
        *(_WORD *)&v172[8] = v69;
        *(_WORD *)&v172[10] = v70;
        *(_WORD *)&v172[12] = v71;
        *(_WORD *)&v172[14] = v72;
        *(_WORD *)&v172[16] = v73;
        *(_WORD *)&v172[18] = v74;
        if ((int)_So9NSDecimala__exponent_getter(v172) >= 1)
        {
          do
          {
            LODWORD(v166) = v74;
            v80._uint64_t countAndFlagsBits = 48LL;
            v80._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v80);
            *(_DWORD *)uint64_t v172 = v68;
            *(_WORD *)&v172[4] = v167;
            *(_WORD *)&v172[6] = v79;
            *(_WORD *)&v172[8] = v69;
            *(_WORD *)&v172[10] = v70;
            *(_WORD *)&v172[12] = v71;
            *(_WORD *)&v172[14] = v72;
            *(_WORD *)&v172[16] = v73;
            *(_WORD *)&v172[18] = v166;
            __int16 v81 = _So9NSDecimala__exponent_getter(v172);
            _So9NSDecimala__exponent_setter((v81 - 1), v173);
            __int16 v68 = *(unsigned int *)v173;
            __int16 v79 = *(unsigned __int16 *)&v173[6];
            LOWORD(v69) = *(_WORD *)&v173[8];
            LOWORD(v70) = *(_WORD *)&v173[10];
            LOWORD(v71) = *(_WORD *)&v173[12];
            LOWORD(v72) = *(_WORD *)&v173[14];
            LOWORD(v73) = *(_WORD *)&v173[16];
            Swift::String v74 = *(unsigned __int16 *)&v173[18];
            *(_DWORD *)uint64_t v172 = *(_DWORD *)v173;
            char v167 = *(unsigned __int16 *)&v173[4];
            *(_WORD *)&v172[4] = *(_WORD *)&v173[4];
            *(_WORD *)&v172[6] = *(_WORD *)&v173[6];
            *(_DWORD *)&v172[8] = *(_DWORD *)&v173[8];
            *(_WORD *)&v172[12] = *(_WORD *)&v173[12];
            *(_WORD *)&v172[14] = *(_WORD *)&v173[14];
            *(_WORD *)&v172[16] = *(_WORD *)&v173[16];
            *(_WORD *)&v172[18] = *(_WORD *)&v173[18];
          }

          while ((int)_So9NSDecimala__exponent_getter(v172) > 0);
        }

        *(_DWORD *)uint64_t v172 = v68;
        *(_WORD *)&v172[4] = v167;
        *(_WORD *)&v172[6] = v79;
        *(_WORD *)&v172[8] = v69;
        *(_WORD *)&v172[10] = v70;
        *(_WORD *)&v172[12] = v71;
        *(_WORD *)&v172[14] = v72;
        *(_WORD *)&v172[16] = v73;
        *(_WORD *)&v172[18] = v74;
        uint64_t v82 = _So9NSDecimala__exponent_getter(v172);
        uint64_t v83 = v167;
        if (!v82)
        {
          _So9NSDecimala__exponent_setter(1LL, v173);
          __int16 v68 = *(unsigned int *)v173;
          uint64_t v83 = *(unsigned __int16 *)&v173[4];
          __int16 v79 = *(unsigned __int16 *)&v173[6];
          LOWORD(v69) = *(_WORD *)&v173[8];
          LOWORD(v70) = *(_WORD *)&v173[10];
          LOWORD(v71) = *(_WORD *)&v173[12];
          LOWORD(v72) = *(_WORD *)&v173[14];
          LOWORD(v73) = *(_WORD *)&v173[16];
          Swift::String v74 = *(unsigned __int16 *)&v173[18];
        }

        *(_DWORD *)uint64_t v172 = v68;
        uint64_t v84 = v79;
        uint64_t v85 = v83;
        *(_WORD *)&v172[4] = v83;
        uint64_t v164 = v68;
        uint64_t v165 = v84;
        *(_WORD *)&v172[6] = v84;
        *(_WORD *)&v172[8] = v69;
        *(_WORD *)&v172[10] = v70;
        *(_WORD *)&v172[12] = v71;
        *(_WORD *)&v172[14] = v72;
        *(_WORD *)&v172[16] = v73;
        LODWORD(v166) = v74;
        *(_WORD *)&v172[18] = v74;
        Swift::String v74 = -858993459;
        __int16 v68 = 10LL;
        uint64_t v86 = v85;
        uint64_t v87 = v164;
        uint64_t v88 = v165;
        uint64_t v89 = v166;
        while (1)
        {
          uint64_t v164 = v87;
          char v167 = v86;
          LODWORD(v166) = v89;
          *(_DWORD *)uint64_t v172 = v87;
          *(_WORD *)&v172[4] = v86;
          *(_WORD *)&v172[6] = v88;
          *(_WORD *)&v172[8] = v69;
          *(_WORD *)&v172[10] = v70;
          *(_WORD *)&v172[12] = v71;
          *(_WORD *)&v172[14] = v72;
          *(_WORD *)&v172[16] = v73;
          *(_WORD *)&v172[18] = v89;
          if (!_So9NSDecimala__exponent_getter(v172))
          {
            uint64_t v165 = v88;
            v90._uint64_t countAndFlagsBits = 46LL;
            v90._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v90);
            LOWORD(v88) = v165;
          }

          *(_DWORD *)uint64_t v172 = v164;
          *(_WORD *)&v172[4] = v167;
          *(_WORD *)&v172[6] = v88;
          *(_WORD *)&v172[8] = v69;
          *(_WORD *)&v172[10] = v70;
          *(_WORD *)&v172[12] = v71;
          *(_WORD *)&v172[14] = v72;
          *(_WORD *)&v172[16] = v73;
          *(_WORD *)&v172[18] = v166;
          uint64_t v91 = _So9NSDecimala__exponent_getter(v172);
          _So9NSDecimala__exponent_setter((v91 + 1), v173);
          uint64_t v92 = *(unsigned int *)v173;
          LOWORD(v69) = *(_WORD *)&v173[6];
          char v166 = *(unsigned __int16 *)&v173[8];
          char v167 = *(unsigned __int16 *)&v173[4];
          uint64_t v164 = *(unsigned __int16 *)&v173[12];
          uint64_t v165 = *(unsigned __int16 *)&v173[10];
          id v161 = (uint64_t *)*(unsigned __int16 *)&v173[14];
          LODWORD(v162) = *(unsigned __int16 *)&v173[16];
          LODWORD(v158) = *(unsigned __int16 *)&v173[18];
          NSDecimal.asVariableLengthInteger()( *(unsigned int *)v173 | ((unint64_t)*(unsigned __int16 *)&v173[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v173[6] << 48),  *(unsigned __int16 *)&v173[8] | ((unint64_t)*(unsigned __int16 *)&v173[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v173[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v173[14] << 48),  *(unsigned __int16 *)&v173[16] | (*(unsigned __int16 *)&v173[18] << 16));
          uint64_t v94 = v93;
          int v72 = *(void *)(v93 + 16);
          if (v72) {
            break;
          }
          LODWORD(v70) = 0;
          Swift::String v71 = MEMORY[0x18961AFE8];
LABEL_76:
          int v98 = *(void *)(v71 + 16);
          if (v98 && !*(_WORD *)(v71 + 2 * v98 + 30))
          {
            do
            {
              *(void *)(v71 + 16) = v98 - 1;
              if (v98 == 1) {
                break;
              }
            }

            while (!*(unsigned __int16 *)(v71 + 28 + 2 * v98--));
          }

          swift_bridgeObjectRelease();
          *(_DWORD *)uint64_t v172 = v92;
          *(_WORD *)&v172[4] = v167;
          *(_WORD *)&v172[6] = v69;
          *(_WORD *)&v172[8] = v166;
          *(_WORD *)&v172[10] = v165;
          *(_WORD *)&v172[12] = v164;
          *(_WORD *)&v172[14] = (_WORD)v161;
          *(_WORD *)&v172[16] = v162;
          *(_WORD *)&v172[18] = v158;
          NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v71);
          if (v3) {
            goto LABEL_113;
          }
          uint64_t v163 = 0LL;
          Swift::String v100 = *(void *)(v71 + 16);
          swift_bridgeObjectRelease();
          if (HIDWORD(v100)) {
            goto LABEL_114;
          }
          _So9NSDecimala__length_setter(v100, v172);
          *(_DWORD *)uint64_t v173 = *(_DWORD *)v172;
          *(_OWORD *)&v173[4] = *(_OWORD *)&v172[4];
          *(void *)uint64_t v172 = v70 | 0x30;
          v101._uint64_t countAndFlagsBits = MEMORY[0x186E1B6AC](v172, 1LL);
          String.append(_:)(v101);
          swift_bridgeObjectRelease();
          char v167 = *(unsigned __int16 *)&v173[4];
          uint64_t v164 = *(unsigned int *)v173;
          uint64_t v165 = *(unsigned __int16 *)&v173[6];
          LOWORD(v69) = *(_WORD *)&v173[8];
          LOWORD(v70) = *(_WORD *)&v173[10];
          LOWORD(v71) = *(_WORD *)&v173[12];
          LOWORD(v72) = *(_WORD *)&v173[14];
          LOWORD(v73) = *(_WORD *)&v173[16];
          int v102 = *(unsigned __int16 *)&v173[18];
          *(_DWORD *)uint64_t v172 = *(_DWORD *)v173;
          *(_WORD *)&v172[4] = *(_WORD *)&v173[4];
          *(_WORD *)&v172[6] = *(_WORD *)&v173[6];
          *(_DWORD *)&v172[8] = *(_DWORD *)&v173[8];
          *(_WORD *)&v172[12] = *(_WORD *)&v173[12];
          *(_WORD *)&v172[14] = *(_WORD *)&v173[14];
          *(_WORD *)&v172[16] = *(_WORD *)&v173[16];
          *(_WORD *)&v172[18] = *(_WORD *)&v173[18];
          uint64_t v103 = _So9NSDecimala__length_getter(v172);
          uint64_t v89 = v102;
          uint64_t v86 = v167;
          uint64_t v87 = v164;
          uint64_t v88 = v165;
          if (!v103) {
            goto LABEL_91;
          }
        }

        uint64_t v157 = v92;
        Swift::String v71 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        Swift::String v73 = v71 + 30;
        *(void *)(v71 + 16) = v72;
        bzero((void *)(v71 + 32), 2 * v72);
        uint64_t v95 = *(unsigned __int16 *)(2 * v72 + v94 + 30);
        uint64_t v96 = v95 / 0xA;
        do
        {
          *(_WORD *)(v73 + 2 * v72) = v96;
          LODWORD(v70) = v95 % 0xA;
          if (v72 == 1)
          {
            LODWORD(v92) = v157;
            goto LABEL_76;
          }

          uint64_t v95 = *(unsigned __int16 *)(v94 + 28 + 2 * v72) | ((_DWORD)v70 << 16);
          uint64_t v96 = v95 / 0xA;
          uint64_t v97 = v72 - 2;
          --v72;
        }

        while (v97 < *(void *)(v71 + 16));
        __break(1u);
LABEL_87:
        uint64_t v164 = v68;
        unint64_t v106 = v77;
        int v107 = swift_retain_n();
        id v161 = &v155;
        MEMORY[0x1895F8858](v107);
        swift_retain();
        id v162 = v106;
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v152, (uint64_t *)v173);
        uint64_t v163 = v3;
        if (v3) {
          goto LABEL_116;
        }
        uint64_t v104 = *(void *)v173;
        id v158 = *(void *)&v173[8];
        swift_release();
        swift_release_n();
        __int16 v78 = v167;
        __int16 v68 = v164;
        if (v158)
        {
          Swift::String v108 = v159;
          int v109 = v160;
          uint64_t v105 = v158;
          goto LABEL_103;
        }
      }

      LOWORD(v86) = v85;
      uint64_t v87 = v164;
      uint64_t v88 = v165;
      uint64_t v89 = v166;
LABEL_91:
      LODWORD(v166) = v89;
      *(_DWORD *)uint64_t v172 = v87;
      *(_WORD *)&v172[4] = v86;
      *(_WORD *)&v172[6] = v88;
      *(_WORD *)&v172[8] = v69;
      *(_WORD *)&v172[10] = v70;
      *(_WORD *)&v172[12] = v71;
      *(_WORD *)&v172[14] = v72;
      *(_WORD *)&v172[16] = v73;
      *(_WORD *)&v172[18] = v89;
      uint64_t v110 = v87;
      uint64_t v111 = v86;
      uint64_t v112 = _So9NSDecimala__exponent_getter(v172);
      unsigned int v113 = v110;
      unsigned int v114 = v111;
      unint64_t v115 = v166;
      if (v112 <= 0)
      {
        uint64_t v164 = v110;
        *(_DWORD *)uint64_t v172 = v110;
        uint64_t v116 = v114;
        *(_WORD *)&v172[4] = v114;
        *(_WORD *)&v172[6] = v88;
        *(_WORD *)&v172[8] = v69;
        *(_WORD *)&v172[10] = v70;
        *(_WORD *)&v172[12] = v71;
        *(_WORD *)&v172[14] = v72;
        *(_WORD *)&v172[16] = v73;
        *(_WORD *)&v172[18] = v166;
        unint64_t v117 = _So9NSDecimala__exponent_getter(v172);
        uint64_t v165 = v88;
        if (v117)
        {
          unint64_t v115 = v166;
          do
          {
            v118._uint64_t countAndFlagsBits = 48LL;
            v118._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v118);
            *(_DWORD *)uint64_t v172 = v164;
            *(_WORD *)&v172[4] = v116;
            *(_WORD *)&v172[6] = v165;
            *(_WORD *)&v172[8] = v69;
            *(_WORD *)&v172[10] = v70;
            *(_WORD *)&v172[12] = v71;
            *(_WORD *)&v172[14] = v72;
            *(_WORD *)&v172[16] = v73;
            *(_WORD *)&v172[18] = v115;
            Swift::String v119 = _So9NSDecimala__exponent_getter(v172);
            _So9NSDecimala__exponent_setter((v119 + 1), v173);
            uint64_t v116 = *(_WORD *)&v173[4];
            LOWORD(v69) = *(_WORD *)&v173[8];
            LOWORD(v70) = *(_WORD *)&v173[10];
            LOWORD(v71) = *(_WORD *)&v173[12];
            LOWORD(v72) = *(_WORD *)&v173[14];
            LOWORD(v73) = *(_WORD *)&v173[16];
            unint64_t v115 = *(_WORD *)&v173[18];
            uint64_t v164 = *(unsigned int *)v173;
            uint64_t v165 = *(unsigned __int16 *)&v173[6];
            *(_DWORD *)uint64_t v172 = *(_DWORD *)v173;
            *(_WORD *)&v172[4] = *(_WORD *)&v173[4];
            *(_WORD *)&v172[6] = *(_WORD *)&v173[6];
            *(_DWORD *)&v172[8] = *(_DWORD *)&v173[8];
            *(_WORD *)&v172[12] = *(_WORD *)&v173[12];
            *(_WORD *)&v172[14] = *(_WORD *)&v173[14];
            *(_WORD *)&v172[16] = *(_WORD *)&v173[16];
            *(_WORD *)&v172[18] = *(_WORD *)&v173[18];
          }

          while (_So9NSDecimala__exponent_getter(v172));
        }

        else
        {
          unint64_t v115 = v166;
        }

        v120._uint64_t countAndFlagsBits = 46LL;
        v120._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v120);
        v121._uint64_t countAndFlagsBits = 48LL;
        v121._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v121);
        unsigned int v113 = v164;
        LOWORD(v88) = v165;
      }

      else
      {
        uint64_t v116 = v114;
      }

      *(_DWORD *)uint64_t v172 = v113;
      *(_WORD *)&v172[4] = v116;
      *(_WORD *)&v172[6] = v88;
      *(_WORD *)&v172[8] = v69;
      *(_WORD *)&v172[10] = v70;
      *(_WORD *)&v172[12] = v71;
      *(_WORD *)&v172[14] = v72;
      *(_WORD *)&v172[16] = v73;
      *(_WORD *)&v172[18] = v115;
      if (_So9NSDecimala__isNegative_getter(v172))
      {
        v122._uint64_t countAndFlagsBits = 45LL;
        v122._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v122);
      }

      *(void *)uint64_t v172 = v168;
      *(void *)&v172[8] = v169;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
      uint64_t v104 = String.init<A>(_:)();
      uint64_t v105 = v123;
LABEL_102:
      Swift::String v108 = v159;
      int v109 = v160;
LABEL_103:
      *(void *)uint64_t v172 = v104;
      *(void *)&v172[8] = v105;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183720D90;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(inited + 40) = v125;
      *(void *)uint64_t v173 = 0LL;
      *(void *)&v173[8] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(83LL);
      v126._uint64_t countAndFlagsBits = 0x7020746F6E6E6143LL;
      v126._unint64_t object = (void *)0xED00002065737261LL;
      String.append(_:)(v126);
      v127._uint64_t countAndFlagsBits = v108;
      v127._unint64_t object = v109;
      String.append(_:)(v127);
      v128._unint64_t object = (void *)0x80000001839CDF00LL;
      v128._uint64_t countAndFlagsBits = 0xD000000000000039LL;
      String.append(_:)(v128);
      int v129 = MEMORY[0x189617FA8];
      _print_unlocked<A, B>(_:_:)();
      v130._uint64_t countAndFlagsBits = 0x2220726F2022LL;
      v130._unint64_t object = (void *)0xE600000000000000LL;
      String.append(_:)(v130);
      _print_unlocked<A, B>(_:_:)();
      v131._uint64_t countAndFlagsBits = 34LL;
      v131._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v131);
      __int16 v132 = *(void *)v173;
      Swift::String v133 = *(void *)&v173[8];
      *(void *)(inited + 72) = v129;
      *(void *)(inited + 48) = v132;
      *(void *)(inited + 56) = v133;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      int v134 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(inited + 32, (uint64_t)v173);
      Swift::String v135 = *(void *)v173;
      Swift::String v136 = *(void *)&v173[8];
      swift_retain();
      Swift::String v137 = specialized __RawDictionaryStorage.find<A>(_:)(v135, v136);
      if ((v138 & 1) != 0)
      {
        __break(1u);
      }

      else
      {
        v134[(v137 >> 6) + 8] |= 1LL << v137;
        uint64_t v139 = (uint64_t *)(v134[6] + 16 * v137);
        *uint64_t v139 = v135;
        v139[1] = v136;
        outlined init with take of Any(&v173[16], (_OWORD *)(v134[7] + 32 * v137));
        uint64_t v140 = v134[2];
        Swift::String v141 = __OFADD__(v140, 1LL);
        Swift::String v142 = v140 + 1;
        if (!v141)
        {
          v134[2] = v142;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          Swift::String v143 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v144 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          Swift::String v145 = objc_msgSend(v143, sel_initWithDomain_code_userInfo_, v144, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          Swift::String v146 = objc_msgSend(v145, sel_domain);
          uint64_t v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
          uint64_t v149 = v148;

          if (v147 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
            && v149 == v150)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_109;
          }

          uint64_t v151 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v151 & 1) != 0)
          {
LABEL_109:
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v8;
          }

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  Swift::String v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  Swift::String v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v47;
  Swift::String v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  Swift::String v58;
  int v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  unint64_t v63;
  int v64;
  __int16 v65;
  __int16 v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  unint64_t v79;
  Swift::String v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  Swift::String v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v100;
  Swift::String v101;
  int v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  void *v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  __int16 v113;
  int v114;
  int v115;
  Swift::String v116;
  int v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  unint64_t v121;
  uint64_t inited;
  uint64_t v123;
  Swift::String v124;
  Swift::String v125;
  Swift::String v126;
  uint64_t v127;
  Swift::String v128;
  Swift::String v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t *v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  id v143;
  id v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  _BYTE v150[40];
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  void *v159;
  void *v160;
  void *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  _BYTE v170[20];
  _BYTE v171[120];
  _BYTE v172[40];
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v4 = v2;
  __int128 v175 = *MEMORY[0x1895F89C0];
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = a1;
  }
  uint64_t v8 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v8 = 11LL;
  }
  specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, 0xFuLL, 15LL, v8 | (v7 << 16));
  if ((v10 & 0x100000000LL) == 0) {
    return v9;
  }
  swift_bridgeObjectRetain();
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( a1,  a2,  0x2EuLL,  0xE100000000000000LL,  0,  (uint64_t)v172);
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v172, (uint64_t)&v173);
  if (v174 != 1) {
    return v173;
  }
  uint64_t v159 = (void *)a2;
  uint64_t v11 = specialized NSDecimal.init(_:)(3.14);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v16 = specialized static ICUCurrencyNumberFormatter.create(for:)(v4);
  id v158 = a1;
  id v160 = v4;
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    uint64_t v18 = v17;
    uint64_t v19 = v11;
    uint64_t v163 = v13;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v18, v11, v13, v15);
    if (!v3) {
      goto LABEL_42;
    }

    swift_release();
    id v161 = 0LL;
LABEL_10:
    uint64_t v13 = v163;
  }

  else
  {
    uint64_t v19 = v11;
    id v161 = v3;
  }

  *(void *)int v171 = v19;
  uint64_t v21 = HIDWORD(v19);
  uint64_t v165 = v19;
  uint64_t v22 = HIWORD(v19);
  uint64_t v23 = v13 >> 16;
  *(void *)&v171[8] = v13;
  unint64_t v24 = HIDWORD(v13);
  uint64_t v25 = HIWORD(v13);
  uint64_t v26 = HIWORD(v15);
  *(_DWORD *)&v171[16] = v15;
  if (!_So9NSDecimala__length_getter(v171))
  {
    *(_DWORD *)int v171 = v165;
    *(_WORD *)&v171[4] = v21;
    *(_WORD *)&v171[6] = v22;
    *(void *)&v171[8] = v13;
    *(_DWORD *)&v171[16] = v15;
    if (_So9NSDecimala__isNegative_getter(v171))
    {
      unsigned int v51 = 5136718LL;
      unsigned int v52 = 0xE300000000000000LL;
      goto LABEL_56;
    }
  }

  *(_DWORD *)int v171 = v165;
  *(_WORD *)&v171[4] = v21;
  *(_WORD *)&v171[6] = v22;
  *(void *)&v171[8] = v13;
  *(_DWORD *)&v171[16] = v15;
  if (!_So9NSDecimala__length_getter(v171))
  {
    unsigned int v52 = 0xE100000000000000LL;
    unsigned int v51 = 48LL;
    goto LABEL_56;
  }

  uint64_t v168 = 0LL;
  int v169 = 0xE000000000000000LL;
  *(_DWORD *)int v171 = v165;
  *(_WORD *)&v171[4] = v21;
  *(_WORD *)&v171[6] = v22;
  *(void *)&v171[8] = v13;
  *(_DWORD *)&v171[16] = v15;
  *(_DWORD *)uint64_t v170 = v165;
  *(_WORD *)&v170[4] = v21;
  *(_WORD *)&v170[6] = v22;
  *(void *)&v170[8] = v13;
  *(_DWORD *)&v170[16] = v15;
  if ((int)_So9NSDecimala__exponent_getter(v170) >= 1)
  {
    do
    {
      LODWORD(v164) = v15;
      v27._uint64_t countAndFlagsBits = 48LL;
      v27._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v27);
      *(_DWORD *)uint64_t v170 = v165;
      *(_WORD *)&v170[4] = v21;
      *(_WORD *)&v170[6] = v22;
      *(_WORD *)&v170[8] = v13;
      *(_WORD *)&v170[10] = v23;
      *(_WORD *)&v170[12] = v24;
      *(_WORD *)&v170[14] = v25;
      *(_WORD *)&v170[16] = v164;
      *(_WORD *)&v170[18] = v26;
      unint64_t v28 = _So9NSDecimala__exponent_getter(v170);
      _So9NSDecimala__exponent_setter((v28 - 1), v171);
      LOWORD(v21) = *(_WORD *)&v171[4];
      LOWORD(v22) = *(_WORD *)&v171[6];
      uint64_t v13 = *(unsigned __int16 *)&v171[8];
      LOWORD(v23) = *(_WORD *)&v171[10];
      LOWORD(v24) = *(_WORD *)&v171[12];
      LOWORD(v25) = *(_WORD *)&v171[14];
      uint64_t v15 = *(unsigned __int16 *)&v171[16];
      uint64_t v26 = *(unsigned __int16 *)&v171[18];
      uint64_t v165 = *(unsigned int *)v171;
      *(_DWORD *)uint64_t v170 = *(_DWORD *)v171;
      *(_WORD *)&v170[4] = *(_WORD *)&v171[4];
      *(_WORD *)&v170[6] = *(_WORD *)&v171[6];
      *(_WORD *)&v170[8] = *(_WORD *)&v171[8];
      *(_WORD *)&v170[10] = *(_WORD *)&v171[10];
      *(_WORD *)&v170[12] = *(_WORD *)&v171[12];
      *(_WORD *)&v170[14] = *(_WORD *)&v171[14];
      *(_WORD *)&v170[16] = *(_WORD *)&v171[16];
      *(_WORD *)&v170[18] = *(_WORD *)&v171[18];
    }

    while ((int)_So9NSDecimala__exponent_getter(v170) > 0);
  }

  *(_DWORD *)uint64_t v170 = v165;
  *(_WORD *)&v170[4] = v21;
  *(_WORD *)&v170[6] = v22;
  *(_WORD *)&v170[8] = v13;
  *(_WORD *)&v170[10] = v23;
  *(_WORD *)&v170[12] = v24;
  *(_WORD *)&v170[14] = v25;
  *(_WORD *)&v170[16] = v15;
  *(_WORD *)&v170[18] = v26;
  unint64_t v29 = _So9NSDecimala__exponent_getter(v170);
  unint64_t v30 = v165;
  if (!v29)
  {
    _So9NSDecimala__exponent_setter(1LL, v171);
    unint64_t v30 = *(unsigned int *)v171;
    LOWORD(v21) = *(_WORD *)&v171[4];
    LOWORD(v22) = *(_WORD *)&v171[6];
    uint64_t v13 = *(unsigned __int16 *)&v171[8];
    LOWORD(v23) = *(_WORD *)&v171[10];
    LOWORD(v24) = *(_WORD *)&v171[12];
    LOWORD(v25) = *(_WORD *)&v171[14];
    uint64_t v15 = *(unsigned __int16 *)&v171[16];
    uint64_t v26 = *(unsigned __int16 *)&v171[18];
  }

  uint64_t v165 = v30;
  *(_DWORD *)uint64_t v170 = v30;
  *(_WORD *)&v170[4] = v21;
  *(_WORD *)&v170[6] = v22;
  *(_WORD *)&v170[8] = v13;
  *(_WORD *)&v170[10] = v23;
  *(_WORD *)&v170[12] = v24;
  *(_WORD *)&v170[14] = v25;
  LODWORD(v164) = v15;
  *(_WORD *)&v170[16] = v15;
  LODWORD(v162) = v26;
  *(_WORD *)&v170[18] = v26;
  if (!_So9NSDecimala__length_getter(v170))
  {
    unint64_t v31 = v165;
    unint64_t v32 = v164;
    unint64_t v33 = v162;
LABEL_46:
    LODWORD(v162) = v33;
    *(_DWORD *)uint64_t v170 = v31;
    *(_WORD *)&v170[4] = v21;
    *(_WORD *)&v170[6] = v22;
    *(_WORD *)&v170[8] = v13;
    *(_WORD *)&v170[10] = v23;
    *(_WORD *)&v170[12] = v24;
    *(_WORD *)&v170[14] = v25;
    *(_WORD *)&v170[16] = v32;
    *(_WORD *)&v170[18] = v33;
    uint64_t v54 = v31;
    uint64_t v55 = v32;
    if ((int)_So9NSDecimala__exponent_getter(v170) <= 0)
    {
      uint64_t v165 = v54;
      *(_DWORD *)uint64_t v170 = v54;
      *(_WORD *)&v170[4] = v21;
      *(_WORD *)&v170[6] = v22;
      *(_WORD *)&v170[8] = v13;
      *(_WORD *)&v170[10] = v23;
      *(_WORD *)&v170[12] = v24;
      *(_WORD *)&v170[14] = v25;
      LODWORD(v164) = v55;
      *(_WORD *)&v170[16] = v55;
      *(_WORD *)&v170[18] = v162;
      unint64_t v56 = _So9NSDecimala__exponent_getter(v170);
      uint64_t v163 = v13;
      if (v56)
      {
        LOWORD(v55) = v164;
        LOWORD(v57) = v162;
        do
        {
          v58._uint64_t countAndFlagsBits = 48LL;
          v58._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v58);
          *(_DWORD *)uint64_t v170 = v165;
          *(_WORD *)&v170[4] = v21;
          *(_WORD *)&v170[6] = v22;
          *(_WORD *)&v170[8] = v163;
          *(_WORD *)&v170[10] = v23;
          *(_WORD *)&v170[12] = v24;
          *(_WORD *)&v170[14] = v25;
          *(_WORD *)&v170[16] = v55;
          *(_WORD *)&v170[18] = v57;
          int v59 = _So9NSDecimala__exponent_getter(v170);
          _So9NSDecimala__exponent_setter((v59 + 1), v171);
          LOWORD(v21) = *(_WORD *)&v171[4];
          LOWORD(v22) = *(_WORD *)&v171[6];
          LOWORD(v23) = *(_WORD *)&v171[10];
          LOWORD(v24) = *(_WORD *)&v171[12];
          LOWORD(v25) = *(_WORD *)&v171[14];
          LOWORD(v55) = *(_WORD *)&v171[16];
          Swift::String v57 = *(unsigned __int16 *)&v171[18];
          uint64_t v165 = *(unsigned int *)v171;
          *(_DWORD *)uint64_t v170 = *(_DWORD *)v171;
          *(_WORD *)&v170[4] = *(_WORD *)&v171[4];
          *(_WORD *)&v170[6] = *(_WORD *)&v171[6];
          uint64_t v163 = *(unsigned __int16 *)&v171[8];
          *(_WORD *)&v170[8] = *(_WORD *)&v171[8];
          *(_WORD *)&v170[10] = *(_WORD *)&v171[10];
          *(_WORD *)&v170[12] = *(_WORD *)&v171[12];
          *(_WORD *)&v170[14] = *(_WORD *)&v171[14];
          *(_WORD *)&v170[16] = *(_WORD *)&v171[16];
          *(_WORD *)&v170[18] = *(_WORD *)&v171[18];
        }

        while (_So9NSDecimala__exponent_getter(v170));
      }

      else
      {
        LOWORD(v55) = v164;
        Swift::String v57 = v162;
      }

      LODWORD(v162) = v57;
      v60._uint64_t countAndFlagsBits = 46LL;
      v60._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v60);
      v61._uint64_t countAndFlagsBits = 48LL;
      v61._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v61);
      LOWORD(v13) = v163;
      LODWORD(v54) = v165;
    }

    *(_DWORD *)uint64_t v170 = v54;
    *(_WORD *)&v170[4] = v21;
    *(_WORD *)&v170[6] = v22;
    *(_WORD *)&v170[8] = v13;
    *(_WORD *)&v170[10] = v23;
    *(_WORD *)&v170[12] = v24;
    *(_WORD *)&v170[14] = v25;
    *(_WORD *)&v170[16] = v55;
    *(_WORD *)&v170[18] = v162;
    if (_So9NSDecimala__isNegative_getter(v170))
    {
      v62._uint64_t countAndFlagsBits = 45LL;
      v62._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v62);
    }

    *(void *)uint64_t v170 = v168;
    *(void *)&v170[8] = v169;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    unsigned int v51 = String.init<A>(_:)();
    unsigned int v52 = v63;
    goto LABEL_56;
  }

  uint64_t v15 = -858993459;
  unint64_t v31 = v165;
  unint64_t v32 = v164;
  unint64_t v33 = v162;
  while (1)
  {
    uint64_t v165 = v31;
    LODWORD(v164) = v32;
    LODWORD(v162) = v33;
    *(_DWORD *)uint64_t v170 = v31;
    *(_WORD *)&v170[4] = v21;
    *(_WORD *)&v170[6] = v22;
    *(_WORD *)&v170[8] = v13;
    *(_WORD *)&v170[10] = v23;
    *(_WORD *)&v170[12] = v24;
    *(_WORD *)&v170[14] = v25;
    *(_WORD *)&v170[16] = v32;
    *(_WORD *)&v170[18] = v33;
    if (!_So9NSDecimala__exponent_getter(v170))
    {
      uint64_t v163 = v13;
      v34._uint64_t countAndFlagsBits = 46LL;
      v34._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v34);
      LOWORD(v13) = v163;
    }

    *(_DWORD *)uint64_t v170 = v165;
    *(_WORD *)&v170[4] = v21;
    *(_WORD *)&v170[6] = v22;
    *(_WORD *)&v170[8] = v13;
    *(_WORD *)&v170[10] = v23;
    *(_WORD *)&v170[12] = v24;
    *(_WORD *)&v170[14] = v25;
    *(_WORD *)&v170[16] = v164;
    *(_WORD *)&v170[18] = v162;
    __int16 v35 = _So9NSDecimala__exponent_getter(v170);
    _So9NSDecimala__exponent_setter((v35 + 1), v171);
    unsigned int v36 = *(unsigned int *)v171;
    Swift::String v37 = *(_WORD *)&v171[6];
    uint64_t v164 = *(unsigned __int16 *)&v171[8];
    uint64_t v165 = *(unsigned __int16 *)&v171[4];
    id v162 = *(unsigned __int16 *)&v171[12];
    uint64_t v163 = *(unsigned __int16 *)&v171[10];
    BOOL v156 = *(unsigned __int16 *)&v171[14];
    LODWORD(v157) = *(unsigned __int16 *)&v171[16];
    LODWORD(v155) = *(unsigned __int16 *)&v171[18];
    NSDecimal.asVariableLengthInteger()( *(unsigned int *)v171 | ((unint64_t)*(unsigned __int16 *)&v171[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v171[6] << 48),  *(unsigned __int16 *)&v171[8] | ((unint64_t)*(unsigned __int16 *)&v171[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v171[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v171[14] << 48),  *(unsigned __int16 *)&v171[16] | (*(unsigned __int16 *)&v171[18] << 16));
    int v39 = v38;
    uint64_t v40 = *(void *)(v38 + 16);
    if (v40) {
      break;
    }
    LODWORD(v21) = 0;
    unint64_t v41 = MEMORY[0x18961AFE8];
LABEL_31:
    int v45 = *(void *)(v41 + 16);
    if (v45 && !*(_WORD *)(v41 + 2 * v45 + 30))
    {
      do
      {
        *(void *)(v41 + 16) = v45 - 1;
        if (v45 == 1) {
          break;
        }
      }

      while (!*(unsigned __int16 *)(v41 + 28 + 2 * v45--));
    }

    swift_bridgeObjectRelease();
    *(_DWORD *)uint64_t v170 = v36;
    *(_WORD *)&v170[4] = v165;
    *(_WORD *)&v170[6] = v37;
    *(_WORD *)&v170[8] = v164;
    *(_WORD *)&v170[10] = v163;
    *(_WORD *)&v170[12] = v162;
    *(_WORD *)&v170[14] = v156;
    *(_WORD *)&v170[16] = (_WORD)v157;
    *(_WORD *)&v170[18] = v155;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v41);
    if (v3) {
      goto LABEL_115;
    }
    id v161 = 0LL;
    __int16 v47 = *(void *)(v41 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v47))
    {
LABEL_114:
      unint64_t v152 = 0;
      uint64_t v151 = 3455LL;
      v150[32] = 2;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_115:
      swift_bridgeObjectRelease();
      swift_unexpectedError();
      __break(1u);
      goto LABEL_116;
    }

    _So9NSDecimala__length_setter(v47, v170);
    *(_DWORD *)int v171 = *(_DWORD *)v170;
    *(_OWORD *)&v171[4] = *(_OWORD *)&v170[4];
    *(void *)uint64_t v170 = v21 | 0x30;
    v48._uint64_t countAndFlagsBits = MEMORY[0x186E1B6AC](v170, 1LL);
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    uint64_t v165 = *(unsigned int *)v171;
    LOWORD(v21) = *(_WORD *)&v171[4];
    LOWORD(v22) = *(_WORD *)&v171[6];
    uint64_t v163 = *(unsigned __int16 *)&v171[8];
    LOWORD(v23) = *(_WORD *)&v171[10];
    LOWORD(v24) = *(_WORD *)&v171[12];
    LOWORD(v25) = *(_WORD *)&v171[14];
    LODWORD(v164) = *(unsigned __int16 *)&v171[16];
    uint64_t v49 = *(unsigned __int16 *)&v171[18];
    *(_DWORD *)uint64_t v170 = *(_DWORD *)v171;
    *(_WORD *)&v170[4] = *(_WORD *)&v171[4];
    *(_WORD *)&v170[6] = *(_WORD *)&v171[6];
    *(_WORD *)&v170[8] = *(_WORD *)&v171[8];
    *(_WORD *)&v170[10] = *(_WORD *)&v171[10];
    *(_WORD *)&v170[12] = *(_WORD *)&v171[12];
    *(_WORD *)&v170[14] = *(_WORD *)&v171[14];
    *(_WORD *)&v170[16] = *(_WORD *)&v171[16];
    *(_WORD *)&v170[18] = *(_WORD *)&v171[18];
    uint64_t v50 = _So9NSDecimala__length_getter(v170);
    unint64_t v32 = v164;
    unint64_t v31 = v165;
    unint64_t v33 = v49;
    uint64_t v13 = v163;
    if (!v50) {
      goto LABEL_46;
    }
  }

  uint64_t v154 = v36;
  unint64_t v41 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  uint64_t v19 = v41 + 30;
  *(void *)(v41 + 16) = v40;
  bzero((void *)(v41 + 32), 2 * v40);
  uint64_t v42 = *(unsigned __int16 *)(2 * v40 + v39 + 30);
  int v43 = v42 / 0xA;
  do
  {
    *(_WORD *)(v19 + 2 * v40) = v43;
    LODWORD(v21) = v42 % 0xA;
    if (v40 == 1)
    {
      LODWORD(v36) = v154;
      goto LABEL_31;
    }

    uint64_t v42 = *(unsigned __int16 *)(v39 + 28 + 2 * v40) | ((_DWORD)v21 << 16);
    int v43 = v42 / 0xA;
    Swift::String v44 = v40 - 2;
    --v40;
  }

  while (v44 < *(void *)(v41 + 16));
  __break(1u);
LABEL_42:
  unint64_t v53 = swift_retain_n();
  MEMORY[0x1895F8858](v53);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v150, (uint64_t *)v171);
  id v161 = v3;
  if (!v3)
  {
    unsigned int v51 = *(void *)v171;
    unsigned int v52 = *(void *)&v171[8];
    swift_release();
    swift_release_n();
    if (!v52) {
      goto LABEL_10;
    }
LABEL_56:
    uint64_t v168 = v51;
    int v169 = v52;
    *(void *)int v171 = specialized NSDecimal.init(_:)(0x3039uLL);
    *(_DWORD *)&v171[8] = v64;
    *(_WORD *)&v171[12] = v65;
    *(_WORD *)&v171[14] = v66;
    *(_DWORD *)&v171[16] = v67;
    _So9NSDecimala__isNegative_setter_0(v171);
    __int16 v68 = *(unsigned int *)v171;
    uint64_t v165 = *(unsigned __int16 *)&v171[4];
    int v69 = *(unsigned __int16 *)&v171[6];
    int v70 = *(unsigned __int16 *)&v171[8];
    Swift::String v71 = *(unsigned __int16 *)&v171[10];
    int v72 = *(unsigned __int16 *)&v171[12];
    Swift::String v73 = *(unsigned __int16 *)&v171[14];
    LODWORD(v74) = *(unsigned __int16 *)&v171[16];
    Swift::String v75 = *(unsigned __int16 *)&v171[18];
    unint64_t v76 = specialized static ICUCurrencyNumberFormatter.create(for:)(v160);
    uint64_t v163 = v69;
    if (v76)
    {
      id v162 = *(void *)(v76 + 16);
      uint64_t v164 = v76;
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_initStackObject();
      uint64_t v3 = v161;
      int v77 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)( v162,  v68 | (v165 << 32) | (v69 << 48),  v70 | (v71 << 16) | (v72 << 32) | (v73 << 48),  v74 | (v75 << 16));
      if (!v3) {
        goto LABEL_88;
      }

      swift_release();
      id v161 = 0LL;
    }

    __int16 v78 = v165;
    while (1)
    {
      *(_DWORD *)int v171 = v68;
      *(_WORD *)&v171[4] = v78;
      __int16 v79 = v163;
      *(_WORD *)&v171[6] = v163;
      *(_WORD *)&v171[8] = v70;
      *(_WORD *)&v171[10] = v71;
      *(_WORD *)&v171[12] = v72;
      *(_WORD *)&v171[14] = v73;
      *(_WORD *)&v171[16] = v74;
      *(_WORD *)&v171[18] = v75;
      if (!_So9NSDecimala__length_getter(v171))
      {
        *(_DWORD *)int v171 = v68;
        *(_WORD *)&v171[4] = v165;
        *(_WORD *)&v171[6] = v79;
        *(_WORD *)&v171[8] = v70;
        *(_WORD *)&v171[10] = v71;
        *(_WORD *)&v171[12] = v72;
        *(_WORD *)&v171[14] = v73;
        *(_WORD *)&v171[16] = v74;
        *(_WORD *)&v171[18] = v75;
        if (_So9NSDecimala__isNegative_getter(v171))
        {
          uint64_t v104 = 5136718LL;
          uint64_t v105 = 0xE300000000000000LL;
          goto LABEL_103;
        }
      }

      *(_DWORD *)int v171 = v68;
      *(_WORD *)&v171[4] = v165;
      *(_WORD *)&v171[6] = v79;
      *(_WORD *)&v171[8] = v70;
      *(_WORD *)&v171[10] = v71;
      *(_WORD *)&v171[12] = v72;
      *(_WORD *)&v171[14] = v73;
      *(_WORD *)&v171[16] = v74;
      *(_WORD *)&v171[18] = v75;
      if (!_So9NSDecimala__length_getter(v171))
      {
        uint64_t v105 = 0xE100000000000000LL;
        uint64_t v104 = 48LL;
        goto LABEL_103;
      }

      char v166 = 0LL;
      char v167 = 0xE000000000000000LL;
      *(_DWORD *)int v171 = v68;
      *(_WORD *)&v171[4] = v165;
      *(_WORD *)&v171[6] = v79;
      *(_WORD *)&v171[8] = v70;
      *(_WORD *)&v171[10] = v71;
      *(_WORD *)&v171[12] = v72;
      *(_WORD *)&v171[14] = v73;
      *(_WORD *)&v171[16] = v74;
      *(_WORD *)&v171[18] = v75;
      *(_DWORD *)uint64_t v170 = v68;
      *(_WORD *)&v170[4] = v165;
      *(_WORD *)&v170[6] = v79;
      *(_WORD *)&v170[8] = v70;
      *(_WORD *)&v170[10] = v71;
      *(_WORD *)&v170[12] = v72;
      *(_WORD *)&v170[14] = v73;
      *(_WORD *)&v170[16] = v74;
      *(_WORD *)&v170[18] = v75;
      if ((int)_So9NSDecimala__exponent_getter(v170) >= 1)
      {
        do
        {
          LODWORD(v164) = v75;
          v80._uint64_t countAndFlagsBits = 48LL;
          v80._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v80);
          *(_DWORD *)uint64_t v170 = v68;
          *(_WORD *)&v170[4] = v165;
          *(_WORD *)&v170[6] = v79;
          *(_WORD *)&v170[8] = v70;
          *(_WORD *)&v170[10] = v71;
          *(_WORD *)&v170[12] = v72;
          *(_WORD *)&v170[14] = v73;
          *(_WORD *)&v170[16] = v74;
          *(_WORD *)&v170[18] = v164;
          __int16 v81 = _So9NSDecimala__exponent_getter(v170);
          _So9NSDecimala__exponent_setter((v81 - 1), v171);
          __int16 v68 = *(unsigned int *)v171;
          __int16 v79 = *(unsigned __int16 *)&v171[6];
          LOWORD(v70) = *(_WORD *)&v171[8];
          LOWORD(v71) = *(_WORD *)&v171[10];
          LOWORD(v72) = *(_WORD *)&v171[12];
          LOWORD(v73) = *(_WORD *)&v171[14];
          LOWORD(v74) = *(_WORD *)&v171[16];
          Swift::String v75 = *(unsigned __int16 *)&v171[18];
          *(_DWORD *)uint64_t v170 = *(_DWORD *)v171;
          uint64_t v165 = *(unsigned __int16 *)&v171[4];
          *(_WORD *)&v170[4] = *(_WORD *)&v171[4];
          *(_WORD *)&v170[6] = *(_WORD *)&v171[6];
          *(_WORD *)&v170[8] = *(_WORD *)&v171[8];
          *(_WORD *)&v170[10] = *(_WORD *)&v171[10];
          *(_WORD *)&v170[12] = *(_WORD *)&v171[12];
          *(_WORD *)&v170[14] = *(_WORD *)&v171[14];
          *(_WORD *)&v170[16] = *(_WORD *)&v171[16];
          *(_WORD *)&v170[18] = *(_WORD *)&v171[18];
        }

        while ((int)_So9NSDecimala__exponent_getter(v170) > 0);
      }

      *(_DWORD *)uint64_t v170 = v68;
      *(_WORD *)&v170[4] = v165;
      *(_WORD *)&v170[6] = v79;
      *(_WORD *)&v170[8] = v70;
      *(_WORD *)&v170[10] = v71;
      *(_WORD *)&v170[12] = v72;
      *(_WORD *)&v170[14] = v73;
      *(_WORD *)&v170[16] = v74;
      *(_WORD *)&v170[18] = v75;
      uint64_t v82 = _So9NSDecimala__exponent_getter(v170);
      uint64_t v83 = v165;
      if (!v82)
      {
        _So9NSDecimala__exponent_setter(1LL, v171);
        __int16 v68 = *(unsigned int *)v171;
        uint64_t v83 = *(unsigned __int16 *)&v171[4];
        __int16 v79 = *(unsigned __int16 *)&v171[6];
        LOWORD(v70) = *(_WORD *)&v171[8];
        LOWORD(v71) = *(_WORD *)&v171[10];
        LOWORD(v72) = *(_WORD *)&v171[12];
        LOWORD(v73) = *(_WORD *)&v171[14];
        LOWORD(v74) = *(_WORD *)&v171[16];
        Swift::String v75 = *(unsigned __int16 *)&v171[18];
      }

      *(_DWORD *)uint64_t v170 = v68;
      uint64_t v84 = v79;
      uint64_t v85 = v83;
      *(_WORD *)&v170[4] = v83;
      id v162 = v68;
      uint64_t v163 = v84;
      *(_WORD *)&v170[6] = v84;
      *(_WORD *)&v170[8] = v70;
      *(_WORD *)&v170[10] = v71;
      *(_WORD *)&v170[12] = v72;
      *(_WORD *)&v170[14] = v73;
      *(_WORD *)&v170[16] = v74;
      LODWORD(v164) = v75;
      *(_WORD *)&v170[18] = v75;
      Swift::String v75 = -858993459;
      __int16 v68 = 10LL;
      uint64_t v86 = v85;
      uint64_t v87 = v162;
      uint64_t v88 = v163;
      uint64_t v89 = v164;
      while (1)
      {
        id v162 = v87;
        uint64_t v165 = v86;
        LODWORD(v164) = v89;
        *(_DWORD *)uint64_t v170 = v87;
        *(_WORD *)&v170[4] = v86;
        *(_WORD *)&v170[6] = v88;
        *(_WORD *)&v170[8] = v70;
        *(_WORD *)&v170[10] = v71;
        *(_WORD *)&v170[12] = v72;
        *(_WORD *)&v170[14] = v73;
        *(_WORD *)&v170[16] = v74;
        *(_WORD *)&v170[18] = v89;
        if (!_So9NSDecimala__exponent_getter(v170))
        {
          uint64_t v163 = v88;
          v90._uint64_t countAndFlagsBits = 46LL;
          v90._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v90);
          LOWORD(v88) = v163;
        }

        *(_DWORD *)uint64_t v170 = v162;
        *(_WORD *)&v170[4] = v165;
        *(_WORD *)&v170[6] = v88;
        *(_WORD *)&v170[8] = v70;
        *(_WORD *)&v170[10] = v71;
        *(_WORD *)&v170[12] = v72;
        *(_WORD *)&v170[14] = v73;
        *(_WORD *)&v170[16] = v74;
        *(_WORD *)&v170[18] = v164;
        uint64_t v91 = _So9NSDecimala__exponent_getter(v170);
        _So9NSDecimala__exponent_setter((v91 + 1), v171);
        uint64_t v92 = *(unsigned int *)v171;
        LOWORD(v70) = *(_WORD *)&v171[6];
        uint64_t v164 = *(unsigned __int16 *)&v171[8];
        uint64_t v165 = *(unsigned __int16 *)&v171[4];
        id v162 = *(unsigned __int16 *)&v171[12];
        uint64_t v163 = *(unsigned __int16 *)&v171[10];
        uint64_t v157 = (uint64_t *)*(unsigned __int16 *)&v171[14];
        LODWORD(v160) = *(unsigned __int16 *)&v171[16];
        LODWORD(v156) = *(unsigned __int16 *)&v171[18];
        NSDecimal.asVariableLengthInteger()( *(unsigned int *)v171 | ((unint64_t)*(unsigned __int16 *)&v171[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v171[6] << 48),  *(unsigned __int16 *)&v171[8] | ((unint64_t)*(unsigned __int16 *)&v171[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v171[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v171[14] << 48),  *(unsigned __int16 *)&v171[16] | (*(unsigned __int16 *)&v171[18] << 16));
        uint64_t v94 = v93;
        Swift::String v73 = *(void *)(v93 + 16);
        if (v73) {
          break;
        }
        LODWORD(v71) = 0;
        int v72 = MEMORY[0x18961AFE8];
        int v98 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
        if (v98)
        {
LABEL_78:
          if (!*(_WORD *)(v72 + 2 * v98 + 30))
          {
            do
            {
              *(void *)(v72 + 16) = v98 - 1;
              if (v98 == 1) {
                break;
              }
            }

            while (!*(unsigned __int16 *)(v72 + 28 + 2 * v98--));
          }
        }

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal.ParseStrategy.parse(_:)( NSDecimal *__return_ptr retstr, Swift::String a2)
{
  int64_t v3 = v2;
  unint64_t object = (unint64_t)a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v65 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v56 - v12;
  uint64_t v14 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000LL) == 0) {
    uint64_t v14 = countAndFlagsBits;
  }
  uint64_t v15 = 7LL;
  if (((object >> 60) & ((countAndFlagsBits & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v15 = 11LL;
  }
  NSDecimal.ParseStrategy.parse(_:startingAt:in:)(countAndFlagsBits, object, 0xFuLL, v11, v15 | (v14 << 16), v3);
  if ((v16 & 0x100000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( countAndFlagsBits,  object,  0x2EuLL,  0xE100000000000000LL,  0,  (uint64_t)v62);
    swift_bridgeObjectRelease();
    outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v62, (uint64_t)&v63);
    if (v64 == 1)
    {
      unint64_t v59 = specialized NSDecimal.init(_:)(3.14);
      LODWORD(v60) = v17;
      WORD2(v60) = v18;
      HIWORD(v60) = v19;
      LODWORD(v61) = v20;
      uint64_t v21 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v6 + 48);
      v21(&v59, v7, v6);
      unint64_t v59 = specialized NSDecimal.init(_:)(0x3039uLL);
      LODWORD(v60) = v22;
      WORD2(v60) = v23;
      HIWORD(v60) = v24;
      LODWORD(v61) = v25;
      _So9NSDecimala__isNegative_setter_0(&v59);
      uint64_t v57 = AssociatedTypeWitness;
      v21(&v59, v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183720D90;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(inited + 40) = v27;
      unint64_t v59 = 0LL;
      unint64_t v60 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(83LL);
      v28._uint64_t countAndFlagsBits = 0x7020746F6E6E6143LL;
      v28._unint64_t object = (void *)0xED00002065737261LL;
      String.append(_:)(v28);
      v29._uint64_t countAndFlagsBits = countAndFlagsBits;
      v29._unint64_t object = (void *)object;
      String.append(_:)(v29);
      v30._unint64_t object = (void *)0x80000001839CDF00LL;
      v30._uint64_t countAndFlagsBits = 0xD000000000000039LL;
      String.append(_:)(v30);
      _print_unlocked<A, B>(_:_:)();
      v31._uint64_t countAndFlagsBits = 0x2220726F2022LL;
      v31._unint64_t object = (void *)0xE600000000000000LL;
      String.append(_:)(v31);
      _print_unlocked<A, B>(_:_:)();
      v32._uint64_t countAndFlagsBits = 34LL;
      v32._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v32);
      unint64_t v33 = v59;
      unint64_t v34 = v60;
      *(void *)(inited + 72) = MEMORY[0x189617FA8];
      *(void *)(inited + 48) = v33;
      *(void *)(inited + 56) = v34;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      __int16 v35 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v59);
      uint64_t v36 = v59;
      uint64_t v37 = v60;
      swift_retain();
      unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v37);
      if ((v39 & 1) != 0)
      {
        __break(1u);
      }

      else
      {
        v35[(v38 >> 6) + 8] |= 1LL << v38;
        uint64_t v40 = (uint64_t *)(v35[6] + 16 * v38);
        *uint64_t v40 = v36;
        v40[1] = v37;
        outlined init with take of Any(&v61, (_OWORD *)(v35[7] + 32 * v38));
        uint64_t v41 = v35[2];
        BOOL v42 = __OFADD__(v41, 1LL);
        uint64_t v43 = v41 + 1;
        if (!v42)
        {
          _OWORD v35[2] = v43;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v44 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v45 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v46 = objc_msgSend(v44, sel_initWithDomain_code_userInfo_, v45, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v47 = objc_msgSend(v46, sel_domain);
          id v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
          uint64_t v50 = v49;

          if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v50 == v51)
          {
            swift_bridgeObjectRelease_n();
            unsigned int v52 = v13;
LABEL_14:
            swift_willThrow();
            uint64_t v54 = *(void (**)(char *, uint64_t))(v58 + 8);
            uint64_t v55 = v57;
            v54(v65, v57);
            v54(v52, v55);
            return;
          }

          char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unsigned int v52 = v13;
          if ((v53 & 1) != 0) {
            goto LABEL_14;
          }
          goto LABEL_17;
        }
      }

      __break(1u);
LABEL_17:
      __break(1u);
    }
  }

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.ParseStrategy<A>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return NSDecimal.ParseStrategy.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.ParseStrategy<A>( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return NSDecimal.ParseStrategy.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.ParseStrategy<A>( uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSDecimal.ParseStrategy<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static NSDecimal.ParseStrategy.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t NSDecimal.init<A>(_:strategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 48))(&v10, a1, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v4) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( a1,  AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(a1, AssociatedTypeWitness);
  return v10;
}

uint64_t (*NSDecimal.init(_:format:lenient:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4))(void)
{
  return NSDecimal.init(_:format:lenient:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>,  type metadata accessor for NSDecimal.FormatStyle,  (uint64_t (*)(uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:));
}

{
  return NSDecimal.init(_:format:lenient:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>,  type metadata accessor for NSDecimal.FormatStyle.Percent,  (uint64_t (*)(uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:));
}

{
  return NSDecimal.init(_:format:lenient:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>,  type metadata accessor for NSDecimal.FormatStyle.Currency,  (uint64_t (*)(uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:));
}

uint64_t (*NSDecimal.init(_:format:lenient:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(uint64_t, uint64_t)))(void)
{
  int v20 = a7;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = a6;
  outlined init with copy of ICUNumberFormatter.Signature(a3, (uint64_t)v16, a6);
  v16[*(int *)(v14 + 36)] = a4;
  uint64_t v17 = v20(a1, a2);
  if (!v7) {
    a6 = (uint64_t (*)(void))v17;
  }
  outlined destroy of Any?((uint64_t)v16, a5);
  swift_bridgeObjectRelease();
  outlined destroy of ICUNumberFormatter.Signature(a3, v21);
  return a6;
}

uint64_t NSDecimal.ParseStrategy<>.init(format:lenient:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return NSDecimal.ParseStrategy<>.init(format:lenient:)( a1,  a2,  type metadata accessor for NSDecimal.FormatStyle,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>,  a3);
}

{
  return NSDecimal.ParseStrategy<>.init(format:lenient:)( a1,  a2,  type metadata accessor for NSDecimal.FormatStyle.Percent,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>,  a3);
}

{
  return NSDecimal.ParseStrategy<>.init(format:lenient:)( a1,  a2,  type metadata accessor for NSDecimal.FormatStyle.Currency,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>,  a3);
}

uint64_t NSDecimal.ParseStrategy<>.init(format:lenient:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(void)@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(a4);
  *(_BYTE *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

_DWORD *_So9NSDecimala__isNegative_setter_0(_DWORD *result)
{
  *result |= 0x1000u;
  return result;
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.ParseStrategy<A>( void *a1, uint64_t a2)
{
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDecimal.ParseStrategy<A>);
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDecimal.ParseStrategy<A>, a2);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDecimal.ParseStrategy<A>, a2);
  a1[3] = result;
  return result;
}

void base witness table accessor for Equatable in NSDecimal.ParseStrategy<A>()
{
}

uint64_t type metadata completion function for NSDecimal.ParseStrategy()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for NSDecimal.ParseStrategy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE) {
    unsigned int v6 = 254;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  int v8 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_21;
  }
  uint64_t v9 = v7 + 1;
  char v10 = 8 * (v7 + 1);
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)(a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }

  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_21;
      }
LABEL_7:
      int v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9)) {
        goto LABEL_21;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if ((_DWORD)v7 == -1) {
        return v6 + v13 + 1;
      }
      return ((uint64_t (*)(void))((char *)&loc_1831DB294 + 4 * byte_1837C0648[(v9 - 1)]))();
    }

    int v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9)) {
      goto LABEL_14;
    }
  }

void storeEnumTagSinglePayload for NSDecimal.ParseStrategy( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu) {
    unsigned int v6 = 254;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v7 = *(void *)(v5 + 64);
  size_t v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v6 < a2)
  {
    int v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X12 }

uint64_t storeEnumTagSinglePayload for NSDecimal.ParseStrategy.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1831DB52C + 4 * byte_1837C065B[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1831DB560 + 4 * byte_1837C0656[v4]))();
}

uint64_t sub_1831DB560(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831DB568(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1831DB570LL);
  }
  return result;
}

uint64_t sub_1831DB57C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1831DB584LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1831DB588(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831DB590(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in NSDecimal.ParseStrategy<A>.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in NSDecimal.ParseStrategy<A>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in NSDecimal.ParseStrategy<A>.CodingKeys()
{
}

uint64_t sub_1831DB5CC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ICULegacyNumberFormatter.Signature(0LL) - 8) + 80LL);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  }

  else
  {
    if (EnumCaseMultiPayload > 1) {
      goto LABEL_7;
    }
    uint64_t v3 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  }

  uint64_t v4 = v0 + ((v1 + 16) & ~v1) + *(int *)(v3 + 36);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
LABEL_7:
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t _expressionCompatibleValue(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for PredicateExpressions.PredicateRegex(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v38[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  int v10 = (char *)&v38[-1] - v9;
  outlined init with copy of Any(a1, (uint64_t)v49);
  outlined init with copy of Any((uint64_t)v49, (uint64_t)v44);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  if (!v48)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }

  outlined destroy of Any?((uint64_t)&v47, &demangling cache variable for type metadata for Any?);
  uint64_t v11 = MEMORY[0x189617FA8];
  if (!swift_dynamicCast())
  {
    if ((swift_dynamicCast() & 1) != 0 || (swift_dynamicCast() & 1) != 0) {
      goto LABEL_27;
    }
    if (swift_dynamicCast())
    {
      outlined consume of Data._Representation(v47, *((unint64_t *)&v47 + 1));
      goto LABEL_27;
    }

    if (swift_dynamicCast())
    {

      swift_release();
      swift_release();
      goto LABEL_27;
    }

    if ((swift_dynamicCast() & 1) != 0) {
      goto LABEL_27;
    }
    if ((swift_dynamicCast() & 1) != 0) {
      goto LABEL_27;
    }
    if ((swift_dynamicCast() & 1) != 0) {
      goto LABEL_27;
    }
    if ((swift_dynamicCast() & 1) != 0) {
      goto LABEL_27;
    }
    if ((swift_dynamicCast() & 1) != 0) {
      goto LABEL_27;
    }
    if ((swift_dynamicCast() & 1) != 0) {
      goto LABEL_27;
    }
    if ((swift_dynamicCast() & 1) != 0) {
      goto LABEL_27;
    }
    if ((swift_dynamicCast() & 1) != 0) {
      goto LABEL_27;
    }
    if ((swift_dynamicCast() & 1) != 0) {
      goto LABEL_27;
    }
    if ((swift_dynamicCast() & 1) != 0) {
      goto LABEL_27;
    }
    if ((swift_dynamicCast() & 1) != 0) {
      goto LABEL_27;
    }
    if ((swift_dynamicCast() & 1) != 0) {
      goto LABEL_27;
    }
    type metadata accessor for NSDecimal(0LL);
    type metadata accessor for NSComparisonResult(0LL);
    if (swift_dynamicCast())
    {
      uint64_t v13 = v47;
      *(void *)(a2 + 24) = MEMORY[0x189618740];
      *(void *)a2 = v13;
    }

    else if (swift_dynamicCast())
    {
      outlined init with take of PredicateExpressions.PredicateRegex((uint64_t)v10, (uint64_t)v7);
      uint64_t v14 = &v7[*(int *)(v5 + 20)];
      uint64_t v16 = *(void *)v14;
      uint64_t v15 = *((void *)v14 + 1);
      *(void *)(a2 + 24) = v11;
      *(void *)a2 = v16;
      *(void *)(a2 + 8) = v15;
      swift_bridgeObjectRetain();
      outlined destroy of PredicateExpressions.PredicateRegex((uint64_t)v7);
    }

    else
    {
      if (!swift_dynamicCast())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sequence);
        if (swift_dynamicCast())
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)v44);
          uint64_t v18 = v45;
          uint64_t v19 = v46;
          int v20 = __swift_project_boxed_opaque_existential_1(v44, v45);
          MEMORY[0x1895F8858](v20);
          *(&v37 - 4) = v18;
          *(&v37 - 3) = v19;
          *(&v37 - 2) = (uint64_t)_expressionCompatibleValue(for:);
          *(&v37 - 1) = 0LL;
          MEMORY[0x1895F8858](v21);
          *(&v37 - 4) = v18;
          *(&v37 - 3) = v19;
          *(&v37 - 2) = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> (@out Any?, @error @owned Error);
          *(&v37 - 1) = v22;
          uint64_t v23 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pypSgIsgnrzr_xSayAFGsAE_pSTRzAFRsd__sAE_pRsd_0_r_0_lIetMgnozo_Tp5( (void (*)(void *__return_ptr, char *, uint64_t *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out Any?, @error @owned Error),  (uint64_t)(&v37 - 6),  v18,  v19);
          if (!v2)
          {
            uint64_t v24 = v23;
            *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
            *(void *)a2 = v24;
          }
        }

        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyClosedRange);
          if (!swift_dynamicCast())
          {
            lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
            swift_allocError();
            *Swift::String v31 = 1;
            swift_willThrow();
            return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
          }

          outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)v44);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>);
          uint64_t v25 = swift_allocObject();
          *(_OWORD *)(v25 + 16) = xmmword_1837232D0;
          uint64_t v26 = v45;
          uint64_t v27 = v46;
          __swift_project_boxed_opaque_existential_1(v44, v45);
          (*(void (**)(void *, void *, uint64_t, uint64_t))(v27 + 8))(v42, v40, v26, v27);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
          uint64_t v28 = v43;
          Swift::String v29 = __swift_project_boxed_opaque_existential_1(v42, v43);
          uint64_t v39 = v28;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v38);
          (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v28 - 8) + 16LL))( boxed_opaque_existential_1,  v29,  v28);
          _expressionCompatibleValue(for:)(v38);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
          if (v2)
          {
            *(void *)(v25 + 16) = 0LL;
            swift_release();
          }

          else
          {
            uint64_t v32 = v45;
            uint64_t v33 = v46;
            __swift_project_boxed_opaque_existential_1(v44, v45);
            (*(void (**)(void *, void *, uint64_t, uint64_t))(v33 + 8))(v42, v40, v32, v33);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
            uint64_t v34 = v41;
            __int16 v35 = __swift_project_boxed_opaque_existential_1(v40, v41);
            uint64_t v39 = v34;
            uint64_t v36 = __swift_allocate_boxed_opaque_existential_1(v38);
            (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v34 - 8) + 16LL))(v36, v35, v34);
            _expressionCompatibleValue(for:)(v38);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
            *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
            *(void *)a2 = v25;
          }
        }

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      }

      __int128 v17 = v47;
      *(void *)(a2 + 24) = v11;
      *(_OWORD *)a2 = v17;
    }

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }

  swift_bridgeObjectRelease();
LABEL_27:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return outlined init with copy of Any(a1, a2);
}

uint64_t ClosedRange._bounds.getter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  a1[3] = v6;
  a1[4] = v7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  int v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v12(boxed_opaque_existential_1, v3, v6);
  uint64_t v9 = v3 + *(int *)(a3 + 36);
  a2[3] = v6;
  a2[4] = v7;
  int v10 = __swift_allocate_boxed_opaque_existential_1(a2);
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v12)(v10, v9, v6);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> (@out Any?, @error @owned Error)( uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( boxed_opaque_existential_1,  a1,  AssociatedTypeWitness);
  a2(v7);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

void *PredicateExpressions.Value.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *(void **)(a2 + 16);
  uint64_t v4 = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, void *))(*(v4 - 1) + 16LL))(boxed_opaque_existential_1, v2, v4);
  _expressionCompatibleValue(for:)((uint64_t)v14, (uint64_t)v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v3)
  {
    uint64_t v6 = v17;
    if (v17)
    {
      uint64_t v7 = __swift_project_boxed_opaque_existential_1(v16, v17);
      uint64_t v8 = *(void *)(v6 - 8);
      __n128 v9 = MEMORY[0x1895F8858](v7);
      uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *, __n128))(v8 + 16))(v11, v9);
      uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    uint64_t v4 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v12);
    swift_unknownObjectRelease();
  }

  return v4;
}

void *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Value<A>( uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.Value.convert(state:)(a1, a2);
  if (v2) {
    return (void *)v4;
  }
  return result;
}

void *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Variable<A>( uint64_t a1)
{
  uint64_t v3 = (void *)specialized PredicateExpressions.Variable.convert(state:)(a1);
  if (!v2)
  {
    uint64_t v1 = v3;
    id v4 = v3;
  }

  return v1;
}

id PredicateExpressions.KeyPath.convert(state:)(uint64_t a1, uint64_t a2)
{
  id v4 = v3;
  uint64_t v5 = v2;
  uint64_t v88 = a1;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v86 = a2;
  uint64_t v7 = *(void **)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v83 - v11;
  uint64_t v89 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v87 = (char *)&v83 - v14;
  __n128 v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v20 = *(void (**)(char *, uint64_t, void *, __n128))(v19 + 16);
  uint64_t v98 = v5;
  v20(v18, v5, v7, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  id v90 = v7;
  if (swift_dynamicCast())
  {
    uint64_t v85 = v6;
    uint64_t v84 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v92, (uint64_t)&v95);
    uint64_t v22 = v96;
    uint64_t v21 = v97;
    __swift_project_boxed_opaque_existential_1(&v95, v96);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v88, v22, v21);
    if (!v3)
    {
      id v31 = (id)v23;
      char v32 = v24;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
      if ((v32 & 1) != 0)
      {
        LOBYTE(v95) = 1;
        id v33 = v31;
        uint64_t v34 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        __int16 v35 = (void *)objc_opt_self();
        id v36 = objc_msgSend(v35, sel_expressionForConstantValue_, v34);
        swift_unknownObjectRelease();
        LOBYTE(v95) = 0;
        id v37 = objc_msgSend(v35, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v31 = objc_msgSend(v35, sel_expressionForConditional_trueExpression_falseExpression_, v33, v36, v37);
      }

      uint64_t AssociatedTypeWitness = v84;
      goto LABEL_18;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
    id v4 = 0LL;
    id v25 = v3;
    uint64_t AssociatedTypeWitness = v84;
    uint64_t v6 = v85;
  }

  else
  {
    uint64_t v94 = 0LL;
    __int128 v92 = 0u;
    __int128 v93 = 0u;
    outlined destroy of Any?((uint64_t)&v92, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v25 = 0LL;
  }

  *(void *)&__int128 v95 = MEMORY[0x18961AFE8];
  (*(void (**)(__int128 *, id, uint64_t))(v6 + 16))(&v95, v90, v6);
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v89 + 56))(v12, 1LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if (v25) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  uint64_t v85 = v6;
  uint64_t v26 = v89;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v12, 0LL, 1LL, AssociatedTypeWitness);
  uint64_t v27 = v87;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v87, v12, AssociatedTypeWitness);
  v91[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v91);
  (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 16))( boxed_opaque_existential_1,  v27,  AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)v91, (uint64_t)&v92);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
  if (!*((void *)&v93 + 1))
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, AssociatedTypeWitness);
    outlined destroy of Any?((uint64_t)&v92, &demangling cache variable for type metadata for Any?);
    if (v25) {
      goto LABEL_11;
    }
LABEL_10:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *Swift::String v29 = 2;
LABEL_11:
    swift_willThrow();
    return v25;
  }

  outlined init with take of Any(&v92, &v95);
  __swift_project_boxed_opaque_existential_1(&v95, v96);
  uint64_t v38 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v31 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v38);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, AssociatedTypeWitness);

LABEL_18:
  uint64_t v39 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v40)
  {
    uint64_t v41 = v39;
    BOOL v42 = v40;
    swift_bridgeObjectRelease();
    if (objc_msgSend(v31, sel_expressionType) == (id)1)
    {
      uint64_t v43 = String._bridgeToObjectiveCImpl()();
      id v44 = objc_msgSend((id)objc_opt_self(), sel_expressionForKeyPath_, v43);
LABEL_39:
      id v25 = v44;

      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return v25;
    }

    if (objc_msgSend(v31, sel_expressionType) != (id)3) {
      goto LABEL_42;
    }
    uint64_t v98 = 0LL;
    id v47 = objc_msgSend(v31, sel_keyPath);
    id v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    uint64_t v50 = v49;

    *(void *)&__int128 v95 = 64LL;
    *((void *)&v95 + 1) = 0xE100000000000000LL;
    *(void *)&__int128 v92 = v48;
    *((void *)&v92 + 1) = v50;
    if ((v50 & 0x1000000000000000LL) != 0)
    {
      id v90 = v31;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      StringProtocol._ephemeralString.getter();
      char v64 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v65 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v66 = objc_msgSend(v64, sel_rangeOfString_, v65);
      uint64_t v68 = v67;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (v66 != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        if (__OFADD__(v66, v68))
        {
          __break(1u);
          JUMPOUT(0x1831DD54CLL);
        }

        StringProtocol._toUTF16Indices(_:)();
        swift_bridgeObjectRelease();
        id v31 = v90;
        goto LABEL_42;
      }

      id v31 = v90;
    }

    else
    {
      swift_bridgeObjectRetain();
      unint64_t v51 = String.subscript.getter();
      unint64_t v53 = v52;
      uint64_t v55 = v54;
      uint64_t v57 = v56;
      swift_bridgeObjectRelease();
      v91[0] = 64LL;
      v91[1] = 0xE100000000000000LL;
      unint64_t v58 = Substring.init<A>(_:)();
      if ((v51 ^ v53) >= 0x4000 && (v58 ^ v59) >> 14)
      {
        specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v58,  v59,  v60,  v61,  0,  0,  0,  0,  0,  v51,  v53,  v55,  v57);
        char v63 = v62;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v63 & 1) == 0)
        {
LABEL_42:
          uint64_t v76 = type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSExpression);
          uint64_t v96 = v76;
          *(void *)&__int128 v95 = v31;
          int v77 = (void *)objc_opt_self();
          uint64_t v78 = String._bridgeToObjectiveCImpl()();
          id v79 = v31;
          id v80 = objc_msgSend(v77, sel__newKeyPathExpressionForString_, v78);
          swift_unknownObjectRelease();
          if (v80)
          {
            *((void *)&v93 + 1) = v76;
            *(void *)&__int128 v92 = v80;
          }

          else
          {
            __int128 v92 = 0u;
            __int128 v93 = 0u;
          }

          id v81 = objc_allocWithZone((Class)&OBJC_CLASS___NSKeyPathExpression);
          id v82 = @nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v95, &v92);
          if (!v82)
          {
            __break(1u);
            JUMPOUT(0x1831DD558LL);
          }

          id v25 = v82;

          swift_bridgeObjectRelease();
          return v25;
        }

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.KeyPath<A, B>( uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.KeyPath.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

uint64_t PredicateExpressions.PredicateEvaluate.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v190 = a1;
  unint64_t v3 = a2[2];
  uint64_t v4 = 8 * v3;
  uint64_t v196 = a2;
  if (v3 == 1)
  {
    uint64_t v177 = v168;
    uint64_t TupleTypeMetadata = *(void *)(a2[4] & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v172 = *(void *)(TupleTypeMetadata - 8);
    MEMORY[0x1895F8858](a1);
    uint64_t v189 = (char *)v168 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v9 = type metadata accessor for PredicateExpressions.Variable(0LL, AssociatedTypeWitness, v7, v8);
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    unint64_t v10 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v11 = (char *)v168 - v10;
    if (v3)
    {
      unint64_t v12 = 0LL;
      unint64_t v13 = v2[4] & 0xFFFFFFFFFFFFFFFELL;
      if (v3 < 4) {
        goto LABEL_9;
      }
      unint64_t v12 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v14 = (__int128 *)(v13 + 16);
      uint64_t v15 = v11 + 16;
      unint64_t v16 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *uint64_t v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4LL;
      }

      while (v16);
      if (v3 != v12)
      {
LABEL_9:
        unint64_t v18 = v3 - v12;
        uint64_t v19 = 8 * v12;
        int v20 = &v11[8 * v12];
        uint64_t v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)int v20 = v22;
          v20 += 8;
          --v18;
        }

        while (v18);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v172 = *(void *)(TupleTypeMetadata - 8);
    MEMORY[0x1895F8858](TupleTypeMetadata);
    uint64_t v189 = (char *)v168 - v23;
    uint64_t v192 = v168;
    uint64_t v24 = 8 * v3;
    MEMORY[0x1895F8858](v25);
    uint64_t v26 = (void *)((char *)v168 - v10);
    if (v3)
    {
      unint64_t v27 = v196[4] & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v28 = v196[6] & 0xFFFFFFFFFFFFFFFELL;
      Swift::String v29 = v26;
      uint64_t v30 = v194;
      do
      {
        v27 += 8LL;
        v28 += 8LL;
        uint64_t v31 = swift_getAssociatedTypeWitness();
        *v29++ = type metadata accessor for PredicateExpressions.Variable(255LL, v31, v32, v33);
        --v30;
      }

      while (v30);
    }

    uint64_t v177 = v168;
    unint64_t v3 = v194;
    uint64_t v9 = swift_getTupleTypeMetadata();
    uint64_t v2 = v196;
    uint64_t v4 = v24;
  }

  uint64_t v176 = v168;
  uint64_t v180 = v9;
  uint64_t v186 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v183 = (char *)v168 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v175 = v168;
  uint64_t v191 = v2[3];
  uint64_t v192 = *(void **)(v191 - 8);
  MEMORY[0x1895F8858](v35);
  id v37 = (char *)v168 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v173 = v168;
  MEMORY[0x1895F8858](v38);
  if (v3)
  {
    unint64_t v40 = v196[4] & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v41 = v196[6] & 0xFFFFFFFFFFFFFFFELL;
    BOOL v42 = (void *)((char *)v168 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v43 = v194;
    do
    {
      v40 += 8LL;
      v41 += 8LL;
      *v42++ = swift_getAssociatedTypeWitness();
      --v43;
    }

    while (v43);
  }

  uint64_t v44 = type metadata accessor for Predicate(255LL, v194, (uint64_t)v168 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL), v39);
  unint64_t v188 = (void *)type metadata accessor for Optional();
  uint64_t v187 = (void *)*(v188 - 1);
  MEMORY[0x1895F8858](v188);
  uint64_t v46 = (char *)v168 - v45;
  unint64_t v174 = v168;
  uint64_t v47 = *(void *)(v44 - 8);
  __n128 v49 = MEMORY[0x1895F8858](v48);
  unint64_t v51 = (void *)((char *)v168 - v50);
  unint64_t v52 = v192;
  uint64_t v53 = v191;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v192[2])(v37, v193, v191, v49);
  *(void *)&__int128 v202 = MEMORY[0x18961AFE8];
  uint64_t v54 = v195;
  uint64_t v55 = v196;
  (*(void (**)(__int128 *, uint64_t))(v196[5] + 16LL))(&v202, v53);
  if (v54)
  {

    ((void (*)(char *, uint64_t))v52[1])(v37, v53);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v46, 1LL, 1LL, v44);
    ((void (*)(char *, void *))v187[1])(v46, v188);
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v56 = 2;
    swift_willThrow();
    return (uint64_t)v177;
  }

  char v195 = 0LL;
  ((void (*)(char *, uint64_t))v52[1])(v37, v53);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v46, 0LL, 1LL, v44);
  uint64_t v169 = v47;
  (*(void (**)(void *, char *, uint64_t))(v47 + 32))(v51, v46, v44);
  uint64_t v58 = *(int *)(v44 + 36);
  int v171 = v51;
  (*(void (**)(char *, char *, uint64_t))(v186 + 16))(v183, (char *)v51 + v58, v180);
  uint64_t v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v172 + 16))( v189,  v193 + *((int *)v55 + 15),  TupleTypeMetadata);
  uint64_t v170 = v44;
  uint64_t v60 = v194;
  if (!v194)
  {
LABEL_92:
    uint64_t v146 = v171[3];
    uint64_t v147 = v171[4];
    uint64_t v148 = __swift_project_boxed_opaque_existential_1(v171, v146);
    __n128 v149 = MEMORY[0x1895F8858](v148);
    (*(void (**)(char *, void *, uint64_t, __n128))(v151 + 16))( (char *)v168 - ((v150 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v148,  v146,  v149);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v199, (uint64_t)&v202);
      uint64_t v152 = v203;
      uint64_t v153 = v204;
      __swift_project_boxed_opaque_existential_1(&v202, v203);
      uint64_t v154 = v195;
      uint64_t v155 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v153 + 16))(v190, v152, v153);
      BOOL v156 = v154;
      if (!v154)
      {
        id v57 = (id)v155;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v202);
        uint64_t v159 = v169;
        id v160 = v171;
        goto LABEL_111;
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v202);
      uint64_t v157 = 0LL;
      id v158 = v156;
    }

    else
    {
      uint64_t v201 = 0LL;
      __int128 v199 = 0u;
      __int128 v200 = 0u;
      outlined destroy of Any?((uint64_t)&v199, &demangling cache variable for type metadata for ConvertibleExpression?);
      id v158 = 0LL;
      uint64_t v157 = v195;
    }

    *(void *)&__int128 v202 = MEMORY[0x18961AFE8];
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(void *)(v147 + 8) + 16LL))( &v205,  &v202,  v146);
    if (v157)
    {

      uint64_t v159 = v169;
      id v160 = v171;
LABEL_101:
      if (!v158)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *id v161 = 2;
      }

      id v57 = v177;
      swift_willThrow();
      (*(void (**)(void *, uint64_t))(v159 + 8))(v160, v170);
      (*(void (**)(char *, uint64_t))(v172 + 8))(v189, TupleTypeMetadata);
      return (uint64_t)v57;
    }

    uint64_t v159 = v169;
    id v160 = v171;
    uint64_t v198 = MEMORY[0x1896184C8];
    LOBYTE(v197[0]) = v205 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v197, (uint64_t)&v199);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v197);
    if (!*((void *)&v200 + 1))
    {
      outlined destroy of Any?((uint64_t)&v199, &demangling cache variable for type metadata for Any?);
      goto LABEL_101;
    }

    outlined init with take of Any(&v199, &v202);
    __swift_project_boxed_opaque_existential_1(&v202, v203);
    uint64_t v167 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v57 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v167);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v202);

LABEL_111:
    (*(void (**)(void *, uint64_t))(v159 + 8))(v160, v170);
    (*(void (**)(char *, uint64_t))(v172 + 8))(v189, TupleTypeMetadata);
    return (uint64_t)v57;
  }

  uint64_t v61 = 0LL;
  unint64_t v179 = v55[4] & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v178 = v55[6] & 0xFFFFFFFFFFFFFFFELL;
  while (1)
  {
    char v63 = v60 == 1 ? v183 : &v183[*(int *)(v180 + 16 * v61 + 32)];
    uint64_t v64 = *(void *)(v179 + 8 * v61);
    uint64_t v65 = *(void *)(v178 + 8 * v61);
    uint64_t v192 = *(void **)v63;
    uint64_t v66 = *(void *)(*(void *)(v64 - 8) + 64LL);
    __n128 v67 = MEMORY[0x1895F8858](v59);
    uint64_t v68 = (char *)v168 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v193 = v69;
    id v70 = *(uint64_t (**)(char *, __n128))(v69 + 16);
    uint64_t v71 = v70(v68, v67);
    __n128 v72 = MEMORY[0x1895F8858](v71);
    uint64_t v196 = v68;
    ((void (*)(char *, char *, uint64_t, __n128))v70)(v68, v68, v64, v72);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    int v73 = swift_dynamicCast();
    uint64_t v191 = v61;
    if (!v73) {
      break;
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v199, (uint64_t)&v202);
    uint64_t v74 = v203;
    uint64_t v75 = v204;
    __swift_project_boxed_opaque_existential_1(&v202, v203);
    uint64_t v76 = v195;
    uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v190, v74, v75);
    if (v76)
    {
      uint64_t v187 = v168;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v202);
      unint64_t v188 = v76;
      char v195 = 0LL;
      goto LABEL_31;
    }

    id v103 = (id)v77;
    char v123 = v78;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v202);
    char v195 = 0LL;
    if ((v123 & 1) != 0)
    {
      LOBYTE(v202) = 1;
      id v124 = v103;
      uint64_t v125 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      uint64_t v126 = (void *)objc_opt_self();
      id v127 = objc_msgSend(v126, sel_expressionForConstantValue_, v125);
      swift_unknownObjectRelease();
      LOBYTE(v202) = 0;
      id v128 = objc_msgSend(v126, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      id v103 = objc_msgSend(v126, sel_expressionForConditional_trueExpression_falseExpression_, v124, v127, v128);

      uint64_t v104 = v190;
      uint64_t v105 = v192;
LABEL_37:
      uint64_t v106 = v193;
      goto LABEL_38;
    }

    uint64_t v105 = v192;
    uint64_t v106 = v193;
    uint64_t v104 = v190;
LABEL_38:
    (*(void (**)(void *, uint64_t))(v106 + 8))(v196, v64);
    id v107 = v103;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&__int128 v202 = *(void *)(v104 + 8);
    uint64_t v109 = v202;
    *(void *)(v104 + 8) = 0x8000000000000000LL;
    unint64_t v111 = specialized __RawDictionaryStorage.find<A>(_:)(v105);
    uint64_t v112 = *(void *)(v109 + 16);
    BOOL v113 = (v110 & 1) == 0;
    uint64_t v114 = v112 + v113;
    if (__OFADD__(v112, v113))
    {
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }

    char v115 = v110;
    if (*(void *)(v109 + 24) >= v114)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v116 = v109;
        if ((v110 & 1) != 0) {
          goto LABEL_22;
        }
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
        uint64_t v130 = static _DictionaryStorage.copy(original:)();
        uint64_t v116 = v130;
        if (*(void *)(v109 + 16))
        {
          int v131 = (void *)(v130 + 64);
          unint64_t v132 = (unint64_t)((1LL << *(_BYTE *)(v116 + 32)) + 63) >> 6;
          uint64_t v196 = (void *)(v109 + 64);
          int64_t v133 = 0LL;
          *(void *)(v116 + 16) = *(void *)(v109 + 16);
          uint64_t v134 = 1LL << *(_BYTE *)(v109 + 32);
          if (v134 < 64) {
            uint64_t v135 = ~(-1LL << v134);
          }
          else {
            uint64_t v135 = -1LL;
          }
          unint64_t v136 = v135 & *(void *)(v109 + 64);
          int64_t v137 = (unint64_t)(v134 + 63) >> 6;
          while (1)
          {
            if (v136)
            {
              unint64_t v138 = __clz(__rbit64(v136));
              v136 &= v136 - 1;
              unint64_t v139 = v138 | (v133 << 6);
            }

            else
            {
              BOOL v121 = __OFADD__(v133++, 1LL);
              if (v121) {
                goto LABEL_117;
              }
              if (v133 >= v137) {
                goto LABEL_89;
              }
              unint64_t v143 = v196[v133];
              if (!v143)
              {
                int64_t v144 = v133 + 1;
                if (v133 + 1 >= v137) {
                  goto LABEL_89;
                }
                unint64_t v143 = v196[v144];
                if (v143) {
                  goto LABEL_71;
                }
                int64_t v144 = v133 + 2;
                if (v133 + 2 >= v137) {
                  goto LABEL_89;
                }
                unint64_t v143 = v196[v144];
                if (v143) {
                  goto LABEL_71;
                }
                int64_t v144 = v133 + 3;
                if (v133 + 3 >= v137) {
                  goto LABEL_89;
                }
                unint64_t v143 = v196[v144];
                if (v143)
                {
LABEL_71:
                  int64_t v133 = v144;
                }

                else
                {
                  int64_t v145 = v133 + 4;
                  if (v133 + 4 >= v137) {
                    goto LABEL_88;
                  }
                  unint64_t v143 = v196[v145];
                  if (!v143)
                  {
                    int64_t v145 = v133 + 5;
                    if (v133 + 5 >= v137) {
                      goto LABEL_88;
                    }
                    unint64_t v143 = v196[v145];
                    if (!v143)
                    {
                      int64_t v145 = v133 + 6;
                      if (v133 + 6 >= v137) {
                        goto LABEL_88;
                      }
                      unint64_t v143 = v196[v145];
                      if (!v143)
                      {
                        int64_t v145 = v133 + 7;
                        if (v133 + 7 >= v137) {
                          goto LABEL_88;
                        }
                        unint64_t v143 = v196[v145];
                        if (!v143)
                        {
                          int64_t v145 = v133 + 8;
                          if (v133 + 8 >= v137)
                          {
LABEL_88:
                            uint64_t v104 = v190;
LABEL_89:
                            uint64_t v105 = v192;
                            break;
                          }

                          unint64_t v143 = v196[v145];
                          if (!v143)
                          {
                            while (1)
                            {
                              int64_t v133 = v145 + 1;
                              if (__OFADD__(v145, 1LL)) {
                                goto LABEL_118;
                              }
                              if (v133 >= v137) {
                                goto LABEL_88;
                              }
                              unint64_t v143 = v196[v133];
                              ++v145;
                              uint64_t v104 = v190;
                              if (v143) {
                                goto LABEL_72;
                              }
                            }
                          }
                        }
                      }
                    }
                  }

                  int64_t v133 = v145;
                  uint64_t v104 = v190;
                }
              }

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>( uint64_t a1, void *a2)
{
  uint64_t result = PredicateExpressions.PredicateEvaluate.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t PredicateExpressions.ExpressionEvaluate.convert(state:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v207 = a1;
  uint64_t v5 = a2[5];
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v193 = v5;
  MEMORY[0x1895F8858](v6);
  uint64_t v185 = (char *)&v178 - v7;
  uint64_t v186 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v184 = (char *)&v178 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = a2[2];
  uint64_t v12 = 8 * v11;
  unint64_t v210 = v11;
  uint64_t v183 = v9;
  uint64_t v182 = v13;
  v211 = v2;
  v209 = v3;
  if (v11 == 1)
  {
    uint64_t v192 = &v178;
    uint64_t v197 = *(void *)(a2[4] & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v187 = *(void *)(v197 - 8);
    MEMORY[0x1895F8858](v9);
    uint64_t v205 = (char *)&v178 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v18 = type metadata accessor for PredicateExpressions.Variable(0LL, AssociatedTypeWitness, v16, v17);
  }

  else
  {
    MEMORY[0x1895F8858](v9);
    unint64_t v19 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    int v20 = (char *)&v178 - v19;
    if (v11)
    {
      unint64_t v21 = 0LL;
      unint64_t v22 = a2[4] & 0xFFFFFFFFFFFFFFFELL;
      if (v11 < 4) {
        goto LABEL_9;
      }
      unint64_t v21 = v11 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v23 = (__int128 *)(v22 + 16);
      uint64_t v24 = v20 + 16;
      unint64_t v25 = v11 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v26 = *v23;
        *(v24 - 1) = *(v23 - 1);
        *uint64_t v24 = v26;
        v23 += 2;
        v24 += 2;
        v25 -= 4LL;
      }

      while (v25);
      if (v11 != v21)
      {
LABEL_9:
        unint64_t v27 = v11 - v21;
        uint64_t v28 = 8 * v21;
        Swift::String v29 = &v20[8 * v21];
        uint64_t v30 = (uint64_t *)(v22 + v28);
        do
        {
          uint64_t v31 = *v30++;
          *(void *)Swift::String v29 = v31;
          v29 += 8;
          --v27;
        }

        while (v27);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v192 = &v178;
    uint64_t v197 = TupleTypeMetadata;
    uint64_t v187 = *(void *)(TupleTypeMetadata - 8);
    MEMORY[0x1895F8858](TupleTypeMetadata);
    uint64_t v205 = (char *)&v178 - v33;
    v220 = &v178;
    MEMORY[0x1895F8858](v34);
    uint64_t v35 = (uint64_t *)((char *)&v178 - v19);
    if (v11)
    {
      unint64_t v36 = a2[4] & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v37 = a2[7] & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v38 = v35;
      uint64_t v39 = v210;
      do
      {
        v36 += 8LL;
        v37 += 8LL;
        uint64_t v40 = swift_getAssociatedTypeWitness();
        *v38++ = type metadata accessor for PredicateExpressions.Variable(255LL, v40, v41, v42);
        --v39;
      }

      while (v39);
    }

    unint64_t v11 = v210;
    uint64_t v18 = swift_getTupleTypeMetadata();
  }

  uint64_t v191 = &v178;
  uint64_t v196 = v18;
  __int128 v202 = *(uint64_t **)(v18 - 8);
  MEMORY[0x1895F8858](v18);
  __int128 v200 = (char *)&v178 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v190 = &v178;
  v220 = a2;
  uint64_t v206 = (char *)a2[3];
  uint64_t v208 = *((void *)v206 - 1);
  MEMORY[0x1895F8858](v44);
  uint64_t v46 = (char *)&v178 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v188 = &v178;
  MEMORY[0x1895F8858](v47);
  uint64_t v48 = (char *)&v178 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v11)
  {
    unint64_t v49 = v220[4] & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v50 = v220[7] & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v51 = (uint64_t *)((char *)&v178 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v52 = v210;
    do
    {
      v49 += 8LL;
      v50 += 8LL;
      *v51++ = swift_getAssociatedTypeWitness();
      --v52;
    }

    while (v52);
  }

  uint64_t v53 = type metadata accessor for Expression(255LL, v210, (uint64_t)v48, v193);
  uint64_t v204 = (uint64_t *)type metadata accessor for Optional();
  uint64_t v203 = (void (**)(void, void))*(v204 - 1);
  MEMORY[0x1895F8858](v204);
  uint64_t v55 = (char *)&v178 - v54;
  uint64_t v189 = &v178;
  uint64_t v56 = *(void *)(v53 - 8);
  __n128 v58 = MEMORY[0x1895F8858](v57);
  uint64_t v60 = (uint64_t *)((char *)&v178 - v59);
  uint64_t v61 = v208;
  uint64_t v62 = v211;
  char v63 = v206;
  (*(void (**)(char *, char *, char *, __n128))(v208 + 16))(v46, v211, v206, v58);
  *(void *)&__int128 v217 = MEMORY[0x18961AFE8];
  uint64_t v64 = v220;
  uint64_t v65 = v209;
  (*(void (**)(__int128 *, char *))(v220[6] + 16))(&v217, v63);
  if (v65)
  {

    (*(void (**)(char *, char *))(v61 + 8))(v46, v63);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v55, 1LL, 1LL, v53);
    ((void (**)(char *, uint64_t *))v203)[1](v55, v204);
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v66 = 2;
    swift_willThrow();
    return (uint64_t)v46;
  }

  v209 = 0LL;
  (*(void (**)(char *, char *))(v61 + 8))(v46, v63);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v55, 0LL, 1LL, v53);
  uint64_t v179 = v56;
  (*(void (**)(void *, char *, uint64_t))(v56 + 32))(v60, v55, v53);
  uint64_t v67 = *(int *)(v53 + 44);
  __int128 v181 = v60;
  ((void (*)(char *, char *, uint64_t))v202[2])(v200, (char *)v60 + v67, v196);
  uint64_t v68 = (*(uint64_t (**)(char *, char *, uint64_t))(v187 + 16))(v205, &v62[*((int *)v64 + 17)], v197);
  uint64_t v180 = v53;
  uint64_t v69 = v210;
  if (!v210)
  {
LABEL_92:
    uint64_t v153 = v181[3];
    uint64_t v154 = v181[4];
    uint64_t v155 = __swift_project_boxed_opaque_existential_1(v181, v153);
    __n128 v156 = MEMORY[0x1895F8858](v155);
    (*(void (**)(char *, void *, uint64_t, __n128))(v158 + 16))( (char *)&v178 - ((v157 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v155,  v153,  v156);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v214, (uint64_t)&v217);
      uint64_t v159 = v218;
      uint64_t v160 = v219;
      __swift_project_boxed_opaque_existential_1(&v217, v218);
      id v161 = v209;
      uint64_t v162 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 16))(v207, v159, v160);
      uint64_t v163 = v161;
      uint64_t v164 = MEMORY[0x18961AFE8];
      if (!v161)
      {
        uint64_t v46 = (char *)v162;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
        goto LABEL_112;
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
      uint64_t v165 = 0LL;
      char v166 = v163;
    }

    else
    {
      uint64_t v216 = 0LL;
      __int128 v214 = 0u;
      __int128 v215 = 0u;
      outlined destroy of Any?((uint64_t)&v214, &demangling cache variable for type metadata for ConvertibleExpression?);
      char v166 = 0LL;
      uint64_t v164 = MEMORY[0x18961AFE8];
      uint64_t v165 = v209;
    }

    *(void *)&__int128 v217 = v164;
    uint64_t v167 = *(void (**)(__int128 *, uint64_t))(*(void *)(v154 + 8) + 16LL);
    uint64_t v168 = v185;
    v167(&v217, v153);
    uint64_t v46 = v165;
    if (v165)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v186 + 56))(v168, 1LL, 1LL, v193);
      (*(void (**)(char *, uint64_t))(v182 + 8))(v168, v183);
      if (v166) {
        goto LABEL_102;
      }
      goto LABEL_101;
    }

    uint64_t v169 = v186;
    uint64_t v170 = v193;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v186 + 56))(v168, 0LL, 1LL, v193);
    int v171 = v168;
    uint64_t v172 = v184;
    (*(void (**)(char *, char *, uint64_t))(v169 + 32))(v184, v171, v170);
    uint64_t v213 = v170;
    uint64_t v173 = __swift_allocate_boxed_opaque_existential_1(&v212);
    (*(void (**)(uint64_t *, char *, uint64_t))(v169 + 16))(v173, v172, v170);
    _expressionCompatibleValue(for:)((uint64_t)&v212, (uint64_t)&v214);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v212);
    if (!*((void *)&v215 + 1))
    {
      (*(void (**)(char *, uint64_t))(v186 + 8))(v184, v193);
      outlined destroy of Any?((uint64_t)&v214, &demangling cache variable for type metadata for Any?);
      if (v166) {
        goto LABEL_102;
      }
LABEL_101:
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *unint64_t v174 = 2;
LABEL_102:
      swift_willThrow();
      (*(void (**)(void *, uint64_t))(v179 + 8))(v181, v180);
      (*(void (**)(char *, uint64_t))(v187 + 8))(v205, v197);
      return (uint64_t)v46;
    }

    outlined init with take of Any(&v214, &v217);
    __swift_project_boxed_opaque_existential_1(&v217, v218);
    uint64_t v177 = _bridgeAnythingToObjectiveC<A>(_:)();
    uint64_t v46 = (char *)objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v177);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v184, v193);

LABEL_112:
    (*(void (**)(void *, uint64_t))(v179 + 8))(v181, v180);
    (*(void (**)(char *, uint64_t))(v187 + 8))(v205, v197);
    return (uint64_t)v46;
  }

  uint64_t v70 = 0LL;
  unint64_t v195 = v64[4] & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v194 = v64[7] & 0xFFFFFFFFFFFFFFFELL;
  while (1)
  {
    __n128 v72 = v69 == 1 ? v200 : &v200[*(int *)(v196 + 16 * v70 + 32)];
    int v73 = *(char **)(v195 + 8 * v70);
    uint64_t v74 = *(void *)(v194 + 8 * v70);
    v220 = *(uint64_t **)v72;
    uint64_t v75 = *(void *)(*((void *)v73 - 1) + 64LL);
    __n128 v76 = MEMORY[0x1895F8858](v68);
    uint64_t v77 = (char *)&v178 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v208 = v78;
    uint64_t v79 = *(uint64_t (**)(char *, __n128))(v78 + 16);
    uint64_t v80 = v79(v77, v76);
    __n128 v81 = MEMORY[0x1895F8858](v80);
    v211 = v77;
    ((void (*)(char *, char *, char *, __n128))v79)(v77, v77, v73, v81);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    int v82 = swift_dynamicCast();
    uint64_t v206 = v73;
    if (v82)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v214, (uint64_t)&v217);
      uint64_t v83 = v218;
      uint64_t v84 = v219;
      __swift_project_boxed_opaque_existential_1(&v217, v218);
      uint64_t v85 = (void (**)(void, void))v209;
      uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v207, v83, v84);
      if (!v85)
      {
        id v108 = (id)v86;
        char v111 = v87;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
        v209 = 0LL;
        if ((v111 & 1) != 0)
        {
          LOBYTE(v217) = 1;
          id v112 = v108;
          uint64_t v113 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          uint64_t v114 = v70;
          char v115 = (void *)objc_opt_self();
          id v116 = objc_msgSend(v115, sel_expressionForConstantValue_, v113);
          swift_unknownObjectRelease();
          LOBYTE(v217) = 0;
          id v117 = objc_msgSend(v115, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          char v118 = v115;
          uint64_t v70 = v114;
          id v108 = objc_msgSend(v118, sel_expressionForConditional_trueExpression_falseExpression_, v112, v116, v117);

          int v73 = v206;
        }

        uint64_t v69 = v210;
        uint64_t v109 = v207;
        uint64_t v110 = v208;
        goto LABEL_40;
      }

      uint64_t v204 = &v178;
      uint64_t v199 = v70;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
      uint64_t v203 = v85;
      __n128 v88 = 0LL;
    }

    else
    {
      uint64_t v204 = &v178;
      uint64_t v199 = v70;
      uint64_t v216 = 0LL;
      __int128 v214 = 0u;
      __int128 v215 = 0u;
      outlined destroy of Any?((uint64_t)&v214, &demangling cache variable for type metadata for ConvertibleExpression?);
      uint64_t v203 = 0LL;
      __n128 v88 = v209;
    }

    uint64_t v89 = swift_getAssociatedTypeWitness();
    __int128 v202 = &v178;
    uint64_t v90 = *(void *)(v89 - 8);
    MEMORY[0x1895F8858](v89);
    __int128 v92 = (char *)&v178 - v91;
    uint64_t v93 = type metadata accessor for Optional();
    uint64_t v201 = &v178;
    uint64_t v94 = *(void *)(v93 - 8);
    __n128 v95 = MEMORY[0x1895F8858](v93);
    uint64_t v97 = (char *)&v178 - v96;
    *(void *)&__int128 v217 = MEMORY[0x18961AFE8];
    (*(void (**)(__int128 *, __n128))(v74 + 16))(&v217, v95);
    if (v88)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v97, 1LL, 1LL, v89);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v97, v93);
      goto LABEL_105;
    }

    (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v97, 0LL, 1LL, v89);
    (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v92, v97, v89);
    uint64_t v213 = v89;
    __n128 v98 = __swift_allocate_boxed_opaque_existential_1(&v212);
    (*(void (**)(uint64_t *, char *, uint64_t))(v90 + 16))(v98, v92, v89);
    _expressionCompatibleValue(for:)((uint64_t)&v212, (uint64_t)&v214);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v212);
    if (!*((void *)&v215 + 1)) {
      break;
    }
    v209 = 0LL;
    outlined init with take of Any(&v214, &v217);
    uint64_t v99 = v218;
    Swift::String v100 = __swift_project_boxed_opaque_existential_1(&v217, v218);
    uint64_t v198 = &v178;
    uint64_t v101 = *(void *)(v99 - 8);
    uint64_t v102 = *(void *)(v101 + 64);
    __n128 v103 = MEMORY[0x1895F8858](v100);
    unint64_t v104 = (v102 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v105 = *(void (**)(char *, __n128))(v101 + 16);
    v105((char *)&v178 - v104, v103);
    uint64_t isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    if ((isClassOrObjCExistentialType & 1) != 0)
    {
      if (v102 != 8) {
        goto LABEL_114;
      }
      uint64_t v107 = *(uint64_t *)((char *)&v178 - v104);
      swift_unknownObjectRetain();
    }

    else
    {
      uint64_t v178 = (uint64_t)&v178;
      __n128 v135 = MEMORY[0x1895F8858](isClassOrObjCExistentialType);
      ((void (*)(char *, char *, uint64_t, __n128))v105)( (char *)&v178 - v104,  (char *)&v178 - v104,  v99,  v135);
      uint64_t v107 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }

    (*(void (**)(char *, uint64_t))(v101 + 8))((char *)&v178 - v104, v99);
    id v108 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v107);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v89);

    int v73 = v206;
    uint64_t v109 = v207;
    uint64_t v69 = v210;
    uint64_t v70 = v199;
    uint64_t v110 = v208;
LABEL_40:
    (*(void (**)(char *, char *))(v110 + 8))(v211, v73);
    id v119 = v108;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&__int128 v217 = *(void *)(v109 + 8);
    uint64_t v121 = v217;
    *(void *)(v109 + 8) = 0x8000000000000000LL;
    unint64_t v123 = specialized __RawDictionaryStorage.find<A>(_:)(v220);
    uint64_t v124 = *(void *)(v121 + 16);
    BOOL v125 = (v122 & 1) == 0;
    uint64_t v126 = v124 + v125;
    if (__OFADD__(v124, v125))
    {
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }

    char v127 = v122;
    if (*(void *)(v121 + 24) >= v126)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v128 = v121;
        if ((v122 & 1) != 0) {
          goto LABEL_22;
        }
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
        uint64_t v136 = static _DictionaryStorage.copy(original:)();
        uint64_t v128 = v136;
        if (*(void *)(v121 + 16))
        {
          uint64_t v199 = v70;
          int64_t v137 = (char *)(v136 + 64);
          unint64_t v138 = (char *)(v121 + 64);
          unint64_t v139 = (unint64_t)((1LL << *(_BYTE *)(v128 + 32)) + 63) >> 6;
          uint64_t v140 = v121 + 64;
          if (v128 != v121 || v137 >= &v138[8 * v139]) {
            memmove(v137, v138, 8 * v139);
          }
          int64_t v141 = 0LL;
          *(void *)(v128 + 16) = *(void *)(v121 + 16);
          uint64_t v142 = 1LL << *(_BYTE *)(v121 + 32);
          if (v142 < 64) {
            uint64_t v143 = ~(-1LL << v142);
          }
          else {
            uint64_t v143 = -1LL;
          }
          unint64_t v144 = v143 & *(void *)(v121 + 64);
          int64_t v145 = (unint64_t)(v142 + 63) >> 6;
          while (1)
          {
            if (v144)
            {
              unint64_t v146 = __clz(__rbit64(v144));
              v144 &= v144 - 1;
              unint64_t v147 = v146 | (v141 << 6);
            }

            else
            {
              BOOL v133 = __OFADD__(v141++, 1LL);
              if (v133) {
                goto LABEL_116;
              }
              uint64_t v70 = v199;
              if (v141 >= v145)
              {
LABEL_86:
                uint64_t v109 = v207;
LABEL_87:
                uint64_t v69 = v210;
                break;
              }

              unint64_t v151 = *(void *)(v140 + 8 * v141);
              if (!v151)
              {
                int64_t v152 = v141 + 1;
                if (v141 + 1 >= v145) {
                  goto LABEL_86;
                }
                unint64_t v151 = *(void *)(v140 + 8 * v152);
                if (!v151)
                {
                  int64_t v152 = v141 + 2;
                  if (v141 + 2 >= v145) {
                    goto LABEL_86;
                  }
                  unint64_t v151 = *(void *)(v140 + 8 * v152);
                  if (!v151)
                  {
                    int64_t v152 = v141 + 3;
                    if (v141 + 3 >= v145)
                    {
                      uint64_t v109 = v207;
                      uint64_t v70 = v199;
                      goto LABEL_87;
                    }

                    unint64_t v151 = *(void *)(v140 + 8 * v152);
                    if (!v151)
                    {
                      int64_t v152 = v141 + 4;
                      if (v141 + 4 >= v145) {
                        goto LABEL_91;
                      }
                      unint64_t v151 = *(void *)(v140 + 8 * v152);
                      if (!v151)
                      {
                        int64_t v152 = v141 + 5;
                        if (v141 + 5 >= v145) {
                          goto LABEL_91;
                        }
                        unint64_t v151 = *(void *)(v140 + 8 * v152);
                        if (!v151)
                        {
                          int64_t v152 = v141 + 6;
                          if (v141 + 6 >= v145) {
                            goto LABEL_91;
                          }
                          unint64_t v151 = *(void *)(v140 + 8 * v152);
                          if (!v151)
                          {
                            int64_t v152 = v141 + 7;
                            if (v141 + 7 >= v145) {
                              goto LABEL_91;
                            }
                            unint64_t v151 = *(void *)(v140 + 8 * v152);
                            if (!v151)
                            {
                              int64_t v152 = v141 + 8;
                              if (v141 + 8 >= v145)
                              {
LABEL_91:
                                uint64_t v109 = v207;
                                uint64_t v69 = v210;
                                uint64_t v70 = v199;
                                break;
                              }

                              unint64_t v151 = *(void *)(v140 + 8 * v152);
                              if (!v151)
                              {
                                while (1)
                                {
                                  int64_t v141 = v152 + 1;
                                  if (__OFADD__(v152, 1LL)) {
                                    goto LABEL_117;
                                  }
                                  if (v141 >= v145) {
                                    goto LABEL_91;
                                  }
                                  unint64_t v151 = *(void *)(v140 + 8 * v141);
                                  ++v152;
                                  if (v151) {
                                    goto LABEL_81;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }

                int64_t v141 = v152;
              }

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>( uint64_t a1, uint64_t *a2)
{
  uint64_t result = PredicateExpressions.ExpressionEvaluate.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Conjunction<A, B>( uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.Conjunction.convert(state:)(a1, a2, (SEL *)&selRef_andPredicateWithSubpredicates_);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

char *PredicateExpressions.Conjunction.convert(state:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v46 = a3;
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v50 = *(void *)(a2 + 24);
  uint64_t v48 = *(void *)(v50 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v49 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1837C08B0;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v6, v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v17 = swift_dynamicCast();
  uint64_t v47 = a1;
  if (!v17)
  {
    uint64_t v56 = 0LL;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    outlined destroy of Any?((uint64_t)&v54, &demangling cache variable for type metadata for ConvertibleExpression?);
    unint64_t v22 = 0LL;
    goto LABEL_5;
  }

  uint64_t v51 = v16;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v54, (uint64_t)&v57);
  uint64_t v18 = v58;
  uint64_t v19 = v59;
  __swift_project_boxed_opaque_existential_1(&v57, v58);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(a1, v18, v19);
  if (v4)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
    uint64_t v5 = 0LL;
    unint64_t v22 = v4;
    uint64_t v16 = v51;
LABEL_5:
    *(void *)&__int128 v57 = MEMORY[0x18961AFE8];
    uint64_t v23 = v6;
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(void *)(a2 + 32) + 16LL))(&v60, &v57, v11);
    if (v5)
    {

LABEL_10:
      if (!v22)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *uint64_t v24 = 2;
      }

      swift_willThrow();
      *(void *)(v16 + 16) = 0LL;
      goto LABEL_13;
    }

    uint64_t v51 = v16;
    uint64_t v53 = MEMORY[0x1896184C8];
    v52[0] = v60 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v52, (uint64_t)&v54);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    if (!*((void *)&v55 + 1))
    {
      outlined destroy of Any?((uint64_t)&v54, &demangling cache variable for type metadata for Any?);
      uint64_t v16 = v51;
      goto LABEL_10;
    }

    outlined init with take of Any(&v54, &v57);
    __swift_project_boxed_opaque_existential_1(&v57, v58);
    uint64_t v28 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v26 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v28);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);

    goto LABEL_19;
  }

  id v26 = (id)v20;
  char v27 = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
  if ((v27 & 1) == 0)
  {
LABEL_19:
    LOBYTE(v57) = 1;
    id v29 = v26;
    uint64_t v30 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v31 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v30);
    swift_unknownObjectRelease();
    id v26 = objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v29,  v31,  0,  4,  0);
  }

  uint64_t v32 = v50;
  *(void *)(v51 + 32) = v26;
  uint64_t v33 = &v6[*(int *)(a2 + 52)];
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v49, v33, v32);
  if (!swift_dynamicCast())
  {
    uint64_t v56 = 0LL;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    outlined destroy of Any?((uint64_t)&v54, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(void *)&__int128 v57 = MEMORY[0x18961AFE8];
    uint64_t v23 = v33;
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(void *)(a2 + 40) + 16LL))(&v60, &v57, v32);
    uint64_t v36 = v51;
    if (v60 != 2)
    {
      uint64_t v53 = MEMORY[0x1896184C8];
      v52[0] = v60 & 1;
      _expressionCompatibleValue(for:)((uint64_t)v52, (uint64_t)&v54);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      if (*((void *)&v55 + 1))
      {
        outlined init with take of Any(&v54, &v57);
        __swift_project_boxed_opaque_existential_1(&v57, v58);
        uint64_t v41 = _bridgeAnythingToObjectiveC<A>(_:)();
        id v38 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v41);
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);

LABEL_30:
        LOBYTE(v57) = 1;
        id v42 = v38;
        uint64_t v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v44 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v43);
        swift_unknownObjectRelease();
        id v38 = objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v42,  v44,  0,  4,  0);

        goto LABEL_31;
      }

      outlined destroy of Any?((uint64_t)&v54, &demangling cache variable for type metadata for Any?);
    }

    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *unint64_t v37 = 2;
    swift_willThrow();

    *(void *)(v36 + 16) = 0LL;
LABEL_13:
    swift_release();
    return v23;
  }

  outlined init with take of any PredicateExpression<Self.Output == B1>(&v54, (uint64_t)&v57);
  uint64_t v34 = v58;
  uint64_t v35 = v59;
  __swift_project_boxed_opaque_existential_1(&v57, v58);
  id v38 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v47, v34, v35);
  char v40 = v39;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
  uint64_t v36 = v51;
  if ((v40 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_31:
  *(void *)(v36 + 40) = v38;
  *(void *)&__int128 v57 = v36;
  specialized Array._endMutation()();
  if ((unint64_t)v57 >> 62)
  {
    else {
      uint64_t v45 = v57 & 0xFFFFFFFFFFFFFF8LL;
    }
  }

  else
  {
    type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSPredicate);
    uint64_t v45 = _ContiguousArrayBuffer._asCocoaArray()();
  }

  uint64_t v23 = (char *)objc_msgSend((id)objc_opt_self(), *v46, v45);
  swift_unknownObjectRelease();
  return v23;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Disjunction<A, B>( uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.Conjunction.convert(state:)(a1, a2, (SEL *)&selRef_orPredicateWithSubpredicates_);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

void (**protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Equal<A, B>( uint64_t a1, uint64_t a2))(char *, char *, uint64_t)
{
  uint64_t result = PredicateExpressions.Equal.convert(state:)(a1, a2, 4LL);
  if (v2) {
    return (void (**)(char *, char *, uint64_t))v4;
  }
  return result;
}

void (**PredicateExpressions.Equal.convert(state:)( uint64_t a1, uint64_t a2, uint64_t a3))(char *, char *, uint64_t)
{
  uint64_t v67 = a3;
  uint64_t v5 = v4;
  uint64_t v74 = *(void *)(a2 + 24);
  uint64_t v71 = *(void *)(v74 - 8);
  MEMORY[0x1895F8858](a1);
  __n128 v72 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(v8 + 32);
  uint64_t v75 = v8;
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v78 = *(void *)(v12 - 8);
  uint64_t v79 = v12;
  MEMORY[0x1895F8858](v12);
  uint64_t v69 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v66 - v15;
  __n128 v88 = *(void (***)(char *, char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v68 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  char v21 = (char *)&v66 - v20;
  __n128 v23 = MEMORY[0x1895F8858](v22);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))( (char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v3,  v10,  v23);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v26 = swift_dynamicCast();
  uint64_t v73 = a1;
  if (v26)
  {
    uint64_t v76 = v3;
    uint64_t v77 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v82, (uint64_t)&v85);
    uint64_t v27 = v86;
    uint64_t v28 = v87;
    __swift_project_boxed_opaque_existential_1(&v85, v86);
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(a1, v27, v28);
    if (!v4)
    {
      uint64_t v36 = (void *)v29;
      char v37 = v30;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      uint64_t v32 = MEMORY[0x18961AFE8];
      if ((v37 & 1) != 0)
      {
        LOBYTE(v85) = 1;
        id v40 = v36;
        uint64_t v41 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v42 = (void *)objc_opt_self();
        id v43 = objc_msgSend(v42, sel_expressionForConstantValue_, v41);
        swift_unknownObjectRelease();
        LOBYTE(v85) = 0;
        id v44 = objc_msgSend(v42, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v38 = objc_msgSend(v42, sel_expressionForConditional_trueExpression_falseExpression_, v40, v43, v44);
      }

      else
      {
        id v38 = v36;
      }

      goto LABEL_17;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    uint64_t v5 = 0LL;
    id v31 = v4;
    uint64_t v3 = v76;
    uint64_t AssociatedTypeWitness = v77;
  }

  else
  {
    uint64_t v84 = 0LL;
    __int128 v82 = 0u;
    __int128 v83 = 0u;
    outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v31 = 0LL;
  }

  uint64_t v32 = MEMORY[0x18961AFE8];
  *(void *)&__int128 v85 = MEMORY[0x18961AFE8];
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v9 + 16))(&v85, v10, v9);
  if (!v5)
  {
    uint64_t v76 = v3;
    uint64_t v5 = v88;
    ((void (*)(char *, void, uint64_t, uint64_t))v88[7])(v16, 0LL, 1LL, AssociatedTypeWitness);
    v5[4](v21, v16, AssociatedTypeWitness);
    uint64_t v81 = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v80);
    uint64_t v35 = v5[2];
    uint64_t v77 = AssociatedTypeWitness;
    v35((char *)boxed_opaque_existential_1, v21, AssociatedTypeWitness);
    _expressionCompatibleValue(for:)((uint64_t)v80, (uint64_t)&v82);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
    if (!*((void *)&v83 + 1))
    {
      ((void (*)(char *, uint64_t))v5[1])(v21, v77);
      outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for Any?);
      if (v31) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }

    outlined init with take of Any(&v82, &v85);
    __swift_project_boxed_opaque_existential_1(&v85, v86);
    uint64_t v39 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v38 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v39);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    ((void (*)(char *, uint64_t))v5[1])(v21, v77);

LABEL_17:
    uint64_t v46 = v74;
    uint64_t v45 = v75;
    uint64_t v47 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v72, v76 + *(int *)(v75 + 60), v74);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v82, (uint64_t)&v85);
      uint64_t v48 = v86;
      uint64_t v49 = v87;
      __swift_project_boxed_opaque_existential_1(&v85, v86);
      id v56 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v47, v48, v49);
      char v58 = v57;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      if ((v58 & 1) != 0)
      {
        LOBYTE(v85) = 1;
        id v59 = v56;
        uint64_t v60 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v61 = (void *)objc_opt_self();
        id v62 = objc_msgSend(v61, sel_expressionForConstantValue_, v60);
        swift_unknownObjectRelease();
        LOBYTE(v85) = 0;
        id v63 = objc_msgSend(v61, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v56 = objc_msgSend(v61, sel_expressionForConditional_trueExpression_falseExpression_, v59, v62, v63);
      }
    }

    else
    {
      uint64_t v84 = 0LL;
      __int128 v82 = 0u;
      __int128 v83 = 0u;
      outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for ConvertibleExpression?);
      *(void *)&__int128 v85 = v32;
      uint64_t v50 = v69;
      (*(void (**)(__int128 *, uint64_t))(*(void *)(v45 + 40) + 16LL))(&v85, v46);
      uint64_t v5 = v88;
      uint64_t v51 = v77;
      ((void (*)(char *, void, uint64_t, uint64_t))v88[7])(v50, 0LL, 1LL, v77);
      uint64_t v52 = v68;
      v5[4](v68, v50, v51);
      uint64_t v81 = v51;
      uint64_t v53 = __swift_allocate_boxed_opaque_existential_1(v80);
      v5[2]((char *)v53, v52, v51);
      _expressionCompatibleValue(for:)((uint64_t)v80, (uint64_t)&v82);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
      if (!*((void *)&v83 + 1))
      {
        ((void (*)(char *, uint64_t))v5[1])(v52, v51);
        outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *__int128 v54 = 2;
        swift_willThrow();

        return v5;
      }

      outlined init with take of Any(&v82, &v85);
      __swift_project_boxed_opaque_existential_1(&v85, v86);
      uint64_t v64 = v5;
      uint64_t v65 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v56 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v65);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      ((void (*)(char *, uint64_t))v64[1])(v52, v51);
    }

    uint64_t v5 = (void (**)(char *, char *, uint64_t))objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v38,  v56,  0,  v67,  0);

    return v5;
  }

  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v88[7])(v16, 1LL, 1LL, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v16, v79);
  if (!v31)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v33 = 2;
  }

void (**protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.NotEqual<A, B>( uint64_t a1, uint64_t a2))(char *, char *, uint64_t)
{
  uint64_t result = PredicateExpressions.Equal.convert(state:)(a1, a2, 5LL);
  if (v2) {
    return (void (**)(char *, char *, uint64_t))v4;
  }
  return result;
}

id PredicateExpressions.Arithmetic.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v92 = *(void *)(a2 + 24);
  uint64_t v93 = a1;
  uint64_t v86 = *(void *)(v92 - 8);
  MEMORY[0x1895F8858](a1);
  __n128 v88 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v94 = *(void *)(v11 - 8);
  uint64_t v95 = v11;
  MEMORY[0x1895F8858](v11);
  __int128 v85 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v80 - v14;
  uint64_t v96 = AssociatedTypeWitness;
  uint64_t v106 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v84 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v90 = (char *)&v80 - v19;
  uint64_t v20 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v21);
  __n128 v23 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*v2)
  {
    if (*v2 == 1)
    {
      unint64_t v24 = 0xEE003A7463617274LL;
      uint64_t v25 = 0x6275733A6D6F7266LL;
    }

    else
    {
      unint64_t v24 = 0xEC0000003A79623ALL;
      uint64_t v25 = 0x796C7069746C756DLL;
    }
  }

  else
  {
    unint64_t v24 = 0xE700000000000000LL;
    uint64_t v25 = 0x3A6F743A646461LL;
  }

  uint64_t v83 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v97 = swift_allocObject();
  *(_OWORD *)(v97 + 16) = xmmword_1837232D0;
  uint64_t v91 = a2;
  uint64_t v26 = *(int *)(a2 + 60);
  uint64_t v87 = v2;
  (*(void (**)(char *, _BYTE *, uint64_t))(v20 + 16))(v23, &v2[v26], v9);
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v27 = swift_dynamicCast();
  uint64_t v28 = MEMORY[0x18961AFE8];
  if (v27)
  {
    unint64_t v82 = v24;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v100, (uint64_t)&v103);
    uint64_t v29 = v104;
    uint64_t v30 = v105;
    __swift_project_boxed_opaque_existential_1(&v103, v104);
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v93, v29, v30);
    if (!v3)
    {
      id v41 = (id)v31;
      char v42 = v32;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
      uint64_t v81 = 0LL;
      if ((v42 & 1) != 0)
      {
        LOBYTE(v103) = 1;
        id v43 = v41;
        uint64_t v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v45 = (void *)objc_opt_self();
        id v46 = objc_msgSend(v45, sel_expressionForConstantValue_, v44);
        swift_unknownObjectRelease();
        LOBYTE(v103) = 0;
        id v47 = objc_msgSend(v45, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v41 = objc_msgSend(v45, sel_expressionForConditional_trueExpression_falseExpression_, v43, v46, v47);
      }

      uint64_t v38 = v96;
      uint64_t v35 = (void *)v97;
      goto LABEL_22;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
    uint64_t v4 = 0LL;
    uint64_t v33 = v3;
    uint64_t v28 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v102 = 0LL;
    __int128 v100 = 0u;
    __int128 v101 = 0u;
    outlined destroy of Any?((uint64_t)&v100, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v33 = 0LL;
  }

  *(void *)&__int128 v103 = v28;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v8 + 16))(&v103, v9, v8);
  id v34 = v4;
  if (!v4)
  {
    uint64_t v37 = v106;
    uint64_t v38 = v96;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v15, 0LL, 1LL, v96);
    uint64_t v39 = v90;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v90, v15, v38);
    uint64_t v99 = v38;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v98);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 16))(boxed_opaque_existential_1, v39, v38);
    _expressionCompatibleValue(for:)((uint64_t)v98, (uint64_t)&v100);
    uint64_t v81 = 0LL;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
    uint64_t v35 = (void *)v97;
    if (!*((void *)&v101 + 1))
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v38);
      outlined destroy of Any?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
      if (v33) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    outlined init with take of Any(&v100, &v103);
    __swift_project_boxed_opaque_existential_1(&v103, v104);
    uint64_t v48 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v41 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v48);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v38);

LABEL_22:
    uint64_t v49 = v92;
    uint64_t v50 = v88;
    uint64_t v51 = v87;
    uint64_t v52 = v91;
    uint64_t v53 = v86;
    uint64_t v97 = type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSExpression);
    v35[7] = v97;
    v35[4] = v41;
    (*(void (**)(char *, _BYTE *, uint64_t))(v53 + 16))(v50, &v51[*(int *)(v52 + 64)], v49);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v100, (uint64_t)&v103);
      uint64_t v54 = v104;
      uint64_t v55 = v105;
      __swift_project_boxed_opaque_existential_1(&v103, v104);
      id v56 = v81;
      uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v93, v54, v55);
      id v59 = v56;
      if (!v56)
      {
        id v70 = (id)v57;
        char v71 = v58;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
        if ((v71 & 1) != 0)
        {
          LOBYTE(v103) = 1;
          id v72 = v70;
          uint64_t v73 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          uint64_t v74 = (void *)objc_opt_self();
          id v75 = objc_msgSend(v74, sel_expressionForConstantValue_, v73);
          swift_unknownObjectRelease();
          LOBYTE(v103) = 0;
          id v76 = objc_msgSend(v74, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          id v70 = objc_msgSend(v74, sel_expressionForConditional_trueExpression_falseExpression_, v72, v75, v76);
        }

        goto LABEL_39;
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
      uint64_t v60 = 0LL;
      uint64_t v61 = v59;
      uint64_t v49 = v92;
      uint64_t v52 = v91;
    }

    else
    {
      uint64_t v102 = 0LL;
      __int128 v100 = 0u;
      __int128 v101 = 0u;
      outlined destroy of Any?((uint64_t)&v100, &demangling cache variable for type metadata for ConvertibleExpression?);
      uint64_t v61 = 0LL;
      uint64_t v60 = v81;
    }

    *(void *)&__int128 v103 = MEMORY[0x18961AFE8];
    id v62 = *(void (**)(__int128 *, uint64_t))(*(void *)(v52 + 40) + 16LL);
    id v63 = v85;
    v62(&v103, v49);
    if (v60)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56))(v63, 1LL, 1LL, v38);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v63, v95);
      id v34 = v35 + 4;
      if (v61) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }

    uint64_t v64 = v63;
    uint64_t v65 = v106;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v64, 0LL, 1LL, v38);
    uint64_t v66 = v84;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v84, v64, v38);
    uint64_t v99 = v38;
    uint64_t v67 = __swift_allocate_boxed_opaque_existential_1(v98);
    (*(void (**)(uint64_t *, char *, uint64_t))(v65 + 16))(v67, v66, v38);
    _expressionCompatibleValue(for:)((uint64_t)v98, (uint64_t)&v100);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
    if (!*((void *)&v101 + 1))
    {
      (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v38);
      outlined destroy of Any?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
      id v34 = v35 + 4;
      if (v61) {
        goto LABEL_32;
      }
LABEL_31:
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *uint64_t v68 = 2;
LABEL_32:
      swift_willThrow();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      goto LABEL_33;
    }

    outlined init with take of Any(&v100, &v103);
    __swift_project_boxed_opaque_existential_1(&v103, v104);
    uint64_t v77 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v70 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v77);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v38);

LABEL_39:
    v35[11] = v97;
    v35[8] = v70;
    uint64_t v78 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v79 = _ContiguousArrayBuffer._asCocoaArray()();
    id v34 = objc_msgSend((id)objc_opt_self(), sel_expressionForFunction_arguments_, v78, v79);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v34;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56))(v15, 1LL, 1LL, v96);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v15, v95);
  uint64_t v35 = (void *)v97;
  if (!v33)
  {
LABEL_12:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v36 = 2;
  }

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Arithmetic<A, B>( uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.Arithmetic.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

id PredicateExpressions.UnaryMinus.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v10 - 8);
  uint64_t v48 = v10;
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v13);
  id v46 = (char *)&v46 - v14;
  uint64_t v15 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_1837232D0;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v5, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v51, (uint64_t)&v54);
    uint64_t v19 = v55;
    uint64_t v20 = v56;
    __swift_project_boxed_opaque_existential_1(&v54, v55);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, v19, v20);
    if (!v3)
    {
      id v30 = (id)v21;
      char v31 = v22;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
      if ((v31 & 1) != 0)
      {
        LOBYTE(v54) = 1;
        id v32 = v30;
        uint64_t v33 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v34 = (void *)objc_opt_self();
        id v35 = objc_msgSend(v34, sel_expressionForConstantValue_, v33);
        swift_unknownObjectRelease();
        LOBYTE(v54) = 0;
        id v36 = objc_msgSend(v34, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v30 = objc_msgSend(v34, sel_expressionForConditional_trueExpression_falseExpression_, v32, v35, v36);
      }

      uint64_t v25 = (void *)v57;
      goto LABEL_17;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    uint64_t v4 = 0LL;
    __n128 v23 = v3;
  }

  else
  {
    uint64_t v53 = 0LL;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    outlined destroy of Any?((uint64_t)&v51, &demangling cache variable for type metadata for ConvertibleExpression?);
    __n128 v23 = 0LL;
  }

  *(void *)&__int128 v54 = MEMORY[0x18961AFE8];
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v8 + 16))(&v54, v7, v8);
  id v24 = v4;
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v12, 1LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v12, v48);
    uint64_t v25 = (void *)v57;
    if (v23) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  uint64_t v26 = v49;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v12, 0LL, 1LL, AssociatedTypeWitness);
  int v27 = v46;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v46, v12, AssociatedTypeWitness);
  v50[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v50);
  (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 16))( boxed_opaque_existential_1,  v27,  AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)v50, (uint64_t)&v51);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  uint64_t v25 = (void *)v57;
  if (*((void *)&v52 + 1))
  {
    outlined init with take of Any(&v51, &v54);
    __swift_project_boxed_opaque_existential_1(&v54, v55);
    uint64_t v37 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v38 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v37);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    uint64_t v39 = *(void (**)(char *, uint64_t))(v26 + 8);
    id v30 = v38;
    v39(v27, AssociatedTypeWitness);

LABEL_17:
    uint64_t v40 = type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSExpression);
    v25[7] = v40;
    v25[4] = v30;
    *(void *)&__int128 v54 = -1LL;
    uint64_t v41 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    char v42 = (void *)objc_opt_self();
    id v43 = objc_msgSend(v42, sel_expressionForConstantValue_, v41);
    swift_unknownObjectRelease();
    v25[11] = v40;
    _OWORD v25[8] = v43;
    uint64_t v44 = String._bridgeToObjectiveCImpl()();
    id v24 = objc_msgSend(v42, sel_expressionForFunction_arguments_, v44, _ContiguousArrayBuffer._asCocoaArray()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v24;
  }

  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, AssociatedTypeWitness);
  outlined destroy of Any?((uint64_t)&v51, &demangling cache variable for type metadata for Any?);
  if (v23) {
    goto LABEL_11;
  }
LABEL_10:
  lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
  swift_allocError();
  *uint64_t v29 = 2;
LABEL_11:
  swift_willThrow();
  v25[2] = 0LL;
  swift_release();
  return v24;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.UnaryMinus<A>( uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.UnaryMinus.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

char *PredicateExpressions.Comparison.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v83 = *(void *)(a2 + 24);
  uint64_t v79 = *(void *)(v83 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v81 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(v8 + 32);
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v86 = *(void *)(v12 - 8);
  uint64_t v87 = v12;
  MEMORY[0x1895F8858](v12);
  unint64_t v82 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v73 - v15;
  uint64_t v97 = AssociatedTypeWitness;
  uint64_t v88 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v17);
  id v76 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  uint64_t v84 = (char *)&v73 - v20;
  __n128 v22 = MEMORY[0x1895F8858](v21);
  id v24 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *v2;
  uint64_t v85 = a2;
  uint64_t v26 = *(int *)(a2 + 60);
  uint64_t v80 = v2;
  (*(void (**)(char *, unsigned __int8 *, uint64_t, __n128))(v27 + 16))(v24, &v2[v26], v10, v22);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v28 = swift_dynamicCast();
  uint64_t v29 = MEMORY[0x18961AFE8];
  uint64_t v77 = a1;
  if (v28)
  {
    uint64_t v75 = v25;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
    uint64_t v30 = v95;
    uint64_t v31 = v96;
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(a1, v30, v31);
    if (!v3)
    {
      uint64_t v39 = (void *)v32;
      char v40 = v33;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      uint64_t v74 = 0LL;
      if ((v40 & 1) != 0)
      {
        LOBYTE(v94) = 1;
        id v42 = v39;
        uint64_t v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v44 = (void *)objc_opt_self();
        id v45 = objc_msgSend(v44, sel_expressionForConstantValue_, v43);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        id v46 = objc_msgSend(v44, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v73 = objc_msgSend(v44, sel_expressionForConditional_trueExpression_falseExpression_, v42, v45, v46);
      }

      else
      {
        id v73 = v39;
      }

      uint64_t v25 = v75;
      uint64_t v37 = v97;
      uint64_t v36 = v88;
      goto LABEL_18;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    uint64_t v4 = 0LL;
    id v34 = v3;
    uint64_t v25 = v75;
    uint64_t v29 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v93 = 0LL;
    __int128 v91 = 0u;
    __int128 v92 = 0u;
    outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v34 = 0LL;
  }

  *(void *)&__int128 v94 = v29;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v9 + 16))(&v94, v10, v9);
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v16, 1LL, 1LL, v97);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v16, v87);
    if (v34)
    {
LABEL_8:
      swift_willThrow();
      return v4;
    }

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Comparison<A, B>( uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.Comparison.convert(state:)(a1, a2);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

id PredicateExpressions.Negation.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  __n128 v8 = MEMORY[0x1895F8858](a1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v10 + 16))( &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8],  v2,  v7,  v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v28, (uint64_t)&v31);
    uint64_t v11 = v32;
    uint64_t v12 = v33;
    __swift_project_boxed_opaque_existential_1(&v31, v32);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, v11, v12);
    if (!v3)
    {
      id v17 = (id)v13;
      char v18 = v14;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
      if ((v18 & 1) != 0) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
    uint64_t v4 = 0LL;
    id v15 = v3;
  }

  else
  {
    uint64_t v30 = 0LL;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    outlined destroy of Any?((uint64_t)&v28, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v15 = 0LL;
  }

  *(void *)&__int128 v31 = MEMORY[0x18961AFE8];
  (*(void (**)(char *__return_ptr, __int128 *, uint64_t))(*(void *)(a2 + 24) + 16LL))(&v27, &v31, v7);
  if (!v4)
  {
    if (v27 == 2) {
      goto LABEL_10;
    }
    uint64_t v26 = MEMORY[0x1896184C8];
    v25[0] = v27 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v25, (uint64_t)&v28);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    if (!*((void *)&v29 + 1))
    {
      outlined destroy of Any?((uint64_t)&v28, &demangling cache variable for type metadata for Any?);
      goto LABEL_10;
    }

    outlined init with take of Any(&v28, &v31);
    __swift_project_boxed_opaque_existential_1(&v31, v32);
    uint64_t v19 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v17 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v19);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);

LABEL_17:
    LOBYTE(v31) = 1;
    id v20 = v17;
    uint64_t v21 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v22 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v21);
    swift_unknownObjectRelease();
    id v17 = objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v20,  v22,  0,  4,  0);

LABEL_18:
    id v15 = objc_msgSend((id)objc_opt_self(), sel_notPredicateWithSubpredicate_, v17);

    return v15;
  }

LABEL_10:
  if (!v15)
  {
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v16 = 2;
  }

  swift_willThrow();
  return v15;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Negation<A>( uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.Negation.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

uint64_t PredicateExpressions.Filter.convert(state:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v73 = *(void *)(a2 + 24);
  uint64_t v70 = *(void *)(v73 - 8);
  MEMORY[0x1895F8858](a1);
  id v71 = (char *)v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v77 = *(void *)(v7 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v75 = type metadata accessor for Optional();
  uint64_t v74 = *(void *)(v75 - 8);
  MEMORY[0x1895F8858](v75);
  uint64_t v78 = (char *)v68 - v10;
  uint64_t v79 = AssociatedTypeWitness;
  uint64_t v80 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v11);
  id v76 = (char *)v68 - v12;
  uint64_t v13 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = a2;
  uint64_t v17 = *(void *)&v3[*(int *)(a2 + 64)];
  *(void *)&__int128 v88 = 0x5F6C61636F6C5FLL;
  *((void *)&v88 + 1) = 0xE700000000000000LL;
  *(void *)&__int128 v85 = *a1;
  uint64_t v18 = v85;
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  uint64_t result = swift_bridgeObjectRelease();
  if (v18 != -1)
  {
    __int128 v21 = v88;
    *a1 = v18 + 1;
    uint64_t v81 = *((void *)&v21 + 1);
    v68[1] = v21;
    uint64_t v22 = String._bridgeToObjectiveCImpl()();
    id v69 = (id)objc_opt_self();
    id v23 = objc_msgSend(v69, sel_expressionForVariable_, v22);
    swift_unknownObjectRelease();
    specialized Dictionary.subscript.setter((uint64_t)v23, v17);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v3, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    int v24 = swift_dynamicCast();
    uint64_t v25 = MEMORY[0x18961AFE8];
    uint64_t v26 = v3;
    if (v24)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v85, (uint64_t)&v88);
      uint64_t v27 = v89;
      uint64_t v28 = v90;
      __swift_project_boxed_opaque_existential_1(&v88, v89);
      __int128 v29 = a1;
      uint64_t v30 = v82;
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 16))(a1, v27, v28);
      uint64_t v33 = v30;
      if (!v30)
      {
        uint64_t v41 = (char *)v31;
        char v42 = v32;
        unint64_t v82 = 0LL;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
        if ((v42 & 1) != 0)
        {
          LOBYTE(v88) = 1;
          uint64_t v43 = v41;
          uint64_t v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          id v45 = v26;
          id v46 = v69;
          id v47 = objc_msgSend(v69, sel_expressionForConstantValue_, v44);
          swift_unknownObjectRelease();
          LOBYTE(v88) = 0;
          id v48 = objc_msgSend(v46, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          uint64_t v78 = (char *)objc_msgSend(v46, sel_expressionForConditional_trueExpression_falseExpression_, v43, v47, v48);

          uint64_t v26 = v45;
        }

        else
        {
          uint64_t v78 = v41;
        }

        goto LABEL_18;
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
      id v34 = 0LL;
      uint64_t v25 = MEMORY[0x18961AFE8];
    }

    else
    {
      __int128 v29 = a1;
      uint64_t v87 = 0LL;
      __int128 v85 = 0u;
      __int128 v86 = 0u;
      outlined destroy of Any?((uint64_t)&v85, &demangling cache variable for type metadata for ConvertibleExpression?);
      uint64_t v33 = 0LL;
      id v34 = v82;
    }

    *(void *)&__int128 v88 = v25;
    id v35 = v78;
    (*(void (**)(__int128 *, uint64_t))(v77 + 16))(&v88, v8);
    uint64_t v36 = v79;
    if (v34)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56))(v35, 1LL, 1LL, v36);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v35, v75);
      if (v33)
      {
LABEL_9:
        swift_willThrow();
LABEL_30:
        swift_bridgeObjectRelease();
        return (uint64_t)v3;
      }

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Filter<A, B>( void *a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.Filter.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

char *PredicateExpressions.FloatDivision.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v79 = *(void *)(a2 + 24);
  uint64_t v77 = *(void *)(v79 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v74 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(v8 + 32);
  uint64_t v78 = v8;
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v80 = *(void *)(v12 - 8);
  uint64_t v81 = v12;
  MEMORY[0x1895F8858](v12);
  uint64_t v73 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v71 - v15;
  uint64_t v82 = AssociatedTypeWitness;
  uint64_t v84 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v72 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  __int128 v21 = (char *)&v71 - v20;
  uint64_t v22 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v25 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v83 = swift_allocObject();
  *(_OWORD *)(v83 + 16) = xmmword_1837232D0;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v93 = v5;
  v26(v25, v5, v10);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v27 = swift_dynamicCast();
  uint64_t v28 = MEMORY[0x18961AFE8];
  uint64_t v75 = a1;
  if (v27)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v87, (uint64_t)&v90);
    uint64_t v29 = v91;
    uint64_t v30 = v92;
    __swift_project_boxed_opaque_existential_1(&v90, v91);
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(a1, v29, v30);
    if (!v3)
    {
      id v39 = (id)v31;
      char v40 = v32;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
      if ((v40 & 1) != 0)
      {
        LOBYTE(v90) = 1;
        id v41 = v39;
        uint64_t v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v43 = (void *)objc_opt_self();
        id v44 = objc_msgSend(v43, sel_expressionForConstantValue_, v42);
        swift_unknownObjectRelease();
        LOBYTE(v90) = 0;
        id v45 = objc_msgSend(v43, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v39 = objc_msgSend(v43, sel_expressionForConditional_trueExpression_falseExpression_, v41, v44, v45);
      }

      uint64_t v37 = v82;
      id v34 = (void *)v83;
      goto LABEL_17;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
    uint64_t v4 = 0LL;
    uint64_t v33 = v3;
    uint64_t v28 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v89 = 0LL;
    __int128 v87 = 0u;
    __int128 v88 = 0u;
    outlined destroy of Any?((uint64_t)&v87, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v33 = 0LL;
  }

  *(void *)&__int128 v90 = v28;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v9 + 16))(&v90, v10, v9);
  if (!v4)
  {
    uint64_t v36 = v84;
    uint64_t v37 = v82;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v16, 0LL, 1LL, v82);
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v21, v16, v37);
    uint64_t v86 = v37;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v85);
    (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(boxed_opaque_existential_1, v21, v37);
    _expressionCompatibleValue(for:)((uint64_t)v85, (uint64_t)&v87);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
    id v34 = (void *)v83;
    if (!*((void *)&v88 + 1))
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v21, v37);
      outlined destroy of Any?((uint64_t)&v87, &demangling cache variable for type metadata for Any?);
      if (v33) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }

    outlined init with take of Any(&v87, &v90);
    __swift_project_boxed_opaque_existential_1(&v90, v91);
    uint64_t v46 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v39 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v46);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v21, v37);

LABEL_17:
    uint64_t v47 = v79;
    uint64_t v48 = v75;
    uint64_t v49 = v78;
    uint64_t v50 = v74;
    uint64_t v83 = type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSExpression);
    _OWORD v34[7] = v83;
    v34[4] = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v50, v93 + *(int *)(v49 + 60), v47);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v87, (uint64_t)&v90);
      uint64_t v51 = v91;
      uint64_t v52 = v92;
      __swift_project_boxed_opaque_existential_1(&v90, v91);
      id v59 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v48, v51, v52);
      char v61 = v60;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
      if ((v61 & 1) != 0)
      {
        LOBYTE(v90) = 1;
        id v62 = v59;
        uint64_t v63 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v64 = (void *)objc_opt_self();
        id v65 = objc_msgSend(v64, sel_expressionForConstantValue_, v63);
        swift_unknownObjectRelease();
        LOBYTE(v90) = 0;
        id v66 = objc_msgSend(v64, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v59 = objc_msgSend(v64, sel_expressionForConditional_trueExpression_falseExpression_, v62, v65, v66);
      }
    }

    else
    {
      uint64_t v89 = 0LL;
      __int128 v87 = 0u;
      __int128 v88 = 0u;
      outlined destroy of Any?((uint64_t)&v87, &demangling cache variable for type metadata for ConvertibleExpression?);
      uint64_t v16 = 0LL;
      *(void *)&__int128 v90 = MEMORY[0x18961AFE8];
      uint64_t v53 = v73;
      (*(void (**)(__int128 *, uint64_t))(*(void *)(v49 + 40) + 16LL))(&v90, v47);
      uint64_t v54 = v84;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v53, 0LL, 1LL, v37);
      char v55 = v72;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v72, v53, v37);
      uint64_t v86 = v37;
      uint64_t v56 = __swift_allocate_boxed_opaque_existential_1(v85);
      (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 16))(v56, v55, v37);
      _expressionCompatibleValue(for:)((uint64_t)v85, (uint64_t)&v87);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
      if (!*((void *)&v88 + 1))
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v37);
        outlined destroy of Any?((uint64_t)&v87, &demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        _BYTE *v57 = 2;
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)(v34 + 4));
        goto LABEL_21;
      }

      outlined init with take of Any(&v87, &v90);
      __swift_project_boxed_opaque_existential_1(&v90, v91);
      uint64_t v67 = v54;
      uint64_t v68 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v59 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v68);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v55, v37);
    }

    v34[11] = v83;
    v34[8] = v59;
    uint64_t v69 = String._bridgeToObjectiveCImpl()();
    uint64_t v70 = _ContiguousArrayBuffer._asCocoaArray()();
    uint64_t v16 = (char *)objc_msgSend((id)objc_opt_self(), sel_expressionForFunction_arguments_, v69, v70);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v16;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v84 + 56))(v16, 1LL, 1LL, v82);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v16, v81);
  id v34 = (void *)v83;
  if (!v33)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *id v35 = 2;
  }

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.FloatDivision<A, B>( uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.FloatDivision.convert(state:)(a1, a2);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

id PredicateExpressions.ClosedRange.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v81 = *(void *)(a2 + 24);
  uint64_t v76 = *(void *)(v81 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v77 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(v8 + 32);
  uint64_t v80 = v8;
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v82 = *(void *)(v12 - 8);
  uint64_t v83 = v12;
  MEMORY[0x1895F8858](v12);
  uint64_t v75 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v73 - v15;
  uint64_t v84 = AssociatedTypeWitness;
  uint64_t v86 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v74 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  __int128 v21 = (char *)&v73 - v20;
  uint64_t v22 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v25 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v85 = swift_allocObject();
  *(_OWORD *)(v85 + 16) = xmmword_1837C08B0;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v95 = v5;
  v26(v25, v5, v10);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v27 = swift_dynamicCast();
  uint64_t v28 = MEMORY[0x18961AFE8];
  uint64_t v78 = a1;
  if (v27)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v89, (uint64_t)&v92);
    uint64_t v29 = v93;
    uint64_t v30 = v94;
    __swift_project_boxed_opaque_existential_1(&v92, v93);
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(a1, v29, v30);
    if (!v3)
    {
      id v40 = (id)v31;
      char v41 = v32;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
      if ((v41 & 1) != 0)
      {
        LOBYTE(v92) = 1;
        id v42 = v40;
        uint64_t v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v44 = (void *)objc_opt_self();
        id v45 = objc_msgSend(v44, sel_expressionForConstantValue_, v43);
        swift_unknownObjectRelease();
        LOBYTE(v92) = 0;
        id v46 = objc_msgSend(v44, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v40 = objc_msgSend(v44, sel_expressionForConditional_trueExpression_falseExpression_, v42, v45, v46);
      }

      uint64_t v38 = v84;
      uint64_t v35 = v85;
      goto LABEL_17;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    uint64_t v4 = 0LL;
    uint64_t v33 = v3;
    uint64_t v28 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v91 = 0LL;
    __int128 v89 = 0u;
    __int128 v90 = 0u;
    outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v33 = 0LL;
  }

  *(void *)&__int128 v92 = v28;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v9 + 16))(&v92, v10, v9);
  id v34 = v4;
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56))(v16, 1LL, 1LL, v84);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v16, v83);
    uint64_t v35 = v85;
    if (v33)
    {
LABEL_8:
      swift_willThrow();
LABEL_21:
      *(void *)(v35 + 16) = 0LL;
      swift_release();
      return v34;
    }

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.ClosedRange<A, B>( uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.ClosedRange.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

id PredicateExpressions.SequenceContains.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v92 = a1;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v81 = *(void *)(a2 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v79 = type metadata accessor for Optional();
  uint64_t v78 = *(void *)(v79 - 8);
  MEMORY[0x1895F8858](v79);
  __int128 v87 = (char *)&v76 - v6;
  uint64_t v88 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v80 = (char *)&v76 - v8;
  uint64_t v85 = v4;
  uint64_t v83 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v84 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v90 = *(void *)(v14 - 8);
  id v91 = (id)v14;
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v76 - v15;
  uint64_t v93 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v17);
  __int128 v89 = (char *)&v76 - v18;
  __n128 v20 = MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = *(int *)(a2 + 68);
  uint64_t v86 = v2;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v24 + 16))(v22, v2 + v23, v12, v20);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v25 = swift_dynamicCast();
  uint64_t v26 = MEMORY[0x18961AFE8];
  if (v25)
  {
    uint64_t v77 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v96, (uint64_t)&v99);
    uint64_t v27 = v100;
    uint64_t v28 = v101;
    __swift_project_boxed_opaque_existential_1(&v99, v100);
    uint64_t v29 = v102;
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v92, v27, v28);
    char v32 = v29;
    if (!v29)
    {
      id v39 = (void *)v30;
      char v40 = v31;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
      uint64_t v102 = 0LL;
      if ((v40 & 1) != 0)
      {
        LOBYTE(v99) = 1;
        id v43 = v39;
        uint64_t v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v45 = (void *)objc_opt_self();
        id v46 = objc_msgSend(v45, sel_expressionForConstantValue_, v44);
        swift_unknownObjectRelease();
        LOBYTE(v99) = 0;
        id v47 = objc_msgSend(v45, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v91 = objc_msgSend(v45, sel_expressionForConditional_trueExpression_falseExpression_, v43, v46, v47);
      }

      else
      {
        id v91 = v39;
      }

      uint64_t AssociatedTypeWitness = v77;
      goto LABEL_18;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
    uint64_t v33 = 0LL;
    id v34 = v32;
    uint64_t AssociatedTypeWitness = v77;
  }

  else
  {
    uint64_t v98 = 0LL;
    __int128 v96 = 0u;
    __int128 v97 = 0u;
    outlined destroy of Any?((uint64_t)&v96, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v34 = 0LL;
    uint64_t v33 = v102;
  }

  *(void *)&__int128 v99 = v26;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v11 + 16))(&v99, v12, v11);
  if (v33)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56))(v16, 1LL, 1LL, v13);
    (*(void (**)(char *, id))(v90 + 8))(v16, v91);
    if (v34)
    {
LABEL_8:
      swift_willThrow();
      return v34;
    }

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceContains<A, B>( uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.SequenceContains.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

uint64_t PredicateExpressions.Range._lower.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 32);
  a2[3] = v3;
  a2[4] = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))( boxed_opaque_existential_1,  v2,  v3);
}

uint64_t PredicateExpressions.Range._upper.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2 + *(int *)(a1 + 60);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 40);
  a2[3] = v4;
  a2[4] = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))( boxed_opaque_existential_1,  v3,  v4);
}

uint64_t RangeExpression._anyRange.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v74 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v64 = type metadata accessor for PartialRangeUpTo();
  uint64_t v59 = *(void *)(v64 - 8);
  MEMORY[0x1895F8858](v64);
  char v60 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  id v63 = (char *)&v58 - v7;
  uint64_t v68 = type metadata accessor for PartialRangeThrough();
  uint64_t v61 = *(void *)(v68 - 8);
  MEMORY[0x1895F8858](v68);
  id v62 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v67 = (char *)&v58 - v10;
  uint64_t v72 = type metadata accessor for PartialRangeFrom();
  uint64_t v65 = *(void *)(v72 - 8);
  MEMORY[0x1895F8858](v72);
  uint64_t v66 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v71 = (char *)&v58 - v13;
  uint64_t v14 = type metadata accessor for ClosedRange();
  uint64_t v69 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  id v70 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v58 - v17;
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v23);
  int v25 = (char *)&v58 - v24;
  __n128 v27 = MEMORY[0x1895F8858](v26);
  uint64_t v29 = (char *)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v75 = v30;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v30 + 16))(v29, v73, a1, v27);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v25, v19);
    uint64_t v31 = v74;
    *(void *)(v74 + 24) = AssociatedTypeWitness;
    *(void *)(v31 + 32) = AssociatedConformanceWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v31);
    uint64_t v33 = *(void (**)(uint64_t *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL);
    v33(boxed_opaque_existential_1, v22, AssociatedTypeWitness);
    id v34 = &v22[*(int *)(v19 + 36)];
    *(void *)(v31 + 64) = AssociatedTypeWitness;
    *(void *)(v31 + 72) = AssociatedConformanceWitness;
    uint64_t v35 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v31 + 40));
    v33(v35, v34, AssociatedTypeWitness);
    *(_BYTE *)(v31 + 80) = 0;
  }

  else
  {
    uint64_t v36 = v74;
    if (swift_dynamicCast())
    {
      uint64_t v37 = v70;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v70, v18, v14);
      uint64_t v38 = v36;
      id v39 = (uint64_t *)(v36 + 40);
      *(void *)(v36 + 24) = AssociatedTypeWitness;
      *(void *)(v36 + 32) = AssociatedConformanceWitness;
      char v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v36);
      char v41 = *(void (**)(uint64_t *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL);
      v41(v40, v37, AssociatedTypeWitness);
      uint64_t v42 = &v37[*(int *)(v14 + 36)];
      *(void *)(v38 + 64) = AssociatedTypeWitness;
      *(void *)(v38 + 72) = AssociatedConformanceWitness;
      id v43 = __swift_allocate_boxed_opaque_existential_1(v39);
      v41(v43, v42, AssociatedTypeWitness);
      *(_BYTE *)(v38 + 80) = 1;
    }

    else
    {
      id v45 = v71;
      uint64_t v44 = v72;
      if (swift_dynamicCast())
      {
        id v46 = v66;
        (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v66, v45, v44);
        *(void *)(v36 + 24) = AssociatedTypeWitness;
        *(void *)(v36 + 32) = AssociatedConformanceWitness;
        id v47 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v36);
        (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( v47,  v46,  AssociatedTypeWitness);
        char v48 = 2;
      }

      else
      {
        uint64_t v50 = v67;
        uint64_t v49 = v68;
        if (swift_dynamicCast())
        {
          uint64_t v51 = v62;
          (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v62, v50, v49);
          *(void *)(v36 + 24) = AssociatedTypeWitness;
          *(void *)(v36 + 32) = AssociatedConformanceWitness;
          uint64_t v52 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v36);
          (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( v52,  v51,  AssociatedTypeWitness);
          char v48 = 3;
        }

        else
        {
          uint64_t v54 = v63;
          uint64_t v53 = v64;
          if (swift_dynamicCast())
          {
            char v55 = v60;
            (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v60, v54, v53);
            *(void *)(v36 + 24) = AssociatedTypeWitness;
            *(void *)(v36 + 32) = AssociatedConformanceWitness;
            uint64_t v56 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v36);
            (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( v56,  v55,  AssociatedTypeWitness);
            char v48 = 4;
          }

          else
          {
            *(_OWORD *)(v36 + 48) = 0u;
            *(_OWORD *)(v36 + 64) = 0u;
            *(_OWORD *)(v36 + 16) = 0u;
            *(_OWORD *)(v36 + 32) = 0u;
            *(_OWORD *)uint64_t v36 = 0u;
            char v48 = -1;
          }
        }
      }

      *(_BYTE *)(v36 + 80) = v48;
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v29, a1);
}

uint64_t PredicateExpressions.Value<A>._anyRange.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RangeExpression._anyRange.getter(*(void *)(a1 + 16), a2);
}

uint64_t protocol witness for _RangeValue._anyRange.getter in conformance <A> PredicateExpressions.Value<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PredicateExpressions.Value<A>._anyRange.getter(a1, a2);
}

void *PredicateExpressions.RangeExpressionContains.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v171 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v163 = *(void *)(a2 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v155 = *(void *)(v7 - 8);
  uint64_t v156 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v164 = (char *)v153 - v8;
  uint64_t v161 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v162 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](v9);
  uint64_t v157 = (char *)v153 - v10;
  uint64_t v166 = v5;
  uint64_t v160 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v154 = (char *)v153 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v158 = (char *)v153 - v14;
  MEMORY[0x1895F8858](v15);
  uint64_t v159 = (char *)v153 - v16;
  uint64_t v17 = *(void *)(a2 + 40);
  uint64_t v18 = *(void **)(a2 + 24);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v168 = *(void (***)(char *, id))(v20 - 8);
  id v169 = (id)v20;
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)v153 - v21;
  uint64_t v172 = *(void (***)(char *, void, uint64_t, uint64_t))(v19 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v170 = (char *)v153 - v24;
  __n128 v26 = MEMORY[0x1895F8858](v25);
  uint64_t v28 = (char *)v153 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v153[1] = a2;
  uint64_t v29 = *(int *)(a2 + 60);
  uint64_t v165 = v3;
  (*(void (**)(char *, uint64_t, void *, __n128))(v30 + 16))(v28, v3 + v29, v18, v26);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  uint64_t v173 = v18;
  uint64_t v167 = (void *)v31;
  int v32 = swift_dynamicCast();
  uint64_t v33 = MEMORY[0x18961AFE8];
  if (v32)
  {
    v153[0] = v17;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v182, (uint64_t)&v188);
    uint64_t v35 = v189;
    uint64_t v34 = v190;
    __swift_project_boxed_opaque_existential_1(&v188, v189);
    uint64_t v36 = v191;
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v171, v35, v34);
    id v39 = v36;
    if (!v36)
    {
      id v48 = (id)v37;
      char v49 = v38;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
      if ((v49 & 1) != 0)
      {
        LOBYTE(v188) = 1;
        id v50 = v48;
        uint64_t v51 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v52 = (void *)objc_opt_self();
        id v53 = objc_msgSend(v52, sel_expressionForConstantValue_, v51);
        swift_unknownObjectRelease();
        LOBYTE(v188) = 0;
        id v54 = objc_msgSend(v52, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v48 = objc_msgSend(v52, sel_expressionForConditional_trueExpression_falseExpression_, v50, v53, v54);
      }

      goto LABEL_17;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
    char v40 = 0LL;
    uint64_t v33 = MEMORY[0x18961AFE8];
    uint64_t v17 = v153[0];
  }

  else
  {
    *(void *)&__int128 v184 = 0LL;
    __int128 v182 = 0u;
    __int128 v183 = 0u;
    outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v39 = 0LL;
    char v40 = v191;
  }

  *(void *)&__int128 v188 = v33;
  (*(void (**)(__int128 *, void *, uint64_t))(v17 + 16))(&v188, v173, v17);
  char v41 = v40;
  uint64_t v42 = v172;
  if (v40)
  {

    v42[7](v22, 1LL, 1LL, v19);
    v168[1](v22, v169);
    if (v39)
    {
LABEL_8:
      swift_willThrow();
      return v41;
    }

void *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.RangeExpressionContains<A, B>( uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.RangeExpressionContains.convert(state:)(a1, a2);
  if (v2) {
    return (void *)v4;
  }
  return result;
}

uint64_t PredicateExpressions.SequenceContainsWhere.convert(state:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v117 = *(void *)(a2 + 24);
  uint64_t v114 = *(void *)(v117 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v115 = (char *)v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v121 = *(void *)(v7 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v120 = type metadata accessor for Optional();
  uint64_t v119 = *(void *)(v120 - 8);
  MEMORY[0x1895F8858](v120);
  char v122 = (char *)v112 - v10;
  uint64_t v123 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v124 = (char *)AssociatedTypeWitness;
  MEMORY[0x1895F8858](v11);
  __n128 v118 = (char *)v112 - v12;
  uint64_t v13 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v116 = a2;
  uint64_t v17 = *(void *)&v3[*(int *)(a2 + 64)];
  *(void *)&__int128 v132 = 0x5F6C61636F6C5FLL;
  *((void *)&v132 + 1) = 0xE700000000000000LL;
  *(void *)&__int128 v129 = *a1;
  uint64_t v18 = v129;
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  uint64_t result = swift_bridgeObjectRelease();
  if (v18 == -1)
  {
    __break(1u);
    goto LABEL_59;
  }

  __int128 v21 = v132;
  *a1 = v18 + 1;
  uint64_t v125 = *((void *)&v21 + 1);
  v112[1] = v21;
  uint64_t v22 = String._bridgeToObjectiveCImpl()();
  id v113 = (id)objc_opt_self();
  id v23 = objc_msgSend(v113, sel_expressionForVariable_, v22);
  swift_unknownObjectRelease();
  specialized Dictionary.subscript.setter((uint64_t)v23, v17);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v3, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v24 = swift_dynamicCast();
  uint64_t v25 = MEMORY[0x18961AFE8];
  if (v24)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v129, (uint64_t)&v132);
    uint64_t v26 = v133;
    uint64_t v27 = v134;
    __swift_project_boxed_opaque_existential_1(&v132, v133);
    uint64_t v28 = v126;
    uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 16))(a1, v26, v27);
    uint64_t v31 = a1;
    int v32 = v28;
    if (!v28)
    {
      id v42 = (id)v29;
      char v43 = v30;
      uint64_t v126 = 0LL;
      uint64_t v44 = v3;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
      if ((v43 & 1) != 0)
      {
        LOBYTE(v132) = 1;
        id v45 = v42;
        uint64_t v46 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v47 = v113;
        id v48 = objc_msgSend(v113, sel_expressionForConstantValue_, v46);
        swift_unknownObjectRelease();
        LOBYTE(v132) = 0;
        id v49 = objc_msgSend(v47, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v50 = objc_msgSend(v47, sel_expressionForConditional_trueExpression_falseExpression_, v45, v48, v49);

        id v42 = v50;
      }

      uint64_t v51 = v117;
      uint64_t v52 = v116;
      goto LABEL_18;
    }

    uint64_t v33 = v31;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
    uint64_t v34 = 0LL;
    uint64_t v35 = v32;
  }

  else
  {
    uint64_t v33 = a1;
    uint64_t v131 = 0LL;
    __int128 v129 = 0u;
    __int128 v130 = 0u;
    outlined destroy of Any?((uint64_t)&v129, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v35 = 0LL;
    uint64_t v34 = v126;
  }

  *(void *)&__int128 v132 = v25;
  uint64_t v36 = v122;
  uint64_t v37 = v3;
  (*(void (**)(__int128 *, uint64_t))(v121 + 16))(&v132, v8);
  uint64_t v38 = v123;
  if (v34)
  {

    (*(void (**)(char *, uint64_t, uint64_t, char *))(v38 + 56))(v36, 1LL, 1LL, v124);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v36, v120);
    if (v35)
    {
LABEL_9:
      swift_willThrow();
LABEL_30:
      swift_bridgeObjectRelease();
      return (uint64_t)v37;
    }

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceContainsWhere<A, B>( void *a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.SequenceContainsWhere.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t PredicateExpressions.SequenceAllSatisfy.convert(state:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v104 = *(void *)(a2 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v102 = type metadata accessor for Optional();
  v101[1] = *(void *)(v102 - 8);
  MEMORY[0x1895F8858](v102);
  uint64_t v105 = (char *)v101 - v8;
  uint64_t v107 = (char *)AssociatedTypeWitness;
  uint64_t v106 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v9);
  Swift::String v103 = (char *)v101 - v10;
  uint64_t v111 = v6;
  uint64_t v109 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v11);
  id v110 = (char *)v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(v3 + *(int *)(a2 + 64));
  *(void *)&__int128 v121 = 0x5F6C61636F6C5FLL;
  *((void *)&v121 + 1) = 0xE700000000000000LL;
  uint64_t v115 = a1;
  *(void *)&__int128 v118 = *a1;
  uint64_t v19 = v118;
  v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  uint64_t result = swift_bridgeObjectRelease();
  if (v19 == -1)
  {
    __break(1u);
    goto LABEL_52;
  }

  __int128 v22 = v121;
  *uint64_t v115 = v19 + 1;
  uint64_t v113 = *((void *)&v22 + 1);
  v101[0] = v22;
  uint64_t v23 = String._bridgeToObjectiveCImpl()();
  id v112 = (id)objc_opt_self();
  id v24 = objc_msgSend(v112, sel_expressionForVariable_, v23);
  swift_unknownObjectRelease();
  specialized Dictionary.subscript.setter((uint64_t)v24, v18);
  uint64_t v25 = *(int *)(a2 + 60);
  uint64_t v108 = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v3 + v25, v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (!swift_dynamicCast())
  {
    uint64_t v120 = 0LL;
    __int128 v118 = 0u;
    __int128 v119 = 0u;
    outlined destroy of Any?((uint64_t)&v118, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v33 = 0LL;
    int v32 = v114;
    uint64_t v29 = v115;
    goto LABEL_6;
  }

  outlined init with take of any PredicateExpression<Self.Output == B1>(&v118, (uint64_t)&v121);
  uint64_t v26 = v122;
  uint64_t v27 = v123;
  __swift_project_boxed_opaque_existential_1(&v121, v122);
  uint64_t v28 = v114;
  uint64_t v29 = v115;
  uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 16))(v115, v26, v27);
  uint64_t v17 = v28;
  if (v28)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
    int v32 = 0LL;
    uint64_t v33 = v17;
LABEL_6:
    *(void *)&__int128 v121 = MEMORY[0x18961AFE8];
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(void *)(a2 + 40) + 16LL))( &v124,  &v121,  v13);
    if (v32)
    {

LABEL_11:
      if (!v33)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *uint64_t v34 = 2;
      }

      swift_willThrow();
      swift_bridgeObjectRelease();
      return (uint64_t)v17;
    }

    uint64_t v117 = (char *)MEMORY[0x1896184C8];
    LOBYTE(v116[0]) = v124 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v116, (uint64_t)&v118);
    uint64_t v17 = 0LL;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
    if (!*((void *)&v119 + 1))
    {
      outlined destroy of Any?((uint64_t)&v118, &demangling cache variable for type metadata for Any?);
      goto LABEL_11;
    }

    outlined init with take of Any(&v118, &v121);
    __swift_project_boxed_opaque_existential_1(&v121, v122);
    uint64_t v38 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v37 = v112;
    id v35 = objc_msgSend(v112, sel_expressionForConstantValue_, v38);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);

    goto LABEL_19;
  }

  id v35 = (id)v30;
  char v36 = v31;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
  id v37 = v112;
  if ((v36 & 1) == 0)
  {
LABEL_19:
    LOBYTE(v121) = 1;
    id v39 = v35;
    id v40 = objc_msgSend(v37, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    id v35 = objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v39,  v40,  0,  4,  0);
  }

  id v41 = objc_msgSend((id)objc_opt_self(), sel_notPredicateWithSubpredicate_, v35);

  uint64_t v42 = v111;
  (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v110, v108, v111);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v118, (uint64_t)&v121);
    uint64_t v43 = v122;
    uint64_t v44 = v123;
    __swift_project_boxed_opaque_existential_1(&v121, v122);
    id v50 = (id)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v44 + 16))(v29, v43, v44);
    char v52 = v51;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
    if ((v52 & 1) != 0)
    {
      LOBYTE(v121) = 1;
      id v56 = v50;
      uint64_t v57 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      id v53 = v112;
      id v58 = objc_msgSend(v112, sel_expressionForConstantValue_, v57);
      swift_unknownObjectRelease();
      LOBYTE(v121) = 0;
      id v59 = objc_msgSend(v53, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      id v50 = objc_msgSend(v53, sel_expressionForConditional_trueExpression_falseExpression_, v56, v58, v59);
    }

    else
    {
      id v53 = v112;
    }
  }

  else
  {
    uint64_t v120 = 0LL;
    __int128 v118 = 0u;
    __int128 v119 = 0u;
    outlined destroy of Any?((uint64_t)&v118, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v45 = v105;
    *(void *)&__int128 v121 = MEMORY[0x18961AFE8];
    (*(void (**)(__int128 *, uint64_t))(v104 + 16))(&v121, v42);
    uint64_t v46 = v106;
    uint64_t v17 = v107;
    (*(void (**)(char *, void, uint64_t, char *))(v106 + 56))(v45, 0LL, 1LL, v107);
    id v47 = v103;
    (*(void (**)(char *, char *, char *))(v46 + 32))(v103, v45, v17);
    uint64_t v117 = v17;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v116);
    (*(void (**)(uint64_t *, char *, char *))(v46 + 16))(boxed_opaque_existential_1, v47, v17);
    _expressionCompatibleValue(for:)((uint64_t)v116, (uint64_t)&v118);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
    if (!*((void *)&v119 + 1))
    {
      (*(void (**)(char *, char *))(v46 + 8))(v103, v17);
      outlined destroy of Any?((uint64_t)&v118, &demangling cache variable for type metadata for Any?);
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *id v49 = 2;
      swift_willThrow();
      swift_bridgeObjectRelease();

      return (uint64_t)v17;
    }

    outlined init with take of Any(&v118, &v121);
    __swift_project_boxed_opaque_existential_1(&v121, v122);
    uint64_t v54 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v53 = v112;
    uint64_t v55 = v46;
    id v50 = objc_msgSend(v112, sel_expressionForConstantValue_, v54);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
    (*(void (**)(char *, char *))(v55 + 8))(v103, v17);
  }

  uint64_t v60 = String._bridgeToObjectiveCImpl()();
  id v61 = v41;
  swift_bridgeObjectRelease();
  id v62 = objc_msgSend(v53, sel_expressionForSubquery_usingIteratorVariable_predicate_, v50, v60, v61);
  swift_unknownObjectRelease();

  if (objc_msgSend(v62, sel_expressionType) == (id)1)
  {
    id v63 = objc_msgSend(v53, sel_expressionForKeyPath_, String._bridgeToObjectiveCImpl()());
LABEL_42:
    id v94 = v63;
    swift_unknownObjectRelease();
LABEL_50:
    *(void *)&__int128 v121 = 0LL;
    id v100 = objc_msgSend(v53, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    uint64_t v17 = (char *)objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v94,  v100,  0,  4,  0);

    return (uint64_t)v17;
  }

  if (objc_msgSend(v62, sel_expressionType) != (id)3) {
    goto LABEL_45;
  }
  uint64_t v115 = 0LL;
  uint64_t v64 = &selRef_initWithTransform_;
  id v65 = objc_msgSend(v62, sel_keyPath);
  id v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
  uint64_t v68 = v67;

  *(void *)&__int128 v121 = 64LL;
  *((void *)&v121 + 1) = 0xE100000000000000LL;
  *(void *)&__int128 v118 = v66;
  *((void *)&v118 + 1) = v68;
  if ((v68 & 0x1000000000000000LL) != 0)
  {
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    StringProtocol._ephemeralString.getter();
    unint64_t v82 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v83 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v84 = objc_msgSend(v82, sel_rangeOfString_, v83);
    uint64_t v86 = v85;
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    if (v84 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      id v53 = v112;
      uint64_t v64 = &selRef_initWithTransform_;
LABEL_40:
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }

    id v53 = v112;
    if (!__OFADD__(v84, v86))
    {
      StringProtocol._toUTF16Indices(_:)();
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceAllSatisfy<A, B>( void *a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.SequenceAllSatisfy.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t PredicateExpressions.SequenceMaximum.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v88 = type metadata accessor for Optional();
  uint64_t v80 = *(void *)(v88 - 8);
  MEMORY[0x1895F8858](v88);
  uint64_t v11 = (char *)&v77 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v79 = (char *)&v77 - v14;
  __n128 v16 = MEMORY[0x1895F8858](v15);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))( (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5,  v7,  v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    uint64_t v78 = v12;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v82, (uint64_t)&v85);
    uint64_t v19 = v86;
    uint64_t v20 = v87;
    __swift_project_boxed_opaque_existential_1(&v85, v86);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, v19, v20);
    if (!v3)
    {
      id v29 = (id)v21;
      char v30 = v22;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      if ((v30 & 1) != 0)
      {
        LOBYTE(v85) = 1;
        id v31 = v29;
        uint64_t v32 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v33 = (void *)objc_opt_self();
        id v34 = objc_msgSend(v33, sel_expressionForConstantValue_, v32);
        swift_unknownObjectRelease();
        LOBYTE(v85) = 0;
        id v35 = objc_msgSend(v33, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v29 = objc_msgSend(v33, sel_expressionForConditional_trueExpression_falseExpression_, v31, v34, v35);
      }

      goto LABEL_17;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    uint64_t v4 = 0LL;
    uint64_t v23 = v3;
    uint64_t v12 = v78;
  }

  else
  {
    uint64_t v84 = 0LL;
    __int128 v82 = 0u;
    __int128 v83 = 0u;
    outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v23 = 0LL;
  }

  *(void *)&__int128 v85 = MEMORY[0x18961AFE8];
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v8 + 16))(&v85, v7, v8);
  id v24 = v4;
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v11, 1LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v11, v88);
    if (v23) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, 0LL, 1LL, AssociatedTypeWitness);
  uint64_t v25 = v79;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v79, v11, AssociatedTypeWitness);
  v81[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v81);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))( boxed_opaque_existential_1,  v25,  AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)v81, (uint64_t)&v82);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
  if (!*((void *)&v83 + 1))
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v25, AssociatedTypeWitness);
    outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for Any?);
    if (v23) {
      goto LABEL_11;
    }
LABEL_10:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v27 = 2;
LABEL_11:
    swift_willThrow();
    return (uint64_t)v24;
  }

  outlined init with take of Any(&v82, &v85);
  __swift_project_boxed_opaque_existential_1(&v85, v86);
  uint64_t v36 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v37 = v23;
  id v29 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v36);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v25, AssociatedTypeWitness);

LABEL_17:
  if (objc_msgSend(v29, sel_expressionType) == (id)1)
  {
    uint64_t v38 = String._bridgeToObjectiveCImpl()();
    id v39 = objc_msgSend((id)objc_opt_self(), sel_expressionForKeyPath_, v38);
LABEL_30:
    id v24 = v39;

    swift_unknownObjectRelease();
    return (uint64_t)v24;
  }

  if (objc_msgSend(v29, sel_expressionType) != (id)3) {
    goto LABEL_33;
  }
  id v40 = &selRef_initWithTransform_;
  id v41 = v29;
  id v42 = objc_msgSend(v29, sel_keyPath);
  id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  uint64_t v45 = v44;

  *(void *)&__int128 v85 = 64LL;
  *((void *)&v85 + 1) = 0xE100000000000000LL;
  *(void *)&__int128 v82 = v43;
  *((void *)&v82 + 1) = v45;
  if ((v45 & 0x1000000000000000LL) == 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v46 = String.subscript.getter();
    unint64_t v48 = v47;
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    swift_bridgeObjectRelease();
    v81[0] = 64LL;
    v81[1] = 0xE100000000000000LL;
    unint64_t v53 = Substring.init<A>(_:)();
    if ((v46 ^ v48) >= 0x4000 && (v53 ^ v54) >> 14)
    {
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v53,  v54,  v55,  v56,  0,  0,  0,  0,  0,  v46,  v48,  v50,  v52);
      char v58 = v57;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v29 = v41;
      if ((v58 & 1) == 0) {
        goto LABEL_33;
      }
LABEL_29:
      id v64 = [v29 v40[185]];
      id v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
      uint64_t v67 = v66;

      *(void *)&__int128 v85 = v65;
      *((void *)&v85 + 1) = v67;
      v68._uint64_t countAndFlagsBits = 46LL;
      v68._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v68);
      v69._uint64_t countAndFlagsBits = 0x6C65732E78616D40LL;
      v69._unint64_t object = (void *)0xE900000000000066LL;
      String.append(_:)(v69);
      uint64_t v70 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v39 = objc_msgSend((id)objc_opt_self(), sel_expressionForKeyPath_, v70);
      goto LABEL_30;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_28:
    swift_bridgeObjectRelease();
    id v29 = v41;
    goto LABEL_29;
  }

  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  id v59 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v60 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v61 = objc_msgSend(v59, sel_rangeOfString_, v60);
  uint64_t v63 = v62;
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  if (v61 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v40 = &selRef_initWithTransform_;
    goto LABEL_28;
  }

  if (__OFADD__(v61, v63))
  {
    __break(1u);
    goto LABEL_39;
  }

  StringProtocol._toUTF16Indices(_:)();
  swift_bridgeObjectRelease();
  id v29 = v41;
LABEL_33:
  uint64_t v71 = type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSExpression);
  uint64_t v86 = v71;
  *(void *)&__int128 v85 = v29;
  uint64_t v72 = (void *)objc_opt_self();
  uint64_t v73 = String._bridgeToObjectiveCImpl()();
  id v74 = v29;
  id v75 = objc_msgSend(v72, sel__newKeyPathExpressionForString_, v73);
  swift_unknownObjectRelease();
  if (v75)
  {
    *((void *)&v83 + 1) = v71;
    *(void *)&__int128 v82 = v75;
  }

  else
  {
    __int128 v82 = 0u;
    __int128 v83 = 0u;
  }

  id v76 = objc_allocWithZone((Class)&OBJC_CLASS___NSKeyPathExpression);
  uint64_t result = (uint64_t)@nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v85, &v82);
  if (result)
  {
    id v24 = (id)result;

    return (uint64_t)v24;
  }

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceMaximum<A>( uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.SequenceMaximum.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t PredicateExpressions.SequenceMinimum.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v88 = type metadata accessor for Optional();
  uint64_t v80 = *(void *)(v88 - 8);
  MEMORY[0x1895F8858](v88);
  uint64_t v11 = (char *)&v77 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v79 = (char *)&v77 - v14;
  __n128 v16 = MEMORY[0x1895F8858](v15);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))( (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5,  v7,  v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    uint64_t v78 = v12;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v82, (uint64_t)&v85);
    uint64_t v19 = v86;
    uint64_t v20 = v87;
    __swift_project_boxed_opaque_existential_1(&v85, v86);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, v19, v20);
    if (!v3)
    {
      id v29 = (id)v21;
      char v30 = v22;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      if ((v30 & 1) != 0)
      {
        LOBYTE(v85) = 1;
        id v31 = v29;
        uint64_t v32 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v33 = (void *)objc_opt_self();
        id v34 = objc_msgSend(v33, sel_expressionForConstantValue_, v32);
        swift_unknownObjectRelease();
        LOBYTE(v85) = 0;
        id v35 = objc_msgSend(v33, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v29 = objc_msgSend(v33, sel_expressionForConditional_trueExpression_falseExpression_, v31, v34, v35);
      }

      goto LABEL_17;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    uint64_t v4 = 0LL;
    uint64_t v23 = v3;
    uint64_t v12 = v78;
  }

  else
  {
    uint64_t v84 = 0LL;
    __int128 v82 = 0u;
    __int128 v83 = 0u;
    outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v23 = 0LL;
  }

  *(void *)&__int128 v85 = MEMORY[0x18961AFE8];
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v8 + 16))(&v85, v7, v8);
  id v24 = v4;
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v11, 1LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v11, v88);
    if (v23) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, 0LL, 1LL, AssociatedTypeWitness);
  uint64_t v25 = v79;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v79, v11, AssociatedTypeWitness);
  v81[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v81);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))( boxed_opaque_existential_1,  v25,  AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)v81, (uint64_t)&v82);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
  if (!*((void *)&v83 + 1))
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v25, AssociatedTypeWitness);
    outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for Any?);
    if (v23) {
      goto LABEL_11;
    }
LABEL_10:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v27 = 2;
LABEL_11:
    swift_willThrow();
    return (uint64_t)v24;
  }

  outlined init with take of Any(&v82, &v85);
  __swift_project_boxed_opaque_existential_1(&v85, v86);
  uint64_t v36 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v37 = v23;
  id v29 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v36);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v25, AssociatedTypeWitness);

LABEL_17:
  if (objc_msgSend(v29, sel_expressionType) == (id)1)
  {
    uint64_t v38 = String._bridgeToObjectiveCImpl()();
    id v39 = objc_msgSend((id)objc_opt_self(), sel_expressionForKeyPath_, v38);
LABEL_30:
    id v24 = v39;

    swift_unknownObjectRelease();
    return (uint64_t)v24;
  }

  if (objc_msgSend(v29, sel_expressionType) != (id)3) {
    goto LABEL_33;
  }
  id v40 = &selRef_initWithTransform_;
  id v41 = v29;
  id v42 = objc_msgSend(v29, sel_keyPath);
  id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  uint64_t v45 = v44;

  *(void *)&__int128 v85 = 64LL;
  *((void *)&v85 + 1) = 0xE100000000000000LL;
  *(void *)&__int128 v82 = v43;
  *((void *)&v82 + 1) = v45;
  if ((v45 & 0x1000000000000000LL) == 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v46 = String.subscript.getter();
    unint64_t v48 = v47;
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    swift_bridgeObjectRelease();
    v81[0] = 64LL;
    v81[1] = 0xE100000000000000LL;
    unint64_t v53 = Substring.init<A>(_:)();
    if ((v46 ^ v48) >= 0x4000 && (v53 ^ v54) >> 14)
    {
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v53,  v54,  v55,  v56,  0,  0,  0,  0,  0,  v46,  v48,  v50,  v52);
      char v58 = v57;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v29 = v41;
      if ((v58 & 1) == 0) {
        goto LABEL_33;
      }
LABEL_29:
      id v64 = [v29 v40[185]];
      id v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
      uint64_t v67 = v66;

      *(void *)&__int128 v85 = v65;
      *((void *)&v85 + 1) = v67;
      v68._uint64_t countAndFlagsBits = 46LL;
      v68._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v68);
      v69._uint64_t countAndFlagsBits = 0x6C65732E6E696D40LL;
      v69._unint64_t object = (void *)0xE900000000000066LL;
      String.append(_:)(v69);
      uint64_t v70 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v39 = objc_msgSend((id)objc_opt_self(), sel_expressionForKeyPath_, v70);
      goto LABEL_30;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_28:
    swift_bridgeObjectRelease();
    id v29 = v41;
    goto LABEL_29;
  }

  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  id v59 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v60 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v61 = objc_msgSend(v59, sel_rangeOfString_, v60);
  uint64_t v63 = v62;
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  if (v61 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v40 = &selRef_initWithTransform_;
    goto LABEL_28;
  }

  if (__OFADD__(v61, v63))
  {
    __break(1u);
    goto LABEL_39;
  }

  StringProtocol._toUTF16Indices(_:)();
  swift_bridgeObjectRelease();
  id v29 = v41;
LABEL_33:
  uint64_t v71 = type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSExpression);
  uint64_t v86 = v71;
  *(void *)&__int128 v85 = v29;
  uint64_t v72 = (void *)objc_opt_self();
  uint64_t v73 = String._bridgeToObjectiveCImpl()();
  id v74 = v29;
  id v75 = objc_msgSend(v72, sel__newKeyPathExpressionForString_, v73);
  swift_unknownObjectRelease();
  if (v75)
  {
    *((void *)&v83 + 1) = v71;
    *(void *)&__int128 v82 = v75;
  }

  else
  {
    __int128 v82 = 0u;
    __int128 v83 = 0u;
  }

  id v76 = objc_allocWithZone((Class)&OBJC_CLASS___NSKeyPathExpression);
  uint64_t result = (uint64_t)@nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v85, &v82);
  if (result)
  {
    id v24 = (id)result;

    return (uint64_t)v24;
  }

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceMinimum<A>( uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.SequenceMinimum.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

char *PredicateExpressions.Conditional.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v88 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v89 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v95 = *(void *)(v9 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v93 = type metadata accessor for Optional();
  uint64_t v92 = *(void *)(v93 - 8);
  MEMORY[0x1895F8858](v93);
  uint64_t v87 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v96 = (char *)&v84 - v14;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v99 = AssociatedTypeWitness;
  uint64_t v100 = v15;
  MEMORY[0x1895F8858](v16);
  uint64_t v86 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v90 = (char *)&v84 - v19;
  uint64_t v97 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v20);
  id v98 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = *(void *)(a2 + 16);
  __n128 v24 = MEMORY[0x1895F8858](v23);
  (*(void (**)(char *, char *, uint64_t, __n128))(v26 + 16))( (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v2,  v22,  v24);
  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v27 = swift_dynamicCast();
  uint64_t v28 = MEMORY[0x18961AFE8];
  uint64_t v91 = v7;
  uint64_t v94 = a1;
  if (v27)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v104, (uint64_t)&v107);
    uint64_t v29 = v108;
    uint64_t v30 = v109;
    __swift_project_boxed_opaque_existential_1(&v107, v108);
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(a1, v29, v30);
    if (!v3)
    {
      id v35 = (id)v31;
      char v36 = v32;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
      if ((v36 & 1) != 0)
      {
LABEL_17:
        id v85 = v35;
        uint64_t v41 = *(int *)(a2 + 68);
        uint64_t v84 = v2;
        (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v98, &v2[v41], v10);
        int v42 = swift_dynamicCast();
        uint64_t v43 = v99;
        if (v42)
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v104, (uint64_t)&v107);
          uint64_t v44 = v108;
          uint64_t v45 = v109;
          __swift_project_boxed_opaque_existential_1(&v107, v108);
          uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v94, v44, v45);
          uint64_t v48 = v100;
          unint64_t v54 = (char *)v46;
          char v55 = v47;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
          if ((v55 & 1) != 0)
          {
            LOBYTE(v107) = 1;
            char v57 = v54;
            uint64_t v58 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
            id v59 = (void *)objc_opt_self();
            id v60 = objc_msgSend(v59, sel_expressionForConstantValue_, v58);
            swift_unknownObjectRelease();
            LOBYTE(v107) = 0;
            id v61 = objc_msgSend(v59, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
            swift_unknownObjectRelease();
            uint64_t v62 = v59;
            uint64_t v48 = v100;
            id v98 = (char *) objc_msgSend( v62,  sel_expressionForConditional_trueExpression_falseExpression_,  v57,  v60,  v61);
          }

          else
          {
            id v98 = v54;
          }
        }

        else
        {
          uint64_t v106 = 0LL;
          __int128 v104 = 0u;
          __int128 v105 = 0u;
          outlined destroy of Any?( (uint64_t)&v104,  &demangling cache variable for type metadata for ConvertibleExpression?);
          uint64_t v48 = v100;
          uint64_t v49 = v96;
          *(void *)&__int128 v107 = MEMORY[0x18961AFE8];
          (*(void (**)(__int128 *, uint64_t))(v95 + 16))(&v107, v10);
          uint64_t v2 = v49;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v49, 0LL, 1LL, v43);
          uint64_t v50 = v90;
          (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v90, v49, v43);
          uint64_t v103 = v43;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v102);
          (*(void (**)(uint64_t *, char *, uint64_t))(v48 + 16))(boxed_opaque_existential_1, v50, v43);
          _expressionCompatibleValue(for:)((uint64_t)v102, (uint64_t)&v104);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
          if (!*((void *)&v105 + 1))
          {
            (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v43);
            outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for Any?);
            uint64_t v52 = v85;
            lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
            swift_allocError();
            *unint64_t v53 = 2;
            swift_willThrow();

            return v2;
          }

          outlined init with take of Any(&v104, &v107);
          __swift_project_boxed_opaque_existential_1(&v107, v108);
          uint64_t v56 = _bridgeAnythingToObjectiveC<A>(_:)();
          id v98 = (char *)objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v56);
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v43);
        }

        uint64_t v63 = v91;
        uint64_t v64 = v94;
        (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v89, &v84[*(int *)(a2 + 72)], v91);
        if (swift_dynamicCast())
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v104, (uint64_t)&v107);
          uint64_t v65 = v108;
          uint64_t v66 = v109;
          __swift_project_boxed_opaque_existential_1(&v107, v108);
          id v73 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v64, v65, v66);
          char v75 = v74;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
          if ((v75 & 1) != 0)
          {
            LOBYTE(v107) = 1;
            id v76 = v73;
            uint64_t v77 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
            uint64_t v78 = (void *)objc_opt_self();
            id v79 = objc_msgSend(v78, sel_expressionForConstantValue_, v77);
            swift_unknownObjectRelease();
            LOBYTE(v107) = 0;
            id v80 = objc_msgSend(v78, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
            swift_unknownObjectRelease();
            id v73 = objc_msgSend(v78, sel_expressionForConditional_trueExpression_falseExpression_, v76, v79, v80);
          }
        }

        else
        {
          uint64_t v106 = 0LL;
          __int128 v104 = 0u;
          __int128 v105 = 0u;
          outlined destroy of Any?( (uint64_t)&v104,  &demangling cache variable for type metadata for ConvertibleExpression?);
          *(void *)&__int128 v107 = MEMORY[0x18961AFE8];
          uint64_t v67 = v87;
          (*(void (**)(__int128 *, uint64_t))(*(void *)(a2 + 56) + 16LL))(&v107, v63);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v67, 0LL, 1LL, v43);
          Swift::String v68 = v86;
          (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v86, v67, v43);
          uint64_t v103 = v43;
          Swift::String v69 = __swift_allocate_boxed_opaque_existential_1(v102);
          (*(void (**)(uint64_t *, char *, uint64_t))(v48 + 16))(v69, v68, v43);
          _expressionCompatibleValue(for:)((uint64_t)v102, (uint64_t)&v104);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
          if (!*((void *)&v105 + 1))
          {
            (*(void (**)(char *, uint64_t))(v48 + 8))(v68, v43);
            outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for Any?);
            uint64_t v70 = v85;
            uint64_t v2 = v98;
            lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
            swift_allocError();
            *uint64_t v71 = 2;
            swift_willThrow();

            return v2;
          }

          outlined init with take of Any(&v104, &v107);
          __swift_project_boxed_opaque_existential_1(&v107, v108);
          uint64_t v81 = _bridgeAnythingToObjectiveC<A>(_:)();
          id v73 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v81);
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v68, v43);
        }

        __int128 v82 = v85;
        __int128 v83 = v98;
        uint64_t v2 = (char *) objc_msgSend( (id)objc_opt_self(),  sel_expressionForConditional_trueExpression_falseExpression_,  v85,  v98,  v73);

        return v2;
      }

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Conditional<A, B, C>( uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.Conditional.convert(state:)(a1, a2);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

void (**PredicateExpressions.NilCoalesce.convert(state:)( void (**a1)(char *, char *, void), void *a2))(char *, char *, void)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v8 = a2[3];
  uint64_t v74 = a2[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v73 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v71 = (char *)&v70 - v10;
  uint64_t v78 = v8;
  uint64_t v76 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v77 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v81 = (void *)type metadata accessor for Optional();
  uint64_t v14 = *(v81 - 1);
  MEMORY[0x1895F8858](v81);
  uint64_t v16 = (char *)&v70 - v15;
  __int128 v82 = *(void (***)(char *, char *, void))(v13 - 8);
  uint64_t v83 = v13;
  MEMORY[0x1895F8858](v17);
  id v80 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  id v79 = (char *)&v70 - v20;
  uint64_t v92 = a2;
  uint64_t v21 = a2[2];
  __n128 v23 = MEMORY[0x1895F8858](v22);
  uint64_t v26 = v5;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))( (char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5,  v21,  v23);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v27 = swift_dynamicCast();
  uint64_t v72 = a1;
  if (v27)
  {
    uint64_t v70 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v86, (uint64_t)&v89);
    uint64_t v29 = v90;
    uint64_t v28 = v91;
    __swift_project_boxed_opaque_existential_1(&v89, v90);
    uint64_t v30 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v28 + 16))(a1, v29, v28);
    char v32 = v3;
    if (!v3)
    {
      id v38 = (void *)v30;
      char v39 = v31;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
      uint64_t v33 = v26;
      if ((v39 & 1) != 0)
      {
        LOBYTE(v89) = 1;
        id v41 = v38;
        uint64_t v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v43 = (void *)objc_opt_self();
        id v44 = objc_msgSend(v43, sel_expressionForConstantValue_, v42);
        swift_unknownObjectRelease();
        LOBYTE(v89) = 0;
        id v45 = objc_msgSend(v43, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        uint64_t v81 = objc_msgSend(v43, sel_expressionForConditional_trueExpression_falseExpression_, v41, v44, v45);
      }

      else
      {
        uint64_t v81 = v38;
      }

      uint64_t AssociatedTypeWitness = v70;
      goto LABEL_18;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
    uint64_t v4 = 0LL;
    uint64_t AssociatedTypeWitness = v70;
  }

  else
  {
    uint64_t v88 = 0LL;
    __int128 v86 = 0u;
    __int128 v87 = 0u;
    outlined destroy of Any?((uint64_t)&v86, &demangling cache variable for type metadata for ConvertibleExpression?);
    char v32 = 0LL;
  }

  uint64_t v33 = v26;
  *(void *)&__int128 v89 = MEMORY[0x18961AFE8];
  (*(void (**)(__int128 *, uint64_t))(v92[4] + 16LL))(&v89, v21);
  if (!v4)
  {
    a1 = v82;
    uint64_t v35 = v83;
    ((void (*)(char *, void, uint64_t, uint64_t))v82[7])(v16, 0LL, 1LL, v83);
    char v36 = v79;
    a1[4](v79, v16, v35);
    uint64_t v85 = v35;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v84);
    a1[2]((char *)boxed_opaque_existential_1, v36, v35);
    _expressionCompatibleValue(for:)((uint64_t)v84, (uint64_t)&v86);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
    if (!*((void *)&v87 + 1))
    {
      ((void (*)(char *, uint64_t))a1[1])(v36, v35);
      outlined destroy of Any?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
      if (v32) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }

    outlined init with take of Any(&v86, &v89);
    __swift_project_boxed_opaque_existential_1(&v89, v90);
    uint64_t v40 = _bridgeAnythingToObjectiveC<A>(_:)();
    uint64_t v81 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v40);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
    ((void (*)(char *, uint64_t))a1[1])(v36, v35);

LABEL_18:
    uint64_t v46 = v78;
    char v47 = v80;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v77, v33 + *((int *)v92 + 13), v78);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v86, (uint64_t)&v89);
      uint64_t v48 = v90;
      uint64_t v49 = v91;
      __swift_project_boxed_opaque_existential_1(&v89, v90);
      id v55 = (id)(*(uint64_t (**)(void, uint64_t, uint64_t))(v49 + 16))(v72, v48, v49);
      char v57 = v56;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
      if ((v57 & 1) != 0)
      {
        LOBYTE(v89) = 1;
        id v58 = v55;
        uint64_t v59 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v60 = (void *)objc_opt_self();
        id v61 = objc_msgSend(v60, sel_expressionForConstantValue_, v59);
        swift_unknownObjectRelease();
        LOBYTE(v89) = 0;
        id v62 = objc_msgSend(v60, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v55 = objc_msgSend(v60, sel_expressionForConditional_trueExpression_falseExpression_, v58, v61, v62);
      }

      uint64_t v63 = v81;
    }

    else
    {
      uint64_t v88 = 0LL;
      __int128 v86 = 0u;
      __int128 v87 = 0u;
      outlined destroy of Any?((uint64_t)&v86, &demangling cache variable for type metadata for ConvertibleExpression?);
      a1 = 0LL;
      *(void *)&__int128 v89 = MEMORY[0x18961AFE8];
      (*(void (**)(__int128 *, uint64_t))(v74 + 16))(&v89, v46);
      uint64_t v50 = v73;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v47, 0LL, 1LL, AssociatedTypeWitness);
      uint64_t v51 = v71;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v71, v47, AssociatedTypeWitness);
      uint64_t v85 = AssociatedTypeWitness;
      uint64_t v52 = __swift_allocate_boxed_opaque_existential_1(v84);
      (*(void (**)(uint64_t *, char *, uint64_t))(v50 + 16))(v52, v51, AssociatedTypeWitness);
      _expressionCompatibleValue(for:)((uint64_t)v84, (uint64_t)&v86);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
      uint64_t v63 = v81;
      if (!*((void *)&v87 + 1))
      {
        (*(void (**)(char *, uint64_t))(v50 + 8))(v51, AssociatedTypeWitness);
        outlined destroy of Any?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *unint64_t v53 = 2;
        swift_willThrow();

        return a1;
      }

      outlined init with take of Any(&v86, &v89);
      __swift_project_boxed_opaque_existential_1(&v89, v90);
      uint64_t v64 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v55 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v64);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v51, AssociatedTypeWitness);
    }

    uint64_t v65 = (void *)objc_opt_self();
    id v66 = v63;
    id v67 = objc_msgSend(v65, sel_expressionForConstantValue_, 0);
    id v68 = objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v66,  v67,  0,  5,  0);

    id v69 = v68;
    a1 = (void (**)(char *, char *, void)) objc_msgSend( v65,  sel_expressionForConditional_trueExpression_falseExpression_,  v69,  v66,  v55);

    return a1;
  }

  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v82[7])(v16, 1LL, 1LL, v83);
  (*(void (**)(char *, void *))(v14 + 8))(v16, v81);
  if (!v32)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *id v34 = 2;
  }

void (**protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.NilCoalesce<A, B>( void (**a1)(char *, char *, void), void *a2))(char *, char *, void)
{
  uint64_t result = PredicateExpressions.NilCoalesce.convert(state:)(a1, a2);
  if (v2) {
    return (void (**)(char *, char *, void))v4;
  }
  return result;
}

uint64_t PredicateExpressions.OptionalFlatMap.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v5 = a2[4];
  uint64_t v121 = a2[7];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v119 = type metadata accessor for Optional();
  uint64_t v118 = *(void *)(v119 - 8);
  MEMORY[0x1895F8858](v119);
  uint64_t v122 = (char *)&v115 - v7;
  uint64_t v124 = AssociatedTypeWitness;
  uint64_t v123 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v120 = (char *)&v115 - v9;
  uint64_t v129 = v5;
  uint64_t v10 = *(void *)(v5 - 8);
  uint64_t v11 = v2;
  uint64_t v126 = v10;
  MEMORY[0x1895F8858](v12);
  uint64_t v127 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v115 - v17;
  uint64_t v131 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v14 - 8);
  MEMORY[0x1895F8858](v19);
  __int128 v130 = (char *)&v115 - v20;
  char v141 = a2;
  uint64_t v21 = a2[2];
  __n128 v23 = MEMORY[0x1895F8858](v22);
  (*(void (**)(char *, char *, uint64_t, __n128))(v25 + 16))( (char *)&v115 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v2,  v21,  v23);
  uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v26 = swift_dynamicCast();
  uint64_t v27 = MEMORY[0x18961AFE8];
  uint64_t v128 = a1;
  if (!v26)
  {
    uint64_t v137 = 0LL;
    __int128 v135 = 0u;
    __int128 v136 = 0u;
    outlined destroy of Any?((uint64_t)&v135, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v33 = 0LL;
    id v34 = v132;
    goto LABEL_5;
  }

  uint64_t v117 = v11;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v135, (uint64_t)&v138);
  uint64_t v29 = v139;
  uint64_t v28 = v140;
  __swift_project_boxed_opaque_existential_1(&v138, v139);
  uint64_t v30 = v132;
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(a1, v29, v28);
  uint64_t v33 = v30;
  if (v30)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
    id v34 = 0LL;
    uint64_t v11 = v117;
    uint64_t v27 = MEMORY[0x18961AFE8];
LABEL_5:
    *(void *)&__int128 v138 = v27;
    (*(void (**)(__int128 *, uint64_t))(v141[6] + 16LL))(&v138, v21);
    if (v34)
    {

      v131[7](v18, 1LL, 1LL, v14);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      if (v33)
      {
LABEL_8:
        swift_willThrow();
        return (uint64_t)v11;
      }

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.OptionalFlatMap<A, B, C, D>( uint64_t a1, void *a2)
{
  uint64_t result = PredicateExpressions.OptionalFlatMap.convert(state:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

id PredicateExpressions.CollectionIndexSubscript<>.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = a2[3];
  uint64_t v86 = a2[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v83 = type metadata accessor for Optional();
  uint64_t v82 = *(void *)(v83 - 8);
  MEMORY[0x1895F8858](v83);
  uint64_t v92 = (char *)&v80 - v8;
  uint64_t v85 = AssociatedTypeWitness;
  uint64_t v93 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v9);
  id v84 = (char *)&v80 - v10;
  uint64_t v91 = v6;
  uint64_t v87 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v11);
  id v88 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a2[4];
  uint64_t v89 = a2;
  uint64_t v14 = a2[2];
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v96 = *(void *)(v16 - 8);
  uint64_t v97 = v16;
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v80 - v17;
  uint64_t v98 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v19);
  id v95 = (char *)&v80 - v20;
  uint64_t v21 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v22);
  uint64_t v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1837232D0;
  int v26 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v108 = v3;
  v26(v24, v3, v14);
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v27 = swift_dynamicCast();
  uint64_t v28 = MEMORY[0x18961AFE8];
  uint64_t v90 = a1;
  if (v27)
  {
    uint64_t v81 = v25;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v102, (uint64_t)&v105);
    uint64_t v30 = v106;
    uint64_t v29 = v107;
    __swift_project_boxed_opaque_existential_1(&v105, v106);
    uint64_t v31 = v99;
    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(a1, v30, v29);
    id v34 = v31;
    if (!v31)
    {
      id v41 = (id)v32;
      char v42 = v33;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
      uint64_t v99 = 0LL;
      if ((v42 & 1) != 0)
      {
        LOBYTE(v105) = 1;
        id v43 = v41;
        uint64_t v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v45 = (void *)objc_opt_self();
        id v46 = objc_msgSend(v45, sel_expressionForConstantValue_, v44);
        swift_unknownObjectRelease();
        LOBYTE(v105) = 0;
        id v47 = objc_msgSend(v45, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v41 = objc_msgSend(v45, sel_expressionForConditional_trueExpression_falseExpression_, v43, v46, v47);
      }

      uint64_t v25 = v81;
      goto LABEL_17;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
    uint64_t v35 = 0LL;
    uint64_t v25 = v81;
  }

  else
  {
    uint64_t v104 = 0LL;
    __int128 v102 = 0u;
    __int128 v103 = 0u;
    outlined destroy of Any?((uint64_t)&v102, &demangling cache variable for type metadata for ConvertibleExpression?);
    id v34 = 0LL;
    uint64_t v35 = v99;
  }

  *(void *)&__int128 v105 = v28;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v13 + 16))(&v105, v14, v13);
  id v36 = v35;
  if (!v35)
  {
    uint64_t v38 = v98;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v18, 0LL, 1LL, v15);
    id v39 = v95;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v95, v18, v15);
    uint64_t v101 = v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v100);
    (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(boxed_opaque_existential_1, v39, v15);
    _expressionCompatibleValue(for:)((uint64_t)v100, (uint64_t)&v102);
    uint64_t v99 = 0LL;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
    if (!*((void *)&v103 + 1))
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v15);
      outlined destroy of Any?((uint64_t)&v102, &demangling cache variable for type metadata for Any?);
      if (v34) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }

    outlined init with take of Any(&v102, &v105);
    __swift_project_boxed_opaque_existential_1(&v105, v106);
    uint64_t v48 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v41 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v48);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v15);

LABEL_17:
    uint64_t v49 = v93;
    uint64_t v50 = v92;
    uint64_t v51 = v91;
    uint64_t v52 = v90;
    uint64_t v53 = v89;
    int v54 = v88;
    uint64_t v55 = v87;
    uint64_t v98 = type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSExpression);
    *(void *)(v25 + 56) = v98;
    *(void *)(v25 + 32) = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v108 + *((int *)v53 + 15), v51);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v102, (uint64_t)&v105);
      uint64_t v56 = v106;
      uint64_t v57 = v107;
      __swift_project_boxed_opaque_existential_1(&v105, v106);
      uint64_t v58 = v99;
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v52, v56, v57);
      uint64_t v61 = v58;
      if (!v58)
      {
        id v69 = (id)v59;
        char v70 = v60;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
        if ((v70 & 1) != 0)
        {
          LOBYTE(v105) = 1;
          id v71 = v69;
          uint64_t v72 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          uint64_t v73 = (void *)objc_opt_self();
          id v74 = objc_msgSend(v73, sel_expressionForConstantValue_, v72);
          swift_unknownObjectRelease();
          LOBYTE(v105) = 0;
          id v75 = objc_msgSend(v73, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          id v69 = objc_msgSend(v73, sel_expressionForConditional_trueExpression_falseExpression_, v71, v74, v75);
        }

        goto LABEL_35;
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
      uint64_t v62 = 0LL;
      char v63 = v61;
    }

    else
    {
      uint64_t v104 = 0LL;
      __int128 v102 = 0u;
      __int128 v103 = 0u;
      outlined destroy of Any?((uint64_t)&v102, &demangling cache variable for type metadata for ConvertibleExpression?);
      char v63 = 0LL;
      uint64_t v62 = v99;
    }

    *(void *)&__int128 v105 = MEMORY[0x18961AFE8];
    (*(void (**)(__int128 *, uint64_t))(v86 + 16))(&v105, v51);
    if (v62)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v50, 1LL, 1LL, v85);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v50, v83);
      id v36 = (id)(v25 + 32);
      if (v63) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }

    uint64_t v64 = v85;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v50, 0LL, 1LL, v85);
    uint64_t v65 = v84;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v84, v50, v64);
    uint64_t v101 = v64;
    uint64_t v66 = __swift_allocate_boxed_opaque_existential_1(v100);
    (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 16))(v66, v65, v64);
    _expressionCompatibleValue(for:)((uint64_t)v100, (uint64_t)&v102);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
    if (!*((void *)&v103 + 1))
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v84, v64);
      outlined destroy of Any?((uint64_t)&v102, &demangling cache variable for type metadata for Any?);
      id v36 = (id)(v25 + 32);
      if (v63) {
        goto LABEL_27;
      }
LABEL_26:
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *id v67 = 2;
LABEL_27:
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      goto LABEL_28;
    }

    outlined init with take of Any(&v102, &v105);
    __swift_project_boxed_opaque_existential_1(&v105, v106);
    uint64_t v76 = _bridgeAnythingToObjectiveC<A>(_:)();
    uint64_t v77 = v64;
    id v69 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v76);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v84, v77);

LABEL_35:
    *(void *)(v25 + 88) = v98;
    *(void *)(v25 + 64) = v69;
    uint64_t v78 = String._bridgeToObjectiveCImpl()();
    uint64_t v79 = _ContiguousArrayBuffer._asCocoaArray()();
    id v36 = objc_msgSend((id)objc_opt_self(), sel_expressionForFunction_arguments_, v78, v79);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v36;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v18, 1LL, 1LL, v15);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v18, v97);
  if (!v34)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v37 = 2;
  }

id protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( uint64_t a1, void *a2)
{
  id result = PredicateExpressions.CollectionIndexSubscript<>.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

id PredicateExpressions.DictionaryKeySubscript.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v65 = *(void *)(a2 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v63 = type metadata accessor for Optional();
  v62[1] = *(void *)(v63 - 8);
  MEMORY[0x1895F8858](v63);
  char v70 = (char *)v62 - v10;
  uint64_t v71 = AssociatedTypeWitness;
  uint64_t v64 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v11);
  v62[0] = (char *)v62 - v12;
  uint64_t v69 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v66 = (char *)v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_1837232D0;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v5, v15);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v20 = swift_dynamicCast();
  uint64_t v21 = MEMORY[0x18961AFE8];
  uint64_t v67 = a1;
  if (v20)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v75, (uint64_t)&v78);
    uint64_t v22 = v79;
    uint64_t v23 = v80;
    __swift_project_boxed_opaque_existential_1(&v78, v79);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(a1, v22, v23);
    if (!v3)
    {
      id v32 = (id)v24;
      char v33 = v25;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
      if ((v33 & 1) != 0)
      {
        LOBYTE(v78) = 1;
        id v34 = v32;
        uint64_t v35 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v36 = (void *)objc_opt_self();
        id v37 = objc_msgSend(v36, sel_expressionForConstantValue_, v35);
        swift_unknownObjectRelease();
        LOBYTE(v78) = 0;
        id v38 = objc_msgSend(v36, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v32 = objc_msgSend(v36, sel_expressionForConditional_trueExpression_falseExpression_, v34, v37, v38);
      }

      id v39 = (void *)v72;
      goto LABEL_18;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
    uint64_t v4 = 0LL;
    int v26 = v3;
    uint64_t v21 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v77 = 0LL;
    __int128 v75 = 0u;
    __int128 v76 = 0u;
    outlined destroy of Any?((uint64_t)&v75, &demangling cache variable for type metadata for ConvertibleExpression?);
    int v26 = 0LL;
  }

  *(void *)&__int128 v78 = v21;
  (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(void *)(a2 + 40) + 16LL))(&v81, &v78, v15);
  id v27 = v4;
  if (v4)
  {

    uint64_t v28 = v72;
LABEL_10:
    if (!v26)
    {
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *uint64_t v30 = 2;
    }

    swift_willThrow();
    *(void *)(v28 + 16) = 0LL;
    goto LABEL_13;
  }

  uint64_t v29 = v81;
  uint64_t v28 = v72;
  if (!v81) {
    goto LABEL_10;
  }
  uint64_t v74 = type metadata accessor for Dictionary();
  v73[0] = v29;
  swift_bridgeObjectRetain();
  _expressionCompatibleValue(for:)((uint64_t)v73, (uint64_t)&v75);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  if (!*((void *)&v76 + 1))
  {
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v75, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }

  outlined init with take of Any(&v75, &v78);
  __swift_project_boxed_opaque_existential_1(&v78, v79);
  uint64_t v45 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v32 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v45);
  id v39 = (void *)v72;
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
  swift_bridgeObjectRelease();

LABEL_18:
  uint64_t v40 = v67;
  id v41 = v66;
  uint64_t v72 = type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSExpression);
  v39[7] = v72;
  v39[4] = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v41, v5 + *(int *)(a2 + 68), v8);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v75, (uint64_t)&v78);
    uint64_t v42 = v79;
    uint64_t v43 = v80;
    __swift_project_boxed_opaque_existential_1(&v78, v79);
    id v51 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v40, v42, v43);
    char v53 = v52;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
    if ((v53 & 1) != 0)
    {
      LOBYTE(v78) = 1;
      id v54 = v51;
      uint64_t v55 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      uint64_t v56 = (void *)objc_opt_self();
      id v57 = objc_msgSend(v56, sel_expressionForConstantValue_, v55);
      swift_unknownObjectRelease();
      LOBYTE(v78) = 0;
      id v58 = objc_msgSend(v56, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      id v51 = objc_msgSend(v56, sel_expressionForConditional_trueExpression_falseExpression_, v54, v57, v58);
    }

    goto LABEL_28;
  }

  uint64_t v77 = 0LL;
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  outlined destroy of Any?((uint64_t)&v75, &demangling cache variable for type metadata for ConvertibleExpression?);
  uint64_t v44 = v70;
  *(void *)&__int128 v78 = MEMORY[0x18961AFE8];
  (*(void (**)(__int128 *, uint64_t))(v65 + 16))(&v78, v8);
  uint64_t v46 = v64;
  uint64_t v47 = v71;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v44, 0LL, 1LL, v71);
  uint64_t v48 = v62[0];
  (*(void (**)(void, char *, uint64_t))(v46 + 32))(v62[0], v44, v47);
  uint64_t v74 = v47;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v73);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v46 + 16))(boxed_opaque_existential_1, v48, v47);
  _expressionCompatibleValue(for:)((uint64_t)v73, (uint64_t)&v75);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  if (*((void *)&v76 + 1))
  {
    outlined init with take of Any(&v75, &v78);
    __swift_project_boxed_opaque_existential_1(&v78, v79);
    uint64_t v59 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v51 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v59);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v71);

LABEL_28:
    v39[11] = v72;
    v39[8] = v51;
    uint64_t v60 = String._bridgeToObjectiveCImpl()();
    uint64_t v61 = _ContiguousArrayBuffer._asCocoaArray()();
    id v27 = objc_msgSend((id)objc_opt_self(), sel_expressionForFunction_arguments_, v60, v61);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v27;
  }

  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v71);
  outlined destroy of Any?((uint64_t)&v75, &demangling cache variable for type metadata for Any?);
  id v27 = v39 + 4;
  lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
  swift_allocError();
  *uint64_t v50 = 2;
  swift_willThrow();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v39 + 4));
  v39[2] = 0LL;
LABEL_13:
  swift_release();
  return v27;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.DictionaryKeySubscript<A, B, C>( uint64_t a1, uint64_t a2)
{
  id result = PredicateExpressions.DictionaryKeySubscript.convert(state:)(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

void (**PredicateExpressions.CollectionContainsCollection<>.convert(state:)( uint64_t a1, void *a2))(char *, char *, uint64_t)
{
  uint64_t v3 = v2;
  uint64_t v84 = a1;
  uint64_t v5 = a2[3];
  uint64_t v74 = a2[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v72 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v80 = (char *)&v69 - v8;
  uint64_t v73 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v71 = (char *)&v69 - v10;
  uint64_t v11 = a2[4];
  __int128 v78 = a2;
  uint64_t v12 = a2[2];
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v82 = *(void *)(v14 - 8);
  uint64_t v83 = v14;
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v69 - v15;
  uint64_t v85 = *(void (***)(char *, char *, uint64_t))(v13 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v81 = (char *)&v69 - v18;
  uint64_t v79 = v5;
  uint64_t v76 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v77 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v22 = MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v26 = *(void (**)(char *, void (**)(char *, char *, uint64_t), uint64_t, __n128))(v25 + 16);
  id v95 = v3;
  v26(v24, v3, v12, v22);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v27 = swift_dynamicCast();
  uint64_t v28 = MEMORY[0x18961AFE8];
  if (v27)
  {
    uint64_t v70 = v7;
    uint64_t v69 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v89, (uint64_t)&v92);
    uint64_t v30 = v93;
    uint64_t v29 = v94;
    __swift_project_boxed_opaque_existential_1(&v92, v93);
    id v31 = v86;
    id v86 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v84, v30, v29);
    char v33 = v31;
    if (!v31)
    {
      char v40 = v32;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
      if ((v40 & 1) != 0)
      {
        LOBYTE(v92) = 1;
        id v41 = v86;
        uint64_t v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v43 = (void *)objc_opt_self();
        id v44 = objc_msgSend(v43, sel_expressionForConstantValue_, v42);
        swift_unknownObjectRelease();
        LOBYTE(v92) = 0;
        id v45 = objc_msgSend(v43, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v86 = objc_msgSend(v43, sel_expressionForConditional_trueExpression_falseExpression_, v41, v44, v45);
      }

      uint64_t v46 = v69;
      uint64_t v47 = v80;
      uint64_t v48 = v79;
      goto LABEL_17;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    id v34 = 0LL;
    uint64_t v35 = v69;
    uint64_t v7 = v70;
    id v36 = v95;
    uint64_t v28 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v35 = AssociatedTypeWitness;
    uint64_t v91 = 0LL;
    __int128 v89 = 0u;
    __int128 v90 = 0u;
    outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for ConvertibleExpression?);
    char v33 = 0LL;
    id v36 = v95;
    id v34 = v86;
  }

  *(void *)&__int128 v92 = v28;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v11 + 16))(&v92, v12, v11);
  if (!v34)
  {
    id v36 = v85;
    ((void (*)(char *, void, uint64_t, uint64_t))v85[7])(v16, 0LL, 1LL, v13);
    id v38 = v81;
    v36[4](v81, v16, v13);
    uint64_t v88 = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v87);
    v36[2]((char *)boxed_opaque_existential_1, v38, v13);
    _expressionCompatibleValue(for:)((uint64_t)v87, (uint64_t)&v89);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    if (!*((void *)&v90 + 1))
    {
      ((void (*)(char *, uint64_t))v36[1])(v38, v13);
      outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
      if (v33) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }

    uint64_t v70 = v7;
    outlined init with take of Any(&v89, &v92);
    __swift_project_boxed_opaque_existential_1(&v92, v93);
    uint64_t v49 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v86 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v49);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    ((void (*)(char *, uint64_t))v36[1])(v38, v13);

    uint64_t v47 = v80;
    uint64_t v48 = v79;
    uint64_t v46 = v35;
LABEL_17:
    uint64_t v50 = v84;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v77, (char *)v95 + *((int *)v78 + 19), v48);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v89, (uint64_t)&v92);
      uint64_t v51 = v93;
      uint64_t v52 = v94;
      __swift_project_boxed_opaque_existential_1(&v92, v93);
      id v57 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v50, v51, v52);
      char v59 = v58;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
      if ((v59 & 1) != 0)
      {
        LOBYTE(v92) = 1;
        id v60 = v57;
        uint64_t v61 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v62 = (void *)objc_opt_self();
        id v63 = objc_msgSend(v62, sel_expressionForConstantValue_, v61);
        swift_unknownObjectRelease();
        LOBYTE(v92) = 0;
        id v64 = objc_msgSend(v62, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v57 = objc_msgSend(v62, sel_expressionForConditional_trueExpression_falseExpression_, v60, v63, v64);
      }
    }

    else
    {
      uint64_t v91 = 0LL;
      __int128 v89 = 0u;
      __int128 v90 = 0u;
      outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for ConvertibleExpression?);
      *(void *)&__int128 v92 = MEMORY[0x18961AFE8];
      (*(void (**)(__int128 *, uint64_t))(v74 + 16))(&v92, v48);
      uint64_t v53 = v73;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v47, 0LL, 1LL, v46);
      id v36 = (void (**)(char *, char *, uint64_t))v71;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v71, v47, v46);
      uint64_t v88 = v46;
      id v54 = __swift_allocate_boxed_opaque_existential_1(v87);
      (*(void (**)(uint64_t *, id, uint64_t))(v53 + 16))(v54, v36, v46);
      _expressionCompatibleValue(for:)((uint64_t)v87, (uint64_t)&v89);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      if (!*((void *)&v90 + 1))
      {
        (*(void (**)(void (**)(char *, char *, uint64_t), uint64_t))(v53 + 8))(v36, v46);
        outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *uint64_t v55 = 2;
        swift_willThrow();

        return v36;
      }

      outlined init with take of Any(&v89, &v92);
      __swift_project_boxed_opaque_existential_1(&v92, v93);
      uint64_t v65 = v36;
      uint64_t v66 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v57 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v66);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
      (*(void (**)(void (**)(char *, char *, uint64_t), uint64_t))(v53 + 8))(v65, v46);
    }

    id v67 = objc_allocWithZone((Class)&OBJC_CLASS___NSComparisonPredicate);
    id v68 = v86;
    id v36 = (void (**)(char *, char *, uint64_t))objc_msgSend( v67,  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v86,  v57,  0,  99,  0);

    return v36;
  }

  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v85[7])(v16, 1LL, 1LL, v13);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v16, v83);
  if (!v33)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *id v37 = 2;
  }

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, void, void))PredicateExpressions.CollectionContainsCollection<>.convert(state:));
}

void *PredicateExpressions.SequenceStartsWith<>.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v86 = a1;
  uint64_t v5 = a2[3];
  uint64_t v78 = a2[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v74 = type metadata accessor for Optional();
  uint64_t v73 = *(void *)(v74 - 8);
  MEMORY[0x1895F8858](v74);
  uint64_t v83 = (char *)&v71 - v7;
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v76 = (char *)&v71 - v10;
  uint64_t v82 = v5;
  uint64_t v79 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v80 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a2[4];
  uint64_t v81 = a2;
  uint64_t v14 = a2[2];
  uint64_t v15 = (void *)swift_getAssociatedTypeWitness();
  uint64_t v85 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v85 - 8);
  MEMORY[0x1895F8858](v85);
  uint64_t v18 = (char *)&v71 - v17;
  uint64_t v87 = *(v15 - 1);
  MEMORY[0x1895F8858](v19);
  uint64_t v84 = (char *)&v71 - v20;
  __n128 v22 = MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16);
  uint64_t v97 = v3;
  v26(v24, v3, v14, v22);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v28 = swift_dynamicCast();
  uint64_t v29 = MEMORY[0x18961AFE8];
  uint64_t v77 = v8;
  if (v28)
  {
    uint64_t v75 = v27;
    uint64_t v72 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
    uint64_t v31 = v95;
    uint64_t v30 = v96;
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    id v32 = v88;
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v86, v31, v30);
    uint64_t v35 = v32;
    if (!v32)
    {
      id v41 = (void *)v33;
      char v42 = v34;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      if ((v42 & 1) != 0)
      {
        LOBYTE(v94) = 1;
        id v44 = v41;
        uint64_t v45 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v46 = (void *)objc_opt_self();
        id v47 = objc_msgSend(v46, sel_expressionForConstantValue_, v45);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        id v48 = objc_msgSend(v46, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v88 = objc_msgSend(v46, sel_expressionForConditional_trueExpression_falseExpression_, v44, v47, v48);
      }

      else
      {
        id v88 = v41;
      }

      uint64_t AssociatedTypeWitness = v72;
      goto LABEL_18;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    id v36 = 0LL;
    uint64_t AssociatedTypeWitness = v72;
    uint64_t v29 = MEMORY[0x18961AFE8];
    uint64_t v27 = v75;
  }

  else
  {
    uint64_t v93 = 0LL;
    __int128 v91 = 0u;
    __int128 v92 = 0u;
    outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v35 = 0LL;
    id v36 = v88;
  }

  *(void *)&__int128 v94 = v29;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v13 + 16))(&v94, v14, v13);
  if (!v36)
  {
    uint64_t v38 = v87;
    (*(void (**)(char *, void, uint64_t, void *))(v87 + 56))(v18, 0LL, 1LL, v15);
    id v39 = v84;
    (*(void (**)(char *, char *, void *))(v38 + 32))(v84, v18, v15);
    __int128 v90 = v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v89);
    (*(void (**)(uint64_t *, char *, void *))(v38 + 16))(boxed_opaque_existential_1, v39, v15);
    _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
    if (!*((void *)&v92 + 1))
    {
      (*(void (**)(char *, void *))(v38 + 8))(v39, v15);
      outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
      if (v35) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }

    uint64_t v75 = v27;
    outlined init with take of Any(&v91, &v94);
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    uint64_t v43 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v88 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v43);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    (*(void (**)(char *, void *))(v38 + 8))(v39, v15);

LABEL_18:
    uint64_t v49 = v83;
    uint64_t v50 = v82;
    uint64_t v51 = v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v80, v97 + *((int *)v81 + 19), v82);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
      uint64_t v52 = v95;
      uint64_t v53 = v96;
      __swift_project_boxed_opaque_existential_1(&v94, v95);
      id v60 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v52, v53);
      char v62 = v61;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      if ((v62 & 1) != 0)
      {
        LOBYTE(v94) = 1;
        id v63 = v60;
        uint64_t v64 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v65 = (void *)objc_opt_self();
        id v66 = objc_msgSend(v65, sel_expressionForConstantValue_, v64);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        id v67 = objc_msgSend(v65, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v60 = objc_msgSend(v65, sel_expressionForConditional_trueExpression_falseExpression_, v63, v66, v67);
      }
    }

    else
    {
      uint64_t v93 = 0LL;
      __int128 v91 = 0u;
      __int128 v92 = 0u;
      outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
      uint64_t v15 = 0LL;
      *(void *)&__int128 v94 = MEMORY[0x18961AFE8];
      (*(void (**)(__int128 *, uint64_t))(v78 + 16))(&v94, v50);
      uint64_t v54 = v77;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v49, 0LL, 1LL, AssociatedTypeWitness);
      uint64_t v55 = v76;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v76, v49, AssociatedTypeWitness);
      __int128 v90 = (void *)AssociatedTypeWitness;
      uint64_t v56 = __swift_allocate_boxed_opaque_existential_1(v89);
      (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 16))(v56, v55, AssociatedTypeWitness);
      _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
      if (!*((void *)&v92 + 1))
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v76, AssociatedTypeWitness);
        outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
        id v57 = v88;
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *char v58 = 2;
        swift_willThrow();

        return v15;
      }

      outlined init with take of Any(&v91, &v94);
      __swift_project_boxed_opaque_existential_1(&v94, v95);
      uint64_t v68 = v54;
      uint64_t v69 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v60 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v69);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v76, AssociatedTypeWitness);
    }

    uint64_t v70 = v88;
    uint64_t v15 = objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v88,  v60,  0,  8,  0);

    return v15;
  }

  (*(void (**)(char *, uint64_t, uint64_t, void *))(v87 + 56))(v18, 1LL, 1LL, v15);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v85);
  if (!v35)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *id v37 = 2;
  }

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.SequenceStartsWith<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, void, void))PredicateExpressions.SequenceStartsWith<>.convert(state:));
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void, void))
{
  uint64_t result = a4(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
  if (v4) {
    return v6;
  }
  return result;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.NilLiteral<A>()
{
  return objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, 0);
}

char *PredicateExpressions.StringContainsRegex.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = a2[3];
  uint64_t v78 = a2[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v77 = type metadata accessor for Optional();
  uint64_t v76 = *(void *)(v77 - 8);
  MEMORY[0x1895F8858](v77);
  uint64_t v85 = (char *)&v74 - v8;
  uint64_t v9 = *(void **)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v74 = (char *)&v74 - v11;
  uint64_t v84 = v6;
  uint64_t v80 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v81 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a2[4];
  uint64_t v82 = a2;
  uint64_t v15 = a2[2];
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v88 = *(void *)(v17 - 8);
  uint64_t v89 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v74 - v18;
  uint64_t v90 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v87 = (char *)&v74 - v21;
  __n128 v23 = MEMORY[0x1895F8858](v22);
  uint64_t v25 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v26 + 16);
  uint64_t v100 = v3;
  v27(v25, v3, v15, v23);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v28 = swift_dynamicCast();
  uint64_t v29 = MEMORY[0x18961AFE8];
  uint64_t v86 = AssociatedTypeWitness;
  uint64_t v83 = a1;
  if (v28)
  {
    uint64_t v75 = v9;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v94, (uint64_t)&v97);
    uint64_t v31 = v98;
    uint64_t v30 = v99;
    __swift_project_boxed_opaque_existential_1(&v97, v98);
    id v32 = v91;
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(a1, v31, v30);
    uint64_t v35 = v32;
    if (!v32)
    {
      char v42 = (void *)v33;
      char v43 = v34;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
      if ((v43 & 1) != 0)
      {
        LOBYTE(v97) = 1;
        id v48 = v42;
        uint64_t v49 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v50 = (void *)objc_opt_self();
        id v51 = objc_msgSend(v50, sel_expressionForConstantValue_, v49);
        swift_unknownObjectRelease();
        LOBYTE(v97) = 0;
        id v52 = objc_msgSend(v50, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v91 = objc_msgSend(v50, sel_expressionForConditional_trueExpression_falseExpression_, v48, v51, v52);
      }

      else
      {
        id v91 = v42;
      }

      uint64_t v47 = v86;
      uint64_t v45 = v85;
      uint64_t v46 = v84;
      goto LABEL_18;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
    id v36 = 0LL;
    uint64_t v9 = v75;
    uint64_t v29 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v96 = 0LL;
    __int128 v94 = 0u;
    __int128 v95 = 0u;
    outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v35 = 0LL;
    id v36 = (char *)v91;
  }

  *(void *)&__int128 v97 = v29;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v14 + 16))(&v97, v15, v14);
  id v37 = v36;
  if (v36)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v19, 1LL, 1LL, v16);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v19, v89);
    if (v35)
    {
LABEL_8:
      swift_willThrow();
      return v37;
    }

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.StringContainsRegex<A, B>( uint64_t a1, void *a2)
{
  uint64_t result = PredicateExpressions.StringContainsRegex.convert(state:)(a1, a2);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

uint64_t NSComparisonResult.expression.getter(uint64_t a1)
{
  v13[3] = v3;
  v13[0] = a1;
  _expressionCompatibleValue(for:)((uint64_t)v13, (uint64_t)v14);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if (!v1)
  {
    uint64_t v5 = v15;
    if (v15)
    {
      uint64_t v6 = __swift_project_boxed_opaque_existential_1(v14, v15);
      uint64_t v7 = *(void *)(v5 - 8);
      __n128 v8 = MEMORY[0x1895F8858](v6);
      uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *, __n128))(v7 + 16))(v10, v8);
      uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }

    else
    {
      uint64_t v11 = 0LL;
    }

    id v12 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v11);
    swift_unknownObjectRelease();
    return (uint64_t)v12;
  }

  return result;
}

char *_expressionForComparisonResult<A, B>(_:_:state:options:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v150 = a4;
  uint64_t v164 = a2;
  uint64_t v156 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v154 = type metadata accessor for Optional();
  uint64_t v153 = *(void *)(v154 - 8);
  MEMORY[0x1895F8858](v154);
  int64_t v145 = (char *)&v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v162 = (char *)&v143 - v16;
  uint64_t v157 = AssociatedTypeWitness;
  uint64_t v161 = *(char **)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v144 = (char *)&v143 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  uint64_t v151 = (char *)&v143 - v20;
  uint64_t v160 = a6;
  uint64_t v159 = *(void (**)(char *, uint64_t, uint64_t))(a6 - 8);
  MEMORY[0x1895F8858](v21);
  id v146 = (char *)&v143 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v23);
  uint64_t v158 = (char *)&v143 - v24;
  uint64_t v168 = a7;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  uint64_t v26 = type metadata accessor for Optional();
  uint64_t v166 = *(void *)(v26 - 8);
  uint64_t v167 = v26;
  MEMORY[0x1895F8858](v26);
  uint64_t v152 = (char *)&v143 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v28);
  uint64_t v30 = (char *)&v143 - v29;
  uint64_t v169 = *(void *)(v25 - 8);
  MEMORY[0x1895F8858](v31);
  id v147 = (char *)&v143 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v33);
  uint64_t v35 = (char *)&v143 - v34;
  MEMORY[0x1895F8858](v36);
  uint64_t v149 = (char *)&v143 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v39 = MEMORY[0x1895F8858](v38);
  id v41 = *(void (**)(void, void, void, __n128))(v40 + 16);
  uint64_t v170 = a1;
  uint64_t v148 = (void (*)(char *, uint64_t, uint64_t))v41;
  v41((char *)&v143 - v42, a1, a5, v39);
  uint64_t v43 = a5;
  uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v44 = swift_dynamicCast();
  uint64_t v45 = MEMORY[0x18961AFE8];
  uint64_t v155 = a3;
  if (v44)
  {
    uint64_t v165 = v25;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v173, (uint64_t)&v176);
    uint64_t v46 = v177;
    uint64_t v47 = v178;
    __swift_project_boxed_opaque_existential_1(&v176, v177);
    id v48 = v179;
    uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(a3, v46, v47);
    id v51 = v48;
    if (!v48)
    {
      id v60 = (char *)v49;
      char v61 = v50;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      char v62 = v162;
      if ((v61 & 1) != 0)
      {
        LOBYTE(v176) = 1;
        uint64_t v65 = v60;
        uint64_t v66 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        id v67 = (void *)objc_opt_self();
        id v68 = objc_msgSend(v67, sel_expressionForConstantValue_, v66);
        swift_unknownObjectRelease();
        LOBYTE(v176) = 0;
        id v69 = objc_msgSend(v67, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        __int128 v179 = (char *)objc_msgSend(v67, sel_expressionForConditional_trueExpression_falseExpression_, v65, v68, v69);
      }

      else
      {
        __int128 v179 = v60;
      }

      uint64_t v64 = v164;
      uint64_t v55 = v43;
      goto LABEL_18;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
    id v52 = 0LL;
    uint64_t v53 = v51;
    uint64_t v25 = v165;
    uint64_t v54 = v168;
  }

  else
  {
    uint64_t v175 = 0LL;
    __int128 v173 = 0u;
    __int128 v174 = 0u;
    outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v53 = 0LL;
    uint64_t v54 = v168;
    id v52 = v179;
  }

  *(void *)&__int128 v176 = v45;
  uint64_t v55 = a5;
  (*(void (**)(__int128 *, uint64_t))(v54 + 16))(&v176, a5);
  if (!v52)
  {
    uint64_t v57 = v169;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v169 + 56))(v30, 0LL, 1LL, v25);
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v35, v30, v25);
    uint64_t v172 = v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v171);
    char v59 = *(void (**)(uint64_t *, char *, uint64_t))(v57 + 16);
    uint64_t v165 = v25;
    v59(boxed_opaque_existential_1, v35, v25);
    _expressionCompatibleValue(for:)((uint64_t)v171, (uint64_t)&v173);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v171);
    if (!*((void *)&v174 + 1))
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))(v35, v165);
      outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for Any?);
      if (v53) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }

    outlined init with take of Any(&v173, &v176);
    __swift_project_boxed_opaque_existential_1(&v176, v177);
    uint64_t v63 = _bridgeAnythingToObjectiveC<A>(_:)();
    __int128 v179 = (char *)objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v63);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v35, v165);

    uint64_t v64 = v164;
    char v62 = v162;
LABEL_18:
    uint64_t v70 = (void (*)(char *, uint64_t, uint64_t))*((void *)v159 + 2);
    uint64_t v71 = v160;
    v70(v158, v64, v160);
    int v72 = swift_dynamicCast();
    uint64_t v159 = v70;
    if (v72)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v173, (uint64_t)&v176);
      uint64_t v73 = v177;
      uint64_t v74 = v178;
      __swift_project_boxed_opaque_existential_1(&v176, v177);
      id v79 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v155, v73, v74);
      char v81 = v80;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      if ((v81 & 1) != 0)
      {
        LOBYTE(v176) = 1;
        id v82 = v79;
        uint64_t v83 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v84 = (void *)objc_opt_self();
        id v85 = objc_msgSend(v84, sel_expressionForConstantValue_, v83);
        swift_unknownObjectRelease();
        LOBYTE(v176) = 0;
        uint64_t v86 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v71 = v160;
        id v87 = objc_msgSend(v84, sel_expressionForConstantValue_, v86);
        swift_unknownObjectRelease();
        id v79 = objc_msgSend(v84, sel_expressionForConditional_trueExpression_falseExpression_, v82, v85, v87);
      }
    }

    else
    {
      uint64_t v175 = 0LL;
      __int128 v173 = 0u;
      __int128 v174 = 0u;
      outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for ConvertibleExpression?);
      *(void *)&__int128 v176 = MEMORY[0x18961AFE8];
      (*(void (**)(__int128 *, uint64_t))(v156 + 16))(&v176, v71);
      uint64_t v30 = v161;
      uint64_t v76 = v157;
      (*((void (**)(char *, void, uint64_t, uint64_t))v161 + 7))(v62, 0LL, 1LL, v157);
      uint64_t v77 = v151;
      (*((void (**)(char *, char *, uint64_t))v30 + 4))(v151, v62, v76);
      uint64_t v172 = v76;
      uint64_t v78 = __swift_allocate_boxed_opaque_existential_1(v171);
      (*((void (**)(uint64_t *, char *, uint64_t))v30 + 2))(v78, v77, v76);
      _expressionCompatibleValue(for:)((uint64_t)v171, (uint64_t)&v173);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v171);
      if (!*((void *)&v174 + 1))
      {
        (*((void (**)(char *, uint64_t))v161 + 1))(v77, v76);
        outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        _BYTE *v75 = 2;
        swift_willThrow();

        return v30;
      }

      outlined init with take of Any(&v173, &v176);
      __swift_project_boxed_opaque_existential_1(&v176, v177);
      uint64_t v88 = v76;
      uint64_t v89 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v79 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v89);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      (*((void (**)(char *, uint64_t))v161 + 1))(v77, v88);
    }

    uint64_t v90 = v152;
    id v91 = v149;
    Swift::String v92 = v148;
    id v93 = objc_allocWithZone((Class)&OBJC_CLASS___NSComparisonPredicate);
    __int128 v94 = v179;
    __int128 v95 = (char *)objc_msgSend( v93,  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v179,  v79,  0,  4,  v150);

    v92(v91, v170, v55);
    if (swift_dynamicCast())
    {
      __int128 v179 = v95;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v173, (uint64_t)&v176);
      uint64_t v96 = v177;
      uint64_t v97 = v178;
      __swift_project_boxed_opaque_existential_1(&v176, v177);
      id v104 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(v155, v96, v97);
      char v106 = v105;
      uint64_t v107 = MEMORY[0x18961AFE8];
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      if ((v106 & 1) != 0)
      {
        LOBYTE(v176) = 1;
        id v108 = v104;
        uint64_t v109 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v110 = (void *)objc_opt_self();
        id v111 = objc_msgSend(v110, sel_expressionForConstantValue_, v109);
        swift_unknownObjectRelease();
        LOBYTE(v176) = 0;
        id v112 = objc_msgSend(v110, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v104 = objc_msgSend(v110, sel_expressionForConditional_trueExpression_falseExpression_, v108, v111, v112);

        uint64_t v71 = v160;
      }
    }

    else
    {
      uint64_t v175 = 0LL;
      __int128 v173 = 0u;
      __int128 v174 = 0u;
      outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for ConvertibleExpression?);
      *(void *)&__int128 v176 = MEMORY[0x18961AFE8];
      uint64_t v98 = v90;
      (*(void (**)(__int128 *, uint64_t))(v168 + 16))(&v176, v55);
      uint64_t v99 = v165;
      __int128 v179 = v95;
      uint64_t v101 = v169;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v169 + 56))(v98, 0LL, 1LL, v165);
      __int128 v102 = v147;
      (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v147, v98, v99);
      uint64_t v172 = v99;
      __int128 v103 = __swift_allocate_boxed_opaque_existential_1(v171);
      (*(void (**)(uint64_t *, char *, uint64_t))(v101 + 16))(v103, v102, v99);
      _expressionCompatibleValue(for:)((uint64_t)v171, (uint64_t)&v173);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v171);
      if (!*((void *)&v174 + 1))
      {
        (*(void (**)(char *, uint64_t))(v169 + 8))(v102, v99);
        outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for Any?);
        uint64_t v30 = v179;
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *uint64_t v100 = 2;
        swift_willThrow();

        return v30;
      }

      uint64_t v107 = MEMORY[0x18961AFE8];
      outlined init with take of Any(&v173, &v176);
      __swift_project_boxed_opaque_existential_1(&v176, v177);
      uint64_t v113 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v104 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v113);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      (*(void (**)(char *, uint64_t))(v169 + 8))(v102, v99);
    }

    uint64_t v114 = v156;
    uint64_t v115 = v155;
    v159(v146, v164, v71);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v173, (uint64_t)&v176);
      uint64_t v116 = v177;
      uint64_t v117 = v178;
      __swift_project_boxed_opaque_existential_1(&v176, v177);
      id v125 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 16))(v115, v116, v117);
      char v127 = v126;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      if ((v127 & 1) != 0)
      {
        LOBYTE(v176) = 1;
        id v128 = v125;
        uint64_t v129 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        __int128 v130 = (void *)objc_opt_self();
        id v131 = objc_msgSend(v130, sel_expressionForConstantValue_, v129);
        swift_unknownObjectRelease();
        LOBYTE(v176) = 0;
        id v132 = objc_msgSend(v130, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v125 = objc_msgSend(v130, sel_expressionForConditional_trueExpression_falseExpression_, v128, v131, v132);
      }
    }

    else
    {
      uint64_t v175 = 0LL;
      __int128 v173 = 0u;
      __int128 v174 = 0u;
      outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for ConvertibleExpression?);
      uint64_t v118 = v145;
      *(void *)&__int128 v176 = v107;
      (*(void (**)(__int128 *, uint64_t, uint64_t))(v114 + 16))(&v176, v71, v114);
      uint64_t v119 = v161;
      uint64_t v120 = v157;
      (*((void (**)(char *, void, uint64_t, uint64_t))v161 + 7))(v118, 0LL, 1LL, v157);
      uint64_t v121 = v144;
      (*((void (**)(char *, char *, uint64_t))v119 + 4))(v144, v118, v120);
      uint64_t v172 = v120;
      uint64_t v122 = __swift_allocate_boxed_opaque_existential_1(v171);
      (*((void (**)(uint64_t *, char *, uint64_t))v119 + 2))(v122, v121, v120);
      _expressionCompatibleValue(for:)((uint64_t)v171, (uint64_t)&v173);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v171);
      uint64_t v30 = v179;
      if (!*((void *)&v174 + 1))
      {
        (*((void (**)(char *, uint64_t))v161 + 1))(v144, v157);
        outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        _BYTE *v123 = 2;
        swift_willThrow();

        return v30;
      }

      outlined init with take of Any(&v173, &v176);
      __swift_project_boxed_opaque_existential_1(&v176, v177);
      uint64_t v133 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v125 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v133);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      (*((void (**)(char *, uint64_t))v161 + 1))(v144, v157);
    }

    id v134 = objc_allocWithZone((Class)&OBJC_CLASS___NSComparisonPredicate);
    id v135 = objc_msgSend( v134,  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v104,  v125,  0,  0,  v150);

    __int128 v136 = (void *)NSComparisonResult.expression.getter(-1LL);
    uint64_t v137 = (void *)NSComparisonResult.expression.getter(1LL);
    __int128 v138 = (void *)objc_opt_self();
    id v139 = v135;
    id v140 = objc_msgSend(v138, sel_expressionForConditional_trueExpression_falseExpression_, v139, v136, v137);

    char v141 = (void *)NSComparisonResult.expression.getter(0LL);
    char v142 = v179;
    uint64_t v30 = (char *)objc_msgSend(v138, sel_expressionForConditional_trueExpression_falseExpression_, v142, v141, v140);

    return v30;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v169 + 56))(v30, 1LL, 1LL, v25);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v30, v167);
  if (!v53)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v56 = 2;
  }

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.StringCaseInsensitiveCompare<A, B>( uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.StringCaseInsensitiveCompare.convert(state:)(a1, a2, 1LL);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

char *PredicateExpressions.StringCaseInsensitiveCompare.convert(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = _expressionForComparisonResult<A, B>(_:_:state:options:)( v3,  v3 + *(int *)(a2 + 68),  a1,  a3,  *(void *)(a2 + 16),  *(void *)(a2 + 24),  *(void *)(a2 + 32),  *(void *)(a2 + 40));
  if (v4) {
    return (char *)v6;
  }
  return result;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.StringLocalizedCompare<A, B>( uint64_t a1, uint64_t a2)
{
  uint64_t result = PredicateExpressions.StringCaseInsensitiveCompare.convert(state:)(a1, a2, 8LL);
  if (v2) {
    return (char *)v4;
  }
  return result;
}

void *PredicateExpressions.StringLocalizedStandardContains.convert(state:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v86 = a1;
  uint64_t v5 = a2[3];
  uint64_t v78 = a2[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v74 = type metadata accessor for Optional();
  uint64_t v73 = *(void *)(v74 - 8);
  MEMORY[0x1895F8858](v74);
  uint64_t v83 = (char *)&v71 - v7;
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v76 = (char *)&v71 - v10;
  uint64_t v82 = v5;
  uint64_t v79 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v11);
  char v80 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a2[4];
  char v81 = a2;
  uint64_t v14 = a2[2];
  uint64_t v15 = (void *)swift_getAssociatedTypeWitness();
  uint64_t v85 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v85 - 8);
  MEMORY[0x1895F8858](v85);
  uint64_t v18 = (char *)&v71 - v17;
  uint64_t v87 = *(v15 - 1);
  MEMORY[0x1895F8858](v19);
  uint64_t v84 = (char *)&v71 - v20;
  __n128 v22 = MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16);
  uint64_t v97 = v3;
  v26(v24, v3, v14, v22);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  int v28 = swift_dynamicCast();
  uint64_t v29 = MEMORY[0x18961AFE8];
  uint64_t v77 = v8;
  if (v28)
  {
    uint64_t v75 = v27;
    uint64_t v72 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
    uint64_t v31 = v95;
    uint64_t v30 = v96;
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    id v32 = v88;
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v86, v31, v30);
    uint64_t v35 = v32;
    if (!v32)
    {
      id v41 = (void *)v33;
      char v42 = v34;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      if ((v42 & 1) != 0)
      {
        LOBYTE(v94) = 1;
        id v44 = v41;
        uint64_t v45 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v46 = (void *)objc_opt_self();
        id v47 = objc_msgSend(v46, sel_expressionForConstantValue_, v45);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        id v48 = objc_msgSend(v46, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v88 = objc_msgSend(v46, sel_expressionForConditional_trueExpression_falseExpression_, v44, v47, v48);
      }

      else
      {
        id v88 = v41;
      }

      uint64_t AssociatedTypeWitness = v72;
      goto LABEL_18;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    uint64_t v36 = 0LL;
    uint64_t AssociatedTypeWitness = v72;
    uint64_t v29 = MEMORY[0x18961AFE8];
    uint64_t v27 = v75;
  }

  else
  {
    uint64_t v93 = 0LL;
    __int128 v91 = 0u;
    __int128 v92 = 0u;
    outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v35 = 0LL;
    uint64_t v36 = v88;
  }

  *(void *)&__int128 v94 = v29;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v13 + 16))(&v94, v14, v13);
  if (!v36)
  {
    uint64_t v38 = v87;
    (*(void (**)(char *, void, uint64_t, void *))(v87 + 56))(v18, 0LL, 1LL, v15);
    __n128 v39 = v84;
    (*(void (**)(char *, char *, void *))(v38 + 32))(v84, v18, v15);
    uint64_t v90 = v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v89);
    (*(void (**)(uint64_t *, char *, void *))(v38 + 16))(boxed_opaque_existential_1, v39, v15);
    _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
    if (!*((void *)&v92 + 1))
    {
      (*(void (**)(char *, void *))(v38 + 8))(v39, v15);
      outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
      if (v35) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }

    uint64_t v75 = v27;
    outlined init with take of Any(&v91, &v94);
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    uint64_t v43 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v88 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v43);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    (*(void (**)(char *, void *))(v38 + 8))(v39, v15);

LABEL_18:
    uint64_t v49 = v83;
    uint64_t v50 = v82;
    uint64_t v51 = v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v80, v97 + *((int *)v81 + 17), v82);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
      uint64_t v52 = v95;
      uint64_t v53 = v96;
      __swift_project_boxed_opaque_existential_1(&v94, v95);
      id v60 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v52, v53);
      char v62 = v61;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      if ((v62 & 1) != 0)
      {
        LOBYTE(v94) = 1;
        id v63 = v60;
        uint64_t v64 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        uint64_t v65 = (void *)objc_opt_self();
        id v66 = objc_msgSend(v65, sel_expressionForConstantValue_, v64);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        id v67 = objc_msgSend(v65, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        id v60 = objc_msgSend(v65, sel_expressionForConditional_trueExpression_falseExpression_, v63, v66, v67);
      }
    }

    else
    {
      uint64_t v93 = 0LL;
      __int128 v91 = 0u;
      __int128 v92 = 0u;
      outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
      uint64_t v15 = 0LL;
      *(void *)&__int128 v94 = MEMORY[0x18961AFE8];
      (*(void (**)(__int128 *, uint64_t))(v78 + 16))(&v94, v50);
      uint64_t v54 = v77;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v49, 0LL, 1LL, AssociatedTypeWitness);
      uint64_t v55 = v76;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v76, v49, AssociatedTypeWitness);
      uint64_t v90 = (void *)AssociatedTypeWitness;
      uint64_t v56 = __swift_allocate_boxed_opaque_existential_1(v89);
      (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 16))(v56, v55, AssociatedTypeWitness);
      _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
      if (!*((void *)&v92 + 1))
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v76, AssociatedTypeWitness);
        outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
        uint64_t v57 = v88;
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *char v58 = 2;
        swift_willThrow();

        return v15;
      }

      outlined init with take of Any(&v91, &v94);
      __swift_project_boxed_opaque_existential_1(&v94, v95);
      uint64_t v68 = v54;
      uint64_t v69 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v60 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v69);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v76, AssociatedTypeWitness);
    }

    uint64_t v70 = v88;
    uint64_t v15 = objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v88,  v60,  0,  99,  11);

    return v15;
  }

  (*(void (**)(char *, uint64_t, uint64_t, void *))(v87 + 56))(v18, 1LL, 1LL, v15);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v85);
  if (!v35)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v37 = 2;
  }

void *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.StringLocalizedStandardContains<A, B>( uint64_t a1, void *a2)
{
  uint64_t result = PredicateExpressions.StringLocalizedStandardContains.convert(state:)(a1, a2);
  if (v2) {
    return (void *)v4;
  }
  return result;
}

unint64_t NSPredicate.init<A>(_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v47 = a1[5];
  uint64_t v6 = v47;
  uint64_t v7 = (void *)objc_opt_self();
  id v8 = objc_msgSend(v7, sel_expressionForEvaluatedObject);
  id v48 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  uint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v47);
  if ((v11 & 1) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  v9[(result >> 6) + 8] |= 1LL << result;
  uint64_t v12 = 8 * result;
  *(void *)(v9[6] + v12) = v6;
  *(void *)(v9[7] + v12) = v8;
  uint64_t v13 = v9[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t v38 = v3;
  v9[2] = v15;
  id v16 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PredicateExpressions.VariableID, NSExpression));
  swift_arrayDestroy();
  v49[0] = 1LL;
  v49[1] = v9;
  uint64_t v18 = a1[3];
  uint64_t v17 = a1[4];
  uint64_t v19 = __swift_project_boxed_opaque_existential_1(a1, v18);
  __n128 v20 = MEMORY[0x1895F8858](v19);
  (*(void (**)(char *, void *, uint64_t, __n128))(v22 + 16))( (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v19,  v18,  v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v41, (uint64_t)&v44);
    uint64_t v23 = v45;
    uint64_t v24 = v46;
    __swift_project_boxed_opaque_existential_1(&v44, v45);
    id v29 = (id)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 16))(v49, v23, v24);
    char v31 = v30;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
    if ((v31 & 1) != 0) {
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v43 = 0LL;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    outlined destroy of Any?((uint64_t)&v41, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(void *)&__int128 v44 = MEMORY[0x18961AFE8];
    (*(void (**)(char *__return_ptr, __int128 *, uint64_t))(*(void *)(v17 + 8) + 16LL))(&v40, &v44, v18);
    v39[3] = MEMORY[0x1896184C8];
    LOBYTE(v39[0]) = v40 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v39, (uint64_t)&v41);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    if (!*((void *)&v42 + 1))
    {
      outlined destroy of Any?((uint64_t)&v41, &demangling cache variable for type metadata for Any?);
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      uint64_t v25 = (void *)swift_allocError();
      *uint64_t v26 = 2;
      swift_willThrow();

      swift_bridgeObjectRelease();
      *(void *)&__int128 v44 = a2;
      uint64_t v28 = type metadata accessor for Predicate(0LL, 1LL, (uint64_t)&v44, v27);
      (*(void (**)(void *, uint64_t))(*(void *)(v28 - 8) + 8LL))(a1, v28);
      return 0LL;
    }

    outlined init with take of Any(&v41, &v44);
    __swift_project_boxed_opaque_existential_1(&v44, v45);
    id v29 = objc_msgSend(v7, sel_expressionForConstantValue_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
  }

  LOBYTE(v44) = 1;
  id v32 = v29;
  id v33 = objc_msgSend(v7, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v32,  v33,  0,  4,  0);

LABEL_12:
  swift_bridgeObjectRelease();
  uint64_t v34 = v38;
  *(void *)&__int128 v41 = swift_dynamicCastUnknownClassUnconditional();
  (*(void (**)(__int128 *, __int128 *, uint64_t))(*(void *)(v34 - 8) + 32LL))(&v44, &v41, v34);
  v39[0] = a2;
  uint64_t v36 = type metadata accessor for Predicate(0LL, 1LL, (uint64_t)v39, v35);
  (*(void (**)(void *, uint64_t))(*(void *)(v36 - 8) + 8LL))(a1, v36);
  return v44;
}

unint64_t NSExpression.init<A, B>(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v55 = type metadata accessor for Optional();
  uint64_t v54 = *(void *)(v55 - 8);
  MEMORY[0x1895F8858](v55);
  uint64_t v9 = (char *)&v51 - v8;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v53 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = a1[5];
  uint64_t v13 = v65;
  BOOL v14 = (void *)objc_opt_self();
  id v15 = objc_msgSend(v14, sel_expressionForEvaluatedObject);
  id v66 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  id v16 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  if ((v18 & 1) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }

  v16[(result >> 6) + 8] |= 1LL << result;
  uint64_t v19 = 8 * result;
  *(void *)(v16[6] + v19) = v13;
  *(void *)(v16[7] + v19) = v15;
  uint64_t v20 = v16[2];
  BOOL v21 = __OFADD__(v20, 1LL);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_14:
    __break(1u);
    return result;
  }

  id v51 = v14;
  uint64_t v52 = v4;
  uint64_t v57 = a2;
  v16[2] = v22;
  id v23 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PredicateExpressions.VariableID, NSExpression));
  swift_arrayDestroy();
  v67[0] = 1LL;
  v67[1] = v16;
  uint64_t v25 = a1[3];
  uint64_t v24 = a1[4];
  uint64_t v26 = __swift_project_boxed_opaque_existential_1(a1, v25);
  __n128 v27 = MEMORY[0x1895F8858](v26);
  (*(void (**)(char *, void *, uint64_t, __n128))(v29 + 16))( (char *)&v51 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v26,  v25,  v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    uint64_t v56 = a1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v59, (uint64_t)&v62);
    uint64_t v30 = v63;
    uint64_t v31 = v64;
    __swift_project_boxed_opaque_existential_1(&v62, v63);
    __n128 v39 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 16))(v67, v30, v31);
    char v41 = v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
    uint64_t v37 = v57;
    if ((v41 & 1) != 0)
    {
      LOBYTE(v62) = 1;
      id v42 = v39;
      uint64_t v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      id v44 = v51;
      id v45 = objc_msgSend(v51, sel_expressionForConstantValue_, v43);
      swift_unknownObjectRelease();
      LOBYTE(v62) = 0;
      id v46 = objc_msgSend(v44, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      id v47 = objc_msgSend(v44, sel_expressionForConditional_trueExpression_falseExpression_, v42, v45, v46);
    }
  }

  else
  {
    uint64_t v61 = 0LL;
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    outlined destroy of Any?((uint64_t)&v59, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(void *)&__int128 v62 = MEMORY[0x18961AFE8];
    (*(void (**)(__int128 *, uint64_t))(*(void *)(v24 + 8) + 16LL))(&v62, v25);
    uint64_t v56 = a1;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v9, 0LL, 1LL, a3);
    uint64_t v35 = v53;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v53, v9, a3);
    v58[3] = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58);
    (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v35, a3);
    _expressionCompatibleValue(for:)((uint64_t)v58, (uint64_t)&v59);
    uint64_t v37 = v57;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    if (!*((void *)&v60 + 1))
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v35, a3);
      outlined destroy of Any?((uint64_t)&v59, &demangling cache variable for type metadata for Any?);
      uint64_t v38 = v56;
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      id v32 = (void *)swift_allocError();
      *id v33 = 2;
      swift_willThrow();

      swift_bridgeObjectRelease();
      *(void *)&__int128 v62 = v37;
      uint64_t v34 = type metadata accessor for Expression(0LL, 1LL, (uint64_t)&v62, a3);
      (*(void (**)(void *, uint64_t))(*(void *)(v34 - 8) + 8LL))(v38, v34);
      return 0LL;
    }

    outlined init with take of Any(&v59, &v62);
    __swift_project_boxed_opaque_existential_1(&v62, v63);
    id v48 = objc_msgSend(v51, sel_expressionForConstantValue_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v35, a3);
  }

  swift_bridgeObjectRelease();
  uint64_t v49 = v52;
  *(void *)&__int128 v59 = swift_dynamicCastUnknownClassUnconditional();
  (*(void (**)(__int128 *, __int128 *, uint64_t))(*(void *)(v49 - 8) + 32LL))(&v62, &v59, v49);
  v58[0] = v37;
  uint64_t v50 = type metadata accessor for Expression(0LL, 1LL, (uint64_t)v58, a3);
  (*(void (**)(void *, uint64_t))(*(void *)(v50 - 8) + 8LL))(v56, v50);
  return v62;
}

id @nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  if (!v4)
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = a2[3];
    if (v12) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v18 = 0LL;
    goto LABEL_6;
  }

  uint64_t v6 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v7 = *(void *)(v4 - 8);
  __n128 v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, __n128))(v7 + 16))(v10, v8);
  uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  uint64_t v12 = a2[3];
  if (!v12) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v13 = __swift_project_boxed_opaque_existential_1(a2, v12);
  uint64_t v14 = *(void *)(v12 - 8);
  __n128 v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, __n128))(v14 + 16))(v17, v15);
  uint64_t v18 = _bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
LABEL_6:
  id v19 = objc_msgSend(v2, sel_initWithOperand_andKeyPath_, v11, v18);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v19;
}

unint64_t lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError()
{
  unint64_t result = lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError;
  if (!lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSPredicateConversionError, &unk_189C82810);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError;
  if (!lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSPredicateConversionError, &unk_189C82810);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Value<A>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Value<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.KeyPath<A, B>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Arithmetic<A, B>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Arithmetic<A, B>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.UnaryMinus<A>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.UnaryMinus<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Filter<A, B>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Filter<A, B>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.FloatDivision<A, B>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.FloatDivision<A, B>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.ClosedRange<A, B>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.ClosedRange<A, B>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.SequenceMaximum<A>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.SequenceMaximum<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.SequenceMinimum<A>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.SequenceMinimum<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Conditional<A, B, C>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Conditional<A, B, C>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.NilCoalesce<A, B>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.NilCoalesce<A, B>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.OptionalFlatMap<A, B, C, D>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.OptionalFlatMap<A, B, C, D>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for [A](uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618488]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionIndexSubscript<A, B>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.CollectionIndexSubscript<A, B>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.DictionaryKeySubscript<A, B, C>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.DictionaryKeySubscript<A, B, C>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for NSPredicateConversionError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1831F28CC + 4 * byte_1837C08C5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1831F2900 + 4 * byte_1837C08C0[v4]))();
}

uint64_t sub_1831F2900(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831F2908(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1831F2910LL);
  }
  return result;
}

uint64_t sub_1831F291C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1831F2924LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1831F2928(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831F2930(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NSPredicateConversionError()
{
  return &unk_189C82810;
}

uint64_t outlined init with take of AnyRange(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a1 + 32);
  __int128 v4 = *(_OWORD *)(a1 + 48);
  __int128 v5 = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(a2 + 80) = *(_BYTE *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  return a2;
}

uint64_t outlined init with copy of AnyRange(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t specialized PredicateExpressions.Variable.convert(state:)(uint64_t result)
{
  __int128 v2 = v1;
  uint64_t v3 = *(void *)(result + 8);
  if (*(void *)(v3 + 16))
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v2);
    if ((v4 & 1) != 0) {
      return *(void *)(*(void *)(v3 + 56) + 8 * result);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t specialized PredicateExpressions.RangeExpressionContains._expressionForBound(_:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = __swift_project_boxed_opaque_existential_1(a1, v2);
  void v14[3] = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16LL))( boxed_opaque_existential_1,  v3,  v2);
  _expressionCompatibleValue(for:)((uint64_t)v14, (uint64_t)v15);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v1)
  {
    uint64_t v6 = v16;
    if (v16)
    {
      uint64_t v7 = __swift_project_boxed_opaque_existential_1(v15, v16);
      uint64_t v8 = *(void *)(v6 - 8);
      __n128 v9 = MEMORY[0x1895F8858](v7);
      uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *, __n128))(v8 + 16))(v11, v9);
      uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    id v13 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v12);
    swift_unknownObjectRelease();
    return (uint64_t)v13;
  }

  return result;
}

uint64_t outlined destroy of AnyRange(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> (@out Any?, @error @owned Error)( uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> (@out Any?, @error @owned Error)( a1,  *(void (**)(uint64_t *))(v1 + 32));
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out Any?, @error @owned Error)( uint64_t a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 32))();
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t outlined init with take of PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PredicateExpressions.PredicateRegex(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PredicateExpressions.PredicateRegex(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PredicateExpressions.PredicateRegex(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t destroy for AnyRange(uint64_t a1)
{
  uint64_t v1 = a1;
  unsigned int v2 = *(unsigned __int8 *)(a1 + 80);
  if (v2 >= 5) {
    unsigned int v2 = *(_DWORD *)a1 + 5;
  }
  if (v2 <= 1)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    v1 += 40LL;
  }

  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t initializeWithCopy for AnyRange(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 80);
  while (2)
  {
    switch(v4)
    {
      case 0:
        __int128 v5 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v5;
        (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
        __int128 v6 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 64) = v6;
        (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 40, a2 + 40);
        char v7 = 0;
        break;
      case 1:
        __int128 v8 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v8;
        (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
        __int128 v9 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 64) = v9;
        (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 40, a2 + 40);
        char v7 = 1;
        break;
      case 2:
        __int128 v10 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v10;
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
        char v7 = 2;
        break;
      case 3:
        __int128 v11 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v11;
        (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
        char v7 = 3;
        break;
      case 4:
        __int128 v12 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v12;
        (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1, a2);
        char v7 = 4;
        break;
      default:
        int v4 = *(_DWORD *)a2 + 5;
        continue;
    }

    break;
  }

  *(_BYTE *)(a1 + 80) = v7;
  return a1;
}

uint64_t assignWithCopy for AnyRange(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 80);
    if (v4 >= 5) {
      unsigned int v4 = *(_DWORD *)a1 + 5;
    }
    if (v4 <= 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      a1 = v2 + 40;
    }

    __swift_destroy_boxed_opaque_existential_1(a1);
    int v5 = *(unsigned __int8 *)(a2 + 80);
    while (2)
    {
      switch(v5)
      {
        case 0:
          uint64_t v6 = *(void *)(a2 + 24);
          *(void *)(v2 + 24) = v6;
          *(void *)(v2 + 32) = *(void *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v2, a2);
          uint64_t v7 = *(void *)(a2 + 64);
          *(void *)(v2 + 64) = v7;
          *(void *)(v2 + 72) = *(void *)(a2 + 72);
          (**(void (***)(uint64_t, uint64_t))(v7 - 8))(v2 + 40, a2 + 40);
          char v8 = 0;
          break;
        case 1:
          uint64_t v9 = *(void *)(a2 + 24);
          *(void *)(v2 + 24) = v9;
          *(void *)(v2 + 32) = *(void *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v9 - 8))(v2, a2);
          uint64_t v10 = *(void *)(a2 + 64);
          *(void *)(v2 + 64) = v10;
          *(void *)(v2 + 72) = *(void *)(a2 + 72);
          (**(void (***)(uint64_t, uint64_t))(v10 - 8))(v2 + 40, a2 + 40);
          char v8 = 1;
          break;
        case 2:
          uint64_t v11 = *(void *)(a2 + 24);
          *(void *)(v2 + 24) = v11;
          *(void *)(v2 + 32) = *(void *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v11 - 8))(v2, a2);
          char v8 = 2;
          break;
        case 3:
          uint64_t v12 = *(void *)(a2 + 24);
          *(void *)(v2 + 24) = v12;
          *(void *)(v2 + 32) = *(void *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v12 - 8))(v2, a2);
          char v8 = 3;
          break;
        case 4:
          uint64_t v13 = *(void *)(a2 + 24);
          *(void *)(v2 + 24) = v13;
          *(void *)(v2 + 32) = *(void *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v2, a2);
          char v8 = 4;
          break;
        default:
          int v5 = *(_DWORD *)a2 + 5;
          continue;
      }

      break;
    }

    *(_BYTE *)(v2 + 80) = v8;
  }

  return v2;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AnyRange(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 80);
    if (v4 >= 5) {
      unsigned int v4 = *(_DWORD *)a1 + 5;
    }
    if (v4 <= 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      a1 = v2 + 40;
    }

    __swift_destroy_boxed_opaque_existential_1(a1);
    int v5 = *(unsigned __int8 *)(a2 + 80);
    while (2)
    {
      switch(v5)
      {
        case 0:
          char v6 = 0;
          __int128 v7 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(v2 + 48) = v7;
          *(_OWORD *)(v2 + 64) = *(_OWORD *)(a2 + 64);
          __int128 v8 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
          *(_OWORD *)(v2 + 16) = v8;
          break;
        case 1:
          __int128 v9 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(v2 + 48) = v9;
          *(_OWORD *)(v2 + 64) = *(_OWORD *)(a2 + 64);
          __int128 v10 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
          *(_OWORD *)(v2 + 16) = v10;
          char v6 = 1;
          break;
        case 2:
          __int128 v11 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
          *(_OWORD *)(v2 + 16) = v11;
          *(void *)(v2 + 32) = *(void *)(a2 + 32);
          char v6 = 2;
          break;
        case 3:
          __int128 v12 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
          *(_OWORD *)(v2 + 16) = v12;
          *(void *)(v2 + 32) = *(void *)(a2 + 32);
          char v6 = 3;
          break;
        case 4:
          __int128 v13 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
          *(_OWORD *)(v2 + 16) = v13;
          *(void *)(v2 + 32) = *(void *)(a2 + 32);
          char v6 = 4;
          break;
        default:
          int v5 = *(_DWORD *)a2 + 5;
          continue;
      }

      break;
    }

    *(_BYTE *)(v2 + 80) = v6;
  }

  return v2;
}

uint64_t getEnumTagSinglePayload for AnyRange(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 >= 5) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AnyRange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 80) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 81) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 81) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 80) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for AnyRange(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 80);
  return result;
}

uint64_t destructiveInjectEnumTag for AnyRange(uint64_t result, unsigned int a2)
{
  if (a2 > 4)
  {
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 5;
    LOBYTE(a2) = 5;
  }

  *(_BYTE *)(result + 80) = a2;
  return result;
}

void *type metadata accessor for AnyRange()
{
  return &unk_189C828A0;
}

unsigned __int8 *_sSS8withUTF8yxxSRys5UInt8VGKXEKlFyt_Tg5042_s10Foundation19PropertyListDecoderC22withb53Representation2of14sourceEncoding_xAA10BufferViewVys5C42VG_SSAAE0J0VxAKKXEtKlFZxSRyAJGKXEfU_yt_Tg510Foundation0mN0VyACGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n0defgh74C30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4DataV_xlmnoc28VGKXExAOKXExSS05UTF16Q0VKXEtuv46AOKXEfU_yAOKXEfU_AA23LocalizedStringResourceV_Z0AF23LocalizedStringResourceVSgAIxsAJ_pRi_zRi0_zlyAMIsgyrzo_Tf1nnc_n( uint64_t *a1, uint64_t a2, void *(*a3)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    v12[0] = v5;
    v12[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t result = (unsigned __int8 *)v12;
    return specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)( result,  v8,  a2,  a3);
  }

  uint64_t v5 = static String._copying(_:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  *a1 = v5;
  a1[1] = v11;
  unint64_t v6 = v11;
  if ((v11 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
    return specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)( result,  v8,  a2,  a3);
  }

  uint64_t result = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  if (result)
  {
    if ((v8 & 0x8000000000000000LL) == 0) {
      return specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)( result,  v8,  a2,  a3);
    }
    __break(1u);
  }

  __break(1u);
  return result;
}

void *_sSS8withUTF8yxxSRys5UInt8VGKXEKlFyt_Tg5042_s10Foundation19PropertyListDecoderC22withb53Representation2of14sourceEncoding_xAA10BufferViewVys5C42VG_SSAAE0J0VxAKKXEtKlFZxSRyAJGKXEfU_yt_Tg510Foundation0mN0VyACGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n( uint64_t *a1, uint64_t (*a2)(void *, uint64_t))
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if ((v4 & 0x1000000000000000LL) == 0)
  {
    if ((v4 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v6 = HIBYTE(v4) & 0xF;
    uint64_t result = v10;
    return (void *)a2(result, v6);
  }

  uint64_t v3 = static String._copying(_:)();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v9;
  unint64_t v4 = v9;
  if ((v9 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v3 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = (void *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
    return (void *)a2(result, v6);
  }

  uint64_t result = (void *)_StringObject.sharedUTF8.getter();
  if (result)
  {
    if ((v6 & 0x8000000000000000LL) == 0) {
      return (void *)a2(result, v6);
    }
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t PropertyListDecoder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = MEMORY[0x18961AFF0];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 24) = v1;
  return v0;
}

uint64_t PropertyListDecoder.userInfo.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t (*PropertyListDecoder.userInfo.modify(void *a1))(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  return PropertyListDecoder.userInfo.modify;
}

uint64_t PropertyListDecoder.userInfo.modify(void *a1)
{
  uint64_t v1 = (os_unfair_lock_s *)a1[2];
  *(void *)(a1[1] + 16LL) = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t PropertyListDecoder.userInfo.setter(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(void *)(v1 + 16) = a1;
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

uint64_t PropertyListDecoder.init()()
{
  *(void *)(v0 + 16) = MEMORY[0x18961AFF0];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 24) = v1;
  return v0;
}

uint64_t PropertyListDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = 200LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v5 + 160LL))( a1,  a2,  a3,  &v7,  a4,  a5);
}

void PropertyListDecoder.decode<A>(_:from:format:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t partial apply for closure #1 in PropertyListDecoder.decode<A>(_:from:format:)(void *a1)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(v4, v2, v3, v5, v6);
}

uint64_t PropertyListDecoder.decode<A>(_:from:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = 200LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 192LL))( a1,  a2,  a3,  &v8,  a4,  a5,  a6);
}

uint64_t PropertyListDecoder.decode<A, B>(_:from:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v21 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v16 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v18 = (char *)&v20 - v17;
  (*(void (**)(uint64_t, uint64_t, __n128))(a8 + 16))(a6, a8, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(void *)v9 + 168LL))( v21,  v22,  v23,  v18,  a5,  a7);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
}

uint64_t PropertyListDecoder.decode<A, B>(_:from:format:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v16 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v18 = (char *)&v20 - v17;
  (*(void (**)(uint64_t, uint64_t, __n128))(a9 + 16))(a7, a9, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(void *)v10 + 192LL))( v20,  v21,  v22,  v23,  v18,  a6,  a8);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
}

void PropertyListDecoder.decode<A>(_:from:format:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void closure #1 in PropertyListDecoder._decode<A>(_:from:format:)( _DWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5, void *a6)
{
  uint64_t v10 = specialized static BPlistScanner.scanBinaryPropertyList(from:)(a1, a2);
  if (!v6)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)(a3 + 16);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_BPlistDecodingFormat>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    *((void *)&v44 + 1) = v13;
    id v45 = &protocol witness table for _PlistDecoder<A>;
    v43[0] = specialized _PlistDecoder.init(referencing:options:codingPathNode:)(v11, v12, 0x8000000000000000LL);
    swift_retain();
    a4(v43);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    swift_retain();
    specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(isUniquelyReferenced_nonNull_native);
    swift_release_n();
    *a6 = 200LL;
    return;
  }

  id v48 = v6;
  id v14 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);

  uint64_t v16 = v46;
  uint64_t v15 = v47;
  uint64_t v17 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v42 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 40) = v20;
  uint64_t v21 = BPlistError.debugDescription.getter(v16, v15);
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 48) = v21;
  *(void *)(inited + 56) = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v23 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)v43);
  uint64_t v24 = v43[0];
  uint64_t v25 = v43[1];
  swift_retain();
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
  if ((v27 & 1) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  v23[(v26 >> 6) + 8] |= 1LL << v26;
  uint64_t v28 = (uint64_t *)(v23[6] + 16 * v26);
  *uint64_t v28 = v24;
  v28[1] = v25;
  outlined init with take of Any(&v44, (_OWORD *)(v23[7] + 32 * v26));
  uint64_t v29 = v23[2];
  BOOL v30 = __OFADD__(v29, 1LL);
  uint64_t v31 = v29 + 1;
  if (v30)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  v23[2] = v31;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v32 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v33 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v34 = objc_msgSend(v32, sel_initWithDomain_code_userInfo_, v33, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v35 = objc_msgSend(v34, sel_domain);
  id v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  uint64_t v38 = v37;

  if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v38 == v39)
  {
    swift_bridgeObjectRelease_n();
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v16, (unint64_t)v15);
LABEL_10:
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v17 - 8) + 104LL))( v42,  *MEMORY[0x189619360],  v17);
    swift_willThrow();
LABEL_11:

    return;
  }

  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v16, (unint64_t)v15);
  if ((v40 & 1) != 0) {
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
}

uint64_t partial apply for closure #1 in PropertyListDecoder._decode<A>(_:from:format:)( uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in PropertyListDecoder._decode<A>(_:from:format:)( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))closure #1 in PropertyListDecoder._decode<A>(_:from:format:));
}

void closure #2 in PropertyListDecoder._decode<A>(_:from:format:)( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5, void *a6)
{
  v21[0] = a1;
  v21[1] = a2;
  _OWORD v21[2] = a1;
  uint64_t v22 = a1;
  uint64_t v23 = (_UNKNOWN **)(a1 + a2);
  uint64_t v24 = MEMORY[0x18961AFE8];
  uint64_t v25 = 0LL;
  XMLPlistScanner.scanXMLPropertyList()();
  if (v6)
  {
    swift_bridgeObjectRelease();
    id v26 = v6;
    id v14 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {

      type metadata accessor for DecodingError();
      swift_allocError();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183720D90;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(inited + 40) = v16;
      __asm { BR              X11 }
    }
  }

  else
  {
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(a3 + 16);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_XMLPlistDecodingFormat>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    specialized _PlistDecoder.init(referencing:options:codingPathNode:)(v11, v12, 0x8000000000000000LL);
    uint64_t v18 = v17;
    swift_release();
    uint64_t v22 = v13;
    uint64_t v23 = &protocol witness table for _PlistDecoder<A>;
    v21[0] = v18;
    swift_retain();
    a4(v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    swift_retain();
    specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(isUniquelyReferenced_nonNull_native);
    swift_release_n();
    *a6 = 100LL;
  }

uint64_t partial apply for closure #2 in PropertyListDecoder._decode<A>(_:from:format:)( uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in PropertyListDecoder._decode<A>(_:from:format:)( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))closure #2 in PropertyListDecoder._decode<A>(_:from:format:));
}

void closure #3 in PropertyListDecoder._decode<A>(_:from:format:)( unint64_t a1, unint64_t a2, uint64_t a3, void *a4, void (*a5)(__int128 *))
{
  if (!v5)
  {
    outlined init with take of Any(&v36, v41);
    outlined init with copy of Any((uint64_t)v41, (uint64_t)&v36);
    uint64_t v32 = *(void *)(a3 + 16);
    uint64_t v33 = type metadata accessor for __PlistDictionaryDecoder();
    swift_allocObject();
    swift_bridgeObjectRetain();
    id v34 = __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)&v36, MEMORY[0x18961AFE8], v32);
    *a4 = 1LL;
    *((void *)&v37 + 1) = v33;
    uint64_t v38 = &protocol witness table for __PlistDictionaryDecoder;
    *(void *)&__int128 v36 = v34;
    swift_retain();
    a5(&v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    return;
  }

  id v42 = v5;
  id v9 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_11;
  }

  uint64_t v10 = v39;
  uint64_t v11 = v40;
  uint64_t v12 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v14 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 40) = v16;
  *(void *)(inited + 48) = v10;
  *(void *)(inited + 56) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v17 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v36);
  __int128 v18 = v36;
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v18, *((uint64_t *)&v18 + 1));
  if ((v20 & 1) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  v17[(v19 >> 6) + 8] |= 1LL << v19;
  *(_OWORD *)(v17[6] + 16 * v19) = v18;
  outlined init with take of Any(&v37, (_OWORD *)(v17[7] + 32 * v19));
  uint64_t v21 = v17[2];
  BOOL v22 = __OFADD__(v21, 1LL);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  _OWORD v17[2] = v23;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v24 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v25 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v26 = objc_msgSend(v24, sel_initWithDomain_code_userInfo_, v25, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v27 = objc_msgSend(v26, sel_domain);
  id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  uint64_t v30 = v29;

  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v30 == v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_10:
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104LL))( v14,  *MEMORY[0x189619360],  v12);
    swift_willThrow();
LABEL_11:

    return;
  }

  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v35 & 1) != 0) {
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
}

void partial apply for closure #3 in PropertyListDecoder._decode<A>(_:from:format:)( unint64_t a1, unint64_t a2)
{
}

{
  uint64_t v2;
  closure #3 in PropertyListDecoder._decode<A>(_:from:format:)( a1,  a2,  *(void *)(v2 + 24),  *(void **)(v2 + 32),  *(void (**)(__int128 *))(v2 + 40));
}

void static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)( uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

int64_t sub_1831F4BE4( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, __n128), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = v11;
  __int16 v16 = v12;
  char v17 = BYTE2(v12);
  char v18 = BYTE3(v12);
  char v19 = BYTE4(v12);
  char v20 = BYTE5(v12);
  return closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)( (uint64_t)&v15,  BYTE6(v12),  a3,  a6,  a7,  v8,  v9,  a8,  v10,  v13);
}

uint64_t partial apply for closure #1 in PropertyListDecoder.decode<A>(_:from:format:configuration:)( void *a1)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))( v5,  v4,  v2,  v3,  v6,  v7);
}

uint64_t partial apply for closure #1 in PropertyListDecoder._decode<A>(_:from:format:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[3], v3[4], v3[5], v3[6], v3[2]);
}

uint64_t static PropertyListDecoder.readQuotedEncoding(in:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!a2 || (int v4 = *(unsigned __int8 *)result, v4 != 39) && v4 != 34)
  {
LABEL_11:
    *a3 = 4LL;
    return result;
  }

  uint64_t v5 = (char *)(result + 1);
  if (a2 < 2)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v6 = 1LL;
    while (*(unsigned __int8 *)(result + v6) != v4)
    {
      if (a2 == ++v6)
      {
        uint64_t v6 = a2;
        break;
      }
    }

    uint64_t v7 = v6 - 1;
    if (v6 == 6)
    {
      uint64_t result = _stringshims_strncasecmp_l((const char *)(result + 1), "utf-8", 5uLL, 0LL);
      if (!(_DWORD)result) {
        goto LABEL_11;
      }
    }
  }

  id v8 = specialized String.init<A>(bytes:encoding:)(v5, v7, 5LL);
  if (v9)
  {
    uint64_t v10 = (uint64_t)v8;
    uint64_t v11 = v9;
    uint64_t v12 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    CFStringEncoding v13 = CFStringConvertIANACharSetNameToEncoding(v12);
    swift_unknownObjectRelease();
    if (v13 != -1)
    {
      swift_bridgeObjectRelease();
      uint64_t result = CFStringConvertEncodingToNSStringEncoding(v13);
      *a3 = result;
      return result;
    }

    _StringGuts.grow(_:)(31LL);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = v10;
    v17._unint64_t object = v11;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    uint64_t v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v19;
    _CodingPathNode.path.getter(0x8000000000000000LL);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 104LL))( v20,  *MEMORY[0x189619360],  v18);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v14 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v16 = v15;
    _CodingPathNode.path.getter(0x8000000000000000LL);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619360],  v14);
  }

  return swift_willThrow();
}

unint64_t static PropertyListDecoder.scanForExplicitXMLEncoding(in:)@<X0>( unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a2 >= 5)
  {
    unint64_t v5 = result;
    uint64_t result = strncmp((const char *)result, "<?xml", 5uLL);
    if (!(_DWORD)result && (unint64_t)a2 >= 6)
    {
      uint64_t v6 = 0LL;
      unint64_t v7 = v5 + a2;
      uint64_t v8 = a2 - 14;
      while (1)
      {
        uint64_t result = v5 + v6 + 5;
        if ((*(_BYTE *)result & 0xFE) == 0x3E) {
          goto LABEL_12;
        }
        if (v7 < result) {
          break;
        }
        if (v6 < 0) {
          goto LABEL_19;
        }
        if (v8 + 9 < 0) {
          goto LABEL_20;
        }
        if ((unint64_t)(v8 + 9) < 0xA)
        {
          uint64_t v9 = type metadata accessor for DecodingError();
          swift_allocError();
          uint64_t v11 = v10;
          _CodingPathNode.path.getter(0x8000000000000000LL);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 104LL))( v11,  *MEMORY[0x189619360],  v9);
          return swift_willThrow();
        }

        uint64_t result = strncmp((const char *)result, "encoding=", 9uLL);
        if (!(_DWORD)result)
        {
          uint64_t result = v5 + v6 + 14;
          if (v7 >= result)
          {
            if (v6 + 14 >= 0)
            {
              if ((v8 & 0x8000000000000000LL) == 0) {
                return static PropertyListDecoder.readQuotedEncoding(in:)(result, v8, a3);
              }
              goto LABEL_23;
            }

unint64_t static PropertyListDecoder.detectEncoding(of:)( uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a3 < 1) {
    goto LABEL_53;
  }
  if (a3 == 1)
  {
    int v5 = 0;
    int v6 = 0;
LABEL_6:
    int v7 = 0;
    int v8 = 1;
LABEL_7:
    int v9 = 1;
    int v10 = *a2;
    goto LABEL_16;
  }

  int v6 = a2[1];
  if ((unint64_t)a3 < 3)
  {
    int v5 = 0;
    goto LABEL_6;
  }

  int v7 = a2[2];
  if (a3 == 3)
  {
    int v5 = 0;
    int v8 = 0;
    goto LABEL_7;
  }

  int v8 = 0;
  int v9 = 0;
  int v5 = a2[3];
  int v10 = *a2;
  if (!*a2 && !a2[1] && v7 == 254 && v5 == 255)
  {
    uint64_t v11 = 2550137088LL;
LABEL_33:
    *a1 = v11;
    return 4LL;
  }

int64_t closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, __n128)@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, void (*a6)(id)@<X7>, char *a7@<X8>, uint64_t a8, uint64_t a9, void (*a10)(void))
{
  uint64_t v40 = a6;
  __int128 v44 = (void (*)(id))a4;
  uint64_t v45 = a5;
  id v42 = a3;
  uint64_t v43 = a7;
  uint64_t v13 = *((void *)a10 - 1);
  MEMORY[0x1895F8858](a1);
  char v41 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v46 - 8);
  MEMORY[0x1895F8858](v46);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v19 = MEMORY[0x1895F8858](v18);
  id v47 = (char *)&v40 - v20;
  if (a2 >= 41 && *(_DWORD *)a1 == 1768714338 && *(_DWORD *)(a1 + 3) == 812938089) {
    return v42(a1, a2, v19);
  }
  int64_t result = static PropertyListDecoder.detectEncoding(of:)(&v48, (unsigned __int8 *)a1, a2);
  if (!v10)
  {
    if (result > a2)
    {
      __break(1u);
    }

    else
    {
      uint64_t v23 = v48;
      id v24 = (char *)(a1 + result);
      uint64_t v25 = a2 - result;
      id v26 = v47;
      uint64_t v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, void (*)(void)))(v13 + 56))( v47,  1LL,  1LL,  a10);
      id v42 = (uint64_t (*)(uint64_t, uint64_t, __n128))&v40;
      MEMORY[0x1895F8858](v27);
      *(&v40 - 4) = (void (*)(id))a10;
      *(&v40 - 3) = (void (*)(id))v26;
      id v28 = (void (*)(id))v45;
      *(&v40 - 2) = v44;
      *(&v40 - 1) = v28;
      uint64_t v45 = v25;
      specialized static PropertyListDecoder.withUTF8Representation<A>(of:sourceEncoding:_:)( v24,  v25,  v23,  (uint64_t (*)(void *, uint64_t))partial apply for closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:),  &v40);
      __int128 v44 = (void (*)(id))v23;
      uint64_t v29 = v26;
      uint64_t v30 = v45;
      uint64_t v31 = v46;
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v29, v46);
      if ((*(unsigned int (**)(char *, uint64_t, void (*)(void)))(v13 + 48))(v17, 1LL, a10) == 1)
      {
        uint64_t v32 = *(void (**)(char *, uint64_t))(v15 + 8);
        v32(v17, v31);
        id v33 = specialized String.init<A>(bytes:encoding:)(v24, v30, (uint64_t)v44);
        if (v34)
        {
          v40(v33);
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v37 = type metadata accessor for DecodingError();
          swift_allocError();
          uint64_t v39 = v38;
          _CodingPathNode.path.getter(0x8000000000000000LL);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v37 - 8) + 104LL))( v39,  *MEMORY[0x189619360],  v37);
          swift_willThrow();
        }

        return ((uint64_t (*)(char *, uint64_t))v32)(v47, v31);
      }

      else
      {
        char v35 = *(void (**)(char *, char *, void (*)(void)))(v13 + 32);
        __int128 v36 = v41;
        v35(v41, v17, a10);
        v35(v43, v36, a10);
        return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v47, v31);
      }
    }
  }

  return result;
}

_BYTE *specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)( unsigned __int8 *a1, uint64_t a2, uint64_t a3, void *(*a4)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))
{
  unint64_t v9 = (unint64_t)&a1[a2];
  BOOL v22 = a1;
  uint64_t v23 = a2;
  id v24 = a1;
  uint64_t v25 = a1;
  id v26 = &a1[a2];
  uint64_t v27 = MEMORY[0x18961AFE8];
  uint64_t v28 = 0LL;
  int64_t result = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(a1);
  if (v9 < (unint64_t)result)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (result - a1 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if ((uint64_t)(v9 - (void)result) < 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  if (*result == 60)
  {
    int64_t result = a4(v19, a1, a2);
    if (!v4)
    {
      __int128 v17 = v19[1];
      __int128 v18 = v19[0];
      __int128 v15 = v19[3];
      __int128 v16 = v19[2];
      __int128 v13 = v19[5];
      __int128 v14 = v19[4];
      uint64_t v11 = v20;
      uint64_t v12 = v21;
      int64_t result = (_BYTE *)outlined consume of LocalizedStringResource?( *(void *)a3,  *(void *)(a3 + 8),  *(void *)(a3 + 16),  *(void *)(a3 + 24),  *(void *)(a3 + 32),  *(void *)(a3 + 40),  *(void *)(a3 + 48),  *(void *)(a3 + 56),  *(void *)(a3 + 64),  *(void **)(a3 + 72));
      *(_OWORD *)a3 = v18;
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)(a3 + 32) = v16;
      *(_OWORD *)(a3 + 48) = v15;
      *(_OWORD *)(a3 + 64) = v14;
      *(_OWORD *)(a3 + 80) = v13;
      *(void *)(a3 + 96) = v11;
      *(void *)(a3 + 104) = v12;
    }
  }

  return result;
}

unsigned __int8 *closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)( unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned __int8 *, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v17 = a3;
  uint64_t v18 = a5;
  id v26 = a4;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  __int128 v13 = (char *)&v16 - v12;
  __int128 v14 = &a1[a2];
  __n128 v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a1;
  BOOL v22 = a1;
  uint64_t v23 = &a1[a2];
  uint64_t v24 = MEMORY[0x18961AFE8];
  uint64_t v25 = 0LL;
  int64_t result = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(a1);
  if (&a1[a2] < result + 1) {
    return result;
  }
  if (v14 < result)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (result - a1 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (v14 - result < 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  if (*result == 60)
  {
    int64_t result = (unsigned __int8 *)v26(a1, a2);
    if (!v6)
    {
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a6 - 8) + 56LL))(v13, 0LL, 1LL, a6);
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(v17, v13, v10);
    }
  }

  return result;
}

_BYTE *_s10Foundation19PropertyListDecoderC22withUTF8Representation2of14sourceEncoding_xAA10BufferViewVys5UInt8VG_SSAAE0J0VxAKKXEtKlFZyt_TBm5016_s10Foundation19bcd78C30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4DataV_xAA10kl4Vys5M82VGKXExAOKXExSS05UTF16Q0VKXEtKlFZxAOKXEfU_yAOKXEfU_AA23LocalizedStringResourceV_Tg5AA23LocalizedStringResourceVSgAKxs5Error_pRi_zRi0_zlyAPIsgyrzo_Tf1nnnc_n( unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *(*a5)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))
{
  if (a3 == 4) {
    return specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)( a1,  a2,  a4,  a5);
  }
  id v8 = specialized String.init<A>(bytes:encoding:)((char *)a1, a2, a3);
  if (v9)
  {
    v13[0] = (uint64_t)v8;
    v13[1] = v9;
    _sSS8withUTF8yxxSRys5UInt8VGKXEKlFyt_Tg5042_s10Foundation19PropertyListDecoderC22withb53Representation2of14sourceEncoding_xAA10BufferViewVys5C42VG_SSAAE0J0VxAKKXEtKlFZxSRyAJGKXEfU_yt_Tg510Foundation0mN0VyACGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n0defgh74C30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4DataV_xlmnoc28VGKXExAOKXExSS05UTF16Q0VKXEtuv46AOKXEfU_yAOKXEfU_AA23LocalizedStringResourceV_Z0AF23LocalizedStringResourceVSgAIxsAJ_pRi_zRi0_zlyAMIsgyrzo_Tf1nnc_n( v13,  a4,  a5);
    return (_BYTE *)swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v10 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v12 = v11;
    _CodingPathNode.path.getter(0x8000000000000000LL);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104LL))( v12,  *MEMORY[0x189619360],  v10);
    return (_BYTE *)swift_willThrow();
  }

void *specialized static PropertyListDecoder.withUTF8Representation<A>(of:sourceEncoding:_:)@<X0>( char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void *, uint64_t)@<X3>, void *a5@<X8>)
{
  if (a3 == 4) {
    return ((void *(*)(void *__return_ptr))a4)(a5);
  }
  id v7 = specialized String.init<A>(bytes:encoding:)(a1, a2, a3);
  if (v8)
  {
    v12[0] = (uint64_t)v7;
    v12[1] = v8;
    _sSS8withUTF8yxxSRys5UInt8VGKXEKlFyt_Tg5042_s10Foundation19PropertyListDecoderC22withb53Representation2of14sourceEncoding_xAA10BufferViewVys5C42VG_SSAAE0J0VxAKKXEtKlFZxSRyAJGKXEfU_yt_Tg510Foundation0mN0VyACGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n( v12,  a4);
    return (void *)swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v9 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v11 = v10;
    _CodingPathNode.path.getter(0x8000000000000000LL);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 104LL))( v11,  *MEMORY[0x189619360],  v9);
    return (void *)swift_willThrow();
  }

uint64_t PropertyListDecoder.decode<A>(_:fromTopLevel:)@<X0>( ValueMetadata *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = &v20[-v11];
  outlined init with copy of Any((uint64_t)a2, (uint64_t)v20);
  uint64_t v13 = *(void *)(v4 + 16);
  type metadata accessor for __PlistDictionaryDecoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)v20, MEMORY[0x18961AFE8], v13);
  __PlistDictionaryDecoder.unbox<A>(_:as:)(a2, a1, a3, (uint64_t)v12);
  if (v5) {
    return swift_release();
  }
  uint64_t v14 = v21;
  uint64_t v15 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v12, 1LL, a3) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v18 = a1;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(ValueMetadata **, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v18,  *MEMORY[0x189619368],  v16);
    swift_willThrow();
    return swift_release();
  }

  swift_release();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(v14, v12, a3);
}

uint64_t PropertyListDecoder.deinit()
{
  return v0;
}

uint64_t PropertyListDecoder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1831F5E34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96LL))();
  *a2 = result;
  return result;
}

uint64_t sub_1831F5E64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 104LL);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for PropertyListDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96LL))();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of PropertyListDecoder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A, B>(_:from:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A, B>(_:from:format:configuration:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 184LL))(a1);
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

ValueMetadata *type metadata accessor for PropertyListDecoder._Options()
{
  return &type metadata for PropertyListDecoder._Options;
}

uint64_t outlined consume of LocalizedStringResource?( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }

  return result;
}

int64_t partial apply for closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)( a1,  a2,  *(uint64_t (**)(uint64_t, uint64_t, __n128))(v3 + 24),  *(void *)(v3 + 48),  *(void *)(v3 + 56),  *(void (**)(id))(v3 + 64),  a3,  *(void *)(v3 + 72),  *(void *)(v3 + 80),  *(void (**)(void))(v3 + 16));
}

uint64_t partial apply for closure #1 in Data.withBufferView<A>(_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in Data.withBufferView<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 24));
}

unsigned __int8 *partial apply for closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)( unsigned __int8 *a1, uint64_t a2)
{
  return closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)( a1,  a2,  *(void *)(v2 + 24),  *(uint64_t (**)(unsigned __int8 *, uint64_t))(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 16));
}

void Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)()
{
  __asm { BR              X10 }

uint64_t sub_1831F6128( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22, uint64_t a23, uint64_t a24, unsigned __int8 a25)
{
  v27._uint64_t countAndFlagsBits = 71LL;
  v27._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v25 + 8,  (uint64_t)&a22,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
  outlined init with take of LocalePreferences?( (uint64_t)&a22,  (uint64_t)&a24,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
  if (a25 == 255)
  {
    uint64_t v28 = 0LL;
    unint64_t v30 = 0xE000000000000000LL;
  }

  else
  {
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(a24, a25);
    unint64_t v30 = v29;
  }

  unint64_t v31 = v30;
  String.append(_:)(*(Swift::String *)&v28);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v25 + 17,  (uint64_t)&a21,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
  outlined init with take of LocalePreferences?( (uint64_t)&a21,  v26 - 99,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
  return ((uint64_t (*)(void))((char *)sub_1831F6214 + 4 * byte_1837C0E74[*(unsigned __int8 *)(v26 - 99)]))(0LL);
}

uint64_t sub_1831F6214( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20)
{
  v22._uint64_t countAndFlagsBits = 81LL;
  v22._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v20 + 18,  (uint64_t)&a20,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
  outlined init with take of LocalePreferences?( (uint64_t)&a20,  v21 - 98,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
  return ((uint64_t (*)(void))((char *)sub_1831F62BC + 4 * byte_1837C0E7A[*(unsigned __int8 *)(v21 - 98)]))(0LL);
}

uint64_t sub_1831F62BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19, char a20)
{
  v22._uint64_t countAndFlagsBits = 77LL;
  v22._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v20 + 19,  (uint64_t)&a20,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
  outlined init with take of LocalePreferences?( (uint64_t)&a20,  v21 - 97,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
  return ((uint64_t (*)(void))((char *)sub_1831F6364 + 4 * byte_1837C0E80[*(unsigned __int8 *)(v21 - 97)]))(0LL);
}

uint64_t sub_1831F6364( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  v22._uint64_t countAndFlagsBits = 119LL;
  v22._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v20 + 24,  (uint64_t)&a20,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption?);
  outlined init with take of LocalePreferences?( (uint64_t)&a20,  v21 - 96,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption?);
  if ((*(_BYTE *)(v21 - 87) & 1) != 0)
  {
    uint64_t v23 = 0LL;
    unint64_t v24 = 0xE000000000000000LL;
  }

  else
  {
    outlined init with take of Date.FormatStyle.Symbol.SymbolType.DayOption((uint64_t *)(v21 - 96), v21 - 80);
    outlined init with take of Date.FormatStyle.Symbol.SymbolType.DayOption((uint64_t *)(v21 - 80), v21 - 64);
    uint64_t v25 = *(void *)(v21 - 64);
    if (*(_BYTE *)(v21 - 56) == 1)
    {
      unint64_t v26 = 0xE200000000000000LL;
      uint64_t v27 = 25700LL;
      if (v25 != 1)
      {
        uint64_t v27 = 70LL;
        unint64_t v26 = 0xE100000000000000LL;
      }

      if (v25) {
        uint64_t v23 = v27;
      }
      else {
        uint64_t v23 = 100LL;
      }
      if (v25) {
        unint64_t v24 = v26;
      }
      else {
        unint64_t v24 = 0xE100000000000000LL;
      }
    }

    else
    {
      if (v25 >= 10) {
        uint64_t v25 = 10LL;
      }
      if (v25 <= 1) {
        uint64_t v28 = 1LL;
      }
      else {
        uint64_t v28 = v25;
      }
      uint64_t v23 = MEMORY[0x186E1B904](103LL, 0xE100000000000000LL, v28);
      unint64_t v24 = v29;
    }
  }

  unint64_t v30 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v20 + 34,  (uint64_t)&a19,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption?);
  outlined init with take of LocalePreferences?( (uint64_t)&a19,  v21 - 54,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption?);
  return ((uint64_t (*)(void))((char *)sub_1831F64B4 + 4 * byte_1837C0E84[*(unsigned __int8 *)(v21 - 54)]))(0LL);
}

uint64_t sub_1831F64B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18)
{
  v20._uint64_t countAndFlagsBits = 68LL;
  v20._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v18 + 35,  (uint64_t)&a18,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption?);
  outlined init with take of LocalePreferences?( (uint64_t)&a18,  v19 - 53,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption?);
  return ((uint64_t (*)(void))((char *)sub_1831F6538 + 4 * byte_1837C0E88[*(unsigned __int8 *)(v19 - 53)]))(0LL);
}

uint64_t sub_1831F6538( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, char a18)
{
  v20._uint64_t countAndFlagsBits = 4539717LL;
  v20._unint64_t object = (void *)0xE300000000000000LL;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v18 + 36,  (uint64_t)&a18,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption?);
  outlined init with take of LocalePreferences?( (uint64_t)&a18,  v19 - 52,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption?);
  return ((uint64_t (*)(void))((char *)sub_1831F65F4 + 4 * byte_1837C0E8F[*(unsigned __int8 *)(v19 - 52)]))(0LL);
}

uint64_t sub_1831F65F4()
{
  v4._uint64_t countAndFlagsBits = 97LL;
  v4._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v32 = v1;
  uint64_t v33 = v2;
  unsigned __int8 v5 = Date.FormatStyle.DateFieldCollection.preferredHour(withLocale:)(&v32);
  unint64_t v6 = 0xE000000000000000LL;
  if (v5 == 14)
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = 0xE000000000000000LL;
  }

  else
  {
    uint64_t v7 = Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v5);
    unint64_t v8 = v9;
  }

  unint64_t v10 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v0 + 38,  (uint64_t)v38,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption?);
  outlined init with take of LocalePreferences?( (uint64_t)v38,  v3 - 51,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption?);
  int v11 = *(unsigned __int8 *)(v3 - 51);
  uint64_t v12 = 28013LL;
  if ((v11 & 1) != 0)
  {
    unint64_t v13 = 0xE200000000000000LL;
  }

  else
  {
    uint64_t v12 = 109LL;
    unint64_t v13 = 0xE100000000000000LL;
  }

  if (v11 == 2) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = v12;
  }
  if (v11 == 2) {
    unint64_t v15 = 0xE000000000000000LL;
  }
  else {
    unint64_t v15 = v13;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v0 + 39,  (uint64_t)&v37,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
  outlined init with take of LocalePreferences?( (uint64_t)&v37,  v3 - 50,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
  int v17 = *(unsigned __int8 *)(v3 - 50);
  uint64_t v18 = 29555LL;
  if ((v17 & 1) != 0)
  {
    unint64_t v19 = 0xE200000000000000LL;
  }

  else
  {
    uint64_t v18 = 115LL;
    unint64_t v19 = 0xE100000000000000LL;
  }

  if (v17 == 2) {
    uint64_t v20 = 0LL;
  }
  else {
    uint64_t v20 = v18;
  }
  if (v17 == 2) {
    unint64_t v21 = 0xE000000000000000LL;
  }
  else {
    unint64_t v21 = v19;
  }
  unint64_t v22 = v21;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v0 + 40,  (uint64_t)v36,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption?);
  outlined init with take of LocalePreferences?( (uint64_t)v36,  (uint64_t)&v32,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption?);
  if (v33 == 255)
  {
    uint64_t v23 = 0LL;
  }

  else
  {
    uint64_t v23 = Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.rawValue.getter(v32, v33 & 1);
    unint64_t v6 = v24;
  }

  unint64_t v25 = v6;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v0 + 49,  (uint64_t)&v35,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption?);
  outlined init with take of LocalePreferences?( (uint64_t)&v35,  v3 - 49,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption?);
  int v26 = *(unsigned __int8 *)(v3 - 49);
  if (v26 == 12)
  {
    uint64_t v27 = 0LL;
    unint64_t v28 = 0xE000000000000000LL;
  }

  else
  {
    uint64_t v27 = Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v26);
    unint64_t v28 = v29;
  }

  unint64_t v30 = v28;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t Date.FormatStyle.DateFieldCollection.collection(date:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(_BYTE *)(v2 + 17);
  char v4 = *(_BYTE *)(v2 + 18);
  char v5 = *(_BYTE *)(v2 + 19);
  char v6 = *(_BYTE *)(v2 + 35);
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(v2 + 8);
  uint64_t result = *(unsigned __int8 *)(v2 + 16);
  uint64_t v10 = *(void *)(v2 + 24);
  char v11 = *(_BYTE *)(v2 + 32);
  char v12 = *(_BYTE *)(v2 + 33) & 1;
  switch(v7)
  {
    case 0LL:
      goto LABEL_9;
    case 1LL:
      uint64_t v8 = 0LL;
      char v4 = 0;
      goto LABEL_4;
    case 2LL:
      uint64_t v8 = 0LL;
      uint64_t v10 = 0LL;
      char v12 = 0;
      char v11 = 1;
      char v4 = 2;
      goto LABEL_6;
    case 3LL:
      uint64_t v8 = 0LL;
      uint64_t v10 = 0LL;
      char v12 = 0;
      char v11 = 1;
      uint64_t result = 3LL;
      char v4 = 3;
      goto LABEL_9;
    case 4LL:
      uint64_t v8 = 0LL;
      uint64_t v10 = 0LL;
      char v12 = 0;
      char v11 = 1;
      uint64_t result = 3LL;
      char v4 = 3;
      char v6 = 1;
      goto LABEL_9;
    default:
      uint64_t v8 = 0LL;
LABEL_4:
      uint64_t v10 = 0LL;
      char v12 = 0;
      char v11 = 1;
LABEL_6:
      uint64_t result = 3LL;
LABEL_9:
      __int16 v13 = *(_WORD *)(v2 + 48);
      uint64_t v14 = *(void *)(v2 + 40);
      char v15 = *(_BYTE *)(v2 + 34);
      *(_BYTE *)a2 = *(_BYTE *)v2;
      *(void *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 16) = result;
      *(_BYTE *)(a2 + 17) = v3;
      *(_BYTE *)(a2 + 18) = v4;
      *(_BYTE *)(a2 + 19) = v5;
      *(void *)(a2 + 24) = v10;
      *(_BYTE *)(a2 + 32) = v11;
      *(_BYTE *)(a2 + 33) = v12;
      *(_BYTE *)(a2 + 34) = v15;
      *(_BYTE *)(a2 + 35) = v6;
      *(_DWORD *)(a2 + 36) = *(_DWORD *)(v2 + 36);
      *(void *)(a2 + 40) = v14;
      *(_WORD *)(a2 + 48) = v13;
      return result;
  }

Swift::String __swiftcall Date.FormatStyle.format(_:)(Foundation::Date a1)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  __int128 v2 = v1[5];
  __int128 v3 = v1[3];
  __int128 v33 = v1[4];
  __int128 v34 = v2;
  __int128 v4 = v1[5];
  v35[0] = v1[6];
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)((char *)v1 + 106);
  __int128 v5 = v1[1];
  v30[0] = *v1;
  v30[1] = v5;
  __int128 v6 = v1[3];
  __int128 v8 = *v1;
  __int128 v7 = v1[1];
  __int128 v31 = v1[2];
  __int128 v32 = v6;
  __int128 v27 = v33;
  __int128 v28 = v4;
  v29[0] = v1[6];
  *(_OWORD *)((char *)v29 + 10) = *(_OWORD *)((char *)v1 + 106);
  __int128 v24 = v8;
  __int128 v25 = v7;
  *(_OWORD *)int v26 = v31;
  *(_OWORD *)&v26[16] = v3;
  outlined retain of Date.FormatStyle((uint64_t)v30);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v24, (uint64_t)v17);
  __int128 v24 = v17[0];
  __int128 v25 = v17[1];
  v26[0] = v18;
  *(_OWORD *)&v26[8] = v19;
  v26[24] = v20;
  __int128 v27 = v21;
  LOBYTE(v28) = v22;
  *((void *)&v28 + 1) = v23;
  uint64_t v9 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v9
    || (uint64_t v10 = swift_retain_n(),
        MEMORY[0x1895F8858](v10),
        swift_retain(),
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v16, (uint64_t *)&v24),
        unint64_t v12 = *((void *)&v24 + 1),
        uint64_t v11 = v24,
        swift_release_n(),
        !v12))
  {
    uint64_t v11 = 0LL;
    unint64_t v12 = 0xE000000000000000LL;
  }

  uint64_t v13 = v11;
  uint64_t v14 = (void *)v12;
  result._unint64_t object = v14;
  result._uint64_t countAndFlagsBits = v13;
  return result;
}

__n128 Date.FormatStyle.locale(_:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)&_BYTE v25[26] = *(__int128 *)((char *)v2 + 106);
  __int128 v5 = v2[1];
  __int128 v20 = *v2;
  __int128 v21 = v5;
  __int128 v6 = v2[3];
  __int128 v22 = v2[2];
  __int128 v23 = v6;
  __int128 v7 = v2[5];
  __int128 v24 = v2[4];
  *(_OWORD *)__int128 v25 = v7;
  *(_OWORD *)&v25[16] = v2[6];
  char v8 = v25[41];
  char v9 = v25[40];
  uint64_t v10 = *((void *)&v6 + 1);
  char v11 = v24;
  __int128 v16 = v21;
  __int128 v17 = v20;
  __int128 v12 = v22;
  __int16 v13 = v6;
  __n128 v18 = *(__n128 *)&v25[24];
  __int128 v19 = *(_OWORD *)&v25[8];
  outlined retain of Date.FormatStyle((uint64_t)&v20);
  __int128 v15 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v12;
  *(_WORD *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v10;
  *(_BYTE *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 72) = v15;
  *(_OWORD *)(a2 + 88) = v19;
  __n128 result = v18;
  *(__n128 *)(a2 + 104) = v18;
  *(_BYTE *)(a2 + 120) = v9;
  *(_BYTE *)(a2 + 121) = v8;
  return result;
}

uint64_t specialized Date.formatted<A>(_:)(__int128 *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  __int128 v1 = a1[5];
  __int128 v20 = a1[4];
  __int128 v21 = v1;
  v22[0] = a1[6];
  *(_OWORD *)((char *)v22 + 10) = *(__int128 *)((char *)a1 + 106);
  __int128 v2 = a1[1];
  __int128 v17 = *a1;
  __int128 v18 = v2;
  __int128 v3 = a1[3];
  *(_OWORD *)__int128 v19 = a1[2];
  *(_OWORD *)&v19[16] = v3;
  outlined retain of Date.FormatStyle((uint64_t)a1);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v17, (uint64_t)v10);
  __int128 v17 = v10[0];
  __int128 v18 = v10[1];
  v19[0] = v11;
  *(_OWORD *)&v19[8] = v12;
  v19[24] = v13;
  __int128 v20 = v14;
  LOBYTE(v21) = v15;
  *((void *)&v21 + 1) = v16;
  uint64_t v4 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = swift_retain_n();
  MEMORY[0x1895F8858](v5);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v9, (uint64_t *)&v17);
  uint64_t v7 = *((void *)&v17 + 1);
  uint64_t v6 = v17;
  swift_release_n();
  if (!v7) {
    return 0LL;
  }
  return v6;
}

uint64_t Date.formatted(date:time:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *a2;
  uint64_t v37 = *a1;
  char v38 = 0;
  uint64_t v35 = v2;
  char v36 = 0;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v3 = static LocaleCache.cache + 16;
  uint64_t v4 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v3, (uint64_t *)v33);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  *(void *)&__int128 v19 = *(void *)&v33[0];
  *((void *)&v19 + 1) = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v5 = static CalendarCache.cache + 16;
  uint64_t v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v5, (uint64_t *)v33);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  __int128 v18 = v33[0];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v7 = static TimeZoneCache.cache + 16;
  char v8 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v7, &v17);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  uint64_t v9 = v17;
  uint64_t v10 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating,  (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  *(void *)&__int128 v27 = v9;
  *((void *)&v27 + 1) = v10;
  LOBYTE(v20[0]) = 0;
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)( (uint64_t)&v37,  &v35,  &v19,  &v18,  &v27,  (char *)v20,  (uint64_t)v33);
  __int128 v30 = v33[4];
  __int128 v31 = v33[5];
  v32[0] = v34[0];
  *(_OWORD *)((char *)v32 + 10) = *(_OWORD *)((char *)v34 + 10);
  __int128 v27 = v33[0];
  __int128 v28 = v33[1];
  v29[0] = v33[2];
  v29[1] = v33[3];
  outlined retain of Date.FormatStyle((uint64_t)v33);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v27, (uint64_t)v20);
  __int128 v27 = v20[0];
  __int128 v28 = v20[1];
  LOBYTE(v29[0]) = v21;
  *(_OWORD *)((char *)v29 + 8) = v22;
  BYTE8(v29[1]) = v23;
  __int128 v30 = v24;
  LOBYTE(v31) = v25;
  *((void *)&v31 + 1) = v26;
  uint64_t v11 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v11
    || (uint64_t v12 = swift_retain_n(),
        MEMORY[0x1895F8858](v12),
        swift_retain(),
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v16, (uint64_t *)&v27),
        uint64_t v14 = *((void *)&v27 + 1),
        uint64_t v13 = v27,
        swift_release_n(),
        !v14))
  {
    uint64_t v13 = 0LL;
  }

  outlined release of Date.FormatStyle((uint64_t)v33);
  return v13;
}

uint64_t Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)@<X0>( uint64_t result@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7 = *(void *)result;
  uint64_t v8 = *a2;
  char v9 = *((_BYTE *)a2 + 8);
  char v10 = *(_BYTE *)(result + 8) | (*(void *)result == 0LL);
  if (*(_BYTE *)(result + 8) & 1 | (*(void *)result == 0LL))
  {
    uint64_t v7 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    unsigned int v13 = 0;
    uint64_t v14 = 0x3000000000000LL;
  }

  else
  {
    if ((unint64_t)(v7 - 1) > 3)
    {
      unsigned int v13 = 3327;
      uint64_t v14 = 0x2020E0906030001LL;
      uint64_t v12 = 50660611LL;
    }

    else
    {
      uint64_t v15 = 8 * (v7 - 1);
      uint64_t v12 = *(void *)((char *)&unk_1837C1F58 + v15);
      uint64_t v14 = *(void *)((char *)&unk_1837C1F78 + v15);
      unsigned int v13 = 3327;
    }

    uint64_t v11 = 3LL;
  }

  __int128 v16 = *a3;
  __int128 v17 = *a4;
  __int128 v18 = *a5;
  char v19 = *a6;
  if (!v8) {
    char v9 = 1;
  }
  if ((v9 & 1) == 0)
  {
    uint64_t v20 = 0x900000000LL;
    uint64_t v21 = 0x1000000000000LL;
    if ((~v14 & 0x3000000000000LL) != 0)
    {
      uint64_t v27 = 0LL;
      uint64_t v24 = v14 & 0x200000000000000LL;
      unsigned int v22 = v13 >> 8;
      uint64_t v23 = v12 & 3;
      uint64_t v30 = v12 & 0x500;
      uint64_t v29 = v12 & 0x70000;
      uint64_t v28 = v12 & 0x3000000;
      uint64_t v26 = v14 & 0x30000;
      uint64_t v25 = v14 & 0x7000000;
      uint64_t v20 = v14 & 0x900000000LL;
      uint64_t v21 = v14 & 1 | 0x1000000000000LL;
      if (v8 != 3)
      {
LABEL_12:
        if (v8 == 2) {
          uint64_t v31 = 0x100000000000000LL;
        }
        else {
          uint64_t v31 = v24;
        }
        goto LABEL_17;
      }
    }

    else
    {
      LOWORD(v22) = 12;
      uint64_t v23 = 255LL;
      uint64_t v24 = 0x200000000000000LL;
      uint64_t v25 = 100663296LL;
      uint64_t v26 = 196608LL;
      uint64_t v27 = 256LL;
      uint64_t v28 = 50331648LL;
      uint64_t v29 = 327680LL;
      uint64_t v30 = 1280LL;
      uint64_t v11 = 3LL;
      LOBYTE(v13) = -1;
      if (v8 != 3) {
        goto LABEL_12;
      }
    }

    LOWORD(v22) = 0;
    uint64_t v31 = 0x100000000000000LL;
LABEL_17:
    uint64_t v12 = v30 | v23 | v29 | v28;
    uint64_t v32 = v21 | v27;
    __n128 result = v26 | v25;
    uint64_t v14 = v32 | v26 | v25 | v20 | v31 & 0x300000000000000LL;
    LOWORD(v13) = v13 | (unsigned __int16)((_WORD)v22 << 8);
  }

  *(void *)a7 = v11;
  *(void *)(a7 + 8) = 0LL;
  *(void *)(a7 + 16) = v12;
  *(void *)(a7 + 24) = 0LL;
  *(void *)(a7 + 32) = v14;
  *(void *)(a7 + 40) = 0LL;
  *(_WORD *)(a7 + 48) = v13;
  *(void *)(a7 + 56) = v7;
  *(_BYTE *)(a7 + 64) = v10 & 1;
  *(_OWORD *)(a7 + 72) = v16;
  *(_OWORD *)(a7 + 88) = v18;
  *(_OWORD *)(a7 + 104) = v17;
  *(_BYTE *)(a7 + 120) = v19;
  *(_BYTE *)(a7 + 121) = 1;
  return result;
}

Swift::String __swiftcall Date.formatted()()
{
  uint64_t v18 = 1LL;
  char v19 = 0;
  uint64_t v16 = 1LL;
  char v17 = 0;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static LocaleCache.cache + 16;
  __int128 v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v0, (uint64_t *)v20);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  *(void *)&__int128 v15 = *(void *)&v20[0];
  *((void *)&v15 + 1) = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static CalendarCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v2, (uint64_t *)v20);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  __int128 v14 = v20[0];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v4 = static TimeZoneCache.cache + 16;
  uint64_t v5 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v4, (uint64_t *)v20);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  *(void *)&__int128 v13 = *(void *)&v20[0];
  *((void *)&v13 + 1) = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating,  (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  char v12 = 0;
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)( (uint64_t)&v18,  &v16,  &v15,  &v14,  &v13,  &v12,  (uint64_t)v20);
  uint64_t v6 = specialized Date.formatted<A>(_:)(v20);
  uint64_t v8 = v7;
  outlined release of Date.FormatStyle((uint64_t)v20);
  uint64_t v9 = v6;
  char v10 = v8;
  result._unint64_t object = v10;
  result._uint64_t countAndFlagsBits = v9;
  return result;
}

uint64_t Date.FormatStyle.DateFieldCollection.preferredHour(withLocale:)(uint64_t *a1)
{
  void (*v8)(_OWORD *__return_ptr, uint64_t, void *);
  void (*v9)(__int128 *__return_ptr, uint64_t, void *);
  __int128 v10;
  uint64_t v11;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  char v18;
  void (*v19)(__int128 *__return_ptr, uint64_t, void *);
  __int128 v20;
  __int128 v21;
  Swift::String v22;
  char v23;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  _OWORD v33[6];
  _BYTE v34[17];
  uint64_t v3 = *a1;
  uint64_t v2 = (void *)a1[1];
  outlined init with take of LocalePreferences?( v1 + 37,  (uint64_t)&v32,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption?);
  outlined init with take of LocalePreferences?( (uint64_t)&v32,  (uint64_t)v34,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption?);
  uint64_t v4 = v34[0];
  if (v34[0] == 14LL || v3 == 0) {
    return 14LL;
  }
  uint64_t v6 = v34[0];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = (void (*)(_OWORD *__return_ptr, uint64_t, void *))v2[45];
  swift_unknownObjectRetain();
  v8(v33, ObjectType, v2);
  if (LOBYTE(v33[0]) > 1u)
  {
    swift_unknownObjectRelease();
    return v6;
  }

  uint64_t v9 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v2[44];
  swift_unknownObjectRetain();
  v9(&v26, ObjectType, v2);
  swift_unknownObjectRelease();
  v33[0] = v26;
  v33[1] = v27;
  _OWORD v33[2] = v28;
  v33[3] = v29;
  v33[4] = v30;
  v33[5] = v31;
  char v10 = v26;
  uint64_t v11 = *((void *)&v26 + 1);
  uint64_t v25 = v26;
  unint64_t object = (void *)*((void *)&v27 + 1);
  uint64_t countAndFlagsBits = v27;
  if (!*((void *)&v26 + 1))
  {
    outlined retain of Locale.Language( (uint64_t *)v33,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    __int128 v14 = specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)v33);
    uint64_t v11 = v15;
    outlined retain of Locale.Language( (uint64_t *)v33,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v11)
    {
      uint64_t v25 = v14;
      uint64_t v16 = String.lowercased()();
      uint64_t countAndFlagsBits = v16._countAndFlagsBits;
      unint64_t object = v16._object;
    }

    else
    {
      uint64_t v25 = 0LL;
      uint64_t countAndFlagsBits = 0LL;
      unint64_t object = 0LL;
    }
  }

  outlined copy of Locale.LanguageCode?(v10, *((uint64_t *)&v10 + 1));
  outlined retain of Locale.Language( (uint64_t *)v33,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  char v17 = String.lowercased()();
  if (!v11)
  {
    outlined consume of Locale.LanguageCode?(v25, 0LL);
    outlined consume of Locale.LanguageCode?(26746LL, 0xE200000000000000LL);
    goto LABEL_22;
  }

  if (countAndFlagsBits == v17._countAndFlagsBits && object == v17._object)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v25, v11);
    goto LABEL_19;
  }

  uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v25, v11);
  if ((v18 & 1) == 0)
  {
LABEL_22:
    swift_unknownObjectRelease();
    return v4;
  }

BOOL static Date.FormatStyle.TimeStyle.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

void Date.FormatStyle.DateFieldCollection.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (*(_BYTE *)v2 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  int v4 = *(unsigned __int8 *)(v2 + 16);
  if (v4 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v5 = *(void *)(v2 + 8);
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v5, v4);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  uint64_t v6 = *(unsigned __int8 *)(v2 + 17);
  if ((_DWORD)v6 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  uint64_t v7 = *(unsigned __int8 *)(v2 + 18);
  if ((_DWORD)v7 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  if (*(_BYTE *)(v2 + 19) != 3)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v2 + 33) & 1) == 0) {
      goto LABEL_15;
    }
LABEL_23:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

  Hasher._combine(_:)(0);
  if ((*(_BYTE *)(v2 + 33) & 1) != 0) {
    goto LABEL_23;
  }
LABEL_15:
  uint64_t v8 = *(void *)(v2 + 24);
  char v9 = *(_BYTE *)(v2 + 32);
  Hasher._combine(_:)(1u);
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = 10LL;
    if (v8 < 10) {
      uint64_t v10 = v8;
    }
    if (v10 <= 1) {
      uint64_t v11 = 1LL;
    }
    else {
      uint64_t v11 = v10;
    }
    MEMORY[0x186E1B904](103LL, 0xE100000000000000LL, v11);
  }

  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_25:
  if (*(_BYTE *)(v2 + 34) == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  uint64_t v12 = *(unsigned __int8 *)(v2 + 35);
  if ((_DWORD)v12 != 6)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  int v13 = *(unsigned __int8 *)(v2 + 36);
  if (v13 == 9)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v13);
  }

  int v14 = *(unsigned __int8 *)(v2 + 37);
  if (v14 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v14);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if (*(_BYTE *)(v2 + 38) == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if (*(_BYTE *)(v2 + 39) == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  int v15 = *(unsigned __int8 *)(v2 + 48);
  if (v15 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v16 = *(void *)(v2 + 40);
    char v17 = v15 & 1;
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v16, v17);
  }

  int v18 = *(unsigned __int8 *)(v2 + 49);
  if (v18 == 12)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v18);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

uint64_t Date.FormatStyle.DateFieldCollection.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1831F7FB4 + 4 * byte_1837C0EAE[a1]))( 6386277LL,  0xE300000000000000LL);
}

uint64_t sub_1831F7FB4()
{
  return 1918985593LL;
}

uint64_t sub_1831F7FC4()
{
  return 0x72657472617571LL;
}

uint64_t sub_1831F7FDC()
{
  return 0x68746E6F6DLL;
}

uint64_t sub_1831F7FF0()
{
  return 1801807223LL;
}

uint64_t sub_1831F8000()
{
  return 7954788LL;
}

uint64_t sub_1831F800C()
{
  return 0x616559664F796164LL;
}

uint64_t sub_1831F802C()
{
  return 0x7961646B656577LL;
}

uint64_t sub_1831F8044()
{
  return 0x6F69726550796164LL;
}

uint64_t sub_1831F8060()
{
  return 1920298856LL;
}

uint64_t sub_1831F8070()
{
  return 0x6574756E696DLL;
}

uint64_t sub_1831F8084()
{
  return 0x646E6F636573LL;
}

uint64_t sub_1831F8098()
{
  return 0x7246646E6F636573LL;
}

uint64_t sub_1831F80BC()
{
  return 0x656E6F5A656D6974LL;
}

uint64_t Date.FormatStyle.DateFieldCollection.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.DateFieldCollection.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of LocalePreferences?( v3,  (uint64_t)&v25,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
  outlined init with take of LocalePreferences?( (uint64_t)&v25,  (uint64_t)v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
  char v11 = 0;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    outlined init with take of LocalePreferences?( v3 + 8,  (uint64_t)v24,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
    outlined init with take of LocalePreferences?( (uint64_t)v24,  (uint64_t)v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
    char v11 = 1;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?( v3 + 17,  (uint64_t)&v23,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
    outlined init with take of LocalePreferences?( (uint64_t)&v23,  (uint64_t)v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
    char v11 = 2;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?( v3 + 18,  (uint64_t)&v22,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
    outlined init with take of LocalePreferences?( (uint64_t)&v22,  (uint64_t)v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
    char v11 = 3;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?( v3 + 19,  (uint64_t)&v21,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
    outlined init with take of LocalePreferences?( (uint64_t)&v21,  (uint64_t)v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
    char v11 = 4;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?( v3 + 24,  (uint64_t)v20,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption?);
    outlined init with take of LocalePreferences?( (uint64_t)v20,  (uint64_t)v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption?);
    char v11 = 5;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?( v3 + 34,  (uint64_t)&v19,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption?);
    outlined init with take of LocalePreferences?( (uint64_t)&v19,  (uint64_t)v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption?);
    char v11 = 6;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?( v3 + 35,  (uint64_t)&v18,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption?);
    outlined init with take of LocalePreferences?( (uint64_t)&v18,  (uint64_t)v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption?);
    char v11 = 7;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?( v3 + 36,  (uint64_t)&v17,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption?);
    outlined init with take of LocalePreferences?( (uint64_t)&v17,  (uint64_t)v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption?);
    char v11 = 8;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?( v3 + 37,  (uint64_t)&v16,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption?);
    outlined init with take of LocalePreferences?( (uint64_t)&v16,  (uint64_t)v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption?);
    char v11 = 9;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?( v3 + 38,  (uint64_t)&v15,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption?);
    outlined init with take of LocalePreferences?( (uint64_t)&v15,  (uint64_t)v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption?);
    char v11 = 10;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?( v3 + 39,  (uint64_t)&v14,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
    outlined init with take of LocalePreferences?( (uint64_t)&v14,  (uint64_t)v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
    char v11 = 11;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?( v3 + 40,  (uint64_t)v13,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption?);
    outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption?);
    char v11 = 12;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?( v3 + 49,  (uint64_t)&v12,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption?);
    outlined init with take of LocalePreferences?( (uint64_t)&v12,  (uint64_t)v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption?);
    char v11 = 13;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.FormatStyle.DateFieldCollection.CodingKeys()
{
  return Date.FormatStyle.DateFieldCollection.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.FormatStyle.DateFieldCollection.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Date.FormatStyle.DateFieldCollection.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Date.FormatStyle.DateFieldCollection.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.DateFieldCollection.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.DateFieldCollection.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

double protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.DateFieldCollection@<D0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_WORD *)(a2 + 48) = v8;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateFieldCollection( void *a1)
{
  return Date.FormatStyle.DateFieldCollection.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.DateFieldCollection()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.DateFieldCollection()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.DateFieldCollection( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  __int16 v6 = *(_WORD *)(a1 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  __int16 v8 = *(_WORD *)(a2 + 48);
  return specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)( (unsigned __int8 *)v5,  (unsigned __int8 *)v7);
}

uint64_t Date.FormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 72);
  return swift_unknownObjectRetain();
}

__n128 Date.FormatStyle.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 72) = *a1;
  return result;
}

uint64_t (*Date.FormatStyle.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.FormatStyle.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 88);
  return swift_unknownObjectRetain();
}

__n128 Date.FormatStyle.timeZone.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 88) = *a1;
  return result;
}

uint64_t (*Date.FormatStyle.timeZone.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.FormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 104);
  return swift_unknownObjectRetain();
}

__n128 Date.FormatStyle.calendar.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 104) = *a1;
  return result;
}

uint64_t (*Date.FormatStyle.calendar.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Date.FormatStyle.capitalizationContext.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 120);
}

_BYTE *Date.FormatStyle.capitalizationContext.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 120) = *result;
  return result;
}

uint64_t (*Date.FormatStyle.capitalizationContext.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.FormatStyle.attributed.getter@<X0>(_OWORD *a1@<X8>)
{
  __int128 v3 = v1[5];
  __int128 v14 = v1[4];
  __int128 v15 = v3;
  v16[0] = v1[6];
  __int128 v4 = v16[0];
  *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v1 + 106);
  __int128 v5 = v1[1];
  v11[0] = *v1;
  v11[1] = v5;
  __int128 v6 = v1[3];
  __int128 v12 = v1[2];
  __int128 v13 = v6;
  *(_OWORD *)((char *)v18 + 10) = *(_OWORD *)((char *)v16 + 10);
  v17[5] = v3;
  v18[0] = v4;
  v17[3] = v6;
  v17[4] = v14;
  v17[1] = v5;
  _OWORD v17[2] = v12;
  v17[0] = v11[0];
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)v17);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v17, v19);
  __int128 v7 = v19[5];
  a1[4] = v19[4];
  a1[5] = v7;
  a1[6] = v20[0];
  *(_OWORD *)((char *)a1 + 106) = *(_OWORD *)((char *)v20 + 10);
  __int128 v8 = v19[1];
  *a1 = v19[0];
  a1[1] = v8;
  __int128 v9 = v19[3];
  a1[2] = v19[2];
  a1[3] = v9;
  return outlined retain of Date.FormatStyle((uint64_t)v11);
}

uint64_t Date.AttributedStyle.InnerStyle.hash(into:)(uint64_t a1)
{
  void (*v25)(void *__return_ptr, void, void);
  void (*v26)(void *__return_ptr, void, void);
  Swift::UInt8 v27;
  Swift::UInt8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  Swift::UInt v60;
  Swift::UInt v61;
  Swift::UInt8 v62;
  Swift::UInt8 v63;
  Swift::UInt8 v64;
  uint64_t v65;
  uint64_t v66;
  Swift::UInt v67;
  Swift::UInt8 v68;
  uint64_t v69;
  void (*v70)(void, void, void);
  uint64_t v71;
  void (*v72)(void, void, void);
  _BYTE *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  Swift::UInt v95;
  Swift::UInt v96;
  Swift::UInt8 v97;
  Swift::UInt8 v98;
  Swift::UInt8 v99;
  void *v100;
  _BYTE v101[144];
  _BYTE v102[8];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  char v118;
  char v119;
  void v120[18];
  _BYTE v121[144];
  _BYTE v122[144];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int16 v126;
  __int128 v127[8];
  _OWORD v128[8];
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v127);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v127, v128);
  int v3 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v128);
  __int128 v4 = (void *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v128);
  uint64_t v5 = (uint64_t)v4;
  if (v3 != 1)
  {
    Hasher._combine(_:)(0LL);
    __int16 v17 = *(_WORD *)(v5 + 48);
    __int128 v18 = *(_OWORD *)(v5 + 16);
    uint64_t v123 = *(_OWORD *)v5;
    uint64_t v124 = v18;
    id v125 = *(_OWORD *)(v5 + 32);
    char v126 = v17;
    Swift::UInt v19 = *(void *)(v5 + 56);
    int v20 = *(unsigned __int8 *)(v5 + 64);
    outlined retain of Date.FormatStyle(v5);
    specialized Optional<A>.hash(into:)(a1);
    if (v20 == 1)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v19);
    }

    uint64_t v21 = *(void *)(v5 + 80);
    uint64_t ObjectType = swift_getObjectType();
    char v23 = *(uint64_t (**)(void, void))(v21 + 48);
    swift_unknownObjectRetain();
    if ((v23(ObjectType, v21) & 1) != 0)
    {
      Swift::UInt8 v24 = 1;
LABEL_12:
      Hasher._combine(_:)(v24);
LABEL_80:
      swift_unknownObjectRelease();
      uint64_t v65 = *(void *)(v5 + 96);
      id v66 = *(void *)(v5 + 112);
      id v67 = *(unsigned __int8 *)(v5 + 120);
      uint64_t v68 = *(_BYTE *)(v5 + 121);
      uint64_t v69 = swift_getObjectType();
      uint64_t v70 = *(void (**)(void, void, void))(v65 + 112);
      swift_unknownObjectRetain();
      v70(a1, v69, v65);
      swift_unknownObjectRelease();
      uint64_t v71 = swift_getObjectType();
      uint64_t v72 = *(void (**)(void, void, void))(v66 + 120);
      swift_unknownObjectRetain();
      v72(a1, v71, v66);
      swift_unknownObjectRelease();
      Hasher._combine(_:)(v67);
      Hasher._combine(_:)(v68);
      return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v127,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
    }

    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v21 + 64))(ObjectType, v21);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    char v25 = *(void (**)(void *__return_ptr, void, void))(v21 + 464);
    swift_unknownObjectRetain();
    v25(v120, ObjectType, v21);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v120,  (uint64_t)v121,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v121,  (uint64_t)v122,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v122) == 1)
    {
      Swift::UInt8 v24 = 0;
      goto LABEL_12;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v121,  (uint64_t)v102,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v102[0] == 2)
    {
      uint64_t v27 = 0;
    }

    else
    {
      uint64_t v27 = v102[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v27);
    uint64_t v29 = v103;
    if (v103)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v29 + 16));
      uint64_t v30 = *(void *)(v29 + 16);
      if (v30)
      {
        outlined retain of LocalePreferences?( (uint64_t)v121,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v31 = v29 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v31 += 16LL;
          --v30;
        }

        while (v30);
        swift_bridgeObjectRelease();
        if (!v104)
        {
LABEL_28:
          Hasher._combine(_:)(0);
          if (!v105) {
            goto LABEL_29;
          }
          goto LABEL_46;
        }

uint64_t Date.AttributedStyle.InnerStyle.encode(to:)(void *a1)
{
  __int128 v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys>);
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys>);
  *(void *)&__int128 v29 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AttributedStyle.InnerStyle.CodingKeys>);
  uint64_t v32 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v2, v41);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v41, v42);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v42) == 1)
  {
    uint64_t v13 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v42);
    __int128 v29 = *(_OWORD *)(v13 + 32);
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v28 = *(void *)(v13 + 56);
    LOBYTE(v33) = 1;
    __int128 v15 = *(_OWORD *)v13;
    __int128 v26 = *(_OWORD *)(v13 + 16);
    __int128 v27 = v15;
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v41, v40);
    _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v40);
    lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    __int128 v33 = v27;
    __int128 v34 = v26;
    __int128 v35 = v29;
    *(void *)&__int128 v36 = v14;
    *((void *)&v36 + 1) = v28;
    lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
    uint64_t v16 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v16);
  }

  else
  {
    __int16 v17 = (__int128 *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v42);
    LOBYTE(v33) = 0;
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v41, v40);
    uint64_t v18 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v40);
    outlined retain of Date.FormatStyle(v18);
    lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    __int128 v19 = *v17;
    __int128 v20 = v17[1];
    __int128 v21 = v17[3];
    __int128 v35 = v17[2];
    __int128 v36 = v21;
    __int128 v33 = v19;
    __int128 v34 = v20;
    __int128 v22 = v17[4];
    __int128 v23 = v17[5];
    __int128 v24 = v17[6];
    *(_OWORD *)((char *)v39 + 10) = *(__int128 *)((char *)v17 + 106);
    __int128 v38 = v23;
    v39[0] = v24;
    __int128 v37 = v22;
    lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v7);
  }

  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v10);
  return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v41,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
}

uint64_t Date.AttributedStyle.InnerStyle.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v29 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys>);
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  MEMORY[0x1895F8858](v3);
  uint64_t v31 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys>);
  uint64_t v5 = *(void *)(v30 - 8);
  MEMORY[0x1895F8858](v30);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AttributedStyle.InnerStyle.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  __int128 v35 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys();
  __int128 v34 = v11;
  uint64_t v13 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    uint64_t v28 = v5;
    uint64_t v14 = v31;
    uint64_t v15 = v32;
    uint64_t v16 = v33;
    uint64_t v51 = v9;
    uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v18 = v8;
    if (*(void *)(v17 + 16) == 1LL)
    {
      __int128 v19 = v34;
      if ((*(_BYTE *)(v17 + 32) & 1) != 0)
      {
        LOBYTE(v43) = 1;
        lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v30 = v18;
        lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v25 = v51;
        (*(void (**)(char *, uint64_t))(v15 + 8))(v14, v16);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v19, v30);
        __int128 v43 = v36;
        __int128 v44 = v37;
        __int128 v45 = v38;
        __int128 v46 = v39;
        _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)&v43);
        __int128 v27 = &v43;
      }

      else
      {
        LOBYTE(v43) = 0;
        lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
        uint64_t v24 = v30;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v24);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v18);
        __int128 v40 = v47;
        __int128 v41 = v48;
        v42[0] = v49[0];
        *(_OWORD *)((char *)v42 + 10) = *(_OWORD *)((char *)v49 + 10);
        __int128 v36 = v43;
        __int128 v37 = v44;
        __int128 v38 = v45;
        __int128 v39 = v46;
        _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)&v36);
        __int128 v27 = &v36;
      }

      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v27, v50);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v50, v29);
    }

    else
    {
      uint64_t v20 = type metadata accessor for DecodingError();
      swift_allocError();
      __int128 v22 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *__int128 v22 = &type metadata for Date.AttributedStyle.InnerStyle;
      __int128 v23 = v34;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104LL))( v22,  *MEMORY[0x189619358],  v20);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v23, v8);
    }
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.AttributedStyle.InnerStyle.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000013LL;
  }
  else {
    return 0x745374616D726F66LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.AttributedStyle.InnerStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Date.AttributedStyle.InnerStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AttributedStyle.InnerStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AttributedStyle.InnerStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.AttributedStyle.InnerStyle@<X0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  return Date.AttributedStyle.InnerStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.AttributedStyle.InnerStyle( void *a1)
{
  return Date.AttributedStyle.InnerStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.AttributedStyle.InnerStyle()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.AttributedStyle.InnerStyle()
{
  return Hasher._finalize()();
}

uint64_t Date.AttributedStyle.format(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v2, v85);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v85, v86);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v86) == 1)
  {
    uint64_t v5 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v86);
    uint64_t v6 = *(void *)(v5 + 48);
    uint64_t v7 = *(void *)(v5 + 56);
    __int128 v59 = *(_OWORD *)(v5 + 16);
    __int128 v68 = *(_OWORD *)v5;
    __int128 v69 = v59;
    *(_OWORD *)uint64_t v70 = *(_OWORD *)(v5 + 32);
    *(void *)&v70[16] = v6;
    uint64_t v71 = v7;
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v85, v75);
    _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v75);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    ICUDateFormatter.DateFormatInfo.init(_:)(&v68, (uint64_t)v61);
    __int128 v68 = *(_OWORD *)v61;
    __int128 v69 = *(_OWORD *)&v61[16];
    v70[0] = v61[32];
    *(_OWORD *)&v70[8] = *(_OWORD *)&v61[40];
    LOBYTE(v71) = v61[56];
    __int128 v72 = *(_OWORD *)&v61[64];
    char v73 = v62;
    uint64_t v74 = *((void *)&v62 + 1);
    uint64_t v8 = &v68;
  }

  else
  {
    uint64_t v9 = (_OWORD *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v86);
    *(_OWORD *)&v61[64] = v9[4];
    __int128 v62 = v9[5];
    v63[0] = v9[6];
    *(_OWORD *)((char *)v63 + 10) = *(_OWORD *)((char *)v9 + 106);
    *(_OWORD *)uint64_t v61 = *v9;
    *(_OWORD *)&v61[16] = v9[1];
    *(_OWORD *)&v61[32] = v9[2];
    *(_OWORD *)&v61[48] = v9[3];
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v85, v75);
    uint64_t v10 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v75);
    outlined retain of Date.FormatStyle(v10);
    outlined retain of Date.FormatStyle((uint64_t)v9);
    ICUDateFormatter.DateFormatInfo.init(_:)(v61, (uint64_t)&v68);
    *(_OWORD *)uint64_t v61 = v68;
    *(_OWORD *)&v61[16] = v69;
    v61[32] = v70[0];
    *(_OWORD *)&v61[40] = *(_OWORD *)&v70[8];
    v61[56] = v71;
    *(_OWORD *)&v61[64] = v72;
    LOBYTE(v62) = v73;
    *((void *)&v62 + 1) = v74;
    uint64_t v8 = (__int128 *)v61;
  }

  uint64_t v11 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v85,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
  if (!v11) {
    goto LABEL_23;
  }
  *(void *)&v75[0] = v4;
  swift_retain();
  Swift::tuple_String_OpaquePointer_optional v87 = ICUDateFormatter.attributedFormat(_:)(v12);
  unint64_t object = v87.value._0._object;
  if (!v87.value._0._object)
  {
    swift_release();
LABEL_23:
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v75, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v61);
    uint64_t result = swift_release();
    uint64_t v16 = *(void *)v61;
    goto LABEL_24;
  }

  uint64_t countAndFlagsBits = v87.value._0._countAndFlagsBits;
  rawValue = v87.value._1._rawValue;
  uint64_t v50 = a2;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  uint64_t v15 = MEMORY[0x18961AFF0];
  AttributedString.init(_:attributes:)(v76, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v75);
  uint64_t v16 = *(void *)&v75[0];
  uint64_t v17 = rawValue[2];
  if (!v17)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release_n();
    a2 = v50;
LABEL_24:
    *a2 = v16;
    return result;
  }

  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v18 = 0LL;
  __int128 v19 = (char *)(rawValue + 6);
  uint64_t v53 = countAndFlagsBits;
  while (1)
  {
    uint64_t v60 = v18;
    uint64_t v58 = v17;
    uint64_t v20 = *((unsigned int *)v19 - 4);
    *(void *)uint64_t v61 = countAndFlagsBits;
    *(void *)&v61[8] = object;
    swift_bridgeObjectRetain();
    unint64_t v21 = String.Index.init<A>(utf16Offset:in:)();
    *(void *)uint64_t v61 = countAndFlagsBits;
    *(void *)&v61[8] = object;
    swift_bridgeObjectRetain();
    unint64_t v22 = String.Index.init<A>(utf16Offset:in:)();
    if (v22 >> 14 < v21 >> 14) {
      break;
    }
    unint64_t v23 = v22;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v21, v23, (_OWORD *)v16, (unint64_t *)v61);
    uint64_t v24 = *(void *)&v61[24];
    if (*(void *)&v61[24] == 2LL) {
      goto LABEL_27;
    }
    uint64_t v56 = *(void *)&v61[8];
    uint64_t v57 = *(void *)v61;
    uint64_t v55 = *(void *)&v61[16];
    uint64_t v25 = *(void *)&v61[40];
    uint64_t v26 = *(void *)&v61[32];
    uint64_t v28 = *(void *)&v61[56];
    uint64_t v27 = *(void *)&v61[48];
    uint64_t v66 = v15;
    uint64_t v29 = MEMORY[0x18961AFF8];
    uint64_t v67 = MEMORY[0x18961AFF8];
    AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(udateFormatField:)(v20, v61);
    if (v61[0] == 17)
    {
      uint64_t v30 = v29;
    }

    else
    {
      specialized AttributeContainer.subscript.setter(v61[0]);
      uint64_t v15 = v66;
      uint64_t v30 = v67;
    }

    v65[0] = v15;
    v65[1] = v30;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      __int128 v31 = *(_OWORD *)(v16 + 32);
      v84[0] = *(_OWORD *)(v16 + 16);
      v84[1] = v31;
      _OWORD v84[2] = *(_OWORD *)(v16 + 48);
      uint64_t v32 = v25;
      uint64_t v33 = *(void *)(v16 + 64);
      uint64_t v34 = *(void *)(v16 + 72);
      uint64_t v51 = v28;
      uint64_t v52 = v26;
      uint64_t v35 = v27;
      uint64_t v36 = *(void *)(v16 + 80);
      uint64_t v37 = *(void *)(v16 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v84);
      swift_unknownObjectRetain();
      uint64_t v38 = v34;
      uint64_t v25 = v32;
      uint64_t v39 = v36;
      uint64_t v27 = v35;
      uint64_t v40 = v37;
      uint64_t v28 = v51;
      uint64_t v26 = v52;
      uint64_t v41 = AttributedString.Guts.init(string:runs:)(v84, v33, v38, v39, v40);
      swift_release();
      uint64_t v16 = v41;
    }

    uint64_t v18 = v60;
    __int128 v42 = *(_OWORD *)(v16 + 32);
    __int128 v81 = *(_OWORD *)(v16 + 16);
    __int128 v82 = v42;
    __int128 v83 = *(_OWORD *)(v16 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    *(void *)&__int128 v68 = v57;
    *((void *)&v68 + 1) = v56;
    *(void *)&__int128 v69 = v55;
    *((void *)&v69 + 1) = v24;
    *(void *)uint64_t v70 = v26;
    *(void *)&v70[8] = v25;
    *(void *)&v70[16] = v27;
    uint64_t v71 = v28;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v77);
    outlined release of Locale((uint64_t)v75);
    *(_OWORD *)&v61[8] = v75[3];
    *(_OWORD *)&v61[24] = v75[4];
    *(_OWORD *)&v61[40] = v75[5];
    *(_OWORD *)&v61[56] = v75[6];
    *(void *)uint64_t v61 = v16;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    __int128 v43 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    __int128 v44 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v44);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v43, &v64);
    os_unfair_lock_unlock(v44);
    swift_release();
    uint64_t v45 = v64;
    *(void *)&v61[72] = v64;
    BigString.init()();
    uint64_t v64 = 0LL;
    MEMORY[0x186E20E78](&v64, 8LL);
    uint64_t v46 = v64;
    type metadata accessor for AttributedString.Guts();
    uint64_t v47 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0) {
      goto LABEL_26;
    }
    __int128 v48 = v79;
    *(_OWORD *)(v47 + 16) = v78;
    *(_OWORD *)(v47 + 32) = v48;
    *(_OWORD *)(v47 + 48) = v80;
    *(void *)(v47 + 64) = 0LL;
    *(void *)(v47 + 72) = 0LL;
    *(void *)(v47 + 80) = 0LL;
    *(void *)(v47 + 88) = v46;
    swift_release();
    LOBYTE(v64) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)(v65, (char *)&v64);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)&v61[72] != v45) {
      goto LABEL_28;
    }
    v19 += 24;
    uint64_t v16 = *(void *)v61;
    swift_release();
    uint64_t v17 = v58 - 1;
    uint64_t countAndFlagsBits = v53;
    uint64_t v15 = MEMORY[0x18961AFF0];
    if (v58 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
  }

  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_OWORD *Date.AttributedStyle.locale(_:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v3, v40);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v40, v41);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v41) == 1)
  {
    uint64_t v7 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    uint64_t v8 = *(void *)(v7 + 48);
    uint64_t v9 = *(void *)(v7 + 56);
    __int128 v22 = *(_OWORD *)(v7 + 16);
    __int128 v24 = *(_OWORD *)v7;
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v40,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    __int128 v26 = v24;
    __int128 v27 = v22;
    uint64_t v28 = v5;
    uint64_t v29 = v6;
    uint64_t v30 = v8;
    uint64_t v31 = v9;
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)&v26);
  }

  else
  {
    uint64_t v10 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    char v25 = *(_BYTE *)(v10 + 121);
    uint64_t v11 = a2;
    char v12 = *(_BYTE *)(v10 + 120);
    uint64_t v13 = *(void *)(v10 + 56);
    char v14 = *(_BYTE *)(v10 + 64);
    __int128 v19 = *(_OWORD *)(v10 + 16);
    __int128 v20 = *(_OWORD *)v10;
    uint64_t v15 = *(void *)(v10 + 32);
    uint64_t v16 = *(void *)(v10 + 40);
    __int16 v17 = *(_WORD *)(v10 + 48);
    __int128 v21 = *(_OWORD *)(v10 + 104);
    __int128 v23 = *(_OWORD *)(v10 + 88);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v40,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    __int128 v26 = v20;
    __int128 v27 = v19;
    uint64_t v28 = v15;
    uint64_t v29 = v16;
    LOWORD(v30) = v17;
    uint64_t v31 = v13;
    char v32 = v14;
    uint64_t v33 = v5;
    uint64_t v34 = v6;
    __int128 v35 = v23;
    __int128 v36 = v21;
    char v37 = v12;
    a2 = v11;
    char v38 = v25;
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)&v26);
  }

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(&v26, v39);
  return outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v39, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.AttributedStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x79745372656E6E69LL && a2 == 0xEA0000000000656CLL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AttributedStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AttributedStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.AttributedStyle.hash(into:)(uint64_t a1)
{
  void (*v21)(void *__return_ptr, void, void);
  void (*v22)(void *__return_ptr, void, void);
  Swift::UInt8 v23;
  Swift::UInt8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  Swift::UInt v60;
  Swift::UInt v61;
  Swift::UInt8 v62;
  Swift::UInt8 v63;
  Swift::UInt8 v64;
  uint64_t v65;
  uint64_t v66;
  Swift::UInt v67;
  Swift::UInt8 v68;
  uint64_t v69;
  void (*v70)(void, void, void);
  uint64_t v71;
  void (*v72)(void, void, void);
  _BYTE *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  Swift::UInt v95;
  Swift::UInt v96;
  Swift::UInt8 v97;
  Swift::UInt8 v98;
  Swift::UInt8 v99;
  uint64_t v100;
  void *v101;
  void (*v102)(void, void, void);
  void *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void *v107;
  _BYTE v108[144];
  _BYTE v109[8];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  char v125;
  char v126;
  void v127[18];
  _BYTE v128[144];
  _BYTE v129[144];
  _OWORD v130[11];
  __int16 v131;
  __int128 v132[8];
  _OWORD v133[8];
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v132);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v132, v133);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v133) != 1)
  {
    uint64_t v11 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v133);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v132, v130);
    uint64_t v12 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v130);
    Hasher._combine(_:)(0LL);
    __int16 v13 = *(_WORD *)(v11 + 48);
    __int128 v14 = *(_OWORD *)(v11 + 16);
    v130[8] = *(_OWORD *)v11;
    v130[9] = v14;
    v130[10] = *(_OWORD *)(v11 + 32);
    id v131 = v13;
    Swift::UInt v15 = *(void *)(v11 + 56);
    char v16 = *(_BYTE *)(v11 + 64);
    outlined retain of Date.FormatStyle(v12);
    outlined retain of Date.FormatStyle(v11);
    specialized Optional<A>.hash(into:)(a1);
    if ((v16 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v15);
    }

    uint64_t v17 = *(void *)(v11 + 80);
    uint64_t ObjectType = swift_getObjectType();
    __int128 v19 = *(uint64_t (**)(void, void))(v17 + 48);
    swift_unknownObjectRetain();
    if ((v19(ObjectType, v17) & 1) != 0)
    {
      Swift::UInt8 v20 = 1;
LABEL_12:
      Hasher._combine(_:)(v20);
LABEL_80:
      swift_unknownObjectRelease();
      uint64_t v65 = *(void *)(v11 + 96);
      uint64_t v66 = *(void *)(v11 + 112);
      uint64_t v67 = *(unsigned __int8 *)(v11 + 120);
      __int128 v68 = *(_BYTE *)(v11 + 121);
      __int128 v69 = swift_getObjectType();
      uint64_t v70 = *(void (**)(void, void, void))(v65 + 112);
      swift_unknownObjectRetain();
      v70(a1, v69, v65);
      swift_unknownObjectRelease();
      uint64_t v71 = swift_getObjectType();
      __int128 v72 = *(void (**)(void, void, void))(v66 + 120);
      swift_unknownObjectRetain();
      v72(a1, v71, v66);
      swift_unknownObjectRelease();
      Hasher._combine(_:)(v67);
      Hasher._combine(_:)(v68);
      goto LABEL_81;
    }

    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v17 + 64))(ObjectType, v17);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    __int128 v21 = *(void (**)(void *__return_ptr, void, void))(v17 + 464);
    swift_unknownObjectRetain();
    v21(v127, ObjectType, v17);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v127,  (uint64_t)v128,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v128,  (uint64_t)v129,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v129) == 1)
    {
      Swift::UInt8 v20 = 0;
      goto LABEL_12;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v128,  (uint64_t)v109,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v109[0] == 2)
    {
      __int128 v23 = 0;
    }

    else
    {
      __int128 v23 = v109[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v23);
    char v25 = v110;
    if (v110)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v25 + 16));
      __int128 v26 = *(void *)(v25 + 16);
      if (v26)
      {
        outlined retain of LocalePreferences?( (uint64_t)v128,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        __int128 v27 = v25 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v27 += 16LL;
          --v26;
        }

        while (v26);
        swift_bridgeObjectRelease();
        if (!v111)
        {
LABEL_28:
          Hasher._combine(_:)(0);
          if (!v112) {
            goto LABEL_29;
          }
          goto LABEL_46;
        }

uint64_t static Date.AttributedStyle.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  return specialized static Date.AttributedStyle.InnerStyle.== infix(_:_:)(v5, v4) & 1;
}

uint64_t Date.AttributedStyle.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AttributedStyle.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v10, v9);
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Date.AttributedStyle.hashValue.getter()
{
  __int128 v1 = v0[5];
  __int128 v10 = v0[4];
  __int128 v11 = v1;
  v12[0] = v0[6];
  *(_OWORD *)((char *)v12 + 10) = *(__int128 *)((char *)v0 + 106);
  __int128 v2 = v0[1];
  __int128 v6 = *v0;
  __int128 v7 = v2;
  __int128 v3 = v0[3];
  __int128 v8 = v0[2];
  __int128 v9 = v3;
  Hasher.init(_seed:)();
  Date.AttributedStyle.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t Date.AttributedStyle.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AttributedStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  __int128 v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __int128 v8 = v18;
    lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v17, v14);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v14, v15);
    __int128 v9 = v15[5];
    void v8[4] = v15[4];
    v8[5] = v9;
    v8[6] = v16[0];
    *(_OWORD *)((char *)v8 + 106) = *(_OWORD *)((char *)v16 + 10);
    __int128 v10 = v15[1];
    *__int128 v8 = v15[0];
    v8[1] = v10;
    __int128 v11 = v15[3];
    v8[2] = v15[2];
    v8[3] = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

_OWORD *protocol witness for FormatStyle.locale(_:) in conformance Date.AttributedStyle@<X0>( uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3 = v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v3, v40);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v40, v41);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v41) == 1)
  {
    uint64_t v7 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    uint64_t v8 = *(void *)(v7 + 48);
    uint64_t v9 = *(void *)(v7 + 56);
    __int128 v22 = *(_OWORD *)(v7 + 16);
    __int128 v24 = *(_OWORD *)v7;
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v40,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    __int128 v26 = v24;
    __int128 v27 = v22;
    uint64_t v28 = v5;
    uint64_t v29 = v6;
    uint64_t v30 = v8;
    uint64_t v31 = v9;
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)&v26);
  }

  else
  {
    uint64_t v10 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    char v25 = *(_BYTE *)(v10 + 121);
    __int128 v11 = a2;
    char v12 = *(_BYTE *)(v10 + 120);
    uint64_t v13 = *(void *)(v10 + 56);
    char v14 = *(_BYTE *)(v10 + 64);
    __int128 v19 = *(_OWORD *)(v10 + 16);
    __int128 v20 = *(_OWORD *)v10;
    uint64_t v15 = *(void *)(v10 + 32);
    uint64_t v16 = *(void *)(v10 + 40);
    __int16 v17 = *(_WORD *)(v10 + 48);
    __int128 v21 = *(_OWORD *)(v10 + 104);
    __int128 v23 = *(_OWORD *)(v10 + 88);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v40,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    __int128 v26 = v20;
    __int128 v27 = v19;
    uint64_t v28 = v15;
    uint64_t v29 = v16;
    LOWORD(v30) = v17;
    uint64_t v31 = v13;
    char v32 = v14;
    uint64_t v33 = v5;
    uint64_t v34 = v6;
    __int128 v35 = v23;
    __int128 v36 = v21;
    char v37 = v12;
    a2 = v11;
    char v38 = v25;
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)&v26);
  }

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(&v26, v39);
  return outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v39, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.AttributedStyle@<X0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  return Date.AttributedStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.AttributedStyle(void *a1)
{
  return Date.AttributedStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.AttributedStyle()
{
  __int128 v1 = v0[5];
  __int128 v10 = v0[4];
  __int128 v11 = v1;
  v12[0] = v0[6];
  *(_OWORD *)((char *)v12 + 10) = *(__int128 *)((char *)v0 + 106);
  __int128 v2 = v0[1];
  __int128 v6 = *v0;
  __int128 v7 = v2;
  __int128 v3 = v0[3];
  __int128 v8 = v0[2];
  __int128 v9 = v3;
  Hasher.init(_seed:)();
  Date.AttributedStyle.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.AttributedStyle()
{
  __int128 v1 = v0[5];
  __int128 v10 = v0[4];
  __int128 v11 = v1;
  v12[0] = v0[6];
  *(_OWORD *)((char *)v12 + 10) = *(__int128 *)((char *)v0 + 106);
  __int128 v2 = v0[1];
  __int128 v6 = *v0;
  __int128 v7 = v2;
  __int128 v3 = v0[3];
  __int128 v8 = v0[2];
  __int128 v9 = v3;
  Hasher.init(_seed:)();
  Date.AttributedStyle.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.AttributedStyle( __int128 *a1, __int128 *a2)
{
  return specialized static Date.AttributedStyle.InnerStyle.== infix(_:_:)(v5, v4) & 1;
}

uint64_t Date.FormatStyle.Attributed.subscript.getter()
{
  __int128 v1 = v0[5];
  v5[4] = v0[4];
  v5[5] = v1;
  v6[0] = v0[6];
  *(_OWORD *)((char *)v6 + 10) = *(_OWORD *)((char *)v0 + 106);
  __int128 v2 = v0[1];
  v5[0] = *v0;
  v5[1] = v2;
  __int128 v3 = v0[3];
  v5[2] = v0[2];
  _OWORD v5[3] = v3;
  outlined retain of Date.FormatStyle((uint64_t)v5);
  swift_getAtKeyPath();
  return outlined release of Date.FormatStyle((uint64_t)v5);
}

uint64_t key path getter for Date.FormatStyle.Attributed.subscript<A>(dynamicMember:) : <A>Date.FormatStyle.AttributedA( _OWORD *a1, uint64_t *a2)
{
  __int128 v2 = a1[5];
  uint64_t v7[4] = a1[4];
  v7[5] = v2;
  v8[0] = a1[6];
  *(_OWORD *)((char *)v8 + 10) = *(_OWORD *)((char *)a1 + 106);
  __int128 v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  __int128 v4 = a1[3];
  v7[2] = a1[2];
  _OWORD v7[3] = v4;
  uint64_t v5 = *a2;
  outlined retain of Date.FormatStyle((uint64_t)v7);
  Date.FormatStyle.Attributed.subscript.getter(v5);
  return outlined release of Date.FormatStyle((uint64_t)v7);
}

uint64_t Date.FormatStyle.Attributed.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  specialized Measurement<>.AttributedStyle.subscript.setter(a1);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x189619628] + v3 + 8) - 8LL) + 8LL))(a1);
}

void (*Date.FormatStyle.Attributed.subscript.modify(void *a1, void *a2))(uint64_t a1, char a2)
{
  uint64_t v5 = (char *)malloc(0x138uLL);
  *a1 = v5;
  *((void *)v5 + 32) = a2;
  *((void *)v5 + 33) = v2;
  uint64_t v6 = *(void *)(*MEMORY[0x189619628] + *a2 + 8LL);
  *((void *)v5 + 34) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *((void *)v5 + 35) = v7;
  size_t v8 = *(void *)(v7 + 64);
  *((void *)v5 + 36) = malloc(v8);
  *((void *)v5 + 37) = malloc(v8);
  *((void *)v5 + 38) = malloc(v8);
  __int128 v9 = v2[4];
  __int128 v10 = v2[5];
  *((_OWORD *)v5 + 4) = v9;
  *((_OWORD *)v5 + 5) = v10;
  __int128 v11 = v2[6];
  *((_OWORD *)v5 + 6) = v11;
  __int128 v12 = *(__int128 *)((char *)v2 + 106);
  *(_OWORD *)(v5 + 106) = v12;
  __int128 v13 = *v2;
  __int128 v14 = v2[1];
  *(_OWORD *)uint64_t v5 = *v2;
  *((_OWORD *)v5 + 1) = v14;
  __int128 v15 = v2[2];
  __int128 v16 = v2[3];
  *((_OWORD *)v5 + 2) = v15;
  *((_OWORD *)v5 + 3) = v16;
  *(_OWORD *)(v5 + 234) = v12;
  *((_OWORD *)v5 + 13) = v10;
  *((_OWORD *)v5 + 14) = v11;
  *((_OWORD *)v5 + 11) = v16;
  *((_OWORD *)v5 + 12) = v9;
  *((_OWORD *)v5 + 9) = v14;
  *((_OWORD *)v5 + 10) = v15;
  *((_OWORD *)v5 + 8) = v13;
  outlined retain of Date.FormatStyle((uint64_t)v5);
  swift_getAtKeyPath();
  outlined release of Date.FormatStyle((uint64_t)v5);
  return Date.FormatStyle.Attributed.subscript.modify;
}

void Date.FormatStyle.Attributed.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  __int128 v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 280LL) + 16LL);
  v4(*(void *)(*(void *)a1 + 296LL), v3[38], v3[34]);
  uint64_t v5 = (void *)v3[37];
  uint64_t v6 = (void *)v3[38];
  uint64_t v8 = v3[35];
  uint64_t v7 = (void *)v3[36];
  uint64_t v9 = v3[34];
  if ((a2 & 1) != 0)
  {
    v4(v3[36], v3[37], v3[34]);
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    __int128 v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
  }

  else
  {
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    __int128 v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }

  v10(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t Date.FormatStyle.Attributed.format(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v4 = v2[5];
  __int128 v5 = v2[3];
  __int128 v95 = v2[4];
  __int128 v96 = v4;
  __int128 v6 = v2[5];
  v97[0] = v2[6];
  *(_OWORD *)((char *)v97 + 10) = *(__int128 *)((char *)v2 + 106);
  __int128 v7 = v2[1];
  v92[0] = *v2;
  v92[1] = v7;
  __int128 v8 = v2[3];
  __int128 v10 = *v2;
  __int128 v9 = v2[1];
  __int128 v93 = v2[2];
  __int128 v94 = v8;
  __int128 v67 = v95;
  __int128 v68 = v6;
  v69[0] = v2[6];
  *(_OWORD *)((char *)v69 + 10) = *(__int128 *)((char *)v2 + 106);
  __int128 v64 = v10;
  __int128 v65 = v9;
  uint64_t v11 = *a1;
  *(_OWORD *)uint64_t v66 = v93;
  *(_OWORD *)&v66[16] = v5;
  outlined retain of Date.FormatStyle((uint64_t)v92);
  outlined retain of Date.FormatStyle((uint64_t)v92);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v64, (uint64_t)v70);
  __int128 v64 = *(_OWORD *)v70;
  __int128 v65 = *(_OWORD *)&v70[16];
  v66[0] = v70[32];
  *(_OWORD *)&v66[8] = v71;
  v66[24] = v72[0];
  __int128 v67 = *(_OWORD *)&v72[8];
  LOBYTE(v68) = v73;
  *((void *)&v68 + 1) = v74;
  uint64_t v12 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of Date.FormatStyle((uint64_t)v92);
  if (!v12) {
    goto LABEL_20;
  }
  *(void *)&__int128 v64 = v11;
  Swift::tuple_String_OpaquePointer_optional v98 = ICUDateFormatter.attributedFormat(_:)(v13);
  unint64_t object = v98.value._0._object;
  if (!v98.value._0._object)
  {
    swift_release();
LABEL_20:
    BigString.init(_:)();
    uint64_t result = AttributedString.init(_:attributes:)(&v64, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v70);
    uint64_t v17 = *(void *)v70;
    goto LABEL_21;
  }

  uint64_t countAndFlagsBits = v98.value._0._countAndFlagsBits;
  rawValue = v98.value._1._rawValue;
  uint64_t v50 = a2;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  uint64_t v16 = MEMORY[0x18961AFF0];
  AttributedString.init(_:attributes:)(v75, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)&v64);
  uint64_t v17 = v64;
  uint64_t v18 = rawValue[2];
  if (!v18)
  {
LABEL_18:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    a2 = v50;
LABEL_21:
    *a2 = v17;
    return result;
  }

  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v19 = 0LL;
  __int128 v20 = (char *)(rawValue + 6);
  uint64_t v52 = countAndFlagsBits;
  while (1)
  {
    uint64_t v58 = v19;
    uint64_t v59 = v18;
    uint64_t v21 = *((unsigned int *)v20 - 4);
    *(void *)uint64_t v70 = countAndFlagsBits;
    *(void *)&v70[8] = object;
    swift_bridgeObjectRetain();
    unint64_t v22 = String.Index.init<A>(utf16Offset:in:)();
    *(void *)uint64_t v70 = countAndFlagsBits;
    *(void *)&v70[8] = object;
    swift_bridgeObjectRetain();
    unint64_t v23 = String.Index.init<A>(utf16Offset:in:)();
    if (v23 >> 14 < v22 >> 14) {
      break;
    }
    unint64_t v24 = v23;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v22, v24, (_OWORD *)v17, (unint64_t *)v70);
    uint64_t v25 = *(void *)&v70[24];
    if (*(void *)&v70[24] == 2LL) {
      goto LABEL_24;
    }
    uint64_t v55 = *(void *)&v70[8];
    uint64_t v56 = *(void *)v70;
    uint64_t v54 = *(void *)&v70[16];
    uint64_t v26 = *(void *)&v70[32];
    uint64_t v28 = *((void *)&v71 + 1);
    uint64_t v27 = v71;
    uint64_t v57 = *(void *)v72;
    uint64_t v62 = v16;
    uint64_t v29 = MEMORY[0x18961AFF8];
    uint64_t v63 = MEMORY[0x18961AFF8];
    AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(udateFormatField:)(v21, v70);
    if (v70[0] == 17)
    {
      uint64_t v30 = v29;
    }

    else
    {
      specialized AttributeContainer.subscript.setter(v70[0]);
      uint64_t v16 = v62;
      uint64_t v30 = v63;
    }

    v61[0] = v16;
    v61[1] = v30;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      __int128 v31 = *(_OWORD *)(v17 + 32);
      v91[0] = *(_OWORD *)(v17 + 16);
      v91[1] = v31;
      _OWORD v91[2] = *(_OWORD *)(v17 + 48);
      uint64_t v32 = v26;
      uint64_t v33 = *(void *)(v17 + 64);
      uint64_t v34 = *(void *)(v17 + 72);
      uint64_t v35 = v27;
      uint64_t v51 = v28;
      uint64_t v36 = *(void *)(v17 + 80);
      uint64_t v37 = *(void *)(v17 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v91);
      swift_unknownObjectRetain();
      uint64_t v38 = v34;
      uint64_t v26 = v32;
      uint64_t v39 = v36;
      uint64_t v27 = v35;
      uint64_t v40 = v37;
      uint64_t v28 = v51;
      uint64_t v41 = AttributedString.Guts.init(string:runs:)(v91, v33, v38, v39, v40);
      swift_release();
      uint64_t v17 = v41;
    }

    __int128 v42 = *(_OWORD *)(v17 + 32);
    __int128 v88 = *(_OWORD *)(v17 + 16);
    __int128 v89 = v42;
    __int128 v90 = *(_OWORD *)(v17 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    uint64_t v80 = v56;
    uint64_t v81 = v55;
    uint64_t v82 = v54;
    uint64_t v83 = v25;
    uint64_t v84 = v26;
    uint64_t v85 = v27;
    uint64_t v86 = v28;
    uint64_t v87 = v57;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v76);
    outlined release of Locale((uint64_t)&v64);
    *(_OWORD *)&v70[8] = *(_OWORD *)&v66[16];
    *(_OWORD *)&_BYTE v70[24] = v67;
    __int128 v71 = v68;
    *(_OWORD *)__int128 v72 = v69[0];
    *(void *)uint64_t v70 = v17;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    __int128 v43 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    __int128 v44 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v44);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v43, &v60);
    uint64_t v19 = v58;
    os_unfair_lock_unlock(v44);
    swift_release();
    uint64_t v45 = v60;
    *(void *)&v72[16] = v60;
    BigString.init()();
    uint64_t v60 = 0LL;
    MEMORY[0x186E20E78](&v60, 8LL);
    uint64_t v46 = v60;
    type metadata accessor for AttributedString.Guts();
    uint64_t v47 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0) {
      goto LABEL_23;
    }
    __int128 v48 = v78;
    *(_OWORD *)(v47 + 16) = v77;
    *(_OWORD *)(v47 + 32) = v48;
    *(_OWORD *)(v47 + 48) = v79;
    *(void *)(v47 + 64) = 0LL;
    *(void *)(v47 + 72) = 0LL;
    *(void *)(v47 + 80) = 0LL;
    *(void *)(v47 + 88) = v46;
    swift_release();
    LOBYTE(v60) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)(v61, (char *)&v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)&v72[16] != v45) {
      goto LABEL_25;
    }
    v20 += 24;
    uint64_t v17 = *(void *)v70;
    swift_release();
    uint64_t v18 = v59 - 1;
    uint64_t countAndFlagsBits = v52;
    uint64_t v16 = MEMORY[0x18961AFF0];
    if (v59 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }

  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

__n128 Date.FormatStyle.Attributed.locale(_:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)&_BYTE v25[26] = *(__int128 *)((char *)v2 + 106);
  __int128 v5 = v2[1];
  __int128 v20 = *v2;
  __int128 v21 = v5;
  __int128 v6 = v2[3];
  __int128 v22 = v2[2];
  __int128 v23 = v6;
  __int128 v7 = v2[5];
  __int128 v24 = v2[4];
  *(_OWORD *)uint64_t v25 = v7;
  *(_OWORD *)&v25[16] = v2[6];
  char v8 = v25[41];
  char v9 = v25[40];
  uint64_t v10 = *((void *)&v6 + 1);
  char v11 = v24;
  __int128 v16 = v21;
  __int128 v17 = v20;
  __int128 v12 = v22;
  __int16 v13 = v6;
  __n128 v18 = *(__n128 *)&v25[24];
  __int128 v19 = *(_OWORD *)&v25[8];
  outlined retain of Date.FormatStyle((uint64_t)&v20);
  __int128 v15 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v12;
  *(_WORD *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v10;
  *(_BYTE *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 72) = v15;
  *(_OWORD *)(a2 + 88) = v19;
  __n128 result = v18;
  *(__n128 *)(a2 + 104) = v18;
  *(_BYTE *)(a2 + 120) = v9;
  *(_BYTE *)(a2 + 121) = v8;
  return result;
}

uint64_t Date.FormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  Swift::UInt v40;
  Swift::UInt v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  uint64_t v45;
  uint64_t v46;
  Swift::UInt v47;
  Swift::UInt8 v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  _BYTE v54[144];
  _BYTE v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  void v73[18];
  _BYTE v74[144];
  _BYTE v75[144];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int16 v79;
  _OWORD v80[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[26];
  __int128 v3 = v1[5];
  uint64_t v83 = v1[4];
  uint64_t v84 = v3;
  *(_OWORD *)uint64_t v85 = v1[6];
  *(_OWORD *)&v85[10] = *(_OWORD *)((char *)v1 + 106);
  __int128 v4 = v1[1];
  v80[0] = *v1;
  v80[1] = v4;
  __int128 v5 = v1[3];
  uint64_t v81 = v1[2];
  uint64_t v82 = v5;
  uint64_t v76 = v80[0];
  __int128 v77 = v4;
  __int128 v78 = v81;
  __int128 v79 = v5;
  Swift::UInt v6 = *((void *)&v5 + 1);
  int v7 = v83;
  outlined retain of Date.FormatStyle((uint64_t)v80);
  specialized Optional<A>.hash(into:)(a1);
  if (v7 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
  }

  uint64_t v8 = v84;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
  swift_unknownObjectRetain();
  if ((v10(ObjectType, v8) & 1) != 0)
  {
    Swift::UInt8 v11 = 1;
LABEL_8:
    Hasher._combine(_:)(v11);
    goto LABEL_59;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v8 + 64))(ObjectType, v8);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  __int128 v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 464);
  swift_unknownObjectRetain();
  v12(v73, ObjectType, v8);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v73,  (uint64_t)v74,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v75,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_8;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v55,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55[0] == 2)
  {
    __int16 v13 = 0;
  }

  else
  {
    __int16 v13 = v55[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v13);
  __int128 v14 = v56;
  if (!v56)
  {
    Hasher._combine(_:)(0);
    __int128 v19 = v55;
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v14 + 16));
  __int128 v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v54,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    __int128 v19 = v54;
LABEL_23:
    outlined retain of LocalePreferences(v19);
    if (!v57) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v16 = v14 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 += 16LL;
    --v15;
  }

  while (v15);
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v58) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }

uint64_t static Date.FormatStyle.Attributed.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[5];
  v11[4] = a1[4];
  v11[5] = v2;
  v12[0] = a1[6];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)a1 + 106);
  __int128 v3 = a1[1];
  v11[0] = *a1;
  v11[1] = v3;
  __int128 v4 = a1[3];
  _OWORD v11[2] = a1[2];
  v11[3] = v4;
  __int128 v5 = a2[5];
  v9[4] = a2[4];
  v9[5] = v5;
  v10[0] = a2[6];
  *(_OWORD *)((char *)v10 + 10) = *(_OWORD *)((char *)a2 + 106);
  __int128 v6 = a2[1];
  v9[0] = *a2;
  v9[1] = v6;
  __int128 v7 = a2[3];
  v9[2] = a2[2];
  v9[3] = v7;
  return specialized static Date.FormatStyle.== infix(_:_:)((uint64_t)v11, (uint64_t *)v9) & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.FormatStyle.Attributed.CodingKeys()
{
  return 1702060386LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.FormatStyle.Attributed.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 1702060386 && a2 == 0xE400000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.Attributed.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.Attributed.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.FormatStyle.Attributed.encode(to:)(void *a1)
{
  __int128 v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Attributed.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  char v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v8 = v2[5];
  v12[4] = v2[4];
  v12[5] = v8;
  v13[0] = v2[6];
  *(_OWORD *)((char *)v13 + 10) = *(_OWORD *)((char *)v2 + 106);
  __int128 v9 = v2[1];
  v12[0] = *v2;
  v12[1] = v9;
  __int128 v10 = v2[3];
  _OWORD v12[2] = v2[2];
  _OWORD v12[3] = v10;
  lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Date.FormatStyle.Attributed.hashValue.getter()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v43;
  uint64_t v44;
  Swift::UInt v45;
  Swift::UInt8 v46;
  uint64_t v47;
  void (*v48)(_BYTE *, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(_BYTE *, uint64_t, uint64_t);
  _BYTE v52[144];
  _BYTE v53[8];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  void v71[18];
  _BYTE v72[144];
  _BYTE v73[144];
  _BYTE v74[72];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int16 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[26];
  __int128 v1 = v0[5];
  uint64_t v83 = v0[4];
  uint64_t v84 = v1;
  *(_OWORD *)uint64_t v85 = v0[6];
  *(_OWORD *)&v85[10] = *(__int128 *)((char *)v0 + 106);
  __int128 v2 = v0[1];
  __int128 v79 = *v0;
  uint64_t v80 = v2;
  __int128 v3 = v0[3];
  uint64_t v81 = v0[2];
  uint64_t v82 = v3;
  Hasher.init(_seed:)();
  uint64_t v75 = v79;
  uint64_t v76 = v80;
  __int128 v77 = v81;
  __int128 v78 = v82;
  Swift::UInt v4 = *((void *)&v82 + 1);
  int v5 = v83;
  outlined retain of Date.FormatStyle((uint64_t)&v79);
  specialized Optional<A>.hash(into:)((uint64_t)v74);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }

  uint64_t v6 = v84;
  uint64_t ObjectType = swift_getObjectType();
  __int128 v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v6) & 1) != 0)
  {
    Swift::UInt8 v9 = 1;
LABEL_8:
    Hasher._combine(_:)(v9);
    goto LABEL_59;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  __int128 v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v71, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v71,  (uint64_t)v72,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)v73,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v73) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_8;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)v53,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v53[0] == 2)
  {
    Swift::UInt8 v11 = 0;
  }

  else
  {
    Swift::UInt8 v11 = v53[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v11);
  __int128 v12 = v54;
  if (!v54)
  {
    Hasher._combine(_:)(0);
    __int128 v17 = v53;
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  __int16 v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)v52,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    __int128 v17 = v52;
LABEL_23:
    outlined retain of LocalePreferences(v17);
    if (!v55) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  outlined retain of LocalePreferences?( (uint64_t)v72,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16LL;
    --v13;
  }

  while (v13);
  swift_bridgeObjectRelease();
  if (!v55)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v56) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }

uint64_t Date.FormatStyle.Attributed.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.Attributed.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  __int128 v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __int128 v9 = v13[5];
    a2[4] = v13[4];
    a2[5] = v9;
    a2[6] = v14[0];
    *(_OWORD *)((char *)a2 + 106) = *(_OWORD *)((char *)v14 + 10);
    __int128 v10 = v13[1];
    *a2 = v13[0];
    a2[1] = v10;
    __int128 v11 = v13[3];
    a2[2] = v13[2];
    a2[3] = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance Date.FormatStyle.Attributed@<Q0>( __int128 *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)&_BYTE v25[26] = *(__int128 *)((char *)v2 + 106);
  __int128 v5 = v2[1];
  __int128 v20 = *v2;
  __int128 v21 = v5;
  __int128 v6 = v2[3];
  __int128 v22 = v2[2];
  __int128 v23 = v6;
  __int128 v7 = v2[5];
  __int128 v24 = v2[4];
  *(_OWORD *)uint64_t v25 = v7;
  *(_OWORD *)&v25[16] = v2[6];
  char v8 = v25[41];
  char v9 = v25[40];
  uint64_t v10 = *((void *)&v6 + 1);
  char v11 = v24;
  __int128 v16 = v21;
  __int128 v17 = v20;
  __int128 v12 = v22;
  __int16 v13 = v6;
  __n128 v18 = *(__n128 *)&v25[24];
  __int128 v19 = *(_OWORD *)&v25[8];
  outlined retain of Date.FormatStyle((uint64_t)&v20);
  __int128 v15 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v12;
  *(_WORD *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v10;
  *(_BYTE *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 72) = v15;
  *(_OWORD *)(a2 + 88) = v19;
  __n128 result = v18;
  *(__n128 *)(a2 + 104) = v18;
  *(_BYTE *)(a2 + 120) = v9;
  *(_BYTE *)(a2 + 121) = v8;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Attributed@<X0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  return Date.FormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Attributed(void *a1)
{
  return Date.FormatStyle.Attributed.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Attributed()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  uint64_t v42;
  uint64_t v43;
  Swift::UInt v44;
  Swift::UInt8 v45;
  uint64_t v46;
  void (*v47)(_BYTE *, uint64_t, uint64_t);
  uint64_t v48;
  void (*v49)(_BYTE *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  void v69[18];
  _BYTE v70[144];
  _BYTE v71[144];
  _BYTE v72[72];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int16 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[26];
  __int128 v1 = v0[5];
  uint64_t v81 = v0[4];
  uint64_t v82 = v1;
  *(_OWORD *)uint64_t v83 = v0[6];
  *(_OWORD *)&v83[10] = *(__int128 *)((char *)v0 + 106);
  __int128 v2 = v0[1];
  __int128 v77 = *v0;
  __int128 v78 = v2;
  __int128 v3 = v0[3];
  __int128 v79 = v0[2];
  uint64_t v80 = v3;
  Hasher.init(_seed:)();
  char v73 = v77;
  uint64_t v74 = v78;
  uint64_t v75 = v79;
  uint64_t v76 = v80;
  Swift::UInt v4 = *((void *)&v80 + 1);
  int v5 = v81;
  outlined retain of Date.FormatStyle((uint64_t)&v77);
  specialized Optional<A>.hash(into:)((uint64_t)v72);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }

  uint64_t v6 = v82;
  uint64_t ObjectType = swift_getObjectType();
  char v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v6) & 1) != 0)
  {
    Swift::UInt8 v9 = 1;
LABEL_8:
    Hasher._combine(_:)(v9);
    goto LABEL_58;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v69, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v69,  (uint64_t)v70,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v70,  (uint64_t)v71,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v71) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_8;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v70,  (uint64_t)&v51,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v51 == 2)
  {
    char v11 = 0;
  }

  else
  {
    char v11 = v51 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v11);
  __int128 v12 = v52;
  if (!v52)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v51);
    if (!v53) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  __int16 v13 = *(void *)(v12 + 16);
  if (!v13) {
    goto LABEL_22;
  }
  outlined retain of LocalePreferences?( (uint64_t)v70,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16LL;
    --v13;
  }

  while (v13);
  swift_bridgeObjectRelease();
  if (!v53)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v54) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Attributed( _OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[5];
  v11[4] = a1[4];
  v11[5] = v2;
  v12[0] = a1[6];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)a1 + 106);
  __int128 v3 = a1[1];
  v11[0] = *a1;
  v11[1] = v3;
  __int128 v4 = a1[3];
  _OWORD v11[2] = a1[2];
  v11[3] = v4;
  __int128 v5 = a2[5];
  v9[4] = a2[4];
  v9[5] = v5;
  v10[0] = a2[6];
  *(_OWORD *)((char *)v10 + 10) = *(_OWORD *)((char *)a2 + 106);
  __int128 v6 = a2[1];
  v9[0] = *a2;
  v9[1] = v6;
  __int128 v7 = a2[3];
  v9[2] = a2[2];
  v9[3] = v7;
  return specialized static Date.FormatStyle.== infix(_:_:)((uint64_t)v11, (uint64_t *)v9) & 1;
}

uint64_t Date.FormatStyle.attributedStyle.getter@<X0>(_OWORD *a1@<X8>)
{
  __int128 v3 = v1[5];
  __int128 v13 = v1[4];
  __int128 v2 = v13;
  __int128 v14 = v3;
  v15[0] = v1[6];
  __int128 v4 = v15[0];
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)v1 + 106);
  __int128 v5 = *(_OWORD *)((char *)v15 + 10);
  __int128 v6 = v1[1];
  v10[0] = *v1;
  v10[1] = v6;
  __int128 v8 = v1[3];
  __int128 v11 = v1[2];
  __int128 v7 = v11;
  __int128 v12 = v8;
  *a1 = v10[0];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v2;
  a1[5] = v3;
  a1[6] = v4;
  *(_OWORD *)((char *)a1 + 106) = v5;
  return outlined retain of Date.FormatStyle((uint64_t)v10);
}

uint64_t Date.FormatStyle.era(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  __int128 v4 = v2[5];
  *(_OWORD *)&v22[16] = v2[4];
  *(_OWORD *)&v22[32] = v4;
  *(_OWORD *)&v22[48] = v2[6];
  *(_OWORD *)&v22[58] = *(__int128 *)((char *)v2 + 106);
  unsigned __int128 v5 = v2[1];
  __int128 v19 = *v2;
  unsigned __int128 v20 = v5;
  __int128 v6 = v2[3];
  __int128 v21 = v2[2];
  *(_OWORD *)__int128 v22 = v6;
  uint64_t v7 = v21;
  if ((v21 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v8 = 0x906030001LL;
    uint64_t v9 = 50332931LL;
    if ((_DWORD)v3 == 3)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0x1000000000000LL;
      uint64_t v12 = 0x200000000000000LL;
    }

    else
    {
      uint64_t v9 = 50333183LL;
      uint64_t v8 = 0x906030100LL;
      uint64_t v11 = 0x2000000000000LL;
      uint64_t v12 = 0x2000E0000000000LL;
      uint64_t v10 = 327680LL;
    }

    unint64_t v17 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v7 = v12 | v11 | v8;
    unsigned __int128 v15 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    __int16 v13 = 3327;
  }

  else
  {
    __int16 v13 = *(_WORD *)v22;
    uint64_t v14 = *((void *)&v21 + 1);
    unsigned __int128 v15 = v20;
    uint64_t v16 = *((void *)&v19 + 1);
    unint64_t v17 = v19 & 0xFFFFFFFFFFFFFF00LL;
  }

  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v22[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v22[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v22[50];
  *(void *)(a2 + 114) = *(void *)&v22[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v22[2];
  *(void *)a2 = v17 | v3;
  *(void *)(a2 + 8) = v16;
  *(_OWORD *)(a2 + 16) = v15;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v14;
  *(_WORD *)(a2 + 48) = v13;
  return outlined retain of Date.FormatStyle((uint64_t)&v19);
}

uint64_t Date.FormatStyle.year(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *((unsigned __int8 *)a1 + 8);
  __int128 v5 = v2[1];
  __int128 v19 = *v2;
  __int128 v20 = v5;
  __int128 v6 = v2[3];
  unsigned __int128 v21 = v2[2];
  *(_OWORD *)__int128 v22 = v6;
  __int128 v7 = v2[5];
  *(_OWORD *)&v22[16] = v2[4];
  *(_OWORD *)&v22[32] = v7;
  *(_OWORD *)&v22[48] = v2[6];
  *(_OWORD *)&v22[58] = *(__int128 *)((char *)v2 + 106);
  unsigned __int128 v8 = v21;
  if ((v21 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v9 = 0x906030001LL;
    uint64_t v10 = 50332931LL;
    if ((_DWORD)v4 == 255)
    {
      uint64_t v13 = 0LL;
      uint64_t v11 = 0x1000000000000LL;
      uint64_t v12 = 0x200000000000000LL;
    }

    else
    {
      uint64_t v10 = 50333183LL;
      uint64_t v9 = 0x906030100LL;
      uint64_t v11 = 0x2000000000000LL;
      uint64_t v12 = 0x2000E0000000000LL;
      uint64_t v13 = 327680LL;
    }

    uint64_t v15 = 0LL;
    uint64_t v16 = v10 | v13;
    unsigned __int128 v8 = (unint64_t)v12 | (unsigned __int128)(v11 | (unint64_t)v9);
    __int16 v17 = 3327;
    uint64_t v14 = 3LL;
  }

  else
  {
    uint64_t v14 = v19;
    uint64_t v15 = *((void *)&v20 + 1);
    uint64_t v16 = v20;
    __int16 v17 = *(_WORD *)v22;
  }

  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v22[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v22[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v22[50];
  *(void *)(a2 + 114) = *(void *)&v22[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v22[2];
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v16 & 0xFFFFFFFFFFFFFF00LL | v4;
  *(void *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 32) = v8;
  *(_WORD *)(a2 + 48) = v17;
  return outlined retain of Date.FormatStyle((uint64_t)&v19);
}

uint64_t Date.FormatStyle.quarter(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  __int128 v4 = v2[1];
  __int128 v18 = *v2;
  __int128 v19 = v4;
  __int128 v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  __int128 v6 = v2[3];
  unsigned __int128 v20 = v2[2];
  *(_OWORD *)unsigned __int128 v21 = v6;
  unsigned __int128 v7 = v20;
  if ((v20 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v8 = 0x906030001LL;
    uint64_t v9 = 50332931LL;
    if (v3 == 5)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0x1000000000000LL;
      uint64_t v12 = 0x200000000000000LL;
    }

    else
    {
      uint64_t v9 = 50333183LL;
      uint64_t v8 = 0x906030100LL;
      uint64_t v11 = 0x2000000000000LL;
      uint64_t v12 = 0x2000E0000000000LL;
      uint64_t v10 = 327680LL;
    }

    uint64_t v14 = 0LL;
    uint64_t v15 = v9 | v10;
    unsigned __int128 v7 = (unint64_t)v12 | (unsigned __int128)(v11 | (unint64_t)v8);
    __int128 v13 = xmmword_1837C1FB0;
    __int16 v16 = 3327;
  }

  else
  {
    __int128 v13 = v18;
    uint64_t v14 = *((void *)&v19 + 1);
    uint64_t v15 = v19;
    __int16 v16 = *(_WORD *)v21;
  }

  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v13;
  *(void *)(a2 + 16) = v15 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v3 << 8);
  *(void *)(a2 + 24) = v14;
  *(_OWORD *)(a2 + 32) = v7;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.month(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  __int128 v4 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v4;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  __int128 v5 = v2[1];
  __int128 v18 = *v2;
  __int128 v19 = v5;
  __int128 v6 = v2[3];
  __int128 v20 = v2[2];
  *(_OWORD *)unsigned __int128 v21 = v6;
  uint64_t v7 = v20;
  if ((v20 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v8 = 0x906030001LL;
    if ((_DWORD)v3 == 5)
    {
      uint64_t v9 = 0x1000000000000LL;
      uint64_t v10 = 0x200000000000000LL;
      uint64_t v11 = 1283LL;
    }

    else
    {
      uint64_t v8 = 0x906030100LL;
      uint64_t v9 = 0x2000000000000LL;
      uint64_t v10 = 0x2000E0000000000LL;
      uint64_t v11 = 1535LL;
    }

    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v7 = v10 | v9 | v8;
    __int128 v15 = xmmword_1837C1FB0;
    __int16 v12 = 3327;
    unint64_t v16 = 50331648LL;
  }

  else
  {
    __int16 v12 = *(_WORD *)v21;
    uint64_t v13 = *((void *)&v20 + 1);
    uint64_t v14 = *((void *)&v19 + 1);
    __int128 v15 = v18;
    unint64_t v16 = v19 & 0xFFFFFFFFFF000000LL;
    uint64_t v11 = (unsigned __int16)v19;
  }

  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v15;
  *(void *)(a2 + 16) = v16 | (v3 << 16) | v11;
  *(void *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v13;
  *(_WORD *)(a2 + 48) = v12;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.week(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  __int128 v4 = v2[5];
  *(_OWORD *)&v23[16] = v2[4];
  *(_OWORD *)&v23[32] = v4;
  *(_OWORD *)&v23[48] = v2[6];
  *(_OWORD *)&v23[58] = *(__int128 *)((char *)v2 + 106);
  __int128 v5 = v2[1];
  __int128 v20 = *v2;
  __int128 v21 = v5;
  __int128 v6 = v2[3];
  __int128 v22 = v2[2];
  *(_OWORD *)__int128 v23 = v6;
  uint64_t v7 = v22;
  if ((v22 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v8 = 0x906030001LL;
    int v9 = 50332931;
    if ((_DWORD)v3 == 3)
    {
      int v10 = 0;
      uint64_t v11 = 0x1000000000000LL;
      uint64_t v12 = 0x200000000000000LL;
    }

    else
    {
      int v9 = 50333183;
      uint64_t v8 = 0x906030100LL;
      uint64_t v11 = 0x2000000000000LL;
      uint64_t v12 = 0x2000E0000000000LL;
      int v10 = 327680;
    }

    unint64_t v18 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    int v16 = v9 | v10;
    uint64_t v7 = v12 | v11 | v8;
    __int128 v17 = xmmword_1837C1FB0;
    __int16 v13 = 3327;
  }

  else
  {
    __int16 v13 = *(_WORD *)v23;
    uint64_t v14 = *((void *)&v22 + 1);
    uint64_t v15 = *((void *)&v21 + 1);
    int v16 = v21;
    __int128 v17 = v20;
    unint64_t v18 = v21 & 0xFFFFFFFF00000000LL;
  }

  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v23[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v23[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v23[50];
  *(void *)(a2 + 114) = *(void *)&v23[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v23[2];
  *(_OWORD *)a2 = v17;
  *(void *)(a2 + 16) = v18 | (v3 << 24) | *(void *)&v16 & 0xFFFFFFLL;
  *(void *)(a2 + 24) = v15;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v14;
  *(_WORD *)(a2 + 48) = v13;
  return outlined retain of Date.FormatStyle((uint64_t)&v20);
}

uint64_t Date.FormatStyle.day(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((_BYTE *)a1 + 8);
  char v5 = *((_BYTE *)a1 + 9);
  __int128 v6 = v2[5];
  *(_OWORD *)&v22[16] = v2[4];
  *(_OWORD *)&v22[32] = v6;
  *(_OWORD *)&v22[48] = v2[6];
  *(_OWORD *)&v22[58] = *(__int128 *)((char *)v2 + 106);
  __int128 v7 = v2[1];
  __int128 v19 = *v2;
  __int128 v20 = v7;
  __int128 v8 = v2[3];
  __int128 v21 = v2[2];
  *(_OWORD *)__int128 v22 = v8;
  if ((v21 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v9 = 50332931LL;
    if ((v5 & 1) != 0)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0x100000000LL;
      uint64_t v12 = 0x20000090603LL;
    }

    else
    {
      uint64_t v9 = 50333183LL;
      uint64_t v11 = 0x200000000LL;
      uint64_t v12 = 0x2000E090603LL;
      uint64_t v10 = 327680LL;
    }

    uint64_t v16 = 0LL;
    uint64_t v15 = v9 | v10;
    unint64_t v14 = v12 | v11;
    __int128 v13 = xmmword_1837C1FB0;
    __int16 v17 = 3327;
  }

  else
  {
    __int128 v13 = v19;
    unint64_t v14 = (unint64_t)v21 >> 16;
    uint64_t v15 = v20;
    uint64_t v16 = *((void *)&v21 + 1);
    __int16 v17 = *(_WORD *)v22;
  }

  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v22[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v22[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v22[50];
  *(void *)(a2 + 114) = *(void *)&v22[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v22[2];
  *(_OWORD *)a2 = v13;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v3;
  *(_BYTE *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 33) = v5;
  *(_DWORD *)(a2 + 34) = v14;
  *(_WORD *)(a2 + 38) = WORD2(v14);
  *(void *)(a2 + 40) = v16;
  *(_WORD *)(a2 + 48) = v17;
  return outlined retain of Date.FormatStyle((uint64_t)&v19);
}

uint64_t Date.FormatStyle.dayOfYear(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  unsigned __int128 v4 = v2[1];
  __int128 v18 = *v2;
  unsigned __int128 v19 = v4;
  __int128 v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  __int128 v6 = v2[3];
  __int128 v20 = v2[2];
  *(_OWORD *)__int128 v21 = v6;
  uint64_t v7 = v20;
  if ((v20 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v8 = 0x906030001LL;
    uint64_t v9 = 50332931LL;
    if (v3 == 3)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0x1000000000000LL;
      uint64_t v12 = 0x200000000000000LL;
    }

    else
    {
      uint64_t v9 = 50333183LL;
      uint64_t v8 = 0x906030100LL;
      uint64_t v11 = 0x2000000000000LL;
      uint64_t v12 = 0x2000E0000000000LL;
      uint64_t v10 = 327680LL;
    }

    uint64_t v15 = 0LL;
    uint64_t v7 = v12 | v11 | v8;
    unsigned __int128 v13 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    __int128 v14 = xmmword_1837C1FB0;
    __int16 v16 = 3327;
  }

  else
  {
    __int128 v14 = v18;
    unsigned __int128 v13 = v19;
    uint64_t v15 = *((void *)&v20 + 1);
    __int16 v16 = *(_WORD *)v21;
  }

  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  *(void *)(a2 + 32) = v7 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v3 << 16);
  *(void *)(a2 + 40) = v15;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.weekday(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  unsigned __int128 v4 = v2[1];
  __int128 v18 = *v2;
  unsigned __int128 v19 = v4;
  __int128 v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  __int128 v6 = v2[3];
  __int128 v20 = v2[2];
  *(_OWORD *)__int128 v21 = v6;
  uint64_t v7 = v20;
  if ((v20 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v8 = 0x906030001LL;
    uint64_t v9 = 50332931LL;
    if (v3 == 6)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0x1000000000000LL;
      uint64_t v12 = 0x200000000000000LL;
    }

    else
    {
      uint64_t v9 = 50333183LL;
      uint64_t v8 = 0x906030100LL;
      uint64_t v11 = 0x2000000000000LL;
      uint64_t v12 = 0x2000E0000000000LL;
      uint64_t v10 = 327680LL;
    }

    uint64_t v15 = 0LL;
    uint64_t v7 = v12 | v11 | v8;
    unsigned __int128 v13 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    __int128 v14 = xmmword_1837C1FB0;
    __int16 v16 = 3327;
  }

  else
  {
    __int128 v14 = v18;
    unsigned __int128 v13 = v19;
    uint64_t v15 = *((void *)&v20 + 1);
    __int16 v16 = *(_WORD *)v21;
  }

  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  *(void *)(a2 + 32) = v7 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v3 << 24);
  *(void *)(a2 + 40) = v15;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.hour(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  unsigned __int128 v4 = v2[1];
  __int128 v18 = *v2;
  unsigned __int128 v19 = v4;
  __int128 v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  __int128 v6 = v2[3];
  __int128 v20 = v2[2];
  *(_OWORD *)__int128 v21 = v6;
  uint64_t v7 = v20;
  if ((v20 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v8 = 0x906030001LL;
    uint64_t v9 = 50332931LL;
    if (v3 == 14)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0x1000000000000LL;
      uint64_t v12 = 0x200000000000000LL;
    }

    else
    {
      uint64_t v9 = 50333183LL;
      uint64_t v8 = 0x906030100LL;
      uint64_t v11 = 0x2000000000000LL;
      uint64_t v12 = 0x2000E0000000000LL;
      uint64_t v10 = 327680LL;
    }

    uint64_t v15 = 0LL;
    uint64_t v7 = v12 | v11 | v8;
    unsigned __int128 v13 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    __int128 v14 = xmmword_1837C1FB0;
    __int16 v16 = 3327;
  }

  else
  {
    __int128 v14 = v18;
    unsigned __int128 v13 = v19;
    uint64_t v15 = *((void *)&v20 + 1);
    __int16 v16 = *(_WORD *)v21;
  }

  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  *(void *)(a2 + 32) = v7 & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v3 << 40);
  *(void *)(a2 + 40) = v15;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.minute(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  __int128 v4 = v2[5];
  *(_OWORD *)&v22[16] = v2[4];
  *(_OWORD *)&v22[32] = v4;
  *(_OWORD *)&v22[48] = v2[6];
  *(_OWORD *)&v22[58] = *(__int128 *)((char *)v2 + 106);
  unsigned __int128 v5 = v2[1];
  __int128 v19 = *v2;
  unsigned __int128 v20 = v5;
  __int128 v6 = v2[3];
  __int128 v21 = v2[2];
  *(_OWORD *)__int128 v22 = v6;
  uint64_t v7 = v21;
  if ((v21 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v8 = 0x906030001LL;
    uint64_t v9 = 50332931LL;
    if ((_DWORD)v3 == 2)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0x1000000000000LL;
      uint64_t v12 = 0x200000000000000LL;
    }

    else
    {
      uint64_t v9 = 50333183LL;
      uint64_t v8 = 0x906030100LL;
      uint64_t v11 = 0x2000000000000LL;
      uint64_t v12 = 0x2000E0000000000LL;
      uint64_t v10 = 327680LL;
    }

    uint64_t v14 = 0LL;
    uint64_t v7 = v12 | v11 | v8;
    unsigned __int128 v16 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    __int128 v17 = xmmword_1837C1FB0;
    __int16 v13 = 3327;
    unint64_t v15 = 0x200000000000000LL;
  }

  else
  {
    __int16 v13 = *(_WORD *)v22;
    uint64_t v14 = *((void *)&v21 + 1);
    unint64_t v15 = v21 & 0xFF00000000000000LL;
    __int128 v17 = v19;
    unsigned __int128 v16 = v20;
  }

  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v22[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v22[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v22[50];
  *(void *)(a2 + 114) = *(void *)&v22[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v22[2];
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v16;
  *(void *)(a2 + 32) = v15 | (v3 << 48) | v7 & 0xFFFFFFFFFFFFLL;
  *(void *)(a2 + 40) = v14;
  *(_WORD *)(a2 + 48) = v13;
  return outlined retain of Date.FormatStyle((uint64_t)&v19);
}

uint64_t Date.FormatStyle.second(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  unsigned __int128 v4 = v2[1];
  __int128 v18 = *v2;
  unsigned __int128 v19 = v4;
  __int128 v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  __int128 v6 = v2[3];
  __int128 v20 = v2[2];
  *(_OWORD *)__int128 v21 = v6;
  uint64_t v7 = v20;
  if ((v20 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v8 = 0x906030001LL;
    uint64_t v9 = 50332931LL;
    if (v3 == 2)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0x1000000000000LL;
      uint64_t v12 = 0x200000000000000LL;
    }

    else
    {
      uint64_t v9 = 50333183LL;
      uint64_t v8 = 0x906030100LL;
      uint64_t v11 = 0x2000000000000LL;
      uint64_t v12 = 0x2000E0000000000LL;
      uint64_t v10 = 327680LL;
    }

    uint64_t v15 = 0LL;
    uint64_t v7 = v12 | v11 | v8;
    unsigned __int128 v13 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    __int128 v14 = xmmword_1837C1FB0;
    __int16 v16 = 3327;
  }

  else
  {
    __int128 v14 = v18;
    unsigned __int128 v13 = v19;
    uint64_t v15 = *((void *)&v20 + 1);
    __int16 v16 = *(_WORD *)v21;
  }

  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  *(void *)(a2 + 32) = v7 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v3 << 56);
  *(void *)(a2 + 40) = v15;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.secondFraction(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  int v4 = *((unsigned __int8 *)a1 + 8);
  __int128 v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  unsigned __int128 v6 = v2[1];
  __int128 v18 = *v2;
  unsigned __int128 v19 = v6;
  __int128 v7 = v2[3];
  __int128 v20 = v2[2];
  *(_OWORD *)__int128 v21 = v7;
  uint64_t v8 = v20;
  if ((v20 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v9 = 0x906030001LL;
    uint64_t v10 = 50332931LL;
    if (v4 == 255)
    {
      uint64_t v13 = 0LL;
      uint64_t v11 = 0x1000000000000LL;
      uint64_t v12 = 0x200000000000000LL;
    }

    else
    {
      uint64_t v10 = 50333183LL;
      uint64_t v9 = 0x906030100LL;
      uint64_t v11 = 0x2000000000000LL;
      uint64_t v12 = 0x2000E0000000000LL;
      uint64_t v13 = 327680LL;
    }

    uint64_t v8 = v12 | v11 | v9;
    unsigned __int128 v14 = (unint64_t)v10 | (unsigned __int128)(unint64_t)v13;
    __int128 v15 = xmmword_1837C1FB0;
    __int16 v16 = 12;
  }

  else
  {
    __int128 v15 = v18;
    unsigned __int128 v14 = v19;
    __int16 v16 = v21[1];
  }

  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v14;
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v3;
  *(_WORD *)(a2 + 48) = v4 | (v16 << 8);
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.timeZone(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  __int128 v4 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v4;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  unsigned __int128 v5 = v2[1];
  __int128 v18 = *v2;
  unsigned __int128 v19 = v5;
  __int128 v6 = v2[3];
  __int128 v20 = v2[2];
  *(_OWORD *)__int128 v21 = v6;
  uint64_t v7 = v20;
  if ((v20 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v8 = 0x906030001LL;
    uint64_t v9 = 50332931LL;
    if (v3 == 12)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0x1000000000000LL;
      uint64_t v12 = 0x200000000000000LL;
    }

    else
    {
      uint64_t v9 = 50333183LL;
      uint64_t v8 = 0x906030100LL;
      uint64_t v11 = 0x2000000000000LL;
      uint64_t v12 = 0x2000E0000000000LL;
      uint64_t v10 = 327680LL;
    }

    uint64_t v13 = 0LL;
    uint64_t v7 = v12 | v11 | v8;
    unsigned __int128 v14 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    __int128 v15 = xmmword_1837C1FB0;
    unsigned __int8 v16 = -1;
  }

  else
  {
    uint64_t v13 = *((void *)&v20 + 1);
    __int128 v15 = v18;
    unsigned __int128 v14 = v19;
    unsigned __int8 v16 = v21[0];
  }

  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(void *)(a2 + 114) = *(void *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v14;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v13;
  *(_WORD *)(a2 + 48) = v16 | (v3 << 8);
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.Attributed.era(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.era(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.year(_:)(uint64_t *a1)
{
  return Date.FormatStyle.Attributed.year(_:)(a1, (uint64_t (*)(uint64_t *))Date.FormatStyle.year(_:));
}

uint64_t Date.FormatStyle.Attributed.quarter(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.quarter(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.month(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.month(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.week(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.week(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.day(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(a1 + 8);
  char v3 = *(_BYTE *)(a1 + 9);
  uint64_t v5 = *(void *)a1;
  char v6 = v2;
  char v7 = v3;
  return Date.FormatStyle.day(_:)(&v5, a2);
}

uint64_t Date.FormatStyle.Attributed.dayOfYear(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.dayOfYear(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.weekday(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.weekday(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.hour(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.hour(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.minute(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.minute(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.second(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.second(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.secondFraction(_:)(uint64_t *a1)
{
  return Date.FormatStyle.Attributed.year(_:)( a1,  (uint64_t (*)(uint64_t *))Date.FormatStyle.secondFraction(_:));
}

uint64_t Date.FormatStyle.Attributed.year(_:)(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  char v2 = *((_BYTE *)a1 + 8);
  uint64_t v4 = *a1;
  char v5 = v2;
  return a2(&v4);
}

uint64_t Date.FormatStyle.Attributed.timeZone(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  return Date.FormatStyle.timeZone(_:)(&v3, a2);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.FormatStyle@<X0>( Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  Swift::String v4 = Date.FormatStyle.format(_:)(a2);
  uint64_t result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

Foundation::Date __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Date.FormatStyle.parse(_:)( Swift::String a1)
{
  unint64_t object = a1._object;
  __darwin_time_t countAndFlagsBits = a1._countAndFlagsBits;
  char v73 = v1;
  uint64_t v94 = *MEMORY[0x1895F89C0];
  __int128 v6 = v2[5];
  __int128 v7 = v2[3];
  __int128 v91 = v2[4];
  __int128 v92 = v6;
  __int128 v8 = v2[5];
  v93[0] = v2[6];
  *(_OWORD *)((char *)v93 + 10) = *(_OWORD *)((char *)v2 + 106);
  __int128 v9 = v2[1];
  v88[0] = *v2;
  v88[1] = v9;
  __int128 v10 = v2[3];
  timespec v12 = (timespec)*v2;
  timespec v11 = (timespec)v2[1];
  __int128 v89 = v2[2];
  __int128 v90 = v10;
  __int128 v85 = v91;
  __int128 v86 = v8;
  v87[0] = v2[6];
  *(_OWORD *)((char *)v87 + 10) = *(_OWORD *)((char *)v2 + 106);
  timespec v82 = v12;
  timespec v83 = v11;
  *(_OWORD *)uint64_t v84 = v89;
  *(_OWORD *)&v84[16] = v7;
  outlined retain of Date.FormatStyle((uint64_t)v88);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v82, (uint64_t)v75);
  timespec v82 = v75[0];
  timespec v83 = v75[1];
  v84[0] = v76;
  *(_OWORD *)&v84[8] = v77;
  v84[24] = v78;
  __int128 v85 = v79;
  LOBYTE(v86) = v80;
  *((void *)&v86 + 1) = v81;
  uint64_t v13 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
    v82.__darwin_time_t tv_sec = countAndFlagsBits;
    v82.uint64_t tv_nsec = (uint64_t)object;
    udat_getCalendar();
    LODWORD(v75[0].tv_sec) = 0;
    ucal_clone();
    if (SLODWORD(v75[0].tv_sec) <= 0)
    {
      swift_bridgeObjectRetain();
      __darwin_time_t v14 = countAndFlagsBits;
      __int128 v15 = specialized _copyCollectionToContiguousArray<A>(_:)(countAndFlagsBits, (unint64_t)object);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v16 = String.Index.utf16Offset<A>(in:)();
      if (v16 < (uint64_t)0xFFFFFFFF80000000LL)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }

      uint64_t v17 = v16;
      if (v16 > 0x7FFFFFFF)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int v74 = v16;
      if (v15[2] >> 31)
      {
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
      }

      udat_parseCalendar();
      swift_release();
      if (SLODWORD(v75[0].tv_sec) < 1 && v17 != v74)
      {
        ucal_getMillis();
        if (SLODWORD(v75[0].tv_sec) < 1)
        {
          double v71 = v18 / 1000.0 + -978307200.0;
          ucal_close();
          swift_release();
          *char v73 = v71;
          return result;
        }
      }

      __darwin_time_t countAndFlagsBits = v14;
      ucal_close();
    }

    uint64_t v19 = countAndFlagsBits;
    v82.__darwin_time_t tv_sec = 0LL;
    v82.uint64_t tv_nsec = 0LL;
    clock_gettime(_CLOCK_REALTIME, &v82);
    uint64_t v20 = swift_retain_n();
    MEMORY[0x1895F8858](v20);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v72, &v82.tv_sec);
    if (!v3)
    {
      __darwin_time_t tv_sec = v82.tv_sec;
      uint64_t tv_nsec = v82.tv_nsec;
      swift_release_n();
      char v73 = (double *)tv_nsec;
      v82.__darwin_time_t tv_sec = 0LL;
      v82.uint64_t tv_nsec = 0xE000000000000000LL;
      if (tv_nsec)
      {
        _StringGuts.grow(_:)(88LL);
        v23.___darwin_time_t countAndFlagsBits = 0x7020746F6E6E6143LL;
        v23._unint64_t object = (void *)0xED00002065737261LL;
        String.append(_:)(v23);
        v24.___darwin_time_t countAndFlagsBits = v19;
        v24._unint64_t object = object;
        String.append(_:)(v24);
        v25.___darwin_time_t countAndFlagsBits = 0xD000000000000046LL;
        v25._unint64_t object = (void *)0x80000001839CAB20LL;
        String.append(_:)(v25);
        __darwin_time_t v26 = tv_sec;
        uint64_t v27 = tv_nsec;
      }

      else
      {
        _StringGuts.grow(_:)(16LL);
        swift_bridgeObjectRelease();
        strcpy((char *)&v82, "Cannot parse ");
        HIWORD(v82.tv_nsec) = -4864;
        __darwin_time_t v26 = v19;
        uint64_t v27 = (uint64_t)object;
      }

      String.append(_:)(*(Swift::String *)&v26);
      v47.___darwin_time_t countAndFlagsBits = 46LL;
      v47._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v47);
      __darwin_time_t v48 = v82.tv_sec;
      uint64_t v49 = v82.tv_nsec;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183720D90;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(inited + 72) = MEMORY[0x189617FA8];
      *(void *)(inited + 40) = v51;
      *(void *)(inited + 48) = v48;
      *(void *)(inited + 56) = v49;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      uint64_t v52 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v82);
      __darwin_time_t v53 = v82.tv_sec;
      uint64_t v54 = v82.tv_nsec;
      swift_retain();
      unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v54);
      if ((v56 & 1) != 0)
      {
        __break(1u);
      }

      else
      {
        v52[(v55 >> 6) + 8] |= 1LL << v55;
        uint64_t v57 = (__darwin_time_t *)(v52[6] + 16 * v55);
        __darwin_time_t *v57 = v53;
        v57[1] = v54;
        outlined init with take of Any(&v83, (_OWORD *)(v52[7] + 32 * v55));
        uint64_t v58 = v52[2];
        BOOL v37 = __OFADD__(v58, 1LL);
        uint64_t v59 = v58 + 1;
        if (!v37)
        {
          _OWORD v52[2] = v59;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v60 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v61 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v62 = objc_msgSend(v60, sel_initWithDomain_code_userInfo_, v61, 2048, _NativeDictionary.bridged()(), v73);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v63 = objc_msgSend(v62, sel_domain);
          id v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
          uint64_t v66 = v65;

          if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v66 == v67)
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
LABEL_25:
            swift_willThrow();
            swift_release();
            return result;
          }

          char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v68 & 1) != 0) {
            goto LABEL_25;
          }
          goto LABEL_33;
        }
      }

      __break(1u);
      goto LABEL_31;
    }

    swift_release_n();
    swift_willThrow();
    __break(1u);
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v28 = swift_initStackObject();
    *(_OWORD *)(v28 + 16) = xmmword_183720D90;
    *(void *)(v28 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(v28 + 72) = MEMORY[0x189617FA8];
    *(void *)(v28 + 40) = v29;
    *(void *)(v28 + 48) = 0xD000000000000021LL;
    *(void *)(v28 + 56) = 0x80000001839CE1D0LL;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v30 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(v28 + 32, (uint64_t)&v82);
    __darwin_time_t v31 = v82.tv_sec;
    uint64_t v32 = v82.tv_nsec;
    swift_retain();
    unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
    if ((v34 & 1) != 0)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }

    v30[(v33 >> 6) + 8] |= 1LL << v33;
    uint64_t v35 = (__darwin_time_t *)(v30[6] + 16 * v33);
    *uint64_t v35 = v31;
    v35[1] = v32;
    outlined init with take of Any(&v83, (_OWORD *)(v30[7] + 32 * v33));
    uint64_t v36 = v30[2];
    BOOL v37 = __OFADD__(v36, 1LL);
    uint64_t v38 = v36 + 1;
    if (v37)
    {
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }

    _OWORD v30[2] = v38;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v39 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v40 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v41 = objc_msgSend(v39, sel_initWithDomain_code_userInfo_, v40, 2048, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v42 = objc_msgSend(v41, sel_domain);
    id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    uint64_t v45 = v44;

    if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v45 == v46)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v70 & 1) == 0) {
        goto LABEL_37;
      }
    }

    swift_willThrow();
  }

  return result;
}

Foundation::Date protocol witness for ParseStrategy.parse(_:) in conformance Date.FormatStyle( Swift::String *a1)
{
  return Date.FormatStyle.parse(_:)(*a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.FormatStyle.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_183200A3C + 4 * byte_1837C0EBC[*v0]))( 0x736C6F626D7973LL,  0xE700000000000000LL);
}

uint64_t sub_183200A3C()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_183200A50()
{
  return 0x656E6F5A656D6974LL;
}

uint64_t sub_183200A68()
{
  return 0x7261646E656C6163LL;
}

unint64_t sub_183200A80()
{
  return 0xD000000000000015LL;
}

uint64_t sub_183200A9C()
{
  return 0x6C79745365746164LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.FormatStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Date.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.FormatStyle.encode(to:)(void *a1)
{
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.CodingKeys>);
  uint64_t v36 = *(void *)(v38 - 8);
  MEMORY[0x1895F8858](v38);
  Swift::String v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *v1;
  unint64_t v7 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v33 = v1[1];
  uint64_t v34 = v6;
  unint64_t v8 = v1[4];
  uint64_t v35 = v1[5];
  unsigned int v9 = *((unsigned __int16 *)v1 + 24);
  uint64_t v29 = v1[7];
  HIDWORD(v28) = *((unsigned __int8 *)v1 + 64);
  __int128 v10 = *(_OWORD *)(v1 + 9);
  __int128 v31 = *(_OWORD *)(v1 + 11);
  __int128 v32 = v10;
  __int128 v30 = *(_OWORD *)(v1 + 13);
  int v56 = *((unsigned __int8 *)v1 + 120);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v8 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v11 = 0LL;
    LOBYTE(v12) = 0;
    uint64_t v13 = 0LL;
    LOBYTE(v14) = 0;
    LOBYTE(v15) = 0;
    uint64_t v16 = 0LL;
    LOBYTE(v17) = 12;
    LOBYTE(v9) = -1;
    LOBYTE(v18) = 2;
    LOBYTE(v19) = 9;
    LOBYTE(v20) = 6;
    LOBYTE(v8) = 1;
    LOBYTE(v21) = 5;
    LOBYTE(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v6, v5) = 3;
    LOBYTE(v7) = 3;
    LOBYTE(v22) = 3;
    LOBYTE(v23) = 3;
    LOBYTE(v24) = 1;
  }

  else
  {
    unint64_t v21 = v7 >> 8;
    unint64_t v12 = v7 >> 16;
    unint64_t v22 = v7 >> 24;
    uint64_t v14 = (v8 >> 8) & 1;
    unint64_t v23 = v8 >> 16;
    unint64_t v20 = v8 >> 24;
    unint64_t v19 = HIDWORD(v8);
    unint64_t v15 = v8 >> 40;
    unint64_t v24 = HIWORD(v8);
    unint64_t v18 = HIBYTE(v8);
    unsigned int v17 = v9 >> 8;
    uint64_t v13 = v34;
    uint64_t v16 = v35;
    uint64_t v11 = v33;
  }

  LOBYTE(v39) = v5;
  *((void *)&v39 + 1) = v11;
  char v40 = v7;
  char v41 = v21;
  char v42 = v12;
  char v43 = v22;
  uint64_t v44 = v13;
  char v45 = v8;
  char v46 = v14;
  char v47 = v23;
  char v48 = v20;
  char v49 = v19;
  char v50 = v15;
  char v51 = v24;
  char v52 = v18;
  uint64_t v53 = v16;
  char v54 = v9;
  char v55 = v17;
  char v57 = 0;
  lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection();
  uint64_t v26 = v37;
  uint64_t v25 = v38;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v26)
  {
    __int128 v39 = v32;
    char v57 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    __int128 v39 = v31;
    char v57 = 2;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    __int128 v39 = v30;
    char v57 = 3;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v39) = v56;
    char v57 = 4;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&__int128 v39 = v29;
    BYTE8(v39) = BYTE4(v28);
    char v57 = 5;
    lazy protocol witness table accessor for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v4, v25);
}

uint64_t Date.FormatStyle.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v53 = 0;
    lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v37 = v38;
    uint64_t v35 = *((void *)&v38 + 1);
    uint64_t v36 = v39;
    uint64_t v28 = v41;
    int v25 = v42;
    uint64_t v27 = v43;
    uint64_t v26 = v44;
    uint64_t v29 = v45;
    __int128 v30 = a2;
    uint64_t v33 = v46;
    uint64_t v34 = v40;
    uint64_t v32 = v47;
    uint64_t v31 = v48;
    uint64_t v9 = v49;
    int v10 = v50;
    int v11 = v51;
    char v53 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v21 = v11;
    int v22 = v10;
    uint64_t v23 = v9;
    __int128 v24 = v38;
    char v53 = 2;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __int128 v20 = v38;
    char v53 = 3;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __int128 v19 = v38;
    char v53 = 4;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v13 = v38;
    char v53 = 5;
    lazy protocol witness table accessor for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v14 = BYTE8(v38);
    uint64_t v15 = 256LL;
    if (!v25) {
      uint64_t v15 = 0LL;
    }
    char v52 = BYTE8(v38);
    uint64_t v16 = v30;
    uint64_t v17 = v15 | v28 | (v27 << 16) | (v26 << 24) | (v29 << 32);
    uint64_t v18 = v38;
    *__int128 v30 = v37;
    v16[1] = v35;
    _OWORD v16[2] = v36;
    void v16[3] = v34;
    v16[4] = v17 | (v33 << 40) | (v32 << 48) | (v31 << 56);
    v16[5] = v23;
    *((_WORD *)v16 + 24) = v22 | ((_WORD)v21 << 8);
    v16[7] = v18;
    *((_BYTE *)v16 + 64) = v14;
    *(_OWORD *)(v16 + 9) = v24;
    *(_OWORD *)(v16 + 11) = v20;
    *(_OWORD *)(v16 + 13) = v19;
    *((_BYTE *)v16 + 120) = v13;
    *((_BYTE *)v16 + 121) = 1;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void Date.FormatStyle.hash(into:)(uint64_t a1)
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  Swift::UInt8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  Swift::UInt v43;
  Swift::UInt v44;
  Swift::UInt8 v45;
  Swift::UInt8 v46;
  Swift::UInt8 v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  void *v52;
  void *v53;
  void *v54;
  Swift::UInt v55;
  Swift::UInt8 v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[144];
  _BYTE v61[8];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  char v78;
  void v79[18];
  _BYTE v80[144];
  _BYTE v81[144];
  _BYTE v82[64];
  outlined init with take of LocalePreferences?( v1,  (uint64_t)v82,  &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  Swift::UInt v3 = *(void *)(v1 + 56);
  int v4 = *(unsigned __int8 *)(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v58 = *(void *)(v1 + 112);
  uint64_t v59 = *(void *)(v1 + 96);
  Swift::UInt v6 = *(unsigned __int8 *)(v1 + 120);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 121);
  specialized Optional<A>.hash(into:)(a1);
  if (v4 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v9(ObjectType, v5) & 1) != 0)
  {
    Swift::UInt8 v10 = 1;
LABEL_8:
    Hasher._combine(_:)(v10);
    swift_unknownObjectRelease();
    unint64_t v12 = v58;
    goto LABEL_62;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v11(v79, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v79,  (uint64_t)v80,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v80,  (uint64_t)v81,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v81) == 1)
  {
    Swift::UInt8 v10 = 0;
    goto LABEL_8;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v80,  (uint64_t)v61,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v61[0] == 2)
  {
    char v13 = 0;
  }

  else
  {
    char v13 = v61[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v13);
  char v14 = v62;
  char v55 = v6;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    uint64_t v18 = v61;
    goto LABEL_22;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v14 + 16));
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v80,  (uint64_t)v60,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v18 = v60;
LABEL_22:
    outlined retain of LocalePreferences(v18);
    if (!v63) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

  outlined retain of LocalePreferences?( (uint64_t)v80,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v16 = v14 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 += 16LL;
    --v15;
  }

  while (v15);
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v64) {
      goto LABEL_18;
    }
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = v65;
    if (!v65) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }

Swift::Int Date.FormatStyle.hashValue.getter()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  Swift::UInt v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  uint64_t v44;
  void (*v45)(_BYTE *, uint64_t, uint64_t);
  uint64_t v46;
  void (*v47)(_BYTE *, uint64_t, uint64_t);
  void *v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt8 v52;
  uint64_t v53;
  _BYTE v54[144];
  _BYTE v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  void v73[18];
  _BYTE v74[144];
  _BYTE v75[144];
  _BYTE v76[72];
  _BYTE v77[64];
  outlined init with take of LocalePreferences?( v0,  (uint64_t)v77,  &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  Swift::UInt v1 = *(void *)(v0 + 56);
  int v2 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 80);
  char v53 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 112);
  Swift::UInt v5 = *(unsigned __int8 *)(v0 + 120);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 121);
  Hasher.init(_seed:)();
  specialized Optional<A>.hash(into:)((uint64_t)v76);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

  uint64_t ObjectType = swift_getObjectType();
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v3) & 1) != 0)
  {
    Swift::UInt8 v9 = 1;
LABEL_8:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease();
    int v11 = v53;
    goto LABEL_62;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt8 v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v10(v73, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v73,  (uint64_t)v74,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v75,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_8;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v55,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55[0] == 2)
  {
    unint64_t v12 = 0;
  }

  else
  {
    unint64_t v12 = v55[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v12);
  char v13 = v56;
  unsigned __int8 v50 = v4;
  if (!v56)
  {
    Hasher._combine(_:)(0);
    uint64_t v17 = v55;
    goto LABEL_22;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  char v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v54,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v17 = v54;
LABEL_22:
    outlined retain of LocalePreferences(v17);
    if (!v57) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16LL;
    --v14;
  }

  while (v14);
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v58) {
      goto LABEL_18;
    }
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = v59;
    if (!v59) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return Date.FormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle(void *a1)
{
  return Date.FormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(_BYTE *, uint64_t, uint64_t);
  void *v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  void v71[18];
  _BYTE v72[144];
  _BYTE v73[144];
  _BYTE v74[72];
  _BYTE v75[64];
  outlined init with take of LocalePreferences?( v0,  (uint64_t)v75,  &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  Swift::UInt v1 = *(void *)(v0 + 56);
  int v2 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 80);
  unsigned __int8 v51 = *(void *)(v0 + 112);
  char v52 = *(void *)(v0 + 96);
  Swift::UInt v4 = *(unsigned __int8 *)(v0 + 120);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 121);
  Hasher.init(_seed:)();
  specialized Optional<A>.hash(into:)((uint64_t)v74);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

  uint64_t ObjectType = swift_getObjectType();
  Swift::UInt8 v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v3) & 1) != 0)
  {
    Swift::UInt8 v8 = 1;
LABEL_8:
    Hasher._combine(_:)(v8);
    swift_unknownObjectRelease();
    Swift::UInt8 v10 = v51;
    goto LABEL_61;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt8 v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v9(v71, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v71,  (uint64_t)v72,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)v73,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v73) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_8;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)&v53,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v53 == 2)
  {
    int v11 = 0;
  }

  else
  {
    int v11 = v53 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v11);
  unint64_t v12 = v54;
  if (!v54)
  {
    Hasher._combine(_:)(0);
LABEL_21:
    outlined retain of LocalePreferences(&v53);
    if (!v55) {
      goto LABEL_17;
    }
    goto LABEL_22;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  char v13 = *(void *)(v12 + 16);
  if (!v13) {
    goto LABEL_21;
  }
  char v14 = v4;
  outlined retain of LocalePreferences?( (uint64_t)v72,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v15 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16LL;
    --v13;
  }

  while (v13);
  swift_bridgeObjectRelease();
  Swift::UInt v4 = v14;
  if (!v55)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v56) {
      goto LABEL_18;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = v57;
    if (!v57) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }

void static Date.FormatStyle.DateStyle.complete.getter(void *a1@<X8>)
{
  *a1 = 4LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.FormatStyle.DateStyle.CodingKeys()
{
  return 0x65756C6156776172LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.DateStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.DateStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.FormatStyle.DateStyle.encode(to:)(void *a1)
{
  return Date.FormatStyle.DateStyle.encode(to:)( a1,  &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.DateStyle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
}

uint64_t Date.FormatStyle.DateStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.DateStyle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys,  a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.DateStyle@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle( void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle( a1,  a2,  a3,  &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.DateStyle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
}

void static Date.FormatStyle.TimeStyle.omitted.getter(void *a1@<X8>)
{
  *a1 = 0LL;
}

void static Date.FormatStyle.TimeStyle.shortened.getter(void *a1@<X8>)
{
  *a1 = 1LL;
}

void static Date.FormatStyle.TimeStyle.standard.getter(void *a1@<X8>)
{
  *a1 = 2LL;
}

void static Date.FormatStyle.TimeStyle.complete.getter(void *a1@<X8>)
{
  *a1 = 3LL;
}

void Date.FormatStyle.TimeStyle.hash(into:)()
{
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.FormatStyle.DateStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x65756C6156776172LL && a2 == 0xE800000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.TimeStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.TimeStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.FormatStyle.TimeStyle.encode(to:)(void *a1)
{
  return Date.FormatStyle.DateStyle.encode(to:)( a1,  &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.TimeStyle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
}

uint64_t Date.FormatStyle.DateStyle.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void))
{
  Swift::UInt8 v10 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  char v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v10();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Date.FormatStyle.TimeStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.TimeStyle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys,  a2);
}

uint64_t Date.FormatStyle.DateStyle.init(from:)@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  char v13 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v14 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v7);
    *char v13 = v10;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.TimeStyle@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.TimeStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.TimeStyle( void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle( a1,  a2,  a3,  &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.TimeStyle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle( void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v12 = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Date.FormatStyle.parseStrategy.getter@<X0>(_OWORD *a1@<X8>)
{
  __int128 v3 = v1[5];
  __int128 v13 = v1[4];
  __int128 v2 = v13;
  __int128 v14 = v3;
  v15[0] = v1[6];
  __int128 v4 = v15[0];
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)v1 + 106);
  __int128 v5 = *(_OWORD *)((char *)v15 + 10);
  __int128 v6 = v1[1];
  v10[0] = *v1;
  v10[1] = v6;
  __int128 v8 = v1[3];
  __int128 v11 = v1[2];
  __int128 v7 = v11;
  __int128 v12 = v8;
  *a1 = v10[0];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v2;
  a1[5] = v3;
  a1[6] = v4;
  *(_OWORD *)((char *)a1 + 106) = v5;
  return outlined retain of Date.FormatStyle((uint64_t)v10);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance Date.FormatStyle@<X0>( _OWORD *a1@<X8>)
{
  __int128 v3 = v1[5];
  __int128 v13 = v1[4];
  __int128 v2 = v13;
  __int128 v14 = v3;
  v15[0] = v1[6];
  __int128 v4 = v15[0];
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)v1 + 106);
  __int128 v5 = *(_OWORD *)((char *)v15 + 10);
  __int128 v6 = v1[1];
  v10[0] = *v1;
  v10[1] = v6;
  __int128 v8 = v1[3];
  __int128 v11 = v1[2];
  __int128 v7 = v11;
  __int128 v12 = v8;
  *a1 = v10[0];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v2;
  a1[5] = v3;
  a1[6] = v4;
  *(_OWORD *)((char *)a1 + 106) = v5;
  return outlined retain of Date.FormatStyle((uint64_t)v10);
}

__n128 static FormatStyle<>.dateTime.getter@<Q0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  __int128 v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, (uint64_t *)v14);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = *(void *)&v14[0];
  uint64_t v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static CalendarCache.cache + 16;
  __int128 v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v6, (uint64_t *)v14);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  __n128 v13 = (__n128)v14[0];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static TimeZoneCache.cache + 16;
  uint64_t v9 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v8, (uint64_t *)v14);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  uint64_t v10 = *(void *)&v14[0];
  uint64_t v11 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating,  (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = xmmword_1837C1FC0;
  *(_WORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0LL;
  *(_BYTE *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 80) = v5;
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = v11;
  __n128 result = v13;
  *(__n128 *)(a1 + 104) = v13;
  *(_WORD *)(a1 + 120) = 256;
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.discreteInput(before:)(Foundation::Date before)
{
  uint64_t v3 = v2;
  *(Foundation::Date *)&v7._time = (Foundation::Date)*v1;
  Foundation::Date_optional result = (Foundation::Date_optional)Date.FormatStyle.bound(for:isLower:)(v7, (Swift::Bool)&v7);
  int v4 = v9;
  if (v9 == 2)
  {
    double v5 = 0.0;
  }

  else
  {
    double v5 = v8;
    if ((v9 & 1) != 0)
    {
      double v6 = 0.0 - v8;
      if (0.0 - v8 < INFINITY) {
        *(void *)&v6 += (*(uint64_t *)&v6 >> 63) | 1;
      }
      double v5 = -v6;
    }
  }

  *(double *)uint64_t v3 = v5;
  *(_BYTE *)(v3 + 8) = v4 == 2;
  result.value = *(Foundation::Date *)&v5;
  return result;
}

Swift::tuple_bound_Foundation_Date_includedInRangeOfInput_Bool_optional __swiftcall Date.FormatStyle.bound(for:isLower:)( Foundation::Date a1, Swift::Bool isLower)
{
  char v5 = v2;
  uint64_t v6 = v3;
  uint64_t v7 = *(void *)isLower;
  *(_OWORD *)&_BYTE v25[26] = *(__int128 *)((char *)v4 + 106);
  __int128 v8 = v4[6];
  *(_OWORD *)int v25 = v4[5];
  *(_OWORD *)&v25[16] = v8;
  __int128 v9 = v4[4];
  __int128 v10 = v4[1];
  v24[0] = *v4;
  v24[1] = v10;
  __int128 v11 = v4[3];
  v24[2] = v4[2];
  v24[3] = v11;
  v24[4] = v9;
  __int128 v26 = *(_OWORD *)&v25[8];
  __int128 v27 = *(_OWORD *)&v25[24];
  __int128 v22 = *(_OWORD *)&v25[8];
  __int128 v23 = *(_OWORD *)&v25[24];
  outlined retain of Locale((uint64_t)&v27);
  outlined retain of Locale((uint64_t)&v26);
  Calendar.timeZone.setter((uint64_t *)&v22);
  __int128 v22 = v23;
  uint64_t v21 = v7;
  uint64_t v12 = one-time initialization token for updateScheduleCache;
  swift_unknownObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  __n128 v13 = (uint64_t *)(static ICUDateFormatter.DateFormatInfo.updateScheduleCache + 16);
  __int128 v14 = (os_unfair_lock_s *)(static ICUDateFormatter.DateFormatInfo.updateScheduleCache + 24);
  swift_retain();
  os_unfair_lock_lock(v14);
  closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)(v13, v24, (uint64_t)&v19);
  os_unfair_lock_unlock(v14);
  swift_release();
  uint64_t v17 = v19;
  char v18 = v20;
  Calendar.bound(for:isLower:updateSchedule:)((double *)&v21, v5 & 1, &v17, v6);
  char v15 = swift_unknownObjectRelease_n();
  result.value.bound._time = v16;
  result.value.includedInRangeOfInput = v15;
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.discreteInput(after:)(Foundation::Date after)
{
  uint64_t v3 = v2;
  *(Foundation::Date *)&v6._time = (Foundation::Date)*v1;
  Foundation::Date_optional result = (Foundation::Date_optional)Date.FormatStyle.bound(for:isLower:)(v6, (Swift::Bool)&v6);
  int v4 = v8;
  if (v8 == 2)
  {
    double v5 = 0.0;
  }

  else
  {
    double v5 = v7;
    if ((v8 & 1) != 0)
    {
      double v5 = v7 + 0.0;
      if (v7 + 0.0 < INFINITY) {
        *(void *)&v5 += (*(uint64_t *)&v5 >> 63) | 1;
      }
    }
  }

  *(double *)uint64_t v3 = v5;
  *(_BYTE *)(v3 + 8) = v4 == 2;
  result.value = *(Foundation::Date *)&v5;
  return result;
}

uint64_t Calendar.bound(for:isLower:updateSchedule:)@<X0>( double *a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  double v7 = *a1;
  uint64_t v8 = *a3;
  char v9 = *((_BYTE *)a3 + 8);
  uint64_t v10 = *v4;
  uint64_t v11 = v4[1];
  __dst[0] = 0uLL;
  double v33 = 0.0;
  uint64_t v34 = 0LL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  (uint64_t *)&v33,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__src,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(double *__return_ptr, __int128 *, uint64_t, uint64_t))(v11 + 176))(&v35, __dst, ObjectType, v11);
  outlined release of DateComponents((uint64_t)__src);
  if ((v36 & 1) != 0)
  {
    double v13 = -978307200.0;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      BOOL v14 = v7 < v13;
      goto LABEL_6;
    }
  }

  else
  {
    double v13 = v35;
    if ((a2 & 1) == 0) {
      goto LABEL_3;
    }
  }

  BOOL v14 = v13 < v7;
LABEL_6:
  char v15 = v14;
  *(void *)&__dst[0] = v8;
  BYTE8(__dst[0]) = v9;
  ICUDateFormatter.DateFormatInfo.UpdateSchedule.updateIntervals.getter();
  uint64_t v18 = *(void *)(v16 + 16);
  if (!v18)
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_34:
    double time = 0.0;
    char v27 = 2;
    goto LABEL_35;
  }

  char v28 = v15;
  uint64_t v29 = a4;
  double time = 0.0;
  char v20 = (uint64_t *)(v16 + 40);
  char v21 = 1;
  do
  {
    char v23 = *((_BYTE *)v20 - 8);
    uint64_t v24 = *v20;
    *(void *)&__dst[0] = v10;
    *((void *)&__dst[0] + 1) = v11;
    double v35 = v7;
    char v31 = a2 & 1;
    char v30 = v23;
    Calendar.advance(_:_:by:_:)(&v35, &v31, v24, &v30, (uint64_t)&v33, v17);
    if ((_BYTE)v34) {
      double v25 = time;
    }
    else {
      double v25 = v33;
    }
    if ((v34 & 1) != 0)
    {
      double time = v25;
      v21 &= v34;
    }

    else
    {
      v17._double time = v33;
      if (time >= v33) {
        double v22 = time;
      }
      else {
        double v22 = v33;
      }
      if (time < v33) {
        v17._double time = time;
      }
      if ((a2 & 1) != 0) {
        v17._double time = v22;
      }
      if ((v21 & 1) != 0) {
        double time = v25;
      }
      else {
        double time = v17._time;
      }
      if ((v21 & 1) != 0) {
        v21 &= v34;
      }
      else {
        char v21 = 0;
      }
    }

    v20 += 2;
    --v18;
  }

  while (v18);
  uint64_t result = swift_bridgeObjectRelease();
  a4 = v29;
  if ((v21 & 1) != 0) {
    goto LABEL_34;
  }
  char v27 = v28;
  if (v7 == time) {
    char v27 = 1;
  }
LABEL_35:
  *(double *)a4 = time;
  *(_BYTE *)(a4 + 8) = v27;
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.input(before:)(Foundation::Date before)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 1;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v11 >= v4;
  double v8 = v11;
  if (v11 >= v4) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

double static Calendar.nextAccuracyStep(for:direction:)@<D0>( double *a1@<X0>, _BYTE *a2@<X1>, double *a3@<X8>)
{
  double v3 = *a1;
  double v4 = 0.0 - *a1;
  if (v4 < INFINITY) {
    *(void *)&double v4 = ((COERCE__INT64(0.0 - *a1) >> 63) | 1) + COERCE__INT64(0.0 - *a1);
  }
  double v5 = (v3 + 978307200.0) * -1000.0 + 0.0;
  if (v5 < INFINITY) {
    *(void *)&v5 += (*(uint64_t *)&v5 >> 63) | 1;
  }
  double v6 = (fabs(v3 + v4) + vabdd_f64(v3, v5 / -1000.0 + -978307200.0)) * 9.0;
  double v7 = -v6;
  if (!*a2) {
    double v7 = v6;
  }
  double result = v3 + v7;
  *a3 = result;
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.input(after:)(Foundation::Date after)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 0;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v4 >= v11;
  double v8 = v11;
  if (v4 >= v11) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

double protocol witness for DiscreteFormatStyle.input(before:) in conformance Date.FormatStyle(double a1)
{
  *(void *)&double result = (unint64_t)Date.FormatStyle.input(before:)(*(Foundation::Date *)&a1);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(after:) in conformance Date.FormatStyle(double a1)
{
  *(void *)&double result = (unint64_t)Date.FormatStyle.input(after:)(*(Foundation::Date *)&a1);
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.Attributed.discreteInput(before:)(Foundation::Date before)
{
  return Date.FormatStyle.discreteInput(before:)(*(Foundation::Date *)&v1->_time);
}

Foundation::Date_optional __swiftcall Date.FormatStyle.Attributed.discreteInput(after:)(Foundation::Date after)
{
  return Date.FormatStyle.discreteInput(after:)(*(Foundation::Date *)&v1->_time);
}

Foundation::Date_optional __swiftcall Date.FormatStyle.Attributed.input(before:)(Foundation::Date before)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 1;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v11 >= v4;
  double v8 = v11;
  if (v11 >= v4) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.Attributed.input(after:)(Foundation::Date after)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 0;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v4 >= v11;
  double v8 = v11;
  if (v4 >= v11) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

double protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.FormatStyle.Attributed( Foundation::Date *a1)
{
  *(void *)&double result = (unint64_t)Date.FormatStyle.discreteInput(before:)(*(Foundation::Date *)&a1->_time);
  return result;
}

double protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Date.FormatStyle.Attributed( Foundation::Date *a1)
{
  *(void *)&double result = (unint64_t)Date.FormatStyle.discreteInput(after:)(*(Foundation::Date *)&a1->_time);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(before:) in conformance Date.FormatStyle.Attributed( double a1)
{
  *(void *)&double result = (unint64_t)Date.FormatStyle.Attributed.input(before:)(*(Foundation::Date *)&a1);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(after:) in conformance Date.FormatStyle.Attributed( double a1)
{
  *(void *)&double result = (unint64_t)Date.FormatStyle.Attributed.input(after:)(*(Foundation::Date *)&a1);
  return result;
}

double *Calendar.advance(_:_:by:_:)@<X0>( double *result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>, Foundation::Date a6@<D0>)
{
  double v9 = *result;
  int v10 = *a2;
  Swift::UInt v11 = *a4;
  uint64_t v13 = *v6;
  uint64_t v12 = v6[1];
  if (!*a4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
    uint64_t v18 = static _SetStorage.allocate(capacity:)();
    uint64_t v19 = v18 + 56;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(0LL);
    Swift::Int v20 = Hasher._finalize()();
    uint64_t v21 = -1LL << *(_BYTE *)(v18 + 32);
    unint64_t v22 = v20 & ~v21;
    unint64_t v23 = v22 >> 6;
    uint64_t v24 = *(void *)(v18 + 56 + 8 * (v22 >> 6));
    uint64_t v25 = 1LL << v22;
    uint64_t v26 = *(void *)(v18 + 48);
    if (((1LL << v22) & v24) == 0) {
      goto LABEL_18;
    }
    if (!*(_BYTE *)(v26 + v22)) {
      goto LABEL_20;
    }
    uint64_t v27 = ~v21;
    unint64_t v22 = (v22 + 1) & v27;
    unint64_t v23 = v22 >> 6;
    uint64_t v24 = *(void *)(v19 + 8 * (v22 >> 6));
    uint64_t v25 = 1LL << v22;
    if ((v24 & (1LL << v22)) == 0) {
      goto LABEL_18;
    }
    if (!*(_BYTE *)(v26 + v22)) {
      goto LABEL_20;
    }
    unint64_t v22 = (v22 + 1) & v27;
    unint64_t v23 = v22 >> 6;
    uint64_t v24 = *(void *)(v19 + 8 * (v22 >> 6));
    uint64_t v25 = 1LL << v22;
    if ((v24 & (1LL << v22)) == 0) {
      goto LABEL_18;
    }
    if (!*(_BYTE *)(v26 + v22)) {
      goto LABEL_20;
    }
    unint64_t v22 = (v22 + 1) & v27;
    unint64_t v23 = v22 >> 6;
    uint64_t v24 = *(void *)(v19 + 8 * (v22 >> 6));
    uint64_t v25 = 1LL << v22;
    if ((v24 & (1LL << v22)) != 0)
    {
      while (*(_BYTE *)(v26 + v22))
      {
        unint64_t v22 = (v22 + 1) & v27;
        unint64_t v23 = v22 >> 6;
        uint64_t v24 = *(void *)(v19 + 8 * (v22 >> 6));
        uint64_t v25 = 1LL << v22;
        if ((v24 & (1LL << v22)) == 0) {
          goto LABEL_18;
        }
      }
    }

    else
    {
LABEL_18:
      *(void *)(v19 + 8 * v23) = v25 | v24;
      *(_BYTE *)(v26 + v22) = 0;
      uint64_t v28 = *(void *)(v18 + 16);
      BOOL v29 = __OFADD__(v28, 1LL);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        goto LABEL_54;
      }

      *(void *)(v18 + 16) = v30;
    }

uint64_t AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(udateFormatField:)@<X0>( uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 0;
  char v3 = 1;
  switch((int)result)
  {
    case 0:
      goto LABEL_20;
    case 1:
      char v2 = 1;
      goto LABEL_20;
    case 2:
      char v2 = 4;
      goto LABEL_20;
    case 3:
      char v2 = 9;
      goto LABEL_20;
    case 4:
    case 5:
    case 15:
    case 16:
      char v2 = 12;
      goto LABEL_20;
    case 6:
      char v2 = 13;
      goto LABEL_20;
    case 7:
      char v2 = 14;
      goto LABEL_20;
    case 8:
      char v2 = 15;
      goto LABEL_20;
    case 9:
      char v2 = 7;
      goto LABEL_20;
    case 10:
      char v2 = 10;
      goto LABEL_20;
    case 11:
      char v2 = 8;
      goto LABEL_20;
    case 12:
      char v2 = 5;
      goto LABEL_20;
    case 13:
      char v2 = 6;
      goto LABEL_20;
    case 14:
      char v2 = 11;
      goto LABEL_20;
    case 17:
      char v2 = 16;
LABEL_20:
      char v3 = v2;
      goto LABEL_21;
    case 18:
    case 20:
    case 30:
LABEL_21:
      *a2 = v3;
      break;
    case 19:
    case 25:
      *a2 = 7;
      break;
    case 21:
      *a2 = 9;
      break;
    case 22:
      *a2 = 14;
      break;
    case 23:
    case 24:
    case 29:
    case 31:
    case 32:
    case 33:
      *a2 = 16;
      break;
    case 26:
      *a2 = 4;
      break;
    case 27:
    case 28:
      *a2 = 3;
      break;
    case 35:
    case 36:
      *a2 = 11;
      break;
    default:
      *a2 = 17;
      break;
  }

  return result;
}

void Date.FormatStyle.consuming(_:startingAt:in:)( unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  __int128 v5 = v3[5];
  v44[4] = v3[4];
  v44[5] = v5;
  v45[0] = v3[6];
  *(_OWORD *)((char *)v45 + 10) = *(_OWORD *)((char *)v3 + 106);
  __int128 v6 = v3[1];
  v44[0] = *v3;
  v44[1] = v6;
  __int128 v7 = v3[3];
  _OWORD v44[2] = v3[2];
  void v44[3] = v7;
  if (a1 >> 14 >= a2 >> 14)
  {
    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }

  __int128 v8 = v3[5];
  __int128 v41 = v3[4];
  __int128 v42 = v8;
  v43[0] = v3[6];
  *(_OWORD *)((char *)v43 + 10) = *(_OWORD *)((char *)v3 + 106);
  __int128 v9 = v3[1];
  __int128 v38 = *v3;
  __int128 v39 = v9;
  __int128 v10 = v3[3];
  *(_OWORD *)unint64_t v40 = v3[2];
  *(_OWORD *)&v40[16] = v10;
  outlined retain of Date.FormatStyle((uint64_t)v44);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v38, (uint64_t)v31);
  __int128 v38 = v31[0];
  __int128 v39 = v31[1];
  v40[0] = v32;
  *(_OWORD *)&__int128 v40[8] = v33;
  v40[24] = v34;
  __int128 v41 = v35;
  LOBYTE(v42) = v36;
  *((void *)&v42 + 1) = v37;
  uint64_t v11 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_17;
  }
  uint64_t v12 = String.subscript.getter();
  uint64_t v16 = v15;
  if (!((v12 ^ v13) >> 14)
    || (uint64_t v17 = v12, v18 = v13, v19 = v14, (*(_BYTE *)(v11 + 24) & 1) == 0)
    && (Substring.subscript.getter(), char v20 = Character.isWhitespace.getter(), swift_bridgeObjectRelease(), (v20 & 1) != 0))
  {
    swift_release();
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }

  *(void *)&__int128 v38 = v17;
  *((void *)&v38 + 1) = v18;
  *(void *)&__int128 v39 = v19;
  *((void *)&v39 + 1) = v16;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  uint64_t v21 = String.init<A>(_:)();
  unint64_t v23 = v22;
  *(void *)&__int128 v38 = v21;
  *((void *)&v38 + 1) = v22;
  udat_getCalendar();
  LODWORD(v31[0]) = 0;
  ucal_clone();
  if (SLODWORD(v31[0]) > 0)
  {
LABEL_15:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }

  swift_bridgeObjectRetain();
  BOOL v29 = specialized _copyCollectionToContiguousArray<A>(_:)(v21, v23);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v24 = String.Index.utf16Offset<A>(in:)();
  if (v24 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v25 = v24;
  if (v24 > 0x7FFFFFFF)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }

  int v30 = v24;
  if (v29[2] >> 31) {
    goto LABEL_22;
  }
  udat_parseCalendar();
  swift_release();
  if (SLODWORD(v31[0]) > 0 || v25 == v30 || (ucal_getMillis(), SLODWORD(v31[0]) >= 1))
  {
    ucal_close();
    goto LABEL_15;
  }

  double v27 = v26 / 1000.0 + -978307200.0;
  ucal_close();
  swift_bridgeObjectRelease();
  *(void *)&__int128 v38 = v17;
  *((void *)&v38 + 1) = v18;
  *(void *)&__int128 v39 = v19;
  *((void *)&v39 + 1) = v16;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v28 = String.Index.init<A>(utf16Offset:in:)();
  swift_release();
  *(void *)a3 = v28;
  *(double *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = 0;
}

void protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance Date.FormatStyle( unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance Date.FormatStyle()
{
  return CustomConsumingRegexComponent.regex.getter();
}

BOOL specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4 = *a1;
  int v5 = *a2;
  if (v4 == 3)
  {
    if (v5 != 3) {
      return 0LL;
    }
  }

  else
  {
    if (v5 == 3) {
      return 0LL;
    }
    unint64_t v6 = 0xE400000000000000LL;
    uint64_t v7 = 1195853639LL;
    if (v4 != 1)
    {
      uint64_t v7 = 0x4747474747LL;
      unint64_t v6 = 0xE500000000000000LL;
    }

    if (*a1) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 71LL;
    }
    if (v4) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = 0xE100000000000000LL;
    }
    unint64_t v10 = 0xE400000000000000LL;
    uint64_t v11 = 1195853639LL;
    if (v5 != 1)
    {
      uint64_t v11 = 0x4747474747LL;
      unint64_t v10 = 0xE500000000000000LL;
    }

    if (*a2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 71LL;
    }
    if (*a2) {
      unint64_t v13 = v10;
    }
    else {
      unint64_t v13 = 0xE100000000000000LL;
    }
    if (v8 == v12 && v9 == v13)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0LL;
      if ((v14 & 1) == 0) {
        return result;
      }
    }
  }

  int v16 = a1[16];
  int v17 = a2[16];
  if (v16 == 255)
  {
    if (v17 != 255) {
      return 0LL;
    }
  }

  else
  {
    if (v17 == 255) {
      return 0LL;
    }
    uint64_t v18 = *((void *)a2 + 1);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(*((void *)a1 + 1), v16);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v18, v17);
    if (v20 == v24 && v22 == v23)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0LL;
      if ((v25 & 1) == 0) {
        return result;
      }
    }
  }

  int v26 = a1[17];
  int v27 = a2[17];
  if (v26 == 5)
  {
    if (v27 != 5) {
      return 0LL;
    }
  }

  else
  {
    if (v27 == 5) {
      return 0LL;
    }
    specialized == infix<A>(_:_:)(v26);
    if ((v28 & 1) == 0) {
      return 0LL;
    }
  }

  int v29 = a1[18];
  int v30 = a2[18];
  if (v29 == 5)
  {
    if (v30 != 5) {
      return 0LL;
    }
  }

  else
  {
    if (v30 == 5) {
      return 0LL;
    }
    specialized == infix<A>(_:_:)(v29);
    if ((v31 & 1) == 0) {
      return 0LL;
    }
  }

  int v32 = a1[19];
  int v33 = a2[19];
  if (v32 == 3)
  {
    if (v33 != 3) {
      return 0LL;
    }
  }

  else
  {
    if (v33 == 3) {
      return 0LL;
    }
    if (a1[19])
    {
      if (v32 == 1)
      {
        unint64_t v34 = 0xE200000000000000LL;
        uint64_t v35 = 30583LL;
      }

      else
      {
        unint64_t v34 = 0xE100000000000000LL;
        uint64_t v35 = 87LL;
      }
    }

    else
    {
      unint64_t v34 = 0xE100000000000000LL;
      uint64_t v35 = 119LL;
    }

    if (a2[19])
    {
      if (v33 == 1)
      {
        unint64_t v36 = 0xE200000000000000LL;
        uint64_t v37 = 30583LL;
      }

      else
      {
        unint64_t v36 = 0xE100000000000000LL;
        uint64_t v37 = 87LL;
      }
    }

    else
    {
      unint64_t v36 = 0xE100000000000000LL;
      uint64_t v37 = 119LL;
    }

    if (v35 == v37 && v34 == v36)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0LL;
      if ((v38 & 1) == 0) {
        return result;
      }
    }
  }

  if ((a1[33] & 1) != 0)
  {
    if (!a2[33]) {
      return 0LL;
    }
  }

  else if ((a2[33] & 1) != 0 {
         || (specialized == infix<A>(_:_:)(*((void *)a1 + 3), a1[32] & 1, *((void *)a2 + 3), a2[32] & 1) & 1) == 0)
  }
  {
    return 0LL;
  }

  int v39 = a1[34];
  int v40 = a2[34];
  if (v39 == 3)
  {
    if (v40 != 3) {
      return 0LL;
    }
  }

  else
  {
    if (v40 == 3) {
      return 0LL;
    }
    if (a1[34])
    {
      if (v39 == 1)
      {
        unint64_t v41 = 0xE200000000000000LL;
        uint64_t v42 = 17476LL;
      }

      else
      {
        unint64_t v41 = 0xE300000000000000LL;
        uint64_t v42 = 4473924LL;
      }
    }

    else
    {
      unint64_t v41 = 0xE100000000000000LL;
      uint64_t v42 = 68LL;
    }

    if (a2[34])
    {
      if (v40 == 1)
      {
        unint64_t v43 = 0xE200000000000000LL;
        uint64_t v44 = 17476LL;
      }

      else
      {
        unint64_t v43 = 0xE300000000000000LL;
        uint64_t v44 = 4473924LL;
      }
    }

    else
    {
      unint64_t v43 = 0xE100000000000000LL;
      uint64_t v44 = 68LL;
    }

    if (v42 == v44 && v41 == v43)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0LL;
      if ((v45 & 1) == 0) {
        return result;
      }
    }
  }

  int v46 = a1[35];
  int v47 = a2[35];
  if (v46 == 6)
  {
    if (v47 != 6) {
      return 0LL;
    }
  }

  else
  {
    if (v47 == 6) {
      return 0LL;
    }
    specialized == infix<A>(_:_:)(v46);
    if ((v48 & 1) == 0) {
      return 0LL;
    }
  }

  int v49 = a1[36];
  int v50 = a2[36];
  if (v49 == 9)
  {
    if (v50 != 9) {
      return 0LL;
    }
  }

  else
  {
    if (v50 == 9) {
      return 0LL;
    }
    specialized == infix<A>(_:_:)(v49);
    if ((v51 & 1) == 0) {
      return 0LL;
    }
  }

  int v52 = a1[37];
  int v53 = a2[37];
  if (v52 == 14)
  {
    if (v53 != 14) {
      return 0LL;
    }
  }

  else
  {
    if (v53 == 14) {
      return 0LL;
    }
    uint64_t v54 = Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v52);
    uint64_t v56 = v55;
    if (v54 == Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v53) && v56 == v57)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0LL;
      if ((v58 & 1) == 0) {
        return result;
      }
    }
  }

  int v59 = a1[38];
  int v60 = a2[38];
  if (v59 == 2)
  {
    if (v60 != 2) {
      return 0LL;
    }
  }

  else
  {
    if (v60 == 2) {
      return 0LL;
    }
    if ((v59 & 1) != 0) {
      uint64_t v61 = 28013LL;
    }
    else {
      uint64_t v61 = 109LL;
    }
    if ((v59 & 1) != 0) {
      unint64_t v62 = 0xE200000000000000LL;
    }
    else {
      unint64_t v62 = 0xE100000000000000LL;
    }
    if ((v60 & 1) != 0) {
      uint64_t v63 = 28013LL;
    }
    else {
      uint64_t v63 = 109LL;
    }
    if ((v60 & 1) != 0) {
      unint64_t v64 = 0xE200000000000000LL;
    }
    else {
      unint64_t v64 = 0xE100000000000000LL;
    }
    if (v61 == v63 && v62 == v64)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0LL;
      if ((v65 & 1) == 0) {
        return result;
      }
    }
  }

  int v66 = a1[39];
  int v67 = a2[39];
  if (v66 == 2)
  {
    if (v67 != 2) {
      return 0LL;
    }
  }

  else
  {
    if (v67 == 2) {
      return 0LL;
    }
    if ((v66 & 1) != 0) {
      uint64_t v68 = 29555LL;
    }
    else {
      uint64_t v68 = 115LL;
    }
    if ((v66 & 1) != 0) {
      unint64_t v69 = 0xE200000000000000LL;
    }
    else {
      unint64_t v69 = 0xE100000000000000LL;
    }
    if ((v67 & 1) != 0) {
      uint64_t v70 = 29555LL;
    }
    else {
      uint64_t v70 = 115LL;
    }
    if ((v67 & 1) != 0) {
      unint64_t v71 = 0xE200000000000000LL;
    }
    else {
      unint64_t v71 = 0xE100000000000000LL;
    }
    if (v68 == v70 && v69 == v71)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0LL;
      if ((v72 & 1) == 0) {
        return result;
      }
    }
  }

  int v73 = a1[48];
  int v74 = a2[48];
  if (v73 == 255)
  {
    if (v74 != 255) {
      return 0LL;
    }
  }

  else if (v74 == 255 {
         || (specialized == infix<A>(_:_:)(*((void *)a1 + 5), v73 & 1, *((void *)a2 + 5), v74 & 1) & 1) == 0)
  }
  {
    return 0LL;
  }

  int v75 = a1[49];
  int v76 = a2[49];
  if (v75 == 12) {
    return v76 == 12;
  }
  if (v76 != 12)
  {
    uint64_t v77 = Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v75);
    uint64_t v79 = v78;
    if (v77 == Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v76) && v79 == v80)
    {
      swift_bridgeObjectRelease_n();
      return 1LL;
    }

    char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v81 & 1) != 0) {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t specialized static Date.FormatStyle.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 56);
  char v4 = *(_BYTE *)(a1 + 64);
  __int128 v5 = *(_OWORD *)(a1 + 72);
  __int128 v6 = *(_OWORD *)(a1 + 88);
  __int128 v7 = *(_OWORD *)(a1 + 104);
  int v8 = *(unsigned __int8 *)(a1 + 120);
  int v9 = *(unsigned __int8 *)(a1 + 121);
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[7];
  int v12 = *((unsigned __int8 *)a2 + 64);
  __int128 v13 = *(_OWORD *)(a2 + 9);
  __int128 v14 = *(_OWORD *)(a2 + 11);
  __int128 v15 = *(_OWORD *)(a2 + 13);
  int v16 = *((unsigned __int8 *)a2 + 120);
  uint64_t v17 = v10 & 0xFF000000000000LL;
  int v18 = *((unsigned __int8 *)a2 + 121);
  if ((v2 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    if (v17 != 0x3000000000000LL) {
      return 0LL;
    }
  }

  else
  {
    if (v17 == 0x3000000000000LL) {
      return 0LL;
    }
    uint64_t v19 = *(void *)(a1 + 8);
    v44[0] = *(void *)a1;
    uint64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v45 = v19;
    char v47 = BYTE2(v20);
    __int16 v46 = v20;
    char v48 = BYTE3(v20);
    uint64_t v49 = v21;
    __int16 v50 = v2 & 0x1FF;
    char v51 = BYTE2(v2);
    char v52 = BYTE3(v2);
    char v53 = BYTE4(v2);
    char v54 = BYTE5(v2);
    char v55 = BYTE6(v2);
    uint64_t v22 = *(void *)(a1 + 40);
    LOWORD(v19) = *(_WORD *)(a1 + 48);
    char v56 = HIBYTE(v2);
    uint64_t v57 = v22;
    uint64_t v23 = *a2;
    uint64_t v24 = a2[1];
    __int16 v58 = v19;
    v59[0] = v23;
    uint64_t v25 = a2[2];
    uint64_t v26 = a2[3];
    uint64_t v60 = v24;
    char v62 = BYTE2(v25);
    __int16 v61 = v25;
    char v63 = BYTE3(v25);
    uint64_t v64 = v26;
    __int16 v65 = v10 & 0x1FF;
    char v66 = BYTE2(v10);
    char v67 = BYTE3(v10);
    char v68 = BYTE4(v10);
    char v69 = BYTE5(v10);
    char v70 = BYTE6(v10);
    char v71 = HIBYTE(v10);
    uint64_t v72 = a2[5];
    __int16 v27 = *((_WORD *)a2 + 24);
    __int16 v73 = v27;
    __int128 v34 = v15;
    __int128 v36 = v7;
    __int128 v38 = v14;
    __int128 v40 = v6;
    __int128 v32 = v13;
    __int128 v33 = v5;
    BOOL v28 = specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)(v44, v59);
    __int128 v13 = v32;
    __int128 v5 = v33;
    __int128 v14 = v38;
    __int128 v6 = v40;
    __int128 v15 = v34;
    __int128 v7 = v36;
    if (!v28) {
      return 0LL;
    }
  }

  if ((v4 & 1) != 0)
  {
    if (!v12) {
      return 0LL;
    }
  }

  else
  {
    if (v3 == v11) {
      char v29 = v12;
    }
    else {
      char v29 = 1;
    }
    if ((v29 & 1) != 0) {
      return 0LL;
    }
  }

  __int128 v39 = v14;
  __int128 v41 = v6;
  __int128 v35 = v15;
  __int128 v37 = v7;
  __int128 v42 = v13;
  __int128 v43 = v5;
  __int128 v42 = v39;
  __int128 v43 = v41;
  __int128 v42 = v35;
  __int128 v43 = v37;
  char v30 = specialized static Calendar.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42);
  uint64_t result = 0LL;
  if ((v30 & 1) != 0 && v8 == v16) {
    return v9 ^ v18 ^ 1u;
  }
  return result;
}

uint64_t specialized static Date.AttributedStyle.InnerStyle.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v46) == 1)
  {
    uint64_t v3 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v46);
    __int128 v25 = *(_OWORD *)(v3 + 16);
    __int128 v26 = *(_OWORD *)v3;
    uint64_t v4 = *(void *)(v3 + 32);
    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v6 = *(void *)(v3 + 48);
    uint64_t v7 = *(void *)(v3 + 56);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v43, v41);
    int v8 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v41);
    uint64_t v9 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    if (v8 == 1)
    {
      uint64_t v10 = *(void *)(v9 + 48);
      uint64_t v11 = *(void *)(v9 + 56);
      __int128 v34 = v26;
      __int128 v35 = v25;
      *(void *)&__int128 v36 = v4;
      *((void *)&v36 + 1) = v5;
      *(void *)&__int128 v37 = v6;
      *((void *)&v37 + 1) = v7;
      __int128 v12 = *(_OWORD *)(v9 + 16);
      __int128 v27 = *(_OWORD *)v9;
      __int128 v28 = v12;
      __int128 v29 = *(_OWORD *)(v9 + 32);
      *(void *)&__int128 v30 = v10;
      *((void *)&v30 + 1) = v11;
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v43,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v42,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v42,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v43,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      char v13 = specialized static Date.VerbatimFormatStyle.== infix(_:_:)(&v34, &v27);
LABEL_7:
      char v17 = v13;
      outlined release of (Date.AttributedStyle.InnerStyle, Date.AttributedStyle.InnerStyle)((uint64_t)v44);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v43,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v42,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
      return v17 & 1;
    }
  }

  else
  {
    __int128 v14 = (__int128 *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v46);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v43, v41);
    int v15 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v41);
    int v16 = (__int128 *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    if (v15 != 1)
    {
      __int128 v18 = v14[5];
      __int128 v38 = v14[4];
      __int128 v39 = v18;
      v40[0] = v14[6];
      *(_OWORD *)((char *)v40 + 10) = *(__int128 *)((char *)v14 + 106);
      __int128 v19 = v14[1];
      __int128 v34 = *v14;
      __int128 v35 = v19;
      __int128 v20 = v14[3];
      __int128 v36 = v14[2];
      __int128 v37 = v20;
      __int128 v21 = v16[5];
      __int128 v31 = v16[4];
      __int128 v32 = v21;
      v33[0] = v16[6];
      *(_OWORD *)((char *)v33 + 10) = *(__int128 *)((char *)v16 + 106);
      __int128 v22 = v16[1];
      __int128 v27 = *v16;
      __int128 v28 = v22;
      __int128 v23 = v16[3];
      __int128 v29 = v16[2];
      __int128 v30 = v23;
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v43,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v42,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v42,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v43,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      char v13 = specialized static Date.FormatStyle.== infix(_:_:)((uint64_t)&v34, (uint64_t *)&v27);
      goto LABEL_7;
    }
  }

  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v42,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v43,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
  outlined release of (Date.AttributedStyle.InnerStyle, Date.AttributedStyle.InnerStyle)((uint64_t)v44);
  char v17 = 0;
  return v17 & 1;
}

uint64_t specialized Date.FormatStyle.DateFieldCollection.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.DateFieldCollection.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  int v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v35 = 0;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v9 = v31;
  char v35 = 1;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v34 = v9;
  uint64_t v10 = v31;
  int v11 = v32;
  char v35 = 2;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v29 = v10;
  int v30 = v11;
  LOBYTE(v10) = v31;
  char v35 = 3;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v12 = v31;
  char v35 = 4;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v28 = v12;
  int v13 = v31;
  char v35 = 5;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v25 = v31;
  int v26 = v32;
  int v27 = v13;
  int v14 = v33;
  char v35 = 6;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v24 = v14;
  LOBYTE(v14) = v31;
  char v35 = 7;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v23 = v31;
  char v35 = 8;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v22 = v31;
  char v35 = 9;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v21 = v31;
  char v35 = 10;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v20 = v31;
  char v35 = 11;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v19 = v31;
  char v35 = 12;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v18 = v31;
  HIDWORD(v17) = v32;
  char v35 = 13;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v15 = v31;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(_BYTE *)a2 = v34;
  *(void *)(a2 + 8) = v29;
  *(_BYTE *)(a2 + 16) = v30;
  *(_BYTE *)(a2 + 17) = v10;
  *(_BYTE *)(a2 + 18) = v28;
  *(_BYTE *)(a2 + 19) = v27;
  *(void *)(a2 + 24) = v25;
  *(_BYTE *)(a2 + 32) = v26;
  *(_BYTE *)(a2 + 33) = v24;
  *(_BYTE *)(a2 + 34) = v14;
  *(_BYTE *)(a2 + 35) = v23;
  *(_BYTE *)(a2 + 36) = v22;
  *(_BYTE *)(a2 + 37) = v21;
  *(_BYTE *)(a2 + 38) = v20;
  *(_BYTE *)(a2 + 39) = v19;
  *(void *)(a2 + 40) = v18;
  *(_BYTE *)(a2 + 48) = BYTE4(v17);
  *(_BYTE *)(a2 + 49) = v15;
  return result;
}

uint64_t _s10Foundation4DateV15AttributedStyleV05InnerD0OWOg(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 120) >> 15;
}

uint64_t _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_(uint64_t result)
{
  *(_WORD *)(result + 120) &= ~0x8000u;
  return result;
}

uint64_t outlined consume of Date.AttributedStyle.InnerStyle( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16)
{
  if (a16 < 0) {
    swift_bridgeObjectRelease();
  }
  return swift_unknownObjectRelease();
}

uint64_t outlined copy of Date.AttributedStyle.InnerStyle( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16)
{
  if (a16 < 0) {
    swift_bridgeObjectRetain();
  }
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date.AttributedStyle.CodingKeys, &unk_189C82E90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date.AttributedStyle.CodingKeys, &unk_189C82E90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date.AttributedStyle.CodingKeys, &unk_189C82E90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date.AttributedStyle.CodingKeys, &unk_189C82E90);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle,  &type metadata for Date.AttributedStyle.InnerStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle,  &type metadata for Date.AttributedStyle.InnerStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle,  &type metadata for Date.AttributedStyle.InnerStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle);
  }

  return result;
}

uint64_t specialized Date.FormatStyle.DateFieldCollection.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6386277 && a2 == 0xE300000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 1918985593 && a2 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x72657472617571LL && a2 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x68746E6F6DLL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 1801807223 && a2 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 7954788 && a2 == 0xE300000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else if (a1 == 0x616559664F796164LL && a2 == 0xE900000000000072LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6LL;
  }

  else if (a1 == 0x7961646B656577LL && a2 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7LL;
  }

  else if (a1 == 0x6F69726550796164LL && a2 == 0xE900000000000064LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8LL;
  }

  else if (a1 == 1920298856 && a2 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9LL;
  }

  else if (a1 == 0x6574756E696DLL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10LL;
  }

  else if (a1 == 0x646E6F636573LL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11LL;
  }

  else if (a1 == 0x7246646E6F636573LL && a2 == 0xEE006E6F69746361LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12LL;
  }

  else if (a1 == 0x656E6F5A656D6974LL && a2 == 0xEE006C6F626D7953LL)
  {
    swift_bridgeObjectRelease();
    return 13LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 13LL;
    }
    else {
      return 14LL;
    }
  }

uint64_t specialized Date.AttributedStyle.InnerStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x745374616D726F66LL && a2 == 0xEB00000000656C79LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0xD000000000000013LL && a2 == 0x80000001839CE200LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Attributed.CodingKeys,  &unk_189C82E00);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Attributed.CodingKeys,  &unk_189C82E00);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Attributed.CodingKeys,  &unk_189C82E00);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Attributed.CodingKeys,  &unk_189C82E00);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys);
  }

  return result;
}

uint64_t outlined release of Date.FormatStyle(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.CodingKeys,  &type metadata for Date.FormatStyle.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.CodingKeys,  &type metadata for Date.FormatStyle.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.CodingKeys,  &type metadata for Date.FormatStyle.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.CodingKeys,  &type metadata for Date.FormatStyle.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.DateStyle,  &type metadata for Date.FormatStyle.DateStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.DateStyle,  &type metadata for Date.FormatStyle.DateStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.DateStyle,  &type metadata for Date.FormatStyle.DateStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.DateStyle.CodingKeys,  &unk_189C82CE0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.DateStyle.CodingKeys,  &unk_189C82CE0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.DateStyle.CodingKeys,  &unk_189C82CE0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.DateStyle.CodingKeys,  &unk_189C82CE0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.TimeStyle.CodingKeys,  &unk_189C82C50);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.TimeStyle.CodingKeys,  &unk_189C82C50);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.TimeStyle.CodingKeys,  &unk_189C82C50);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.TimeStyle.CodingKeys,  &unk_189C82C50);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for Date.AttributedStyle( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.AttributedStyle and conformance Date.AttributedStyle,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.AttributedStyle and conformance Date.AttributedStyle,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.AttributedStyle and conformance Date.AttributedStyle);
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle and conformance Date.AttributedStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle,  &type metadata for Date.AttributedStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle,  &type metadata for Date.AttributedStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle,  &type metadata for Date.AttributedStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle,  &type metadata for Date.AttributedStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for Date.FormatStyle.Attributed( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Attributed,  &type metadata for Date.FormatStyle.Attributed);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Attributed,  &type metadata for Date.FormatStyle.Attributed);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Attributed,  &type metadata for Date.FormatStyle.Attributed);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Attributed,  &type metadata for Date.FormatStyle.Attributed);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Attributed,  &type metadata for Date.FormatStyle.Attributed);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for Date.FormatStyle( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle);
}

uint64_t instantiation function for generic protocol witness table for Date.AttributedStyle( void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle and conformance Date.FormatStyle.TimeStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle and conformance Date.FormatStyle.TimeStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle and conformance Date.FormatStyle.TimeStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.TimeStyle,  &type metadata for Date.FormatStyle.TimeStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle and conformance Date.FormatStyle.TimeStyle);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.FormatStyle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.FormatStyle.Attributed( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_183207084(uint64_t a1)
{
  return swift_release();
}

uint64_t sub_1832070C8()
{
  return 8LL;
}

void *sub_1832070D4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle()
{
  return &type metadata for Date.FormatStyle;
}

ValueMetadata *type metadata accessor for Date.AttributedStyle()
{
  return &type metadata for Date.AttributedStyle;
}

uint64_t destroy for Date.FormatStyle()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Date.FormatStyle(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.FormatStyle(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  __int128 v6 = a2[2];
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  uint64_t v7 = *((void *)a2 + 7);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *((void *)a2 + 10);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 80) = v8;
  uint64_t v9 = *((void *)a2 + 12);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 96) = v9;
  uint64_t v10 = *((void *)a2 + 14);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 112) = v10;
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_BYTE *)(a1 + 121) = *((_BYTE *)a2 + 121);
  return a1;
}

uint64_t assignWithTake for Date.FormatStyle(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 122)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 120) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 122) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 122) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Attributed()
{
  return &type metadata for Date.FormatStyle.Attributed;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.DateStyle()
{
  return &type metadata for Date.FormatStyle.DateStyle;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.TimeStyle()
{
  return &type metadata for Date.FormatStyle.TimeStyle;
}

void *type metadata accessor for Date.FormatStyle.TimeStyle.CodingKeys()
{
  return &unk_189C82C50;
}

void *type metadata accessor for Date.FormatStyle.DateStyle.CodingKeys()
{
  return &unk_189C82CE0;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_18320747C + 4 * byte_1837C0EEC[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1832074B0 + 4 * byte_1837C0EE7[v4]))();
}

uint64_t sub_1832074B0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832074B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1832074C0LL);
  }
  return result;
}

uint64_t sub_1832074CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1832074D4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1832074D8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832074E0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.CodingKeys()
{
  return &type metadata for Date.FormatStyle.CodingKeys;
}

void *type metadata accessor for Date.FormatStyle.Attributed.CodingKeys()
{
  return &unk_189C82E00;
}

void *type metadata accessor for Date.AttributedStyle.CodingKeys()
{
  return &unk_189C82E90;
}

uint64_t destroy for Date.AttributedStyle(uint64_t a1)
{
  return outlined consume of Date.AttributedStyle.InnerStyle( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(_WORD *)(a1 + 120));
}

uint64_t initializeWithCopy for Date.AttributedStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  __int16 v19 = *(_WORD *)(a2 + 120);
  outlined copy of Date.AttributedStyle.InnerStyle( *(void *)a2,  v4,  v5,  v6,  v7,  v8,  v9,  v10,  v11,  v13,  v14,  v15,  v16,  v17,  v18,  v19);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(_WORD *)(a1 + 120) = v19;
  return a1;
}

uint64_t assignWithCopy for Date.AttributedStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v26 = *(void *)(a2 + 72);
  uint64_t v27 = *(void *)(a2 + 80);
  uint64_t v28 = *(void *)(a2 + 88);
  uint64_t v29 = *(void *)(a2 + 96);
  uint64_t v30 = *(void *)(a2 + 104);
  uint64_t v31 = *(void *)(a2 + 112);
  __int16 v32 = *(_WORD *)(a2 + 120);
  outlined copy of Date.AttributedStyle.InnerStyle( *(void *)a2,  v4,  v5,  v6,  v7,  v8,  v9,  v10,  v11,  v26,  v27,  v28,  v29,  v30,  v31,  v32);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  __int128 v20 = *(_OWORD *)(a1 + 64);
  __int128 v21 = *(_OWORD *)(a1 + 80);
  __int128 v22 = *(_OWORD *)(a1 + 96);
  uint64_t v23 = *(void *)(a1 + 112);
  __int16 v24 = *(_WORD *)(a1 + 120);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v26;
  *(void *)(a1 + 80) = v27;
  *(void *)(a1 + 88) = v28;
  *(void *)(a1 + 96) = v29;
  *(void *)(a1 + 104) = v30;
  *(void *)(a1 + 112) = v31;
  *(_WORD *)(a1 + 120) = v32;
  outlined consume of Date.AttributedStyle.InnerStyle( v12,  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  *((uint64_t *)&v20 + 1),  v21,  *((uint64_t *)&v21 + 1),  v22,  *((uint64_t *)&v22 + 1),  v23,  v24);
  return a1;
}

uint64_t assignWithTake for Date.AttributedStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 112);
  __int16 v4 = *(_WORD *)(a2 + 120);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  __int128 v13 = *(_OWORD *)(a1 + 64);
  __int128 v14 = *(_OWORD *)(a1 + 80);
  __int128 v15 = *(_OWORD *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 112);
  __int16 v17 = *(_WORD *)(a1 + 120);
  __int128 v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  __int128 v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  __int128 v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = v3;
  *(_WORD *)(a1 + 120) = v4;
  outlined consume of Date.AttributedStyle.InnerStyle( v5,  v7,  v6,  v8,  v9,  v10,  v11,  v12,  v13,  *((uint64_t *)&v13 + 1),  v14,  *((uint64_t *)&v14 + 1),  v15,  *((uint64_t *)&v15 + 1),  v16,  v17);
  return a1;
}

uint64_t destructiveInjectEnumTag for Date.AttributedStyle.InnerStyle(uint64_t result, __int16 a2)
{
  uint64_t v2 = *(void *)(result + 80) & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v3 = *(void *)(result + 96) & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v4 = *(void *)(result + 112) & 0xFFFFFFFFFFFFFF8LL;
  __int16 v5 = *(_WORD *)(result + 120) & 0x107 | (a2 << 15);
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 80) = v2;
  *(void *)(result + 96) = v3;
  *(void *)(result + 112) = v4;
  *(_WORD *)(result + 120) = v5;
  return result;
}

ValueMetadata *type metadata accessor for Date.AttributedStyle.InnerStyle()
{
  return &type metadata for Date.AttributedStyle.InnerStyle;
}

__n128 __swift_memcpy50_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.DateFieldCollection(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 50)) {
    return (*(_DWORD *)a1 + 254);
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 38);
  }
  int v4 = v3 - 3;
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.DateFieldCollection( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 50) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 50) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 38) = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.DateFieldCollection()
{
  return &type metadata for Date.FormatStyle.DateFieldCollection;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.DateFieldCollection.CodingKeys,  &unk_189C83210);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.DateFieldCollection.CodingKeys,  &unk_189C83210);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.DateFieldCollection.CodingKeys,  &unk_189C83210);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.DateFieldCollection.CodingKeys,  &unk_189C83210);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.EraOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.EraOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.EraOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.EraOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.YearOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.YearOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.YearOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.YearOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.QuarterOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.QuarterOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.QuarterOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.QuarterOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MonthOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MonthOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MonthOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MonthOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekdayOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekdayOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekdayOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekdayOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.HourOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.HourOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.HourOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.HourOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MinuteOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MinuteOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MinuteOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MinuteOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle.CodingKeys,  &unk_189C83060);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle.CodingKeys,  &unk_189C83060);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle.CodingKeys,  &unk_189C83060);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle.CodingKeys,  &unk_189C83060);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys,  &unk_189C83180);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys,  &unk_189C83180);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys,  &unk_189C83180);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys,  &unk_189C83180);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys,  &unk_189C830F0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys,  &unk_189C830F0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys,  &unk_189C830F0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys,  &unk_189C830F0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys);
  }

  return result;
}

uint64_t specialized Date.FormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x736C6F626D7973LL && a2 == 0xE700000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x656E6F5A656D6974LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x7261646E656C6163LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0xD000000000000015LL && a2 == 0x80000001839C8740LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0x6C79745365746164LL && a2 == 0xE900000000000065LL)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t outlined init with take of Date.FormatStyle.Symbol.SymbolType.DayOption(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined release of (Date.AttributedStyle.InnerStyle, Date.AttributedStyle.InnerStyle)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v15 = *(void *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 144);
  uint64_t v4 = *(void *)(a1 + 152);
  uint64_t v5 = *(void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 168);
  uint64_t v7 = *(void *)(a1 + 176);
  uint64_t v8 = *(void *)(a1 + 184);
  __int128 v13 = *(_OWORD *)(a1 + 208);
  __int128 v14 = *(_OWORD *)(a1 + 192);
  __int128 v12 = *(_OWORD *)(a1 + 224);
  uint64_t v9 = *(void *)(a1 + 240);
  __int16 v10 = *(_WORD *)(a1 + 248);
  outlined consume of Date.AttributedStyle.InnerStyle( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(_WORD *)(a1 + 120));
  outlined consume of Date.AttributedStyle.InnerStyle( v15,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  v14,  *((uint64_t *)&v14 + 1),  v13,  *((uint64_t *)&v13 + 1),  v12,  *((uint64_t *)&v12 + 1),  v9,  v10);
  return a1;
}

uint64_t storeEnumTagSinglePayload for Date.AttributedStyle.InnerStyle.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_183208AE0 + 4 * byte_1837C0EF6[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183208B14 + 4 * byte_1837C0EF1[v4]))();
}

uint64_t sub_183208B14(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183208B1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183208B24LL);
  }
  return result;
}

uint64_t sub_183208B30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183208B38LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_183208B3C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183208B44(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.AttributedStyle.InnerStyle.CodingKeys()
{
  return &unk_189C83060;
}

void *type metadata accessor for Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys()
{
  return &unk_189C830F0;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.TimeStyle.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_183208BB0 + 4 * byte_1837C0EFB[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_183208BD0 + 4 * byte_1837C0F00[v4]))();
  }
}

_BYTE *sub_183208BB0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_183208BD0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_183208BD8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_183208BE0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_183208BE8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_183208BF0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys()
{
  return &unk_189C83180;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.DateFieldCollection.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_183208C58 + 4 * byte_1837C0F0A[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_183208C8C + 4 * byte_1837C0F05[v4]))();
}

uint64_t sub_183208C8C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183208C94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183208C9CLL);
  }
  return result;
}

uint64_t sub_183208CA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183208CB0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 13;
  return result;
}

uint64_t sub_183208CB4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183208CBC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.FormatStyle.DateFieldCollection.CodingKeys()
{
  return &unk_189C83210;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v14,  1,  v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v15,  1,  v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  __int16 v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  BOOL v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  int64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v15,  1,  v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  __int16 v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  BOOL v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  int64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  unint64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  Swift::String_optional v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v2 = v1;
  int64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16LL);
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (uint64_t v7 = v4[3] >> 1, v7 < v5))
  {
    int64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v5,  1,  v4);
    uint64_t v7 = v4[3] >> 1;
  }

  uint64_t v8 = v4[2];
  uint64_t v9 = v7 - v8;
  __int16 v10 = specialized Sequence._copySequenceContents(initializing:)(&v25, &v4[2 * v8 + 4], v7 - v8, a1);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  if (v10)
  {
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, v10);
    uint64_t v13 = v11 + v10;
    if (v12)
    {
      __break(1u);
      goto LABEL_23;
    }

    v4[2] = v13;
  }

  if (v10 == v9)
  {
LABEL_11:
    uint64_t v9 = v4[2];
    __int16 v17 = ICU.Enumerator.Elements.Iterator.next()();
    unint64_t object = v17.value._object;
    __darwin_time_t countAndFlagsBits = v17.value._countAndFlagsBits;
    if (!v17.value._object) {
      goto LABEL_9;
    }
    while (1)
    {
      __int128 v18 = v4[3];
      __int128 v19 = v18 >> 1;
      if ((uint64_t)(v18 >> 1) < v9 + 1)
      {
        __int128 v22 = countAndFlagsBits;
        uint64_t v23 = object;
        __int16 v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v18 > 1),  v9 + 1,  1,  v4);
        unint64_t object = v23;
        int64_t v4 = v24;
        __darwin_time_t countAndFlagsBits = v22;
        __int128 v19 = v4[3] >> 1;
        if (v9 < v19)
        {
LABEL_16:
          __int128 v20 = &v4[2 * v9 + 5];
          while (1)
          {
            *(v20 - 1) = countAndFlagsBits;
            *__int128 v20 = object;
            ++v9;
            __int128 v21 = ICU.Enumerator.Elements.Iterator.next()();
            unint64_t object = v21.value._object;
            __darwin_time_t countAndFlagsBits = v21.value._countAndFlagsBits;
            if (!v21.value._object) {
              break;
            }
            v20 += 2;
            if (v19 == v9)
            {
              uint64_t v9 = v19;
              goto LABEL_13;
            }
          }

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v14,  1,  v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

{
  char **v1;
  char **v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  char **v29;
  uint64_t v30;
  char *v31;
  int v32;
  char v33;
  uint64_t v2 = v1;
  int64_t v4 = type metadata accessor for Unicode._NFD();
  int64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for Unicode._NFD.Iterator();
  uint64_t v8 = *(char ***)(v30 - 8);
  MEMORY[0x1895F8858](v30);
  uint64_t v31 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int16 v10 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v11 = *v1;
  BOOL v12 = *((void *)*v2 + 2);
  uint64_t v13 = v12 + v10;
  if (__OFADD__(v12, v10))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __int16 v24 = *v2;
    uint64_t v25 = *((void *)*v2 + 2);
    dispatch thunk of IteratorProtocol.next()();
    if ((v33 & 1) != 0) {
      return ((uint64_t (*)(char *, int64_t))v8[1])(v31, v13);
    }
    while (1)
    {
      uint64_t v26 = *((void *)v24 + 3);
      uint64_t v27 = v26 >> 1;
      __int16 v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v26 > 1),  v25 + 1,  1,  v24);
      *uint64_t v2 = v24;
      uint64_t v28 = v33;
      uint64_t v27 = *((void *)v24 + 3) >> 1;
      if ((v33 & 1) == 0) {
        goto LABEL_21;
      }
LABEL_18:
      *((void *)v24 + 2) = v25;
      if ((v28 & 1) != 0) {
        return ((uint64_t (*)(char *, int64_t))v8[1])(v31, v13);
      }
    }

    uint64_t v28 = 0;
    do
    {
LABEL_21:
      if (v25 >= v27) {
        break;
      }
      *(_DWORD *)&v24[4 * v25++ + 32] = v32;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v28 = v33;
    }

    while ((v33 & 1) == 0);
    goto LABEL_18;
  }

  int64_t v14 = v10;
  uint64_t v29 = v8;
  uint64_t isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = v2;
  *uint64_t v2 = v11;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (uint64_t v16 = *((void *)v11 + 3) >> 1, v16 < v13))
  {
    if (v12 <= v13) {
      __int16 v17 = v13;
    }
    else {
      __int16 v17 = v12;
    }
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v17,  1,  v11);
    *uint64_t v2 = v11;
    uint64_t v16 = *((void *)v11 + 3) >> 1;
  }

  __int128 v18 = v16 - *((void *)v11 + 2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  __int128 v19 = dispatch thunk of Sequence._copyContents(initializing:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  if (v19 < v14) {
    goto LABEL_15;
  }
  uint64_t v8 = v29;
  uint64_t v13 = v30;
  if (v19 < 1) {
    goto LABEL_12;
  }
  __int128 v21 = *((void *)*v2 + 2);
  __int128 v22 = __OFADD__(v21, v19);
  uint64_t v23 = v21 + v19;
  if (!v22)
  {
    *((void *)*v2 + 2) = v23;
LABEL_12:
    if (v19 != v18) {
      return ((uint64_t (*)(char *, int64_t))v8[1])(v31, v13);
    }
    goto LABEL_16;
  }

  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v15,  1,  v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  __int16 v10 = (unint64_t)&v3[v9 + 4];
  if (a1 + 32 < v10 + 8 * v8 && v10 < a1 + 32 + 8 * v8) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  BOOL v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  int64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v14,  1,  v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

char *specialized Array.append<A>(contentsOf:)(char *result, char *a2)
{
  int v3 = *v2;
  int64_t v4 = *((void *)*v2 + 2);
  int64_t v5 = (int64_t)&a2[v4];
  if (__OFADD__(v4, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    if (result) {
      BOOL v18 = result == a2;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18) {
      goto LABEL_13;
    }
    int64_t v19 = *((void *)v3 + 2);
    char v20 = *result++;
    LOBYTE(v12) = v20;
    int64_t v6 = 16LL;
    while (1)
    {
      unint64_t v21 = *((void *)v3 + 3);
      int64_t v14 = v21 >> 1;
      int64_t v22 = v19 + 1;
      if ((uint64_t)(v21 >> 1) < v19 + 1)
      {
        int v34 = result;
        __int16 v32 = a2;
        unsigned __int8 v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v21 > 1),  v19 + 1,  1,  v3);
        int64_t v22 = v19 + 1;
        a2 = v32;
        int v3 = v33;
        uint64_t result = v34;
        int64_t v14 = *((void *)v3 + 3) >> 1;
        if (v19 >= v14) {
          goto LABEL_23;
        }
      }

      else if (v19 >= v14)
      {
        goto LABEL_23;
      }

      v3[v19 + 32] = v12;
      if (result == a2)
      {
LABEL_41:
        *((void *)v3 + 2) = v22;
        goto LABEL_13;
      }

      uint64_t v23 = (char *)(v14 + ~v19);
      __int16 v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) > 0x10 && (unint64_t)(&v3[v19] - result + 33) >= 0x10)
      {
        uint64_t v25 = (__int128 *)result;
        int64_t v26 = v24 & 0xF;
        uint64_t v27 = &v24[-v26];
        v22 += (int64_t)v27;
        uint64_t result = &v27[(void)result];
        uint64_t v28 = &v3[v19 + 33];
        do
        {
          __int128 v29 = *v25++;
          *(_OWORD *)uint64_t v28 = v29;
          v28 += 16;
          v27 -= 16;
        }

        while (v27);
      }

      uint64_t v30 = result++;
      while (1)
      {
        char v31 = *v30++;
        LOBYTE(v12) = v31;
        if (v14 == v22) {
          break;
        }
        v3[v22++ + 32] = v12;
        ++result;
        if (v30 == a2) {
          goto LABEL_41;
        }
      }

Swift::Int specialized Array.append<A>(contentsOf:)(Swift::Int result, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = String.UTF8View._foreignCount()();
    uint64_t v3 = result;
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }

  else
  {
    uint64_t v3 = result & 0xFFFFFFFFFFFFLL;
  }

  int64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
  }

  else
  {
    uint64_t isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v4;
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || *((void *)v4 + 3) >> 1 < v6)
    {
      if (v5 <= v6) {
        int64_t v8 = v5 + v3;
      }
      else {
        int64_t v8 = v5;
      }
      int64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v8,  1,  v4);
      *uint64_t v2 = v4;
    }

    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v9 & 1) != 0) {
      goto LABEL_22;
    }
    uint64_t v10 = result;
    uint64_t result = swift_bridgeObjectRelease_n();
    if (v10 >= v3)
    {
      if (v10 < 1)
      {
LABEL_17:
        *uint64_t v2 = v4;
        return result;
      }

      uint64_t v11 = *((void *)v4 + 2);
      BOOL v12 = __OFADD__(v11, v10);
      uint64_t v13 = v11 + v10;
      if (!v12)
      {
        *((void *)v4 + 2) = v13;
        goto LABEL_17;
      }

      goto LABEL_21;
    }
  }

  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t PresentationIntent.components.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PresentationIntent.components.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*PresentationIntent.components.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PresentationIntent.count.getter()
{
  return *(void *)(*(void *)v0 + 16LL);
}

uint64_t PresentationIntent.debugDescription.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = MEMORY[0x186E1BACC](v0, &type metadata for PresentationIntent.IntentType);
  swift_bridgeObjectRelease();
  return v1;
}

void PresentationIntent.Kind.debugDescription.getter()
{
  __asm { BR              X11 }

uint64_t sub_18320A090()
{
  v0.___darwin_time_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x20726564616568LL;
}

uint64_t sub_18320A1D0@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)&loc_18320A1BC + 4 * byte_1837C1FE7[a1]))( 0x7061726761726170LL,  0xE900000000000068LL);
}

void sub_18320A208()
{
}

void sub_18320A228()
{
}

void sub_18320A24C()
{
}

void sub_18320A268()
{
}

void sub_18320A28C()
{
}

uint64_t PresentationIntent.Kind.init(from:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
    v7.___darwin_time_t countAndFlagsBits = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v3 = (char *)&loc_18320A364
       + 4 * byte_1837C1FED[specialized PresentationIntent.Kind.CodingNames.init(rawValue:)(v7)];
    __asm { BR              X9 }
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_18320A584()
{
  uint64_t v1 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v3 = v2;
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v4);
  MEMORY[0x186E1CF78](v4, v5);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 104LL))( v3,  *MEMORY[0x189619360],  v1);
  swift_willThrow();
  JUMPOUT(0x18320A330LL);
}

void PresentationIntent.Kind.encode(to:)(void *a1)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __asm { BR              X9 }

uint64_t sub_18320A67C()
{
  if (!v0)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void PresentationIntent.Kind.hash(into:)()
{
  __asm { BR              X10 }

void sub_18320AA60()
{
}

uint64_t sub_18320AB10()
{
  return ((uint64_t (*)(void))((char *)sub_18320AB28 + 4 * byte_1837C200E[v0]))();
}

void sub_18320AB28()
{
}

void sub_18320AB3C()
{
}

void sub_18320AB44()
{
}

void sub_18320AB4C()
{
}

void sub_18320AB54()
{
}

void sub_18320AB5C()
{
}

Swift::Int PresentationIntent.Kind.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PresentationIntent.Kind()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationIntent.Kind()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent.Kind(void *a1)
{
  return PresentationIntent.Kind.init(from:)(a1);
}

void protocol witness for Encodable.encode(to:) in conformance PresentationIntent.Kind(void *a1)
{
}

Foundation::PresentationIntent::TableColumn::Alignment_optional __swiftcall PresentationIntent.TableColumn.Alignment.init(rawValue:)( Swift::Int rawValue)
{
  char v2 = 3;
  *uint64_t v1 = v2;
  return (Foundation::PresentationIntent::TableColumn::Alignment_optional)rawValue;
}

uint64_t PresentationIntent.TableColumn.Alignment.rawValue.getter()
{
  return *v0;
}

Foundation::PresentationIntent::TableColumn::Alignment_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PresentationIntent.TableColumn.Alignment( Swift::Int *a1)
{
  return PresentationIntent.TableColumn.Alignment.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent.TableColumn.Alignment()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresentationIntent.TableColumn.Alignment()
{
  return RawRepresentable<>.encode(to:)();
}

void PresentationIntent.TableColumn.alignment.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

_BYTE *PresentationIntent.TableColumn.alignment.setter(_BYTE *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*PresentationIntent.TableColumn.alignment.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::PresentationIntent::TableColumn __swiftcall PresentationIntent.TableColumn.init(alignment:)( Foundation::PresentationIntent::TableColumn alignment)
{
  *uint64_t v1 = *(_BYTE *)alignment.alignment;
  return alignment;
}

void PresentationIntent.TableColumn.hash(into:)()
{
}

BOOL static PresentationIntent.TableColumn.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PresentationIntent.TableColumn.CodingKeys()
{
  return 0x6E656D6E67696C61LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PresentationIntent.TableColumn.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x6E656D6E67696C61LL && a2 == 0xE900000000000074LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationIntent.TableColumn.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresentationIntent.TableColumn.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t PresentationIntent.TableColumn.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresentationIntent.TableColumn.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int PresentationIntent.TableColumn.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PresentationIntent.TableColumn.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresentationIntent.TableColumn.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  int64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent.TableColumn@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return PresentationIntent.TableColumn.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresentationIntent.TableColumn(void *a1)
{
  return PresentationIntent.TableColumn.encode(to:)(a1);
}

uint64_t PresentationIntent.IntentType.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  char v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  return outlined copy of PresentationIntent.Kind(v2, v3, v4);
}

uint64_t PresentationIntent.IntentType.kind.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((_BYTE *)a1 + 16);
  uint64_t result = outlined consume of PresentationIntent.Kind(*(void *)v1, *(void *)(v1 + 8), *(_BYTE *)(v1 + 16));
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

uint64_t (*PresentationIntent.IntentType.kind.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PresentationIntent.IntentType.identity.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t PresentationIntent.IntentType.identity.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*PresentationIntent.IntentType.identity.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PresentationIntent.IntentType.debugDescription.getter()
{
  v0.___darwin_time_t countAndFlagsBits = 0x2064692820LL;
  v0._unint64_t object = (void *)0xE500000000000000LL;
  String.append(_:)(v0);
  v1.___darwin_time_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2.___darwin_time_t countAndFlagsBits = 41LL;
  v2._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

void PresentationIntent.IntentType.hash(into:)()
{
  __asm { BR              X10 }

void sub_18320B2CC()
{
}

uint64_t sub_18320B374()
{
  return ((uint64_t (*)(void))((char *)sub_18320B38C + 4 * byte_1837C201B[v0]))();
}

void sub_18320B38C()
{
}

void sub_18320B3B0()
{
}

void sub_18320B3B8()
{
}

void sub_18320B3C0()
{
}

void sub_18320B3C8()
{
}

void sub_18320B3D0()
{
}

uint64_t static PresentationIntent.IntentType.== infix(_:_:)(__int128 *a1, uint64_t a2)
{
  char v2 = *((_BYTE *)a1 + 16);
  uint64_t v3 = *((void *)a1 + 3);
  uint64_t v4 = *(void *)(a2 + 24);
  __int128 v7 = *a1;
  char v8 = v2;
  specialized static PresentationIntent.Kind.== infix(_:_:)((uint64_t)&v7);
  return v5 & (v3 == v4);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PresentationIntent.IntentType.CodingKeys()
{
  if (*v0) {
    return 0x797469746E656469LL;
  }
  else {
    return 1684957547LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PresentationIntent.IntentType.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized PresentationIntent.IntentType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationIntent.IntentType.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresentationIntent.IntentType.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t PresentationIntent.IntentType.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresentationIntent.IntentType.CodingKeys>);
  uint64_t v12 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  unsigned __int8 v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v6 = v1[1];
  char v8 = *((_BYTE *)v1 + 16);
  v11[0] = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = v7;
  uint64_t v14 = v6;
  char v15 = v8;
  char v16 = 0;
  lazy protocol witness table accessor for type PresentationIntent.Kind and conformance PresentationIntent.Kind();
  uint64_t v9 = v11[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v5, v3);
}

void PresentationIntent.IntentType.hashValue.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_18320B670()
{
  return Hasher._finalize()();
}

uint64_t sub_18320B75C()
{
  return ((uint64_t (*)(void))((char *)sub_18320B774 + 4 * byte_1837C2028[v0]))();
}

void sub_18320B774()
{
}

void sub_18320B78C()
{
}

void sub_18320B798()
{
}

void sub_18320B7A4()
{
}

void sub_18320B7B0()
{
}

void sub_18320B7BC()
{
}

uint64_t PresentationIntent.IntentType.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresentationIntent.IntentType.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v19 = 0;
  lazy protocol witness table accessor for type PresentationIntent.Kind and conformance PresentationIntent.Kind();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v15;
  uint64_t v10 = v16;
  LOBYTE(v15) = 1;
  int v18 = v17;
  outlined copy of PresentationIntent.Kind(v9, v16, v17);
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v10;
  char v12 = v18;
  *(_BYTE *)(a2 + 16) = v18;
  *(void *)(a2 + 24) = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined consume of PresentationIntent.Kind(v9, v10, v12);
}

void protocol witness for Hashable.hash(into:) in conformance PresentationIntent.IntentType()
{
  __asm { BR              X10 }

void sub_18320B9D0()
{
}

uint64_t sub_18320BA80()
{
  return ((uint64_t (*)(void))((char *)sub_18320BA98 + 4 * byte_1837C2035[v0]))();
}

void sub_18320BA98()
{
}

void sub_18320BAAC()
{
}

void sub_18320BAB4()
{
}

void sub_18320BABC()
{
}

void sub_18320BAC4()
{
}

void sub_18320BACC()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationIntent.IntentType()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_18320BB18()
{
  return Hasher._finalize()();
}

uint64_t sub_18320BC04()
{
  return ((uint64_t (*)(void))((char *)sub_18320BC1C + 4 * byte_1837C2042[v0]))();
}

void sub_18320BC1C()
{
}

void sub_18320BC34()
{
}

void sub_18320BC40()
{
}

void sub_18320BC4C()
{
}

void sub_18320BC58()
{
}

void sub_18320BC64()
{
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent.IntentType@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return PresentationIntent.IntentType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresentationIntent.IntentType(void *a1)
{
  return PresentationIntent.IntentType.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PresentationIntent.IntentType( __int128 *a1, uint64_t a2)
{
  char v2 = *((_BYTE *)a1 + 16);
  uint64_t v3 = *((void *)a1 + 3);
  uint64_t v4 = *(void *)(a2 + 24);
  __int128 v7 = *a1;
  char v8 = v2;
  specialized static PresentationIntent.Kind.== infix(_:_:)((uint64_t)&v7);
  return v5 & (v3 == v4);
}

uint64_t PresentationIntent.init(_:identity:parent:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  char v8 = *((_BYTE *)a1 + 16);
  uint64_t v9 = *a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PresentationIntent.IntentType>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_183720D90;
  *(void *)(result + 32) = v6;
  *(void *)(result + 40) = v7;
  *(_BYTE *)(result + 48) = v8;
  *(void *)(result + 56) = a2;
  if (v9)
  {
    uint64_t v11 = result;
    specialized Array.append<A>(contentsOf:)(v9);
    uint64_t result = v11;
  }

  *a4 = result;
  return result;
}

Foundation::PresentationIntent __swiftcall PresentationIntent.init(types:)(Foundation::PresentationIntent types)
{
  v1->components._rawValue = types.components._rawValue;
  return types;
}

BOOL PresentationIntent.isValid.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  if (v1)
  {
    Swift::Int v2 = 0LL;
    uint64_t v3 = v1 - 1;
    do
    {
      Swift::Bool v4 = PresentationIntent.isValid(at:)(v2);
      if (!v4) {
        break;
      }
    }

    while (v3 != v2++);
  }

  else
  {
    return 0;
  }

  return v4;
}

Swift::Bool __swiftcall PresentationIntent.isValid(at:)(Swift::Int at)
{
  if (at < 0)
  {
    __break(1u);
  }

  else if (*(void *)(*(void *)v1 + 16LL) > (unint64_t)at)
  {
    __asm { BR              X13 }
  }

  __break(1u);
  JUMPOUT(0x18320C034LL);
}

uint64_t PresentationIntent.indentationLevel.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  for (i = (unsigned __int8 *)(*(void *)v0 + 48LL); ; i += 32)
  {
    uint64_t v4 = *i;
    if ((_DWORD)v4 == 1) {
      goto LABEL_10;
    }
    if ((_DWORD)v4 == 6 && !*((void *)i - 1) && *((void *)i - 2) == 3LL) {
      break;
    }
    uint64_t v4 = 0LL;
LABEL_10:
    BOOL v6 = __OFADD__(result, v4);
    result += v4;
    if (v6) {
      goto LABEL_15;
    }
LABEL_11:
    if (!--v1) {
      return result;
    }
  }

  BOOL v6 = __OFADD__(result++, 1LL);
  if (!v6) {
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return 0LL;
}

uint64_t PresentationIntent.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static PresentationIntent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationIntent.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresentationIntent.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t PresentationIntent.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresentationIntent.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  BOOL v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
  lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type [PresentationIntent.IntentType] and conformance <A> [A],  &demangling cache variable for type metadata for [PresentationIntent.IntentType],  (uint64_t (*)(void))lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType,  MEMORY[0x189618448]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int PresentationIntent.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t PresentationIntent.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresentationIntent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
    lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type [PresentationIntent.IntentType] and conformance <A> [A],  &demangling cache variable for type metadata for [PresentationIntent.IntentType],  (uint64_t (*)(void))lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType,  MEMORY[0x189618478]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PresentationIntent()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PresentationIntent(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationIntent()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return PresentationIntent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresentationIntent(void *a1)
{
  return PresentationIntent.encode(to:)(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresentationIntent()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = MEMORY[0x186E1BACC](v0, &type metadata for PresentationIntent.IntentType);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PresentationIntent( uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t static PresentationIntent._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSPresentationIntent);
}

void PresentationIntent.convertToNSPresentationIntent(identity:kind:_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 16);
  unint64_t v5 = a3[1];
  unint64_t v6 = *(void *)(*a3 + 16LL);
  if (v5 != v6)
  {
    if (v5 >= v6)
    {
      __break(1u);
      JUMPOUT(0x18320C988LL);
    }

    unint64_t v7 = v5 + 1;
    uint64_t v8 = *a3 + 32 * v5;
    uint64_t v9 = *(void *)(v8 + 56);
    char v10 = *(_BYTE *)(v8 + 48);
    uint64_t v14 = *v3;
    __int128 v11 = *(_OWORD *)(v8 + 32);
    a3[1] = v7;
    __int128 v12 = v11;
    char v13 = v10;
    PresentationIntent.convertToNSPresentationIntent(identity:kind:_:)(v9, &v12);
  }

  __asm { BR              X9 }

void __swiftcall PresentationIntent._bridgeToObjectiveC()(NSPresentationIntent *__return_ptr retstr)
{
  v8[0] = *v1;
  if (*(void *)(v8[0] + 16LL))
  {
    char v2 = *(_BYTE *)(v8[0] + 48LL);
    uint64_t v3 = *(void *)(v8[0] + 56LL);
    v8[1] = 1LL;
    uint64_t v7 = v8[0];
    __int128 v5 = *(_OWORD *)(v8[0] + 32LL);
    char v6 = v2;
    swift_bridgeObjectRetain();
    PresentationIntent.convertToNSPresentationIntent(identity:kind:_:)(v3, (uint64_t)&v5, v8);
    if (v4)
    {
      swift_bridgeObjectRelease();
      return;
    }

    __break(1u);
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static PresentationIntent._forceBridgeFromObjectiveC(_:result:)(void *a1, void *a2)
{
  uint64_t result = specialized static PresentationIntent._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t static PresentationIntent._unconditionallyBridgeFromObjectiveC(_:)@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = 0LL;
  if (!a1)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t result = specialized static PresentationIntent._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v4);
  if ((result & 1) != 0)
  {
    if (v4)
    {
      *a2 = v4;
      return result;
    }

    goto LABEL_6;
  }

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance PresentationIntent( void *a1, void *a2)
{
  uint64_t result = specialized static PresentationIntent._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

void specialized static PresentationIntent.Kind.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }

BOOL sub_18320CC54()
{
  if (v5)
  {
    outlined copy of PresentationIntent.Kind(v1, v2, v5);
    outlined consume of PresentationIntent.Kind(v0, v3, v4);
    outlined consume of PresentationIntent.Kind(v1, v2, v5);
    return 0LL;
  }

  else
  {
    outlined consume of PresentationIntent.Kind(v0, v3, 0);
    outlined consume of PresentationIntent.Kind(v1, v2, 0);
    return v0 == v1;
  }

void sub_18320CF08()
{
  if (v4 != 6 || v1 != 1 || v2 != 0) {
    JUMPOUT(0x18320CE2CLL);
  }
  outlined consume of PresentationIntent.Kind(v0, v3, 6);
  outlined consume of PresentationIntent.Kind(1LL, 0LL, 6);
  JUMPOUT(0x18320CE60LL);
}

void sub_18320CF40()
{
  if (v4 != 6 || v1 != 2 || v2 != 0) {
    JUMPOUT(0x18320CE2CLL);
  }
  outlined consume of PresentationIntent.Kind(v0, v3, 6);
  outlined consume of PresentationIntent.Kind(2LL, 0LL, 6);
  JUMPOUT(0x18320CE60LL);
}

void sub_18320CF68()
{
  if (v4 != 6 || v1 != 3 || v2 != 0) {
    JUMPOUT(0x18320CE2CLL);
  }
  outlined consume of PresentationIntent.Kind(v0, v3, 6);
  outlined consume of PresentationIntent.Kind(3LL, 0LL, 6);
  JUMPOUT(0x18320CE60LL);
}

void sub_18320CF90()
{
  if (v4 != 6 || v1 != 4 || v2 != 0) {
    JUMPOUT(0x18320CE2CLL);
  }
  outlined consume of PresentationIntent.Kind(v0, v3, 6);
  outlined consume of PresentationIntent.Kind(4LL, 0LL, 6);
  JUMPOUT(0x18320CE60LL);
}

void sub_18320CFB8()
{
  if (v4 != 6 || v1 != 5 || v2 != 0) {
    JUMPOUT(0x18320CE2CLL);
  }
  outlined consume of PresentationIntent.Kind(v0, v3, 6);
  JUMPOUT(0x18320CFDCLL);
}

unint64_t specialized PresentationIntent.Kind.CodingNames.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2.___darwin_time_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of PresentationIntent.Kind.CodingNames.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC) {
    return 12LL;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.TableColumn,  &type metadata for PresentationIntent.TableColumn);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.TableColumn,  &type metadata for PresentationIntent.TableColumn);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.TableColumn,  &type metadata for PresentationIntent.TableColumn);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type String? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type String? and conformance <A> A?)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    uint64_t v2 = MEMORY[0x189617FB0];
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961AF98], v1, &v2);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String? and conformance <A> A?);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.TableColumn.CodingKeys,  &unk_189C83710);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.TableColumn.CodingKeys,  &unk_189C83710);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.TableColumn.CodingKeys,  &unk_189C83710);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.TableColumn.CodingKeys,  &unk_189C83710);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.TableColumn.Alignment,  &type metadata for PresentationIntent.TableColumn.Alignment);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.TableColumn.Alignment,  &type metadata for PresentationIntent.TableColumn.Alignment);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.TableColumn.Alignment,  &type metadata for PresentationIntent.TableColumn.Alignment);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.TableColumn.Alignment,  &type metadata for PresentationIntent.TableColumn.Alignment);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.IntentType.CodingKeys,  &unk_189C83680);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.IntentType.CodingKeys,  &unk_189C83680);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.IntentType.CodingKeys,  &unk_189C83680);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.IntentType.CodingKeys,  &unk_189C83680);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.Kind and conformance PresentationIntent.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind;
  if (!lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.Kind,  &type metadata for PresentationIntent.Kind);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind;
  if (!lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.Kind,  &type metadata for PresentationIntent.Kind);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind;
  if (!lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.Kind,  &type metadata for PresentationIntent.Kind);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.CodingKeys,  &type metadata for PresentationIntent.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.CodingKeys,  &type metadata for PresentationIntent.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.CodingKeys,  &type metadata for PresentationIntent.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.CodingKeys,  &type metadata for PresentationIntent.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.IntentType,  &type metadata for PresentationIntent.IntentType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.IntentType,  &type metadata for PresentationIntent.IntentType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent.IntentType,  &type metadata for PresentationIntent.IntentType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType);
  }

  return result;
}

uint64_t specialized PresentationIntent.IntentType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684957547 && a2 == 0xE400000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x797469746E656469LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized static PresentationIntent._conditionallyBridgeFromObjectiveC(_:result:)( void *a1, void *a2)
{
  id v2 = a1;
  unint64_t v3 = MEMORY[0x18961AFE8];
  int v4 = &selRef_initWithTransform_;
  int v5 = &selRef_firstIndex;
  char v6 = &selRef_observedUbiquityAttributes;
  __int16 v65 = (void *)MEMORY[0x18961AFE8];
  while (2)
  {
    id v9 = v2;
    switch((unint64_t)[v9 v4[55]])
    {
      case 0uLL:
        id v10 = [v9 v5[158]];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v65[2] + 1LL,  1,  v65);
        }
        unint64_t v12 = v65[2];
        unint64_t v11 = v65[3];
        if (v12 >= v11 >> 1) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v65);
        }
        uint64_t v65[2] = v12 + 1;
        uint64_t v7 = &v65[4 * v12];
        uint64_t v7[4] = 0LL;
        v7[5] = 0LL;
        goto LABEL_4;
      case 1uLL:
        id v13 = objc_msgSend(v9, sel_headerLevel);
        id v14 = [v9 (SEL)v5 + 1184];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v65[2] + 1LL,  1,  v65);
        }
        unint64_t v16 = v65[2];
        unint64_t v15 = v65[3];
        if (v16 >= v15 >> 1) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v15 > 1),  v16 + 1,  1,  v65);
        }
        uint64_t v65[2] = v16 + 1;
        unsigned __int8 v17 = &v65[4 * v16];
        v17[4] = v13;
        v17[5] = 0LL;
        *((_BYTE *)v17 + 48) = 0;
        goto LABEL_65;
      case 2uLL:
        id v10 = [v9 (SEL)v5 + 1184];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v65[2] + 1LL,  1,  v65);
        }
        unint64_t v19 = v65[2];
        unint64_t v18 = v65[3];
        if (v19 >= v18 >> 1) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v18 > 1),  v19 + 1,  1,  v65);
        }
        uint64_t v65[2] = v19 + 1;
        uint64_t v7 = &v65[4 * v19];
        __int128 v8 = xmmword_18372C2E0;
        goto LABEL_3;
      case 3uLL:
        id v10 = [v9 (SEL)v5 + 1184];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v65[2] + 1LL,  1,  v65);
        }
        unint64_t v21 = v65[2];
        unint64_t v20 = v65[3];
        if (v21 >= v20 >> 1) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v20 > 1),  v21 + 1,  1,  v65);
        }
        uint64_t v65[2] = v21 + 1;
        uint64_t v7 = &v65[4 * v21];
        __int128 v8 = xmmword_18372C9F0;
        goto LABEL_3;
      case 4uLL:
        id v22 = objc_msgSend(v9, sel_ordinal);
        id v14 = [v9 (SEL)v5 + 1184];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v65[2] + 1LL,  1,  v65);
        }
        unint64_t v24 = v65[2];
        unint64_t v23 = v65[3];
        if (v24 >= v23 >> 1) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v23 > 1),  v24 + 1,  1,  v65);
        }
        uint64_t v65[2] = v24 + 1;
        unsigned __int8 v17 = &v65[4 * v24];
        v17[4] = v22;
        v17[5] = 0LL;
        char v25 = 1;
        goto LABEL_64;
      case 5uLL:
        id v26 = objc_msgSend(v9, sel_languageHint);
        if (v26)
        {
          uint64_t v27 = v26;
          id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
          uint64_t v30 = v29;
        }

        else
        {
          id v28 = 0LL;
          uint64_t v30 = 0LL;
        }

        id v47 = [v9 (SEL)v5 + 1184];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v65[2] + 1LL,  1,  v65);
        }
        unint64_t v49 = v65[2];
        unint64_t v48 = v65[3];
        if (v49 >= v48 >> 1) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v48 > 1),  v49 + 1,  1,  v65);
        }
        uint64_t v65[2] = v49 + 1;
        __int16 v50 = &v65[4 * v49];
        uint64_t v50[4] = v28;
        v50[5] = v30;
        *((_BYTE *)v50 + 48) = 2;
        v50[7] = v47;
        char v6 = &selRef_observedUbiquityAttributes;
        goto LABEL_5;
      case 6uLL:
        id v10 = [v9 (SEL)v5 + 1184];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v65[2] + 1LL,  1,  v65);
        }
        unint64_t v32 = v65[2];
        unint64_t v31 = v65[3];
        if (v32 >= v31 >> 1) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v31 > 1),  v32 + 1,  1,  v65);
        }
        uint64_t v65[2] = v32 + 1;
        uint64_t v7 = &v65[4 * v32];
        __int128 v8 = xmmword_1837C1FB0;
        goto LABEL_3;
      case 7uLL:
        id v10 = [v9 (SEL)v5 + 1184];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v65[2] + 1LL,  1,  v65);
        }
        unint64_t v34 = v65[2];
        unint64_t v33 = v65[3];
        if (v34 >= v33 >> 1) {
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v33 > 1),  v34 + 1,  1,  v65);
        }
        uint64_t v65[2] = v34 + 1;
        uint64_t v7 = &v65[4 * v34];
        __int128 v8 = xmmword_1837C28D0;
        goto LABEL_3;
      case 8uLL:
        id v35 = objc_msgSend(v9, sel_columnAlignments);
        if (v35)
        {
          __int128 v36 = v35;
          type metadata accessor for __SwiftDeferredNSArray();
          swift_unknownObjectRetain();
          if (swift_dynamicCastClass())
          {
            swift_retain();
          }

          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSNumber>);
          uint64_t v37 = swift_dynamicCastClass();
          if (v37)
          {
            unint64_t v38 = v37;

            if (!(v38 >> 62)) {
              goto LABEL_73;
            }
          }

          else
          {
            swift_unknownObjectRelease();
            objc_msgSend(v36, sel_copy);
            type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
            unint64_t v38 = _bridgeCocoaArray<A>(_:)();

            swift_unknownObjectRelease();
            if (!(v38 >> 62))
            {
LABEL_73:
              uint64_t v51 = *(void *)((v38 & 0xFFFFFFFFFFFFF8LL) + 0x10);
              if (!v51) {
                goto LABEL_86;
              }
              goto LABEL_74;
            }
          }
        }

        else
        {
          unint64_t v38 = v3;
          if (!(v3 >> 62)) {
            goto LABEL_73;
          }
        }

        swift_bridgeObjectRetain();
        uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v51)
        {
LABEL_86:
          swift_bridgeObjectRelease();
          unint64_t v53 = v3;
          goto LABEL_87;
        }

unint64_t lazy protocol witness table accessor for type PresentationIntent and conformance PresentationIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent;
  if (!lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent,  &type metadata for PresentationIntent);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent;
  if (!lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PresentationIntent,  &type metadata for PresentationIntent);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent);
  }

  return result;
}

ValueMetadata *type metadata accessor for PresentationIntent()
{
  return &type metadata for PresentationIntent;
}

uint64_t initializeBufferWithCopyOfBuffer for PresentationIntent.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of PresentationIntent.Kind(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PresentationIntent.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of PresentationIntent.Kind(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of PresentationIntent.Kind(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PresentationIntent.Kind(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of PresentationIntent.Kind(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationIntent.Kind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationIntent.Kind( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 250;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for PresentationIntent.Kind(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t destructiveInjectEnumTag for PresentationIntent.Kind(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)unint64_t result = a2 - 6;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 6;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PresentationIntent.Kind()
{
  return &type metadata for PresentationIntent.Kind;
}

ValueMetadata *type metadata accessor for PresentationIntent.TableColumn()
{
  return &type metadata for PresentationIntent.TableColumn;
}

uint64_t storeEnumTagSinglePayload for PresentationIntent.TableColumn( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_18320E308 + 4 * byte_1837C205A[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18320E33C + 4 * byte_1837C2055[v4]))();
}

uint64_t sub_18320E33C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18320E344(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18320E34CLL);
  }
  return result;
}

uint64_t sub_18320E358(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18320E360LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_18320E364(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18320E36C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PresentationIntent.TableColumn.Alignment()
{
  return &type metadata for PresentationIntent.TableColumn.Alignment;
}

uint64_t destroy for PresentationIntent.IntentType(uint64_t a1)
{
  return outlined consume of PresentationIntent.Kind(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeWithCopy for PresentationIntent.IntentType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(_BYTE *)(a2 + 16);
  outlined copy of PresentationIntent.Kind(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for PresentationIntent.IntentType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(_BYTE *)(a2 + 16);
  outlined copy of PresentationIntent.Kind(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  char v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of PresentationIntent.Kind(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for PresentationIntent.IntentType(uint64_t a1, uint64_t a2)
{
  char v4 = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of PresentationIntent.Kind(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationIntent.IntentType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationIntent.IntentType( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 - 250;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PresentationIntent.IntentType()
{
  return &type metadata for PresentationIntent.IntentType;
}

ValueMetadata *type metadata accessor for PresentationIntent.CodingKeys()
{
  return &type metadata for PresentationIntent.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PresentationIntent.IntentType.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4) = 1;
  }
  else {
    LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_18320E5A4 + 4 * byte_1837C2064[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18320E5D8 + 4 * byte_1837C205F[v4]))();
}

uint64_t sub_18320E5D8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18320E5E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18320E5E8LL);
  }
  return result;
}

uint64_t sub_18320E5F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18320E5FCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_18320E600(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18320E608(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PresentationIntent.IntentType.CodingKeys()
{
  return &unk_189C83680;
}

uint64_t storeEnumTagSinglePayload for PresentationIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_18320E664 + 4 * byte_1837C2069[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_18320E684 + 4 * byte_1837C206E[v4]))();
  }
}

_BYTE *sub_18320E664(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_18320E684(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_18320E68C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_18320E694(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_18320E69C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_18320E6A4(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for PresentationIntent.TableColumn.CodingKeys()
{
  return &unk_189C83710;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation8CalendarV9ComponentOG_AJ9component_Si9multitudets5NeverOTg5015_s10Foundation8e2V9f40OAESiIgnrd_A2E9component_Si9multitudets5i106OIegnrzr_TR090_s10Foundation16ICUDateFormatterC14DateFormatInfoV14UpdateScheduleO15updateIntervalsSayAA8b2L54C41O9component_Si9multitudetGvgAL_SitALXEfU_Tf3nnnpf_nTf1cn_n( uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (!v1) {
    return v2;
  }
  uint64_t v16 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v16;
  uint64_t result = specialized Set.startIndex.getter(a1);
  uint64_t v5 = result;
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  while ((v5 & 0x8000000000000000LL) == 0 && v5 < 1LL << *(_BYTE *)(a1 + 32))
  {
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v7) {
      goto LABEL_14;
    }
    char v10 = *(_BYTE *)(*(void *)(a1 + 48) + v5);
    unint64_t v12 = *(void *)(v16 + 16);
    unint64_t v11 = *(void *)(v16 + 24);
    if (v12 >= v11 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    }
    *(void *)(v16 + 16) = v12 + 1;
    uint64_t v13 = v16 + 16 * v12;
    *(_BYTE *)(v13 + 32) = v10;
    *(void *)(v13 + 40) = 1LL;
    uint64_t result = specialized _NativeSet.index(after:)(v5, v7, v9 & 1, a1);
    uint64_t v5 = result;
    uint64_t v7 = v14;
    char v9 = v15 & 1;
    if (!--v1)
    {
      outlined consume of Set<Calendar.Component>.Index._Variant(result, v14, v15 & 1);
      return v2;
    }
  }

  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_Ss7elementtG_Sss5NeverOTg5166_sSS10FoundationE21purgingStringLiterals33_897C603A04DF76F04B69FE4D70F5F325LLSSyFSsSi6offset_Ss7elementt_tcfu_32f319bcf0ad9587a902b48655fa9ced40SiAD_SsAEtSsTf3nnnpk_nTf1cn_n( uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v13;
    uint64_t v4 = (uint64_t *)(a1 + 64);
    do
    {
      uint64_t v5 = *(v4 - 3);
      uint64_t v6 = *(v4 - 2);
      uint64_t v8 = *(v4 - 1);
      uint64_t v7 = *v4;
      unint64_t v9 = *(void *)(v13 + 16);
      unint64_t v10 = *(void *)(v13 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v9 + 1, 1);
      }
      *(void *)(v13 + 16) = v9 + 1;
      unint64_t v11 = (void *)(v13 + 32 * v9);
      v11[4] = v5;
      v11[5] = v6;
      _OWORD v11[6] = v8;
      v11[7] = v7;
      v4 += 5;
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS9UTF16ViewV_So16UDateFormatFieldVs5NeverOTg5097_sSS10FoundationE14updateSchedule33_897C603A04DF76F04B69FE4D70F5F325LLAA16ICUDateFormatterC14Dateg22InfoV06UpdateC0OvgSo05f2P5H15Vs6UInt16VXEfU_Tf1cn_n( uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_63;
  }
  uint64_t v5 = String.UTF16View._nativeGetOffset(for:)();
LABEL_3:
  uint64_t v6 = v5;
  uint64_t v7 = MEMORY[0x18961AFE8];
  if (!v5) {
    return v7;
  }
  uint64_t v26 = MEMORY[0x18961AFE8];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v5 & ~(v5 >> 63),  0);
  if ((v6 & 0x8000000000000000LL) == 0)
  {
    uint64_t v9 = ((unint64_t)a1 >> 59) & 1;
    if ((a2 & 0x1000000000000000LL) == 0) {
      LOBYTE(v9) = 1;
    }
    uint64_t v10 = 4LL << v9;
    BOOL v11 = a1 < 0;
    if ((a2 & 0x2000000000000000LL) != 0) {
      unint64_t v12 = v4;
    }
    else {
      unint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if ((a2 & 0x2000000000000000LL) != 0) {
      BOOL v11 = (a2 & 0x4000000000000000LL) != 0;
    }
    BOOL v21 = v11;
    unint64_t v13 = 15LL;
    uint64_t v22 = a1;
    uint64_t v23 = v10;
    while (1)
    {
      if (!v6)
      {
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        uint64_t v5 = String.UTF16View._foreignCount()();
        goto LABEL_3;
      }

      uint64_t v4 = v13 & 0xC;
      unint64_t v14 = v13;
      if (v4 == v10) {
        unint64_t v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a1, a2);
      }
      if (v14 >> 16 >= v12) {
        goto LABEL_59;
      }
      if ((a2 & 0x1000000000000000LL) != 0)
      {
        String.UTF16View._foreignSubscript(position:)();
        goto LABEL_32;
      }

      if ((v14 & 1) != 0)
      {
        if ((a2 & 0x2000000000000000LL) != 0) {
          goto LABEL_26;
        }
      }

      else
      {
        _StringGuts.scalarAlignSlow(_:)(v14, a1, a2);
        if ((a2 & 0x2000000000000000LL) != 0)
        {
LABEL_26:
          uint64_t v24 = a1;
          uint64_t v25 = a2 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_27;
        }
      }

      if ((a1 & 0x1000000000000000LL) == 0) {
        _StringObject.sharedUTF8.getter();
      }
LABEL_27:
      unsigned int v15 = _decodeScalar(_:startingAt:)();
      if ((v14 & 0xC000) == 0x4000)
      {
        if (v15 < 0x10000) {
          goto LABEL_61;
        }
      }

      else if (HIWORD(v15) && (((unsigned __int16)((v15 + 67043328) >> 10) + 55296) & 0x10000) != 0)
      {
        goto LABEL_62;
      }

Swift::tuple_String_OpaquePointer_optional __swiftcall ICUDateFormatter.attributedFormat(_:)(Foundation::Date a1)
{
  uint64_t inited = swift_initStackObject();
  uint64_t v2 = ufieldpositer_open();
  if (!v2) {
    __break(1u);
  }
  *(void *)(inited + 16) = v2;
  swift_retain();
  swift_retain();
  uint64_t v3 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
  uint64_t v5 = v4;
  swift_release();
  swift_release();
  if (v5)
  {
    uint64_t v15 = v3;
    int v16 = (unint64_t *)MEMORY[0x18961AFE8];
    swift_retain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0);
    uint64_t v6 = v16;
    swift_retain();
    int v7 = ufieldpositer_next();
    if ((v7 & 0x80000000) == 0)
    {
      int v8 = v7;
      do
      {
        unint64_t v10 = v16[2];
        unint64_t v9 = v16[3];
        if (v10 >= v9 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v9 > 1,  v10 + 1,  1);
        }
        _OWORD v16[2] = v10 + 1;
        BOOL v11 = &v16[3 * v10];
        *((_DWORD *)v11 + 8) = v8;
        v11[5] = 0LL;
        _OWORD v11[6] = 0LL;
        int v8 = ufieldpositer_next();
      }

      while ((v8 & 0x80000000) == 0);
    }

    swift_release_n();
    swift_release();
    uint64_t v12 = v15;
  }

  else
  {
    swift_release();
    uint64_t v12 = 0LL;
    uint64_t v6 = 0LL;
  }

  unint64_t v13 = v5;
  unint64_t v14 = v6;
  result.value._1._rawValue = v14;
  result.value._0._unint64_t object = v13;
  result.value._0.___darwin_time_t countAndFlagsBits = v12;
  return result;
}

void ICUDateFormatter.DateFormatInfo.UpdateSchedule.updateIntervals.getter()
{
  uint64_t v1 = *(void *)v0;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    uint64_t v2 = Calendar.ComponentSet.set.getter();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation8CalendarV9ComponentOG_AJ9component_Si9multitudets5NeverOTg5015_s10Foundation8e2V9f40OAESiIgnrd_A2E9component_Si9multitudets5i106OIegnrzr_TR090_s10Foundation16ICUDateFormatterC14DateFormatInfoV14UpdateScheduleO15updateIntervalsSayAA8b2L54C41O9component_Si9multitudetGvgAL_SitALXEfU_Tf3nnnpf_nTf1cn_n(v2);
    swift_bridgeObjectRelease();
    return;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(component: Calendar.Component, multitude: Int)>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_183720D90;
  *(_BYTE *)(v3 + 32) = 13;
  double v4 = __exp10((double)v1) + 0.0;
  if (v4 < INFINITY) {
    *(void *)&v4 += (*(uint64_t *)&v4 >> 63) | 1;
  }
  if ((~*(void *)&v4 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (v4 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (v4 < 9.22337204e18)
  {
    *(void *)(v3 + 40) = (uint64_t)v4;
    return;
  }

uint64_t ICUDateFormatter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICUDateFormatter()
{
  return objc_opt_self();
}

void *ICUDateFormatter.symbols(for:)()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  int v0 = udat_countSymbols();
  if (v0 < 0) {
    goto LABEL_15;
  }
  int v1 = v0;
  if (v0)
  {
    int v2 = 0;
    uint64_t v3 = (void *)MEMORY[0x18961AFE8];
    while (v1 != v2)
    {
      uint64_t v5 = swift_retain();
      MEMORY[0x1895F8858](v5);
      specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v11, &v12);
      uint64_t v6 = v13;
      if (v13)
      {
        uint64_t v7 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v3[2] + 1LL,  1,  v3);
        }
        unint64_t v9 = v3[2];
        unint64_t v8 = v3[3];
        if (v9 >= v8 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v3);
        }
        v3[2] = v9 + 1;
        double v4 = &v3[2 * v9];
        v4[4] = v7;
        v4[5] = v6;
      }

      if (v1 == ++v2) {
        return v3;
      }
    }

    __break(1u);
LABEL_15:
    __break(1u);
  }

  return (void *)MEMORY[0x18961AFE8];
}

void ICUDateFormatter.DateFormatInfo.hash(into:)()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 32);
  Swift::UInt v2 = *(void *)(v0 + 40);
  Swift::UInt v3 = *(void *)(v0 + 48);
  Swift::UInt v6 = *(unsigned __int8 *)(v0 + 56);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 80);
  Swift::UInt64 v4 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v7);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v4;
  }
  else {
    Swift::UInt64 v5 = 0LL;
  }
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUDateFormatter.DateFormatInfo()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUDateFormatter.DateFormatInfo()
{
  return Hasher._finalize()();
}

uint64_t one-time initialization function for formatterCache()
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x18961AFF0];
  static ICUDateFormatter.formatterCache = 100LL;
  unk_18C5D62B0 = result;
  return result;
}

uint64_t one-time initialization function for patternCache(uint64_t a1)
{
  return one-time initialization function for patternCache( a1,  &demangling cache variable for type metadata for LockedState<[ICUDateFormatter.PatternCacheKey : String]>._Buffer,  &static ICUDateFormatter.patternCache);
}

void ICUDateFormatter.PatternCacheKey.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::UInt v4 = *(unsigned __int8 *)(v2 + 16);
  int v5 = *(unsigned __int8 *)(v2 + 24);
  int v6 = *(unsigned __int8 *)(v2 + 40);
  uint64_t v7 = *(unsigned __int8 *)(v2 + 41);
  uint64_t v17 = *(unsigned __int8 *)(v2 + 42);
  int v8 = *(unsigned __int8 *)(v2 + 43);
  uint64_t v14 = *(void *)(v2 + 48);
  uint64_t v15 = *(void *)(v2 + 32);
  char v13 = *(_BYTE *)(v2 + 56);
  int v9 = *(unsigned __int8 *)(v2 + 58);
  uint64_t v10 = *(unsigned __int8 *)(v2 + 59);
  int v19 = *(unsigned __int8 *)(v2 + 57);
  int v20 = *(unsigned __int8 *)(v2 + 60);
  int v18 = *(unsigned __int8 *)(v2 + 61);
  int v22 = *(unsigned __int8 *)(v2 + 62);
  int v23 = *(unsigned __int8 *)(v2 + 63);
  uint64_t v16 = *(void *)(v2 + 64);
  int v24 = *(unsigned __int8 *)(v2 + 72);
  int v25 = *(unsigned __int8 *)(v2 + 73);
  uint64_t v21 = *(void *)(v2 + 88);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v4);
  if (v5 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if (v6 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v15, v6);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if ((_DWORD)v7 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  if ((_DWORD)v17 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  if (v8 != 3)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_13;
    }
LABEL_25:
    Hasher._combine(_:)(0);
    if (v9 != 3) {
      goto LABEL_22;
    }
    goto LABEL_26;
  }

  Hasher._combine(_:)(0);
  if (v19) {
    goto LABEL_25;
  }
LABEL_13:
  Hasher._combine(_:)(1u);
  if ((v13 & 1) == 0)
  {
    uint64_t v11 = 10LL;
    if (v14 < 10) {
      uint64_t v11 = v14;
    }
    if (v11 <= 1) {
      uint64_t v12 = 1LL;
    }
    else {
      uint64_t v12 = v11;
    }
    MEMORY[0x186E1B904](103LL, 0xE100000000000000LL, v12);
  }

  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v9 != 3)
  {
LABEL_22:
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((_DWORD)v10 != 6) {
      goto LABEL_23;
    }
    goto LABEL_27;
  }

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUDateFormatter.PatternCacheKey()
{
  uint64_t v1 = v0[1];
  char v2 = *((_BYTE *)v0 + 16);
  char v3 = *((_BYTE *)v0 + 24);
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[6];
  char v6 = *((_BYTE *)v0 + 56);
  char v7 = *((_BYTE *)v0 + 57);
  __int16 v8 = *((_WORD *)v0 + 31);
  uint64_t v9 = v0[8];
  __int16 v10 = *((_WORD *)v0 + 36);
  uint64_t v13 = *v0;
  uint64_t v14 = v1;
  char v15 = v2;
  char v16 = v3;
  uint64_t v17 = v4;
  int v18 = *((_DWORD *)v0 + 10);
  uint64_t v19 = v5;
  char v20 = v6;
  char v21 = v7;
  int v22 = *(_DWORD *)((char *)v0 + 58);
  __int16 v23 = v8;
  uint64_t v24 = v9;
  __int16 v25 = v10;
  __int128 v26 = *((_OWORD *)v0 + 5);
  Hasher.init(_seed:)();
  ICUDateFormatter.PatternCacheKey.hash(into:)((uint64_t)v12);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUDateFormatter.PatternCacheKey()
{
  uint64_t v1 = v0[1];
  char v2 = *((_BYTE *)v0 + 16);
  char v3 = *((_BYTE *)v0 + 24);
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[6];
  char v6 = *((_BYTE *)v0 + 56);
  char v7 = *((_BYTE *)v0 + 57);
  __int16 v8 = *((_WORD *)v0 + 31);
  uint64_t v9 = v0[8];
  __int16 v10 = *((_WORD *)v0 + 36);
  uint64_t v13 = *v0;
  uint64_t v14 = v1;
  char v15 = v2;
  char v16 = v3;
  uint64_t v17 = v4;
  int v18 = *((_DWORD *)v0 + 10);
  uint64_t v19 = v5;
  char v20 = v6;
  char v21 = v7;
  int v22 = *(_DWORD *)((char *)v0 + 58);
  __int16 v23 = v8;
  uint64_t v24 = v9;
  __int16 v25 = v10;
  __int128 v26 = *((_OWORD *)v0 + 5);
  Hasher.init(_seed:)();
  ICUDateFormatter.PatternCacheKey.hash(into:)((uint64_t)v12);
  return Hasher._finalize()();
}

uint64_t ICUDateFormatter.DateFormatInfo.init(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v7)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t *, uint64_t, uint64_t);
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int16x8_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  os_unfair_lock_s *v40;
  __int128 v41;
  void (*v42)(__int128 *__return_ptr, _BYTE *, uint64_t, void *);
  char v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t result;
  uint64_t (*v52)(uint64_t, void *);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(void, uint64_t);
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[9];
  uint64_t v72[2];
  char v73;
  char v74;
  uint64_t v75;
  unsigned __int32 v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD v91[3];
  __int128 v92;
  _BYTE v93[58];
  __int128 v94;
  _BYTE v95[16];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[56];
  char v100[8];
  uint64_t v101;
  __int32 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  char v109;
  __int128 v2 = a1[6];
  *(_OWORD *)&v93[16] = a1[5];
  *(_OWORD *)&v93[32] = v2;
  *(_OWORD *)&v93[42] = *(_OWORD *)((char *)a1 + 106);
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v91[0] = *a1;
  v91[1] = v4;
  __int128 v5 = a1[3];
  _OWORD v91[2] = a1[2];
  __int128 v92 = v5;
  *(_OWORD *)__int128 v93 = v3;
  uint64_t v94 = *(_OWORD *)&v93[40];
  uint64_t ObjectType = swift_getObjectType();
  char v7 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)&v93[48] + 24LL);
  outlined retain of Locale((uint64_t)&v94);
  char v69 = ObjectType;
  char v70 = *(void *)&v93[48];
  v7(v72, ObjectType, *(void *)&v93[48]);
  outlined release of Locale((uint64_t)&v94);
  __int16 v8 = v72[0];
  outlined init with take of LocalePreferences?( (uint64_t)&v92 + 8,  (uint64_t)v95,  &demangling cache variable for type metadata for Date.FormatStyle.DateStyle?);
  outlined init with take of LocalePreferences?( (uint64_t)v95,  (uint64_t)&v108,  &demangling cache variable for type metadata for Date.FormatStyle.DateStyle?);
  uint64_t v9 = 0LL;
  __int16 v10 = 0LL;
  if ((v109 & 1) == 0)
  {
    uint64_t v11 = v108;
    __int128 v96 = *(_OWORD *)&v93[8];
    uint64_t v12 = *(void *)&v93[16];
    uint64_t v13 = swift_getObjectType();
    v72[0] = v11;
    uint64_t v14 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v12 + 496);
    outlined retain of Locale((uint64_t)&v96);
    uint64_t v9 = v14(v72, v13, v12);
    __int16 v10 = v15;
    outlined release of Locale((uint64_t)&v96);
  }

  uint64_t v97 = *(_OWORD *)&v93[8];
  char v16 = *(void **)&v93[16];
  uint64_t v17 = swift_getObjectType();
  int v18 = (uint64_t (*)(uint64_t, void *))v16[59];
  outlined retain of Locale((uint64_t)&v97);
  char v68 = v17;
  uint64_t v19 = v18(v17, v16);
  char v21 = v20;
  outlined release of Locale((uint64_t)&v97);
  outlined retain of Locale((uint64_t)&v94);
  v7(v72, v69, v70);
  outlined release of Locale((uint64_t)&v94);
  int v22 = v72[0];
  outlined init with take of LocalePreferences?( (uint64_t)v91,  (uint64_t)v99,  &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  outlined init with take of LocalePreferences?( (uint64_t)v99,  (uint64_t)v100,  &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  uint64_t v24 = v104;
  if ((v104 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    __int16 v25 = 0LL;
    __int128 v26 = 0LL;
    LOBYTE(v27) = 0;
    LOBYTE(v28) = 0;
    uint64_t v29 = 0LL;
    v23.i64[0] = 0x3000000050003LL;
    uint64_t v30 = 12;
    unint64_t v31 = -1;
    LOBYTE(v32) = 2;
    LOBYTE(v33) = 9;
    LOBYTE(v34) = 6;
    uint64_t v24 = 1;
    id v35 = 3;
    LOBYTE(v36) = 3;
    LOBYTE(v37) = 1;
  }

  else
  {
    unint64_t v32 = HIBYTE(v104);
    uint64_t v37 = HIWORD(v104);
    id v28 = v104 >> 40;
    unint64_t v33 = HIDWORD(v104);
    unint64_t v34 = v104 >> 24;
    __int128 v36 = v104 >> 16;
    uint64_t v27 = (v104 >> 8) & 1;
    id v35 = v100[0];
    __int16 v25 = v101;
    v23.i32[0] = v102;
    __int16 v23 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v23.i8);
    __int128 v26 = v103;
    uint64_t v29 = v105;
    unint64_t v31 = v106;
    uint64_t v30 = v107;
  }

  v72[0] = v19;
  v72[1] = v21;
  __int16 v73 = v22;
  int v74 = v35;
  int v75 = v25;
  int v76 = vmovn_s16(v23).u32[0];
  uint64_t v77 = v26;
  uint64_t v78 = v24;
  uint64_t v79 = v27;
  uint64_t v80 = v36;
  char v81 = v34;
  timespec v82 = v33;
  timespec v83 = v28;
  uint64_t v84 = v37;
  __int128 v85 = v32;
  __int128 v86 = v29;
  uint64_t v87 = v31;
  __int128 v88 = v30;
  __int128 v89 = v9;
  __int128 v90 = v10;
  unint64_t v38 = one-time initialization token for patternCache;
  swift_bridgeObjectRetain();
  if (v38 != -1) {
    swift_once();
  }
  unint64_t v39 = (uint64_t *)(static ICUDateFormatter.patternCache + 16);
  unint64_t v40 = (os_unfair_lock_s *)(static ICUDateFormatter.patternCache + 24);
  swift_retain();
  os_unfair_lock_lock(v40);
  closure #1 in ICUDateFormatter.DateFormatInfo.init(_:)(v39, v72, (uint64_t)v91, v9, v10, (uint64_t *)&v98);
  os_unfair_lock_unlock(v40);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease_n();
  id v41 = v98;
  v71[0] = v8;
  unint64_t v42 = (void (*)(__int128 *__return_ptr, _BYTE *, uint64_t, void *))v16[54];
  outlined retain of Locale((uint64_t)&v97);
  v42(&v98, v71, v68, v16);
  outlined release of Locale((uint64_t)&v97);
  unint64_t v43 = v98;
  char v66 = v8;
  if (v98 == 7)
  {
    id v44 = v70;
    unint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t))(v70 + 56);
    outlined retain of Locale((uint64_t)&v94);
    unint64_t v46 = v45(v69, v70);
    outlined release of Locale((uint64_t)&v94);
LABEL_15:
    uint64_t v52 = (uint64_t (*)(uint64_t, void *))v16[8];
    outlined retain of Locale((uint64_t)&v97);
    unint64_t v53 = v52(v68, v16);
    char v55 = v54;
    outlined release of Locale((uint64_t)&v97);
    Swift::tuple_String_OpaquePointer_optional v98 = *(_OWORD *)&v93[24];
    id v56 = *(void *)&v93[32];
    unint64_t v57 = swift_getObjectType();
    unint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t))(v56 + 32);
    outlined retain of Locale((uint64_t)&v98);
    id v59 = v58(v57, v56);
    unint64_t v61 = v60;
    outlined release of Locale((uint64_t)&v98);
    char v62 = *(uint64_t (**)(void, uint64_t))(v44 + 72);
    outlined retain of Locale((uint64_t)&v94);
    char v63 = v62(v41, v44);
    outlined release of Locale((uint64_t)&v94);
    uint64_t result = outlined release of Date.FormatStyle((uint64_t)v91);
    uint64_t v64 = v93[56];
    __int16 v65 = v93[57];
    *(void *)a2 = v53;
    *(void *)(a2 + 8) = v55;
    *(void *)(a2 + 16) = v59;
    *(void *)(a2 + 24) = v61;
    *(_BYTE *)(a2 + 32) = v66;
    *(void *)(a2 + 40) = v46;
    *(void *)(a2 + 48) = v63;
    *(_BYTE *)(a2 + 56) = v64;
    *(_OWORD *)(a2 + 64) = v41;
    *(_BYTE *)(a2 + 80) = v65;
    *(void *)(a2 + 88) = 0xC1CD27E440000000LL;
    return result;
  }

  if (one-time initialization token for weekdays != -1) {
    swift_once();
  }
  id v47 = static Locale.Weekday.weekdays;
  swift_bridgeObjectRetain();
  unint64_t v48 = specialized Collection<>.firstIndex(of:)(v43, (uint64_t)v47);
  __int16 v50 = v49;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v50 & 1) == 0)
  {
    unint64_t v46 = v48 + 1;
    if (!__OFADD__(v48, 1LL))
    {
      id v44 = v70;
      goto LABEL_15;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t ICUDateFormatter.DateFormatInfo.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v15)(uint64_t *__return_ptr, uint64_t, void *);
  uint64_t (*v16)(uint64_t, void *);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void *);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v3 = a1[1];
  __int128 v4 = (void *)a1[3];
  uint64_t v27 = a1[7];
  id v28 = a1[6];
  if (a1[4])
  {
    uint64_t v5 = a1[5];
    uint64_t ObjectType = swift_getObjectType();
    char v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
    swift_unknownObjectRetain();
    __int128 v26 = v7(ObjectType, v5);
    unint64_t v9 = v8;
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v26 = 0LL;
    unint64_t v9 = 0LL;
  }

  uint64_t v10 = swift_getObjectType();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 32);
  swift_unknownObjectRetain();
  uint64_t v12 = v11(v10, v3);
  uint64_t v24 = v13;
  __int16 v25 = v12;
  swift_unknownObjectRelease();
  uint64_t v14 = swift_getObjectType();
  char v15 = (void (*)(uint64_t *__return_ptr, uint64_t, void *))v4[3];
  swift_unknownObjectRetain();
  v15(&v29, v14, v4);
  swift_unknownObjectRelease();
  __int16 v23 = v29;
  char v16 = (uint64_t (*)(uint64_t, void *))v4[7];
  swift_unknownObjectRetain();
  uint64_t v17 = v16(v14, v4);
  swift_unknownObjectRelease();
  int v18 = (uint64_t (*)(uint64_t, void *))v4[9];
  swift_unknownObjectRetain();
  uint64_t v19 = v18(v14, v4);
  if (v9) {
    char v20 = v26;
  }
  else {
    char v20 = 0LL;
  }
  if (v9) {
    char v21 = v9;
  }
  else {
    char v21 = 0xE000000000000000LL;
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease_n();
  uint64_t result = swift_unknownObjectRelease();
  *(void *)a2 = v20;
  *(void *)(a2 + 8) = v21;
  *(void *)(a2 + 16) = v25;
  *(void *)(a2 + 24) = v24;
  *(_BYTE *)(a2 + 32) = v23;
  *(void *)(a2 + 40) = v17;
  *(void *)(a2 + 48) = v19;
  *(_BYTE *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = v28;
  *(void *)(a2 + 72) = v27;
  *(_BYTE *)(a2 + 80) = 1;
  *(void *)(a2 + 88) = 0xC1CD27E440000000LL;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  char v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v3 = a1[1];
  v24[0] = *a1;
  v24[1] = v3;
  Calendar.locale.getter(&v25);
  if (v25)
  {
    __int128 v4 = v26;
    uint64_t ObjectType = swift_getObjectType();
    __int16 v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
    char v7 = v6;
    swift_unknownObjectRelease();
  }

  else
  {
    __int16 v23 = 0LL;
    char v7 = 0LL;
  }

  unint64_t v8 = swift_getObjectType();
  unint64_t v9 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  v9(&v25, v8, v3);
  swift_unknownObjectRelease();
  uint64_t v10 = v26;
  uint64_t v11 = swift_getObjectType();
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v11, v10);
  uint64_t v14 = v13;
  swift_unknownObjectRelease();
  char v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 24);
  swift_unknownObjectRetain();
  v15(v24, v8, v3);
  swift_unknownObjectRelease();
  char v16 = v24[0];
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56);
  swift_unknownObjectRetain();
  int v18 = v17(v8, v3);
  swift_unknownObjectRelease();
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v8, v3);
  uint64_t result = swift_unknownObjectRelease();
  char v21 = v23;
  if (v7)
  {
    int v22 = v7;
  }

  else
  {
    char v21 = 0LL;
    int v22 = 0xE000000000000000LL;
  }

  *(void *)a2 = v21;
  *(void *)(a2 + 8) = v22;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v14;
  *(_BYTE *)(a2 + 32) = v16;
  *(void *)(a2 + 40) = v18;
  *(void *)(a2 + 48) = v19;
  *(_BYTE *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0xE000000000000000LL;
  *(_BYTE *)(a2 + 80) = 1;
  *(void *)(a2 + 88) = 0xC1CD27E440000000LL;
  return result;
}

uint64_t closure #1 in ICUDateFormatter.DateFormatInfo.init(_:)@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v13 = *a1;
  if (*(void *)(*a1 + 16))
  {
    outlined retain of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) != 0)
    {
      char v16 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v14);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      swift_bridgeObjectRetain();
      uint64_t result = outlined release of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
      *a6 = v18;
      a6[1] = v17;
      return result;
    }

    outlined release of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
  }

  outlined init with take of LocalePreferences?( a3,  (uint64_t)v105,  &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v137,  &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  char v21 = v141;
  uint64_t v145 = v6;
  Swift::tuple_String_OpaquePointer_optional v98 = a6;
  if ((v141 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    LOBYTE(v24) = 0;
    LOBYTE(v25) = 0;
    uint64_t v26 = 0LL;
    v20.i64[0] = 0x3000000050003LL;
    char v27 = 12;
    char v28 = -1;
    LOBYTE(v29) = 2;
    LOBYTE(v30) = 9;
    LOBYTE(v31) = 6;
    char v21 = 1;
    char v32 = 3;
    LOBYTE(v33) = 3;
    LOBYTE(v34) = 1;
  }

  else
  {
    unint64_t v29 = HIBYTE(v141);
    unint64_t v34 = HIWORD(v141);
    unint64_t v25 = v141 >> 40;
    unint64_t v30 = HIDWORD(v141);
    unint64_t v31 = v141 >> 24;
    unint64_t v33 = v141 >> 16;
    uint64_t v24 = (v141 >> 8) & 1;
    char v32 = v137[0];
    uint64_t v22 = v138;
    v20.i32[0] = v139;
    int16x8_t v20 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v20.i8);
    uint64_t v23 = v140;
    uint64_t v26 = v142;
    char v28 = v143;
    char v27 = v144;
  }

  v118[0] = v32;
  uint64_t v119 = v22;
  unsigned __int32 v120 = vmovn_s16(v20).u32[0];
  uint64_t v121 = v23;
  char v122 = v21;
  char v123 = v24;
  char v124 = v33;
  char v125 = v31;
  char v126 = v30;
  char v127 = v25;
  char v128 = v34;
  char v129 = v29;
  uint64_t v130 = v26;
  char v131 = v28;
  char v132 = v27;
  __int128 v133 = *(_OWORD *)(a3 + 72);
  __int128 v103 = *(_OWORD *)(a3 + 104);
  __int128 v104 = v133;
  __int128 v106 = *(_OWORD *)(a3 + 104);
  uint64_t v35 = specialized static ICUPatternGenerator.localizedPattern(symbols:locale:calendar:)( (uint64_t)v118,  (os_unfair_lock_s **)&v133,  (uint64_t)&v106);
  uint64_t v101 = v35;
  uint64_t v102 = v36;
  if (a5)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)&v133,  &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
    char v38 = v136;
    if ((v136 & 0xFF000000000000LL) == 0x3000000000000LL)
    {
      uint64_t v39 = 0LL;
      uint64_t v40 = 0LL;
      LOBYTE(v41) = 0;
      v37.i64[0] = 0x3000000050003LL;
      LOBYTE(v42) = 9;
      LOBYTE(v43) = 6;
      char v38 = 1;
      char v44 = 3;
      LOBYTE(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v43, v45) = 3;
    }

    else
    {
      unint64_t v42 = HIDWORD(v136);
      unint64_t v43 = v136 >> 24;
      unint64_t v45 = v136 >> 16;
      uint64_t v41 = (v136 >> 8) & 1;
      char v44 = v133;
      uint64_t v39 = *((void *)&v133 + 1);
      v37.i32[0] = v134;
      int16x8_t v37 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v37.i8);
      uint64_t v40 = v135;
    }

    LOBYTE(v106) = v44;
    *((void *)&v106 + 1) = v39;
    unsigned __int32 v107 = vmovn_s16(v37).u32[0];
    uint64_t v108 = v40;
    char v109 = v38;
    char v110 = v41;
    char v111 = v45;
    char v112 = v43;
    char v113 = v42;
    __int16 v114 = 526;
    char v115 = 2;
    uint64_t v116 = 0LL;
    __int16 v117 = 3327;
    __int128 v99 = v103;
    __int128 v100 = v104;
    *(void *)&__int128 v100 = specialized static ICUPatternGenerator.localizedPattern(symbols:locale:calendar:)( (uint64_t)&v106,  (os_unfair_lock_s **)&v100,  (uint64_t)&v99);
    *((void *)&v100 + 1) = v48;
    *(void *)&__int128 v99 = a4;
    *((void *)&v99 + 1) = a5;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    swift_bridgeObjectRelease();
    uint64_t v46 = v101;
    uint64_t v47 = v102;
  }

  else
  {
    uint64_t v46 = v35;
    uint64_t v47 = v36;
  }

  outlined retain of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&__int128 v100 = *a1;
  uint64_t v50 = v100;
  *a1 = 0x8000000000000000LL;
  unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v53 = *(void *)(v50 + 16);
  BOOL v54 = (v51 & 1) == 0;
  uint64_t v55 = v53 + v54;
  if (__OFADD__(v53, v54))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(a4) = v51;
    if (*(void *)(v50 + 24) < v55)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v55,  isUniquelyReferenced_nonNull_native);
      uint64_t v56 = v100;
      unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((a4 & 1) != (v58 & 1)) {
        goto LABEL_60;
      }
      unint64_t v52 = v57;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_21:
      id v59 = (uint64_t *)(*(void *)(v56 + 56) + 16 * v52);
      swift_bridgeObjectRelease();
      *id v59 = v46;
      v59[1] = v47;
LABEL_57:
      *a1 = v56;
      swift_bridgeObjectRelease();
      uint64_t result = outlined release of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
      uint64_t v93 = v102;
      *Swift::tuple_String_OpaquePointer_optional v98 = v101;
      v98[1] = v93;
      return result;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v56 = v50;
      if ((v51 & 1) != 0) {
        goto LABEL_21;
      }
LABEL_56:
      specialized _NativeDictionary._insert(at:key:value:)(v52, a2, v46, v47, (void *)v56);
      outlined retain of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
      goto LABEL_57;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.PatternCacheKey, String>);
  uint64_t v60 = static _DictionaryStorage.copy(original:)();
  uint64_t v56 = v60;
  if (!*(void *)(v50 + 16))
  {
LABEL_55:
    swift_bridgeObjectRelease();
    if ((a4 & 1) != 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }

  unint64_t v61 = (void *)(v60 + 64);
  unint64_t v62 = (unint64_t)((1LL << *(_BYTE *)(v56 + 32)) + 63) >> 6;
  int64_t v63 = 0LL;
  *(void *)(v56 + 16) = *(void *)(v50 + 16);
  uint64_t v64 = 1LL << *(_BYTE *)(v50 + 32);
  uint64_t v65 = -1LL;
  if (v64 < 64) {
    uint64_t v65 = ~(-1LL << v64);
  }
  unint64_t v66 = v65 & *(void *)(v50 + 64);
  uint64_t v94 = v50 + 64;
  int64_t v95 = (unint64_t)(v64 + 63) >> 6;
  while (1)
  {
    if (v66)
    {
      uint64_t v96 = (v66 - 1) & v66;
      int64_t v97 = v63;
      unint64_t v67 = __clz(__rbit64(v66)) | (v63 << 6);
      goto LABEL_31;
    }

    int64_t v89 = v63 + 1;
    if (__OFADD__(v63, 1LL))
    {
      __break(1u);
      goto LABEL_59;
    }

    if (v89 >= v95) {
      goto LABEL_55;
    }
    unint64_t v90 = *(void *)(v94 + 8 * v89);
    int64_t v91 = v63 + 1;
    if (!v90)
    {
      int64_t v91 = v63 + 2;
      if (v63 + 2 >= v95) {
        goto LABEL_55;
      }
      unint64_t v90 = *(void *)(v94 + 8 * v91);
      if (!v90)
      {
        int64_t v91 = v63 + 3;
        if (v63 + 3 >= v95) {
          goto LABEL_55;
        }
        unint64_t v90 = *(void *)(v94 + 8 * v91);
        if (!v90)
        {
          int64_t v91 = v63 + 4;
          if (v63 + 4 >= v95) {
            goto LABEL_55;
          }
          unint64_t v90 = *(void *)(v94 + 8 * v91);
          if (!v90)
          {
            int64_t v91 = v63 + 5;
            if (v63 + 5 >= v95) {
              goto LABEL_55;
            }
            unint64_t v90 = *(void *)(v94 + 8 * v91);
            if (!v90)
            {
              int64_t v91 = v63 + 6;
              if (v63 + 6 >= v95) {
                goto LABEL_55;
              }
              unint64_t v90 = *(void *)(v94 + 8 * v91);
              if (!v90)
              {
                int64_t v91 = v63 + 7;
                if (v63 + 7 >= v95) {
                  goto LABEL_55;
                }
                unint64_t v90 = *(void *)(v94 + 8 * v91);
                if (!v90) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)(uint64_t result)
{
  uint64_t v2 = *(void *)result;
  char v3 = *(_BYTE *)(result + 8);
  uint64_t v4 = *(void *)v1;
  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
  {
    if (*(_BYTE *)(result + 8))
    {
      __int16 v5 = v4 | v2;
      if ((v5 & 0x2000) != 0)
      {
        uint64_t v2 = 0LL;
        char v3 = 0;
      }

      else if ((v5 & 0x40) != 0)
      {
        char v3 = 1;
        uint64_t v2 = 64LL;
      }

      else
      {
        uint64_t v6 = v5 & 1;
        if ((v5 & 0x20) != 0)
        {
          uint64_t v2 = v6 | 0x20;
        }

        else if ((v5 & 0x10) != 0)
        {
          uint64_t v2 = v6 | 0x10;
        }

        else if ((v5 & 0x80) != 0)
        {
          uint64_t v2 = v6 | 0x80;
        }

        else if ((v5 & 8) != 0)
        {
          uint64_t v2 = v6 | 8;
        }

        else
        {
          uint64_t v2 = v5 & 0x1E07;
        }

        char v3 = 1;
      }
    }
  }

  else
  {
    if ((*(_BYTE *)(result + 8) & 1) != 0) {
      return result;
    }
    char v3 = 0;
    if (v2 >= v4) {
      uint64_t v2 = *(void *)v1;
    }
  }

  *(void *)uint64_t v1 = v2;
  *(_BYTE *)(v1 + 8) = v3;
  return result;
}

uint64_t one-time initialization function for updateScheduleCache(uint64_t a1)
{
  return one-time initialization function for patternCache( a1,  &demangling cache variable for type metadata for LockedState<[ICUDateFormatter.DateFormatInfo : ICUDateFormatter.DateFormatInfo.UpdateSchedule]>._Buffer,  &static ICUDateFormatter.DateFormatInfo.updateScheduleCache);
}

uint64_t one-time initialization function for patternCache(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x18961AFF0];
  *a3 = result;
  return result;
}

uint64_t closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v7 = *(_OWORD *)(a2 + 16);
  v90[0] = *(_OWORD *)a2;
  v90[1] = v7;
  __int128 v8 = *(_OWORD *)(a2 + 48);
  v90[2] = *(_OWORD *)(a2 + 32);
  v90[3] = v8;
  outlined retain of Date.VerbatimFormatStyle(a2);
  ICUDateFormatter.DateFormatInfo.init(_:)(v90, (uint64_t)v91);
  uint64_t v9 = *a1;
  if (*(void *)(*a1 + 16))
  {
    outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v91);
    if ((v11 & 1) != 0)
    {
      uint64_t v12 = *(void *)(v9 + 56) + 16 * v10;
      unint64_t v13 = *(void *)v12;
      LOBYTE(v14) = *(_BYTE *)(v12 + 8);
      outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
      uint64_t result = outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
      goto LABEL_89;
    }

    outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
  }

  uint64_t v85 = a1;
  uint64_t v84 = a3;
  uint64_t v16 = *(void *)(a2 + 48);
  unint64_t v17 = *(void *)(a2 + 56);
  uint64_t v18 = udat_toCalendarDateField();
  LODWORD(v86) = v18;
  *(void *)&v90[0] = 39LL;
  *((void *)&v90[0] + 1) = 0xE100000000000000LL;
  MEMORY[0x1895F8858](v18);
  v83[2] = v90;
  swift_bridgeObjectRetain();
  uint64_t v19 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)( 0x7FFFFFFFFFFFFFFFLL,  0,  partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:),  (uint64_t)v83,  v16,  v17);
  uint64_t v20 = specialized Sequence.filter(_:)(v19);
  swift_bridgeObjectRelease();
  uint64_t v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_Ss7elementtG_Sss5NeverOTg5166_sSS10FoundationE21purgingStringLiterals33_897C603A04DF76F04B69FE4D70F5F325LLSSyFSsSi6offset_Ss7elementt_tcfu_32f319bcf0ad9587a902b48655fa9ced40SiAD_SsAEtSsTf3nnnpk_nTf1cn_n(v20);
  swift_bridgeObjectRelease();
  *(void *)&v90[0] = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Substring]);
  LOBYTE(v22) = lazy protocol witness table accessor for type [Substring] and conformance [A]();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v23 = Sequence<>.joined(separator:)();
  unint64_t v25 = v24;
  swift_bridgeObjectRelease();
  uint64_t updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS9UTF16ViewV_So16UDateFormatFieldVs5NeverOTg5097_sSS10FoundationE14updateSchedule33_897C603A04DF76F04B69FE4D70F5F325LLAA16ICUDateFormatterC14Dateg22InfoV06UpdateC0OvgSo05f2P5H15Vs6UInt16VXEfU_Tf1cn_n( v23,  v25);
  v83[4] = v3;
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)(updated + 16);
  if (!v27)
  {
    unint64_t v14 = (void *)MEMORY[0x18961AFE8];
    goto LABEL_28;
  }

  swift_bridgeObjectRetain();
  uint64_t v28 = 0LL;
  unint64_t v14 = (void *)MEMORY[0x18961AFE8];
  uint64_t v22 = &demangling cache variable for type metadata for _ContiguousArrayStorage<UDateFormatField>;
  __int128 v87 = xmmword_183720D90;
  while (1)
  {
    int v29 = *(_DWORD *)(updated + 4 * v28 + 32);
    uint64_t v30 = v14[2];
    if (!v30 || (unint64_t v31 = v14[v30 + 3], (v32 = *(void *)(v31 + 16)) == 0) || *(_DWORD *)(v31 + 32) != v29)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UDateFormatField>);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = v87;
      *(_DWORD *)(v35 + 32) = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v14[2] + 1LL,  1,  v14);
      }
      unint64_t v37 = v14[2];
      unint64_t v36 = v14[3];
      if (v37 >= v36 >> 1) {
        unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v36 > 1),  v37 + 1,  1,  v14);
      }
      _OWORD v14[2] = v37 + 1;
      v14[v37 + 4] = v35;
      goto LABEL_8;
    }

    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v31 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v32 + 1,  1,  (char *)v31);
    }
    unint64_t v13 = *(void *)(v31 + 16);
    unint64_t v33 = *(void *)(v31 + 24);
    if (v13 >= v33 >> 1) {
      unint64_t v31 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v33 > 1),  v13 + 1,  1,  (char *)v31);
    }
    *(void *)(v31 + 16) = v13 + 1;
    *(_DWORD *)(v31 + 4 * v13 + 32) = v29;
    unint64_t v34 = v14[2];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      break;
    }
    if (!v34) {
      goto LABEL_25;
    }
LABEL_18:
    if (v34 > v14[2])
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }

    v14[v34 + 3] = v31;
    swift_bridgeObjectRelease();
LABEL_8:
    if (v27 == ++v28) {
      goto LABEL_26;
    }
  }

  unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
  if (v34) {
    goto LABEL_18;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  swift_bridgeObjectRelease();
LABEL_28:
  swift_bridgeObjectRelease();
  *(void *)&v90[0] = 0LL;
  BYTE8(v90[0]) = 1;
  uint64_t v38 = v14[2];
  if (v38)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = 0LL;
    int v40 = v86;
    do
    {
      uint64_t v22 = (uint64_t *)v14[v39 + 4];
      uint64_t v41 = v22[2];
      if (v41)
      {
        if (*((_DWORD *)v22 + 8) == 8)
        {
          uint64_t v42 = 9 - v41;
          *(void *)&v90[0] = v42;
          BYTE8(v90[0]) = 0;
        }

        else
        {
          swift_bridgeObjectRetain();
          unsigned int v43 = udat_toCalendarDateField();
          if (v43 != v40 && v43 <= 0x16 && ((0x4ABDFFu >> v43) & 1) != 0)
          {
            uint64_t v88 = qword_1837C2A38[v43];
            char v89 = 1;
            ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v88);
            int v40 = v86;
          }

          swift_bridgeObjectRelease();
        }
      }

      ++v39;
    }

    while (v38 != v39);
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  unint64_t v13 = *(void *)&v90[0];
  LOBYTE(v14) = BYTE8(v90[0]);
  char v44 = v85;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v90[0] = *v44;
  uint64_t v27 = *(void *)&v90[0];
  *char v44 = 0x8000000000000000LL;
  unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v91);
  uint64_t v47 = *(void *)(v27 + 16);
  BOOL v48 = (v46 & 1) == 0;
  uint64_t v49 = v47 + v48;
  if (__OFADD__(v47, v48)) {
    goto LABEL_53;
  }
  LOBYTE(v22) = v46;
  if (*(void *)(v27 + 24) < v49)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, isUniquelyReferenced_nonNull_native);
    uint64_t v50 = *(void *)&v90[0];
    unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v91);
    unint64_t v31 = v51;
    if ((v22 & 1) == 0)
    {
LABEL_87:
      specialized _NativeDictionary._insert(at:key:value:)(v31, v91, v13, (char)v14, (void *)v50);
      outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
LABEL_88:
      *char v44 = v50;
      swift_bridgeObjectRelease();
      uint64_t result = outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
      a3 = v84;
LABEL_89:
      *(void *)a3 = v13;
      *(_BYTE *)(a3 + 8) = (_BYTE)v14;
      return result;
    }

uint64_t closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)@<X0>( uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = v3;
  __int128 v8 = a2[5];
  __int128 v83 = a2[4];
  __int128 v84 = v8;
  v85[0] = a2[6];
  *(_OWORD *)((char *)v85 + 10) = *(__int128 *)((char *)a2 + 106);
  __int128 v9 = a2[1];
  __int128 v79 = *a2;
  __int128 v80 = v9;
  __int128 v10 = a2[3];
  __int128 v81 = a2[2];
  __int128 v82 = v10;
  outlined retain of Date.FormatStyle((uint64_t)a2);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v79, (uint64_t)v87);
  uint64_t v11 = *a1;
  if (*(void *)(*a1 + 16))
  {
    outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
    if ((v13 & 1) != 0)
    {
      uint64_t v14 = *(void *)(v11 + 56) + 16 * v12;
      uint64_t v15 = *(void *)v14;
      char v16 = *(_BYTE *)(v14 + 8);
      outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
      uint64_t result = outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
LABEL_52:
      *(void *)a3 = v15;
      *(_BYTE *)(a3 + 8) = v16;
      return result;
    }

    outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
  }

  outlined init with take of LocalePreferences?( (uint64_t)a2,  (uint64_t)v86,  &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  outlined init with take of LocalePreferences?( (uint64_t)v86,  (uint64_t)&v79,  &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  char v19 = v81;
  uint64_t v103 = v3;
  if ((v81 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    LOBYTE(v26) = 0;
    LOBYTE(v22) = 0;
    uint64_t v30 = 0LL;
    v18.i64[0] = 0x3000000050003LL;
    char v32 = 12;
    char v31 = -1;
    LOBYTE(v20) = 2;
    LOBYTE(v23) = 9;
    LOBYTE(v24) = 6;
    char v19 = 1;
    char v27 = 3;
    LOBYTE(v25) = 3;
    LOBYTE(v21) = 1;
  }

  else
  {
    unint64_t v20 = BYTE7(v81);
    unint64_t v21 = WORD3(v81);
    unint64_t v22 = (unint64_t)v81 >> 40;
    unint64_t v23 = DWORD1(v81);
    unint64_t v24 = (unint64_t)v81 >> 24;
    unint64_t v25 = (unint64_t)v81 >> 16;
    unint64_t v26 = ((unint64_t)v81 >> 8) & 1;
    char v27 = v79;
    uint64_t v28 = *((void *)&v79 + 1);
    v18.i32[0] = v80;
    int16x8_t v18 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v18.i8);
    uint64_t v29 = *((void *)&v80 + 1);
    uint64_t v30 = *((void *)&v81 + 1);
    char v31 = v82;
    char v32 = BYTE1(v82);
  }

  char v88 = v27;
  uint64_t v89 = v28;
  unsigned __int32 v90 = vmovn_s16(v18).u32[0];
  uint64_t v91 = v29;
  char v92 = v19;
  char v93 = v26;
  char v94 = v25;
  char v95 = v24;
  char v96 = v23;
  char v97 = v22;
  char v98 = v21;
  char v99 = v20;
  uint64_t v100 = v30;
  char v101 = v31;
  char v102 = v32;
  Date.FormatStyle.DateFieldCollection.updateSchedule.getter((uint64_t)&v77);
  uint64_t v15 = v77;
  char v16 = v78;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v77 = *a1;
  uint64_t v34 = v77;
  *a1 = 0x8000000000000000LL;
  unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
  uint64_t v37 = *(void *)(v34 + 16);
  BOOL v38 = (v35 & 1) == 0;
  uint64_t v39 = v37 + v38;
  if (__OFADD__(v37, v38))
  {
    __break(1u);
  }

  else
  {
    char v4 = v35;
    if (*(void *)(v34 + 24) < v39)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v39,  isUniquelyReferenced_nonNull_native);
      uint64_t v40 = v77;
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
      if ((v4 & 1) != (v42 & 1)) {
        goto LABEL_55;
      }
      unint64_t v36 = v41;
      if ((v4 & 1) == 0) {
        goto LABEL_50;
      }
LABEL_15:
      uint64_t v43 = *(void *)(v40 + 56) + 16 * v36;
      *(void *)uint64_t v43 = v15;
      *(_BYTE *)(v43 + 8) = v16;
LABEL_51:
      *a1 = v40;
      swift_bridgeObjectRelease();
      uint64_t result = outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
      goto LABEL_52;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v40 = v34;
      if ((v35 & 1) != 0) {
        goto LABEL_15;
      }
LABEL_50:
      specialized _NativeDictionary._insert(at:key:value:)(v36, v87, v15, v16, (void *)v40);
      outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
      goto LABEL_51;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter.DateFormatInfo.UpdateSchedule>);
  uint64_t v44 = static _DictionaryStorage.copy(original:)();
  uint64_t v40 = v44;
  if (!*(void *)(v34 + 16))
  {
LABEL_49:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }

  unint64_t v45 = (void *)(v44 + 64);
  unint64_t v46 = (unint64_t)((1LL << *(_BYTE *)(v40 + 32)) + 63) >> 6;
  int64_t v47 = 0LL;
  *(void *)(v40 + 16) = *(void *)(v34 + 16);
  uint64_t v48 = 1LL << *(_BYTE *)(v34 + 32);
  uint64_t v49 = -1LL;
  if (v48 < 64) {
    uint64_t v49 = ~(-1LL << v48);
  }
  unint64_t v50 = v49 & *(void *)(v34 + 64);
  uint64_t v73 = v34 + 64;
  int64_t v74 = (unint64_t)(v48 + 63) >> 6;
  while (1)
  {
    if (v50)
    {
      uint64_t v75 = (v50 - 1) & v50;
      int64_t v76 = v47;
      unint64_t v51 = __clz(__rbit64(v50)) | (v47 << 6);
      goto LABEL_25;
    }

    int64_t v69 = v47 + 1;
    if (__OFADD__(v47, 1LL))
    {
      __break(1u);
      goto LABEL_54;
    }

    if (v69 >= v74) {
      goto LABEL_49;
    }
    unint64_t v70 = *(void *)(v73 + 8 * v69);
    int64_t v71 = v47 + 1;
    if (!v70)
    {
      int64_t v71 = v47 + 2;
      if (v47 + 2 >= v74) {
        goto LABEL_49;
      }
      unint64_t v70 = *(void *)(v73 + 8 * v71);
      if (!v70)
      {
        int64_t v71 = v47 + 3;
        if (v47 + 3 >= v74) {
          goto LABEL_49;
        }
        unint64_t v70 = *(void *)(v73 + 8 * v71);
        if (!v70)
        {
          int64_t v71 = v47 + 4;
          if (v47 + 4 >= v74) {
            goto LABEL_49;
          }
          unint64_t v70 = *(void *)(v73 + 8 * v71);
          if (!v70)
          {
            int64_t v71 = v47 + 5;
            if (v47 + 5 >= v74) {
              goto LABEL_49;
            }
            unint64_t v70 = *(void *)(v73 + 8 * v71);
            if (!v70)
            {
              int64_t v71 = v47 + 6;
              if (v47 + 6 >= v74) {
                goto LABEL_49;
              }
              unint64_t v70 = *(void *)(v73 + 8 * v71);
              if (!v70)
              {
                int64_t v71 = v47 + 7;
                if (v47 + 7 >= v74) {
                  goto LABEL_49;
                }
                unint64_t v70 = *(void *)(v73 + 8 * v71);
                if (!v70) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t Date.FormatStyle.DateFieldCollection.updateSchedule.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(unsigned __int8 *)(v1 + 48);
  if (v3 == 255)
  {
    outlined init with take of LocalePreferences?( v1 + 39,  (uint64_t)&v13,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
    uint64_t result = outlined init with take of LocalePreferences?( (uint64_t)&v13,  (uint64_t)&v14,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
    if (v14 == 2)
    {
      outlined init with take of LocalePreferences?( v1,  (uint64_t)&v12,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
      outlined init with take of LocalePreferences?( (uint64_t)&v12,  (uint64_t)&v15,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
      if (v15 != 3)
      {
        uint64_t v22 = 1LL;
        char v23 = 1;
        ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v22);
      }

      outlined init with take of LocalePreferences?( v1 + 8,  (uint64_t)v11,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
      outlined init with take of LocalePreferences?( (uint64_t)v11,  (uint64_t)&v16,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
      if (v17 != 255)
      {
        outlined init with take of Date.FormatStyle.Symbol.SymbolType.YearOption(&v16, (uint64_t)v18);
        uint64_t v22 = 2LL;
        char v23 = 1;
        ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v22);
      }

      outlined init with take of LocalePreferences?( v1 + 17,  (uint64_t)&v10,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
      outlined init with take of LocalePreferences?( (uint64_t)&v10,  (uint64_t)&v19,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
      if (v19 != 5)
      {
        uint64_t v22 = 512LL;
        char v23 = 1;
        ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v22);
      }

      outlined init with take of LocalePreferences?( v1 + 18,  (uint64_t)&v9,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
      outlined init with take of LocalePreferences?( (uint64_t)&v9,  (uint64_t)&v20,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
      if (v20 != 5)
      {
        uint64_t v22 = 4LL;
        char v23 = 1;
        ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v22);
      }

      outlined init with take of LocalePreferences?( v1 + 19,  (uint64_t)&v8,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
      outlined init with take of LocalePreferences?( (uint64_t)&v8,  (uint64_t)&v21,  &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
      __asm { BR              X10 }
    }

    goto LABEL_16;
  }

  if ((v3 & 1) != 0)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v5 = *(void *)(v1 + 40);
    BOOL v6 = __OFSUB__(9LL, v5);
    uint64_t v7 = 9 - v5;
    if (v6)
    {
      __break(1u);
LABEL_16:
      *(void *)a1 = 64LL;
      *(_BYTE *)(a1 + 8) = 1;
      return result;
    }
  }

  *(void *)a1 = v7;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t outlined consume of Set<Calendar.Component>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of Date.VerbatimFormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of ICUDateFormatter.DateFormatInfo(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ICUDateFormatter.DateFormatInfo(uint64_t a1)
{
  return a1;
}

BOOL specialized static ICUDateFormatter.DateFormatInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 48);
  int v24 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 72);
  uint64_t v23 = *(void *)(a1 + 64);
  double v6 = *(double *)(a1 + 88);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  int v9 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  int v12 = *(unsigned __int8 *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 72);
  uint64_t v21 = *(void *)(a2 + 64);
  int v18 = *(unsigned __int8 *)(a2 + 80);
  int v19 = *(unsigned __int8 *)(a1 + 80);
  double v13 = *(double *)(a2 + 88);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0LL, (v14 & 1) != 0))
  {
    if (v2 == v7 && v3 == v8)
    {
      BOOL result = 0LL;
    }

    else
    {
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL result = 0LL;
      if ((v16 & 1) == 0) {
        return result;
      }
    }

    if (v4 == v9 && v5 == v11 && v25 == v10 && v24 == v12)
    {
      if (v23 == v21 && v22 == v20)
      {
        if (v19 != v18) {
          return 0LL;
        }
        return v6 == v13;
      }

      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL result = 0LL;
      if ((v17 & 1) != 0 && ((v19 ^ v18) & 1) == 0) {
        return v6 == v13;
      }
    }
  }

  return result;
}

BOOL specialized static ICUDateFormatter.PatternCacheKey.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  int v6 = *((unsigned __int8 *)a1 + 16);
  __int128 v7 = *(_OWORD *)(a1 + 5);
  v20[0] = *(_OWORD *)(a1 + 3);
  v20[1] = v7;
  _OWORD v20[2] = *(_OWORD *)(a1 + 7);
  __int16 v21 = *((_WORD *)a1 + 36);
  uint64_t v8 = a1[10];
  uint64_t v9 = a1[11];
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  int v12 = *((unsigned __int8 *)a2 + 16);
  __int128 v13 = *(_OWORD *)(a2 + 3);
  __int128 v14 = *(_OWORD *)(a2 + 5);
  __int128 v15 = *(_OWORD *)(a2 + 7);
  __int16 v23 = *((_WORD *)a2 + 36);
  v22[1] = v14;
  _OWORD v22[2] = v15;
  v22[0] = v13;
  uint64_t v17 = a2[10];
  uint64_t v16 = a2[11];
  if (v4 == v10 && v5 == v11)
  {
    if (v6 != v12) {
      return 0LL;
    }
LABEL_7:
    if (specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)( (unsigned __int8 *)v20,  (unsigned __int8 *)v22))
    {
      if (v9) {
        return v16 && (v8 == v17 && v9 == v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
      }
      if (!v16) {
        return 1LL;
      }
    }

    return 0LL;
  }

  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0LL;
  if ((v18 & 1) != 0 && v6 == v12) {
    goto LABEL_7;
  }
  return result;
}

uint64_t specialized static ICUDateFormatter.cachedFormatter(for:)(uint64_t a1)
{
  uint64_t v118 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)a1;
  uint64_t v83 = *(void *)(a1 + 8);
  unint64_t v85 = *(void *)(a1 + 24);
  __int128 v87 = *(void **)(a1 + 16);
  char v84 = *(_BYTE *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  char v4 = *(_BYTE *)(a1 + 56);
  unint64_t v5 = *(void *)(a1 + 72);
  uint64_t v89 = *(void *)(a1 + 64);
  char v6 = *(_BYTE *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  if (one-time initialization token for formatterCache != -1) {
    swift_once();
  }
  uint64_t v8 = unk_18C5D62B0;
  uint64_t v79 = static ICUDateFormatter.formatterCache;
  uint64_t v9 = unk_18C5D62B0 + 16LL;
  uint64_t v10 = (os_unfair_lock_s *)(unk_18C5D62B0 + 24LL);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  *(void *)&__src[0] = v1;
  *((void *)&__src[0] + 1) = v83;
  *(void *)&__src[1] = v87;
  *((void *)&__src[1] + 1) = v85;
  LOBYTE(__src[2]) = v84;
  *((void *)&__src[2] + 1) = v2;
  *(void *)&__src[3] = v3;
  char v80 = v4;
  BYTE8(__src[3]) = v4;
  *(void *)&__src[4] = v89;
  *((void *)&__src[4] + 1) = v5;
  LOBYTE(__src[5]) = v6;
  *((void *)&__src[5] + 1) = v7;
  __int128 v82 = (__int128 *)v9;
  uint64_t v11 = specialized closure #1 in FormatterCache.formatter(for:creator:)(v9, (double *)__src);
  __int128 v81 = v10;
  os_unfair_lock_unlock(v10);
  swift_release();
  if (v11 != 1) {
    goto LABEL_74;
  }
  uint64_t v78 = v8;
  uint64_t v74 = v3;
  uint64_t v76 = v2;
  int v12 = &v95;
  type metadata accessor for ICUDateFormatter();
  char v77 = v6;
  uint64_t v75 = swift_allocObject();
  *(_BYTE *)(v75 + 24) = v6;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v72 = v1;
  Locale.Components.init(identifier:)(v1, v83, &v95);
  __src[0] = v95;
  __src[1] = v96;
  __src[2] = v97;
  __src[3] = v98;
  __src[4] = v99;
  __src[5] = v100;
  LOBYTE(__src[6]) = v84;
  *(_OWORD *)((char *)&__src[6] + 8) = v101;
  *(_OWORD *)((char *)&__src[7] + 8) = v102;
  *(_OWORD *)((char *)&__src[8] + 8) = v103;
  *(_OWORD *)((char *)&__src[9] + 8) = v104;
  *(_OWORD *)((char *)&__src[10] + 8) = v105;
  *(_OWORD *)((char *)&__src[11] + 8) = v106;
  WORD4(__src[12]) = v107;
  __src[13] = v108;
  __src[14] = v109;
  __src[15] = v110;
  __src[16] = v111;
  __src[17] = v112;
  __src[18] = v113;
  __src[19] = v114;
  __src[20] = v115;
  __src[21] = v116;
  memcpy(__dst, __src, sizeof(__dst));
  Locale.Components.icuIdentifier.getter();
  uint64_t v14 = v13;
  outlined release of Locale.Components((uint64_t *)__src);
  swift_bridgeObjectRelease();
  __int128 v15 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v87, v85);
  swift_bridgeObjectRelease();
  uint64_t v16 = specialized _copyCollectionToContiguousArray<A>(_:)(v89, v5);
  unint64_t v73 = v5;
  swift_bridgeObjectRelease();
  LOBYTE(v93) = 0;
  if (v15[2] >> 31)
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v16[2] >> 31)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v17 = udat_open();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v25 = v10;
  int v12 = v82;
  unint64_t v27 = v5;
  uint64_t v26 = v74;
  uint64_t v1 = v78;
  uint64_t v11 = v75;
  if (!v17) {
    goto LABEL_15;
  }
  *(void *)(v75 + 16) = v17;
  udat_setContext();
  specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
  uint64_t v16 = (void *)v76;
  udat_setLenient();
  if ((v77 & 1) == 0)
  {
    udat_setBooleanAttribute();
    specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
    udat_setBooleanAttribute();
    specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
    udat_setBooleanAttribute();
    specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
    udat_setBooleanAttribute();
    specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
  }

  udat_getCalendar();
  uint64_t v28 = ucal_clone();
  if (!specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR) || !v28) {
    goto LABEL_24;
  }
  MEMORY[0x186E21148](v28);
  if (v76 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_76;
  }

  if (v76 > 0x7FFFFFFF)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }

  ucal_setAttribute();
  if (v74 < (uint64_t)0xFFFFFFFF80000000LL)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
  }

  if (v74 > 0x7FFFFFFF) {
    goto LABEL_78;
  }
  ucal_setAttribute();
  ucal_setMillis();
  ucal_get();
  ucal_setDateTime();
  ucal_getMillis();
  udat_set2DigitYearStart();
  udat_setCalendar();
LABEL_24:
  ucal_close();
  while (1)
  {
    swift_retain();
    os_unfair_lock_lock(v25);
    uint64_t v14 = *(void *)(v1 + 16);
    if (v79 >= *(void *)(v14 + 16)) {
      swift_bridgeObjectRetain();
    }
    else {
      *(void *)int v12 = MEMORY[0x18961AFF0];
    }
    *(void *)&__int128 v95 = v72;
    *((void *)&v95 + 1) = v83;
    *(void *)&__int128 v96 = v87;
    *((void *)&v96 + 1) = v85;
    LOBYTE(v97) = v84;
    *(_DWORD *)((char *)&v97 + 1) = 0;
    DWORD1(v97) = v93;
    *((void *)&v97 + 1) = v16;
    *(void *)&__int128 v98 = v26;
    BYTE8(v98) = v80;
    *(_DWORD *)((char *)&v98 + 9) = *(_DWORD *)v92;
    HIDWORD(v98) = *(_DWORD *)&v92[3];
    *(void *)&__int128 v99 = v89;
    *((void *)&v99 + 1) = v27;
    LOBYTE(v100) = v77;
    *(_DWORD *)((char *)&v100 + 1) = *(_DWORD *)v91;
    DWORD1(v100) = *(_DWORD *)&v91[3];
    *((void *)&v100 + 1) = v7;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    __dst[0] = *(void *)v12;
    uint64_t v30 = __dst[0];
    *(void *)int v12 = 0x8000000000000000LL;
    unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)((double *)&v95);
    uint64_t v33 = *(void *)(v30 + 16);
    BOOL v34 = (v31 & 1) == 0;
    uint64_t v35 = v33 + v34;
    if (!__OFADD__(v33, v34)) {
      break;
    }
LABEL_38:
    __break(1u);
    swift_once();
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static ICUError.logger);
    int v19 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(void *)&__int128 v95 = v22;
      *(_DWORD *)uint64_t v21 = 136315394;
      __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD000000000000011LL,  0x80000001839CE300LL,  (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2080;
      __int16 v23 = ICUError.debugDescription.getter((UErrorCode)v16);
      __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v23, v24, (uint64_t *)&v95);
      uint64_t v1 = v78;
      int v12 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_182EB1000, v19, v20, "%s. Error: %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186E20E60](v22, -1LL, -1LL);
      MEMORY[0x186E20E60](v21, -1LL, -1LL);
    }

    uint64_t v25 = v81;
    unint64_t v27 = v73;
    uint64_t v26 = v74;
    if (v14) {
      udat_close();
    }
LABEL_15:
    swift_deallocPartialClassInstance();
    uint64_t v11 = 0LL;
    uint64_t v16 = (void *)v76;
  }

  char v36 = v31;
  if (*(void *)(v30 + 24) < v35)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, isUniquelyReferenced_nonNull_native);
    uint64_t v37 = __dst[0];
    unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)((double *)&v95);
    if ((v36 & 1) != (v39 & 1)) {
      goto LABEL_81;
    }
    unint64_t v32 = v38;
    if ((v36 & 1) == 0) {
      goto LABEL_72;
    }
LABEL_35:
    uint64_t v40 = *(void *)(v37 + 56);
    swift_release();
    *(void *)(v40 + 8 * v32) = v11;
LABEL_73:
    *(void *)(v1 + 16) = v37;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v25);
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of ICUDateIntervalFormatter??(1LL);
LABEL_74:
    swift_release();
    return v11;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    uint64_t v37 = v30;
    if ((v31 & 1) != 0) {
      goto LABEL_35;
    }
LABEL_72:
    specialized _NativeDictionary._insert(at:key:value:)(v32, &v95, v11, (void *)v37);
    outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)&v95);
    goto LABEL_73;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter?>);
  uint64_t v41 = static _DictionaryStorage.copy(original:)();
  uint64_t v37 = v41;
  if (!*(void *)(v30 + 16))
  {
LABEL_71:
    swift_bridgeObjectRelease();
    if ((v36 & 1) != 0) {
      goto LABEL_35;
    }
    goto LABEL_72;
  }

  char v42 = (char *)(v41 + 64);
  char v88 = (char *)(v30 + 64);
  unint64_t v43 = (unint64_t)((1LL << *(_BYTE *)(v37 + 32)) + 63) >> 6;
  if (v37 != v30 || v42 >= &v88[8 * v43]) {
    memmove(v42, v88, 8 * v43);
  }
  int64_t v44 = 0LL;
  *(void *)(v37 + 16) = *(void *)(v30 + 16);
  uint64_t v45 = 1LL << *(_BYTE *)(v30 + 32);
  uint64_t v46 = -1LL;
  if (v45 < 64) {
    uint64_t v46 = ~(-1LL << v45);
  }
  unint64_t v47 = v46 & *(void *)(v30 + 64);
  int64_t v86 = (unint64_t)(v45 + 63) >> 6;
  while (1)
  {
    uint64_t v25 = v81;
    uint64_t v1 = v78;
    if (v47)
    {
      uint64_t v90 = (v47 - 1) & v47;
      int64_t v48 = v44;
      unint64_t v49 = __clz(__rbit64(v47)) | (v44 << 6);
      goto LABEL_47;
    }

    int64_t v65 = v44 + 1;
    if (__OFADD__(v44, 1LL))
    {
      __break(1u);
      goto LABEL_80;
    }

    if (v65 >= v86) {
      goto LABEL_71;
    }
    unint64_t v66 = *(void *)&v88[8 * v65];
    int64_t v67 = v44 + 1;
    if (!v66)
    {
      int64_t v67 = v65 + 1;
      if (v65 + 1 >= v86) {
        goto LABEL_71;
      }
      unint64_t v66 = *(void *)&v88[8 * v67];
      if (!v66)
      {
        int64_t v67 = v65 + 2;
        if (v65 + 2 >= v86) {
          goto LABEL_71;
        }
        unint64_t v66 = *(void *)&v88[8 * v67];
        if (!v66)
        {
          int64_t v67 = v65 + 3;
          if (v65 + 3 >= v86) {
            goto LABEL_71;
          }
          unint64_t v66 = *(void *)&v88[8 * v67];
          if (!v66)
          {
            int64_t v67 = v65 + 4;
            if (v65 + 4 >= v86) {
              goto LABEL_71;
            }
            unint64_t v66 = *(void *)&v88[8 * v67];
            if (!v66)
            {
              int64_t v67 = v65 + 5;
              if (v65 + 5 >= v86) {
                goto LABEL_71;
              }
              unint64_t v66 = *(void *)&v88[8 * v67];
              if (!v66)
              {
                int64_t v67 = v65 + 6;
                if (v65 + 6 >= v86) {
                  goto LABEL_71;
                }
                unint64_t v66 = *(void *)&v88[8 * v67];
                if (!v66) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t specialized Sequence.filter(_:)(uint64_t result)
{
  unint64_t v1 = 0LL;
  uint64_t v2 = result + 16;
  unint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = MEMORY[0x18961AFE8];
LABEL_2:
  if (v1 <= v3) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = v1;
  }
  char v6 = (uint64_t *)(v2 + 32 * v1);
  unint64_t v7 = v1 - 1;
  uint64_t v8 = -(uint64_t)v5;
  while (1)
  {
    if (v7 - v3 == -1LL) {
      return v4;
    }
    if (v8 + v7 == -1LL) {
      break;
    }
    char v9 = v7 + 2;
    v6 += 4;
    ++v7;
    if ((v9 & 1) != 0)
    {
      uint64_t v15 = *(v6 - 1);
      uint64_t v16 = *(v6 - 2);
      uint64_t v10 = v6[1];
      uint64_t v14 = *v6;
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v4 + 16) + 1LL,  1);
      }
      unint64_t v12 = *(void *)(v4 + 16);
      unint64_t v11 = *(void *)(v4 + 24);
      if (v12 >= v11 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v11 > 1,  v12 + 1,  1);
      }
      unint64_t v1 = v7 + 1;
      *(void *)(v4 + 16) = v12 + 1;
      uint64_t v13 = (void *)(v4 + 40 * v12);
      void v13[4] = v7;
      v13[5] = v16;
      _OWORD v13[6] = v15;
      v13[7] = v14;
      v13[8] = v10;
      goto LABEL_2;
    }
  }

  __break(1u);
  return result;
}

uint64_t outlined init with take of Date.FormatStyle.Symbol.SymbolType.YearOption(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of ICUDateFormatter.PatternCacheKey(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ICUDateFormatter.PatternCacheKey(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ICUDateFormatter.PatternCacheKey()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ICUDateFormatter.PatternCacheKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ICUDateFormatter.PatternCacheKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  uint64_t v5 = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  *(_BYTE *)(a1 + 62) = *(_BYTE *)(a2 + 62);
  *(_BYTE *)(a1 + 63) = *(_BYTE *)(a2 + 63);
  uint64_t v6 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ICUDateFormatter.PatternCacheKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 58) = *(_DWORD *)(a2 + 58);
  *(_WORD *)(a1 + 62) = *(_WORD *)(a2 + 62);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ICUDateFormatter.PatternCacheKey()
{
  return &type metadata for ICUDateFormatter.PatternCacheKey;
}

ValueMetadata *type metadata accessor for ICUDateFormatter.AttributePosition()
{
  return &type metadata for ICUDateFormatter.AttributePosition;
}

ValueMetadata *type metadata accessor for ICUDateFormatter.DateFormatInfo.UpdateSchedule()
{
  return &type metadata for ICUDateFormatter.DateFormatInfo.UpdateSchedule;
}

uint64_t destroy for ICUDateFormatter.DateFormatInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ICUDateFormatter.DateFormatInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ICUDateFormatter.DateFormatInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for ICUDateFormatter.DateFormatInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUDateFormatter.PatternCacheKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUDateFormatter.PatternCacheKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ICUDateFormatter.DateFormatInfo()
{
  return &type metadata for ICUDateFormatter.DateFormatInfo;
}

unint64_t lazy protocol witness table accessor for type ICUDateFormatter.DateFormatInfo and conformance ICUDateFormatter.DateFormatInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUDateFormatter.DateFormatInfo and conformance ICUDateFormatter.DateFormatInfo;
  if (!lazy protocol witness table cache variable for type ICUDateFormatter.DateFormatInfo and conformance ICUDateFormatter.DateFormatInfo)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICUDateFormatter.DateFormatInfo,  &type metadata for ICUDateFormatter.DateFormatInfo);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICUDateFormatter.DateFormatInfo and conformance ICUDateFormatter.DateFormatInfo);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ICUDateFormatter.PatternCacheKey and conformance ICUDateFormatter.PatternCacheKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUDateFormatter.PatternCacheKey and conformance ICUDateFormatter.PatternCacheKey;
  if (!lazy protocol witness table cache variable for type ICUDateFormatter.PatternCacheKey and conformance ICUDateFormatter.PatternCacheKey)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICUDateFormatter.PatternCacheKey,  &type metadata for ICUDateFormatter.PatternCacheKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICUDateFormatter.PatternCacheKey and conformance ICUDateFormatter.PatternCacheKey);
  }

  return result;
}

Swift::Void __swiftcall logFileIOErrno(_:at:)(Swift::Int32 _, Swift::String at)
{
  unint64_t object = at._object;
  uint64_t countAndFlagsBits = at._countAndFlagsBits;
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  unint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!strerror(_))
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v8 = String.init(cString:)();
  unint64_t v10 = v9;
  if (!(id)_NSOSLog())
  {
LABEL_8:
    __break(1u);
    return;
  }

  Logger.init(_:)();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  unint64_t v11 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    HIDWORD(v16) = _;
    uint64_t v15 = v14;
    uint64_t v21 = v14;
    *(_DWORD *)uint64_t v13 = 136315650;
    uint64_t v17 = v8;
    swift_bridgeObjectRetain();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v21);
    uint64_t v18 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12) = 1024;
    LODWORD(v20) = HIDWORD(v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 18) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v10, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_182EB1000, v11, v12, "Encountered %s failure %d %s", (uint8_t *)v13, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x186E20E60](v15, -1LL, -1LL);
    MEMORY[0x186E20E60](v13, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v19);
  }

  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v19);
  }

id Notification.name.getter()
{
  return *v0;
}

void Notification.name.setter(void *a1)
{
  *unint64_t v1 = a1;
}

uint64_t (*Notification.name.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Notification.object.setter(uint64_t a1)
{
  return outlined assign with take of Any?(a1, v1 + 8);
}

uint64_t (*Notification.object.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Notification.userInfo.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Notification.userInfo.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Notification.init(name:object:userInfo:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 40) = 0LL;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)a4 = a1;
  outlined assign with take of Any?(a2, a4 + 8);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a4 + 40) = a3;
  return result;
}

void Notification.hash(into:)(__int128 *a1)
{
  uint64_t v3 = *(void **)v1;
  static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v1);
  id v4 = v3;
  String.hash(into:)();

  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v1 + 40);
  if (!v5)
  {
    Swift::UInt v10 = 0LL;
    goto LABEL_30;
  }

  uint64_t v21 = v5 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(v5 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v10 = 0LL;
  int64_t v11 = 0LL;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v16 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v17 = v16 | (v11 << 6);
  while (2)
  {
    outlined init with copy of AnyHashable(*(void *)(v5 + 48) + 40 * v17, (uint64_t)&v24);
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v17, (uint64_t)&v26 + 8);
    while (1)
    {
      outlined init with take of LocalePreferences?( (uint64_t)&v24,  (uint64_t)&v29,  &demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
      if (!*((void *)&v30 + 1))
      {
        swift_release();
LABEL_30:
        Hasher._combine(_:)(v10);
        return;
      }

      v22[0] = v29;
      v22[1] = v30;
      uint64_t v23 = v31;
      uint64_t v12 = *((void *)a1 + 8);
      __int128 v13 = a1[1];
      __int128 v24 = *a1;
      __int128 v25 = v13;
      __int128 v14 = a1[3];
      __int128 v26 = a1[2];
      __int128 v27 = v14;
      uint64_t v28 = v12;
      AnyHashable.hash(into:)();
      v32[4] = v26;
      v32[5] = v27;
      uint64_t v33 = v28;
      _OWORD v32[2] = v24;
      v32[3] = v25;
      Swift::Int v15 = Hasher.finalize()();
      outlined destroy of AnyHashable((uint64_t)v22);
      v10 ^= v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      if (v8) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v18 = v11 + 1;
      if (__OFADD__(v11, 1LL))
      {
        __break(1u);
        goto LABEL_32;
      }

      if (v18 < v9)
      {
        unint64_t v19 = *(void *)(v21 + 8 * v18);
        if (v19) {
          goto LABEL_12;
        }
        int64_t v20 = v11 + 2;
        ++v11;
        if (v18 + 1 < v9)
        {
          unint64_t v19 = *(void *)(v21 + 8 * v20);
          if (v19) {
            goto LABEL_15;
          }
          int64_t v11 = v18 + 1;
          if (v18 + 2 < v9)
          {
            unint64_t v19 = *(void *)(v21 + 8 * (v18 + 2));
            if (v19)
            {
              v18 += 2LL;
              goto LABEL_12;
            }

            int64_t v20 = v18 + 3;
            int64_t v11 = v18 + 2;
            if (v18 + 3 < v9) {
              break;
            }
          }
        }
      }

uint64_t Notification.debugDescription.getter()
{
  v7[0] = 0LL;
  v7[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(37LL);
  swift_bridgeObjectRelease();
  uint64_t v8 = 0x203D20656D616ELL;
  unint64_t v9 = 0xE700000000000000LL;
  v1._uint64_t countAndFlagsBits = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v2._unint64_t object = (void *)0xEB00000000203D20LL;
  String.append(_:)(v2);
  outlined init with copy of Any?(v0 + 8, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v3._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x6E4972657375202CLL;
  v4._unint64_t object = (void *)0xED0000203D206F66LL;
  String.append(_:)(v4);
  v7[0] = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
  v5._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return v8;
}

NSNotification __swiftcall Notification._bridgeToObjectiveC()()
{
  Swift::String v1 = *(void **)v0;
  outlined init with copy of Any?(v0 + 8, (uint64_t)v14);
  Swift::String v2 = *(void **)(v0 + 40);
  uint64_t v3 = v15;
  if (!v15)
  {
    swift_bridgeObjectRetain();
    id v13 = v1;
    uint64_t v10 = 0LL;
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  Swift::String v4 = __swift_project_boxed_opaque_existential_1(v14, v15);
  uint64_t v5 = *(void *)(v3 - 8);
  __n128 v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, __n128))(v5 + 16))(v8, v6);
  swift_bridgeObjectRetain();
  id v9 = v1;
  uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (v2) {
LABEL_3:
  }
    Swift::String v2 = (void *)_NativeDictionary.bridged()();
LABEL_4:
  id v11 = objc_msgSend( objc_allocWithZone((Class)NSNotification),  sel_initWithName_object_userInfo_,  v1,  v10,  v2);
  swift_unknownObjectRelease();

  return (NSNotification)v11;
}

Swift::Int Notification.hashValue.getter()
{
  Swift::String v1 = *(void **)v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v0);
  id v2 = v1;
  String.hash(into:)();

  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v0 + 40);
  if (!v3)
  {
    Swift::UInt v13 = 0LL;
    goto LABEL_34;
  }

  uint64_t v21 = v3 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(v3 + 64);
  uint64_t v26 = v37[4];
  uint64_t v24 = v37[6];
  uint64_t v25 = v37[5];
  uint64_t v7 = v37[8];
  uint64_t v23 = v37[7];
  uint64_t v8 = v37[9];
  uint64_t v9 = v37[10];
  uint64_t v10 = v37[11];
  uint64_t v11 = v37[12];
  int64_t v22 = (unint64_t)(v4 + 63) >> 6;
  Swift::Int result = swift_bridgeObjectRetain();
  Swift::UInt v13 = 0LL;
  int64_t v14 = 0LL;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v15 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v16 = v15 | (v14 << 6);
  while (2)
  {
    outlined init with copy of AnyHashable(*(void *)(v3 + 48) + 40 * v16, (uint64_t)&v29);
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v16, (uint64_t)&v31 + 8);
    while (1)
    {
      outlined init with take of LocalePreferences?( (uint64_t)&v29,  (uint64_t)&v34,  &demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
      if (!*((void *)&v35 + 1))
      {
        swift_release();
LABEL_34:
        Hasher._combine(_:)(v13);
        return Hasher._finalize()();
      }

      v27[0] = v34;
      v27[1] = v35;
      uint64_t v28 = v36;
      *(void *)&__int128 v29 = v26;
      *((void *)&v29 + 1) = v25;
      *(void *)&__int128 v30 = v24;
      *((void *)&v30 + 1) = v23;
      *(void *)&__int128 v31 = v7;
      *((void *)&v31 + 1) = v8;
      *(void *)&__int128 v32 = v9;
      *((void *)&v32 + 1) = v10;
      uint64_t v33 = v11;
      AnyHashable.hash(into:)();
      __int128 v40 = v31;
      __int128 v41 = v32;
      uint64_t v42 = v33;
      __int128 v38 = v29;
      __int128 v39 = v30;
      v13 ^= Hasher.finalize()();
      outlined destroy of AnyHashable((uint64_t)v27);
      Swift::Int result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      if (v6) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL))
      {
        __break(1u);
        goto LABEL_36;
      }

      if (v17 < v22)
      {
        unint64_t v18 = *(void *)(v21 + 8 * v17);
        if (v18) {
          goto LABEL_12;
        }
        int64_t v19 = v14 + 2;
        ++v14;
        if (v17 + 1 < v22)
        {
          unint64_t v18 = *(void *)(v21 + 8 * v19);
          if (v18) {
            goto LABEL_15;
          }
          int64_t v20 = v17 + 2;
          int64_t v14 = v17 + 1;
          if (v17 + 2 < v22)
          {
            unint64_t v18 = *(void *)(v21 + 8 * v20);
            if (v18) {
              goto LABEL_18;
            }
            int64_t v19 = v17 + 3;
            int64_t v14 = v17 + 2;
            if (v17 + 3 < v22)
            {
              unint64_t v18 = *(void *)(v21 + 8 * v19);
              if (v18) {
                goto LABEL_15;
              }
              int64_t v20 = v17 + 4;
              int64_t v14 = v17 + 3;
              if (v17 + 4 < v22)
              {
                unint64_t v18 = *(void *)(v21 + 8 * v20);
                if (v18)
                {
LABEL_18:
                  int64_t v17 = v20;
                  goto LABEL_12;
                }

                int64_t v19 = v17 + 5;
                int64_t v14 = v17 + 4;
                if (v17 + 5 < v22) {
                  break;
                }
              }
            }
          }
        }
      }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Notification()
{
  Swift::String v1 = *(void **)v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v0);
  id v2 = v1;
  String.hash(into:)();

  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v0 + 40);
  if (!v3)
  {
    Swift::UInt v13 = 0LL;
    goto LABEL_30;
  }

  uint64_t v20 = v3 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(v3 + 64);
  uint64_t v25 = v36[4];
  uint64_t v23 = v36[6];
  uint64_t v24 = v36[5];
  uint64_t v7 = v36[8];
  uint64_t v22 = v36[7];
  uint64_t v8 = v36[9];
  uint64_t v9 = v36[10];
  uint64_t v10 = v36[11];
  uint64_t v11 = v36[12];
  int64_t v21 = (unint64_t)(v4 + 63) >> 6;
  Swift::Int result = swift_bridgeObjectRetain();
  Swift::UInt v13 = 0LL;
  int64_t v14 = 0LL;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v15 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v16 = v15 | (v14 << 6);
  while (2)
  {
    outlined init with copy of AnyHashable(*(void *)(v3 + 48) + 40 * v16, (uint64_t)&v28);
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v16, (uint64_t)&v30 + 8);
    while (1)
    {
      outlined init with take of LocalePreferences?( (uint64_t)&v28,  (uint64_t)&v33,  &demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
      if (!*((void *)&v34 + 1))
      {
        swift_release();
LABEL_30:
        Hasher._combine(_:)(v13);
        return Hasher._finalize()();
      }

      v26[0] = v33;
      v26[1] = v34;
      uint64_t v27 = v35;
      *(void *)&__int128 v28 = v25;
      *((void *)&v28 + 1) = v24;
      *(void *)&__int128 v29 = v23;
      *((void *)&v29 + 1) = v22;
      *(void *)&__int128 v30 = v7;
      *((void *)&v30 + 1) = v8;
      *(void *)&__int128 v31 = v9;
      *((void *)&v31 + 1) = v10;
      uint64_t v32 = v11;
      AnyHashable.hash(into:)();
      __int128 v39 = v30;
      __int128 v40 = v31;
      uint64_t v41 = v32;
      __int128 v37 = v28;
      __int128 v38 = v29;
      v13 ^= Hasher.finalize()();
      outlined destroy of AnyHashable((uint64_t)v26);
      Swift::Int result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      if (v6) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL))
      {
        __break(1u);
        goto LABEL_32;
      }

      if (v17 < v21)
      {
        unint64_t v18 = *(void *)(v20 + 8 * v17);
        if (v18) {
          goto LABEL_12;
        }
        int64_t v19 = v14 + 2;
        ++v14;
        if (v17 + 1 < v21)
        {
          unint64_t v18 = *(void *)(v20 + 8 * v19);
          if (v18) {
            goto LABEL_15;
          }
          int64_t v14 = v17 + 1;
          if (v17 + 2 < v21)
          {
            unint64_t v18 = *(void *)(v20 + 8 * (v17 + 2));
            if (v18)
            {
              v17 += 2LL;
              goto LABEL_12;
            }

            int64_t v19 = v17 + 3;
            int64_t v14 = v17 + 2;
            if (v17 + 3 < v21) {
              break;
            }
          }
        }
      }

uint64_t Notification.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v1);
  uint64_t v38 = MEMORY[0x189617FA8];
  *(void *)&__int128 v37 = v9;
  *((void *)&v37 + 1) = v10;
  __int128 v34 = xmmword_1837257C0;
  outlined init with take of Any(&v37, &v35);
  uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
  unint64_t v13 = v11[2];
  unint64_t v12 = v11[3];
  if (v13 >= v12 >> 1) {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v12 > 1),  v13 + 1,  1,  v11);
  }
  void v11[2] = v13 + 1;
  int64_t v14 = &v11[6 * v13];
  __int128 v15 = v34;
  __int128 v16 = v36;
  void v14[3] = v35;
  uint64_t v14[4] = v16;
  _OWORD v14[2] = v15;
  outlined init with copy of Any?(v1 + 8, (uint64_t)&v34);
  if (!*((void *)&v35 + 1))
  {
    outlined destroy of Any?((uint64_t)&v34, &demangling cache variable for type metadata for Any?);
    uint64_t v22 = *(void *)(v1 + 40);
    if (!v22) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }

  outlined init with take of Any(&v34, &v37);
  __int128 v34 = xmmword_1837C2B20;
  outlined init with copy of Any((uint64_t)&v37, (uint64_t)&v35);
  unint64_t v18 = v11[2];
  unint64_t v17 = v11[3];
  if (v18 >= v17 >> 1) {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v17 > 1),  v18 + 1,  1,  v11);
  }
  void v11[2] = v18 + 1;
  int64_t v19 = &v11[6 * v18];
  __int128 v20 = v34;
  __int128 v21 = v36;
  v19[3] = v35;
  v19[4] = v21;
  v19[2] = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
  uint64_t v22 = *(void *)(v1 + 40);
  if (v22)
  {
LABEL_9:
    __int128 v33 = v5;
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    *(void *)&__int128 v37 = v22;
    __int128 v34 = xmmword_1837C2B30;
    outlined init with take of Any(&v37, &v35);
    unint64_t v24 = v11[2];
    unint64_t v23 = v11[3];
    swift_bridgeObjectRetain();
    if (v24 >= v23 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v23 > 1),  v24 + 1,  1,  v11);
    }
    void v11[2] = v24 + 1;
    uint64_t v25 = &v11[6 * v24];
    __int128 v26 = v34;
    __int128 v27 = v36;
    void v25[3] = v35;
    v25[4] = v27;
    v25[2] = v26;
    uint64_t v5 = v33;
  }

uint64_t static Notification._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSNotification);
}

uint64_t static Notification._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result = specialized static Notification._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Notification( void *a1, uint64_t a2)
{
  uint64_t result = specialized static Notification._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t NSNotification._toCustomAnyHashable()()
{
  id v1 = v0;
  id v2 = objc_msgSend(v1, sel_name);
  if (objc_msgSend(v1, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v8, 0, 32);
  }

  id v3 = objc_msgSend(v1, sel_userInfo);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  memset(&v7[8], 0, 40);
  *(void *)uint64_t v7 = v2;
  outlined assign with take of Any?((uint64_t)v8, (uint64_t)&v7[8]);
  swift_bridgeObjectRelease();
  *(void *)&v7[40] = v5;
  void v8[2] = *(_OWORD *)v7;
  v8[3] = *(_OWORD *)&v7[16];
  void v8[4] = *(_OWORD *)&v7[32];

  lazy protocol witness table accessor for type Notification and conformance Notification();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSNotification()
{
  id v1 = *v0;
  NSNotification._toCustomAnyHashable()();
}

uint64_t specialized static Notification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)a1);
  uint64_t v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)a2) && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v10 = 0;
    if ((v9 & 1) == 0) {
      return v10 & 1;
    }
  }

  outlined init with copy of Any?(a1 + 8, (uint64_t)&v42);
  if (v43)
  {
    outlined init with take of Any(&v42, &v44);
    outlined init with copy of Any?(a2 + 8, (uint64_t)&v40);
    if (!v41)
    {
      outlined destroy of Any?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
      char v10 = 0;
      return v10 & 1;
    }

    outlined init with take of Any(&v40, &v42);
    __swift_project_boxed_opaque_existential_1(&v44, v45);
    uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    __swift_project_boxed_opaque_existential_1(&v42, v43);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
    if (v11 != v12) {
      goto LABEL_11;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v42, &demangling cache variable for type metadata for Any?);
    outlined init with copy of Any?(a2 + 8, (uint64_t)&v44);
    uint64_t v13 = v45;
    outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
    if (v13)
    {
LABEL_11:
      char v10 = 0;
      return v10 & 1;
    }
  }

  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v15 = *(void *)(a2 + 40);
  char v10 = (v14 | v15) == 0;
  if (v14 && v15)
  {
    __int128 v16 = *(void **)a1;
    outlined init with copy of Any?(a1 + 8, (uint64_t)&v44);
    uint64_t v17 = v45;
    if (v45)
    {
      unint64_t v18 = __swift_project_boxed_opaque_existential_1(&v44, v45);
      uint64_t v19 = *(void *)(v17 - 8);
      __n128 v20 = MEMORY[0x1895F8858](v18);
      uint64_t v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *, __n128))(v19 + 16))(v22, v20);
      swift_bridgeObjectRetain();
      id v23 = v16;
      uint64_t v24 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
    }

    else
    {
      swift_bridgeObjectRetain();
      id v25 = v16;
      uint64_t v24 = 0LL;
    }

    id v26 = objc_msgSend( objc_allocWithZone((Class)NSNotification),  sel_initWithName_object_userInfo_,  v16,  v24,  _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    __int128 v27 = *(void **)a2;
    outlined init with copy of Any?(a2 + 8, (uint64_t)&v44);
    uint64_t v28 = *(void **)(a2 + 40);
    uint64_t v29 = v45;
    if (v45)
    {
      uint64_t v30 = __swift_project_boxed_opaque_existential_1(&v44, v45);
      uint64_t v31 = *(void *)(v29 - 8);
      __n128 v32 = MEMORY[0x1895F8858](v30);
      __int128 v34 = (char *)&v40 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *, __n128))(v31 + 16))(v34, v32);
      swift_bridgeObjectRetain();
      id v35 = v27;
      uint64_t v36 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v29);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
      if (!v28)
      {
LABEL_22:
        type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
        id v37 = objc_msgSend( objc_allocWithZone((Class)NSNotification),  sel_initWithName_object_userInfo_,  v27,  v36,  v28);
        swift_unknownObjectRelease();

        char v10 = static NSObject.== infix(_:_:)();
        return v10 & 1;
      }
    }

    else
    {
      swift_bridgeObjectRetain();
      id v39 = v27;
      uint64_t v36 = 0LL;
      if (!v28) {
        goto LABEL_22;
      }
    }

    uint64_t v28 = (void *)_NativeDictionary.bridged()();
    goto LABEL_22;
  }

  return v10 & 1;
}

uint64_t specialized static Notification._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v4 = objc_msgSend(a1, sel_name);
  if (objc_msgSend(a1, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v10, 0, sizeof(v10));
  }

  id v5 = objc_msgSend(a1, sel_userInfo);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  memset(&v9[8], 0, 40);
  *(void *)char v9 = v4;
  outlined assign with take of Any?((uint64_t)v10, (uint64_t)&v9[8]);
  swift_bridgeObjectRelease();
  *(void *)&v9[40] = v7;
  v11[0] = *(_OWORD *)v9;
  v11[1] = *(_OWORD *)&v9[16];
  void v11[2] = *(_OWORD *)&v9[32];
  outlined init with take of LocalePreferences?( (uint64_t)v11,  a2,  &demangling cache variable for type metadata for Notification?);
  return 1LL;
}

unint64_t lazy protocol witness table accessor for type Notification and conformance Notification()
{
  unint64_t result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Notification, &type metadata for Notification);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Notification, &type metadata for Notification);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Notification, &type metadata for Notification);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Notification, &type metadata for Notification);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Notification, &type metadata for Notification);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for Notification(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Notification and conformance Notification();
  a1[2] = lazy protocol witness table accessor for type Notification and conformance Notification();
  a1[3] = lazy protocol witness table accessor for type Notification and conformance Notification();
  unint64_t result = lazy protocol witness table accessor for type Notification and conformance Notification();
  a1[4] = result;
  return result;
}

void Data._Representation.withInteriorPointerReference<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void sub_18321551C()
{
  uint64_t v4 = v1;
  __int16 v5 = v2;
  char v6 = BYTE2(v2);
  char v7 = BYTE3(v2);
  char v8 = BYTE4(v2);
  char v9 = BYTE5(v2);
  id v3 = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F48]),  sel_initWithBytesNoCopy_length_freeWhenDone_,  &v4,  BYTE6(v2),  0);
  v0();
}

void __DataStorage.withInteriorPointerReference<A>(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (a1 == a2)
  {
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_init);
LABEL_7:
    char v10 = v5;
    a3();

    return;
  }

  uint64_t v6 = *(void *)(v3 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(v3 + 40);
    BOOL v8 = __OFSUB__(a1, v7);
    uint64_t v9 = a1 - v7;
    if (v8)
    {
      __break(1u);
    }

    else if (!__OFSUB__(a2, a1))
    {
      id v5 = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F48]),  sel_initWithBytesNoCopy_length_freeWhenDone_,  v6 + v9,  a2 - a1,  0);
      goto LABEL_7;
    }

    __break(1u);
  }

  __break(1u);
}

void __DataStorage.replaceBytes(in:with:length:)(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
  }

  else if (v5 >= a1)
  {
    __DataStorage.replaceBytes(in:with:length:)(a1, v5, a3, a4);
    return;
  }

  __break(1u);
}

{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  Swift::Int v13;
  uint64_t v15;
  Swift::Int v16;
  void *v17;
  uint64_t v5 = v4[5];
  uint64_t v6 = a1 - v5;
  if (__OFSUB__(a1, v5))
  {
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v7 = __OFSUB__(a2, v5);
  BOOL v8 = a2 - v5;
  if (v7)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v9 = v8 - v6;
  if (v8 < v6)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  if (__OFSUB__(v8, v6))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  char v10 = v4[3];
  uint64_t v11 = v10 - v9;
  if (__OFSUB__(v10, v9))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v13 = v11 + a4;
  if (__OFADD__(v11, a4))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  if (__OFSUB__(v13, v10))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  if (v10 >= v13)
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0);
  }

  else
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v11 + a4, 0);
    v4[3] = v13;
  }

  uint64_t v15 = v4[2];
  if (!v15) {
    goto LABEL_32;
  }
  if (v13 == v10) {
    goto LABEL_16;
  }
  __int128 v16 = v10 - v6;
  if (__OFSUB__(v10, v6)) {
    goto LABEL_30;
  }
  if (__OFSUB__(v16, v9))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    return;
  }

  memmove((void *)(v15 + v6 + a4), (const void *)(v15 + v6 + v9), v16 - v9);
LABEL_16:
  if (a4)
  {
    uint64_t v17 = (void *)(v15 + v6);
    if (!a3)
    {
      bzero(v17, a4);
      if (v13 < v10) {
        goto LABEL_20;
      }
      return;
    }

    memmove(v17, a3, a4);
  }

  if (v13 < v10) {
LABEL_20:
  }
    __DataStorage.setLength(_:)(v13);
}

void Data.xpcCodableObject.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1832157FC( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t bytes, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v25 = a1;
  __int16 v26 = a2;
  char v27 = BYTE2(a2);
  char v28 = BYTE3(a2);
  char v29 = BYTE4(a2);
  char v30 = BYTE5(a2);
  xpc_data_create(&v25, BYTE6(a2));
  return XPCCodableObject.init(copying:)();
}

_BYTE *protocol witness for XPCCodableObjectRepresentable.init(from:) in conformance Data@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t result = specialized Data.init(from:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

void protocol witness for XPCCodableObjectRepresentable.xpcCodableObject.getter in conformance Data()
{
}

_BYTE *specialized Data.init(from:)(uint64_t a1)
{
  uint64_t v2 = XPCCodableObject.type.getter();
  if (v2 != XPC_TYPE_DATA.getter())
  {
    uint64_t v3 = type metadata accessor for XPCCodableObject();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
    return 0LL;
  }

  uint64_t v5 = (void *)XPCCodableObject.copyUnderlyingXPCObject()();
  int64_t length = xpc_data_get_length(v5);
  if (length < 1)
  {
    uint64_t v10 = type metadata accessor for XPCCodableObject();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(a1, v10);
    swift_unknownObjectRelease();
    return 0LL;
  }

  uint64_t v7 = length;
  unint64_t result = xpc_data_get_bytes_ptr(v5);
  if (result)
  {
    uint64_t v4 = specialized Data.init(bytes:count:)(result, v7);
    swift_unknownObjectRelease();
    uint64_t v9 = type metadata accessor for XPCCodableObject();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(a1, v9);
    return (_BYTE *)v4;
  }

  __break(1u);
  return result;
}

Swift::Int specialized static Data.validXPCObjectTypes.getter()
{
  Swift::UInt v0 = XPC_TYPE_DATA.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OpaquePointer>);
  uint64_t v1 = static _SetStorage.allocate(capacity:)();
  uint64_t v2 = v1 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0);
  Swift::Int result = Hasher._finalize()();
  uint64_t v4 = -1LL << *(_BYTE *)(v1 + 32);
  unint64_t v5 = result & ~v4;
  unint64_t v6 = v5 >> 6;
  uint64_t v7 = *(void *)(v1 + 56 + 8 * (v5 >> 6));
  uint64_t v8 = 1LL << v5;
  uint64_t v9 = *(void *)(v1 + 48);
  if (((1LL << v5) & v7) != 0)
  {
    if (*(void *)(v9 + 8 * v5) == v0) {
      return v1;
    }
    uint64_t v10 = ~v4;
    unint64_t v5 = (v5 + 1) & v10;
    unint64_t v6 = v5 >> 6;
    uint64_t v7 = *(void *)(v2 + 8 * (v5 >> 6));
    uint64_t v8 = 1LL << v5;
    if ((v7 & (1LL << v5)) == 0) {
      goto LABEL_10;
    }
    if (*(void *)(v9 + 8 * v5) == v0) {
      return v1;
    }
    unint64_t v5 = (v5 + 1) & v10;
    unint64_t v6 = v5 >> 6;
    uint64_t v7 = *(void *)(v2 + 8 * (v5 >> 6));
    uint64_t v8 = 1LL << v5;
    if ((v7 & (1LL << v5)) == 0) {
      goto LABEL_10;
    }
    if (*(void *)(v9 + 8 * v5) == v0) {
      return v1;
    }
    unint64_t v5 = (v5 + 1) & v10;
    unint64_t v6 = v5 >> 6;
    uint64_t v7 = *(void *)(v2 + 8 * (v5 >> 6));
    uint64_t v8 = 1LL << v5;
    if ((v7 & (1LL << v5)) != 0)
    {
      while (*(void *)(v9 + 8 * v5) != v0)
      {
        unint64_t v5 = (v5 + 1) & v10;
        unint64_t v6 = v5 >> 6;
        uint64_t v7 = *(void *)(v2 + 8 * (v5 >> 6));
        uint64_t v8 = 1LL << v5;
        if ((v7 & (1LL << v5)) == 0) {
          goto LABEL_10;
        }
      }

      return v1;
    }
  }

uint64_t LocaleCache.current.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t *)(*v0 + 16LL);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 124));
  LocaleCache.State.resetCurrentIfNeeded()();
  uint64_t v3 = *(void *)(v1 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 124));
  swift_release();
  if (v3) {
    return v3;
  }
  LocaleCache.preferences()(v8);
  char v5 = v4;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 124));
  closure #2 in LocaleCache.current.getter(v2, (uint64_t)v8, v5 & 1, &v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 124));
  swift_release();
  uint64_t v3 = v7;
  if (v7)
  {
    outlined release of LocalePreferences(v8);
    return v3;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *LocaleCache.preferredLanguages(forCurrentUser:)(char a1)
{
  uint64_t v2 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  if ((a1 & 1) != 0) {
    CFPropertyListRef v3 = CFPreferencesCopyValue( v2,  (CFStringRef)*MEMORY[0x189605170],  (CFStringRef)*MEMORY[0x189605198],  (CFStringRef)*MEMORY[0x189605178]);
  }
  else {
    CFPropertyListRef v3 = CFPreferencesCopyAppValue(v2, (CFStringRef)*MEMORY[0x189605188]);
  }
  CFPropertyListRef v4 = v3;
  swift_unknownObjectRelease();
  if (v4
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]),
        swift_dynamicCast()))
  {
    uint64_t v5 = v19;
    uint64_t v6 = *(void *)(v19 + 16);
    if (!v6)
    {
LABEL_7:
      uint64_t v7 = (void *)MEMORY[0x18961AFE8];
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v5 = MEMORY[0x18961AFE8];
    uint64_t v6 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
    if (!v6) {
      goto LABEL_7;
    }
  }

  uint64_t v8 = (const __CFAllocator *)*MEMORY[0x189604DD0];
  swift_bridgeObjectRetain();
  uint64_t v9 = v5 + 40;
  uint64_t v7 = (void *)MEMORY[0x18961AFE8];
  do
  {
    uint64_t v10 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v8, v10);
    swift_unknownObjectRelease();
    if (CanonicalLanguageIdentifierFromString)
    {
      id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      id v12 = 0LL;
      unint64_t v14 = 0xE000000000000000LL;
    }

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v7[2] + 1LL,  1,  v7);
    }
    unint64_t v16 = v7[2];
    unint64_t v15 = v7[3];
    if (v16 >= v15 >> 1) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v15 > 1),  v16 + 1,  1,  v7);
    }
    v9 += 16LL;
    v7[2] = v16 + 1;
    uint64_t v17 = &v7[2 * v16];
    v17[4] = v12;
    v17[5] = v14;
    --v6;
  }

  while (v6);
  swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease();
  return v7;
}

Swift::Int LocaleCache.State.IdentifierAndPrefs.hashValue.getter()
{
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v55) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v35);
  Hasher._combine(_:)(1u);
  if (v35[0] == 2)
  {
    Swift::UInt8 v1 = 0;
  }

  else
  {
    Swift::UInt8 v1 = v35[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v1);
  uint64_t v2 = v36;
  if (!v36)
  {
    Hasher._combine(_:)(0);
    uint64_t v7 = v35;
    goto LABEL_17;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v2 + 16));
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v34);
    uint64_t v7 = v34;
LABEL_17:
    outlined retain of LocalePreferences(v7);
    if (!v37) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v4 = v2 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v4 += 16LL;
    --v3;
  }

  while (v3);
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v38) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

void protocol witness for Hashable.hash(into:) in conformance LocaleCache.State.IdentifierAndPrefs( uint64_t a1)
{
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v53) == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }

  outlined init with take of LocalePreferences?((uint64_t)v52, (uint64_t)&v34);
  Hasher._combine(_:)(1u);
  if (v34 == 2)
  {
    Swift::UInt8 v3 = 0;
  }

  else
  {
    Swift::UInt8 v3 = v34 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v3);
  uint64_t v4 = v35;
  if (!v35)
  {
    Hasher._combine(_:)(0);
LABEL_16:
    outlined retain of LocalePreferences(&v34);
    if (!v36) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }

  Hasher._combine(_:)(1u);
  Swift::UInt v5 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (!v5) {
    goto LABEL_16;
  }
  outlined retain of LocalePreferences?( (uint64_t)v52,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v6 = v4 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 += 16LL;
    --v5;
  }

  while (v5);
  swift_bridgeObjectRelease();
  if (!v36)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v37) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocaleCache.State.IdentifierAndPrefs()
{
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v53) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  outlined init with take of LocalePreferences?((uint64_t)v52, (uint64_t)&v33);
  Hasher._combine(_:)(1u);
  if (v33 == 2)
  {
    Swift::UInt8 v1 = 0;
  }

  else
  {
    Swift::UInt8 v1 = v33 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v1);
  uint64_t v2 = v34;
  if (!v34)
  {
    Hasher._combine(_:)(0);
LABEL_16:
    outlined retain of LocalePreferences(&v33);
    if (!v35) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }

  Hasher._combine(_:)(1u);
  Swift::UInt v3 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (!v3) {
    goto LABEL_16;
  }
  outlined retain of LocalePreferences?( (uint64_t)v52,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v4 = v2 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v4 += 16LL;
    --v3;
  }

  while (v3);
  swift_bridgeObjectRelease();
  if (!v35)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v36) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }

Swift::Void __swiftcall LocaleCache.State.resetCurrentIfNeeded()()
{
  uint64_t NoteCount = _CFLocaleGetNoteCount();
  uint64_t v2 = _CFTimeZoneGetNoteCount();
  BOOL v3 = __OFADD__(NoteCount, v2);
  uint64_t v4 = NoteCount + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_9;
  }

  Midnightuint64_t NoteCount = _CFCalendarGetMidnightNoteCount();
  BOOL v3 = __OFADD__(v4, MidnightNoteCount);
  uint64_t v6 = v4 + MidnightNoteCount;
  if (v3)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }

  if (v6 != *(void *)(v0 + 96) || *(_BYTE *)(v0 + 104) == 1)
  {
    swift_unknownObjectRelease();
    *(void *)uint64_t v0 = 0LL;
    *(void *)(v0 + 8) = 0LL;
    *(void *)(v0 + 96) = v6;
    *(_BYTE *)(v0 + 104) = 0;

    *(void *)(v0 + 48) = 0LL;
    if (*MEMORY[0x189604FE8])
    {
      _CFNotificationCenterInitializeDependentNotificationIfNecessary();
      return;
    }

    goto LABEL_10;
  }

uint64_t LocaleCache.State.fixedNSLocale(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *(void *)(v2 + 72);
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v9 & 1) != 0)
    {
      id v10 = *(id *)(*(void *)(v7 + 56) + 8 * v8);
      swift_bridgeObjectRelease();
      return (uint64_t)v10;
    }

    swift_bridgeObjectRelease();
  }

  uint64_t v12 = *(void *)(v4 + 32);
  if (*(void *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v14 & 1) != 0)
    {
      __int128 v93 = *(_OWORD *)(*(void *)(v12 + 56) + 16 * v13);
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }

    swift_bridgeObjectRelease();
  }

  type metadata accessor for _LocaleICU();
  uint64_t v15 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU,  (uint64_t)&protocol conformance descriptor for _LocaleICU);
  _s10Foundation17LocalePreferencesVSgWOi0_(v97);
  outlined init with take of LocalePreferences?((uint64_t)v97, (uint64_t)v96);
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v16 = specialized _LocaleICU.init(identifier:prefs:)(a1, a2, (uint64_t)v96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v96[0] = *(void *)(v4 + 32);
  uint64_t v18 = v96[0];
  *(void *)(v4 + 32) = 0x8000000000000000LL;
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  uint64_t v21 = *(void *)(v18 + 16);
  BOOL v22 = (v20 & 1) == 0;
  BOOL v23 = __OFADD__(v21, v22);
  uint64_t v24 = v21 + v22;
  if (v23)
  {
    __break(1u);
  }

  else
  {
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v20;
    if (*(void *)(v18 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v24,  isUniquelyReferenced_nonNull_native);
      uint64_t v25 = v96[0];
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if ((v3 & 1) != (v26 & 1)) {
        goto LABEL_106;
      }
LABEL_15:
      if ((v3 & 1) == 0) {
        goto LABEL_53;
      }
      goto LABEL_16;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v25 = v18;
      goto LABEL_15;
    }
  }

  unint64_t v87 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _LocaleProtocol>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v25 = v28;
  if (!*(void *)(v18 + 16)) {
    goto LABEL_52;
  }
  Swift::UInt8 v29 = (char *)(v28 + 64);
  __src = (char *)(v18 + 64);
  unint64_t v30 = (unint64_t)((1LL << *(_BYTE *)(v25 + 32)) + 63) >> 6;
  if (v25 != v18 || v29 >= &__src[8 * v30]) {
    memmove(v29, __src, 8 * v30);
  }
  int64_t v31 = 0LL;
  *(void *)(v25 + 16) = *(void *)(v18 + 16);
  uint64_t v32 = 1LL << *(_BYTE *)(v18 + 32);
  uint64_t v33 = -1LL;
  if (v32 < 64) {
    uint64_t v33 = ~(-1LL << v32);
  }
  unint64_t v34 = v33 & *(void *)(v18 + 64);
  int64_t v89 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      unint64_t v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      unint64_t v36 = v35 | (v31 << 6);
      goto LABEL_26;
    }

    int64_t v43 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      goto LABEL_103;
    }
    if (v43 >= v89) {
      goto LABEL_52;
    }
    unint64_t v44 = *(void *)&__src[8 * v43];
    ++v31;
    if (!v44)
    {
      int64_t v31 = v43 + 1;
      if (v43 + 1 >= v89) {
        goto LABEL_52;
      }
      unint64_t v44 = *(void *)&__src[8 * v31];
      if (!v44)
      {
        int64_t v31 = v43 + 2;
        if (v43 + 2 >= v89) {
          goto LABEL_52;
        }
        unint64_t v44 = *(void *)&__src[8 * v31];
        if (!v44)
        {
          int64_t v31 = v43 + 3;
          if (v43 + 3 >= v89) {
            goto LABEL_52;
          }
          unint64_t v44 = *(void *)&__src[8 * v31];
          if (!v44)
          {
            int64_t v31 = v43 + 4;
            if (v43 + 4 >= v89) {
              goto LABEL_52;
            }
            unint64_t v44 = *(void *)&__src[8 * v31];
            if (!v44)
            {
              int64_t v31 = v43 + 5;
              if (v43 + 5 >= v89) {
                goto LABEL_52;
              }
              unint64_t v44 = *(void *)&__src[8 * v31];
              if (!v44)
              {
                int64_t v31 = v43 + 6;
                if (v43 + 6 >= v89) {
                  goto LABEL_52;
                }
                unint64_t v44 = *(void *)&__src[8 * v31];
                if (!v44)
                {
                  int64_t v31 = v43 + 7;
                  if (v43 + 7 >= v89) {
                    goto LABEL_52;
                  }
                  unint64_t v44 = *(void *)&__src[8 * v31];
                  if (!v44) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

id LocaleCache.State.currentNSLocale(preferences:cache:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  outlined init with take of LocalePreferences?(a1, (uint64_t)v32);
  LocaleCache.State.resetCurrentIfNeeded()();
  uint64_t v5 = (void *)v2[6];
  id v6 = v5;
  if (!v5)
  {
    uint64_t v7 = *v2;
    if (*v3)
    {
      uint64_t v8 = v3[1];
      char v9 = (objc_class *)type metadata accessor for _NSSwiftLocale();
      id v10 = objc_allocWithZone(v9);
      uint64_t v11 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
      uint64_t v12 = (uint64_t *)&v10[OBJC_IVAR____NSSwiftLocale_locale];
      *uint64_t v12 = v7;
      v12[1] = v8;
      v10[v11] = 2;
      uint64_t v13 = String._bridgeToObjectiveCImpl()();
      v24.receiver = v10;
      v24.super_class = v9;
      swift_unknownObjectRetain_n();
      id v6 = objc_msgSendSuper2(&v24, sel_initWithLocaleIdentifier_, v13);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }

    else
    {
      outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)v30);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v30) == 1)
      {
        id v6 = 0LL;
        goto LABEL_5;
      }

      v26[6] = v30[6];
      v27[0] = v31[0];
      *(_OWORD *)((char *)v27 + 12) = *(_OWORD *)((char *)v31 + 12);
      _OWORD v26[2] = v30[2];
      void v26[3] = v30[3];
      v26[4] = v30[4];
      v26[5] = v30[5];
      v26[0] = v30[0];
      v26[1] = v30[1];
      type metadata accessor for _LocaleICU();
      swift_allocObject();
      outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)v28);
      outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)&v29);
      outlined retain of LocalePreferences(&v29);
      outlined retain of LocalePreferences(v28);
      uint64_t v17 = _LocaleICU.init(name:prefs:disableBundleMatching:)(0LL, 0LL, (uint64_t *)v26, 0);
      uint64_t v18 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU,  (uint64_t)&protocol conformance descriptor for _LocaleICU);
      unint64_t v19 = (objc_class *)type metadata accessor for _NSSwiftLocale();
      char v20 = objc_allocWithZone(v19);
      uint64_t v21 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
      BOOL v22 = (uint64_t *)&v20[OBJC_IVAR____NSSwiftLocale_locale];
      *BOOL v22 = v17;
      v22[1] = v18;
      v20[v21] = 2;
      uint64_t v23 = String._bridgeToObjectiveCImpl()();
      v25.receiver = v20;
      v25.super_class = v19;
      swift_retain();
      id v6 = objc_msgSendSuper2(&v25, sel_initWithLocaleIdentifier_, v23);
      swift_unknownObjectRelease();
      outlined retain of LocalePreferences?( (uint64_t)v32,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      if ((a2 & 1) == 0)
      {
        swift_release();
        goto LABEL_5;
      }

      uint64_t *v3 = v17;
      v3[1] = v18;
    }

    void v3[6] = (uint64_t)v6;
    id v14 = v6;
  }

double one-time initialization function for cache()
{
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 124) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  uint64_t v1 = MEMORY[0x18961AFF0];
  *(void *)(v0 + 48) = MEMORY[0x18961AFF0];
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = 0LL;
  *(void *)(v0 + 72) = 0LL;
  *(void *)(v0 + 80) = 0LL;
  *(void *)(v0 + 88) = v1;
  *(void *)(v0 + 96) = v1;
  double result = 0.0;
  *(_OWORD *)(v0 + 104) = xmmword_1837C2D20;
  *(_BYTE *)(v0 + 120) = 0;
  static LocaleCache.cache = v0;
  return result;
}

uint64_t closure #1 in LocaleCache.reset()(uint64_t result)
{
  *(_BYTE *)(result + 104) = 1;
  return result;
}

uint64_t closure #1 in LocaleCache.current.getter@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

__n128 LocaleCache.preferences()(_OWORD *a1)
{
  uint64_t v2 = (const __CFDictionary *)__CFXPreferencesCopyCurrentApplicationStateWithDeadlockAvoidance();
  v4[0] = 2;
  memset(&v4[8], 0, 128);
  *(_DWORD *)&v4[136] = 33686018;
  LocalePreferences.apply(_:)(v2);

  a1[6] = *(_OWORD *)&v4[96];
  a1[7] = *(_OWORD *)&v4[112];
  *(_OWORD *)((char *)a1 + 124) = *(_OWORD *)&v4[124];
  a1[2] = *(_OWORD *)&v4[32];
  a1[3] = *(_OWORD *)&v4[48];
  a1[4] = *(_OWORD *)&v4[64];
  a1[5] = *(_OWORD *)&v4[80];
  __n128 result = *(__n128 *)&v4[16];
  *a1 = *(_OWORD *)v4;
  a1[1] = *(_OWORD *)&v4[16];
  return result;
}

void *closure #2 in LocaleCache.current.getter@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  if (*a1)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = *a1;
  }

  else
  {
    type metadata accessor for _LocaleICU();
    uint64_t v8 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU,  (uint64_t)&protocol conformance descriptor for _LocaleICU);
    __int128 v10 = *(_OWORD *)(a2 + 112);
    v16[6] = *(_OWORD *)(a2 + 96);
    v17[0] = v10;
    *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)(a2 + 124);
    __int128 v11 = *(_OWORD *)(a2 + 48);
    _OWORD v16[2] = *(_OWORD *)(a2 + 32);
    void v16[3] = v11;
    __int128 v12 = *(_OWORD *)(a2 + 80);
    v16[4] = *(_OWORD *)(a2 + 64);
    v16[5] = v12;
    __int128 v13 = *(_OWORD *)(a2 + 16);
    v16[0] = *(_OWORD *)a2;
    v16[1] = v13;
    swift_allocObject();
    outlined retain of LocalePreferences((void *)a2);
    uint64_t v14 = _LocaleICU.init(name:prefs:disableBundleMatching:)(0LL, 0LL, (uint64_t *)v16, 0);
    uint64_t v9 = v14;
    if ((a3 & 1) != 0)
    {
      *a1 = v14;
      a1[1] = v8;
      swift_retain();
    }
  }

  swift_unknownObjectRetain();
  __n128 result = outlined release of LocalePreferences((void *)a2);
  *a4 = v9;
  a4[1] = v8;
  return result;
}

uint64_t closure #1 in LocaleCache.autoupdatingCurrent.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4)
  {
    uint64_t v5 = v4;
  }

  else
  {
    type metadata accessor for _LocaleAutoupdating();
    uint64_t v5 = swift_allocObject();
    *(void *)(a1 + 88) = v5;
    swift_retain();
  }

  *a2 = v5;
  return swift_retain();
}

uint64_t closure #1 in LocaleCache.system.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    id v6 = v4;
  }

  else
  {
    type metadata accessor for _LocaleICU();
    uint64_t v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU,  (uint64_t)&protocol conformance descriptor for _LocaleICU);
    _s10Foundation17LocalePreferencesVSgWOi0_(v9);
    outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v8);
    swift_allocObject();
    id v6 = specialized _LocaleICU.init(identifier:prefs:)(0LL, 0xE000000000000000LL, (uint64_t)v8);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v5;
    swift_retain();
  }

  *a2 = v6;
  a2[1] = v5;
  return swift_unknownObjectRetain();
}

uint64_t closure #1 in LocaleCache.fixed(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v10 = *(void *)(a1 + 32);
  if (*(void *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v12 & 1) != 0)
    {
      __int128 v54 = *(_OWORD *)(*(void *)(v10 + 56) + 16 * v11);
      swift_unknownObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
      __int128 v14 = v54;
LABEL_52:
      *a4 = v14;
      return result;
    }

    swift_bridgeObjectRelease();
  }

  uint64_t v53 = a4;
  uint64_t v58 = v4;
  type metadata accessor for _LocaleICU();
  uint64_t v55 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU,  (uint64_t)&protocol conformance descriptor for _LocaleICU);
  _s10Foundation17LocalePreferencesVSgWOi0_(v57);
  outlined init with take of LocalePreferences?((uint64_t)v57, (uint64_t)v56);
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v15 = specialized _LocaleICU.init(identifier:prefs:)(a2, a3, (uint64_t)v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v56[0] = *(void *)(a1 + 32);
  uint64_t v17 = v56[0];
  *(void *)(a1 + 32) = 0x8000000000000000LL;
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v20 = *(void *)(v17 + 16);
  BOOL v21 = (v18 & 1) == 0;
  uint64_t v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v5 = v18;
  if (*(void *)(v17 + 24) >= v22)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v23 = v17;
      uint64_t v26 = v55;
      if ((v18 & 1) == 0) {
        goto LABEL_49;
      }
LABEL_12:
      Swift::UInt v27 = (void *)(*(void *)(v23 + 56) + 16 * v19);
      swift_unknownObjectRelease();
      *Swift::UInt v27 = v15;
      v27[1] = v26;
LABEL_51:
      *(void *)(a1 + 32) = v23;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)&__int128 v14 = v15;
      *((void *)&v14 + 1) = v26;
      a4 = v53;
      goto LABEL_52;
    }

uint64_t closure #1 in LocaleCache.fixedNSLocale(identifier:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = LocaleCache.State.fixedNSLocale(identifier:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t closure #1 in LocaleCache.fixedNSLocale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v4 = v3;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v66);
  *(void *)&__int128 v67 = v9;
  *((void *)&v67 + 1) = v8;
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v68);
  uint64_t v64[6] = v68[5];
  v64[7] = v68[6];
  v65[0] = v69[0];
  *(_OWORD *)((char *)v65 + 12) = *(_OWORD *)((char *)v69 + 12);
  v64[2] = v68[1];
  v64[3] = v68[2];
  v64[4] = v68[3];
  v64[5] = v68[4];
  v64[0] = v67;
  v64[1] = v68[0];
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?( (uint64_t)v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  if (v11)
  {
    outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
    uint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)((unint64_t *)v64);
    if ((v13 & 1) != 0)
    {
      id v14 = *(id *)(*(void *)(v10 + 56) + 8 * v12);
      outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
      uint64_t result = outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
LABEL_51:
      *a3 = v14;
      return result;
    }

    outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
  }

  uint64_t v16 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU,  (uint64_t)&protocol conformance descriptor for _LocaleICU);
  uint64_t v17 = (objc_class *)type metadata accessor for _NSSwiftLocale();
  char v18 = objc_allocWithZone(v17);
  uint64_t v19 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
  uint64_t v20 = &v18[OBJC_IVAR____NSSwiftLocale_locale];
  *uint64_t v20 = a2;
  v20[1] = v16;
  v18[v19] = 2;
  uint64_t v21 = String._bridgeToObjectiveCImpl()();
  v63.receiver = v18;
  v63.super_class = v17;
  swift_retain_n();
  id v22 = objc_msgSendSuper2(&v63, sel_initWithLocaleIdentifier_, v21);
  swift_unknownObjectRelease();
  outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
  id v14 = v22;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v70 = *(void *)(a1 + 80);
  uint64_t v24 = v70;
  *(void *)(a1 + 80) = 0x8000000000000000LL;
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((unint64_t *)v64);
  uint64_t v27 = *(void *)(v24 + 16);
  BOOL v28 = (v25 & 1) == 0;
  uint64_t v29 = v27 + v28;
  if (__OFADD__(v27, v28))
  {
    __break(1u);
  }

  else
  {
    char v4 = v25;
    if (*(void *)(v24 + 24) < v29)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v29,  isUniquelyReferenced_nonNull_native);
      uint64_t v30 = v70;
      uint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((unint64_t *)v64);
      if ((v4 & 1) != (v32 & 1)) {
        goto LABEL_54;
      }
      unint64_t v26 = v31;
      if ((v4 & 1) == 0) {
        goto LABEL_49;
      }
LABEL_12:
      uint64_t v33 = *(void *)(v30 + 56);

      *(void *)(v33 + 8 * v26) = v14;
LABEL_50:
      *(void *)(a1 + 80) = v30;
      swift_bridgeObjectRelease();
      outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
      outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
      uint64_t result = swift_release();
      goto LABEL_51;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v30 = v24;
      if ((v25 & 1) != 0) {
        goto LABEL_12;
      }
LABEL_49:
      specialized _NativeDictionary._insert(at:key:value:)(v26, v64, (uint64_t)v14, (void *)v30);
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v67);
      goto LABEL_50;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LocaleCache.State.IdentifierAndPrefs, _NSSwiftLocale>);
  uint64_t v34 = static _DictionaryStorage.copy(original:)();
  uint64_t v30 = v34;
  if (!*(void *)(v24 + 16))
  {
LABEL_48:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0) {
      goto LABEL_12;
    }
    goto LABEL_49;
  }

  unint64_t v35 = (void *)(v34 + 64);
  unint64_t v36 = (unint64_t)((1LL << *(_BYTE *)(v30 + 32)) + 63) >> 6;
  int64_t v37 = 0LL;
  *(void *)(v30 + 16) = *(void *)(v24 + 16);
  uint64_t v38 = 1LL << *(_BYTE *)(v24 + 32);
  uint64_t v39 = -1LL;
  if (v38 < 64) {
    uint64_t v39 = ~(-1LL << v38);
  }
  unint64_t v40 = v39 & *(void *)(v24 + 64);
  uint64_t v56 = v24 + 64;
  int64_t v57 = (unint64_t)(v38 + 63) >> 6;
  while (1)
  {
    if (v40)
    {
      uint64_t v59 = (v40 - 1) & v40;
      int64_t v60 = v37;
      unint64_t v41 = __clz(__rbit64(v40)) | (v37 << 6);
      goto LABEL_22;
    }

    int64_t v52 = v37 + 1;
    if (__OFADD__(v37, 1LL))
    {
      __break(1u);
      goto LABEL_53;
    }

    if (v52 >= v57) {
      goto LABEL_48;
    }
    unint64_t v53 = *(void *)(v56 + 8 * v52);
    int64_t v54 = v37 + 1;
    if (!v53)
    {
      int64_t v54 = v37 + 2;
      if (v37 + 2 >= v57) {
        goto LABEL_48;
      }
      unint64_t v53 = *(void *)(v56 + 8 * v54);
      if (!v53)
      {
        int64_t v54 = v37 + 3;
        if (v37 + 3 >= v57) {
          goto LABEL_48;
        }
        unint64_t v53 = *(void *)(v56 + 8 * v54);
        if (!v53)
        {
          int64_t v54 = v37 + 4;
          if (v37 + 4 >= v57) {
            goto LABEL_48;
          }
          unint64_t v53 = *(void *)(v56 + 8 * v54);
          if (!v53)
          {
            int64_t v54 = v37 + 5;
            if (v37 + 5 >= v57) {
              goto LABEL_48;
            }
            unint64_t v53 = *(void *)(v56 + 8 * v54);
            if (!v53)
            {
              int64_t v54 = v37 + 6;
              if (v37 + 6 >= v57) {
                goto LABEL_48;
              }
              unint64_t v53 = *(void *)(v56 + 8 * v54);
              if (!v53)
              {
                int64_t v54 = v37 + 7;
                if (v37 + 7 >= v57) {
                  goto LABEL_48;
                }
                unint64_t v53 = *(void *)(v56 + 8 * v54);
                if (!v53)
                {
                  int64_t v54 = v37 + 8;
                  if (v37 + 8 >= v57) {
                    goto LABEL_48;
                  }
                  unint64_t v53 = *(void *)(v56 + 8 * v54);
                  if (!v53) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

id closure #1 in LocaleCache.autoupdatingCurrentNSLocale()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v3 = *(void **)(a1 + 56);
  if (v3)
  {
    id v4 = *(id *)(a1 + 56);
  }

  else
  {
    if (*(void *)(a1 + 88))
    {
      uint64_t v6 = *(void *)(a1 + 88);
    }

    else
    {
      type metadata accessor for _LocaleAutoupdating();
      uint64_t v6 = swift_allocObject();
      *(void *)(a1 + 88) = v6;
      swift_retain();
    }

    uint64_t v7 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
    uint64_t v8 = (objc_class *)type metadata accessor for _NSSwiftLocale();
    uint64_t v9 = objc_allocWithZone(v8);
    uint64_t v10 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
    uint64_t v11 = (uint64_t *)&v9[OBJC_IVAR____NSSwiftLocale_locale];
    *uint64_t v11 = v6;
    v11[1] = v7;
    v9[v10] = 2;
    uint64_t v12 = String._bridgeToObjectiveCImpl()();
    v15.receiver = v9;
    v15.super_class = v8;
    swift_retain();
    id v13 = objc_msgSendSuper2(&v15, sel_initWithLocaleIdentifier_, v12);
    swift_unknownObjectRelease();
    *(void *)(a1 + 56) = v13;
    id v4 = v13;
    char v3 = 0LL;
  }

  *a2 = v4;
  return v3;
}

uint64_t LocaleCache.currentNSLocale()()
{
  uint64_t v1 = (uint64_t *)&(*v0)[4];
  uint64_t v2 = *v0 + 31;
  swift_retain();
  os_unfair_lock_lock(v2);
  closure #1 in LocaleCache.currentNSLocale()(v1, v8);
  os_unfair_lock_unlock(v2);
  swift_release();
  uint64_t v3 = *(void *)&v8[0];
  if (*(void *)&v8[0]) {
    return v3;
  }
  LocaleCache.preferences()(v8);
  char v5 = v4;
  swift_retain();
  os_unfair_lock_lock(v2);
  closure #2 in LocaleCache.currentNSLocale()(v8, v5 & 1, &v7);
  os_unfair_lock_unlock(v2);
  swift_release();
  uint64_t v3 = v7;
  if (v7)
  {
    outlined release of LocalePreferences(v8);
    return v3;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id closure #1 in LocaleCache.currentNSLocale()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  char v4 = (void *)a1[6];
  id v5 = v4;
  if (!v4)
  {
    uint64_t v6 = *a1;
    if (*a1)
    {
      uint64_t v7 = a1[1];
      uint64_t v8 = (objc_class *)type metadata accessor for _NSSwiftLocale();
      uint64_t v9 = objc_allocWithZone(v8);
      uint64_t v10 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
      uint64_t v11 = &v9[OBJC_IVAR____NSSwiftLocale_locale];
      *uint64_t v11 = v6;
      v11[1] = v7;
      v9[v10] = 2;
      uint64_t v12 = String._bridgeToObjectiveCImpl()();
      v15.receiver = v9;
      v15.super_class = v8;
      swift_unknownObjectRetain_n();
      id v5 = objc_msgSendSuper2(&v15, sel_initWithLocaleIdentifier_, v12);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      a1[6] = (uint64_t)v5;
      id v13 = v5;
    }

    else
    {
      id v5 = 0LL;
    }
  }

  *a2 = v5;
  return v4;
}

id closure #2 in LocaleCache.currentNSLocale()@<X0>(_OWORD *a1@<X1>, char a2@<W2>, void *a3@<X8>)
{
  __int128 v5 = a1[7];
  _OWORD v11[6] = a1[6];
  v12[0] = v5;
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)a1 + 124);
  __int128 v6 = a1[3];
  void v11[2] = a1[2];
  _OWORD v11[3] = v6;
  __int128 v7 = a1[5];
  v11[4] = a1[4];
  v11[5] = v7;
  __int128 v8 = a1[1];
  v11[0] = *a1;
  v11[1] = v8;
  destructiveProjectEnumData for PredicateCodableError(v11, a1);
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v10);
  id result = LocaleCache.State.currentNSLocale(preferences:cache:)((uint64_t)v10, a2);
  *a3 = result;
  return result;
}

id closure #1 in LocaleCache.systemNSLocale()@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)a1[8];
  if (v3)
  {
    id v4 = (id)a1[8];
  }

  else
  {
    if (a1[2])
    {
      uint64_t v6 = a1[3];
      __int128 v7 = (void *)a1[2];
    }

    else
    {
      type metadata accessor for _LocaleICU();
      uint64_t v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU,  (uint64_t)&protocol conformance descriptor for _LocaleICU);
      _s10Foundation17LocalePreferencesVSgWOi0_(v17);
      outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)v16);
      swift_allocObject();
      __int128 v7 = specialized _LocaleICU.init(identifier:prefs:)(0LL, 0xE000000000000000LL, (uint64_t)v16);
      a1[2] = v7;
      a1[3] = v6;
      swift_retain();
    }

    __int128 v8 = (objc_class *)type metadata accessor for _NSSwiftLocale();
    uint64_t v9 = objc_allocWithZone(v8);
    uint64_t v10 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
    uint64_t v11 = &v9[OBJC_IVAR____NSSwiftLocale_locale];
    *uint64_t v11 = v7;
    v11[1] = v6;
    v9[v10] = 2;
    uint64_t v12 = String._bridgeToObjectiveCImpl()();
    v15.receiver = v9;
    v15.super_class = v8;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    id v13 = objc_msgSendSuper2(&v15, sel_initWithLocaleIdentifier_, v12);
    swift_unknownObjectRelease();
    a1[8] = v13;
    id v4 = v13;
    swift_unknownObjectRelease();
    uint64_t v3 = 0LL;
  }

  *a2 = v4;
  return v3;
}

uint64_t closure #1 in LocaleCache.fixedComponents(_:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 40);
  if (*(void *)(v7 + 16))
  {
    outlined retain of Locale.Components(a2);
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v9 & 1) != 0)
    {
      __int128 v52 = *(_OWORD *)(*(void *)(v7 + 56) + 16 * v8);
      swift_unknownObjectRetain();
      uint64_t result = (uint64_t)outlined release of Locale.Components(a2);
      __int128 v11 = v52;
LABEL_52:
      *a3 = v11;
      return result;
    }

    outlined release of Locale.Components(a2);
  }

  id v51 = a3;
  type metadata accessor for _LocaleICU();
  uint64_t v12 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU,  (uint64_t)&protocol conformance descriptor for _LocaleICU);
  memcpy(__dst, a2, 0x160uLL);
  swift_allocObject();
  outlined retain of Locale.Components(a2);
  uint64_t v13 = _LocaleICU.init(components:)(__dst);
  outlined retain of Locale.Components(a2);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *(void *)(a1 + 40);
  uint64_t v15 = v54;
  *(void *)(a1 + 40) = 0x8000000000000000LL;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v3 = v16;
  if (*(void *)(v15 + 24) >= v20)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v21 = v15;
      if ((v16 & 1) == 0) {
        goto LABEL_49;
      }
LABEL_12:
      uint64_t v24 = (uint64_t *)(*(void *)(v21 + 56) + 16 * v17);
      swift_unknownObjectRelease();
      *uint64_t v24 = v13;
      v24[1] = v12;
LABEL_51:
      *(void *)(a1 + 40) = v21;
      swift_bridgeObjectRelease();
      uint64_t result = (uint64_t)outlined release of Locale.Components(a2);
      *(void *)&__int128 v11 = v13;
      *((void *)&v11 + 1) = v12;
      a3 = v51;
      goto LABEL_52;
    }

BOOL specialized static LocaleCache.State.IdentifierAndPrefs.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  outlined init with take of LocalePreferences?((uint64_t)(a1 + 2), (uint64_t)v93);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  outlined init with take of LocalePreferences?((uint64_t)(a2 + 2), (uint64_t)v94);
  BOOL v7 = v3 == v5 && v4 == v6;
  if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0LL, (v8 & 1) != 0))
  {
    outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)v92);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v92) == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)v90);
      goto LABEL_11;
    }

    outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)&v82);
    outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)v90);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v90) == 1)
    {
      __int128 v61 = v88;
      *(_OWORD *)BOOL v62 = *(_OWORD *)v89;
      *(_OWORD *)&v62[12] = *(_OWORD *)&v89[12];
      __int128 v57 = v84;
      __int128 v58 = v85;
      __int128 v59 = v86;
      __int128 v60 = v87;
      __int128 v55 = v82;
      __int128 v56 = v83;
      outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)&v63);
      outlined retain of LocalePreferences(&v63);
      outlined retain of LocalePreferences(&v63);
      outlined release of LocalePreferences(&v55);
LABEL_11:
      outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)v90);
      outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)&v91);
      outlined retain of LocalePreferences?( (uint64_t)v94,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v90);
      return 0LL;
    }

    outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)&v63);
    char v10 = v82;
    uint64_t v11 = *((void *)&v82 + 1);
    __int128 v12 = v83;
    __int128 v13 = v84;
    __int128 v14 = v85;
    __int128 v52 = (void *)*((void *)&v86 + 1);
    unint64_t v53 = (void *)v86;
    __int128 v50 = (void *)*((void *)&v87 + 1);
    id v51 = (void *)v87;
    uint64_t v48 = *((void *)&v88 + 1);
    unint64_t v49 = (void *)v88;
    uint64_t v46 = *(void *)&v89[8];
    uint64_t v47 = *(void *)v89;
    uint64_t v15 = *(void *)&v89[16];
    int v44 = v89[25];
    int v45 = v89[24];
    int v42 = v89[27];
    int v43 = v89[26];
    if (v82 == 2)
    {
      if (v63 != 2)
      {
LABEL_22:
        outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)v54);
        outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)&v55);
        outlined retain of LocalePreferences(&v55);
        char v16 = (__int128 *)v54;
LABEL_23:
        outlined retain of LocalePreferences(v16);
LABEL_52:
        LOBYTE(v17) = 0;
        goto LABEL_53;
      }
    }

    else if (v63 == 2 || ((((v82 & 1) == 0) ^ v63) & 1) == 0)
    {
      goto LABEL_22;
    }

    if (*((void *)&v82 + 1))
    {
      if (!v64 || (specialized static Array<A>.== infix(_:_:)(*((void **)&v82 + 1), v64) & 1) == 0) {
        goto LABEL_50;
      }
    }

    else if (v64)
    {
      goto LABEL_50;
    }

    if (*((void *)&v12 + 1))
    {
      if (!*((void *)&v65 + 1) || v12 != v65 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_50;
      }
    }

    else if (*((void *)&v65 + 1))
    {
      goto LABEL_50;
    }

    if (*((void *)&v13 + 1))
    {
      if (!*((void *)&v66 + 1) || v13 != v66 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_50;
      }
    }

    else if (*((void *)&v66 + 1))
    {
      goto LABEL_50;
    }

    if ((void)v14)
    {
      if (!v67 || (specialized static Dictionary<>.== infix(_:_:)(v14, v67) & 1) == 0) {
        goto LABEL_50;
      }
    }

    else if (v67)
    {
      goto LABEL_50;
    }

    if (*((void *)&v14 + 1))
    {
      if (v68 && (specialized static Dictionary<>.== infix(_:_:)(*((uint64_t *)&v14 + 1), v68) & 1) != 0)
      {
LABEL_45:
        uint64_t v17 = v69;
        if (v53)
        {
          if (!v69)
          {
            outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)&v55);
            outlined retain of LocalePreferences?( (uint64_t)v93,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences(&v55);
            goto LABEL_53;
          }

          int64_t v38 = v70;
          unint64_t v27 = v72;
          int64_t v28 = v71;
          unint64_t v26 = v73;
          type metadata accessor for CFDictionaryRef(0LL);
          outlined retain of LocalePreferences?( (uint64_t)v93,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?( (uint64_t)v93,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?( (uint64_t)v94,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          id v30 = (id)v17;
          id v29 = v53;
          char v18 = static _CFObject.== infix(_:_:)();

          if ((v18 & 1) == 0) {
            goto LABEL_106;
          }
        }

        else
        {
          if (v69)
          {
            outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)&v55);
            outlined retain of LocalePreferences?( (uint64_t)v93,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            char v16 = &v55;
            goto LABEL_23;
          }

          int64_t v38 = v70;
          unint64_t v27 = v72;
          int64_t v28 = v71;
          unint64_t v26 = v73;
          outlined retain of LocalePreferences?( (uint64_t)v93,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?( (uint64_t)v93,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?( (uint64_t)v94,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        }

        if (v52)
        {
          LOBYTE(v17) = (_BYTE)v38;
          if (!v38) {
            goto LABEL_89;
          }
          type metadata accessor for CFDictionaryRef(0LL);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          id v39 = v38;
          id v31 = v52;
          char v21 = static _CFObject.== infix(_:_:)();

          if ((v21 & 1) == 0) {
            goto LABEL_106;
          }
        }

        else if (v38)
        {
          goto LABEL_106;
        }

        if (v51)
        {
          if (!v28) {
            goto LABEL_106;
          }
          type metadata accessor for CFDictionaryRef(0LL);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          id v35 = v28;
          id v32 = v51;
          char v22 = static _CFObject.== infix(_:_:)();

          if ((v22 & 1) == 0) {
            goto LABEL_106;
          }
        }

        else if (v28)
        {
          goto LABEL_106;
        }

        if (v50)
        {
          if (!v27) {
            goto LABEL_106;
          }
          type metadata accessor for CFDictionaryRef(0LL);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          id v36 = v27;
          id v33 = v50;
          char v23 = static _CFObject.== infix(_:_:)();

          if ((v23 & 1) == 0) {
            goto LABEL_106;
          }
        }

        else if (v27)
        {
          goto LABEL_106;
        }

        if (v49)
        {
          if (!v26) {
            goto LABEL_106;
          }
          type metadata accessor for CFDictionaryRef(0LL);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          id v37 = v26;
          id v34 = v49;
          char v24 = static _CFObject.== infix(_:_:)();

          if ((v24 & 1) == 0) {
            goto LABEL_106;
          }
        }

        else if (v26)
        {
          goto LABEL_106;
        }

        uint64_t v17 = v74;
        if (v48)
        {
          if (!v74) {
            goto LABEL_89;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v40 = specialized static Dictionary<>.== infix(_:_:)(v48, v17);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v40 & 1) == 0) {
            goto LABEL_106;
          }
        }

        else if (v74)
        {
          goto LABEL_106;
        }

        uint64_t v17 = v75;
        if (!v47)
        {
          if (v75) {
            goto LABEL_106;
          }
LABEL_91:
          if (v15)
          {
            if (!v77 || (v46 != v76 || v15 != v77) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_106;
            }
          }

          else if (v77)
          {
            goto LABEL_106;
          }

          if (v45 != 2)
          {
            if (v78 == 2 || ((v78 ^ v45) & 1) != 0) {
              goto LABEL_106;
            }
LABEL_103:
            int v25 = v79;
            if (v44 == 2)
            {
              outlined retain of LocalePreferences?( (uint64_t)v94,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              if (v25 != 2) {
                goto LABEL_52;
              }
            }

            else
            {
              outlined retain of LocalePreferences?( (uint64_t)v94,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              if (v25 == 2 || ((v25 ^ v44) & 1) != 0) {
                goto LABEL_52;
              }
            }

            if (v43 == 2)
            {
              if (v80 != 2) {
                goto LABEL_52;
              }
            }

            else
            {
              LOBYTE(v17) = 0;
              if (v80 == 2 || ((((v43 & 1) == 0) ^ v80) & 1) == 0) {
                goto LABEL_53;
              }
            }

            if (v42 == 2)
            {
              if (v81 != 2) {
                goto LABEL_52;
              }
            }

            else if (v81 == 2 || ((((v42 & 1) == 0) ^ v81) & 1) == 0)
            {
              goto LABEL_52;
            }

            LOBYTE(v17) = 1;
LABEL_53:
            LOBYTE(v55) = v10;
            *((void *)&v55 + 1) = v11;
            __int128 v56 = v12;
            __int128 v57 = v13;
            __int128 v58 = v14;
            *(void *)&__int128 v59 = v53;
            *((void *)&v59 + 1) = v52;
            *(void *)&__int128 v60 = v51;
            *((void *)&v60 + 1) = v50;
            *(void *)&__int128 v61 = v49;
            *((void *)&v61 + 1) = v48;
            *(void *)BOOL v62 = v47;
            *(void *)&v62[8] = v46;
            *(void *)&v62[16] = v15;
            v62[24] = v45;
            v62[25] = v44;
            v62[26] = v43;
            v62[27] = v42;
            outlined release of LocalePreferences(&v55);
            outlined retain of LocalePreferences?( (uint64_t)v93,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
            return (v17 & 1) != 0;
          }

          if (v78 == 2) {
            goto LABEL_103;
          }
LABEL_106:
          uint64_t v20 = outlined consume of LocalePreferences?;
          BOOL v19 = v94;
          goto LABEL_51;
        }

        if (v75)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v41 = specialized static Dictionary<>.== infix(_:_:)(v47, v17);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v41 & 1) == 0) {
            goto LABEL_106;
          }
          goto LABEL_91;
        }

ValueMetadata *type metadata accessor for LocaleCache()
{
  return &type metadata for LocaleCache;
}

uint64_t destroy for LocaleCache.State(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for LocaleCache.State(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void **)(a2 + 48);
  uint64_t v6 = *(void **)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  char v8 = *(void **)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v7;
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = v5;
  id v11 = v6;
  id v12 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LocaleCache.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(a1 + 48);
  uint64_t v7 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v7;
  id v8 = v7;

  uint64_t v9 = *(void **)(a1 + 56);
  id v10 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v10;
  id v11 = v10;

  id v12 = *(void **)(a1 + 64);
  __int128 v13 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v13;
  id v14 = v13;

  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy105_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for LocaleCache.State(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();

  uint64_t v4 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocaleCache.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 105)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocaleCache.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 105) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 105) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LocaleCache.State()
{
  return &type metadata for LocaleCache.State;
}

uint64_t destroy for LocaleCache.State.IdentifierAndPrefs(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t initializeWithCopy for LocaleCache.State.IdentifierAndPrefs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    __int128 v6 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v6;
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
    __int128 v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    __int128 v8 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v8;
    __int128 v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v9;
  }

  else
  {
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v10;
    uint64_t v12 = *(void *)(a2 + 48);
    uint64_t v13 = *(void *)(a2 + 56);
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = v12;
    uint64_t v14 = *(void *)(a2 + 64);
    uint64_t v15 = *(void *)(a2 + 72);
    *(void *)(a1 + 56) = v13;
    *(void *)(a1 + 64) = v14;
    char v16 = *(void **)(a2 + 80);
    uint64_t v17 = *(void **)(a2 + 88);
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 80) = v16;
    BOOL v19 = *(void **)(a2 + 96);
    char v18 = *(void **)(a2 + 104);
    *(void *)(a1 + 88) = v17;
    *(void *)(a1 + 96) = v19;
    uint64_t v20 = *(void **)(a2 + 112);
    int64_t v28 = v18;
    uint64_t v29 = *(void *)(a2 + 120);
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v20;
    id v30 = v20;
    uint64_t v31 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = v29;
    *(void *)(a1 + 128) = v31;
    uint64_t v21 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v21;
    *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v22 = v16;
    id v23 = v17;
    id v24 = v19;
    id v25 = v28;
    id v26 = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t assignWithCopy for LocaleCache.State.IdentifierAndPrefs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 16);
  uint64_t v5 = (_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) == 1LL)
  {
    if (v6 == 1)
    {
      *uint64_t v4 = *v5;
      __int128 v7 = *(_OWORD *)(a2 + 32);
      __int128 v8 = *(_OWORD *)(a2 + 48);
      __int128 v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a1 + 48) = v8;
      __int128 v10 = *(_OWORD *)(a2 + 96);
      __int128 v11 = *(_OWORD *)(a2 + 112);
      __int128 v12 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 128) = v12;
      *(_OWORD *)(a1 + 96) = v10;
    }

    else
    {
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      BOOL v19 = *(void **)(a2 + 80);
      *(void *)(a1 + 80) = v19;
      uint64_t v20 = *(void **)(a2 + 88);
      *(void *)(a1 + 88) = v20;
      uint64_t v21 = *(void **)(a2 + 96);
      *(void *)(a1 + 96) = v21;
      id v22 = *(void **)(a2 + 104);
      *(void *)(a1 + 104) = v22;
      int v44 = *(void **)(a2 + 112);
      *(void *)(a1 + 112) = v44;
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
      *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
      *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v23 = v19;
      id v24 = v20;
      id v25 = v21;
      id v26 = v22;
      id v27 = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }

  else if (v6 == 1)
  {
    outlined destroy of LocalePreferences((id *)(a1 + 16));
    *uint64_t v4 = *v5;
    __int128 v13 = *(_OWORD *)(a2 + 80);
    __int128 v15 = *(_OWORD *)(a2 + 32);
    __int128 v14 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 32) = v15;
    *(_OWORD *)(a1 + 48) = v14;
    __int128 v17 = *(_OWORD *)(a2 + 112);
    __int128 v16 = *(_OWORD *)(a2 + 128);
    __int128 v18 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 112) = v17;
    *(_OWORD *)(a1 + 128) = v16;
    *(_OWORD *)(a1 + 96) = v18;
  }

  else
  {
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    int64_t v28 = *(void **)(a1 + 80);
    uint64_t v29 = *(void **)(a2 + 80);
    *(void *)(a1 + 80) = v29;
    id v30 = v29;

    uint64_t v31 = *(void **)(a1 + 88);
    id v32 = *(void **)(a2 + 88);
    *(void *)(a1 + 88) = v32;
    id v33 = v32;

    id v34 = *(void **)(a1 + 96);
    id v35 = *(void **)(a2 + 96);
    *(void *)(a1 + 96) = v35;
    id v36 = v35;

    id v37 = *(void **)(a1 + 104);
    int64_t v38 = *(void **)(a2 + 104);
    *(void *)(a1 + 104) = v38;
    id v39 = v38;

    char v40 = *(void **)(a1 + 112);
    char v41 = *(void **)(a2 + 112);
    *(void *)(a1 + 112) = v41;
    id v42 = v41;

    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
    *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
    *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
  }

  return a1;
}

__n128 __swift_memcpy156_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for LocaleCache.State.IdentifierAndPrefs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24) != 1LL)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    if (v5 != 1)
    {
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(void *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v10;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v11;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRelease();
      __int128 v12 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);

      __int128 v13 = *(void **)(a1 + 88);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);

      __int128 v14 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);

      __int128 v15 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);

      __int128 v16 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);

      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(a2 + 144);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = v17;
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
      return a1;
    }

    outlined destroy of LocalePreferences((id *)(a1 + 16));
  }

  __int128 v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  __int128 v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  __int128 v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  __int128 v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for LocaleCache.State.IdentifierAndPrefs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 156)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocaleCache.State.IdentifierAndPrefs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 152) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 156) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 156) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LocaleCache.State.IdentifierAndPrefs()
{
  return &type metadata for LocaleCache.State.IdentifierAndPrefs;
}

unint64_t lazy protocol witness table accessor for type LocaleCache.State.IdentifierAndPrefs and conformance LocaleCache.State.IdentifierAndPrefs()
{
  unint64_t result = lazy protocol witness table cache variable for type LocaleCache.State.IdentifierAndPrefs and conformance LocaleCache.State.IdentifierAndPrefs;
  if (!lazy protocol witness table cache variable for type LocaleCache.State.IdentifierAndPrefs and conformance LocaleCache.State.IdentifierAndPrefs)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for LocaleCache.State.IdentifierAndPrefs,  &type metadata for LocaleCache.State.IdentifierAndPrefs);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocaleCache.State.IdentifierAndPrefs and conformance LocaleCache.State.IdentifierAndPrefs);
  }

  return result;
}

uint64_t PredicateExpressions.Disjunction.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.Disjunction.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 52));
}

void PredicateExpressions.Disjunction.init(lhs:rhs:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_18321ADB0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 52),  v2,  v1);
}

void type metadata accessor for PredicateExpressions.Disjunction()
{
}

uint64_t PredicateExpressions.Disjunction.evaluate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  __int128 v6 = (uint64_t *)MEMORY[0x1895F8858](a1);
  __int128 v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v6;
  uint64_t v15 = *v6;
  (*(void (**)(char *__return_ptr, uint64_t *, void))(*(void *)(v10 + 32) + 16LL))( (char *)&v16 + 1,  &v15,  *(void *)(v10 + 16));
  if (!v3)
  {
    int v12 = BYTE1(v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a2);
    if (v12 == 1)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a2);
      char v11 = 1;
    }

    else
    {
      uint64_t v15 = v9;
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, void))(*(void *)(a2 + 40) + 16LL))( &v16,  &v15,  *(void *)(a2 + 24));
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a2);
      char v11 = v16;
    }
  }

  return v11 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Disjunction<A, B>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.Disjunction.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

void static PredicateExpressions.build_Disjunction<A, B>(lhs:rhs:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_18321AF8C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v3 + *(int *)(a1 + 52),  v2,  v1);
}

uint64_t PredicateExpressions.Disjunction.description.getter()
{
  v0._unint64_t object = (void *)0x80000001839CE3E0LL;
  v0._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x203A736872202CLL;
  v1._unint64_t object = (void *)0xE700000000000000LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41LL;
  v2._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

uint64_t PredicateExpressions.Disjunction<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.Disjunction<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  v12[5] = a5;
  _OWORD v12[6] = a4;
  v12[9] = a3;
  v12[4] = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  v12[7] = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  v12[8] = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v12[10] = v8;
  v12[11] = v8;
  v12[12] = v9;
  v12[13] = v10;
  v12[14] = v11;
  type metadata accessor for PredicateExpressions.Disjunction();
}

uint64_t sub_18321B24C(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 200) = v6;
  *(void *)(v4 - 192) = a1;
  *(void *)(v4 - 72) = v3;
  *(void *)(v4 - 184) = v8;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  uint64_t v10 = *(void *)(v4 - 144);
  uint64_t v11 = *(void *)(v4 - 128);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v12 = *(void *)(v4 - 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v12, v10, v11);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  uint64_t v13 = *(void *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v14 = *(void *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 176) + 32LL))(v12 + *(int *)(v14 + 52), v13, v2);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  uint64_t v15 = *(void *)(v4 - 200);
  (*(void (**)(void, uint64_t, uint64_t))(v15 + 16))(*(void *)(v4 - 168), v12, v14);
  __swift_destroy_boxed_opaque_existential_1(*(void *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Disjunction<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Disjunction<A, B>( void *a1)
{
  return PredicateExpressions.Disjunction<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Disjunction( uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_18321B5A4 + 4 * byte_1837C2DD0[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Disjunction( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _FileManagerImpl.setAttributes(_:ofItemAtPath:)( Swift::OpaquePointer _, Swift::String ofItemAtPath)
{
  uint64_t v3 = v2;
  unint64_t object = ofItemAtPath._object;
  uint64_t countAndFlagsBits = ofItemAtPath._countAndFlagsBits;
  if (*((void *)_._rawValue + 2))
  {
    unsigned int v7 = @"NSFilePosixPermissions";
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
    if ((v9 & 1) != 0)
    {
      outlined init with copy of Any(*((void *)_._rawValue + 7) + 32 * v8, (uint64_t)&v29);
    }

    else
    {
      __int128 v29 = 0u;
      __int128 v30 = 0u;
    }
  }

  else
  {
    __int128 v29 = 0u;
    __int128 v30 = 0u;
  }

  id v10 = specialized _readFileAttributePrimitive<A>(_:as:)((uint64_t)&v29);
  char v12 = v11;
  outlined destroy of Any?((uint64_t)&v29, &demangling cache variable for type metadata for Any?);
  if (*((void *)_._rawValue + 2))
  {
    char v13 = @"NSFileImmutable";
    uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v15 & 1) != 0)
    {
      outlined init with copy of Any(*((void *)_._rawValue + 7) + 32 * v14, (uint64_t)&v29);
    }

    else
    {
      __int128 v29 = 0u;
      __int128 v30 = 0u;
    }
  }

  else
  {
    __int128 v29 = 0u;
    __int128 v30 = 0u;
  }

  char v16 = specialized _readFileAttributePrimitive(_:as:)((uint64_t)&v29);
  outlined destroy of Any?((uint64_t)&v29, &demangling cache variable for type metadata for Any?);
  if (*((void *)_._rawValue + 2))
  {
    int v17 = @"NSFileAppendOnly";
    uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
    if ((v19 & 1) != 0)
    {
      outlined init with copy of Any(*((void *)_._rawValue + 7) + 32 * v18, (uint64_t)&v29);
    }

    else
    {
      __int128 v29 = 0u;
      __int128 v30 = 0u;
    }
  }

  else
  {
    __int128 v29 = 0u;
    __int128 v30 = 0u;
  }

  char v20 = specialized _readFileAttributePrimitive(_:as:)((uint64_t)&v29);
  outlined destroy of Any?((uint64_t)&v29, &demangling cache variable for type metadata for Any?);
  uint64_t v21 = MEMORY[0x186E20F44](v3);
  if (v21)
  {
    id v22 = (void *)v21;
    MEMORY[0x1895F8858](v21);
    v23[2] = countAndFlagsBits;
    v23[3] = object;
    char v24 = v16;
    char v25 = v20;
    id v26 = v10;
    LOBYTE(v27) = v12 & 1;
    rawValue = _._rawValue;
    specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)( countAndFlagsBits,  (unint64_t)object,  partial apply for closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:),  (uint64_t)v23);
  }

  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

void _FileManagerImpl.copyItem(atPath:toPath:options:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = MEMORY[0x186E20F44](v6);
  if (v12)
  {
    char v17 = 1;
    int v18 = (a5 << 10) & 0x4000000;
    uint64_t v19 = v12;
    _OWORD v14[2] = a1;
    void v14[3] = a2;
    uint64_t v14[4] = a3;
    v14[5] = a4;
    id v15 = (id)MEMORY[0x1895F8858](v12);
    char v16 = &v17;
    id v13 = v15;
    specialized String.withFileSystemRepresentation<A>(_:)( (uint64_t (*)(char *))_s10Foundation15_FileOperationsO010linkOrCopyB033_0F974932CC9FBACA9047618113061023LL_3dst4with8delegateySS_SSSo13NSFileManagerCxtKAA04LinkeF8DelegateAELLRzlFZySPys4Int8VGSgKXEfU_AC04copyB0_2toAG7optionsySS_SSAJSo0mnF7OptionsVtKFZ0fbP0L_V_TG5TA_0,  (uint64_t)v14,  a1,  a2);
  }

  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

uint64_t _FileManagerImpl.copyItem(at:to:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v227 = a3;
  uint64_t v6 = *(void **)a1;
  unsigned int v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(void **)a2;
  id v10 = *(id *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  swift_retain();
  id v12 = v6;
  swift_retain();
  uint64_t v229 = v5;
  id v230 = v7;
  id v228 = v3;
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v15 = objc_msgSend(v12, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v15 & 1) != 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  v232._uint64_t countAndFlagsBits = (uint64_t)v12;
  v232._unint64_t object = v7;
  uint64_t v233 = v8;
  URL.scheme.getter();
  if (!v13)
  {
    swift_release();
    swift_release();

    goto LABEL_15;
  }

  Swift::String v14 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v14._countAndFlagsBits == 1701603686 && v14._object == (void *)0xE400000000000000LL)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }

  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_15:
    id v20 = v12;
    swift_retain_n();
    swift_retain_n();
    id v21 = v20;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v233 = v8;
      id v22 = v21;
      swift_retain();
      swift_retain();
      Swift::String v23 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v23._countAndFlagsBits;
      Swift::String v232 = v23;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v23._object;
      }

      else
      {
        unint64_t object = (unint64_t)v23._object;
        if ((specialized BidirectionalCollection.last.getter(v23._countAndFlagsBits, (unint64_t)v23._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v232._countAndFlagsBits;
          unint64_t object = (unint64_t)v232._object;
        }
      }

      v231._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v39 = specialized Set._Variant.insert(_:)(&v234, 0x2FuLL);
      uint64_t v40 = v231._countAndFlagsBits;
      uint64_t v41 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000LL) == 0) {
        uint64_t v41 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v41)
      {
        id v228 = v22;
        v231._uint64_t countAndFlagsBits = countAndFlagsBits;
        v231._unint64_t object = (void *)object;
        MEMORY[0x1895F8858](v39);
        v221 = &v231;
        uint64_t v222 = v40;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v220,  countAndFlagsBits,  object);
        if (v42 == 1)
        {
          unint64_t v44 = (unint64_t)v231._object;
          Swift::Int v43 = v231._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v43, v44, v40);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v22 = v228;
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      id v26 = objc_msgSend(v21, sel__parameterString);
      if (v26)
      {
        uint64_t v27 = v26;
        id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        __int128 v30 = v29;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v31 = objc_msgSend(v21, sel_path)) != 0)
        {
          id v32 = v31;
          id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
          id v35 = v34;

          v232._uint64_t countAndFlagsBits = (uint64_t)v33;
          v232._unint64_t object = v35;
          swift_bridgeObjectRetain();
          v36._uint64_t countAndFlagsBits = 59LL;
          v36._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v36);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v37._uint64_t countAndFlagsBits = (uint64_t)v28;
          v37._unint64_t object = v30;
          String.append(_:)(v37);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v232._uint64_t countAndFlagsBits = 59LL;
          v232._unint64_t object = (void *)0xE100000000000000LL;
          v45._uint64_t countAndFlagsBits = (uint64_t)v28;
          v45._unint64_t object = v30;
          String.append(_:)(v45);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
      }

      else
      {
        id v46 = objc_msgSend(v21, sel_path);
        if (v46)
        {
          uint64_t v47 = v46;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
          swift_release();
          swift_release();
        }

        else
        {
          swift_release();
          swift_release();
        }
      }
    }

    int64_t v90 = (void *)objc_opt_self();
    uint64_t v91 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v92 = objc_msgSend( v90,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  262,  v91,  v21,  0,  0,  0,  0);
    goto LABEL_63;
  }

void _FileManagerImpl.removeItem(at:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  swift_retain();
  id v8 = v6;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v11 = objc_msgSend(v8, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v11 & 1) != 0) {
      goto LABEL_10;
    }
    goto LABEL_14;
  }

  v116._uint64_t countAndFlagsBits = (uint64_t)v8;
  v116._unint64_t object = v5;
  uint64_t v117 = v7;
  URL.scheme.getter();
  if (!v9)
  {
    swift_release();
    swift_release();

    goto LABEL_14;
  }

  Swift::String v10 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v10._countAndFlagsBits == 1701603686 && v10._object == (void *)0xE400000000000000LL)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }

  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
LABEL_14:
    id v18 = v8;
    swift_retain_n();
    swift_retain_n();
    id v19 = v18;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v114 = v3;
      uint64_t v117 = v7;
      id v20 = v19;
      swift_retain();
      swift_retain();
      Swift::String v21 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v21._countAndFlagsBits;
      Swift::String v116 = v21;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v21._object;
      }

      else
      {
        unint64_t object = (unint64_t)v21._object;
        if ((specialized BidirectionalCollection.last.getter(v21._countAndFlagsBits, (unint64_t)v21._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v116._countAndFlagsBits;
          unint64_t object = (unint64_t)v116._object;
        }
      }

      v115._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v50 = specialized Set._Variant.insert(_:)(&v118, 0x2FuLL);
      uint64_t v51 = v115._countAndFlagsBits;
      uint64_t v52 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000LL) == 0) {
        uint64_t v52 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v52)
      {
        id v113 = v20;
        v115._uint64_t countAndFlagsBits = countAndFlagsBits;
        v115._unint64_t object = (void *)object;
        MEMORY[0x1895F8858](v50);
        uint64_t v109 = (uint64_t)&v115;
        uint64_t v110 = v51;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v108,  countAndFlagsBits,  object);
        if (v53 == 1)
        {
          unint64_t v55 = (unint64_t)v115._object;
          Swift::Int v54 = v115._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v54, v55, v51);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v20 = v113;
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      id v24 = objc_msgSend(v19, sel__parameterString);
      if (v24)
      {
        char v25 = v24;
        id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        id v28 = v27;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v29 = objc_msgSend(v19, sel_path)) != 0)
        {
          __int128 v30 = v29;
          id v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
          id v33 = v32;

          v116._uint64_t countAndFlagsBits = (uint64_t)v31;
          v116._unint64_t object = v33;
          swift_bridgeObjectRetain();
          v34._uint64_t countAndFlagsBits = 59LL;
          v34._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v34);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v35._uint64_t countAndFlagsBits = (uint64_t)v26;
          v35._unint64_t object = v28;
          String.append(_:)(v35);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v116._uint64_t countAndFlagsBits = 59LL;
          v116._unint64_t object = (void *)0xE100000000000000LL;
          v67._uint64_t countAndFlagsBits = (uint64_t)v26;
          v67._unint64_t object = v28;
          String.append(_:)(v67);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
      }

      else
      {
        id v68 = objc_msgSend(v19, sel_path);
        if (v68)
        {
          uint64_t v69 = v68;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
          swift_release();
          swift_release();
        }

        else
        {
          swift_release();
          swift_release();
        }
      }
    }

    uint64_t v75 = (void *)objc_opt_self();
    uint64_t v76 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
     objc_msgSend( v75,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  262,  v76,  v19,  0,  0,  0,  0);
    goto LABEL_85;
  }

Swift::Bool __swiftcall _FileManagerImpl.isDeletableFile(atPath:)(Swift::String atPath)
{
  uint64_t v2 = v1;
  unint64_t object = atPath._object;
  uint64_t countAndFlagsBits = atPath._countAndFlagsBits;
  swift_bridgeObjectRetain();
  uint64_t Path = String._deletingLastPathComponent()(countAndFlagsBits, (unint64_t)object);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000LL) == 0) {
    uint64_t v8 = Path & 0xFFFFFFFFFFFFLL;
  }
  if (!v8)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = (void *)MEMORY[0x186E20F44](v2);
    if (!v9) {
      goto LABEL_21;
    }
    Swift::String v10 = v9;
    id v11 = objc_msgSend(v9, sel_currentDirectoryPath);

    uint64_t Path = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v7 = v12;
  }

  id v13 = (void *)MEMORY[0x186E20F44](v2);
  if (!v13) {
    goto LABEL_21;
  }
  id v14 = v13;
  unsigned __int8 v15 = objc_msgSend(v13, sel_isWritableFileAtPath_, String._bridgeToObjectiveCImpl()());

  swift_unknownObjectRelease();
  if ((v15 & 1) != 0)
  {
    uint64_t v16 = MEMORY[0x186E20F44](v2);
    if (!v16) {
      goto LABEL_21;
    }
    unint64_t v17 = (void *)v16;
    v18._uint64_t countAndFlagsBits = Path;
    v18._unint64_t object = (void *)v7;
    NSFileManager._fileStat(_:)(&v30, v18);

    swift_bridgeObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)&v30,  (uint64_t)v34,  &demangling cache variable for type metadata for stat?);
    if (_sSo4statVSgWOg((uint64_t)v34) != 1)
    {
      int v19 = v35;
      int v20 = S_ISVTX.getter() & v19;
      outlined init with copy of _FileManagerImpl(v2, (uint64_t)v29);
      if (v20)
      {
        Swift::String v21 = (void *)MEMORY[0x186E20F44](v29);
        if (!v21) {
          goto LABEL_21;
        }
        id v22 = v21;
        unsigned __int8 v23 = objc_msgSend(v21, sel_fileExistsAtPath_, String._bridgeToObjectiveCImpl()());

        swift_unknownObjectRelease();
        outlined destroy of _FileManagerImpl((uint64_t)v29);
        if ((v23 & 1) != 0)
        {
          uint64_t v24 = MEMORY[0x186E20F44](v2);
          if (v24)
          {
            char v25 = (void *)v24;
            v26._uint64_t countAndFlagsBits = countAndFlagsBits;
            v26._unint64_t object = object;
            NSFileManager._fileStat(_:)(&v31, v26);

            outlined init with take of LocalePreferences?( (uint64_t)&v31,  (uint64_t)v32,  &demangling cache variable for type metadata for stat?);
            if (_sSo4statVSgWOg((uint64_t)v32) != 1)
            {
              int v27 = v33;
              return v27 == getuid();
            }

            return 0;
          }

id specialized _readFileAttributePrimitive<A>(_:as:)(uint64_t a1)
{
  if (!v56)
  {
    unint64_t v6 = &demangling cache variable for type metadata for Any?;
    unint64_t v7 = &v55;
    goto LABEL_13;
  }

  outlined init with take of Any(&v55, v58);
  outlined init with copy of Any((uint64_t)v58, (uint64_t)&v55);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) != 0)
  {
    id v1 = *(id *)&v52[0];
    id v2 = objc_msgSend(v1, sel_unsignedIntegerValue);
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInteger_, v2);
    char v4 = static NSObject.== infix(_:_:)();

    if ((v4 & 1) != 0)
    {
      uint64_t v5 = v58;
LABEL_20:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
      return v2;
    }
  }

  outlined init with copy of Any((uint64_t)v58, (uint64_t)&v55);
  if (!swift_dynamicCast())
  {
    outlined init with copy of Any((uint64_t)v58, (uint64_t)v54);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryInteger);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(v52, (uint64_t)&v55);
      uint64_t v8 = v56;
      uint64_t v9 = v57;
      Swift::String v10 = __swift_project_boxed_opaque_existential_1(&v55, v56);
      id v11 = v45;
      unint64_t v12 = *(void **)(v8 - 8);
      uint64_t v13 = v12[8];
      MEMORY[0x1895F8858](v10);
      unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0LL;
      unsigned __int8 v15 = (char *)v45 - v14;
      uint64_t v16 = (void (*)(char *))v12[2];
      v16((char *)v45 - v14);
      uint64_t v17 = dispatch thunk of static BinaryInteger.isSigned.getter();
      char v18 = v17;
      uint64_t v51 = v45;
      MEMORY[0x1895F8858](v17);
      int v19 = (char *)v45 - v14;
      ((void (*)(char *, char *, uint64_t))v16)((char *)v45 - v14, (char *)v45 - v14, v8);
      if ((v18 & 1) != 0)
      {
        uint64_t v50 = (char *)v45 - v14;
        Swift::String v48 = v45;
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        uint64_t v49 = v9;
        uint64_t v21 = AssociatedTypeWitness;
        uint64_t v47 = v45;
        MEMORY[0x1895F8858](AssociatedTypeWitness);
        id v22 = v12;
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        uint64_t v24 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v21, AssociatedConformanceWitness);
        id v46 = v45;
        MEMORY[0x1895F8858](v24);
        char v25 = (char *)v45 - v14;
        uint64_t v26 = v49;
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
        char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
        id v28 = (void (*)(char *, uint64_t))v12[1];
        v28(v25, v8);
        v28(v19, v8);
        if ((v27 & 1) != 0)
        {
          v28(v50, v8);
LABEL_32:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
          return 0LL;
        }

        uint64_t v47 = v22;
        id v11 = v48;
        uint64_t v9 = v26;
        unsigned __int8 v15 = v50;
      }

      else
      {
        uint64_t v47 = v12;
        id v28 = (void (*)(char *, uint64_t))v12[1];
        v28((char *)v45 - v14, v8);
      }

      uint64_t v29 = dispatch thunk of BinaryInteger.bitWidth.getter();
      MEMORY[0x1895F8858](v29);
      ((void (*)(char *, char *, uint64_t))v16)((char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v15, v8);
      if (v29 <= 63)
      {
        v28((char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
        goto LABEL_19;
      }

      uint64_t v50 = v15;
      *(void *)&v52[0] = -1LL;
      char v31 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v32 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v31 & 1) != 0)
      {
        if (v32 <= 64)
        {
          Swift::String v48 = v11;
          uint64_t v33 = swift_getAssociatedTypeWitness();
          uint64_t v49 = v9;
          uint64_t v34 = v33;
          v45[1] = v45;
          MEMORY[0x1895F8858](v33);
          uint64_t v35 = swift_getAssociatedConformanceWitness();
          uint64_t v36 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v34, v35);
          MEMORY[0x1895F8858](v36);
          id v46 = v45;
          unint64_t v37 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0LL;
          dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
          char v38 = dispatch thunk of static Comparable.> infix(_:_:)();
          uint64_t v39 = ((uint64_t (*)(char *, uint64_t))v28)((char *)v45 - v37, v8);
          unint64_t v40 = *(void *)&v52[0];
          MEMORY[0x1895F8858](v39);
          id v41 = (char *)v45 - v37;
          ((void (*)(char *, char *, uint64_t))v47[4])((char *)v45 - v37, (char *)v45 - v37, v8);
          if ((v38 & 1) == 0)
          {
            v28(v41, v8);
            unsigned __int8 v15 = v50;
            goto LABEL_19;
          }

          unint64_t v42 = dispatch thunk of BinaryInteger._lowWord.getter();
          v28(v41, v8);
          unsigned __int8 v15 = v50;
          if (v40 >= v42)
          {
LABEL_19:
            id v2 = (id)dispatch thunk of BinaryInteger._lowWord.getter();
            v28(v15, v8);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
            uint64_t v5 = &v55;
            goto LABEL_20;
          }

unint64_t NSFileProtectionType.intValue.getter(void *a1)
{
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionComplete");
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v4 == v5)
  {
    uint64_t v9 = 1LL;
LABEL_12:
    swift_bridgeObjectRelease_n();
    char v8 = 0;
    return v9 | ((unint64_t)(v8 & 1) << 32);
  }

  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    char v8 = 0;
    uint64_t v9 = 1LL;
    return v9 | ((unint64_t)(v8 & 1) << 32);
  }

  Swift::String v10 = (void *)String._bridgeToObjectiveCImpl()();
  id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v13 == v14)
  {
    uint64_t v9 = 2LL;
LABEL_11:
    swift_unknownObjectRelease();
    goto LABEL_12;
  }

  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0) {
    goto LABEL_15;
  }
  id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionCompleteUnlessOpen");
  uint64_t v19 = v18;
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v19 == v20)
  {
    uint64_t v9 = 2LL;
    goto LABEL_12;
  }

  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
LABEL_15:
    char v8 = 0;
    uint64_t v9 = 2LL;
    return v9 | ((unint64_t)(v8 & 1) << 32);
  }

  id v22 = (void *)String._bridgeToObjectiveCImpl()();
  id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;
  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v25 == v26)
  {
    uint64_t v9 = 3LL;
    goto LABEL_11;
  }

  char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0) {
    goto LABEL_24;
  }
  id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionCompleteUntilFirstUserAuthentication");
  uint64_t v30 = v29;
  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v30 == v31)
  {
    uint64_t v9 = 3LL;
    goto LABEL_12;
  }

  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v32 & 1) != 0)
  {
LABEL_24:
    char v8 = 0;
    uint64_t v9 = 3LL;
    return v9 | ((unint64_t)(v8 & 1) << 32);
  }

  id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionNone");
  uint64_t v35 = v34;
  if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v35 == v36)
  {
    uint64_t v9 = 4LL;
    goto LABEL_12;
  }

  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v37 & 1) != 0)
  {
    char v8 = 0;
    uint64_t v9 = 4LL;
  }

  else
  {
    id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFileProtectionCompleteWhenUserInactive");
    uint64_t v40 = v39;
    if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v40 == v41) {
      char v42 = 1;
    }
    else {
      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v42 & 1) != 0) {
      uint64_t v9 = 7LL;
    }
    else {
      uint64_t v9 = 0LL;
    }
    char v8 = v42 ^ 1;
  }

  return v9 | ((unint64_t)(v8 & 1) << 32);
}

uint64_t _FileManagerImpl._fileExists(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v5 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_24:
    __break(1u);
  }

  if (v5 < -1) {
    goto LABEL_24;
  }
  uint64_t v6 = v5 + 1;
  if (v5 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    char v8 = (char *)&v22 - v7;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v8, v6, 1, a1, a2);
    char v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0 || (memset(&v23, 0, 28), memset(&v23.st_atimespec, 0, 112), stat(v8, &v23)))
    {
      BOOL v11 = 0;
      int v12 = 0;
    }

    else
    {
      int st_mode = v23.st_mode;
      int v19 = S_IFMT.getter() & st_mode;
      BOOL v11 = v19 == (unsigned __int16)S_IFDIR.getter();
      int v12 = 1;
    }
  }

  else
  {
    uint64_t v13 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v13, v6, 1, a1, a2);
    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0 || (memset(&v23, 0, 28), memset(&v23.st_atimespec, 0, 112), stat(v13, &v23)))
    {
      BOOL v11 = 0;
      int v12 = 0;
    }

    else
    {
      int v20 = v23.st_mode;
      int v21 = S_IFMT.getter() & v20;
      BOOL v11 = v21 == (unsigned __int16)S_IFDIR.getter();
      int v12 = 1;
    }

    MEMORY[0x186E20E60](v13, -1LL, -1LL);
  }

  if (v11) {
    int v16 = 256;
  }
  else {
    int v16 = 0;
  }
  return v16 | v12;
}

BOOL _FileManagerImpl._fileAccessibleForMode(_:_:)(uint64_t a1, unint64_t a2, int a3)
{
  v18[1] = *MEMORY[0x1895F89C0];
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v7 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_19:
    __break(1u);
  }

  if (v7 < -1) {
    goto LABEL_19;
  }
  uint64_t v8 = v7 + 1;
  if (v7 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    char v10 = (char *)v18 - v9;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v10, v8, 1, a1, a2);
    char v12 = v11;
    swift_bridgeObjectRelease();
    return (v12 & 1) == 0 && access(v10, a3) == 0;
  }

  else
  {
    char v14 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v8, 1, a1, a2);
    char v16 = v15;
    swift_bridgeObjectRelease();
    BOOL v13 = (v16 & 1) == 0 && access(v14, a3) == 0;
    MEMORY[0x186E20E60](v14, -1LL, -1LL);
  }

  return v13;
}

uint64_t _sSo4statVSgWOg(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

void closure #1 in _FileManagerImpl.attributesOfItem(atPath:)( const char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v187[3] = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))0x100,  a2,  a3,  0LL,  0LL,  0LL,  0LL,  0LL,  &v182,  0LL,  0LL);
LABEL_93:
    swift_willThrow();
    return;
  }

  memset(&v182, 0, 28);
  memset(&v182.st_atimespec, 0, 112);
  if (lstat(a1, &v182))
  {
    int v9 = MEMORY[0x186E1B0E8]();
    int v10 = v9;
    uint64_t v11 = 263LL;
    switch(v9)
    {
      case 1:
      case 13:
        uint64_t v11 = 257LL;
        goto LABEL_87;
      case 2:
        uint64_t v11 = 260LL;
        goto LABEL_87;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_81;
      case 27:
        goto LABEL_87;
      default:
        if (v9 == 63)
        {
          uint64_t v11 = 258LL;
        }

        else
        {
          if (v9 == 102)
          {
            id v65 = 0LL;
            uint64_t v11 = 256LL;
            goto LABEL_92;
          }

uint64_t closure #1 in _FileManagerImpl.attributesOfFileSystem(forPath:)@<X0>( const char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v90 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    bzero(&v85, 0x878uLL);
    if (statfs(a1, &v85))
    {
      int v8 = MEMORY[0x186E1B0E8]();
      uint64_t v9 = 263LL;
      switch(v8)
      {
        case 1:
        case 13:
          uint64_t v9 = 257LL;
          goto LABEL_53;
        case 2:
          uint64_t v9 = 260LL;
          goto LABEL_53;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_50;
        case 27:
          goto LABEL_53;
        default:
          if (v8 == 63)
          {
            uint64_t v9 = 258LL;
          }

          else
          {
            if (v8 == 102)
            {
              id v67 = 0LL;
              uint64_t v9 = 256LL;
              goto LABEL_61;
            }

uint64_t closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)( char *a1, uint64_t a2, unint64_t a3, unsigned __int8 a4, unsigned __int8 a5, unint64_t a6, char a7, uint64_t a8)
{
  uint64_t v201 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))0x200,  a2,  a3,  0LL,  0LL,  0LL,  0LL,  0LL,  &v189,  0LL,  0LL);
    return swift_willThrow();
  }

  uid_t v13 = a1;
  int v14 = a5;
  uint64_t v15 = a4;
  uint64_t v16 = swift_allocObject();
  _ss6ResultOySo4statV10Foundation10CocoaErrorVGSgWOi0_((uint64_t)v200);
  outlined init with take of LocalePreferences?( (uint64_t)v200,  v16 + 16,  &demangling cache variable for type metadata for Result<stat, CocoaError>?);
  if ((_DWORD)v15 == 2)
  {
    if (v14 == 2) {
      goto LABEL_25;
    }
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v16;
    *(void *)(v17 + 24) = v13;
    unint64_t v18 = v187;
    uint64_t v19 = a2;
    *(void *)(v17 + 32) = a2;
    *(void *)(v17 + 40) = v187;
    *(_BYTE *)(v17 + 48) = v14;
    *(_BYTE *)(v17 + 49) = 2;
LABEL_8:
    swift_retain_n();
    swift_bridgeObjectRetain();
    getter of statAtPath #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)( v16,  v13,  v19,  v18,  (uint64_t)v197);
    outlined init with take of LocalePreferences?( (uint64_t)v197,  (uint64_t)&v198,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
    outlined init with take of LocalePreferences?( (uint64_t)&v198,  (uint64_t)&v189,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
    if (_ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg((uint64_t)&v189) == 1)
    {
      outlined init with take of LocalePreferences?( (uint64_t)&v198,  (uint64_t)v196,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
      unint64_t v192 = *(void *)destructiveProjectEnumData for PredicateCodableError(v196, v22);
      lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
      swift_willThrowTypedImpl();
LABEL_149:
      swift_release();
      return swift_release_n();
    }

    outlined init with take of LocalePreferences?( (uint64_t)&v198,  (uint64_t)v196,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
    __uint32_t v25 = *(_DWORD *)(destructiveProjectEnumData for PredicateCodableError(v196, v24) + 116);
    unsigned int v26 = v25 & 0xFFFFFFFB;
    if ((v14 & 1) != 0) {
      unsigned int v26 = v25 | 4;
    }
    if (v14 != 2) {
      __uint32_t v25 = v26;
    }
    unsigned int v27 = v25 & 0xFFFFFFFD;
    if ((v15 & 1) != 0) {
      unsigned int v27 = v25 | 2;
    }
    if ((_DWORD)v15 == 2) {
      __uint32_t v28 = v25;
    }
    else {
      __uint32_t v28 = v27;
    }
    if (chflags(v13, v28))
    {
      int v29 = MEMORY[0x186E1B0E8]();
      LODWORD(v23) = v29;
      uint64_t v30 = 4LL;
      switch(v29)
      {
        case 1:
        case 13:
          uint64_t v30 = 513LL;
          goto LABEL_143;
        case 2:
          goto LABEL_143;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_137;
        case 17:
          uint64_t v30 = 516LL;
          goto LABEL_143;
        case 28:
        case 69:
          uint64_t v30 = 640LL;
          goto LABEL_143;
        case 30:
          uint64_t v30 = 642LL;
          goto LABEL_143;
        case 63:
          uint64_t v30 = 514LL;
          goto LABEL_143;
        default:
          if (v29 == 102)
          {
            id v72 = 0LL;
            uint64_t v30 = 512LL;
LABEL_148:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v30,  a2,  v187,  v72,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v194,  0LL,  0LL);
            swift_willThrow();
            goto LABEL_149;
          }

LABEL_263:
          uint64_t v140 = 256LL;
        }

                    id v152 = (4 * *(_BYTE *)(v151 + 18) + 8) & 0x3C;
                    uint64_t v150 = ((-15LL << v152) - 1) & v150 | (v153 << v152);
                    uint64_t v15 = *(void *)(v151 + 24 + 24 * v153);
                    swift_unknownObjectRetain();
                    uint64_t result = (void *)swift_unknownObjectRelease();
                    uint64_t v151 = v15;
                    if (!*(_BYTE *)(v15 + 18)) {
                      goto LABEL_289;
                    }
                  }
                }

                uint64_t result = (void *)swift_unknownObjectRetain_n();
                uint64_t v150 = 0LL;
                id v35 = v8;
                uint64_t v15 = v146;
LABEL_289:
                char v160 = *(unsigned __int16 *)(v15 + 16);
                if (*(_WORD *)(v15 + 16))
                {
                  int v161 = *(void *)(v15 + 24);
                  uint64_t v22 = __OFSUB__(v35, v161);
                  char v162 = v35 - v161;
                  if (v22) {
                    goto LABEL_403;
                  }
                  if (__OFADD__(v162, 1LL)) {
                    goto LABEL_404;
                  }
                  if (v162 + 1 <= 0)
                  {
                    char v160 = 0LL;
                    goto LABEL_327;
                  }

                  if ((_DWORD)v160 != 1)
                  {
                    uint64_t v163 = *(void *)(v15 + 48);
                    id v35 = v162 - v163;
                    if (__OFSUB__(v162, v163)) {
                      goto LABEL_406;
                    }
                    if (__OFADD__(v35, 1LL)) {
                      goto LABEL_407;
                    }
                    if (v35 + 1 >= 1)
                    {
                      if ((_DWORD)v160 != 2)
                      {
                        id v166 = (void *)(v15 + 72);
                        id v167 = 2LL;
                        while (v160 != v167)
                        {
                          char v162 = v35 - *v166;
                          if (__OFSUB__(v35, *v166)) {
                            goto LABEL_388;
                          }
                          if (__OFADD__(v162, 1LL)) {
                            goto LABEL_389;
                          }
                          if (v162 + 1 < 1)
                          {
                            char v160 = v167;
                            goto LABEL_327;
                          }

                          ++v167;
                          v166 += 3;
                          id v35 = v162;
                          if (v160 == v167) {
                            goto LABEL_299;
                          }
                        }

                        goto LABEL_387;
                      }

                      goto LABEL_298;
                    }

                    char v160 = 1LL;
                    id v35 = v162;
LABEL_327:
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    int v14 = v150 & 0xFFFFFFFFFFFFF0FFLL | (v160 << 8);
LABEL_52:
                    swift_unknownObjectRetain();
                    uint64_t v11 = v148;
                    char v177 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v148, v14, v15, v146, v149);
                    uint64_t result = (void *)swift_unknownObjectRelease_n();
                    uint64_t v9 = a3;
                    goto LABEL_53;
                  }
                }

                else
                {
LABEL_298:
                  char v162 = v35;
                }

        int v120 = 0LL;
      }
    }

    else
    {
      if (!obja) {
        goto LABEL_263;
      }
      else {
        int v120 = 0LL;
      }
    }

uint64_t getter of statAtPath #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)@<X0>( uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v9 = a1 + 16;
  outlined init with take of LocalePreferences?( a1 + 16,  (uint64_t)v35,  &demangling cache variable for type metadata for Result<stat, CocoaError>?);
  outlined init with take of LocalePreferences?( (uint64_t)v35,  (uint64_t)v36,  &demangling cache variable for type metadata for Result<stat, CocoaError>?);
  if (_ss6ResultOySo4statV10Foundation10CocoaErrorVGSgWOg((uint64_t)v36) == 1)
  {
    memset(&v30, 0, 28);
    memset(&v30.st_atimespec, 0, 112);
    if (lstat(a2, &v30))
    {
      dev_t v10 = MEMORY[0x186E1B0E8]();
      dev_t v11 = v10;
      uint64_t v12 = 4LL;
      switch(v10)
      {
        case 1:
        case 13:
          uint64_t v12 = 513LL;
          goto LABEL_14;
        case 2:
          goto LABEL_14;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_10;
        case 17:
          uint64_t v12 = 516LL;
          goto LABEL_14;
        case 28:
        case 69:
          uint64_t v12 = 640LL;
          goto LABEL_14;
        case 30:
          uint64_t v12 = 642LL;
          goto LABEL_14;
        case 63:
          uint64_t v12 = 514LL;
          goto LABEL_14;
        default:
          if (v10 == 102)
          {
            id v15 = 0LL;
            uint64_t v16 = 512LL;
          }

          else
          {
LABEL_10:
            uint64_t v12 = 512LL;
LABEL_14:
            uint64_t v29 = v12;
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
            {
              unint64_t v33 = 0LL;
              unint64_t v34 = 0xE000000000000000LL;
              _StringGuts.grow(_:)(22LL);
              swift_bridgeObjectRelease();
              unint64_t v33 = 0xD000000000000014LL;
              unint64_t v34 = 0x80000001839C9190LL;
              v32.uint64_t st_dev = v11;
              v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v28);
              swift_bridgeObjectRelease();
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x183223B68LL);
            }

            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v17 = (int)POSIXErrorCode.rawValue.getter();
            id v18 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
            uint64_t v19 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v15 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, v17, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v20 = objc_msgSend(v15, sel_domain);
            id v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
            uint64_t v23 = v22;

            if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v23 == v24)
            {
              swift_bridgeObjectRelease_n();
            }

            else
            {
              char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v25 & 1) == 0) {
                __break(1u);
              }
            }

            uint64_t v16 = v29;
          }

          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v16,  a3,  a4,  v15,  0LL,  0LL,  0LL,  0LL,  &v32,  0LL,  0LL);
          _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi0_((uint64_t)&v32);
          break;
      }
    }

    else
    {
      stat v32 = v30;
      _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi_((uint64_t)&v32);
    }

    outlined init with take of LocalePreferences?( (uint64_t)&v32,  (uint64_t)&v33,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
    outlined init with take of LocalePreferences?( (uint64_t)&v33,  (uint64_t)v31,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
    destructiveProjectEnumData for PredicateCodableError(v31, v26);
    outlined init with take of LocalePreferences?( v9,  (uint64_t)&v32,  &demangling cache variable for type metadata for Result<stat, CocoaError>?);
    outlined init with take of LocalePreferences?( (uint64_t)v31,  v9,  &demangling cache variable for type metadata for Result<stat, CocoaError>?);
    outlined retain of Result<stat, CocoaError>((uint64_t)&v33);
    outlined release of Result<stat, CocoaError>?( (uint64_t)&v32,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of Result<stat, CocoaError>?);
    uid_t v13 = &v33;
    uint64_t v14 = a5;
  }

  else
  {
    uid_t v13 = (unint64_t *)v36;
    uint64_t v14 = a5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v13,  v14,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
  return outlined release of Result<stat, CocoaError>?( (uint64_t)v35,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of Result<stat, CocoaError>?);
}

uint64_t closure #2 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)( uint64_t a1, const char *a2, uint64_t a3, unint64_t a4, char a5, char a6)
{
  if (_ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg((uint64_t)v35) == 1)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v34,  (uint64_t)v32,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
    uint64_t v36 = *(void *)destructiveProjectEnumData for PredicateCodableError(v32, v11);
    lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
    return swift_willThrowTypedImpl();
  }

  outlined init with take of LocalePreferences?( (uint64_t)v34,  (uint64_t)v32,  &demangling cache variable for type metadata for Result<stat, CocoaError>);
  __uint32_t v14 = *(_DWORD *)(destructiveProjectEnumData for PredicateCodableError(v32, v13) + 116);
  unsigned int v15 = v14 & 0xFFFFFFFB;
  if ((a5 & 1) != 0) {
    unsigned int v15 = v14 | 4;
  }
  if (a5 != 2) {
    __uint32_t v14 = v15;
  }
  unsigned int v16 = v14 & 0xFFFFFFFD;
  if ((a6 & 1) != 0) {
    unsigned int v16 = v14 | 2;
  }
  if (a6 == 2) {
    __uint32_t v17 = v14;
  }
  else {
    __uint32_t v17 = v16;
  }
  uint64_t result = chflags(a2, v17);
  if ((_DWORD)result)
  {
    int v18 = MEMORY[0x186E1B0E8]();
    uint64_t v19 = 4LL;
    switch(v18)
    {
      case 1:
      case 13:
        uint64_t v19 = 513LL;
        goto LABEL_22;
      case 2:
        goto LABEL_22;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_18;
      case 17:
        uint64_t v19 = 516LL;
        goto LABEL_22;
      case 28:
      case 69:
        uint64_t v19 = 640LL;
        goto LABEL_22;
      case 30:
        uint64_t v19 = 642LL;
        goto LABEL_22;
      case 63:
        uint64_t v19 = 514LL;
        goto LABEL_22;
      default:
        if (v18 == 102)
        {
          id v20 = 0LL;
          uint64_t v19 = 512LL;
LABEL_27:
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v19,  a3,  a4,  v20,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))v31,  0LL,  0LL);
          return swift_willThrow();
        }

uint64_t closure #3 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)( const char *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >= 0x10000)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_23;
  }

  uint64_t result = chmod(a1, a2);
  if (!(_DWORD)result) {
    return result;
  }
  int v8 = MEMORY[0x186E1B0E8]();
  int v4 = v8;
  uint64_t v9 = 4LL;
  switch(v8)
  {
    case 1:
    case 13:
      uint64_t v9 = 513LL;
      goto LABEL_12;
    case 2:
      goto LABEL_12;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      goto LABEL_8;
    case 17:
      uint64_t v9 = 516LL;
      goto LABEL_12;
    case 28:
    case 69:
      uint64_t v9 = 640LL;
      goto LABEL_12;
    case 30:
      uint64_t v9 = 642LL;
      goto LABEL_12;
    case 63:
      uint64_t v9 = 514LL;
      goto LABEL_12;
    default:
      if (v8 != 102)
      {
LABEL_8:
        uint64_t v9 = 512LL;
LABEL_12:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v11 = (int)POSIXErrorCode.rawValue.getter();
          id v12 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v13 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v10 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, v11, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v14 = objc_msgSend(v10, sel_domain);
          id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
          uint64_t v17 = v16;

          if (v15 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v17 != v18)
          {
            char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v20 & 1) != 0) {
              goto LABEL_20;
            }
            __break(1u);
          }

          swift_bridgeObjectRelease_n();
          goto LABEL_20;
        }

void specialized _conditionallyBridgeFromObjectiveC_bridgeable<A>(_:_:)(uint64_t a1)
{
  if (!*MEMORY[0x189604DE8])
  {
    __break(1u);
    goto LABEL_10;
  }

  if (*MEMORY[0x189604DE8] != a1)
  {
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 1);
    char v3 = static NSObject.== infix(_:_:)();

    if ((v3 & 1) == 0)
    {
      if (*MEMORY[0x189604DE0])
      {
        if (*MEMORY[0x189604DE0] != a1)
        {
          id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0);
          static NSObject.== infix(_:_:)();
        }

        return;
      }

unint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s6UInt32VSg_Tg507_sSRys4f5VGxs5e30_pIgyrzo_ACxsAD_pIegyrzr_lTRs6h77VSg_TG5038_ss11_StringGutsV11withCStringyxxSPys4a23VGKXEKlFxSRyAEGKXEfU_s6c75Q114_TG5062_s10Foundation16_FileManagerImplV24_userAccountNameToNumberys6f14O29SSFZAGSPys4E7VGXEfU_Tf3nnpf_nTf3nnnpf_nTf1cn_nTm( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3();
  if (v3)
  {
    unsigned __int8 v4 = 0;
    uint64_t v5 = *(unsigned int *)(v3 + 16);
  }

  else
  {
    uint64_t v5 = 0LL;
    unsigned __int8 v4 = 1;
  }

  return v5 | ((unint64_t)v4 << 32);
}

uint64_t specialized _readFileAttributePrimitive(_:as:)(uint64_t a1)
{
  if (!v56)
  {
    unsigned __int8 v4 = &demangling cache variable for type metadata for Any?;
    uint64_t v5 = &v55;
    goto LABEL_12;
  }

  outlined init with take of Any(&v55, v58);
  outlined init with copy of Any((uint64_t)v58, (uint64_t)&v55);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) != 0)
  {
    specialized _conditionallyBridgeFromObjectiveC_bridgeable<A>(_:_:)(*(uint64_t *)&v52[0]);
    uint64_t v2 = v1;
    int v3 = v1;

    if (v3 != 2) {
      goto LABEL_6;
    }
  }

  outlined init with copy of Any((uint64_t)v58, (uint64_t)&v55);
  if (!swift_dynamicCast())
  {
    outlined init with copy of Any((uint64_t)v58, (uint64_t)v54);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryInteger);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(v52, (uint64_t)&v55);
      uint64_t v6 = v56;
      uint64_t v7 = v57;
      int v8 = __swift_project_boxed_opaque_existential_1(&v55, v56);
      uint64_t v9 = *(void **)(v6 - 8);
      uint64_t v10 = v9[8];
      MEMORY[0x1895F8858](v8);
      unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0LL;
      id v12 = (char *)&v44 - v11;
      uint64_t v13 = (void (*)(char *))v9[2];
      v13((char *)&v44 - v11);
      uint64_t v14 = dispatch thunk of static BinaryInteger.isSigned.getter();
      char v15 = v14;
      int v50 = &v44;
      MEMORY[0x1895F8858](v14);
      ((void (*)(char *, char *, uint64_t))v13)((char *)&v44 - v11, (char *)&v44 - v11, v6);
      double v51 = &v44;
      BOOL v16 = (v15 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
      uint64_t v48 = v9;
      uint64_t v18 = (uint64_t (*)(char *, uint64_t))v9[1];
      uint64_t v19 = v18((char *)&v44 - v11, v6);
      char v49 = &v44;
      MEMORY[0x1895F8858](v19);
      char v20 = (char *)&v44 - v11;
      ((void (*)(char *, char *, uint64_t))v13)((char *)&v44 - v11, (char *)&v44 - v11, v6);
      if (v16)
      {
        *(void *)&v52[0] = 0x8000000000000000LL;
        if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
        {
          uint64_t v21 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if (v21 < 64)
          {
LABEL_25:
            uint64_t v24 = dispatch thunk of BinaryInteger._lowWord.getter();
            v18(v20, v6);
            goto LABEL_28;
          }

          goto LABEL_22;
        }

        char v22 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v21 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if ((v22 & 1) != 0)
        {
          if (v21 <= 64)
          {
            uint64_t v46 = *(void *)(*(void *)(v7 + 24) + 16LL);
            uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
            unint64_t v47 = &v44;
            MEMORY[0x1895F8858](AssociatedTypeWitness);
            uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
            uint64_t v37 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
            uint64_t v44 = (uint64_t)&v44;
            MEMORY[0x1895F8858](v37);
            unint64_t v45 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0LL;
            int v38 = (char *)&v44 - v45;
            dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
            char v39 = dispatch thunk of static Comparable.< infix(_:_:)();
            uint64_t v40 = v18(v38, v6);
            MEMORY[0x1895F8858](v40);
            char v41 = (char *)&v44 - v45;
            ((void (*)(char *, char *, uint64_t))v48[4])((char *)&v44 - v45, v20, v6);
            if ((v39 & 1) != 0)
            {
              v18(v41, v6);
              goto LABEL_50;
            }

            uint64_t v42 = *(void *)&v52[0];
            uint64_t v43 = dispatch thunk of BinaryInteger._lowWord.getter();
            v18(v41, v6);
            if (v43 < v42) {
              goto LABEL_50;
            }
LABEL_28:
            uint64_t v25 = dispatch thunk of BinaryInteger.bitWidth.getter();
            MEMORY[0x1895F8858](v25);
            ((void (*)(char *, char *, uint64_t))v13)( (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v12,  v6);
            if (v25 < 65)
            {
              uint64_t v28 = dispatch thunk of BinaryInteger.bitWidth.getter();
              uint64_t v26 = v18((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
              if (v28 == 64)
              {
                uint64_t v26 = dispatch thunk of static BinaryInteger.isSigned.getter();
                char v27 = v26 ^ 1;
              }

              else
              {
                char v27 = 0;
              }
            }

            else
            {
              uint64_t v26 = v18((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
              char v27 = 1;
            }

            MEMORY[0x1895F8858](v26);
            ((void (*)(char *, char *, uint64_t))v13)( (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v12,  v6);
            if ((v27 & 1) != 0)
            {
              *(void *)&v52[0] = 0x7FFFFFFFFFFFFFFFLL;
              char v29 = dispatch thunk of static BinaryInteger.isSigned.getter();
              uint64_t v30 = dispatch thunk of BinaryInteger.bitWidth.getter();
              if ((v29 & 1) != 0)
              {
                if (v30 > 64)
                {
                  MEMORY[0x1895F8858](v30);
                  lazy protocol witness table accessor for type Int and conformance Int();
                  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                  char v31 = dispatch thunk of static Comparable.< infix(_:_:)();
                  v18((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
                  v18((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
                  goto LABEL_41;
                }
              }

              else if (v30 > 63)
              {
                unint64_t v47 = &v44;
                v54[0] = 0x7FFFFFFFFFFFFFFFLL;
                MEMORY[0x1895F8858](v30);
                stat v32 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                uint64_t v33 = ((uint64_t (*)(char *, char *, uint64_t))v48[4])(v32, v32, v6);
                MEMORY[0x1895F8858](v33);
                lazy protocol witness table accessor for type Int and conformance Int();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                char v31 = dispatch thunk of static Comparable.< infix(_:_:)();
                v18(v32, v6);
                v18(v32, v6);
LABEL_41:
                if ((v31 & 1) == 0) {
                  goto LABEL_42;
                }
LABEL_50:
                v18(v12, v6);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
                return 2LL;
              }

              dispatch thunk of BinaryInteger._lowWord.getter();
              v18((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
            }

            else
            {
              v18((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
            }

uint64_t specialized _FileManagerImpl.moveItem(atPath:toPath:options:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = (void *)v15[0];
  v14[0] = v15[0];
  v14[1] = v15[1];
  _OWORD v14[2] = v15[2];
  URL.init(fileURLWithPath:)(a3, a4, (uint64_t)v13);
  int v8 = (void *)v13[0];
  v12[0] = v13[0];
  v12[1] = v13[1];
  _OWORD v12[2] = v13[2];
  uint64_t v9 = (void *)MEMORY[0x186E20F44](v4);
  if (v9)
  {
    uint64_t v10 = v9;
    specialized static _FileOperations.moveFile(_:to:with:options:)((uint64_t)v14, (uint64_t)v12, v9);

    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t specialized _FileManagerImpl.moveItem(at:to:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  int v8 = *(void **)a2;
  uint64_t v215 = *(void **)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  swift_retain();
  id v10 = v5;
  swift_retain();
  uint64_t v213 = v2;
  uint64_t v214 = v4;
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v15 = objc_msgSend(v10, sel_isFileURL);
    swift_release();
    swift_release();

    uint64_t v14 = v6;
    if ((v15 & 1) != 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  v217._uint64_t countAndFlagsBits = (uint64_t)v10;
  v217._unint64_t object = v6;
  uint64_t v218 = v7;
  URL.scheme.getter();
  if (!v11)
  {
    swift_release();
    swift_release();

    uint64_t v14 = v6;
    goto LABEL_15;
  }

  id v12 = v6;
  Swift::String v13 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v13._countAndFlagsBits == 1701603686 && v13._object == (void *)0xE400000000000000LL)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t v14 = v6;
    goto LABEL_10;
  }

  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v14 = v12;
  if ((v16 & 1) == 0)
  {
LABEL_15:
    id v20 = v10;
    swift_retain_n();
    swift_retain_n();
    id v21 = v20;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v218 = v7;
      id v22 = v21;
      swift_retain();
      swift_retain();
      Swift::String v23 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v23._countAndFlagsBits;
      Swift::String v217 = v23;
      swift_bridgeObjectRetain();
      uint64_t v215 = v22;
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v23._object;
      }

      else
      {
        unint64_t object = (unint64_t)v23._object;
        if ((specialized BidirectionalCollection.last.getter(v23._countAndFlagsBits, (unint64_t)v23._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v217._countAndFlagsBits;
          unint64_t object = (unint64_t)v217._object;
        }
      }

      v216._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v39 = specialized Set._Variant.insert(_:)(&v219, 0x2FuLL);
      uint64_t v40 = v216._countAndFlagsBits;
      uint64_t v41 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000LL) == 0) {
        uint64_t v41 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v41)
      {
        id v211 = v14;
        v216._uint64_t countAndFlagsBits = countAndFlagsBits;
        v216._unint64_t object = (void *)object;
        MEMORY[0x1895F8858](v39);
        id v207 = &v216;
        uint64_t v208 = v40;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v206,  countAndFlagsBits,  object);
        if (v42 == 1)
        {
          unint64_t v44 = (unint64_t)v216._object;
          Swift::Int v43 = v216._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v43, v44, v40);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v47 = v215;
      }

      else
      {
        swift_bridgeObjectRelease();
        unint64_t v47 = v215;
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      id v26 = objc_msgSend(v21, sel__parameterString);
      if (v26)
      {
        char v27 = v26;
        id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        uint64_t v30 = v29;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v31 = objc_msgSend(v21, sel_path)) != 0)
        {
          stat v32 = v31;
          id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
          id v35 = v34;

          v217._uint64_t countAndFlagsBits = (uint64_t)v33;
          v217._unint64_t object = v35;
          swift_bridgeObjectRetain();
          v36._uint64_t countAndFlagsBits = 59LL;
          v36._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v36);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v37._uint64_t countAndFlagsBits = (uint64_t)v28;
          v37._unint64_t object = v30;
          String.append(_:)(v37);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v217._uint64_t countAndFlagsBits = 59LL;
          v217._unint64_t object = (void *)0xE100000000000000LL;
          v45._uint64_t countAndFlagsBits = (uint64_t)v28;
          v45._unint64_t object = v30;
          String.append(_:)(v45);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
        goto LABEL_63;
      }

      id v46 = objc_msgSend(v21, sel_path);
      if (!v46)
      {
        swift_release();
        swift_release();

        goto LABEL_63;
      }

      unint64_t v47 = v46;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      swift_release();
      swift_release();
    }

LABEL_63:
    uint64_t v91 = (void *)objc_opt_self();
    uint64_t v92 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v93 = objc_msgSend( v91,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  262,  v92,  v21,  0,  0,  0,  0);
LABEL_64:
    v93;
    swift_unknownObjectRelease();

    return swift_willThrow();
  }

uint64_t _s10Foundation15_FileOperationsO010linkOrCopyB033_0F974932CC9FBACA9047618113061023LL_3dst4with8delegateySS_SSSo13NSFileManagerCxtKAA04LinkeF8DelegateAELLRzlFZySPys4Int8VGSgKXEfU_AC04copyB0_2toAG7optionsySS_SSAJSo0mnF7OptionsVtKFZ0fbP0L_V_TG5TA_0( uint64_t a1)
{
  return specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(unsigned __int8 **)(v1 + 56));
}

NSFileAttributeType specialized UInt16._fileType.getter(__int16 a1)
{
  unsigned __int16 v1 = S_IFMT.getter() & a1;
  if ((unsigned __int16)S_IFCHR.getter() == v1)
  {
    uint64_t v2 = &NSFileTypeCharacterSpecial;
  }

  else if ((unsigned __int16)S_IFDIR.getter() == v1)
  {
    uint64_t v2 = &NSFileTypeDirectory;
  }

  else if ((unsigned __int16)S_IFBLK.getter() == v1)
  {
    uint64_t v2 = &NSFileTypeBlockSpecial;
  }

  else if ((unsigned __int16)S_IFREG.getter() == v1)
  {
    uint64_t v2 = &NSFileTypeRegular;
  }

  else if ((unsigned __int16)S_IFLNK.getter() == v1)
  {
    uint64_t v2 = &NSFileTypeSymbolicLink;
  }

  else if ((unsigned __int16)S_IFSOCK.getter() == v1)
  {
    uint64_t v2 = &NSFileTypeSocket;
  }

  else
  {
    uint64_t v2 = &NSFileTypeUnknown;
  }

  return *v2;
}

void *specialized NSFileProtectionType.init(intValue:)(int a1)
{
  int v1 = a1 - 1;
  uint64_t v2 = *off_189C83ED8[v1];
  id v3 = v2;
  return v2;
}

char *specialized _FileManagerImpl._extendedAttributes(at:followSymlinks:)(const char *a1)
{
  ssize_t v2 = listxattr(a1, 0LL, 0LL, 0);
  if (v2 < 1) {
    return 0LL;
  }
  size_t v3 = v2;
  uint64_t v4 = (char *)swift_slowAlloc();
  if (listxattr(a1, v4, v3, 0) < 1)
  {
    MEMORY[0x186E20E60](v4, -1LL, -1LL);
    return 0LL;
  }

  path = (char *)a1;
  unint64_t v5 = 0xD000000000000014LL;
  uint64_t v6 = &v4[v3];
  uint64_t v7 = (char *)MEMORY[0x18961AFF0];
  int v8 = v4;
  do
  {
    uint64_t v10 = String.init(cString:)();
    unint64_t v11 = v9;
    if (v10 == 0xD000000000000016LL && v9 == 0x80000001839CE420LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v10 == 0xD000000000000014LL && v11 == 0x80000001839CE440LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v10 == 0x532E6D6574737973LL && v11 == 0xEF79746972756365LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      if ((v11 & 0x1000000000000000LL) != 0) {
        goto LABEL_32;
      }
      goto LABEL_14;
    }

    uint64_t v97 = v4;
    ssize_t v13 = getxattr(path, v8, 0LL, 0LL, 0, 1);
    if (v13 == -1)
    {
      uint64_t v54 = String.init(cString:)();
      unint64_t v56 = v55;
      int v57 = MEMORY[0x186E1B0E8]();
      LODWORD(v14) = v57;
      uint64_t v96 = v7;
      uint64_t v58 = 263LL;
      switch(v57)
      {
        case 1:
        case 13:
          uint64_t v58 = 257LL;
          goto LABEL_90;
        case 2:
          uint64_t v58 = 260LL;
          goto LABEL_90;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_87;
        case 27:
          goto LABEL_90;
        default:
          if (v57 == 63)
          {
            uint64_t v58 = 258LL;
          }

          else
          {
            if (v57 == 102)
            {
              id v64 = 0LL;
              uint64_t v65 = 256LL;
              unint64_t v5 = (unint64_t)v97;
              goto LABEL_96;
            }

uint64_t partial apply for closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(char *a1)
{
  return closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(_BYTE *)(v1 + 32),  *(_BYTE *)(v1 + 33),  *(void *)(v1 + 40),  *(_BYTE *)(v1 + 48),  *(void *)(v1 + 56));
}

uint64_t sub_183227AFC()
{
  int v1 = *(unsigned __int8 *)(v0 + 160);
  if (v1 != 255) {
    outlined consume of Result<stat, CocoaError>( *(id *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(void *)(v0 + 96),  *(void *)(v0 + 104),  *(void *)(v0 + 112),  *(void *)(v0 + 120),  *(void *)(v0 + 128),  *(void *)(v0 + 136),  *(void *)(v0 + 144),  *(void *)(v0 + 152),  v1 & 1);
  }
  return swift_deallocObject();
}

void outlined consume of Result<stat, CocoaError>( id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if ((a19 & 1) != 0) {
}
  }

double _ss6ResultOySo4statV10Foundation10CocoaErrorVGSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 144) = -1;
  return result;
}

uint64_t _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

unint64_t lazy protocol witness table accessor for type CocoaError and conformance CocoaError()
{
  unint64_t result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CocoaError, &type metadata for CocoaError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CocoaError, &type metadata for CocoaError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CocoaError, &type metadata for CocoaError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CocoaError, &type metadata for CocoaError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CocoaError, &type metadata for CocoaError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CocoaError, &type metadata for CocoaError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }

  return result;
}

uint64_t sub_183227BE0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)()
{
  return closure #3 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)( *(const char **)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t objectdestroy_19Tm()
{
  return swift_deallocObject();
}

uint64_t closure #2 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)partial apply()
{
  return closure #2 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)( *(void *)(v0 + 16),  *(const char **)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(_BYTE *)(v0 + 48),  *(_BYTE *)(v0 + 49));
}

uint64_t _ss6ResultOySo4statV10Foundation10CocoaErrorVGSgWOg(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 144);
  if (v1 > 1) {
    return (v1 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi0_(uint64_t result)
{
  *(_BYTE *)(result + 144) = 1;
  return result;
}

uint64_t outlined retain of Result<stat, CocoaError>(uint64_t a1)
{
  return a1;
}

id outlined copy of Result<stat, CocoaError>( id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if ((a19 & 1) != 0) {
    return result;
  }
  return result;
}

void outlined consume of Result<stat, CocoaError>?( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19)
{
  if (a19 != 255) {
    outlined consume of Result<stat, CocoaError>( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19 & 1);
  }
}

uint64_t outlined release of Result<stat, CocoaError>?( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(_BYTE *)(a1 + 144);
  a2( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  v4);
  return a1;
}

id outlined copy of Result<stat, CocoaError>?( id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19)
{
  if (a19 != 255) {
    return outlined copy of Result<stat, CocoaError>( result,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19 & 1);
  }
  return result;
}

uint64_t _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi_(uint64_t result)
{
  *(_BYTE *)(result + 144) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618CF8], MEMORY[0x189618CD8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618D00], MEMORY[0x189618CD8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
  }

  return result;
}

uint64_t PredicateExpressions.NotEqual.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.NotEqual.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 60));
}

void PredicateExpressions.NotEqual.init(lhs:rhs:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_183227EF0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 60),  v2,  v1);
}

void type metadata accessor for PredicateExpressions.NotEqual()
{
}

uint64_t PredicateExpressions.NotEqual.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[4];
  uint64_t v6 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  id v22 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v11 = MEMORY[0x1895F8858](v10);
  ssize_t v13 = (char *)&v21 - v12;
  uint64_t v14 = *a1;
  uint64_t v23 = v14;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v5 + 16))(&v23, v6, v5, v11);
  if (!v2)
  {
    uint64_t v16 = v8;
    uint64_t v23 = v14;
    unint64_t v17 = v22;
    (*(void (**)(uint64_t *, void))(a2[5] + 16LL))(&v23, a2[3]);
    char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v20 = *(void (**)(char *, uint64_t))(v16 + 8);
    v20(v17, AssociatedTypeWitness);
    v20(v13, AssociatedTypeWitness);
    char v15 = v19 ^ 1;
  }

  return v15 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.NotEqual<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.NotEqual.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

void static PredicateExpressions.build_NotEqual<A, B>(lhs:rhs:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_183228144(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v3 + *(int *)(a1 + 60),  v2,  v1);
}

uint64_t PredicateExpressions.NotEqual.description.getter()
{
  v0._uint64_t countAndFlagsBits = 0x6C61757145746F4ELL;
  v0._unint64_t object = (void *)0xEE00203A73686C28LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x203A736872202CLL;
  v1._unint64_t object = (void *)0xE700000000000000LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41LL;
  v2._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

uint64_t PredicateExpressions.NotEqual<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.NotEqual<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  v13[5] = a5;
  _OWORD v13[6] = a4;
  v13[9] = a3;
  void v13[4] = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  v13[7] = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  v13[8] = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  _BYTE v13[10] = v8;
  v13[11] = v8;
  v13[12] = v9;
  v13[13] = v10;
  v13[14] = v11;
  v13[15] = v12;
  type metadata accessor for PredicateExpressions.NotEqual();
}

uint64_t sub_183228414(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  uint64_t v9 = *(void *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  *(void *)(v4 - 200) = v6;
  *(void *)(v4 - 192) = a1;
  *(void *)(v4 - 72) = v2;
  uint64_t v10 = *(void *)(v4 - 152);
  uint64_t v11 = v3;
  *(void *)(v4 - 184) = v8;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  uint64_t v12 = *(void *)(v4 - 144);
  uint64_t v13 = *(void *)(v4 - 128);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(*(void *)(v4 - 184), v12, v13);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v14 = *(void *)(v4 - 192);
  uint64_t v15 = *(void *)(v4 - 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 176) + 32LL))(v15 + *(int *)(v14 + 60), v10, v11);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  uint64_t v16 = *(void *)(v4 - 200);
  (*(void (**)(void, uint64_t, uint64_t))(v16 + 16))(*(void *)(v4 - 168), v15, v14);
  __swift_destroy_boxed_opaque_existential_1(*(void *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.NotEqual<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.NotEqual<A, B>( void *a1)
{
  return PredicateExpressions.NotEqual<>.encode(to:)(a1);
}

uint64_t type metadata completion function for PredicateExpressions.NotEqual()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.NotEqual(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_183228804 + 4 * byte_1837C2F40[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.NotEqual( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays8DurationV10FoundationE16UnitsFormatStyleV4UnitVG_AL01_I0Os5NeverOTg504_ss8d3V10e3E16fgh35V13_getSkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n( uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x18961AFE8];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (char *)(a1 + 32);
    do
    {
      char v6 = *v4++;
      char v5 = v6;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        uint64_t result = v10;
      }

      *(void *)(result + 16) = v8 + 1;
      *(_BYTE *)(result + v8 + 32) = v5;
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(void *a1, _OWORD *a2)
{
  uint64_t v3 = v2;
  __int128 v6 = a2[2];
  __int128 v52 = a2[1];
  __int128 v53 = v6;
  __int128 v54 = a2[3];
  uint64_t v44 = BigString.startIndex.getter();
  uint64_t v45 = v7;
  uint64_t v46 = v8;
  uint64_t v47 = v9;
  uint64_t v48 = BigString.endIndex.getter();
  uint64_t v49 = v10;
  uint64_t v50 = v11;
  uint64_t v51 = v12;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v33);
  outlined release of Locale((uint64_t)v34);
  swift_release();
  __int128 v13 = a2[2];
  v43[3] = a2[1];
  v43[4] = v13;
  unint64_t v31 = v35;
  v43[5] = a2[3];
  v43[6] = v35;
  unint64_t v29 = v37;
  v43[7] = v36;
  __int128 v43[8] = v37;
  v43[9] = v38;
  swift_unknownObjectRetain();
  swift_release();
  __int128 v14 = v2[2];
  v43[13] = v2[1];
  v43[14] = v14;
  v43[15] = v2[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v39);
  char v15 = BigSubstring.UnicodeScalarView.isIdentical(to:)();
  outlined release of Locale((uint64_t)v40);
  uint64_t v16 = v31 >> 11;
  uint64_t v17 = v29 >> 11;
  uint64_t v18 = *a1 >> 11;
  uint64_t v19 = a1[4] >> 11;
  if ((v15 & 1) != 0)
  {
    swift_retain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v18, v19, (uint64_t)a2, v16, v17);
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v18, v19, 0, 0LL);
LABEL_7:
    swift_release();
    return swift_unknownObjectRelease();
  }

  swift_retain();
  uint64_t v28 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v18, v19);
  uint64_t v30 = v20;
  __int128 v21 = v3[2];
  v43[10] = v3[1];
  v43[11] = v21;
  v43[12] = v3[3];
  BigString.utf8.getter();
  uint64_t v32 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v41);
  swift_unknownObjectRetain();
  id v22 = (void (*)(_OWORD *, void))BigString.unicodeScalars.modify();
  BigString.UnicodeScalarView.replaceSubrange(_:with:)();
  v22(v43, 0LL);
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v18, v19, (uint64_t)a2, v16, v17);
  __int128 v23 = v3[2];
  v43[0] = v3[1];
  v43[1] = v23;
  _OWORD v43[2] = v3[3];
  BigString.utf8.getter();
  uint64_t v24 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v42);
  uint64_t v26 = v24 - v32;
  if (__OFSUB__(v24, v32))
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v27 = v30 + v26;
  if (__OFADD__(v30, v26))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = v28;
  if (v27 >= v28)
  {
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v28, v27, 1, 0LL);
    goto LABEL_7;
  }

uint64_t specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  __int128 v6 = *(_OWORD **)a2;
  __int128 v7 = *(_OWORD *)(a2 + 24);
  __int128 v40 = *(_OWORD *)(a2 + 8);
  __int128 v41 = v7;
  __int128 v8 = *(_OWORD *)(a2 + 56);
  __int128 v42 = *(_OWORD *)(a2 + 40);
  __int128 v43 = v8;
  __int128 v9 = v6[1];
  __int128 v10 = v6[3];
  v44[17] = v6[2];
  v44[18] = v10;
  v44[16] = v9;
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v30);
  outlined release of Locale((uint64_t)v31);
  __int128 v11 = v6[2];
  void v44[3] = v6[1];
  v44[4] = v11;
  unint64_t v29 = v32;
  v44[5] = v6[3];
  _OWORD v44[6] = v32;
  unint64_t v27 = v34;
  v44[7] = v33;
  _OWORD v44[8] = v34;
  v44[9] = v35;
  swift_unknownObjectRetain();
  outlined release of AttributedString.Runs(a2);
  __int128 v12 = v2[2];
  v44[13] = v2[1];
  v44[14] = v12;
  v44[15] = v2[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v36);
  char v13 = BigSubstring.UnicodeScalarView.isIdentical(to:)();
  outlined release of Locale((uint64_t)v37);
  uint64_t v14 = v27 >> 11;
  uint64_t v15 = *a1 >> 11;
  uint64_t v16 = a1[4] >> 11;
  if ((v13 & 1) != 0)
  {
    outlined retain of AttributedString.Runs(a2);
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v15, v16, (uint64_t)v6, v29 >> 11, v14);
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v15, v16, 0, 0LL);
LABEL_7:
    swift_unknownObjectRelease();
    return outlined release of AttributedString.Runs(a2);
  }

  outlined retain of AttributedString.Runs(a2);
  uint64_t v25 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v15, v16);
  uint64_t v26 = v17;
  __int128 v18 = v3[2];
  v44[10] = v3[1];
  v44[11] = v18;
  v44[12] = v3[3];
  BigString.utf8.getter();
  uint64_t v28 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v38);
  swift_unknownObjectRetain();
  uint64_t v19 = (void (*)(_OWORD *, void))BigString.unicodeScalars.modify();
  BigString.UnicodeScalarView.replaceSubrange(_:with:)();
  v19(v44, 0LL);
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v15, v16, (uint64_t)v6, v29 >> 11, v14);
  __int128 v20 = v3[2];
  v44[0] = v3[1];
  v44[1] = v20;
  _OWORD v44[2] = v3[3];
  BigString.utf8.getter();
  uint64_t v21 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v39);
  uint64_t v23 = v21 - v28;
  if (__OFSUB__(v21, v28))
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v24 = v26 + v23;
  if (__OFADD__(v26, v23))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = v25;
  if (v24 >= v25)
  {
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v25, v24, 1, 0LL);
    goto LABEL_7;
  }

unint64_t specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)( unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v9 = result;
  unint64_t v6 = a2 >> 14;
  if (a2 >> 14 < a3 >> 14)
  {
    unint64_t v7 = a6 >> 14;
    if (a6 >> 14 >= result >> 14)
    {
      return 0LL;
    }

    else
    {
      while (1)
      {
        Substring.UnicodeScalarView.formIndex(before:)();
        Substring.UnicodeScalarView.formIndex(before:)();
        uint64_t result = v9;
        if (v6 >= a3 >> 14) {
          break;
        }
        if (v7 >= v9 >> 14) {
          return 0LL;
        }
      }
    }
  }

  return result;
}

unint64_t specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)( unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    if (a1 >= 0x4000)
    {
      while (1)
      {
        unint64_t v5 = String.index(before:)();
        unint64_t v6 = String.index(before:)();
        unint64_t v3 = v6;
        if (v5 < 0x4000) {
          break;
        }
        if (!(v6 >> 14)) {
          return 0LL;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v3;
}

unint64_t specialized BidirectionalCollection._range<A>(of:anchored:backwards:)( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, unint64_t a7, unint64_t a8)
{
  if ((a6 & 1) != 0)
  {
    unint64_t v9 = a8;
    unint64_t v33 = a1 >> 14;
    unint64_t v38 = a2 >> 14;
    if (a1 >> 14 >= a2 >> 14)
    {
LABEL_9:
      if ((a5 & 1) != 0) {
        unint64_t v12 = v9;
      }
      else {
        unint64_t v12 = a7;
      }
      goto LABEL_12;
    }

    if (a7 >> 14 < a8 >> 14)
    {
      while (1)
      {
        unint64_t v10 = Substring.index(before:)();
        unint64_t v11 = Substring.index(before:)();
        unint64_t v9 = v11;
        if (v33 >= v10 >> 14) {
          break;
        }
        if (a7 >> 14 >= v11 >> 14) {
          return 0LL;
        }
      }

      goto LABEL_9;
    }

    return 0LL;
  }

  if ((a5 & 1) == 0)
  {
    unint64_t v33 = a1 >> 14;
    unint64_t v38 = a2 >> 14;
    if (a1 >> 14 >= a2 >> 14)
    {
      unint64_t v13 = a8;
      unint64_t v12 = a8;
      unint64_t v9 = a7;
      goto LABEL_13;
    }

    if (a7 >> 14 < a8 >> 14)
    {
      while (1)
      {
        unint64_t v30 = Substring.index(before:)();
        unint64_t v31 = Substring.index(before:)();
        unint64_t v12 = v31;
        if (v33 >= v30 >> 14) {
          break;
        }
        if (a7 >> 14 >= v31 >> 14) {
          return 0LL;
        }
      }

      unint64_t v9 = a7;
      goto LABEL_12;
    }

    return 0LL;
  }

  unint64_t v38 = a2 >> 14;
  unint64_t v33 = a1 >> 14;
  unint64_t v12 = a7;
  unint64_t v9 = a7;
LABEL_12:
  unint64_t v13 = a8;
LABEL_13:
  unint64_t v32 = v12 >> 14;
  unint64_t v36 = v13 >> 14;
  while (1)
  {
    unint64_t v34 = v9 >> 14;
    unint64_t v14 = v9;
    unint64_t v15 = v33;
    if (v33 < v38)
    {
      unint64_t v14 = v9;
      unint64_t v15 = v33;
      if (v34 < v36)
      {
        uint64_t v16 = Substring.subscript.getter();
        uint64_t v18 = v17;
        if (v16 != Substring.subscript.getter() || v18 != v19)
        {
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v14 = v9;
          unint64_t v15 = v33;
          if ((v20 & 1) == 0) {
            goto LABEL_29;
          }
          goto LABEL_22;
        }

unint64_t specialized BidirectionalCollection._range<A>(of:anchored:backwards:)( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, char a5, char a6, unint64_t a7, unint64_t a8, unint64_t a9, unint64_t a10)
{
  unint64_t v11 = a7;
  unint64_t v16 = result;
  if ((a6 & 1) != 0)
  {
    unint64_t v50 = a8;
    unint64_t v52 = a2;
    unint64_t v17 = a8;
    unint64_t v38 = result >> 14;
    unint64_t v47 = a2 >> 14;
    if (result >> 14 >= a2 >> 14)
    {
LABEL_15:
      unint64_t v44 = a2;
      if ((a5 & 1) != 0) {
        unint64_t v19 = v17;
      }
      else {
        unint64_t v19 = v11;
      }
      goto LABEL_21;
    }

    unint64_t v18 = a7 >> 14;
    if (a7 >> 14 < a8 >> 14)
    {
      while (1)
      {
        Substring.UnicodeScalarView.formIndex(before:)();
        unint64_t result = Substring.UnicodeScalarView.formIndex(before:)();
        unint64_t v17 = v50;
        if (v38 >= v52 >> 14) {
          break;
        }
        if (v18 >= v50 >> 14) {
          return 0LL;
        }
      }

      unint64_t v11 = a7;
      goto LABEL_15;
    }

    return 0LL;
  }

  if ((a5 & 1) != 0)
  {
    unint64_t v44 = a2;
    unint64_t v47 = a2 >> 14;
    unint64_t v38 = result >> 14;
    unint64_t v19 = a7;
  }

  else
  {
    unint64_t v50 = a8;
    unint64_t v52 = a2;
    unint64_t v19 = a8;
    unint64_t v38 = result >> 14;
    unint64_t v47 = a2 >> 14;
    if (result >> 14 < a2 >> 14)
    {
      unint64_t v20 = a7 >> 14;
      if (a7 >> 14 >= a8 >> 14) {
        return 0LL;
      }
      while (1)
      {
        Substring.UnicodeScalarView.formIndex(before:)();
        unint64_t result = Substring.UnicodeScalarView.formIndex(before:)();
        unint64_t v19 = v50;
        if (v38 >= v52 >> 14) {
          break;
        }
        if (v20 >= v50 >> 14) {
          return 0LL;
        }
      }

      unint64_t v11 = a7;
    }

    unint64_t v44 = a2;
  }

  unint64_t v17 = v11;
LABEL_21:
  unint64_t v37 = v19 >> 14;
  unint64_t v45 = a8 >> 14;
  unint64_t v46 = v16;
  uint64_t v21 = HIBYTE(a10) & 0xF;
  uint64_t v22 = (a9 >> 59) & 1;
  if ((a10 & 0x1000000000000000LL) == 0) {
    LOBYTE(v22) = 1;
  }
  if ((a10 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = a9 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v43 = v21;
  uint64_t v49 = 4LL << v22;
  uint64_t v23 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v23) = 1;
  }
  uint64_t v48 = 4LL << v23;
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v24 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v24 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v42 = v24;
  while (1)
  {
    unint64_t v39 = v17 >> 14;
    unint64_t v40 = v17;
    unint64_t v25 = v38;
    if (v38 < v47)
    {
      unint64_t v25 = v38;
      if (v39 < v45)
      {
        unint64_t v26 = v46;
        unint64_t v25 = v38;
        while (1)
        {
          _StringGuts.validateScalarIndex(_:in:)(v17, v11, a8, a9, a10);
          if ((a10 & 0x1000000000000000LL) != 0)
          {
            int v27 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }

          else
          {
            if ((a10 & 0x2000000000000000LL) != 0)
            {
              unint64_t v50 = a9;
              uint64_t v51 = a10 & 0xFFFFFFFFFFFFFFLL;
            }

            else if ((a9 & 0x1000000000000000LL) == 0)
            {
              _StringObject.sharedUTF8.getter();
            }

            int v27 = _decodeScalar(_:startingAt:)();
          }

          int v28 = v27;
          _StringGuts.validateScalarIndex(_:in:)(v26, v46, v44, a3, a4);
          if ((a4 & 0x1000000000000000LL) != 0)
          {
            unint64_t result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            if (v28 != (_DWORD)result) {
              goto LABEL_89;
            }
          }

          else
          {
            if ((a4 & 0x2000000000000000LL) != 0)
            {
              unint64_t v50 = a3;
              uint64_t v51 = a4 & 0xFFFFFFFFFFFFFFLL;
            }

            else if ((a3 & 0x1000000000000000LL) == 0)
            {
              _StringObject.sharedUTF8.getter();
            }

            unint64_t result = _decodeScalar(_:startingAt:)();
            unint64_t v11 = a7;
            if (v28 != (_DWORD)result) {
              goto LABEL_89;
            }
          }

          if ((v17 & 0xC) != v49 && (v17 & 1) != 0) {
            break;
          }
          if ((v17 & 0xC) == v49)
          {
            unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v17, a9, a10);
            unint64_t v17 = result;
          }

          if (v43 <= v17 >> 16) {
            goto LABEL_94;
          }
          if ((v17 & 1) != 0) {
            goto LABEL_57;
          }
          unint64_t result = _StringGuts.scalarAlignSlow(_:)(v17, a9, a10);
          unint64_t v17 = v17 & 0xC | result & 0xFFFFFFFFFFFFFFF3LL | 1;
          if ((a10 & 0x1000000000000000LL) != 0)
          {
LABEL_67:
            unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
            unint64_t v17 = result;
            goto LABEL_68;
          }

unint64_t specialized BidirectionalCollection._range<A>(of:anchored:backwards:)( uint64_t a1, unint64_t a2, char a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10 = HIBYTE(a6) & 0xF;
  uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      unint64_t v14 = 15LL;
    }

    else
    {
      if ((a6 & 0x2000000000000000LL) != 0) {
        uint64_t v17 = HIBYTE(a6) & 0xF;
      }
      else {
        uint64_t v17 = a5 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v18 = 7LL;
      if (((a6 >> 60) & ((a5 & 0x800000000000000LL) == 0)) != 0) {
        uint64_t v18 = 11LL;
      }
      unint64_t v14 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v18 | (v17 << 16), a1, a2);
      if ((v19 & 1) != 0) {
        return 0LL;
      }
    }

    unint64_t v16 = 15LL;
    goto LABEL_20;
  }

  if ((a6 & 0x2000000000000000LL) != 0) {
    uint64_t v12 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v13 = 7LL;
  if (((a6 >> 60) & ((a5 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v13 = 11LL;
  }
  unint64_t v14 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v13 | (v12 << 16), a1, a2);
  if ((v15 & 1) != 0) {
    return 0LL;
  }
  unint64_t v16 = v14;
  if ((a3 & 1) == 0) {
    unint64_t v14 = 15LL;
  }
LABEL_20:
  unint64_t v31 = v14 >> 14;
  if ((a6 & 0x2000000000000000LL) != 0) {
    uint64_t v20 = v10;
  }
  else {
    uint64_t v20 = v11;
  }
  uint64_t v21 = 4 * v20;
  uint64_t v22 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v22 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v32 = v22;
  unint64_t v34 = v21;
  unint64_t v35 = 4 * v22;
  while (1)
  {
    unint64_t v23 = 0LL;
    unint64_t v33 = v16;
    if (v32)
    {
      unint64_t v24 = v16;
      if (v16 >> 14 < v34)
      {
        unint64_t v23 = 0LL;
        unint64_t v24 = v16;
        do
        {
          uint64_t v25 = String.subscript.getter();
          uint64_t v27 = v26;
          if (v25 == String.subscript.getter() && v27 == v28)
          {
            swift_bridgeObjectRelease_n();
          }

          else
          {
            char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v29 & 1) == 0) {
              break;
            }
          }

          unint64_t v24 = String.index(after:)();
          unint64_t v23 = (unint64_t)String.index(after:)() >> 14;
        }

        while (v23 < v35 && v24 >> 14 < v34);
      }
    }

    else
    {
      unint64_t v24 = v16;
    }

    if (v23 == v35) {
      break;
    }
    if (v31 == v33 >> 14) {
      return 0LL;
    }
    unint64_t v16 = String.index(_:offsetBy:)();
  }

  unint64_t result = v33;
  if (v24 >> 14 < v33 >> 14) {
    __break(1u);
  }
  return result;
}

void static Duration.UnitsFormatStyle.Unit.hours.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static Duration.UnitsFormatStyle.Unit.minutes.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static Duration.UnitsFormatStyle.Unit.seconds.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static Duration.UnitsFormatStyle.UnitWidth.wide.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
}

void static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 1;
}

void static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 3;
}

void static Duration.UnitsFormatStyle.UnitWidth.narrow.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 2;
  *(_DWORD *)(a1 + 4) = 2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys()
{
  if (*v0) {
    return 0x536E726574746170LL;
  }
  else {
    return 0x6874646977LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Duration.UnitsFormatStyle.UnitWidth.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.UnitsFormatStyle.UnitWidth.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.UnitWidth.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  __int128 v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration><>.FormatStyle.UnitWidth);
    char v14 = 0;
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Measurement<NSUnitDuration><>.FormatStyle.UnitWidth and conformance Measurement<A><>.FormatStyle.UnitWidth,  &demangling cache variable for type metadata for Measurement<NSUnitDuration><>.FormatStyle.UnitWidth,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v15;
    char v13 = 1;
    int v10 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v9;
    *(_DWORD *)(a2 + 4) = v10;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.UnitWidth.CodingKeys,  &unk_189C84560);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.UnitWidth.CodingKeys,  &unk_189C84560);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.UnitWidth.CodingKeys,  &unk_189C84560);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.UnitWidth.CodingKeys,  &unk_189C84560);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys);
  }

  return result;
}

uint64_t Duration.UnitsFormatStyle.UnitWidth.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.UnitWidth.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v8 = *v1;
  int v11 = *((_DWORD *)v1 + 1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = v8;
  char v13 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration><>.FormatStyle.UnitWidth);
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Measurement<NSUnitDuration><>.FormatStyle.UnitWidth and conformance Measurement<A><>.FormatStyle.UnitWidth,  &demangling cache variable for type metadata for Measurement<NSUnitDuration><>.FormatStyle.UnitWidth,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void Duration.UnitsFormatStyle.UnitWidth.hash(into:)()
{
  Swift::UInt32 v1 = *((_DWORD *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static Duration.UnitsFormatStyle.UnitWidth.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
}

Swift::Int Duration.UnitsFormatStyle.UnitWidth.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt32 v2 = *((_DWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.UnitWidth@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.UnitsFormatStyle.UnitWidth.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.UnitWidth( void *a1)
{
  return Duration.UnitsFormatStyle.UnitWidth.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Duration.UnitsFormatStyle.UnitWidth()
{
  Swift::UInt v1 = *v0;
  Swift::UInt32 v2 = *((_DWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Duration.UnitsFormatStyle.UnitWidth()
{
  Swift::UInt32 v1 = *((_DWORD *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.UnitsFormatStyle.UnitWidth()
{
  Swift::UInt v1 = *v0;
  Swift::UInt32 v2 = *((_DWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Duration.UnitsFormatStyle.UnitWidth( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.Unit._Unit()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.Unit._Unit()
{
  return RawRepresentable<>.encode(to:)();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Duration.UnitsFormatStyle.Unit._Unit( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Duration.UnitsFormatStyle.Unit._Unit( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Duration.UnitsFormatStyle.Unit._Unit( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Duration.UnitsFormatStyle.Unit._Unit( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Duration.UnitsFormatStyle.Unit._Unit( void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Duration.UnitsFormatStyle.Unit._Unit.allCases.getter;
}

void Duration.UnitsFormatStyle.Unit.icuSkeleton.getter()
{
  __asm { BR              X10 }

unint64_t sub_18322A700()
{
  v0._uint64_t countAndFlagsBits = 7954788LL;
  v0._unint64_t object = (void *)0xE300000000000000LL;
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000016LL;
}

void static Duration.UnitsFormatStyle.Unit.weeks.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Duration.UnitsFormatStyle.Unit.days.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static Duration.UnitsFormatStyle.Unit.milliseconds.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static Duration.UnitsFormatStyle.Unit.microseconds.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void static Duration.UnitsFormatStyle.Unit.nanoseconds.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

void Duration.UnitsFormatStyle.Unit.hash(into:)()
{
}

BOOL static Duration.UnitsFormatStyle.Unit.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.Unit.CodingKeys()
{
  return 1953066613LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.Unit.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 1953066613 && a2 == 0xE400000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.Unit.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.Unit.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.UnitsFormatStyle.Unit.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.Unit.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Unit.CodingKeys,  &unk_189C844D0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Unit.CodingKeys,  &unk_189C844D0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Unit.CodingKeys,  &unk_189C844D0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Unit.CodingKeys,  &unk_189C844D0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Unit._Unit,  &type metadata for Duration.UnitsFormatStyle.Unit._Unit);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Unit._Unit,  &type metadata for Duration.UnitsFormatStyle.Unit._Unit);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Unit._Unit,  &type metadata for Duration.UnitsFormatStyle.Unit._Unit);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Unit._Unit,  &type metadata for Duration.UnitsFormatStyle.Unit._Unit);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit);
  }

  return result;
}

Swift::Int Duration.UnitsFormatStyle.Unit.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.Unit.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.Unit.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.Unit@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return Duration.UnitsFormatStyle.Unit.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.Unit(void *a1)
{
  return Duration.UnitsFormatStyle.Unit.encode(to:)(a1);
}

void static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.show(length:)@<X0>( uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hash(into:)()
{
}

BOOL static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys()
{
  return 0x6874676E656CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x6874676E656CLL && a2 == 0xE600000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys,  &unk_189C843B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys,  &unk_189C843B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys,  &unk_189C843B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys,  &unk_189C843B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys);
  }

  return result;
}

Swift::Int Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.init(from:)@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy( void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.getter()
{
  return *(void *)v0;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.setter(uint64_t result)
{
  *Swift::UInt v1 = result;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingRule.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL) + 24);
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingRule.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL) + 24);
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingRule.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.getter()
{
  return *(void *)(v0
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.setter( uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v6 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.init<A>(lengthLimits:roundingRule:roundingIncrement:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = RangeExpression.clampedLowerAndUpperBounds(_:)(0LL, 0x7FFFFFFFFFFFFFFFLL, a5);
  char v14 = v13;
  uint64_t v16 = v15;
  char v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8LL))(a1, a5);
  if ((v14 & 1) != 0) {
    uint64_t v19 = 0LL;
  }
  else {
    uint64_t v19 = v12;
  }
  if ((v18 & 1) != 0) {
    uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v20 = v16;
  }
  uint64_t v21 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v22 = (char *)a6 + *(int *)(v21 + 28);
  *a6 = v19;
  a6[1] = v20;
  unint64_t v23 = (char *)a6 + *(int *)(v21 + 24);
  uint64_t v24 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32LL))(v23, a2, v24);
  *(void *)uint64_t v22 = a3;
  v22[8] = a4 & 1;
  return result;
}

uint64_t static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.show(length:rounded:increment:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v11 = (char *)a5 + *(int *)(v10 + 24);
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v11, a2, v12);
  char v14 = (char *)a5 + *(int *)(v10 + 28);
  *a5 = a1;
  a5[1] = a1;
  *(void *)char v14 = a3;
  __int128 v14[8] = a4 & 1;
  return result;
}

uint64_t static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = *MEMORY[0x189619F70];
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104LL))(v3, v4, v5);
  uint64_t v7 = (char *)a1 + *(int *)(v2 + 28);
  *a1 = 0LL;
  a1[1] = 0LL;
  *(void *)uint64_t v7 = 0LL;
  __int128 v7[8] = 1;
  return result;
}

uint64_t static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide(rounded:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v5 = (char *)a2 + *(int *)(v4 + 24);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(v5, a1, v6);
  char v8 = (char *)a2 + *(int *)(v4 + 28);
  *a2 = 0LL;
  a2[1] = 0LL;
  *(void *)char v8 = 0LL;
  v8[8] = 1;
  return result;
}

void Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hash(into:)()
{
  uint64_t v1 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = (char *)v0 + *(int *)(v1 + 28);
  if (v2[8] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v3 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = v3;
    }
    else {
      Swift::UInt64 v4 = 0LL;
    }
    Hasher._combine(_:)(v4);
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18322B638 + 4 * byte_1837C30A8[*v0]))( 0x4C6D756D696E696DLL,  0xED00006874676E65LL);
}

uint64_t sub_18322B638()
{
  return 0x4C6D756D6978616DLL;
}

uint64_t sub_18322B64C()
{
  return 0x676E69646E756F72LL;
}

unint64_t sub_18322B66C()
{
  return 0xD000000000000011LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
    v8[13] = 2;
    type metadata accessor for FloatingPointRoundingRule();
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule,  (uint64_t (*)(uint64_t))MEMORY[0x189619F98],  (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hashValue.getter()
{
  uint64_t v1 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = (char *)v0 + *(int *)(v1 + 28);
  if (v2[8] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v3 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = v3;
    }
    else {
      Swift::UInt64 v4 = 0LL;
    }
    Hasher._combine(_:)(v4);
  }

  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  MEMORY[0x1895F8858](v3);
  unint64_t v31 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys>);
  uint64_t v5 = *(void *)(v35 - 8);
  MEMORY[0x1895F8858](v35);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (uint64_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = (uint64_t *)((char *)v10 + *(int *)(v11 + 28));
  *uint64_t v12 = 0LL;
  *((_BYTE *)v12 + 8) = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys();
  unint64_t v34 = v7;
  uint64_t v13 = (uint64_t)v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v29 = v12;
  unsigned int v36 = a1;
  uint64_t v14 = v5;
  uint64_t v15 = v31;
  uint64_t v16 = v32;
  uint64_t v17 = v33;
  char v18 = v34;
  char v40 = 0;
  *uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  char v39 = 1;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v28 = v10;
  v10[1] = v19;
  char v38 = 2;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule,  (uint64_t (*)(uint64_t))MEMORY[0x189619F98],  (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))((uint64_t)v28 + *(int *)(v8 + 24), v15, v17);
  char v37 = 3;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v22 = v21;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v35);
  uint64_t v24 = v29;
  uint64_t v23 = v30;
  *char v29 = v20;
  *((_BYTE *)v24 + 8) = v22 & 1;
  uint64_t v25 = (uint64_t)v28;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v28,  v23,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return outlined destroy of ICUNumberFormatter.Signature( v25,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy( void *a1)
{
  return Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)v2 + *(int *)(a2 + 28);
  if (v4[8] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v5 = *(void *)v4;
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v6 = v5;
    }
    else {
      Swift::UInt64 v6 = 0LL;
    }
    Hasher._combine(_:)(v6);
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)v2 + *(int *)(a2 + 28);
  if (v4[8] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v5 = *(void *)v4;
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v6 = v5;
    }
    else {
      Swift::UInt64 v6 = 0LL;
    }
    Hasher._combine(_:)(v6);
  }

  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 Duration.UnitsFormatStyle.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.allowedUnits.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Duration.UnitsFormatStyle.allowedUnits.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.allowedUnits.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Duration.UnitsFormatStyle.unitWidth.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 28);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 24);
  *(_DWORD *)(a1 + 4) = v2;
}

uint64_t Duration.UnitsFormatStyle.unitWidth.setter(uint64_t result)
{
  int v2 = *(_DWORD *)(result + 4);
  *(_BYTE *)(v1 + 24) = *(_BYTE *)result;
  *(_DWORD *)(v1 + 28) = v2;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.unitWidth.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.maximumUnitCount.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t Duration.UnitsFormatStyle.maximumUnitCount.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.maximumUnitCount.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Duration.UnitsFormatStyle.zeroValueUnitsDisplay.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 48);
}

void *Duration.UnitsFormatStyle.zeroValueUnitsDisplay.setter(void *result)
{
  *(void *)(v1 + 48) = *result;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.zeroValueUnitsDisplay.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.fractionalPartDisplay.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  return outlined init with copy of ICUNumberFormatter.Signature( v1 + *(int *)(v3 + 36),  a1,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t Duration.UnitsFormatStyle.fractionalPartDisplay.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  return outlined assign with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy( a1,  v1 + *(int *)(v3 + 36),  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t (*Duration.UnitsFormatStyle.fractionalPartDisplay.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.valueLengthLimits.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle(0LL) + 40));
}

uint64_t Duration.UnitsFormatStyle.valueLengthLimits.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v8 = v3 + *(int *)(result + 40);
  *(void *)uint64_t v8 = a1;
  *(void *)(v8 + 8) = a2;
  *(_BYTE *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.valueLengthLimits.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.init(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)@<X0>( uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v15 = *a2;
  int v16 = *((_DWORD *)a2 + 1);
  uint64_t v17 = *a5;
  uint64_t v18 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v19 = a9 + *(int *)(v18 + 40);
  *(void *)(a9 + 16) = a1;
  uint64_t v20 = a8;
  *(_BYTE *)(a9 + 24) = v15;
  *(_DWORD *)(a9 + 28) = v16;
  *(void *)(a9 + 32) = a3;
  *(_BYTE *)(a9 + 40) = a4 & 1;
  *(void *)(a9 + 48) = v17;
  outlined init with copy of ICUNumberFormatter.Signature( a8,  a9 + *(int *)(v18 + 36),  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  uint64_t v21 = 0x7FFFFFFFFFFFFFFELL;
  if (a6 < 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v21 = a6;
  }
  if (a7 & 1 | (a6 < 1)) {
    uint64_t v22 = 0LL;
  }
  else {
    uint64_t v22 = v21;
  }
  if (a7 & 1 | (a6 < 1)) {
    uint64_t v23 = 0LL;
  }
  else {
    uint64_t v23 = v21 + 1;
  }
  *(void *)uint64_t v19 = v22;
  *(void *)(v19 + 8) = v23;
  *(_BYTE *)(v19 + 16) = a7 & 1 | (a6 < 1);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v24 = static LocaleCache.cache + 16;
  uint64_t v25 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v25);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v24, &v30);
  os_unfair_lock_unlock(v25);
  swift_release_n();
  uint64_t v26 = v30;
  uint64_t v27 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  uint64_t result = outlined destroy of ICUNumberFormatter.Signature( v20,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  *(void *)a9 = v26;
  *(void *)(a9 + 8) = v27;
  return result;
}

uint64_t Duration.UnitsFormatStyle.init<A>(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLengthLimits:fractionalPart:)@<X0>( uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v15 = *a2;
  int v16 = *((_DWORD *)a2 + 1);
  uint64_t v17 = *a5;
  uint64_t v18 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v19 = a9 + *(int *)(v18 + 40);
  *(void *)(a9 + 16) = a1;
  *(_BYTE *)(a9 + 24) = v15;
  *(_DWORD *)(a9 + 28) = v16;
  uint64_t v20 = a6;
  uint64_t v21 = a8;
  *(void *)(a9 + 32) = a3;
  *(_BYTE *)(a9 + 40) = a4 & 1;
  *(void *)(a9 + 48) = v17;
  outlined init with copy of ICUNumberFormatter.Signature( a7,  a9 + *(int *)(v18 + 36),  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  uint64_t v22 = RangeExpression.clampedLowerAndUpperBounds(_:)(0LL, 0x7FFFFFFFFFFFFFFFLL, a8);
  if ((v25 & 1) == 0)
  {
    if ((v24 & 1) != 0) {
      uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (v23 >= v22) {
      goto LABEL_5;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if ((v24 & 1) == 0)
  {
    uint64_t v22 = 0LL;
    if (v23 >= 0)
    {
LABEL_5:
      *(void *)uint64_t v19 = v22;
      *(void *)(v19 + 8) = v23;
      *(_BYTE *)(v19 + 16) = 0;
      goto LABEL_10;
    }

    goto LABEL_8;
  }

uint64_t Duration.UnitsFormatStyle.format(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = Duration.UnitsFormatStyle._getSkeletons(_:)(a1, a2);
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_SSs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j57VSdSSIggnyo_SS8skeleton_AG011measurementF0Sd0H5ValuetSSs5M11OIegnrzr_TRSSAMSdSSIggnyo_Tf1cn_nTf4ng_n( v2,  (uint64_t (*)(uint64_t, uint64_t, _BYTE *, double))partial apply for closure #1 in Duration.UnitsFormatStyle._formatFields(_:));
  uint64_t v4 = swift_bridgeObjectRelease();
  unint64_t v5 = *(void *)(v3 + 16);
  uint64_t v33 = v3;
  if (v5 == 2)
  {
    MEMORY[0x1895F8858](v4);
    uint64_t v7 = _withFixedUCharBuffer(size:defaultIsError:_:)( 128LL,  0,  (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v8) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0x7D317B202C7D307BLL;
    }
    if (v8) {
      unint64_t v10 = v8;
    }
    else {
      unint64_t v10 = 0xE800000000000000LL;
    }
    swift_bridgeObjectRelease();
    uint64_t v37 = v9;
    unint64_t v38 = v10;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
LABEL_21:
    unint64_t v5 = v37;
    uint64_t v6 = *(void *)(v3 + 16);
    if (!v6) {
      goto LABEL_49;
    }
    goto LABEL_22;
  }

  if (v5 != 1)
  {
    MEMORY[0x1895F8858](v4);
    uint64_t v11 = _withFixedUCharBuffer(size:defaultIsError:_:)( 128LL,  0,  (uint64_t (*)(uint64_t, uint64_t, int *))partial apply for closure #1 in Duration.UnitsFormatStyle._getListPattern(_:));
    unint64_t v12 = 0xE800000000000000LL;
    MEMORY[0x1895F8858](v11);
    uint64_t v13 = _withFixedUCharBuffer(size:defaultIsError:_:)( 128LL,  0,  (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v14) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = 0x7D317B202C7D307BLL;
    }
    if (v14) {
      unint64_t v12 = v14;
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v37 = v15;
    unint64_t v38 = v12;
    unint64_t v17 = v5 - 3;
    if (v5 < 3)
    {
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      return result;
    }

    if (v5 != 3)
    {
      while (v17)
      {
        unint64_t v5 = lazy protocol witness table accessor for type String and conformance String();
        lazy protocol witness table accessor for type String and conformance String();
        RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
        if (!--v17) {
          goto LABEL_20;
        }
      }

      goto LABEL_48;
    }

uint64_t Duration.UnitsFormatStyle._createNumberFormatStyle(useFractionalLimitsIfAvailable:)@<X0>( char a1@<W0>, _OWORD *a2@<X8>)
{
  unint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)uint64_t v7 = 0LL;
  __int128 v7[8] = 1;
  v7[73] = 2;
  *(_DWORD *)(v7 + 74) = 33554434;
  uint64_t v9 = &v7[*(int *)(v8 + 36)];
  uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  v11(v9, 1LL, 1LL, v10);
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  unint64_t v14 = &v7[v5[10]];
  *(void *)unint64_t v14 = 0LL;
  __int128 v14[8] = -1;
  v7[v5[11]] = 3;
  if ((a1 & 1) != 0
    && (uint64_t result = type metadata accessor for Duration.UnitsFormatStyle(0LL),
        int v16 = (uint64_t *)((char *)v2 + *(int *)(result + 36)),
        uint64_t v12 = *v16,
        uint64_t v13 = v16[1],
        v13 < *v16))
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = *((void *)v2 + 6);
    uint64_t result = type metadata accessor for Duration.UnitsFormatStyle(0LL);
    uint64_t v18 = (uint64_t)v2 + *(int *)(result + 40);
    if ((*(_BYTE *)(v18 + 16) & 1) != 0)
    {
      uint64_t v19 = 998LL;
      if (v12 >= 998) {
        uint64_t v20 = 998LL;
      }
      else {
        uint64_t v20 = v12;
      }
      uint64_t v21 = v20 & ~(v20 >> 63);
      if ((v13 & ~(v13 >> 63)) < 998) {
        uint64_t v19 = v13 & ~(v13 >> 63);
      }
      if (v17 < 1)
      {
        *((_OWORD *)v7 + 1) = xmmword_183723F60;
        *((_OWORD *)v7 + 2) = xmmword_183723F60;
      }

      else
      {
        uint64_t v22 = 999LL;
        if (v17 < 999) {
          uint64_t v22 = v17;
        }
        *((void *)v7 + 2) = v22;
        *((void *)v7 + 3) = 0LL;
        *((void *)v7 + 4) = 0LL;
        *((void *)v7 + 5) = 1LL;
      }

      *((void *)v7 + 6) = v21;
      goto LABEL_39;
    }

    uint64_t v23 = *(void *)(v18 + 8);
    if (v17 < 1)
    {
      uint64_t v27 = *(void *)v18;
      if (v27 >= 999) {
        uint64_t v27 = 999LL;
      }
      uint64_t v28 = v27 & ~(v27 >> 63);
      uint64_t v29 = v23 & ~(v23 >> 63);
      if (v29 >= 999) {
        uint64_t v29 = 999LL;
      }
      if (v12 >= 998) {
        uint64_t v30 = 998LL;
      }
      else {
        uint64_t v30 = v12;
      }
      uint64_t v26 = v30 & ~(v30 >> 63);
      *((void *)v7 + 2) = v28;
      *((void *)v7 + 3) = 0LL;
      *((void *)v7 + 4) = v29;
      *((void *)v7 + 5) = 0LL;
      if ((v13 & ~(v13 >> 63)) >= 998) {
        uint64_t v19 = 998LL;
      }
      else {
        uint64_t v19 = v13 & ~(v13 >> 63);
      }
      goto LABEL_38;
    }

    if (v23 >= v17)
    {
      if (v17 >= 999) {
        uint64_t v24 = 999LL;
      }
      else {
        uint64_t v24 = v17;
      }
      if (v23 >= 999) {
        uint64_t v23 = 999LL;
      }
      if (v12 >= 998) {
        uint64_t v25 = 998LL;
      }
      else {
        uint64_t v25 = v12;
      }
      uint64_t v26 = v25 & ~(v25 >> 63);
      *((void *)v7 + 2) = v24;
      *((void *)v7 + 3) = 0LL;
      *((void *)v7 + 4) = v23;
      *((void *)v7 + 5) = 0LL;
      if ((v13 & ~(v13 >> 63)) >= 998) {
        uint64_t v19 = 998LL;
      }
      else {
        uint64_t v19 = v13 & ~(v13 >> 63);
      }
LABEL_38:
      *((void *)v7 + 6) = v26;
LABEL_39:
      *((void *)v7 + 7) = 0LL;
      *((void *)v7 + 8) = v19;
      v7[72] = 0x80;
      uint64_t v31 = (uint64_t)a2
      *(void *)uint64_t v31 = 0LL;
      *(_BYTE *)(v31 + 8) = 1;
      *(void *)(v31 + 16) = 0LL;
      *(void *)(v31 + 24) = 0LL;
      *(void *)(v31 + 32) = 0LL;
      *(void *)(v31 + 40) = 0x1FFFFFFFELL;
      *(void *)(v31 + 56) = 0LL;
      *(void *)(v31 + 64) = 0LL;
      *(void *)(v31 + 48) = 0LL;
      *(_DWORD *)(v31 + 72) = 131584;
      *(_WORD *)(v31 + 76) = 512;
      uint64_t v32 = v31 + v5[9];
      __int128 v34 = *v2;
      v11((char *)v32, 1LL, 1LL, v10);
      uint64_t v33 = v31 + v5[10];
      *(void *)uint64_t v33 = 0LL;
      *(_BYTE *)(v33 + 8) = -1;
      *(_BYTE *)(v31 + v5[11]) = 3;
      *a2 = v34;
      swift_unknownObjectRetain();
      return outlined assign with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy( (uint64_t)v7,  v31,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
    }
  }

  __break(1u);
  return result;
}

uint64_t Duration.UnitsFormatStyle._getSkeletons(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int v62 = (_OWORD *)a1;
  uint64_t v63 = a2;
  uint64_t v58 = 0LL;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v60 = *(void *)(v65 - 8);
  MEMORY[0x1895F8858](v65);
  uint64_t v61 = (uint64_t)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)v55 - v9;
  MEMORY[0x1895F8858](v11);
  id v64 = (_OWORD *)((char *)v55 - v12);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (_OWORD *)((char *)v55 - v14);
  uint64_t v16 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = *(void *)(v2 + 16);
  uint64_t v19 = *(void *)(v2 + 32);
  char v20 = *(_BYTE *)(v2 + 40);
  uint64_t v21 = v2 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle(0LL) + 36);
  outlined init with copy of ICUNumberFormatter.Signature( v21,  (uint64_t)v18,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  uint64_t v22 = (uint64_t)&v18[*(int *)(v16 + 24)];
  uint64_t v23 = specialized static Duration.UnitsFormatStyle.unitsToUse(duration:allowedUnits:maximumUnitCount:roundSmallerParts:trailingFractionalPartLength:roundingIncrement:dropZeroUnits:)( (uint64_t)v62,  v63,  v59,  v19,  v20,  v22,  *(void *)(v21 + 8),  *(void *)(v21 + *(int *)(v16 + 28)),  *(_BYTE *)(v21 + *(int *)(v16 + 28) + 8),  *(void *)(v3 + 48) < 1LL);
  uint64_t v63 = v24;
  uint64_t v25 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8LL))(v22, v25);
  int v62 = v15;
  Duration.UnitsFormatStyle._createNumberFormatStyle(useFractionalLimitsIfAvailable:)(1, v15);
  Duration.UnitsFormatStyle._createNumberFormatStyle(useFractionalLimitsIfAvailable:)(0, v64);
  uint64_t v26 = *(void *)(v23 + 16);
  if (v26)
  {
    uint64_t v27 = v63;
    uint64_t v28 = *(void *)(v63 + 16);
    if (!v28)
    {
LABEL_9:
      BOOL v31 = 0;
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v29 = swift_bridgeObjectRetain();
    specialized Sequence.min(by:)(v29, (char *)&v66);
    swift_bridgeObjectRelease();
    char v30 = v66;
    if (v66 != 8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v66) = v30;
      Duration.UnitsFormatStyle.Unit.icuSkeleton.getter();
      uint64_t v44 = v43;
      unint64_t v46 = v45;
      char v47 = *(_BYTE *)(v3 + 24);
      uint64_t v48 = (uint64_t)v62;
      outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v62, (uint64_t)v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v6, 0LL, 1LL, v65);
      uint64_t v49 = specialized static ICUMeasurementNumberFormatter.skeleton(_:width:usage:numberFormatStyle:)( v44,  v46,  v47,  0xEu,  (uint64_t)v6);
      uint64_t v51 = v50;
      swift_bridgeObjectRelease();
      outlined destroy of Any?( (uint64_t)v6,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(skeleton: String, measurementUnit: Duration.UnitsFormatStyle.Unit, measurementValue: Double)>);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_183720D90;
      *(void *)(v33 + 32) = v49;
      *(void *)(v33 + 40) = v51;
      *(_BYTE *)(v33 + 48) = v30;
      *(void *)(v33 + 56) = 0LL;
      outlined destroy of Any?( (uint64_t)v64,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      uint64_t v41 = v48;
      goto LABEL_23;
    }

    uint64_t v27 = v63;
    uint64_t v28 = *(void *)(v63 + 16);
    if (!v28) {
      goto LABEL_9;
    }
  }

  if (*(double *)(v27 + 32) >= 0.0)
  {
    if (v28 != 1)
    {
      uint64_t v52 = 5LL;
      do
      {
        uint64_t v53 = v52 - 3;
        if (__OFADD__(v52 - 4, 1LL))
        {
          __break(1u);
          JUMPOUT(0x18322D404LL);
        }

        double v54 = *(double *)(v27 + 8 * v52);
        BOOL v31 = v54 < 0.0;
        if (v54 < 0.0) {
          break;
        }
        ++v52;
      }

      while (v53 != v28);
      goto LABEL_10;
    }

    goto LABEL_9;
  }

  BOOL v31 = 1;
LABEL_10:
  char v67 = 9;
  uint64_t v32 = *(void *)(v23 + 16);
  swift_bridgeObjectRetain();
  if (v32)
  {
    v55[0] = v61 + 74;
    uint64_t v56 = v26 - 1;
    uint64_t v57 = v27 + 32;
    uint64_t v33 = MEMORY[0x18961AFE8];
    v55[1] = 0x80000001839CE530LL;
    uint64_t v58 = v23;
    uint64_t v59 = v3;
    if (*(void *)(v27 + 16))
    {
      uint64_t v34 = *(unsigned __int8 *)(v23 + 32);
      if (v56) {
        unint64_t v35 = v64;
      }
      else {
        unint64_t v35 = v62;
      }
      outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v35, (uint64_t)v10);
      if (v31
        && (unsigned __int8 v36 = specialized getter of mostSignificantUnit #1 in Duration.UnitsFormatStyle._getSkeletons(_:)(&v67, v23),
            v36 != 8)
        && (_DWORD)v34 == v36)
      {
        uint64_t v37 = v61;
        outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v10, v61);
        uint64_t v38 = v55[0] + *(int *)(v65 + 36);
        *(_BYTE *)(v38 + 2) = 0;
        *(_WORD *)uint64_t v38 = 0;
        outlined destroy of Any?( (uint64_t)v10,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        outlined init with take of LocalePreferences?( v37,  (uint64_t)v10,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      }

      else
      {
        uint64_t v39 = v61;
        outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v10, v61);
        uint64_t v40 = v55[0] + *(int *)(v65 + 36);
        *(_BYTE *)(v40 + 2) = 1;
        *(_WORD *)uint64_t v40 = 257;
        outlined destroy of Any?( (uint64_t)v10,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        outlined init with take of LocalePreferences?( v39,  (uint64_t)v10,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      }

      __asm { BR              X8 }
    }
  }

  else
  {
    uint64_t v33 = MEMORY[0x18961AFE8];
  }

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  outlined destroy of Any?( (uint64_t)v64,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v41 = (uint64_t)v62;
LABEL_23:
  outlined destroy of Any?(v41, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  return v33;
}

uint64_t closure #1 in Duration.UnitsFormatStyle._formatFields(_:)( void *a1, unint64_t a2, char *a3, _OWORD *a4)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  char v6 = *a3;
  *(_OWORD *)uint64_t v15 = *a4;
  swift_unknownObjectRetain();
  uint64_t v7 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(a1, a2, (uint64_t)v15);
  swift_unknownObjectRelease();
  if (!v7) {
    __break(1u);
  }
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  uint64_t v10 = swift_retain_n();
  MEMORY[0x1895F8858](v10);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v14, v15);
  uint64_t v12 = v15[1];
  uint64_t v11 = v15[0];
  swift_release_n();
  if (v12)
  {
    swift_release();
  }

  else
  {
    v15[0] = 0LL;
    v15[1] = 0xE000000000000000LL;
    Double.write<A>(to:)();
    v8._uint64_t countAndFlagsBits = 32LL;
    v8._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v8);
    v14[79] = v6;
    Duration.UnitsFormatStyle.Unit.icuSkeleton.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return v15[0];
  }

  return v11;
}

uint64_t specialized Sequence.min(by:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  uint64_t v2 = result + 56;
  char v3 = *(_BYTE *)(result + 32);
  uint64_t v4 = 1LL << v3;
  uint64_t v5 = -1LL;
  if (1LL << v3 < 64) {
    uint64_t v5 = ~(-1LL << (1LL << v3));
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  if (v6)
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = __clz(__rbit64(v6));
    unint64_t v9 = (v6 - 1) & v6;
    int64_t v10 = (unint64_t)(v4 + 63) >> 6;
  }

  else
  {
    LODWORD(v7) = v3 & 0x3F;
    int64_t v10 = (unint64_t)(v4 + 63) >> 6;
    unint64_t v20 = *(void *)(result + 64);
    if (v20)
    {
      uint64_t v7 = 1LL;
    }

    else
    {
      unint64_t v20 = *(void *)(result + 72);
      if (v20)
      {
        uint64_t v7 = 2LL;
      }

      else
      {
        unint64_t v20 = *(void *)(result + 80);
        if (v20)
        {
          uint64_t v7 = 3LL;
        }

        else
        {
LABEL_38:
          unint64_t v20 = *(void *)(result + 88);
          if (v20)
          {
            uint64_t v7 = 4LL;
          }

          else
          {
            unint64_t v20 = *(void *)(result + 96);
            if (!v20) {
              goto LABEL_44;
            }
            uint64_t v7 = 5LL;
          }
        }
      }
    }

uint64_t specialized getter of mostSignificantUnit #1 in Duration.UnitsFormatStyle._getSkeletons(_:)( _BYTE *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if ((_DWORD)v2 == 9)
  {
    SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays8DurationV10FoundationE16UnitsFormatStyleV4UnitVG_AL01_I0Os5NeverOTg504_ss8d3V10e3E16fgh35V13_getSkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n(a2);
    unint64_t v5 = *(void *)(SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                   + 16);
    if (v5)
    {
      uint64_t v2 = *(unsigned __int8 *)(SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                              + 32);
      unint64_t v6 = v5 - 1;
      if (v5 != 1)
      {
        if (v5 < 9)
        {
          unint64_t v7 = 1LL;
          goto LABEL_18;
        }

        if (v5 >= 0x21)
        {
          unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFE0LL;
          uint8x16_t v9 = (uint8x16_t)vdupq_n_s8(v2);
          int64_t v10 = (uint8x16_t *)(SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                             + 49);
          unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFE0LL;
          uint8x16_t v12 = v9;
          do
          {
            uint8x16_t v9 = vminq_u8(v10[-1], v9);
            uint8x16_t v12 = vminq_u8(*v10, v12);
            v10 += 2;
            v11 -= 32LL;
          }

          while (v11);
          uint8x16_t v13 = vminq_u8(v9, v12);
          v13.i8[0] = vminvq_u8(v13);
          uint64_t v2 = v13.u32[0];
          if (v6 == v8) {
            goto LABEL_23;
          }
          if ((v6 & 0x18) == 0)
          {
            unint64_t v7 = v8 | 1;
            goto LABEL_18;
          }
        }

        else
        {
          unint64_t v8 = 0LL;
        }

        unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFF8LL | 1;
        uint8x8_t v14 = (uint8x8_t)vdup_n_s8(v2);
        unint64_t v15 = (uint8x8_t *)(v8
                          + SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                          + 33);
        unint64_t v16 = v8 - (v6 & 0xFFFFFFFFFFFFFFF8LL);
        do
        {
          uint8x8_t v17 = *v15++;
          uint8x8_t v14 = vmin_u8(v17, v14);
          v16 += 8LL;
        }

        while (v16);
        v14.i8[0] = vminv_u8(v14);
        uint64_t v2 = v14.u32[0];
        if (v6 == (v6 & 0xFFFFFFFFFFFFFFF8LL)) {
          goto LABEL_23;
        }
LABEL_18:
        unint64_t v18 = v5 - v7;
        int64_t v19 = (unsigned __int8 *)(v7
                                + SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                                + 32);
        do
        {
          unsigned int v21 = *v19++;
          unsigned int v20 = v21;
          else {
            uint64_t v2 = v20;
          }
          --v18;
        }

        while (v18);
      }
    }

    else
    {
      uint64_t v2 = 8LL;
    }

uint64_t closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 8);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 64);
  swift_unknownObjectRetain();
  v6(ObjectType, v4);
  swift_unknownObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  unsigned int ListPattern = uatmufmt_getListPattern();
  swift_release();
  return ListPattern;
}

__n128 Duration.UnitsFormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 v6 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v6;
  *a2 = v6;
  return result;
}

uint64_t Duration.UnitsFormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ICUNumberFormatter.Signature( v1,  a1,  type metadata accessor for Duration.UnitsFormatStyle);
}

void Duration.UnitsFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v41;
  Swift::UInt32 v42;
  Swift::UInt v43;
  uint64_t v44;
  Swift::UInt *v45;
  uint64_t v46;
  char *v47;
  Swift::UInt64 v48;
  Swift::UInt64 v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  void *v53;
  _BYTE v54[144];
  _BYTE v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  void v73[18];
  _BYTE v74[144];
  _BYTE v75[152];
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v6(ObjectType, v4) & 1) != 0)
  {
    Swift::UInt8 v7 = 1;
LABEL_5:
    Hasher._combine(_:)(v7);
    goto LABEL_56;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v8(v73, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v73,  (uint64_t)v74,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v75,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    Swift::UInt8 v7 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v55,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55[0] == 2)
  {
    uint8x16_t v9 = 0;
  }

  else
  {
    uint8x16_t v9 = v55[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v9);
  int64_t v10 = v56;
  if (!v56)
  {
    Hasher._combine(_:)(0);
    unint64_t v15 = v55;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v10 + 16));
  unint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v54,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    unint64_t v15 = v54;
LABEL_20:
    outlined retain of LocalePreferences(v15);
    if (!v57) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint8x16_t v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16LL;
    --v11;
  }

  while (v11);
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v58) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

uint64_t Duration.UnitsFormatStyle.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18322E394 + 4 * byte_1837C30AC[a1]))( 0x656C61636F6CLL,  0xE600000000000000LL);
}

uint64_t sub_18322E394()
{
  return 0x556465776F6C6C61LL;
}

uint64_t sub_18322E3B4()
{
  return 0x7464695774696E75LL;
}

unint64_t sub_18322E3D0()
{
  return 0xD000000000000010LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.CodingKeys()
{
  return Duration.UnitsFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Duration.UnitsFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.UnitsFormatStyle.encode(to:)(void *a1)
{
  char v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  unint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v14 = *v3;
  char v16 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&__int128 v14 = *((void *)v3 + 2);
    char v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Duration.UnitsFormatStyle.Unit>);
    lazy protocol witness table accessor for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>( &lazy protocol witness table cache variable for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>,  (uint64_t (*)(void))lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit,  MEMORY[0x1896186F8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    int v9 = *((_DWORD *)v3 + 7);
    LOBYTE(v14) = *((_BYTE *)v3 + 24);
    DWORD1(v14) = v9;
    char v16 = 2;
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&__int128 v14 = *((void *)v3 + 6);
    char v16 = 4;
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
    LOBYTE(v14) = 5;
    type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    unint64_t v11 = (__int128 *)((char *)v3 + *(int *)(v10 + 40));
    char v12 = *((_BYTE *)v11 + 16);
    __int128 v14 = *v11;
    char v15 = v12;
    char v16 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>( &lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>,  MEMORY[0x189618748],  MEMORY[0x189618A30]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Duration.UnitsFormatStyle.hashValue.getter()
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  Swift::UInt v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  uint64_t v39;
  Swift::UInt32 v40;
  Swift::UInt v41;
  uint64_t v42;
  Swift::UInt *v43;
  uint64_t v44;
  char *v45;
  Swift::UInt64 v46;
  Swift::UInt64 v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  _BYTE v52[144];
  _BYTE v53[8];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  void v71[18];
  _BYTE v72[144];
  _BYTE v73[144];
  _BYTE v74[80];
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if ((v4(ObjectType, v2) & 1) != 0)
  {
    Swift::UInt8 v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_56;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v71, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v71,  (uint64_t)v72,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)v73,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v73) == 1)
  {
    Swift::UInt8 v5 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)v53,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v53[0] == 2)
  {
    uint64_t v7 = 0;
  }

  else
  {
    uint64_t v7 = v53[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v7);
  unint64_t v8 = v54;
  if (!v54)
  {
    Hasher._combine(_:)(0);
    uint8x16_t v13 = v53;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v8 + 16));
  int v9 = *(void *)(v8 + 16);
  if (!v9)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)v52,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint8x16_t v13 = v52;
LABEL_20:
    outlined retain of LocalePreferences(v13);
    if (!v55) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v72,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16LL;
    --v9;
  }

  while (v9);
  swift_bridgeObjectRelease();
  if (!v55)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v56) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

uint64_t Duration.UnitsFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v26 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  MEMORY[0x1895F8858](v26);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v29 - 8);
  MEMORY[0x1895F8858](v29);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *((void *)v10 + 4) = 0LL;
  v10[40] = 1;
  char v12 = &v10[*(int *)(v11 + 40)];
  *(void *)char v12 = 0LL;
  *((void *)v12 + 1) = 0LL;
  void v12[16] = 1;
  uint64_t v13 = a1[3];
  char v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys();
  uint64_t v28 = v7;
  __int128 v14 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }
  BOOL v31 = v4;
  uint64_t v15 = v5;
  uint64_t v16 = v27;
  char v34 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint8x8_t v17 = v28;
  uint64_t v18 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = (uint64_t)v10;
  __int128 v25 = v32;
  *(_OWORD *)uint64_t v10 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Duration.UnitsFormatStyle.Unit>);
  char v34 = 1;
  lazy protocol witness table accessor for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>( &lazy protocol witness table cache variable for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>,  (uint64_t (*)(void))lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit,  MEMORY[0x189618710]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((void *)v10 + 2) = v32;
  char v34 = 2;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v20 = DWORD1(v32);
  v10[24] = v32;
  *((_DWORD *)v10 + 7) = v20;
  LOBYTE(v32) = 3;
  *((void *)v10 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v10[40] = v21 & 1;
  char v34 = 4;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  MEMORY[0x30] = v32;
  LOBYTE(v32) = 5;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  uint64_t v22 = (uint64_t)v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of ICUNumberFormatter.Signature( v22,  v19 + *(int *)(v8 + 36),  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  char v34 = 6;
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>( &lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>,  MEMORY[0x189618770],  MEMORY[0x189618A50]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v18);
  char v24 = v33;
  *(_OWORD *)char v12 = v32;
  void v12[16] = v24;
  outlined init with copy of ICUNumberFormatter.Signature( v19,  v16,  type metadata accessor for Duration.UnitsFormatStyle);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  return outlined destroy of ICUNumberFormatter.Signature(v19, type metadata accessor for Duration.UnitsFormatStyle);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Duration.UnitsFormatStyle@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Duration.UnitsFormatStyle.format(_:)(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  return result;
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance Duration.UnitsFormatStyle@<Q0>( __n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 v6 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v6;
  *a2 = v6;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.UnitsFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle(void *a1)
{
  return Duration.UnitsFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.UnitsFormatStyle( uint64_t a1, uint64_t a2)
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v41;
  Swift::UInt32 v42;
  Swift::UInt v43;
  Swift::UInt *v44;
  uint64_t v45;
  char *v46;
  Swift::UInt64 v47;
  Swift::UInt64 v48;
  uint64_t v49;
  Swift::UInt v50;
  Swift::UInt v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  void v72[18];
  _BYTE v73[144];
  _BYTE v74[144];
  _BYTE v75[80];
  uint64_t v4 = v2;
  Hasher.init(_seed:)();
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_57;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v72, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)v73,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v73,  (uint64_t)v74,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v74) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v73,  (uint64_t)&v54,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v54 == 2)
  {
    uint64_t v10 = 0;
  }

  else
  {
    uint64_t v10 = v54 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v10);
  uint64_t v11 = v55;
  if (!v55)
  {
    Hasher._combine(_:)(0);
LABEL_18:
    outlined retain of LocalePreferences(&v54);
    if (!v56) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  char v12 = *(void *)(v11 + 16);
  if (!v12) {
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?( (uint64_t)v73,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16LL;
    --v12;
  }

  while (v12);
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v57) {
      goto LABEL_15;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    __int128 v14 = v58;
    if (!v58) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }

uint64_t static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t *a4@<X4>, uint64_t a5@<X5>, char a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  char v14 = a3 & 1;
  char v15 = a6 & 1;
  uint64_t v16 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = &v25[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  int v19 = *(_DWORD *)(a1 + 4);
  uint64_t v20 = *a4;
  v25[0] = *(_BYTE *)a1;
  int v26 = v19;
  uint64_t v24 = v20;
  outlined init with copy of ICUNumberFormatter.Signature(a7, (uint64_t)v18, v21);
  uint64_t v22 = swift_bridgeObjectRetain();
  return Duration.UnitsFormatStyle.init(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)( v22,  v25,  a2,  v14,  &v24,  a5,  v15,  (uint64_t)v18,  a8);
}

uint64_t static FormatStyle<>.units<A>(allowed:width:maximumUnitCount:zeroValueUnits:valueLengthLimits:fractionalPart:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v26 = a8;
  uint64_t v27 = a2;
  char v13 = a3 & 1;
  uint64_t v14 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v21 = *(_DWORD *)(a1 + 4);
  uint64_t v22 = *a4;
  v29[0] = *(_BYTE *)a1;
  int v30 = v21;
  uint64_t v28 = v22;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16))(v20, a5, a7, v18);
  outlined init with copy of ICUNumberFormatter.Signature( a6,  (uint64_t)v16,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  uint64_t v24 = swift_bridgeObjectRetain();
  return Duration.UnitsFormatStyle.init<A>(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLengthLimits:fractionalPart:)( v24,  v29,  v27,  v13,  &v28,  (uint64_t)v20,  (uint64_t)v16,  a7,  v26);
}

uint64_t Duration.UnitsFormatStyle.Attributed.format(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = Duration.UnitsFormatStyle._getSkeletons(_:)(a1, a2);
  uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_AI16AttributedStringVs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j7VSdAC16mn53VIggnyr_SS8skeleton_AG011measurementF0Sd0J5ValuetAIs5O11OIegnrzr_TRSSAMSdARIggnyr_Tf1cn_nTf4ng_n( v3,  (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, _BYTE *, double))partial apply for closure #1 in Duration.UnitsFormatStyle.Attributed._formatFields(_:));
  uint64_t v5 = swift_bridgeObjectRelease();
  unint64_t v6 = *(void *)(v4 + 16);
  uint64_t v83 = 0LL;
  unint64_t v84 = 0LL;
  uint64_t v76 = v4;
  if (v6 == 1) {
    goto LABEL_27;
  }
  if (v6 == 2)
  {
    MEMORY[0x1895F8858](v5);
    uint64_t v7 = _withFixedUCharBuffer(size:defaultIsError:_:)( 128LL,  0,  (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v8) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0x7D317B202C7D307BLL;
    }
    if (v8) {
      unint64_t v10 = v8;
    }
    else {
      unint64_t v10 = 0xE800000000000000LL;
    }
    swift_bridgeObjectRelease();
    uint64_t v83 = v9;
    unint64_t v84 = v10;
    uint64_t v96 = 8204667LL;
    unint64_t v97 = 0xE300000000000000LL;
    *(void *)&__int128 v108 = 8204411LL;
    *((void *)&v108 + 1) = 0xE300000000000000LL;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    goto LABEL_27;
  }

  MEMORY[0x1895F8858](v5);
  uint64_t v11 = _withFixedUCharBuffer(size:defaultIsError:_:)( 128LL,  0,  (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
  if (v12) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = 0x7D317B202C7D307BLL;
  }
  unint64_t v14 = 0xE800000000000000LL;
  if (v12) {
    unint64_t v15 = v12;
  }
  else {
    unint64_t v15 = 0xE800000000000000LL;
  }
  MEMORY[0x1895F8858](v11);
  uint64_t v16 = _withFixedUCharBuffer(size:defaultIsError:_:)( 128LL,  0,  (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
  if (v17) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = 0x7D317B202C7D307BLL;
  }
  if (v17) {
    unint64_t v14 = v17;
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v83 = v18;
  unint64_t v84 = v14;
  unint64_t v20 = v6 - 3;
  if (v6 < 3) {
    goto LABEL_49;
  }
  if (v6 == 3)
  {
LABEL_26:
    uint64_t v21 = swift_bridgeObjectRelease();
    MEMORY[0x1895F8858](v21);
    _withFixedUCharBuffer(size:defaultIsError:_:)( 128LL,  0,  (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    swift_bridgeObjectRelease();
    uint64_t v96 = 8204667LL;
    unint64_t v97 = 0xE300000000000000LL;
    *(void *)&__int128 v108 = 8204411LL;
    *((void *)&v108 + 1) = 0xE300000000000000LL;
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    uint64_t v4 = v76;
LABEL_27:
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v93, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], &v83);
    uint64_t v22 = (_OWORD *)v83;
    uint64_t v23 = *(void *)(v4 + 16);
    if (!v23)
    {
LABEL_40:
      uint64_t result = swift_bridgeObjectRelease();
      *a3 = v22;
      return result;
    }

    uint64_t v77 = v4 + 24;
    while (1)
    {
      if (v23 > *(void *)(v4 + 16))
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }

      uint64_t v28 = *(_OWORD **)(v77 + 8 * v23);
      __int128 v29 = v22[1];
      __int128 v30 = v22[3];
      __int128 v109 = v22[2];
      __int128 v110 = v30;
      __int128 v108 = v29;
      uint64_t v31 = BigString.startIndex.getter();
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      uint64_t v37 = v36;
      uint64_t v38 = BigString.endIndex.getter();
      uint64_t v83 = (uint64_t)v22;
      unint64_t v84 = v31;
      uint64_t v85 = v33;
      uint64_t v86 = v35;
      uint64_t v87 = v37;
      uint64_t v88 = v38;
      uint64_t v89 = v39;
      uint64_t v90 = v40;
      uint64_t v91 = v41;
      uint64_t v92 = 0LL;
      lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
      swift_retain_n();
      swift_retain();
      unint64_t v42 = Substring.init<A>(_:)();
      unint64_t v44 = v43;
      uint64_t v46 = v45;
      uint64_t v48 = v47;
      uint64_t v83 = 8204411LL;
      unint64_t v84 = 0xE300000000000000LL;
      unint64_t v49 = Substring.init<A>(_:)();
      if ((v42 ^ v44) < 0x4000 || !((v49 ^ v50) >> 14)) {
        goto LABEL_46;
      }
      id v81 = v28;
      uint64_t v82 = v23;
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v49,  v50,  v51,  v52,  0,  0,  0,  0,  1,  v42,  v44,  v46,  v48);
      char v54 = v53;
      swift_bridgeObjectRelease();
      if ((v54 & 1) != 0) {
        break;
      }
      unint64_t v55 = v22;
      swift_bridgeObjectRetain();
      uint64_t v56 = Substring.UTF8View.distance(from:to:)();
      swift_bridgeObjectRelease();
      uint64_t v57 = Substring.UTF8View.distance(from:to:)();
      swift_bridgeObjectRelease();
      __int128 v59 = v22[1];
      __int128 v60 = v22[2];
      uint64_t v58 = v22 + 1;
      v107[6] = v59;
      v107[7] = v60;
      v107[8] = v58[2];
      BigString.utf8.getter();
      swift_retain();
      unint64_t v61 = BigString.UTF8View.index(_:offsetBy:)();
      unint64_t v78 = v62;
      uint64_t v79 = v63;
      uint64_t v80 = v64;
      outlined release of Locale((uint64_t)&v94);
      swift_release();
      __int128 v65 = v58[1];
      v107[3] = *v58;
      v107[4] = v65;
      v107[5] = v58[2];
      BigString.utf8.getter();
      swift_retain();
      unint64_t v66 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v68 = v67;
      uint64_t v70 = v69;
      uint64_t v72 = v71;
      outlined release of Locale((uint64_t)&v95);
      swift_release_n();
      if (v66 >> 10 < v61 >> 10) {
        goto LABEL_44;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        uint64_t v22 = v55;
      }

      else
      {
        __int128 v24 = v58[1];
        v107[0] = *v58;
        v107[1] = v24;
        v107[2] = v58[2];
        uint64_t v25 = v55[8];
        uint64_t v26 = v55[9];
        uint64_t v74 = v55[11];
        uint64_t v75 = v55[10];
        type metadata accessor for AttributedString.Guts();
        swift_allocObject();
        outlined retain of Locale((uint64_t)v107);
        swift_unknownObjectRetain();
        uint64_t v22 = (_OWORD *)AttributedString.Guts.init(string:runs:)(v107, v25, v26, v75, v74);
        swift_release();
      }

      --v23;
      __int128 v27 = v22[2];
      __int128 v104 = v22[1];
      __int128 v105 = v27;
      __int128 v106 = v22[3];
      BigString.startIndex.getter();
      BigString.endIndex.getter();
      uint64_t v96 = v61;
      unint64_t v97 = v78;
      uint64_t v98 = v80;
      uint64_t v99 = v79;
      unint64_t v100 = v66;
      uint64_t v101 = v68;
      uint64_t v102 = v70;
      uint64_t v103 = v72;
      specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(&v96, v81);
      swift_release();
      uint64_t v4 = v76;
      if (v82 == 1) {
        goto LABEL_40;
      }
    }

    swift_release();
    goto LABEL_48;
  }

  while (v20)
  {
    uint64_t v96 = 8204667LL;
    unint64_t v97 = 0xE300000000000000LL;
    *(void *)&__int128 v108 = v13;
    *((void *)&v108 + 1) = v15;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    if (!--v20) {
      goto LABEL_26;
    }
  }

uint64_t Duration.UnitsFormatStyle.Attributed.locale(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  unint64_t v10 = (__int128 *)((char *)&v12 - v9);
  outlined init with copy of ICUNumberFormatter.Signature( v2,  (uint64_t)v7,  type metadata accessor for Duration.UnitsFormatStyle);
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v7,  (uint64_t)v10,  type metadata accessor for Duration.UnitsFormatStyle);
  __int128 v12 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *unint64_t v10 = v12;
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for Duration.UnitsFormatStyle);
  return outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v10,  a2,  type metadata accessor for Duration.UnitsFormatStyle);
}

uint64_t closure #1 in Duration.UnitsFormatStyle.Attributed._formatFields(_:)@<X0>( void *a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>, uint64_t a8@<D0>)
{
  char v13 = *a3;
  __int128 v150 = *a4;
  swift_unknownObjectRetain();
  unint64_t v14 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(a1, a2, (uint64_t)&v150);
  swift_unknownObjectRelease();
  if (!v14) {
    goto LABEL_105;
  }
  unint64_t v15 = 0x705060403020100uLL >> (8 * v13);
  ICUNumberFormatterBase.attributedFormatPositions(_:)(a8, 0LL, 0x100000000LL);
  if (!v17)
  {
    uint64_t v75 = Duration.UnitsFormatStyle._getSkeletons(_:)(a5, a6);
    MEMORY[0x1895F8858](v75);
    uint64_t v77 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_SSs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j57VSdSSIggnyo_SS8skeleton_AG011measurementF0Sd0H5ValuetSSs5M11OIegnrzr_TRSSAMSdSSIggnyo_Tf1cn_nTf4ng_n( v76,  (uint64_t (*)(uint64_t, uint64_t, _BYTE *, double))closure #1 in Duration.UnitsFormatStyle._formatFields(_:)partial apply);
    uint64_t v78 = swift_bridgeObjectRelease();
    unint64_t v79 = *(void *)(v77 + 16);
    __int128 v150 = 0uLL;
    uint64_t v123 = v77;
    unint64_t v125 = 0x705060403020100uLL >> (8 * v13);
    if (v79 == 2)
    {
      MEMORY[0x1895F8858](v78);
      uint64_t v82 = _withFixedUCharBuffer(size:defaultIsError:_:)( 128LL,  0,  (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
      if (v83) {
        uint64_t v84 = v82;
      }
      else {
        uint64_t v84 = 0x7D317B202C7D307BLL;
      }
      if (v83) {
        unint64_t v85 = v83;
      }
      else {
        unint64_t v85 = 0xE800000000000000LL;
      }
      swift_bridgeObjectRelease();
      *(void *)&__int128 v150 = v84;
      *((void *)&v150 + 1) = v85;
      uint64_t v135 = 8204667LL;
      *(void *)&__int128 v136 = 0xE300000000000000LL;
      unint64_t v160 = 8204411LL;
      unint64_t v161 = 0xE300000000000000LL;
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
LABEL_71:
      if (*((void *)&v150 + 1))
      {
        uint64_t v80 = *(void *)(v77 + 16);
        if (!v80) {
          goto LABEL_102;
        }
        goto LABEL_73;
      }

      goto LABEL_106;
    }

    if (v79 == 1)
    {
      *(void *)&__int128 v150 = 8204411LL;
      *((void *)&v150 + 1) = 0xE300000000000000LL;
      uint64_t v80 = 1LL;
LABEL_73:
      uint64_t v127 = v77 + 32;
      while (v80 <= *(void *)(v77 + 16))
      {
        uint64_t v132 = v80 - 1;
        uint64_t v99 = (uint64_t *)(v127 + 16 * (v80 - 1));
        uint64_t v129 = *v99;
        uint64_t v131 = v99[1];
        if ((*((void *)&v150 + 1) & 0x2000000000000000LL) != 0) {
          uint64_t v100 = HIBYTE(*((void *)&v150 + 1)) & 0xFLL;
        }
        else {
          uint64_t v100 = v150 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v101 = 7LL;
        if (((*((void *)&v150 + 1) >> 60) & ((v150 & 0x800000000000000LL) == 0)) != 0) {
          uint64_t v101 = 11LL;
        }
        unint64_t v102 = v101 | (v100 << 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v103 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)( v102,  8204411LL,  0xE300000000000000LL);
        if ((v104 & 1) != 0) {
          goto LABEL_98;
        }
        unint64_t v105 = v103;
        unint64_t v106 = 4 * v100;
        while (1)
        {
          unint64_t v15 = v105;
          for (unint64_t i = 15LL; i < 0x30000; unint64_t i = String.index(after:)())
          {
            if (v106 <= v15 >> 14) {
              break;
            }
            uint64_t v109 = String.subscript.getter();
            uint64_t v111 = v110;
            if (v109 == String.subscript.getter() && v111 == v112)
            {
              swift_bridgeObjectRelease_n();
            }

            else
            {
              char v108 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v108 & 1) == 0) {
                break;
              }
            }

            unint64_t v15 = String.index(after:)();
          }

          if ((i & 0xFFFFFFFFFFFFC000LL) == 0x30000) {
            break;
          }
          if (v105 < 0x4000) {
            goto LABEL_98;
          }
          unint64_t v105 = String.index(_:offsetBy:)();
        }

        swift_bridgeObjectRelease();
        if (v15 >> 14 < v105 >> 14) {
          goto LABEL_97;
        }
        uint64_t v135 = v129;
        *(void *)&__int128 v136 = v131;
        lazy protocol witness table accessor for type String and conformance String();
        String.replaceSubrange<A>(_:with:)();
        swift_bridgeObjectRelease();
        uint64_t v77 = v123;
        LOBYTE(v15) = v125;
        uint64_t v80 = v132;
        if (!v132)
        {
          swift_bridgeObjectRelease();
          goto LABEL_95;
        }
      }

      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      swift_bridgeObjectRelease();
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      swift_bridgeObjectRelease();
LABEL_95:
      uint64_t v135 = MEMORY[0x18961AFF0];
      *(void *)&__int128 v136 = MEMORY[0x18961AFF8];
      id v151 = &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
      unint64_t v152 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
      LOBYTE(v150) = v15;
      *(_OWORD *)uint64_t v153 = xmmword_183723F60;
      v153[16] = 1;
      *(void *)&__int128 v154 = 0LL;
      specialized AttributedString._AttributeStorage.subscript.setter( (uint64_t)&v150,  0xD000000000000021LL,  0x80000001839CDE70LL);
      uint64_t v113 = v135;
      uint64_t v114 = v136;
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(&v150, v113, v114, (uint64_t *)&v160);
      uint64_t result = swift_release();
      *a7 = v160;
      return result;
    }

    MEMORY[0x1895F8858](v78);
    uint64_t v86 = _withFixedUCharBuffer(size:defaultIsError:_:)( 128LL,  0,  (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v87) {
      unint64_t v15 = v86;
    }
    else {
      unint64_t v15 = 0x7D317B202C7D307BLL;
    }
    unint64_t v88 = 0xE800000000000000LL;
    if (v87) {
      unint64_t v89 = v87;
    }
    else {
      unint64_t v89 = 0xE800000000000000LL;
    }
    MEMORY[0x1895F8858](v86);
    uint64_t v90 = _withFixedUCharBuffer(size:defaultIsError:_:)( 128LL,  0,  (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v91) {
      uint64_t v92 = v90;
    }
    else {
      uint64_t v92 = 0x7D317B202C7D307BLL;
    }
    if (v91) {
      unint64_t v88 = v91;
    }
    swift_bridgeObjectRelease();
    *(void *)&__int128 v150 = v92;
    *((void *)&v150 + 1) = v88;
    unint64_t v93 = v79 - 3;
    if (v79 >= 3)
    {
      if (v79 != 3)
      {
        while (v93)
        {
          uint64_t v135 = 8204667LL;
          *(void *)&__int128 v136 = 0xE300000000000000LL;
          unint64_t v160 = v15;
          unint64_t v161 = v89;
          if (!*((void *)&v150 + 1)) {
            goto LABEL_104;
          }
          lazy protocol witness table accessor for type String and conformance String();
          lazy protocol witness table accessor for type String and conformance String();
          RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
          if (!--v93) {
            goto LABEL_65;
          }
        }

        goto LABEL_100;
      }

void Duration.UnitsFormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v41;
  Swift::UInt32 v42;
  Swift::UInt v43;
  uint64_t v44;
  Swift::UInt *v45;
  uint64_t v46;
  char *v47;
  Swift::UInt64 v48;
  Swift::UInt64 v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  void *v53;
  _BYTE v54[144];
  _BYTE v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  void v73[18];
  _BYTE v74[144];
  _BYTE v75[152];
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v6(ObjectType, v4) & 1) != 0)
  {
    Swift::UInt8 v7 = 1;
LABEL_5:
    Hasher._combine(_:)(v7);
    goto LABEL_56;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v8(v73, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v73,  (uint64_t)v74,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v75,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    Swift::UInt8 v7 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v55,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55[0] == 2)
  {
    uint64_t v9 = 0;
  }

  else
  {
    uint64_t v9 = v55[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v9);
  unint64_t v10 = v56;
  if (!v56)
  {
    Hasher._combine(_:)(0);
    unint64_t v15 = v55;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v10 + 16));
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v54,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    unint64_t v15 = v54;
LABEL_20:
    outlined retain of LocalePreferences(v15);
    if (!v57) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16LL;
    --v11;
  }

  while (v11);
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v58) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.Attributed.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.Attributed.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.UnitsFormatStyle.Attributed.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.Attributed.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Duration.UnitsFormatStyle(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle,  type metadata accessor for Duration.UnitsFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int Duration.UnitsFormatStyle.Attributed.hashValue.getter()
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  Swift::UInt v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  uint64_t v39;
  Swift::UInt32 v40;
  Swift::UInt v41;
  uint64_t v42;
  Swift::UInt *v43;
  uint64_t v44;
  char *v45;
  Swift::UInt64 v46;
  Swift::UInt64 v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  _BYTE v52[144];
  _BYTE v53[8];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  void v71[18];
  _BYTE v72[144];
  _BYTE v73[144];
  _BYTE v74[80];
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if ((v4(ObjectType, v2) & 1) != 0)
  {
    Swift::UInt8 v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_56;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v71, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v71,  (uint64_t)v72,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)v73,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v73) == 1)
  {
    Swift::UInt8 v5 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)v53,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v53[0] == 2)
  {
    uint64_t v7 = 0;
  }

  else
  {
    uint64_t v7 = v53[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v7);
  uint64_t v8 = v54;
  if (!v54)
  {
    Hasher._combine(_:)(0);
    char v13 = v53;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v8 + 16));
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)v52,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    char v13 = v52;
LABEL_20:
    outlined retain of LocalePreferences(v13);
    if (!v55) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v72,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  unint64_t v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16LL;
    --v9;
  }

  while (v9);
  swift_bridgeObjectRelease();
  if (!v55)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v56) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

uint64_t Duration.UnitsFormatStyle.Attributed.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.Attributed.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Duration.UnitsFormatStyle.Attributed(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle,  type metadata accessor for Duration.UnitsFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of ICUNumberFormatter.Signature( v15,  (uint64_t)v11,  type metadata accessor for Duration.UnitsFormatStyle);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v11,  v13,  type metadata accessor for Duration.UnitsFormatStyle.Attributed);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  return Duration.UnitsFormatStyle.Attributed.format(_:)(*a1, a1[1], a2);
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>( __int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (__int128 *)((char *)&v12 - v9);
  outlined init with copy of ICUNumberFormatter.Signature( v2,  (uint64_t)v7,  type metadata accessor for Duration.UnitsFormatStyle);
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v7,  (uint64_t)v10,  type metadata accessor for Duration.UnitsFormatStyle);
  __int128 v12 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *uint64_t v10 = v12;
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for Duration.UnitsFormatStyle);
  return outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v10,  a2,  type metadata accessor for Duration.UnitsFormatStyle);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.UnitsFormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.Attributed( void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.Attributed.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Duration.UnitsFormatStyle(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle,  type metadata accessor for Duration.UnitsFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.UnitsFormatStyle.Attributed()
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt v33;
  Swift::UInt v34;
  Swift::UInt8 v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  uint64_t v38;
  Swift::UInt32 v39;
  Swift::UInt v40;
  uint64_t v41;
  Swift::UInt *v42;
  uint64_t v43;
  char *v44;
  Swift::UInt64 v45;
  Swift::UInt64 v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  void v69[18];
  _BYTE v70[144];
  _BYTE v71[144];
  _BYTE v72[80];
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if ((v4(ObjectType, v2) & 1) != 0)
  {
    Swift::UInt8 v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_55;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v69, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v69,  (uint64_t)v70,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v70,  (uint64_t)v71,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v71) == 1)
  {
    Swift::UInt8 v5 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v70,  (uint64_t)&v51,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v51 == 2)
  {
    uint64_t v7 = 0;
  }

  else
  {
    uint64_t v7 = v51 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v7);
  uint64_t v8 = v52;
  if (!v52)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v51);
    if (!v53) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v8 + 16));
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9) {
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?( (uint64_t)v70,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16LL;
    --v9;
  }

  while (v9);
  swift_bridgeObjectRelease();
  if (!v53)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v54) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }

uint64_t Duration.UnitsFormatStyle.Attributed.subscript.getter()
{
  return swift_getAtKeyPath();
}

uint64_t Duration.UnitsFormatStyle.Attributed.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  specialized Measurement<>.AttributedStyle.subscript.setter(a1);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x189619628] + v3 + 8) - 8LL) + 8LL))(a1);
}

void (*Duration.UnitsFormatStyle.Attributed.subscript.modify( void *a1, void *a2))(uint64_t a1, char a2)
{
  Swift::UInt8 v5 = malloc(0x38uLL);
  *a1 = v5;
  *Swift::UInt8 v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(*MEMORY[0x189619628] + *a2 + 8LL);
  v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  _OWORD v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  _OWORD v5[6] = malloc(v8);
  swift_getAtKeyPath();
  return Measurement<>.AttributedStyle.subscript.modify;
}

uint64_t Duration.UnitsFormatStyle.Attributed.discreteInput(before:)(uint64_t a1, uint64_t a2)
{
  return Duration.UnitsFormatStyle.Attributed.discreteInput(before:)( a1,  a2,  1,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x18961AE98]);
}

uint64_t Duration.UnitsFormatStyle.discreteInput(before:)(uint64_t a1, uint64_t a2)
{
  return Duration.UnitsFormatStyle.Attributed.discreteInput(before:)( a1,  a2,  1,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x18961AE98]);
}

uint64_t Duration.UnitsFormatStyle.Attributed.discreteInput(after:)(uint64_t a1, uint64_t a2)
{
  return Duration.UnitsFormatStyle.Attributed.discreteInput(before:)( a1,  a2,  0,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x18961AE90]);
}

uint64_t Duration.UnitsFormatStyle.Attributed.discreteInput(before:)( uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = Duration.UnitsFormatStyle.bound(for:countingDown:)(a1, a2, a3);
  uint64_t v7 = v6;
  if ((v8 & 1) != 0)
  {
    uint64_t v9 = Duration.init(secondsComponent:attosecondsComponent:)();
    return a4(v5, v7, v9, v10);
  }

  return v5;
}

uint64_t Duration.UnitsFormatStyle.discreteInput(after:)(uint64_t a1, uint64_t a2)
{
  return Duration.UnitsFormatStyle.Attributed.discreteInput(before:)( a1,  a2,  0,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x18961AE90]);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.UnitsFormatStyle.Attributed( a1,  1,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x18961AE98],  a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.UnitsFormatStyle.Attributed( a1,  0,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x18961AE90],  a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>( uint64_t *a1@<X0>, int a2@<W3>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a4@<X8>)
{
  uint64_t result = Duration.UnitsFormatStyle.bound(for:countingDown:)(*a1, a1[1], a2);
  uint64_t v7 = result;
  uint64_t v9 = v8;
  if ((v10 & 1) != 0)
  {
    uint64_t v11 = Duration.init(secondsComponent:attosecondsComponent:)();
    uint64_t result = a3(v7, v9, v11, v12);
    uint64_t v7 = result;
    uint64_t v9 = v13;
  }

  *(void *)a4 = v7;
  *(void *)(a4 + 8) = v9;
  *(_BYTE *)(a4 + 16) = 0;
  return result;
}

uint64_t Duration.UnitsFormatStyle.bound(for:countingDown:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v41 - 8);
  MEMORY[0x1895F8858](v41);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(v3 + 16);
  uint64_t v40 = a1;
  uint64_t v14 = a1;
  uint64_t v15 = (void (*)(void, void, void))a2;
  char v16 = a3;
  uint64_t v17 = Duration.UnitsFormatStyle.interval(for:countingDown:allowedUnits:)(v14, a2, a3, v13);
  uint64_t v19 = v18;
  char v21 = v20;
  unint64_t v38 = v9;
  uint64_t v39 = v7;
  if ((v20 & 1) != 0)
  {
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x189619F60], v41);
  }

  else
  {
    uint64_t v22 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
    outlined init with copy of ICUNumberFormatter.Signature( v3 + *(int *)(v22 + 36),  (uint64_t)v9,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, &v9[*(int *)(v7 + 24)], v41);
  }

  int v23 = v16 & 1;
  uint64_t v24 = static Duration.bound(for:in:countingDown:roundingRule:)(v40, v15, v17, v19, v23, (uint64_t)v12);
  unint64_t v26 = v25;
  unint64_t v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  v27(v12, v41);
  if ((v21 & 1) != 0)
  {
    uint64_t v28 = swift_bridgeObjectRetain();
    uint64_t v29 = specialized _NativeSet.filter(_:)(v28);
    uint64_t v30 = Duration.UnitsFormatStyle.interval(for:countingDown:allowedUnits:)(v24, (uint64_t)v26, v23, v29);
    uint64_t v32 = v31;
    swift_release();
    uint64_t v33 = v3 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle(0LL) + 36);
    uint64_t v34 = (uint64_t)v38;
    outlined init with copy of ICUNumberFormatter.Signature( v33,  (uint64_t)v38,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    uint64_t v35 = v34 + *(int *)(v39 + 24);
    uint64_t v24 = static Duration.bound(for:in:countingDown:roundingRule:)(v24, v26, v30, v32, v23, v35);
    v27((char *)v35, v41);
  }

  return v24;
}

uint64_t Duration.UnitsFormatStyle.interval(for:countingDown:allowedUnits:)( uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v275 = a3;
  uint64_t v7 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  MEMORY[0x1895F8858](v7);
  v278 = &v263[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v9);
  v303 = &v263[-v10];
  uint64_t v292 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v276 = *(void *)(v292 - 8);
  MEMORY[0x1895F8858](v292);
  v274 = &v263[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = &v263[-v13];
  uint64_t v15 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v300 = (uint64_t)&v263[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = &v263[-v18];
  swift_bridgeObjectRetain();
  Swift::Int v20 = specialized _ArrayProtocol.filter(_:)( (Swift::Int)&outlined read-only object #0 of static Duration.UnitsFormatStyle.Unit._Unit.allCases.getter,  a4);
  swift_bridgeObjectRelease();
  int64_t v21 = *(void *)(v20 + 16);
  uint64_t v293 = a2;
  uint64_t v302 = a1;
  uint64_t v289 = v15;
  uint64_t v304 = v7;
  if (v21)
  {
    v307[0] = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    uint64_t v22 = 0LL;
    uint64_t v23 = v307[0];
    uint64_t v24 = *(void *)(v307[0] + 16LL);
    do
    {
      char v25 = *(_BYTE *)(v20 + v22 + 32);
      v307[0] = v23;
      unint64_t v26 = *(void *)(v23 + 24);
      if (v24 + v22 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v26 > 1,  v24 + v22 + 1,  1);
        uint64_t v23 = v307[0];
      }

      *(void *)(v23 + 16) = v24 + v22 + 1;
      *(_BYTE *)(v23 + v24 + v22++ + 32) = v25;
    }

    while (v21 != v22);
    uint64_t v27 = v23;
    swift_bridgeObjectRelease();
    uint64_t v28 = v27;
    a2 = v293;
    a1 = v302;
    uint64_t v15 = v289;
    uint64_t v7 = v304;
    uint64_t v29 = *(void *)(v28 + 16);
    if (v29) {
      goto LABEL_7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return -1000000000000000000LL;
  }

  swift_bridgeObjectRelease();
  uint64_t v28 = MEMORY[0x18961AFE8];
  uint64_t v29 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
  if (!v29) {
    goto LABEL_12;
  }
LABEL_7:
  uint64_t v288 = v28;
  uint64_t v294 = *(char *)(v29 + v28 + 31);
  v307[0] = a1;
  v307[1] = a2;
  uint64_t v30 = v284;
  uint64_t v31 = *(void *)(v284 + 32);
  BOOL v32 = *(_BYTE *)(v284 + 40) == 0;
  uint64_t v286 = v29;
  if (!v32) {
    uint64_t v31 = v29;
  }
  uint64_t v301 = v31;
  uint64_t v305 = v284 + *(int *)(v7 + 36);
  outlined init with copy of ICUNumberFormatter.Signature( v305,  (uint64_t)v19,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  uint64_t v33 = &v19[*(int *)(v15 + 24)];
  uint64_t v34 = v276;
  uint64_t v35 = *(void (**)(_BYTE *))(v276 + 104);
  int v268 = *MEMORY[0x189619F70];
  uint64_t v36 = v292;
  v35(v14);
  char v37 = static FloatingPointRoundingRule.== infix(_:_:)();
  unint64_t v38 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
  v38((uint64_t)v14, v36);
  v38((uint64_t)v33, v36);
  uint64_t v39 = v303;
  outlined init with copy of ICUNumberFormatter.Signature( v30,  (uint64_t)v303,  type metadata accessor for Duration.UnitsFormatStyle);
  if ((v37 & 1) != 0)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v39, type metadata accessor for Duration.UnitsFormatStyle);
    int v270 = *MEMORY[0x189619F78];
    int v277 = 1;
    uint64_t v40 = v289;
  }

  else
  {
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)&v39[*(int *)(v304 + 36)],  (uint64_t)v19,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    uint64_t v40 = v289;
    uint64_t v42 = (uint64_t)v39;
    uint64_t v43 = &v19[*(int *)(v289 + 24)];
    int v270 = *MEMORY[0x189619F78];
    v35(v14);
    int v277 = static FloatingPointRoundingRule.== infix(_:_:)();
    v38((uint64_t)v14, v36);
    outlined destroy of ICUNumberFormatter.Signature(v42, type metadata accessor for Duration.UnitsFormatStyle);
    v38((uint64_t)v43, v36);
  }

  v287 = v38;
  uint64_t v44 = 0LL;
  unsigned int v280 = 0;
  uint64_t v282 = 0LL;
  uint64_t v281 = 0LL;
  uint64_t v45 = v294;
  int v267 = *MEMORY[0x189619F88];
  int v266 = *MEMORY[0x189619F90];
  int v265 = *MEMORY[0x189619F60];
  uint64_t v272 = 3LL * (v294 - 5) + 3;
  uint64_t v271 = v272 ^ 0x7FFFFFFFFFFFFFFFLL;
  int v264 = *MEMORY[0x189619F68];
  uint64_t v269 = (char)(v294 - 5);
  uint64_t v279 = 1LL;
  unsigned int v273 = (v294 - 5);
  uint64_t result = v288;
  while (1)
  {
    uint64_t v48 = v44 + 1;
    if (__OFADD__(v44, 1LL))
    {
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
LABEL_207:
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
      __break(1u);
LABEL_218:
      __break(1u);
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
      goto LABEL_221;
    }

    if (v301 < 1) {
      goto LABEL_194;
    }
    uint64_t v49 = (_BYTE *)*(char *)(result + v44 + 32);
    uint64_t v298 = v44;
    uint64_t v291 = v301 - 1;
    if (v49 < 5)
    {
      static Duration.interval(fractionalSecondsLength:)(0LL);
      unint64_t v306 = qword_1837C3E98[(void)v49];
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v50 = static Duration.* infix<A>(_:_:)();
    }

    else
    {
      uint64_t v50 = static Duration.interval(fractionalSecondsLength:)(3LL * ((_BYTE)v49 - 5) + 3);
    }

    uint64_t v295 = v51;
    uint64_t v296 = v50;
    uint64_t result = *(void *)(v305 + 8);
    uint64_t v52 = v305 + *(int *)(v40 + 28);
    char v53 = *(_BYTE *)(v52 + 8);
    uint64_t v297 = v48;
    uint64_t v290 = v52;
    if (v45 < 5)
    {
      static Duration.interval(fractionalSecondsLength:)(result);
      unint64_t v306 = qword_1837C3E98[v45];
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v55 = static Duration.* infix<A>(_:_:)();
      uint64_t v57 = v58;
      if ((v53 & 1) != 0) {
        goto LABEL_34;
      }
      goto LABEL_32;
    }

    if (v273 >= 3) {
      goto LABEL_215;
    }
    uint64_t v54 = v271;
    if (v271 >= result) {
      uint64_t v54 = result;
    }
    uint64_t result = v272 + v54;
    if (__OFADD__(v272, v54)) {
      goto LABEL_197;
    }
    uint64_t result = static Duration.interval(fractionalSecondsLength:)(result);
    uint64_t v55 = result;
    uint64_t v57 = v56;
    if ((v53 & 1) == 0)
    {
LABEL_32:
      uint64_t v59 = static Duration.* infix(_:_:)();
      uint64_t v61 = v60;
      if ((static Duration.< infix(_:_:)() & 1) == 0)
      {
        uint64_t v55 = v59;
        uint64_t v57 = v61;
      }
    }

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)( unsigned __int8 *__src, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *__dst)
{
  uint64_t v22 = __src;
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  size_t v8 = a2 - __src;
  unint64_t v9 = a3 - (void)a2;
  int64_t v21 = __dst;
  if (a2 - __src >= (uint64_t)(a3 - (void)a2))
  {
    if ((v9 & 0x8000000000000000LL) == 0)
    {
      uint64_t v14 = &v4[v9];
      Swift::Int v20 = &v4[v9];
      uint64_t v22 = v6;
      if (v7 < v6 && (unsigned __int8 *)a3 != v6)
      {
        uint64_t v15 = (unsigned __int8 *)(a3 - 1);
        while (1)
        {
          uint64_t v16 = v15 + 1;
          uint64_t v17 = v6 - 1;
          unsigned int v18 = *(v6 - 1);
          if (*(v14 - 1) >= v18)
          {
            Swift::Int v20 = v14 - 1;
            if (v16 < v14 || v15 >= v14 || v16 != v14) {
              *uint64_t v15 = *(v14 - 1);
            }
            --v14;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }

          else
          {
            if (v16 != v6 || v15 >= v6) {
              *uint64_t v15 = v18;
            }
            uint64_t v22 = --v6;
            if (v17 <= v7) {
              goto LABEL_38;
            }
          }

          --v15;
          if (v14 <= v4) {
            goto LABEL_38;
          }
        }
      }

      goto LABEL_38;
    }
  }

  else if ((v8 & 0x8000000000000000LL) == 0)
  {
    if (__dst != __src || a2 <= __dst) {
      memmove(__dst, __src, v8);
    }
    uint64_t v10 = &v4[v8];
    Swift::Int v20 = &v4[v8];
    if (v6 != v7 && (unint64_t)v6 < a3)
    {
      do
      {
        unsigned int v11 = *v6;
        unsigned int v12 = *v4;
        if (v11 >= v12)
        {
          if (v7 != v4) {
            *uint64_t v7 = v12;
          }
          int64_t v21 = ++v4;
          uint64_t v13 = v6;
        }

        else
        {
          uint64_t v13 = v6 + 1;
          if (v7 < v6 || v7 >= v13 || v7 != v6) {
            *uint64_t v7 = v11;
          }
        }

        ++v7;
        if (v4 >= v10) {
          break;
        }
        uint64_t v6 = v13;
      }

      while ((unint64_t)v13 < a3);
      uint64_t v22 = v7;
    }

uint64_t specialized static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.== infix(_:_:)( void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  if (a1[1] != a2[1]) {
    return 0LL;
  }
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v5 = *(int *)(v4 + 28);
  uint64_t v6 = (double *)((char *)a1 + v5);
  char v7 = *((_BYTE *)a1 + v5 + 8);
  size_t v8 = (double *)((char *)a2 + v5);
  char v9 = *((_BYTE *)a2 + v5 + 8);
  if ((v7 & 1) != 0)
  {
    if ((v9 & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    if (*v6 != *v8) {
      char v9 = 1;
    }
    if ((v9 & 1) != 0) {
      return 0LL;
    }
  }

  return 1LL;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys,  &unk_189C84320);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys,  &unk_189C84320);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys,  &unk_189C84320);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys,  &unk_189C84320);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys);
  }

  return result;
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for Duration.UnitsFormatStyle);
}

uint64_t partial apply for closure #1 in Duration.UnitsFormatStyle._formatFields(_:)( void *a1, unint64_t a2, char *a3)
{
  return closure #1 in Duration.UnitsFormatStyle._formatFields(_:)(a1, a2, a3, *(_OWORD **)(v3 + 16));
}

BOOL specialized static Duration.UnitsFormatStyle.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  __int128 v4 = *a1;
  __int128 v13 = *a2;
  __int128 v14 = v4;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) == 0
    || (specialized static Set.== infix(_:_:)(*((void *)a1 + 2), *((void *)a2 + 2)) & 1) == 0)
  {
    return 0LL;
  }

  char v7 = *((_BYTE *)a2 + 40);
  if ((*((_BYTE *)a1 + 40) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 40)) {
      return 0LL;
    }
  }

  else
  {
    if (*((void *)a1 + 4) != *((void *)a2 + 4)) {
      char v7 = 1;
    }
    if ((v7 & 1) != 0) {
      return 0LL;
    }
  }

  if (*((void *)a1 + 6) != *((void *)a2 + 6)) {
    return 0LL;
  }
  uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  if ((specialized static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.== infix(_:_:)( (__int128 *)((char *)a1 + *(int *)(v8 + 36)),  (__int128 *)((char *)a2 + *(int *)(v8 + 36))) & 1) == 0) {
    return 0LL;
  }
  uint64_t v9 = *(int *)(v8 + 40);
  uint64_t v10 = (void *)((char *)a1 + v9);
  char v11 = *((_BYTE *)a1 + v9 + 16);
  uint64_t v12 = (uint64_t)a2 + v9;
  if ((v11 & 1) == 0) {
    return (*(_BYTE *)(v12 + 16) & 1) == 0 && *v10 == *(void *)v12 && v10[1] == *(void *)(v12 + 8);
  }
  return (*(_BYTE *)(v12 + 16) & 1) != 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_AI16AttributedStringVs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j7VSdAC16mn53VIggnyr_SS8skeleton_AG011measurementF0Sd0J5ValuetAIs5O11OIegnrzr_TRSSAMSdARIggnyr_Tf1cn_nTf4ng_n( uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t, _BYTE *, double))
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x18961AFE8];
  if (v2)
  {
    uint64_t v17 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v17;
    uint64_t v6 = (void *)(a1 + 56);
    do
    {
      uint64_t v7 = *(v6 - 3);
      uint64_t v8 = *(v6 - 2);
      double v9 = *(double *)v6;
      v14[0] = *((_BYTE *)v6 - 8);
      double v15 = v9;
      swift_bridgeObjectRetain();
      a2(&v16, v7, v8, v14, v9);
      swift_bridgeObjectRelease();
      uint64_t v17 = v3;
      unint64_t v11 = *(void *)(v3 + 16);
      unint64_t v10 = *(void *)(v3 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v3 = v17;
      }

      uint64_t v12 = v16;
      *(void *)(v3 + 16) = v11 + 1;
      *(void *)(v3 + 8 * v11 + 32) = v12;
      v6 += 4;
      --v2;
    }

    while (v2);
  }

  return v3;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_SSs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j57VSdSSIggnyo_SS8skeleton_AG011measurementF0Sd0H5ValuetSSs5M11OIegnrzr_TRSSAMSdSSIggnyo_Tf1cn_nTf4ng_n( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _BYTE *, double))
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x18961AFE8];
  if (v2)
  {
    uint64_t v19 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v19;
    uint64_t v5 = (void *)(a1 + 56);
    do
    {
      uint64_t v7 = *(v5 - 3);
      uint64_t v6 = *(v5 - 2);
      double v8 = *(double *)v5;
      v17[0] = *((_BYTE *)v5 - 8);
      double v18 = v8;
      swift_bridgeObjectRetain();
      uint64_t v9 = a2(v7, v6, v17, v8);
      uint64_t v11 = v10;
      swift_bridgeObjectRelease();
      uint64_t v19 = v3;
      unint64_t v13 = *(void *)(v3 + 16);
      unint64_t v12 = *(void *)(v3 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v3 = v19;
      }

      *(void *)(v3 + 16) = v13 + 1;
      uint64_t v14 = v3 + 16 * v13;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v11;
      v5 += 4;
      --v2;
    }

    while (v2);
  }

  return v3;
}

uint64_t partial apply for closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)(a1, a2, a3, *(void *)(v3 + 16));
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.CodingKeys,  &unk_189C84290);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.CodingKeys,  &unk_189C84290);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.CodingKeys,  &unk_189C84290);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.CodingKeys,  &unk_189C84290);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Unit,  &type metadata for Duration.UnitsFormatStyle.Unit);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Unit,  &type metadata for Duration.UnitsFormatStyle.Unit);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Unit,  &type metadata for Duration.UnitsFormatStyle.Unit);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.UnitWidth,  &type metadata for Duration.UnitsFormatStyle.UnitWidth);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.UnitWidth,  &type metadata for Duration.UnitsFormatStyle.UnitWidth);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.UnitWidth,  &type metadata for Duration.UnitsFormatStyle.UnitWidth);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy,  &type metadata for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy,  &type metadata for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy,  &type metadata for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>( unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<Duration.UnitsFormatStyle.Unit>);
    uint64_t v8 = a2();
    uint64_t result = MEMORY[0x186E20D4C](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>( unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    uint64_t v8 = a2;
    uint64_t result = MEMORY[0x186E20D4C](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t partial apply for closure #1 in Duration.UnitsFormatStyle.Attributed._formatFields(_:)@<X0>( void *a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>, uint64_t a5@<D0>)
{
  return closure #1 in Duration.UnitsFormatStyle.Attributed._formatFields(_:)( a1,  a2,  a3,  *(__int128 **)(v5 + 16),  *(void *)(v5 + 24),  *(void *)(v5 + 32),  a4,  a5);
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed.CodingKeys,  &unk_189C84200);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed.CodingKeys,  &unk_189C84200);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed.CodingKeys,  &unk_189C84200);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed.CodingKeys,  &unk_189C84200);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.Attributed(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for Duration.UnitsFormatStyle.Attributed);
}

uint64_t specialized static Duration.UnitsFormatStyle.removingZeroUnits(units:values:)( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v5 = a1 + 32;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v7 = 0LL;
    uint64_t v8 = (void *)MEMORY[0x18961AFE8];
    uint64_t v9 = (char *)MEMORY[0x18961AFE8];
    while (1)
    {
      double v10 = *(double *)(a2 + 8 * v7 + 32);
      if (v10 != 0.0)
      {
        if (v7 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return result;
        }

        char v11 = *(_BYTE *)(v5 + v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v9 + 2) + 1LL,  1,  v9);
        }
        unint64_t v13 = *((void *)v9 + 2);
        unint64_t v12 = *((void *)v9 + 3);
        if (v13 >= v12 >> 1) {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v12 > 1),  v13 + 1,  1,  v9);
        }
        *((void *)v9 + 2) = v13 + 1;
        v9[v13 + 32] = v11;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v8[2] + 1LL,  1,  v8);
          uint64_t v8 = (void *)result;
        }

        unint64_t v15 = v8[2];
        unint64_t v14 = v8[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v14 > 1),  v15 + 1,  1,  v8);
          uint64_t v8 = (void *)result;
        }

        void v8[2] = v15 + 1;
        *(double *)&v8[v15 + 4] = v10;
      }

      if (v2 == ++v7)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v9;
      }
    }
  }

  return MEMORY[0x18961AFE8];
}

uint64_t specialized static Duration.UnitsFormatStyle.unitsToUse(duration:allowedUnits:maximumUnitCount:roundSmallerParts:trailingFractionalPartLength:roundingIncrement:dropZeroUnits:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  uint64_t v18 = specialized _copyCollectionToContiguousArray<A>(_:)(a3);
  swift_bridgeObjectRelease();
  uint64_t v37 = v18;
  specialized MutableCollection<>.sort(by:)(&v37);
  uint64_t v19 = v37;
  uint64_t v36 = a8;
  Swift::Int v20 = (double *)Duration.valuesForUnits(_:trailingFractionalLength:smallestUnitRounding:roundingIncrement:)( v37,  a7,  a6,  a8,  a9 & 1,  a1,  a2);
  if ((a5 & 1) != 0 || *(void *)(a3 + 16) <= a4)
  {
    if ((a10 & 1) != 0)
    {
      uint64_t v28 = specialized static Duration.UnitsFormatStyle.removingZeroUnits(units:values:)(v19, (uint64_t)v20);
      swift_release();
      swift_bridgeObjectRelease();
      return v28;
    }
  }

  else if ((a10 & 1) == 0 {
         || (uint64_t v21 = specialized static Duration.UnitsFormatStyle.removingZeroUnits(units:values:)(v19, (uint64_t)v20),
  }
             uint64_t v23 = v22,
             swift_release(),
             swift_bridgeObjectRelease(),
             uint64_t v19 = v21,
             Swift::Int v20 = v23,
             *(void *)(v21 + 16) > a4))
  {
    uint64_t v24 = *((void *)v20 + 2);
    if (v24)
    {
      if (v20[4] != 0.0)
      {
        uint64_t v26 = 0LL;
        goto LABEL_17;
      }

      if (v24 != 1)
      {
        for (uint64_t i = 5LL; ; ++i)
        {
          uint64_t v26 = i - 4;
          if (v20[i] != 0.0) {
            break;
          }
          uint64_t v27 = i - 3;
          if (__OFADD__(v26, 1LL))
          {
            __break(1u);
            goto LABEL_30;
          }

          if (v27 == v24) {
            return v19;
          }
        }

Swift::Int specialized _ArrayProtocol.filter(_:)(Swift::Int result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    unint64_t v4 = 0LL;
    Swift::Int v5 = result + 32;
    uint64_t v6 = a2 + 56;
    uint64_t v7 = MEMORY[0x18961AFE8];
    Swift::Int v17 = result + 32;
    while (1)
    {
      uint64_t v8 = v4 <= v2 ? v2 : v4;
      while (1)
      {
        if (v4 == v8)
        {
          __break(1u);
          return result;
        }

        uint64_t v9 = v4++;
        if (*(void *)(a2 + 16))
        {
          Swift::UInt v10 = *(unsigned __int8 *)(v5 + v9);
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v10);
          uint64_t result = Hasher._finalize()();
          uint64_t v11 = -1LL << *(_BYTE *)(a2 + 32);
          unint64_t v12 = result & ~v11;
          if (((*(void *)(v6 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0) {
            break;
          }
        }

{
  unint64_t v2;
  unint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = 0LL;
    unint64_t v4 = result + 32;
    Swift::Int v5 = MEMORY[0x18961AFE8];
    while (1)
    {
      uint64_t v6 = v3 <= v2 ? v2 : v3;
      while (1)
      {
        if (v3 == v6)
        {
          __break(1u);
          return result;
        }

        uint64_t v7 = *(unsigned __int8 *)(v4 + v3++);
        uint64_t v8 = v7 - 1;
        if ((v7 - 1) <= 0xA && ((0x63Fu >> v8) & 1) != 0)
        {
          uint64_t v9 = *(void *)(a2 + 40);
          if (*(void *)(v9 + 16))
          {
            Swift::UInt v10 = qword_1837C6F18[v8];
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v10);
            uint64_t result = Hasher._finalize()();
            uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
            unint64_t v12 = result & ~v11;
            if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0) {
              break;
            }
          }
        }

uint64_t specialized Duration.UnitsFormatStyle.UnitWidth.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6874646977LL && a2 == 0xE500000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x536E726574746170LL && a2 == 0xEC000000656C7974LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4C6D756D696E696DLL && a2 == 0xED00006874676E65LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x4C6D756D6978616DLL && a2 == 0xED00006874676E65LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x676E69646E756F72LL && a2 == 0xEC000000656C7552LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0xD000000000000011LL && a2 == 0x80000001839CA780LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t specialized Duration.UnitsFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x556465776F6C6C61LL && a2 == 0xEC0000007374696ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x7464695774696E75LL && a2 == 0xE900000000000068LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0xD000000000000010LL && a2 == 0x80000001839CE4B0LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0xD000000000000015LL && a2 == 0x80000001839CE4D0LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0xD000000000000015LL && a2 == 0x80000001839CE4F0LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else if (a1 == 0xD000000000000011LL && a2 == 0x80000001839CE510LL)
  {
    swift_bridgeObjectRelease();
    return 6LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 6LL;
    }
    else {
      return 7LL;
    }
  }

uint64_t base witness table accessor for Equatable in Duration.UnitsFormatStyle.FractionalPartDisplayStrategy()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle,  type metadata accessor for Duration.UnitsFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle,  type metadata accessor for Duration.UnitsFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle,  type metadata accessor for Duration.UnitsFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in Duration.UnitsFormatStyle()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle,  type metadata accessor for Duration.UnitsFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle.Attributed( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed,  type metadata accessor for Duration.UnitsFormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed,  type metadata accessor for Duration.UnitsFormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed);
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed,  type metadata accessor for Duration.UnitsFormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in Duration.UnitsFormatStyle.Attributed()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed,  type metadata accessor for Duration.UnitsFormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed);
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle.Attributed( uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed,  type metadata accessor for Duration.UnitsFormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle,  type metadata accessor for Duration.UnitsFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_183237FE8()
{
  return Duration.UnitsFormatStyle.Attributed.subscript.getter();
}

uint64_t sub_18323800C(uint64_t a1)
{
  return swift_release();
}

uint64_t sub_183238050()
{
  return 8LL;
}

void *sub_18323805C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Duration.UnitsFormatStyle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *(void *)a1 = v5;
    uint64_t v3 = v5 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain();
  }

  else
  {
    uint64_t v8 = a2[1];
    uint64_t v9 = a2[2];
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v8;
    uint64_t v10 = a2[3];
    uint64_t v11 = a2[4];
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    uint64_t v12 = *(int *)(a3 + 36);
    uint64_t v13 = a1 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    *(_OWORD *)(a1 + v12) = *(_OWORD *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
    uint64_t v16 = *(int *)(v15 + 24);
    uint64_t v26 = v14 + v16;
    uint64_t v27 = v13 + v16;
    uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v18(v27, v26, v17);
    uint64_t v19 = *(int *)(v15 + 28);
    uint64_t v20 = v13 + v19;
    uint64_t v21 = v14 + v19;
    *(void *)uint64_t v20 = *(void *)v21;
    *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
    uint64_t v22 = *(int *)(a3 + 40);
    uint64_t v23 = v3 + v22;
    uint64_t v24 = (uint64_t)a2 + v22;
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
  }

  return v3;
}

uint64_t destroy for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL) + 24);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

uint64_t initializeWithCopy for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_OWORD *)(a1 + v6) = *(_OWORD *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v10 = *(int *)(v9 + 24);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = v8 + v10;
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  uint64_t v15 = *(int *)(v9 + 28);
  uint64_t v16 = v7 + v15;
  uint64_t v17 = v8 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  uint64_t v18 = *(int *)(a3 + 40);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  return a1;
}

uint64_t assignWithCopy for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  uint64_t v7 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = a2 + v8;
  *uint64_t v9 = *(void *)(a2 + v8);
  v9[1] = *(void *)(a2 + v8 + 8);
  uint64_t v11 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v12 = *(int *)(v11 + 24);
  uint64_t v13 = (char *)v9 + v12;
  uint64_t v14 = v10 + v12;
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  uint64_t v16 = *(int *)(v11 + 28);
  uint64_t v17 = (char *)v9 + v16;
  uint64_t v18 = (uint64_t *)(v10 + v16);
  uint64_t v19 = *v18;
  _BYTE v17[8] = *((_BYTE *)v18 + 8);
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = *(int *)(a3 + 40);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  LOBYTE(v19) = *(_BYTE *)(v22 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(_BYTE *)(v21 + 16) = v19;
  return a1;
}

uint64_t initializeWithTake for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v11 = *(int *)(v10 + 24);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
  uint64_t v15 = *(int *)(v10 + 28);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = v9 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  uint64_t v18 = *(int *)(a3 + 40);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  return a1;
}

uint64_t assignWithTake for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v12 = *(int *)(v11 + 24);
  uint64_t v13 = v9 + v12;
  uint64_t v14 = v10 + v12;
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40LL))(v13, v14, v15);
  uint64_t v16 = *(int *)(v11 + 28);
  uint64_t v17 = v9 + v16;
  uint64_t v18 = v10 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  uint64_t v19 = *(int *)(a3 + 40);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183238644(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 36)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1832386CC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 36)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for Duration.UnitsFormatStyle()
{
  uint64_t result = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle.UnitWidth( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && a1[8]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.UnitWidth( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(_BYTE *)uint64_t result = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Duration.UnitsFormatStyle.UnitWidth()
{
  return &type metadata for Duration.UnitsFormatStyle.UnitWidth;
}

ValueMetadata *type metadata accessor for Duration.UnitsFormatStyle.Unit()
{
  return &type metadata for Duration.UnitsFormatStyle.Unit;
}

ValueMetadata *type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy()
{
  return &type metadata for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy;
}

uint64_t *initializeBufferWithCopyOfBuffer for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  BOOL v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *BOOL v4 = *a2;
    BOOL v4 = (uint64_t *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 28);
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (char *)a2 + v11;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
  }

  return v4;
}

uint64_t destroy for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

_OWORD *initializeWithCopy for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  _OWORD v11[8] = v12[8];
  return a1;
}

void *assignWithCopy for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy( void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[8];
  *(void *)uint64_t v11 = *(void *)v12;
  _OWORD v11[8] = v13;
  return a1;
}

_OWORD *initializeWithTake for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  _OWORD v11[8] = v12[8];
  return a1;
}

_OWORD *assignWithTake for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  _OWORD v11[8] = v12[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183238BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_183238C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy()
{
  uint64_t result = type metadata accessor for FloatingPointRoundingRule();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80LL);
  uint64_t v6 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    *(void *)a1 = v6;
    a1 = v6 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain();
  }

  else
  {
    uint64_t v7 = v4;
    uint64_t v8 = a2[1];
    uint64_t v9 = a2[2];
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v8;
    uint64_t v10 = a2[3];
    uint64_t v11 = a2[4];
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    uint64_t v12 = *(int *)(v4 + 36);
    uint64_t v13 = a1 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    *(_OWORD *)(a1 + v12) = *(_OWORD *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
    uint64_t v16 = *(int *)(v15 + 24);
    uint64_t v26 = v14 + v16;
    uint64_t v27 = v13 + v16;
    uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v18(v27, v26, v17);
    uint64_t v19 = *(int *)(v15 + 28);
    uint64_t v20 = v13 + v19;
    uint64_t v21 = v14 + v19;
    *(void *)uint64_t v20 = *(void *)v21;
    *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
    uint64_t v22 = *(int *)(v7 + 40);
    uint64_t v23 = a1 + v22;
    uint64_t v24 = (uint64_t)a2 + v22;
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
  }

  return a1;
}

uint64_t destroy for Duration.UnitsFormatStyle.Attributed(uint64_t a1)
{
  uint64_t v2 = a1 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle(0LL) + 36);
  uint64_t v3 = v2 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL) + 24);
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
}

uint64_t initializeWithCopy for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v21 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v5 = *(int *)(v21 + 36);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(_OWORD *)(a1 + outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v6, v5) = *(_OWORD *)(a2 + v5);
  uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v9 = *(int *)(v8 + 24);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = v7 + v9;
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  uint64_t v14 = *(int *)(v8 + 28);
  uint64_t v15 = v6 + v14;
  uint64_t v16 = v7 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  uint64_t v17 = *(int *)(v21 + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_BYTE *)(v18 + 16) = *(_BYTE *)(v19 + 16);
  return a1;
}

uint64_t assignWithCopy for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  uint64_t v5 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v7 = *(int *)(v6 + 36);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = *(void *)(a2 + v7 + 8);
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v11 = *(int *)(v10 + 24);
  uint64_t v12 = (char *)v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24LL))(v12, v13, v14);
  uint64_t v15 = *(int *)(v10 + 28);
  uint64_t v16 = (char *)v8 + v15;
  uint64_t v17 = (uint64_t *)(v9 + v15);
  uint64_t v18 = *v17;
  _OWORD v16[8] = *((_BYTE *)v17 + 8);
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = *(int *)(v6 + 40);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  LOBYTE(v18) = *(_BYTE *)(v21 + 16);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *(_BYTE *)(v20 + 16) = v18;
  return a1;
}

uint64_t initializeWithTake for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v6 = *(int *)(v5 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_OWORD *)(a1 + v6) = *(_OWORD *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v10 = *(int *)(v9 + 24);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = v8 + v10;
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  uint64_t v14 = *(int *)(v9 + 28);
  uint64_t v15 = v7 + v14;
  uint64_t v16 = v8 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  uint64_t v17 = *(int *)(v5 + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_BYTE *)(v18 + 16) = *(_BYTE *)(v19 + 16);
  return a1;
}

uint64_t assignWithTake for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v7 = *(int *)(v6 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v11 = *(int *)(v10 + 24);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  uint64_t v15 = *(int *)(v10 + 28);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = v9 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  uint64_t v18 = *(int *)(v6 + 40);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle.Attributed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1832392DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.Attributed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_183239324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for Duration.UnitsFormatStyle.Attributed()
{
  uint64_t result = type metadata accessor for Duration.UnitsFormatStyle(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.Attributed.CodingKeys()
{
  return &unk_189C84200;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1832394BC + 4 * byte_1837C30B8[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1832394F0 + 4 * byte_1837C30B3[v4]))();
}

uint64_t sub_1832394F0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832394F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183239500LL);
  }
  return result;
}

uint64_t sub_18323950C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183239514LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_183239518(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183239520(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.CodingKeys()
{
  return &unk_189C84290;
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_183239588 + 4 * byte_1837C30C2[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1832395BC + 4 * byte_1837C30BD[v4]))();
}

uint64_t sub_1832395BC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832395C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1832395CCLL);
  }
  return result;
}

uint64_t sub_1832395D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1832395E0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1832395E4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832395EC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys()
{
  return &unk_189C84320;
}

void *type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys()
{
  return &unk_189C843B0;
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.Unit( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_183239664 + 4 * byte_1837C30CC[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_183239698 + 4 * byte_1837C30C7[v4]))();
}

uint64_t sub_183239698(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832396A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1832396A8LL);
  }
  return result;
}

uint64_t sub_1832396B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1832396BCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 7;
  return result;
}

uint64_t sub_1832396C0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1832396C8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Duration.UnitsFormatStyle.Unit._Unit()
{
  return &type metadata for Duration.UnitsFormatStyle.Unit._Unit;
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.Attributed.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_183239724 + 4 * byte_1837C30D1[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_183239744 + 4 * byte_1837C30D6[v4]))();
  }
}

_BYTE *sub_183239724(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_183239744(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_18323974C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_183239754(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_18323975C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_183239764(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.Unit.CodingKeys()
{
  return &unk_189C844D0;
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.UnitWidth.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1832397CC + 4 * byte_1837C30E0[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183239800 + 4 * byte_1837C30DB[v4]))();
}

uint64_t sub_183239800(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183239808(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183239810LL);
  }
  return result;
}

uint64_t sub_18323981C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183239824LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_183239828(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183239830(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.UnitWidth.CodingKeys()
{
  return &unk_189C84560;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Duration.UnitsFormatStyle.Unit._Unit()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [Duration.UnitsFormatStyle.Unit._Unit] and conformance [A],  &demangling cache variable for type metadata for [Duration.UnitsFormatStyle.Unit._Unit],  MEMORY[0x189618488]);
}

uint64_t outlined assign with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

id POSIXError._nsError.getter()
{
  return *v0;
}

void __swiftcall POSIXError.init(_nsError:)(Foundation::POSIXError *__return_ptr retstr, NSError *_nsError)
{
  uint64_t v4 = -[NSError domain](_nsError, sel_domain);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v7 == v8) {
    goto LABEL_7;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_bridgeObjectRelease_n();
  }

  retstr->_nsError.super.isa = (Class)_nsError;
}

id static POSIXError.errorDomain.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
}

uint64_t POSIXError.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

id protocol witness for static CustomNSError.errorDomain.getter in conformance POSIXError()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
}

uint64_t static POSIXError.EPERM.getter()
{
  return 1LL;
}

uint64_t static POSIXError.ENOENT.getter()
{
  return 2LL;
}

uint64_t static POSIXError.ESRCH.getter()
{
  return 3LL;
}

uint64_t static POSIXError.EINTR.getter()
{
  return 4LL;
}

uint64_t static POSIXError.EIO.getter()
{
  return 5LL;
}

uint64_t static POSIXError.ENXIO.getter()
{
  return 6LL;
}

uint64_t static POSIXError.E2BIG.getter()
{
  return 7LL;
}

uint64_t static POSIXError.ENOEXEC.getter()
{
  return 8LL;
}

uint64_t static POSIXError.EBADF.getter()
{
  return 9LL;
}

uint64_t static POSIXError.ECHILD.getter()
{
  return 10LL;
}

uint64_t static POSIXError.EDEADLK.getter()
{
  return 11LL;
}

uint64_t static POSIXError.ENOMEM.getter()
{
  return 12LL;
}

uint64_t static POSIXError.EACCES.getter()
{
  return 13LL;
}

uint64_t static POSIXError.EFAULT.getter()
{
  return 14LL;
}

uint64_t static POSIXError.ENOTBLK.getter()
{
  return 15LL;
}

uint64_t static POSIXError.EBUSY.getter()
{
  return 16LL;
}

uint64_t static POSIXError.EEXIST.getter()
{
  return 17LL;
}

uint64_t static POSIXError.EXDEV.getter()
{
  return 18LL;
}

uint64_t static POSIXError.ENODEV.getter()
{
  return 19LL;
}

uint64_t static POSIXError.ENOTDIR.getter()
{
  return 20LL;
}

uint64_t static POSIXError.EISDIR.getter()
{
  return 21LL;
}

uint64_t static POSIXError.EINVAL.getter()
{
  return 22LL;
}

uint64_t static POSIXError.ENFILE.getter()
{
  return 23LL;
}

uint64_t static POSIXError.EMFILE.getter()
{
  return 24LL;
}

uint64_t static POSIXError.ENOTTY.getter()
{
  return 25LL;
}

uint64_t static POSIXError.ETXTBSY.getter()
{
  return 26LL;
}

uint64_t static POSIXError.EFBIG.getter()
{
  return 27LL;
}

uint64_t static POSIXError.ENOSPC.getter()
{
  return 28LL;
}

uint64_t static POSIXError.ESPIPE.getter()
{
  return 29LL;
}

uint64_t static POSIXError.EROFS.getter()
{
  return 30LL;
}

uint64_t static POSIXError.EMLINK.getter()
{
  return 31LL;
}

uint64_t static POSIXError.EPIPE.getter()
{
  return 32LL;
}

uint64_t static POSIXError.EDOM.getter()
{
  return 33LL;
}

uint64_t static POSIXError.ERANGE.getter()
{
  return 34LL;
}

uint64_t static POSIXError.EAGAIN.getter()
{
  return 35LL;
}

uint64_t static POSIXError.EINPROGRESS.getter()
{
  return 36LL;
}

uint64_t static POSIXError.EALREADY.getter()
{
  return 37LL;
}

uint64_t static POSIXError.ENOTSOCK.getter()
{
  return 38LL;
}

uint64_t static POSIXError.EDESTADDRREQ.getter()
{
  return 39LL;
}

uint64_t static POSIXError.EMSGSIZE.getter()
{
  return 40LL;
}

uint64_t static POSIXError.EPROTOTYPE.getter()
{
  return 41LL;
}

uint64_t static POSIXError.ENOPROTOOPT.getter()
{
  return 42LL;
}

uint64_t static POSIXError.EPROTONOSUPPORT.getter()
{
  return 43LL;
}

uint64_t static POSIXError.ESOCKTNOSUPPORT.getter()
{
  return 44LL;
}

uint64_t static POSIXError.ENOTSUP.getter()
{
  return 45LL;
}

uint64_t static POSIXError.EPFNOSUPPORT.getter()
{
  return 46LL;
}

uint64_t static POSIXError.EAFNOSUPPORT.getter()
{
  return 47LL;
}

uint64_t static POSIXError.EADDRINUSE.getter()
{
  return 48LL;
}

uint64_t static POSIXError.EADDRNOTAVAIL.getter()
{
  return 49LL;
}

uint64_t static POSIXError.ENETDOWN.getter()
{
  return 50LL;
}

uint64_t static POSIXError.ENETUNREACH.getter()
{
  return 51LL;
}

uint64_t static POSIXError.ENETRESET.getter()
{
  return 52LL;
}

uint64_t static POSIXError.ECONNABORTED.getter()
{
  return 53LL;
}

uint64_t static POSIXError.ECONNRESET.getter()
{
  return 54LL;
}

uint64_t static POSIXError.ENOBUFS.getter()
{
  return 55LL;
}

uint64_t static POSIXError.EISCONN.getter()
{
  return 56LL;
}

uint64_t static POSIXError.ENOTCONN.getter()
{
  return 57LL;
}

uint64_t static POSIXError.ESHUTDOWN.getter()
{
  return 58LL;
}

uint64_t static POSIXError.ETOOMANYREFS.getter()
{
  return 59LL;
}

uint64_t static POSIXError.ETIMEDOUT.getter()
{
  return 60LL;
}

uint64_t static POSIXError.ECONNREFUSED.getter()
{
  return 61LL;
}

uint64_t static POSIXError.ELOOP.getter()
{
  return 62LL;
}

uint64_t static POSIXError.ENAMETOOLONG.getter()
{
  return 63LL;
}

uint64_t static POSIXError.EHOSTDOWN.getter()
{
  return 64LL;
}

uint64_t static POSIXError.EHOSTUNREACH.getter()
{
  return 65LL;
}

uint64_t static POSIXError.ENOTEMPTY.getter()
{
  return 66LL;
}

uint64_t static POSIXError.EPROCLIM.getter()
{
  return 67LL;
}

uint64_t static POSIXError.EUSERS.getter()
{
  return 68LL;
}

uint64_t static POSIXError.EDQUOT.getter()
{
  return 69LL;
}

uint64_t static POSIXError.ESTALE.getter()
{
  return 70LL;
}

uint64_t static POSIXError.EREMOTE.getter()
{
  return 71LL;
}

uint64_t static POSIXError.EBADRPC.getter()
{
  return 72LL;
}

uint64_t static POSIXError.ERPCMISMATCH.getter()
{
  return 73LL;
}

uint64_t static POSIXError.EPROGUNAVAIL.getter()
{
  return 74LL;
}

uint64_t static POSIXError.EPROGMISMATCH.getter()
{
  return 75LL;
}

uint64_t static POSIXError.EPROCUNAVAIL.getter()
{
  return 76LL;
}

uint64_t static POSIXError.ENOLCK.getter()
{
  return 77LL;
}

uint64_t static POSIXError.ENOSYS.getter()
{
  return 78LL;
}

uint64_t static POSIXError.EFTYPE.getter()
{
  return 79LL;
}

uint64_t static POSIXError.EAUTH.getter()
{
  return 80LL;
}

uint64_t static POSIXError.ENEEDAUTH.getter()
{
  return 81LL;
}

uint64_t static POSIXError.EPWROFF.getter()
{
  return 82LL;
}

uint64_t static POSIXError.EDEVERR.getter()
{
  return 83LL;
}

uint64_t static POSIXError.EOVERFLOW.getter()
{
  return 84LL;
}

uint64_t static POSIXError.EBADEXEC.getter()
{
  return 85LL;
}

uint64_t static POSIXError.EBADARCH.getter()
{
  return 86LL;
}

uint64_t static POSIXError.ESHLIBVERS.getter()
{
  return 87LL;
}

uint64_t static POSIXError.EBADMACHO.getter()
{
  return 88LL;
}

uint64_t static POSIXError.ECANCELED.getter()
{
  return 89LL;
}

uint64_t static POSIXError.EIDRM.getter()
{
  return 90LL;
}

uint64_t static POSIXError.ENOMSG.getter()
{
  return 91LL;
}

uint64_t static POSIXError.EILSEQ.getter()
{
  return 92LL;
}

uint64_t static POSIXError.ENOATTR.getter()
{
  return 93LL;
}

uint64_t static POSIXError.EBADMSG.getter()
{
  return 94LL;
}

uint64_t static POSIXError.EMULTIHOP.getter()
{
  return 95LL;
}

uint64_t static POSIXError.ENODATA.getter()
{
  return 96LL;
}

uint64_t static POSIXError.ENOLINK.getter()
{
  return 97LL;
}

uint64_t static POSIXError.ENOSR.getter()
{
  return 98LL;
}

uint64_t static POSIXError.ENOSTR.getter()
{
  return 99LL;
}

uint64_t static POSIXError.EPROTO.getter()
{
  return 100LL;
}

uint64_t static POSIXError.ETIME.getter()
{
  return 101LL;
}

uint64_t static POSIXError.ENOPOLICY.getter()
{
  return 103LL;
}

uint64_t static POSIXError.ENOTRECOVERABLE.getter()
{
  return 104LL;
}

uint64_t static POSIXError.EOWNERDEAD.getter()
{
  return 105LL;
}

uint64_t static POSIXError.EQFULL.getter()
{
  return 106LL;
}

unint64_t lazy protocol witness table accessor for type POSIXErrorCode and conformance POSIXErrorCode()
{
  unint64_t result = lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode;
  if (!lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for POSIXErrorCode, MEMORY[0x18961D108]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode;
  if (!lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961D118], MEMORY[0x18961D108]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode;
  if (!lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961D110], MEMORY[0x18961D108]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for POSIXError(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  a1[2] = lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  unint64_t result = lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  a1[3] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for POSIXError(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for POSIXErrorCode(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type POSIXErrorCode and conformance POSIXErrorCode();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for POSIXError()
{
  return &type metadata for POSIXError;
}

uint64_t _convertNSErrorToError(_:)(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (uint64_t)a1;
  }

  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    uint64_t v2 = _nilObjCError;
    id v3 = (id)_nilObjCError;
  }

  id v4 = a1;
  return v2;
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = a5;
  uint64_t v22 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v9 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)(a4 + 8) + 16LL))(a3, v9);
  uint64_t v12 = swift_checkMetadataState();
  uint64_t v24 = a1;
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v13 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
    uint64_t v14 = specialized numericCast<A, B>(_:)((uint64_t)v11, AssociatedTypeWitness, v13);
  }
  else {
    uint64_t v14 = specialized numericCast<A, B>(_:)((uint64_t)v11, AssociatedTypeWitness);
  }
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, AssociatedTypeWitness);
  id v16 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v17 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v18 = objc_msgSend(v16, sel_initWithDomain_code_userInfo_, v17, v15, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  (*(void (**)(id, uint64_t, uint64_t))(a4 + 72))(v18, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v24, v12);
}

uint64_t specialized numericCast<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v53 = *(void *)(*(void *)(a3 + 24) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v52 = (char *)&v50 - v5;
  uint64_t v6 = *(void **)(a2 - 8);
  MEMORY[0x1895F8858](v7);
  __n128 v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v55 = (char *)&v50 - v11;
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v50 - v13;
  MEMORY[0x1895F8858](v15);
  uint64_t v54 = (char *)&v50 - v16;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v50 - v18;
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)&v50 - v21;
  __n128 v24 = MEMORY[0x1895F8858](v23);
  uint64_t v26 = (char *)&v50 - v25;
  uint64_t v27 = (void (*)(char *, uint64_t, uint64_t, __n128))v6[2];
  v27((char *)&v50 - v25, a1, a2, v24);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  ((void (*)(char *, char *, uint64_t))v27)(v22, v26, a2);
  if ((a1 & 1) == 0)
  {
    uint64_t v29 = (void (*)(char *, uint64_t))v6[1];
    uint64_t v30 = v22;
LABEL_7:
    v29(v30, a2);
    goto LABEL_8;
  }

  uint64_t v50 = v9;
  uint64_t v28 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v29 = (void (*)(char *, uint64_t))v6[1];
  v29(v22, a2);
  if (v28 <= 64) {
    goto LABEL_8;
  }
  ((void (*)(char *, char *, uint64_t))v27)(v19, v26, a2);
  unint64_t v57 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_27:
      dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_28:
      uint64_t v30 = v19;
      goto LABEL_7;
    }
  }

  else
  {
    char v40 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
    BOOL v43 = __OFSUB__(v41, 64LL);
    BOOL v42 = v41 - 64 < 0;
    if ((v40 & 1) == 0) {
      goto LABEL_25;
    }
    if (v41 <= 64)
    {
      uint64_t v46 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v46, AssociatedConformanceWitness);
      uint64_t v48 = v54;
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      LOBYTE(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v42, v46) = dispatch thunk of static Comparable.< infix(_:_:)();
      v29(v48, a2);
      uint64_t v49 = (void (*)(char *, char *, uint64_t))v6[4];
      uint64_t v36 = v50;
      v49(v50, v19, a2);
      if ((v46 & 1) != 0) {
        goto LABEL_32;
      }
      dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v30 = v36;
      goto LABEL_7;
    }
  }

  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v44 = v54;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v45 = dispatch thunk of static Comparable.< infix(_:_:)();
  v29(v44, a2);
  v29(v19, a2);
  if ((v45 & 1) != 0)
  {
    __break(1u);
LABEL_25:
    if (v42 == v43) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }

{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t, __n128);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t result;
  char v40;
  uint64_t v41;
  BOOL v42;
  BOOL v43;
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t AssociatedConformanceWitness;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t AssociatedTypeWitness;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v53 = (char *)&v50 - v6;
  uint64_t v7 = *(void **)(a2 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v55 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v50 - v11;
  MEMORY[0x1895F8858](v13);
  uint64_t v52 = (char *)&v50 - v14;
  MEMORY[0x1895F8858](v15);
  uint64_t v54 = (char *)&v50 - v16;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v50 - v18;
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)&v50 - v21;
  __n128 v24 = MEMORY[0x1895F8858](v23);
  uint64_t v26 = (char *)&v50 - v25;
  uint64_t v27 = (void (*)(char *, uint64_t, uint64_t, __n128))v7[2];
  v27((char *)&v50 - v25, a1, a2, v24);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  ((void (*)(char *, char *, uint64_t))v27)(v22, v26, a2);
  if ((a1 & 1) == 0)
  {
    uint64_t v29 = (void (*)(char *, uint64_t))v7[1];
    uint64_t v30 = v22;
LABEL_7:
    v29(v30, a2);
    goto LABEL_8;
  }

  uint64_t v50 = v5;
  uint64_t v28 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v29 = (void (*)(char *, uint64_t))v7[1];
  v29(v22, a2);
  if (v28 < 65) {
    goto LABEL_8;
  }
  ((void (*)(char *, char *, uint64_t))v27)(v19, v26, a2);
  unint64_t v57 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_27:
      dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_28:
      uint64_t v30 = v19;
      goto LABEL_7;
    }
  }

  else
  {
    char v40 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
    BOOL v43 = __OFSUB__(v41, 64LL);
    BOOL v42 = v41 - 64 < 0;
    if ((v40 & 1) == 0) {
      goto LABEL_25;
    }
    if (v41 <= 64)
    {
      uint64_t v46 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v46, AssociatedConformanceWitness);
      uint64_t v48 = v54;
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      LOBYTE(outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v42, v46) = dispatch thunk of static Comparable.< infix(_:_:)();
      v29(v48, a2);
      uint64_t v49 = (void (*)(char *, char *, uint64_t))v7[4];
      uint64_t v36 = v52;
      v49(v52, v19, a2);
      if ((v46 & 1) != 0) {
        goto LABEL_32;
      }
      dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v30 = v36;
      goto LABEL_7;
    }
  }

  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v44 = v54;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v45 = dispatch thunk of static Comparable.< infix(_:_:)();
  v29(v44, a2);
  v29(v19, a2);
  if ((v45 & 1) != 0)
  {
    __break(1u);
LABEL_25:
    if (v42 == v43) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }

uint64_t specialized numericCast<A, B>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v36 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  char v37 = (char *)&v34 - v9;
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v34 - v11;
  __n128 v14 = MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  v17((char *)&v34 - v15, a1, a2, v14);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0
    || (uint64_t v18 = swift_getAssociatedConformanceWitness(),
        MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, v18),
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)(),
        char v19 = dispatch thunk of static Comparable.>= infix(_:_:)(),
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, a2),
        (v19 & 1) != 0))
  {
    uint64_t v35 = AssociatedTypeWitness;
    uint64_t v38 = v5;
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      ((void (*)(char *, char *, uint64_t))v17)(v37, v16, a2);
      uint64_t v39 = -1LL;
      char v21 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v22 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v21 & 1) != 0)
      {
        if (v22 <= 64)
        {
          uint64_t v23 = v35;
          uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v23, AssociatedConformanceWitness);
          dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
          uint64_t v25 = v37;
          LOBYTE(v23) = dispatch thunk of static Comparable.> infix(_:_:)();
          uint64_t v26 = v38;
          uint64_t v27 = *(void (**)(char *, uint64_t))(v38 + 8);
          v27(v12, a2);
          uint64_t v28 = v36;
          (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v36, v25, a2);
          if ((v23 & 1) != 0) {
            dispatch thunk of BinaryInteger._lowWord.getter();
          }
          v27(v28, a2);
          goto LABEL_13;
        }
      }

      else if (v22 <= 64)
      {
LABEL_12:
        uint64_t v32 = v37;
        dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v32, a2);
        goto LABEL_13;
      }

      lazy protocol witness table accessor for type UInt and conformance UInt();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v29 = v37;
      char v30 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v31 = *(void (**)(char *, uint64_t))(v38 + 8);
      v31(v12, a2);
      v31(v29, a2);
      if ((v30 & 1) != 0)
      {
        __break(1u);
        goto LABEL_12;
      }
    }

void protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance MachError( void *a1@<X0>, void *a2@<X8>)
{
}

void specialized _BridgedStoredNSError.init(_bridgedNSError:)( void *a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  id v4 = a1;
  id v6 = objc_msgSend(a1, sel_domain);
  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  uint64_t v10 = *a2;
  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)(v10) && v9 == v11)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {

      id v4 = 0LL;
LABEL_12:
      *a3 = v4;
      return;
    }
  }

  id v14 = objc_msgSend(v4, sel_domain);
  id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v17 = v16;

  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)(v10) && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }

  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0) {
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t _BridgedStoredNSError.init(_bridgedNSError:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v8 = objc_msgSend(a1, sel_domain);
  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  if (v9 == (id)(*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 16LL))(a2) && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }

  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
  {
LABEL_8:
    (*(void (**)(void *, uint64_t, uint64_t))(a3 + 72))(a1, a2, a3);
    uint64_t v15 = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))( a4,  v15,  1LL,  a2);
  }

  uint64_t v15 = 1LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))(a4, v15, 1LL, a2);
}

id _BridgedStoredNSError.errorCode.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(void))(a2 + 64))();
  id v3 = objc_msgSend(v2, sel_code);

  return v3;
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance MachError()
{
  return specialized _BridgedStoredNSError.errorUserInfo.getter(*v0);
}

void _BridgedStoredNSError.errorUserInfo.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x18961AFF0];
  uint64_t v55 = MEMORY[0x18961AFF0];
  id v3 = (void *)(*(uint64_t (**)(void))(a2 + 64))();
  id v4 = objc_msgSend(v3, sel_userInfo);

  if (!v4) {
    goto LABEL_20;
  }
  swift_unknownObjectRetain();
  uint64_t v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (!v5)
  {
    id v6 = objc_msgSend(v4, sel_count);
    if (!v6) {
      goto LABEL_19;
    }
    uint64_t v7 = (uint64_t)v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
    id v8 = *(void **)(v2 + 48);
    uint64_t v9 = *(void *)(v2 + 56);
    swift_retain();
    uint64_t v10 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v8, v9, v4, v7);
    if (v10 < 0 || v7 < v10) {
      goto LABEL_50;
    }
    *(void *)(v2 + 16) = v10;
    if (!v10)
    {
LABEL_18:
      swift_release();
      goto LABEL_19;
    }

    int64_t v11 = v10 - 1;
    uint64_t v12 = v2 + 64;
    while (1)
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v11);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      swift_bridgeObjectRetain();
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
      char v22 = v21;
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v23 = *(void *)(v2 + 16);
        BOOL v24 = __OFSUB__(v23, 1LL);
        uint64_t v25 = v23 - 1;
        if (v24) {
          goto LABEL_48;
        }
        *(void *)(v2 + 16) = v25;
        goto LABEL_10;
      }

      *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      if (v11 < (uint64_t)v20)
      {
        *(_OWORD *)(*(void *)(v2 + 48) + 16 * v20) = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v11);
        uint64_t v13 = *(void *)(v2 + 56);
        char v14 = (_OWORD *)(v13 + 32 * v11);
        __int128 v15 = v14[1];
        uint64_t v16 = (_OWORD *)(v13 + 32 * v20);
        *uint64_t v16 = *v14;
        v16[1] = v15;
LABEL_10:
        if (--v11 < 0) {
          goto LABEL_18;
        }
      }

      else
      {
        if (v20 == v11) {
          goto LABEL_10;
        }
        uint64_t v26 = *(void *)(v2 + 48);
        uint64_t v27 = (uint64_t *)(v26 + 16 * v20);
        uint64_t v28 = (uint64_t *)(v26 + 16 * v11);
        uint64_t v29 = *v27;
        uint64_t v30 = v27[1];
        uint64_t v31 = v28[1];
        *uint64_t v27 = *v28;
        v27[1] = v31;
        *uint64_t v28 = v29;
        v28[1] = v30;
        uint64_t v32 = *(void *)(v2 + 56);
        uint64_t v33 = (_OWORD *)(v32 + 32 * v20);
        uint64_t v34 = (_OWORD *)(v32 + 32 * v11);
        outlined init with take of Any(v33, &v53);
        outlined init with take of Any(v34, v33);
        outlined init with take of Any(&v53, v34);
        if (v11 < 0) {
          goto LABEL_18;
        }
      }
    }
  }

  uint64_t v2 = v5;
LABEL_19:

LABEL_20:
  int64_t v35 = 0LL;
  uint64_t v36 = v2 + 64;
  uint64_t v37 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v38 = -1LL;
  if (v37 < 64) {
    uint64_t v38 = ~(-1LL << v37);
  }
  unint64_t v39 = v38 & *(void *)(v2 + 64);
  int64_t v40 = (unint64_t)(v37 + 63) >> 6;
  if (!v39) {
    goto LABEL_27;
  }
LABEL_25:
  unint64_t v42 = __clz(__rbit64(v39));
  v39 &= v39 - 1;
  unint64_t v43 = v42 | (v35 << 6);
LABEL_26:
  uint64_t v44 = *(void *)(v2 + 56);
  char v45 = (void *)(*(void *)(v2 + 48) + 16 * v43);
  uint64_t v46 = v45[1];
  *(void *)&__int128 v51 = *v45;
  *((void *)&v51 + 1) = v46;
  outlined init with copy of Any(v44 + 32 * v43, (uint64_t)v52);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of (key: String, value: Any)?((uint64_t)&v51, (uint64_t)&v53);
    uint64_t v50 = *((void *)&v53 + 1);
    if (!*((void *)&v53 + 1))
    {
      swift_release();
      return;
    }

    uint64_t v41 = v53;
    outlined init with take of Any(&v54, &v51);
    specialized Dictionary.subscript.setter((uint64_t)&v51, v41, v50);
    if (v39) {
      goto LABEL_25;
    }
LABEL_27:
    int64_t v47 = v35 + 1;
    if (__OFADD__(v35, 1LL)) {
      break;
    }
    if (v47 < v40)
    {
      unint64_t v48 = *(void *)(v36 + 8 * v47);
      if (v48) {
        goto LABEL_30;
      }
      int64_t v49 = v35 + 2;
      ++v35;
      if (v47 + 1 < v40)
      {
        unint64_t v48 = *(void *)(v36 + 8 * v49);
        if (v48) {
          goto LABEL_33;
        }
        int64_t v35 = v47 + 1;
        if (v47 + 2 < v40)
        {
          unint64_t v48 = *(void *)(v36 + 8 * (v47 + 2));
          if (v48)
          {
            v47 += 2LL;
            goto LABEL_30;
          }

          int64_t v49 = v47 + 3;
          int64_t v35 = v47 + 2;
          if (v47 + 3 < v40)
          {
            unint64_t v48 = *(void *)(v36 + 8 * v49);
            if (!v48)
            {
              while (1)
              {
                int64_t v47 = v49 + 1;
                if (__OFADD__(v49, 1LL)) {
                  goto LABEL_49;
                }
                if (v47 >= v40)
                {
                  int64_t v35 = v40 - 1;
                  goto LABEL_44;
                }

                unint64_t v48 = *(void *)(v36 + 8 * v47);
                ++v49;
                if (v48) {
                  goto LABEL_30;
                }
              }
            }

void _BridgedStoredNSError.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  NSObject.hash(into:)();
}

uint64_t _BridgedStoredNSError._getEmbeddedNSError()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

id static _BridgedStoredNSError.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  uint64_t v7 = (void *)v6(a3, a4);
  id v8 = (void *)v6(a3, a4);
  id v9 = objc_msgSend(v7, sel_isEqual_, v8);

  return v9;
}

uint64_t _BridgedStoredNSError.code.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = type metadata accessor for Optional();
  __n128 v8 = MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v15 - v9;
  int64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 64))(a1, a2, v8);
  id v12 = objc_msgSend(v11, sel_code);

  swift_getAssociatedConformanceWitness();
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    id v16 = v12;
    lazy protocol witness table accessor for type Int and conformance Int();
  }

  else
  {
    id v16 = v12;
    lazy protocol witness table accessor for type UInt and conformance UInt();
  }

  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  dispatch thunk of RawRepresentable.init(rawValue:)();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1LL, AssociatedTypeWitness);
  if ((_DWORD)result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v15, v10, AssociatedTypeWitness);
  }
  __break(1u);
  return result;
}

void protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance POSIXError( void *a1@<X0>, void *a2@<X8>)
{
}

uint64_t one-time initialization function for _nilObjCError()
{
  uint64_t result = swift_allocError();
  _nilObjCError = result;
  return result;
}

uint64_t outlined init with take of (key: String, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t RecoverableError.attemptRecovery(optionIndex:resultHandler:)( uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 32))(a1, a4, a5);
  return a2(v6 & 1);
}

uint64_t CustomNSError<>.errorCode.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  __n128 v8 = (char *)&v13 - v7;
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v9 = *(void *)(a4 + 8);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
    uint64_t v10 = specialized numericCast<A, B>(_:)((uint64_t)v8, AssociatedTypeWitness, v9);
  }
  else {
    uint64_t v10 = specialized numericCast<A, B>(_:)((uint64_t)v8, AssociatedTypeWitness);
  }
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  return v11;
}

uint64_t one-time initialization function for _errorDomainUserInfoProviderQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  id v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1895F8858](v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x1895F8858](v5);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v7[1] = MEMORY[0x18961AFE8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x18961B900], v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  _errorDomainUserInfoProviderQueue = result;
  return result;
}

uint64_t _getErrorDefaultUserInfo<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  char v74 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  __n128 v8 = (char *)&v74 - v7;
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v74 - v10;
  id v12 = (id)dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v14 == v15) {
    goto LABEL_10;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v75 = 0LL;
    char v22 = 0;
    goto LABEL_12;
  }

  if (one-time initialization token for _errorDomainUserInfoProviderQueue != -1) {
    swift_once();
  }
  uint64_t v18 = (dispatch_queue_s *)_errorDomainUserInfoProviderQueue;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v12;
  *(void *)(v19 + 24) = v14;
  uint64_t v20 = swift_allocObject();
  uint64_t v75 = partial apply for closure #1 in _getErrorDefaultUserInfo<A>(_:);
  *(void *)(v20 + 16) = partial apply for closure #1 in _getErrorDefaultUserInfo<A>(_:);
  *(void *)(v20 + 24) = v19;
  uint64_t v82 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  uint64_t v83 = v20;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v81 = &block_descriptor_12;
  char v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v18, v21);
  _Block_release(v21);
  char v22 = 1;
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }

void closure #1 in _getErrorDefaultUserInfo<A>(_:)()
{
  uint64_t v0 = (void *)objc_opt_self();
  id v1 = objc_msgSend(v0, sel_userInfoValueProviderForDomain_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v1)
  {
    _Block_release(v1);
  }

  else
  {
    uint64_t v2 = String._bridgeToObjectiveCImpl()();
    v4[4] = closure #1 in closure #1 in _getErrorDefaultUserInfo<A>(_:);
    v4[5] = 0LL;
    v4[0] = MEMORY[0x1895F87A8];
    v4[1] = 1107296256LL;
    v4[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error, @guaranteed String) -> (@out Any?);
    v4[3] = &block_descriptor_9;
    id v3 = _Block_copy(v4);
    objc_msgSend(v0, sel_setUserInfoValueProviderForDomain_provider_, v2, v3);
    _Block_release(v3);
    swift_unknownObjectRelease();
  }

uint64_t closure #1 in closure #1 in _getErrorDefaultUserInfo<A>(_:)@<X0>( void *a1@<X0>, id a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedDescription") == a2 && v8 == a3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }

  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
LABEL_20:
    uint64_t v48 = a1;
    id v18 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_35;
    }
    uint64_t v19 = *((void *)&v46 + 1);
    uint64_t v20 = v47;
    __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
LABEL_22:
    if (v22)
    {
      *(void *)(a4 + 24) = MEMORY[0x189617FA8];
      *(void *)a4 = v21;
      *(void *)(a4 + 8) = v22;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
    }

    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
    goto LABEL_37;
  }

  if (static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedFailureReason") == a2 && v11 == a3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }

  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
LABEL_27:
    uint64_t v48 = a1;
    id v24 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_35;
    }
    uint64_t v25 = *((void *)&v46 + 1);
    uint64_t v26 = v47;
    __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 24))(v25, v26);
    goto LABEL_22;
  }

  if (static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedRecoverySuggestion") == a2 && v14 == a3)
  {
    swift_bridgeObjectRelease();
LABEL_30:
    uint64_t v48 = a1;
    id v27 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v28 = *((void *)&v46 + 1);
      uint64_t v29 = v47;
      __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 32))(v28, v29);
      goto LABEL_22;
    }

id thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error, @guaranteed String) -> (@out Any?)( uint64_t a1, void *a2, void *a3)
{
  void (*v4)(void *__return_ptr);
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void v14[3];
  uint64_t v15;
  uint64_t v4 = *(void (**)(void *__return_ptr))(a1 + 32);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  swift_retain();
  uint64_t v5 = a2;
  v4(v14);
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v6 = v15;
  if (!v15) {
    return 0LL;
  }
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(v14, v15);
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, __n128))(v8 + 16))(v11, v9);
  id v12 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v12;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

id NSError._domain.getter()
{
  id v1 = objc_msgSend(v0, sel_domain);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id NSError._code.getter()
{
  return objc_msgSend(v0, sel_code);
}

id NSError._userInfo.getter()
{
  id result = objc_msgSend(v0, sel_userInfo);
  if (!result) {
    __break(1u);
  }
  return result;
}

id protocol witness for Error._domain.getter in conformance NSError()
{
  id v1 = objc_msgSend(*v0, sel_domain);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id protocol witness for Error._userInfo.getter in conformance NSError()
{
  id result = objc_msgSend(*v0, sel_userInfo);
  if (!result) {
    __break(1u);
  }
  return result;
}

__CFString *CFErrorRef._domain.getter()
{
  id result = (id)CFErrorGetDomain(v0);
  if (result)
  {
    id v2 = result;
    id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return (__CFString *)v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFIndex CFErrorRef._code.getter()
{
  return CFErrorGetCode(v0);
}

uint64_t CFErrorRef._userInfo.getter()
{
  CFDictionaryRef v3 = CFErrorCopyUserInfo(v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFDictionaryRef?);
  uint64_t v1 = Optional._bridgeToObjectiveC()();

  return v1;
}

uint64_t CFErrorRef._getEmbeddedNSError()()
{
  return swift_unknownObjectRetain();
}

__CFString *protocol witness for Error._domain.getter in conformance CFErrorRef()
{
  id result = (id)CFErrorGetDomain(*v0);
  if (result)
  {
    id v2 = result;
    id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return (__CFString *)v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

CFIndex protocol witness for Error._code.getter in conformance CFErrorRef()
{
  return CFErrorGetCode(*v0);
}

uint64_t protocol witness for Error._userInfo.getter in conformance CFErrorRef()
{
  CFDictionaryRef v3 = CFErrorCopyUserInfo(*v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFDictionaryRef?);
  uint64_t v1 = Optional._bridgeToObjectiveC()();

  return v1;
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance CFErrorRef()
{
  return swift_unknownObjectRetain();
}

BOOL _bridgeNSErrorToError<A>(_:out:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  __n128 v14 = MEMORY[0x1895F8858](v13);
  char v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(a4 + 16))(a1, a3, a4, v14);
  int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1LL, a3);
  if (v17 == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  else
  {
    id v18 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v18(v16, v11, a3);
    v18(a2, v16, a3);
  }

  return v17 != 1;
}

uint64_t _BridgedNSError._domain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t _BridgedNSError._code.getter()
{
  uint64_t v54 = *(void *)(*(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 24LL) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  __int128 v53 = (char *)&v51 - v1;
  uint64_t v2 = swift_checkMetadataState();
  MEMORY[0x1895F8858](v2);
  uint64_t v52 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v55 = (char *)&v51 - v5;
  MEMORY[0x1895F8858](v6);
  uint64_t v58 = (char *)&v51 - v7;
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v51 - v9;
  MEMORY[0x1895F8858](v11);
  uint64_t v57 = (char *)&v51 - v12;
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v51 - v14;
  MEMORY[0x1895F8858](v16);
  id v18 = (char *)&v51 - v17;
  MEMORY[0x1895F8858](v19);
  uint64_t v21 = (char *)&v51 - v20;
  uint64_t v23 = v22;
  dispatch thunk of RawRepresentable.rawValue.getter();
  char v24 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v25(v18, v21, v2);
  uint64_t v56 = v23;
  if ((v24 & 1) == 0)
  {
    id v27 = *(void (**)(char *, uint64_t))(v23 + 8);
    uint64_t v28 = v18;
    goto LABEL_7;
  }

  uint64_t v26 = dispatch thunk of BinaryInteger.bitWidth.getter();
  id v27 = *(void (**)(char *, uint64_t))(v23 + 8);
  v27(v18, v2);
  if (v26 <= 64) {
    goto LABEL_8;
  }
  v25(v15, v21, v2);
  int64_t v60 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    char v41 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v42 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v41 & 1) != 0)
    {
      if (v42 <= 64) {
        goto LABEL_30;
      }
LABEL_24:
      lazy protocol witness table accessor for type Int and conformance Int();
      id v43 = v57;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v44 = dispatch thunk of static Comparable.< infix(_:_:)();
      v27(v43, v2);
      v27(v15, v2);
      if ((v44 & 1) != 0) {
        goto LABEL_29;
      }
LABEL_8:
      uint64_t v29 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v25(v10, v21, v2);
      if (v29 < 65)
      {
        uint64_t v36 = dispatch thunk of BinaryInteger.bitWidth.getter();
        v27(v10, v2);
        if (v36 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
          goto LABEL_21;
        }
      }

      else
      {
        v27(v10, v2);
      }

      char v30 = v58;
      v25(v58, v21, v2);
      int64_t v60 = 0x7FFFFFFFFFFFFFFFLL;
      char v31 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v32 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v31 & 1) != 0)
      {
        if (v32 > 64)
        {
          lazy protocol witness table accessor for type Int and conformance Int();
          uint64_t v33 = v57;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v34 = dispatch thunk of static Comparable.< infix(_:_:)();
          v27(v33, v2);
          for (uint64_t i = v30; ; uint64_t i = v38)
          {
            v27(i, v2);
            if ((v34 & 1) == 0) {
              break;
            }
LABEL_18:
            __break(1u);
LABEL_19:
            uint64_t v59 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v38 = v57;
            (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v57, v30, v2);
            lazy protocol witness table accessor for type Int and conformance Int();
            char v30 = v55;
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            char v34 = dispatch thunk of static Comparable.< infix(_:_:)();
            v27(v30, v2);
          }

          goto LABEL_21;
        }
      }

      else if (v32 > 63)
      {
        goto LABEL_19;
      }

      uint64_t v37 = dispatch thunk of BinaryInteger._lowWord.getter();
      v27(v30, v2);
      if (v60 < v37) {
        goto LABEL_18;
      }
LABEL_21:
      uint64_t v39 = dispatch thunk of BinaryInteger._lowWord.getter();
      v27(v21, v2);
      return v39;
    }

    if (v42 < 64) {
      goto LABEL_28;
    }
    uint64_t v28 = v15;
LABEL_7:
    v27(v28, v2);
    goto LABEL_8;
  }

  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64) {
    goto LABEL_24;
  }
LABEL_28:
  uint64_t v45 = dispatch thunk of BinaryInteger._lowWord.getter();
  v27(v15, v2);
  if (v45 >= v60) {
    goto LABEL_8;
  }
LABEL_29:
  while (1)
  {
    __break(1u);
LABEL_30:
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v47 = v57;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    char v48 = dispatch thunk of static Comparable.< infix(_:_:)();
    v27(v47, v2);
    uint64_t AssociatedTypeWitness = (uint64_t)v52;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v52, v15, v2);
    if ((v48 & 1) != 0) {
      break;
    }
    int64_t v49 = v60;
    uint64_t v50 = dispatch thunk of BinaryInteger._lowWord.getter();
    v27((char *)AssociatedTypeWitness, v2);
    if (v50 >= v49) {
      goto LABEL_8;
    }
  }

  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v27)(AssociatedTypeWitness, v2);
  __break(1u);
  return result;
}

uint64_t _BridgedNSError.init(_bridgedNSError:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v25 = v8;
  *(void *)&double v9 = MEMORY[0x1895F8858](v8).n128_u64[0];
  uint64_t v11 = (char *)&v23 - v10;
  id v12 = objc_msgSend(a1, sel_domain, v9);
  id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  if (v13 == (id)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3) && v15 == v16)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      uint64_t v19 = *(void *)(a2 - 8);
      goto LABEL_10;
    }
  }

  id v27 = objc_msgSend(a1, sel_code);
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  dispatch thunk of RawRepresentable.init(rawValue:)();
  uint64_t v19 = *(void *)(a2 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1LL, a2))
  {
    uint64_t v21 = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v26, v11, a2);
    uint64_t v20 = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v20, 1LL, a2);
  }

  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v25);
LABEL_10:
  uint64_t v20 = 1LL;
  uint64_t v21 = v26;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v20, 1LL, a2);
}

void _BridgedNSError.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::UInt v3 = MEMORY[0x186E1CE34](a2, *(void *)(*(void *)(a3 + 8) + 8LL));
  Hasher._combine(_:)(v3);
}

uint64_t _BridgedStoredNSError.userInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 32LL))();
}

uint64_t _SwiftNewtypeWrapper<>._bridgeToObjectiveC()()
{
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a2, v4);
  id v5 = a1;
  return dispatch thunk of RawRepresentable.init(rawValue:)();
}

BOOL static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)( void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)v15 - v9;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, __n128))(v7 + 8);
  v11(a2, v6, v8);
  v15[1] = a1;
  id v12 = a1;
  dispatch thunk of RawRepresentable.init(rawValue:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 48LL))(v10, 1LL, a3) != 1;
  ((void (*)(char *, uint64_t))v11)(v10, v6);
  return v13;
}

uint64_t static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v6);
  __n128 v8 = (char *)v14 - v7;
  if (a1)
  {
    uint64_t v9 = (uint64_t)a1;
  }

  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    uint64_t v9 = _nilObjCError;
    id v10 = (id)_nilObjCError;
  }

  v14[1] = v9;
  id v11 = a1;
  dispatch thunk of RawRepresentable.init(rawValue:)();
  uint64_t v12 = *(void *)(a2 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1LL, a2);
  if ((_DWORD)result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v8, a2);
  }
  __break(1u);
  return result;
}

Foundation::ErrorUserInfoKey __swiftcall ErrorUserInfoKey.init(rawValue:)(Foundation::ErrorUserInfoKey rawValue)
{
  *uint64_t v1 = rawValue;
  return rawValue;
}

uint64_t ErrorUserInfoKey.rawValue.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ErrorUserInfoKey.rawValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ErrorUserInfoKey.rawValue.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance ErrorUserInfoKey@<X0>( void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ErrorUserInfoKey@<X0>( void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ErrorUserInfoKey( void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ErrorUserInfoKey()
{
  uint64_t v0 = String.hashValue.getter();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ErrorUserInfoKey()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ErrorUserInfoKey()
{
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance ErrorUserInfoKey()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

id one-time initialization function for underlyingErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSUnderlyingError");
  static ErrorUserInfoKey.underlyingErrorKey = (uint64_t)result;
  *(void *)algn_18C5CEAF8 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.underlyingErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter( &one-time initialization token for underlyingErrorKey,  &static ErrorUserInfoKey.underlyingErrorKey,  (uint64_t *)algn_18C5CEAF8,  a1);
}

id one-time initialization function for localizedDescriptionKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedDescription");
  static ErrorUserInfoKey.localizedDescriptionKey = (uint64_t)result;
  *(void *)algn_18C5CEB08 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.localizedDescriptionKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter( &one-time initialization token for localizedDescriptionKey,  &static ErrorUserInfoKey.localizedDescriptionKey,  (uint64_t *)algn_18C5CEB08,  a1);
}

id one-time initialization function for localizedFailureReasonErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedFailureReason");
  static ErrorUserInfoKey.localizedFailureReasonErrorKey = (uint64_t)result;
  *(void *)algn_18C5CEB18 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.localizedFailureReasonErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter( &one-time initialization token for localizedFailureReasonErrorKey,  &static ErrorUserInfoKey.localizedFailureReasonErrorKey,  (uint64_t *)algn_18C5CEB18,  a1);
}

id one-time initialization function for localizedRecoverySuggestionErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedRecoverySuggestion");
  static ErrorUserInfoKey.localizedRecoverySuggestionErrorKey = (uint64_t)result;
  *(void *)algn_18C5CEB28 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.localizedRecoverySuggestionErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter( &one-time initialization token for localizedRecoverySuggestionErrorKey,  &static ErrorUserInfoKey.localizedRecoverySuggestionErrorKey,  (uint64_t *)algn_18C5CEB28,  a1);
}

id one-time initialization function for localizedRecoveryOptionsErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedRecoveryOptions");
  static ErrorUserInfoKey.localizedRecoveryOptionsErrorKey = (uint64_t)result;
  *(void *)algn_18C5CEB38 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.localizedRecoveryOptionsErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter( &one-time initialization token for localizedRecoveryOptionsErrorKey,  &static ErrorUserInfoKey.localizedRecoveryOptionsErrorKey,  (uint64_t *)algn_18C5CEB38,  a1);
}

id one-time initialization function for recoveryAttempterErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSRecoveryAttempter");
  static ErrorUserInfoKey.recoveryAttempterErrorKey = (uint64_t)result;
  *(void *)algn_18C5CEB48 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.recoveryAttempterErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter( &one-time initialization token for recoveryAttempterErrorKey,  &static ErrorUserInfoKey.recoveryAttempterErrorKey,  (uint64_t *)algn_18C5CEB48,  a1);
}

id one-time initialization function for helpAnchorErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSHelpAnchor");
  static ErrorUserInfoKey.helpAnchorErrorKey = (uint64_t)result;
  *(void *)algn_18C5CEB58 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.helpAnchorErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter( &one-time initialization token for helpAnchorErrorKey,  &static ErrorUserInfoKey.helpAnchorErrorKey,  (uint64_t *)algn_18C5CEB58,  a1);
}

id one-time initialization function for stringEncodingErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSStringEncoding");
  static ErrorUserInfoKey.stringEncodingErrorKey = (uint64_t)result;
  *(void *)algn_18C5CEB68 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.stringEncodingErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter( &one-time initialization token for stringEncodingErrorKey,  &static ErrorUserInfoKey.stringEncodingErrorKey,  (uint64_t *)algn_18C5CEB68,  a1);
}

id one-time initialization function for NSURLErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURL");
  static ErrorUserInfoKey.NSURLErrorKey = (uint64_t)result;
  *(void *)algn_18C5CEB78 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.NSURLErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter( &one-time initialization token for NSURLErrorKey,  &static ErrorUserInfoKey.NSURLErrorKey,  (uint64_t *)algn_18C5CEB78,  a1);
}

id one-time initialization function for filePathErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFilePath");
  static ErrorUserInfoKey.filePathErrorKey = (uint64_t)result;
  *(void *)algn_18C5CEB88 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.filePathErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter( &one-time initialization token for filePathErrorKey,  &static ErrorUserInfoKey.filePathErrorKey,  (uint64_t *)algn_18C5CEB88,  a1);
}

uint64_t static ErrorUserInfoKey.underlyingErrorKey.getter@<X0>( void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  uint64_t v7 = *a3;
  *a4 = *a2;
  a4[1] = v7;
  return swift_bridgeObjectRetain();
}

void protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance URLError( void *a1@<X0>, void *a2@<X8>)
{
}

void protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance CocoaError( void *a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_18323E2DC()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in _getErrorDefaultUserInfo<A>(_:)()
{
}

uint64_t sub_18323E308()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t type metadata accessor for __NSErrorRecoveryAttempter()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type ErrorUserInfoKey and conformance ErrorUserInfoKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ErrorUserInfoKey,  &type metadata for ErrorUserInfoKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ErrorUserInfoKey,  &type metadata for ErrorUserInfoKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ErrorUserInfoKey,  &type metadata for ErrorUserInfoKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ErrorUserInfoKey,  &type metadata for ErrorUserInfoKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ErrorUserInfoKey,  &type metadata for ErrorUserInfoKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }

  return result;
}

uint64_t dispatch thunk of RecoverableError.recoveryOptions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of RecoverableError.attemptRecovery(optionIndex:resultHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of RecoverableError.attemptRecovery(optionIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of _ObjectiveCBridgeableError.init(_bridgedNSError:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static _BridgedNSError._nsErrorDomain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of _BridgedStoredNSError._nsError.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of _BridgedStoredNSError.init(_nsError:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

ValueMetadata *type metadata accessor for ErrorUserInfoKey()
{
  return &type metadata for ErrorUserInfoKey;
}

uint64_t sub_18323E470()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in __NSErrorRecoveryAttempter.attemptRecovery(fromError:optionIndex:delegate:didRecoverSelector:contextInfo:)( char a1)
{
  return __NSErrorPerformRecoverySelector(*(id *)(v1 + 16), *(SEL *)(v1 + 24), a1 & 1, *(void *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961B8C0], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618470], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type _GenericObjCError and conformance _GenericObjCError()
{
  unint64_t result = lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError;
  if (!lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for _GenericObjCError,  &type metadata for _GenericObjCError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError;
  if (!lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for _GenericObjCError,  &type metadata for _GenericObjCError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for _GenericObjCError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_18323E648 + 4 * asc_1837C3FF0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_18323E668 + 4 * byte_1837C3FF5[v4]))();
  }
}

_BYTE *sub_18323E648(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_18323E668(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_18323E670(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_18323E678(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_18323E680(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_18323E688(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for _GenericObjCError()
{
  return &type metadata for _GenericObjCError;
}

uint64_t specialized _LocaleProtocol.regionCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  closure #1 in _LocaleICU.region.getter((void *)(v1 + 16), &v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  unint64_t object = v5._object;
  if (!v5._object) {
    return 0LL;
  }
  uint64_t countAndFlagsBits = v5._countAndFlagsBits;
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(countAndFlagsBits, (uint64_t)object);
  return countAndFlagsBits;
}

uint64_t _LocaleProtocol.regionCode.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 376))(&v5);
  uint64_t v2 = v6;
  if (!v6) {
    return 0LL;
  }
  uint64_t v3 = v5;
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(v3, v2);
  return v3;
}

uint64_t _LocaleProtocol.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of _LocaleProtocol.init(identifier:prefs:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of _LocaleProtocol.init(name:prefs:disableBundleMatching:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of _LocaleProtocol.init(components:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of _LocaleProtocol.copy(newCalendarIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of _LocaleProtocol.isAutoupdating.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of _LocaleProtocol.isBridged.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of _LocaleProtocol.identifierDisplayName(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of _LocaleProtocol.languageCodeDisplayName(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of _LocaleProtocol.countryCodeDisplayName(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of _LocaleProtocol.scriptCodeDisplayName(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of _LocaleProtocol.variantCodeDisplayName(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of _LocaleProtocol.calendarIdentifierDisplayName(for:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of _LocaleProtocol.currencyCodeDisplayName(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of _LocaleProtocol.currencySymbolDisplayName(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of _LocaleProtocol.collationIdentifierDisplayName(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 136))();
}

uint64_t dispatch thunk of _LocaleProtocol.collatorIdentifierDisplayName(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 144))();
}

uint64_t dispatch thunk of _LocaleProtocol.languageCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of _LocaleProtocol.scriptCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of _LocaleProtocol.variantCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of _LocaleProtocol.regionCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of _LocaleProtocol.exemplarCharacterSet.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of _LocaleProtocol.calendar.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of _LocaleProtocol.calendarIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of _LocaleProtocol.collationIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of _LocaleProtocol.usesMetricSystem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of _LocaleProtocol.decimalSeparator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 224))();
}

uint64_t dispatch thunk of _LocaleProtocol.groupingSeparator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of _LocaleProtocol.currencySymbol.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t dispatch thunk of _LocaleProtocol.currencyCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 248))();
}

uint64_t dispatch thunk of _LocaleProtocol.collatorIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 256))();
}

uint64_t dispatch thunk of _LocaleProtocol.quotationBeginDelimiter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 264))();
}

uint64_t dispatch thunk of _LocaleProtocol.quotationEndDelimiter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 272))();
}

uint64_t dispatch thunk of _LocaleProtocol.alternateQuotationBeginDelimiter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 280))();
}

uint64_t dispatch thunk of _LocaleProtocol.alternateQuotationEndDelimiter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 288))();
}

uint64_t dispatch thunk of _LocaleProtocol.measurementSystem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 296))();
}

uint64_t dispatch thunk of _LocaleProtocol.currency.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 304))();
}

uint64_t dispatch thunk of _LocaleProtocol.numberingSystem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 312))();
}

uint64_t dispatch thunk of _LocaleProtocol.availableNumberingSystems.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 320))();
}

uint64_t dispatch thunk of _LocaleProtocol.firstDayOfWeek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 328))();
}

uint64_t dispatch thunk of _LocaleProtocol.weekendRange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 336))();
}

uint64_t dispatch thunk of _LocaleProtocol.minimumDaysInFirstWeek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 344))();
}

uint64_t dispatch thunk of _LocaleProtocol.language.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 352))();
}

uint64_t dispatch thunk of _LocaleProtocol.hourCycle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 360))();
}

uint64_t dispatch thunk of _LocaleProtocol.collation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 368))();
}

uint64_t dispatch thunk of _LocaleProtocol.region.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 376))();
}

uint64_t dispatch thunk of _LocaleProtocol.timeZone.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 384))();
}

uint64_t dispatch thunk of _LocaleProtocol.subdivision.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 392))();
}

uint64_t dispatch thunk of _LocaleProtocol.variant.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 400))();
}

uint64_t dispatch thunk of _LocaleProtocol.temperatureUnit.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 408))();
}

uint64_t dispatch thunk of _LocaleProtocol.identifier(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 416))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceHourCycle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 424))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceFirstWeekday(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 432))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceMinDaysInFirstWeek(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 440))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceMeasurementSystem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 448))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceTemperatureUnit.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 456))();
}

uint64_t dispatch thunk of _LocaleProtocol.prefs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 464))();
}

uint64_t dispatch thunk of _LocaleProtocol.identifierCapturingPreferences.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 472))();
}

uint64_t dispatch thunk of _LocaleProtocol.pref(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 480))();
}

uint64_t dispatch thunk of _LocaleProtocol.bridgeToNSLocale()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 488))();
}

uint64_t dispatch thunk of _LocaleProtocol.customDateFormat(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 496))();
}

id NSNotificationCenter.publisher(for:object:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = v3;
  a3[1] = a1;
  a3[2] = a2;
  swift_unknownObjectRetain();
  id v4 = v3;
  return a1;
}

uint64_t NSNotificationCenter.Publisher.init(center:name:object:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

id NSNotificationCenter.Publisher.center.getter()
{
  return *v0;
}

id NSNotificationCenter.Publisher.name.getter()
{
  return *(id *)(v0 + 8);
}

uint64_t NSNotificationCenter.Publisher.object.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NSNotificationCenter.Publisher.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void **)v4;
  uint64_t v7 = *(void **)(v4 + 8);
  uint64_t v8 = *(void *)(v4 + 16);
  uint64_t v9 = type metadata accessor for Notification.Subscription(0LL, a2, a3, a4);
  swift_allocObject();
  swift_unknownObjectRetain();
  id v10 = specialized Notification.Subscription.init(_:_:_:_:)(v6, v7, v8, a1);
  void v12[3] = v9;
  v12[4] = MEMORY[0x186E20D4C](&protocol conformance descriptor for Notification.Subscription<A>, v9);
  v12[0] = v10;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t type metadata accessor for Notification.Subscription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Notification.Subscription);
}

void Notification.Subscription.customMirror.getter(os_unfair_lock_s *a1@<X8>)
{
  uint64_t v2 = v1;
  v21[1] = a1;
  _OWORD v21[2] = *(os_unfair_lock_t *)v1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v21[0] = *(os_unfair_lock_t *)(v1 + 16);
  os_unfair_lock_lock(v21[0]);
  uint64_t v22 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_183729E20;
  *(void *)(v10 + 32) = 0x7265746E6563LL;
  *(void *)(v10 + 40) = 0xE600000000000000LL;
  id v11 = *(void **)(v1 + 40);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSNotificationCenter?);
  *(void *)(v10 + 48) = v11;
  *(void *)(v10 + 72) = v12;
  *(void *)(v10 + 80) = 1701667182LL;
  *(void *)(v10 + 88) = 0xE400000000000000LL;
  BOOL v13 = *(void **)(v1 + 48);
  type metadata accessor for NSNotificationName(0LL);
  *(void *)(v10 + 96) = v13;
  *(void *)(v10 + 120) = v14;
  *(void *)(v10 + 128) = 0x7463656A626FLL;
  *(void *)(v10 + 136) = 0xE600000000000000LL;
  uint64_t v15 = *(void *)(v2 + 56);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject?);
  *(void *)(v10 + 144) = v15;
  *(void *)(v10 + 168) = v16;
  *(void *)(v10 + 176) = 0x646E616D6564LL;
  uint64_t v17 = *(void *)(v2 + 32);
  *(void *)(v10 + 216) = MEMORY[0x189602260];
  *(void *)(v10 + 184) = 0xE600000000000000LL;
  *(void *)(v10 + 192) = v17;
  uint64_t v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v9, 1LL, 1LL, v18);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x18961A748], v3);
  swift_unknownObjectRetain();
  swift_retain();
  id v19 = v11;
  id v20 = v13;
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(v21[0]);
}

void Notification.Subscription.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0xD00000000000001BLL;
  a1[1] = 0x80000001839CE630LL;
}

uint64_t Notification.Subscription.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

void Notification.Subscription.request(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  uint64_t v4 = *(void *)(v1 + 32);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0) {
    goto LABEL_10;
  }
  static Subscribers.Demand.unlimited.getter();
  char v5 = static Subscribers.Demand.== infix(_:_:)();
  uint64_t v6 = static Subscribers.Demand.unlimited.getter();
  if ((v5 & 1) != 0)
  {
LABEL_9:
    *(void *)(v1 + 32) = v6;
LABEL_10:
    os_unfair_lock_unlock(v3);
    return;
  }

  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0) {
    goto LABEL_7;
  }
  if ((v4 | a1) < 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v6 = v4 + a1;
  if (__OFADD__(v4, a1))
  {
LABEL_7:
    uint64_t v6 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_9;
  }

  if ((v6 & 0x8000000000000000LL) == 0) {
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
}

void Notification.Subscription.cancel()()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = (void *)v0[5];
  if (v2 && (uint64_t v3 = v0[8]) != 0)
  {
    v0[5] = 0LL;
    v0[7] = 0LL;
    v0[8] = 0LL;
    swift_unknownObjectRelease();
    os_unfair_lock_unlock(v1);
    objc_msgSend(v2, sel_removeObserver_, v3);

    swift_unknownObjectRelease();
  }

  else
  {
    os_unfair_lock_unlock(v1);
  }

void protocol witness for Subscription.request(_:) in conformance Notification.Subscription<A>(uint64_t a1)
{
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Notification.Subscription<A>()
{
  return 0xD00000000000001BLL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Notification.Subscription<A>( os_unfair_lock_s *a1@<X8>)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Notification.Subscription<A>( void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Notification.Subscription<A>()
{
}

BOOL specialized static NSNotificationCenter.Publisher.== infix(_:_:)(uint64_t a1, void *a2)
{
  if (*(void *)a1 != *a2) {
    return 0LL;
  }
  uint64_t v3 = (void *)a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = *(void *)(a1 + 16);
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(a1 + 8));
  uint64_t v8 = v7;
  if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)(v3) && v8 == v9)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0LL;
    if ((v11 & 1) == 0) {
      return result;
    }
  }

  BOOL result = (v5 | v4) == 0;
  if (v5)
  {
    if (v4) {
      return v5 == v4;
    }
    else {
      return v5 == 0;
    }
  }

  return result;
}

uint64_t *specialized Notification.Subscription.init(_:_:_:_:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a4;
  uint64_t v30 = *v4;
  uint64_t v8 = *(void *)(v30 + 80);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1895F8858](a1);
  char v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = (_DWORD *)swift_slowAlloc();
  *uint64_t v15 = 0;
  v4[2] = (uint64_t)v15;
  uint64_t v16 = (void *)swift_slowAlloc();
  *uint64_t v16 = 0LL;
  v4[3] = (uint64_t)v16;
  v4[4] = 0LL;
  v4[5] = (uint64_t)a1;
  void v4[6] = (uint64_t)a2;
  v4[7] = a3;
  __int128 v4[8] = 0LL;
  uint64_t v29 = a3;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  id v18 = a1;
  id v19 = a2;
  swift_unknownObjectRetain();
  v17(v14, v28, v8);
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  v17(v11, (uint64_t)v14, v8);
  unint64_t v21 = (*(unsigned __int8 *)(v9 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v22 = (char *)swift_allocObject();
  *((void *)v22 + 2) = v8;
  *((void *)v22 + 3) = *(void *)(v30 + 88);
  *((void *)v22 + 4) = v20;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v22[v21], v11, v8);
  aBlock[4] = partial apply for closure #1 in Notification.Subscription.init(_:_:_:_:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  void aBlock[3] = &block_descriptor_13;
  uint64_t v23 = _Block_copy(aBlock);
  id v24 = v19;
  swift_release();
  id v25 = objc_msgSend(v18, sel_addObserverForName_object_queue_usingBlock_, v24, v29, 0, v23);
  _Block_release(v23);

  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  __int128 v4[8] = (uint64_t)v25;
  swift_unknownObjectRelease();
  return v4;
}

uint64_t destroy for NSNotificationCenter.Publisher(id *a1)
{
  return swift_unknownObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for NSNotificationCenter.Publisher(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  id v6 = v4;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NSNotificationCenter.Publisher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for NSNotificationCenter.Publisher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Publisher()
{
  return &type metadata for NSNotificationCenter.Publisher;
}

uint64_t type metadata completion function for Notification.Subscription()
{
  return swift_initClassMetadata2();
}

void base witness table accessor for Cancellable in Notification.Subscription<A>()
{
}

void base witness table accessor for CustomCombineIdentifierConvertible in Notification.Subscription<A>()
{
}

uint64_t sub_18323F4A0()
{
  return swift_deallocObject();
}

uint64_t sub_18323F4C4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

void specialized closure #1 in Data.withBufferView<A>(_:)( _BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6, uint64_t a7)
{
  if (a1)
  {
    uint64_t v7 = a2 - (void)a1;
    if (v7 >= 0)
    {
      closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)( a1,  v7,  a3,  a4,  a5,  a6,  a7);
      return;
    }

    __break(1u);
  }

  __break(1u);
}

uint64_t _s10Foundation4DataV14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_AA23LocalizedStringResourceV_Tg50102_s10Foundation19PropertyListDecoderC30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4b7V_xAA10de4Vys5f45VGKXExAOKXExSS05UTF16Q0VKXEtKlFZxAOKXEfU_AA23ghI5V_Tg5AIxs5Error_pRi_zRi0_zlyAKIsgyrzo_AA0lmN0CXMTAIxsAM_pRi_zRi0_zlyAKIsgyrzo_SS05UTF16E0VxsAM_pRi_zRi0_zlyAKIsggrzo_AOXDXMTTf1nnc_n@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, void *(*a4)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t)@<X5>, void (*a5)(id)@<X7>, uint64_t a6@<X8>)
{
  if (result)
  {
    uint64_t v6 = a2 - result;
    if (v6 >= 0) {
      return specialized closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)( result,  v6,  a3,  a4,  a5,  a6);
    }
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t closure #1 in Data.withBufferView<A>(_:)(uint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  if (result)
  {
    if (a2 - result >= 0) {
      return a3();
    }
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t _CalendarBridged.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)( uint64_t *a1, uint64_t *a2, void *a3, char a4, void *a5, char a6)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  char v11 = *(void **)(v6 + 16);
  swift_retain();
  id v12 = objc_msgSend(v11, sel_calendarIdentifier);
  id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039C8]);
  uint64_t v15 = v14;
  if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v15 == v16)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }

  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
LABEL_17:

    char v29 = 0;
    goto LABEL_18;
  }

  id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039A0]);
  uint64_t v21 = v20;
  if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v21 == v22)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_35;
  }

  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
  {
LABEL_35:

    char v29 = 1;
    goto LABEL_18;
  }

  id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039A8]);
  uint64_t v27 = v26;
  if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v27 == v28)
  {
    swift_bridgeObjectRelease_n();
LABEL_38:

    char v29 = 2;
    goto LABEL_18;
  }

  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) != 0) {
    goto LABEL_38;
  }
  id v42 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039B0]);
  uint64_t v44 = v43;
  if (v42 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v44 == v45)
  {
    swift_bridgeObjectRelease_n();
LABEL_43:

    char v29 = 3;
    goto LABEL_18;
  }

  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v46 & 1) != 0) {
    goto LABEL_43;
  }
  id v47 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039C0]);
  uint64_t v49 = v48;
  if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v49 == v50)
  {
    swift_bridgeObjectRelease_n();
LABEL_48:

    char v29 = 4;
    goto LABEL_18;
  }

  char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v51 & 1) != 0) {
    goto LABEL_48;
  }
  id v52 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039B8]);
  uint64_t v54 = v53;
  if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v54 == v55)
  {
    swift_bridgeObjectRelease_n();
LABEL_53:

    char v29 = 5;
    goto LABEL_18;
  }

  char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v56 & 1) != 0) {
    goto LABEL_53;
  }
  id v57 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039D0]);
  uint64_t v59 = v58;
  if (v57 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v59 == v60)
  {
    swift_bridgeObjectRelease_n();
LABEL_58:

    char v29 = 6;
    goto LABEL_18;
  }

  char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v61 & 1) != 0) {
    goto LABEL_58;
  }
  id v62 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039D8]);
  uint64_t v64 = v63;
  if (v62 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v64 == v65)
  {
    swift_bridgeObjectRelease_n();
LABEL_63:

    char v29 = 7;
    goto LABEL_18;
  }

  char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v66 & 1) != 0) {
    goto LABEL_63;
  }
  id v67 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039E0]);
  uint64_t v69 = v68;
  if (v67 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v69 == v70)
  {
    swift_bridgeObjectRelease_n();
LABEL_68:

    char v29 = 8;
    goto LABEL_18;
  }

  char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v71 & 1) != 0) {
    goto LABEL_68;
  }
  id v72 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039E8]);
  uint64_t v74 = v73;
  if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v74 == v75)
  {
    swift_bridgeObjectRelease_n();
LABEL_73:

    char v29 = 9;
    goto LABEL_18;
  }

  char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v76 & 1) != 0) {
    goto LABEL_73;
  }
  id v77 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039F0]);
  uint64_t v79 = v78;
  if (v77 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v79 == v80)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v81 & 1) == 0) {
      goto LABEL_80;
    }
  }

  char v29 = 10;
  while (1)
  {
LABEL_18:
    char v115 = v29;
    uint64_t v30 = v7;
    if (!v7)
    {
      id v32 = objc_msgSend(v11, sel_locale);
      if (v32)
      {
        id v12 = v32;
        type metadata accessor for _NSSwiftLocale();
        uint64_t v33 = swift_dynamicCastClass();
        if (v33)
        {
          uint64_t v30 = *(void *)(v33 + OBJC_IVAR____NSSwiftLocale_locale);
          uint64_t v8 = *(void *)(v33 + OBJC_IVAR____NSSwiftLocale_locale + 8);
          swift_unknownObjectRetain();
        }

        else
        {
          type metadata accessor for _LocaleBridged();
          uint64_t v30 = swift_allocObject();
          *(void *)(v30 + 16) = v12;
          uint64_t v8 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged,  (uint64_t)&protocol conformance descriptor for _LocaleBridged);
        }
      }

      else
      {
        uint64_t v30 = 0LL;
        uint64_t v8 = 0LL;
      }
    }

    *(void *)&__int128 v114 = v30;
    *((void *)&v114 + 1) = v8;
    if (v9)
    {
      swift_unknownObjectRetain();
      uint64_t v31 = v9;
      goto LABEL_29;
    }

    swift_unknownObjectRetain();
    id v34 = objc_msgSend(v11, sel_timeZone);
    if (v34) {
      break;
    }
    __break(1u);
LABEL_80:
    id v82 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A08]);
    uint64_t v84 = v83;
    if (v82 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v84 == v85)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_84;
    }

    char v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v86 & 1) != 0)
    {
LABEL_84:

      char v29 = 11;
    }

    else
    {
      id v87 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A10]);
      uint64_t v89 = v88;
      if (v87 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v89 == v90)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_89;
      }

      char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v91 & 1) != 0)
      {
LABEL_89:

        char v29 = 12;
      }

      else
      {
        id v92 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A18]);
        uint64_t v94 = v93;
        if (v92 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v94 == v95)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_94;
        }

        char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v96 & 1) != 0)
        {
LABEL_94:

          char v29 = 13;
        }

        else
        {
          id v97 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039F8]);
          uint64_t v99 = v98;
          if (v97 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v99 == v100)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_99;
          }

          char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v101 & 1) != 0)
          {
LABEL_99:

            char v29 = 14;
          }

          else
          {
            id v102 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A00]);
            uint64_t v104 = v103;
            if (v102 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v104 == v105)
            {

              swift_bridgeObjectRelease_n();
            }

            else
            {
              char v106 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              if ((v106 & 1) == 0)
              {
                __break(1u);
                return result;
              }
            }

            char v29 = 15;
          }
        }
      }
    }
  }

  uint64_t v35 = v34;
  type metadata accessor for _NSSwiftTimeZone();
  uint64_t v36 = swift_dynamicCastClass();
  if (v36)
  {
    uint64_t v31 = *(void *)(v36 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    uint64_t v10 = *(void *)(v36 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    swift_unknownObjectRetain();
  }

  else
  {
    type metadata accessor for _TimeZoneBridged();
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v35;
    uint64_t v10 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged,  (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
  }

void _CalendarBridged.locale.getter(uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(*(id *)(v1 + 16), sel_locale);
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for _NSSwiftLocale();
    uint64_t v5 = swift_dynamicCastClass();
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + OBJC_IVAR____NSSwiftLocale_locale);
      uint64_t v7 = *(void *)(v5 + OBJC_IVAR____NSSwiftLocale_locale + 8);
      swift_unknownObjectRetain();
    }

    else
    {
      type metadata accessor for _LocaleBridged();
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v4;
      uint64_t v7 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged,  (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = v7;
}

id _CalendarBridged.localeIdentifier.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_locale);
  if (v1)
  {
    type metadata accessor for _NSSwiftLocale();
    uint64_t v2 = swift_dynamicCastClass();
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + OBJC_IVAR____NSSwiftLocale_locale + 8);
      swift_unknownObjectRetain();
    }

    else
    {
      type metadata accessor for _LocaleBridged();
      *(void *)(swift_allocObject() + 16) = v1;
      uint64_t v3 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged,  (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    }

    uint64_t ObjectType = swift_getObjectType();
    id v1 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
    swift_unknownObjectRelease();
  }

  return v1;
}

unint64_t _CalendarBridged.minimumRange(of:)(unsigned __int8 *a1)
{
  Swift::UInt v2 = *a1;
  uint64_t v3 = *(void **)(v1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v4 = static _SetStorage.allocate(capacity:)();
  uint64_t v5 = v4 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  unint64_t result = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v8 = result & ~v7;
  unint64_t v9 = v8 >> 6;
  uint64_t v10 = *(void *)(v4 + 56 + 8 * (v8 >> 6));
  uint64_t v11 = 1LL << v8;
  uint64_t v12 = *(void *)(v4 + 48);
  if (((1LL << v8) & v10) != 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v8 = (v8 + 1) & v13;
    unint64_t v9 = v8 >> 6;
    uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
    uint64_t v11 = 1LL << v8;
    if ((v10 & (1LL << v8)) != 0)
    {
      unint64_t v8 = (v8 + 1) & v13;
      unint64_t v9 = v8 >> 6;
      uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
      uint64_t v11 = 1LL << v8;
      if ((v10 & (1LL << v8)) != 0)
      {
        unint64_t v8 = (v8 + 1) & v13;
        unint64_t v9 = v8 >> 6;
        uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
        uint64_t v11 = 1LL << v8;
        if ((v10 & (1LL << v8)) != 0)
        {
          while (*(unsigned __int8 *)(v12 + v8) != (_DWORD)v2)
          {
            unint64_t v8 = (v8 + 1) & v13;
            unint64_t v9 = v8 >> 6;
            uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
            uint64_t v11 = 1LL << v8;
            if ((v10 & (1LL << v8)) == 0) {
              goto LABEL_10;
            }
          }

          goto LABEL_12;
        }
      }
    }
  }

unint64_t _CalendarBridged.maximumRange(of:)(unsigned __int8 *a1)
{
  Swift::UInt v2 = *a1;
  uint64_t v3 = *(void **)(v1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v4 = static _SetStorage.allocate(capacity:)();
  uint64_t v5 = v4 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  unint64_t result = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v8 = result & ~v7;
  unint64_t v9 = v8 >> 6;
  uint64_t v10 = *(void *)(v4 + 56 + 8 * (v8 >> 6));
  uint64_t v11 = 1LL << v8;
  uint64_t v12 = *(void *)(v4 + 48);
  if (((1LL << v8) & v10) != 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v8 = (v8 + 1) & v13;
    unint64_t v9 = v8 >> 6;
    uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
    uint64_t v11 = 1LL << v8;
    if ((v10 & (1LL << v8)) != 0)
    {
      unint64_t v8 = (v8 + 1) & v13;
      unint64_t v9 = v8 >> 6;
      uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
      uint64_t v11 = 1LL << v8;
      if ((v10 & (1LL << v8)) != 0)
      {
        unint64_t v8 = (v8 + 1) & v13;
        unint64_t v9 = v8 >> 6;
        uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
        uint64_t v11 = 1LL << v8;
        if ((v10 & (1LL << v8)) != 0)
        {
          while (*(unsigned __int8 *)(v12 + v8) != (_DWORD)v2)
          {
            unint64_t v8 = (v8 + 1) & v13;
            unint64_t v9 = v8 >> 6;
            uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
            uint64_t v11 = 1LL << v8;
            if ((v10 & (1LL << v8)) == 0) {
              goto LABEL_10;
            }
          }

          goto LABEL_12;
        }
      }
    }
  }

void _CalendarBridged.range(of:in:for:)(unsigned __int8 *a1, unsigned __int8 *a2, double *a3)
{
  Swift::UInt v4 = *a1;
  Swift::UInt v5 = *a2;
  double v6 = *a3;
  uint64_t v7 = *(void **)(v3 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v8 = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = v8 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v12 = v10 & ~v11;
  unint64_t v13 = v12 >> 6;
  uint64_t v14 = *(void *)(v8 + 56 + 8 * (v12 >> 6));
  uint64_t v15 = 1LL << v12;
  uint64_t v16 = *(void *)(v8 + 48);
  if (((1LL << v12) & v14) == 0) {
    goto LABEL_10;
  }
  uint64_t v17 = ~v11;
  unint64_t v12 = (v12 + 1) & v17;
  unint64_t v13 = v12 >> 6;
  uint64_t v14 = *(void *)(v9 + 8 * (v12 >> 6));
  uint64_t v15 = 1LL << v12;
  if ((v14 & (1LL << v12)) == 0) {
    goto LABEL_10;
  }
  unint64_t v12 = (v12 + 1) & v17;
  unint64_t v13 = v12 >> 6;
  uint64_t v14 = *(void *)(v9 + 8 * (v12 >> 6));
  uint64_t v15 = 1LL << v12;
  if ((v14 & (1LL << v12)) == 0) {
    goto LABEL_10;
  }
  unint64_t v12 = (v12 + 1) & v17;
  unint64_t v13 = v12 >> 6;
  uint64_t v14 = *(void *)(v9 + 8 * (v12 >> 6));
  uint64_t v15 = 1LL << v12;
  if ((v14 & (1LL << v12)) != 0)
  {
    while (*(unsigned __int8 *)(v16 + v12) != (_DWORD)v4)
    {
      unint64_t v12 = (v12 + 1) & v17;
      unint64_t v13 = v12 >> 6;
      uint64_t v14 = *(void *)(v9 + 8 * (v12 >> 6));
      uint64_t v15 = 1LL << v12;
      if ((v14 & (1LL << v12)) == 0) {
        goto LABEL_10;
      }
    }
  }

  else
  {
LABEL_10:
    *(void *)(v9 + 8 * v13) = v15 | v14;
    *(_BYTE *)(v16 + v12) = v4;
    uint64_t v18 = *(void *)(v8 + 16);
    BOOL v19 = __OFADD__(v18, 1LL);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_96;
    }
    *(void *)(v8 + 16) = v20;
  }

Foundation::DateInterval_optional __swiftcall _CalendarBridged.dateInterval(of:for:)( Foundation::Calendar::Component of, Foundation::Date a2)
{
  uint64_t v5 = v3;
  v58[1] = *(double *)MEMORY[0x1895F89C0];
  Swift::UInt v6 = *(unsigned __int8 *)of;
  double v7 = *v2;
  v58[0] = 0.0;
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, 0.0);
  uint64_t v9 = *(void **)(v4 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v10 = static _SetStorage.allocate(capacity:)();
  uint64_t v11 = v10 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v14 = v12 & ~v13;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v10 + 56 + 8 * (v14 >> 6));
  uint64_t v17 = 1LL << v14;
  uint64_t v18 = *(void *)(v10 + 48);
  if (((1LL << v14) & v16) == 0) {
    goto LABEL_10;
  }
  uint64_t v19 = ~v13;
  unint64_t v14 = (v14 + 1) & v19;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v11 + 8 * (v14 >> 6));
  uint64_t v17 = 1LL << v14;
  if ((v16 & (1LL << v14)) == 0) {
    goto LABEL_10;
  }
  unint64_t v14 = (v14 + 1) & v19;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v11 + 8 * (v14 >> 6));
  uint64_t v17 = 1LL << v14;
  if ((v16 & (1LL << v14)) == 0) {
    goto LABEL_10;
  }
  unint64_t v14 = (v14 + 1) & v19;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v11 + 8 * (v14 >> 6));
  uint64_t v17 = 1LL << v14;
  if ((v16 & (1LL << v14)) == 0)
  {
LABEL_10:
    *(void *)(v11 + 8 * v15) = v17 | v16;
    *(_BYTE *)(v18 + v14) = v6;
    uint64_t v20 = *(void *)(v10 + 16);
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_53;
    }
    *(void *)(v10 + 16) = v22;
    goto LABEL_12;
  }

  while (*(unsigned __int8 *)(v18 + v14) != (_DWORD)v6)
  {
    unint64_t v14 = (v14 + 1) & v19;
    unint64_t v15 = v14 >> 6;
    uint64_t v16 = *(void *)(v11 + 8 * (v14 >> 6));
    uint64_t v17 = 1LL << v14;
    if ((v16 & (1LL << v14)) == 0) {
      goto LABEL_10;
    }
  }

Swift::Int_optional __swiftcall _CalendarBridged.ordinality(of:in:for:)( Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  Swift::UInt v5 = *(unsigned __int8 *)of;
  Swift::UInt v6 = *(unsigned __int8 *)in;
  double v7 = *v3;
  id v8 = *(void **)(v4 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v9 = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = v9 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  unint64_t v11 = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t v14 = v11 & ~v13;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v9 + 56 + 8 * (v14 >> 6));
  uint64_t v17 = 1LL << v14;
  uint64_t v18 = *(void *)(v9 + 48);
  if (((1LL << v14) & v16) == 0) {
    goto LABEL_10;
  }
  uint64_t v19 = ~v13;
  unint64_t v14 = (v14 + 1) & v19;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v10 + 8 * (v14 >> 6));
  uint64_t v17 = 1LL << v14;
  if ((v16 & (1LL << v14)) == 0) {
    goto LABEL_10;
  }
  unint64_t v14 = (v14 + 1) & v19;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v10 + 8 * (v14 >> 6));
  uint64_t v17 = 1LL << v14;
  if ((v16 & (1LL << v14)) == 0) {
    goto LABEL_10;
  }
  unint64_t v14 = (v14 + 1) & v19;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v10 + 8 * (v14 >> 6));
  uint64_t v17 = 1LL << v14;
  if ((v16 & (1LL << v14)) != 0)
  {
    while (*(unsigned __int8 *)(v18 + v14) != (_DWORD)v5)
    {
      unint64_t v14 = (v14 + 1) & v19;
      unint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)(v10 + 8 * (v14 >> 6));
      uint64_t v17 = 1LL << v14;
      if ((v16 & (1LL << v14)) == 0) {
        goto LABEL_10;
      }
    }
  }

  else
  {
LABEL_10:
    *(void *)(v10 + 8 * v15) = v17 | v16;
    *(_BYTE *)(v18 + v14) = v5;
    uint64_t v20 = *(void *)(v9 + 16);
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_100;
    }
    *(void *)(v9 + 16) = v22;
  }

void _CalendarBridged.date(byAdding:to:wrappingComponents:)( void *__src@<X0>, double *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  double v8 = *a2;
  uint64_t v9 = *(void **)(v4 + 16);
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v8);
  id v12 = objc_msgSend(v9, sel_dateByAddingComponents_toDate_options_, isa, v11, a3 & 1);

  if (v12)
  {
    objc_msgSend(v12, sel_timeIntervalSinceReferenceDate);
    uint64_t v14 = v13;
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  *(void *)a4 = v14;
  *(_BYTE *)(a4 + 8) = v12 == 0LL;
}

void _CalendarBridged.date(from:)(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)(v2 + 16);
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  id v6 = objc_msgSend(v4, sel_dateFromComponents_, isa);

  if (v6)
  {
    objc_msgSend(v6, sel_timeIntervalSinceReferenceDate);
    uint64_t v8 = v7;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  *(void *)a2 = v8;
  *(_BYTE *)(a2 + 8) = v6 == 0LL;
}

unint64_t _CalendarBridged.dateComponents(_:from:)@<X0>( void *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  double v5 = *a2;
  id v6 = *(void **)(v3 + 16);
  *(void *)&__dst[0] = *a1;
  uint64_t v7 = Calendar.ComponentSet.set.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  unint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = (void *)result;
  uint64_t v10 = 0LL;
  unint64_t v11 = result + 64;
  do
  {
    int v12 = outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:)[v10 + 32];
    if (v12 == 18) {
      break;
    }
    uint64_t v13 = *(void *)&outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:)[v10 + 40];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:)[v10 + 32]);
    if ((v14 & 1) != 0) {
      goto LABEL_38;
    }
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(_BYTE *)(v9[6] + result) = v12;
    *(void *)(v9[7] + 8 * result) = v13;
    uint64_t v15 = v9[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_39;
    }
    void v9[2] = v17;
    v10 += 16LL;
  }

  while (v10 != 256);
  int64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v20 = v7 + 56;
  uint64_t v21 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v22 = -1LL;
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  unint64_t v23 = v22 & *(void *)(v7 + 56);
  int64_t v24 = (unint64_t)(v21 + 63) >> 6;
  if (!v23) {
    goto LABEL_11;
  }
LABEL_9:
  unint64_t v25 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  unint64_t v26 = v25 | (v18 << 6);
  if (v9[2])
  {
    while (1)
    {
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v7 + 48) + v26));
      if ((v30 & 1) == 0) {
        break;
      }
      uint64_t v31 = *(void *)(v9[7] + 8 * result);
      if ((v31 & ~v19) == 0) {
        uint64_t v31 = 0LL;
      }
      v19 |= v31;
      if (v23) {
        goto LABEL_9;
      }
LABEL_11:
      int64_t v27 = v18 + 1;
      if (__OFADD__(v18, 1LL)) {
        goto LABEL_37;
      }
      if (v27 >= v24)
      {
LABEL_30:
        swift_bridgeObjectRelease();
        swift_release();
        id v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v5);
        id v33 = objc_msgSend(v6, sel_components_fromDate_, v19, v32);

        if (v33)
        {
          __dst[0] = 0uLL;
          __src[0] = 0uLL;
          id v34 = v33;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  (uint64_t *)__src,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)v37,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
          destructiveProjectEnumData for PredicateCodableError(v37, v35);
          outlined init with take of DateComponents?((uint64_t)v37, (uint64_t)v36);
          static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v34, (uint64_t)v36);
          outlined init with take of DateComponents?((uint64_t)v36, (uint64_t)v38);
          outlined init with take of DateComponents?((uint64_t)v38, (uint64_t)__src);
          unint64_t result = _s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)__src);
          if ((_DWORD)result == 1) {
            goto LABEL_41;
          }

          memcpy(__dst, __src, 0x11AuLL);
        }

        else
        {
          __src[0] = 0uLL;
          v38[1] = 0LL;
          v38[0] = 0LL;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __src,  v38,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__dst,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
        }

        return (unint64_t)memcpy(a3, __dst, 0x11AuLL);
      }

      unint64_t v28 = *(void *)(v20 + 8 * v27);
      ++v18;
      if (!v28)
      {
        int64_t v18 = v27 + 1;
        if (v27 + 1 >= v24) {
          goto LABEL_30;
        }
        unint64_t v28 = *(void *)(v20 + 8 * v18);
        if (!v28)
        {
          int64_t v18 = v27 + 2;
          if (v27 + 2 >= v24) {
            goto LABEL_30;
          }
          unint64_t v28 = *(void *)(v20 + 8 * v18);
          if (!v28)
          {
            int64_t v29 = v27 + 3;
            if (v29 >= v24) {
              goto LABEL_30;
            }
            unint64_t v28 = *(void *)(v20 + 8 * v29);
            if (!v28)
            {
              while (1)
              {
                int64_t v18 = v29 + 1;
                if (__OFADD__(v29, 1LL)) {
                  goto LABEL_40;
                }
                if (v18 >= v24) {
                  goto LABEL_30;
                }
                unint64_t v28 = *(void *)(v20 + 8 * v18);
                ++v29;
                if (v28) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v18 = v29;
          }
        }
      }

void _CalendarBridged.dateComponents(_:from:in:)(double *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  double v5 = *a1;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void **)(v3 + 16);
  id v8 = objc_msgSend(v7, sel_timeZone);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v45 = a3;
    type metadata accessor for _NSSwiftTimeZone();
    uint64_t v10 = swift_dynamicCastClass();
    if (v10)
    {
      uint64_t v44 = *(void *)(v10 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      swift_unknownObjectRetain();
    }

    else
    {
      type metadata accessor for _TimeZoneBridged();
      *(void *)(swift_allocObject() + 16) = v9;
      uint64_t v44 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged,  (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    }

    uint64_t ObjectType = swift_getObjectType();
    int v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 120))(ObjectType, v6);
    objc_msgSend(v7, sel_setTimeZone_, v12);

    *(void *)&__dst[0] = 0xFFFFLL;
    uint64_t v13 = Calendar.ComponentSet.set.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
    char v14 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = 0LL; i != 256; i += 16LL)
    {
      int v16 = outlined read-only object #1 of _CalendarBridged.dateComponents(_:from:in:)[i + 32];
      if (v16 == 18) {
        break;
      }
      uint64_t v17 = *(void *)&outlined read-only object #1 of _CalendarBridged.dateComponents(_:from:in:)[i + 40];
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #1 of _CalendarBridged.dateComponents(_:from:in:)[i + 32]);
      if ((v19 & 1) != 0) {
        goto LABEL_44;
      }
      *(void *)((char *)v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v18;
      *(_BYTE *)(v14[6] + v18) = v16;
      *(void *)(v14[7] + 8 * v18) = v17;
      uint64_t v20 = v14[2];
      BOOL v21 = __OFADD__(v20, 1LL);
      uint64_t v22 = v20 + 1;
      if (v21) {
        goto LABEL_45;
      }
      void v14[2] = v22;
    }

    int64_t v23 = 0LL;
    uint64_t v24 = 0LL;
    uint64_t v25 = v13 + 56;
    uint64_t v26 = 1LL << *(_BYTE *)(v13 + 32);
    uint64_t v27 = -1LL;
    if (v26 < 64) {
      uint64_t v27 = ~(-1LL << v26);
    }
    unint64_t v28 = v27 & *(void *)(v13 + 56);
    int64_t v29 = (unint64_t)(v26 + 63) >> 6;
    if (!v28) {
      goto LABEL_15;
    }
LABEL_13:
    unint64_t v30 = __clz(__rbit64(v28));
    v28 &= v28 - 1;
    unint64_t v31 = v30 | (v23 << 6);
    if (v14[2])
    {
      while (1)
      {
        uint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v13 + 48) + v31));
        if ((v36 & 1) == 0) {
          break;
        }
        uint64_t v37 = *(void *)(v14[7] + 8 * v35);
        if ((v37 & ~v24) == 0) {
          uint64_t v37 = 0LL;
        }
        v24 |= v37;
        if (v28) {
          goto LABEL_13;
        }
LABEL_15:
        int64_t v32 = v23 + 1;
        if (__OFADD__(v23, 1LL)) {
          goto LABEL_43;
        }
        if (v32 >= v29)
        {
LABEL_36:
          swift_bridgeObjectRelease();
          swift_release();
          id v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v5);
          id v39 = objc_msgSend(v7, sel_components_fromDate_, v24, v38);

          if (v39)
          {
            __dst[0] = 0uLL;
            __src[0] = 0uLL;
            id v40 = v39;
            DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  (uint64_t *)__src,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)v47,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
            destructiveProjectEnumData for PredicateCodableError(v47, v41);
            outlined init with take of DateComponents?((uint64_t)v47, (uint64_t)v46);
            static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v40, (uint64_t)v46);
            outlined init with take of DateComponents?((uint64_t)v46, (uint64_t)v48);
            outlined init with take of DateComponents?((uint64_t)v48, (uint64_t)__src);

            memcpy(__dst, __src, 0x11AuLL);
          }

          else
          {
            __src[0] = 0uLL;
            v48[1] = 0LL;
            v48[0] = 0LL;
            DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __src,  v48,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__dst,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
          }

          memcpy(v45, __dst, 0x11AuLL);
          uint64_t v42 = swift_getObjectType();
          uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t))(v44 + 120))(v42);
          objc_msgSend(v7, sel_setTimeZone_, v43);
          swift_unknownObjectRelease();

          return;
        }

        unint64_t v33 = *(void *)(v25 + 8 * v32);
        ++v23;
        if (!v33)
        {
          int64_t v23 = v32 + 1;
          if (v32 + 1 >= v29) {
            goto LABEL_36;
          }
          unint64_t v33 = *(void *)(v25 + 8 * v23);
          if (!v33)
          {
            int64_t v23 = v32 + 2;
            if (v32 + 2 >= v29) {
              goto LABEL_36;
            }
            unint64_t v33 = *(void *)(v25 + 8 * v23);
            if (!v33)
            {
              int64_t v23 = v32 + 3;
              if (v32 + 3 >= v29) {
                goto LABEL_36;
              }
              unint64_t v33 = *(void *)(v25 + 8 * v23);
              if (!v33)
              {
                int64_t v34 = v32 + 4;
                if (v34 >= v29) {
                  goto LABEL_36;
                }
                unint64_t v33 = *(void *)(v25 + 8 * v34);
                if (!v33)
                {
                  while (1)
                  {
                    int64_t v23 = v34 + 1;
                    if (__OFADD__(v34, 1LL)) {
                      goto LABEL_46;
                    }
                    if (v23 >= v29) {
                      goto LABEL_36;
                    }
                    unint64_t v33 = *(void *)(v25 + 8 * v23);
                    ++v34;
                    if (v33) {
                      goto LABEL_30;
                    }
                  }
                }

                int64_t v23 = v34;
              }
            }
          }
        }

unint64_t _CalendarBridged.dateComponents(_:from:to:)@<X0>( void *a1@<X0>, double *a2@<X1>, double *a3@<X2>, void *a4@<X8>)
{
  double v6 = *a2;
  double v7 = *a3;
  id v8 = *(void **)(v4 + 16);
  *(void *)&__dst[0] = *a1;
  uint64_t v9 = Calendar.ComponentSet.set.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  unint64_t result = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v11 = (void *)result;
  uint64_t v12 = 0LL;
  unint64_t v13 = result + 64;
  do
  {
    int v14 = outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:to:)[v12 + 32];
    if (v14 == 18) {
      break;
    }
    uint64_t v15 = *(void *)&outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:to:)[v12 + 40];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:to:)[v12 + 32]);
    if ((v16 & 1) != 0) {
      goto LABEL_40;
    }
    *(void *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(_BYTE *)(v11[6] + result) = v14;
    *(void *)(v11[7] + 8 * result) = v15;
    uint64_t v17 = v11[2];
    BOOL v18 = __OFADD__(v17, 1LL);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_41;
    }
    void v11[2] = v19;
    v12 += 16LL;
  }

  while (v12 != 256);
  int64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v22 = v9 + 56;
  uint64_t v23 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v24 = -1LL;
  if (v23 < 64) {
    uint64_t v24 = ~(-1LL << v23);
  }
  unint64_t v25 = v24 & *(void *)(v9 + 56);
  int64_t v26 = (unint64_t)(v23 + 63) >> 6;
  if (!v25) {
    goto LABEL_11;
  }
LABEL_9:
  unint64_t v27 = __clz(__rbit64(v25));
  v25 &= v25 - 1;
  unint64_t v28 = v27 | (v20 << 6);
  if (v11[2])
  {
    while (1)
    {
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v9 + 48) + v28));
      if ((v32 & 1) == 0) {
        break;
      }
      uint64_t v33 = *(void *)(v11[7] + 8 * result);
      if ((v33 & ~v21) == 0) {
        uint64_t v33 = 0LL;
      }
      v21 |= v33;
      if (v25) {
        goto LABEL_9;
      }
LABEL_11:
      int64_t v29 = v20 + 1;
      if (__OFADD__(v20, 1LL)) {
        goto LABEL_39;
      }
      if (v29 >= v26)
      {
LABEL_32:
        swift_bridgeObjectRelease();
        swift_release();
        id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v6);
        id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v7);
        id v36 = objc_msgSend(v8, sel_components_fromDate_toDate_options_, v21, v34, v35, 0);

        if (v36)
        {
          __dst[0] = 0uLL;
          __src[0] = 0uLL;
          id v37 = v36;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  (uint64_t *)__src,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)v40,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
          destructiveProjectEnumData for PredicateCodableError(v40, v38);
          outlined init with take of DateComponents?((uint64_t)v40, (uint64_t)v39);
          static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v37, (uint64_t)v39);
          outlined init with take of DateComponents?((uint64_t)v39, (uint64_t)v41);
          outlined init with take of DateComponents?((uint64_t)v41, (uint64_t)__src);
          unint64_t result = _s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)__src);
          if ((_DWORD)result == 1) {
            goto LABEL_43;
          }

          memcpy(__dst, __src, 0x11AuLL);
        }

        else
        {
          __src[0] = 0uLL;
          v41[1] = 0LL;
          v41[0] = 0LL;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __src,  v41,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__dst,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
        }

        return (unint64_t)memcpy(a4, __dst, 0x11AuLL);
      }

      unint64_t v30 = *(void *)(v22 + 8 * v29);
      ++v20;
      if (!v30)
      {
        int64_t v20 = v29 + 1;
        if (v29 + 1 >= v26) {
          goto LABEL_32;
        }
        unint64_t v30 = *(void *)(v22 + 8 * v20);
        if (!v30)
        {
          int64_t v20 = v29 + 2;
          if (v29 + 2 >= v26) {
            goto LABEL_32;
          }
          unint64_t v30 = *(void *)(v22 + 8 * v20);
          if (!v30)
          {
            int64_t v20 = v29 + 3;
            if (v29 + 3 >= v26) {
              goto LABEL_32;
            }
            unint64_t v30 = *(void *)(v22 + 8 * v20);
            if (!v30)
            {
              int64_t v31 = v29 + 4;
              if (v31 >= v26) {
                goto LABEL_32;
              }
              unint64_t v30 = *(void *)(v22 + 8 * v31);
              if (!v30)
              {
                while (1)
                {
                  int64_t v20 = v31 + 1;
                  if (__OFADD__(v31, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v20 >= v26) {
                    goto LABEL_32;
                  }
                  unint64_t v30 = *(void *)(v22 + 8 * v20);
                  ++v31;
                  if (v30) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v20 = v31;
            }
          }
        }
      }

uint64_t type metadata accessor for _CalendarBridged()
{
  return objc_opt_self();
}

void protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarBridged()
{
}

void protocol witness for _CalendarProtocol.identifier.getter in conformance _CalendarBridged( _BYTE *a1@<X8>)
{
  id v3 = objc_msgSend(*(id *)(v1 + 16), sel_calendarIdentifier);
  static Calendar._fromNSCalendarIdentifier(_:)(v3, &v4);

  if (v4 == 16) {
    __break(1u);
  }
  else {
    *a1 = v4;
  }
}

void protocol witness for _CalendarProtocol.timeZone.getter in conformance _CalendarBridged( uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(*(id *)(v1 + 16), sel_timeZone);
  if (v3)
  {
    char v4 = v3;
    type metadata accessor for _NSSwiftTimeZone();
    uint64_t v5 = swift_dynamicCastClass();
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
      uint64_t v7 = *(void *)(v5 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      swift_unknownObjectRetain();
    }

    else
    {
      type metadata accessor for _TimeZoneBridged();
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v4;
      uint64_t v7 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged,  (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    }

    *a1 = v6;
    a1[1] = v7;
  }

  else
  {
    __break(1u);
  }

id protocol witness for _CalendarProtocol.firstWeekday.getter in conformance _CalendarBridged()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_firstWeekday);
}

id protocol witness for _CalendarProtocol.minimumDaysInFirstWeek.getter in conformance _CalendarBridged()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_minimumDaysInFirstWeek);
}

uint64_t protocol witness for _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:) in conformance _CalendarBridged( uint64_t *a1, uint64_t *a2, void *a3, char a4, void *a5, char a6)
{
  return _CalendarBridged.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)( a1,  a2,  a3,  a4 & 1,  a5,  a6 & 1);
}

unint64_t protocol witness for _CalendarProtocol.minimumRange(of:) in conformance _CalendarBridged( unsigned __int8 *a1)
{
  return _CalendarBridged.minimumRange(of:)(a1);
}

unint64_t protocol witness for _CalendarProtocol.maximumRange(of:) in conformance _CalendarBridged( unsigned __int8 *a1)
{
  return _CalendarBridged.maximumRange(of:)(a1);
}

void protocol witness for _CalendarProtocol.range(of:in:for:) in conformance _CalendarBridged( unsigned __int8 *a1, unsigned __int8 *a2, double *a3)
{
}

unint64_t protocol witness for _CalendarProtocol.ordinality(of:in:for:) in conformance _CalendarBridged( Foundation::Calendar::Component a1, Foundation::Calendar::Component a2, double a3)
{
  return (unint64_t)_CalendarBridged.ordinality(of:in:for:)(a1, a2, *(Foundation::Date *)&a3);
}

id protocol witness for _CalendarProtocol.isDateInWeekend(_:) in conformance _CalendarBridged(double *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  id v4 = objc_msgSend(v2, sel_isDateInWeekend_, v3);

  return v4;
}

uint64_t protocol witness for _CalendarProtocol.bridgeToNSCalendar() in conformance _CalendarBridged()
{
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _CalendarBridged()
{
  id v1 = objc_msgSend(*(id *)(*(void *)v0 + 16), sel_debugDescription);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  id v4 = v3;

  v5._uint64_t countAndFlagsBits = (uint64_t)v2;
  v5._unint64_t object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0x2064656764697262LL;
}

uint64_t instantiation function for generic protocol witness table for _CalendarBridged( uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for _CalendarBridged,  (uint64_t)&protocol conformance descriptor for _CalendarBridged);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t type metadata accessor for NSCalendar()
{
  unint64_t result = lazy cache variable for type metadata for NSCalendar;
  if (!lazy cache variable for type metadata for NSCalendar)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSCalendar);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = MEMORY[0x186E20D4C](a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

ValueMetadata *type metadata accessor for Platform()
{
  return &type metadata for Platform;
}

Swift::Int one-time initialization function for _pageSize()
{
  Swift::Int result = _platform_shims_vm_size();
  if (result < 0) {
    __break(1u);
  }
  else {
    _pageSize = result;
  }
  return result;
}

unint64_t _getSVUID()()
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  memset(v5, 0, sizeof(v5));
  uint64_t v6 = 0LL;
  int v7 = 0;
  uint64_t v14 = 0LL;
  int v15 = 0;
  uint64_t v16 = 0LL;
  int v17 = 0;
  uint64_t v21 = 0LL;
  uint64_t v34 = 0LL;
  __int16 v35 = 0;
  int v40 = 0;
  uint64_t v47 = 0LL;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  int v10 = 0;
  int v13 = 0;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t v19 = 0LL;
  int v20 = 0;
  __int128 v18 = 0u;
  __int128 v23 = 0u;
  memset(v24, 0, sizeof(v24));
  __int128 v25 = 0u;
  int v22 = 0;
  int v26 = 0;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  memset(v33, 0, sizeof(v33));
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v41 = 0u;
  int v43 = 0;
  uint64_t v42 = 0LL;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int16 v46 = 0;
  __int128 v48 = 0u;
  __int16 v50 = 0;
  uint64_t v49 = 0LL;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  size_t v4 = 0LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_183729E20;
  *(void *)(v0 + 32) = 0xE00000001LL;
  *(_DWORD *)(v0 + 40) = 1;
  *(_DWORD *)(v0 + 44) = getpid();
  int v1 = sysctl((int *)(v0 + 32), 4u, v5, &v4, 0LL, 0LL);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v2 = 0LL;
  }
  else {
    uint64_t v2 = v33[3];
  }
  return v2 | ((unint64_t)(v1 != 0) << 32);
}

unint64_t one-time initialization function for _canChangeUIDs()
{
  uid_t v0 = geteuid();
  uid_t v1 = getuid();
  unint64_t result = _getSVUID()();
  Swift::Bool v3 = (result & 0x100000000LL) != 0 || v0 != (_DWORD)result;
  if (v1 != v0) {
    Swift::Bool v3 = 1;
  }
  if (!v1) {
    Swift::Bool v3 = 1;
  }
  _canChangeUIDs = v3;
  return result;
}

uint64_t one-time initialization function for _cachedUGIDs()
{
  uint64_t v2 = *MEMORY[0x1895F89C0];
  *(void *)uid_t v1 = 0LL;
  if (pthread_getugid_np(&v1[1], v1))
  {
    v1[1] = geteuid();
    uint64_t result = getegid();
  }

  else
  {
    uint64_t result = v1[0];
  }

  _cachedUGIDs._0 = v1[1];
  _cachedUGIDs._1 = result;
  return result;
}

unint64_t specialized static Platform.getUGIDs(allowEffectiveRootUID:)(char a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (one-time initialization token for _canChangeUIDs != -1) {
    swift_once();
  }
  if (_canChangeUIDs)
  {
    *(void *)Swift::String v5 = 0LL;
    if (pthread_getugid_np(&v5[1], v5))
    {
      v5[1] = geteuid();
      uint64_t v2 = getegid();
      Swift::UInt32 v3 = v5[1];
      if ((a1 & 1) != 0) {
        return v3 | (unint64_t)(v2 << 32);
      }
    }

    else
    {
      uint64_t v2 = v5[0];
      Swift::UInt32 v3 = v5[1];
      if ((a1 & 1) != 0) {
        return v3 | (unint64_t)(v2 << 32);
      }
    }

    goto LABEL_12;
  }

  if (one-time initialization token for _cachedUGIDs != -1) {
    swift_once();
  }
  Swift::UInt32 v3 = _cachedUGIDs._0;
  uint64_t v2 = _cachedUGIDs._1;
  if ((a1 & 1) == 0)
  {
LABEL_12:
    if (!v3) {
      Swift::UInt32 v3 = getuid();
    }
  }

  return v3 | (unint64_t)(v2 << 32);
}

void static MeasurementFormatUnitUsage.general.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static MeasurementFormatUnitUsage.asProvided.getter(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

void MeasurementFormatUnitUsage.hash(into:)()
{
  __asm { BR              X10 }

uint64_t sub_183243564()
{
  return swift_bridgeObjectRelease();
}

void static MeasurementFormatUnitUsage.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_1832436F0@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_18324382C + 4 * byte_1837C462C[a1]))(0x6E6F73726570LL);
}

uint64_t sub_18324382C(uint64_t a1)
{
  if (a1 == 0x6E6F73726570LL && v1 == 0xE600000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t MeasurementFormatUnitUsage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6567617375LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }

  return v4 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MeasurementFormatUnitUsage<A>.CodingKeys()
{
  return 0x6567617375LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MeasurementFormatUnitUsage<A>.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = MeasurementFormatUnitUsage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MeasurementFormatUnitUsage<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MeasurementFormatUnitUsage<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t MeasurementFormatUnitUsage.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for MeasurementFormatUnitUsage.CodingKeys(255LL, *(void *)(a2 + 16), a3, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for MeasurementFormatUnitUsage<A>.CodingKeys, v6);
  uint64_t v7 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v12 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  __int128 v9 = (char *)&v12 - v8;
  char v10 = *v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = v10;
  lazy protocol witness table accessor for type Usage and conformance Usage();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v9, v7);
}

uint64_t type metadata accessor for MeasurementFormatUnitUsage.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for MeasurementFormatUnitUsage.CodingKeys);
}

Swift::Int MeasurementFormatUnitUsage.hashValue.getter()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)();
  Usage.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t MeasurementFormatUnitUsage.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  int v15 = a5;
  uint64_t v7 = type metadata accessor for MeasurementFormatUnitUsage.CodingKeys(255LL, a2, a3, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for MeasurementFormatUnitUsage<A>.CodingKeys, v7);
  uint64_t v8 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  __int128 v11 = (char *)&v14 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v5)
  {
    uint64_t v12 = v15;
    lazy protocol witness table accessor for type Usage and conformance Usage();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *uint64_t v12 = v16;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance MeasurementFormatUnitUsage<A>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  return MeasurementFormatUnitUsage.init(from:)(a1, *(void *)(a2 + 16), a3, a4, a5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MeasurementFormatUnitUsage<A>( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MeasurementFormatUnitUsage.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MeasurementFormatUnitUsage<A>()
{
  return Hasher._finalize()();
}

void static MeasurementFormatUnitUsage<>.weather.getter(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

void static MeasurementFormatUnitUsage<>.road.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static MeasurementFormatUnitUsage<>.personHeight.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static MeasurementFormatUnitUsage<>.visibility.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

void static MeasurementFormatUnitUsage<>.focalLength.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static MeasurementFormatUnitUsage<>.rainfall.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void static MeasurementFormatUnitUsage<>.snowfall.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

void static MeasurementFormatUnitUsage<>.food.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static MeasurementFormatUnitUsage<>.personWeight.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static MeasurementFormatUnitUsage<>.wind.getter(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

void static MeasurementFormatUnitUsage<>.barometric.getter(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

void static MeasurementFormatUnitUsage<>.liquid.getter(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

void base witness table accessor for Equatable in MeasurementFormatUnitUsage<A>()
{
}

uint64_t storeEnumTagSinglePayload for MeasurementFormatUnitUsage( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_183243FE0 + 4 * byte_1837C463F[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_183244014 + 4 * byte_1837C463A[v4]))();
}

uint64_t sub_183244014(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18324401C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183244024LL);
  }
  return result;
}

uint64_t sub_183244030(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183244038LL);
  }
  *(_BYTE *)uint64_t result = a2 + 13;
  return result;
}

uint64_t sub_18324403C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183244044(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for MeasurementFormatUnitUsage( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for MeasurementFormatUnitUsage);
}

uint64_t storeEnumTagSinglePayload for MeasurementFormatUnitUsage.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_18324409C + 4 * byte_1837C4644[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1832440BC + 4 * byte_1837C4649[v4]))();
  }
}

_BYTE *sub_18324409C(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1832440BC(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1832440C4(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1832440CC(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1832440D4(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1832440DC(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void base witness table accessor for Equatable in MeasurementFormatUnitUsage<A>.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in MeasurementFormatUnitUsage<A>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in MeasurementFormatUnitUsage<A>.CodingKeys()
{
}

uint64_t URLRequest.init(url:cachePolicy:timeoutInterval:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v5 = (void *)*a1;
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x189601EB0]), sel_initWithURL_cachePolicy_timeoutInterval_, *a1, a2, a4);

  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v6;
  *a3 = result;
  return result;
}

NSURLRequest __swiftcall URLRequest._bridgeToObjectiveC()()
{
  char v2 = v4;
  result._internal = v1;
  result.super.Class isa = v2;
  return result;
}

void *specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v8 = *(void **)(*(void *)a1 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v9 = swift_allocObject();
    swift_retain();
    id v10 = v8;
    objc_msgSend(v10, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v9 + 16) = v15;
    *(void *)a1 = v9;
    swift_release();
  }

  __int128 v11 = *(void **)(*(void *)a1 + 16LL);
  if (a2) {
    id v12 = a2;
  }
  else {
    id v12 = 0LL;
  }
  id v13 = v11;
  objc_msgSend(v13, *a5, v12);

  return outlined consume of URL?(a2);
}

uint64_t specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void **)(*(void *)a1 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v6 = swift_allocObject();
    swift_retain();
    id v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v6 + 16) = v10;
    *(void *)a1 = v6;
    swift_release();
  }

  uint64_t v8 = *(void **)(*(void *)a1 + 16LL);
  objc_msgSend(v8, sel_setHTTPMethod_, String._bridgeToObjectiveCImpl()());
  if (a3) {
    swift_bridgeObjectRelease();
  }

  return swift_unknownObjectRelease();
}

{
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v13;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void **)(*(void *)a1 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v6 = swift_allocObject();
    swift_retain();
    id v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v6 + 16) = v13;
    *(void *)a1 = v6;
    swift_release();
  }

  uint64_t v8 = *(void **)(*(void *)a1 + 16LL);
  if (a3) {
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    uint64_t v9 = 0LL;
  }
  uint64_t v10 = String._bridgeToObjectiveCImpl()();
  __int128 v11 = v8;
  objc_msgSend(v11, sel_setValue_forHTTPHeaderField_, v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

void specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, uint64_t a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = *(void **)(*(void *)a1 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v5 = swift_allocObject();
    swift_retain();
    id v6 = v4;
    objc_msgSend(v6, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v5 + 16) = v9;
    *(void *)a1 = v5;
    swift_release();
  }

  id v7 = *(id *)(*(void *)a1 + 16LL);
  if (a2)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = (void *)_NativeDictionary.bridged()();
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  objc_msgSend(v7, sel_setAllHTTPHeaderFields_, v8);
  swift_bridgeObjectRelease();
}

uint64_t specialized URLRequest._applyMutation<A>(_:)(uint64_t a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    char v2 = *(void **)(*(void *)a1 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v3 = swift_allocObject();
    swift_retain();
    id v4 = v2;
    objc_msgSend(v4, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v3 + 16) = v10;
    *(void *)a1 = v3;
    swift_release();
  }

  uint64_t v5 = *(void **)(*(void *)a1 + 16LL);
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  uint64_t v7 = String._bridgeToObjectiveCImpl()();
  id v8 = v5;
  objc_msgSend(v8, sel_addValue_forHTTPHeaderField_, v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v6 = *(void **)(*(void *)a1 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v7 = swift_allocObject();
    swift_retain();
    id v8 = v6;
    objc_msgSend(v8, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v7 + 16) = v11;
    *(void *)a1 = v7;
    swift_release();
  }

  id v9 = *(id *)(*(void *)a1 + 16LL);
  closure #1 in URLRequest.httpBody.setter(v9, a2, a3);

  return outlined consume of Data?(a2, a3);
}

void specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, void *a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    id v4 = *(void **)(*(void *)a1 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v5 = swift_allocObject();
    swift_retain();
    id v6 = v4;
    objc_msgSend(v6, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v5 + 16) = v7;
    *(void *)a1 = v5;
    swift_release();
  }

  objc_msgSend(*(id *)(*(void *)a1 + 16), sel_setHTTPBodyStream_, a2);
}

void specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void **)(*(void *)a1 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v6 = swift_allocObject();
    swift_retain();
    id v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v6 + 16) = v11;
    *(void *)a1 = v6;
    swift_release();
  }

  id v8 = *(void **)(*(void *)a1 + 16LL);
  if (a3) {
    id v9 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    id v9 = 0LL;
  }
  id v10 = v8;
  objc_msgSend(v10, sel_setCookiePartitionIdentifier_, v9);
  swift_bridgeObjectRelease();
}

void URLRequest.url.getter(uint64_t a1@<X8>)
{
}

void *URLRequest.url.setter(uint64_t a1)
{
  return URLRequest.url.setter(a1, (SEL *)&selRef_setURL_);
}

void *(*URLRequest.url.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  id v3 = *(id *)(*(void *)v1 + 16LL);
  id v4 = [v3 URL];
  if (v4)
  {
    uint64_t v5 = v4;
    URL.init(reference:)(v4, &v9);

    uint64_t v6 = v9;
    __int128 v7 = v10;
  }

  else
  {

    uint64_t v6 = 0LL;
    __int128 v7 = 0uLL;
  }

  *(void *)a1 = v6;
  *(_OWORD *)(a1 + 8) = v7;
  return URLRequest.url.modify;
}

void *URLRequest.url.modify(uint64_t *a1, char a2)
{
  return URLRequest.url.modify(a1, a2, (SEL *)&selRef_setURL_);
}

id URLRequest.cachePolicy.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_cachePolicy);
}

id URLRequest.cachePolicy.setter(uint64_t a1)
{
  return URLRequest.cachePolicy.setter(a1, (SEL *)&selRef_setCachePolicy_);
}

id (*URLRequest.cachePolicy.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_cachePolicy);
  return URLRequest.cachePolicy.modify;
}

id URLRequest.cachePolicy.modify(uint64_t *a1)
{
  return URLRequest.cachePolicy.setter(*a1);
}

id URLRequest.timeoutInterval.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_timeoutInterval);
}

id URLRequest.timeoutInterval.setter(double a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    id v3 = *(void **)(*(void *)v1 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v4 = swift_allocObject();
    swift_retain();
    id v5 = v3;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v4 + 16) = v7;
    *(void *)uint64_t v1 = v4;
    swift_release();
  }

  return objc_msgSend(*(id *)(*(void *)v1 + 16), sel_setTimeoutInterval_, a1);
}

id (*URLRequest.timeoutInterval.modify(void *a1))(double *a1)
{
  a1[1] = v1;
  objc_msgSend(*(id *)(*(void *)v1 + 16), sel_timeoutInterval);
  *a1 = v3;
  return URLRequest.timeoutInterval.modify;
}

id URLRequest.timeoutInterval.modify(double *a1)
{
  return URLRequest.timeoutInterval.setter(*a1);
}

void URLRequest.mainDocumentURL.getter(uint64_t a1@<X8>)
{
}

void URLRequest.url.getter(SEL *a1@<X0>, uint64_t a2@<X8>)
{
  id v5 = *(id *)(*(void *)v2 + 16LL);
  id v6 = [v5 *a1];
  if (v6)
  {
    uint64_t v7 = v6;
    URL.init(reference:)(v6, &v10);

    uint64_t v8 = v10;
    __int128 v9 = v11;
  }

  else
  {

    uint64_t v8 = 0LL;
    __int128 v9 = 0uLL;
  }

  *(void *)a2 = v8;
  *(_OWORD *)(a2 + 8) = v9;
}

void *URLRequest.mainDocumentURL.setter(uint64_t a1)
{
  return URLRequest.url.setter(a1, (SEL *)&selRef_setMainDocumentURL_);
}

void *URLRequest.url.setter(uint64_t a1, SEL *a2)
{
  return specialized URLRequest._applyMutation<A>(_:)(v2, *(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), a2);
}

void *(*URLRequest.mainDocumentURL.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  id v3 = *(id *)(*(void *)v1 + 16LL);
  id v4 = objc_msgSend(v3, sel_mainDocumentURL);
  if (v4)
  {
    id v5 = v4;
    URL.init(reference:)(v4, &v9);

    uint64_t v6 = v9;
    __int128 v7 = v10;
  }

  else
  {

    uint64_t v6 = 0LL;
    __int128 v7 = 0uLL;
  }

  *(void *)a1 = v6;
  *(_OWORD *)(a1 + 8) = v7;
  return URLRequest.mainDocumentURL.modify;
}

void *URLRequest.mainDocumentURL.modify(uint64_t *a1, char a2)
{
  return URLRequest.url.modify(a1, a2, (SEL *)&selRef_setMainDocumentURL_);
}

void *URLRequest.url.modify(uint64_t *a1, char a2, SEL *a3)
{
  id v4 = (void *)*a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  if ((a2 & 1) == 0) {
    return specialized URLRequest._applyMutation<A>(_:)(a1[3], v4, v5, v6, a3);
  }
  outlined copy of URL?(*a1);
  specialized URLRequest._applyMutation<A>(_:)(v7, v4, v5, v6, a3);
  return outlined consume of URL?(v4);
}

id URLRequest.networkServiceType.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_networkServiceType);
}

id URLRequest.networkServiceType.setter(uint64_t a1)
{
  return URLRequest.cachePolicy.setter(a1, (SEL *)&selRef_setNetworkServiceType_);
}

id URLRequest.cachePolicy.setter(uint64_t a1, SEL *a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void **)(*(void *)v2 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v6 = swift_allocObject();
    swift_retain();
    id v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v6 + 16) = v9;
    *(void *)uint64_t v2 = v6;
    swift_release();
  }

  return objc_msgSend(*(id *)(*(void *)v2 + 16), *a2, a1);
}

id (*URLRequest.networkServiceType.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_networkServiceType);
  return URLRequest.networkServiceType.modify;
}

id URLRequest.networkServiceType.modify(uint64_t *a1)
{
  return URLRequest.networkServiceType.setter(*a1);
}

id URLRequest.allowsCellularAccess.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_allowsCellularAccess);
}

id URLRequest.allowsCellularAccess.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAllowsCellularAccess_);
}

id (*URLRequest.allowsCellularAccess.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_allowsCellularAccess);
  return URLRequest.allowsCellularAccess.modify;
}

id URLRequest.allowsCellularAccess.modify(uint64_t a1)
{
  return URLRequest.allowsCellularAccess.setter(*(_BYTE *)(a1 + 8));
}

id URLRequest.allowsExpensiveNetworkAccess.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_allowsExpensiveNetworkAccess);
}

id URLRequest.allowsExpensiveNetworkAccess.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAllowsExpensiveNetworkAccess_);
}

id URLRequest.allowsCellularAccess.setter(char a1, SEL *a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void **)(*(void *)v2 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v6 = swift_allocObject();
    swift_retain();
    id v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v6 + 16) = v9;
    *(void *)uint64_t v2 = v6;
    swift_release();
  }

  return objc_msgSend(*(id *)(*(void *)v2 + 16), *a2, a1 & 1);
}

id (*URLRequest.allowsExpensiveNetworkAccess.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_allowsExpensiveNetworkAccess);
  return URLRequest.allowsExpensiveNetworkAccess.modify;
}

id URLRequest.allowsExpensiveNetworkAccess.modify(uint64_t a1)
{
  return URLRequest.allowsExpensiveNetworkAccess.setter(*(_BYTE *)(a1 + 8));
}

id URLRequest.allowsConstrainedNetworkAccess.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_allowsConstrainedNetworkAccess);
}

id URLRequest.allowsConstrainedNetworkAccess.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAllowsConstrainedNetworkAccess_);
}

id (*URLRequest.allowsConstrainedNetworkAccess.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_allowsConstrainedNetworkAccess);
  return URLRequest.allowsConstrainedNetworkAccess.modify;
}

id URLRequest.allowsConstrainedNetworkAccess.modify(uint64_t a1)
{
  return URLRequest.allowsConstrainedNetworkAccess.setter(*(_BYTE *)(a1 + 8));
}

id URLRequest.assumesHTTP3Capable.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_assumesHTTP3Capable);
}

id URLRequest.assumesHTTP3Capable.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAssumesHTTP3Capable_);
}

id (*URLRequest.assumesHTTP3Capable.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_assumesHTTP3Capable);
  return URLRequest.assumesHTTP3Capable.modify;
}

id URLRequest.assumesHTTP3Capable.modify(uint64_t a1)
{
  return URLRequest.assumesHTTP3Capable.setter(*(_BYTE *)(a1 + 8));
}

id URLRequest.attribution.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_attribution);
}

id URLRequest.attribution.setter(uint64_t a1)
{
  return URLRequest.cachePolicy.setter(a1, (SEL *)&selRef_setAttribution_);
}

id (*URLRequest.attribution.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_attribution);
  return URLRequest.attribution.modify;
}

id URLRequest.attribution.modify(uint64_t *a1)
{
  return URLRequest.attribution.setter(*a1);
}

id URLRequest.requiresDNSSECValidation.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_requiresDNSSECValidation);
}

id URLRequest.requiresDNSSECValidation.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setRequiresDNSSECValidation_);
}

id (*URLRequest.requiresDNSSECValidation.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_requiresDNSSECValidation);
  return URLRequest.requiresDNSSECValidation.modify;
}

id URLRequest.requiresDNSSECValidation.modify(uint64_t a1)
{
  return URLRequest.requiresDNSSECValidation.setter(*(_BYTE *)(a1 + 8));
}

id URLRequest.allowsPersistentDNS.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_allowsPersistentDNS);
}

id URLRequest.allowsPersistentDNS.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAllowsPersistentDNS_);
}

id (*URLRequest.allowsPersistentDNS.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_allowsPersistentDNS);
  return URLRequest.allowsPersistentDNS.modify;
}

id URLRequest.allowsPersistentDNS.modify(uint64_t a1)
{
  return URLRequest.allowsPersistentDNS.setter(*(_BYTE *)(a1 + 8));
}

id URLRequest.httpMethod.getter()
{
  id v1 = *(id *)(*(void *)v0 + 16LL);
  id v2 = objc_msgSend(v1, sel_HTTPMethod);
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

void key path getter for URLRequest.httpMethod : URLRequest(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v3 = *(void **)(*(void *)a1 + 16LL);
  swift_retain();
  id v4 = v3;
  id v5 = objc_msgSend(v4, sel_HTTPMethod);
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;
  swift_release();

  *a2 = v6;
  a2[1] = v8;
}

uint64_t URLRequest.httpMethod.setter(uint64_t a1, uint64_t a2)
{
  return specialized URLRequest._applyMutation<A>(_:)(v2, a1, a2);
}

uint64_t (*URLRequest.httpMethod.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16LL);
  id v4 = objc_msgSend(v3, sel_HTTPMethod);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  *a1 = v5;
  a1[1] = v7;
  return URLRequest.httpMethod.modify;
}

uint64_t URLRequest.httpMethod.modify(uint64_t *a1, char a2)
{
  return URLRequest.httpMethod.modify(a1, a2, specialized URLRequest._applyMutation<A>(_:));
}

uint64_t URLRequest.allHTTPHeaderFields.getter()
{
  id v1 = *(id *)(*(void *)v0 + 16LL);
  id v2 = objc_msgSend(v1, sel_allHTTPHeaderFields);
  if (!v2)
  {

    return 0LL;
  }

  id v3 = v2;
  if (MEMORY[0x18961AFC0] + 8LL != MEMORY[0x189617FA8])
  {
    swift_unknownObjectRetain();
    id v4 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v4) {
      goto LABEL_37;
    }
    id v12 = objc_msgSend(v3, sel_count);
    if (!v12) {
      goto LABEL_36;
    }
    uint64_t v13 = (uint64_t)v12;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    id v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v14 = (char *)v4[6];
    uint64_t v15 = v4[7];
    swift_retain();
    uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v14,  v15,  v3,  v13);
    if (result < 0 || v13 < result) {
      goto LABEL_42;
    }
    v4[2] = result;
    if (!result) {
      goto LABEL_35;
    }
    uint64_t v16 = result - 1;
    int v17 = v4 + 8;
    while (1)
    {
      __int128 v41 = (uint64_t *)(v4[6] + 16 * v16);
      uint64_t v42 = *v41;
      uint64_t v43 = v41[1];
      swift_bridgeObjectRetain();
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
      char v46 = v45;
      swift_bridgeObjectRelease();
      if ((v46 & 1) != 0)
      {
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v47 = v4[2];
        BOOL v29 = __OFSUB__(v47, 1LL);
        uint64_t v48 = v47 - 1;
        if (v29) {
          goto LABEL_40;
        }
        v4[2] = v48;
        goto LABEL_27;
      }

      *(void *)((char *)v17 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v44;
      if (v16 < (uint64_t)v44)
      {
        uint64_t v40 = 16 * v44;
        *(_OWORD *)(v4[6] + v40) = *(_OWORD *)(v4[6] + 16 * v16);
        *(_OWORD *)(v4[7] + v40) = *(_OWORD *)(v4[7] + 16 * v16);
LABEL_27:
        if (--v16 < 0) {
          goto LABEL_35;
        }
      }

      else
      {
        if (v44 == v16) {
          goto LABEL_27;
        }
        uint64_t v49 = v4[6];
        __int16 v50 = (uint64_t *)(v49 + 16 * v44);
        __int128 v51 = (uint64_t *)(v49 + 16 * v16);
        uint64_t v52 = *v50;
        uint64_t v53 = v50[1];
        uint64_t v54 = v51[1];
        *__int16 v50 = *v51;
        v50[1] = v54;
        *__int128 v51 = v52;
        v51[1] = v53;
        uint64_t v55 = v4[7];
        unint64_t v56 = (uint64_t *)(v55 + 16 * v44);
        int v57 = (uint64_t *)(v55 + 16 * v16);
        uint64_t v58 = *v56;
        uint64_t v59 = v56[1];
        uint64_t v60 = v57[1];
        *unint64_t v56 = *v57;
        v56[1] = v60;
        uint64_t *v57 = v58;
        v57[1] = v59;
        if (v16 < 0) {
          goto LABEL_35;
        }
      }
    }
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  id v4 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4)
  {
LABEL_37:

    return (uint64_t)v4;
  }

  id v5 = objc_msgSend(v3, sel_count);
  if (!v5)
  {
LABEL_36:
    id v4 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_37;
  }

  uint64_t v6 = (uint64_t)v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  id v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v4[6];
  uint64_t v8 = v4[7];
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v7, v8, v3, v6);
  if (result < 0 || v6 < result) {
    goto LABEL_41;
  }
  v4[2] = result;
  if (!result)
  {
LABEL_35:
    swift_release();
    goto LABEL_37;
  }

  uint64_t v10 = result - 1;
  __int128 v11 = v4 + 8;
  while (1)
  {
    int v22 = (uint64_t *)(v4[6] + 16 * v10);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    swift_bridgeObjectRetain();
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
    char v27 = v26;
    swift_bridgeObjectRelease();
    if ((v27 & 1) != 0) {
      break;
    }
    *(void *)((char *)v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    if (v10 < (uint64_t)v25)
    {
      *(_OWORD *)(v4[6] + 16 * v25) = *(_OWORD *)(v4[6] + 16 * v10);
      uint64_t v18 = v4[7];
      uint64_t v19 = (_OWORD *)(v18 + 32 * v10);
      __int128 v20 = v19[1];
      uint64_t v21 = (_OWORD *)(v18 + 32 * v25);
      *uint64_t v21 = *v19;
      v21[1] = v20;
LABEL_17:
      if (--v10 < 0) {
        goto LABEL_35;
      }
    }

    else
    {
      if (v25 == v10) {
        goto LABEL_17;
      }
      uint64_t v31 = v4[6];
      __int128 v32 = (uint64_t *)(v31 + 16 * v25);
      uint64_t v33 = (uint64_t *)(v31 + 16 * v10);
      uint64_t v34 = *v32;
      uint64_t v35 = v32[1];
      uint64_t v36 = v33[1];
      *__int128 v32 = *v33;
      v32[1] = v36;
      *uint64_t v33 = v34;
      v33[1] = v35;
      uint64_t v37 = v4[7];
      __int128 v38 = (_OWORD *)(v37 + 32 * v25);
      __int128 v39 = (_OWORD *)(v37 + 32 * v10);
      outlined init with take of Any(v38, v61);
      outlined init with take of Any(v39, v38);
      outlined init with take of Any(v61, v39);
      if (v10 < 0) {
        goto LABEL_35;
      }
    }
  }

  swift_arrayDestroy();
  uint64_t result = swift_arrayDestroy();
  uint64_t v28 = v4[2];
  BOOL v29 = __OFSUB__(v28, 1LL);
  uint64_t v30 = v28 - 1;
  if (!v29)
  {
    v4[2] = v30;
    goto LABEL_17;
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void key path getter for URLRequest.allHTTPHeaderFields : URLRequest(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *(id *)(*(void *)a1 + 16LL);
  swift_retain();
  id v4 = objc_msgSend(v3, sel_allHTTPHeaderFields);
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4);
    swift_release();
  }

  else
  {
    swift_release();

    uint64_t v6 = 0LL;
  }

  *a2 = v6;
}

void URLRequest.allHTTPHeaderFields.setter(uint64_t a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    id v3 = *(void **)(*(void *)v1 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v4 = swift_allocObject();
    swift_retain();
    id v5 = v3;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v4 + 16) = v8;
    *(void *)uint64_t v1 = v4;
    swift_release();
  }

  id v6 = *(id *)(*(void *)v1 + 16LL);
  if (a1)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = (void *)_NativeDictionary.bridged()();
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  objc_msgSend(v6, sel_setAllHTTPHeaderFields_, v7);
  swift_bridgeObjectRelease();
}

uint64_t URLRequest.allHTTPHeaderFields.modify(void *a1)
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  *((void *)v3 + 6) = v1;
  id v4 = *(id *)(*(void *)v1 + 16LL);
  id v5 = objc_msgSend(v4, sel_allHTTPHeaderFields);
  if (!v5)
  {
    uint64_t v7 = 0LL;
LABEL_40:

    *((void *)v3 + 4) = v7;
    return (uint64_t)URLRequest.allHTTPHeaderFields.modify;
  }

  id v6 = v5;
  if (MEMORY[0x18961AFC0] + 8LL != MEMORY[0x189617FA8])
  {
    swift_unknownObjectRetain();
    uint64_t v7 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (!v7)
    {
      id v39 = objc_msgSend(v6, sel_count);
      if (v39)
      {
        uint64_t v40 = (uint64_t)v39;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
        uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
        id v69 = v6;
        __int128 v41 = (char *)v7[6];
        uint64_t v42 = v7[7];
        swift_retain();
        uint64_t v43 = v42;
        id v6 = v69;
        uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v41,  v43,  v69,  v40);
        if (result < 0) {
          goto LABEL_44;
        }
        unint64_t v44 = result;
        if (v40 < result) {
          goto LABEL_44;
        }
        void v7[2] = result;
        if (result)
        {
          id v68 = v4;
          char v45 = v7 + 8;
          while (2)
          {
            uint64_t v47 = v44--;
            while (((1LL << v44) & v45[v44 >> 6]) == 0)
            {
              uint64_t v48 = (uint64_t *)(v7[6] + 16 * v44);
              uint64_t v49 = *v48;
              uint64_t v50 = v48[1];
              swift_bridgeObjectRetain();
              unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
              char v53 = v52;
              swift_bridgeObjectRelease();
              if ((v53 & 1) != 0)
              {
                swift_arrayDestroy();
                uint64_t result = swift_arrayDestroy();
                uint64_t v66 = v7[2];
                BOOL v37 = __OFSUB__(v66, 1LL);
                uint64_t v67 = v66 - 1;
                if (v37) {
                  goto LABEL_42;
                }
                void v7[2] = v67;
                break;
              }

              *(void *)((char *)v45 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v51;
              if (v47 <= (uint64_t)v51)
              {
                uint64_t v46 = 16 * v51;
                *(_OWORD *)(v7[6] + outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v42, v46) = *(_OWORD *)(v7[6] + 16 * v44);
                *(_OWORD *)(v7[7] + outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v42, v46) = *(_OWORD *)(v7[7] + 16 * v44);
                break;
              }

              if (v51 == v44) {
                break;
              }
              uint64_t v54 = v7[6];
              uint64_t v55 = (uint64_t *)(v54 + 16 * v51);
              unint64_t v56 = (uint64_t *)(v54 + 16 * v44);
              uint64_t v57 = *v55;
              uint64_t v58 = v55[1];
              uint64_t v59 = v56[1];
              *uint64_t v55 = *v56;
              v55[1] = v59;
              *unint64_t v56 = v57;
              v56[1] = v58;
              uint64_t v60 = v7[7];
              int64_t v61 = (uint64_t *)(v60 + 16 * v51);
              uint64_t v62 = (uint64_t *)(v60 + 16 * v44);
              uint64_t v63 = *v61;
              uint64_t v64 = v61[1];
              uint64_t v65 = v62[1];
              *int64_t v61 = *v62;
              v61[1] = v65;
              *uint64_t v62 = v63;
              v62[1] = v64;
            }

            if (v47 >= 2) {
              continue;
            }
            break;
          }

void URLRequest.allHTTPHeaderFields.modify(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 32LL);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v4 = v2[6];
      id v5 = *(void **)(*(void *)v4 + 16LL);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
      uint64_t v6 = swift_allocObject();
      swift_retain();
      id v7 = v5;
      objc_msgSend(v7, sel_copy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
      swift_dynamicCast();
      uint64_t v8 = v2[5];
      swift_release();

      *(void *)(v6 + 16) = v8;
      *(void *)uint64_t v4 = v6;
      swift_release();
    }

    uint64_t v9 = *(void **)(*(void *)v2[6] + 16LL);
    if (v3)
    {
      swift_bridgeObjectRetain();
      id v10 = v9;
      uint64_t v11 = (void *)_NativeDictionary.bridged()();
    }

    else
    {
      id v20 = v9;
      uint64_t v11 = 0LL;
    }

    objc_msgSend(v9, sel_setAllHTTPHeaderFields_, v11);

    swift_bridgeObjectRelease();
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v12 = v2[6];
      uint64_t v13 = *(void **)(*(void *)v12 + 16LL);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
      uint64_t v14 = swift_allocObject();
      swift_retain();
      id v15 = v13;
      objc_msgSend(v15, sel_copy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
      swift_dynamicCast();
      uint64_t v16 = v2[5];
      swift_release();

      *(void *)(v14 + 16) = v16;
      *(void *)uint64_t v12 = v14;
      swift_release();
    }

    int v17 = *(void **)(*(void *)v2[6] + 16LL);
    id v18 = v17;
    if (v3)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = (void *)_NativeDictionary.bridged()();
    }

    else
    {
      uint64_t v19 = 0LL;
    }

    objc_msgSend(v17, sel_setAllHTTPHeaderFields_, v19);
  }

  swift_bridgeObjectRelease();
  free(v2);
}

Swift::String_optional __swiftcall URLRequest.value(forHTTPHeaderField:)(Swift::String forHTTPHeaderField)
{
  id v2 = *(void **)(*(void *)v1 + 16LL);
  uint64_t v3 = String._bridgeToObjectiveCImpl()();
  id v4 = v2;
  id v5 = objc_msgSend(v4, sel_valueForHTTPHeaderField_, v3);
  swift_unknownObjectRelease();
  if (v5)
  {
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v8 = v7;
  }

  else
  {

    id v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  uint64_t v9 = (uint64_t)v6;
  id v10 = v8;
  result.value._unint64_t object = v10;
  result.value._uint64_t countAndFlagsBits = v9;
  return result;
}

Swift::Void __swiftcall URLRequest.setValue(_:forHTTPHeaderField:)( Swift::String_optional _, Swift::String forHTTPHeaderField)
{
  unint64_t object = _.value._object;
  uint64_t countAndFlagsBits = _.value._countAndFlagsBits;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized URLRequest._applyMutation<A>(_:)(v2, countAndFlagsBits, (uint64_t)object);
}

Swift::Void __swiftcall URLRequest.addValue(_:forHTTPHeaderField:)(Swift::String _, Swift::String forHTTPHeaderField)
{
}

id URLRequest.httpBody.getter()
{
  id v1 = *(id *)(*(void *)v0 + 16LL);
  id v2 = objc_msgSend(v1, sel_HTTPBody);
  if (v2)
  {
    id v3 = v2;
    id v4 = specialized Data.init(referencing:)(v3);
  }

  else
  {

    return 0LL;
  }

  return v4;
}

void key path getter for URLRequest.httpBody : URLRequest(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v3 = *(id *)(*(void *)a1 + 16LL);
  swift_retain();
  id v4 = objc_msgSend(v3, sel_HTTPBody);
  if (v4)
  {
    id v5 = v4;
    id v6 = specialized Data.init(referencing:)(v5);
    unint64_t v8 = v7;
    swift_release();
  }

  else
  {
    swift_release();

    id v6 = 0LL;
    unint64_t v8 = 0xF000000000000000LL;
  }

  *a2 = v6;
  a2[1] = v8;
}

uint64_t URLRequest.httpBody.setter(uint64_t a1, unint64_t a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    id v5 = *(void **)(*(void *)v2 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v6 = swift_allocObject();
    swift_retain();
    id v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v6 + 16) = v10;
    *(void *)uint64_t v2 = v6;
    swift_release();
  }

  id v8 = *(id *)(*(void *)v2 + 16LL);
  closure #1 in URLRequest.httpBody.setter(v8, a1, a2);

  return outlined consume of Data?(a1, a2);
}

void closure #1 in URLRequest.httpBody.setter(id a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    __asm { BR              X10 }
  }

  objc_msgSend(a1, sel_setHTTPBody_, 0);
}

uint64_t (*URLRequest.httpBody.modify(void *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16LL);
  id v4 = objc_msgSend(v3, sel_HTTPBody);
  if (v4)
  {
    id v5 = v4;
    id v6 = specialized Data.init(referencing:)(v5);
    unint64_t v8 = v7;
  }

  else
  {

    id v6 = 0LL;
    unint64_t v8 = 0xF000000000000000LL;
  }

  *a1 = v6;
  a1[1] = v8;
  return URLRequest.httpBody.modify;
}

uint64_t URLRequest.httpBody.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if ((a2 & 1) == 0) {
    return specialized URLRequest._applyMutation<A>(_:)(*(void *)(a1 + 16), *(void *)a1, *(void *)(a1 + 8));
  }
  outlined copy of Data?(*(void *)a1, v3);
  specialized URLRequest._applyMutation<A>(_:)(v4, v2, v3);
  return outlined consume of Data?(v2, v3);
}

id URLRequest.httpBodyStream.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_HTTPBodyStream);
}

void URLRequest.httpBodyStream.setter(void *a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    unint64_t v3 = *(void **)(*(void *)v1 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v4 = swift_allocObject();
    swift_retain();
    id v5 = v3;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v4 + 16) = v6;
    *(void *)uint64_t v1 = v4;
    swift_release();
  }

  objc_msgSend(*(id *)(*(void *)v1 + 16), sel_setHTTPBodyStream_, a1);
}

void (*URLRequest.httpBodyStream.modify(void *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_HTTPBodyStream);
  return URLRequest.httpBodyStream.modify;
}

void URLRequest.httpBodyStream.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    id v4 = v2;
    specialized URLRequest._applyMutation<A>(_:)(v3, v2);
  }

  else
  {
    specialized URLRequest._applyMutation<A>(_:)(*(void *)(a1 + 8), *(void **)a1);
  }

id URLRequest.httpShouldHandleCookies.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_HTTPShouldHandleCookies);
}

id URLRequest.httpShouldHandleCookies.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setHTTPShouldHandleCookies_);
}

id (*URLRequest.httpShouldHandleCookies.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_HTTPShouldHandleCookies);
  return URLRequest.httpShouldHandleCookies.modify;
}

id URLRequest.httpShouldHandleCookies.modify(uint64_t a1)
{
  return URLRequest.httpShouldHandleCookies.setter(*(_BYTE *)(a1 + 8));
}

id URLRequest.cookiePartitionIdentifier.getter()
{
  id v1 = *(id *)(*(void *)v0 + 16LL);
  id v2 = objc_msgSend(v1, sel_cookiePartitionIdentifier);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  else
  {

    return 0LL;
  }

  return v4;
}

void key path getter for URLRequest.cookiePartitionIdentifier : URLRequest(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v3 = *(id *)(*(void *)a1 + 16LL);
  swift_retain();
  id v4 = objc_msgSend(v3, sel_cookiePartitionIdentifier);
  if (v4)
  {
    id v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
    swift_release();
  }

  else
  {
    swift_release();

    id v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  *a2 = v6;
  a2[1] = v8;
}

void URLRequest.cookiePartitionIdentifier.setter(uint64_t a1, uint64_t a2)
{
}

uint64_t (*URLRequest.cookiePartitionIdentifier.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16LL);
  id v4 = objc_msgSend(v3, sel_cookiePartitionIdentifier);
  if (v4)
  {
    id v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }

  else
  {

    id v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  *a1 = v6;
  a1[1] = v8;
  return URLRequest.cookiePartitionIdentifier.modify;
}

uint64_t URLRequest.cookiePartitionIdentifier.modify(uint64_t *a1, char a2)
{
  return URLRequest.httpMethod.modify( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized URLRequest._applyMutation<A>(_:));
}

uint64_t URLRequest.httpMethod.modify( uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  if ((a2 & 1) == 0) {
    return a3(a1[2], *a1, a1[1]);
  }
  swift_bridgeObjectRetain();
  a3(v5, v4, v3);
  return swift_bridgeObjectRelease();
}

id URLRequest.httpShouldUsePipelining.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_HTTPShouldUsePipelining);
}

id URLRequest.httpShouldUsePipelining.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setHTTPShouldUsePipelining_);
}

id (*URLRequest.httpShouldUsePipelining.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_HTTPShouldUsePipelining);
  return URLRequest.httpShouldUsePipelining.modify;
}

id URLRequest.httpShouldUsePipelining.modify(uint64_t a1)
{
  return URLRequest.httpShouldUsePipelining.setter(*(_BYTE *)(a1 + 8));
}

void URLRequest.hash(into:)()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 16LL);
  swift_retain();
  id v2 = v1;
  NSObject.hash(into:)();
  swift_release();
}

id static URLRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(void *)a1 + 16), sel_isEqual_, *(void *)(*(void *)a2 + 16));
}

Swift::Int URLRequest.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URLRequest()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t URLRequest.description.getter()
{
  id v1 = *(id *)(*(void *)v0 + 16LL);
  swift_retain();
  id v2 = [v1 URL];
  if (v2)
  {
    uint64_t v3 = v2;
    URL.init(reference:)(v2, &v7);
    swift_release();

    uint64_t v4 = v7;
    uint64_t v5 = URL.description.getter();

    swift_release();
    swift_release();
  }

  else
  {
    swift_release();

    return 0x6C696E203A6C7275LL;
  }

  return v5;
}

uint64_t URLRequest.debugDescription.getter()
{
  return URLRequest.description.getter();
}

uint64_t URLRequest.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v115 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v113 = *(void *)(v115 - 8);
  MEMORY[0x1895F8858](v115);
  uint64_t v116 = (char *)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v4);
  __int128 v114 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1837C4880;
  *(_OWORD *)(v7 + 32) = xmmword_1837C4890;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(void *)(v7 + 72) = v8;
  id v9 = *(id *)(v6 + 16);
  swift_retain();
  id v10 = [v9 URL];
  if (v10)
  {
    uint64_t v11 = v10;
    URL.init(reference:)(v10, &v117);

    uint64_t v12 = v117;
    __int128 v13 = v118;
  }

  else
  {

    uint64_t v12 = 0LL;
    __int128 v13 = 0uLL;
  }

  *(void *)(v7 + 48) = v12;
  *(_OWORD *)(v7 + 56) = v13;
  swift_release();
  *(_OWORD *)(v7 + 80) = xmmword_1837C48A0;
  id v14 = objc_msgSend(*(id *)(v6 + 16), sel_cachePolicy);
  *(void *)(v7 + 120) = MEMORY[0x189618CD8];
  *(void *)(v7 + 96) = v14;
  *(_OWORD *)(v7 + 128) = xmmword_1837C48B0;
  objc_msgSend(*(id *)(v6 + 16), sel_timeoutInterval);
  *(void *)(v7 + 168) = MEMORY[0x189618560];
  *(void *)(v7 + 144) = v15;
  *(_OWORD *)(v7 + 176) = xmmword_1837C48C0;
  *(void *)(v7 + 216) = v8;
  uint64_t v16 = *(void **)(v6 + 16);
  swift_retain();
  id v17 = v16;
  id v18 = objc_msgSend(v17, sel_mainDocumentURL);
  if (v18)
  {
    uint64_t v19 = v18;
    URL.init(reference:)(v18, &v117);

    uint64_t v20 = v117;
    __int128 v21 = v118;
  }

  else
  {

    uint64_t v20 = 0LL;
    __int128 v21 = 0uLL;
  }

  *(void *)(v7 + 192) = v20;
  *(_OWORD *)(v7 + 200) = v21;
  swift_release();
  *(void *)(v7 + 224) = 0xD000000000000012LL;
  *(void *)(v7 + 232) = 0x80000001839CE6B0LL;
  id v22 = objc_msgSend(*(id *)(v6 + 16), sel_networkServiceType);
  type metadata accessor for NSURLRequestNetworkServiceType(0LL);
  *(void *)(v7 + 240) = v22;
  *(void *)(v7 + 264) = v23;
  *(void *)(v7 + 272) = 0xD000000000000014LL;
  *(void *)(v7 + 280) = 0x80000001839CE6D0LL;
  unsigned __int8 v24 = objc_msgSend(*(id *)(v6 + 16), sel_allowsCellularAccess);
  *(void *)(v7 + 312) = MEMORY[0x1896184C8];
  *(_BYTE *)(v7 + 288) = v24;
  *(_OWORD *)(v7 + 320) = xmmword_1837C48D0;
  char v25 = *(void **)(v6 + 16);
  swift_retain();
  id v26 = v25;
  id v27 = objc_msgSend(v26, sel_HTTPMethod);
  id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  uint64_t v30 = v29;
  swift_release();

  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v7 + 336) = v28;
  *(void *)(v7 + 344) = v30;
  *(void *)(v7 + 360) = v31;
  *(void *)(v7 + 368) = 0xD000000000000013LL;
  *(void *)(v7 + 376) = 0x80000001839CE6F0LL;
  uint64_t v32 = *(void **)(v6 + 16);
  swift_retain();
  id v33 = v32;
  id v34 = objc_msgSend(v33, sel_allHTTPHeaderFields);
  if (!v34)
  {
    swift_release();

    BOOL v37 = 0LL;
LABEL_45:
    *(void *)(v7 + 408) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]?);
    *(void *)(v7 + 384) = v37;
    *(_OWORD *)(v7 + 416) = xmmword_1837C48E0;
    uint64_t v94 = *(void **)(v6 + 16);
    swift_retain();
    id v95 = v94;
    id v96 = objc_msgSend(v95, sel_HTTPBody);
    if (v96)
    {
      id v97 = v96;
      id v98 = specialized Data.init(referencing:)(v97);
      unint64_t v100 = v99;
      swift_release();
    }

    else
    {
      swift_release();

      id v98 = 0LL;
      unint64_t v100 = 0xF000000000000000LL;
    }

    *(void *)(v7 + 456) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    *(void *)(v7 + 432) = v98;
    *(void *)(v7 + 440) = v100;
    *(_OWORD *)(v7 + 464) = xmmword_1837C48F0;
    id v101 = objc_msgSend(*(id *)(v6 + 16), sel_HTTPBodyStream);
    uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSInputStream?);
    *(void *)(v7 + 480) = v101;
    *(void *)(v7 + 504) = v102;
    *(void *)(v7 + 512) = 0xD000000000000017LL;
    *(void *)(v7 + 520) = 0x80000001839CE710LL;
    unsigned __int8 v103 = objc_msgSend(*(id *)(v6 + 16), sel_HTTPShouldHandleCookies);
    uint64_t v104 = MEMORY[0x1896184C8];
    *(void *)(v7 + 552) = MEMORY[0x1896184C8];
    *(_BYTE *)(v7 + 528) = v103;
    *(void *)(v7 + 560) = 0xD000000000000017LL;
    *(void *)(v7 + 568) = 0x80000001839CE730LL;
    unsigned __int8 v105 = objc_msgSend(*(id *)(v6 + 16), sel_HTTPShouldUsePipelining);
    *(void *)(v7 + 600) = v104;
    *(_BYTE *)(v7 + 576) = v105;
    uint64_t v117 = v6;
    uint64_t v119 = v7;
    uint64_t v106 = *MEMORY[0x18961A718];
    uint64_t v107 = type metadata accessor for Mirror.DisplayStyle();
    uint64_t v108 = *(void *)(v107 - 8);
    int v109 = v114;
    (*(void (**)(char *, uint64_t, uint64_t))(v108 + 104))(v114, v106, v107);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56))(v109, 0LL, 1LL, v107);
    (*(void (**)(char *, void, uint64_t))(v113 + 104))(v116, *MEMORY[0x18961A748], v115);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
    lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
    return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
  }

  uint64_t v35 = v34;
  uint64_t v36 = MEMORY[0x18961AFC0];
  if (MEMORY[0x18961AFC0] + 8LL != MEMORY[0x189617FA8])
  {
    swift_unknownObjectRetain();
    BOOL v37 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v37) {
      goto LABEL_44;
    }
    id v45 = objc_msgSend(v35, sel_count);
    if (!v45) {
      goto LABEL_42;
    }
    uint64_t v46 = (uint64_t)v45;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    BOOL v37 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v47 = (char *)v37[6];
    uint64_t v48 = v37[7];
    swift_retain();
    uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v47,  v48,  v35,  v46);
    if (result < 0 || v46 < result) {
      goto LABEL_53;
    }
    v37[2] = result;
    if (!result) {
      goto LABEL_43;
    }
    uint64_t v111 = a1;
    uint64_t v49 = result - 1;
    uint64_t v50 = v37 + 8;
    while (1)
    {
      id v74 = (uint64_t *)(v37[6] + 16 * v49);
      uint64_t v75 = *v74;
      uint64_t v76 = v74[1];
      swift_bridgeObjectRetain();
      unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v75, v76);
      char v79 = v78;
      swift_bridgeObjectRelease();
      if ((v79 & 1) != 0)
      {
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v80 = v37[2];
        BOOL v62 = __OFSUB__(v80, 1LL);
        uint64_t v81 = v80 - 1;
        if (v62) {
          goto LABEL_51;
        }
        v37[2] = v81;
        goto LABEL_33;
      }

      *(void *)((char *)v50 + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v77;
      if (v49 < (uint64_t)v77)
      {
        uint64_t v73 = 16 * v77;
        *(_OWORD *)(v37[6] + v73) = *(_OWORD *)(v37[6] + 16 * v49);
        *(_OWORD *)(v37[7] + v73) = *(_OWORD *)(v37[7] + 16 * v49);
LABEL_33:
        if (--v49 < 0) {
          goto LABEL_43;
        }
      }

      else
      {
        if (v77 == v49) {
          goto LABEL_33;
        }
        uint64_t v82 = v37[6];
        id v83 = (uint64_t *)(v82 + 16 * v77);
        Swift::UInt v84 = (uint64_t *)(v82 + 16 * v49);
        uint64_t v85 = *v83;
        uint64_t v86 = v83[1];
        uint64_t v87 = v84[1];
        uint64_t *v83 = *v84;
        v83[1] = v87;
        *Swift::UInt v84 = v85;
        v84[1] = v86;
        uint64_t v88 = v37[7];
        uint64_t v89 = (uint64_t *)(v88 + 16 * v77);
        uint64_t v90 = (uint64_t *)(v88 + 16 * v49);
        uint64_t v91 = *v89;
        uint64_t v92 = v89[1];
        uint64_t v93 = v90[1];
        *uint64_t v89 = *v90;
        v89[1] = v93;
        *uint64_t v90 = v91;
        v90[1] = v92;
        if (v49 < 0) {
          goto LABEL_43;
        }
      }
    }
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  BOOL v37 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v37)
  {
LABEL_44:
    swift_release();

    goto LABEL_45;
  }

  id v38 = objc_msgSend(v35, sel_count);
  if (!v38)
  {
LABEL_42:
    BOOL v37 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_44;
  }

  uint64_t v39 = (uint64_t)v38;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  BOOL v37 = (void *)static _DictionaryStorage.allocate(capacity:)();
  __int128 v41 = (void *)v37[6];
  uint64_t v40 = v37[7];
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v41,  v40,  v35,  v39);
  if (result < 0 || v39 < result) {
    goto LABEL_52;
  }
  v37[2] = result;
  if (!result)
  {
LABEL_43:
    swift_release();
    goto LABEL_44;
  }

  uint64_t v111 = a1;
  uint64_t v43 = result - 1;
  unint64_t v44 = v37 + 8;
  uint64_t v112 = v36 + 8;
  while (1)
  {
    uint64_t v55 = (uint64_t *)(v37[6] + 16 * v43);
    uint64_t v56 = *v55;
    uint64_t v57 = v55[1];
    swift_bridgeObjectRetain();
    unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v57);
    char v60 = v59;
    swift_bridgeObjectRelease();
    if ((v60 & 1) != 0) {
      break;
    }
    *(void *)((char *)v44 + ((v58 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v58;
    if (v43 < (uint64_t)v58)
    {
      *(_OWORD *)(v37[6] + 16 * v58) = *(_OWORD *)(v37[6] + 16 * v43);
      uint64_t v51 = v37[7];
      char v52 = (_OWORD *)(v51 + 32 * v43);
      __int128 v53 = v52[1];
      uint64_t v54 = (_OWORD *)(v51 + 32 * v58);
      *uint64_t v54 = *v52;
      v54[1] = v53;
LABEL_23:
      if (--v43 < 0) {
        goto LABEL_43;
      }
    }

    else
    {
      if (v58 == v43) {
        goto LABEL_23;
      }
      uint64_t v64 = v37[6];
      uint64_t v65 = (uint64_t *)(v64 + 16 * v58);
      uint64_t v66 = (uint64_t *)(v64 + 16 * v43);
      uint64_t v67 = *v65;
      uint64_t v68 = v65[1];
      uint64_t v69 = v66[1];
      *uint64_t v65 = *v66;
      v65[1] = v69;
      *uint64_t v66 = v67;
      v66[1] = v68;
      uint64_t v70 = v37[7];
      unint64_t v71 = (_OWORD *)(v70 + 32 * v58);
      int64_t v72 = (_OWORD *)(v70 + 32 * v43);
      outlined init with take of Any(v71, &v117);
      outlined init with take of Any(v72, v71);
      outlined init with take of Any(&v117, v72);
      if (v43 < 0) {
        goto LABEL_43;
      }
    }
  }

  swift_arrayDestroy();
  uint64_t result = swift_arrayDestroy();
  uint64_t v61 = v37[2];
  BOOL v62 = __OFSUB__(v61, 1LL);
  uint64_t v63 = v61 - 1;
  if (!v62)
  {
    v37[2] = v63;
    goto LABEL_23;
  }

  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URLRequest()
{
  return URLRequest.description.getter();
}

uint64_t static URLRequest._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSURLRequest);
}

void static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    objc_msgSend(a1, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v3 = swift_allocObject();
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    swift_dynamicCast();
    *(void *)(v3 + 16) = v4;

    *a2 = v3;
  }

  else
  {
    __break(1u);
  }

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance URLRequest()
{
  return v2;
}

uint64_t NSURLRequest._toCustomAnyHashable()()
{
  uint64_t v1 = swift_allocObject();
  objc_msgSend(v4, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  *(void *)(v1 + 16) = v3;

  lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLRequest()
{
  id v1 = *v0;
  NSURLRequest._toCustomAnyHashable()();
}

void specialized static URLRequest._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_allocObject();
  objc_msgSend(v6, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  *(void *)(v4 + 16) = v5;

  *a2 = v4;
}

uint64_t specialized static URLRequest._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_allocObject();
  objc_msgSend(v7, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  *(void *)(v4 + 16) = v6;

  *a2 = v4;
  return 1LL;
}

unint64_t lazy protocol witness table accessor for type URLRequest and conformance URLRequest()
{
  unint64_t result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLRequest, &type metadata for URLRequest);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLRequest, &type metadata for URLRequest);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLRequest, &type metadata for URLRequest);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLRequest, &type metadata for URLRequest);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLRequest, &type metadata for URLRequest);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for URLRequest(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  a1[2] = lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  a1[3] = lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  unint64_t result = lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  a1[4] = result;
  return result;
}

double sub_1832485FC@<D0>(uint64_t a1@<X8>)
{
  return keypath_getTm((void (*)(__int128 *__return_ptr))URLRequest.url.getter, a1);
}

void *sub_183248608(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (SEL *)&selRef_setURL_);
}

id sub_183248614@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_1Tm(a1, (SEL *)&selRef_cachePolicy, a2);
}

id sub_183248620(uint64_t *a1)
{
  return URLRequest.cachePolicy.setter(*a1);
}

id sub_183248644@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*(id *)(*(void *)a1 + 16), sel_timeoutInterval);
  *a2 = v4;
  return result;
}

id sub_183248678(double *a1)
{
  return URLRequest.timeoutInterval.setter(*a1);
}

double sub_18324869C@<D0>(uint64_t a1@<X8>)
{
  return keypath_getTm((void (*)(__int128 *__return_ptr))URLRequest.mainDocumentURL.getter, a1);
}

double keypath_getTm@<D0>(void (*a1)(__int128 *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v3 = v6;
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v3;
  return result;
}

void *sub_1832486F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (SEL *)&selRef_setMainDocumentURL_);
}

void *keypath_setTm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v7 = (void *)*a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  outlined copy of URL?(*a1);
  return specialized URLRequest._applyMutation<A>(_:)(a2, v7, v8, v9, a5);
}

id sub_18324875C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_1Tm(a1, (SEL *)&selRef_networkServiceType, a2);
}

id sub_183248768(uint64_t *a1)
{
  return URLRequest.networkServiceType.setter(*a1);
}

id sub_18324878C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_allowsCellularAccess, a2);
}

id sub_183248798(char *a1)
{
  return URLRequest.allowsCellularAccess.setter(*a1);
}

id sub_1832487BC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_allowsExpensiveNetworkAccess, a2);
}

id sub_1832487C8(char *a1)
{
  return URLRequest.allowsExpensiveNetworkAccess.setter(*a1);
}

id sub_1832487EC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_allowsConstrainedNetworkAccess, a2);
}

id sub_1832487F8(char *a1)
{
  return URLRequest.allowsConstrainedNetworkAccess.setter(*a1);
}

id sub_18324881C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_assumesHTTP3Capable, a2);
}

id sub_183248828(char *a1)
{
  return URLRequest.assumesHTTP3Capable.setter(*a1);
}

id sub_18324884C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_1Tm(a1, (SEL *)&selRef_attribution, a2);
}

id keypath_get_1Tm@<X0>(uint64_t a1@<X0>, SEL *a2@<X3>, void *a3@<X8>)
{
  id result = [*(id *)(*(void *)a1 + 16) *a2];
  *a3 = result;
  return result;
}

id sub_183248888(uint64_t *a1)
{
  return URLRequest.attribution.setter(*a1);
}

id sub_1832488AC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_requiresDNSSECValidation, a2);
}

id sub_1832488B8(char *a1)
{
  return URLRequest.requiresDNSSECValidation.setter(*a1);
}

id sub_1832488DC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_allowsPersistentDNS, a2);
}

id sub_1832488E8(char *a1)
{
  return URLRequest.allowsPersistentDNS.setter(*a1);
}

uint64_t sub_183248910(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_24Tm(a1, a2, a3, a4, specialized URLRequest._applyMutation<A>(_:));
}

void sub_183248920(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  specialized URLRequest._applyMutation<A>(_:)(a2, v3);
}

uint64_t sub_183248954(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  outlined copy of Data?(*a1, v4);
  return specialized URLRequest._applyMutation<A>(_:)(a2, v3, v4);
}

id sub_183248994@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*(id *)(*(void *)a1 + 16), sel_HTTPBodyStream);
  *a2 = result;
  return result;
}

void sub_1832489D0(id *a1, uint64_t a2)
{
  id v3 = *a1;
  id v4 = *a1;
  specialized URLRequest._applyMutation<A>(_:)(a2, v3);
}

id sub_1832489FC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_HTTPShouldHandleCookies, a2);
}

id sub_183248A08(char *a1)
{
  return URLRequest.httpShouldHandleCookies.setter(*a1);
}

uint64_t sub_183248A30(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_24Tm( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized URLRequest._applyMutation<A>(_:));
}

uint64_t keypath_set_24Tm( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(a2, v6, v7);
}

id sub_183248A88@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_HTTPShouldUsePipelining, a2);
}

id keypath_get_9Tm@<X0>(uint64_t a1@<X0>, SEL *a2@<X3>, _BYTE *a3@<X8>)
{
  id result = [*(id *)(*(void *)a1 + 16) *a2];
  *a3 = (_BYTE)result;
  return result;
}

id sub_183248AC4(char *a1)
{
  return URLRequest.httpShouldUsePipelining.setter(*a1);
}

ValueMetadata *type metadata accessor for URLRequest()
{
  return &type metadata for URLRequest;
}

void _BPlistEncodingFormat.Writer.serializePlist(_:)(uint64_t a1)
{
  v3[1] = *MEMORY[0x1895F89C0];
  v3[0] = 0LL;
  _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(a1, v3);
  *(_BYTE *)(v1 + 8) = 8 - (__clz(v3[0]) >> 3);
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)"bplist00", 8LL);
  _BPlistEncodingFormat.Writer.append(_:)(a1);
  __asm { BR              X14 }

uint64_t sub_183248B9C@<X0>( uint64_t a1@<X8>, char a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__src, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  unint64_t v29 = BYTE6(v27) + a1;
  if (__OFADD__(BYTE6(v27), a1)) {
    goto LABEL_27;
  }
  if ((v29 & 0x8000000000000000LL) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x183248E14LL);
  }

  unint64_t v30 = __clz(v29) >> 3;
  uint64_t v31 = (8 - v30);
  uint64_t v32 = *v28;
  uint64_t v33 = *(void *)(*v28 + 16LL);
  if (v33)
  {
    unint64_t v45 = BYTE6(v27) + a1;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0LL; i != v33; ++i)
    {
      v46[0] = bswap64(*(void *)(v32 + 8 * i + 32));
      if ((_DWORD)v30 != 8)
      {
        uint64_t v35 = v28[4];
        uint64_t v36 = 0x2000 - v35;
        if (__OFSUB__(0x2000LL, v35))
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          JUMPOUT(0x183248DBCLL);
        }

        if (v36 >= v31) {
          uint64_t v37 = (8 - v30);
        }
        else {
          uint64_t v37 = 0x2000 - v35;
        }
        if (v36 >= v31)
        {
          uint64_t v38 = v28[2];
          if (!v38) {
            __break(1u);
          }
          memmove((void *)(v38 + v35), (char *)&v46[1] - v31, (8 - v30));
          if (__OFADD__(v35, v37)) {
            goto LABEL_26;
          }
          v28[4] = v35 + v37;
        }

        else
        {
          if (v35 > 0)
          {
            Data._Representation.append(contentsOf:)();
            v28[4] = 0LL;
          }

          Data._Representation.append(contentsOf:)();
        }
      }
    }

    swift_bridgeObjectRelease();
    unint64_t v39 = *(void *)(*v28 + 16LL);
    unint64_t v29 = v45;
  }

  else
  {
    unint64_t v39 = 0LL;
  }

  char v40 = *((_BYTE *)v28 + 8);
  WORD2(v46[0]) = 0;
  LODWORD(v46[0]) = 0;
  BYTE6(v46[0]) = 8 - v30;
  HIBYTE(v46[0]) = v40;
  v46[1] = bswap64(v39);
  v46[2] = 0LL;
  v46[3] = bswap64(v29);
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)v46, 32LL);
  if ((uint64_t)v28[4] >= 1)
  {
    Data._Representation.append(contentsOf:)();
    v28[4] = 0LL;
  }

  uint64_t v41 = v28[5];
  unint64_t v42 = v28[6];
  uint64_t v43 = v28[2];
  outlined copy of Data._Representation(v41, v42);
  if (v43) {
    MEMORY[0x186E20E60](v43, -1LL, -1LL);
  }
  return v41;
}

uint64_t specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v46 = a8;
  uint64_t v47 = a5;
  int v49 = a6;
  uint64_t v48 = a4;
  uint64_t v14 = *(void *)(a7 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](a1);
  id v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x1895F8858](v15);
  uint64_t v20 = (char *)&v43 - v19;
  MEMORY[0x1895F8858](v18);
  id v22 = (char *)&v43 - v21;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v22, a1, a7);
    swift_dynamicCast();
    uint64_t v23 = *(void *)(v9 + 88);
    uint64_t v24 = *(void *)(v23 + 16);
    unint64_t v25 = *(void *)(v23 + 24);
    uint64_t v26 = *(void *)(v23 + 32);
    *(void *)(v23 + 16) = v51;
    *(void *)(v23 + 24) = 0LL;
    *(void *)(v23 + 32) = 0LL;
    unsigned __int8 v27 = *(_BYTE *)(v23 + 40);
    *(_BYTE *)(v23 + 40) = 112;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v24, v25, v26, v27);
    swift_retain();
    char v28 = specialized Set._Variant.insert(_:)(&v53, v23);
    uint64_t v29 = v53;
    if ((v28 & 1) != 0)
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 24) = 0LL;
      *(void *)(v30 + 32) = 0LL;
      *(void *)(v30 + 16) = 2LL;
      *(_BYTE *)(v30 + 40) = -112;
      *(void *)(v30 + 48) = -1LL;
      swift_release();
      *(void *)(v9 + 88) = v30;
    }
  }

  else
  {
    uint64_t v31 = a1;
    unint64_t v44 = a2;
    uint64_t v45 = a3;
    uint64_t v32 = v48;
    char v33 = v49;
    if (swift_dynamicCastMetatype())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v20, v31, a7);
      swift_dynamicCast();
      uint64_t v34 = v51;
      unint64_t v35 = v52;
      uint64_t v29 = _BPlistEncodingFormat.data(_:)(v51, v52);
      outlined consume of Data._Representation(v34, v35);
    }

    else
    {
      uint64_t v36 = swift_conformsToProtocol2();
      if (v36) {
        uint64_t v37 = a7;
      }
      else {
        uint64_t v37 = 0LL;
      }
      if (v37)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v31, a7);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Encodable]);
        swift_dynamicCast();
        uint64_t v29 = specialized __PlistEncoderBPlist.wrap<A>(_:for:_:)(v51, v44, v45, v32, v47, v33);
        swift_bridgeObjectRelease();
      }

      else
      {
        MEMORY[0x1895F8858](v36);
        uint64_t v38 = v45;
        uint64_t v39 = v46;
        *(&v43 - 4) = a7;
        *(&v43 - 3) = v39;
        *(&v43 - 2) = v31;
        uint64_t v29 = v9;
        uint64_t v40 = v50;
        uint64_t v41 = specialized __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)( (void (*)(void *))partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:),  (uint64_t)(&v43 - 6),  v44,  v38,  v32,  v47,  v33);
        if (!v40) {
          return v41;
        }
      }
    }
  }

  return v29;
}

uint64_t __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, void *a7)
{
  uint64_t v45 = a7;
  uint64_t v8 = v7;
  unint64_t v43 = a6;
  uint64_t v44 = a5;
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v41 - v17;
  MEMORY[0x1895F8858](v19);
  uint64_t v21 = (char *)&v41 - v20;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, unint64_t, unint64_t))(v13 + 16))(v21, a1, a4);
    swift_dynamicCast();
    uint64_t v22 = *(void *)(v8 + 88);
    uint64_t v23 = *(void *)(v22 + 16);
    unint64_t v24 = *(void *)(v22 + 24);
    uint64_t v25 = *(void *)(v22 + 32);
    *(void *)(v22 + 16) = v47;
    *(void *)(v22 + 24) = 0LL;
    *(void *)(v22 + 32) = 0LL;
    unsigned __int8 v26 = *(_BYTE *)(v22 + 40);
    *(_BYTE *)(v22 + 40) = 112;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v23, v24, v25, v26);
    swift_retain();
    char v27 = specialized Set._Variant.insert(_:)(&v49, v22);
    uint64_t v28 = v49;
    if ((v27 & 1) != 0)
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 24) = 0LL;
      *(void *)(v29 + 32) = 0LL;
      *(void *)(v29 + 16) = 2LL;
      *(_BYTE *)(v29 + 40) = -112;
      *(void *)(v29 + 48) = -1LL;
      swift_release();
      *(void *)(v8 + 88) = v29;
    }
  }

  else
  {
    unint64_t v30 = a1;
    unint64_t v41 = a2;
    unint64_t v42 = a3;
    uint64_t v32 = v44;
    uint64_t v31 = v45;
    if (swift_dynamicCastMetatype())
    {
      (*(void (**)(char *, unint64_t, unint64_t))(v13 + 16))(v18, v30, a4);
      swift_dynamicCast();
      uint64_t v33 = v47;
      unint64_t v34 = v48;
      uint64_t v28 = _BPlistEncodingFormat.data(_:)(v47, v48);
      outlined consume of Data._Representation(v33, v34);
    }

    else
    {
      uint64_t v35 = swift_conformsToProtocol2();
      if (v35) {
        unint64_t v36 = a4;
      }
      else {
        unint64_t v36 = 0LL;
      }
      if (v36)
      {
        (*(void (**)(char *, unint64_t, unint64_t))(v13 + 16))(v15, v30, a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Encodable]);
        swift_dynamicCast();
        uint64_t v28 = __PlistEncoderBPlist.wrap<A>(_:for:_:)(v47, v41, v42, v32, v31);
        swift_bridgeObjectRelease();
      }

      else
      {
        MEMORY[0x1895F8858](v35);
        *(&v41 - 6) = a4;
        *(&v41 - 5) = v32;
        uint64_t v37 = v42;
        *(&v41 - 4) = v43;
        *(&v41 - 3) = (unint64_t)v31;
        *(&v41 - 2) = v30;
        uint64_t v28 = v8;
        uint64_t v38 = v46;
        uint64_t v39 = __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)( (void (*)(void *))partial apply for closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:),  (uint64_t)(&v41 - 8),  v41,  v37,  v32,  (uint64_t)v31);
        if (!v38) {
          return v39;
        }
      }
    }
  }

  return v28;
}

BOOL __PlistEncoderBPlist.canEncodeNewValue.getter()
{
  return *(void *)(*(void *)(v0 + 16) + 16LL) == *(void *)(v0 + 48);
}

uint64_t __PlistEncoderBPlist.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (((*(uint64_t (**)(void))(*v3 + 240))() & 1) != 0)
  {
    uint64_t v6 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x18961AFE8]);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v6;
    *(void *)(v11 + 24) = v8;
    *(void *)(v11 + 32) = v10;
    *(_BYTE *)(v11 + 40) = 96;
    *(void *)(v11 + 48) = -1LL;
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_5:
    uint64_t v14 = type metadata accessor for _PlistKeyedEncodingContainerBPlist(0LL, a2, a3, v12);
    swift_retain();
    swift_retain();
    MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistKeyedEncodingContainerBPlist<A>, v14);
    return KeyedEncodingContainer.init<A>(_:)();
  }

  uint64_t result = specialized BidirectionalCollection.last.getter(v3[2]);
  if (result)
  {
    if ((*(_BYTE *)(result + 40) & 0xF0) == 0x60) {
      goto LABEL_5;
    }
    uint64_t result = swift_release();
  }

  __break(1u);
  return result;
}

uint64_t __PlistEncoderBPlist.unkeyedContainer()@<X0>(uint64_t **a1@<X8>)
{
  uint64_t v2 = v1;
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) != 0)
  {
    id v4 = (void *)MEMORY[0x18961AFE8];
    if ((MEMORY[0x18961AFE8] & 0xC000000000000000LL) != 0) {
      id v4 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x18961AFE8]);
    }
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 24) = 0LL;
    *(void *)(v5 + 32) = 0LL;
    *(void *)(v5 + 16) = v4;
    *(_BYTE *)(v5 + 40) = 80;
    *(void *)(v5 + 48) = -1LL;
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    goto LABEL_7;
  }

  uint64_t result = specialized BidirectionalCollection.last.getter(v1[2]);
  if (result)
  {
    uint64_t v5 = result;
    if ((*(_BYTE *)(result + 40) & 0xF0) == 0x50)
    {
LABEL_7:
      uint64_t v7 = v2[5];
      a1[3] = (uint64_t *)&unk_189C854C0;
      a1[4] = (uint64_t *)lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist();
      *a1 = v2;
      a1[1] = (uint64_t *)v5;
      a1[2] = (uint64_t *)v7;
      swift_retain();
      return swift_retain();
    }

    uint64_t result = swift_release();
  }

  __break(1u);
  return result;
}

uint64_t __PlistEncoderBPlist.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistEncoderBPlist()
{
  return objc_opt_self();
}

uint64_t protocol witness for Encoder.userInfo.getter in conformance __PlistEncoderBPlist()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance __PlistEncoderBPlist( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __PlistEncoderBPlist.container<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance __PlistEncoderBPlist@<X0>( uint64_t **a1@<X8>)
{
  return __PlistEncoderBPlist.unkeyedContainer()(a1);
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance __PlistEncoderBPlist@<X0>( void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for __PlistEncoderBPlist();
  a1[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist,  v4,  (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist,  (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
  *a1 = v3;
  return swift_retain();
}

uint64_t _PlistKeyedEncodingContainerBPlist.encodeNil(forKey:)()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v23 = *(void *)(*v0 + 56LL);
  swift_retain();
  uint64_t v3 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v26 = v4;
  if ((specialized Sequence.allSatisfy(_:)(v3, v4) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    id v5 = (id)String.hashValue.getter();
    unsigned __int8 v6 = 1;
  }

  else
  {
    uint64_t v7 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v5 = objc_msgSend(v7, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v6 = 0;
  }

  uint64_t v8 = *(void *)(v2 + 88);
  uint64_t v9 = v2;
  uint64_t v10 = *(void *)(v8 + 16);
  unint64_t v11 = *(void *)(v8 + 24);
  uint64_t v12 = *(void *)(v8 + 32);
  unint64_t v13 = v26;
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = v13;
  *(void *)(v8 + 32) = v5;
  unsigned __int8 v14 = *(_BYTE *)(v8 + 40);
  *(_BYTE *)(v8 + 40) = v6;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v3, v13, (uint64_t)v5, v6);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v10, v11, v12, v14);
  swift_retain();
  char v15 = specialized Set._Variant.insert(_:)(&v24, v8);
  uint64_t v16 = v24;
  if ((v15 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 24) = 0LL;
    *(void *)(v17 + 32) = 0LL;
    *(void *)(v17 + 16) = 2LL;
    *(_BYTE *)(v17 + 40) = -112;
    *(void *)(v17 + 48) = -1LL;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v9 + 88) = v17;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v1 + 40) & 0xF0) == 0x60)
  {
    uint64_t v24 = *(void *)(v1 + 16);
    __int128 v25 = *(_OWORD *)(v1 + 24);
    *(void *)(v1 + 16) = 2LL;
    *(void *)(v1 + 24) = 0LL;
    *(void *)(v1 + 32) = 0LL;
    *(_BYTE *)(v1 + 40) = -112;
    swift_retain();
    swift_retain();
    specialized OrderedDictionary.subscript.setter(v23, v16);
    uint64_t v19 = *(void *)(v1 + 16);
    unint64_t v20 = *(void *)(v1 + 24);
    uint64_t v21 = *(void *)(v1 + 32);
    *(void *)(v1 + 16) = v24;
    *(_OWORD *)(v1 + 24) = v25;
    unsigned __int8 v22 = *(_BYTE *)(v1 + 40);
    *(_BYTE *)(v1 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v19, v20, v21, v22);
    swift_release();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(char a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = 16LL;
  if ((a1 & 1) != 0) {
    uint64_t v4 = 8LL;
  }
  uint64_t v25 = *(void *)(v3 + v4 + 56);
  swift_retain();
  uint64_t v5 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v28 = v6;
  if ((specialized Sequence.allSatisfy(_:)(v5, v6) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    id v7 = (id)String.hashValue.getter();
    unsigned __int8 v8 = 1;
  }

  else
  {
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v7 = objc_msgSend(v9, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v8 = 0;
  }

  uint64_t v10 = *(void *)(v3 + 88);
  uint64_t v11 = v3;
  uint64_t v12 = *(void *)(v10 + 16);
  unint64_t v13 = *(void *)(v10 + 24);
  uint64_t v14 = *(void *)(v10 + 32);
  unint64_t v15 = v28;
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v15;
  *(void *)(v10 + 32) = v7;
  unsigned __int8 v16 = *(_BYTE *)(v10 + 40);
  *(_BYTE *)(v10 + 40) = v8;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v5, v15, (uint64_t)v7, v8);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v12, v13, v14, v16);
  swift_retain();
  char v17 = specialized Set._Variant.insert(_:)(&v26, v10);
  uint64_t v18 = v26;
  if ((v17 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 24) = 0LL;
    *(void *)(v19 + 32) = 0LL;
    *(void *)(v19 + 16) = 2LL;
    *(_BYTE *)(v19 + 40) = -112;
    *(void *)(v19 + 48) = -1LL;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v11 + 88) = v19;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v2 + 40) & 0xF0) == 0x60)
  {
    uint64_t v26 = *(void *)(v2 + 16);
    __int128 v27 = *(_OWORD *)(v2 + 24);
    *(void *)(v2 + 16) = 2LL;
    *(void *)(v2 + 24) = 0LL;
    *(void *)(v2 + 32) = 0LL;
    *(_BYTE *)(v2 + 40) = -112;
    swift_retain();
    swift_retain();
    specialized OrderedDictionary.subscript.setter(v25, v18);
    uint64_t v21 = *(void *)(v2 + 16);
    unint64_t v22 = *(void *)(v2 + 24);
    uint64_t v23 = *(void *)(v2 + 32);
    *(void *)(v2 + 16) = v26;
    *(_OWORD *)(v2 + 24) = v27;
    unsigned __int8 v24 = *(_BYTE *)(v2 + 40);
    *(_BYTE *)(v2 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v21, v22, v23, v24);
    swift_release();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  a4();
  uint64_t v7 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v30 = v8;
  if ((specialized Sequence.allSatisfy(_:)(v7, v8) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    id v9 = (id)String.hashValue.getter();
    unsigned __int8 v10 = 1;
  }

  else
  {
    uint64_t v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v9 = objc_msgSend(v11, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v10 = 0;
  }

  uint64_t v12 = *(void *)(v6 + 88);
  uint64_t v13 = v6;
  uint64_t v14 = *(void *)(v12 + 16);
  unint64_t v15 = *(void *)(v12 + 24);
  uint64_t v16 = *(void *)(v12 + 32);
  unint64_t v17 = v30;
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v17;
  *(void *)(v12 + 32) = v9;
  unsigned __int8 v18 = *(_BYTE *)(v12 + 40);
  *(_BYTE *)(v12 + 40) = v10;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v7, v17, (uint64_t)v9, v10);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v14, v15, v16, v18);
  swift_retain();
  char v19 = specialized Set._Variant.insert(_:)(&v28, v12);
  uint64_t v20 = v28;
  if ((v19 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 24) = 0LL;
    *(void *)(v21 + 32) = 0LL;
    *(void *)(v21 + 16) = 2LL;
    *(_BYTE *)(v21 + 40) = -112;
    *(void *)(v21 + 48) = -1LL;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v13 + 88) = v21;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v5 + 40) & 0xF0) == 0x60)
  {
    uint64_t v28 = *(void *)(v5 + 16);
    __int128 v29 = *(_OWORD *)(v5 + 24);
    *(void *)(v5 + 16) = 2LL;
    *(void *)(v5 + 24) = 0LL;
    *(void *)(v5 + 32) = 0LL;
    *(_BYTE *)(v5 + 40) = -112;
    swift_retain();
    uint64_t v23 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v23, v20);
    uint64_t v24 = *(void *)(v5 + 16);
    unint64_t v25 = *(void *)(v5 + 24);
    uint64_t v26 = *(void *)(v5 + 32);
    *(void *)(v5 + 16) = v28;
    *(_OWORD *)(v5 + 24) = v29;
    unsigned __int8 v27 = *(_BYTE *)(v5 + 40);
    *(_BYTE *)(v5 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v24, v25, v26, v27);
    swift_release();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(unint64_t a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v40 = v2[1];
  if ((specialized Sequence.allSatisfy(_:)(a1, a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    id v6 = (id)String.hashValue.getter();
    unsigned __int8 v7 = 1;
  }

  else
  {
    unint64_t v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v6 = objc_msgSend(v8, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v7 = 0;
  }

  uint64_t v9 = *(void *)(v5 + 88);
  uint64_t v10 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  uint64_t v12 = *(void *)(v9 + 32);
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = v6;
  unsigned __int8 v13 = *(_BYTE *)(v9 + 40);
  *(_BYTE *)(v9 + 40) = v7;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(a1, a2, (uint64_t)v6, v7);
  uint64_t v14 = v5;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v10, v11, v12, v13);
  swift_retain();
  if ((specialized Set._Variant.insert(_:)(&v38, v9) & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 24) = 0LL;
    *(void *)(v15 + 32) = 0LL;
    *(void *)(v15 + 16) = 2LL;
    *(_BYTE *)(v15 + 40) = -112;
    *(void *)(v15 + 48) = -1LL;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v5 + 88) = v15;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v16 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v18 = v17;
  if ((specialized Sequence.allSatisfy(_:)(v16, v17) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    id v19 = (id)String.hashValue.getter();
    unsigned __int8 v20 = 1;
  }

  else
  {
    uint64_t v21 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v19 = objc_msgSend(v21, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v20 = 0;
  }

  uint64_t v22 = *(void *)(v14 + 88);
  uint64_t v23 = *(void *)(v22 + 16);
  unint64_t v24 = *(void *)(v22 + 24);
  uint64_t v37 = v14;
  uint64_t v25 = *(void *)(v22 + 32);
  *(void *)(v22 + 16) = v16;
  *(void *)(v22 + 24) = v18;
  *(void *)(v22 + 32) = v19;
  unsigned __int8 v26 = *(_BYTE *)(v22 + 40);
  *(_BYTE *)(v22 + 40) = v20;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v16, v18, (uint64_t)v19, v20);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v23, v24, v25, v26);
  swift_retain();
  char v27 = specialized Set._Variant.insert(_:)(&v38, v22);
  uint64_t v28 = v38;
  if ((v27 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 24) = 0LL;
    *(void *)(v29 + 32) = 0LL;
    *(void *)(v29 + 16) = 2LL;
    *(_BYTE *)(v29 + 40) = -112;
    *(void *)(v29 + 48) = -1LL;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v37 + 88) = v29;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v30 = v40;
  uint64_t result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v30 + 40) & 0xF0) == 0x60)
  {
    uint64_t v38 = *(void *)(v30 + 16);
    __int128 v39 = *(_OWORD *)(v30 + 24);
    *(void *)(v30 + 16) = 2LL;
    *(void *)(v30 + 24) = 0LL;
    *(void *)(v30 + 32) = 0LL;
    *(_BYTE *)(v30 + 40) = -112;
    swift_retain();
    uint64_t v32 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v32, v28);
    uint64_t v33 = *(void *)(v30 + 16);
    unint64_t v34 = *(void *)(v30 + 24);
    uint64_t v35 = *(void *)(v30 + 32);
    *(void *)(v30 + 16) = v38;
    *(_OWORD *)(v30 + 24) = v39;
    unsigned __int8 v36 = *(_BYTE *)(v30 + 40);
    *(_BYTE *)(v30 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v33, v34, v35, v36);
    swift_release();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(float a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  specialized _BPlistEncodingFormat.number<A>(from:)(a1);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v27 = v5;
  if ((specialized Sequence.allSatisfy(_:)(v4, v5) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    id v6 = (id)String.hashValue.getter();
    unsigned __int8 v7 = 1;
  }

  else
  {
    unint64_t v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v6 = objc_msgSend(v8, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v7 = 0;
  }

  uint64_t v9 = *(void *)(v3 + 88);
  uint64_t v10 = v3;
  uint64_t v11 = *(void *)(v9 + 16);
  unint64_t v12 = *(void *)(v9 + 24);
  uint64_t v13 = *(void *)(v9 + 32);
  unint64_t v14 = v27;
  *(void *)(v9 + 16) = v4;
  *(void *)(v9 + 24) = v14;
  *(void *)(v9 + 32) = v6;
  unsigned __int8 v15 = *(_BYTE *)(v9 + 40);
  *(_BYTE *)(v9 + 40) = v7;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v4, v14, (uint64_t)v6, v7);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v11, v12, v13, v15);
  swift_retain();
  char v16 = specialized Set._Variant.insert(_:)(&v25, v9);
  uint64_t v17 = v25;
  if ((v16 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 24) = 0LL;
    *(void *)(v18 + 32) = 0LL;
    *(void *)(v18 + 16) = 2LL;
    *(_BYTE *)(v18 + 40) = -112;
    *(void *)(v18 + 48) = -1LL;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v10 + 88) = v18;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v2 + 40) & 0xF0) == 0x60)
  {
    uint64_t v25 = *(void *)(v2 + 16);
    __int128 v26 = *(_OWORD *)(v2 + 24);
    *(void *)(v2 + 16) = 2LL;
    *(void *)(v2 + 24) = 0LL;
    *(void *)(v2 + 32) = 0LL;
    *(_BYTE *)(v2 + 40) = -112;
    swift_retain();
    uint64_t v20 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v20, v17);
    uint64_t v21 = *(void *)(v2 + 16);
    unint64_t v22 = *(void *)(v2 + 24);
    uint64_t v23 = *(void *)(v2 + 32);
    *(void *)(v2 + 16) = v25;
    *(_OWORD *)(v2 + 24) = v26;
    unsigned __int8 v24 = *(_BYTE *)(v2 + 40);
    *(_BYTE *)(v2 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v21, v22, v23, v24);
    swift_release();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(double a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  specialized _BPlistEncodingFormat.number<A>(from:)(a1);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v27 = v5;
  if ((specialized Sequence.allSatisfy(_:)(v4, v5) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    id v6 = (id)String.hashValue.getter();
    unsigned __int8 v7 = 1;
  }

  else
  {
    unint64_t v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v6 = objc_msgSend(v8, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v7 = 0;
  }

  uint64_t v9 = *(void *)(v3 + 88);
  uint64_t v10 = v3;
  uint64_t v11 = *(void *)(v9 + 16);
  unint64_t v12 = *(void *)(v9 + 24);
  uint64_t v13 = *(void *)(v9 + 32);
  unint64_t v14 = v27;
  *(void *)(v9 + 16) = v4;
  *(void *)(v9 + 24) = v14;
  *(void *)(v9 + 32) = v6;
  unsigned __int8 v15 = *(_BYTE *)(v9 + 40);
  *(_BYTE *)(v9 + 40) = v7;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v4, v14, (uint64_t)v6, v7);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v11, v12, v13, v15);
  swift_retain();
  char v16 = specialized Set._Variant.insert(_:)(&v25, v9);
  uint64_t v17 = v25;
  if ((v16 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 24) = 0LL;
    *(void *)(v18 + 32) = 0LL;
    *(void *)(v18 + 16) = 2LL;
    *(_BYTE *)(v18 + 40) = -112;
    *(void *)(v18 + 48) = -1LL;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v10 + 88) = v18;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v2 + 40) & 0xF0) == 0x60)
  {
    uint64_t v25 = *(void *)(v2 + 16);
    __int128 v26 = *(_OWORD *)(v2 + 24);
    *(void *)(v2 + 16) = 2LL;
    *(void *)(v2 + 24) = 0LL;
    *(void *)(v2 + 32) = 0LL;
    *(_BYTE *)(v2 + 40) = -112;
    swift_retain();
    uint64_t v20 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v20, v17);
    uint64_t v21 = *(void *)(v2 + 16);
    unint64_t v22 = *(void *)(v2 + 24);
    uint64_t v23 = *(void *)(v2 + 32);
    *(void *)(v2 + 16) = v25;
    *(_OWORD *)(v2 + 24) = v26;
    unsigned __int8 v24 = *(_BYTE *)(v2 + 40);
    *(_BYTE *)(v2 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v21, v22, v23, v24);
    swift_release();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode<A>(_:forKey:)( unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v53 = a4;
  unint64_t v54 = a5;
  unint64_t v52 = a1;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v50 - v12;
  uint64_t v50 = a2;
  uint64_t v51 = v5;
  unint64_t v14 = *(void *)(*v5 + 40);
  uint64_t v15 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))((char *)&v50 - v12, a2, v8, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0LL, 1LL, v8);
  char v16 = *(void **)(a3 + 24);
  swift_retain();
  uint64_t v17 = v57;
  uint64_t v18 = __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(v52, v14, (unint64_t)v13, v53, v8, v54, v16);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return swift_release();
  }

  uint64_t v19 = v10;
  uint64_t v20 = v51;
  if (v18)
  {
    unint64_t v53 = v18;
  }

  else
  {
    uint64_t v57 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x18961AFE8]);
    unint64_t v53 = v22;
    unint64_t v54 = v21;
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v23 = swift_allocObject();
    unint64_t v24 = v54;
    *(void *)(v23 + 16) = v57;
    *(void *)(v23 + 24) = v24;
    *(void *)(v23 + 32) = v53;
    *(_BYTE *)(v23 + 40) = 96;
    unint64_t v53 = v23;
    *(void *)(v23 + 48) = -1LL;
  }

  (*(void (**)(char *, uint64_t))(v19 + 8))(v13, v9);
  swift_release();
  uint64_t v26 = *v20;
  uint64_t v25 = v20[1];
  uint64_t v27 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v29 = v28;
  char v30 = specialized Sequence.allSatisfy(_:)(v27, v28);
  uint64_t v57 = 0LL;
  if ((v30 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    id v31 = (id)String.hashValue.getter();
    unsigned __int8 v32 = 1;
  }

  else
  {
    uint64_t v33 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v31 = objc_msgSend(v33, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v32 = 0;
  }

  uint64_t v34 = *(void *)(v26 + 88);
  uint64_t v35 = *(void *)(v34 + 16);
  unint64_t v36 = *(void *)(v34 + 24);
  uint64_t v37 = v26;
  uint64_t v38 = *(void *)(v34 + 32);
  *(void *)(v34 + 16) = v27;
  *(void *)(v34 + 24) = v29;
  *(void *)(v34 + 32) = v31;
  unint64_t v39 = v29;
  unsigned __int8 v40 = *(_BYTE *)(v34 + 40);
  *(_BYTE *)(v34 + 40) = v32;
  unint64_t v54 = v39;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v27, v39, (uint64_t)v31, v32);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v35, v36, v38, v40);
  swift_retain();
  char v41 = specialized Set._Variant.insert(_:)(&v55, v34);
  uint64_t v42 = v55;
  if ((v41 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 24) = 0LL;
    *(void *)(v43 + 32) = 0LL;
    *(void *)(v43 + 16) = 2LL;
    *(_BYTE *)(v43 + 40) = -112;
    *(void *)(v43 + 48) = -1LL;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v37 + 88) = v43;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v25 + 40) & 0xF0) == 0x60)
  {
    uint64_t v55 = *(void *)(v25 + 16);
    __int128 v56 = *(_OWORD *)(v25 + 24);
    *(void *)(v25 + 16) = 2LL;
    *(void *)(v25 + 24) = 0LL;
    *(void *)(v25 + 32) = 0LL;
    *(_BYTE *)(v25 + 40) = -112;
    swift_retain();
    uint64_t v45 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v45, v42);
    uint64_t v46 = *(void *)(v25 + 16);
    unint64_t v47 = *(void *)(v25 + 24);
    uint64_t v48 = *(void *)(v25 + 32);
    *(void *)(v25 + 16) = v55;
    *(_OWORD *)(v25 + 24) = v56;
    unsigned __int8 v49 = *(_BYTE *)(v25 + 40);
    *(_BYTE *)(v25 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v46, v47, v48, v49);
    swift_release();
    return swift_release();
  }

  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.nestedContainer<A>(keyedBy:forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned __int8 v7 = v6;
  uint64_t v75 = a5;
  uint64_t v76 = a6;
  uint64_t v77 = a4;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v80 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](a1);
  id v74 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  char v79 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v81 = (char *)&v73 - v16;
  uint64_t v17 = *v7;
  uint64_t v18 = *(void *)(a3 + 24);
  uint64_t v78 = a2;
  uint64_t v73 = v18;
  uint64_t v19 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v21 = v20;
  char v22 = specialized Sequence.allSatisfy(_:)(v19, v20);
  uint64_t v82 = v13;
  uint64_t v83 = v12;
  Swift::UInt v84 = v7;
  if ((v22 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    id v23 = (id)String.hashValue.getter();
    unsigned __int8 v24 = 1;
  }

  else
  {
    uint64_t v25 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v23 = objc_msgSend(v25, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v24 = 0;
  }

  uint64_t v26 = *(void *)(v17 + 88);
  uint64_t v28 = *(void *)(v26 + 16);
  unint64_t v27 = *(void *)(v26 + 24);
  uint64_t v29 = *(void *)(v26 + 32);
  *(void *)(v26 + 16) = v19;
  *(void *)(v26 + 24) = v21;
  *(void *)(v26 + 32) = v23;
  unsigned __int8 v30 = *(_BYTE *)(v26 + 40);
  *(_BYTE *)(v26 + 40) = v24;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v19, v21, (uint64_t)v23, v24);
  uint64_t v31 = v28;
  uint64_t v32 = v17;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v31, v27, v29, v30);
  swift_retain();
  char v33 = specialized Set._Variant.insert(_:)(&v85, v26);
  uint64_t v34 = v85;
  if ((v33 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 24) = 0LL;
    *(void *)(v35 + 32) = 0LL;
    *(void *)(v35 + 16) = 2LL;
    *(_BYTE *)(v35 + 40) = -112;
    *(void *)(v35 + 48) = -1LL;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v17 + 88) = v35;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  unint64_t v36 = v84;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v38 = v36[1];
  unsigned __int8 v39 = *(_BYTE *)(v38 + 40);
  if ((v39 & 0xF0) != 0x60)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  unint64_t v41 = *(void *)(v38 + 24);
  uint64_t v40 = *(void *)(v38 + 32);
  uint64_t v42 = *(void *)(v38 + 16);
  swift_retain();
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v42, v41, v40, v39);
  uint64_t v43 = specialized OrderedDictionary.subscript.getter(v34, v42, v41, v40);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v42, v41, v40, v39);
  swift_release();
  if (v43)
  {
    if ((*(_BYTE *)(v43 + 40) & 0xF0) == 0x60)
    {
LABEL_13:
      unint64_t v53 = v36[2];
      uint64_t v54 = v80;
      uint64_t v55 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v81, v78, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v55, 0LL, 1LL, v10);
      uint64_t v57 = v82;
      uint64_t v56 = v83;
      unint64_t v58 = v79;
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v79, v55, v83);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v58, 1LL, v10) == 1)
      {
        char v59 = *(void (**)(char *, uint64_t))(v57 + 8);
        swift_retain();
        v59(v55, v56);
        v59(v58, v56);
        swift_retain();
LABEL_21:
        uint64_t v85 = v32;
        *(void *)&__int128 v86 = v43;
        *((void *)&v86 + 1) = v53;
        uint64_t v72 = type metadata accessor for _PlistKeyedEncodingContainerBPlist(0LL, v77, v75, v60);
        swift_retain();
        swift_retain();
        swift_retain();
        MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistKeyedEncodingContainerBPlist<A>, v72);
        KeyedEncodingContainer.init<A>(_:)();
        swift_release();
        swift_release();
        swift_release();
        return swift_release();
      }

      Swift::UInt v84 = (uint64_t *)v34;
      uint64_t v61 = v55;
      BOOL v62 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
      uint64_t v63 = v58;
      uint64_t v64 = v74;
      v62(v74, v63, v10);
      uint64_t v65 = (uint64_t *)swift_allocObject();
      uint64_t v66 = v73;
      v65[5] = v10;
      v65[6] = v66;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v65 + 2);
      v62((char *)boxed_opaque_existential_1, v64, v10);
      uint64_t v68 = *(void (**)(char *, uint64_t))(v57 + 8);
      swift_retain();
      v68(v61, v56);
      v65[7] = v53;
      if (v53 >> 62)
      {
        if (v53 >> 62 != 1)
        {
          uint64_t v71 = 1LL;
          goto LABEL_20;
        }

        uint64_t v69 = (uint64_t *)((v53 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }

      else
      {
        uint64_t v69 = (uint64_t *)(v53 + 64);
      }

      uint64_t v70 = *v69;
      uint64_t result = swift_retain();
      uint64_t v71 = v70 + 1;
      if (!__OFADD__(v70, 1LL))
      {
LABEL_20:
        v65[8] = v71;
        unint64_t v53 = (unint64_t)v65;
        goto LABEL_21;
      }

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
  }

  uint64_t v44 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x18961AFE8]);
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  type metadata accessor for _BPlistEncodingFormat.Reference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v44;
  *(void *)(result + 24) = v46;
  *(void *)(result + 32) = v48;
  *(_BYTE *)(result + 40) = 96;
  *(void *)(result + 48) = -1LL;
  if ((*(_BYTE *)(v38 + 40) & 0xF0) == 0x60)
  {
    uint64_t v43 = result;
    uint64_t v85 = *(void *)(v38 + 16);
    __int128 v86 = *(_OWORD *)(v38 + 24);
    *(void *)(v38 + 16) = 2LL;
    *(void *)(v38 + 24) = 0LL;
    *(void *)(v38 + 32) = 0LL;
    *(_BYTE *)(v38 + 40) = -112;
    swift_retain_n();
    swift_retain();
    specialized OrderedDictionary.subscript.setter(v43, v34);
    uint64_t v49 = *(void *)(v38 + 16);
    unint64_t v50 = *(void *)(v38 + 24);
    uint64_t v51 = *(void *)(v38 + 32);
    *(void *)(v38 + 16) = v85;
    *(_OWORD *)(v38 + 24) = v86;
    unsigned __int8 v52 = *(_BYTE *)(v38 + 40);
    *(_BYTE *)(v38 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v49, v50, v51, v52);
    swift_release();
    goto LABEL_13;
  }

uint64_t _PlistKeyedEncodingContainerBPlist.nestedUnkeyedContainer(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v65 = a3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v67 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v64 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v71 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v63 - v13;
  uint64_t v15 = *v4;
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v66 = a1;
  uint64_t v63 = v16;
  uint64_t v17 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v19 = v18;
  char v20 = specialized Sequence.allSatisfy(_:)(v17, v18);
  uint64_t v69 = v10;
  uint64_t v70 = v9;
  uint64_t v68 = v14;
  uint64_t v72 = v4;
  if ((v20 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    id v21 = (id)String.hashValue.getter();
    unsigned __int8 v22 = 1;
  }

  else
  {
    id v23 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v21 = objc_msgSend(v23, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v22 = 0;
  }

  uint64_t v24 = *(void *)(v15 + 88);
  uint64_t v26 = *(void *)(v24 + 16);
  unint64_t v25 = *(void *)(v24 + 24);
  uint64_t v27 = *(void *)(v24 + 32);
  *(void *)(v24 + 16) = v17;
  *(void *)(v24 + 24) = v19;
  *(void *)(v24 + 32) = v21;
  unsigned __int8 v28 = *(_BYTE *)(v24 + 40);
  *(_BYTE *)(v24 + 40) = v22;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v17, v19, (uint64_t)v21, v22);
  unsigned __int8 v29 = v28;
  uint64_t v30 = v15;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v26, v25, v27, v29);
  swift_retain();
  char v31 = specialized Set._Variant.insert(_:)(&v73, v24);
  uint64_t v32 = v73;
  if ((v31 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 24) = 0LL;
    *(void *)(v33 + 32) = 0LL;
    *(void *)(v33 + 16) = 2LL;
    *(_BYTE *)(v33 + 40) = -112;
    *(void *)(v33 + 48) = -1LL;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v15 + 88) = v33;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v34 = v72;
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v36 = (char *)v34[1];
  unsigned __int8 v37 = v36[40];
  if ((v37 & 0xF0) == 0x60)
  {
    unint64_t v39 = *((void *)v36 + 3);
    uint64_t v38 = *((void *)v36 + 4);
    uint64_t v40 = *((void *)v36 + 2);
    swift_retain();
    outlined copy of _BPlistEncodingFormat.Reference.Backing(v40, v39, v38, v37);
    uint64_t v41 = specialized OrderedDictionary.subscript.getter(v32, v40, v39, v38);
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v40, v39, v38, v37);
    swift_release();
    if (v41)
    {
      uint64_t v42 = (void (*)(void, void))v71;
      if ((*(_BYTE *)(v41 + 40) & 0xF0) == 0x50) {
        goto LABEL_14;
      }
      __break(1u);
    }

    uint64_t v43 = (void *)MEMORY[0x18961AFE8];
    uint64_t v42 = (void (*)(void, void))v71;
    if ((MEMORY[0x18961AFE8] & 0xC000000000000000LL) != 0) {
      goto LABEL_25;
    }
    while (1)
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      uint64_t result = swift_allocObject();
      *(void *)(result + 24) = 0LL;
      *(void *)(result + 32) = 0LL;
      *(void *)(result + 16) = v43;
      *(_BYTE *)(result + 40) = 80;
      *(void *)(result + 48) = -1LL;
      if ((v36[40] & 0xF0) != 0x60) {
        goto LABEL_27;
      }
      uint64_t v41 = result;
      uint64_t v73 = *((void *)v36 + 2);
      __int128 v74 = *(_OWORD *)(v36 + 24);
      *((void *)v36 + 2) = 2LL;
      *((void *)v36 + 3) = 0LL;
      *((void *)v36 + 4) = 0LL;
      v36[40] = -112;
      swift_retain_n();
      swift_retain();
      specialized OrderedDictionary.subscript.setter(v41, v32);
      uint64_t v44 = *((void *)v36 + 2);
      unint64_t v45 = *((void *)v36 + 3);
      uint64_t v46 = *((void *)v36 + 4);
      *((void *)v36 + 2) = v73;
      *(_OWORD *)(v36 + 24) = v74;
      unsigned __int8 v47 = v36[40];
      v36[40] = 96;
      outlined consume of _BPlistEncodingFormat.Reference.Backing(v44, v45, v46, v47);
      swift_release();
LABEL_14:
      unint64_t v48 = v34[2];
      uint64_t v49 = v67;
      unint64_t v50 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v68, v66, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v50, 0LL, 1LL, v7);
      uint64_t v34 = (void *)v69;
      uint64_t v51 = v70;
      (*(void (**)(void (*)(void, void), char *, uint64_t))(v69 + 16))(v42, v50, v70);
      if ((*(unsigned int (**)(void (*)(void, void), uint64_t, uint64_t))(v49 + 48))( v42,  1LL,  v7) == 1) {
        break;
      }
      uint64_t v72 = (void *)v32;
      unint64_t v53 = v42;
      uint64_t v54 = *(void (**)(char *, void (*)(void, void), uint64_t))(v49 + 32);
      uint64_t v55 = v50;
      unint64_t v36 = v64;
      v54(v64, v53, v7);
      uint64_t v56 = (uint64_t *)swift_allocObject();
      uint64_t v57 = v63;
      v56[5] = v7;
      v56[6] = v57;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v56 + 2);
      v54((char *)boxed_opaque_existential_1, (void (*)(void, void))v36, v7);
      uint64_t v42 = (void (*)(void, void))v34[1];
      uint64_t v7 = v30;
      swift_retain();
      v42(v55, v51);
      v56[7] = v48;
      if (v48 >> 62)
      {
        if (v48 >> 62 != 1)
        {
          uint64_t v61 = 1LL;
LABEL_21:
          v56[8] = v61;
          unint64_t v48 = (unint64_t)v56;
LABEL_22:
          BOOL v62 = v65;
          v65[3] = (uint64_t)&unk_189C854C0;
          v62[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist();
          uint64_t result = swift_release();
          *BOOL v62 = v30;
          v62[1] = v41;
          void v62[2] = v48;
          return result;
        }

        char v59 = (uint64_t *)((v48 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }

      else
      {
        char v59 = (uint64_t *)(v48 + 64);
      }

      uint64_t v32 = (uint64_t)v72;
      uint64_t v60 = *v59;
      swift_retain();
      uint64_t v61 = v60 + 1;
      if (!__OFADD__(v60, 1LL)) {
        goto LABEL_21;
      }
      __break(1u);
LABEL_25:
      uint64_t v43 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x18961AFE8]);
    }

    unsigned __int8 v52 = (void (*)(char *, uint64_t))v34[1];
    swift_retain();
    v52(v50, v51);
    v52((char *)v42, v51);
    swift_retain();
    goto LABEL_22;
  }

  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v6 = type metadata accessor for __PlistReferencingEncoderBPlist();
  uint64_t v7 = swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)( v8,  0x7265707573LL,  0xE500000000000000LL,  0LL,  0,  v5,  v3,  v7);
  a1[3] = v6;
  uint64_t result = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type __PlistReferencingEncoderBPlist and conformance __PlistEncoderBPlist,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderBPlist,  (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
  a1[4] = result;
  *a1 = v9;
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.superEncoder(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v3;
  uint64_t v10 = v3[1];
  unint64_t v12 = *(void *)(v11 + 40);
  uint64_t v13 = type metadata accessor for __PlistReferencingEncoderBPlist();
  uint64_t v14 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v19, v6);
  uint64_t v15 = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v16 = specialized __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)( v11,  (uint64_t)v9,  v12,  v10,  v14,  v6,  v15);
  a3[3] = v13;
  uint64_t result = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged( &lazy protocol witness table cache variable for type __PlistReferencingEncoderBPlist and conformance __PlistEncoderBPlist,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderBPlist,  (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
  a3[4] = result;
  *a3 = v16;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>()
{
  return _PlistKeyedEncodingContainerBPlist.encodeNil(forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>( char a1)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>( unint64_t a1, unint64_t a2)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>( double a1)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>( float a1)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)( a1,  a2,  a3,  (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>( unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return _PlistKeyedEncodingContainerBPlist.encode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _PlistKeyedEncodingContainerBPlist.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4, a6);
}

uint64_t _BPlistEncodingFormat.Reference.insert(_:)()
{
  if ((*(_BYTE *)(v0 + 40) & 0xF0) == 0x50)
  {
    uint64_t v6 = *(void *)(v0 + 16);
    *(void *)(v0 + 24) = 0LL;
    *(void *)(v0 + 32) = 0LL;
    *(void *)(v0 + 16) = 2LL;
    *(_BYTE *)(v0 + 40) = -112;
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    uint64_t v1 = *(void *)(v0 + 16);
    unint64_t v2 = *(void *)(v0 + 24);
    uint64_t v3 = *(void *)(v0 + 32);
    *(void *)(v0 + 24) = 0LL;
    *(void *)(v0 + 32) = 0LL;
    *(void *)(v0 + 16) = v6;
    unsigned __int8 v4 = *(_BYTE *)(v0 + 40);
    *(_BYTE *)(v0 + 40) = 80;
    return outlined consume of _BPlistEncodingFormat.Reference.Backing(v1, v2, v3, v4);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t _PlistUnkeyedEncodingContainerBPlist.encode(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  if ((specialized Sequence.allSatisfy(_:)(a1, a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    id v6 = (id)String.hashValue.getter();
    unsigned __int8 v7 = 1;
  }

  else
  {
    uint64_t v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v6 = objc_msgSend(v8, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v7 = 0;
  }

  uint64_t v9 = *(void *)(v5 + 88);
  uint64_t v10 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  uint64_t v12 = *(void *)(v9 + 32);
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = v6;
  unsigned __int8 v13 = *(_BYTE *)(v9 + 40);
  *(_BYTE *)(v9 + 40) = v7;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(a1, a2, (uint64_t)v6, v7);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v10, v11, v12, v13);
  swift_retain();
  if ((specialized Set._Variant.insert(_:)(&v16, v9) & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 24) = 0LL;
    *(void *)(v14 + 32) = 0LL;
    *(void *)(v14 + 16) = 2LL;
    *(_BYTE *)(v14 + 40) = -112;
    *(void *)(v14 + 48) = -1LL;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v5 + 88) = v14;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  _BPlistEncodingFormat.Reference.insert(_:)();
  return swift_release();
}

uint64_t _PlistUnkeyedEncodingContainerBPlist.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  id v6 = v3;
  uint64_t v9 = *(void *)(a2 - 8);
  __n128 v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *v3;
  uint64_t result = (*(uint64_t (**)(char *, __n128))(v9 + 16))(v12, v10);
  unint64_t v15 = *(void *)(v13 + 40);
  uint64_t v16 = v6[1];
  int v17 = *(unsigned __int8 *)(v16 + 40) >> 4;
  if (v17 == 6)
  {
    uint64_t v18 = v16 + 32;
  }

  else
  {
    if (v17 != 5)
    {
      __break(1u);
      return result;
    }

    uint64_t v18 = v16 + 16;
  }

  uint64_t v19 = *(void *)(*(void *)v18 + 16LL);
  swift_retain();
  uint64_t v20 = specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)((uint64_t)v12, v15, v19, 0LL, 0LL, 2, a2, a3);
  if (v5)
  {
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a2);
  }

  else
  {
    if (!v20)
    {
      uint64_t v21 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x18961AFE8]);
      uint64_t v23 = v22;
      uint64_t v27 = v24;
      type metadata accessor for _BPlistEncodingFormat.Reference();
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = v21;
      *(void *)(v25 + 24) = v23;
      *(void *)(v25 + 32) = v27;
      *(_BYTE *)(v25 + 40) = 96;
      *(void *)(v25 + 48) = -1LL;
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a2);
    _BPlistEncodingFormat.Reference.insert(_:)();
    return swift_release();
  }

void _PlistUnkeyedEncodingContainerBPlist.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(v3 + 8);
  int v8 = *(unsigned __int8 *)(v7 + 40) >> 4;
  if (v8 == 6)
  {
    uint64_t v9 = v7 + 32;
  }

  else
  {
    if (v8 != 5) {
      goto LABEL_13;
    }
    uint64_t v9 = v7 + 16;
  }

  uint64_t v10 = *(void *)(*(void *)v9 + 16LL);
  uint64_t v11 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x18961AFE8]);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  type metadata accessor for _BPlistEncodingFormat.Reference();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v11;
  *(void *)(v16 + 24) = v13;
  *(void *)(v16 + 32) = v15;
  *(_BYTE *)(v16 + 40) = 96;
  *(void *)(v16 + 48) = -1LL;
  _BPlistEncodingFormat.Reference.insert(_:)();
  unint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = (void *)swift_allocObject();
  uint64_t v18[5] = &type metadata for _CodingKey;
  void v18[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v19 = swift_allocObject();
  void v18[2] = v19;
  *(void *)(v19 + 24) = 0LL;
  *(void *)(v19 + 32) = 0LL;
  *(void *)(v19 + 16) = v10;
  *(_BYTE *)(v19 + 40) = 2;
  v18[7] = v17;
  if (!(v17 >> 62))
  {
    uint64_t v22 = (uint64_t *)(v17 + 64);
    goto LABEL_9;
  }

  uint64_t v21 = 0LL;
  if (v17 >> 62 == 1)
  {
    uint64_t v22 = (uint64_t *)((v17 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_9:
    uint64_t v21 = *v22;
    swift_retain();
  }

  if (!__OFADD__(v21, 1LL))
  {
    v18[8] = v21 + 1;
    uint64_t v23 = type metadata accessor for _PlistKeyedEncodingContainerBPlist(0LL, a2, a3, v20);
    swift_retain();
    MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistKeyedEncodingContainerBPlist<A>, v23);
    KeyedEncodingContainer.init<A>(_:)();
    return;
  }

  __break(1u);
LABEL_13:
  __break(1u);
}

void _PlistUnkeyedEncodingContainerBPlist.nestedUnkeyedContainer()(void *a1@<X8>)
{
  unint64_t v2 = v1;
  uint64_t v4 = v1[1];
  int v5 = *(unsigned __int8 *)(v4 + 40) >> 4;
  if (v5 == 6)
  {
    uint64_t v6 = v4 + 32;
  }

  else
  {
    if (v5 != 5) {
      goto LABEL_15;
    }
    uint64_t v6 = v4 + 16;
  }

  uint64_t v7 = *(void *)(*(void *)v6 + 16LL);
  int v8 = (void *)MEMORY[0x18961AFE8];
  if ((MEMORY[0x18961AFE8] & 0xC000000000000000LL) != 0) {
    int v8 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x18961AFE8]);
  }
  type metadata accessor for _BPlistEncodingFormat.Reference();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 24) = 0LL;
  *(void *)(v9 + 32) = 0LL;
  *(void *)(v9 + 16) = v8;
  *(_BYTE *)(v9 + 40) = 80;
  *(void *)(v9 + 48) = -1LL;
  _BPlistEncodingFormat.Reference.insert(_:)();
  uint64_t v10 = *v2;
  unint64_t v11 = v2[2];
  uint64_t v12 = (void *)swift_allocObject();
  void v12[5] = &type metadata for _CodingKey;
  _OWORD v12[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v13 = swift_allocObject();
  _OWORD v12[2] = v13;
  *(void *)(v13 + 24) = 0LL;
  *(void *)(v13 + 32) = 0LL;
  *(void *)(v13 + 16) = v7;
  *(_BYTE *)(v13 + 40) = 2;
  v12[7] = v11;
  if (!(v11 >> 62))
  {
    uint64_t v15 = (uint64_t *)(v11 + 64);
    goto LABEL_11;
  }

  uint64_t v14 = 0LL;
  if (v11 >> 62 == 1)
  {
    uint64_t v15 = (uint64_t *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_11:
    uint64_t v14 = *v15;
    swift_retain();
  }

  if (!__OFADD__(v14, 1LL))
  {
    v12[8] = v14 + 1;
    a1[3] = &unk_189C854C0;
    a1[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist();
    *a1 = v10;
    a1[1] = v9;
    a1[2] = v12;
    swift_retain();
    return;
  }

  __break(1u);
LABEL_15:
  __break(1u);
}