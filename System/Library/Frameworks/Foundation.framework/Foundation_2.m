unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *__src)
{
  Swift::Int v2;
  _BYTE v4[72];
  _BYTE __dst[352];
  memcpy(__dst, __src, sizeof(__dst));
  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v4);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(__src, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, type metadata accessor for ICUNumberFormatter.Signature);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  int v13;
  Swift::UInt v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  Swift::UInt v18;
  int *v19;
  uint64_t v20;
  int v21;
  Swift::UInt v22;
  Swift::UInt64 v23;
  Swift::UInt v24;
  uint64_t v25;
  Swift::UInt8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  Swift::Int v58;
  void v60[2];
  _BYTE v61[144];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  char v78;
  char v79;
  _BYTE v80[144];
  _BYTE v81[144];
  _BYTE v82[72];
  _BYTE v83[72];
  v2 = v1;
  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  v7 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v8);
  v10 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher.init(_seed:)();
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v11 = *(void *)a1;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      v12 = v11;
    }
    else {
      v12 = 0LL;
    }
    Hasher._combine(_:)(v12);
  }

  outlined init with take of LocalePreferences?( a1 + 16,  (uint64_t)v83,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v13 = *(unsigned __int8 *)(a1 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }

  v15 = *(unsigned int *)(a1 + 74);
  if (*(_DWORD *)(a1 + 74) == 2)
  {
    LOBYTE(v16) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15 & 1);
    Hasher._combine(_:)((v15 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v15) & 1);
    v16 = BYTE3(v15) & 1;
  }

  Hasher._combine(_:)(v16);
  v17 = *(unsigned __int8 *)(a1 + 78);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }

  v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of FloatingPointRoundingRule?(a1 + v19[9], (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  v20 = a1 + v19[10];
  v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v22 = *(void *)v20;
    Hasher._combine(_:)(1u);
    if ((v21 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        v23 = v22;
      }
      else {
        v23 = 0LL;
      }
      Hasher._combine(_:)(v23);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v22);
    }
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(a1 + v19[11]));
  v24 = *(unsigned __int8 *)(a1 + v19[12]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }

  v25 = type metadata accessor for ICUCurrencyNumberFormatter.Signature(0LL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( a1 + *(int *)(v25 + 28),  (uint64_t)v80,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v80,  (uint64_t)v81,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v81) == 1)
  {
    Hasher._combine(_:)(0);
    goto LABEL_84;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v80,  (uint64_t)&v62,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v62 == 2)
  {
    v26 = 0;
  }

  else
  {
    v26 = v62 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v26);
  v27 = v63;
  if (!v63)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v62);
    v31 = &v62;
    goto LABEL_45;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v27 + 16));
  v28 = *(void *)(v27 + 16);
  if (!v28)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v80,  (uint64_t)v61,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v80,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    v31 = (uint64_t *)v61;
LABEL_45:
    outlined retain of LocalePreferences(v31);
    if (!v64) {
      goto LABEL_40;
    }
    goto LABEL_46;
  }

  outlined retain of LocalePreferences?( (uint64_t)v80,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v80,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v29 = v27 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v29 += 16LL;
    --v28;
  }

  while (v28);
  swift_bridgeObjectRelease();
  if (!v64)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v65) {
      goto LABEL_41;
    }
LABEL_47:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v30 = v66;
    if (!v66) {
      goto LABEL_42;
    }
    goto LABEL_48;
  }

{
  return specialized __RawDictionaryStorage.find<A>(_:)( a1,  type metadata accessor for ICUPercentNumberFormatter.Signature);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 *a1)
{
  Swift::UInt v2 = a1[352];
  Locale.Components.hash(into:)((uint64_t)v6);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t)a1, v3);
}

{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(_BYTE *, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  Swift::UInt8 v10;
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  Swift::UInt v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  Swift::Int v44;
  _BYTE v46[144];
  _BYTE v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  void v65[18];
  _BYTE v66[144];
  _BYTE v67[144];
  _BYTE v68[72];
  __int128 v69;
  _OWORD v70[2];
  Hasher.init(_seed:)();
  Swift::UInt v2 = *((void *)a1 + 1);
  Hasher._combine(_:)(*a1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(v68, v2);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::Int v3 = *((_OWORD *)a1 + 1);
  v69 = *((_OWORD *)a1 + 2);
  v70[0] = v3;
  v4 = *((void *)&v3 + 1);
  ObjectType = swift_getObjectType();
  v6 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 120);
  outlined retain of Locale((uint64_t)v70);
  v6(v68, ObjectType, v4);
  outlined release of Locale((uint64_t)v70);
  v7 = *((void *)&v69 + 1);
  v8 = swift_getObjectType();
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 48);
  outlined retain of Locale((uint64_t)&v69);
  if ((v9(v8, v7) & 1) != 0)
  {
    v10 = 1;
LABEL_8:
    Hasher._combine(_:)(v10);
    goto LABEL_59;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v7 + 64))(v8, v7);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 464);
  outlined retain of Locale((uint64_t)&v69);
  v11(v65, v8, v7);
  outlined release of Locale((uint64_t)&v69);
  outlined init with take of LocalePreferences?( (uint64_t)v65,  (uint64_t)v66,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v66,  (uint64_t)v67,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v67) == 1)
  {
    v10 = 0;
    goto LABEL_8;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v66,  (uint64_t)v47,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v47[0] == 2)
  {
    v12 = 0;
  }

  else
  {
    v12 = v47[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v12);
  v13 = v48;
  if (!v48)
  {
    Hasher._combine(_:)(0);
    v18 = v47;
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v66,  (uint64_t)v46,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    v18 = v46;
LABEL_23:
    outlined retain of LocalePreferences(v18);
    if (!v49) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  outlined retain of LocalePreferences?( (uint64_t)v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16LL;
    --v14;
  }

  while (v14);
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v50) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, unsigned int a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2 & 0x101, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)( uint64_t a1, uint64_t a2, Swift::UInt a3, Swift::UInt a4)
{
  Swift::Int v8 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, a4, v8);
}

LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v65) {
    goto LABEL_47;
  }
LABEL_41:
  Hasher._combine(_:)(0);
  v30 = v66;
  if (!v66)
  {
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_49;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v67) {
    goto LABEL_47;
  }
LABEL_41:
  Hasher._combine(_:)(0);
  v31 = v68;
  if (!v68)
  {
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_49;
  }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v28 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v30 << 8);
      v11 = v107;
      goto LABEL_31;
    }

    swift_unknownObjectRetain_n();
    v28 = ((-15LL << ((4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v12 + 18) | ((unint64_t)*(unsigned __int16 *)(v12 + 16) << ((4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C));
  }

  else
  {
    swift_unknownObjectRetain_n();
    v28 = 0LL;
  }

  result = (void *)swift_unknownObjectRelease();
  v20 = 0LL;
  v17 = 0LL;
  if (v12)
  {
LABEL_31:
    swift_unknownObjectRetain();
    v29 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v15, v28, v20, v12, v97);
    result = (void *)swift_unknownObjectRelease_n();
    goto LABEL_48;
  }

  v29 = 0LL;
LABEL_48:
  if (__OFSUB__(v106, v17))
  {
LABEL_141:
    __break(1u);
    goto LABEL_142;
  }

  v96 = v106 - v17;
  v93 = v14;
  v36 = v11;
  v37 = v11[8];
  v39 = v36[9];
  v38 = v36[10];
  v98 = v29;
  v40 = v36[11];
  *(void *)&v109 = v15;
  *((void *)&v109 + 1) = v28;
  *(void *)&v110 = v20;
  v108[0] = a2;
  swift_unknownObjectRetain();
  specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)((uint64_t)&v109, v108, 0, v37, v39, v38, v40);
  v41 = v109;
  v42 = v110;
  swift_unknownObjectRetain();
  v43 = specialized Rope.distance<A>(from:to:in:)( v15,  v28,  v20,  v41,  *((unint64_t *)&v41 + 1),  v42,  v37,  v39,  v38,  v40,  specialized Rope._UnsafeHandle.distance<A>(from:to:in:),  specialized Rope._Node.distance<A>(from:to:in:));
  result = (void *)swift_unknownObjectRelease_n();
  v44 = v98 + a2;
  if (__OFADD__(v98, a2))
  {
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }

  v45 = v96 + v43;
  if (__OFADD__(v96, v43))
  {
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }

  v46 = v107;
  v47 = v107[10];
  result = (void *)swift_unknownObjectRetain();
  if (!result)
  {
    v49 = 0LL;
    v48 = 0LL;
    if (!v45) {
      goto LABEL_62;
    }
LABEL_57:
    if ((void)v41 != v107[11])
    {
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }

    if (v42)
    {
      v48 = *(void *)(v42 + 24 * ((*((void *)&v41 + 1) >> ((4 * *(_BYTE *)(v42 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      v46 = v107;
      v48 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v41 + 1), v49);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    result = (void *)swift_bridgeObjectRelease();
    goto LABEL_62;
  }

  result = (void *)swift_unknownObjectRelease();
  if (v45 != v47)
  {
    v49 = v107[8];
    goto LABEL_57;
  }

  v48 = 0LL;
LABEL_62:
  if (__OFADD__(v45, v48))
  {
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }

  v50 = v8;
  if ((uint64_t)(v45 + v48) < (uint64_t)((unint64_t)v8 >> 11))
  {
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
    goto LABEL_149;
  }

  v51 = v105;
  v52 = v105 >> 11;
  v53 = v46[8];
  if (v53) {
    v54 = v46[10];
  }
  else {
    v54 = 0LL;
  }
  if (v54 < v52) {
    goto LABEL_150;
  }
  if (!v53)
  {
    swift_unknownObjectRetain_n();
    result = (void *)swift_unknownObjectRelease();
    v68 = 0LL;
    v69 = 0LL;
    goto LABEL_110;
  }

  v55 = v46[9];
  v104 = v46[11];
  if (v52 >= v46[10] || !*(_WORD *)(v53 + 16))
  {
    swift_unknownObjectRetain_n();
    v99 = v55;
    v65 = *(unsigned __int8 *)(v53 + 18);
    v66 = *(unsigned __int16 *)(v53 + 16);
    swift_unknownObjectRelease();
    v52 = 0LL;
    v57 = 0LL;
    v67 = ((-15LL << ((4 * v65 + 8) & 0x3C)) - 1) & v65 | (unint64_t)(v66 << ((4 * v65 + 8) & 0x3C));
    goto LABEL_109;
  }

  v99 = v46[9];
  v56 = *(unsigned __int8 *)(v53 + 18);
  if (!*(_BYTE *)(v53 + 18))
  {
    result = (void *)swift_unknownObjectRetain_n();
    v70 = 0LL;
    v57 = v53;
    v71 = *(unsigned __int16 *)(v53 + 16);
    if (!*(_WORD *)(v53 + 16)) {
      goto LABEL_107;
    }
LABEL_95:
    v72 = *(void *)(v57 + 24);
    v23 = __OFSUB__(v52, v72);
    v73 = v52 - v72;
    if (v23) {
      goto LABEL_158;
    }
    if (__OFADD__(v73, 1LL))
    {
LABEL_160:
      __break(1u);
      return result;
    }

    if (v73 + 1 < 1)
    {
      v71 = 0LL;
      goto LABEL_108;
    }

    if ((_DWORD)v71 == 1)
    {
      v52 = v73;
      goto LABEL_107;
    }

    v74 = (uint64_t *)(v57 + 48);
    v75 = 1LL;
    while (1)
    {
      v76 = *v74;
      v74 += 3;
      v52 = v73 - v76;
      if (__OFSUB__(v73, v76)) {
        goto LABEL_153;
      }
      if (__OFADD__(v52, 1LL)) {
        goto LABEL_154;
      }
      if (v52 + 1 < 1)
      {
        v71 = v75;
        v52 = v73;
        goto LABEL_108;
      }

      ++v75;
      v73 = v52;
      if (v71 == v75) {
        goto LABEL_107;
      }
    }
  }

  result = (void *)swift_unknownObjectRetain_n();
  v57 = v53;
  do
  {
    v59 = *(unsigned __int16 *)(v57 + 16);
    if (*(_WORD *)(v57 + 16))
    {
      v60 = *(void *)(v57 + 40);
      v23 = __OFSUB__(v52, v60);
      v61 = v52 - v60;
      if (v23) {
        goto LABEL_137;
      }
      if (__OFADD__(v61, 1LL)) {
        goto LABEL_138;
      }
      if (v61 + 1 < 1)
      {
        v59 = 0LL;
        goto LABEL_76;
      }

      if ((_DWORD)v59 != 1)
      {
        v62 = (uint64_t *)(v57 + 64);
        v63 = 1LL;
        while (1)
        {
          v64 = *v62;
          v62 += 3;
          v52 = v61 - v64;
          if (__OFSUB__(v61, v64)) {
            goto LABEL_131;
          }
          if (__OFADD__(v52, 1LL)) {
            goto LABEL_132;
          }
          if (v52 + 1 < 1)
          {
            v59 = v63;
            v52 = v61;
            goto LABEL_76;
          }

          ++v63;
          v61 = v52;
          if (v59 == v63) {
            goto LABEL_75;
          }
        }
      }

      v52 = v61;
    }

    __break(1u);
  }

  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }

    v47 = (v57 - 1) & v57;
    v49 = __clz(__rbit64(v57)) + (v44 << 6);
LABEL_21:
    v50 = 16 * v49;
    v51 = (void *)(*(void *)(v27 + 48) + 16 * v49);
    v52 = v51[1];
    v53 = 8 * v49;
    v54 = *(void *)(*(void *)(v27 + 56) + v53);
    v55 = (void *)(*(void *)(v36 + 48) + v50);
    *v55 = *v51;
    v55[1] = v52;
    *(void *)(*(void *)(v36 + 56) + v53) = v54;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }

  v58 = v56 + 8;
  if (v58 >= v64) {
    goto LABEL_47;
  }
  v57 = v65[v58];
  if (v57)
  {
    v44 = v58;
    goto LABEL_46;
  }

  while (1)
  {
    v44 = v58 + 1;
    if (__OFADD__(v58, 1LL)) {
      break;
    }
    v28 = v66;
    if (v44 >= v64) {
      goto LABEL_47;
    }
    v57 = v65[v44];
    ++v58;
    if (v57) {
      goto LABEL_46;
    }
  }

    v47 = (v57 - 1) & v57;
    v49 = __clz(__rbit64(v57)) + (v44 << 6);
LABEL_21:
    v50 = 16 * v49;
    v51 = (void *)(*(void *)(v27 + 48) + 16 * v49);
    v52 = v51[1];
    v53 = 8 * v49;
    v54 = *(void *)(*(void *)(v27 + 56) + v53);
    v55 = (void *)(*(void *)(v36 + 48) + v50);
    *v55 = *v51;
    v55[1] = v52;
    *(void *)(*(void *)(v36 + 56) + v53) = v54;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }

  v58 = v56 + 8;
  if (v58 >= v64) {
    goto LABEL_47;
  }
  v57 = v65[v58];
  if (v57)
  {
    v44 = v58;
    goto LABEL_46;
  }

  while (1)
  {
    v44 = v58 + 1;
    if (__OFADD__(v58, 1LL)) {
      break;
    }
    v28 = v66;
    if (v44 >= v64) {
      goto LABEL_47;
    }
    v57 = v65[v44];
    ++v58;
    if (v57) {
      goto LABEL_46;
    }
  }

  if ((v25 & 0x2000000000000000LL) != 0) {
    isStackAllocationSafe = HIBYTE(v25) & 0xF;
  }
  else {
    isStackAllocationSafe = v15 & 0xFFFFFFFFFFFFLL;
  }
LABEL_49:
  v45 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_137;
  }

  if (v45 < -1)
  {
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
  }

  v46 = v45 + 1;
  if (v45 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    v48 = (char *)&v123 - v47;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v48, v46, 1, v15, v25);
    v50 = v49;
    swift_bridgeObjectRelease();
    if ((v50 & 1) != 0) {
      v16 = 0LL;
    }
    else {
      v16 = strnlen(v48, 0x100uLL);
    }
    LODWORD(v15) = v130;
    v51 = v133;
  }

  else
  {
    v56 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v56, v46, 1, v15, v25);
    v58 = v57;
    swift_bridgeObjectRelease();
    if ((v58 & 1) != 0) {
      v16 = 0LL;
    }
    else {
      v16 = strnlen(v56, 0x100uLL);
    }
    LODWORD(v15) = v130;
    MEMORY[0x186E20E60](v56, -1LL, -1LL);
    v51 = v133;
  }

  v59 = swift_bridgeObjectRelease();
  if ((v51 & 0x1000000000000000LL) != 0)
  {
LABEL_137:
    v59 = String.UTF8View._foreignCount()();
    v23 = v59;
  }

  v60 = 3 * v23;
  if ((unsigned __int128)(v23 * (__int128)3LL) >> 64 != (3 * v23) >> 63)
  {
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }

  v18 = v129;
  if (v60 < -1) {
    goto LABEL_141;
  }
  v127 = v16;
  v61 = v60 + 1;
  if (v60 < 1024 || (v59 = swift_stdlib_isStackAllocationSafe(), (v59 & 1) != 0))
  {
    MEMORY[0x1895F8858](v59);
    v63 = (char *)&v123 - v62;
    v64 = v133;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v63, v61, 1, v132, v64);
    v66 = v65;
    swift_bridgeObjectRelease();
    if ((v66 & 1) != 0) {
      v67 = 0LL;
    }
    else {
      v67 = strnlen(v63, 0x401uLL);
    }
    v68 = v131;
  }

  else
  {
    v69 = (const char *)swift_slowAlloc();
    v70 = v133;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v69, v61, 1, v132, v70);
    v72 = v71;
    swift_bridgeObjectRelease();
    v68 = v131;
    if ((v72 & 1) != 0) {
      v67 = 0LL;
    }
    else {
      v67 = strnlen(v69, 0x401uLL);
    }
    MEMORY[0x186E20E60](v69, -1LL, -1LL);
  }

  v73 = v133;
  swift_bridgeObjectRelease();
  if (v127 <= 255 && v67 < 1025)
  {
    swift_bridgeObjectRelease();
    v27 = v68;
    v28 = v18;
  }

  else
  {
    swift_bridgeObjectRelease();
    v27 = v132;
    v28 = v73;
  }

  LODWORD(v11) = v128;
LABEL_87:
  v126 = v28;
  v127 = v27;
  switch((_DWORD)v11)
  {
    case 0xD:
LABEL_90:
      v74 = 513LL;
      goto LABEL_94;
    case 2:
      v74 = 4LL;
      goto LABEL_94;
    case 1:
      goto LABEL_90;
    case 0x3F:
      v74 = 514LL;
      goto LABEL_94;
  }

  v74 = 640LL;
  if ((int)v11 <= 29)
  {
    if ((_DWORD)v11 == 17)
    {
      v74 = 516LL;
    }

    else if ((_DWORD)v11 != 28)
    {
      goto LABEL_113;
    }

  if ((v25 & 0x2000000000000000LL) != 0) {
    isStackAllocationSafe = HIBYTE(v25) & 0xF;
  }
  else {
    isStackAllocationSafe = v15 & 0xFFFFFFFFFFFFLL;
  }
LABEL_49:
  v45 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_137;
  }

  if (v45 < -1)
  {
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
  }

  v46 = v45 + 1;
  if (v45 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    v48 = (char *)&v123 - v47;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v48, v46, 1, v15, v25);
    v50 = v49;
    swift_bridgeObjectRelease();
    if ((v50 & 1) != 0) {
      v16 = 0LL;
    }
    else {
      v16 = strnlen(v48, 0x100uLL);
    }
    LODWORD(v15) = v130;
    v51 = v133;
  }

  else
  {
    v56 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v56, v46, 1, v15, v25);
    v58 = v57;
    swift_bridgeObjectRelease();
    if ((v58 & 1) != 0) {
      v16 = 0LL;
    }
    else {
      v16 = strnlen(v56, 0x100uLL);
    }
    LODWORD(v15) = v130;
    MEMORY[0x186E20E60](v56, -1LL, -1LL);
    v51 = v133;
  }

  v59 = swift_bridgeObjectRelease();
  if ((v51 & 0x1000000000000000LL) != 0)
  {
LABEL_137:
    v59 = String.UTF8View._foreignCount()();
    v23 = v59;
  }

  v60 = 3 * v23;
  if ((unsigned __int128)(v23 * (__int128)3LL) >> 64 != (3 * v23) >> 63)
  {
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }

  v18 = v129;
  if (v60 < -1) {
    goto LABEL_141;
  }
  v127 = v16;
  v61 = v60 + 1;
  if (v60 < 1024 || (v59 = swift_stdlib_isStackAllocationSafe(), (v59 & 1) != 0))
  {
    MEMORY[0x1895F8858](v59);
    v63 = (char *)&v123 - v62;
    v64 = v133;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v63, v61, 1, v132, v64);
    v66 = v65;
    swift_bridgeObjectRelease();
    if ((v66 & 1) != 0) {
      v67 = 0LL;
    }
    else {
      v67 = strnlen(v63, 0x401uLL);
    }
    v68 = v131;
  }

  else
  {
    v69 = (const char *)swift_slowAlloc();
    v70 = v133;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v69, v61, 1, v132, v70);
    v72 = v71;
    swift_bridgeObjectRelease();
    v68 = v131;
    if ((v72 & 1) != 0) {
      v67 = 0LL;
    }
    else {
      v67 = strnlen(v69, 0x401uLL);
    }
    MEMORY[0x186E20E60](v69, -1LL, -1LL);
  }

  v73 = v133;
  swift_bridgeObjectRelease();
  if (v127 <= 255 && v67 < 1025)
  {
    swift_bridgeObjectRelease();
    v27 = v68;
    v28 = v18;
  }

  else
  {
    swift_bridgeObjectRelease();
    v27 = v132;
    v28 = v73;
  }

  LODWORD(v11) = v128;
LABEL_87:
  v126 = v28;
  v127 = v27;
  switch((_DWORD)v11)
  {
    case 0xD:
LABEL_90:
      v74 = 513LL;
      goto LABEL_94;
    case 2:
      v74 = 4LL;
      goto LABEL_94;
    case 1:
      goto LABEL_90;
    case 0x3F:
      v74 = 514LL;
      goto LABEL_94;
  }

  v74 = 640LL;
  if ((int)v11 <= 29)
  {
    if ((_DWORD)v11 == 17)
    {
      v74 = 516LL;
    }

    else if ((_DWORD)v11 != 28)
    {
      goto LABEL_113;
    }

  count = 0LL;
  v26 = v1 + 6;
  v27 = JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)(5u, (void *)v1[1], v1[2], (uint64_t)v6);
  done = 0;
  while (1)
  {
    JSON5Scanner._scanObjectLoop(withoutBraces:count:done:)(withoutBraces, &count, &done);
    if (v28) {
      break;
    }
    if (done)
    {
      v29 = count;
      JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((void *)v1[1], v1[2], v1[3]);
      v30 = (void *)v1[6];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v30[2] + 1LL,  1,  v30);
      }
      v32 = v30[2];
      v31 = v30[3];
      v33 = v32 + 1;
      if (v32 >= v31 >> 1) {
        v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v31 > 1),  v32 + 1,  1,  v30);
      }
      v30[2] = v33;
      v30[v32 + 4] = 7LL;
      v34 = &v30[v27 + 4];
      *v34 = v33;
      v34[1] = v29;
      v19 = v2[5] - 1LL;
      v2[6] = v30;
      goto LABEL_41;
    }
  }

  v35 = count;
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((void *)v1[1], v1[2], v1[3]);
  v36 = (void *)v1[6];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v36[2] + 1LL,  1,  v36);
  }
  v37 = v36[2];
  v38 = v36[3];
  v39 = v37 + 1;
  if (v37 >= v38 >> 1)
  {
    v41 = v36;
    v42 = v36[2];
    v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v38 > 1),  v37 + 1,  1,  v41);
    v37 = v42;
    v36 = v43;
  }

  v36[2] = v39;
  v36[v37 + 4] = 7LL;
  v40 = &v36[v27 + 4];
  *v40 = v39;
  v40[1] = v35;
  *v26 = v36;
LABEL_40:
  v19 = v2[5] - 1LL;
LABEL_41:
  v2[5] = v19;
}

    __break(1u);
    JUMPOUT(0x18304D160LL);
  }

  if (a2 >= 1) {
    v10 = 1LL;
  }
  else {
    v10 = a2;
  }
  v11 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)( (unsigned __int8 *)&__s1[v10],  a2 - v10,  (unsigned __int8 *)__s1,  a3,  a4);
  if (!v4)
  {
    v9 = (unint64_t)v11;
    if ((v12 & 1) == 0) {
      goto LABEL_34;
    }
  }

  return v9;
}

          swift_bridgeObjectRetain();
          v11 = static String._fromUTF8Repairing(_:)();
          v13 = v48;
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v15 = *(void *)(v21 + 24);
LABEL_12:
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v15 + 16));
          }

          else
          {
            v16 = (void *)(*(void *)(v0 + 16) + 24LL);
            *v16 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v15 + 24) >> 1);
            swift_bridgeObjectRelease();
          }

          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
        }

        v64 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v21 + 24) = v22;
        if ((v64 & 1) == 0)
        {
          v94 = *(void *)(v0 + 16);
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v22 + 2) + 1LL,  1,  v22);
          *(void *)(v94 + 24) = v22;
        }

        v66 = *((void *)v22 + 2);
        v65 = *((void *)v22 + 3);
        v67 = v66 + 1;
        if (v66 >= v65 >> 1) {
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v65 > 1),  v66 + 1,  1,  v22);
        }
        v68 = *(void *)(v0 + 16);
        *((void *)v22 + 2) = v67;
        v69 = &v22[v66];
        v70 = -62;
        goto LABEL_74;
      }

      v91 = (void *)swift_task_alloc();
      *(void *)(v0 + 72) = v91;
      v92 = specialized AsyncLineSequence.AsyncIterator.next();
    }

          swift_bridgeObjectRetain();
          v11 = static String._fromUTF8Repairing(_:)();
          v10 = v50;
          swift_bridgeObjectRelease();
          v18 = swift_isUniquelyReferenced_nonNull_native();
          v14 = *(void *)(v23 + 24);
LABEL_12:
          v15 = (void *)(*(void *)(v0 + 16) + 24LL);
          if ((v18 & 1) == 0)
          {
LABEL_13:
            *v15 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v14 + 24) >> 1);
            swift_bridgeObjectRelease();
            return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
          }

          swift_bridgeObjectRetain();
          v11 = static String._fromUTF8Repairing(_:)();
          v13 = v48;
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v15 = *(void *)(v21 + 24);
LABEL_12:
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v15 + 16));
          }

          else
          {
            v16 = (void *)(*(void *)(v0 + 16) + 24LL);
            *v16 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v15 + 24) >> 1);
            swift_bridgeObjectRelease();
          }

          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
        }

        v64 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v21 + 24) = v22;
        if ((v64 & 1) == 0)
        {
          v94 = *(void *)(v0 + 16);
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v22 + 2) + 1LL,  1,  v22);
          *(void *)(v94 + 24) = v22;
        }

        v66 = *((void *)v22 + 2);
        v65 = *((void *)v22 + 3);
        v67 = v66 + 1;
        if (v66 >= v65 >> 1) {
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v65 > 1),  v66 + 1,  1,  v22);
        }
        v68 = *(void *)(v0 + 16);
        *((void *)v22 + 2) = v67;
        v69 = &v22[v66];
        v70 = -62;
        goto LABEL_74;
      }

      v91 = (void *)swift_task_alloc();
      *(void *)(v0 + 72) = v91;
      v92 = specialized AsyncLineSequence.AsyncIterator.next();
    }

          swift_bridgeObjectRetain();
          v11 = static String._fromUTF8Repairing(_:)();
          v10 = v50;
          swift_bridgeObjectRelease();
          v18 = swift_isUniquelyReferenced_nonNull_native();
          v14 = *(void *)(v23 + 24);
LABEL_12:
          v15 = (void *)(*(void *)(v0 + 16) + 24LL);
          if ((v18 & 1) == 0)
          {
LABEL_13:
            *v15 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v14 + 24) >> 1);
            swift_bridgeObjectRelease();
            return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
          }

          swift_bridgeObjectRetain();
          v11 = static String._fromUTF8Repairing(_:)();
          v13 = v48;
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v15 = *(void *)(v21 + 24);
LABEL_12:
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v15 + 16));
          }

          else
          {
            v16 = (void *)(*(void *)(v0 + 16) + 24LL);
            *v16 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v15 + 24) >> 1);
            swift_bridgeObjectRelease();
          }

          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
        }

        v64 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v21 + 24) = v22;
        if ((v64 & 1) == 0)
        {
          v94 = *(void *)(v0 + 16);
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v22 + 2) + 1LL,  1,  v22);
          *(void *)(v94 + 24) = v22;
        }

        v66 = *((void *)v22 + 2);
        v65 = *((void *)v22 + 3);
        v67 = v66 + 1;
        if (v66 >= v65 >> 1) {
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v65 > 1),  v66 + 1,  1,  v22);
        }
        v68 = *(void *)(v0 + 16);
        *((void *)v22 + 2) = v67;
        v69 = &v22[v66];
        v70 = -62;
        goto LABEL_74;
      }

      v91 = (void *)swift_task_alloc();
      *(void *)(v0 + 72) = v91;
      v92 = specialized AsyncLineSequence.AsyncIterator.next();
    }

          swift_bridgeObjectRetain();
          v11 = static String._fromUTF8Repairing(_:)();
          v10 = v50;
          swift_bridgeObjectRelease();
          v18 = swift_isUniquelyReferenced_nonNull_native();
          v14 = *(void *)(v23 + 24);
LABEL_12:
          v15 = (void *)(*(void *)(v0 + 16) + 24LL);
          if ((v18 & 1) == 0)
          {
LABEL_13:
            *v15 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v14 + 24) >> 1);
            swift_bridgeObjectRelease();
            return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
          }

  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

        specialized closure #2 in Rope._Node.extract<A>(from:to:in:into:)(v25, v26, v27, v5, a5);
        return (unsigned __int16 *)swift_unknownObjectRelease();
      }

      return result;
    }

    goto LABEL_54;
  }

  if (v13 < 0) {
    goto LABEL_55;
  }
  v28 = v8[3 * v10 + 2];
  if (v28 < v13) {
    goto LABEL_55;
  }
  v6 = result;
  if (v13 != v28)
  {
    v29 = *v20;
    v30 = *(unsigned __int8 *)(*v20 + 18LL);
    v31 = *v20 + 24LL;
    swift_unknownObjectRetain();
    result = (unsigned __int16 *)(v29 + 16);
    a2 = (void *)v31;
    v15 = v13;
    a4 = v28;
    v9 = a5;
    if (v30)
    {
      specialized closure #2 in Rope._Node.extract<A>(from:to:in:into:)(result, v31, v13, v28, a5);
LABEL_35:
      result = (unsigned __int16 *)swift_unknownObjectRelease();
      goto LABEL_36;
    }

          v98 = a4;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
          {
LABEL_104:
            *(void *)&v101.st_dev = 0LL;
            v101.st_ino = 0xE000000000000000LL;
            _StringGuts.grow(_:)(22LL);
            swift_bridgeObjectRelease();
            *(void *)&v101.st_dev = 0xD000000000000014LL;
            v101.st_ino = 0x80000001839C9190LL;
            LODWORD(v99) = (_DWORD)v37;
            v91._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v91);
            swift_bridgeObjectRelease();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x18311A9D8LL);
          }

          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          v46 = (int)POSIXErrorCode.rawValue.getter();
          v47 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          v48 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v39 = objc_msgSend(v47, sel_initWithDomain_code_userInfo_, v48, v46, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v49 = objc_msgSend(v39, sel_domain);
          v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
          v52 = v51;

          if (v50 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v52 == v53)
          {
            swift_bridgeObjectRelease_n();
          }

          else
          {
            v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v54 & 1) == 0)
            {
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
            }
          }

    if (v9 < v13) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
    }
    v30 = *((void *)v11 + 2);
    v29 = *((void *)v11 + 3);
    v12 = v30 + 1;
    v10 = v99;
    if (v30 >= v29 >> 1)
    {
      v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v29 > 1),  v30 + 1,  1,  v11);
      v10 = v99;
      v11 = v79;
    }

    *((void *)v11 + 2) = v12;
    v31 = v11 + 32;
    v32 = &v11[16 * v30 + 32];
    *(void *)v32 = v13;
    *((void *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        v33 = v12 - 1;
        if (v12 >= 4)
        {
          v38 = &v31[16 * v12];
          v39 = *((void *)v38 - 8);
          v40 = *((void *)v38 - 7);
          v44 = __OFSUB__(v40, v39);
          v41 = v40 - v39;
          if (v44) {
            goto LABEL_119;
          }
          v43 = *((void *)v38 - 6);
          v42 = *((void *)v38 - 5);
          v44 = __OFSUB__(v42, v43);
          v36 = v42 - v43;
          v37 = v44;
          if (v44) {
            goto LABEL_120;
          }
          v45 = v12 - 2;
          v46 = &v31[16 * v12 - 32];
          v48 = *(void *)v46;
          v47 = *((void *)v46 + 1);
          v44 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          if (v44) {
            goto LABEL_122;
          }
          v44 = __OFADD__(v36, v49);
          v50 = v36 + v49;
          if (v44) {
            goto LABEL_125;
          }
          if (v50 >= v41)
          {
            v68 = &v31[16 * v33];
            v70 = *(void *)v68;
            v69 = *((void *)v68 + 1);
            v44 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v44) {
              goto LABEL_129;
            }
            v61 = v36 < v71;
            goto LABEL_83;
          }
        }

        else
        {
          if (v12 != 3)
          {
            v62 = *((void *)v11 + 4);
            v63 = *((void *)v11 + 5);
            v44 = __OFSUB__(v63, v62);
            v55 = v63 - v62;
            v56 = v44;
            goto LABEL_77;
          }

          v35 = *((void *)v11 + 4);
          v34 = *((void *)v11 + 5);
          v44 = __OFSUB__(v34, v35);
          v36 = v34 - v35;
          v37 = v44;
        }

        if ((v37 & 1) != 0) {
          goto LABEL_121;
        }
        v45 = v12 - 2;
        v51 = &v31[16 * v12 - 32];
        v53 = *(void *)v51;
        v52 = *((void *)v51 + 1);
        v54 = __OFSUB__(v52, v53);
        v55 = v52 - v53;
        v56 = v54;
        if (v54) {
          goto LABEL_124;
        }
        v57 = &v31[16 * v33];
        v59 = *(void *)v57;
        v58 = *((void *)v57 + 1);
        v44 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v44) {
          goto LABEL_127;
        }
        if (__OFADD__(v55, v60)) {
          goto LABEL_128;
        }
        if (v55 + v60 >= v36)
        {
          v61 = v36 < v60;
LABEL_83:
          if (v61) {
            v33 = v45;
          }
          goto LABEL_85;
        }

  v55 = v18 >> 10;
  if (v18 >> 10 >= v10 && v55 < v22)
  {
    while (1)
    {
      specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v23, v18, v19, v20, v21, 1, &v85);
      if (v88 != 2)
      {
        v18 = BigSubstring.UTF8View.index(after:)();
        v19 = v59;
        v20 = v60;
        v21 = v61;
        goto LABEL_55;
      }

      if (v10 >= v55) {
        break;
      }
      v18 = BigSubstring.UTF8View.index(before:)();
      v19 = v56;
      v20 = v57;
      v21 = v58;
      v55 = v18 >> 10;
      if (v18 >> 10 < v10) {
        goto LABEL_55;
      }
      v17 = v83;
      v22 = v84;
      v23 = v80;
      if (v55 >= v84) {
        goto LABEL_21;
      }
    }

    v18 = v7;
    v19 = v63;
    v20 = v64;
    v21 = v62;
LABEL_55:
    v17 = v83;
    v22 = v84;
    goto LABEL_20;
  }

  v56 = v20 >> 10;
  if (v20 >> 10 >= v17 && v56 < v24)
  {
    while (1)
    {
      specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v78, v20, v21, v22, v23, 1, &v85);
      if (v88 != 2) {
        break;
      }
      if (v17 >= v56) {
        goto LABEL_20;
      }
      v20 = BigString.UTF8View.index(before:)();
      v21 = v57;
      v22 = v58;
      v23 = v59;
      v56 = v20 >> 10;
      if (v20 >> 10 < v17) {
        goto LABEL_21;
      }
      v24 = v79;
      if (v56 >= v79) {
        goto LABEL_22;
      }
    }

    v20 = BigString.UTF8View.index(after:)();
    v21 = v60;
    v22 = v61;
    v23 = v62;
    goto LABEL_21;
  }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v54 = v40 & 0xFFFFFFFFFFFFF0FFLL | (v57 << 8);
      v37 = v220;
      v53 = v221;
      goto LABEL_30;
    }

    v55 = v44;
    v34 = v211;
LABEL_45:
    if (v41)
    {
LABEL_217:
      __break(1u);
      goto LABEL_218;
    }

    goto LABEL_46;
  }

  swift_unknownObjectRetain();
  outlined retain of AttributedString.Runs((uint64_t)v268);
  v52 = swift_unknownObjectRetain();
  v53 = v221;
  v54 = specialized Rope._endPath.getter(v52);
  result = swift_unknownObjectRelease();
  v55 = 0LL;
  v41 = 0LL;
  if (v35)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v56 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v210, v54, v55, v35, v53);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }

  v56 = 0LL;
LABEL_48:
  v207 = (char *)v37 - v41;
  if (__OFSUB__(v37, v41))
  {
LABEL_205:
    __break(1u);
    goto LABEL_206;
  }

  v63 = v209;
  v64 = *(_OWORD *)(v209 + 32);
  v267[3] = *(_OWORD *)(v209 + 16);
  v267[4] = v64;
  v267[5] = *(_OWORD *)(v209 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v41))
  {
LABEL_206:
    __break(1u);
    goto LABEL_207;
  }

  v180 = BigString.UTF8View.index(_:offsetBy:)();
  v66 = v65;
  v177 = v68;
  v178 = v67;
  result = outlined release of Locale((uint64_t)&v255);
  v198 = *((void *)&v269 + 1);
  if (v56 >= *((uint64_t *)&v269 + 1))
  {
LABEL_207:
    __break(1u);
    goto LABEL_208;
  }

  if (v210 != *(void *)(v209 + 88))
  {
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
    goto LABEL_211;
  }

  v175 = v66;
  v69 = *(uint64_t **)(v209 + 64);
  if (v55)
  {
    v70 = v55 + 24 * ((v54 >> ((4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C)) & 0xF);
    v213 = v54;
    v71 = v56;
    v73 = *(void *)(v70 + 32);
    v72 = *(void *)(v70 + 40);
    swift_bridgeObjectRetain();
    v179 = v72;
    v56 = v71;
    result = swift_bridgeObjectRetain();
    v74 = v210;
    v75 = v210;
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v54, (uint64_t)v69);
    v73 = v76;
    v179 = v77;
    result = swift_unknownObjectRelease();
    v69 = *(uint64_t **)(v209 + 64);
    v75 = *(void *)(v209 + 88);
    v74 = v210;
  }

  v176 = (__int128 *)(v209 + 16);
  v204 = v56 + 1;
  *(void *)&v243 = v74;
  *((void *)&v243 + 1) = v54;
  v220 = (__int128 *)&v261;
  *(void *)&v244 = v55;
  v197 = (uint64_t *)(v212 + 40);
  v216 = (char *)v247 + 8;
  v217 = v73;
LABEL_56:
  if (v74 != v75) {
    goto LABEL_198;
  }
  v201 = v75;
  v213 = v54;
  if (v55)
  {
    v78 = *(void *)(v55 + 24 * ((v54 >> ((4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    v78 = specialized Rope._Node.subscript.getter(v54, (uint64_t)v69);
  }

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v79 = &v207[v78];
  if (__OFADD__(v207, v78)) {
    goto LABEL_199;
  }
  if (v69)
  {
    v80 = ((-15LL << ((4 * *((_BYTE *)v69 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v69 + 18) | ((unint64_t)*((unsigned __int16 *)v69 + 8) << ((4 * *((_BYTE *)v69 + 18) + 8) & 0x3C));
    result = swift_unknownObjectRetain();
  }

  else
  {
    v80 = 0LL;
  }

  v81 = v213;
  v82 = v217;
  if (v213 >= v80) {
    goto LABEL_200;
  }
  v202 = v55;
  if (v55)
  {
    v83 = (4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C;
    v84 = ((v213 >> v83) & 0xF) + 1;
    if (v84 < *(unsigned __int16 *)(v55 + 16))
    {
      v203 = (v84 << v83) | ((-15LL << v83) - 1) & v213;
      result = swift_unknownObjectRelease_n();
      v85 = (uint64_t)v216;
LABEL_71:
      v69 = (uint64_t *)v244;
      goto LABEL_79;
    }
  }

  v86 = *((unsigned __int8 *)v69 + 18);
  v87 = (4 * v86 + 8) & 0x3C;
  v88 = (v213 >> v87) & 0xF;
  *(void *)&v258 = v88;
  if (v86)
  {
    swift_unknownObjectRetain();
    v82 = v217;
    v89 = specialized closure #1 in Rope._Node.formSuccessor(of:)( (uint64_t)(v69 + 3),  (uint64_t *)&v258,  (uint64_t)&v243,  (uint64_t)v69,  v86);
    result = swift_unknownObjectRelease();
    v85 = (uint64_t)v216;
    if ((v89 & 1) != 0)
    {
      result = swift_unknownObjectRelease_n();
      v203 = *((void *)&v243 + 1);
      v81 = v213;
      goto LABEL_71;
    }
  }

  else
  {
    v90 = v88 + 1;
    if (v88 + 1 < (unint64_t)*((unsigned __int16 *)v69 + 8))
    {
      result = swift_unknownObjectRelease_n();
      v81 = v213;
      v203 = (v90 << v87) | ((-15LL << v87) - 1) & v213;
      v55 = v202;
      v85 = (uint64_t)v216;
      goto LABEL_79;
    }

    v55 = v202;
    v85 = (uint64_t)v216;
  }

  if (v69)
  {
    v91 = *((unsigned __int8 *)v69 + 18);
    v92 = *((unsigned __int16 *)v69 + 8);
    result = swift_unknownObjectRelease_n();
    v93 = (4 * v91 + 8) & 0x3C;
    v94 = ((-15LL << v93) - 1) & v91;
    v85 = (uint64_t)v216;
    v95 = v92 << v93;
    v55 = v202;
    v203 = v94 | v95;
  }

  else
  {
    v203 = 0LL;
  }

  v81 = v213;
  v69 = 0LL;
  *(void *)&v243 = v201;
LABEL_79:
  if (v204 != v198)
  {
    if ((void)v243 != *(void *)(v63 + 88))
    {
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
      goto LABEL_203;
    }

    v210 = v243;
    v194 = v69;
    v195 = v79;
    if (v69)
    {
      v96 = &v69[3 * ((v203 >> ((4 * *((_BYTE *)v69 + 18) + 8) & 0x3C)) & 0xF)];
      v97 = v96[4];
      v98 = v96[5];
      swift_bridgeObjectRetain();
      v199 = v98;
      swift_bridgeObjectRetain();
    }

    else
    {
      v99 = *(void *)(v63 + 64);
      swift_unknownObjectRetain();
      v82 = v217;
      specialized Rope._Node.subscript.getter(v203, v99);
      v199 = v100;
      v97 = v101;
      swift_unknownObjectRelease();
    }

    result = swift_bridgeObjectRetain();
    v102 = 0LL;
    v103 = v197;
    v221 = v97;
    while (1)
    {
      v105 = v102 + 1;
      if (__OFADD__(v102, 1LL))
      {
        __break(1u);
LABEL_193:
        __break(1u);
        goto LABEL_194;
      }

      v106 = *(v103 - 1);
      v107 = *v103;
      if (*(void *)(v82 + 16))
      {
        swift_bridgeObjectRetain_n();
        v108 = specialized __RawDictionaryStorage.find<A>(_:)(v106, v107);
        if ((v109 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v82 + 56) + 72 * v108, (uint64_t)&v238);
        }

        else
        {
          v242 = 0LL;
          v240 = 0u;
          v241 = 0u;
          v238 = 0u;
          v239 = 0u;
        }

        swift_bridgeObjectRelease();
        v97 = v221;
        if (!*(void *)(v221 + 16))
        {
LABEL_94:
          v237 = 0LL;
          v235 = 0u;
          v236 = 0u;
          v233 = 0u;
          v234 = 0u;
          goto LABEL_101;
        }
      }

      else
      {
        v242 = 0LL;
        v240 = 0u;
        v241 = 0u;
        v238 = 0u;
        v239 = 0u;
        swift_bridgeObjectRetain();
        if (!*(void *)(v97 + 16)) {
          goto LABEL_94;
        }
      }

      swift_bridgeObjectRetain();
      v110 = specialized __RawDictionaryStorage.find<A>(_:)(v106, v107);
      if ((v111 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v97 + 56) + 72 * v110, (uint64_t)&v233);
      }

      else
      {
        v237 = 0LL;
        v235 = 0u;
        v236 = 0u;
        v233 = 0u;
        v234 = 0u;
      }

      swift_bridgeObjectRelease();
LABEL_101:
      swift_bridgeObjectRelease();
      v69 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v238,  (uint64_t)&v243,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v233,  v85,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!*((void *)&v244 + 1))
      {
        if ((void)v248) {
          goto LABEL_118;
        }
        outlined destroy of Any?( (uint64_t)&v243,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v233,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = outlined destroy of Any?( (uint64_t)&v238,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_88;
      }

      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v243,  (uint64_t)v227,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!(void)v248) {
        goto LABEL_117;
      }
      v112 = *(_OWORD *)(v85 + 48);
      v224 = *(_OWORD *)(v85 + 32);
      v225 = v112;
      v226 = *(void *)(v85 + 64);
      v113 = *(_OWORD *)(v85 + 16);
      v222 = *(_OWORD *)v85;
      v223 = v113;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v227,  (uint64_t)v267);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v222,  (uint64_t)v266);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v267,  (uint64_t)&v258,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v266,  (uint64_t)v220,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v260)
      {
        if (!v262)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v258);
LABEL_86:
          v104 = 0;
          goto LABEL_87;
        }

        outlined init with take of any PredicateExpression<Self.Output == B1>(&v258, (uint64_t)v263);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v220, (uint64_t)v257);
        v114 = v264;
        v215 = v265;
        v214 = __swift_project_boxed_opaque_existential_1(v263, v264);
        v219 = &v175;
        v115 = *(void *)(v114 - 8);
        MEMORY[0x1895F8858](v214);
        v117 = (char *)&v175 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v257,  (uint64_t)v256);
        v118 = type metadata accessor for Optional();
        v218 = &v175;
        v119 = *(void *)(v118 - 8);
        MEMORY[0x1895F8858](v118);
        v121 = (char *)&v175 - v120;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v122 = swift_dynamicCast();
        v123 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v115 + 56);
        if (v122)
        {
          v123(v121, 0LL, 1LL, v114);
          (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v117, v121, v114);
          v104 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v115 + 8))(v117, v114);
        }

        else
        {
          v123(v121, 1LL, 1LL, v114);
          (*(void (**)(char *, uint64_t))(v119 + 8))(v121, v118);
          v104 = 0;
        }

        v34 = v211;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v257);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v263);
        v85 = (uint64_t)v216;
        v82 = v217;
      }

      else
      {
        if (v262)
        {
          outlined destroy of Any?( (uint64_t)v220,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_86;
        }

        v104 = 1;
      }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v335 = v26 & 0xFFFFFFFFFFFFF0FFLL | (v39 << 8);
      v38 = v42;
      v19 = v353;
      goto LABEL_30;
    }

    v42 = v30;
    v20 = v348;
LABEL_45:
    if (v27)
    {
LABEL_411:
      __break(1u);
      goto LABEL_412;
    }

    goto LABEL_46;
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v434);
  v335 = specialized Rope._endPath.getter(v21);
  result = swift_unknownObjectRelease();
  v38 = 0LL;
  v27 = 0LL;
  if (v21)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v355 = (void *)specialized Rope._Node.distanceFromStart<A>(to:in:)(v342, v335, v38, v21, v24);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }

  v355 = 0LL;
LABEL_48:
  v350 = (char *)((char *)v358 - (char *)v27);
  if (__OFSUB__(v358, v27))
  {
LABEL_383:
    __break(1u);
    goto LABEL_384;
  }

  v46 = *(_OWORD *)(v20 + 32);
  v431 = *(_OWORD *)(v20 + 16);
  v432 = v46;
  v433 = *(_OWORD *)(v20 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v27))
  {
LABEL_384:
    __break(1u);
    goto LABEL_385;
  }

  v47 = (_OWORD *)(v20 + 16);
  v48 = v343;
  v329 = BigString.UTF8View.index(_:offsetBy:)();
  v326 = v50;
  v327 = v49;
  v325 = v51;
  result = outlined release of Locale((uint64_t)&v388);
  v52 = v352;
  v328 = v345;
  v333 = v344;
  v336 = *((void *)&v435 + 1);
  v339 = (_OWORD *)(v20 + 16);
  v316 = v38;
  if (v355 == *((void **)&v435 + 1)) {
    goto LABEL_147;
  }
  if (v342 != *(void *)(v20 + 88))
  {
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
    goto LABEL_403;
  }

  if (v38)
  {
    v53 = v38 + 24 * ((v335 >> ((4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C)) & 0xF);
    v55 = *(void *)(v53 + 32);
    v54 = *(void *)(v53 + 40);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }

  else
  {
    v56 = *(void *)(v20 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v335, v56);
    v55 = v57;
    v54 = v58;
    result = swift_unknownObjectRelease();
  }

  if (*((uint64_t *)&v434[0] + 1) >= (uint64_t)v355)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_115;
  }

  v311 = *((void *)&v434[0] + 1);
  v312 = v54;
  v359 = v376;
  v356 = (__int128 *)v409;
  v315 = (uint64_t *)(v347 + 40);
  v59 = v335;
  v60 = v38;
  v333 = v55;
LABEL_57:
  v62 = *(void *)(v20 + 64);
  v61 = *(void *)(v20 + 72);
  v63 = *(void *)(v20 + 88);
  v368 = v342;
  v369 = v59;
  v370 = v60;
  if (v342 != v63) {
    goto LABEL_404;
  }
  v64 = v59;
  v360 = (_BYTE *)v61;
  v65 = v19;
  if (v62)
  {
    v66 = *(unsigned __int8 *)(v62 + 18);
    v67 = v60;
    result = swift_unknownObjectRetain();
    v60 = v67;
    if (v64 <= v66) {
      goto LABEL_405;
    }
  }

  else if (!v59)
  {
    goto LABEL_405;
  }

  if (!v60 || (v68 = (4 * *(_BYTE *)(v60 + 18) + 8) & 0x3C, ((v64 >> v68) & 0xF) == 0))
  {
    v70 = *(unsigned __int8 *)(v62 + 18);
    v71 = (4 * v70 + 8) & 0x3C;
    v72 = (v64 >> v71) & 0xF;
    *(void *)&v407 = v72;
    if (v70)
    {
      swift_unknownObjectRetain();
      v73 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v62 + 16,  v62 + 24,  (uint64_t *)&v407,  (uint64_t)&v368,  v70);
      result = swift_unknownObjectRelease();
      if ((v73 & 1) == 0) {
        goto LABEL_410;
      }
      if (v368 != v342) {
        goto LABEL_406;
      }
      v60 = v370;
      v74 = v369;
      v19 = v353;
      if (v370) {
        goto LABEL_69;
      }
    }

    else
    {
      if (!v72) {
        goto LABEL_410;
      }
      v19 = v65;
      v74 = ((v72 - 1) << v71) | ((-15LL << v71) - 1) & v64;
      v369 = v74;
      v370 = v62;
      v60 = v62;
      if (v62)
      {
LABEL_69:
        v69 = v74;
        goto LABEL_70;
      }
    }

    swift_unknownObjectRetain();
    v69 = v74;
    v76 = specialized Rope._Node.subscript.getter(v74, v62);
    swift_unknownObjectRelease();
    v324 = 0LL;
    v77 = 1;
    goto LABEL_74;
  }

  v69 = ((((v64 >> v68) & 0xF) - 1) << v68) | ((-15LL << v68) - 1) & v64;
  v369 = v69;
  v19 = v65;
LABEL_70:
  v75 = (v69 >> ((4 * *(_BYTE *)(v60 + 18) + 8) & 0x3C)) & 0xF;
  v324 = v60;
  v76 = *(void *)(v60 + 24LL * v75 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77 = 0;
LABEL_74:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFSUB__(v350, v76)) {
    goto LABEL_407;
  }
  if (v342 != *(void *)(v20 + 88)) {
    goto LABEL_408;
  }
  v313 = &v350[-v76];
  v314 = v69;
  if ((v77 & 1) != 0)
  {
    v78 = *(void *)(v20 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v69, v78);
    v328 = v79;
    v81 = v80;
    swift_unknownObjectRelease();
  }

  else
  {
    v82 = v324 + 24 * ((v69 >> ((4 * *(_BYTE *)(v324 + 18) + 8) & 0x3C)) & 0xF);
    v81 = *(void *)(v82 + 32);
    v83 = *(void *)(v82 + 40);
    swift_bridgeObjectRetain();
    v328 = v83;
    swift_bridgeObjectRetain();
  }

  v355 = (void *)((char *)v355 - 1);
  result = swift_bridgeObjectRetain();
  v84 = 0LL;
  v85 = v315;
  v360 = (_BYTE *)v81;
  while (1)
  {
    v87 = v84 + 1;
    if (__OFADD__(v84, 1LL)) {
      goto LABEL_369;
    }
    v88 = *(v85 - 1);
    v89 = *v85;
    if (*(void *)(v55 + 16))
    {
      swift_bridgeObjectRetain_n();
      v90 = specialized __RawDictionaryStorage.find<A>(_:)(v88, v89);
      if ((v91 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v55 + 56) + 72 * v90, (uint64_t)&v399);
      }

      else
      {
        v403 = 0LL;
        v402 = 0u;
        v401 = 0u;
        v400 = 0u;
        v399 = 0u;
      }

      swift_bridgeObjectRelease();
      v81 = (uint64_t)v360;
      if (!*((void *)v360 + 2))
      {
LABEL_89:
        v397 = 0LL;
        v396 = 0u;
        v395 = 0u;
        v394 = 0u;
        v393 = 0u;
        goto LABEL_96;
      }
    }

    else
    {
      v403 = 0LL;
      v402 = 0u;
      v401 = 0u;
      v400 = 0u;
      v399 = 0u;
      swift_bridgeObjectRetain();
      if (!*(void *)(v81 + 16)) {
        goto LABEL_89;
      }
    }

    swift_bridgeObjectRetain();
    v92 = specialized __RawDictionaryStorage.find<A>(_:)(v88, v89);
    if ((v93 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v81 + 56) + 72 * v92, (uint64_t)&v393);
    }

    else
    {
      v397 = 0LL;
      v396 = 0u;
      v395 = 0u;
      v394 = 0u;
      v393 = 0u;
    }

    swift_bridgeObjectRelease();
LABEL_96:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v399,  (uint64_t)&v368,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v393,  (uint64_t)v359,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v371)
    {
      if (v377) {
        goto LABEL_113;
      }
      outlined destroy of Any?( (uint64_t)&v368,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v393,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?( (uint64_t)&v399,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_83;
    }

    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v368,  (uint64_t)&v383,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v377) {
      break;
    }
    v94 = *((_OWORD *)v359 + 3);
    v380 = *((_OWORD *)v359 + 2);
    v381 = v94;
    v382 = *((void *)v359 + 8);
    v95 = *((_OWORD *)v359 + 1);
    v378 = *(_OWORD *)v359;
    v379 = v95;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v383,  (uint64_t)v366);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v378,  (uint64_t)&v361);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v366,  (uint64_t)&v407,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v361,  (uint64_t)v356,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v408)
    {
      if (!v410)
      {
        v86 = 1;
        goto LABEL_82;
      }

      outlined destroy of Any?((uint64_t)v356, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_81:
      v86 = 0;
      goto LABEL_82;
    }

    if (!v410)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v407);
      goto LABEL_81;
    }

    outlined init with take of any PredicateExpression<Self.Output == B1>(&v407, (uint64_t)v419);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v356, (uint64_t)v418);
    v96 = v420;
    v349 = v421;
    v346 = __swift_project_boxed_opaque_existential_1(v419, v420);
    v354 = v310;
    v97 = *(void *)(v96 - 8);
    MEMORY[0x1895F8858](v346);
    v99 = (char *)v310 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v418,  (uint64_t)v416);
    v100 = type metadata accessor for Optional();
    v351 = (unint64_t)v310;
    v101 = *(void *)(v100 - 8);
    MEMORY[0x1895F8858](v100);
    v103 = (char *)v310 - v102;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v104 = swift_dynamicCast();
    v105 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56);
    if (v104)
    {
      v105(v103, 0LL, 1LL, v96);
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v99, v103, v96);
      v86 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v96);
    }

    else
    {
      v105(v103, 1LL, 1LL, v96);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v103, v100);
      v86 = 0;
    }

    v20 = v348;
    v55 = v333;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v418);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v419);
    v19 = v353;
LABEL_82:
    outlined destroy of Any?((uint64_t)&v361, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v366, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v378);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
    outlined destroy of Any?( (uint64_t)&v368,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?( (uint64_t)&v393,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    result = outlined destroy of Any?( (uint64_t)&v399,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v86 & 1) == 0) {
      goto LABEL_114;
    }
LABEL_83:
    v85 += 2;
    ++v84;
    v81 = (uint64_t)v360;
    if (v87 == v19)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v106 = v313;
      v59 = v314;
      v350 = v313;
      v47 = v339;
      v60 = v324;
      if (v311 >= (uint64_t)v355)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v350 = v106;
        goto LABEL_115;
      }

      goto LABEL_57;
    }
  }

  outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
LABEL_113:
  outlined destroy of Any?( (uint64_t)&v368,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?( (uint64_t)&v393,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?( (uint64_t)&v399,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_114:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47 = v339;
LABEL_115:
  v107 = v329;
  v108 = v47[1];
  v428 = *v47;
  v429 = v108;
  v430 = v47[2];
  result = BigString.utf8.getter();
  if (__OFSUB__(v350, v107 >> 11)) {
    goto LABEL_402;
  }
  v109 = BigString.UTF8View.index(_:offsetBy:)();
  v111 = v110;
  v113 = v112;
  v115 = v114;
  outlined release of Locale((uint64_t)&v389);
  else {
    v116 = v109;
  }
  else {
    v117 = v111;
  }
  else {
    v118 = v113;
  }
  else {
    v119 = v115;
  }
  v120 = v47[1];
  v425 = *v47;
  v426 = v120;
  v427 = v47[2];
  BigString.unicodeScalars.getter();
  v52 = v116;
  v121 = BigString.UnicodeScalarView.index(after:)();
  v123 = v122;
  v125 = v124;
  v127 = v126;
  result = outlined release of Locale((uint64_t)&v390);
  v128 = *v47;
  v129 = v47[1];
  v417[2] = v47[2];
  v417[1] = v129;
  v417[0] = v128;
  if (v121 >> 10 < v52 >> 10)
  {
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
LABEL_408:
    __break(1u);
    goto LABEL_409;
  }

  v419[0] = v52;
  v328 = v117;
  v419[1] = v117;
  v333 = v118;
  v419[2] = v118;
  v420 = v119;
  v421 = (void *)v121;
  v422 = v123;
  v423 = v125;
  v424 = v127;
  v130 = v357[2];
  v48 = v119;
  if (!v130 || v52 >> 10 == v121 >> 10)
  {
LABEL_146:
    v20 = v348;
LABEL_147:
    v327 = v52;
    result = outlined release of AttributedString.Runs((uint64_t)v434);
    goto LABEL_148;
  }

  v131 = v121;
  v360 = (_BYTE *)(v121 >> 10);
  v327 = v52;
  outlined retain of Locale((uint64_t)v417);
  swift_bridgeObjectRetain();
  v132 = 5LL;
  v133 = v130;
  while (v357[v132])
  {
    swift_bridgeObjectRelease();
    v132 += 2LL;
    if (!--v133)
    {
      swift_bridgeObjectRelease();
      goto LABEL_140;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v134 = BigString.startIndex.getter();
  v135 = (unint64_t)v360;
  if ((unint64_t)v360 <= v134 >> 10)
  {
LABEL_140:
    v52 = v327;
    v141 = v333;
LABEL_141:
    v416[0] = v52;
    v416[1] = v328;
    v333 = v141;
    v416[2] = v141;
    v416[3] = v48;
    v416[4] = v131;
    v416[5] = v123;
    v416[6] = v125;
    v416[7] = v127;
    v142 = v357[2];
    if (v142)
    {
      v143 = 5LL;
      while (!v357[v143])
      {
        v143 += 2LL;
        if (!--v142) {
          goto LABEL_145;
        }
      }

      v327 = v52;
      v165 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      v166 = (char *)MEMORY[0x18961AFE8];
      do
      {
        v167 = *v165;
        if (*v165)
        {
          v168 = *(v165 - 1);
          if ((v167 & 0x2000000000000000LL) != 0 ? HIBYTE(v167) & 0xF : v168 & 0xFFFFFFFFFFFFLL)
          {
            if ((v167 & 0x1000000000000000LL) != 0)
            {
              v170 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }

            else
            {
              if ((v167 & 0x2000000000000000LL) != 0)
              {
                v368 = *(v165 - 1);
                v369 = v167 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }

              else
              {
                if ((v168 & 0x1000000000000000LL) == 0) {
                  _StringObject.sharedUTF8.getter();
                }
                swift_bridgeObjectRetain();
              }

              v170 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v166 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v166 + 2) + 1LL,  1,  v166);
            }
            v172 = *((void *)v166 + 2);
            v171 = *((void *)v166 + 3);
            if (v172 >= v171 >> 1) {
              v166 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v171 > 1),  v172 + 1,  1,  v166);
            }
            *((void *)v166 + 2) = v172 + 1;
            *(_DWORD *)&v166[4 * v172 + 32] = v170;
          }
        }

        v165 += 2;
        --v130;
      }

      while (v130);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v398);
      v173 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v166);
      v175 = v174;
      v177 = v176;
      v179 = v178;
      swift_bridgeObjectRelease();
      outlined release of Locale((uint64_t)&v399);
      outlined release of Locale((uint64_t)v417);
      result = outlined release of AttributedString.Runs((uint64_t)v434);
      v20 = v348;
      if (v179 != 2)
      {
        if ((unint64_t)v360 < v173 >> 10)
        {
LABEL_420:
          __break(1u);
          goto LABEL_421;
        }

        v327 = v173;
        v328 = v175;
        v333 = v177;
        v48 = v179;
      }

      swift_unknownObjectRelease();
      v33 = v164;
      swift_unknownObjectRelease();
      v168 = v21 & 0xFFFFFFFFFFFFF0FFLL | (v35 << 8);
      goto LABEL_30;
    }

    v14 = v156;
    v17 = v178;
LABEL_45:
    if (v22)
    {
LABEL_200:
      __break(1u);
      goto LABEL_201;
    }

    goto LABEL_46;
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v217);
  v168 = specialized Rope._endPath.getter(v15);
  result = (unint64_t *)swift_unknownObjectRelease();
  v33 = 0LL;
  v22 = 0LL;
  if (v15)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v34 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v169, v168, v33, v15, v19);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_48;
  }

  v34 = 0LL;
LABEL_48:
  v163 = v17 - v22;
  if (__OFSUB__(v17, v22))
  {
LABEL_190:
    __break(1u);
    goto LABEL_191;
  }

  v41 = *(_OWORD *)(v14 + 32);
  v216[3] = *(_OWORD *)(v14 + 16);
  v216[4] = v41;
  v216[5] = *(_OWORD *)(v14 + 48);
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(0LL, v22))
  {
LABEL_191:
    __break(1u);
    goto LABEL_192;
  }

  v143 = BigString.UTF8View.index(_:offsetBy:)();
  v43 = v42;
  v140 = v45;
  v141 = v44;
  result = (unint64_t *)outlined release of Locale((uint64_t)&v206);
  v155 = *((void *)&v218 + 1);
  if (v34 >= *((uint64_t *)&v218 + 1))
  {
LABEL_192:
    __break(1u);
    goto LABEL_193;
  }

  if (v169 != *(void *)(v14 + 88))
  {
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
    goto LABEL_196;
  }

  v138 = v43;
  v46 = *(uint64_t **)(v14 + 64);
  if (v33)
  {
    v47 = v168;
    v48 = v33 + 24 * ((v168 >> ((4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C)) & 0xF);
    v49 = *(void *)(v48 + 40);
    v173 = *(void *)(v48 + 32);
    swift_bridgeObjectRetain();
    v142 = v49;
    result = (unint64_t *)swift_bridgeObjectRetain();
    v50 = v169;
    v51 = v169;
  }

  else
  {
    swift_unknownObjectRetain();
    v47 = v168;
    specialized Rope._Node.subscript.getter(v168, (uint64_t)v46);
    v173 = v52;
    v142 = v53;
    result = (unint64_t *)swift_unknownObjectRelease();
    v46 = *(uint64_t **)(v14 + 64);
    v51 = *(void *)(v14 + 88);
    v50 = v169;
  }

  v139 = (__int128 *)(v14 + 16);
  v159 = v34 + 1;
  v186 = v50;
  v187 = v47;
  v176 = (__int128 *)&v213;
  v177 = &v194;
  v188 = (uint64_t *)v33;
  v154 = (uint64_t *)(v166 + 40);
LABEL_56:
  if (v50 != v51) {
    goto LABEL_183;
  }
  v164 = v33;
  if (v33)
  {
    v54 = v168;
    v55 = *(void *)(v33 + 24 * ((v168 >> ((4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    v54 = v168;
    v55 = specialized Rope._Node.subscript.getter(v168, (uint64_t)v46);
  }

  swift_bridgeObjectRelease();
  result = (unint64_t *)swift_bridgeObjectRelease();
  if (__OFADD__(v163, v55)) {
    goto LABEL_184;
  }
  v151 = v163 + v55;
  if (v46)
  {
    v56 = ((-15LL << ((4 * *((_BYTE *)v46 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v46 + 18) | ((unint64_t)*((unsigned __int16 *)v46 + 8) << ((4 * *((_BYTE *)v46 + 18) + 8) & 0x3C));
    result = (unint64_t *)swift_unknownObjectRetain();
  }

  else
  {
    v56 = 0LL;
  }

  v57 = v164;
  v58 = v173;
  if (v54 >= v56) {
    goto LABEL_185;
  }
  if (v164)
  {
    v59 = (4 * *(_BYTE *)(v164 + 18) + 8) & 0x3C;
    v60 = ((v54 >> v59) & 0xF) + 1;
    if (v60 < *(unsigned __int16 *)(v164 + 16))
    {
      v158 = (v60 << v59) | ((-15LL << v59) - 1) & v54;
      result = (unint64_t *)swift_unknownObjectRelease_n();
LABEL_71:
      v46 = v188;
      v65 = v172;
      goto LABEL_79;
    }
  }

  v61 = *((unsigned __int8 *)v46 + 18);
  v62 = (4 * v61 + 8) & 0x3C;
  v63 = (v54 >> v62) & 0xF;
  *(void *)&v211 = v63;
  if (v61)
  {
    swift_unknownObjectRetain();
    v64 = specialized closure #1 in Rope._Node.formSuccessor(of:)( (uint64_t)(v46 + 3),  (uint64_t *)&v211,  (uint64_t)&v186,  (uint64_t)v46,  v61);
    result = (unint64_t *)swift_unknownObjectRelease();
    if ((v64 & 1) != 0)
    {
      result = (unint64_t *)swift_unknownObjectRelease_n();
      v158 = v187;
      v58 = v173;
      goto LABEL_71;
    }

    goto LABEL_74;
  }

  v66 = v63 + 1;
  if (v63 + 1 >= (unint64_t)*((unsigned __int16 *)v46 + 8))
  {
LABEL_74:
    if (v46)
    {
      v67 = *((unsigned __int8 *)v46 + 18);
      v68 = *((unsigned __int16 *)v46 + 8);
      result = (unint64_t *)swift_unknownObjectRelease_n();
      v158 = ((-15LL << ((4 * v67 + 8) & 0x3C)) - 1) & v67 | (unint64_t)(v68 << ((4 * v67 + 8) & 0x3C));
    }

    else
    {
      v158 = 0LL;
    }

    v46 = 0LL;
    v186 = v51;
    goto LABEL_78;
  }

  result = (unint64_t *)swift_unknownObjectRelease_n();
  v158 = (v66 << v62) | ((-15LL << v62) - 1) & v54;
LABEL_78:
  v65 = v172;
  v58 = v173;
LABEL_79:
  if (v159 != v155)
  {
    if (v186 != *(void *)(v14 + 88))
    {
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
      goto LABEL_188;
    }

    v169 = v186;
    v153 = v51;
    v150 = v46;
    if (v46)
    {
      v69 = &v46[3 * ((v158 >> ((4 * *((_BYTE *)v46 + 18) + 8) & 0x3C)) & 0xF)];
      v70 = v69[4];
      v71 = v69[5];
      swift_bridgeObjectRetain();
      v157 = v71;
      swift_bridgeObjectRetain();
    }

    else
    {
      v72 = *(void *)(v14 + 64);
      swift_unknownObjectRetain();
      v65 = v172;
      v58 = v173;
      specialized Rope._Node.subscript.getter(v158, v72);
      v157 = v73;
      v70 = v74;
      swift_unknownObjectRelease();
    }

    result = (unint64_t *)swift_bridgeObjectRetain();
    v75 = 0LL;
    v76 = v154;
    v178 = v70;
    while (1)
    {
      v78 = v75 + 1;
      if (__OFADD__(v75, 1LL))
      {
        __break(1u);
LABEL_178:
        __break(1u);
        goto LABEL_179;
      }

      v79 = *(v76 - 1);
      v80 = *v76;
      if (*(void *)(v58 + 16))
      {
        swift_bridgeObjectRetain_n();
        v81 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v80);
        if ((v82 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v58 + 56) + 72 * v81, (uint64_t)&v201);
        }

        else
        {
          v205 = 0LL;
          v203 = 0u;
          v204 = 0u;
          v201 = 0u;
          v202 = 0u;
        }

        swift_bridgeObjectRelease();
        v70 = v178;
        if (!*(void *)(v178 + 16))
        {
LABEL_94:
          v200 = 0LL;
          v198 = 0u;
          v199 = 0u;
          v196 = 0u;
          v197 = 0u;
          goto LABEL_101;
        }
      }

      else
      {
        v205 = 0LL;
        v203 = 0u;
        v204 = 0u;
        v201 = 0u;
        v202 = 0u;
        swift_bridgeObjectRetain();
        if (!*(void *)(v70 + 16)) {
          goto LABEL_94;
        }
      }

      swift_bridgeObjectRetain();
      v83 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v80);
      if ((v84 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v70 + 56) + 72 * v83, (uint64_t)&v196);
      }

      else
      {
        v200 = 0LL;
        v198 = 0u;
        v199 = 0u;
        v196 = 0u;
        v197 = 0u;
      }

      swift_bridgeObjectRelease();
LABEL_101:
      swift_bridgeObjectRelease();
      v46 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v201,  (uint64_t)&v186,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v196,  (uint64_t)v177,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v189)
      {
        if (v195) {
          goto LABEL_118;
        }
        outlined destroy of Any?( (uint64_t)&v186,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v196,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = (unint64_t *)outlined destroy of Any?( (uint64_t)&v201,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_88;
      }

      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v186,  (uint64_t)v185,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v195) {
        goto LABEL_117;
      }
      v85 = *((_OWORD *)v177 + 3);
      v182 = *((_OWORD *)v177 + 2);
      v183 = v85;
      v184 = v177[8];
      v86 = *((_OWORD *)v177 + 1);
      v180 = *(_OWORD *)v177;
      v181 = v86;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v185,  (uint64_t)v216);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v180,  (uint64_t)v215);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v216,  (uint64_t)&v211,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v215,  (uint64_t)v176,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v212)
      {
        if (!v214)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v211);
LABEL_86:
          v77 = 0;
          goto LABEL_87;
        }

        outlined init with take of any PredicateExpression<Self.Output == B1>(&v211, (uint64_t)v208);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v176, (uint64_t)v207);
        v87 = v209;
        v171 = v210;
        v170 = __swift_project_boxed_opaque_existential_1(v208, v209);
        v175 = &v138;
        v88 = *(void *)(v87 - 8);
        MEMORY[0x1895F8858](v170);
        v90 = (char *)&v138 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v207,  (uint64_t)&v179);
        v91 = type metadata accessor for Optional();
        v174 = &v138;
        v92 = *(void *)(v91 - 8);
        MEMORY[0x1895F8858](v91);
        v94 = (char *)&v138 - v93;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v95 = swift_dynamicCast();
        v96 = *(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56);
        if (v95)
        {
          v96(v94, 0LL, 1LL, v87);
          (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v90, v94, v87);
          v77 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v88 + 8))(v90, v87);
        }

        else
        {
          v96(v94, 1LL, 1LL, v87);
          (*(void (**)(char *, uint64_t))(v92 + 8))(v94, v91);
          v77 = 0;
        }

        v65 = v172;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v207);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v208);
        v58 = v173;
      }

      else
      {
        if (v214)
        {
          outlined destroy of Any?( (uint64_t)v176,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_86;
        }

        v77 = 1;
      }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v335 = v27 & 0xFFFFFFFFFFFFF0FFLL | (v41 << 8);
      v39 = v44;
      goto LABEL_30;
    }

    v44 = v31;
    v21 = v349;
    v20 = v354;
LABEL_45:
    if (v28)
    {
LABEL_412:
      __break(1u);
      goto LABEL_413;
    }

    goto LABEL_46;
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v434);
  v335 = specialized Rope._endPath.getter(v22);
  result = swift_unknownObjectRelease();
  v39 = 0LL;
  v28 = 0LL;
  if (v22)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v40 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v342, v335, v39, v22, v25);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }

  v40 = 0LL;
LABEL_48:
  v351 = (char *)((char *)v358 - (char *)v28);
  if (__OFSUB__(v358, v28))
  {
LABEL_384:
    __break(1u);
    goto LABEL_385;
  }

  v48 = *(_OWORD *)(v21 + 32);
  v431 = *(_OWORD *)(v21 + 16);
  v432 = v48;
  v433 = *(_OWORD *)(v21 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v28))
  {
LABEL_385:
    __break(1u);
    goto LABEL_386;
  }

  v336 = (__int128 *)(v21 + 16);
  v330 = BigString.UTF8View.index(_:offsetBy:)();
  v327 = v50;
  v328 = v49;
  v326 = v51;
  result = outlined release of Locale((uint64_t)&v388);
  v52 = v352;
  v333 = v345;
  v329 = v344;
  v53 = v343;
  v337 = *((void *)&v435 + 1);
  v314 = v39;
  if (v40 == *((void *)&v435 + 1)) {
    goto LABEL_143;
  }
  if (v342 != *(void *)(v21 + 88))
  {
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
    goto LABEL_404;
  }

  v54 = v40;
  if (v39)
  {
    v55 = v39 + 24 * ((v335 >> ((4 * *(_BYTE *)(v39 + 18) + 8) & 0x3C)) & 0xF);
    v57 = *(void *)(v55 + 32);
    v56 = *(void *)(v55 + 40);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }

  else
  {
    v58 = *(void *)(v21 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v335, v58);
    v57 = v59;
    v56 = v60;
    result = swift_unknownObjectRelease();
  }

  if (*((uint64_t *)&v434[0] + 1) >= v54)
  {
    swift_bridgeObjectRelease();
    goto LABEL_114;
  }

  v310 = *((void *)&v434[0] + 1);
  v311 = v56;
  v359 = v376;
  v356 = (__int128 *)v409;
  v323 = (uint64_t *)(v348 + 40);
  v61 = v335;
  v62 = v39;
  v333 = v57;
LABEL_57:
  v64 = *(void *)(v21 + 64);
  v63 = *(void *)(v21 + 72);
  v65 = *(void *)(v21 + 88);
  v368 = v342;
  v369 = v61;
  v370 = v62;
  if (v342 != v65) {
    goto LABEL_405;
  }
  v360 = v63;
  v66 = v20;
  if (v64)
  {
    v67 = *(unsigned __int8 *)(v64 + 18);
    v68 = v61;
    v69 = v62;
    result = swift_unknownObjectRetain();
    v62 = v69;
    v61 = v68;
    if (v68 <= v67) {
      goto LABEL_406;
    }
  }

  else if (!v61)
  {
    goto LABEL_406;
  }

  if (!v62 || (v70 = (4 * *(_BYTE *)(v62 + 18) + 8) & 0x3C, ((v61 >> v70) & 0xF) == 0))
  {
    v72 = *(unsigned __int8 *)(v64 + 18);
    v73 = (4 * v72 + 8) & 0x3C;
    v74 = (v61 >> v73) & 0xF;
    *(void *)&v407 = v74;
    if (v72)
    {
      swift_unknownObjectRetain();
      v75 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v64 + 16,  v64 + 24,  (uint64_t *)&v407,  (uint64_t)&v368,  v72);
      result = swift_unknownObjectRelease();
      if ((v75 & 1) == 0) {
        goto LABEL_411;
      }
      if (v368 != v342) {
        goto LABEL_407;
      }
      v62 = v370;
      v71 = v369;
      v20 = v354;
      if (v370) {
        goto LABEL_69;
      }
    }

    else
    {
      if (!v74) {
        goto LABEL_411;
      }
      v20 = v66;
      v71 = ((v74 - 1) << v73) | ((-15LL << v73) - 1) & v61;
      v369 = v71;
      v370 = v64;
      v62 = v64;
      if (v64) {
        goto LABEL_69;
      }
    }

    v79 = v71;
    swift_unknownObjectRetain();
    v329 = v79;
    v77 = specialized Rope._Node.subscript.getter(v79, v64);
    swift_unknownObjectRelease();
    v324 = 0LL;
    v78 = 1;
    goto LABEL_73;
  }

  v71 = ((((v61 >> v70) & 0xF) - 1) << v70) | ((-15LL << v70) - 1) & v61;
  v369 = v71;
  v20 = v66;
LABEL_69:
  v76 = (4 * *(_BYTE *)(v62 + 18) + 8) & 0x3C;
  v329 = v71;
  v324 = (uint64_t *)v62;
  v77 = *(void *)(v62 + 24 * ((v71 >> v76) & 0xF) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v78 = 0;
LABEL_73:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFSUB__(v351, v77)) {
    goto LABEL_408;
  }
  if (v342 != *(void *)(v21 + 88)) {
    goto LABEL_409;
  }
  v312 = &v351[-v77];
  if ((v78 & 1) != 0)
  {
    v80 = *(void *)(v21 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v329, v80);
    v325 = v81;
    v83 = v82;
    swift_unknownObjectRelease();
  }

  else
  {
    v84 = &v324[3 * ((v329 >> ((4 * *((_BYTE *)v324 + 18) + 8) & 0x3C)) & 0xF)];
    v83 = v84[4];
    v85 = v84[5];
    swift_bridgeObjectRetain();
    v325 = v85;
    swift_bridgeObjectRetain();
  }

  v313 = v54 - 1;
  result = swift_bridgeObjectRetain();
  v86 = 0LL;
  v87 = v323;
  v360 = v83;
  while (1)
  {
    v89 = v86 + 1;
    if (__OFADD__(v86, 1LL)) {
      goto LABEL_370;
    }
    v91 = *(v87 - 1);
    v90 = *v87;
    if (*(void *)(v57 + 16))
    {
      swift_bridgeObjectRetain_n();
      v92 = specialized __RawDictionaryStorage.find<A>(_:)(v91, v90);
      if ((v93 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v57 + 56) + 72 * v92, (uint64_t)&v399);
      }

      else
      {
        v403 = 0LL;
        v402 = 0u;
        v401 = 0u;
        v400 = 0u;
        v399 = 0u;
      }

      swift_bridgeObjectRelease();
      v83 = v360;
      if (!*(void *)(v360 + 16))
      {
LABEL_88:
        v397 = 0LL;
        v396 = 0u;
        v395 = 0u;
        v394 = 0u;
        v393 = 0u;
        goto LABEL_95;
      }
    }

    else
    {
      v403 = 0LL;
      v402 = 0u;
      v401 = 0u;
      v400 = 0u;
      v399 = 0u;
      swift_bridgeObjectRetain();
      if (!*(void *)(v83 + 16)) {
        goto LABEL_88;
      }
    }

    swift_bridgeObjectRetain();
    v94 = specialized __RawDictionaryStorage.find<A>(_:)(v91, v90);
    if ((v95 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v83 + 56) + 72 * v94, (uint64_t)&v393);
    }

    else
    {
      v397 = 0LL;
      v396 = 0u;
      v395 = 0u;
      v394 = 0u;
      v393 = 0u;
    }

    swift_bridgeObjectRelease();
LABEL_95:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v399,  (uint64_t)&v368,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v393,  (uint64_t)v359,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v371)
    {
      if (v377) {
        goto LABEL_112;
      }
      outlined destroy of Any?( (uint64_t)&v368,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v393,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?( (uint64_t)&v399,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_82;
    }

    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v368,  (uint64_t)&v383,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v377) {
      break;
    }
    v96 = *((_OWORD *)v359 + 3);
    v380 = *((_OWORD *)v359 + 2);
    v381 = v96;
    v382 = *((void *)v359 + 8);
    v97 = *((_OWORD *)v359 + 1);
    v378 = *(_OWORD *)v359;
    v379 = v97;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v383,  (uint64_t)v366);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v378,  (uint64_t)&v361);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v366,  (uint64_t)&v407,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v361,  (uint64_t)v356,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v408)
    {
      if (!v410)
      {
        v88 = 1;
        goto LABEL_81;
      }

      outlined destroy of Any?((uint64_t)v356, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_80:
      v88 = 0;
      goto LABEL_81;
    }

    if (!v410)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v407);
      goto LABEL_80;
    }

    outlined init with take of any PredicateExpression<Self.Output == B1>(&v407, (uint64_t)v419);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v356, (uint64_t)v418);
    v98 = v420;
    v350 = v421;
    v347 = __swift_project_boxed_opaque_existential_1(v419, v420);
    v355 = &v309;
    v99 = *(void *)(v98 - 8);
    MEMORY[0x1895F8858](v347);
    v101 = (char *)&v309 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v418,  (uint64_t)v416);
    v102 = type metadata accessor for Optional();
    v353 = &v309;
    v103 = *(void *)(v102 - 8);
    MEMORY[0x1895F8858](v102);
    v105 = (char *)&v309 - v104;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v106 = swift_dynamicCast();
    v107 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56);
    if (v106)
    {
      v107(v105, 0LL, 1LL, v98);
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v101, v105, v98);
      v88 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v98);
    }

    else
    {
      v107(v105, 1LL, 1LL, v98);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v102);
      v88 = 0;
    }

    v21 = v349;
    v57 = v333;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v418);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v419);
    v20 = v354;
LABEL_81:
    outlined destroy of Any?((uint64_t)&v361, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v366, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v378);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
    outlined destroy of Any?( (uint64_t)&v368,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?( (uint64_t)&v393,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    result = outlined destroy of Any?( (uint64_t)&v399,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v88 & 1) == 0) {
      goto LABEL_113;
    }
LABEL_82:
    v87 += 2;
    ++v86;
    v83 = v360;
    if (v89 == v20)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v108 = v312;
      v54 = v313;
      v351 = v312;
      v61 = v329;
      v62 = (unint64_t)v324;
      if (v310 >= v313)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v351 = v108;
        goto LABEL_115;
      }

      goto LABEL_57;
    }
  }

  outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
LABEL_112:
  outlined destroy of Any?( (uint64_t)&v368,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?( (uint64_t)&v393,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?( (uint64_t)&v399,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_113:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_114:
  swift_bridgeObjectRelease();
LABEL_115:
  v109 = v336;
  v110 = v330;
  v111 = v336[1];
  v428 = *v336;
  v429 = v111;
  v430 = v336[2];
  result = BigString.utf8.getter();
  if (__OFSUB__(v351, v110 >> 11)) {
    goto LABEL_403;
  }
  v112 = BigString.UTF8View.index(_:offsetBy:)();
  v113 = v109;
  v115 = v114;
  v117 = v116;
  v119 = v118;
  outlined release of Locale((uint64_t)&v389);
  else {
    v120 = v112;
  }
  else {
    v121 = v115;
  }
  if ((unint64_t)v341 >= v112 >> 10)
  {
    v117 = v338;
    v119 = v332;
  }

  v122 = v113[1];
  v425 = *v113;
  v426 = v122;
  v427 = v113[2];
  BigString.unicodeScalars.getter();
  v52 = v120;
  v123 = BigString.UnicodeScalarView.index(after:)();
  v125 = v124;
  v127 = v126;
  v129 = v128;
  result = outlined release of Locale((uint64_t)&v390);
  v130 = *v113;
  v131 = v113[1];
  v417[2] = v113[2];
  v417[1] = v131;
  v417[0] = v130;
  if (v123 >> 10 < v52 >> 10)
  {
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
LABEL_408:
    __break(1u);
LABEL_409:
    __break(1u);
    goto LABEL_410;
  }

  v419[0] = v52;
  v333 = v121;
  v419[1] = v121;
  v329 = v117;
  v419[2] = v117;
  v420 = v119;
  v421 = (void *)v123;
  v422 = v125;
  v423 = v127;
  v424 = v129;
  v132 = *(void *)(v357 + 16);
  v53 = v119;
  if (!v132 || v52 >> 10 == v123 >> 10)
  {
    v21 = v349;
    goto LABEL_143;
  }

  v133 = v125;
  v134 = v123;
  v360 = v123 >> 10;
  v328 = v52;
  outlined retain of Locale((uint64_t)v417);
  swift_bridgeObjectRetain();
  v135 = 40LL;
  v136 = v132;
  while (*(void *)(v357 + v135))
  {
    swift_bridgeObjectRelease();
    v135 += 16LL;
    if (!--v136)
    {
      swift_bridgeObjectRelease();
      goto LABEL_137;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v137 = BigString.startIndex.getter();
  v138 = v360;
  if (v360 <= v137 >> 10)
  {
LABEL_137:
    v21 = v349;
    v52 = v328;
    v144 = v333;
LABEL_138:
    v416[0] = v52;
    v333 = v144;
    v416[1] = v144;
    v416[2] = v329;
    v416[3] = v53;
    v416[4] = v134;
    v416[5] = v133;
    v416[6] = v127;
    v416[7] = v129;
    v145 = *(void *)(v357 + 16);
    if (v145)
    {
      v146 = 40LL;
      while (!*(void *)(v357 + v146))
      {
        v146 += 16LL;
        if (!--v145) {
          goto LABEL_142;
        }
      }

      v323 = (uint64_t *)v53;
      v328 = v52;
      v168 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      v169 = (char *)MEMORY[0x18961AFE8];
      do
      {
        v170 = *v168;
        if (*v168)
        {
          v171 = *(v168 - 1);
          if ((v170 & 0x2000000000000000LL) != 0 ? HIBYTE(v170) & 0xF : v171 & 0xFFFFFFFFFFFFLL)
          {
            if ((v170 & 0x1000000000000000LL) != 0)
            {
              v173 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }

            else
            {
              if ((v170 & 0x2000000000000000LL) != 0)
              {
                v368 = *(v168 - 1);
                v369 = v170 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }

              else
              {
                if ((v171 & 0x1000000000000000LL) == 0) {
                  _StringObject.sharedUTF8.getter();
                }
                swift_bridgeObjectRetain();
              }

              v173 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v169 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v169 + 2) + 1LL,  1,  v169);
            }
            v175 = *((void *)v169 + 2);
            v174 = *((void *)v169 + 3);
            if (v175 >= v174 >> 1) {
              v169 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v174 > 1),  v175 + 1,  1,  v169);
            }
            *((void *)v169 + 2) = v175 + 1;
            *(_DWORD *)&v169[4 * v175 + 32] = v173;
          }
        }

        v168 += 2;
        --v132;
      }

      while (v132);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v398);
      v176 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v169);
      v178 = v177;
      v180 = v179;
      v182 = v181;
      swift_bridgeObjectRelease();
      outlined release of Locale((uint64_t)&v399);
      outlined release of Locale((uint64_t)v417);
      result = outlined release of AttributedString.Runs((uint64_t)v434);
      if (v182 != (uint64_t *)2)
      {
        if (v360 < v176 >> 10)
        {
LABEL_421:
          __break(1u);
          goto LABEL_422;
        }

        v328 = v176;
        v329 = v180;
        v333 = v178;
        v323 = v182;
      }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v344 = v29 & 0xFFFFFFFFFFFFF0FFLL | (v41 << 8);
      v28 = v371;
      v345 = v33;
      goto LABEL_30;
    }

    v22 = v351;
    v23 = v364;
LABEL_45:
    if (v30)
    {
LABEL_424:
      __break(1u);
      goto LABEL_425;
    }

    goto LABEL_46;
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v445);
  v344 = specialized Rope._endPath.getter(v25);
  result = swift_unknownObjectRelease();
  v30 = 0LL;
  v345 = 0LL;
  if (v25)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v366 = (void *)specialized Rope._Node.distanceFromStart<A>(to:in:)(v353, v344, v345, v25, v28);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }

  v366 = 0LL;
LABEL_48:
  v361 = (void *)((char *)v369 - (char *)v30);
  if (__OFSUB__(v369, v30))
  {
LABEL_396:
    __break(1u);
    goto LABEL_397;
  }

  v47 = *(_OWORD *)(v24 + 32);
  v442 = *(_OWORD *)(v24 + 16);
  v443 = v47;
  v444 = *(_OWORD *)(v24 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v30))
  {
LABEL_397:
    __break(1u);
    goto LABEL_398;
  }

  v346 = (__int128 *)(v24 + 16);
  v48 = BigString.UTF8View.index(_:offsetBy:)();
  v336 = v49;
  v337 = v48;
  v334 = v51;
  v335 = v50;
  result = outlined release of Locale((uint64_t)&v399);
  v52 = v363;
  v338 = v357;
  v342 = v356;
  v53 = v355;
  v347 = *((void *)&v446 + 1);
  v359 = v24;
  if (v366 == *((void **)&v446 + 1)) {
    goto LABEL_147;
  }
  if (v353 != *(void *)(v24 + 88))
  {
LABEL_414:
    __break(1u);
LABEL_415:
    __break(1u);
    goto LABEL_416;
  }

  if (v345)
  {
    v54 = v345 + 24 * ((v344 >> ((4 * *(_BYTE *)(v345 + 18) + 8) & 0x3C)) & 0xF);
    v56 = *(void *)(v54 + 32);
    v55 = *(void *)(v54 + 40);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }

  else
  {
    v57 = *(void *)(v24 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v344, v57);
    v56 = v58;
    v55 = v59;
    result = swift_unknownObjectRelease();
  }

  if (*((uint64_t *)&v445[0] + 1) >= (uint64_t)v366)
  {
    swift_bridgeObjectRelease();
    goto LABEL_114;
  }

  v320 = *((void *)&v445[0] + 1);
  v321 = v55;
  v370 = v387;
  v367 = (__int128 *)v420;
  v323 = (uint64_t *)(v22 + 40);
  v60 = v344;
  v61 = v345;
  v360 = v56;
LABEL_57:
  v62 = *(void *)(v24 + 64);
  v63 = *(void *)(v24 + 88);
  v379 = v353;
  v380 = v60;
  v381 = (uint64_t *)v61;
  if (v353 != v63) {
    goto LABEL_417;
  }
  if (v62)
  {
    v64 = *(unsigned __int8 *)(v62 + 18);
    v65 = v60;
    result = swift_unknownObjectRetain();
    v60 = v65;
    if (v65 <= v64) {
      goto LABEL_418;
    }
  }

  else if (!v60)
  {
    goto LABEL_418;
  }

  if (!v61 || (v66 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C, ((v60 >> v66) & 0xF) == 0))
  {
    v68 = *(unsigned __int8 *)(v62 + 18);
    v69 = (4 * v68 + 8) & 0x3C;
    v70 = (v60 >> v69) & 0xF;
    *(void *)&v418 = v70;
    if (v68)
    {
      swift_unknownObjectRetain();
      v71 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v62 + 16,  v62 + 24,  (uint64_t *)&v418,  (uint64_t)&v379,  v68);
      result = swift_unknownObjectRelease();
      if ((v71 & 1) == 0) {
        goto LABEL_423;
      }
      v24 = v359;
      if (v379 != v353) {
        goto LABEL_419;
      }
      v61 = (uint64_t)v381;
      v67 = v380;
      v23 = v364;
      if (v381) {
        goto LABEL_69;
      }
    }

    else
    {
      if (!v70) {
        goto LABEL_423;
      }
      v67 = ((v70 - 1) << v69) | ((-15LL << v69) - 1) & v60;
      v380 = v67;
      v381 = (uint64_t *)v62;
      v61 = v62;
      if (v62) {
        goto LABEL_69;
      }
    }

    swift_unknownObjectRetain();
    v342 = v67;
    v73 = specialized Rope._Node.subscript.getter(v67, v62);
    swift_unknownObjectRelease();
    v324 = 0LL;
    v74 = 1;
    goto LABEL_73;
  }

  v67 = ((((v60 >> v66) & 0xF) - 1) << v66) | ((-15LL << v66) - 1) & v60;
  v380 = v67;
LABEL_69:
  v72 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C;
  v342 = v67;
  v324 = v61;
  v73 = *(void *)(v61 + 24 * ((v67 >> v72) & 0xF) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v74 = 0;
LABEL_73:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFSUB__(v361, v73)) {
    goto LABEL_420;
  }
  if (v353 != *(void *)(v24 + 88)) {
    goto LABEL_421;
  }
  v322 = (void *)((char *)v361 - v73);
  if ((v74 & 1) != 0)
  {
    v75 = *(void *)(v24 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v342, v75);
    v338 = v76;
    v78 = v77;
    swift_unknownObjectRelease();
  }

  else
  {
    v79 = v324 + 24 * ((v342 >> ((4 * *(_BYTE *)(v324 + 18) + 8) & 0x3C)) & 0xF);
    v78 = *(void *)(v79 + 32);
    v80 = *(void *)(v79 + 40);
    swift_bridgeObjectRetain();
    v338 = v80;
    swift_bridgeObjectRetain();
  }

  v366 = (void *)((char *)v366 - 1);
  result = swift_bridgeObjectRetain();
  v81 = 0LL;
  v82 = v323;
  v83 = v360;
  v371 = v78;
  while (1)
  {
    v85 = v81 + 1;
    if (__OFADD__(v81, 1LL)) {
      goto LABEL_382;
    }
    v86 = *(v82 - 1);
    v87 = *v82;
    if (*(void *)(v83 + 16))
    {
      swift_bridgeObjectRetain_n();
      v88 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v87);
      if ((v89 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v83 + 56) + 72 * v88, (uint64_t)&v410);
      }

      else
      {
        v414 = 0LL;
        v413 = 0u;
        v412 = 0u;
        v411 = 0u;
        v410 = 0u;
      }

      swift_bridgeObjectRelease();
      v78 = v371;
      if (!*(void *)(v371 + 16))
      {
LABEL_88:
        v408 = 0LL;
        v407 = 0u;
        v406 = 0u;
        v405 = 0u;
        v404 = 0u;
        goto LABEL_95;
      }
    }

    else
    {
      v414 = 0LL;
      v413 = 0u;
      v412 = 0u;
      v411 = 0u;
      v410 = 0u;
      swift_bridgeObjectRetain();
      if (!*(void *)(v78 + 16)) {
        goto LABEL_88;
      }
    }

    swift_bridgeObjectRetain();
    v90 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v87);
    if ((v91 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v78 + 56) + 72 * v90, (uint64_t)&v404);
    }

    else
    {
      v408 = 0LL;
      v407 = 0u;
      v406 = 0u;
      v405 = 0u;
      v404 = 0u;
    }

    swift_bridgeObjectRelease();
LABEL_95:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v410,  (uint64_t)&v379,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v404,  (uint64_t)v370,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v382)
    {
      if (v388) {
        goto LABEL_112;
      }
      outlined destroy of Any?( (uint64_t)&v379,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v404,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?( (uint64_t)&v410,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_82;
    }

    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v379,  (uint64_t)&v394,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v388) {
      break;
    }
    v92 = *((_OWORD *)v370 + 3);
    v391 = *((_OWORD *)v370 + 2);
    v392 = v92;
    v393 = *((void *)v370 + 8);
    v93 = *((_OWORD *)v370 + 1);
    v389 = *(_OWORD *)v370;
    v390 = v93;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v394,  (uint64_t)v377);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v389,  (uint64_t)&v372);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v377,  (uint64_t)&v418,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v372,  (uint64_t)v367,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v419)
    {
      if (!v421)
      {
        v84 = 1;
        goto LABEL_81;
      }

      outlined destroy of Any?((uint64_t)v367, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_80:
      v84 = 0;
      goto LABEL_81;
    }

    if (!v421)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v418);
      goto LABEL_80;
    }

    outlined init with take of any PredicateExpression<Self.Output == B1>(&v418, (uint64_t)v430);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v367, (uint64_t)v429);
    v94 = v431;
    v358 = v432;
    v352 = __swift_project_boxed_opaque_existential_1(v430, v431);
    v365 = v319;
    v95 = *(void *)(v94 - 8);
    MEMORY[0x1895F8858](v352);
    v97 = (char *)v319 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v429,  (uint64_t)v427);
    v98 = type metadata accessor for Optional();
    v362 = v319;
    v99 = *(void *)(v98 - 8);
    MEMORY[0x1895F8858](v98);
    v101 = (char *)v319 - v100;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v102 = swift_dynamicCast();
    v103 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56);
    if (v102)
    {
      v103(v101, 0LL, 1LL, v94);
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v97, v101, v94);
      v84 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v95 + 8))(v97, v94);
    }

    else
    {
      v103(v101, 1LL, 1LL, v94);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v98);
      v84 = 0;
    }

    v23 = v364;
    v83 = v360;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v429);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v430);
    v24 = v359;
LABEL_81:
    outlined destroy of Any?((uint64_t)&v372, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v377, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v389);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v394);
    outlined destroy of Any?( (uint64_t)&v379,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?( (uint64_t)&v404,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    result = outlined destroy of Any?( (uint64_t)&v410,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v84 & 1) == 0) {
      goto LABEL_113;
    }
LABEL_82:
    v82 += 2;
    ++v81;
    v78 = v371;
    if (v85 == v23)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v104 = v322;
      v361 = v322;
      v60 = v342;
      v61 = v324;
      if (v320 >= (uint64_t)v366)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v361 = v104;
        goto LABEL_115;
      }

      goto LABEL_57;
    }
  }

  outlined destroy of AttributedString._AttributeValue((uint64_t)&v394);
LABEL_112:
  outlined destroy of Any?( (uint64_t)&v379,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?( (uint64_t)&v404,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?( (uint64_t)&v410,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_113:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_114:
  swift_bridgeObjectRelease();
LABEL_115:
  v105 = v346;
  v106 = v346[1];
  v439 = *v346;
  v440 = v106;
  v441 = v346[2];
  BigString.utf8.getter();
  result = v337;
  if (__OFSUB__(v361, v337 >> 11)) {
    goto LABEL_415;
  }
  v107 = BigString.UTF8View.index(_:offsetBy:)();
  v109 = v108;
  v111 = v110;
  v113 = v112;
  outlined release of Locale((uint64_t)&v400);
  if (v349 >= v107 >> 10) {
    v114 = v350;
  }
  else {
    v114 = (char *)v107;
  }
  if (v349 >= v107 >> 10) {
    v115 = v348;
  }
  else {
    v115 = v109;
  }
  if (v349 >= v107 >> 10) {
    v116 = v341;
  }
  else {
    v116 = v111;
  }
  if (v349 >= v107 >> 10) {
    v117 = v339;
  }
  else {
    v117 = v113;
  }
  v118 = v105[1];
  v436 = *v105;
  v437 = v118;
  v438 = v105[2];
  BigString.unicodeScalars.getter();
  v52 = (unint64_t)v114;
  v119 = BigString.UnicodeScalarView.index(after:)();
  v121 = v120;
  v123 = v122;
  v125 = v124;
  result = outlined release of Locale((uint64_t)&v401);
  v126 = *v105;
  v127 = v105[1];
  v428[2] = v105[2];
  v428[1] = v127;
  v428[0] = v126;
  v128 = v119 >> 10;
  if (v119 >> 10 < v52 >> 10)
  {
LABEL_416:
    __break(1u);
LABEL_417:
    __break(1u);
LABEL_418:
    __break(1u);
LABEL_419:
    __break(1u);
LABEL_420:
    __break(1u);
LABEL_421:
    __break(1u);
    goto LABEL_422;
  }

  v430[0] = v52;
  v338 = v115;
  v430[1] = v115;
  v342 = v116;
  v430[2] = v116;
  v431 = v117;
  v432 = v119;
  v129 = v121;
  v433 = v121;
  v371 = v123;
  v434 = v123;
  v435 = v125;
  v130 = *(void *)(v368 + 16);
  v131 = v117;
  if (!v130 || v52 >> 10 == v128)
  {
    v53 = v117;
    v23 = v364;
    v24 = v359;
    goto LABEL_147;
  }

  v370 = (_BYTE *)v125;
  v132 = v119;
  v337 = v52;
  outlined retain of Locale((uint64_t)v428);
  swift_bridgeObjectRetain();
  v133 = 40LL;
  v134 = v130;
  v135 = v129;
  while (*(void *)(v368 + v133))
  {
    swift_bridgeObjectRelease();
    v133 += 16LL;
    if (!--v134)
    {
      swift_bridgeObjectRelease();
      v23 = v364;
      v52 = v337;
      v136 = v342;
      v53 = v131;
      v137 = v371;
      v24 = v359;
      goto LABEL_142;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v138 = BigString.startIndex.getter();
  v53 = v131;
  v24 = v359;
  if (v128 <= v138 >> 10)
  {
    v23 = v364;
    v52 = v337;
    v136 = v342;
    v137 = v371;
LABEL_142:
    v427[0] = v52;
    v427[1] = v338;
    v342 = v136;
    v427[2] = v136;
    v427[3] = v53;
    v427[4] = v132;
    v427[5] = v135;
    v427[6] = v137;
    v427[7] = v370;
    v144 = *(void *)(v368 + 16);
    if (v144)
    {
      v145 = 40LL;
      while (!*(void *)(v368 + v145))
      {
        v145 += 16LL;
        if (!--v144) {
          goto LABEL_146;
        }
      }

      v371 = v128;
      v337 = v52;
      v167 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      v168 = (char *)MEMORY[0x18961AFE8];
      do
      {
        v169 = *v167;
        if (*v167)
        {
          v170 = *(v167 - 1);
          if ((v169 & 0x2000000000000000LL) != 0 ? HIBYTE(v169) & 0xF : v170 & 0xFFFFFFFFFFFFLL)
          {
            if ((v169 & 0x1000000000000000LL) != 0)
            {
              v172 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }

            else
            {
              if ((v169 & 0x2000000000000000LL) != 0)
              {
                v379 = *(v167 - 1);
                v380 = v169 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }

              else
              {
                if ((v170 & 0x1000000000000000LL) == 0) {
                  _StringObject.sharedUTF8.getter();
                }
                swift_bridgeObjectRetain();
              }

              v172 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v168 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v168 + 2) + 1LL,  1,  v168);
            }
            v174 = *((void *)v168 + 2);
            v173 = *((void *)v168 + 3);
            if (v174 >= v173 >> 1) {
              v168 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v173 > 1),  v174 + 1,  1,  v168);
            }
            *((void *)v168 + 2) = v174 + 1;
            *(_DWORD *)&v168[4 * v174 + 32] = v172;
          }
        }

        v167 += 2;
        --v130;
      }

      while (v130);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v409);
      v175 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v168);
      v177 = v176;
      v179 = v178;
      v181 = v180;
      swift_bridgeObjectRelease();
      outlined release of Locale((uint64_t)&v410);
      outlined release of Locale((uint64_t)v428);
      result = outlined release of AttributedString.Runs((uint64_t)v445);
      if (v181 != 2)
      {
        if (v371 < v175 >> 10)
        {
LABEL_433:
          __break(1u);
          goto LABEL_434;
        }

        v337 = v175;
        v338 = v177;
        v342 = v179;
        v53 = v181;
      }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v46 = v32;
      v353 = v28 & 0xFFFFFFFFFFFFF0FFLL | (v40 << 8);
      v22 = v375;
      v354 = v46;
      goto LABEL_30;
    }

    v23 = v367;
LABEL_45:
    if (v29)
    {
LABEL_432:
      __break(1u);
      goto LABEL_433;
    }

    goto LABEL_46;
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v455);
  v353 = specialized Rope._endPath.getter(v24);
  result = swift_unknownObjectRelease();
  v29 = 0LL;
  v354 = 0LL;
  if (v24)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v377 = (uint64_t *)specialized Rope._Node.distanceFromStart<A>(to:in:)(v362, v353, v354, v24, v27);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }

  v377 = 0LL;
LABEL_48:
  v372 = (char *)((char *)v380 - (char *)v29);
  if (__OFSUB__(v380, v29))
  {
LABEL_404:
    __break(1u);
    goto LABEL_405;
  }

  v47 = *(_OWORD *)(v23 + 32);
  v452 = *(_OWORD *)(v23 + 16);
  v453 = v47;
  v454 = *(_OWORD *)(v23 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v29))
  {
LABEL_405:
    __break(1u);
    goto LABEL_406;
  }

  v355 = (__int128 *)(v23 + 16);
  v48 = BigString.UTF8View.index(_:offsetBy:)();
  v50 = v49;
  v345 = v52;
  v346 = v51;
  result = outlined release of Locale((uint64_t)&v409);
  v53 = v373;
  v351 = v366;
  v347 = v364;
  v348 = v365;
  v356 = *((void *)&v456 + 1);
  if (v362 != *(void *)(v23 + 88))
  {
LABEL_422:
    __break(1u);
LABEL_423:
    __break(1u);
    goto LABEL_424;
  }

  if (v354)
  {
    v54 = v354 + 24 * ((v353 >> ((4 * *(_BYTE *)(v354 + 18) + 8) & 0x3C)) & 0xF);
    v55 = *(void **)(v54 + 32);
    v56 = *(void *)(v54 + 40);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }

  else
  {
    v57 = *(void *)(v23 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v353, v57);
    v55 = v58;
    v56 = v59;
    result = swift_unknownObjectRelease();
  }

  if (*((uint64_t *)&v455[0] + 1) >= (uint64_t)v377)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_111;
  }

  v329 = *((void *)&v455[0] + 1);
  v330 = v56;
  v368 = v397;
  v378 = (__int128 *)v430;
  v343 = v48;
  v344 = (uint64_t *)(v370 + 40);
  v60 = v353;
  v61 = v354;
  v332 = v50;
  v371 = v55;
LABEL_57:
  v62 = *(void *)(v23 + 64);
  v63 = *(void *)(v23 + 88);
  v389 = v362;
  v390 = v60;
  v391 = (uint64_t *)v61;
  if (v362 != v63) {
    goto LABEL_425;
  }
  if (v62)
  {
    v64 = *(unsigned __int8 *)(v62 + 18);
    v65 = v60;
    v66 = v61;
    result = swift_unknownObjectRetain();
    v61 = v66;
    v60 = v65;
    if (v65 <= v64) {
      goto LABEL_426;
    }
  }

  else if (!v60)
  {
    goto LABEL_426;
  }

  if (!v61 || (v67 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C, ((v60 >> v67) & 0xF) == 0))
  {
    v69 = *(unsigned __int8 *)(v62 + 18);
    v70 = (4 * v69 + 8) & 0x3C;
    v71 = (v60 >> v70) & 0xF;
    *(void *)&v428 = v71;
    if (v69)
    {
      swift_unknownObjectRetain();
      v72 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v62 + 16,  v62 + 24,  (uint64_t *)&v428,  (uint64_t)&v389,  v69);
      result = swift_unknownObjectRelease();
      if ((v72 & 1) == 0) {
        goto LABEL_431;
      }
      if (v389 != v362) {
        goto LABEL_427;
      }
      v61 = (uint64_t)v391;
      v68 = v390;
      v22 = v375;
      if (v391) {
        goto LABEL_69;
      }
    }

    else
    {
      if (!v71) {
        goto LABEL_431;
      }
      v68 = ((v71 - 1) << v70) | ((-15LL << v70) - 1) & v60;
      v390 = v68;
      v391 = (uint64_t *)v62;
      v61 = v62;
      if (v62) {
        goto LABEL_69;
      }
    }

    swift_unknownObjectRetain();
    v351 = v68;
    v74 = specialized Rope._Node.subscript.getter(v68, v62);
    swift_unknownObjectRelease();
    v347 = 0LL;
    v75 = 1;
    goto LABEL_73;
  }

  v68 = ((((v60 >> v67) & 0xF) - 1) << v67) | ((-15LL << v67) - 1) & v60;
  v390 = v68;
LABEL_69:
  v73 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C;
  v351 = v68;
  v347 = v61;
  v74 = *(void *)(v61 + 24 * ((v68 >> v73) & 0xF) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v75 = 0;
LABEL_73:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFSUB__(v372, v74)) {
    goto LABEL_428;
  }
  if (v362 != *(void *)(v23 + 88)) {
    goto LABEL_429;
  }
  v331 = &v372[-v74];
  if ((v75 & 1) != 0)
  {
    v76 = *(void *)(v23 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v351, v76);
    v348 = v77;
    v79 = v78;
    swift_unknownObjectRelease();
  }

  else
  {
    v80 = v347 + 24 * ((v351 >> ((4 * *(_BYTE *)(v347 + 18) + 8) & 0x3C)) & 0xF);
    v79 = *(void *)(v80 + 32);
    v81 = *(void *)(v80 + 40);
    swift_bridgeObjectRetain();
    v348 = v81;
    swift_bridgeObjectRetain();
  }

  v82 = v371;
  v83 = (uint64_t)v368;
  v377 = (uint64_t *)((char *)v377 - 1);
  result = swift_bridgeObjectRetain();
  v84 = 0LL;
  v85 = v344;
  v381 = v79;
  while (1)
  {
    v87 = v84 + 1;
    if (__OFADD__(v84, 1LL)) {
      goto LABEL_390;
    }
    v89 = *(v85 - 1);
    v88 = *v85;
    if (v82[2])
    {
      swift_bridgeObjectRetain_n();
      v90 = specialized __RawDictionaryStorage.find<A>(_:)(v89, v88);
      if ((v91 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(v82[7] + 72 * v90, (uint64_t)&v420);
      }

      else
      {
        v424 = 0LL;
        v423 = 0u;
        v422 = 0u;
        v421 = 0u;
        v420 = 0u;
      }

      swift_bridgeObjectRelease();
      v79 = v381;
      if (!*(void *)(v381 + 16))
      {
LABEL_88:
        v418 = 0LL;
        v417 = 0u;
        v416 = 0u;
        v415 = 0u;
        v414 = 0u;
        goto LABEL_95;
      }
    }

    else
    {
      v424 = 0LL;
      v423 = 0u;
      v422 = 0u;
      v421 = 0u;
      v420 = 0u;
      swift_bridgeObjectRetain();
      if (!*(void *)(v79 + 16)) {
        goto LABEL_88;
      }
    }

    swift_bridgeObjectRetain();
    v92 = specialized __RawDictionaryStorage.find<A>(_:)(v89, v88);
    if ((v93 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v79 + 56) + 72 * v92, (uint64_t)&v414);
    }

    else
    {
      v418 = 0LL;
      v417 = 0u;
      v416 = 0u;
      v415 = 0u;
      v414 = 0u;
    }

    swift_bridgeObjectRelease();
LABEL_95:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v420,  (uint64_t)&v389,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v414,  v83,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v392)
    {
      if (v398) {
        goto LABEL_113;
      }
      outlined destroy of Any?( (uint64_t)&v389,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v414,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?( (uint64_t)&v420,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_82;
    }

    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v389,  (uint64_t)&v404,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v398) {
      break;
    }
    v94 = *(_OWORD *)(v83 + 48);
    v401 = *(_OWORD *)(v83 + 32);
    v402 = v94;
    v403 = *(void *)(v83 + 64);
    v95 = *(_OWORD *)(v83 + 16);
    v399 = *(_OWORD *)v83;
    v400 = v95;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v404,  (uint64_t)v387);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v399,  (uint64_t)&v382);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v387,  (uint64_t)&v428,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v382,  (uint64_t)v378,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v429)
    {
      if (!v431)
      {
        v86 = 1;
        goto LABEL_81;
      }

      outlined destroy of Any?((uint64_t)v378, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_80:
      v86 = 0;
      goto LABEL_81;
    }

    if (!v431)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v428);
      goto LABEL_80;
    }

    outlined init with take of any PredicateExpression<Self.Output == B1>(&v428, (uint64_t)v440);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v378, (uint64_t)v439);
    v96 = v441;
    v363 = v442;
    v361 = __swift_project_boxed_opaque_existential_1(v440, v441);
    v376 = &v328;
    v97 = *(void *)(v96 - 8);
    MEMORY[0x1895F8858](v361);
    v99 = (char *)&v328 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v439,  (uint64_t)v437);
    v100 = type metadata accessor for Optional();
    v374 = &v328;
    v101 = *(void *)(v100 - 8);
    MEMORY[0x1895F8858](v100);
    v103 = (char *)&v328 - v102;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v104 = swift_dynamicCast();
    v105 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56);
    if (v104)
    {
      v105(v103, 0LL, 1LL, v96);
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v99, v103, v96);
      v86 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v96);
    }

    else
    {
      v105(v103, 1LL, 1LL, v96);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v103, v100);
      v86 = 0;
    }

    v22 = v375;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v439);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v440);
    v82 = v371;
    v83 = (uint64_t)v368;
LABEL_81:
    outlined destroy of Any?((uint64_t)&v382, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v387, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v399);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v404);
    outlined destroy of Any?( (uint64_t)&v389,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?( (uint64_t)&v414,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    result = outlined destroy of Any?( (uint64_t)&v420,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v86 & 1) == 0) {
      goto LABEL_114;
    }
LABEL_82:
    v85 += 2;
    ++v84;
    v79 = v381;
    if (v87 == v22)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v106 = v331;
      v372 = v331;
      v23 = v367;
      v48 = v343;
      v60 = v351;
      v61 = v347;
      if (v329 >= (uint64_t)v377)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v372 = v106;
LABEL_111:
        v107 = v355;
        goto LABEL_115;
      }

      goto LABEL_57;
    }
  }

  outlined destroy of AttributedString._AttributeValue((uint64_t)&v404);
LABEL_113:
  outlined destroy of Any?( (uint64_t)&v389,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?( (uint64_t)&v414,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?( (uint64_t)&v420,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_114:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v107 = v355;
  v48 = v343;
LABEL_115:
  v108 = v107[1];
  v449 = *v107;
  v450 = v108;
  v451 = v107[2];
  result = BigString.utf8.getter();
  if (__OFSUB__(v372, v48 >> 11)) {
    goto LABEL_423;
  }
  v109 = BigString.UTF8View.index(_:offsetBy:)();
  v111 = v110;
  v113 = v112;
  v115 = v114;
  outlined release of Locale((uint64_t)&v410);
  if (v359 >= v109 >> 10) {
    v116 = v360;
  }
  else {
    v116 = v109;
  }
  if (v359 >= v109 >> 10) {
    v117 = v358;
  }
  else {
    v117 = v111;
  }
  if (v359 >= v109 >> 10) {
    v118 = v357;
  }
  else {
    v118 = v113;
  }
  if (v359 >= v109 >> 10) {
    v119 = v349;
  }
  else {
    v119 = v115;
  }
  v120 = v107[1];
  v446 = *v107;
  v447 = v120;
  v448 = v107[2];
  BigString.unicodeScalars.getter();
  v53 = v116;
  v121 = BigString.UnicodeScalarView.index(after:)();
  v123 = v122;
  v125 = v124;
  v127 = v126;
  result = outlined release of Locale((uint64_t)&v411);
  v128 = *v107;
  v129 = v107[1];
  v438[2] = v107[2];
  v438[1] = v129;
  v438[0] = v128;
  v130 = v121 >> 10;
  if (v121 >> 10 < v53 >> 10)
  {
LABEL_424:
    __break(1u);
LABEL_425:
    __break(1u);
LABEL_426:
    __break(1u);
LABEL_427:
    __break(1u);
LABEL_428:
    __break(1u);
LABEL_429:
    __break(1u);
    goto LABEL_430;
  }

  v440[0] = v53;
  v351 = v117;
  v440[1] = v117;
  v347 = v119;
  v348 = v118;
  v440[2] = v118;
  v441 = v119;
  v442 = v121;
  v443 = v123;
  v444 = v125;
  v445 = v127;
  v131 = *(void *)(v379 + 16);
  if (!v131)
  {
    v22 = v375;
    v23 = v367;
    goto LABEL_147;
  }

  v22 = v375;
  v23 = v367;
  if (v53 >> 10 == v130)
  {
LABEL_147:
    v346 = v53;
    result = outlined release of AttributedString.Runs((uint64_t)v455);
    goto LABEL_148;
  }

  v346 = v53;
  outlined retain of Locale((uint64_t)v438);
  swift_bridgeObjectRetain();
  v132 = 40LL;
  v133 = v131;
  while (*(void *)(v379 + v132))
  {
    swift_bridgeObjectRelease();
    v132 += 16LL;
    if (!--v133)
    {
      swift_bridgeObjectRelease();
      goto LABEL_140;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v130 <= (unint64_t)BigString.startIndex.getter() >> 10)
  {
LABEL_140:
    v23 = v367;
    v53 = v346;
    v139 = v351;
LABEL_141:
    v437[0] = v53;
    v351 = v139;
    v437[1] = v139;
    v437[2] = v348;
    v437[3] = v347;
    v437[4] = v121;
    v437[5] = v123;
    v437[6] = v125;
    v437[7] = v127;
    v140 = *(void *)(v379 + 16);
    if (v140)
    {
      v141 = 40LL;
      while (!*(void *)(v379 + v141))
      {
        v141 += 16LL;
        if (!--v140) {
          goto LABEL_145;
        }
      }

      v160 = v121 >> 10;
      v346 = v53;
      v161 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      v162 = (char *)MEMORY[0x18961AFE8];
      do
      {
        v163 = *v161;
        if (*v161)
        {
          v164 = *(v161 - 1);
          if ((v163 & 0x2000000000000000LL) != 0 ? HIBYTE(v163) & 0xF : v164 & 0xFFFFFFFFFFFFLL)
          {
            if ((v163 & 0x1000000000000000LL) != 0)
            {
              v166 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }

            else
            {
              if ((v163 & 0x2000000000000000LL) != 0)
              {
                v389 = *(v161 - 1);
                v390 = v163 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }

              else
              {
                if ((v164 & 0x1000000000000000LL) == 0) {
                  _StringObject.sharedUTF8.getter();
                }
                swift_bridgeObjectRetain();
              }

              v166 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v162 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v162 + 2) + 1LL,  1,  v162);
            }
            v168 = *((void *)v162 + 2);
            v167 = *((void *)v162 + 3);
            if (v168 >= v167 >> 1) {
              v162 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v167 > 1),  v168 + 1,  1,  v162);
            }
            *((void *)v162 + 2) = v168 + 1;
            *(_DWORD *)&v162[4 * v168 + 32] = v166;
          }
        }

        v161 += 2;
        --v131;
      }

      while (v131);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v419);
      v169 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v162);
      v171 = v170;
      v173 = v172;
      v175 = v174;
      swift_bridgeObjectRelease();
      outlined release of Locale((uint64_t)&v420);
      outlined release of Locale((uint64_t)v438);
      result = outlined release of AttributedString.Runs((uint64_t)v455);
      if (v175 != 2)
      {
        if (v160 < v169 >> 10)
        {
LABEL_441:
          __break(1u);
          goto LABEL_442;
        }

        v346 = v169;
        v347 = v175;
        v351 = v171;
        v348 = v173;
      }

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v30 = v18 & 0xFFFFFFFFFFFFF0FFLL | (v32 << 8);
    v15 = v146;
    goto LABEL_30;
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v181);
  v30 = specialized Rope._endPath.getter(v13);
  result = swift_unknownObjectRelease();
  v31 = 0LL;
  v19 = 0LL;
  if (v13)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v150 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v141, v30, v31, v13, v150);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }

  v150 = 0LL;
LABEL_48:
  v138 = (char *)((char *)v15 - v19);
  if (__OFSUB__(v15, v19))
  {
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  v38 = *(_OWORD *)(v139 + 32);
  v180[3] = *(_OWORD *)(v139 + 16);
  v180[4] = v38;
  v180[5] = *(_OWORD *)(v139 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v19))
  {
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }

  v39 = BigString.UTF8View.index(_:offsetBy:)();
  v41 = v40;
  v43 = v42;
  v45 = v44;
  result = outlined release of Locale((uint64_t)v180);
  v134 = *((void *)&v182 + 1);
  if (v150 >= *((uint64_t *)&v182 + 1))
  {
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }

  v117 = v45;
  v118 = v43;
  v119 = v41;
  v121 = v39;
  v46 = v139;
  v47 = v141;
  if (v141 != *(void *)(v139 + 88))
  {
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }

  v48 = *(uint64_t **)(v139 + 64);
  if (v31)
  {
    v147 = *(uint64_t **)(v139 + 72);
    v49 = v31 + 24 * ((v30 >> ((4 * *(_BYTE *)(v31 + 18) + 8) & 0x3C)) & 0xF);
    v50 = *(void *)(v49 + 32);
    v51 = *(void *)(v49 + 40);
    swift_bridgeObjectRetain();
    v120 = v51;
    result = swift_bridgeObjectRetain();
    v52 = v141;
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v30, (uint64_t)v48);
    v50 = v53;
    v120 = v54;
    result = swift_unknownObjectRelease();
    v48 = *(uint64_t **)(v139 + 64);
    v147 = *(uint64_t **)(v139 + 72);
    v52 = *(void *)(v139 + 88);
  }

  v116 = (__int128 *)(v139 + 16);
  v136 = v150 + 1;
  *(void *)&v165 = v141;
  *((void *)&v165 + 1) = v30;
  v148 = (__int128 *)&v158;
  v149 = &v168;
  *(void *)&v166 = v31;
  v133 = (uint64_t *)(v140 + 40);
  v145 = v50;
LABEL_56:
  if (v47 != v52) {
    goto LABEL_143;
  }
  v137 = v31;
  if (v31)
  {
    v55 = *(void *)(v31 + 24 * ((v30 >> ((4 * *(_BYTE *)(v31 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    v55 = specialized Rope._Node.subscript.getter(v30, (uint64_t)v48);
  }

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFADD__(v138, v55)) {
    goto LABEL_144;
  }
  v130 = &v138[v55];
  if (v48)
  {
    v56 = ((-15LL << ((4 * *((_BYTE *)v48 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v48 + 18) | ((unint64_t)*((unsigned __int16 *)v48 + 8) << ((4 * *((_BYTE *)v48 + 18) + 8) & 0x3C));
    result = swift_unknownObjectRetain();
  }

  else
  {
    v56 = 0LL;
  }

  v58 = v144;
  v57 = v145;
  if (v30 >= v56) {
    goto LABEL_145;
  }
  if (v137)
  {
    v59 = (4 * *(_BYTE *)(v137 + 18) + 8) & 0x3C;
    v60 = ((v30 >> v59) & 0xF) + 1;
    if (v60 < *(unsigned __int16 *)(v137 + 16))
    {
      v61 = (v60 << v59) | ((-15LL << v59) - 1) & v30;
      result = swift_unknownObjectRelease_n();
LABEL_71:
      v48 = (uint64_t *)v166;
      goto LABEL_79;
    }
  }

  v62 = *((unsigned __int8 *)v48 + 18);
  v63 = (4 * v62 + 8) & 0x3C;
  v64 = (v30 >> v63) & 0xF;
  *(void *)&v156 = v64;
  if (v62)
  {
    swift_unknownObjectRetain();
    v65 = specialized closure #1 in Rope._Node.formSuccessor(of:)( (uint64_t)(v48 + 3),  (uint64_t *)&v156,  (uint64_t)&v165,  (uint64_t)v48,  v62);
    result = swift_unknownObjectRelease();
    if ((v65 & 1) != 0)
    {
      result = swift_unknownObjectRelease_n();
      v61 = *((void *)&v165 + 1);
      v57 = v145;
      goto LABEL_71;
    }

    goto LABEL_74;
  }

  v66 = v64 + 1;
  if (v64 + 1 >= (unint64_t)*((unsigned __int16 *)v48 + 8))
  {
LABEL_74:
    if (v48)
    {
      v67 = *((unsigned __int8 *)v48 + 18);
      v68 = *((unsigned __int16 *)v48 + 8);
      result = swift_unknownObjectRelease_n();
      v61 = ((-15LL << ((4 * v67 + 8) & 0x3C)) - 1) & v67 | (unint64_t)(v68 << ((4 * v67 + 8) & 0x3C));
    }

    else
    {
      v61 = 0LL;
    }

    v48 = 0LL;
    *(void *)&v165 = v52;
    goto LABEL_78;
  }

  result = swift_unknownObjectRelease_n();
  v61 = (v66 << v63) | ((-15LL << v63) - 1) & v30;
LABEL_78:
  v57 = v145;
LABEL_79:
  if (v136 != v134)
  {
    if ((void)v165 != *(void *)(v46 + 88))
    {
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }

    v131 = v52;
    v132 = v30;
    v141 = v165;
    v128 = v48;
    v129 = v61;
    if (v48)
    {
      v69 = &v48[3 * ((v61 >> ((4 * *((_BYTE *)v48 + 18) + 8) & 0x3C)) & 0xF)];
      v70 = v69[4];
      v71 = v69[5];
      swift_bridgeObjectRetain();
      v135 = v71;
      swift_bridgeObjectRetain();
    }

    else
    {
      v72 = *(void *)(v46 + 64);
      swift_unknownObjectRetain();
      v57 = v145;
      specialized Rope._Node.subscript.getter(v61, v72);
      v135 = v73;
      v70 = v74;
      swift_unknownObjectRelease();
    }

    result = swift_bridgeObjectRetain();
    v75 = 0LL;
    v76 = v133;
    v150 = v70;
    while (1)
    {
      v78 = v75 + 1;
      if (__OFADD__(v75, 1LL))
      {
        __break(1u);
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }

      v80 = *(v76 - 1);
      v79 = *v76;
      if (*(void *)(v57 + 16))
      {
        swift_bridgeObjectRetain_n();
        v81 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v79);
        if ((v82 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v57 + 56) + 72 * v81, (uint64_t)&v175);
        }

        else
        {
          v179 = 0LL;
          v177 = 0u;
          v178 = 0u;
          v175 = 0u;
          v176 = 0u;
        }

        swift_bridgeObjectRelease();
        v70 = v150;
        if (!*(void *)(v150 + 16))
        {
LABEL_94:
          v174 = 0LL;
          v172 = 0u;
          v173 = 0u;
          v170 = 0u;
          v171 = 0u;
          goto LABEL_101;
        }
      }

      else
      {
        v179 = 0LL;
        v177 = 0u;
        v178 = 0u;
        v175 = 0u;
        v176 = 0u;
        swift_bridgeObjectRetain();
        if (!*(void *)(v70 + 16)) {
          goto LABEL_94;
        }
      }

      swift_bridgeObjectRetain();
      v83 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v79);
      if ((v84 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v70 + 56) + 72 * v83, (uint64_t)&v170);
      }

      else
      {
        v174 = 0LL;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
      }

      swift_bridgeObjectRelease();
LABEL_101:
      swift_bridgeObjectRelease();
      v48 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v175,  (uint64_t)&v165,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v170,  (uint64_t)v149,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!*((void *)&v166 + 1))
      {
        if (v169) {
          goto LABEL_118;
        }
        outlined destroy of Any?( (uint64_t)&v165,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v170,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = outlined destroy of Any?( (uint64_t)&v175,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_88;
      }

      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v165,  (uint64_t)v164,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v169) {
        goto LABEL_117;
      }
      v85 = *((_OWORD *)v149 + 3);
      v162[2] = *((_OWORD *)v149 + 2);
      v162[3] = v85;
      v163 = v149[8];
      v86 = *((_OWORD *)v149 + 1);
      v162[0] = *(_OWORD *)v149;
      v162[1] = v86;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v164,  (uint64_t)v161);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v162,  (uint64_t)v160);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v161,  (uint64_t)&v156,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v160,  (uint64_t)v148,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v157)
      {
        if (!v159)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v156);
LABEL_86:
          v77 = 0;
          goto LABEL_87;
        }

        outlined init with take of any PredicateExpression<Self.Output == B1>(&v156, (uint64_t)v153);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v148, (uint64_t)v152);
        v87 = v154;
        v143 = v155;
        v142 = __swift_project_boxed_opaque_existential_1(v153, v154);
        v147 = &v115;
        v88 = *(void *)(v87 - 8);
        MEMORY[0x1895F8858](v142);
        v90 = (char *)&v115 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v152,  (uint64_t)&v151);
        v91 = type metadata accessor for Optional();
        v146 = &v115;
        v92 = *(void *)(v91 - 8);
        MEMORY[0x1895F8858](v91);
        v94 = (char *)&v115 - v93;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v95 = swift_dynamicCast();
        v96 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56);
        if (v95)
        {
          v96(v94, 0LL, 1LL, v87);
          (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v90, v94, v87);
          v77 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v88 + 8))(v90, v87);
        }

        else
        {
          v96(v94, 1LL, 1LL, v87);
          (*(void (**)(char *, uint64_t))(v92 + 8))(v94, v91);
          v77 = 0;
        }

        v58 = v144;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v153);
        v57 = v145;
      }

      else
      {
        if (v159)
        {
          outlined destroy of Any?( (uint64_t)v148,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_86;
        }

        v77 = 1;
      }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v250 = v26 & 0xFFFFFFFFFFFFF0FFLL | (v38 << 8);
      v20 = v265;
      v251 = v30;
      goto LABEL_30;
    }

    v21 = v260;
LABEL_45:
    if (v27)
    {
LABEL_312:
      __break(1u);
      goto LABEL_313;
    }

    goto LABEL_46;
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v327);
  v250 = specialized Rope._endPath.getter(v22);
  result = swift_unknownObjectRelease();
  v27 = 0LL;
  v251 = 0LL;
  if (v22)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v264 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v259, v250, v251, v22, v25);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }

  v264 = 0LL;
LABEL_48:
  v44 = (char *)((char *)v270 - (char *)v27);
  if (__OFSUB__(v270, v27))
  {
LABEL_282:
    __break(1u);
    goto LABEL_283;
  }

  v45 = *(_OWORD *)(v21 + 32);
  v325[3] = *(_OWORD *)(v21 + 16);
  v325[4] = v45;
  v325[5] = *(_OWORD *)(v21 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v27))
  {
LABEL_283:
    __break(1u);
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
    goto LABEL_286;
  }

  v252 = (_OWORD *)(v21 + 16);
  v244 = BigString.UTF8View.index(_:offsetBy:)();
  v235 = v47;
  v236 = v46;
  v234 = v48;
  result = outlined release of Locale((uint64_t)&v305);
  v253 = *((void *)&v328 + 1);
  if (v264 == *((void *)&v328 + 1))
  {
    result = outlined release of AttributedString.Runs((uint64_t)v327);
    v236 = v268;
    v237 = 0LL;
    v234 = v267;
    v235 = v263;
    v49 = v266;
    goto LABEL_123;
  }

  if (v259 != *(void *)(v21 + 88)) {
    goto LABEL_300;
  }
  v232 = *((void *)&v327[0] + 1);
  if (v251)
  {
    v50 = v251 + 24 * ((v250 >> ((4 * *(_BYTE *)(v251 + 18) + 8) & 0x3C)) & 0xF);
    v52 = *(void **)(v50 + 32);
    v51 = *(void *)(v50 + 40);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }

  else
  {
    v53 = *(void *)(v21 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v250, v53);
    v52 = v54;
    v51 = v55;
    result = swift_unknownObjectRelease();
  }

  if (v232 >= v264)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v237 = 0LL;
    goto LABEL_115;
  }

  v225[1] = v51;
  v237 = 0LL;
  v271 = v293;
  v269 = (__int128 *)v280;
  v228 = (uint64_t *)(v261 + 40);
  v56 = v250;
  v57 = v251;
  v233 = v52;
LABEL_58:
  v59 = *(void *)(v21 + 64);
  v58 = *(void *)(v21 + 72);
  v60 = *(void *)(v21 + 88);
  *(void *)&v290 = v259;
  *((void *)&v290 + 1) = v56;
  *(void *)&v291 = v57;
  if (v259 != v60) {
    goto LABEL_303;
  }
  v272 = (_BYTE *)v58;
  if (v59)
  {
    v61 = *(unsigned __int8 *)(v59 + 18);
    v62 = v56;
    v63 = v44;
    v64 = v57;
    result = swift_unknownObjectRetain();
    v57 = v64;
    v44 = v63;
    v56 = v62;
    if (v62 <= v61) {
      goto LABEL_304;
    }
  }

  else if (!v56)
  {
    goto LABEL_304;
  }

  if (!v57 || (v65 = (4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C, ((v56 >> v65) & 0xF) == 0))
  {
    v67 = *(unsigned __int8 *)(v59 + 18);
    v68 = (4 * v67 + 8) & 0x3C;
    v69 = (v56 >> v68) & 0xF;
    *(void *)&v278 = v69;
    if (v67)
    {
      swift_unknownObjectRetain();
      v70 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v59 + 16,  v59 + 24,  (uint64_t *)&v278,  (uint64_t)&v290,  v67);
      result = swift_unknownObjectRelease();
      if ((v70 & 1) == 0) {
        goto LABEL_309;
      }
      if ((void)v290 != v259) {
        goto LABEL_307;
      }
      v57 = v291;
      v66 = *((void *)&v290 + 1);
      v20 = v265;
      if ((void)v291) {
        goto LABEL_70;
      }
    }

    else
    {
      if (!v69) {
        goto LABEL_309;
      }
      v66 = ((v69 - 1) << v68) | ((-15LL << v68) - 1) & v56;
      *((void *)&v290 + 1) = v66;
      *(void *)&v291 = v59;
      v57 = v59;
      v20 = v265;
      if (v59) {
        goto LABEL_70;
      }
    }

    swift_unknownObjectRetain();
    v231 = v66;
    v72 = specialized Rope._Node.subscript.getter(v66, v59);
    swift_unknownObjectRelease();
    v229 = 0LL;
    v73 = 1;
    goto LABEL_74;
  }

  v66 = ((((v56 >> v65) & 0xF) - 1) << v65) | ((-15LL << v65) - 1) & v56;
  *((void *)&v290 + 1) = v66;
LABEL_70:
  v71 = (4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C;
  v231 = v66;
  v229 = v57;
  v72 = *(void *)(v57 + 24 * ((v66 >> v71) & 0xF) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v73 = 0;
LABEL_74:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFSUB__(v44, v72)) {
    goto LABEL_305;
  }
  if (v259 != *(void *)(v21 + 88)) {
    goto LABEL_306;
  }
  v226 = &v44[-v72];
  v227 = v44;
  if ((v73 & 1) != 0)
  {
    v74 = *(void *)(v21 + 64);
    swift_unknownObjectRetain();
    v20 = v265;
    specialized Rope._Node.subscript.getter(v231, v74);
    v230 = v75;
    v77 = v76;
    swift_unknownObjectRelease();
  }

  else
  {
    v78 = v229 + 24 * ((v231 >> ((4 * *(_BYTE *)(v229 + 18) + 8) & 0x3C)) & 0xF);
    v77 = *(void *)(v78 + 32);
    v79 = *(void *)(v78 + 40);
    swift_bridgeObjectRetain();
    v230 = v79;
    swift_bridgeObjectRetain();
  }

  --v264;
  result = swift_bridgeObjectRetain();
  v80 = 0LL;
  v81 = v228;
  v272 = (_BYTE *)v77;
  while (1)
  {
    v83 = v80 + 1;
    if (__OFADD__(v80, 1LL)) {
      goto LABEL_268;
    }
    v85 = *(v81 - 1);
    v84 = *v81;
    if (v52[2])
    {
      swift_bridgeObjectRetain_n();
      v86 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v84);
      if ((v87 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(v52[7] + 72 * v86, (uint64_t)&v300);
      }

      else
      {
        v304 = 0LL;
        v302 = 0u;
        v303 = 0u;
        v300 = 0u;
        v301 = 0u;
      }

      swift_bridgeObjectRelease();
      v77 = (uint64_t)v272;
      if (!*((void *)v272 + 2))
      {
LABEL_89:
        v299 = 0LL;
        v297 = 0u;
        v298 = 0u;
        v295 = 0u;
        v296 = 0u;
        goto LABEL_96;
      }
    }

    else
    {
      v304 = 0LL;
      v302 = 0u;
      v303 = 0u;
      v300 = 0u;
      v301 = 0u;
      swift_bridgeObjectRetain();
      if (!*(void *)(v77 + 16)) {
        goto LABEL_89;
      }
    }

    swift_bridgeObjectRetain();
    v88 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v84);
    if ((v89 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v77 + 56) + 72 * v88, (uint64_t)&v295);
    }

    else
    {
      v299 = 0LL;
      v297 = 0u;
      v298 = 0u;
      v295 = 0u;
      v296 = 0u;
    }

    swift_bridgeObjectRelease();
LABEL_96:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v300,  (uint64_t)&v290,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v295,  (uint64_t)v271,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!*((void *)&v291 + 1))
    {
      if (v294) {
        goto LABEL_113;
      }
      outlined destroy of Any?( (uint64_t)&v290,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v295,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?( (uint64_t)&v300,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_83;
    }

    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v290,  (uint64_t)v289,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v294) {
      break;
    }
    v90 = *((_OWORD *)v271 + 3);
    v286 = *((_OWORD *)v271 + 2);
    v287 = v90;
    v288 = *((void *)v271 + 8);
    v91 = *((_OWORD *)v271 + 1);
    v284 = *(_OWORD *)v271;
    v285 = v91;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v289,  (uint64_t)v325);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v284,  (uint64_t)v324);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v325,  (uint64_t)&v278,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v324,  (uint64_t)v269,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v279)
    {
      if (!v281)
      {
        v82 = 1;
        goto LABEL_82;
      }

      outlined destroy of Any?((uint64_t)v269, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_81:
      v82 = 0;
      goto LABEL_82;
    }

    if (!v281)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v278);
      goto LABEL_81;
    }

    outlined init with take of any PredicateExpression<Self.Output == B1>(&v278, (uint64_t)&v321);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v269, (uint64_t)v308);
    v92 = *((void *)&v322 + 1);
    v256 = v323;
    v255 = __swift_project_boxed_opaque_existential_1(&v321, *((uint64_t *)&v322 + 1));
    v262 = v225;
    v93 = *(void *)(v92 - 8);
    MEMORY[0x1895F8858](v255);
    v95 = (char *)v225 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v308,  (uint64_t)v307);
    v96 = type metadata accessor for Optional();
    v258 = (char *)v225;
    v97 = *(void *)(v96 - 8);
    MEMORY[0x1895F8858](v96);
    v99 = (char *)v225 - v98;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v100 = swift_dynamicCast();
    v101 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56);
    if (v100)
    {
      v101(v99, 0LL, 1LL, v92);
      (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v95, v99, v92);
      v82 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v93 + 8))(v95, v92);
    }

    else
    {
      v101(v99, 1LL, 1LL, v92);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v96);
      v82 = 0;
    }

    v20 = v265;
    v52 = v233;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v308);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v321);
LABEL_82:
    outlined destroy of Any?((uint64_t)v324, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v325, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v284);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v289);
    outlined destroy of Any?( (uint64_t)&v290,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?( (uint64_t)&v295,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    result = outlined destroy of Any?( (uint64_t)&v300,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v82 & 1) == 0) {
      goto LABEL_114;
    }
LABEL_83:
    v81 += 2;
    ++v80;
    v77 = (uint64_t)v272;
    if (v83 == v20)
    {
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v326);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v102 = v226;
      v44 = v226;
      v56 = v231;
      v21 = v260;
      v57 = v229;
      if (v232 >= v264)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v44 = v102;
        goto LABEL_115;
      }

      goto LABEL_58;
    }
  }

  outlined destroy of AttributedString._AttributeValue((uint64_t)v289);
LABEL_113:
  outlined destroy of Any?( (uint64_t)&v290,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?( (uint64_t)&v295,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?( (uint64_t)&v300,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_114:
  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v326);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v260;
  v44 = v227;
LABEL_115:
  v103 = v252;
  v104 = v252[1];
  v325[0] = *v252;
  v325[1] = v104;
  v325[2] = v252[2];
  BigString.utf8.getter();
  result = v244;
  if (__OFSUB__(v44, v244 >> 11)) {
    goto LABEL_301;
  }
  v105 = BigString.UTF8View.index(_:offsetBy:)();
  v107 = v106;
  v109 = v108;
  v49 = v110;
  outlined release of Locale((uint64_t)&v306);
  if (v248 >= v105 >> 10) {
    v111 = v254;
  }
  else {
    v111 = v105;
  }
  if (v248 >= v105 >> 10)
  {
    v107 = v247;
    v109 = v246;
    v49 = (void *)v245;
  }

  v112 = v103[1];
  v324[0] = *v103;
  v324[1] = v112;
  v324[2] = v103[2];
  BigString.unicodeScalars.getter();
  v113 = BigString.UnicodeScalarView.index(after:)();
  outlined release of Locale((uint64_t)v307);
  result = outlined release of AttributedString.Runs((uint64_t)v327);
  v236 = v111;
  if (v113 >> 10 < v111 >> 10)
  {
LABEL_302:
    __break(1u);
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
LABEL_307:
    __break(1u);
    goto LABEL_308;
  }

  v234 = v109;
  v235 = v107;
LABEL_123:
  if (v249 >= v257) {
    goto LABEL_284;
  }
  v114 = *(void *)(v21 + 64);
  v115 = *(void *)(v21 + 72);
  v116 = *(void *)(v21 + 80);
  v262 = *(void **)(v21 + 88);
  v233 = v49;
  if (!v114)
  {
    if (v268 >= 0x800)
    {
LABEL_308:
      __break(1u);
LABEL_309:
      __break(1u);
      goto LABEL_310;
    }

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v33 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v35 << 8);
    v12 = v143;
    goto LABEL_30;
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v184);
  v33 = specialized Rope._endPath.getter(v13);
  result = (unint64_t *)swift_unknownObjectRelease();
  v34 = 0LL;
  v15 = 0LL;
  if (v13)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v153 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v144, v33, v34, v13, v153);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_48;
  }

  v153 = 0LL;
LABEL_48:
  v142 = (char *)v152 - v15;
  if (__OFSUB__(v152, v15))
  {
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  v41 = *(_OWORD *)(v12 + 32);
  v183[3] = *(_OWORD *)(v12 + 16);
  v183[4] = v41;
  v183[5] = *(_OWORD *)(v12 + 48);
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(0LL, v15))
  {
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }

  v42 = BigString.UTF8View.index(_:offsetBy:)();
  v44 = v43;
  v46 = v45;
  v122 = v47;
  result = (unint64_t *)outlined release of Locale((uint64_t)v183);
  v135 = *((void *)&v185 + 1);
  if (v153 >= *((uint64_t *)&v185 + 1))
  {
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }

  if (v144 != *(void *)(v12 + 88))
  {
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }

  v120[1] = v46;
  v120[2] = v44;
  v124 = v42;
  v48 = *(uint64_t **)(v12 + 64);
  if (v34)
  {
    v49 = v34 + 24 * ((v33 >> ((4 * *(_BYTE *)(v34 + 18) + 8) & 0x3C)) & 0xF);
    v50 = *(void *)(v49 + 32);
    v51 = *(void *)(v49 + 40);
    swift_bridgeObjectRetain();
    v123 = v51;
    result = (unint64_t *)swift_bridgeObjectRetain();
    v52 = v144;
    v53 = v144;
    v54 = v138;
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v33, (uint64_t)v48);
    v50 = v55;
    v123 = v56;
    result = (unint64_t *)swift_unknownObjectRelease();
    v48 = *(uint64_t **)(v12 + 64);
    v53 = *(void *)(v12 + 88);
    v54 = v138;
    v52 = v144;
  }

  v121 = (__int128 *)(v12 + 16);
  v140 = v153 + 1;
  *(void *)&v168 = v52;
  *((void *)&v168 + 1) = v33;
  v151 = (__int128 *)&v161;
  v152 = &v171;
  *(void *)&v169 = v34;
  v134 = (uint64_t *)(v54 + 40);
  v148 = v50;
LABEL_56:
  if (v52 != v53) {
    goto LABEL_143;
  }
  v137 = v53;
  v141 = v34;
  if (v34)
  {
    v57 = *(void *)(v34 + 24 * ((v33 >> ((4 * *(_BYTE *)(v34 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    v57 = specialized Rope._Node.subscript.getter(v33, (uint64_t)v48);
  }

  swift_bridgeObjectRelease();
  result = (unint64_t *)swift_bridgeObjectRelease();
  v58 = &v142[v57];
  if (__OFADD__(v142, v57)) {
    goto LABEL_144;
  }
  if (v48)
  {
    v59 = ((-15LL << ((4 * *((_BYTE *)v48 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v48 + 18) | ((unint64_t)*((unsigned __int16 *)v48 + 8) << ((4 * *((_BYTE *)v48 + 18) + 8) & 0x3C));
    result = (unint64_t *)swift_unknownObjectRetain();
  }

  else
  {
    v59 = 0LL;
  }

  v60 = v147;
  if (v33 >= v59) {
    goto LABEL_145;
  }
  if (v141)
  {
    v61 = (4 * *(_BYTE *)(v141 + 18) + 8) & 0x3C;
    v62 = ((v33 >> v61) & 0xF) + 1;
    if (v62 < *(unsigned __int16 *)(v141 + 16))
    {
      v139 = (v62 << v61) | ((-15LL << v61) - 1) & v33;
      result = (unint64_t *)swift_unknownObjectRelease_n();
LABEL_71:
      v48 = (uint64_t *)v169;
      goto LABEL_79;
    }
  }

  v63 = *((unsigned __int8 *)v48 + 18);
  v64 = (4 * v63 + 8) & 0x3C;
  v65 = (v33 >> v64) & 0xF;
  *(void *)&v159 = v65;
  if (v63)
  {
    swift_unknownObjectRetain();
    v66 = specialized closure #1 in Rope._Node.formSuccessor(of:)( (uint64_t)(v48 + 3),  (uint64_t *)&v159,  (uint64_t)&v168,  (uint64_t)v48,  v63);
    result = (unint64_t *)swift_unknownObjectRelease();
    v12 = v143;
    if ((v66 & 1) != 0)
    {
      result = (unint64_t *)swift_unknownObjectRelease_n();
      v139 = *((void *)&v168 + 1);
      goto LABEL_71;
    }
  }

  else
  {
    v67 = v65 + 1;
    if (v65 + 1 < (unint64_t)*((unsigned __int16 *)v48 + 8))
    {
      result = (unint64_t *)swift_unknownObjectRelease_n();
      v139 = (v67 << v64) | ((-15LL << v64) - 1) & v33;
      v12 = v143;
      goto LABEL_79;
    }

    v12 = v143;
  }

  if (v48)
  {
    v68 = *((unsigned __int8 *)v48 + 18);
    v69 = *((unsigned __int16 *)v48 + 8);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    v70 = (4 * v68 + 8) & 0x3C;
    v71 = ((-15LL << v70) - 1) & v68;
    v72 = v69 << v70;
    v12 = v143;
    v139 = v71 | v72;
  }

  else
  {
    v139 = 0LL;
  }

  v48 = 0LL;
  *(void *)&v168 = v137;
LABEL_79:
  v73 = v148;
  if (v140 != v135)
  {
    if ((void)v168 != *(void *)(v12 + 88))
    {
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }

    v144 = v168;
    v132 = v58;
    v133 = v33;
    v131 = v48;
    if (v48)
    {
      v74 = &v48[3 * ((v139 >> ((4 * *((_BYTE *)v48 + 18) + 8) & 0x3C)) & 0xF)];
      v75 = v74[4];
      v76 = v74[5];
      swift_bridgeObjectRetain();
      v136 = v76;
      swift_bridgeObjectRetain();
    }

    else
    {
      v77 = *(void *)(v12 + 64);
      swift_unknownObjectRetain();
      v73 = v148;
      specialized Rope._Node.subscript.getter(v139, v77);
      v136 = v78;
      v75 = v79;
      swift_unknownObjectRelease();
    }

    result = (unint64_t *)swift_bridgeObjectRetain();
    v80 = 0LL;
    v81 = v134;
    v153 = v75;
    while (1)
    {
      v83 = v80 + 1;
      if (__OFADD__(v80, 1LL))
      {
        __break(1u);
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }

      v85 = *(v81 - 1);
      v84 = *v81;
      if (*(void *)(v73 + 16))
      {
        swift_bridgeObjectRetain_n();
        v86 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v84);
        if ((v87 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v73 + 56) + 72 * v86, (uint64_t)&v178);
        }

        else
        {
          v182 = 0LL;
          v180 = 0u;
          v181 = 0u;
          v178 = 0u;
          v179 = 0u;
        }

        swift_bridgeObjectRelease();
        v75 = v153;
        if (!*(void *)(v153 + 16))
        {
LABEL_94:
          v177 = 0LL;
          v175 = 0u;
          v176 = 0u;
          v173 = 0u;
          v174 = 0u;
          goto LABEL_101;
        }
      }

      else
      {
        v182 = 0LL;
        v180 = 0u;
        v181 = 0u;
        v178 = 0u;
        v179 = 0u;
        swift_bridgeObjectRetain();
        if (!*(void *)(v75 + 16)) {
          goto LABEL_94;
        }
      }

      swift_bridgeObjectRetain();
      v88 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v84);
      if ((v89 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v75 + 56) + 72 * v88, (uint64_t)&v173);
      }

      else
      {
        v177 = 0LL;
        v175 = 0u;
        v176 = 0u;
        v173 = 0u;
        v174 = 0u;
      }

      swift_bridgeObjectRelease();
LABEL_101:
      swift_bridgeObjectRelease();
      v48 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v178,  (uint64_t)&v168,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v173,  (uint64_t)v152,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!*((void *)&v169 + 1))
      {
        if (v172) {
          goto LABEL_118;
        }
        outlined destroy of Any?( (uint64_t)&v168,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v173,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = (unint64_t *)outlined destroy of Any?( (uint64_t)&v178,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_88;
      }

      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v168,  (uint64_t)v167,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v172) {
        goto LABEL_117;
      }
      v90 = *((_OWORD *)v152 + 3);
      v165[2] = *((_OWORD *)v152 + 2);
      v165[3] = v90;
      v166 = v152[8];
      v91 = *((_OWORD *)v152 + 1);
      v165[0] = *(_OWORD *)v152;
      v165[1] = v91;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v167,  (uint64_t)v164);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v165,  (uint64_t)v163);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v164,  (uint64_t)&v159,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v163,  (uint64_t)v151,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v160)
      {
        if (!v162)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v159);
LABEL_86:
          v82 = 0;
          goto LABEL_87;
        }

        outlined init with take of any PredicateExpression<Self.Output == B1>(&v159, (uint64_t)v156);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v151, (uint64_t)v155);
        v92 = v157;
        v146 = v158;
        v145 = __swift_project_boxed_opaque_existential_1(v156, v157);
        v150 = v120;
        v93 = *(void *)(v92 - 8);
        MEMORY[0x1895F8858](v145);
        v95 = (char *)v120 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v155,  (uint64_t)&v154);
        v96 = type metadata accessor for Optional();
        v149 = v120;
        v97 = *(void *)(v96 - 8);
        MEMORY[0x1895F8858](v96);
        v99 = (char *)v120 - v98;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v100 = swift_dynamicCast();
        v101 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56);
        if (v100)
        {
          v101(v99, 0LL, 1LL, v92);
          (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v95, v99, v92);
          v82 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v93 + 8))(v95, v92);
        }

        else
        {
          v101(v99, 1LL, 1LL, v92);
          (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v96);
          v82 = 0;
        }

        v60 = v147;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v156);
        v73 = v148;
      }

      else
      {
        if (v162)
        {
          outlined destroy of Any?( (uint64_t)v151,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_86;
        }

        v82 = 1;
      }

    v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    LODWORD(v58) = 0;
    v57 = 73LL;
LABEL_47:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x183172674LL);
  }

  v11 = v10;
  v12 = (void *)MEMORY[0x186E20F44](v64);
  if (!v12) {
    goto LABEL_47;
  }
  v13 = v12;
  v14 = objc_msgSend(v12, sel_stringWithFileSystemRepresentation_length_, v56, v11);

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  *a5 = v15;
  a5[1] = v17;
  return outlined destroy of _FileManagerImpl((uint64_t)v64);
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v32 = v106;
        if (!v106)
        {
LABEL_30:
          Hasher._combine(_:)(0);
          v33 = v107;
          if (!v107)
          {
LABEL_31:
            Hasher._combine(_:)(0);
            goto LABEL_49;
          }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v28 = v113;
        if (!v113)
        {
LABEL_30:
          Hasher._combine(_:)(0);
          v29 = v114;
          if (!v114)
          {
LABEL_31:
            v30 = a1;
            Hasher._combine(_:)(0);
            goto LABEL_49;
          }

  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::UInt v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2);
  }
  v16 = *((void *)v2 + 2);
  v15 = *((void *)v2 + 3);
  if (v16 >= v15 >> 1) {
    Swift::UInt v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v15 > 1),  v16 + 1,  1,  v2);
  }
  *((void *)v2 + 2) = v16 + 1;
  v2[v16 + 32] = 10;
  if ((v1 & 8) == 0)
  {
LABEL_18:
    if ((v1 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }

    v48 = (v41 - 1) & v41;
    v49 = v42;
    v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    v30 = 24 * v29;
    v31 = *(void *)(v51 + 48) + v30;
    v32 = *(void *)v31;
    v33 = *(void *)(v31 + 8);
    v34 = *(void *)(v51 + 56) + v30;
    v46 = *(void *)v34;
    v35 = *(void *)v34;
    v47 = *(void *)(v34 + 8);
    v36 = *(void *)(v16 + 48) + v30;
    v37 = *(_BYTE *)(v31 + 16);
    v38 = *(_BYTE *)(v34 + 16);
    *(void *)v36 = *(void *)v31;
    *(void *)(v36 + 8) = v33;
    *(_BYTE *)(v36 + 16) = v37;
    v39 = *(void *)(v16 + 56) + v30;
    *(void *)v39 = v35;
    *(void *)(v39 + 8) = v47;
    *(_BYTE *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    v28 = v48;
    v25 = v49;
  }

  v43 = v25 + 9;
  if (v25 + 9 >= v45) {
    goto LABEL_47;
  }
  v41 = *(void *)(v44 + 8 * v43);
  if (v41)
  {
    v42 = v25 + 9;
    goto LABEL_46;
  }

  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      break;
    }
    if (v42 >= v45) {
      goto LABEL_47;
    }
    v41 = *(void *)(v44 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_46;
    }
  }

    v48 = (v41 - 1) & v41;
    v49 = v42;
    v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    v30 = 24 * v29;
    v31 = *(void *)(v51 + 48) + v30;
    v32 = *(void *)v31;
    v33 = *(void *)(v31 + 8);
    v34 = *(void *)(v51 + 56) + v30;
    v46 = *(void *)v34;
    v35 = *(void *)v34;
    v47 = *(void *)(v34 + 8);
    v36 = *(void *)(v16 + 48) + v30;
    v37 = *(_BYTE *)(v31 + 16);
    v38 = *(_BYTE *)(v34 + 16);
    *(void *)v36 = *(void *)v31;
    *(void *)(v36 + 8) = v33;
    *(_BYTE *)(v36 + 16) = v37;
    v39 = *(void *)(v16 + 56) + v30;
    *(void *)v39 = v35;
    *(void *)(v39 + 8) = v47;
    *(_BYTE *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    v28 = v48;
    v25 = v49;
  }

  v43 = v25 + 9;
  if (v25 + 9 >= v45) {
    goto LABEL_47;
  }
  v41 = *(void *)(v44 + 8 * v43);
  if (v41)
  {
    v42 = v25 + 9;
    goto LABEL_46;
  }

  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      break;
    }
    if (v42 >= v45) {
      goto LABEL_47;
    }
    v41 = *(void *)(v44 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_46;
    }
  }

    v48 = (v41 - 1) & v41;
    v49 = v42;
    v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    v30 = 24 * v29;
    v31 = *(void *)(v51 + 48) + v30;
    v32 = *(void *)v31;
    v33 = *(void *)(v31 + 8);
    v34 = *(void *)(v51 + 56) + v30;
    v46 = *(void *)v34;
    v35 = *(void *)v34;
    v47 = *(void *)(v34 + 8);
    v36 = *(void *)(v16 + 48) + v30;
    v37 = *(_BYTE *)(v31 + 16);
    v38 = *(_BYTE *)(v34 + 16);
    *(void *)v36 = *(void *)v31;
    *(void *)(v36 + 8) = v33;
    *(_BYTE *)(v36 + 16) = v37;
    v39 = *(void *)(v16 + 56) + v30;
    *(void *)v39 = v35;
    *(void *)(v39 + 8) = v47;
    *(_BYTE *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    v28 = v48;
    v25 = v49;
  }

  v43 = v25 + 9;
  if (v25 + 9 >= v45) {
    goto LABEL_47;
  }
  v41 = *(void *)(v44 + 8 * v43);
  if (v41)
  {
    v42 = v25 + 9;
    goto LABEL_46;
  }

  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      break;
    }
    if (v42 >= v45) {
      goto LABEL_47;
    }
    v41 = *(void *)(v44 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_46;
    }
  }

    v48 = (v41 - 1) & v41;
    v49 = v42;
    v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    v30 = 24 * v29;
    v31 = *(void *)(v51 + 48) + v30;
    v32 = *(void *)v31;
    v33 = *(void *)(v31 + 8);
    v34 = *(void *)(v51 + 56) + v30;
    v46 = *(void *)v34;
    v35 = *(void *)v34;
    v47 = *(void *)(v34 + 8);
    v36 = *(void *)(v16 + 48) + v30;
    v37 = *(_BYTE *)(v31 + 16);
    v38 = *(_BYTE *)(v34 + 16);
    *(void *)v36 = *(void *)v31;
    *(void *)(v36 + 8) = v33;
    *(_BYTE *)(v36 + 16) = v37;
    v39 = *(void *)(v16 + 56) + v30;
    *(void *)v39 = v35;
    *(void *)(v39 + 8) = v47;
    *(_BYTE *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    v28 = v48;
    v25 = v49;
  }

  v43 = v25 + 9;
  if (v25 + 9 >= v45) {
    goto LABEL_47;
  }
  v41 = *(void *)(v44 + 8 * v43);
  if (v41)
  {
    v42 = v25 + 9;
    goto LABEL_46;
  }

  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      break;
    }
    if (v42 >= v45) {
      goto LABEL_47;
    }
    v41 = *(void *)(v44 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_46;
    }
  }

    v48 = (v41 - 1) & v41;
    v49 = v42;
    v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    v30 = 24 * v29;
    v31 = *(void *)(v51 + 48) + v30;
    v32 = *(void *)v31;
    v33 = *(void *)(v31 + 8);
    v34 = *(void *)(v51 + 56) + v30;
    v46 = *(void *)v34;
    v35 = *(void *)v34;
    v47 = *(void *)(v34 + 8);
    v36 = *(void *)(v16 + 48) + v30;
    v37 = *(_BYTE *)(v31 + 16);
    v38 = *(_BYTE *)(v34 + 16);
    *(void *)v36 = *(void *)v31;
    *(void *)(v36 + 8) = v33;
    *(_BYTE *)(v36 + 16) = v37;
    v39 = *(void *)(v16 + 56) + v30;
    *(void *)v39 = v35;
    *(void *)(v39 + 8) = v47;
    *(_BYTE *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    v28 = v48;
    v25 = v49;
  }

  v43 = v25 + 9;
  if (v25 + 9 >= v45) {
    goto LABEL_47;
  }
  v41 = *(void *)(v44 + 8 * v43);
  if (v41)
  {
    v42 = v25 + 9;
    goto LABEL_46;
  }

  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      break;
    }
    if (v42 >= v45) {
      goto LABEL_47;
    }
    v41 = *(void *)(v44 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_46;
    }
  }

    v48 = (v41 - 1) & v41;
    v49 = v42;
    v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    v30 = 24 * v29;
    v31 = *(void *)(v51 + 48) + v30;
    v32 = *(void *)v31;
    v33 = *(void *)(v31 + 8);
    v34 = *(void *)(v51 + 56) + v30;
    v46 = *(void *)v34;
    v35 = *(void *)v34;
    v47 = *(void *)(v34 + 8);
    v36 = *(void *)(v16 + 48) + v30;
    v37 = *(_BYTE *)(v31 + 16);
    v38 = *(_BYTE *)(v34 + 16);
    *(void *)v36 = *(void *)v31;
    *(void *)(v36 + 8) = v33;
    *(_BYTE *)(v36 + 16) = v37;
    v39 = *(void *)(v16 + 56) + v30;
    *(void *)v39 = v35;
    *(void *)(v39 + 8) = v47;
    *(_BYTE *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    v28 = v48;
    v25 = v49;
  }

  v43 = v25 + 9;
  if (v25 + 9 >= v45) {
    goto LABEL_47;
  }
  v41 = *(void *)(v44 + 8 * v43);
  if (v41)
  {
    v42 = v25 + 9;
    goto LABEL_46;
  }

  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      break;
    }
    if (v42 >= v45) {
      goto LABEL_47;
    }
    v41 = *(void *)(v44 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_46;
    }
  }

  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

        v48 = (4 * *(_BYTE *)(v47 + 18) + 8) & 0x3C;
        v45 = ((-15LL << v48) - 1) & v45 | (v49 << v48);
        v14 = *(void *)(v47 + 24 + 24 * v49);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v47 = v14;
        if (!*(_BYTE *)(v14 + 18)) {
          goto LABEL_71;
        }
      }
    }

    result = swift_unknownObjectRetain_n();
    v45 = 0LL;
    v46 = v65;
    v14 = v42;
LABEL_71:
    v56 = *(unsigned __int16 *)(v14 + 16);
    if (!*(_WORD *)(v14 + 16)) {
      goto LABEL_80;
    }
    v57 = *(void *)(v14 + 24);
    v30 = __OFSUB__(v46, v57);
    v58 = v46 - v57;
    if (v30) {
      goto LABEL_115;
    }
    if (__OFADD__(v58, 1LL)) {
      goto LABEL_116;
    }
    if (v58 + 1 <= 0)
    {
      v56 = 0LL;
    }

    else
    {
      if ((_DWORD)v56 == 1) {
        goto LABEL_81;
      }
      v59 = *(void *)(v14 + 48);
      v46 = v58 - v59;
      if (__OFSUB__(v58, v59)) {
        goto LABEL_117;
      }
      if (__OFADD__(v46, 1LL)) {
        goto LABEL_118;
      }
      if (v46 + 1 >= 1)
      {
        if ((_DWORD)v56 != 2)
        {
          v60 = (void *)(v14 + 72);
          v61 = 2LL;
          while (v56 != v61)
          {
            v58 = v46 - *v60;
            if (__OFSUB__(v46, *v60)) {
              goto LABEL_112;
            }
            if (__OFADD__(v58, 1LL)) {
              goto LABEL_113;
            }
            if (v58 + 1 < 1)
            {
              v56 = v61;
              goto LABEL_93;
            }

            ++v61;
            v60 += 3;
            v46 = v58;
            if (v56 == v61) {
              goto LABEL_81;
            }
          }

          goto LABEL_111;
        }

      if (!v14) {
        goto LABEL_47;
      }
LABEL_63:
      __break(1u);
      return;
    }
  }

  swift_unknownObjectRetain_n();
  swift_retain();
  v12 = specialized Rope._endPath.getter(v5);
  swift_unknownObjectRelease();
  v13 = 0LL;
  v14 = 0LL;
  if (!v5)
  {
    swift_release();
    v15 = 0LL;
    goto LABEL_49;
  }

    __src = (void *)((v40 - 1) & v40);
    v67 = v41;
    v33 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_25:
    v34 = 16 * v33;
    v35 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v33);
    v36 = v35[1];
    v63 = *v35;
    v37 = 32 * v33;
    outlined init with copy of Any(*(void *)(v9 + 56) + 32 * v33, (uint64_t)v69);
    v38 = (void *)(*(void *)(v15 + 48) + v34);
    *v38 = v63;
    v38[1] = v36;
    outlined init with take of Any(v69, (_OWORD *)(*(void *)(v15 + 56) + v37));
    swift_bridgeObjectRetain();
    v32 = (unint64_t)__src;
    v29 = v67;
  }

  v42 = v29 + 7;
  if (v29 + 7 >= v62) {
    goto LABEL_47;
  }
  v40 = *(void *)(v61 + 8 * v42);
  if (v40)
  {
    v41 = v29 + 7;
    goto LABEL_46;
  }

  while (1)
  {
    v41 = v42 + 1;
    if (__OFADD__(v42, 1LL)) {
      break;
    }
    if (v41 >= v62) {
      goto LABEL_47;
    }
    v40 = *(void *)(v61 + 8 * v41);
    ++v42;
    if (v40) {
      goto LABEL_46;
    }
  }

    v30 = (v38 - 1) & v38;
    __src = (char *)v39;
    v32 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_25:
    v33 = 8 * v32;
    v34 = *(void **)(*(void *)(v7 + 48) + 8 * v32);
    v35 = 32 * v32;
    outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v32, (uint64_t)v63);
    *(void *)(*(void *)(v13 + 48) + v33) = v34;
    outlined init with take of Any(v63, (_OWORD *)(*(void *)(v13 + 56) + v35));
    v36 = v34;
    v27 = __src;
  }

  v40 = v27 + 7;
  v38 = *(void *)(v58 + 8LL * (void)v40);
  if (v38)
  {
    v39 = (int64_t)(v27 + 7);
    goto LABEL_46;
  }

  while (1)
  {
    v39 = (int64_t)(v40 + 1);
    if (__OFADD__(v40, 1LL)) {
      break;
    }
    if (v39 >= v59) {
      goto LABEL_47;
    }
    v38 = *(void *)(v58 + 8 * v39);
    ++v40;
    if (v38) {
      goto LABEL_46;
    }
  }

    v30 = (v38 - 1) & v38;
    __src = (char *)v39;
    v32 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_25:
    v33 = 8 * v32;
    v34 = *(void **)(*(void *)(v7 + 48) + 8 * v32);
    v35 = 32 * v32;
    outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v32, (uint64_t)v63);
    *(void *)(*(void *)(v13 + 48) + v33) = v34;
    outlined init with take of Any(v63, (_OWORD *)(*(void *)(v13 + 56) + v35));
    v36 = v34;
    v27 = __src;
  }

  v40 = v27 + 7;
  v38 = *(void *)(v58 + 8LL * (void)v40);
  if (v38)
  {
    v39 = (int64_t)(v27 + 7);
    goto LABEL_46;
  }

  while (1)
  {
    v39 = (int64_t)(v40 + 1);
    if (__OFADD__(v40, 1LL)) {
      break;
    }
    if (v39 >= v59) {
      goto LABEL_47;
    }
    v38 = *(void *)(v58 + 8 * v39);
    ++v40;
    if (v38) {
      goto LABEL_46;
    }
  }

    v30 = (v38 - 1) & v38;
    __src = (char *)v39;
    v32 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_25:
    v33 = 8 * v32;
    v34 = *(void **)(*(void *)(v7 + 48) + 8 * v32);
    v35 = 32 * v32;
    outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v32, (uint64_t)v63);
    *(void *)(*(void *)(v13 + 48) + v33) = v34;
    outlined init with take of Any(v63, (_OWORD *)(*(void *)(v13 + 56) + v35));
    v36 = v34;
    v27 = __src;
  }

  v40 = v27 + 7;
  v38 = *(void *)(v58 + 8LL * (void)v40);
  if (v38)
  {
    v39 = (int64_t)(v27 + 7);
    goto LABEL_46;
  }

  while (1)
  {
    v39 = (int64_t)(v40 + 1);
    if (__OFADD__(v40, 1LL)) {
      break;
    }
    if (v39 >= v59) {
      goto LABEL_47;
    }
    v38 = *(void *)(v58 + 8 * v39);
    ++v40;
    if (v38) {
      goto LABEL_46;
    }
  }

          v83 = (v52 - 1) & v52;
          v84 = (void (*)(char *, uint64_t, uint64_t))v53;
          v44 = __clz(__rbit64(v52)) + (v53 << 6);
        }

        v80 = 24 * v44;
        v45 = *(void *)(a4 + 56);
        v46 = *(void *)(a4 + 48) + 24 * v44;
        v47 = *(void *)(v46 + 8);
        v81 = *(void *)v46;
        LODWORD(v82) = *(unsigned __int8 *)(v46 + 16);
        v48 = *(void *)(v14 + 72) * v44;
        v49 = v86;
        (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v86, v45 + v48, v13);
        v50 = *(void *)(v22 + 48) + v80;
        *(void *)v50 = v81;
        *(void *)(v50 + 8) = v47;
        *(_BYTE *)(v50 + 16) = v82;
        (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v22 + 56) + v48, v49, v13);
        swift_bridgeObjectRetain();
        v43 = v83;
        v40 = v84;
      }
    }

    swift_bridgeObjectRelease();
    goto LABEL_5;
  }

  v84 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 32);
  v84(v18, a1, v13);
  v23 = swift_isUniquelyReferenced_nonNull_native();
  v24 = a3;
  v87 = *v5;
  a3 = v87;
  *v5 = 0x8000000000000000LL;
  v85 = v24;
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v24, a4 & 1);
  v27 = *(void *)(a3 + 16);
  v28 = (v26 & 1) == 0;
  v29 = __OFADD__(v27, v28);
  v30 = v27 + v28;
  if (v29)
  {
    __break(1u);
    goto LABEL_19;
  }

  v31 = v26;
  if (*(void *)(a3 + 24) < v30)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, v23);
    v32 = v87;
    v33 = v85;
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v85, a4 & 1);
    if ((v31 & 1) != (v34 & 1)) {
      goto LABEL_84;
    }
    if ((v31 & 1) != 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }

  if ((v23 & 1) != 0)
  {
    v32 = a3;
    goto LABEL_15;
  }

  v75 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RegexPatternCache.Key, Regex<AnyRegexOutput>>);
  v56 = static _DictionaryStorage.copy(original:)();
  v32 = v56;
  if (!*(void *)(a3 + 16))
  {
LABEL_77:
    swift_bridgeObjectRelease();
    v25 = v75;
LABEL_15:
    v33 = v85;
    if ((v31 & 1) != 0)
    {
LABEL_10:
      (*(void (**)(unint64_t, char *, uint64_t))(v14 + 40))( *(void *)(v32 + 56) + *(void *)(v14 + 72) * v25,  v18,  v13);
LABEL_17:
      *v5 = v32;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    v62 = (v41 - 1) & v41;
    v63 = v42;
    v37 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_25:
    v38 = *(void *)(v12 + 48);
    v61 = *(void *)(v8 + 72) * v37;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v38 + v61, v7);
    v39 = 32 * v37;
    outlined init with copy of Any(*(void *)(v12 + 56) + v39, (uint64_t)v64);
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(void *)(v18 + 48) + v61, v10, v7);
    outlined init with take of Any(v64, (_OWORD *)(*(void *)(v18 + 56) + v39));
    v36 = v62;
    v33 = v63;
  }

  v43 = v33 + 7;
  v41 = *(void *)(v59 + 8 * v43);
  if (v41)
  {
    v42 = v33 + 7;
    goto LABEL_46;
  }

  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      break;
    }
    if (v42 >= v60) {
      goto LABEL_47;
    }
    v41 = *(void *)(v59 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_46;
    }
  }

        v37 = (4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C;
        v25 = ((-15LL << v37) - 1) & v25 | (v38 << v37);
        v15 = *(void *)(v36 + 24 + 24 * v38);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v36 = v15;
        if (!*(_BYTE *)(v15 + 18)) {
          goto LABEL_61;
        }
      }
    }
  }

  v13 = swift_unknownObjectRetain_n();
  v14 = specialized Rope._endPath.getter(v13);
  swift_unknownObjectRelease();
  v15 = 0LL;
  if (!v5) {
    goto LABEL_14;
  }
LABEL_13:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v14, v15, v5, v10);
  swift_unknownObjectRelease_n();
LABEL_14:
  v16 = *(void *)(v4 + 64);
  v17 = *(void *)(v4 + 72);
  v18 = *(void *)(v4 + 80);
  v19 = *(void *)(v4 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v11, v14, v15, v16, v17, v18, v19);
  v266 = v20;
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  v21 = swift_bridgeObjectRetain();
  v267 = specialized _NativeDictionary.filter(_:)(v21, v268, v9);
  result = swift_bridgeObjectRelease_n();
  v6 = *(void *)(v4 + 64);
  if (v6) {
    v22 = *(void *)(v4 + 80);
  }
  else {
    v22 = 0LL;
  }
  if (a3 < 0 || v22 < a3) {
    goto LABEL_482;
  }
  v23 = *(void *)(v4 + 72);
  v24 = *(void *)(v4 + 88);
  if (!v6 || !*(_WORD *)(v6 + 16) || *(void *)(v4 + 80) <= a3)
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    v35 = specialized Rope._endPath.getter(v6);
    result = swift_unknownObjectRelease();
    Swift::Int v4 = 0LL;
    v25 = 0LL;
    if (!v6)
    {
LABEL_91:
      v251 = 0LL;
      goto LABEL_92;
    }

      __break(1u);
      goto LABEL_47;
    }

    *(void *)(v57 + 160) = v27;
    swift_retain();
    swift_release();
    v27 = *(void **)(v57 + 16);
    if (v27[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v68 = v27[2];
        if (v68)
        {
LABEL_41:
          v27[2] = v68 - 1;
          *(void *)(v57 + 16) = v27;
          swift_release();
          swift_release();
          return;
        }

        goto LABEL_37;
      }
    }

    else
    {
      __break(1u);
    }

    v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
    v68 = v27[2];
    if (v68) {
      goto LABEL_41;
    }
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  v40 = v85;
  v41 = JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)(v75, v76, v77, v74, v28, (uint64_t)v27, a11);
  if (!v40)
  {
    v80 = v41;
    v81 = v42;
    v82 = v43;
LABEL_15:
    swift_dynamicCast();
  }

      v21 = v14;
      goto LABEL_47;
    }

      v21 = v14;
      goto LABEL_47;
    }

      v21 = v14;
      goto LABEL_47;
    }

  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

              __break(1u);
              return result;
            }
          }
        }
      }

  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v32 = v21 & 0xFFFFFFFFFFFFF0FFLL | (v34 << 8);
    v14 = v142;
    goto LABEL_30;
  }

  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v184);
  v32 = specialized Rope._endPath.getter(v15);
  result = (unint64_t *)swift_unknownObjectRelease();
  v33 = 0LL;
  v17 = 0LL;
  if (v15)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v152 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v143, v32, v33, v15, v152);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_48;
  }

  v152 = 0LL;
LABEL_48:
  v141 = (char *)v151 - v17;
  if (__OFSUB__(v151, v17))
  {
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  v40 = *(_OWORD *)(v14 + 32);
  v194 = *(_OWORD *)(v14 + 16);
  v195 = v40;
  v196 = *(_OWORD *)(v14 + 48);
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(0LL, v17))
  {
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }

  v41 = BigString.UTF8View.index(_:offsetBy:)();
  v43 = v42;
  v45 = v44;
  v121 = v46;
  result = (unint64_t *)outlined release of Locale((uint64_t)&v182);
  v134 = *((void *)&v185 + 1);
  if (v152 >= *((uint64_t *)&v185 + 1))
  {
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }

  if (v143 != *(void *)(v14 + 88))
  {
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }

  v119[1] = v45;
  v119[2] = v43;
  v123 = v41;
  v47 = *(uint64_t **)(v14 + 64);
  if (v33)
  {
    v48 = v33 + 24 * ((v32 >> ((4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C)) & 0xF);
    v49 = *(void *)(v48 + 32);
    v50 = *(void *)(v48 + 40);
    swift_bridgeObjectRetain();
    v122 = v50;
    result = (unint64_t *)swift_bridgeObjectRetain();
    v51 = v143;
    v52 = v143;
    v53 = v135;
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v32, (uint64_t)v47);
    v49 = v54;
    v122 = v55;
    result = (unint64_t *)swift_unknownObjectRelease();
    v47 = *(uint64_t **)(v14 + 64);
    v52 = *(void *)(v14 + 88);
    v53 = v135;
    v51 = v143;
  }

  v120 = (__int128 *)(v14 + 16);
  v139 = v152 + 1;
  *(void *)&v167 = v51;
  *((void *)&v167 + 1) = v32;
  v150 = (__int128 *)&v160;
  v151 = &v170;
  *(void *)&v168 = v33;
  v133 = (uint64_t *)(v53 + 40);
  v147 = v49;
LABEL_56:
  if (v51 != v52) {
    goto LABEL_143;
  }
  v137 = v52;
  v140 = v33;
  if (v33)
  {
    v56 = *(void *)(v33 + 24 * ((v32 >> ((4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    v56 = specialized Rope._Node.subscript.getter(v32, (uint64_t)v47);
  }

  swift_bridgeObjectRelease();
  result = (unint64_t *)swift_bridgeObjectRelease();
  v57 = &v141[v56];
  if (__OFADD__(v141, v56)) {
    goto LABEL_144;
  }
  if (v47)
  {
    v58 = ((-15LL << ((4 * *((_BYTE *)v47 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v47 + 18) | ((unint64_t)*((unsigned __int16 *)v47 + 8) << ((4 * *((_BYTE *)v47 + 18) + 8) & 0x3C));
    result = (unint64_t *)swift_unknownObjectRetain();
  }

  else
  {
    v58 = 0LL;
  }

  v59 = v146;
  if (v32 >= v58) {
    goto LABEL_145;
  }
  if (v140)
  {
    v60 = (4 * *(_BYTE *)(v140 + 18) + 8) & 0x3C;
    v61 = ((v32 >> v60) & 0xF) + 1;
    if (v61 < *(unsigned __int16 *)(v140 + 16))
    {
      v138 = (v61 << v60) | ((-15LL << v60) - 1) & v32;
      result = (unint64_t *)swift_unknownObjectRelease_n();
LABEL_71:
      v47 = (uint64_t *)v168;
      goto LABEL_79;
    }
  }

  v62 = *((unsigned __int8 *)v47 + 18);
  v63 = (4 * v62 + 8) & 0x3C;
  v64 = (v32 >> v63) & 0xF;
  *(void *)&v158 = v64;
  if (v62)
  {
    swift_unknownObjectRetain();
    v65 = specialized closure #1 in Rope._Node.formSuccessor(of:)( (uint64_t)(v47 + 3),  (uint64_t *)&v158,  (uint64_t)&v167,  (uint64_t)v47,  v62);
    result = (unint64_t *)swift_unknownObjectRelease();
    v14 = v142;
    if ((v65 & 1) != 0)
    {
      result = (unint64_t *)swift_unknownObjectRelease_n();
      v138 = *((void *)&v167 + 1);
      goto LABEL_71;
    }
  }

  else
  {
    v66 = v64 + 1;
    if (v64 + 1 < (unint64_t)*((unsigned __int16 *)v47 + 8))
    {
      result = (unint64_t *)swift_unknownObjectRelease_n();
      v138 = (v66 << v63) | ((-15LL << v63) - 1) & v32;
      v14 = v142;
      goto LABEL_79;
    }

    v14 = v142;
  }

  if (v47)
  {
    v67 = *((unsigned __int8 *)v47 + 18);
    v68 = *((unsigned __int16 *)v47 + 8);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    v69 = (4 * v67 + 8) & 0x3C;
    v70 = ((-15LL << v69) - 1) & v67;
    v71 = v68 << v69;
    v14 = v142;
    v138 = v70 | v71;
  }

  else
  {
    v138 = 0LL;
  }

  v47 = 0LL;
  *(void *)&v167 = v137;
LABEL_79:
  v72 = v147;
  if (v139 != v134)
  {
    if ((void)v167 != *(void *)(v14 + 88))
    {
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }

    v143 = v167;
    v131 = v57;
    v132 = v32;
    v130 = v47;
    if (v47)
    {
      v73 = &v47[3 * ((v138 >> ((4 * *((_BYTE *)v47 + 18) + 8) & 0x3C)) & 0xF)];
      v74 = v73[4];
      v75 = v73[5];
      swift_bridgeObjectRetain();
      v136 = v75;
      swift_bridgeObjectRetain();
    }

    else
    {
      v76 = *(void *)(v14 + 64);
      swift_unknownObjectRetain();
      v72 = v147;
      specialized Rope._Node.subscript.getter(v138, v76);
      v136 = v77;
      v74 = v78;
      swift_unknownObjectRelease();
    }

    result = (unint64_t *)swift_bridgeObjectRetain();
    v79 = 0LL;
    v80 = v133;
    v152 = v74;
    while (1)
    {
      v82 = v79 + 1;
      if (__OFADD__(v79, 1LL))
      {
        __break(1u);
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }

      v84 = *(v80 - 1);
      v83 = *v80;
      if (*(void *)(v72 + 16))
      {
        swift_bridgeObjectRetain_n();
        v85 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v83);
        if ((v86 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v72 + 56) + 72 * v85, (uint64_t)&v177);
        }

        else
        {
          v181 = 0LL;
          v179 = 0u;
          v180 = 0u;
          v177 = 0u;
          v178 = 0u;
        }

        swift_bridgeObjectRelease();
        v74 = v152;
        if (!*(void *)(v152 + 16))
        {
LABEL_94:
          v176 = 0LL;
          v174 = 0u;
          v175 = 0u;
          v172 = 0u;
          v173 = 0u;
          goto LABEL_101;
        }
      }

      else
      {
        v181 = 0LL;
        v179 = 0u;
        v180 = 0u;
        v177 = 0u;
        v178 = 0u;
        swift_bridgeObjectRetain();
        if (!*(void *)(v74 + 16)) {
          goto LABEL_94;
        }
      }

      swift_bridgeObjectRetain();
      v87 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v83);
      if ((v88 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v74 + 56) + 72 * v87, (uint64_t)&v172);
      }

      else
      {
        v176 = 0LL;
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
      }

      swift_bridgeObjectRelease();
LABEL_101:
      swift_bridgeObjectRelease();
      v47 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v177,  (uint64_t)&v167,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v172,  (uint64_t)v151,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!*((void *)&v168 + 1))
      {
        if (v171) {
          goto LABEL_118;
        }
        outlined destroy of Any?( (uint64_t)&v167,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v172,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = (unint64_t *)outlined destroy of Any?( (uint64_t)&v177,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_88;
      }

      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v167,  (uint64_t)v166,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v171) {
        goto LABEL_117;
      }
      v89 = *((_OWORD *)v151 + 3);
      v164[2] = *((_OWORD *)v151 + 2);
      v164[3] = v89;
      v165 = v151[8];
      v90 = *((_OWORD *)v151 + 1);
      v164[0] = *(_OWORD *)v151;
      v164[1] = v90;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v166,  (uint64_t)v163);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v164,  (uint64_t)v162);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v163,  (uint64_t)&v158,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v162,  (uint64_t)v150,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v159)
      {
        if (!v161)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
LABEL_86:
          v81 = 0;
          goto LABEL_87;
        }

        outlined init with take of any PredicateExpression<Self.Output == B1>(&v158, (uint64_t)v155);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v150, (uint64_t)v154);
        v91 = v156;
        v145 = v157;
        v144 = __swift_project_boxed_opaque_existential_1(v155, v156);
        v149 = v119;
        v92 = *(void *)(v91 - 8);
        MEMORY[0x1895F8858](v144);
        v94 = (char *)v119 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v154,  (uint64_t)&v153);
        v95 = type metadata accessor for Optional();
        v148 = v119;
        v96 = *(void *)(v95 - 8);
        MEMORY[0x1895F8858](v95);
        v98 = (char *)v119 - v97;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v99 = swift_dynamicCast();
        v100 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56);
        if (v99)
        {
          v100(v98, 0LL, 1LL, v91);
          (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v94, v98, v91);
          v81 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v92 + 8))(v94, v91);
        }

        else
        {
          v100(v98, 1LL, 1LL, v91);
          (*(void (**)(char *, uint64_t))(v96 + 8))(v98, v95);
          v81 = 0;
        }

        v59 = v146;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v154);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
        v72 = v147;
      }

      else
      {
        if (v161)
        {
          outlined destroy of Any?( (uint64_t)v150,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_86;
        }

        v81 = 1;
      }

  __break(1u);
LABEL_47:
  result = outlined destroy of Any?( (uint64_t)&v51,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  __break(1u);
  return result;
}

  v33 = &self->_internal;
LABEL_47:
  if (v19 >= v32) {
    return 0LL;
  }
  v34 = 0LL;
  v23 = 0LL;
  do
  {
    v35 = &v33[v19];
    v36 = v35->_singleRange._range.location;
    v37 = v35->_singleRange._range.length;
    if (v35->_singleRange._range.location <= location) {
      v38 = location;
    }
    else {
      v38 = v35->_singleRange._range.location;
    }
    v41 = location >= v36;
    v39 = location - v36;
    if (v41) {
      v34 = v39;
    }
    v40 = v34 < v37;
    v41 = v38 > v11 || v34 >= v37;
    if (!v41)
    {
      do
      {
        indexBuffer[v23++] = v38++;
        v40 = ++v34 < v37;
      }

      while (v38 <= v11 && v23 < bufferSize && v34 < v37);
    }

    if (!v40) {
      v34 = 0LL;
    }
    v19 += !v40;
  }

  while (v38 <= v11 && v19 < v32 && v23 < bufferSize);
  if (v23)
  {
    if (range)
    {
      v44 = indexBuffer[v23 - 1] - location + 1;
      v45 = v44 + range->location;
      v46 = range->length - v44;
      range->location = v45;
      range->length = v46;
    }

    if (v19 < v32 && (*(_DWORD *)&self->_indexSetFlags & 1) == 0)
    {
      v48 = &v33[v19];
      v49 = indexBuffer[v23 - 1];
      v50 = v49 - v48->_singleRange._range.location;
      if (v50 < v48->_singleRange._range.length)
      {
        v51 = pthread_self();
        v52 = atomic_load((unint64_t *)(self->_internal._singleRange._range.location + 56));
        if (v51 == (pthread_t)v52)
        {
LABEL_85:
          *(void *)(self->_internal._singleRange._range.location + 40) = v19;
          *(void *)(self->_internal._singleRange._range.location + 48) = v50;
          *(void *)(self->_internal._singleRange._range.location + 32) = v49;
        }

        else
        {
          v53 = (unint64_t *)(self->_internal._singleRange._range.location + 56);
          while (!__ldaxr(v53))
          {
          }

          __clrex();
        }
      }
    }
  }

  return v23;
}

  while (v16 < length)
  {
    v27 = &self->super._internal;
    if ((*(_BYTE *)&self->super._indexSetFlags & 1) == 0) {
      v27 = ($BA656A43A73A71AF6C4B982E4240B787 *)(v17->_singleRange._range.location
    }
                                                + 16LL * *(void *)(v17->_singleRange._range.location + 24)
                                                + 64);
    -[NSMutableIndexSet _replaceRangeInArrayAtIndex:withRange:]( self,  "_replaceRangeInArrayAtIndex:withRange:",  v16++,  v27[v20]._singleRange._range.location + a3,  v27[v20]._singleRange._range.length);
    ++v20;
LABEL_29:
    v22 = *v21;
    v23 = v22 ^ (unint64_t)self;
    if ((~(_BYTE)v23 & 7) != 0) {
      v24 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      v24 = 0xFFFFFFFFFFFFFLL;
    }
    length = v24 & (v23 >> 3);
    if (length) {
      goto LABEL_43;
    }
  }

  if (v35 < a4) {
    -[NSMutableIndexSet addIndexesInRange:](self, "addIndexesInRange:", v33, v34);
  }
}

    v25 = v10 == 11;
    if (v8) {
      goto LABEL_43;
    }
    goto LABEL_47;
  }

  return result;
}

LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v82, v30);
  swift_bridgeObjectRelease();
LABEL_49:
  v32 = v67;
  v60[1] = v2;
  if (v67)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v82, v32);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  v34 = v68;
  v33 = v69;
  v36 = v70;
  v35 = v71;
  v37 = v72;
  if (v68)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v38 = v33;
    v39 = v36;
    v40 = v35;
    v41 = v37;
    v42 = v34;
    _CFObject.hash(into:)();
    if (v33) {
      goto LABEL_54;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    v47 = v37;
    v48 = v33;
    v49 = v36;
    v50 = v35;
    if (v33)
    {
LABEL_54:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v43 = v33;
      _CFObject.hash(into:)();

      if (v36) {
        goto LABEL_55;
      }
      goto LABEL_60;
    }
  }

  Hasher._combine(_:)(0);
  if (v36)
  {
LABEL_55:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v44 = v36;
    _CFObject.hash(into:)();

    if (v35) {
      goto LABEL_56;
    }
LABEL_61:
    Hasher._combine(_:)(0);
    if (v37) {
      goto LABEL_57;
    }
    goto LABEL_62;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v84, v31);
  swift_bridgeObjectRelease();
LABEL_49:
  v33 = v69;
  v61 = a2;
  if (v69)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v84, v33);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  v34 = v70;
  v35 = v71;
  v37 = v72;
  v36 = v73;
  v38 = v74;
  if (v70)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v39 = v35;
    v40 = v37;
    v41 = v36;
    v42 = v38;
    v43 = v34;
    _CFObject.hash(into:)();
    if (v35) {
      goto LABEL_54;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    v48 = v38;
    v49 = v35;
    v50 = v37;
    v51 = v36;
    if (v35)
    {
LABEL_54:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v44 = v35;
      _CFObject.hash(into:)();

      if (v37) {
        goto LABEL_55;
      }
      goto LABEL_60;
    }
  }

  Hasher._combine(_:)(0);
  if (v37)
  {
LABEL_55:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v45 = v37;
    _CFObject.hash(into:)();

    if (v36) {
      goto LABEL_56;
    }
LABEL_61:
    Hasher._combine(_:)(0);
    if (v38) {
      goto LABEL_57;
    }
    goto LABEL_62;
  }

              if (v54)
              {
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
                goto LABEL_162;
              }

  LOWORD(v129) = v113;
  WORD1(v129) = v112;
  WORD2(v129) = v115;
  HIWORD(v129) = v116;
  LOWORD(v130) = v114;
  HIWORD(v130) = v132;
LABEL_49:
  swift_bridgeObjectRelease();
}

      specialized _NativeDictionary._insert(at:key:value:)(v30, v23, v25, v28, v36);
      swift_bridgeObjectRetain();
      goto LABEL_49;
    }
  }

  v63 = (uint64_t *)v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v40 = static _DictionaryStorage.copy(original:)();
  v36 = v40;
  v41 = *(void *)(v27 + 16);
  if (!v41)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    v30 = (unint64_t)v63;
    if ((v10 & 1) != 0) {
      goto LABEL_11;
    }
    goto LABEL_48;
  }

  result = (void *)(v40 + 64);
  v42 = 1LL << *(_BYTE *)(v36 + 32);
  v65 = (void *)(v27 + 64);
  v43 = (unint64_t)(v42 + 63) >> 6;
  if (v36 != v27 || result >= &v65[v43])
  {
    result = memmove(result, v65, 8 * v43);
    v41 = *(void *)(v27 + 16);
  }

  v44 = 0LL;
  *(void *)(v36 + 16) = v41;
  v45 = 1LL << *(_BYTE *)(v27 + 32);
  v46 = -1LL;
  if (v45 < 64) {
    v46 = ~(-1LL << v45);
  }
  v47 = v46 & *(void *)(v27 + 64);
  v64 = (unint64_t)(v45 + 63) >> 6;
  while (1)
  {
    if (v47)
    {
      v48 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      v49 = v48 | (v44 << 6);
      goto LABEL_21;
    }

    v56 = v44 + 1;
    if (__OFADD__(v44, 1LL))
    {
      __break(1u);
      goto LABEL_52;
    }

    v28 = v66;
    if (v56 >= v64) {
      goto LABEL_47;
    }
    v57 = v65[v56];
    ++v44;
    if (!v57)
    {
      v44 = v56 + 1;
      if (v56 + 1 >= v64) {
        goto LABEL_47;
      }
      v57 = v65[v44];
      if (!v57)
      {
        v44 = v56 + 2;
        if (v56 + 2 >= v64) {
          goto LABEL_47;
        }
        v57 = v65[v44];
        if (!v57)
        {
          v44 = v56 + 3;
          if (v56 + 3 >= v64) {
            goto LABEL_47;
          }
          v57 = v65[v44];
          if (!v57)
          {
            v44 = v56 + 4;
            if (v56 + 4 >= v64) {
              goto LABEL_47;
            }
            v57 = v65[v44];
            if (!v57)
            {
              v44 = v56 + 5;
              if (v56 + 5 >= v64) {
                goto LABEL_47;
              }
              v57 = v65[v44];
              if (!v57)
              {
                v44 = v56 + 6;
                if (v56 + 6 >= v64) {
                  goto LABEL_47;
                }
                v57 = v65[v44];
                if (!v57)
                {
                  v44 = v56 + 7;
                  if (v56 + 7 >= v64) {
                    goto LABEL_47;
                  }
                  v57 = v65[v44];
                  if (!v57) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

      specialized _NativeDictionary._insert(at:key:value:)(v30, v23, v25, v28, v36);
      swift_bridgeObjectRetain();
      goto LABEL_49;
    }
  }

  v63 = (uint64_t *)v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v40 = static _DictionaryStorage.copy(original:)();
  v36 = v40;
  v41 = *(void *)(v27 + 16);
  if (!v41)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    v30 = (unint64_t)v63;
    if ((v10 & 1) != 0) {
      goto LABEL_11;
    }
    goto LABEL_48;
  }

  result = (void *)(v40 + 64);
  v42 = 1LL << *(_BYTE *)(v36 + 32);
  v65 = (void *)(v27 + 64);
  v43 = (unint64_t)(v42 + 63) >> 6;
  if (v36 != v27 || result >= &v65[v43])
  {
    result = memmove(result, v65, 8 * v43);
    v41 = *(void *)(v27 + 16);
  }

  v44 = 0LL;
  *(void *)(v36 + 16) = v41;
  v45 = 1LL << *(_BYTE *)(v27 + 32);
  v46 = -1LL;
  if (v45 < 64) {
    v46 = ~(-1LL << v45);
  }
  v47 = v46 & *(void *)(v27 + 64);
  v64 = (unint64_t)(v45 + 63) >> 6;
  while (1)
  {
    if (v47)
    {
      v48 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      v49 = v48 | (v44 << 6);
      goto LABEL_21;
    }

    v56 = v44 + 1;
    if (__OFADD__(v44, 1LL))
    {
      __break(1u);
      goto LABEL_52;
    }

    v28 = v66;
    if (v56 >= v64) {
      goto LABEL_47;
    }
    v57 = v65[v56];
    ++v44;
    if (!v57)
    {
      v44 = v56 + 1;
      if (v56 + 1 >= v64) {
        goto LABEL_47;
      }
      v57 = v65[v44];
      if (!v57)
      {
        v44 = v56 + 2;
        if (v56 + 2 >= v64) {
          goto LABEL_47;
        }
        v57 = v65[v44];
        if (!v57)
        {
          v44 = v56 + 3;
          if (v56 + 3 >= v64) {
            goto LABEL_47;
          }
          v57 = v65[v44];
          if (!v57)
          {
            v44 = v56 + 4;
            if (v56 + 4 >= v64) {
              goto LABEL_47;
            }
            v57 = v65[v44];
            if (!v57)
            {
              v44 = v56 + 5;
              if (v56 + 5 >= v64) {
                goto LABEL_47;
              }
              v57 = v65[v44];
              if (!v57)
              {
                v44 = v56 + 6;
                if (v56 + 6 >= v64) {
                  goto LABEL_47;
                }
                v57 = v65[v44];
                if (!v57)
                {
                  v44 = v56 + 7;
                  if (v56 + 7 >= v64) {
                    goto LABEL_47;
                  }
                  v57 = v65[v44];
                  if (!v57) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

        v48 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v9, a1, a2);
        v50 = v49;
        v52 = v51;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)v21 = v48;
        *(void *)(v21 + 8) = v50;
        *(void *)(v21 + 16) = v52;
        *(void *)(v21 + 24) = 0LL;
        *(void *)(v21 + 32) = 0LL;
        *(void *)(v21 + 40) = 0LL;
        v22 = 4;
        goto LABEL_46;
      }
    }
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v30 = v64;
  if (v64) {
    goto LABEL_49;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  v31 = v65;
  if (!v65)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v28 = v63;
  if (v63) {
    goto LABEL_49;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  v29 = v64;
  if (!v64)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v29 = v63;
  if (v63) {
    goto LABEL_49;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  v30 = v64;
  if (!v64)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v31 = v65;
  if (v65) {
    goto LABEL_49;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  v32 = v66;
  if (!v66)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v30 = v64;
  if (v64) {
    goto LABEL_49;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  v31 = v65;
  if (!v65)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v29 = v63;
  if (v63) {
    goto LABEL_49;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  v30 = v64;
  if (!v64)
  {
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }

          v32 = 0;
          goto LABEL_35;
        }

        swift_bridgeObjectRetain();
        v14 = specialized _parseInteger<A, B>(ascii:radix:)(v8, v9, 10LL);
        v30 = v29;
        result = swift_bridgeObjectRelease();
        if ((v30 & 1) == 0) {
          goto LABEL_36;
        }
      }
    }
  }

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v33);
          swift_bridgeObjectRelease();
LABEL_49:
          v40 = v108;
          v41 = v109;
          v43 = v110;
          v42 = v111;
          v44 = v112;
          if (v108)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v45 = v41;
            v46 = v43;
            v47 = v42;
            v48 = v44;
            v49 = v40;
            _CFObject.hash(into:)();
            v100 = v40;
            if (v41) {
              goto LABEL_51;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            v54 = v44;
            v55 = v41;
            v56 = v43;
            v57 = v42;
            v100 = 0LL;
            if (v41)
            {
LABEL_51:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v50 = v41;
              _CFObject.hash(into:)();

              if (v43) {
                goto LABEL_52;
              }
              goto LABEL_57;
            }
          }

          Hasher._combine(_:)(0);
          if (v43)
          {
LABEL_52:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v51 = v43;
            _CFObject.hash(into:)();

            if (v42) {
              goto LABEL_53;
            }
            goto LABEL_58;
          }

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          v30 = a1;
          specialized Dictionary<>.hash(into:)(a1, v29);
          swift_bridgeObjectRelease();
LABEL_49:
          v38 = v115;
          v37 = v116;
          v40 = v117;
          v39 = v118;
          v41 = v119;
          v105 = v118;
          v107 = v116;
          v101 = v119;
          if (v115)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v42 = v107;
            v43 = v40;
            v44 = v40;
            v45 = v39;
            v46 = v41;
            v47 = v38;
            v37 = v107;
            _CFObject.hash(into:)();
            v103 = v38;
            if (v107) {
              goto LABEL_51;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            v54 = v41;
            v55 = v37;
            v43 = v40;
            v56 = v40;
            v57 = v39;
            v103 = 0LL;
            if (v37)
            {
LABEL_51:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v48 = v37;
              _CFObject.hash(into:)();

              if (v43) {
                goto LABEL_52;
              }
              goto LABEL_57;
            }
          }

          Hasher._combine(_:)(0);
          if (v43)
          {
LABEL_52:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v49 = v43;
            _CFObject.hash(into:)();

            v50 = v105;
            if (v105) {
              goto LABEL_53;
            }
            goto LABEL_58;
          }

    v75 = (v70 - 1) & v70;
    v76 = v71;
    v51 = __clz(__rbit64(v70)) + (v71 << 6);
LABEL_25:
    v52 = 96 * v51;
    v53 = *(void *)(v34 + 48) + 96 * v51;
    v54 = *(void *)(v53 + 8);
    v55 = *(void *)(v53 + 16);
    v56 = *(void *)(v53 + 24);
    v57 = *(_BYTE *)(v53 + 32);
    v58 = *(_BYTE *)(v53 + 56);
    v59 = *(void *)(v53 + 64);
    v60 = *(void *)(v53 + 72);
    v61 = *(_BYTE *)(v53 + 80);
    v62 = *(void *)(v53 + 88);
    v63 = 16 * v51;
    v64 = *(void *)(v34 + 56) + v63;
    v65 = *(void *)v64;
    LOBYTE(v64) = *(_BYTE *)(v64 + 8);
    v66 = *(void *)(v40 + 48) + v52;
    v67 = *(_OWORD *)(v53 + 40);
    *(void *)v66 = *(void *)v53;
    *(void *)(v66 + 8) = v54;
    *(void *)(v66 + 16) = v55;
    *(void *)(v66 + 24) = v56;
    *(_BYTE *)(v66 + 32) = v57;
    *(_OWORD *)(v66 + 40) = v67;
    *(_BYTE *)(v66 + 56) = v58;
    *(void *)(v66 + 64) = v59;
    *(void *)(v66 + 72) = v60;
    *(_BYTE *)(v66 + 80) = v61;
    *(void *)(v66 + 88) = v62;
    v68 = *(void *)(v40 + 56) + v63;
    *(void *)v68 = v65;
    *(_BYTE *)(v68 + 8) = v64;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v50 = v75;
    v47 = v76;
  }

  v72 = v47 + 8;
  if (v47 + 8 >= v74) {
    goto LABEL_49;
  }
  v70 = *(void *)(v73 + 8 * v72);
  if (v70)
  {
    v71 = v47 + 8;
    goto LABEL_48;
  }

  while (1)
  {
    v71 = v72 + 1;
    if (__OFADD__(v72, 1LL)) {
      break;
    }
    if (v71 >= v74) {
      goto LABEL_49;
    }
    v70 = *(void *)(v73 + 8 * v71);
    ++v72;
    if (v70) {
      goto LABEL_48;
    }
  }

    swift_bridgeObjectRelease();
    v26 = v55;
    if ((v5 & 1) == 0) {
      goto LABEL_49;
    }
    goto LABEL_12;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
  v23 = v56[0];
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v5 & 1) != (v25 & 1)) {
    goto LABEL_56;
  }
  v19 = v24;
  v26 = v55;
  if ((v5 & 1) != 0) {
    goto LABEL_12;
  }
LABEL_49:
  *(void *)(v23 + 8 * (v19 >> 6) + 64) |= 1LL << v19;
  v46 = (uint64_t *)(*(void *)(v23 + 48) + 16 * v19);
  *v46 = a2;
  v46[1] = a3;
  v47 = (void *)(*(void *)(v23 + 56) + 16 * v19);
  *v47 = v15;
  v47[1] = v26;
  v48 = *(void *)(v23 + 16);
  v49 = __OFADD__(v48, 1LL);
  v50 = v48 + 1;
  if (!v49)
  {
    *(void *)(v23 + 16) = v50;
    swift_bridgeObjectRetain();
    goto LABEL_51;
  }

  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0) {
      goto LABEL_49;
    }
    goto LABEL_12;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
  v21 = v54;
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v3 & 1) != (v23 & 1)) {
    goto LABEL_56;
  }
  v17 = v22;
  if ((v3 & 1) != 0) {
    goto LABEL_12;
  }
LABEL_49:
  *(void *)(v21 + 8 * (v17 >> 6) + 64) |= 1LL << v17;
  memcpy((void *)(*(void *)(v21 + 48) + 352 * v17), a2, 0x160uLL);
  v40 = (uint64_t *)(*(void *)(v21 + 56) + 16 * v17);
  *v40 = v13;
  v40[1] = v12;
  v41 = *(void *)(v21 + 16);
  v42 = __OFADD__(v41, 1LL);
  v43 = v41 + 1;
  if (!v42)
  {
    *(void *)(v21 + 16) = v43;
    outlined retain of Locale.Components(a2);
    goto LABEL_51;
  }

  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  v76 = objc_msgSend(v4, sel_processInfo);
  v17 = objc_msgSend(v76, sel_environment);

  if (v17)
  {
    if (v7 + 1 == v8)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRetain();
      v77 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
      if (v77) {
        goto LABEL_94;
      }
      v78 = objc_msgSend(v17, sel_count);
      if (v78)
      {
        v79 = (uint64_t)v78;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v77 = (void *)static _DictionaryStorage.allocate(capacity:)();
        v80 = (void *)v77[6];
        v81 = v77[7];
        swift_retain();
        v82 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v80,  v81,  v17,  v79);
        if ((v82 & 0x8000000000000000LL) == 0 && v79 >= v82)
        {
          v77[2] = v82;
          if (v82)
          {
            v209 = a1;
            v83 = v7;
            v84 = v82 - 1;
            a1 = (uint64_t)(v77 + 8);
            v6 = (void *)MEMORY[0x189617FA8];
            v15 = (uint64_t)(v83 + 1);
            do
            {
              while (1)
              {
                while (((*(void *)(a1 + (((unint64_t)v84 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v84) & 1) != 0)
                {
                  if (--v84 < 0) {
                    goto LABEL_91;
                  }
                }

                v85 = (uint64_t *)(v77[6] + 16 * v84);
                v86 = *v85;
                v22 = v85[1];
                swift_bridgeObjectRetain();
                v16 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v22);
                v88 = v87;
                swift_bridgeObjectRelease();
                if ((v88 & 1) != 0) {
                  break;
                }
                *(void *)(a1 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
                if (v84 >= (uint64_t)v16)
                {
                  if (v16 == v84)
                  {
                    if (--v84 < 0) {
                      goto LABEL_91;
                    }
                  }

                  else
                  {
                    v95 = v77[6];
                    v96 = (uint64_t *)(v95 + 16 * v16);
                    v97 = (uint64_t *)(v95 + 16 * v84);
                    v98 = *v96;
                    v99 = v96[1];
                    v100 = v97[1];
                    *v96 = *v97;
                    v96[1] = v100;
                    *v97 = v98;
                    v97[1] = v99;
                    v101 = v77[7];
                    v102 = (_OWORD *)(v101 + 32 * v16);
                    v103 = (_OWORD *)(v101 + 32 * v84);
                    outlined init with take of Any(v102, v213);
                    outlined init with take of Any(v103, v102);
                    outlined init with take of Any(v213, v103);
                    if (v84 < 0) {
                      goto LABEL_91;
                    }
                  }
                }

                else
                {
                  *(_OWORD *)(v77[6] + 16 * v16) = *(_OWORD *)(v77[6] + 16 * v84);
                  v91 = v77[7];
                  v92 = (_OWORD *)(v91 + 32 * v16);
                  v93 = (_OWORD *)(v91 + 32 * v84);
                  v94 = v93[1];
                  *v92 = *v93;
                  v92[1] = v94;
                  if (--v84 < 0) {
                    goto LABEL_91;
                  }
                }
              }

              swift_arrayDestroy();
              v24 = swift_arrayDestroy();
              v89 = v77[2];
              v26 = __OFSUB__(v89, 1LL);
              v90 = v89 - 1;
              if (v26) {
                goto LABEL_139;
              }
              v77[2] = v90;
              --v84;
            }

            while ((v84 & 0x8000000000000000LL) == 0);
LABEL_91:
            a1 = v209;
            goto LABEL_92;
          }

          goto LABEL_92;
        }

        goto LABEL_180;
      }
    }

    else
    {
      swift_unknownObjectRetain();
      v77 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
      if (v77) {
        goto LABEL_94;
      }
      v104 = objc_msgSend(v17, sel_count);
      if (v104)
      {
        v105 = (uint64_t)v104;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
        v77 = (void *)static _DictionaryStorage.allocate(capacity:)();
        v106 = (char *)v77[6];
        v107 = v77[7];
        swift_retain();
        v108 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v106,  v107,  v17,  v105);
        if ((v108 & 0x8000000000000000LL) == 0 && v105 >= v108)
        {
          v77[2] = v108;
          if (v108)
          {
            v209 = a1;
            v109 = v108 - 1;
            v110 = v77 + 8;
            v6 = (void *)MEMORY[0x189617FA8];
            a1 = 1LL;
            do
            {
              while (1)
              {
                while (((*(void *)((char *)v110 + (((unint64_t)v109 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v109) & 1) != 0)
                {
                  if (--v109 < 0) {
                    goto LABEL_91;
                  }
                }

                v111 = (uint64_t *)(v77[6] + 16 * v109);
                v112 = *v111;
                v16 = v111[1];
                swift_bridgeObjectRetain();
                v113 = specialized __RawDictionaryStorage.find<A>(_:)(v112, v16);
                v22 = v114;
                swift_bridgeObjectRelease();
                if ((v22 & 1) != 0) {
                  break;
                }
                *(void *)((char *)v110 + ((v113 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v113;
                if (v109 >= (uint64_t)v113)
                {
                  if (v113 == v109)
                  {
                    if (--v109 < 0) {
                      goto LABEL_91;
                    }
                  }

                  else
                  {
                    v118 = v77[6];
                    v119 = (uint64_t *)(v118 + 16 * v113);
                    v120 = (uint64_t *)(v118 + 16 * v109);
                    v121 = *v119;
                    v122 = v119[1];
                    v123 = v120[1];
                    *v119 = *v120;
                    v119[1] = v123;
                    *v120 = v121;
                    v120[1] = v122;
                    v124 = v77[7];
                    v125 = (uint64_t *)(v124 + 16 * v113);
                    v126 = (uint64_t *)(v124 + 16 * v109);
                    v127 = *v125;
                    v128 = v125[1];
                    v129 = v126[1];
                    *v125 = *v126;
                    v125[1] = v129;
                    *v126 = v127;
                    v126[1] = v128;
                    if (v109 < 0) {
                      goto LABEL_91;
                    }
                  }
                }

                else
                {
                  v117 = 16 * v113;
                  *(_OWORD *)(v77[6] + v117) = *(_OWORD *)(v77[6] + 16 * v109);
                  *(_OWORD *)(v77[7] + v117) = *(_OWORD *)(v77[7] + 16 * v109--);
                  if (v109 < 0) {
                    goto LABEL_91;
                  }
                }
              }

              v15 = 16 * v109;
              swift_arrayDestroy();
              v24 = swift_arrayDestroy();
              v115 = v77[2];
              v26 = __OFSUB__(v115, 1LL);
              v116 = v115 - 1;
              if (v26) {
                goto LABEL_140;
              }
              v77[2] = v116;
              --v109;
            }

            while ((v109 & 0x8000000000000000LL) == 0);
            goto LABEL_91;
          }

        if (!v19)
        {
          v15 = v11;
          goto LABEL_50;
        }

        goto LABEL_408;
      }

      result = (void *)swift_unknownObjectRetain_n();
      v19 = v8;
      v23 = (void *)v5;
      while (1)
      {
        v25 = *((unsigned __int16 *)v23 + 8);
        if (!*((_WORD *)v23 + 8)) {
          goto LABEL_19;
        }
        v26 = v23[5];
        v20 = __OFSUB__(v19, v26);
        v27 = v19 - v26;
        if (v20) {
          goto LABEL_376;
        }
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_377;
        }
        if (v27 + 1 > 0) {
          break;
        }
        v25 = 0LL;
LABEL_20:
        v24 = (4 * *((_BYTE *)v23 + 18) + 8) & 0x3C;
        v22 = ((-15LL << v24) - 1) & v22 | (v25 << v24);
        v18 = (void *)v23[3 * v25 + 3];
        swift_unknownObjectRetain();
        result = (void *)swift_unknownObjectRelease();
        v23 = v18;
        if (!*((_BYTE *)v18 + 18)) {
          goto LABEL_35;
        }
      }

      if ((_DWORD)v25 != 1)
      {
        v28 = v23 + 8;
        v29 = 1LL;
        while (1)
        {
          v30 = *v28;
          v28 += 3;
          v19 = v27 - v30;
          if (__OFSUB__(v27, v30)) {
            goto LABEL_344;
          }
          if (__OFADD__(v19, 1LL)) {
            break;
          }
          if (v19 + 1 < 1)
          {
            v25 = v29;
            v19 = v27;
            goto LABEL_20;
          }

          ++v29;
          v27 = v19;
          if (v25 == v29) {
            goto LABEL_19;
          }
        }

        if (!v19)
        {
          v15 = v11;
          goto LABEL_50;
        }

        goto LABEL_408;
      }

      result = (void *)swift_unknownObjectRetain_n();
      v19 = v8;
      v23 = (void *)v5;
      while (1)
      {
        v25 = *((unsigned __int16 *)v23 + 8);
        if (!*((_WORD *)v23 + 8)) {
          goto LABEL_19;
        }
        v26 = v23[5];
        v20 = __OFSUB__(v19, v26);
        v27 = v19 - v26;
        if (v20) {
          goto LABEL_376;
        }
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_377;
        }
        if (v27 + 1 > 0) {
          break;
        }
        v25 = 0LL;
LABEL_20:
        v24 = (4 * *((_BYTE *)v23 + 18) + 8) & 0x3C;
        v22 = ((-15LL << v24) - 1) & v22 | (v25 << v24);
        v18 = (void *)v23[3 * v25 + 3];
        swift_unknownObjectRetain();
        result = (void *)swift_unknownObjectRelease();
        v23 = v18;
        if (!*((_BYTE *)v18 + 18)) {
          goto LABEL_35;
        }
      }

      if ((_DWORD)v25 != 1)
      {
        v28 = v23 + 8;
        v29 = 1LL;
        while (1)
        {
          v30 = *v28;
          v28 += 3;
          v19 = v27 - v30;
          if (__OFSUB__(v27, v30)) {
            goto LABEL_344;
          }
          if (__OFADD__(v19, 1LL)) {
            break;
          }
          if (v19 + 1 < 1)
          {
            v25 = v29;
            v19 = v27;
            goto LABEL_20;
          }

          ++v29;
          v27 = v19;
          if (v25 == v29) {
            goto LABEL_19;
          }
        }

          v25 = (v29 - 1) & v29;
          v28 = __clz(__rbit64(v29)) + (v21 << 6);
        }

        v31 = *(void *)(v3 + 56);
        v32 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v28);
        v33 = *v32;
        Swift::Int v3 = v32[1];
        outlined init with copy of AttributedString._AttributeValue(v31 + 72 * v28, (uint64_t)&v98);
        swift_bridgeObjectRetain();
        v34 = v91(v33, v3, &v98);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v98);
        swift_bridgeObjectRelease();
        if (v2) {
          goto LABEL_128;
        }
        Swift::Int v3 = v92;
        if ((v34 & 1) != 0)
        {
          *(unint64_t *)((char *)v88 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v28;
          v14 = __OFADD__(v90++, 1LL);
          if (v14) {
            goto LABEL_138;
          }
        }
      }
    }
  }

  v87[1] = v87;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  v88 = (void *)((char *)v87 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0LL));
  bzero(v88, v5);
  v90 = 0LL;
  v6 = 0LL;
  v7 = v3 + 64;
  Swift::Int v8 = 1LL << *(_BYTE *)(v3 + 32);
  v9 = -1LL;
  if (v8 < 64) {
    v9 = ~(-1LL << v8);
  }
  v10 = v9 & *(void *)(v3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_19;
    }

    v14 = __OFADD__(v6++, 1LL);
    if (v14) {
      goto LABEL_130;
    }
    if (v6 >= v11) {
      goto LABEL_29;
    }
    v15 = *(void *)(v7 + 8 * v6);
    if (!v15) {
      break;
    }
LABEL_18:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_19:
    v17 = *(void *)(v3 + 56);
    v18 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v13);
    v19 = *v18;
    Swift::Int v3 = v18[1];
    outlined init with copy of AttributedString._AttributeValue(v17 + 72 * v13, (uint64_t)&v98);
    swift_bridgeObjectRetain();
    v20 = v91(v19, v3, &v98);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v98);
    swift_bridgeObjectRelease();
    if (v2)
    {
      swift_willThrow();
      return v3;
    }

    Swift::Int v3 = v92;
    if ((v20 & 1) != 0)
    {
      *(unint64_t *)((char *)v88 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      v14 = __OFADD__(v90++, 1LL);
      if (v14) {
        goto LABEL_136;
      }
    }
  }

  v16 = v6 + 1;
  if (v6 + 1 >= v11) {
    goto LABEL_29;
  }
  v15 = *(void *)(v7 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  v16 = v6 + 2;
  if (v6 + 2 >= v11) {
    goto LABEL_29;
  }
  v15 = *(void *)(v7 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  v16 = v6 + 3;
  if (v6 + 3 >= v11) {
    goto LABEL_29;
  }
  v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
LABEL_17:
    v6 = v16;
    goto LABEL_18;
  }

  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      goto LABEL_133;
    }
    if (v6 >= v11) {
      break;
    }
    v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }

      *a1 = v6;
      a1[1] = v4;
      a1[2] = v5;
      v40 = v6;
      swift_retain();
      return swift_retain();
    }

    swift_bridgeObjectRelease();
    v24 = 0LL;
    v25 = 0xE000000000000000LL;
    v26 = v78;
LABEL_31:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }

  v9 = objc_msgSend(v3, sel_URLByStandardizingPath);
  if (v9)
  {
    v10 = v9;
    URL.init(reference:)(v9, &v80);

    v11 = v80;
    URL.init(reference:)(v11, &v80);

    swift_release();
    result = swift_release();
    v13 = v81;
    *a1 = v80;
    *(_OWORD *)(a1 + 1) = v13;
  }

  else
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    swift_retain();
    v15 = v3;
    return swift_retain();
  }

  return result;
}

      *a1 = v6;
      a1[1] = v4;
      a1[2] = v5;
      v40 = v6;
      swift_retain();
      return swift_retain();
    }

    swift_bridgeObjectRelease();
    v24 = 0LL;
    v25 = 0xE000000000000000LL;
    v26 = v84;
LABEL_31:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }

  v9 = objc_msgSend(v3, sel_URLByResolvingSymlinksInPath);
  if (v9)
  {
    v10 = v9;
    URL.init(reference:)(v9, &v86);

    v11 = v86;
    URL.init(reference:)(v11, &v86);

    swift_release();
    result = swift_release();
    v13 = v87;
    *a1 = v86;
    *(_OWORD *)(a1 + 1) = v13;
  }

  else
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    swift_retain();
    v15 = v3;
    return swift_retain();
  }

  return result;
}

  Swift::Int v3 = a2;
  v36 = a3;
  swift_bridgeObjectRelease_n();
LABEL_49:
  swift_bridgeObjectRelease_n();
  v37 = v97;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v38 = specialized Collection.first.getter(v3, v36);
  if (v39)
  {
    if (v38 == 126 && v39 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }

    v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v40 & 1) != 0)
    {
LABEL_54:
      v41 = specialized Collection<>.firstIndex(of:)(47LL, 0xE100000000000000LL, v3, v36);
      if ((v42 & 1) != 0)
      {
        v44 = HIBYTE(v36) & 0xF;
        if ((v36 & 0x2000000000000000LL) == 0) {
          v44 = v3;
        }
        v45 = v44 << 16;
        if ((v36 & 0x1000000000000000LL) == 0 || (v3 & 0x800000000000000LL) != 0) {
          v43 = v45 | 7;
        }
        else {
          v43 = v45 | 0xB;
        }
      }

      else
      {
        v43 = v41;
      }

      v47 = String.index(after:)();
      if (v43 >> 14 == v47 >> 14)
      {
        v48 = 0LL;
        v49 = 0LL;
      }

      else
      {
        if (v43 >> 14 < v47 >> 14) {
          goto LABEL_127;
        }
        v50 = String.subscript.getter();
        v48 = MEMORY[0x186E1B610](v50);
        v49 = v51;
        swift_bridgeObjectRelease();
      }

      v52 = static String.homeDirectoryPath(forUser:)(v48, v49);
      v54 = v53;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v55 = specialized Collection.suffix(from:)(v43, v3, v36);
      v57 = v56;
      v59 = v58;
      v61 = v60;
      swift_bridgeObjectRelease();
      *(void *)&v100 = v52;
      *((void *)&v100 + 1) = v54;
      *(void *)&v102 = v55;
      *((void *)&v102 + 1) = v57;
      v103 = v59;
      v104 = v61;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      swift_bridgeObjectRetain();
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36 = v54;
      Swift::Int v3 = v52;
      v37 = v97;
    }
  }

  v62 = HIBYTE(v36) & 0xF;
  if ((v36 & 0x2000000000000000LL) == 0) {
    v62 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (v62)
  {
    swift_bridgeObjectRetain();
    v63 = specialized String.withFileSystemRepresentation<A>(_:)(v3, v36, v3, v36);
    if (v64)
    {
      v65 = v63;
      v66 = v64;
      swift_bridgeObjectRelease();
      Swift::Int v3 = v65;
      v36 = v66;
    }
  }

  v67 = String._standardizingPath.getter(v3, v36);
  v69 = v68;
  swift_bridgeObjectRelease();
  URL.init(fileURLWithPath:isDirectory:)(v67, v69, 0, (uint64_t)v105);
  swift_bridgeObjectRelease();
  v99 = MEMORY[0x18961AFF0];
  if (!*(void *)(v37 + 16))
  {
    v100 = 0u;
    v101 = 0u;
LABEL_81:
    outlined destroy of Any?((uint64_t)&v100);
    if (*(void *)(v37 + 16)) {
      goto LABEL_82;
    }
LABEL_80:
    v100 = 0u;
    v101 = 0u;
    goto LABEL_87;
  }

  v70 = @"NSFileExtensionHidden";
  v71 = specialized __RawDictionaryStorage.find<A>(_:)(v70);
  if ((v72 & 1) != 0)
  {
    outlined init with copy of Any(*(void *)(v37 + 56) + 32 * v71, (uint64_t)&v100);
  }

  else
  {
    v100 = 0u;
    v101 = 0u;
  }

  if (!*((void *)&v101 + 1)) {
    goto LABEL_81;
  }
  outlined init with take of Any(&v100, &v102);
  v73 = (void *)*MEMORY[0x189603C30];
  outlined init with copy of Any((uint64_t)&v102, (uint64_t)&v100);
  specialized Dictionary.subscript.setter((uint64_t)&v100, v73);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
  if (!*(void *)(v37 + 16)) {
    goto LABEL_80;
  }
LABEL_82:
  v74 = @"NSFileCreationDate";
  v75 = specialized __RawDictionaryStorage.find<A>(_:)(v74);
  if ((v76 & 1) != 0)
  {
    outlined init with copy of Any(*(void *)(v37 + 56) + 32 * v75, (uint64_t)&v100);
  }

  else
  {
    v100 = 0u;
    v101 = 0u;
  }

  if (*((void *)&v101 + 1))
  {
    outlined init with take of Any(&v100, &v102);
    v77 = (void *)*MEMORY[0x189603B88];
    outlined init with copy of Any((uint64_t)&v102, (uint64_t)&v100);
    specialized Dictionary.subscript.setter((uint64_t)&v100, v77);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
    goto LABEL_88;
  }

  v18 = 0LL;
  v19 = 1LL;
LABEL_49:
  swift_bridgeObjectRetain();
  v20 = String.UTF16View.count.getter();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
  {
    v21 = calloc(v20, 2uLL);
    if (v21)
    {
      v19 = (unint64_t)v21;
      if ((v5 & 0x1000000000000000LL) == 0)
      {
        if ((v20 & 0x8000000000000000LL) == 0)
        {
          String._copyUTF16CodeUnits(into:range:)();
LABEL_54:
          Swift::Int v4 = v20;
LABEL_73:
          v5 = 2 * v4;
          if (v7 == 2415919360LL)
          {
            if (v4)
            {
              v26 = 0LL;
              v27 = 2 * v4;
              while (!__OFADD__(v26, 1LL))
              {
                *(_WORD *)(v19 + 2 * v26) = bswap32(*(unsigned __int16 *)(v19 + 2 * v26)) >> 16;
                ++v26;
                v27 -= 2LL;
                if (!v27) {
                  goto LABEL_78;
                }
              }

              __break(1u);
              goto LABEL_123;
            }

    if (v14 >= a3) {
      break;
    }
  }

  if (v11)
  {
    *(void *)(a1 + 64) = v16 + v11;
    if (v16 + v11 != v15)
    {
      [a4 appendPlaceholder];
      ++*(void *)(a1 + 96);
    }
  }

      v9 = +[NSString stringWithCharacters:length:](&OBJC_CLASS___NSString, "stringWithCharacters:length:", v12, v19);
      if (v12 != cf) {
        free(v12);
      }
    }
  }

  else
  {
    v9 = 0LL;
  }

  v29 = v38;
  v30 = v39;
  if (v34)
  {
    if (_CFURLCopyComponents())
    {
      v31 = (id)cf[1];
      v32 = (id)cf[2];
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (v42) {
        CFRelease(v42);
      }
      if (v43) {
        CFRelease(v43);
      }
      if (v44) {
        CFRelease(v44);
      }
      if (v45) {
        CFRelease(v45);
      }
      if (v46) {
        CFRelease(v46);
      }
      if (v47) {
        CFRelease(v47);
      }
    }

    else
    {
      v32 = 0LL;
      v31 = 0LL;
    }

    CFRelease(v34);
  }

  else
  {
    v31 = 0LL;
    v32 = 0LL;
  }

  if (v37) {
    CFRelease(v37);
  }
  if (v40) {
    CFRelease(v40);
  }
  *(void *)Swift::Int v3 = v7;
  *(void *)(v3 + 8) = v31;
  *(void *)(v3 + 16) = v32;
  *(void *)(v3 + 24) = v8;
  *(void *)(v3 + 32) = v36;
  *(void *)(v3 + 40) = v9;
  *(void *)(v3 + 48) = v29;
  *(void *)(v3 + 56) = v30;
  return result;
}

      if (++v27 >= a2 || v26 >= 0x40) {
        goto LABEL_89;
      }
    }

    LOBYTE(v28) = v28 + 32;
    goto LABEL_47;
  }

  v32 = 0LL;
  v33 = 0LL;
  do
  {
    v34 = v7[v32];
    if ((v34 - 65) <= 0x19)
    {
      LOBYTE(v35) = v34 + 32;
LABEL_65:
      v26 = v33 + 1;
      v77[v33] = v35;
      goto LABEL_66;
    }

    if ((v34 - 97) <= 0x19)
    {
      LOBYTE(v35) = v7[v32];
      goto LABEL_65;
    }

    if ((v34 - 192) > 0x23F || (v35 = latin1[v34 - 192], v35 == 32))
    {
LABEL_81:
      v26 = v33;
      goto LABEL_66;
    }

    if (v35 != 42) {
      goto LABEL_65;
    }
    if ((v34 & 0xFFFFFFDF) == 0xC6)
    {
      v36 = "ae";
    }

    else if ((v34 & 0xFFFFFFDF) == 0xDE)
    {
      v36 = "th";
    }

    else
    {
      v36 = "ss";
      if (v34 != 223)
      {
        v37 = v34 & 0xFFFE;
        switch(v37)
        {
          case 306:
            v36 = "ij";
            break;
          case 330:
            v36 = "ng";
            break;
          case 338:
            v36 = "oe";
            break;
          default:
            goto LABEL_81;
        }
      }
    }

    v38 = 0LL;
    v39 = 1;
    do
    {
      v26 = v33 + 1;
      v77[v33] = v36[v38];
      if ((v39 & 1) == 0) {
        break;
      }
      v39 = 0;
      v38 = 1LL;
      v15 = v33++ >= 0x3F;
    }

    while (!v15);
LABEL_66:
    if (++v32 >= a2) {
      break;
    }
    v33 = v26;
  }

  while (v26 < 0x40);
LABEL_89:
  if (v26 - 1 > 0x3E)
  {
    v53 = 0;
    if ((_DWORD)v25) {
      goto LABEL_110;
    }
  }

  else
  {
    v40 = -1640531527;
    v41 = v77;
    if (v26 < 0xC)
    {
      v44 = -1640531527;
      v43 = -1640531527;
      v42 = v26;
    }

    else
    {
      v42 = v26;
      v43 = -1640531527;
      v44 = -1640531527;
      do
      {
        v45 = *((_DWORD *)v41 + 1) + v44;
        v46 = *((_DWORD *)v41 + 2) + v43;
        v47 = (*(_DWORD *)v41 + v40 - (v45 + v46)) ^ (v46 >> 13);
        v48 = (v45 - v46 - v47) ^ (v47 << 8);
        v49 = (v46 - v47 - v48) ^ (v48 >> 13);
        v50 = (v47 - v48 - v49) ^ (v49 >> 12);
        v51 = (v48 - v49 - v50) ^ (v50 << 16);
        v52 = (v49 - v50 - v51) ^ (v51 >> 5);
        v40 = (v50 - v51 - v52) ^ (v52 >> 3);
        v44 = (v51 - v52 - v40) ^ (v40 << 10);
        v43 = (v52 - v40 - v44) ^ (v44 >> 15);
        v41 += 12;
        v42 -= 12;
      }

      while (v42 > 0xB);
    }

    v54 = v43 + v26;
    switch(v42)
    {
      case 1u:
        goto LABEL_108;
      case 2u:
        goto LABEL_107;
      case 3u:
        goto LABEL_106;
      case 4u:
        goto LABEL_105;
      case 5u:
        goto LABEL_104;
      case 6u:
        goto LABEL_103;
      case 7u:
        goto LABEL_102;
      case 8u:
        goto LABEL_101;
      case 9u:
        goto LABEL_100;
      case 0xAu:
        goto LABEL_99;
      case 0xBu:
        v54 += v41[10] << 24;
LABEL_99:
        v54 += v41[9] << 16;
LABEL_100:
        v54 += v41[8] << 8;
LABEL_101:
        v44 += v41[7] << 24;
LABEL_102:
        v44 += v41[6] << 16;
LABEL_103:
        v44 += v41[5] << 8;
LABEL_104:
        v44 += v41[4];
LABEL_105:
        v40 += v41[3] << 24;
LABEL_106:
        v40 += v41[2] << 16;
LABEL_107:
        v40 += v41[1] << 8;
LABEL_108:
        v40 += *v41;
        break;
      default:
        break;
    }

    v55 = (v40 - v44 - v54) ^ (v54 >> 13);
    v56 = (v44 - v54 - v55) ^ (v55 << 8);
    v57 = (v54 - v55 - v56) ^ (v56 >> 13);
    v58 = (v55 - v56 - v57) ^ (v57 >> 12);
    v59 = (v56 - v57 - v58) ^ (v58 << 16);
    v60 = (v57 - v58 - v59) ^ (v59 >> 5);
    v61 = (v58 - v59 - v60) ^ (v60 >> 3);
    v53 = (v60 - v61 - ((v59 - v60 - v61) ^ (v61 << 10))) ^ (((v59 - v60 - v61) ^ (v61 << 10)) >> 15);
    if ((_DWORD)v25)
    {
LABEL_110:
      v62 = result >> 3;
      if ((result >> 3))
      {
        v63 = (double)(v53 - 1) / 4294967300.0;
        v64 = (v63 * (double)v25);
        if (bswap32(*(_DWORD *)(v23 + 4LL * v64)) <= v53)
        {
          do
          {
            v67 = v64 + 1;
            v68 = bswap32(*(_DWORD *)(v23 + 4 * v64++));
          }

          while (v68 < v53);
          v65 = (v67 - 1);
          v66 = bswap32(*(_DWORD *)(v23 + 4LL * v65));
        }

        else
        {
          do
          {
            v65 = v64;
            v66 = bswap32(*(_DWORD *)(v23 + 4LL * v64));
            v15 = (_DWORD)v64 != 0;
            LODWORD(v64) = v64 - 1;
          }

          while (v15 && v66 > v53);
        }

        if (v66 == v53)
        {
          v69 = *(unsigned __int8 *)(v23 + 4LL * v25 + v65);
        }

        v70 = (v63 * (double)v62);
        if (bswap32(*(_DWORD *)(v24 + 4LL * v70)) <= v53)
        {
          do
          {
            v73 = v70 + 1;
            v74 = bswap32(*(_DWORD *)(v24 + 4 * v70++));
          }

          while (v74 < v53);
          v71 = (v73 - 1);
          v72 = bswap32(*(_DWORD *)(v24 + 4LL * v71));
        }

        else
        {
          do
          {
            v71 = v70;
            v72 = bswap32(*(_DWORD *)(v24 + 4LL * v70));
            v15 = (_DWORD)v70 != 0;
            LODWORD(v70) = v70 - 1;
          }

          while (v15 && v72 > v53);
        }

        if (v72 == v53) {
          v75 = *(_DWORD *)(v24 + 4LL * v62 + 4 * v71);
        }
        else {
          v75 = 0;
        }
        v69 = HIBYTE(v75);
        v76 = (unint64_t)((double)v20 * 0.75);
        if (!BYTE2(v75)) {
          v76 = v20;
        }
        if ((_DWORD)v69) {
          v20 = (unint64_t)((double)v20 * 0.5);
        }
        else {
          v20 = v76;
        }
        if ((_BYTE)v75) {
          *(void *)(a4 + 8LL * v75) += v20;
        }
        if (BYTE1(v75)) {
          *(void *)(a4 + 8LL * BYTE1(v75)) += v20;
        }
        if (BYTE2(v75)) {
          *(void *)(a4 + 8LL * BYTE2(v75)) += v20;
        }
        if ((_DWORD)v69) {
LABEL_144:
        }
          *(void *)(a4 + 8 * v69) += v20;
      }
    }
  }

  return result;
}

LABEL_60:
  Hasher._combine(_:)(0);
  if (!v35) {
    goto LABEL_61;
  }
LABEL_56:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v45 = v35;
  _CFObject.hash(into:)();

  if (v37)
  {
LABEL_57:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v46 = v37;
    _CFObject.hash(into:)();

    goto LABEL_63;
  }

  Hasher._combine(_:)(0);
  if (!v36) {
    goto LABEL_61;
  }
LABEL_56:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v46 = v36;
  _CFObject.hash(into:)();

  if (v38)
  {
LABEL_57:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v47 = v38;
    _CFObject.hash(into:)();

    goto LABEL_63;
  }

    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }

  result = swift_unknownObjectRetain_n();
  v12 = v4;
  do
  {
    v18 = *(unsigned __int16 *)(v12 + 16);
    if (*(_WORD *)(v12 + 16))
    {
      v19 = *(void *)(v12 + 40);
      v20 = __OFSUB__(v5, v19);
      v21 = v5 - v19;
      if (v20) {
        goto LABEL_55;
      }
      if (__OFADD__(v21, 1LL)) {
        goto LABEL_56;
      }
      if (v21 + 1 < 1)
      {
        v18 = 0LL;
        goto LABEL_17;
      }

      if ((_DWORD)v18 != 1)
      {
        v22 = (uint64_t *)(v12 + 64);
        v23 = 1LL;
        while (1)
        {
          v24 = *v22;
          v22 += 3;
          v5 = v21 - v24;
          if (__OFSUB__(v21, v24)) {
            break;
          }
          if (__OFADD__(v5, 1LL)) {
            goto LABEL_53;
          }
          if (v5 + 1 < 1)
          {
            v18 = v23;
            v5 = v21;
            goto LABEL_17;
          }

          ++v23;
          v21 = v5;
          if (v18 == v23) {
            goto LABEL_16;
          }
        }

        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }

      v5 = v21;
    }

  v38 = URLComponents._URLComponents.percentEncodedUser.getter();
  if (v39)
  {
    String.append(_:)(*(Swift::String *)&v38);
    swift_bridgeObjectRelease();
  }

  v40 = v92;
  if ((void)v92)
  {
    v41 = *((void *)&v91 + 1);
    v42 = (void *)v92;
LABEL_64:
    v76._countAndFlagsBits = 58LL;
    v76._object = (void *)0xE100000000000000LL;
    swift_bridgeObjectRetain();
    v43._countAndFlagsBits = v41;
    v43._object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    goto LABEL_68;
  }

  if (BYTE11(v88) == 1 && (void)v88 && (*(_BYTE *)(v88 + 96) & 1) == 0)
  {
    v56 = String.subscript.getter();
    v41 = MEMORY[0x186E1B610](v56);
    v42 = v57;
    swift_bridgeObjectRelease();
    goto LABEL_64;
  }

    v28 = v3[24];
    swift_bridgeObjectRetain();
    v29 = swift_bridgeObjectRelease();
    *(void *)(v28 + 72) = v4;
    *(void *)(v28 + 80) = v7;
    *((_BYTE *)v3 + 176) = 37;
    MEMORY[0x1895F8858](v29);
    v46 = v5;
    swift_bridgeObjectRetain();
    v30 = specialized Sequence.contains(where:)( (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t)v45,  v4,  v7);
    swift_bridgeObjectRelease_n();
    *(_BYTE *)(v6 + 152) = v30 & 1;
    goto LABEL_61;
  }

  if ((v7 & 0x1000000000000000LL) != 0)
  {
    v13 = String.UTF8View._foreignSubscript(position:)();
    goto LABEL_39;
  }

  if ((v7 & 0x2000000000000000LL) != 0)
  {
    v48 = v4;
    v49 = v7 & 0xFFFFFFFFFFFFFFLL;
    v13 = *((_BYTE *)&v48 + v2);
    goto LABEL_39;
  }

  if ((v4 & 0x1000000000000000LL) == 0) {
    goto LABEL_84;
  }
  for (i = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32; ; i = _StringObject.sharedUTF8.getter())
  {
    v13 = *(_BYTE *)(i + v2);
LABEL_39:
    if (v13 == 93)
    {
      swift_bridgeObjectRetain_n();
      Swift::UInt v2 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v4, v7);
      swift_bridgeObjectRelease();
      if ((v2 & 1) != 0) {
        goto LABEL_48;
      }
      goto LABEL_83;
    }

      v64 = v31;
      outlined init with copy of ICUNumberFormatter.Signature( v32,  v43,  type metadata accessor for ICUNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v64, v43, (uint64_t)v24, (void *)v40);
      goto LABEL_61;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v40 = v29;
      goto LABEL_19;
    }

    goto LABEL_23;
  }

  __break(1u);
LABEL_61:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_61:
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  v56 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  v57 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_initWithDomain_code_userInfo_, v57, 512, _NativeDictionary.bridged()());
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_willThrow();
}

        v166 = (char *)((v105 - 1) & v105);
        v102 = __clz(__rbit64(v105)) + (v103 << 6);
      }

      v107 = v163;
      outlined init with copy of AnyHashable(*(void *)(v163 + 48) + 40 * v102, (uint64_t)&v176);
      outlined init with copy of Any(*(void *)(v107 + 56) + 32 * v102, v157);
      v173 = v178;
      v174 = v179;
      v175 = v180;
      v171 = v176;
      v172 = v177;
      outlined init with copy of AnyHashable((uint64_t)&v171, (uint64_t)v170);
      v108 = v162;
      v109 = swift_dynamicCast();
      v110 = v167;
      v111 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v167[7];
      if (!v109) {
        break;
      }
      v111(v108, 0LL, 1LL, v99);
      v112 = (void (*)(char *, char *, uint64_t))v110[4];
      v112(v101, v108, v99);
      outlined init with copy of Any(v156, (uint64_t)v170);
      outlined destroy of Any?( (uint64_t)&v171,  &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      v113 = swift_dynamicCast();
      v114 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
      if ((v113 & 1) == 0)
      {
        v114(v11, 1LL, 1LL, a3);
        ((void (*)(char *, void))v167[1])(v101, MEMORY[0x189617FA8]);
        (*(void (**)(char *, uint64_t))(v138 + 8))(v11, v139);
        goto LABEL_73;
      }

      v165 = (char *)v103;
      v114(v11, 0LL, 1LL, a3);
      v115 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
      v116 = v101;
      v117 = v147;
      v115(v147, v11, a3);
      v118 = v99;
      v119 = (uint64_t)v154;
      v120 = &v154[*(int *)(TupleTypeMetadata2 + 48)];
      v112(v154, v116, v118);
      v115(v120, v117, a3);
      v121 = v22;
      v122 = v159;
      v123 = (uint64_t)v148;
      v124 = &v148[*(int *)(v159 + 48)];
      v112(v148, (char *)v119, v118);
      v115(v124, v120, a3);
      v125 = v123 + *(int *)(v122 + 48);
      v126 = v144;
      v112(v144, (char *)v123, v118);
      v127 = v146;
      v115(v146, (char *)v125, a3);
      v128 = (uint64_t)v145;
      v112(v145, v126, v118);
      v129 = v153;
      v130 = v127;
      v99 = v118;
      v115(v153, v130, a3);
      result = __RawDictionaryStorage.find<A>(_:)(v128, v118, v161);
      v131 = result;
      if ((v132 & 1) != 0)
      {
        v100 = v169;
        ((void (*)(unint64_t, uint64_t, uint64_t))v167[5])(v169[6] + v167[9] * result, v128, v118);
        result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v121 + 40))( v100[7] + *(void *)(v121 + 72) * v131,  v129,  a3);
        v98 = (uint64_t)v165;
        v52 = (unint64_t)v166;
        v22 = v121;
      }

      else
      {
        if (v169[2] >= v169[3])
        {
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
          goto LABEL_80;
        }

        *(void *)&v151[(result >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << result;
        v133 = v169;
        v112((char *)(v169[6] + v167[9] * result), (char *)v128, v99);
        v22 = v168;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v115)( v133[7] + *(void *)(v168 + 72) * v131,  v129,  a3);
        v134 = v133[2];
        v135 = __OFADD__(v134, 1LL);
        v136 = v134 + 1;
        if (v135) {
          goto LABEL_78;
        }
        v169[2] = v136;
        v98 = (uint64_t)v165;
        v52 = (unint64_t)v166;
      }
    }

    v111(v108, 1LL, 1LL, MEMORY[0x189617FA8]);
    outlined destroy of Any?( (uint64_t)&v171,  &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    (*(void (**)(char *, uint64_t))(v140 + 8))(v108, v141);
LABEL_73:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_release();
    return 0LL;
  }

  v145 = (char *)((unint64_t)(63 - v50) >> 6);
  v154 = (char *)&v178 + 8;
  v148 = (char *)&v173 + 8;
  v54 = v169;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v56 = 0LL;
  v147 = (char *)(MEMORY[0x18961AFC0] + 8LL);
  v146 = (char *)(v54 + 8);
  while (1)
  {
    if (v52)
    {
      v164 = (char *)((v52 - 1) & v52);
      v59 = __clz(__rbit64(v52)) | (v56 << 6);
      v60 = v56;
      goto LABEL_29;
    }

    v61 = v56 + 1;
    if (__OFADD__(v56, 1LL))
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }

    v62 = *(void *)(v158 + 8 * v61);
    v60 = v56 + 1;
    if (!v62)
    {
      v60 = v56 + 2;
      v62 = *(void *)(v158 + 8 * v60);
      if (!v62)
      {
        v60 = v56 + 3;
        v62 = *(void *)(v158 + 8 * v60);
        if (!v62)
        {
          v60 = v56 + 4;
          v62 = *(void *)(v158 + 8 * v60);
          if (!v62) {
            break;
          }
        }
      }
    }

      v40 = String.subscript.getter();
      v38 = MEMORY[0x186E1B610](v40);
      v39 = v41;
      swift_bridgeObjectRelease();
      goto LABEL_61;
    }

  __break(1u);
LABEL_61:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_61:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_61;
  }

  if (v9 < a6 || v9 > a7)
  {
    *(void *)(a8 + 32) = 0LL;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    *(_BYTE *)(a8 + 40) = 1;
    return result;
  }

  v21 = a7 - v9;
  if (__OFSUB__(a7, v9)) {
    goto LABEL_63;
  }
  v13 = __OFADD__(a3, v21);
  v22 = a3 + v21;
  if (!v13)
  {
    if (v8 >= v22 && v22 >= a3 && v14 >= a7 && v11 <= a7 && v9 >= v11 && v14 >= v9)
    {
      *(void *)(a8 + 16) = result;
      *(void *)(a8 + 24) = a2;
      *(void *)(a8 + 32) = a3;
      *(void *)a8 = a3;
      *(void *)(a8 + 8) = v22;
      *(_BYTE *)(a8 + 40) = 0;
      return result;
    }

    goto LABEL_65;
  }

        __break(1u);
LABEL_61:
        __break(1u);
        return result;
      }

      if (v28 >= v19 >> 10)
      {
        *a7 = v19;
        a7[1] = v58;
        a7[2] = v21;
        a7[3] = v23;
LABEL_20:
        a7[4] = result;
        a7[5] = v16;
        a7[6] = v17;
        a7[7] = (unint64_t)v18;
        return result;
      }

      __break(1u);
      goto LABEL_61;
    }

  if (v12)
  {
LABEL_83:
    __break(1u);
    return result;
  }

  __break(1u);
  return result;
}

                    if (!v114)
                    {
                      Swift::UInt v2 = (void *)MEMORY[0x18961AFF0];
                      goto LABEL_130;
                    }

                    if (v114 == v2[2])
                    {
                      swift_retain();
                      goto LABEL_130;
                    }

                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
                    v77 = (void *)static _DictionaryStorage.allocate(capacity:)();
                    v78 = 0LL;
                    v79 = *v113;
                    v80 = v114;
                    v81 = v77 + 8;
                    v112 = v77;
                    while (1)
                    {
                      v114 = v80;
                      if (v79)
                      {
                        v120 = (v79 - 1) & v79;
                        v121 = v78;
                        v86 = __clz(__rbit64(v79)) | (v78 << 6);
                      }

                      else
                      {
                        v87 = v78 + 1;
                        if (__OFADD__(v78, 1LL)) {
                          goto LABEL_139;
                        }
                        if (v87 >= v111) {
                          goto LABEL_129;
                        }
                        v88 = v113[v87];
                        v89 = v78 + 1;
                        if (!v88)
                        {
                          v89 = v78 + 2;
                          if (v78 + 2 >= v111) {
                            goto LABEL_129;
                          }
                          v88 = v113[v89];
                          if (!v88)
                          {
                            v89 = v78 + 3;
                            if (v78 + 3 >= v111) {
                              goto LABEL_129;
                            }
                            v88 = v113[v89];
                            if (!v88)
                            {
                              v89 = v78 + 4;
                              if (v78 + 4 >= v111) {
                                goto LABEL_129;
                              }
                              v88 = v113[v89];
                              if (!v88)
                              {
                                v89 = v78 + 5;
                                if (v78 + 5 >= v111) {
                                  goto LABEL_129;
                                }
                                v88 = v113[v89];
                                if (!v88)
                                {
                                  v90 = v78 + 6;
                                  if (v78 + 6 >= v111) {
                                    goto LABEL_129;
                                  }
                                  v88 = v113[v90];
                                  if (!v88)
                                  {
                                    while (1)
                                    {
                                      v89 = v90 + 1;
                                      if (__OFADD__(v90, 1LL)) {
                                        goto LABEL_142;
                                      }
                                      if (v89 >= v111) {
                                        break;
                                      }
                                      v88 = v113[v89];
                                      ++v90;
                                      if (v88) {
                                        goto LABEL_119;
                                      }
                                    }

        __break(1u);
        goto LABEL_61;
      }
    }

    v92 = v219;
    if (fabs(v5) < 9.00719925e15)
    {
      *(double *)v226 = v5;
      lazy protocol witness table accessor for type Double and conformance Double();
      v91 = (uint64_t)v200;
      dispatch thunk of FloatingPoint.init<A>(_:)();
      v93 = v218;
      (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v91, v204);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      v113 = swift_initStackObject();
      *(_OWORD *)(v113 + 16) = xmmword_183720D90;
      *(void *)(v113 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(v113 + 40) = v114;
      v226[0] = 0LL;
      v226[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(94LL);
      v115._countAndFlagsBits = 0x7020746F6E6E6143LL;
      v115._object = (void *)0xED00002065737261LL;
      String.append(_:)(v115);
      v116._countAndFlagsBits = countAndFlagsBits;
      v116._object = object;
      String.append(_:)(v116);
      v117._object = (void *)0x80000001839D0A40LL;
      v117._countAndFlagsBits = 0xD00000000000004FLL;
      String.append(_:)(v117);
      v118 = v226[0];
      v119 = v226[1];
      *(void *)(v113 + 72) = MEMORY[0x189617FA8];
      *(void *)(v113 + 48) = v118;
      *(void *)(v113 + 56) = v119;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v120 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (Hashable & Sendable)?( v113 + 32,  (uint64_t)v226,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
      v121 = v226[0];
      v122 = v226[1];
      swift_retain();
      v123 = specialized __RawDictionaryStorage.find<A>(_:)(v121, v122);
      if ((v124 & 1) != 0)
      {
        __break(1u);
      }

      else
      {
        v120[(v123 >> 6) + 8] |= 1LL << v123;
        v125 = (uint64_t *)(v120[6] + 16 * v123);
        *v125 = v121;
        v125[1] = v122;
        outlined init with take of Any(v227, (_OWORD *)(v120[7] + 32 * v123));
        v126 = v120[2];
        v66 = __OFADD__(v126, 1LL);
        v127 = v126 + 1;
        if (!v66)
        {
          v120[2] = v127;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          v128 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          v129 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v130 = objc_msgSend(v128, sel_initWithDomain_code_userInfo_, v129, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v131 = objc_msgSend(v130, sel_domain);
          v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
          v92 = v133;

          v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          v93 = v135;
          if (v132 == v134 && v92 == v135) {
            goto LABEL_47;
          }
          v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v91 & 1) != 0)
          {
LABEL_57:
            swift_willThrow();
            return swift_release();
          }

          __break(1u);
LABEL_36:
          swift_release();
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 32))(v205, v91, v92);
        }
      }

      __break(1u);
      goto LABEL_110;
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v138 = swift_initStackObject();
    *(_OWORD *)(v138 + 16) = xmmword_183720D90;
    *(void *)(v138 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(v138 + 40) = v139;
    v226[0] = 0LL;
    v226[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(82LL);
    v140._countAndFlagsBits = 0x7020746F6E6E6143LL;
    v140._object = (void *)0xED00002065737261LL;
    String.append(_:)(v140);
    v141._countAndFlagsBits = countAndFlagsBits;
    v141._object = object;
    String.append(_:)(v141);
    v142._countAndFlagsBits = 0xD000000000000043LL;
    v142._object = (void *)0x80000001839D0A90LL;
    String.append(_:)(v142);
    v143 = v226[0];
    v144 = v226[1];
    *(void *)(v138 + 72) = MEMORY[0x189617FA8];
    *(void *)(v138 + 48) = v143;
    *(void *)(v138 + 56) = v144;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v46 = static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (Hashable & Sendable)?( v138 + 32,  (uint64_t)v226,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
    v22 = v226[0];
    v34 = (char *)v226[1];
    swift_retain();
    v145 = specialized __RawDictionaryStorage.find<A>(_:)(v22, (uint64_t)v34);
    if ((v47 & 1) != 0) {
      goto LABEL_69;
    }
    *(void *)(v46 + 8 * (v145 >> 6) + 64) |= 1LL << v145;
    v146 = (uint64_t *)(*(void *)(v46 + 48) + 16 * v145);
    *v146 = v22;
    v146[1] = (uint64_t)v34;
    outlined init with take of Any(v227, (_OWORD *)(*(void *)(v46 + 56) + 32 * v145));
    v147 = *(void *)(v46 + 16);
    v66 = __OFADD__(v147, 1LL);
    v148 = v147 + 1;
    if (!v66)
    {
      *(void *)(v46 + 16) = v148;
      swift_release();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      v149 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      v150 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v151 = objc_msgSend(v149, sel_initWithDomain_code_userInfo_, v150, 2048, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v152 = objc_msgSend(v151, sel_domain);
      v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
      v155 = v154;

      if (v153 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v155 == v156)
      {
LABEL_47:
        swift_bridgeObjectRelease_n();
        goto LABEL_57;
      }

      v168 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v168 & 1) != 0) {
        goto LABEL_57;
      }
LABEL_110:
      __break(1u);
    }

    swift_bridgeObjectRelease();
LABEL_21:
    v38 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneICU,  (uint64_t)&protocol conformance descriptor for _TimeZoneICU);
    v39 = (uint64_t *)(*(void *)(v35 + 56) + 16 * v10);
    swift_unknownObjectRelease();
    *v39 = v15;
    v39[1] = v38;
    goto LABEL_62;
  }

  v35 = v21;
  if ((v31 & 1) != 0) {
    goto LABEL_21;
  }
LABEL_61:
  specialized _NativeDictionary._insert(at:key:value:)(v10, a1, a2, v15, (void *)v35);
  swift_bridgeObjectRetain();
LABEL_62:
  *(void *)(v4 + 40) = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v60 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneICU,  (uint64_t)&protocol conformance descriptor for _TimeZoneICU);
  v61 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  Swift::Int v3 = (char *)objc_allocWithZone(v61);
  v62 = (uint64_t *)&v3[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *v62 = v15;
  v62[1] = v60;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  v63 = swift_allocObject();
  *(_DWORD *)(v63 + 32) = 0;
  *(_OWORD *)(v63 + 16) = xmmword_1837ADD10;
  *(void *)&v3[OBJC_IVAR____NSSwiftTimeZone_lock] = v63;
  v120.receiver = v3;
  v120.super_class = v61;
  swift_retain();
  v64 = objc_msgSendSuper2(&v120, sel_init);
  swift_bridgeObjectRetain();
  v10 = (unint64_t)v64;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v121 = *(void *)(v4 + 104);
  v21 = v121;
  *(void *)(v4 + 104) = 0x8000000000000000LL;
  v65 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  v67 = *(void *)(v21 + 16);
  v68 = (v66 & 1) == 0;
  v26 = __OFADD__(v67, v68);
  v69 = v67 + v68;
  if (!v26)
  {
    LOBYTE(v3) = v66;
    if (*(void *)(v21 + 24) >= v69) {
      goto LABEL_66;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v69, isUniquelyReferenced_nonNull_native);
    v70 = v121;
    v65 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
LABEL_65:
    v65 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_66:
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v70 = v21;
LABEL_68:
      if ((v3 & 1) != 0)
      {
LABEL_69:
        v72 = *(void *)(v70 + 56);
        v73 = 8 * v65;

        *(void *)(v72 + v73) = v10;
LABEL_105:
        *(void *)(v4 + 104) = v70;
        swift_release();
        goto LABEL_141;
      }

  v145 = Float.exponent.getter();
  v238 = v145;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    v146 = v234;
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      v147 = v230;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      goto LABEL_66;
    }

    goto LABEL_71;
  }

  v148 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v149 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v148 & 1) == 0)
  {
    if (v149 >= 64)
    {
      v169 = v207;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v86 + 16))(v207, v234, v57);
      v237 = v145;
      if (v145 <= 0)
      {
        (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v169, v57);
        v146 = v234;
      }

      else
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        v170 = v230;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v171 = dispatch thunk of static Comparable.< infix(_:_:)();
        v172 = *(void (**)(_BYTE *, uint64_t))(v86 + 8);
        v172(v170, v57);
        v172(v207, v57);
        v146 = v234;
        if ((v171 & 1) != 0) {
          goto LABEL_90;
        }
      }

      goto LABEL_72;
    }

    v146 = v234;
LABEL_71:
    if (dispatch thunk of BinaryInteger._lowWord.getter() >= v145) {
      goto LABEL_72;
    }
    goto LABEL_90;
  }

  if (v149 <= 64)
  {
    v164 = v211;
    v165 = swift_getAssociatedConformanceWitness();
    MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v164, v165);
    v166 = v230;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v167 = v234;
    LOBYTE(v164) = dispatch thunk of static Comparable.< infix(_:_:)();
    v212 = *(_BYTE **)(v86 + 8);
    ((void (*)(_BYTE *, uint64_t))v212)(v166, v57);
    v168 = v205;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v86 + 16))(v205, v167, v57);
    if ((v164 & 1) != 0)
    {
      ((void (*)(_BYTE *, uint64_t))v212)(v168, v57);
      v146 = v234;
    }

    else
    {
      v174 = v168;
      v175 = v238;
      v176 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(_BYTE *, uint64_t))v212)(v174, v57);
      v161 = v176 < v175;
      v146 = v234;
      if (!v161) {
        goto LABEL_72;
      }
    }

    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }

      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }

    goto LABEL_54;
  }

                  if (!v90)
                  {
                    Swift::Int v3 = MEMORY[0x18961AFF0];
                    goto LABEL_128;
                  }

                  if (v90 == *(void *)(v3 + 16))
                  {
                    swift_retain();
                    goto LABEL_128;
                  }

                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  v61 = static _DictionaryStorage.allocate(capacity:)();
                  v62 = 0LL;
                  v63 = *v88;
                  v64 = v61 + 64;
                  while (1)
                  {
                    if (v63)
                    {
                      v70 = __clz(__rbit64(v63));
                      v63 &= v63 - 1;
                      v71 = v70 | (v62 << 6);
                    }

                    else
                    {
                      v14 = __OFADD__(v62++, 1LL);
                      if (v14) {
                        goto LABEL_137;
                      }
                      if (v62 >= v89) {
                        goto LABEL_127;
                      }
                      v72 = v88[v62];
                      if (!v72)
                      {
                        v73 = v62 + 1;
                        if (v62 + 1 >= v89) {
                          goto LABEL_127;
                        }
                        v72 = v88[v73];
                        if (!v72)
                        {
                          v73 = v62 + 2;
                          if (v62 + 2 >= v89) {
                            goto LABEL_127;
                          }
                          v72 = v88[v73];
                          if (!v72)
                          {
                            v73 = v62 + 3;
                            if (v62 + 3 >= v89) {
                              goto LABEL_127;
                            }
                            v72 = v88[v73];
                            if (!v72)
                            {
                              v73 = v62 + 4;
                              if (v62 + 4 >= v89) {
                                goto LABEL_127;
                              }
                              v72 = v88[v73];
                              if (!v72)
                              {
                                while (1)
                                {
                                  v62 = v73 + 1;
                                  if (__OFADD__(v73, 1LL)) {
                                    goto LABEL_140;
                                  }
                                  if (v62 >= v89) {
                                    break;
                                  }
                                  v72 = v88[v62];
                                  ++v73;
                                  if (v72) {
                                    goto LABEL_113;
                                  }
                                }

    v58 = (v62 - 1) & v62;
    v60 = __clz(__rbit64(v62)) + (v5 << 6);
    if (!v1[2]) {
      goto LABEL_82;
    }
LABEL_61:
    v64 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v33 + 48) + v60));
    if ((v65 & 1) == 0) {
      goto LABEL_83;
    }
    v66 = *(void *)(v1[7] + 8 * v64);
    if ((v66 & ~v6) == 0) {
      v66 = 0LL;
    }
    v6 |= v66;
    if (v58) {
      goto LABEL_43;
    }
  }

  v63 = v61 + 4;
  if (v63 < (uint64_t)v4)
  {
    v62 = *(void *)(v34 + 8 * v63);
    if (!v62)
    {
      while (1)
      {
        v5 = v63 + 1;
        if (__OFADD__(v63, 1LL)) {
          break;
        }
        v62 = *(void *)(v34 + 8 * v5);
        ++v63;
        if (v62) {
          goto LABEL_60;
        }
      }

        v37 = v38;
        if (v87 <= v38++) {
          goto LABEL_69;
        }
      }

      v42 = (void *)v86[v37];
      objc_opt_self();
      v43 = (os_log_s *)_NSOSLog();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_FAULT))
      {
        v46 = (NSString *)@"<unknown>";
        if (v84) {
          v46 = NSStringFromSelector(v84);
        }
        v90 = v81;
        v91 = v46;
        v92 = 2080;
        v93 = &v89;
        _os_log_fault_impl( &dword_182EB1000,  v43,  OS_LOG_TYPE_FAULT,  "NSPredicate: Invalid argument passed to NSFunctionExpression with selector '%@' and parameter encoding '%s' expecting pointer",  (uint8_t *)&v90,  0x16u);
      }

      goto LABEL_59;
    }

                    objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSInvalidUnarchiveOperationException",  4864,  @"%1$@: cannot decode object of class (%2$@) for key (%3$@) because no class named %2$@ was found; the class needs to be defined in source code or linked in from a library (ensure the class is part of the correct target). If the class was renamed, use setClassName:forClass: to add a class translation mapping to NSKeyedUnarchiver",
                      _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),
                      v26,
                      a2);
                    goto LABEL_11;
                  }

                  v51 = *(void *)v57;
LABEL_63:
                  v31 = 0LL;
                  while (1)
                  {
                    if (*(void *)v57 != v51) {
                      objc_enumerationMutation(obj);
                    }
                    v27 = NSClassFromString(*(NSString **)(*((void *)&v56 + 1) + 8 * v31));
                    if (v27) {
                      break;
                    }
                    if (v52 == ++v31)
                    {
                      v52 = [obj countByEnumeratingWithState:&v56 objects:value count:16];
                      if (v52) {
                        goto LABEL_63;
                      }
                      goto LABEL_69;
                    }
                  }
                }
              }
            }

            if (([*(id *)(a1 + 120) classNameAllowed:v27] & 1) == 0)
            {
              v29 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
              objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  *MEMORY[0x189603A60],  4864,  @"%@: data to unarchive contains class (%@) which has not been allowed",  v29,  NSStringFromClass(v27));
              goto LABEL_60;
            }

            goto LABEL_44;
          }

          v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
          v14 = @"%@: wrong class format";
        }

        else
        {
          v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
          v14 = @"%@: missing class name for class";
        }
      }

      else
      {
        v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
        v14 = @"%@: wrong class container format";
      }

  v5 = (NSString *)_lockedLocalizedTimeRemaining((uint64_t)values);
  v40 = _localizedAppendedTimeRemaining(v5);
  v41 = -[NSMutableDictionary objectForKey:]( values->_userInfo,  "objectForKey:",  @"NSProgressSuppressUnitCountInAdditionalDescriptionKey");
  if (v41 && (v42 = (void *)v41, _NSIsNSNumber()) && ([v42 BOOLValue] & 1) != 0
    || values->_selfFraction.total < 1
    || values->_selfFraction.completed < 0)
  {
    if (!v40)
    {
      -[NSLock unlock](self->_lock, "unlock");
      return (NSString *)&stru_189CA6A28;
    }
  }

  else
  {
    v43 = -[NSMutableDictionary objectForKey:]( values->_userInfo,  "objectForKey:",  @"NSProgressLocalizedDescriptionUnitCountFormatterKey");
    if (v43 && (v44 = (void *)v43, (objc_opt_isKindOfClass() & 1) != 0))
    {
      v45 = objc_msgSend( v44,  "stringFromNumber:",  +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  values->_selfFraction.completed));
    }

    else
    {
      if (qword_18C4962B8 != -1) {
        dispatch_once(&qword_18C4962B8, &__block_literal_global_691);
      }
      v45 = objc_msgSend( (id)qword_18C4962C0,  "stringFromNumber:",  +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  values->_selfFraction.completed));
      v44 = (void *)qword_18C4962C0;
    }

    v5 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  [(id)_NSFoundationBundle() localizedStringForKey:@"%@ of %@" value:&stru_189CA6A28 table:@"Progress"],  v45,  objc_msgSend( v44,  "stringFromNumber:",  +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", values->_selfFraction.total)));
    if (v40) {
      v5 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@%@", v5, v40);
    }
  }

  -[NSLock unlock](self->_lock, "unlock");
  if (v5) {
    return v5;
  }
  return (NSString *)&stru_189CA6A28;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  Swift::Int v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v9);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = v2;
  Hasher.init(_seed:)();
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v12 = *(void *)a1;
    Hasher._combine(_:)(1u);
    if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v13 = v12;
    }
    else {
      Swift::UInt64 v13 = 0LL;
    }
    Hasher._combine(_:)(v13);
  }

  outlined init with take of LocalePreferences?( a1 + 16,  (uint64_t)v85,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v14 = *(unsigned __int8 *)(a1 + 73);
  if (v14 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v15 = v14 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }

  int v16 = *(unsigned __int16 *)(a1 + 74);
  unsigned int v17 = v16 | (*(unsigned __int8 *)(a1 + 76) << 16);
  if (v16 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17 & 1);
    Hasher._combine(_:)((v17 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v17) & 1);
  }

  int v18 = *(unsigned __int8 *)(a1 + 77);
  if (v18 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v19 = v18 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
  }

  v20 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of FloatingPointRoundingRule?(a1 + v20[9], (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1LL, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  uint64_t v21 = a1 + v20[10];
  int v22 = *(unsigned __int8 *)(v21 + 8);
  if (v22 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v23 = *(void *)v21;
    Hasher._combine(_:)(1u);
    if ((v22 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v23 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v24 = v23;
      }
      else {
        Swift::UInt64 v24 = 0LL;
      }
      Hasher._combine(_:)(v24);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v23);
    }
  }

  Swift::UInt v25 = *(unsigned __int8 *)(a1 + v20[11]);
  if (v25 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v25);
  }

  uint64_t v26 = a2(0LL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( a1 + *(int *)(v26 + 24),  (uint64_t)v82,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v82,  (uint64_t)v83,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v83) == 1)
  {
    Hasher._combine(_:)(0);
    goto LABEL_84;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v82,  (uint64_t)&v64,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v64 == 2)
  {
    Swift::UInt8 v27 = 0;
  }

  else
  {
    Swift::UInt8 v27 = v64 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v27);
  uint64_t v28 = v65;
  if (!v65)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v64);
    v32 = &v64;
    goto LABEL_45;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v28 + 16));
  uint64_t v29 = *(void *)(v28 + 16);
  if (!v29)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v82,  (uint64_t)v63,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v82,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    v32 = (uint64_t *)v63;
LABEL_45:
    outlined retain of LocalePreferences(v32);
    if (!v66) {
      goto LABEL_40;
    }
    goto LABEL_46;
  }

  outlined retain of LocalePreferences?( (uint64_t)v82,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v82,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v30 = v28 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v30 += 16LL;
    --v29;
  }

  while (v29);
  swift_bridgeObjectRelease();
  if (!v66)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v67) {
      goto LABEL_41;
    }
LABEL_47:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = v68;
    if (!v68) {
      goto LABEL_42;
    }
    goto LABEL_48;
  }

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t *a1)
{
  __int128 v2 = *((_OWORD *)a1 + 3);
  __int128 v10 = *((_OWORD *)a1 + 2);
  __int128 v11 = v2;
  __int128 v3 = *((_OWORD *)a1 + 5);
  __int128 v12 = *((_OWORD *)a1 + 4);
  __int128 v13 = v3;
  __int128 v4 = *((_OWORD *)a1 + 1);
  __int128 v8 = *(_OWORD *)a1;
  __int128 v9 = v4;
  Hasher.init(_seed:)();
  ICUDateFormatter.PatternCacheKey.hash(into:)((uint64_t)v7);
  Swift::Int v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(double *a1)
{
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a3 & 0x100000000LL) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a3);
  }

  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(HIDWORD(a4));
  Swift::Int v8 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)( a1,  a2,  a3 | ((HIDWORD(a3) & 1) << 32),  a4,  v8);
}

LABEL_38:
  Hasher._combine(_:)(0);
  v32 = 0LL;
LABEL_39:

  v37 = v58;
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v37);
    swift_bridgeObjectRelease();
    v38 = v59;
    if (v59) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    if (v60) {
      goto LABEL_42;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(0);
  v38 = v59;
  if (!v59) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v38);
  swift_bridgeObjectRelease();
  if (!v60) {
    goto LABEL_45;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v39 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }

  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v40 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }

  if (v63 == 2)
  {
    id v41 = 0;
  }

  else
  {
    id v41 = v63 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v41);
  if (v64 == 2)
  {
    id v42 = 0;
  }

  else
  {
    id v43 = v64 & 1;
    Hasher._combine(_:)(1u);
    id v42 = v43;
  }

  Hasher._combine(_:)(v42);
  outlined retain of LocalePreferences?( (uint64_t)v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  outlined release of Locale((uint64_t)&v69);
  Hasher._combine(_:)(a1[48] & 1);
  id v44 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v44);
}

          if (v50)
          {
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
            goto LABEL_120;
          }

            if (v13 && v10 && (v10[72] & 1) == 0)
            {
LABEL_49:
              Swift::UInt v55 = String.subscript.getter();
              MEMORY[0x186E1B610](v55);
              swift_bridgeObjectRelease();
              __int128 v9 = swift_bridgeObjectRelease();
              LOBYTE(v24) = v94;
              goto LABEL_50;
            }

            if (!v34)
            {
              uint64_t v53 = 0LL;
              if (!v33)
              {
                Swift::UInt v54 = 0LL;
                goto LABEL_71;
              }

              if (!v10)
              {
                Swift::UInt v54 = 0LL;
                goto LABEL_71;
              }

              if ((v10[96] & 1) != 0)
              {
                uint64_t v53 = 0LL;
                Swift::UInt v54 = 0LL;
LABEL_71:
                URLComponents._URLComponents.host.setter(v53, v54);
                return;
              }

              goto LABEL_49;
            }

    swift_bridgeObjectRelease();
    goto LABEL_39;
  }

  outlined retain of String?(v4);
  swift_bridgeObjectRelease();
  int v14 = 0LL;
  unsigned int v17 = 0xE000000000000000LL;
LABEL_40:
  *((void *)v3 + 26) = v14;
  *((void *)v3 + 27) = v17;
  return URLComponents.host.modify;
}

  if (v18 == 1 && v5 && (v5[216] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v17);
    int v16 = String.subscript.getter();
    MEMORY[0x186E1B610](v16);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v17);
    goto LABEL_33;
  }

  Hasher._combine(_:)(0);
}

        if (v10 >= a2) {
          goto LABEL_47;
        }
        *(_BYTE *)(a1 + v10) = 37;
        v20 = specialized StringProtocol.hexToAscii(_:)(v16 >> 4);
        if (v10 + 1 >= a2) {
          goto LABEL_48;
        }
        *(_BYTE *)(a1 + v10 + 1) = v20;
        Swift::UInt v19 = v10 + 2;
        uint64_t v21 = specialized StringProtocol.hexToAscii(_:)(v16 & 0xF);
        if (v10 + 2 < a2)
        {
          int v16 = v21;
          unsigned int v17 = 3LL;
LABEL_10:
          *(_BYTE *)(a1 + v19) = v16;
          v10 += v17;
          if (v30 == v15 >> 14) {
            goto LABEL_42;
          }
          continue;
        }

        __break(1u);
LABEL_42:
        swift_bridgeObjectRelease();
LABEL_43:
        if (v10 >= a2)
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }

        *(_BYTE *)(a1 + v10) = 0;
        return String.init(cString:)();
    }
  }

  objc_msgSend(v8, sel_setDayOfYear_, v5);
  if (v7 != 2) {
    goto LABEL_39;
  }
LABEL_21:
  if ((v33 & 1) == 0) {
LABEL_22:
  }
    __NSDateComponentsSetWeek(v8, v18);
  return (NSDateComponents)v8;
}

  __break(1u);
  return result;
}

    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1LL;
  }

  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

        __break(1u);
        goto LABEL_39;
      }

    id v40 = (v46 - 1) & v46;
    id v41 = __clz(__rbit64(v46)) + (v42 << 6);
    goto LABEL_39;
  }

          if (v54)
          {
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
            goto LABEL_120;
          }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

        uint64_t v69 = objc_msgSend(v31, sel_keyPath);
        v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v72 = v71;

        *(void *)&v95 = v70;
        *((void *)&v95 + 1) = v72;
        v73._countAndFlagsBits = 46LL;
        v73._object = (void *)0xE100000000000000LL;
        String.append(_:)(v73);
        v74._countAndFlagsBits = v41;
        v74._object = v42;
        String.append(_:)(v74);
        uint64_t v75 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v44 = objc_msgSend((id)objc_opt_self(), sel_expressionForKeyPath_, v75);
        goto LABEL_39;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    goto LABEL_38;
  }

  Swift::UInt v25 = (id)AssociatedTypeWitness;
  if (swift_conformsToProtocol2()) {
    id v45 = AssociatedTypeWitness;
  }
  else {
    id v45 = 0LL;
  }
  if (v45)
  {
    static PredicateExpressions.KeyPath.kind<A>(_:collectionType:)((char *)&v95);
    if (v95 != 4) {
      __asm { BR              X10 }
    }
  }

  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
  swift_allocError();
  *id v46 = 0;
  swift_willThrow();

  return v25;
}

  Hasher._combine(_:)(0);
  uint64_t v33 = 0LL;
LABEL_39:

  v38 = v66;
  if (v38)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v38);
    swift_bridgeObjectRelease();
    id v39 = v67;
    if (v67) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    if (v68) {
      goto LABEL_42;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(0);
  id v39 = v67;
  if (!v67) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v39);
  swift_bridgeObjectRelease();
  if (!v68) {
    goto LABEL_45;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v40 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }

  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v41 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }

  if (v71 == 2)
  {
    id v42 = 0;
  }

  else
  {
    id v42 = v71 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v42);
  if (v72 == 2)
  {
    id v43 = 0;
  }

  else
  {
    id v44 = v72 & 1;
    Hasher._combine(_:)(1u);
    id v43 = v44;
  }

  Hasher._combine(_:)(v43);
  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  id v45 = *(void *)v85;
  id v46 = *(void *)&v85[16];
  id v47 = v85[24];
  id v48 = v85[25];
  id v49 = swift_getObjectType();
  id v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 112);
  swift_unknownObjectRetain();
  v50(a1, v49, v45);
  swift_unknownObjectRelease();
  id v51 = swift_getObjectType();
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 120);
  swift_unknownObjectRetain();
  v52(a1, v51, v46);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v47);
  Hasher._combine(_:)(v48);
  return outlined release of Date.FormatStyle((uint64_t)v80);
}

  Hasher._combine(_:)(0);
  uint64_t v31 = 0LL;
LABEL_39:

  v36 = v64;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v36);
    swift_bridgeObjectRelease();
    v37 = v65;
    if (v65) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    if (v66) {
      goto LABEL_42;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(0);
  v37 = v65;
  if (!v65) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v37);
  swift_bridgeObjectRelease();
  if (!v66) {
    goto LABEL_45;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v38 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }

  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v39 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }

  if (v69 == 2)
  {
    id v40 = 0;
  }

  else
  {
    id v40 = v69 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v40);
  if (v70 == 2)
  {
    id v41 = 0;
  }

  else
  {
    id v42 = v70 & 1;
    Hasher._combine(_:)(1u);
    id v41 = v42;
  }

  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?( (uint64_t)v72,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v72,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  id v43 = *(void *)v85;
  id v44 = *(void *)&v85[16];
  id v45 = v85[24];
  id v46 = v85[25];
  id v47 = swift_getObjectType();
  id v48 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v43 + 112);
  swift_unknownObjectRetain();
  v48(v74, v47, v43);
  swift_unknownObjectRelease();
  id v49 = swift_getObjectType();
  id v50 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v44 + 120);
  swift_unknownObjectRetain();
  v50(v74, v49, v44);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v45);
  Hasher._combine(_:)(v46);
  outlined release of Date.FormatStyle((uint64_t)&v79);
  return Hasher._finalize()();
}

    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v22, (const void **)&v21, &v20);
    return 1LL;
  }

  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

      uint64_t v7 = (void *)MEMORY[0x18961AFF0];
    }

  Hasher._combine(_:)(0);
  v36 = 0LL;
LABEL_39:

  id v41 = v60;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v41);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  id v42 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    if (v62) {
      goto LABEL_44;
    }
LABEL_46:
    Hasher._combine(_:)(0);
    goto LABEL_47;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v42);
  swift_bridgeObjectRelease();
  if (!v62) {
    goto LABEL_46;
  }
LABEL_44:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_47:
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v43 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }

  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v44 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v44);
  }

  if (v65 == 2)
  {
    id v45 = 0;
  }

  else
  {
    id v45 = v65 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v45);
  if (v66 == 2)
  {
    id v46 = 0;
  }

  else
  {
    id v47 = v66 & 1;
    Hasher._combine(_:)(1u);
    id v46 = v47;
  }

  Hasher._combine(_:)(v46);
  outlined retain of LocalePreferences?( (uint64_t)v68,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v68,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

  Hasher._combine(_:)(0);
  v34 = 0LL;
LABEL_39:

  id v39 = v58;
  if (v39)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v39);
    swift_bridgeObjectRelease();
    id v40 = v59;
    if (v59) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    if (v60) {
      goto LABEL_42;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(0);
  id v40 = v59;
  if (!v59) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v40);
  swift_bridgeObjectRelease();
  if (!v60) {
    goto LABEL_45;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }

  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v42 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }

  if (v63 == 2)
  {
    id v43 = 0;
  }

  else
  {
    id v43 = v63 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v43);
  if (v64 == 2)
  {
    id v44 = 0;
  }

  else
  {
    id v45 = v64 & 1;
    Hasher._combine(_:)(1u);
    id v44 = v45;
  }

  Hasher._combine(_:)(v44);
  outlined retain of LocalePreferences?( (uint64_t)v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

  URLComponents.init()((uint64_t)&v263);
  v236 = v34;
  a1 = v33;
  if (!v240) {
    goto LABEL_196;
  }
  WORD4(v263) = 0;
  Swift::UInt v55 = specialized Collection.first.getter(1701603686LL, 0xE400000000000000LL);
  if ((v55 & 0x100) != 0) {
    goto LABEL_241;
  }
  v277 = xmmword_1838148C0;
  if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( (char *)&v277,  4LL,  1u,  0)) {
    goto LABEL_241;
  }
  swift_bridgeObjectRelease();
  v265 = xmmword_1838148D0;
  Swift::UInt8 v56 = v274;
  LOBYTE(v258[0]) = v270;
  v277 = v263;
  LOBYTE(v278) = v264;
  v279 = xmmword_1838148D0;
  v280 = v266;
  v281 = v267;
  v282 = v268;
  v283 = v269;
  v284 = v270;
  v285 = v271;
  v286 = v272;
  v287 = v273;
  v288 = v274;
  URLComponents._URLComponents.encodedHost.getter();
  Swift::UInt8 v58 = v57;
  swift_bridgeObjectRelease();
  if (!v58) {
    goto LABEL_193;
  }
  Swift::Int v59 = URLComponents._URLComponents.encodedHost.getter();
  v61 = v59;
  if (!v60)
  {
    BYTE8(v263) = 0;
    BYTE12(v263) = 0;
    v274 = 0;
LABEL_95:
    swift_bridgeObjectRelease();
    v268 = (unint64_t)v61;
    goto LABEL_193;
  }

  uint64_t v62 = (uint64_t (*)(void))v60;
  v63 = HIBYTE(v60) & 0xF;
  uint64_t v64 = v59;
  uint64_t v65 = v59 & 0xFFFFFFFFFFFFLL;
  if ((v60 & 0x2000000000000000LL) != 0) {
    uint64_t v66 = HIBYTE(v60) & 0xF;
  }
  else {
    uint64_t v66 = v59 & 0xFFFFFFFFFFFFLL;
  }
  if (!v66)
  {
    swift_bridgeObjectRelease();
    uint64_t v76 = 0LL;
    uint64_t v68 = 0LL;
    BYTE8(v263) = 0;
    BYTE12(v263) = 0;
    uint64_t v77 = 0xE000000000000000LL;
    v274 = 0;
    goto LABEL_79;
  }

  if ((v56 & 1) == 0)
  {
    if ((v60 & 0x1000000000000000LL) != 0)
    {
      v244 = a9;
      swift_bridgeObjectRetain();
      v233 = 0LL;
    }

    else
    {
      if ((v60 & 0x2000000000000000LL) != 0)
      {
        *(void *)&v259 = v59;
        *((void *)&v259 + 1) = v60 & 0xFFFFFFFFFFFFFFLL;
        *(void *)&v249 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v249 + 1) = 0LL;
        swift_bridgeObjectRetain_n();
        char v80 = &v259;
        char v79 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v249;
        v82 = (unsigned __int8 *)&v259;
        char v81 = v63;
        v83 = v63;
      }

      else
      {
        if ((v59 & 0x1000000000000000LL) != 0)
        {
          char v78 = (v60 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }

        else
        {
          char v78 = _StringObject.sharedUTF8.getter();
          uint64_t v65 = v101;
        }

        *(void *)&v259 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v259 + 1) = 0LL;
        swift_bridgeObjectRetain_n();
        char v79 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v259;
        char v80 = (__int128 *)v78;
        char v81 = v65;
        v82 = (unsigned __int8 *)v78;
        v83 = v65;
      }

      uint64_t v68 = 0LL;
      uint64_t v76 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v80,  v81,  v79,  0,  v82,  v83);
      uint64_t v75 = v84;
      swift_bridgeObjectRelease();
      if (v75 != 1)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_77;
      }

      v233 = 0LL;
      v244 = a9;
    }

    *(void *)&v259 = v64;
    *((void *)&v259 + 1) = v62;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    v85 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v86 = objc_msgSend(v85, sel__fastCharacterContents);
    v87 = v85;
    if (v86)
    {
      v239 = a21;
      *(void *)&v259 = v64;
      *((void *)&v259 + 1) = v62;
      StringProtocol._ephemeralString.getter();
      v88 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v89 = objc_msgSend(v88, sel_length);
      v90 = swift_unknownObjectRelease();
      v91 = MEMORY[0x1895F8858](v90);
      LOBYTE(v231) = 0;
      MEMORY[0x1895F8858](v91);
      v228 = v86;
      v229 = v89;
      uint64_t v76 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v86,  (uint64_t)v89,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  a21,  v92,  a22,  (uint64_t)&v227);
      uint64_t v75 = v93;
      swift_bridgeObjectRelease_n();
      a9 = v244;
      uint64_t v68 = v233;
      goto LABEL_77;
    }

    *(void *)&v259 = v64;
    *((void *)&v259 + 1) = v62;
    v239 = v62;
    swift_bridgeObjectRetain();
    v95 = String.init<A>(_:)();
    v96 = v94;
    a9 = v244;
    if ((v94 & 0x1000000000000000LL) != 0)
    {
      v95 = static String._copying(_:)();
      v103 = v102;
      swift_bridgeObjectRelease();
      v96 = v103;
      uint64_t v68 = v233;
      if ((v103 & 0x2000000000000000LL) == 0) {
        goto LABEL_68;
      }
    }

    else
    {
      uint64_t v68 = v233;
      if ((v94 & 0x2000000000000000LL) == 0)
      {
LABEL_68:
        if ((v95 & 0x1000000000000000LL) == 0) {
          goto LABEL_229;
        }
        v97 = (unsigned __int8 *)((v96 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v98 = v95 & 0xFFFFFFFFFFFFLL;
        goto LABEL_70;
      }
    }

    v98 = HIBYTE(v96) & 0xF;
    *(void *)&v259 = v95;
    *((void *)&v259 + 1) = v96 & 0xFFFFFFFFFFFFFFLL;
    *(void *)&v249 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v249 + 1) = 0LL;
    v97 = (unsigned __int8 *)&v259;
    v99 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v249;
    v100 = (unsigned __int8 *)&v259;
    goto LABEL_75;
  }

  *(void *)&v259 = v59;
  *((void *)&v259 + 1) = v60;
  uint64_t v67 = (void *(*)(__int128 *__return_ptr, void *, uint64_t))MEMORY[0x1895F8858](a20);
  v231 = (uint64_t)&v259;
  v232 = MEMORY[0x18961AFF8];
  uint64_t v68 = 0LL;
  uint64_t v69 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( v67,  (uint64_t)&v230,  v64,  (unint64_t)v62);
  if (v70 == 1)
  {
    v72 = *((void *)&v259 + 1);
    v71 = v259;
    swift_bridgeObjectRetain();
    v73 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v71, v72, MEMORY[0x18961AFF8]);
    uint64_t v75 = v74;
    swift_bridgeObjectRelease();
    uint64_t v76 = (uint64_t)v73;
  }

  else
  {
    uint64_t v76 = (uint64_t)v69;
    uint64_t v75 = v70;
  }

  while (1)
  {
    swift_bridgeObjectRelease();
LABEL_77:
    BYTE8(v263) = 0;
    BYTE12(v263) = 0;
    v274 = 0;
    if (!v75)
    {
      v61 = v76;
      goto LABEL_95;
    }

    uint64_t v77 = v75;
LABEL_79:
    v105 = specialized Collection.first.getter(v76, v77);
    v235 = v76;
    if ((v105 & 0x1FF) != 0x5B) {
      goto LABEL_104;
    }
    if ((v77 & 0x1000000000000000LL) != 0)
    {
      v233 = v68;
      v219 = String.UTF8View._foreignCount()();
      if (__OFSUB__(v219, 1LL)) {
        goto LABEL_238;
      }
      uint64_t v76 = v235;
      v107 = (v235 >> 59) & 1;
      v105 = MEMORY[0x186E1B838](15LL, v219 - 1, v235, v77);
      uint64_t v68 = v233;
    }

    else
    {
      v106 = HIBYTE(v77) & 0xF;
      if ((v77 & 0x2000000000000000LL) == 0) {
        v106 = v76 & 0xFFFFFFFFFFFFLL;
      }
      if (!v106)
      {
        __break(1u);
LABEL_214:
        v105 = _StringGuts._slowEnsureMatchingEncoding(_:)(v105, v76, v77);
        goto LABEL_86;
      }

      v105 = (v106 << 16) - 65532;
      LOBYTE(v107) = 1;
    }

    if ((v105 & 0xC) == 4LL << v107) {
      goto LABEL_214;
    }
LABEL_86:
    v108 = HIBYTE(v77) & 0xF;
    if ((v77 & 0x2000000000000000LL) == 0) {
      v108 = v76 & 0xFFFFFFFFFFFFLL;
    }
    v109 = v105 >> 16;
    if (v105 >> 16 >= v108)
    {
      __break(1u);
      goto LABEL_216;
    }

    if ((v77 & 0x1000000000000000LL) != 0)
    {
      v111 = String.UTF8View._foreignSubscript(position:)();
    }

    else if ((v77 & 0x2000000000000000LL) != 0)
    {
      *(void *)&v259 = v76;
      *((void *)&v259 + 1) = v77 & 0xFFFFFFFFFFFFFFLL;
      v111 = *((_BYTE *)&v260[-1] + v109);
    }

    else
    {
      if ((v76 & 0x1000000000000000LL) != 0) {
        v110 = (v77 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        v110 = _StringObject.sharedUTF8.getter();
      }
      v111 = *(_BYTE *)(v110 + v109);
    }

    if (v111 == 93)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v112 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v76, v77);
      swift_bridgeObjectRelease_n();
      if ((v112 & 1) != 0) {
        goto LABEL_110;
      }
      goto LABEL_100;
    }

        outlined init with take of Any(&v44, &v46);
        break;
    }

      __int128 v11 = v41;
      Swift::Int v8 = v27;
      if (!v41) {
        goto LABEL_4;
      }
      __int128 v10 = v40;
      if ((v40 & 0xF800) == 0xD800) {
        goto LABEL_7;
      }
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
      uint64_t v21 = Locale.Language.components.modify();
      specialized RangeReplaceableCollection.remove(at:)(0LL);
      ((void (*)(uint64_t *, void))v21)(&v39, 0LL);
    }
  }

  __int128 v10 = (unsigned __int16)v9 | (HIWORD(v40) << 16);
  __int128 v11 = 16;
LABEL_7:
  __int128 v12 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v12 & 0x10000) != 0)
  {
    __int128 v13 = v11;
    goto LABEL_14;
  }

  __int128 v10 = ((-65535 << v11) - 1) & v10 | ((unsigned __int16)v12 << v11);
  __int128 v13 = v11 + 16;
  int v14 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v14 & 0x10000) != 0)
  {
LABEL_14:
    if (v13) {
      goto LABEL_15;
    }
LABEL_52:
    swift_bridgeObjectRetain();
    v35 = static String._tryFromUTF8(_:)();
    v37 = v36;
    swift_bridgeObjectRelease_n();
    if (v37) {
      return v35;
    }
    else {
      return 0LL;
    }
  }

  __int128 v10 = ((-65535 << v13) - 1) & v10 | ((unsigned __int16)v14 << v13);
  __int128 v13 = v11 + 32;
  if (v11 >= 0xE0u)
  {
    Swift::UInt v15 = specialized UTF16EndianAdaptor.Iterator.next()();
    if ((v15 & 0x10000) == 0)
    {
      __int128 v10 = ((-65535 << v11) - 1) & v10 | ((unsigned __int16)v15 << v11);
      __int128 v13 = v11 + 48;
      goto LABEL_15;
    }

    goto LABEL_14;
  }

  __break(1u);
  return result;
}

  __src[24] = (int)ucal_getFieldDifference();
  LOBYTE(__src[25]) = 0;
  if ((a2 & 0x10) == 0)
  {
LABEL_25:
    if ((a2 & 0x20) == 0) {
      goto LABEL_26;
    }
    goto LABEL_40;
  }

      __break(1u);
LABEL_39:
      swift_once();
LABEL_18:
      uint64_t v26 = static Locale.Weekday.weekdays;
      if ((unint64_t)v15 > *((void *)static Locale.Weekday.weekdays + 2))
      {
        __break(1u);
        goto LABEL_41;
      }

      Swift::UInt8 v27 = *((_BYTE *)static Locale.Weekday.weekdays + v15 + 31);
      swift_bridgeObjectRetain();
      uint64_t v28 = specialized Collection<>.firstIndex(of:)(v27, (uint64_t)v26);
      Swift::UInt v15 = v29;
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
        uint64_t v30 = v28 + 1;
        if (!__OFADD__(v28, 1LL))
        {
          if (v30 >= (uint64_t)0xFFFFFFFF80000000LL)
          {
            if (v30 <= 0x7FFFFFFF) {
              goto LABEL_7;
            }
            __break(1u);
LABEL_24:
            swift_bridgeObjectRelease();
            goto LABEL_25;
          }

  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_39:
  __int128 v4 = v36;
  __int128 v3 = v37;
  uint64_t v6 = v35;
  *(void *)&v46[0] = v8;
  if (!v5) {
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURL");
  uint64_t v30 = v29;
  *(void *)&id v49 = v5;
  *((void *)&v49 + 1) = v4;
  *(void *)&id v50 = v6;
  *((void *)&v50 + 1) = &type metadata for URL;
  swift_retain();
  uint64_t v31 = v5;
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v49, (uint64_t)v28, v30);
LABEL_41:
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  v32 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v33 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(v32, sel_initWithDomain_code_userInfo_, v33, v3, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return (unint64_t)v34;
}

  uint64_t v7 = MEMORY[0x18961AFF0];
LABEL_39:

  v71 = objc_msgSend(v1, sel_dependentMorphology);
  if (!v71) {
    return v7;
  }
  v72 = v7;
  v191 = v71;
  v73 = [v71 v3[360]];
  if (v5 + 8 != v6)
  {
    swift_unknownObjectRetain();
    v74 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v74) {
      goto LABEL_78;
    }
    v103 = objc_msgSend(v73, sel_count);
    if (!v103) {
      goto LABEL_77;
    }
    v104 = (uint64_t)v103;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    v74 = static _DictionaryStorage.allocate(capacity:)();
    v105 = *(char **)(v74 + 48);
    v106 = *(void *)(v74 + 56);
    swift_retain();
    v107 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v105,  v106,  v73,  v104);
    if (v107 < 0 || v104 < v107) {
      goto LABEL_158;
    }
    *(void *)(v74 + 16) = v107;
    uint64_t v7 = v72;
    if (!v107)
    {
LABEL_76:
      swift_release();
      goto LABEL_78;
    }

    v108 = v107 - 1;
    v109 = v74 + 64;
    while (1)
    {
      while (((*(void *)(v109 + (((unint64_t)v108 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v108) & 1) != 0)
      {
        if (--v108 < 0) {
          goto LABEL_76;
        }
      }

      v110 = (uint64_t *)(*(void *)(v74 + 48) + 16 * v108);
      v111 = *v110;
      v112 = v110[1];
      swift_bridgeObjectRetain();
      v113 = specialized __RawDictionaryStorage.find<A>(_:)(v111, v112);
      v115 = v114;
      swift_bridgeObjectRelease();
      if ((v115 & 1) != 0)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        v116 = *(void *)(v74 + 16);
        v36 = __OFSUB__(v116, 1LL);
        v117 = v116 - 1;
        if (v36) {
          goto LABEL_153;
        }
        *(void *)(v74 + 16) = v117;
        goto LABEL_73;
      }

      *(void *)(v109 + ((v113 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v113;
      if (v108 >= (uint64_t)v113)
      {
        if (v113 == v108) {
          goto LABEL_73;
        }
        v119 = *(void *)(v74 + 48);
        v120 = (uint64_t *)(v119 + 16 * v113);
        v121 = (uint64_t *)(v119 + 16 * v108);
        v122 = *v120;
        v123 = v120[1];
        v124 = v121[1];
        *v120 = *v121;
        v120[1] = v124;
        *v121 = v122;
        v121[1] = v123;
        v125 = *(void *)(v74 + 56);
        v126 = (uint64_t *)(v125 + 16 * v113);
        v127 = (uint64_t *)(v125 + 16 * v108);
        v128 = *v126;
        v129 = v126[1];
        v130 = v127[1];
        *v126 = *v127;
        v126[1] = v130;
        *v127 = v128;
        v127[1] = v129;
        uint64_t v7 = v72;
        if (v108 < 0) {
          goto LABEL_76;
        }
      }

      else
      {
        v118 = 16 * v113;
        *(_OWORD *)(*(void *)(v74 + 48) + v118) = *(_OWORD *)(*(void *)(v74 + 48) + 16 * v108);
        *(_OWORD *)(*(void *)(v74 + 56) + v118) = *(_OWORD *)(*(void *)(v74 + 56) + 16 * v108);
LABEL_73:
        --v108;
        uint64_t v7 = v72;
        if (v108 < 0) {
          goto LABEL_76;
        }
      }
    }
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  v74 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (!v74)
  {
    uint64_t v75 = objc_msgSend(v73, sel_count);
    if (v75)
    {
      uint64_t v76 = (uint64_t)v75;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v74 = static _DictionaryStorage.allocate(capacity:)();
      uint64_t v77 = *(void **)(v74 + 48);
      char v78 = *(void *)(v74 + 56);
      swift_retain();
      char v79 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v77,  v78,  v73,  v76);
      if (v79 < 0 || v76 < v79)
      {
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
        goto LABEL_159;
      }

      *(void *)(v74 + 16) = v79;
      uint64_t v7 = v72;
      if (v79)
      {
        char v80 = v79 - 1;
        char v81 = v74 + 64;
        while (1)
        {
          while (1)
          {
            v82 = (uint64_t *)(*(void *)(v74 + 48) + 16 * v80);
            v83 = *v82;
            v84 = v82[1];
            swift_bridgeObjectRetain();
            v85 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v84);
            v87 = v86;
            swift_bridgeObjectRelease();
            if ((v87 & 1) == 0) {
              break;
            }
            swift_arrayDestroy();
            swift_arrayDestroy();
            v88 = *(void *)(v74 + 16);
            v36 = __OFSUB__(v88, 1LL);
            v89 = v88 - 1;
            if (v36) {
              goto LABEL_152;
            }
            uint64_t v7 = v72;
            *(void *)(v74 + 16) = v89;
LABEL_47:
            if (--v80 < 0) {
              goto LABEL_76;
            }
          }

          *(void *)(v81 + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v85;
          if (v80 >= (uint64_t)v85)
          {
            if (v85 != v80)
            {
              v94 = *(void *)(v74 + 48);
              v95 = (uint64_t *)(v94 + 16 * v85);
              v96 = (uint64_t *)(v94 + 16 * v80);
              v97 = *v95;
              v98 = v95[1];
              v99 = v96[1];
              *v95 = *v96;
              v95[1] = v99;
              *v96 = v97;
              v96[1] = v98;
              v100 = *(void *)(v74 + 56);
              v101 = (_OWORD *)(v100 + 32 * v85);
              v102 = (_OWORD *)(v100 + 32 * v80);
              outlined init with take of Any(v101, v195);
              outlined init with take of Any(v102, v101);
              outlined init with take of Any(v195, v102);
              goto LABEL_57;
            }
          }

          else
          {
            *(_OWORD *)(*(void *)(v74 + 48) + 16 * v85) = *(_OWORD *)(*(void *)(v74 + 48) + 16 * v80);
            v90 = *(void *)(v74 + 56);
            v91 = (_OWORD *)(v90 + 32 * v85);
            v92 = (_OWORD *)(v90 + 32 * v80);
            v93 = v92[1];
            *v91 = *v92;
            v91[1] = v93;
          }

          --v80;
LABEL_57:
          uint64_t v7 = v72;
          if (v80 < 0) {
            goto LABEL_76;
          }
        }
      }

      goto LABEL_76;
    }

          uint64_t v66 = 0LL;
          v83 = 0LL;
          uint64_t v62 = 1;
          goto LABEL_39;
        }

    __break(1u);
LABEL_39:
    __break(1u);
    return result;
  }

  swift_release();
  *(void *)(v25 + 160) = v3;
  swift_retain();
  swift_release();
  v34 = *(void **)(v25 + 16);
  if (!v34[2])
  {
    __break(1u);
LABEL_33:
    v34 = specialized _ArrayBuffer._consumeAndCreateNew()(v34);
    v35 = v34[2];
    if (v35) {
      goto LABEL_23;
    }
    goto LABEL_34;
  }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_33;
  }
  v35 = v34[2];
  if (v35)
  {
LABEL_23:
    v34[2] = v35 - 1;
    *(void *)(v25 + 16) = v34;
    swift_release();
    swift_release();
    return swift_release();
  }

            if (!v7) {
              return v5 == 0;
            }
            __int128 v12 = *v8++;
            uint64_t v6 = v12;
            --v7;
            if (v12 < 0) {
              return 0LL;
            }
            continue;
        }
      }
    }

    return 0LL;
  }

  Swift::Int v5 = 0LL;
  return v5 == 0;
}

  Hasher._combine(_:)(0);
  uint64_t v29 = 0LL;
LABEL_39:

  v34 = v54;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v64, v34);
    swift_bridgeObjectRelease();
    v35 = v55;
    if (v55) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    if (v56) {
      goto LABEL_42;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(0);
  v35 = v55;
  if (!v55) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v64, v35);
  swift_bridgeObjectRelease();
  if (!v56) {
    goto LABEL_45;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v36 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }

  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v59 == 2)
  {
    v38 = 0;
  }

  else
  {
    v38 = v59 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v38);
  if (v60 == 2)
  {
    id v39 = 0;
  }

  else
  {
    id v40 = v60 & 1;
    Hasher._combine(_:)(1u);
    id v39 = v40;
  }

  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?( (uint64_t)v62,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v62,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

          uint64_t v26 = (4 * *((_BYTE *)v5 + 18) + 8) & 0x3C;
          int v22 = ((-15LL << v26) - 1) & v22 | (v15 << v26);
          Swift::UInt64 v24 = v5[3 * v15 + 3];
          swift_unknownObjectRetain();
          result = (void *)swift_unknownObjectRelease();
          Swift::Int v5 = (uint64_t *)v24;
          if (!*(_BYTE *)(v24 + 18)) {
            goto LABEL_66;
          }
        }
      }

      result = (void *)swift_unknownObjectRetain_n();
      int v22 = 0LL;
      Swift::UInt64 v24 = v9;
LABEL_66:
      uint64_t v33 = *(unsigned __int16 *)(v24 + 16);
      if (!*(_WORD *)(v24 + 16)) {
        goto LABEL_77;
      }
      v34 = *(void *)(v24 + 24);
      unsigned int v17 = __OFSUB__(v4, v34);
      v35 = v4 - v34;
      if (v17) {
        goto LABEL_358;
      }
      if (__OFADD__(v35, 1LL)) {
        goto LABEL_359;
      }
      if (v35 + 1 <= 0)
      {
        uint64_t v33 = 0LL;
      }

      else
      {
        if ((_DWORD)v33 == 1)
        {
LABEL_71:
          __int128 v4 = v35;
          goto LABEL_77;
        }

        v36 = *(void *)(v24 + 48);
        __int128 v4 = v35 - v36;
        if (__OFSUB__(v35, v36)) {
          goto LABEL_370;
        }
        if (__OFADD__(v4, 1LL)) {
          goto LABEL_371;
        }
        if (v4 + 1 < 1)
        {
          uint64_t v33 = 1LL;
          __int128 v4 = v35;
        }

        else
        {
          if ((_DWORD)v33 == 2)
          {
LABEL_77:
            if (v4) {
              goto LABEL_357;
            }
            goto LABEL_78;
          }

          v87 = *(void *)(v24 + 72);
          unsigned int v17 = __OFSUB__(v4, v87);
          v35 = v4 - v87;
          if (v17) {
            goto LABEL_382;
          }
          if (__OFADD__(v35, 1LL)) {
            goto LABEL_383;
          }
          if (v35 + 1 < 1)
          {
            uint64_t v33 = 2LL;
          }

          else
          {
            if ((_DWORD)v33 == 3) {
              goto LABEL_71;
            }
            v88 = 3LL;
            if (v33 > 3) {
              v88 = *(unsigned __int16 *)(v24 + 16);
            }
            v89 = (void *)(v24 + 96);
            v90 = 3LL;
            while (1)
            {
              if (v88 == v90) {
                goto LABEL_364;
              }
              __int128 v4 = v35 - *v89;
              if (__OFSUB__(v35, *v89)) {
                goto LABEL_365;
              }
              if (__OFADD__(v4, 1LL)) {
                goto LABEL_366;
              }
              if (v4 + 1 < 1) {
                break;
              }
              ++v90;
              v89 += 3;
              v35 = v4;
              if (v33 == v90) {
                goto LABEL_77;
              }
            }

            uint64_t v33 = v90;
            __int128 v4 = v35;
          }
        }
      }

    swift_unknownObjectRetain();
    v174 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v179, v180, v178, v14, v19);
    result = swift_unknownObjectRelease_n();
LABEL_66:
    v169 = v18 - v21;
    if (__OFSUB__(v18, v21))
    {
LABEL_200:
      __break(1u);
      goto LABEL_201;
    }

    if (v179 != *(void *)(v13 + 88))
    {
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
      goto LABEL_204;
    }

    if (v178)
    {
      id v40 = v178 + 24 * ((v180 >> ((4 * *(_BYTE *)(v178 + 18) + 8) & 0x3C)) & 0xF);
      id v42 = *(void *)(v40 + 32);
      id v41 = *(void *)(v40 + 40);
      swift_bridgeObjectRetain();
      v157 = v41;
      result = swift_bridgeObjectRetain();
    }

    else
    {
      id v43 = *(void *)(v13 + 64);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v180, v43);
      id v42 = v44;
      v157 = v45;
      result = swift_unknownObjectRelease();
    }

    id v46 = v177;
    if (*((uint64_t *)&v217[0] + 1) < v174)
    {
      v155 = v17;
      v156 = v13;
      v172 = &v193;
      v173 = v42;
      v181 = (__int128 *)&v212;
      v152 = (uint64_t *)(v7 + 40);
      v153 = v7;
      v150 = *((void *)&v217[0] + 1);
LABEL_73:
      id v47 = *(void *)(v13 + 64);
      id v48 = *(void *)(v13 + 88);
      id v49 = v180;
      v189 = v179;
      v190 = v180;
      id v50 = v178;
      v191 = v178;
      if (v179 == v48)
      {
        if (v47)
        {
          id v51 = *(unsigned __int8 *)(v47 + 18);
          result = swift_unknownObjectRetain();
          id v49 = v180;
          id v50 = v178;
          if (v180 <= v51) {
            goto LABEL_205;
          }
LABEL_78:
          if (v50)
          {
            uint64_t v52 = (4 * *(_BYTE *)(v50 + 18) + 8) & 0x3C;
            if (((v49 >> v52) & 0xF) != 0)
            {
              uint64_t v53 = ((((v49 >> v52) & 0xF) - 1) << v52) | ((-15LL << v52) - 1) & v49;
              v190 = v53;
LABEL_85:
              Swift::UInt8 v58 = (4 * *(_BYTE *)(v50 + 18) + 8) & 0x3C;
              v180 = v53;
              v178 = v50;
              Swift::Int v59 = *(void *)(v50 + 24 * ((v53 >> v58) & 0xF) + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v60 = 0;
LABEL_89:
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              if (__OFSUB__(v169, v59))
              {
LABEL_206:
                __break(1u);
                goto LABEL_207;
              }

              if (v179 != *(void *)(v13 + 88))
              {
LABEL_207:
                __break(1u);
LABEL_208:
                __break(1u);
LABEL_209:
                __break(1u);
LABEL_210:
                __break(1u);
LABEL_211:
                __break(1u);
LABEL_212:
                __break(1u);
                goto LABEL_213;
              }

              v151 = v169 - v59;
              if ((v60 & 1) != 0)
              {
                v61 = *(void *)(v13 + 64);
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v180, v61);
                v154 = v62;
                uint64_t v64 = v63;
                swift_unknownObjectRelease();
              }

              else
              {
                uint64_t v65 = v178 + 24 * ((v180 >> ((4 * *(_BYTE *)(v178 + 18) + 8) & 0x3C)) & 0xF);
                uint64_t v64 = *(void *)(v65 + 32);
                uint64_t v66 = *(void *)(v65 + 40);
                swift_bridgeObjectRetain();
                v154 = v66;
                swift_bridgeObjectRetain();
              }

              uint64_t v68 = (uint64_t)v172;
              uint64_t v67 = v173;
              --v174;
              result = swift_bridgeObjectRetain();
              uint64_t v69 = 0LL;
              v70 = v152;
              v182 = v64;
              while (1)
              {
                v72 = v69 + 1;
                if (__OFADD__(v69, 1LL))
                {
                  __break(1u);
                  goto LABEL_188;
                }

                v74 = *(v70 - 1);
                v73 = *v70;
                if (*(void *)(v67 + 16))
                {
                  swift_bridgeObjectRetain_n();
                  uint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v73);
                  if ((v76 & 1) != 0)
                  {
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v67 + 56) + 72 * v75,  (uint64_t)&v200);
                  }

                  else
                  {
                    v204 = 0LL;
                    v202 = 0u;
                    v203 = 0u;
                    v200 = 0u;
                    v201 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  uint64_t v64 = v182;
                  if (!*(void *)(v182 + 16))
                  {
LABEL_104:
                    v199 = 0LL;
                    v197 = 0u;
                    v198 = 0u;
                    v195 = 0u;
                    v196 = 0u;
                    goto LABEL_111;
                  }
                }

                else
                {
                  v204 = 0LL;
                  v202 = 0u;
                  v203 = 0u;
                  v200 = 0u;
                  v201 = 0u;
                  swift_bridgeObjectRetain();
                  if (!*(void *)(v64 + 16)) {
                    goto LABEL_104;
                  }
                }

                swift_bridgeObjectRetain();
                uint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v73);
                if ((v78 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue( *(void *)(v64 + 56) + 72 * v77,  (uint64_t)&v195);
                }

                else
                {
                  v199 = 0LL;
                  v197 = 0u;
                  v198 = 0u;
                  v195 = 0u;
                  v196 = 0u;
                }

                swift_bridgeObjectRelease();
LABEL_111:
                swift_bridgeObjectRelease();
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v200,  (uint64_t)&v189,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v195,  v68,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v192)
                {
                  if (v194) {
                    goto LABEL_128;
                  }
                  outlined destroy of Any?( (uint64_t)&v189,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?( (uint64_t)&v195,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  result = outlined destroy of Any?( (uint64_t)&v200,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_98;
                }

                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v189,  (uint64_t)v188,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v194)
                {
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v188);
LABEL_128:
                  outlined destroy of Any?( (uint64_t)&v189,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?( (uint64_t)&v195,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?( (uint64_t)&v200,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_129:
                  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v216);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  __int128 v13 = v156;
LABEL_130:
                  unsigned int v17 = v155;
                  goto LABEL_131;
                }

                char v79 = *(_OWORD *)(v68 + 48);
                v185 = *(_OWORD *)(v68 + 32);
                v186 = v79;
                v187 = *(void *)(v68 + 64);
                char v80 = *(_OWORD *)(v68 + 16);
                v183 = *(_OWORD *)v68;
                v184 = v80;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v188,  (uint64_t)v223);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v183,  (uint64_t)v214);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)v223,  (uint64_t)&v210,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)v214,  (uint64_t)v181,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (v211)
                {
                  if (!v213)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v210);
LABEL_96:
                    v71 = 0;
                    goto LABEL_97;
                  }

                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v210, (uint64_t)v207);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v181, (uint64_t)v206);
                  char v81 = v208;
                  v171 = v209;
                  v170 = __swift_project_boxed_opaque_existential_1(v207, v208);
                  v176 = &v149;
                  v82 = *(void *)(v81 - 8);
                  MEMORY[0x1895F8858](v170);
                  v84 = (char *)&v149 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v206,  (uint64_t)v205);
                  v85 = type metadata accessor for Optional();
                  v175 = &v149;
                  v86 = *(void *)(v85 - 8);
                  MEMORY[0x1895F8858](v85);
                  v88 = (char *)&v149 - v87;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  v89 = swift_dynamicCast();
                  v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56);
                  if (v89)
                  {
                    v90(v88, 0LL, 1LL, v81);
                    (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v84, v88, v81);
                    v71 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
                  }

                  else
                  {
                    v90(v88, 1LL, 1LL, v81);
                    (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v85);
                    v71 = 0;
                  }

                  id v46 = v177;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v206);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v207);
                  uint64_t v68 = (uint64_t)v172;
                  uint64_t v67 = v173;
                }

                else
                {
                  if (v213)
                  {
                    outlined destroy of Any?( (uint64_t)v181,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_96;
                  }

                  v71 = 1;
                }

  id v46 = v42 + 40;
  while (1)
  {
    id v47 = *(unsigned __int8 *)(v46 + 27);
    id v48 = *(_BYTE *)(v46 + 24) != 3 || v47 == 2;
    if (!v48 && (v47 & 1) == 0) {
      break;
    }
    v46 += 64LL;
    if (!--v43) {
      goto LABEL_47;
    }
  }

  v102 = *(void *)(v46 - 8);
  uint64_t v52 = v21;
  uint64_t v53 = *(void *)v46;
  swift_bridgeObjectRetain();
  v118 = v53;
  uint64_t v21 = v52;
  swift_bridgeObjectRetain();
  uint64_t v31 = v113;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14 >= 4) {
    goto LABEL_51;
  }
LABEL_48:
  id v50 = MEMORY[0x18961AFE8];
  id v51 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
  if (v51) {
    goto LABEL_52;
  }
LABEL_55:
  swift_bridgeObjectRelease();
  v114 = 0LL;
  Swift::UInt v55 = 0LL;
  if (v130)
  {
LABEL_58:
    if (v121 && v120 && v118 && v55)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a1 = v107;
      a1[1] = v108;
      a1[2] = v5;
      a1[3] = v115;
      a1[4] = v116;
      a1[5] = v31;
      a1[6] = v110;
      a1[7] = v15;
      a1[8] = v111;
      a1[9] = v24;
      a1[10] = v21;
      a1[11] = v25;
      a1[12] = v14;
      return outlined copy of TermOfAddress._TermOfAddress( v107,  v108,  v5,  v115,  v116,  v31,  v110,  v15,  v111,  v24,  v21,  v25,  v14);
    }
  }

  Hasher._combine(_:)(0);
  v32 = 0LL;
LABEL_39:

  v37 = v57;
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v67, v37);
    swift_bridgeObjectRelease();
    v38 = v58;
    if (v58) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    if (v59) {
      goto LABEL_42;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(0);
  v38 = v58;
  if (!v58) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v67, v38);
  swift_bridgeObjectRelease();
  if (!v59) {
    goto LABEL_45;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v39 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }

  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v40 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }

  if (v62 == 2)
  {
    id v41 = 0;
  }

  else
  {
    id v41 = v62 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v41);
  if (v63 == 2)
  {
    id v42 = 0;
  }

  else
  {
    id v43 = v63 & 1;
    Hasher._combine(_:)(1u);
    id v42 = v43;
  }

  Hasher._combine(_:)(v42);
  outlined retain of LocalePreferences?( (uint64_t)v65,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v65,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

  if (_NSInflectionLog_onceToken != -1) {
    dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
  }
  uint64_t v21 = (os_log_s *)_NSInflectionLog_log;
  if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_DEBUG))
  {
    v252.location = a3;
    v252.length = a4;
    id v51 = NSStringFromRange(v252);
    uint64_t v52 = *(void *)(a1 + 128);
    *(_DWORD *)buf = 138543618;
    *(void *)&buf[4] = v51;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v52;
    _os_log_debug_impl( &dword_182EB1000,  v21,  OS_LOG_TYPE_DEBUG,  "Range %{public}@ of string with length %lld has a format specifier or external dependency; not inflecting during preflight.",
      buf,
      0x16u);
  }

  int v22 = *(void **)(a1 + 40);
  if (v22)
  {
    Swift::UInt v23 = (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
    objc_msgSend( v22,  "didSkipInflectableRangeWithUnfilledFormatSpecifiers:sourceSubstring:inflectionRule:alternative:",  a3,  a4,  v23,  a2,  (*(uint64_t (**)(void))(*(void *)(a1 + 88) + 16))());
  }

  objc_msgSend( *(id *)(a1 + 48),  "addObject:",  +[NSValue valueWithRange:](NSValue, "valueWithRange:", a3, a4));
}

    if (a4) {
      *(CFRange *)a4 = rangep;
    }
    uint64_t v33 = [(id)a1 minimum];
    v34 = v67;
    if (v33 && (v35 = v33, -[__CFNumberFormatter compare:](v24, "compare:", v33) == -1))
    {
      if (!v67) {
        goto LABEL_92;
      }
      v37 = (void *)MEMORY[0x189603F68];
      v38 = NSMinimumValidValueErrorKey;
    }

    else
    {
      v36 = [(id)a1 maximum];
      if (!v36 || (v35 = v36, -[__CFNumberFormatter compare:](v24, "compare:", v36) != 1))
      {
        if (a2)
        {
          if ([(id)a1 generatesDecimalNumbers])
          {
            if (v24)
            {
              -[__CFNumberFormatter decimalValue](v24, "decimalValue");
            }

            else
            {
              memset(chars, 0, sizeof(chars));
              v72 = 0;
            }

            uint64_t v69 = *(_OWORD *)chars;
            v70 = v72;
            *a2 = +[NSDecimalNumber decimalNumberWithDecimal:]( &OBJC_CLASS___NSDecimalNumber,  "decimalNumberWithDecimal:",  &v69);
          }

          else
          {
            *a2 = v24;
          }
        }

        id v47 = 1LL;
        goto LABEL_93;
      }

      if (!v67) {
        goto LABEL_92;
      }
      v37 = (void *)MEMORY[0x189603F68];
      v38 = NSMaximumValidValueErrorKey;
    }

    id v50 = objc_msgSend(v37, "dictionaryWithObjectsAndKeys:", v35, *v38, v24, @"NSInvalidValue", 0);
LABEL_91:
    id v47 = 0LL;
    void *v34 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  2048LL,  v50);
LABEL_93:
    [*(id *)(a1 + *(int *)(v12 + 1672)) unlock];
    return v47;
  }

  if (a2)
  {
    if ([(id)a1 generatesDecimalNumbers])
    {
      __int128 v13 = +[NSDecimalNumber maximumDecimalNumber](&OBJC_CLASS___NSDecimalNumber, "maximumDecimalNumber");
      goto LABEL_68;
    }

    v20 = (NSDecimalNumber **)MEMORY[0x189605160];
LABEL_67:
    __int128 v13 = *v20;
    goto LABEL_68;
  }

    LOBYTE(v10) = 1;
    return v10;
  }

  if (modifier != 1)
  {
    int v18 = (void *)MEMORY[0x189603F70];
    Swift::UInt v19 = *MEMORY[0x189603A58];
    v20 = @"Bad comparison predicate modifier";
LABEL_42:
    objc_exception_throw((id)[v18 exceptionWithName:v19 reason:v20 userInfo:0]);
    -[NSPredicateOperator acceptVisitor:flags:](v21, v22, v23, v24);
    return v10;
  }

  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  uint64_t v33 = 0u;
  __int128 v11 = [a3 countByEnumeratingWithState:&v32 objects:v31 count:16];
  if (!v11) {
    goto LABEL_38;
  }
  __int128 v12 = v11;
  __int128 v13 = *(void *)v33;
LABEL_22:
  int v14 = 0LL;
  while (1)
  {
    if (*(void *)v33 != v13) {
      objc_enumerationMutation(a3);
    }
    LODWORD(v10) = -[NSPredicateOperator performPrimitiveOperationUsingObject:andObject:]( self,  "performPrimitiveOperationUsingObject:andObject:",  *(void *)(*((void *)&v32 + 1) + 8 * v14),  a4);
    if (!(_DWORD)v10) {
      return v10;
    }
    if (v12 == ++v14)
    {
      __int128 v12 = [a3 countByEnumeratingWithState:&v32 objects:v31 count:16];
      LOBYTE(v10) = 1;
      if (v12) {
        goto LABEL_22;
      }
      return v10;
    }
  }

  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

      *a3 = v8;
      return 1;
    }

    if (v9 == *MEMORY[0x189603B18])
    {
      __int128 v11 = 2560;
      goto LABEL_25;
    }

    if (v9 == *MEMORY[0x189603B20])
    {
      __int128 v11 = 2561;
      goto LABEL_25;
    }
  }

  if (!CFStringGetCString( (CFStringRef)-[NSLocale localeIdentifier](self->_locale, "localeIdentifier"),  buffer,  257LL,  0x600u)) {
    return 0;
  }
  __int128 v12 = (void *)[(id)objc_opt_class() icuType];
  if (![v12 length]
    || (__int128 v13 = v19, ([v12 getCString:v19 maxLength:100 encoding:4] & 1) == 0))
  {
    __int128 v13 = 0LL;
  }

  if (((unint64_t)(v8 - 4609) > 8 || ((1LL << (v8 - 1)) & 0x103) == 0)
    && (v8 & 0xFFFFFFFFFFFFFFFCLL) != 0xD00
    && (unint64_t)(v8 - 1024) >= 0xA
    && (unint64_t)(v8 - 3072) >= 6
    && (unint64_t)(v8 - 1280) >= 0x13
    && (unint64_t)(v8 - 1536) >= 0xB
    && ((unint64_t)(v8 - 2048) >= 0xA || ((0x2DFu >> v8) & 1) == 0)
    && (v8 & 0xFFFFFFFFFFFFFFFCLL) != 0x900
    && (unint64_t)(v8 - 2560) >= 3
    && ((unint64_t)(v8 - 2816) >= 0x19 || ((0x17FFFBFu >> v8) & 1) == 0)
    || !v13)
  {
    goto LABEL_38;
  }

  UnitsForUsage = uameasfmt_getUnitsForUsage();
  Swift::UInt v15 = UnitsForUsage;
  if (UnitsForUsage < 1)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v18 = u_errorName(U_ZERO_ERROR);
      _os_log_impl( &dword_182EB1000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "*** uameasfmt_getUnitsForUsage() failed in NSUnitFormatter: %s",  buf,  0xCu);
    }

    a3[v15++] = v8;
  }

  else
  {
    memcpy(a3, __src, 4LL * UnitsForUsage);
  }

  return v15;
}

    uint64_t v33 = _NSMethodExceptionProem((objc_class *)v10, a2);
    v34 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: Argument '%ld' of selector '%s' does not exist.", v33, v6, sel_getName(Name)), 0 reason userInfo];
    objc_exception_throw(v34);
    goto LABEL_43;
  }

  int v18 = (id)*v15;
  if (!*v15)
  {
    v35 = _NSMethodExceptionProem((objc_class *)v10, a2);
    v36 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: No reply block signature has been set for selector %s", v35, sel_getName(Name)), 0 reason userInfo];
    objc_exception_throw(v36);
    goto LABEL_43;
  }

  if ((unint64_t)[(id)*v15 numberOfArguments] < 2
    || (unint64_t)&v6->isa + 1 >= [v18 numberOfArguments])
  {
    goto LABEL_38;
  }

  Swift::UInt v19 = (_WORD *)objc_msgSend(v18, "_argInfo:");
  v20 = v19[17];
  if ((v20 & 0x80) != 0) {
    v20 = *(_WORD *)(*(void *)v19 + 34LL);
  }
  if ((v20 & 0x2000) == 0)
  {
LABEL_42:
    id v40 = _NSMethodExceptionProem((objc_class *)v10, a2);
    id v41 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: Argument '%ld' of selector '%s' is not an object.", v40, v6, sel_getName(Name)), 0 reason userInfo];
    objc_exception_throw(v41);
    goto LABEL_43;
  }

      if (v28 && v27)
      {
        uint64_t v31 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  [(id)_NSFoundationBundle() localizedStringForKey:@"%@ of %@" value:&stru_189CA6A28 table:@"Progress"],  v28,  v27);
        if (v31) {
          goto LABEL_41;
        }
        goto LABEL_49;
      }

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  int v5 = a3;
  Hasher.init(_seed:)();
  if (v5)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of _XMLPlistEncodingFormat.Reference(a1, a2, 0);
    Swift::Int v6 = Hasher._finalize()();
    return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, 0, v6);
  }

  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  Swift::Int v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, int a3)
{
  Swift::Int v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    __int128 v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        __int128 v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v4 = -1LL << *(_BYTE *)(v3 + 32);
  uint64_t v5 = a3 & ~v4;
  if (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    Swift::Int v8 = ~v4;
    do
    {
      uint64_t v9 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v5);
      __int128 v10 = *v9;
      BOOL v11 = v9[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((specialized static Dictionary<>.== infix(_:_:)(v10, a1) & 1) != 0)
      {
        uint64_t v12 = specialized static Set.== infix(_:_:)(v11, a2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v12 & 1) != 0) {
          return v5;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      uint64_t v5 = (v5 + 1) & v8;
    }

    while (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0);
  }

  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = *(void *)&aSun_1[8 * a1];
    while (*(void *)&aSun_1[8 * *(char *)(*(void *)(v2 + 48) + v4)] != v6)
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease_n();
      if ((v7 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0) {
          continue;
        }
      }

      return v4;
    }

    swift_bridgeObjectRelease_n();
  }

  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
      }
    }
  }

  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x186E1C264](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    char v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    char v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  char v12;
  uint64_t v14;
  _BYTE v15[352];
  _BYTE v16[352];
  uint64_t __dst[50];
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    char v7 = *(unsigned __int8 *)(a1 + 352);
    uint64_t v8 = *(void *)(a1 + 360);
    uint64_t v9 = *(void *)(a1 + 368);
    __int128 v10 = *(void *)(a1 + 376);
    BOOL v14 = *(void *)(a1 + 384);
    do
    {
      BOOL v11 = (const void *)(*(void *)(v2 + 48) + 392 * v4);
      memcpy(__dst, v11, 0x188uLL);
      memcpy(v16, v11, sizeof(v16));
      memcpy(v15, (const void *)a1, sizeof(v15));
      outlined retain of ICUDateIntervalFormatter.Signature(__dst);
      if (specialized static Locale.Components.== infix(_:_:)((uint64_t)v16, (uint64_t)v15)
        && LOBYTE(__dst[44]) == v7
        && (__dst[45] == v8 && __dst[46] == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (__dst[47] == v10 && __dst[48] == v14)
        {
          outlined release of ICUDateIntervalFormatter.Signature(__dst);
          return v4;
        }

        uint64_t v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined release of ICUDateIntervalFormatter.Signature(__dst);
        if ((v12 & 1) != 0) {
          return v4;
        }
      }

      else
      {
        outlined release of ICUDateIntervalFormatter.Signature(__dst);
      }

      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v5 = type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v2 + 32);
  __int128 v10 = a2 & ~v9;
  if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    BOOL v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    while (1)
    {
      outlined init with copy of ICUNumberFormatter.Signature( *(void *)(v2 + 48) + v12 * v10,  (uint64_t)v8,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)((uint64_t)v8, a1);
      if ((v13 & 1) != 0)
      {
        BOOL v14 = *(int *)(v5 + 20);
        Swift::UInt v15 = *(void *)&v8[v14];
        int v16 = *(void *)&v8[v14 + 8];
        unsigned int v17 = (void *)(a1 + v14);
        int v18 = v15 == *v17 && v16 == v17[1];
        if ((v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && v8[*(int *)(v5 + 24)] == *(_BYTE *)(a1 + *(int *)(v5 + 24)))
        {
          break;
        }
      }

      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v8,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      __int128 v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        return v10;
      }
    }

    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v8,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  }

  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;
  uint64_t v3 = v2 + 64;
  unint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    type metadata accessor for NSString();
    uint64_t v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        uint64_t v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        __int128 v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  char v15;
  void v17[2];
  uint64_t v3 = v2;
  v17[1] = a1;
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  char v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v10 = -1LL << *(_BYTE *)(v3 + 32);
  BOOL v11 = a2 & ~v10;
  if (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
  {
    uint64_t v12 = ~v10;
    __int128 v13 = *(void *)(v6 + 72);
    BOOL v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v14(v9, *(void *)(v3 + 48) + v13 * v11, v5, v7);
      Swift::UInt v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      BOOL v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  return v11;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  char v15;
  void v17[2];
  uint64_t v3 = v2;
  v17[1] = a1;
  uint64_t v5 = type metadata accessor for CombineIdentifier();
  uint64_t v6 = *(void *)(v5 - 8);
  char v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v10 = -1LL << *(_BYTE *)(v3 + 32);
  BOOL v11 = a2 & ~v10;
  if (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
  {
    uint64_t v12 = ~v10;
    __int128 v13 = *(void *)(v6 + 72);
    BOOL v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v14(v9, *(void *)(v3 + 48) + v13 * v11, v5, v7);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier,  (uint64_t (*)(uint64_t))MEMORY[0x1896021B0],  MEMORY[0x1896021C8]);
      Swift::UInt v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      BOOL v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  return v11;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unint64_t *a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  uint64_t v83 = v2 + 64;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) == 0) {
    return v4;
  }
  uint64_t v5 = v2;
  uint64_t v6 = ~v3;
  unint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  outlined init with take of LocalePreferences?( (uint64_t)(a1 + 2),  (uint64_t)v111,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  while (1)
  {
    uint64_t v9 = (__int128 *)(*(void *)(v5 + 48) + 160 * v4);
    __int128 v10 = v9[1];
    __int128 v108 = *v9;
    v109[0] = v10;
    __int128 v11 = v9[4];
    __int128 v13 = v9[2];
    __int128 v12 = v9[3];
    v109[4] = v9[5];
    v109[3] = v11;
    v109[1] = v13;
    v109[2] = v12;
    __int128 v15 = v9[7];
    __int128 v14 = v9[8];
    __int128 v16 = v9[6];
    *(_OWORD *)((char *)v110 + 12) = *(__int128 *)((char *)v9 + 140);
    v110[0] = v14;
    v109[5] = v16;
    v109[6] = v15;
    if (v108 != __PAIR128__(v8, v7) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)v107,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v107) == 1)
    {
      outlined init with take of LocalePreferences?( (uint64_t)v111,  (uint64_t)v105,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
      goto LABEL_4;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)&v97,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v111,  (uint64_t)v105,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v105) == 1)
    {
      __int128 v95 = v103;
      *(_OWORD *)v96 = *(_OWORD *)v104;
      *(_OWORD *)&v96[12] = *(_OWORD *)&v104[12];
      __int128 v91 = v99;
      __int128 v92 = v100;
      __int128 v93 = v101;
      __int128 v94 = v102;
      __int128 v89 = v97;
      __int128 v90 = v98;
      outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
      outlined release of LocalePreferences(&v89);
LABEL_4:
      outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)v105,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?( (uint64_t)v111,  (uint64_t)&v106,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v111,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v105);
      outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
      goto LABEL_5;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v111,  (uint64_t)&v89,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v17 = v97;
    uint64_t v18 = *((void *)&v97 + 1);
    unint64_t v82 = *((void *)&v98 + 1);
    unint64_t v80 = v98;
    unint64_t v81 = *((void *)&v99 + 1);
    unint64_t v78 = v99;
    uint64_t v79 = v100;
    uint64_t v76 = (void *)v101;
    uint64_t v77 = *((void *)&v100 + 1);
    v74 = (void *)v102;
    uint64_t v75 = (void *)*((void *)&v101 + 1);
    v72 = (void *)v103;
    v73 = (void *)*((void *)&v102 + 1);
    uint64_t v70 = *(void *)v104;
    uint64_t v71 = *((void *)&v103 + 1);
    unint64_t v67 = *(void *)&v104[8];
    unint64_t v69 = *(void *)&v104[16];
    int v68 = v104[24];
    int v65 = v104[26];
    int v66 = v104[25];
    int v64 = v104[27];
    if (v97 == 2)
    {
    }

    else if (v89 == 2 || ((((v97 & 1) == 0) ^ v89) & 1) == 0)
    {
LABEL_50:
      uint64_t v33 = v18;
LABEL_51:
      outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
      outlined retain of LocalePreferences?( (uint64_t)v111,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      uint64_t v31 = v33;
LABEL_52:
      LOBYTE(v32) = 0;
      goto LABEL_53;
    }

    uint64_t v19 = *((void *)&v89 + 1);
    if (!*((void *)&v97 + 1))
    {
      uint64_t v61 = v6;
      if (*((void *)&v89 + 1))
      {
        uint64_t v31 = *((void *)&v97 + 1);
        outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
        outlined retain of LocalePreferences?( (uint64_t)v111,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
LABEL_36:
        LOBYTE(v32) = 0;
        uint64_t v6 = v61;
        goto LABEL_53;
      }

      goto LABEL_37;
    }

    if (!*((void *)&v89 + 1)) {
      goto LABEL_50;
    }
    uint64_t v20 = *(void *)(*((void *)&v97 + 1) + 16LL);
    if (v20 != *(void *)(*((void *)&v89 + 1) + 16LL))
    {
      uint64_t v31 = *((void *)&v97 + 1);
      outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
      outlined retain of LocalePreferences?( (uint64_t)v111,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      goto LABEL_52;
    }

    uint64_t v61 = v6;
    if (v20 && *((void *)&v97 + 1) != *((void *)&v89 + 1))
    {
      uint64_t result = *(void *)(*((void *)&v97 + 1) + 32LL);
      if (*(_OWORD *)(*((void *)&v97 + 1) + 32LL) != *(_OWORD *)(*((void *)&v89 + 1) + 32LL))
      {
        uint64_t v22 = *((void *)&v97 + 1);
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v18 = v22;
        if ((result & 1) == 0)
        {
          outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
          outlined retain of LocalePreferences?( (uint64_t)v111,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          uint64_t v31 = v22;
          goto LABEL_36;
        }
      }

      uint64_t v23 = v20 - 1;
      if (v20 != 1) {
        break;
      }
    }

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v32;
  char v33;
  id v34;
  char v35;
  id v36;
  char v37;
  id v38;
  char v39;
  id v40;
  id v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  int v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  int v62;
  int v63;
  int v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void v81[15];
  __int128 v82;
  char v83;
  char v84;
  char v85;
  char v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[28];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[28];
  _BYTE v103[144];
  uint64_t v104;
  _BYTE v105[45];
  __int128 v106;
  __int128 v107;
  _OWORD v108[7];
  _OWORD v109[2];
  _BYTE v110[152];
  uint64_t v3 = v2 + 64;
  unint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) == 0) {
    return v5;
  }
  uint64_t v6 = v2;
  unint64_t v7 = ~v4;
  unint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  __int128 v10 = a1[2];
  __int128 v11 = a1[3];
  outlined init with take of LocalePreferences?( (uint64_t)(a1 + 4),  (uint64_t)v110,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  unint64_t v80 = v10;
  id v58 = v11;
  id v59 = v7;
  while (1)
  {
    __int128 v12 = (__int128 *)(*(void *)(v6 + 48) + 176 * v5);
    __int128 v14 = v12[1];
    __int128 v13 = v12[2];
    uint64_t v106 = *v12;
    v107 = v14;
    v108[0] = v13;
    __int128 v15 = v12[5];
    uint64_t v17 = v12[3];
    __int128 v16 = v12[4];
    v108[4] = v12[6];
    v108[3] = v15;
    v108[1] = v17;
    v108[2] = v16;
    uint64_t v19 = v12[8];
    uint64_t v18 = v12[9];
    uint64_t v20 = v12[7];
    *(_OWORD *)((char *)v109 + 12) = *(__int128 *)((char *)v12 + 156);
    v109[0] = v18;
    v108[5] = v20;
    v108[6] = v19;
    if (v106 != __PAIR128__(v9, v8) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || v107 != __PAIR128__(v11, v10) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_5;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v108,  (uint64_t)v105,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v105) == 1)
    {
      outlined init with take of LocalePreferences?( (uint64_t)v110,  (uint64_t)v103,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
      goto LABEL_4;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v108,  (uint64_t)&v95,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v110,  (uint64_t)v103,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v103) == 1)
    {
      __int128 v93 = v101;
      *(_OWORD *)__int128 v94 = *(_OWORD *)v102;
      *(_OWORD *)&v94[12] = *(_OWORD *)&v102[12];
      __int128 v89 = v97;
      __int128 v90 = v98;
      __int128 v91 = v99;
      __int128 v92 = v100;
      char v87 = v95;
      char v88 = v96;
      outlined retain of LocalePreferences?( (uint64_t)v108,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v108,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
      outlined release of LocalePreferences(&v87);
LABEL_4:
      outlined init with take of LocalePreferences?( (uint64_t)v108,  (uint64_t)v103,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?( (uint64_t)v110,  (uint64_t)&v104,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v103);
      outlined release of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
      __int128 v10 = v80;
      goto LABEL_5;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v110,  (uint64_t)&v87,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v21 = (uint64_t *)*((void *)&v95 + 1);
    uint64_t v79 = *((void *)&v96 + 1);
    uint64_t v75 = v97;
    uint64_t v77 = v96;
    unint64_t v78 = *((void *)&v97 + 1);
    uint64_t v76 = v98;
    v72 = (void *)v99;
    v73 = *((void *)&v98 + 1);
    uint64_t v70 = (void *)v100;
    uint64_t v71 = (void *)*((void *)&v99 + 1);
    int v68 = (void *)v101;
    unint64_t v69 = (void *)*((void *)&v100 + 1);
    int v66 = *(void *)v102;
    unint64_t v67 = *((void *)&v101 + 1);
    int v65 = *(_OWORD *)&v102[8];
    id v63 = v102[25];
    int v64 = v102[24];
    uint64_t v61 = v102[27];
    uint64_t v62 = v102[26];
    uint64_t v60 = v95;
    v74 = (uint64_t *)*((void *)&v95 + 1);
    if (v95 == 2)
    {
    }

    else if (v87 == 2 || ((((v95 & 1) == 0) ^ v87) & 1) == 0)
    {
LABEL_68:
      outlined retain of LocalePreferences?( (uint64_t)v108,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v108,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
LABEL_69:
      LOBYTE(v22) = 0;
      goto LABEL_70;
    }

    uint64_t v22 = *((void *)&v87 + 1);
    if (!*((void *)&v95 + 1))
    {
      Swift::UInt v54 = v3;
      if (*((void *)&v87 + 1)) {
        goto LABEL_33;
      }
      goto LABEL_42;
    }

    if (!*((void *)&v87 + 1)) {
      goto LABEL_66;
    }
    uint64_t v23 = *(void *)(*((void *)&v95 + 1) + 16LL);
    if (v23 != *(void *)(*((void *)&v87 + 1) + 16LL)) {
      goto LABEL_68;
    }
    Swift::UInt v54 = v3;
    if (v23)
    {
      if (*((void *)&v95 + 1) != *((void *)&v87 + 1))
      {
        if (*(_OWORD *)(*((void *)&v95 + 1) + 32LL) != *(_OWORD *)(*((void *)&v87 + 1) + 32LL))
        {
          Swift::UInt64 v24 = *(void *)(*((void *)&v95 + 1) + 16LL);
          Swift::UInt v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v23 = v24;
          uint64_t v21 = v74;
          if ((v25 & 1) == 0) {
            goto LABEL_33;
          }
        }

        if (v23 != 1)
        {
          uint64_t result = v21[6];
          if (result != *(void *)(v22 + 48) || v21[7] != *(void *)(v22 + 56))
          {
            unint64_t v27 = v23;
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v23 = v27;
            uint64_t v21 = v74;
            if ((result & 1) == 0)
            {
LABEL_33:
              outlined retain of LocalePreferences?( (uint64_t)v108,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences?( (uint64_t)v108,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
              LOBYTE(v22) = 0;
              uint64_t v3 = v54;
              goto LABEL_70;
            }
          }

          uint64_t v28 = v23 - 2;
          if (v23 != 2) {
            break;
          }
        }
      }
    }

LABEL_37:
    if (v82)
    {
      uint64_t v6 = v61;
      if (!*((void *)&v90 + 1)) {
        goto LABEL_50;
      }
      if (__PAIR128__(v82, v80) != v90)
      {
        uint64_t v33 = v18;
        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v18 = v33;
        if ((v34 & 1) == 0) {
          goto LABEL_51;
        }
      }
    }

    else
    {
      uint64_t v6 = v61;
      if (*((void *)&v90 + 1)) {
        goto LABEL_50;
      }
    }

    if (v81)
    {
      if (!*((void *)&v91 + 1)) {
        goto LABEL_50;
      }
      if (__PAIR128__(v81, v78) != v91)
      {
        uint64_t v33 = v18;
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v18 = v33;
        if ((v35 & 1) == 0) {
          goto LABEL_51;
        }
      }
    }

    else if (*((void *)&v91 + 1))
    {
      goto LABEL_50;
    }

    uint64_t v60 = v18;
    if (v79)
    {
      if (!(void)v92 || (specialized static Dictionary<>.== infix(_:_:)(v79, v92) & 1) == 0)
      {
LABEL_69:
        outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
        outlined retain of LocalePreferences?( (uint64_t)v111,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
LABEL_70:
        LOBYTE(v32) = 0;
        uint64_t v31 = v60;
        goto LABEL_53;
      }
    }

    else if ((void)v92)
    {
      goto LABEL_69;
    }

    if (v77)
    {
      if (!*((void *)&v92 + 1)
        || (specialized static Dictionary<>.== infix(_:_:)(v77, *((uint64_t *)&v92 + 1)) & 1) == 0)
      {
        goto LABEL_69;
      }
    }

    else if (*((void *)&v92 + 1))
    {
      goto LABEL_69;
    }

    uint64_t v62 = (void *)*((void *)&v93 + 1);
    uint64_t v32 = v93;
    if (v76)
    {
      if (!(void)v93)
      {
        outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
        outlined retain of LocalePreferences?( (uint64_t)v111,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        uint64_t v31 = v60;
        goto LABEL_53;
      }

      Swift::UInt v54 = (void *)*((void *)&v94 + 1);
      Swift::UInt8 v57 = (void *)v94;
      uint64_t v53 = (void *)v95;
      type metadata accessor for CFDictionaryRef(0LL);
      outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
      outlined retain of LocalePreferences?( (uint64_t)v111,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      id v36 = (id)v32;
      id v50 = v76;
      char v37 = static _CFObject.== infix(_:_:)();

      if ((v37 & 1) == 0) {
        goto LABEL_70;
      }
    }

    else
    {
      Swift::UInt v54 = (void *)*((void *)&v94 + 1);
      Swift::UInt8 v57 = (void *)v94;
      uint64_t v53 = (void *)v95;
      outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
      outlined retain of LocalePreferences?( (uint64_t)v111,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      if (v32) {
        goto LABEL_70;
      }
    }

    if (v75)
    {
      if (!v62) {
        goto LABEL_70;
      }
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      id v38 = v62;
      id v63 = v75;
      char v39 = static _CFObject.== infix(_:_:)();

      if ((v39 & 1) == 0) {
        goto LABEL_70;
      }
    }

    else if (v62)
    {
      goto LABEL_70;
    }

    uint64_t v31 = v60;
    if (v74)
    {
      if (!v57) {
        goto LABEL_52;
      }
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      id v40 = v57;
      id v58 = v74;
      char v41 = static _CFObject.== infix(_:_:)();

      uint64_t v31 = v60;
      if ((v41 & 1) == 0) {
        goto LABEL_52;
      }
    }

    else if (v57)
    {
      goto LABEL_52;
    }

    if (v73)
    {
      LOBYTE(v32) = (_BYTE)v54;
      if (!v54)
      {
        uint64_t v31 = v60;
        goto LABEL_53;
      }

      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      id v59 = v54;
      id v55 = v73;
      char v42 = static _CFObject.== infix(_:_:)();

      if ((v42 & 1) == 0) {
        goto LABEL_70;
      }
    }

    else if (v54)
    {
      goto LABEL_70;
    }

    unint64_t v51 = v7;
    unint64_t v52 = v8;
    uint64_t v56 = v5;
    if (v72)
    {
      if (!v53) {
        goto LABEL_109;
      }
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      id v43 = v53;
      id v44 = v72;
      char v45 = static _CFObject.== infix(_:_:)();

      if ((v45 & 1) == 0) {
        goto LABEL_109;
      }
    }

    else if (v53)
    {
      goto LABEL_109;
    }

    uint64_t v32 = *((void *)&v95 + 1);
    if (v71)
    {
      if (!*((void *)&v95 + 1)) {
        goto LABEL_110;
      }
      swift_bridgeObjectRetain();
      uint64_t v46 = swift_bridgeObjectRetain();
      char v47 = specialized static Dictionary<>.== infix(_:_:)(v46, v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v47 & 1) == 0) {
        goto LABEL_109;
      }
    }

    else if (*((void *)&v95 + 1))
    {
      goto LABEL_109;
    }

    uint64_t v32 = *(void *)v96;
    if (v70)
    {
      if (!*(void *)v96) {
        goto LABEL_110;
      }
      swift_bridgeObjectRetain();
      uint64_t v48 = swift_bridgeObjectRetain();
      char v49 = specialized static Dictionary<>.== infix(_:_:)(v48, v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v49 & 1) == 0)
      {
LABEL_109:
        LOBYTE(v32) = 0;
LABEL_110:
        uint64_t v31 = v60;
        uint64_t v5 = v56;
        unint64_t v7 = v51;
        unint64_t v8 = v52;
        goto LABEL_53;
      }
    }

    else if (*(void *)v96)
    {
      goto LABEL_109;
    }

    if (!v69)
    {
      uint64_t v31 = v60;
      uint64_t v5 = v56;
      unint64_t v7 = v51;
      unint64_t v8 = v52;
      if (*(void *)&v96[16]) {
        goto LABEL_52;
      }
LABEL_112:
      if (v68 == 2)
      {
        uint64_t v5 = v56;
        unint64_t v7 = v51;
        unint64_t v8 = v52;
        if (v96[24] != 2) {
          goto LABEL_52;
        }
        goto LABEL_117;
      }

      LOBYTE(v32) = 0;
      if (v96[24] != 2)
      {
        uint64_t v5 = v56;
        unint64_t v7 = v51;
        unint64_t v8 = v52;
        if (((v96[24] ^ v68) & 1) != 0) {
          goto LABEL_53;
        }
LABEL_117:
        if (v66 == 2)
        {
          uint64_t v5 = v56;
          unint64_t v7 = v51;
          unint64_t v8 = v52;
          if (v96[25] != 2) {
            goto LABEL_52;
          }
          goto LABEL_122;
        }

        LOBYTE(v32) = 0;
        if (v96[25] != 2)
        {
          uint64_t v5 = v56;
          unint64_t v7 = v51;
          unint64_t v8 = v52;
          if (((v96[25] ^ v66) & 1) != 0) {
            goto LABEL_53;
          }
LABEL_122:
          if (v65 == 2)
          {
            uint64_t v5 = v56;
            unint64_t v7 = v51;
            unint64_t v8 = v52;
            if (v96[26] != 2) {
              goto LABEL_52;
            }
            goto LABEL_127;
          }

          LOBYTE(v32) = 0;
          if (v96[26] != 2)
          {
            uint64_t v5 = v56;
            unint64_t v7 = v51;
            unint64_t v8 = v52;
            if (((((v65 & 1) == 0) ^ v96[26]) & 1) == 0) {
              goto LABEL_53;
            }
LABEL_127:
            if (v64 == 2)
            {
              uint64_t v5 = v56;
              unint64_t v7 = v51;
              unint64_t v8 = v52;
              if (v96[27] != 2) {
                goto LABEL_52;
              }
LABEL_132:
              LOBYTE(v32) = 1;
              goto LABEL_53;
            }

            LOBYTE(v32) = 0;
            if (v96[27] != 2)
            {
              uint64_t v5 = v56;
              unint64_t v7 = v51;
              unint64_t v8 = v52;
              if (((((v64 & 1) == 0) ^ v96[27]) & 1) == 0) {
                goto LABEL_53;
              }
              goto LABEL_132;
            }
          }
        }
      }

      uint64_t v5 = v56;
      unint64_t v7 = v51;
      unint64_t v8 = v52;
      goto LABEL_53;
    }

    if (!*(void *)&v96[16]) {
      goto LABEL_109;
    }
    uint64_t v31 = v60;
    uint64_t v5 = v56;
    unint64_t v7 = v51;
    unint64_t v8 = v52;
    if (__PAIR128__(v69, v67) == *(_OWORD *)&v96[8]) {
      goto LABEL_112;
    }
    LOBYTE(v32) = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_112;
    }
LABEL_53:
    LOBYTE(v84[0]) = v17;
    v84[1] = v31;
    v84[2] = v80;
    v84[3] = v82;
    v84[4] = v78;
    v84[5] = v81;
    v84[6] = v79;
    v84[7] = v77;
    v84[8] = v76;
    v84[9] = v75;
    v84[10] = v74;
    v84[11] = v73;
    v84[12] = v72;
    v84[13] = v71;
    v84[14] = v70;
    v84[15] = v67;
    v84[16] = v69;
    char v85 = v68;
    char v86 = v66;
    char v87 = v65;
    char v88 = v64;
    outlined release of LocalePreferences(v84);
    outlined retain of LocalePreferences?( (uint64_t)v111,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
    if ((v32 & 1) != 0) {
      return v4;
    }
LABEL_5:
    unint64_t v4 = (v4 + 1) & v6;
    if (((*(void *)(v83 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) == 0) {
      return v4;
    }
  }

  Swift::UInt64 v24 = (void *)(v19 + 56);
  Swift::UInt v25 = (void *)(v18 + 56);
  while (v23)
  {
    unint64_t v26 = v7;
    unint64_t v27 = v8;
    uint64_t v28 = v5;
    uint64_t v29 = v17;
    uint64_t result = *(v25 - 1);
    if (result != *(v24 - 1) || *v25 != *v24)
    {
      uint64_t v17 = v18;
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v18 = v17;
      if ((result & 1) == 0)
      {
        outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v108);
        outlined retain of LocalePreferences?( (uint64_t)v111,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        uint64_t v31 = v17;
        LOBYTE(v32) = 0;
        uint64_t v6 = v61;
        LOBYTE(v17) = v29;
        uint64_t v5 = v28;
        unint64_t v8 = v27;
        unint64_t v7 = v26;
        goto LABEL_53;
      }
    }

    v24 += 2;
    v25 += 2;
    --v23;
    uint64_t v17 = v29;
    uint64_t v5 = v28;
    unint64_t v8 = v27;
    unint64_t v7 = v26;
    if (!v23) {
      goto LABEL_37;
    }
  }

  __break(1u);
  return result;
}

            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }

          ++v15;
        }

            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }

          ++v8;
        }

          id v44 = v27;
          char v45 = a1;
          uint64_t v46 = v2;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
          {
            uint64_t v48 = 0LL;
            char v49 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(22LL);
            swift_bridgeObjectRelease();
            uint64_t v48 = 0xD000000000000014LL;
            char v49 = 0x80000001839C9190LL;
            char v47 = v26;
            v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v43);
            swift_bridgeObjectRelease();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x182F26594LL);
          }

          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v30 = (int)POSIXErrorCode.rawValue.getter();
          uint64_t v31 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v32 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v28 = objc_msgSend(v31, sel_initWithDomain_code_userInfo_, v32, v30, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v33 = objc_msgSend(v28, sel_domain);
          char v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
          id v36 = v35;

          if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v36 == v37)
          {
            swift_bridgeObjectRelease_n();
LABEL_42:
            a1 = v45;
            uint64_t v29 = v44;
LABEL_43:
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v29,  a1,  a2,  v28,  0x7265646C6F46LL,  0xE600000000000000LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v48,  0LL,  0LL);
            uint64_t v21 = (void *)v48;
            char v39 = *(void **)(inited + 64);
            swift_bridgeObjectRelease();

            *(void *)(inited + 64) = v21;
            if (v21) {
              goto LABEL_44;
            }
            goto LABEL_16;
          }

          id v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v38 & 1) != 0) {
            goto LABEL_42;
          }
          break;
      }

  Hasher._combine(_:)(0);
  if (!v21) {
    goto LABEL_38;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v31 = v21;
  _CFObject.hash(into:)();

  if (v23)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v32 = v23;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }

  Hasher._combine(_:)(0);
  char v34 = v60;
  if (!v60) {
    goto LABEL_38;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  char v35 = v34;
  _CFObject.hash(into:)();

  id v36 = v58;
  if (v58)
  {
LABEL_34:
    v0 = v20;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v37 = v36;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }

  objc_msgSend(v8, sel_setYearForWeekOfYear_, v6);
  if ((v32 & 1) != 0)
  {
LABEL_20:
    if (v7 == 2) {
      goto LABEL_21;
    }
LABEL_39:
    objc_msgSend(v8, sel_setLeapMonth_, v7 & 1);
    if ((v33 & 1) != 0) {
      return (NSDateComponents)v8;
    }
    goto LABEL_22;
  }

      result[3] = (uint64_t)v14;
LABEL_38:
      if (a2[1])
      {
        uint64_t v17 = *a2;
        uint64_t v18 = a2[1];
        uint64_t result = (uint64_t *)String.UnicodeScalarView.append(_:)();
        *a2 = v17;
        a2[1] = v18;
      }

      break;
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
      goto LABEL_3;
    case 'g':
    case 'l':
      __int128 v14 = v4 + 4;
      goto LABEL_37;
    case 'q':
      if (v6 < 5) {
        goto LABEL_3;
      }
      if (*v9 != 997486453) {
        goto LABEL_3;
      }
      __int128 v14 = v4 + 6;
      goto LABEL_37;
    default:
      if (*v5 != 35) {
        goto LABEL_3;
      }
      result[3] = (uint64_t)v9;
      uint64_t result = specialized static XMLPlistScanner.parseNumericEntityReference(reader:string:)(result);
      if (!v2) {
        goto LABEL_38;
      }
      return result;
  }

  return result;
}

      uint64_t v9 = v12;
LABEL_38:
      uint64_t v6 = v27;
      uint64_t result = v28;
      goto LABEL_39;
    }

      __int128 v10 = v13;
LABEL_38:
      unint64_t v7 = v23;
      goto LABEL_39;
    }

      __int128 v10 = v13;
LABEL_38:
      unint64_t v7 = v24;
      goto LABEL_39;
    }

    char v49 = (v35 - 1) & v35;
    id v50 = v36;
    uint64_t v33 = __clz(__rbit64(v35)) + (v36 << 6);
LABEL_38:
    outlined init with copy of AnyHashable(*(void *)(v9 + 48) + 40 * v33, (uint64_t)&v60);
    outlined init with copy of Any(*(void *)(v9 + 56) + 32 * v33, (uint64_t)v23);
    v58[0] = v62[0];
    v58[1] = v62[1];
    id v59 = v63;
    v57[0] = v60;
    v57[1] = v61;
    outlined init with copy of AnyHashable((uint64_t)v57, (uint64_t)&v52);
    if (!swift_dynamicCast())
    {
      outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v57);
      swift_bridgeObjectRelease();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_release();
      goto LABEL_45;
    }

    outlined init with copy of Any((uint64_t)v24, (uint64_t)&v52);
    outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v57);
    outlined init with take of Any(&v52, v25);
    Swift::UInt v54 = v51;
    outlined init with take of Any(v25, v55);
    id v38 = v54;
    outlined init with take of Any(v55, v56);
    outlined init with take of Any(v56, &v54);
    char v39 = specialized __RawDictionaryStorage.find<A>(_:)(v38, *((uint64_t *)&v38 + 1));
    id v40 = v39;
    if ((v41 & 1) != 0)
    {
      unint64_t v27 = v25;
      uint64_t v28 = v24;
      uint64_t v29 = v23;
      uint64_t v30 = v9;
      uint64_t v31 = (_OWORD *)(v18[6] + 16 * v39);
      swift_bridgeObjectRelease();
      *uint64_t v31 = v38;
      uint64_t v9 = v30;
      uint64_t v23 = v29;
      Swift::UInt64 v24 = v28;
      Swift::UInt v25 = v27;
      uint64_t v32 = (_OWORD *)(v18[7] + 32 * v40);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      outlined init with take of Any(&v54, v32);
      goto LABEL_15;
    }

    if (v18[2] >= v18[3])
    {
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }

    *(void *)((char *)v18 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v39;
    *(_OWORD *)(v18[6] + 16 * v39) = v38;
    outlined init with take of Any(&v54, (_OWORD *)(v18[7] + 32 * v39));
    char v42 = v18[2];
    __int128 v16 = __OFADD__(v42, 1LL);
    id v43 = v42 + 1;
    if (v16) {
      goto LABEL_47;
    }
    v18[2] = v43;
LABEL_15:
    uint64_t v22 = v49;
  }

                _StringGuts.grow(_:)(20LL);
                swift_bridgeObjectRelease();
                uint64_t v22 = 0LL;
                uint64_t v23 = (unsigned __int8 *)(v0[3] + v7);
                Swift::UInt64 v24 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v23,  v0[1],  v0[2]);
                unint64_t v26 = v25;
                uint64_t v28 = v27;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)unint64_t v8 = 0xD000000000000019LL;
                *(void *)(v8 + 8) = 0x80000001839CB560LL;
                *(void *)(v8 + 16) = v22;
                *(void *)(v8 + 24) = v24;
                *(void *)(v8 + 32) = v26;
                *(void *)(v8 + 40) = v28;
                uint64_t v9 = 1;
                goto LABEL_40;
              }

      __break(1u);
      goto LABEL_38;
    }

  Hasher._combine(_:)(0);
  char v47 = 0LL;
LABEL_38:

  uint64_t v48 = v79;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v89, v48);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v3 = v63;
  uint64_t v18 = v65;
  uint64_t v17 = v66;
  char v49 = v80;
  if (!v80)
  {
    Hasher._combine(_:)(0);
    if (v81) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v89, v49);
  swift_bridgeObjectRelease();
  if (!v81) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v82 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v50 = v82 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
  }

  if (v83 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v51 = v83 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
  }

  if (v84 == 2)
  {
    unint64_t v52 = 0;
  }

  else
  {
    unint64_t v52 = v84 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v52);
  if (v85 == 2)
  {
    uint64_t v53 = 0;
  }

  else
  {
    Swift::UInt v54 = v85 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v53 = v54;
  }

  Hasher._combine(_:)(v53);
  outlined retain of LocalePreferences?( (uint64_t)v87,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v87,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  id v55 = (int *)type metadata accessor for Measurement<>.FormatStyle(0LL, *(void *)(v18 + 16), v15, v16);
  outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v2[v55[8]],  (uint64_t)v8,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v8, 1LL, v3) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v56 = (uint64_t)v64;
    outlined init with take of LocalePreferences?( (uint64_t)v8,  (uint64_t)v64,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(1u);
    specialized FloatingPointFormatStyle.hash(into:)((uint64_t)v89);
    outlined destroy of Any?(v56, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  }

  Swift::UInt8 v57 = v2[v55[9]];
  if (v57 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Usage.rawValue.getter(v57);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  Hasher._combine(_:)(v2[v55[10]]);
  return Hasher._finalize()();
}

  uint64_t v2 = 18;
LABEL_38:
  *a2 = v2;
  return result;
}

            Hasher._combine(_:)(0);
            uint64_t v30 = 0LL;
LABEL_38:

            char v35 = v55;
            if (v35)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v35);
              swift_bridgeObjectRelease();
              id v36 = v56;
              if (v56) {
                goto LABEL_40;
              }
            }

            else
            {
              Hasher._combine(_:)(0);
              id v36 = v56;
              if (v56)
              {
LABEL_40:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v36);
                swift_bridgeObjectRelease();
                if (v57)
                {
LABEL_41:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_45:
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    char v37 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }

                  if (v59 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    id v38 = v59 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }

                  if (v60 == 2)
                  {
                    char v39 = 0;
                  }

                  else
                  {
                    char v39 = v60 & 1;
                    Hasher._combine(_:)(1u);
                  }

                  Hasher._combine(_:)(v39);
                  if (v61 == 2)
                  {
                    id v40 = 0;
                  }

                  else
                  {
                    char v41 = v61 & 1;
                    Hasher._combine(_:)(1u);
                    id v40 = v41;
                  }

                  Hasher._combine(_:)(v40);
                  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_58;
                }

            Hasher._combine(_:)(0);
            uint64_t v29 = 0LL;
LABEL_38:

            char v34 = v54;
            if (v34)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)((uint64_t)v64, v34);
              swift_bridgeObjectRelease();
              char v35 = v55;
              if (v55) {
                goto LABEL_40;
              }
            }

            else
            {
              Hasher._combine(_:)(0);
              char v35 = v55;
              if (v55)
              {
LABEL_40:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)((uint64_t)v64, v35);
                swift_bridgeObjectRelease();
                if (v56)
                {
LABEL_41:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_45:
                  if (v57 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    id v36 = v57 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v36);
                  }

                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    char v37 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }

                  if (v59 == 2)
                  {
                    id v38 = 0;
                  }

                  else
                  {
                    id v38 = v59 & 1;
                    Hasher._combine(_:)(1u);
                  }

                  Hasher._combine(_:)(v38);
                  if (v60 == 2)
                  {
                    char v39 = 0;
                  }

                  else
                  {
                    id v40 = v60 & 1;
                    Hasher._combine(_:)(1u);
                    char v39 = v40;
                  }

                  Hasher._combine(_:)(v39);
                  outlined retain of LocalePreferences?( (uint64_t)v62,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?( (uint64_t)v62,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_58;
                }

  uint64_t v31 = v3;
  uint64_t v32 = (void *)v5;
LABEL_51:
  result._object = v32;
  result._countAndFlagsBits = v31;
  return result;
}

    *(double *)a4 = v8;
    *(_BYTE *)(a4 + 8) = 0;
    return result;
  }

  *(double *)a4 = v22;
  *(_BYTE *)(a4 + 8) = 0;
  return result;
}

  *(void *)(v4 + 8 * v13) = v15 | v14;
  uint64_t v28 = (void *)(*(void *)(v1 + 48) + 16 * v12);
  *uint64_t v28 = v8;
  v28[1] = v7;
  uint64_t v29 = *(void *)(v1 + 16);
  uint64_t v30 = __OFADD__(v29, 1LL);
  uint64_t v31 = v29 + 1;
  if (!v30)
  {
    *(void *)(v1 + 16) = v31;
    goto LABEL_3;
  }

  __break(1u);
LABEL_41:
  result._object = v10;
  result._countAndFlagsBits = v9;
  return result;
}

  Hasher._combine(_:)(0);
  id v44 = 0LL;
LABEL_38:
  char v45 = v63;

  uint64_t v46 = v78;
  if (v46)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v88, v46);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  unint64_t v4 = v62;
  __int128 v14 = v65;
  char v47 = v79;
  if (!v79)
  {
    Hasher._combine(_:)(0);
    if (v80) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v88, v47);
  swift_bridgeObjectRelease();
  if (!v80) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v81 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v48 = v81 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v48);
  }

  if (v82 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v49 = v82 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }

  if (v83 == 2)
  {
    id v50 = 0;
  }

  else
  {
    id v50 = v83 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v50);
  if (v84 == 2)
  {
    unint64_t v51 = 0;
  }

  else
  {
    unint64_t v52 = v84 & 1;
    Hasher._combine(_:)(1u);
    unint64_t v51 = v52;
  }

  Hasher._combine(_:)(v51);
  outlined retain of LocalePreferences?( (uint64_t)v86,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v86,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)&v2[a1[8]], (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v53 = v64;
    outlined init with take of LocalePreferences?( (uint64_t)v8,  v64,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(1u);
    specialized FloatingPointFormatStyle.hash(into:)((uint64_t)v88);
    outlined destroy of Any?(v53, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  }

  Swift::UInt v54 = v2[a1[9]];
  if (v54 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Usage.rawValue.getter(v54);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  Hasher._combine(_:)(v2[a1[10]]);
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  id v38 = 0LL;
LABEL_38:

  char v39 = v68;
  if (v39)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v39);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  unint64_t v4 = v53;
  uint64_t v5 = v54;
  id v40 = v69;
  if (!v69)
  {
    Hasher._combine(_:)(0);
    if (v70) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v40);
  swift_bridgeObjectRelease();
  if (!v70) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v41 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }

  if (v72 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v42 = v72 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }

  if (v73 == 2)
  {
    id v43 = 0;
  }

  else
  {
    id v43 = v73 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v43);
  if (v74 == 2)
  {
    id v44 = 0;
  }

  else
  {
    char v45 = v74 & 1;
    Hasher._combine(_:)(1u);
    id v44 = v45;
  }

  Hasher._combine(_:)(v44);
  outlined retain of LocalePreferences?( (uint64_t)v76,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v76,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  uint64_t v46 = swift_getObjectType();
  char v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 112);
  swift_unknownObjectRetain();
  v47(a1, v46, v4);
  swift_unknownObjectRelease();
  uint64_t v48 = swift_getObjectType();
  char v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 120);
  swift_unknownObjectRetain();
  v49(a1, v48, v5);
  swift_unknownObjectRelease();
  specialized Hasher.combine<A>(_:)((uint64_t)v78);
}

  Hasher._combine(_:)(0);
  uint64_t v33 = 0LL;
LABEL_38:

  char v34 = v61;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v34);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v2 = v47;
  uint64_t v3 = v48;
  char v35 = v62;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    if (v63) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v35);
  swift_bridgeObjectRelease();
  if (!v63) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v36 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }

  if (v65 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v37 = v65 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v66 == 2)
  {
    id v38 = 0;
  }

  else
  {
    id v38 = v66 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v38);
  if (v67 == 2)
  {
    char v39 = 0;
  }

  else
  {
    id v40 = v67 & 1;
    Hasher._combine(_:)(1u);
    char v39 = v40;
  }

  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?( (uint64_t)v69,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v69,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  char v41 = swift_getObjectType();
  char v42 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 112);
  swift_unknownObjectRetain();
  v42(v71, v41, v2);
  swift_unknownObjectRelease();
  id v43 = swift_getObjectType();
  id v44 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 120);
  swift_unknownObjectRetain();
  v44(v71, v43, v3);
  swift_unknownObjectRelease();
  specialized Hasher.combine<A>(_:)((uint64_t)v72);
  return Hasher._finalize()();
}

        if (v16 == v17) {
          return 0LL;
        }
        uint64_t v32 = v17 < v16;
      }

      else
      {
        uint64_t v32 = v31 < v30;
      }

      if (v32) {
        return 1LL;
      }
      else {
        return -1LL;
      }
    case 0xE:
    case 0xF:
    case 0x10:
      return result;
    default:
      __int128 v13 = (char *)&outlined read-only object #3 of Calendar.compare(_:to:toGranularity:);
LABEL_22:
      uint64_t v21 = *((void *)v13 + 2);
      lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
      id v38 = COERCE_DOUBLE(Set.init(minimumCapacity:)());
      if (v21)
      {
        uint64_t v22 = (unsigned __int8 *)(v13 + 32);
        uint64_t v23 = v21;
        do
        {
          Swift::UInt64 v24 = *v22++;
          specialized Set._Variant.insert(_:)(v35, v24);
          --v23;
        }

        while (v23);
      }

      v42[0] = v11;
      v42[1] = v10;
      Swift::UInt v25 = swift_bridgeObjectRetain();
      Calendar.ComponentSet.init(_:)(v25, &v41);
      v35[0] = fmax(v6, -2.11845067e11);
      Calendar._dateComponents(_:from:)(&v41, v35, &v38);
      swift_bridgeObjectRelease();
      *(void *)&v35[0] = Set.init(minimumCapacity:)();
      if (v21)
      {
        unint64_t v26 = (unsigned __int8 *)(v13 + 32);
        unint64_t v27 = v21;
        do
        {
          uint64_t v28 = *v26++;
          specialized Set._Variant.insert(_:)(v37, v28);
          --v27;
        }

        while (v27);
      }

      v37[0] = v11;
      v37[1] = v10;
      uint64_t v29 = swift_bridgeObjectRetain();
      Calendar.ComponentSet.init(_:)(v29, &v36);
      char v34 = fmax(v7, -2.11845067e11);
      Calendar._dateComponents(_:from:)(&v36, &v34, v35);
      swift_bridgeObjectRelease();
      if (v21) {
        __asm { BR              X8 }
      }

      swift_bridgeObjectRelease();
      outlined release of DateComponents((uint64_t)v35);
      outlined release of DateComponents((uint64_t)&v38);
      return 0LL;
  }

  Hasher._combine(_:)(0);
  id v38 = 0LL;
LABEL_38:

  char v39 = v65;
  if (v39)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v39);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v6 = v52;
  id v40 = v66;
  if (!v66)
  {
    Hasher._combine(_:)(0);
    if (v67) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v40);
  swift_bridgeObjectRelease();
  if (!v67) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v41 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }

  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v42 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }

  if (v70 == 2)
  {
    id v43 = 0;
  }

  else
  {
    id v43 = v70 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v43);
  if (v71 == 2)
  {
    id v44 = 0;
  }

  else
  {
    char v45 = v71 & 1;
    Hasher._combine(_:)(1u);
    id v44 = v45;
  }

  Hasher._combine(_:)(v44);
  outlined retain of LocalePreferences?( (uint64_t)v73,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v73,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  uint64_t v46 = swift_getObjectType();
  char v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 120);
  swift_unknownObjectRetain();
  v47(a1, v46, v6);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v7);
  return swift_bridgeObjectRelease();
}

  Hasher._combine(_:)(0);
  char v35 = 0LL;
LABEL_38:

  id v36 = v60;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v70, v36);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v5 = v47;
  char v37 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    if (v62) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v70, v37);
  swift_bridgeObjectRelease();
  if (!v62) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v38 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }

  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v39 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }

  if (v65 == 2)
  {
    id v40 = 0;
  }

  else
  {
    id v40 = v65 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v40);
  if (v66 == 2)
  {
    char v41 = 0;
  }

  else
  {
    char v42 = v66 & 1;
    Hasher._combine(_:)(1u);
    char v41 = v42;
  }

  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?( (uint64_t)v68,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v68,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  id v43 = swift_getObjectType();
  id v44 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 120);
  swift_unknownObjectRetain();
  v44(v70, v43, v5);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v70, v6);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

              Swift::UInt v25 = 0;
              goto LABEL_38;
            }
          }

          goto LABEL_35;
        }

      __int128 v16 = (char *)_StringObject.sharedUTF8.getter();
LABEL_28:
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v16, v17, 4u, 1)) {
        goto LABEL_22;
      }
      goto LABEL_29;
    }

  Hasher._combine(_:)(0);
  uint64_t v30 = 0LL;
LABEL_38:

  char v35 = v62;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v72, v35);
    swift_bridgeObjectRelease();
    id v36 = v63;
    if (v63) {
      goto LABEL_40;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v64) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }

  Hasher._combine(_:)(0);
  id v36 = v63;
  if (!v63) {
    goto LABEL_43;
  }
LABEL_40:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v72, v36);
  swift_bridgeObjectRelease();
  if (!v64) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v65 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v37 = v65 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v38 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }

  if (v67 == 2)
  {
    char v39 = 0;
  }

  else
  {
    char v39 = v67 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v39);
  if (v68 == 2)
  {
    id v40 = 0;
  }

  else
  {
    char v41 = v68 & 1;
    Hasher._combine(_:)(1u);
    id v40 = v41;
  }

  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?( (uint64_t)v70,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v70,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  char v42 = *(void *)v83;
  id v43 = *(void *)&v83[16];
  id v44 = v83[24];
  char v45 = v83[25];
  uint64_t v46 = swift_getObjectType();
  char v47 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v42 + 112);
  swift_unknownObjectRetain();
  v47(v72, v46, v42);
  swift_unknownObjectRelease();
  uint64_t v48 = swift_getObjectType();
  char v49 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v43 + 120);
  swift_unknownObjectRetain();
  v49(v72, v48, v43);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v44);
  Hasher._combine(_:)(v45);
  outlined release of Date.FormatStyle((uint64_t)&v77);
  return Hasher._finalize()();
}

    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( &v53,  v49,  v34,  0,  0LL,  1,  0LL,  1,  (uint64_t)__src,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
    memcpy(__dst, __src, 0x11AuLL);
    unint64_t v51 = v10;
    id v50 = 0;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)( (uint64_t *)&v52,  __dst,  (char *)&v51 + 1,  &v50,  (char *)&v51,  a5);
    return (double *)outlined release of DateComponents((uint64_t)__src);
  }

  if ((_DWORD)v11 != 13)
  {
    if (!*a2)
    {
      uint64_t v60 = *v6;
      uint64_t v61 = v12;
      __asm { BR              X11 }
    }

    uint64_t v60 = *v6;
    uint64_t v61 = v12;
    LOBYTE(v55[0]) = v11;
    if (!__OFSUB__(0LL, a3))
    {
      __dst[0] = v9;
      *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)( (Foundation::Calendar::Component)v55,  -a3,  a6,  (Swift::Bool)__dst);
      if ((__src[8] & 1) != 0)
      {
        *(void *)a5 = *(void *)__src;
        goto LABEL_52;
      }

      *(void *)&__src[8] = 0LL;
      *(void *)__src = 0LL;
      __dst[1] = 0.0;
      __dst[0] = 0.0;
      DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( (__int128 *)__src,  (uint64_t *)__dst,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)&v60,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
      *(_BYTE *)(swift_allocObject() + 32) = v11;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
      char v35 = static _SetStorage.allocate(capacity:)();
      id v36 = v35 + 56;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v11);
      char v37 = Hasher._finalize()();
      id v38 = -1LL << *(_BYTE *)(v35 + 32);
      char v39 = v37 & ~v38;
      id v40 = v39 >> 6;
      char v41 = *(void *)(v35 + 56 + 8 * (v39 >> 6));
      char v42 = 1LL << v39;
      id v43 = *(void *)(v35 + 48);
      if (((1LL << v39) & v41) != 0)
      {
        id v44 = ~v38;
        char v39 = (v39 + 1) & v44;
        id v40 = v39 >> 6;
        char v41 = *(void *)(v36 + 8 * (v39 >> 6));
        char v42 = 1LL << v39;
        if ((v41 & (1LL << v39)) != 0)
        {
          char v39 = (v39 + 1) & v44;
          id v40 = v39 >> 6;
          char v41 = *(void *)(v36 + 8 * (v39 >> 6));
          char v42 = 1LL << v39;
          if ((v41 & (1LL << v39)) != 0)
          {
            char v39 = (v39 + 1) & v44;
            id v40 = v39 >> 6;
            char v41 = *(void *)(v36 + 8 * (v39 >> 6));
            char v42 = 1LL << v39;
            if ((v41 & (1LL << v39)) != 0)
            {
              while (*(unsigned __int8 *)(v43 + v39) != (_DWORD)v11)
              {
                char v39 = (v39 + 1) & v44;
                id v40 = v39 >> 6;
                char v41 = *(void *)(v36 + 8 * (v39 >> 6));
                char v42 = 1LL << v39;
                if ((v41 & (1LL << v39)) == 0) {
                  goto LABEL_47;
                }
              }

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

      uint64_t v30 = (v35 - 1) & v35;
      uint64_t v33 = __clz(__rbit64(v35)) + (v25 << 6);
      if (!v17[2]) {
        goto LABEL_48;
      }
    }
  }

  else
  {
LABEL_48:
    __break(1u);
  }

  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

      char v35 = (v40 - 1) & v40;
      id v38 = __clz(__rbit64(v40)) + (v30 << 6);
      if (!v23[2]) {
        goto LABEL_88;
      }
    }

        swift_release();
        goto LABEL_39;
      }

  Hasher._combine(_:)(0);
  char v39 = 0LL;
LABEL_38:

  id v40 = v67;
  if (v40)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v40);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  unint64_t v7 = v53;
  char v41 = v68;
  if (!v68)
  {
    Hasher._combine(_:)(0);
    if (v69) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v41);
  swift_bridgeObjectRelease();
  if (!v69) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  __int128 v12 = v54;
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v42 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }

  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v43 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }

  if (v72 == 2)
  {
    id v44 = 0;
  }

  else
  {
    id v44 = v72 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v44);
  if (v73 == 2)
  {
    char v45 = 0;
  }

  else
  {
    uint64_t v46 = v73 & 1;
    Hasher._combine(_:)(1u);
    char v45 = v46;
  }

  Hasher._combine(_:)(v45);
  outlined retain of LocalePreferences?( (uint64_t)v75,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v75,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  char v47 = swift_getObjectType();
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 120);
  swift_unknownObjectRetain();
  v48(a1, v47, v12);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v6);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    char v49 = v7;
  }
  else {
    char v49 = 0LL;
  }
  Hasher._combine(_:)(v49);
}

  Hasher._combine(_:)(0);
  id v36 = 0LL;
LABEL_38:

  char v37 = v63;
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v73, v37);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v6 = v49;
  id v38 = v64;
  if (!v64)
  {
    Hasher._combine(_:)(0);
    if (v65) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v73, v38);
  swift_bridgeObjectRelease();
  if (!v65) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  __int128 v11 = v50;
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v39 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }

  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v40 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }

  if (v68 == 2)
  {
    char v41 = 0;
  }

  else
  {
    char v41 = v68 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v41);
  if (v69 == 2)
  {
    char v42 = 0;
  }

  else
  {
    id v43 = v69 & 1;
    Hasher._combine(_:)(1u);
    char v42 = v43;
  }

  Hasher._combine(_:)(v42);
  outlined retain of LocalePreferences?( (uint64_t)v71,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v71,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  id v44 = swift_getObjectType();
  char v45 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 120);
  swift_unknownObjectRetain();
  v45(v73, v44, v11);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v73, v5);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v46 = v6;
  }
  else {
    uint64_t v46 = 0LL;
  }
  Hasher._combine(_:)(v46);
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  uint64_t v33 = 0LL;
LABEL_38:

  id v38 = v56;
  if (v38)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v66, v38);
    swift_bridgeObjectRelease();
    char v39 = v57;
    if (v57) {
      goto LABEL_40;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v58) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }

  Hasher._combine(_:)(0);
  char v39 = v57;
  if (!v57) {
    goto LABEL_43;
  }
LABEL_40:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v66, v39);
  swift_bridgeObjectRelease();
  if (!v58) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }

  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v41 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }

  if (v61 == 2)
  {
    char v42 = 0;
  }

  else
  {
    char v42 = v61 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v42);
  if (v62 == 2)
  {
    id v43 = 0;
  }

  else
  {
    id v44 = v62 & 1;
    Hasher._combine(_:)(1u);
    id v43 = v44;
  }

  Hasher._combine(_:)(v43);
  outlined retain of LocalePreferences?( (uint64_t)v64,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v64,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

  __src[22] = (int)ucal_getFieldDifference();
  LOBYTE(__src[23]) = 0;
  if ((a2 & 0x100) == 0)
  {
LABEL_24:
    if ((a2 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_39;
  }

    __break(1u);
    goto LABEL_38;
  }

  ucal_getGregorianChange();
  ucal_setGregorianChange();
  if ((a5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_5:
  if (a4 < (uint64_t)0xFFFFFFFF80000000LL)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  if (a4 > 0x7FFFFFFF)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  __break(1u);
}

  __break(1u);
  return result;
}

            Hasher._combine(_:)(0);
            uint64_t v30 = 0LL;
LABEL_38:

            char v35 = v54;
            if (v35)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v35);
              swift_bridgeObjectRelease();
              id v36 = v55;
              if (v55) {
                goto LABEL_40;
              }
            }

            else
            {
              Hasher._combine(_:)(0);
              id v36 = v55;
              if (v55)
              {
LABEL_40:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v36);
                swift_bridgeObjectRelease();
                if (v56)
                {
LABEL_41:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_45:
                  if (v57 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    char v37 = v57 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }

                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    id v38 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }

                  if (v59 == 2)
                  {
                    char v39 = 0;
                  }

                  else
                  {
                    char v39 = v59 & 1;
                    Hasher._combine(_:)(1u);
                  }

                  Hasher._combine(_:)(v39);
                  if (v60 == 2)
                  {
                    id v40 = 0;
                  }

                  else
                  {
                    char v41 = v60 & 1;
                    Hasher._combine(_:)(1u);
                    id v40 = v41;
                  }

                  Hasher._combine(_:)(v40);
                  outlined retain of LocalePreferences?( (uint64_t)v62,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?( (uint64_t)v62,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }

  Hasher._combine(_:)(0);
  uint64_t v28 = 0LL;
LABEL_38:

  uint64_t v33 = v52;
  if (v33)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v62, v33);
    swift_bridgeObjectRelease();
    char v34 = v53;
    if (v53) {
      goto LABEL_40;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v54) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }

  Hasher._combine(_:)(0);
  char v34 = v53;
  if (!v53) {
    goto LABEL_43;
  }
LABEL_40:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v62, v34);
  swift_bridgeObjectRelease();
  if (!v54) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v55 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v35 = v55 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }

  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }

  if (v57 == 2)
  {
    char v37 = 0;
  }

  else
  {
    char v37 = v57 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v37);
  if (v58 == 2)
  {
    id v38 = 0;
  }

  else
  {
    char v39 = v58 & 1;
    Hasher._combine(_:)(1u);
    id v38 = v39;
  }

  Hasher._combine(_:)(v38);
  outlined retain of LocalePreferences?( (uint64_t)v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

    Swift::UInt v54 = v53 + 56;
LABEL_38:
    if (++v56 != 3) {
      continue;
    }
    break;
  }

  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  __int128 v90 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v90);
  swift_release();
  __int128 v91 = _ContiguousArrayBuffer._asCocoaArray()();
  *(void *)&v278 = 0LL;
  __int128 v92 = objc_msgSend(v259, sel_resourceValuesForKeys_error_, v91, &v278);
  swift_unknownObjectRelease();
  __int128 v93 = (void *)v278;
  if (!v92)
  {
    if ((void)v278)
    {
      (id)v278;
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
LABEL_249:
      }
        swift_once();
      v109 = (id)_nilObjCError;
    }

    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }

  __int128 v94 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v92);
  __int128 v95 = v93;

  if (*(void *)(v94 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v96 = v258;
    __int128 v97 = specialized __RawDictionaryStorage.find<A>(_:)(v96);
    if ((v98 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v94 + 56) + 32 * v97, (uint64_t)&v278);
    }

    else
    {
      v278 = 0u;
      v279 = 0u;
    }
  }

  else
  {
    v278 = 0u;
    v279 = 0u;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSCopying & NSSecureCoding & NSObject);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __int128 v100 = v276;
  }

  else
  {
    __int128 v100 = 0LL;
    v276 = 0LL;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v100)
  {
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
    goto LABEL_256;
  }

  if (*(void *)(v265 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __int128 v101 = v258;
    __int128 v102 = specialized __RawDictionaryStorage.find<A>(_:)(v101);
    if ((v103 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v265 + 56) + 32 * v102, (uint64_t)&v278);
    }

    else
    {
      v278 = 0u;
      v279 = 0u;
    }
  }

  else
  {
    v278 = 0u;
    v279 = 0u;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  if ((swift_dynamicCast() & 1) != 0)
  {
    v104 = v276;
  }

  else
  {
    v104 = 0LL;
    v276 = 0LL;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v104) {
    goto LABEL_255;
  }
  v105 = objc_msgSend(v100, sel_isEqual_, v104);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v105 & 1) == 0)
  {
    if (*(void *)(v94 + 16))
    {
      uint64_t v106 = v254;
      v107 = specialized __RawDictionaryStorage.find<A>(_:)(v106);
      if ((v108 & 1) != 0)
      {
        outlined init with copy of Any(*(void *)(v94 + 56) + 32 * v107, (uint64_t)&v278);
      }

      else
      {
        v278 = 0u;
        v279 = 0u;
      }
    }

    else
    {
      v278 = 0u;
      v279 = 0u;
    }

    if ((swift_dynamicCast() & 1) != 0)
    {
      v110 = v276;
    }

    else
    {
      v110 = 0LL;
      v276 = 0LL;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v110)
    {
      if (*(void *)(v265 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v111 = v254;
        v112 = specialized __RawDictionaryStorage.find<A>(_:)(v111);
        if ((v113 & 1) != 0)
        {
          outlined init with copy of Any(*(void *)(v265 + 56) + 32 * v112, (uint64_t)&v278);
        }

        else
        {
          v278 = 0u;
          v279 = 0u;
        }
      }

      else
      {
        v278 = 0u;
        v279 = 0u;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      if ((swift_dynamicCast() & 1) != 0) {
        v114 = v276;
      }
      else {
        v114 = 0LL;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v114)
      {
        v115 = objc_msgSend(v110, sel_isEqual_, v114);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if ((v115 & 1) == 0) {
          goto LABEL_32;
        }
        v250 = (void *)*MEMORY[0x189603CB8];
        v249 = (void *)*MEMORY[0x189603D08];
        v272 = v259;
        swift_retain();
        swift_retain();
        while (1)
        {
          v260 = (void *)swift_allocObject();
          v260[4] = v250;
          v116 = static _SetStorage.allocate(capacity:)();
          v117 = (void *)v260[4];
          v273 = v272;
          swift_retain();
          swift_retain();
          v255 = v250;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
          Hasher.init(_seed:)();
          v268 = v117;
          String.hash(into:)();
          v118 = Hasher._finalize()();
          swift_bridgeObjectRelease();
          v119 = -1LL << *(_BYTE *)(v116 + 32);
          v120 = v118 & ~v119;
          v121 = v120 >> 6;
          v252 = v116 + 56;
          v122 = *(void *)(v116 + 56 + 8 * (v120 >> 6));
          v123 = 1LL << v120;
          if (((1LL << v120) & v122) != 0)
          {
            v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v116 + 48) + 8 * v120));
            v126 = v125;
            if (v124 == static String._unconditionallyBridgeFromObjectiveC(_:)(v117) && v126 == v127)
            {
LABEL_146:
              swift_bridgeObjectRelease_n();
LABEL_147:

              __int128 v14 = (uint64_t)v273;
              goto LABEL_148;
            }

            v129 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v129 & 1) != 0) {
              goto LABEL_147;
            }
            v130 = ~v119;
            v120 = (v120 + 1) & ~v119;
            v121 = v120 >> 6;
            v131 = v116 + 56;
            v122 = *(void *)(v252 + 8 * (v120 >> 6));
            v123 = 1LL << v120;
            if ((v122 & (1LL << v120)) != 0)
            {
              v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v116 + 48) + 8 * v120));
              v134 = v133;
              if (v132 == static String._unconditionallyBridgeFromObjectiveC(_:)(v117) && v134 == v135) {
                goto LABEL_146;
              }
              v137 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v137 & 1) != 0) {
                goto LABEL_147;
              }
              v120 = (v120 + 1) & v130;
              v121 = v120 >> 6;
              v122 = *(void *)(v252 + 8 * (v120 >> 6));
              v123 = 1LL << v120;
              if ((v122 & (1LL << v120)) != 0)
              {
                v140 = v139;
                if (v138 == static String._unconditionallyBridgeFromObjectiveC(_:)(v117) && v140 == v141) {
                  goto LABEL_146;
                }
                v144 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v144 & 1) != 0) {
                  goto LABEL_147;
                }
                v120 = (v120 + 1) & v130;
                v121 = v120 >> 6;
                v131 = v116 + 56;
                while (1)
                {
                  v122 = *(void *)(v252 + 8 * v121);
                  v123 = 1LL << v120;
                  if ((v122 & (1LL << v120)) == 0) {
                    break;
                  }
                  v147 = v146;
                  if (v145 == static String._unconditionallyBridgeFromObjectiveC(_:)(v117) && v147 == v148) {
                    goto LABEL_146;
                  }
                  v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v150 & 1) != 0) {
                    goto LABEL_147;
                  }
                  v120 = (v120 + 1) & v130;
                  v121 = v120 >> 6;
                }
              }
            }
          }

          else
          {
            v131 = v116 + 56;
          }

          *(void *)(v131 + 8 * v121) = v123 | v122;
          __int128 v14 = (uint64_t)v273;
          *(void *)(*(void *)(v116 + 48) + 8 * v120) = v268;
          v142 = *(void *)(v116 + 16);
          char v42 = __OFADD__(v142, 1LL);
          v143 = v142 + 1;
          if (v42) {
            goto LABEL_245;
          }
          *(void *)(v116 + 16) = v143;
LABEL_148:
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          v151 = swift_bridgeObjectRetain();
          specialized _copyCollectionToContiguousArray<A>(_:)(v151);
          swift_release();
          v152 = _ContiguousArrayBuffer._asCocoaArray()();
          *(void *)&v278 = 0LL;
          v153 = objc_msgSend((id)v14, sel_resourceValuesForKeys_error_, v152, &v278);
          swift_unknownObjectRelease();
          v154 = (void *)v278;
          if (!v153)
          {
            if (!(void)v278) {
              goto LABEL_232;
            }
            (id)v278;
            goto LABEL_235;
          }

          v155 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v153);
          v156 = v154;
          swift_release();
          swift_release();

          *(void *)&v278 = v155;
          *((void *)&v278 + 1) = v116;
          v157 = URLResourceValues._get(_:)(v255);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v157 == 2)
          {
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
            goto LABEL_254;
          }

          if ((v157 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *a1 = 2LL;
            swift_release();
            swift_release();

            return;
          }

          v261 = (void *)swift_allocObject();
          v261[4] = v249;
          v158 = static _SetStorage.allocate(capacity:)();
          v159 = (void *)v261[4];
          v269 = (id)v14;
          swift_retain();
          swift_retain();
          v160 = v249;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
          Hasher.init(_seed:)();
          v274 = v159;
          String.hash(into:)();
          v161 = Hasher._finalize()();
          swift_bridgeObjectRelease();
          v162 = -1LL << *(_BYTE *)(v158 + 32);
          v163 = v161 & ~v162;
          v164 = v163 >> 6;
          v165 = v158 + 56;
          v166 = *(void *)(v158 + 56 + 8 * (v163 >> 6));
          v167 = 1LL << v163;
          if (((1LL << v163) & v166) == 0)
          {
LABEL_172:
            *(void *)(v165 + 8 * v164) = v167 | v166;
            *(void *)(*(void *)(v158 + 48) + 8 * v163) = v274;
            v189 = *(void *)(v158 + 16);
            char v42 = __OFADD__(v189, 1LL);
            v190 = v189 + 1;
            if (v42)
            {
              __break(1u);
LABEL_248:
              __break(1u);
              goto LABEL_249;
            }

            *(void *)(v158 + 16) = v190;
            goto LABEL_174;
          }

          v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v158 + 48) + 8 * v163));
          v170 = v169;
          if (v168 != static String._unconditionallyBridgeFromObjectiveC(_:)(v159) || v170 != v171)
          {
            v172 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v172 & 1) != 0) {
              goto LABEL_156;
            }
            v173 = ~v162;
            v163 = (v163 + 1) & ~v162;
            v164 = v163 >> 6;
            v166 = *(void *)(v165 + 8 * (v163 >> 6));
            v167 = 1LL << v163;
            if ((v166 & (1LL << v163)) == 0) {
              goto LABEL_172;
            }
            v174 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v158 + 48) + 8 * v163));
            v176 = v175;
            if (v174 != static String._unconditionallyBridgeFromObjectiveC(_:)(v159) || v176 != v177)
            {
              v178 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v178 & 1) != 0) {
                goto LABEL_156;
              }
              v163 = (v163 + 1) & v173;
              v164 = v163 >> 6;
              v166 = *(void *)(v165 + 8 * (v163 >> 6));
              v167 = 1LL << v163;
              if ((v166 & (1LL << v163)) == 0) {
                goto LABEL_172;
              }
              v179 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v158 + 48) + 8 * v163));
              v181 = v180;
              if (v179 != static String._unconditionallyBridgeFromObjectiveC(_:)(v159) || v181 != v182)
              {
                do
                {
                  v183 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v183 & 1) != 0) {
                    goto LABEL_156;
                  }
                  v163 = (v163 + 1) & v173;
                  v164 = v163 >> 6;
                  v166 = *(void *)(v165 + 8 * (v163 >> 6));
                  v167 = 1LL << v163;
                  if ((v166 & (1LL << v163)) == 0) {
                    goto LABEL_172;
                  }
                  v186 = v185;
                }

                while (v184 != static String._unconditionallyBridgeFromObjectiveC(_:)(v159) || v186 != v187);
              }
            }
          }

          swift_bridgeObjectRelease_n();
LABEL_156:

LABEL_174:
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          v191 = swift_bridgeObjectRetain();
          specialized _copyCollectionToContiguousArray<A>(_:)(v191);
          swift_release();
          v192 = _ContiguousArrayBuffer._asCocoaArray()();
          *(void *)&v278 = 0LL;
          v193 = objc_msgSend(v269, sel_resourceValuesForKeys_error_, v192, &v278);
          swift_unknownObjectRelease();
          v194 = (void *)v278;
          if (!v193)
          {
            if ((void)v278)
            {
              (id)v278;
            }

            else
            {
              if (one-time initialization token for _nilObjCError != -1) {
                swift_once();
              }
              v247 = (id)_nilObjCError;
            }

            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release_n();
            swift_release_n();

            return;
          }

          v195 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v193);
          v196 = v194;
          swift_release();
          swift_release();

          v277 = (void *)v195;
          URLResourceValues.parentDirectory.getter(&v278);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v272 = (id)v278;
          if (!(void)v278) {
            goto LABEL_251;
          }
          v256 = swift_allocObject();
          *(void *)(v256 + 32) = v258;
          v197 = static _SetStorage.allocate(capacity:)();
          v198 = *(void **)(v256 + 32);
          v251 = v258;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v198);
          Hasher.init(_seed:)();
          v262 = v198;
          String.hash(into:)();
          v199 = Hasher._finalize()();
          swift_bridgeObjectRelease();
          v200 = -1LL << *(_BYTE *)(v197 + 32);
          v201 = v199 & ~v200;
          v202 = v201 >> 6;
          v203 = v197 + 56;
          v204 = *(void *)(v197 + 56 + 8 * (v201 >> 6));
          v205 = 1LL << v201;
          if (((1LL << v201) & v204) != 0)
          {
            v206 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v197 + 48) + 8 * v201));
            v208 = v207;
            if (v206 == static String._unconditionallyBridgeFromObjectiveC(_:)(v198) && v208 == v209) {
              goto LABEL_179;
            }
            v210 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v210 & 1) != 0) {
              goto LABEL_181;
            }
            v211 = ~v200;
            v201 = (v201 + 1) & ~v200;
            v202 = v201 >> 6;
            v204 = *(void *)(v203 + 8 * (v201 >> 6));
            v205 = 1LL << v201;
            if ((v204 & (1LL << v201)) != 0)
            {
              v212 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v197 + 48) + 8 * v201));
              v214 = v213;
              if (v212 == static String._unconditionallyBridgeFromObjectiveC(_:)(v198) && v214 == v215) {
                goto LABEL_179;
              }
              v216 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v216 & 1) != 0) {
                goto LABEL_181;
              }
              v201 = (v201 + 1) & v211;
              v202 = v201 >> 6;
              v204 = *(void *)(v203 + 8 * (v201 >> 6));
              v205 = 1LL << v201;
              if ((v204 & (1LL << v201)) != 0)
              {
                v219 = v218;
                if (v217 == static String._unconditionallyBridgeFromObjectiveC(_:)(v198) && v219 == v220)
                {
LABEL_179:
                  swift_bridgeObjectRelease_n();
                }

                else
                {
                  while (1)
                  {
                    v221 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v221 & 1) != 0) {
                      break;
                    }
                    v201 = (v201 + 1) & v211;
                    v202 = v201 >> 6;
                    v204 = *(void *)(v203 + 8 * (v201 >> 6));
                    v205 = 1LL << v201;
                    if ((v204 & (1LL << v201)) == 0) {
                      goto LABEL_197;
                    }
                    v224 = v223;
                    if (v222 == static String._unconditionallyBridgeFromObjectiveC(_:)(v198) && v224 == v225) {
                      goto LABEL_179;
                    }
                  }
                }

          if (v4)
          {
            __break(1u);
LABEL_317:
            __break(1u);
LABEL_318:
            __break(1u);
LABEL_319:
            v119 = 2LL;
LABEL_297:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v138 = v9 & 0xFFFFFFFFFFFFF0FFLL | (v119 << 8);
            unint64_t v4 = v134;
            uint64_t v9 = v135;
            __int128 v10 = v136;
            unint64_t v8 = v137;
            if (v5) {
              goto LABEL_12;
            }
LABEL_298:
            uint64_t result = (void *)swift_release();
            v135 = 0LL;
            uint64_t v17 = __OFSUB__(v4, v14);
            __int128 v14 = v4 - v14;
            if (v17) {
              goto LABEL_300;
            }
            goto LABEL_13;
          }

    swift_unknownObjectRetain();
    char v49 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v34, v191, v8, v29, v199);
    swift_unknownObjectRelease_n();
    goto LABEL_65;
  }

  v178 = v34;
  uint64_t v9 = *(unsigned __int8 *)(v29 + 18);
  if (*(_BYTE *)(v29 + 18))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v244);
    swift_unknownObjectRetain();
    unint64_t v7 = -15LL;
    unint64_t v8 = 24LL;
    char v35 = v31;
    id v36 = v29;
    while (1)
    {
      id v40 = *(unsigned __int16 *)(v36 + 16);
      if (!*(_WORD *)(v36 + 16)) {
        goto LABEL_14;
      }
      char v41 = *(void *)(v36 + 40);
      char v42 = v35 - v41;
      if (__OFSUB__(v35, v41)) {
        goto LABEL_213;
      }
      if (__OFADD__(v42, 1LL)) {
        goto LABEL_214;
      }
      if (v42 + 1 <= 0)
      {
        id v40 = 0LL;
      }

      else
      {
        if ((_DWORD)v40 == 1)
        {
          v35 -= v41;
          goto LABEL_14;
        }

        id v43 = *(void *)(v36 + 64);
        id v44 = __OFSUB__(v42, v43);
        char v45 = v42 - v43;
        if (v44) {
          goto LABEL_219;
        }
        if (__OFADD__(v45, 1LL)) {
          goto LABEL_220;
        }
        if (v45 + 1 < 1)
        {
          id v40 = 1LL;
          char v35 = v42;
        }

        else
        {
          if ((_DWORD)v40 == 2)
          {
            char v35 = v45;
LABEL_14:
            if (v35) {
              goto LABEL_212;
            }
            goto LABEL_15;
          }

          uint64_t v46 = (void *)(v36 + 88);
          char v47 = 2LL;
          while (1)
          {
            if (v40 == v47) {
              goto LABEL_209;
            }
            char v35 = v45 - *v46;
            if (__OFSUB__(v45, *v46)) {
              goto LABEL_210;
            }
            if (__OFADD__(v35, 1LL)) {
              goto LABEL_211;
            }
            if (v35 + 1 < 1) {
              break;
            }
            ++v47;
            v46 += 3;
            char v45 = v35;
            if (v40 == v47) {
              goto LABEL_14;
            }
          }

          id v40 = v47;
          char v35 = v45;
        }
      }

    swift_unknownObjectRetain();
    uint64_t v48 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v189, v193, v8, v29, v33);
    swift_unknownObjectRelease_n();
    goto LABEL_65;
  }

  v201 = v33;
  uint64_t v9 = *(unsigned __int8 *)(v29 + 18);
  if (*(_BYTE *)(v29 + 18))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v246);
    swift_unknownObjectRetain();
    unint64_t v7 = -15LL;
    unint64_t v8 = 24LL;
    char v34 = v31;
    char v35 = v29;
    while (1)
    {
      char v39 = *(unsigned __int16 *)(v35 + 16);
      if (!*(_WORD *)(v35 + 16)) {
        goto LABEL_14;
      }
      id v40 = *(void *)(v35 + 40);
      char v41 = v34 - v40;
      if (__OFSUB__(v34, v40)) {
        goto LABEL_213;
      }
      if (__OFADD__(v41, 1LL)) {
        goto LABEL_214;
      }
      if (v41 + 1 <= 0)
      {
        char v39 = 0LL;
      }

      else
      {
        if ((_DWORD)v39 == 1)
        {
          v34 -= v40;
          goto LABEL_14;
        }

        char v42 = *(void *)(v35 + 64);
        id v43 = __OFSUB__(v41, v42);
        id v44 = v41 - v42;
        if (v43) {
          goto LABEL_219;
        }
        if (__OFADD__(v44, 1LL)) {
          goto LABEL_220;
        }
        if (v44 + 1 < 1)
        {
          char v39 = 1LL;
          char v34 = v41;
        }

        else
        {
          if ((_DWORD)v39 == 2)
          {
            char v34 = v44;
LABEL_14:
            if (v34) {
              goto LABEL_212;
            }
            goto LABEL_15;
          }

          char v45 = (void *)(v35 + 88);
          uint64_t v46 = 2LL;
          while (1)
          {
            if (v39 == v46) {
              goto LABEL_209;
            }
            char v34 = v44 - *v45;
            if (__OFSUB__(v44, *v45)) {
              goto LABEL_210;
            }
            if (__OFADD__(v34, 1LL)) {
              goto LABEL_211;
            }
            if (v34 + 1 < 1) {
              break;
            }
            ++v46;
            v45 += 3;
            id v44 = v34;
            if (v39 == v46) {
              goto LABEL_14;
            }
          }

          char v39 = v46;
          char v34 = v44;
        }
      }

    swift_unknownObjectRetain();
    uint64_t v48 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v184, v188, v8, v29, v34);
    swift_unknownObjectRelease_n();
    goto LABEL_65;
  }

  v196 = v34;
  uint64_t v9 = *(unsigned __int8 *)(v29 + 18);
  if (*(_BYTE *)(v29 + 18))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v241);
    swift_unknownObjectRetain();
    unint64_t v7 = -15LL;
    unint64_t v8 = 24LL;
    char v35 = v32;
    a1 = v29;
    while (1)
    {
      char v39 = *(unsigned __int16 *)(a1 + 16);
      if (!*(_WORD *)(a1 + 16)) {
        goto LABEL_14;
      }
      id v40 = *(void *)(a1 + 40);
      char v41 = v35 - v40;
      if (__OFSUB__(v35, v40)) {
        goto LABEL_213;
      }
      if (__OFADD__(v41, 1LL)) {
        goto LABEL_214;
      }
      if (v41 + 1 <= 0)
      {
        char v39 = 0LL;
      }

      else
      {
        if ((_DWORD)v39 == 1)
        {
          v35 -= v40;
          goto LABEL_14;
        }

        char v42 = *(void *)(a1 + 64);
        id v43 = __OFSUB__(v41, v42);
        id v44 = v41 - v42;
        if (v43) {
          goto LABEL_219;
        }
        if (__OFADD__(v44, 1LL)) {
          goto LABEL_220;
        }
        if (v44 + 1 < 1)
        {
          char v39 = 1LL;
          char v35 = v41;
        }

        else
        {
          if ((_DWORD)v39 == 2)
          {
            char v35 = v44;
LABEL_14:
            if (v35) {
              goto LABEL_212;
            }
            goto LABEL_15;
          }

          char v45 = (void *)(a1 + 88);
          uint64_t v46 = 2LL;
          while (1)
          {
            if (v39 == v46) {
              goto LABEL_209;
            }
            char v35 = v44 - *v45;
            if (__OFSUB__(v44, *v45)) {
              goto LABEL_210;
            }
            if (__OFADD__(v35, 1LL)) {
              goto LABEL_211;
            }
            if (v35 + 1 < 1) {
              break;
            }
            ++v46;
            v45 += 3;
            id v44 = v35;
            if (v39 == v46) {
              goto LABEL_14;
            }
          }

          char v39 = v46;
          char v35 = v44;
        }
      }

            if ((_DWORD)v43 != 14) {
              goto LABEL_38;
            }
LABEL_39:
            __int128 v11 = (unint64_t)v99;
            if (v44 != 2) {
              objc_msgSend(v48, sel_setDetermination_, (v44 & 1) + 1);
            }
            if ((_DWORD)v108 != 3) {
              objc_msgSend(v48, sel_setPronounType_, v108 + 1);
            }
            swift_bridgeObjectRelease();
            if (v110 != 2)
            {
              if ((v110 & 1) != 0) {
                char v49 = 2LL;
              }
              else {
                char v49 = 1LL;
              }
              objc_msgSend(v48, sel_setDefiniteness_, v49);
            }

            if (v45)
            {
              id v50 = objc_allocWithZone((Class)&OBJC_CLASS___NSMorphology);
              swift_bridgeObjectRetain();
              unint64_t v51 = objc_msgSend(v50, sel_init);
              id v38 = v51;
              else {
                objc_msgSend(v51, sel_setGrammaticalGender_, v112 + 1);
              }
              if ((v112 & 0xFF0000) != 0x60000) {
                objc_msgSend(v38, sel_setNumber_, BYTE2(v112) + 1);
              }
              if ((v112 & 0xFF00) != 0xE00) {
                objc_msgSend(v38, sel_setPartOfSpeech_, BYTE1(v112) + 1);
              }
              uint64_t v53 = v103 | (v105 << 32);
              if ((v103 & 0xFF000000) != 0x2000000) {
                objc_msgSend(v38, sel_setDetermination_, ((v53 >> 24) & 1) + 1);
              }
              if (BYTE2(v103) != 3) {
                objc_msgSend(v38, sel_setPronounType_, BYTE2(v103) + 1);
              }
              if ((_DWORD)v105 == 2)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease_n();
              }

              else
              {
                if ((v53 & 0x100000000LL) != 0) {
                  Swift::UInt v54 = 2LL;
                }
                else {
                  Swift::UInt v54 = 1LL;
                }
                objc_msgSend(v38, sel_setDefiniteness_, v54);
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
            }

            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v38 = 0LL;
            }

            objc_msgSend( objc_allocWithZone((Class)NSMorphologyPronoun),  sel_initWithPronoun_morphology_dependentMorphology_,  v119,  v48,  v38);

            swift_unknownObjectRelease();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            char v37 = v114 + 64;
            id v36 = v121 - 1;
            if (v121 == (char *)1)
            {
              id v55 = aBlock;
              swift_bridgeObjectRelease();
              __int128 v13 = v94;
LABEL_88:
              if (v55 >= 0) {
                v55 &= 0xFFFFFFFFFFFFFF8uLL;
              }
              goto LABEL_74;
            }
          }
        }

        swift_bridgeObjectRelease();
        id v55 = MEMORY[0x18961AFE8];
        if (MEMORY[0x18961AFE8] >> 62) {
          goto LABEL_88;
        }
LABEL_73:
        type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
        id v55 = _ContiguousArrayBuffer._asCocoaArray()();
LABEL_74:
        uint64_t v29 = objc_msgSend((id)objc_opt_self(), sel_localizedForLanguageIdentifier_withPronouns_, v35, v55);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
LABEL_75:
        v118 = v29;
        *(void *)&v124 = partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
        *((void *)&v124 + 1) = v13;
        uint64_t v56 = MEMORY[0x1895F87A8];
        *(void *)&aBlock = MEMORY[0x1895F87A8];
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&v123 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
        *((void *)&v123 + 1) = &block_descriptor_123;
        v120 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        Swift::UInt8 v57 = swift_allocObject();
        *(void *)(v57 + 16) = partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
        *(void *)(v57 + 24) = v13;
        *(void *)&v124 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
        *((void *)&v124 + 1) = v57;
        *(void *)&aBlock = v56;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&v123 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
        *((void *)&v123 + 1) = &block_descriptor_131_0;
        v115 = _Block_copy(&aBlock);
        swift_retain();
        unint64_t v81 = (const void *)v57;
        swift_retain();
        swift_release();
        id v58 = swift_allocObject();
        *(void *)(v58 + 16) = partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
        *(void *)(v58 + 24) = v13;
        *(void *)&v124 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
        *((void *)&v124 + 1) = v58;
        *(void *)&aBlock = v56;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&v123 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
        *((void *)&v123 + 1) = &block_descriptor_139_0;
        v117 = _Block_copy(&aBlock);
        swift_retain();
        unint64_t v82 = (const void *)v58;
        swift_retain();
        swift_release();
        id v59 = swift_allocObject();
        *(void *)(v59 + 16) = v90;
        uint64_t v60 = swift_allocObject();
        *(void *)(v60 + 16) = closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v60 + 24) = v59;
        *(void *)&v124 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
        *((void *)&v124 + 1) = v60;
        *(void *)&aBlock = v56;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&v123 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
        *((void *)&v123 + 1) = &block_descriptor_150;
        v111 = _Block_copy(&aBlock);
        uint64_t v83 = (const void *)v60;
        swift_retain();
        swift_release();
        uint64_t v61 = swift_allocObject();
        *(void *)(v61 + 16) = v90;
        uint64_t v62 = swift_allocObject();
        *(void *)(v62 + 16) = closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v62 + 24) = v61;
        *(void *)&v124 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
        *((void *)&v124 + 1) = v62;
        *(void *)&aBlock = v56;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&v123 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
        *((void *)&v123 + 1) = &block_descriptor_161;
        v109 = _Block_copy(&aBlock);
        char v85 = (const void *)v62;
        swift_retain();
        swift_release();
        id v63 = swift_allocObject();
        *(void *)(v63 + 16) = v90;
        int v64 = swift_allocObject();
        *(void *)(v64 + 16) = closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v64 + 24) = v63;
        *(void *)&v124 = thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)partial apply;
        *((void *)&v124 + 1) = v64;
        *(void *)&aBlock = v56;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&v123 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
        *((void *)&v123 + 1) = &block_descriptor_172;
        uint64_t v106 = _Block_copy(&aBlock);
        char v86 = v64;
        swift_retain();
        swift_release();
        int v65 = swift_allocObject();
        *(void *)(v65 + 16) = v90;
        int v66 = swift_allocObject();
        *(void *)(v66 + 16) = closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v66 + 24) = v65;
        *(void *)&v124 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)partial apply;
        *((void *)&v124 + 1) = v66;
        *(void *)&aBlock = v56;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&v123 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
        *((void *)&v123 + 1) = &block_descriptor_183;
        uint64_t v9 = _Block_copy(&aBlock);
        char v87 = v66;
        swift_retain();
        swift_release();
        unint64_t v67 = swift_allocObject();
        *(void *)(v67 + 16) = v90;
        int v68 = swift_allocObject();
        *(void *)(v68 + 16) = closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v68 + 24) = v67;
        *(void *)&v124 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
        *((void *)&v124 + 1) = v68;
        *(void *)&aBlock = v56;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&v123 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String);
        *((void *)&v123 + 1) = &block_descriptor_194;
        __int128 v13 = _Block_copy(&aBlock);
        char v88 = v68;
        swift_retain();
        swift_release();
        unint64_t v69 = swift_allocObject();
        *(void *)(v69 + 16) = v89;
        uint64_t v70 = swift_allocObject();
        *(void *)(v70 + 16) = closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v70 + 24) = v69;
        *(void *)&v124 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
        *((void *)&v124 + 1) = v70;
        *(void *)&aBlock = v56;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&v123 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
        *((void *)&v123 + 1) = &block_descriptor_205;
        unint64_t v26 = _Block_copy(&aBlock);
        uint64_t v71 = v89;
        __int128 v89 = (id)v70;
        swift_retain();
        swift_release();
        v72 = swift_allocObject();
        *(void *)(v72 + 16) = v90;
        *(void *)(v72 + 24) = v71;
        v73 = swift_allocObject();
        *(void *)(v73 + 16) = closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v73 + 24) = v72;
        *(void *)&v124 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
        *((void *)&v124 + 1) = v73;
        *(void *)&aBlock = v56;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&v123 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ();
        *((void *)&v123 + 1) = &block_descriptor_216;
        __int128 v100 = _Block_copy(&aBlock);
        v107 = v71;
        __int128 v90 = (void *)v73;
        swift_retain();
        swift_release();
        *(void *)&v124 = destructiveProjectEnumData for PredicateCodableError;
        *((void *)&v124 + 1) = 0LL;
        *(void *)&aBlock = v56;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&v123 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ();
        *((void *)&v123 + 1) = &block_descriptor_219;
        v74 = _Block_copy(&aBlock);
        swift_release();
        uint64_t v75 = swift_allocObject();
        *(void *)(v75 + 16) = v91;
        *(void *)(v75 + 24) = v93;
        uint64_t v23 = swift_allocObject();
        *(void *)(v23 + 16) = closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v23 + 24) = v75;
        *(void *)&v124 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)partial apply;
        *((void *)&v124 + 1) = v23;
        *(void *)&aBlock = v56;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&v123 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
        *((void *)&v123 + 1) = &block_descriptor_230;
        v104 = _Block_copy(&aBlock);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release();
        uint64_t v79 = (uint64_t)v74;
        unint64_t v27 = v74;
        __int128 v10 = (uint64_t)v106;
        __int128 v11 = (unint64_t)v111;
        uint64_t v18 = (uint64_t)v115;
        uint64_t v22 = (uint64_t)v117;
        _NSInflect( (uint64_t)v96,  v95,  (uint64_t)v98,  (uint64_t)v118,  (uint64_t)v120,  a5 & 1,  (uint64_t)v115,  (uint64_t)v117,  (uint64_t)v111,  (uint64_t)v109,  (uint64_t)v106,  (uint64_t)v9,  (uint64_t)v13,  (uint64_t)v26,  (uint64_t)v100,  v79,  (uint64_t)v104);

        _Block_release(v27);
        _Block_release(v100);
        _Block_release(v26);
        _Block_release(v13);
        _Block_release(v9);
        _Block_release(v106);
        _Block_release(v109);
        _Block_release(v111);
        _Block_release(v117);
        _Block_release(v115);
        _Block_release(v120);

        swift_unknownObjectRelease();
        _Block_release(v104);
        isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((isEscapingClosureAtFileLocation & 1) != 0)
        {
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
          goto LABEL_102;
        }

        if ((swift_isEscapingClosureAtFileLocation() & 1) != 0) {
          goto LABEL_93;
        }
        unint64_t v27 = v90;
        uint64_t v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0) {
          goto LABEL_94;
        }
        unint64_t v27 = v89;
        uint64_t v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0) {
          goto LABEL_95;
        }
        unint64_t v27 = (const void *)v88;
        uint64_t v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0) {
          goto LABEL_96;
        }
        unint64_t v27 = (const void *)v87;
        uint64_t v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0) {
          goto LABEL_97;
        }
        unint64_t v27 = (const void *)v86;
        uint64_t v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0) {
          goto LABEL_98;
        }
        unint64_t v27 = v85;
        uint64_t v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0) {
          goto LABEL_99;
        }
        unint64_t v27 = v83;
        uint64_t v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0) {
          goto LABEL_100;
        }
        unint64_t v27 = v82;
        uint64_t v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0) {
          goto LABEL_101;
        }
        unint64_t v27 = v81;
        uint64_t v23 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v23 & 1) != 0)
        {
LABEL_102:
          __break(1u);
LABEL_103:
          if (v18 >= 0) {
            unint64_t v78 = (void *)v27;
          }
          else {
            unint64_t v78 = (void *)v18;
          }
          __int128 v98 = v78;
          continue;
        }

        uint64_t v76 = v94[2];
        swift_retain();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release_n();
        *a6 = v76;
        swift_release();
        swift_release();
        swift_release();
        return swift_release();
    }
  }

  Hasher._combine(_:)(0);
  if (!v22) {
    goto LABEL_38;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v32 = v22;
  _CFObject.hash(into:)();

  if (v24)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v33 = v24;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }

  Hasher._combine(_:)(0);
  uint64_t v31 = 0LL;
LABEL_38:

  id v36 = v55;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
    swift_bridgeObjectRelease();
    char v37 = v56;
    if (v56) {
      goto LABEL_40;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v57) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }

  Hasher._combine(_:)(0);
  char v37 = v56;
  if (!v56) {
    goto LABEL_43;
  }
LABEL_40:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v37);
  swift_bridgeObjectRelease();
  if (!v57) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v38 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }

  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v39 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }

  if (v60 == 2)
  {
    id v40 = 0;
  }

  else
  {
    id v40 = v60 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v40);
  if (v61 == 2)
  {
    char v41 = 0;
  }

  else
  {
    char v42 = v61 & 1;
    Hasher._combine(_:)(1u);
    char v41 = v42;
  }

  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

        if (v12) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }

      goto LABEL_38;
    }
  }

  return v7;
}

  free(v11);
  __int128 v15 = 2LL;
  __int128 v14 = a5;
LABEL_38:
  v18[0] = a4;
  v18[1] = v14;
  v18[2] = 0LL;
  v17.receiver = self;
  v17.super_class = (Class)&OBJC_CLASS___NSKeyValueMethodSetter;
  uint64_t result = -[NSKeyValueAccessor initWithContainerClassID:key:implementation:selector:extraArguments:count:]( &v17,  sel_initWithContainerClassID_key_implementation_selector_extraArguments_count_,  a3,  a4,  Implementation,  Name,  v18,  v15);
  if (result) {
    result->_method = a5;
  }
  return result;
}

  [a3 failWithError:+[NSError _readCorruptErrorWithFormat:]( NSError, "_readCorruptErrorWithFormat:", @"%@: invalid archived object", _NSMethodExceptionProem((objc_class *)objc_alloc(MEMORY[0x189604030]), a2))];
  return 0LL;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void *__src, uint64_t a2)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    memcpy(v7, (const void *)(*(void *)(v2 + 48) + 352 * v5), sizeof(v7));
    while (!specialized static Locale.Components.== infix(_:_:)((uint64_t)v7, (uint64_t)__dst))
    {
      unint64_t v5 = (v5 + 1) & ~v4;
      if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) & (1LL << v5)) == 0) {
        break;
      }
      memcpy(v7, (const void *)(*(void *)(v2 + 48) + 352 * v5), sizeof(v7));
    }
  }

  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = ~v5;
    do
    {
      if (!((*(void *)(*(void *)(v3 + 48) + 16 * result) != a1) | (a2 ^ *(unsigned __int8 *)(*(void *)(v3 + 48) {
                                                                                                + 16 * result
      }
      unint64_t result = (result + 1) & v7;
    }

    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0);
  }

  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if (((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    uint64_t v13 = ~v7;
    uint64_t v14 = *(void *)(v5 + 48);
    do
    {
      __int128 v16 = (void *)(v14 + 32 * v8);
      uint64_t v18 = v16[2];
      uint64_t v17 = v16[3];
      BOOL v19 = *v16 == a1 && v16[1] == a2;
      if ((v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) && v18 == a3 && v17 == a4) {
        break;
      }
      unint64_t v8 = (v8 + 1) & v13;
    }

    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0);
  }

  return v8;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v11 = a2 & ~v10;
  if (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return v11;
  }
  uint64_t v12 = ~v10;
  uint64_t v13 = *(void *)(v7 + 72);
  uint64_t v83 = &v121;
  while (1)
  {
    outlined init with copy of ICUNumberFormatter.Signature( *(void *)(v3 + 48) + v13 * v11,  (uint64_t)v9,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    uint64_t v14 = v6[5];
    uint64_t v15 = *(void *)&v9[v14];
    uint64_t v16 = *(void *)&v9[v14 + 8];
    uint64_t v17 = (void *)(a1 + v14);
    BOOL v18 = v15 == *v17 && v16 == v17[1];
    if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_5;
    }
    uint64_t v19 = v6[6];
    uint64_t v20 = *(void *)&v9[v19];
    uint64_t v21 = *(void *)&v9[v19 + 8];
    uint64_t v22 = (void *)(a1 + v19);
    BOOL v23 = v20 == *v22 && v21 == v22[1];
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?( (uint64_t)&v9[v6[7]],  (uint64_t)v122,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( a1 + v6[7],  (uint64_t)v123,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v122,  (uint64_t)v124,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v124) == 1)
    {
      outlined init with take of LocalePreferences?( (uint64_t)v123,  (uint64_t)v120,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      goto LABEL_4;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v122,  (uint64_t)&v112,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v123,  (uint64_t)v120,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v120) == 1)
    {
      v84[6] = v118;
      v85[0] = v119[0];
      *(_OWORD *)((char *)v85 + 12) = *(_OWORD *)((char *)v119 + 12);
      v84[2] = v114;
      v84[3] = v115;
      v84[4] = v116;
      v84[5] = v117;
      v84[0] = v112;
      v84[1] = v113;
      outlined init with take of LocalePreferences?( (uint64_t)v122,  (uint64_t)v86,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?( (uint64_t)v122,  (uint64_t)&v91,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(&v91);
      outlined retain of LocalePreferences(v86);
      outlined release of LocalePreferences(v84);
LABEL_4:
      outlined init with take of LocalePreferences?( (uint64_t)v122,  (uint64_t)v120,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?( (uint64_t)v123,  (uint64_t)v83,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v123,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v120);
      goto LABEL_5;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v123,  (uint64_t)&v91,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Swift::UInt64 v24 = (uint64_t *)*((void *)&v112 + 1);
    uint64_t v82 = *((void *)&v113 + 1);
    uint64_t v78 = v114;
    uint64_t v80 = v113;
    uint64_t v81 = *((void *)&v114 + 1);
    uint64_t v79 = v115;
    id v75 = (id)v116;
    uint64_t v76 = *((void *)&v115 + 1);
    id v73 = (id)v117;
    id v74 = (id)*((void *)&v116 + 1);
    id v71 = (id)v118;
    id v72 = (id)*((void *)&v117 + 1);
    uint64_t v69 = *(void *)&v119[0];
    uint64_t v70 = *((void *)&v118 + 1);
    uint64_t v67 = *((void *)&v119[0] + 1);
    uint64_t v68 = *(void *)&v119[1];
    int v65 = BYTE9(v119[1]);
    int v66 = BYTE8(v119[1]);
    int v62 = BYTE11(v119[1]);
    int v63 = BYTE10(v119[1]);
    int v64 = v112;
    uint64_t v77 = (uint64_t *)*((void *)&v112 + 1);
    if (v112 == 2)
    {
    }

    else if (v91 == 2 || ((((v112 & 1) == 0) ^ v91) & 1) == 0)
    {
LABEL_39:
      outlined init with take of LocalePreferences?( (uint64_t)v122,  (uint64_t)v84,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?( (uint64_t)v122,  (uint64_t)v86,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(v86);
      char v34 = v84;
LABEL_40:
      outlined retain of LocalePreferences(v34);
      goto LABEL_41;
    }

    Swift::UInt v25 = v92;
    if (!*((void *)&v112 + 1))
    {
      id v61 = (id)v12;
      if (!v92) {
        goto LABEL_57;
      }
      outlined init with take of LocalePreferences?( (uint64_t)v122,  (uint64_t)v84,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?( (uint64_t)v122,  (uint64_t)v86,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(v86);
      id v36 = v84;
LABEL_46:
      outlined retain of LocalePreferences(v36);
      goto LABEL_47;
    }

    if (!v92) {
      goto LABEL_39;
    }
    uint64_t v26 = *(void *)(*((void *)&v112 + 1) + 16LL);
    if (v26 != v92[2])
    {
      outlined init with take of LocalePreferences?( (uint64_t)v122,  (uint64_t)v86,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v122,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      char v34 = v86;
      goto LABEL_40;
    }

    id v61 = (id)v12;
    if (!v26 || *((void **)&v112 + 1) == v92) {
      goto LABEL_57;
    }
    if (*(void *)(*((void *)&v112 + 1) + 32LL) != v92[4] || *(void *)(*((void *)&v112 + 1) + 40LL) != v92[5])
    {
      uint64_t v27 = v26;
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v26 = v27;
      Swift::UInt64 v24 = v77;
      if ((v28 & 1) == 0)
      {
LABEL_76:
        outlined init with take of LocalePreferences?( (uint64_t)v122,  (uint64_t)v86,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences?( (uint64_t)v122,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        id v36 = v86;
        goto LABEL_46;
      }
    }

    if (v26 != 1)
    {
      uint64_t result = v24[6];
      if (result != v25[6] || v24[7] != v25[7])
      {
        uint64_t v30 = v26;
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v26 = v30;
        Swift::UInt64 v24 = v77;
        if ((result & 1) == 0) {
          goto LABEL_76;
        }
      }

      uint64_t v31 = (char *)(v26 - 2);
      if (v26 != 2) {
        break;
      }
    }

LABEL_5:
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v9,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    unint64_t v11 = (v11 + 1) & v12;
    if (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
      return v11;
    }
  }

  uint64_t v32 = v25 + 9;
  uint64_t v33 = v24 + 9;
  while (v31)
  {
    uint64_t result = *(v33 - 1);
    if (result != *(v32 - 1) || *v33 != *v32)
    {
      uint64_t v60 = v31;
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v31 = v60;
      if ((result & 1) == 0)
      {
        outlined retain of LocalePreferences?( (uint64_t)v122,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?( (uint64_t)v122,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        goto LABEL_47;
      }
    }

    v32 += 2;
    v33 += 2;
    if (!--v31) {
      goto LABEL_57;
    }
  }

  __break(1u);
  return result;
}

  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  uint64_t v7 = *(__CFCharacterSet **)(v1 + 16);
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    CFCharacterSetIntersect(v7, v5);
    swift_release();
    return;
  }

  uint64_t v8 = v7;
  MutableCopy = CFCharacterSetCreateMutableCopy(0LL, v8);
  if (MutableCopy)
  {
    uint64_t v10 = MutableCopy;
    unint64_t v11 = (const __CFCharacterSet *)*(id *)(v6 + 16);
    CFCharacterSetIntersect(v10, v11);

    uint64_t v12 = *(id *)(v1 + 16);
    *(void *)(v1 + 16) = v10;
    *(_BYTE *)(v1 + 24) = 1;
    swift_release();

    return;
  }

  if (withoutBraces)
  {
LABEL_25:
    JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)(5u, (void *)v1[1], v1[2], (uint64_t)v4);
    goto LABEL_26;
  }

  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v7 = 1LL;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(void *)(v7 + 40) = 0LL;
  uint64_t v8 = 12;
LABEL_10:
  *(_BYTE *)(v7 + 48) = v8;
  swift_willThrow();
LABEL_26:
  BOOL v23 = v2[5] - 1LL;
LABEL_27:
  v2[5] = v23;
}

    uint64_t v8 = BigSubstring.UnicodeScalarView.index(after:)();
    uint64_t result = 0LL;
    if (v2 <= v8 >> 10) {
      return result;
    }
  }

  uint64_t v9 = 10LL;
  while (1)
  {
    uint64_t v10 = v9 - 7;
    if (__OFADD__(v9 - 8, 1LL)) {
      break;
    }
    if (*(_DWORD *)(a1 + 4 * v9) == (_DWORD)result) {
      return v8;
    }
    ++v9;
    if (v10 == v7) {
      goto LABEL_5;
    }
  }

  __break(1u);
  return result;
}

  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = &v3[v8 + 4];
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)v1 = v3;
    return result;
  }

  unint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }

  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)v1 = v3;
    return result;
  }

  unint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }

  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)v1 = v3;
    return result;
  }

  unint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }

  uint64_t v15 = v5;
  return v6;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v18 = *v17;
    uint64_t v19 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    BOOL v18 = (-1LL << result) - 1;
  }

  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1LL);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v18 = *v17;
    uint64_t v19 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    BOOL v18 = (-1LL << result) - 1;
  }

  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1LL);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    BOOL v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1LL << v3) - 1;
  }

  else
  {
    BOOL v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1LL << result) - 1;
  }

  *BOOL v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1LL);
  BOOL v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v18 = *v17;
    uint64_t v19 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    BOOL v18 = (-1LL << result) - 1;
  }

  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1LL);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  int *v20 = v22 & v21;
  BOOL v23 = *(void *)(a2 + 16);
  Swift::UInt64 v24 = __OFSUB__(v23, 1LL);
  Swift::UInt v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    BOOL v18 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v18 = *v16;
    uint64_t v17 = (-1LL << result) - 1;
  }

  *uint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = __OFSUB__(v19, 1LL);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    BOOL v18 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v18 = *v16;
    uint64_t v17 = (-1LL << result) - 1;
  }

  *uint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = __OFSUB__(v19, 1LL);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v18 = *v17;
    uint64_t v19 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    BOOL v18 = (-1LL << result) - 1;
  }

  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1LL);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  int *v20 = v22 & v21;
  BOOL v23 = *(void *)(a2 + 16);
  Swift::UInt64 v24 = __OFSUB__(v23, 1LL);
  Swift::UInt v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(v10, v9, v167);
  uint64_t v13 = v168;
  if (v168 != 4)
  {
    uint64_t result = (uint64_t)outlined release of Locale.Components(v167);
    *(_BYTE *)(v8 + 281) = v13;
    *a3 = v13;
    return result;
  }

  v162 = a3;
  _LocaleICU._lockedCalendarIdentifier(_:)(v8, &v171);
  v164 = v171;
  uint64_t v14 = *(void *)(v8 + 336);
  if (!v14) {
    goto LABEL_51;
  }
  uint64_t v15 = *(void *)(v8 + 328);
  uint64_t v16 = *(void *)(v8 + 344);
  uint64_t v17 = *(void *)(v8 + 352);
  if (v14 != 1)
  {
    uint64_t v27 = *(void *)(v8 + 328);
    char v28 = *(void **)(v8 + 336);
    goto LABEL_45;
  }

  v153 = 1LL;
  v150 = v16;
  v151 = v17;
  v161 = v3;
  specialized static Locale.keywordValue(identifier:key:)();
  if (!v18)
  {
LABEL_20:
    v146 = v15;
    uint64_t v30 = swift_bridgeObjectRetain();
    MEMORY[0x1895F8858](v30);
    LODWORD(v171) = 0;
    String.utf8CString.getter();
    Language = uloc_getLanguage();
    uint64_t v32 = (void *)swift_release();
    p_os_unfair_lock_opaque = 0LL;
    uint64_t v33 = 0LL;
    if ((int)v171 <= 0 && Language > 0)
    {
      v145[Language] = 0;
      uint64_t v32 = (void *)MEMORY[0x186E1B634](v145, 0LL);
      p_os_unfair_lock_opaque = v32;
    }

    v157 = v33;
    MEMORY[0x1895F8858](v32);
    LODWORD(v171) = 0;
    String.utf8CString.getter();
    Script = uloc_getScript();
    swift_release();
    uint64_t v35 = 0LL;
    if ((int)v171 > 0)
    {
      v158 = 0LL;
    }

    else
    {
      v158 = 0LL;
      if (Script > 0)
      {
        v145[Script] = 0;
        uint64_t v35 = MEMORY[0x186E1B634](v145);
        v158 = v36;
      }
    }

    v156 = v35;
    MEMORY[0x1895F8858](v35);
    LODWORD(v171) = 0;
    String.utf8CString.getter();
    Country = uloc_getCountry();
    swift_release();
    v159 = 0LL;
    if ((int)v171 > 0)
    {
      v152 = 0LL;
      id v38 = v157;
    }

    else
    {
      v152 = 0LL;
      id v38 = v157;
      if (Country > 0)
      {
        v145[Country] = 0;
        v159 = (char *)MEMORY[0x186E1B634](v145);
        v152 = v39;
      }
    }

    swift_bridgeObjectRelease();
    if (v38)
    {
      char v40 = p_os_unfair_lock_opaque;
      char v41 = String.lowercased()();
      countAndFlagsBits = v41._countAndFlagsBits;
      object = (unint64_t)v41._object;
    }

    else
    {
      char v40 = 0LL;
      countAndFlagsBits = 0LL;
      object = 0LL;
    }

    id v43 = v158;
    p_os_unfair_lock_opaque = v40;
    if (v158)
    {
      v171 = (void *)v156;
      v172 = v158;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      uint64_t v44 = String._capitalized()();
      v154 = v44._countAndFlagsBits;
      v148 = v44._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      v156 = 0LL;
      v154 = 0LL;
      v148 = 0LL;
    }

    char v45 = v152;
    v163 = v10;
    v149 = countAndFlagsBits;
    if (v152)
    {
      char v46 = v159;
      id v47 = String.uppercased()();
      char v48 = v47._object;
      char v28 = (void *)v45;
      v159 = v46;
      id v49 = (uint64_t)v46;
      v147 = v47._countAndFlagsBits;
      char v50 = v45;
    }

    else
    {
      uint64_t v51 = (uint64_t)p_os_unfair_lock_opaque;
      v171 = p_os_unfair_lock_opaque;
      v172 = (os_unfair_lock_t)v38;
      uint64_t v52 = v156;
      v173 = countAndFlagsBits;
      v174 = object;
      v175 = v156;
      v176 = v43;
      v177 = v154;
      v178 = v148;
      v179 = 0u;
      v180 = 0u;
      outlined copy of Locale.LanguageCode?((uint64_t)p_os_unfair_lock_opaque, v38);
      outlined copy of Locale.LanguageCode?(v52, (uint64_t)v43);
      outlined copy of Locale.LanguageCode?(0LL, 0LL);
      v159 = (char *)specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)&v171);
      char v28 = v53;
      outlined consume of Locale.LanguageCode?(v51, v157);
      outlined consume of Locale.LanguageCode?(v52, (uint64_t)v43);
      outlined consume of Locale.LanguageCode?(0LL, 0LL);
      if (v28)
      {
        id v54 = String.uppercased()();
        v147 = v54._countAndFlagsBits;
        char v48 = v54._object;
      }

      else
      {
        v159 = 0LL;
        v147 = 0LL;
        char v48 = 0LL;
      }

      id v49 = 0LL;
      char v50 = v152;
    }

    id v55 = (uint64_t)p_os_unfair_lock_opaque;
    v152 = v49;
    outlined copy of Locale.LanguageCode?(v49, v50);
    outlined consume of Locale.LanguageCode?(v55, v157);
    outlined consume of Locale.LanguageCode?(v156, (uint64_t)v158);
    outlined consume of Locale.LanguageCode?(v152, v50);
    id v56 = *(void *)(v8 + 336);
    p_os_unfair_lock_opaque = *(void **)(v8 + 328);
    v158 = *(os_unfair_lock_t *)(v8 + 344);
    uint64_t v57 = (uint64_t)v159;
    id v58 = v147;
    outlined copy of Locale.LanguageCode?((uint64_t)v159, (uint64_t)v28);
    outlined consume of Locale.Subdivision??((uint64_t)p_os_unfair_lock_opaque, v56);
    *(void *)(v8 + 328) = v57;
    *(void *)(v8 + 336) = v28;
    *(void *)(v8 + 344) = v58;
    *(void *)(v8 + 352) = v48;
    uint64_t v4 = v161;
    uint64_t v10 = v163;
    uint64_t v14 = v153;
    if (v28)
    {
      id v59 = v57;
      uint64_t v15 = v146;
      uint64_t v27 = v59;
      goto LABEL_45;
    }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

  while ((v50 & 1) == 0)
  {
    char v50 = 1;
    unint64_t v11 = Data.Iterator.next()();
    if ((*(_WORD *)&v11 & 0x100) != 0) {
      goto LABEL_35;
    }
    value = v11.value;
    uint64_t v12 = v11.value;
    LOWORD(v10) = Data.Iterator.next()();
    if (v12 < 0xFE)
    {
      if ((v10 & 0x100) != 0) {
        goto LABEL_35;
      }
LABEL_17:
      uint64_t v14 = value | (v10 << 8);
      uint64_t v15 = (v49 & 1) != 0 || v49 == 2;
      uint64_t v16 = bswap32(v14) >> 16;
      if (!v15) {
        LOWORD(v16) = v14;
      }
      goto LABEL_22;
    }

    if ((v10 & 0x100) != 0) {
      goto LABEL_35;
    }
    if (v12 == 255 && v10 == 254)
    {
      if (v49 == 2)
      {
        uint64_t v13 = 0;
LABEL_28:
        id v49 = v13;
        break;
      }

      if ((v49 & 1) != 0) {
        LOWORD(v16) = -2;
      }
      else {
        LOWORD(v16) = -257;
      }
    }

    else
    {
      if (v49 == 2)
      {
        uint64_t v13 = 1;
        goto LABEL_28;
      }

      if ((v49 & 1) != 0) {
        LOWORD(v16) = -257;
      }
      else {
        LOWORD(v16) = -2;
      }
    }

    uint64_t v6 = v31;
    uint64_t v5 = v30;
  }

  if (a1 && a1 != (unsigned __int8 *)v7)
  {
    uint64_t v10 = (char)*a1++;
    unint64_t v11 = a1;
    uint64_t v12 = v10;
    if ((v10 & 0x80000000) == 0)
    {
      i = v12 + 1;
      uint64_t v14 = *((void *)v4 + 2);
      goto LABEL_38;
    }

    uint64_t v5 = v5 & 0xFFFFFF00 | v12;
    uint64_t v6 = 8;
    goto LABEL_25;
  }

    if (++v12 == v27) {
      goto LABEL_166;
    }
  }

    *(void *)&uint64_t v70 = v13;
    *((void *)&v70 + 1) = v12;
    *(void *)&id v71 = v14;
    *((void *)&v71 + 1) = v15;
    id v72 = v16;
    uint64_t result = (uint64_t)AttributedString._InternalRunsSlice.endIndex.getter(v66, v8, a7, v77);
    uint64_t v17 = v16 < v77[4];
    uint64_t v9 = v66;
    if (!v17) {
      return result;
    }
  }

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release();
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v15 = *(void *)(v3 + 16);
  uint64_t v16 = __OFSUB__(v15, 1LL);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

  if (v11 >= a2) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = v11;
  }
  return a4(&a1[v12], a2 - v12);
}

  type metadata accessor for __DataStorage();
  unint64_t v11 = swift_allocObject();
  __DataStorage.init(bytes:length:copy:deallocator:offset:)(v9, v10, 1, 0LL, 0LL, v4);
  v1[1] = v11;
  swift_release();
LABEL_6:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v12 = *(void *)(*v1 + 16);
    uint64_t v13 = *(void *)(*v1 + 24);
    type metadata accessor for Data.RangeReference();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v12;
    *(void *)(v14 + 24) = v13;
    *v1 = v14;
    swift_release();
  }

  *a3 = result;
  a3[1] = v5;
  return result;
}

    URL.init(reference:)(v10, v105);

    unint64_t v11 = *(_OWORD *)&v105[8];
    *a3 = *(void *)v105;
    *(_OWORD *)(a3 + 1) = v11;
    return;
  }

  uint64_t v10 = objc_msgSend(v8, sel_URLByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v10) {
    goto LABEL_5;
  }
  *(void *)uint64_t v105 = v8;
  *(void *)&v105[8] = v7;
  *(void *)&v105[16] = v9;
  uint64_t v17 = URL.absoluteString.getter();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v17, v18, 1, (uint64_t)v95);
  outlined init with take of LocalePreferences?( (uint64_t)v95,  (uint64_t)v94,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?( (uint64_t)v95,  (uint64_t)&v96,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v96) == 1)
  {
    *a3 = v8;
    a3[1] = v7;
    a3[2] = v9;
    swift_retain();
    uint64_t v19 = v8;
LABEL_27:
    swift_retain();
    return;
  }

  uint64_t v106 = v102;
  *(_OWORD *)uint64_t v107 = v103;
  *(_OWORD *)&v107[16] = v104[0];
  *(_OWORD *)&v107[26] = *(_OWORD *)((char *)v104 + 10);
  *(_OWORD *)&v105[32] = v98;
  *(_OWORD *)&v105[48] = v99;
  *(_OWORD *)&v105[64] = v100;
  *(_OWORD *)&v105[80] = v101;
  *(_OWORD *)uint64_t v105 = v96;
  *(_OWORD *)&v105[16] = v97;
  outlined init with take of LocalePreferences?( (uint64_t)v94,  (uint64_t)v93,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined retain of URLComponents((uint64_t)v93);
  URLComponents._URLComponents.path.getter();
  outlined release of URLComponents?(v95);
  uint64_t v21 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v22 = objc_msgSend(v21, sel_stringByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  BOOL v23 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  Swift::UInt v25 = v24;

  uint64_t v26 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000LL) == 0) {
    uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v76 = a3;
  int v63 = v9;
  if (v26)
  {
    uint64_t v77 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v23, v25);
    id v75 = v27;
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v77 = 0LL;
    id v75 = 0xE000000000000000LL;
  }

  id v73 = v107[40];
  id v74 = v107[41];
  id v71 = *(void *)&v107[32];
  id v72 = *(void *)&v107[24];
  uint64_t v69 = *(void *)&v107[16];
  uint64_t v70 = *(void *)&v107[8];
  uint64_t v68 = v106;
  uint64_t v67 = *(_OWORD *)&v105[80];
  int v66 = *(_OWORD *)&v105[64];
  int v65 = *(_OWORD *)&v105[48];
  char v45 = *(void *)&v105[24];
  int v64 = *(_OWORD *)&v105[32];
  char v46 = v105[16];
  id v47 = v105[15];
  char v48 = v105[13];
  id v49 = v105[12];
  char v50 = v105[11];
  uint64_t v51 = v105[10];
  uint64_t v52 = v105[9];
  int v53 = *(void *)v105;
  outlined init with take of LocalePreferences?( (uint64_t)&v106 + 8,  (uint64_t)v108,  &demangling cache variable for type metadata for String?);
  outlined release of String((uint64_t)v108);
  uint64_t v82 = v53;
  LOBYTE(v83) = 0;
  BYTE1(v83) = v52;
  BYTE2(v83) = v51;
  BYTE3(v83) = v50;
  BYTE4(v83) = v49;
  *(_WORD *)((char *)&v83 + 5) = v48;
  HIBYTE(v83) = v47;
  v84 = v46;
  *(void *)char v85 = v45;
  *(_OWORD *)&v85[8] = v64;
  *(_OWORD *)&v85[24] = v65;
  *(_OWORD *)&v85[40] = v66;
  *(_OWORD *)&v85[56] = v67;
  char v86 = v68;
  char v87 = v77;
  char v88 = v75;
  *(void *)&char v89 = v70;
  *((void *)&v89 + 1) = v69;
  *(void *)&char v90 = v72;
  *((void *)&v90 + 1) = v71;
  uint64_t v91 = v73;
  __int128 v92 = v74;
  URLComponents.url.getter((uint64_t *)&v79);
  outlined release of URLComponents((uint64_t)&v82);
  id v54 = v79;
  if (v79)
  {
    id v55 = v80;
    id v56 = v81;
  }

  else
  {
    id v56 = v63;
    swift_retain();
    id v54 = v8;
    id v55 = swift_retain();
  }

  *uint64_t v76 = v54;
  v76[1] = v55;
  v76[2] = v56;
}

    Swift::UInt64 v24 = v20;
    Swift::UInt v25 = v19;
    uint64_t v26 = v18;
    uint64_t v27 = v17;
    char v28 = v7;
    uint64_t v29 = v8;
    uint64_t v5 = ((unint64_t)BigString.index(after:)() >> 11 << 16) | 4;
    if (!--v4) {
      return v5;
    }
  }

  id v36 = *v6;
  char v37 = v10;
  id v38 = v11;
  uint64_t v39 = v12;
  uint64_t v7 = v14;
  char v40 = v14;
  char v41 = v13;
  uint64_t v8 = v13;
  uint64_t v9 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
  uint64_t result = BigString.endIndex.getter();
  if (result >> 10 >= v9 >> 10) {
    goto LABEL_5;
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

  uint64_t v10 = 0LL;
LABEL_6:
  unint64_t v11 = a4;
LABEL_7:
  *uint64_t v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = v11;
  return (void *)v10;
}

  objc_opt_self();
  if ((_CFPredicatePolicyData_getFlags() & 8) != 0)
  {
    objc_opt_self();
    uint64_t v8 = (os_log_s *)_NSOSLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl( &dword_182EB1000,  v8,  OS_LOG_TYPE_FAULT,  "NSPredicate: Unarchiving an NSCustomPredicateOperator is deprecated and secure coding support will be removed in a future release.",  buf,  2u);
    }
  }

  return v5;
}

    uint64_t v3 = 1;
    goto LABEL_6;
  }

  uint64_t v4 = formatter;
  os_unfair_lock_unlock(&self->_lock);
  return (NSArray *)v4;
}

    if (v5 != v2)
    {
      uint64_t v6 = 0LL;
      *(_BYTE *)(v1 + 238) = v2;
      uint64_t v7 = ((uint64_t)(char)(v5 + (((char)v5 >> 13) & 3)) >> 2) + 2;
      uint64_t v8 = &v3[2 * v7];
      unint64_t v11 = *(void *)&v8[6]._os_unfair_lock_opaque;
      uint64_t v9 = v8 + 6;
      uint64_t v10 = v11;
      while (v10)
      {
        uint64_t v12 = v6;
        uint64_t v6 = (os_unfair_lock_s *)v10;
        uint64_t v10 = *(void *)(v10 + 24);
        if (v6 == (os_unfair_lock_s *)v1)
        {
          uint64_t v13 = v12 + 6;
          if (!v12) {
            uint64_t v13 = v9;
          }
          *(void *)&v13->_os_unfair_lock_opaque = v10;
          if (!v10) {
            *(void *)&v3[2 * v7 + 18]._os_unfair_lock_opaque = v12;
          }
          *(void *)(v1 + 24) = 0LL;
          uint64_t v14 = &v3[2 * ((int)((v2 + (((char)v2 >> 13) & 3)) << 24) >> 26)];
          uint64_t v15 = *(void *)&v14[22]._os_unfair_lock_opaque;
          if (v15) {
            uint64_t v16 = (uint64_t *)(v15 + 24);
          }
          else {
            uint64_t v16 = (uint64_t *)&v14[10];
          }
          *uint64_t v16 = v1;
          *(void *)&v14[22]._os_unfair_lock_opaque = v1;
          goto LABEL_18;
        }
      }
    }

    goto LABEL_18;
  }

  if (property_qos == 5 || property_qos == 9)
  {
    uint64_t v5 = 248;
    goto LABEL_5;
  }

  uint64_t v7 = (id)v22[5];
  uint64_t v8 = (id)v16[5];
  objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
  uint64_t v9 = [a2 cleanupHandler];
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = __73__NSItemProviderRepresentation_loadDataWithOptions_v2_completionHandler___block_invoke_4;
  block[3] = &unk_189CA3490;
  uint64_t v10 = *(void *)(a1 + 48);
  block[4] = a2;
  block[5] = v10;
  block[7] = &v21;
  block[8] = &v15;
  block[6] = v9;
  _NSIPDispatchAsyncCallback(block);
LABEL_6:

  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v21, 8);
}

    LOBYTE(v4) = 1;
  }

  return (char)v4;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = v3;
  uint64_t v8 = a3(0LL);
  MEMORY[0x1895F8858](v8);
  unint64_t v11 = (char *)&v62 - v10;
  uint64_t v12 = v5 + 64;
  uint64_t v13 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v14 = a2 & ~v13;
  if (((*(void *)(v5 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0) {
    return v14;
  }
  uint64_t v15 = ~v13;
  uint64_t v16 = *(void *)(v9 + 72);
  uint64_t v94 = ~v13;
  uint64_t v95 = v16;
  uint64_t v93 = &v133;
  while (1)
  {
    outlined init with copy of ICUNumberFormatter.Signature(*(void *)(v5 + 48) + v95 * v14, (uint64_t)v11, a3);
    specialized static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((uint64_t)v11, a1);
    if ((v17 & 1) == 0) {
      goto LABEL_6;
    }
    uint64_t v18 = *(int *)(v8 + 20);
    uint64_t v19 = *(void *)&v11[v18];
    uint64_t v20 = *(void *)&v11[v18 + 8];
    uint64_t v21 = (void *)(a1 + v18);
    BOOL v22 = v19 == *v21 && v20 == v21[1];
    if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_6;
    }
    outlined init with take of LocalePreferences?( (uint64_t)&v11[*(int *)(v8 + 24)],  (uint64_t)v134,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( a1 + *(int *)(v8 + 24),  (uint64_t)v135,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v134,  (uint64_t)v136,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v136) == 1)
    {
      outlined init with take of LocalePreferences?( (uint64_t)v135,  (uint64_t)v132,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      goto LABEL_4;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v134,  (uint64_t)&v124,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v135,  (uint64_t)v132,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    v96[6] = v130;
    v97[0] = v131[0];
    *(_OWORD *)((char *)v97 + 12) = *(_OWORD *)((char *)v131 + 12);
    v96[2] = v126;
    v96[3] = v127;
    v96[4] = v128;
    v96[5] = v129;
    v96[0] = v124;
    v96[1] = v125;
    outlined init with take of LocalePreferences?( (uint64_t)v134,  (uint64_t)v98,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v134,  (uint64_t)&v103,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences(&v103);
    outlined retain of LocalePreferences(v98);
    outlined release of LocalePreferences(v96);
LABEL_4:
    outlined init with take of LocalePreferences?( (uint64_t)v134,  (uint64_t)v132,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v135,  (uint64_t)v93,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v135,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v132);
LABEL_5:
    uint64_t v15 = v94;
LABEL_6:
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v11, a3);
    unint64_t v14 = (v14 + 1) & v15;
    if (((*(void *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0) {
      return v14;
    }
  }

  outlined init with take of LocalePreferences?( (uint64_t)v135,  (uint64_t)&v103,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  BOOL v23 = (uint64_t *)*((void *)&v124 + 1);
  uint64_t v92 = *((void *)&v125 + 1);
  uint64_t v88 = v126;
  uint64_t v90 = v125;
  uint64_t v91 = *((void *)&v126 + 1);
  uint64_t v89 = v127;
  id v85 = (id)v128;
  uint64_t v86 = *((void *)&v127 + 1);
  id v83 = (id)v129;
  id v84 = (id)*((void *)&v128 + 1);
  id v81 = (id)v130;
  id v82 = (id)*((void *)&v129 + 1);
  uint64_t v79 = *(void *)&v131[0];
  uint64_t v80 = *((void *)&v130 + 1);
  uint64_t v77 = *((void *)&v131[0] + 1);
  uint64_t v78 = *(void *)&v131[1];
  int v75 = BYTE9(v131[1]);
  int v76 = BYTE8(v131[1]);
  int v72 = BYTE11(v131[1]);
  int v73 = BYTE10(v131[1]);
  int v74 = v124;
  char v87 = (uint64_t *)*((void *)&v124 + 1);
  if (v124 != 2)
  {
LABEL_35:
    outlined init with take of LocalePreferences?( (uint64_t)v134,  (uint64_t)v96,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v134,  (uint64_t)v98,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences(v98);
    uint64_t v33 = v96;
    goto LABEL_36;
  }

LABEL_55:
    if (v92)
    {
      uint64_t v5 = v70;
      uint64_t v12 = v71;
      if (!v106 || (v90 != v105 || v92 != v106) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_84;
      }
    }

    else
    {
      uint64_t v5 = v70;
      uint64_t v12 = v71;
      if (v106) {
        goto LABEL_84;
      }
    }

    if (v91)
    {
      if (!v108 || (v88 != v107 || v91 != v108) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_84;
      }
    }

    else if (v108)
    {
      goto LABEL_84;
    }

    if (v89)
    {
      if (!v109 || (specialized static Dictionary<>.== infix(_:_:)(v89, v109) & 1) == 0) {
        goto LABEL_84;
      }
    }

    else if (v109)
    {
      goto LABEL_84;
    }

    if (v86)
    {
      if (v110 && (specialized static Dictionary<>.== infix(_:_:)(v86, v110) & 1) != 0)
      {
LABEL_79:
        uint64_t v71 = v12;
        id v38 = v111;
        if (v85)
        {
          if (!v111)
          {
            outlined retain of LocalePreferences?( (uint64_t)v134,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            char v42 = v134;
            id v43 = outlined copy of LocalePreferences?;
            goto LABEL_93;
          }

          id v68 = v113;
          id v69 = v112;
          id v66 = v115;
          uint64_t v67 = v114;
          type metadata accessor for CFDictionaryRef(0LL);
          uint64_t v65 = v39;
          outlined retain of LocalePreferences?( (uint64_t)v134,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?( (uint64_t)v134,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?( (uint64_t)v135,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          id v40 = v38;
          id v64 = v85;
          char v41 = static _CFObject.== infix(_:_:)();

          if ((v41 & 1) == 0)
          {
            char v42 = v135;
            id v43 = outlined consume of LocalePreferences?;
LABEL_93:
            outlined retain of LocalePreferences?( (uint64_t)v42,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))v43);
            goto LABEL_94;
          }
        }

        else
        {
          id v68 = v113;
          id v69 = v112;
          id v66 = v115;
          uint64_t v67 = v114;
          outlined retain of LocalePreferences?( (uint64_t)v134,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?( (uint64_t)v134,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          if (v38)
          {
LABEL_94:
            LOBYTE(v24) = 0;
            uint64_t v12 = v71;
            goto LABEL_38;
          }

          outlined retain of LocalePreferences?( (uint64_t)v135,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        }

        if (v84)
        {
          uint64_t v12 = v71;
          if (!v69) {
            goto LABEL_104;
          }
          id v46 = v69;
          type metadata accessor for CFDictionaryRef(0LL);
          uint64_t v65 = v47;
          id v64 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          id v69 = v46;
          id v63 = v84;
          LOBYTE(v46) = static _CFObject.== infix(_:_:)();
        }

        else
        {
          uint64_t v12 = v71;
          if (v69) {
            goto LABEL_104;
          }
        }

        if (v83)
        {
          uint64_t v24 = (uint64_t)v68;
          if (!v68)
          {
            outlined retain of LocalePreferences?( (uint64_t)v135,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
            goto LABEL_38;
          }

          type metadata accessor for CFDictionaryRef(0LL);
          id v69 = v48;
          uint64_t v65 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          id v68 = (id)v24;
          id v64 = v83;
          char v49 = static _CFObject.== infix(_:_:)();

          if ((v49 & 1) != 0)
          {
LABEL_99:
            uint64_t v70 = v5;
            if (v82)
            {
              char v50 = v67;
              if (!v67) {
                goto LABEL_138;
              }
              type metadata accessor for CFDictionaryRef(0LL);
              id v69 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              id v51 = v50;
              id v52 = v82;
              char v53 = static _CFObject.== infix(_:_:)();

              if ((v53 & 1) == 0) {
                goto LABEL_138;
              }
            }

            else if (v67)
            {
              goto LABEL_138;
            }

            if (v81)
            {
              if (!v66) {
                goto LABEL_138;
              }
              type metadata accessor for CFDictionaryRef(0LL);
              id v69 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              id v54 = v66;
              id v55 = v81;
              char v56 = static _CFObject.== infix(_:_:)();

              if ((v56 & 1) == 0) {
                goto LABEL_138;
              }
            }

            else if (v66)
            {
              goto LABEL_138;
            }

            uint64_t v24 = v116;
            if (v80)
            {
              if (!v116) {
                goto LABEL_121;
              }
              swift_bridgeObjectRetain();
              uint64_t v57 = swift_bridgeObjectRetain();
              char v58 = specialized static Dictionary<>.== infix(_:_:)(v57, v24);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v58 & 1) == 0) {
                goto LABEL_138;
              }
            }

            else if (v116)
            {
              goto LABEL_138;
            }

            uint64_t v24 = v117;
            if (!v79)
            {
              if (v117) {
                goto LABEL_138;
              }
LABEL_123:
              if (v78)
              {
                if (!v119 || (v77 != v118 || v78 != v119) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                {
LABEL_138:
                  id v36 = v135;
                  char v37 = outlined consume of LocalePreferences?;
LABEL_54:
                  outlined retain of LocalePreferences?( (uint64_t)v36,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))v37);
                  goto LABEL_43;
                }
              }

              else if (v119)
              {
                goto LABEL_138;
              }

              if (v76 == 2)
              {
                if (v120 != 2) {
                  goto LABEL_138;
                }
              }

              else if (v120 == 2 || ((v120 ^ v76) & 1) != 0)
              {
                goto LABEL_138;
              }

              int v61 = v121;
              if (v75 == 2)
              {
                outlined retain of LocalePreferences?( (uint64_t)v135,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                if (v61 == 2) {
                  goto LABEL_141;
                }
              }

              else
              {
                outlined retain of LocalePreferences?( (uint64_t)v135,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                if (v61 != 2 && ((v61 ^ v75) & 1) == 0)
                {
LABEL_141:
                  if (v73 == 2)
                  {
                    uint64_t v5 = v70;
                    uint64_t v12 = v71;
                    if (v122 != 2) {
                      goto LABEL_37;
                    }
                  }

                  else
                  {
                    LOBYTE(v24) = 0;
                    if (v122 == 2) {
                      goto LABEL_44;
                    }
                    uint64_t v5 = v70;
                    uint64_t v12 = v71;
                    if (((((v73 & 1) == 0) ^ v122) & 1) == 0) {
                      goto LABEL_38;
                    }
                  }

                  if (v72 == 2)
                  {
                    uint64_t v12 = v71;
                    if (v123 != 2) {
                      goto LABEL_37;
                    }
LABEL_151:
                    LOBYTE(v24) = 1;
                    goto LABEL_38;
                  }

                  LOBYTE(v24) = 0;
                  if (v123 != 2)
                  {
                    uint64_t v12 = v71;
                    if (((((v72 & 1) == 0) ^ v123) & 1) == 0) {
                      goto LABEL_38;
                    }
                    goto LABEL_151;
                  }

                  uint64_t v12 = v71;
LABEL_38:
                  LOBYTE(v98[0]) = v74;
                  v98[1] = v87;
                  v98[2] = v90;
                  v98[3] = v92;
                  v98[4] = v88;
                  v98[5] = v91;
                  v98[6] = v89;
                  v98[7] = v86;
                  v98[8] = v85;
                  v98[9] = v84;
                  v98[10] = v83;
                  v98[11] = v82;
                  v98[12] = v81;
                  v98[13] = v80;
                  v98[14] = v79;
                  v98[15] = v77;
                  v98[16] = v78;
                  char v99 = v76;
                  char v100 = v75;
                  char v101 = v73;
                  char v102 = v72;
                  outlined release of LocalePreferences(v98);
                  outlined retain of LocalePreferences?( (uint64_t)v134,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  if ((v24 & 1) != 0)
                  {
LABEL_154:
                    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v11, a3);
                    return v14;
                  }

                  goto LABEL_5;
                }
              }

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v24 = v27 | (v28 << 8);
  unint64_t v11 = v33;
LABEL_32:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v24, v14, v8, v11);
  uint64_t result = swift_unknownObjectRelease_n();
LABEL_33:
  if (v12 != v2[11]) {
    goto LABEL_62;
  }
  if (v14)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v25 = v2[8];
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v24, v25);
    swift_unknownObjectRelease();
  }

  uint64_t v26 = swift_bridgeObjectRetain();
  uint64_t v6 = specialized _NativeDictionary.filter(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return v6;
}

      char v27 = URLComponents._URLComponents.percentEncodedUser.getter();
      if (v28)
      {
        String.append(_:)(*(Swift::String *)&v27);
        swift_bridgeObjectRelease();
      }

      uint64_t v29 = *(void *)(v1 + 64);
      if (v29)
      {
        uint64_t v30 = *(void *)(v1 + 56);
        uint64_t v31 = *(void **)(v1 + 64);
      }

      else
      {
        if ((*(_BYTE *)(v1 + 11) & 1) == 0
          || (outlined init with take of LocalePreferences?( v1,  (uint64_t)v70,  &demangling cache variable for type metadata for URLParseInfo?),  outlined init with take of LocalePreferences?( (uint64_t)v70,  (uint64_t)&v78,  &demangling cache variable for type metadata for URLParseInfo?),  !v78)
          || (*(_BYTE *)(v78 + 96) & 1) != 0)
        {
LABEL_63:
          URLComponents._URLComponents.percentEncodedUser.getter();
          char v34 = v33;
          swift_bridgeObjectRelease();
          if (!(v34 | v29))
          {
            if ((*(_BYTE *)(v1 + 11) & 1) == 0
              || (outlined init with take of LocalePreferences?( v1,  (uint64_t)v69,  &demangling cache variable for type metadata for URLParseInfo?),  outlined init with take of LocalePreferences?( (uint64_t)v69,  (uint64_t)&v79,  &demangling cache variable for type metadata for URLParseInfo?),  !v79)
              || (*(_BYTE *)(v79 + 96) & 1) != 0)
            {
LABEL_68:
              id v36 = URLComponents._URLComponents.encodedHost.getter();
              if (v37)
              {
                String.append(_:)(*(Swift::String *)&v36);
                swift_bridgeObjectRelease();
              }

              id v38 = URLComponents._URLComponents.port.getter();
              if ((v39 & 1) != 0)
              {
                if ((*(_BYTE *)(v1 + 13) & 1) == 0
                  || (outlined init with take of LocalePreferences?( v1,  (uint64_t)v68,  &demangling cache variable for type metadata for URLParseInfo?),  outlined init with take of LocalePreferences?( (uint64_t)v68,  (uint64_t)&v80,  &demangling cache variable for type metadata for URLParseInfo?),  !v80)
                  || (*(_BYTE *)(v80 + 144) & 1) != 0)
                {
LABEL_76:
                  outlined init with take of LocalePreferences?( v1 + 104,  (uint64_t)v67,  &demangling cache variable for type metadata for String?);
                  outlined init with take of LocalePreferences?( (uint64_t)v67,  (uint64_t)&v81,  &demangling cache variable for type metadata for String?);
                  object = v81._object;
                  if (v81._object)
                  {
                    countAndFlagsBits = v81._countAndFlagsBits;
                  }

                  else if ((*(_BYTE *)(v1 + 14) & 1) != 0 {
                         && (outlined init with take of LocalePreferences?( v1,  (uint64_t)v66,  &demangling cache variable for type metadata for URLParseInfo?),  outlined init with take of LocalePreferences?( (uint64_t)v66,  (uint64_t)&v82,  &demangling cache variable for type metadata for URLParseInfo?),  v82))
                  }
                  {
                    if ((*(_BYTE *)(v82 + 168) & 1) != 0) {
                      id v43 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
                    }
                    else {
                      id v43 = String.subscript.getter();
                    }
                    countAndFlagsBits = MEMORY[0x186E1B610](v43);
                    object = v49;
                    swift_bridgeObjectRelease();
                  }

                  else
                  {
                    countAndFlagsBits = 0LL;
                    object = (void *)0xE000000000000000LL;
                  }

                  outlined retain of String?((uint64_t)v67);
                  v50._countAndFlagsBits = countAndFlagsBits;
                  v50._object = object;
                  String.append(_:)(v50);
                  swift_bridgeObjectRelease();
                  if (*(void *)(v1 + 128))
                  {
                    id v51 = *(void *)(v1 + 120);
                    id v52 = *(void **)(v1 + 128);
                  }

                  else
                  {
                    if ((*(_BYTE *)(v1 + 15) & 1) == 0
                      || (outlined init with take of LocalePreferences?( v1,  (uint64_t)v65,  &demangling cache variable for type metadata for URLParseInfo?),  outlined init with take of LocalePreferences?( (uint64_t)v65,  (uint64_t)&v83,  &demangling cache variable for type metadata for URLParseInfo?),  !v83)
                      || (*(_BYTE *)(v83 + 192) & 1) != 0)
                    {
LABEL_94:
                      id v55 = *(void **)(v1 + 144);
                      if (v55)
                      {
                        char v56 = *(void *)(v1 + 136);
                        uint64_t v57 = v55;
                      }

                      else
                      {
                        if ((*(_BYTE *)(v1 + 16) & 1) == 0) {
                          return 0LL;
                        }
                        outlined init with take of LocalePreferences?( v1,  (uint64_t)v64,  &demangling cache variable for type metadata for URLParseInfo?);
                        outlined init with take of LocalePreferences?( (uint64_t)v64,  (uint64_t)&v84,  &demangling cache variable for type metadata for URLParseInfo?);
                        if (!v84 || (*(_BYTE *)(v84 + 216) & 1) != 0) {
                          return 0LL;
                        }
                        uint64_t v62 = String.subscript.getter();
                        char v56 = MEMORY[0x186E1B610](v62);
                        uint64_t v57 = v63;
                        swift_bridgeObjectRelease();
                      }

                      swift_bridgeObjectRetain();
                      v58._countAndFlagsBits = v56;
                      v58._object = v57;
                      String.append(_:)(v58);
                      swift_bridgeObjectRelease();
                      v59._countAndFlagsBits = 35LL;
                      v59._object = (void *)0xE100000000000000LL;
                      String.append(_:)(v59);
                      swift_bridgeObjectRelease();
                      return 0LL;
                    }

                    char v60 = String.subscript.getter();
                    id v51 = MEMORY[0x186E1B610](v60);
                    id v52 = v61;
                    swift_bridgeObjectRelease();
                  }

                  swift_bridgeObjectRetain();
                  v53._countAndFlagsBits = v51;
                  v53._object = v52;
                  String.append(_:)(v53);
                  swift_bridgeObjectRelease();
                  v54._countAndFlagsBits = 63LL;
                  v54._object = (void *)0xE100000000000000LL;
                  String.append(_:)(v54);
                  swift_bridgeObjectRelease();
                  goto LABEL_94;
                }

                uint64_t v44 = String.subscript.getter();
                v81._countAndFlagsBits = 58LL;
                v81._object = (void *)0xE100000000000000LL;
                v45._countAndFlagsBits = MEMORY[0x186E1B610](v44);
                String.append(_:)(v45);
                swift_bridgeObjectRelease();
              }

              else
              {
                v81._countAndFlagsBits = 58LL;
                v81._object = (void *)0xE100000000000000LL;
                v67[0] = v38;
                v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v40);
              }

              swift_bridgeObjectRelease();
              String.append(_:)(v81);
              swift_bridgeObjectRelease();
              goto LABEL_76;
            }

            char v48 = String.subscript.getter();
            MEMORY[0x186E1B610](v48);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }

          v35._countAndFlagsBits = 64LL;
          v35._object = (void *)0xE100000000000000LL;
          String.append(_:)(v35);
          goto LABEL_68;
        }

        id v46 = String.subscript.getter();
        uint64_t v30 = MEMORY[0x186E1B610](v46);
        uint64_t v31 = v47;
        swift_bridgeObjectRelease();
      }

      v81._countAndFlagsBits = 58LL;
      v81._object = (void *)0xE100000000000000LL;
      swift_bridgeObjectRetain();
      v32._countAndFlagsBits = v30;
      v32._object = v31;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      String.append(_:)(v81);
      swift_bridgeObjectRelease();
      goto LABEL_63;
    }

    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }

  __break(1u);
  return result;
}

        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }

    swift_bridgeObjectRelease();
    *(_DWORD *)v173 = v71;
    *(_WORD *)&v173[4] = v72;
    *(_WORD *)&v173[6] = v6;
    *(_WORD *)&v173[8] = v172;
    *(_WORD *)&v173[10] = v171;
    *(_WORD *)&v173[12] = v169;
    *(_WORD *)&v173[14] = v167;
    *(_WORD *)&v173[16] = (_WORD)v168;
    *(_WORD *)&v173[18] = v166;
    NSDecimal.copyVariableLengthInteger(_:)(v5);
    v170 = v80;
    if (v80) {
      break;
    }
    id v81 = *((void *)v5._rawValue + 2);
    swift_bridgeObjectRelease();
    if (HIDWORD(v81)) {
      goto LABEL_142;
    }
    _So9NSDecimala__length_setter(v81, v173);
    *(_DWORD *)v176 = *(_DWORD *)v173;
    *(_OWORD *)&v176[4] = *(_OWORD *)&v173[4];
    *(void *)v173 = v3 | 0x30;
    v82._countAndFlagsBits = MEMORY[0x186E1B6AC](v173, 1LL);
    String.append(_:)(v82);
    swift_bridgeObjectRelease();
    LODWORD(v5._rawValue) = *(_DWORD *)v176;
    v171 = *(unsigned __int16 *)&v176[6];
    v172 = *(unsigned __int16 *)&v176[4];
    LOWORD(v4) = *(_WORD *)&v176[8];
    id v64 = *(unsigned __int16 *)&v176[10];
    LOWORD(v6) = *(_WORD *)&v176[12];
    LOWORD(v7) = *(_WORD *)&v176[14];
    LOWORD(v3) = *(_WORD *)&v176[16];
    LOWORD(v61) = *(_WORD *)&v176[18];
    *(_DWORD *)v173 = *(_DWORD *)v176;
    *(_WORD *)&v173[4] = *(_WORD *)&v176[4];
    *(_WORD *)&v173[6] = *(_WORD *)&v176[6];
    *(_WORD *)&v173[8] = *(_WORD *)&v176[8];
    *(_WORD *)&v173[10] = *(_WORD *)&v176[10];
    *(_WORD *)&v173[12] = *(_WORD *)&v176[12];
    *(_WORD *)&v173[14] = *(_WORD *)&v176[14];
    *(_WORD *)&v173[16] = *(_WORD *)&v176[16];
    *(_WORD *)&v173[18] = *(_WORD *)&v176[18];
    id v83 = _So9NSDecimala__length_getter(v173);
    id v68 = v171;
    uint64_t v67 = v172;
    if (!v83) {
      goto LABEL_111;
    }
  }

    uint64_t v71 = (v80 - 1) & v80;
    uint64_t v90 = v81;
    int v74 = __clz(__rbit64(v80)) + (v81 << 6);
LABEL_30:
    int v76 = *(void *)(v75 + 72) * v74;
    outlined init with copy of ICUNumberFormatter.Signature( *(void *)(v53 + 48) + v76,  v72,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    uint64_t v77 = 8 * v74;
    uint64_t v78 = *(void *)(*(void *)(v53 + 56) + 8 * v74);
    outlined init with take of ICUNumberFormatter.Signature( v72,  *(void *)(v60 + 48) + v76,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(void *)(*(void *)(v60 + 56) + v77) = v78;
    swift_retain();
  }

  id v82 = v90 + 9;
  if (v90 + 9 >= v88) {
    goto LABEL_56;
  }
  uint64_t v80 = *(void *)&v89[8 * v82];
  if (v80)
  {
    id v81 = v90 + 9;
    int v75 = v100;
    goto LABEL_55;
  }

  while (1)
  {
    id v81 = v82 + 1;
    if (__OFADD__(v82, 1LL)) {
      break;
    }
    int v75 = v100;
    if (v81 >= v88) {
      goto LABEL_56;
    }
    uint64_t v80 = *(void *)&v89[8 * v81];
    ++v82;
    if (v80) {
      goto LABEL_55;
    }
  }

    id v43 = (v54 - 1) & v54;
    id v46 = __clz(__rbit64(v54)) + (v40 << 6);
LABEL_34:
    uint64_t v47 = 16 * v46;
    char v48 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v46);
    char v50 = *v48;
    char v49 = v48[1];
    id v51 = 32 * v46;
    outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v46, (uint64_t)&v64);
    id v52 = (void *)(*(void *)(v13 + 48) + v47);
    *id v52 = v50;
    v52[1] = v49;
    outlined init with take of Any(&v64, (_OWORD *)(*(void *)(v13 + 56) + v51));
    swift_bridgeObjectRetain();
  }

  id v55 = v53 + 6;
  if (v55 >= v44) {
    goto LABEL_56;
  }
  id v54 = *(void *)(v60 + 8 * v55);
  if (v54)
  {
    id v40 = v55;
    goto LABEL_55;
  }

  while (1)
  {
    id v40 = v55 + 1;
    if (__OFADD__(v55, 1LL)) {
      break;
    }
    if (v40 >= v44) {
      goto LABEL_56;
    }
    id v54 = *(void *)(v60 + 8 * v40);
    ++v55;
    if (v54) {
      goto LABEL_55;
    }
  }

    __break(1u);
    goto LABEL_56;
  }

  uint64_t v31 = *(void (**)(char *, uint64_t))(v14 + 8);
  v31(v25, v13);
  v31(v23, v13);
  uint64_t v32 = v99;
  char v34 = v99[18];
  uint64_t v33 = v99[19];
  uint64_t v35 = v96;
  id v36 = v96 >> 62;
  v99[18] = v96;
  if (v35 >> 62)
  {
    char v37 = v100;
    if ((_DWORD)v36 != 1)
    {
      id v38 = 0LL;
      goto LABEL_30;
    }

    id v38 = *(void *)(v35 + 32);
    swift_retain();
  }

  else
  {
    id v38 = *(void *)(v35 + 64);
    swift_retain();
    char v37 = v100;
  }

          uint64_t v16 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          goto LABEL_56;
        }
      }

      id v84 = 0LL;
      id v85 = v92;
      if (!v16) {
        goto LABEL_56;
      }
      goto LABEL_55;
    }

    __break(1u);
  }

  else
  {
    BOOL v22 = a5;
    BOOL v23 = a7;
    CocoaError.Code.init(fileErrno:reading:)(fileErrno, a3 & 1);
    uint64_t v21 = (uint64_t (*)(void))v100;
    if (v15 == 102)
    {
      uint64_t v24 = 0LL;
      goto LABEL_32;
    }
  }

  uint64_t v94 = a6;
  uint64_t v95 = a8;
  a6 = (uint64_t)v17;
  uint64_t v91 = v16;
  if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
    char v34 = (int)POSIXErrorCode.rawValue.getter();
    uint64_t v35 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    id v36 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v24 = objc_msgSend(v35, sel_initWithDomain_code_userInfo_, v36, v34, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    char v37 = objc_msgSend(v24, sel_domain);
    id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    id v40 = v39;

    if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v40 == v41)
    {
      swift_bridgeObjectRelease_n();
      char v17 = (void *)a6;
    }

    else
    {
      id v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v17 = (void *)a6;
      if ((v43 & 1) == 0)
      {
        __break(1u);
LABEL_20:
        swift_bridgeObjectRelease_n();
        uint64_t v16 = v17;
        uint64_t v21 = v99;
        goto LABEL_21;
      }
    }

    a6 = v94;
    a8 = v95;
    uint64_t v16 = v91;
LABEL_32:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of PathOrURL(v17, v98, (uint64_t)v99, 0);
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( v21,  (uint64_t)v17,  v98,  v24,  a4,  v22,  a6,  v23,  (void *(*)(void *__return_ptr, void *, uint64_t))v97,  (uint64_t)a8,  (uint64_t)v16);
    return;
  }

  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease();
  v103._countAndFlagsBits = 0xD000000000000014LL;
  v103._object = (void *)0x80000001839C9190LL;
  LODWORD(v105) = v15;
LABEL_63:
  v87._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v87);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

          __break(1u);
          goto LABEL_56;
        }

        if (__OFADD__(v20, 1LL)) {
          goto LABEL_49;
        }
        if (&v12[++v20] >= v10) {
          goto LABEL_50;
        }
      }

      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      LOBYTE(v8) = 46;
LABEL_52:
      BOOL v23 = (char *)&v12[v20];
      char v28 = 0xE900000000000072LL;
      uint64_t v29 = 0x65626D756E206E69LL;
      goto LABEL_53;
    }

      __break(1u);
      goto LABEL_56;
    }

          __break(1u);
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }

      __break(1u);
    }
  }

  else
  {
    uint64_t v18 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v18, v12, 1, a1, a2);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      MEMORY[0x186E20E60](v18, -1LL, -1LL);
      goto LABEL_35;
    }

    char v17 = opendir(v18);
    MEMORY[0x186E20E60](v18, -1LL, -1LL);
    if (!v17) {
      goto LABEL_35;
    }
  }

  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 16) = v17;
  *(_BYTE *)(v5 + 56) = a3 & 1;
  uint64_t v21 = *(void *)(a4 + 16);
  if (v21)
  {
    swift_bridgeObjectRetain();
    v56[1] = a4;
    BOOL v22 = (unint64_t *)(a4 + 40);
    BOOL v23 = (void *)MEMORY[0x18961AFE8];
    do
    {
      uint64_t v25 = *(v22 - 1);
      uint64_t v26 = *v22;
      char v27 = HIBYTE(*v22) & 0xF;
      if ((*v22 & 0x2000000000000000LL) == 0) {
        char v27 = v25 & 0xFFFFFFFFFFFFLL;
      }
      if (v27)
      {
        swift_bridgeObjectRetain_n();
        String.index(before:)();
        char v28 = String.subscript.getter();
        uint64_t v30 = v29;
        swift_bridgeObjectRelease();
        if (v28 == 47 && v30 == 0xE100000000000000LL)
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v32 & 1) == 0)
          {
            char v58 = v25;
            uint64_t v59 = v26;
            swift_bridgeObjectRetain();
            v33._countAndFlagsBits = 47LL;
            v33._object = (void *)0xE100000000000000LL;
            String.append(_:)(v33);
            swift_bridgeObjectRelease();
            uint64_t v25 = v58;
            uint64_t v26 = v59;
          }
        }

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          BOOL v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v23[2] + 1LL,  1,  v23);
        }
        uint64_t v35 = v23[2];
        char v34 = v23[3];
        if (v35 >= v34 >> 1) {
          BOOL v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v34 > 1),  v35 + 1,  1,  v23);
        }
        v23[2] = v35 + 1;
        uint64_t v24 = &v23[2 * v35];
        v24[4] = v25;
        v24[5] = v26;
      }

      v22 += 2;
      --v21;
    }

    while (v21);
    swift_bridgeObjectRelease();
  }

  else
  {
    BOOL v23 = (void *)MEMORY[0x18961AFE8];
  }

  swift_bridgeObjectRelease();
  char v58 = (unint64_t)v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  char v41 = BidirectionalCollection<>.joined(separator:)();
  id v43 = v42;
  swift_bridgeObjectRelease();
  *(void *)(v5 + 40) = v41;
  *(void *)(v5 + 48) = v43;
  return v5;
}

        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }

  __break(1u);
LABEL_56:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_56:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_56:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

      outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      uint64_t v26 = v109;
      char v27 = outlined copy of LocalePreferences?;
LABEL_56:
      outlined retain of LocalePreferences?( (uint64_t)v26,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))v27);
LABEL_59:
      LOBYTE(v24) = 0;
      goto LABEL_60;
    }
  }

  return result;
}

  __break(1u);
LABEL_56:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

          char v58 = (4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C;
          id v55 = ((-15LL << v58) - 1) & v55 | (v60 << v58);
          uint64_t v59 = *(void *)(v57 + 24 + 24 * v60);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v57 = v59;
          if (!*(_BYTE *)(v59 + 18)) {
            goto LABEL_80;
          }
        }
      }

      swift_unknownObjectRetain_n();
      swift_retain();
      uint64_t result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v263);
      char v56 = v230;
      uint64_t v59 = v51;
LABEL_80:
      uint64_t v71 = *(unsigned __int16 *)(v59 + 16);
      v215 = v59;
      if ((_DWORD)v71)
      {
        int v72 = *(void *)(v59 + 24);
        uint64_t v26 = __OFSUB__(v56, v72);
        int v73 = v56 - v72;
        uint64_t v44 = v208;
        if (v26)
        {
LABEL_278:
          __break(1u);
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
          goto LABEL_281;
        }

        if (__OFADD__(v73, 1LL)) {
          goto LABEL_279;
        }
        if (v73 + 1 < 1)
        {
          uint64_t v71 = 0LL;
        }

        else
        {
          if ((_DWORD)v71 == 1)
          {
            char v56 = v73;
            goto LABEL_102;
          }

          uint64_t v77 = (uint64_t *)(v215 + 48);
          uint64_t v78 = 1LL;
          while (1)
          {
            uint64_t v79 = *v77;
            v77 += 3;
            char v56 = v73 - v79;
            if (__OFSUB__(v73, v79)) {
              goto LABEL_270;
            }
            if (__OFADD__(v56, 1LL)) {
              goto LABEL_271;
            }
            if (v56 + 1 < 1) {
              break;
            }
            ++v78;
            int v73 = v56;
            if (v71 == v78) {
              goto LABEL_102;
            }
          }

          uint64_t v71 = v78;
          char v56 = v73;
        }

          uint64_t v62 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C;
          uint64_t v59 = ((-15LL << v62) - 1) & v59 | (v64 << v62);
          id v63 = *(void *)(v61 + 24 + 24 * v64);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          int v61 = v63;
          if (!*(_BYTE *)(v63 + 18)) {
            goto LABEL_80;
          }
        }
      }

      swift_unknownObjectRetain_n();
      swift_retain();
      uint64_t result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v292);
      char v60 = v264;
      id v63 = v56;
LABEL_80:
      int v76 = *(unsigned __int16 *)(v63 + 16);
      *(void *)&v253 = v63;
      if ((_DWORD)v76)
      {
        uint64_t v77 = *(void *)(v63 + 24);
        uint64_t v31 = __OFSUB__(v60, v77);
        uint64_t v78 = v60 - v77;
        uint64_t v39 = (uint64_t)v258;
        if (v31)
        {
LABEL_301:
          __break(1u);
LABEL_302:
          __break(1u);
LABEL_303:
          __break(1u);
          goto LABEL_304;
        }

        if (__OFADD__(v78, 1LL)) {
          goto LABEL_302;
        }
        if (v78 + 1 < 1)
        {
          int v76 = 0LL;
        }

        else
        {
          if ((_DWORD)v76 == 1)
          {
            char v60 = v78;
            goto LABEL_102;
          }

          id v82 = (uint64_t *)(v253 + 48);
          id v83 = 1LL;
          while (1)
          {
            id v84 = *v82;
            v82 += 3;
            char v60 = v78 - v84;
            if (__OFSUB__(v78, v84)) {
              goto LABEL_293;
            }
            if (__OFADD__(v60, 1LL)) {
              goto LABEL_294;
            }
            if (v60 + 1 < 1) {
              break;
            }
            ++v83;
            uint64_t v78 = v60;
            if (v76 == v83) {
              goto LABEL_102;
            }
          }

          int v76 = v83;
          char v60 = v78;
        }

          char v60 = (4 * *(_BYTE *)(v59 + 18) + 8) & 0x3C;
          uint64_t v57 = ((-15LL << v60) - 1) & v57 | (v62 << v60);
          int v61 = *(void *)(v59 + 24 + 24 * v62);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v59 = v61;
          if (!*(_BYTE *)(v61 + 18)) {
            goto LABEL_80;
          }
        }
      }

      swift_unknownObjectRetain_n();
      swift_retain();
      uint64_t result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v305);
      char v58 = v273;
      int v61 = v52;
LABEL_80:
      int v76 = *(unsigned __int16 *)(v61 + 16);
      *(void *)&v268 = v61;
      if ((_DWORD)v76)
      {
        uint64_t v77 = *(void *)(v61 + 24);
        uint64_t v29 = __OFSUB__(v58, v77);
        uint64_t v78 = &v58[-v77];
        id v51 = v267;
        if (v29)
        {
LABEL_304:
          __break(1u);
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
          goto LABEL_307;
        }

        if (__OFADD__(v78, 1LL)) {
          goto LABEL_305;
        }
        if ((uint64_t)(v78 + 1) < 1)
        {
          int v76 = 0LL;
        }

        else
        {
          if ((_DWORD)v76 == 1)
          {
            char v58 = v78;
            goto LABEL_102;
          }

          id v82 = (uint64_t *)(v268 + 48);
          id v83 = 1LL;
          while (1)
          {
            id v84 = *v82;
            v82 += 3;
            char v58 = &v78[-v84];
            if (__OFSUB__(v78, v84)) {
              goto LABEL_296;
            }
            if (__OFADD__(v58, 1LL)) {
              goto LABEL_297;
            }
            ++v83;
            uint64_t v78 = v58;
            if (v76 == v83) {
              goto LABEL_102;
            }
          }

          int v76 = v83;
          char v58 = v78;
        }

          uint64_t v62 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C;
          char v60 = ((-15LL << v62) - 1) & v60 | (v64 << v62);
          id v63 = *(void *)(v61 + 24 + 24 * v64);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          int v61 = v63;
          if (!*(_BYTE *)(v63 + 18)) {
            goto LABEL_80;
          }
        }
      }

      swift_unknownObjectRetain_n();
      swift_retain();
      uint64_t result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v324);
      id v63 = v55;
LABEL_80:
      uint64_t v77 = *(unsigned __int16 *)(v63 + 16);
      if (*(_WORD *)(v63 + 16))
      {
        uint64_t v78 = *(void *)(v63 + 24);
        uint64_t v31 = __OFSUB__(v59, v78);
        uint64_t v79 = &v59[-v78];
        char v56 = (uint64_t)v296;
        if (v31)
        {
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
          goto LABEL_319;
        }

        if (__OFADD__(v79, 1LL)) {
          goto LABEL_317;
        }
        if ((uint64_t)(v79 + 1) < 1)
        {
          uint64_t v77 = 0LL;
        }

        else
        {
          if ((_DWORD)v77 == 1)
          {
            uint64_t v59 = v79;
            goto LABEL_102;
          }

          id v83 = (uint64_t *)(v63 + 48);
          id v84 = 1LL;
          while (1)
          {
            id v85 = *v83;
            v83 += 3;
            uint64_t v59 = &v79[-v85];
            if (__OFSUB__(v79, v85)) {
              goto LABEL_308;
            }
            if (__OFADD__(v59, 1LL)) {
              goto LABEL_309;
            }
            ++v84;
            uint64_t v79 = v59;
            if (v77 == v84) {
              goto LABEL_102;
            }
          }

          uint64_t v77 = v84;
          uint64_t v59 = v79;
        }

      char v56 = (4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C;
      char v53 = ((-15LL << v56) - 1) & v53 | (v58 << v56);
      uint64_t v57 = *(void *)(v55 + 24 + 24 * v58);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      id v55 = v57;
      if (!*(_BYTE *)(v57 + 18)) {
        goto LABEL_80;
      }
    }
  }

  swift_unknownObjectRetain_n();
  swift_retain();
  outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)&v221);
  id v54 = v188;
  uint64_t v57 = v48;
LABEL_80:
  uint64_t v70 = *(unsigned __int16 *)(v57 + 16);
  id v64 = v57;
  if (*(_WORD *)(v57 + 16))
  {
    uint64_t v71 = *(void *)(v57 + 24);
    uint64_t v25 = __OFSUB__(v54, v71);
    int v72 = v54 - v71;
    uint64_t v33 = v184;
    if (v25)
    {
LABEL_234:
      __break(1u);
      goto LABEL_235;
    }

    if (__OFADD__(v72, 1LL))
    {
LABEL_235:
      __break(1u);
      goto LABEL_236;
    }

    if (v72 + 1 < 1)
    {
      uint64_t v70 = 0LL;
LABEL_103:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v189 = v53 & 0xFFFFFFFFFFFFF0FFLL | (v70 << 8);
      char v50 = v173;
      id v52 = v188;
      goto LABEL_71;
    }

    if ((_DWORD)v70 != 1)
    {
      int v76 = (uint64_t *)(v57 + 48);
      uint64_t v77 = 1LL;
      while (1)
      {
        uint64_t v78 = *v76;
        v76 += 3;
        id v54 = v72 - v78;
        if (__OFSUB__(v72, v78)) {
          goto LABEL_228;
        }
        if (__OFADD__(v54, 1LL)) {
          goto LABEL_229;
        }
        if (v54 + 1 < 1) {
          break;
        }
        ++v77;
        int v72 = v54;
        if (v70 == v77) {
          goto LABEL_102;
        }
      }

      uint64_t v70 = v77;
      id v54 = v72;
      goto LABEL_103;
    }

    id v54 = v72;
  }

  else
  {
    uint64_t v33 = v184;
  }

  BOOL v23 = v3;
  LOWORD(v8) = 0;
LABEL_37:
  uint64_t v16 = v23;
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0) {
    goto LABEL_49;
  }
LABEL_38:
  char v17 = 0;
  return (unsigned __int16)v8 | (v17 << 16);
}

      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v31 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v14[2] + 1LL,  1,  v14);
        }
        uint64_t v33 = v14[2];
        uint64_t v32 = v14[3];
        if (v33 >= v32 >> 1) {
          unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v32 > 1),  v33 + 1,  1,  v14);
        }
        v14[2] = v33 + 1;
        char v34 = &v14[2 * v33];
        uint64_t v13 = v31;
        v34[4] = v31;
        v34[5] = v11;
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }

          v51(v52, v8);
          uint64_t v80 = type metadata accessor for DecodingError();
          swift_allocError();
          id v82 = v81;
          *(void *)&uint64_t v98 = 0LL;
          *((void *)&v98 + 1) = 0xE000000000000000LL;
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(52LL);
          v83._countAndFlagsBits = 0xD00000000000001DLL;
          v83._object = (void *)0x80000001839D13E0LL;
          String.append(_:)(v83);
          __swift_project_boxed_opaque_existential_1(v102, v103);
          v84._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v4 = &v98;
          String.append(_:)(v84);
          swift_bridgeObjectRelease();
          v85._object = (void *)0x80000001839D1400LL;
          v85._countAndFlagsBits = 0xD000000000000012LL;
          String.append(_:)(v85);
          v86._countAndFlagsBits = 7630409LL;
          v86._object = (void *)0xE300000000000000LL;
          String.append(_:)(v86);
          v87._countAndFlagsBits = 46LL;
          v87._object = (void *)0xE100000000000000LL;
          String.append(_:)(v87);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v80 - 8) + 104LL))( v82,  *MEMORY[0x189619360],  v80);
          goto LABEL_56;
        }

          v51(v52, v8);
          uint64_t v80 = type metadata accessor for DecodingError();
          swift_allocError();
          id v82 = v81;
          *(void *)&uint64_t v98 = 0LL;
          *((void *)&v98 + 1) = 0xE000000000000000LL;
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(52LL);
          v83._countAndFlagsBits = 0xD00000000000001DLL;
          v83._object = (void *)0x80000001839D13E0LL;
          String.append(_:)(v83);
          __swift_project_boxed_opaque_existential_1(v102, v103);
          v84._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v4 = &v98;
          String.append(_:)(v84);
          swift_bridgeObjectRelease();
          v85._object = (void *)0x80000001839D1400LL;
          v85._countAndFlagsBits = 0xD000000000000012LL;
          String.append(_:)(v85);
          v86._countAndFlagsBits = 0x3436746E49LL;
          v86._object = (void *)0xE500000000000000LL;
          String.append(_:)(v86);
          v87._countAndFlagsBits = 46LL;
          v87._object = (void *)0xE100000000000000LL;
          String.append(_:)(v87);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v80 - 8) + 104LL))( v82,  *MEMORY[0x189619360],  v80);
          goto LABEL_56;
        }

        __break(1u);
        goto LABEL_56;
      }

      uint64_t v15 = 0;
      unint64_t v14 = 0xFFFFFFFF80000000LL;
    }

            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v52, v30);
            char v60 = v64;
            int v61 = v65;
            swift_unknownObjectRelease();
LABEL_56:
            if ((specialized static Dictionary<>.== infix(_:_:)(v60, v54) & 1) != 0)
            {
              id v66 = specialized static Set.== infix(_:_:)(v61, v55);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v66 & 1) == 0) {
                goto LABEL_67;
              }
              uint64_t v67 = specialized Rope._remove(at:)((uint64_t)&v103, v33, v52);
              id v68 = *v96;
              id v69 = v96[3];
              if (v67 < specialized Rope._endPath.getter(*v96) && *(_BYTE *)(v68 + 18))
              {
                uint64_t v70 = (v67 >> ((4 * *(_BYTE *)(v68 + 18) + 8) & 0x3C)) & 0xF;
                swift_unknownObjectRetain();
                specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v68 + 24, v70, v67);
                swift_unknownObjectRelease();
              }

              uint64_t v71 = v103;
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              if (!v68) {
                goto LABEL_101;
              }
              uint64_t result = specialized Rope._Node._prepareModify(at:)(v67, (uint64_t)&v103);
              uint64_t v97 = v103;
              uint64_t v98 = v104;
              char v99 = v105;
              if (__OFADD__(*((void *)&v103 + 1), v71))
              {
LABEL_100:
                __break(1u);
LABEL_101:
                __break(1u);
                goto LABEL_102;
              }

              *((void *)&v97 + 1) = *((void *)&v103 + 1) + v71;
              v96[3] = v69 + 1;
              if (!*v96)
              {
LABEL_102:
                __break(1u);
                return result;
              }

              specialized Rope._Node._finalizeModify(_:)(&v101, &v97);
              swift_bridgeObjectRelease();
            }

            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            swift_bridgeObjectRelease();
            goto LABEL_67;
          }

  uint64_t result = (uint64_t)specialized closure #2 in Rope.builder<A>(removing:in:)( (unsigned __int16 *)(v7 + 16),  (void *)(v7 + 24),  &v47,  v10,  a2);
  uint64_t v30 = result;
  uint64_t v31 = v27;
  uint64_t v32 = v28;
  uint64_t v33 = v49;
  char v34 = v50;
  if (result >= a3)
  {
    swift_unknownObjectRetain();
    uint64_t result = specialized Rope._Node._leafSplit(at:into:)(v30, (uint64_t)&v51, v7, v33, v34);
    if (v32 < 0) {
      goto LABEL_83;
    }
    uint64_t v39 = result - v32;
    if (result < v32) {
      goto LABEL_83;
    }
    id v40 = v37;
    char v41 = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = specialized Rope.Builder._insertAfterTip(_:)(v39, v40, v41);
    if (v31 < 0 || v32 < v31)
    {
LABEL_84:
      __break(1u);
    }

    else
    {
      if (v31)
      {
        char v42 = *((void *)&v53 + 1);
        id v43 = v54;
        *((void *)&v53 + 1) = 0LL;
        id v54 = 0uLL;
        if ((void)v43)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized Rope.Builder._appendNow(_:)(v42, v43, *((uint64_t *)&v43 + 1));
          outlined consume of Rope<AttributedString._InternalRun>._Item?(*((uint64_t *)&v53 + 1), v54);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t result = swift_unknownObjectRelease();
        }
      }

      else
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v31 = *((void *)&v53 + 1);
        char v41 = *((void *)&v54 + 1);
        id v40 = v54;
      }

      uint64_t v44 = v53;
      char v45 = v56;
      id v46 = v57;
      *(void *)a4 = v51;
      *(_OWORD *)(a4 + 8) = v52;
      *(void *)(a4 + 24) = v44;
      *(void *)(a4 + 32) = v31;
      *(void *)(a4 + 40) = v40;
      *(void *)(a4 + 48) = v41;
      *(_OWORD *)(a4 + 56) = v55;
      *(void *)(a4 + 72) = v45;
      *(void *)(a4 + 80) = v46;
    }
  }

  else
  {
    uint64_t v29 = v7;
LABEL_57:
    uint64_t result = specialized Rope._Node._removeSubrange<A>(from:to:in:into:)(result, v27, a3, v28, &v51, v29);
    uint64_t v35 = v56;
    id v36 = v57;
    *(void *)a4 = v51;
    *(_OWORD *)(a4 + 8) = v52;
    *(_OWORD *)(a4 + 24) = v53;
    *(_OWORD *)(a4 + 40) = v54;
    *(_OWORD *)(a4 + 56) = v55;
    *(void *)(a4 + 72) = v35;
    *(void *)(a4 + 80) = v36;
  }

  return result;
}

  uint64_t v5 = 0LL;
LABEL_56:
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v26 = v8 | (v5 << 8);
  uint64_t v8 = (unint64_t)v40;
  if (v12)
  {
LABEL_36:
    swift_unknownObjectRetain();
    uint64_t v5 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v3, v26, v6, v12, v8);
    uint64_t result = swift_unknownObjectRelease_n();
    uint64_t v30 = v14 - v4;
    if (__OFSUB__(v14, v4)) {
      goto LABEL_67;
    }
    goto LABEL_58;
  }

    swift_release();
    swift_bridgeObjectRelease();
    return v56;
  }

  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

          v337._nsError._reserved = v28 + 1;
LABEL_60:
          __dst[0] = *(_OWORD *)&v337._nsError._domain;
          __dst[1] = v338;
          *(void *)&__dst[2] = v339;
          __tp.tv_sec = 0LL;
          __tp.tv_nsec = 0LL;
          clock_gettime(_CLOCK_REALTIME, &__tp);
          *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
          int v72 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
          *(void *)&__dst[0] = 0LL;
          *((void *)&__dst[0] + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(88LL);
          v73._countAndFlagsBits = 0x7020746F6E6E6143LL;
          v73._object = (void *)0xED00002065737261LL;
          String.append(_:)(v73);
          v74._countAndFlagsBits = a1;
          v74._object = a2;
          String.append(_:)(v74);
          v75._object = (void *)0x80000001839CAB20LL;
          v75._countAndFlagsBits = 0xD000000000000046LL;
          String.append(_:)(v75);
          String.append(_:)(v72);
          v76._countAndFlagsBits = 46LL;
          v76._object = (void *)0xE100000000000000LL;
          String.append(_:)(v76);
          uint64_t v77 = __dst[0];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
          uint64_t v78 = swift_allocObject();
          uint64_t v79 = specialized static Array._adoptStorage(_:count:)(v78, 1LL);
          id v81 = v80;
          *uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
          v81[1] = v82;
          v81[5] = (id)MEMORY[0x189617FA8];
          *((_OWORD *)v81 + 1) = v77;
          id v83 = destructiveProjectEnumData for PredicateCodableError(v79, v82);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          id v84 = (void *)static _DictionaryStorage.allocate(capacity:)();
          outlined init with copy of (String, Any)(v83 + 32, (uint64_t)__dst);
          id v85 = __dst[0];
          swift_retain();
          uint64_t v86 = specialized __RawDictionaryStorage.find<A>(_:)(v85, *((uint64_t *)&v85 + 1));
          if ((v87 & 1) != 0)
          {
LABEL_266:
            __break(1u);
            goto LABEL_267;
          }

          v84[(v86 >> 6) + 8] |= 1LL << v86;
          *(_OWORD *)(v84[6] + 16 * v86) = v85;
          outlined init with take of Any(&__dst[1], (_OWORD *)(v84[7] + 32 * v86));
          uint64_t v88 = v84[2];
          id v40 = __OFADD__(v88, 1LL);
          uint64_t v89 = v88 + 1;
          if (v40)
          {
LABEL_267:
            __break(1u);
            goto LABEL_268;
          }

          v84[2] = v89;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          uint64_t v90 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v91 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v7 = objc_msgSend(v90, sel_initWithDomain_code_userInfo_, v91, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          a3 = (char *)objc_msgSend(v7, sel_domain);
          uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
          uint64_t v94 = v93;

          uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          a2 = v96;
          if (v92 == v95 && v94 == v96) {
            goto LABEL_176;
          }
          a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((a1 & 1) != 0) {
            goto LABEL_216;
          }
          __break(1u);
          goto LABEL_66;
        }

    uint64_t v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v6;
    uint64_t v93 = v7;
    uint64_t v8 = String.init<A>(_:)();
    uint64_t v9 = v44;
  }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_57:
    swift_release();
    swift_release();

    object = v89;
    goto LABEL_58;
  }

  uint64_t v13 = objc_msgSend((id)v9, sel__parameterString);
  if (v13)
  {
    unint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    char v17 = v16;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (uint64_t v18 = objc_msgSend((id)v9, sel_path)) != 0)
    {
      uint64_t v19 = v18;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      uint64_t v21 = v6;
      BOOL v23 = v22;

      *(void *)&v103[0] = v20;
      *((void *)&v103[0] + 1) = v23;
      swift_bridgeObjectRetain();
      v24._countAndFlagsBits = 59LL;
      v24._object = (void *)0xE100000000000000LL;
      String.append(_:)(v24);
      uint64_t v6 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v25._countAndFlagsBits = (uint64_t)v15;
      v25._object = v17;
      String.append(_:)(v25);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }

    else
    {
      *(void *)&v103[0] = 59LL;
      *((void *)&v103[0] + 1) = 0xE100000000000000LL;
      v63._countAndFlagsBits = (uint64_t)v15;
      v63._object = v17;
      String.append(_:)(v63);
      swift_release();
      swift_release();
    }

    swift_bridgeObjectRelease();
    uint64_t v62 = *((void *)&v103[0] + 1);
    char v60 = *(void *)&v103[0];
  }

  else
  {
    id v64 = objc_msgSend((id)v9, sel_path);
    if (v64)
    {
      uint64_t v65 = v64;
      char v60 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
      uint64_t v62 = v66;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      swift_release();

      char v60 = 0LL;
      uint64_t v62 = 0xE000000000000000LL;
    }
  }

              char v27 = v102;
              goto LABEL_11;
            }
          }
        }
      }
    }

                  if (v62)
                  {
                    if (v61)
                    {
                      if (v57 != v56 || v60 != v55)
                      {
                        uint64_t v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        uint64_t result = 0LL;
                        if ((v30 & 1) == 0) {
                          return result;
                        }
                      }

                      goto LABEL_64;
                    }

                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }

                  else if (!v61)
                  {
LABEL_64:
                    if (v54)
                    {
                      if (v53)
                      {
                        if (v49 != v48 || v52 != v47)
                        {
                          uint64_t v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          uint64_t result = 0LL;
                          if ((v31 & 1) == 0) {
                            return result;
                          }
                        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
    }

    else if (specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( v73,  v74,  v75,  v76,  0,  0,  v97,  0,  0,  v66,  v68,  v70,  v72))
    {
      goto LABEL_55;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_58:
    uint64_t v80 = objc_msgSend(v101, sel_string, v95);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v80);

    id v81 = String.subscript.getter();
    id v83 = v82;
    id v85 = v84;
    char v87 = v86;
    swift_bridgeObjectRelease();
    uint64_t v88 = objc_msgSend(v101, sel_string);
    uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
    uint64_t v91 = v90;

    uint64_t v105 = (unint64_t)v89;
    uint64_t v106 = v91;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v92 = StringProtocol._toUTF16Offset(_:)();
    swift_bridgeObjectRelease();
    objc_msgSend(v101, sel__deprecated_setScanLocation_, v92);
    uint64_t v78 = MEMORY[0x186E1B610](v81, v83, v85, v87);
    uint64_t v79 = v93;
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }

  uint64_t v105 = v52;
  uint64_t v106 = (unint64_t)object;
  if (!v102) {
    goto LABEL_46;
  }
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  char v58 = v56;
  *(void *)&v104[0] = v54;
  *((void *)&v104[0] + 1) = v56;
  StringProtocol._ephemeralString.getter();
  char v100 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v59 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  *(void *)&v104[0] = v54;
  *((void *)&v104[0] + 1) = v58;
  uint64_t v19 = (char *)StringProtocol._toUTF16Offsets(_:)();
  char v60 = v20 - v19;
  if (__OFSUB__(v20, v19))
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }

  int v61 = v19;
  ObjectType = swift_getObjectType();
  id v63 = *(uint64_t (**)(uint64_t))(v103 + 488);
  swift_unknownObjectRetain();
  id v64 = (void *)v63(ObjectType);
  swift_unknownObjectRelease();
  uint64_t v65 = objc_msgSend(v100, sel_compare_options_range_locale_, v59, v97, v61, v60, v64);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  if (!v65) {
    goto LABEL_58;
  }
LABEL_56:
  uint64_t v78 = 0LL;
  uint64_t v79 = 0LL;
LABEL_59:
  uint64_t v19 = (char *)v78;
  uint64_t v20 = v79;
LABEL_66:
  result.value._object = v20;
  result.value._countAndFlagsBits = (uint64_t)v19;
  return result;
}

  __break(1u);
  return result;
}

              id v40 = v5;
              char v45 = "%02ld";
              goto LABEL_59;
          }
        }
      }
    }

    while (v9 < v6);
  }

  return v5;
}

  char v34 = 0LL;
LABEL_56:
  _CFAutoreleasePoolPop();
  return v34;
}

  char v41 = (void *)-[objc_class objectForKey:]( (&self->super.super.isa)[v109 / 8],  "objectForKey:",  @"_NSTaskInputFileHandle");
  if (v41)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      uint64_t v98 = (id)[v41 fileHandleForReading];
      char v42 = [v98 fileDescriptor];
    }

    else
    {
      char v42 = [v41 fileDescriptor];
      uint64_t v98 = 0LL;
    }

    LODWORD(v129) = v42;
  }

  else
  {
    uint64_t v98 = 0LL;
    LODWORD(v129) = -1;
  }

  id v43 = (void *)-[objc_class objectForKey:]( (&self->super.super.isa)[v109 / 8],  "objectForKey:",  @"_NSTaskOutputFileHandle");
  if (v43)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      char v99 = (id)[v43 fileHandleForWriting];
      uint64_t v44 = [v99 fileDescriptor];
    }

    else
    {
      uint64_t v44 = [v43 fileDescriptor];
      char v99 = 0LL;
    }
  }

  else
  {
    char v99 = 0LL;
    uint64_t v44 = -1;
  }

  HIDWORD(v129) = v44;
  char v45 = (void *)-[objc_class objectForKey:]( (&self->super.super.isa)[v109 / 8],  "objectForKey:",  @"_NSTaskDiagnosticFileHandle");
  if (v45)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      id v46 = (id)[v45 fileHandleForWriting];
      uint64_t v47 = [v46 fileDescriptor];
    }

    else
    {
      uint64_t v47 = [v45 fileDescriptor];
      id v46 = 0LL;
    }
  }

  else
  {
    id v46 = 0LL;
    uint64_t v47 = -1;
  }

  __int128 v130 = v47;
  char v48 = (void *)-[objc_class objectForKey:]( (&self->super.super.isa)[v109 / 8],  "objectForKey:",  @"_NSTaskLaunchRequirementData");
  uint64_t v94 = v40;
  LODWORD(v103) = open("/dev/null", 2, 0LL);
  uint64_t v119 = -1;
  uint64_t v118 = -1LL;
  posix_spawn_file_actions_init(&v117);
  for (i = 0LL; i != 3; ++i)
  {
    char v50 = *((unsigned int *)&v129 + i);
    if (i == v50)
    {
      id v51 = dup(*((_DWORD *)&v129 + i));
      if (v51 == -1)
      {
        *((_DWORD *)&v129 + i) = -1;
        goto LABEL_79;
      }

      *((_DWORD *)&v118 + i) = v51;
      id v52 = posix_spawn_file_actions_adddup2(&v117, v51, i);
      if ((_DWORD)v52) {
        goto LABEL_103;
      }
    }

    if ((_DWORD)v50 != -1)
    {
      id v52 = posix_spawn_file_actions_adddup2(&v117, v50, i);
      if ((_DWORD)v52) {
        goto LABEL_103;
      }
      continue;
    }

      char v27 = (unsigned __int8 *)v20;
      v66[0] = v20;
LABEL_56:
      id v43 = -[NSConstantValueExpression initWithObject:]( objc_alloc(&OBJC_CLASS___NSConstantValueExpression),  "initWithObject:",  v27);

LABEL_57:
      char v42 = 0LL;
LABEL_58:

      uint64_t result = (NSKeyPathExpression *)v43;
      break;
    case 'B':
    case 'H':
    case 'I':
    case 'J':
    case 'L':
    case 'M':
    case 'N':
    case 'Q':
    case 'R':
    case 'T':
    case 'V':
    case 'W':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'b':
    case 'h':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'q':
    case 'r':
    case 't':
    case 'v':
    case 'w':
      goto LABEL_65;
    case 'C':
      uint64_t v35 = objc_alloc(&OBJC_CLASS___NSNumber);
      id v36 = (*v5)++;
      uint64_t v29 = -[NSNumber initWithShort:](v35, "initWithShort:", *(__int16 *)v36);
      goto LABEL_45;
    case 'D':
    case 'd':
    case 'i':
      switch(v8)
      {
        case -2:
          uint64_t v25 = objc_alloc(&OBJC_CLASS___NSNumber);
          uint64_t v26 = (*v5)++;
          uint64_t v20 = -[NSNumber initWithChar:](v25, "initWithChar:", *(char *)v26);
          goto LABEL_55;
        case -1:
          id v52 = objc_alloc(&OBJC_CLASS___NSNumber);
          char v53 = (*v5)++;
          uint64_t v20 = -[NSNumber initWithShort:](v52, "initWithShort:", *(__int16 *)v53);
          goto LABEL_55;
        case 0:
          id v54 = objc_alloc(&OBJC_CLASS___NSNumber);
          id v55 = (unsigned int *)(*v5)++;
          uint64_t v20 = -[NSNumber initWithInt:](v54, "initWithInt:", *v55);
          goto LABEL_55;
        case 1:
          char v56 = objc_alloc(&OBJC_CLASS___NSNumber);
          uint64_t v57 = (*v5)++;
          uint64_t v20 = -[NSNumber initWithLong:](v56, "initWithLong:", *v57);
          goto LABEL_55;
        case 2:
          char v58 = objc_alloc(&OBJC_CLASS___NSNumber);
          uint64_t v59 = (*v5)++;
          uint64_t v20 = -[NSNumber initWithLongLong:](v58, "initWithLongLong:", *v59);
          goto LABEL_55;
        default:
          goto LABEL_29;
      }

    case 'K':
      char v37 = (ConstStr255Param *)(*v5)++;
      v66[0] = *v37;
      KVCExpression = CreateKVCExpression((uint64_t)v66[0]);
      goto LABEL_61;
    case 'O':
    case 'U':
    case 'X':
    case 'o':
    case 'u':
    case 'x':
      switch(v8)
      {
        case -2:
          uint64_t v21 = objc_alloc(&OBJC_CLASS___NSNumber);
          BOOL v22 = (unsigned __int8 *)(*v5)++;
          uint64_t v20 = -[NSNumber initWithUnsignedChar:](v21, "initWithUnsignedChar:", *v22);
          goto LABEL_55;
        case -1:
          uint64_t v44 = objc_alloc(&OBJC_CLASS___NSNumber);
          char v45 = (unsigned __int16 *)(*v5)++;
          uint64_t v20 = -[NSNumber initWithUnsignedShort:](v44, "initWithUnsignedShort:", *v45);
          goto LABEL_55;
        case 0:
          id v46 = objc_alloc(&OBJC_CLASS___NSNumber);
          uint64_t v47 = (unsigned int *)(*v5)++;
          uint64_t v20 = -[NSNumber initWithUnsignedInt:](v46, "initWithUnsignedInt:", *v47);
          goto LABEL_55;
        case 1:
          char v48 = objc_alloc(&OBJC_CLASS___NSNumber);
          char v49 = (*v5)++;
          uint64_t v20 = -[NSNumber initWithUnsignedLong:](v48, "initWithUnsignedLong:", *v49);
          goto LABEL_55;
        case 2:
          char v50 = objc_alloc(&OBJC_CLASS___NSNumber);
          id v51 = (*v5)++;
          uint64_t v20 = -[NSNumber initWithUnsignedLongLong:](v50, "initWithUnsignedLongLong:", *v51);
          goto LABEL_55;
        default:
          goto LABEL_29;
      }

    case 'P':
      id v38 = (ConstStr255Param *)(*v5)++;
      v66[0] = *v38;
      uint64_t v29 = (NSString *)CFStringCreateWithPascalString((CFAllocatorRef)*MEMORY[0x189604DD0], v66[0], 0x8000100u);
      goto LABEL_45;
    case 'S':
    case 's':
      char v28 = (ConstStr255Param *)(*v5)++;
      v66[0] = *v28;
      uint64_t v29 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%s", v66[0]);
      goto LABEL_45;
    case 'c':
      uint64_t v39 = objc_alloc(&OBJC_CLASS___NSNumber);
      id v40 = (*v5)++;
      uint64_t v29 = -[NSNumber initWithChar:](v39, "initWithChar:", *(char *)v40);
      goto LABEL_45;
    case 'p':
      char v41 = (ConstStr255Param *)(*v5)++;
      v66[0] = *v41;
      uint64_t v29 = +[NSValue value:withObjCType:](&OBJC_CLASS___NSValue, "value:withObjCType:", v66, "^v");
LABEL_45:
      char v42 = v29;
      id v43 = -[NSConstantValueExpression initWithObject:]( objc_alloc(&OBJC_CLASS___NSConstantValueExpression),  "initWithObject:",  v29);
      goto LABEL_58;
    default:
      if ((_DWORD)v13 != 37) {
        goto LABEL_65;
      }
      uint64_t v30 = objc_alloc(&OBJC_CLASS___NSConstantValueExpression);
      uint64_t v31 = @"%";
      goto LABEL_60;
  }

  return result;
}

LABEL_121:
            outlined retain of LocalePreferences?( (uint64_t)v135,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
            goto LABEL_44;
          }
        }

        else if (!v68)
        {
          goto LABEL_99;
        }

            swift_release();
            goto LABEL_122;
          }

          v132 = swift_slowAlloc();
          LODWORD(v153[0]) = 0;
          uint64_t v133 = unumf_resultToString();
          if (SLODWORD(v153[0]) > 0 || v133 <= 0)
          {
            MEMORY[0x186E20E60](v132, -1LL, -1LL);
            goto LABEL_121;
          }

          id v85 = specialized String.init(_utf16:)(v132, v133);
          char v87 = v134;
          MEMORY[0x186E20E60](v132, -1LL, -1LL);
LABEL_114:
          swift_release();
          swift_release();
          id v66 = (uint64_t)v151;
          if (v87)
          {
LABEL_124:
            uint64_t v103 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
            uint64_t v104 = v66;
            goto LABEL_125;
          }

    v24 -= v27;
    if (v75 <= v24) {
      continue;
    }
    break;
  }

  int v74 = v21[382];
  if (v24 < 0)
  {
LABEL_259:
    __break(1u);
    goto LABEL_260;
  }

        if ((unint64_t)v53 < v102[2])
        {
          char v49 = v102[v53 + 4];
          if (v100 < 0)
          {
            swift_bridgeObjectRetain();
            char v53 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v36, v49, 8LL);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v104 = *(void *)(v36 + 16);
            if (v104)
            {
              char v58 = *(void *)(v49 + 16);
              if (v58)
              {
                v206 = v100;
                uint64_t v33 = v59;
                uint64_t v105 = v104 + v58;
                if (__OFADD__(v104, v58)) {
                  goto LABEL_374;
                }
                if (v105 > 7)
                {
                  uint64_t v105 = 8LL;
                }

                else
                {
                  if (v105 < 0) {
                    goto LABEL_391;
                  }
                  if (!v105)
                  {
                    swift_bridgeObjectRetain();
                    char v53 = MEMORY[0x18961AFE8];
LABEL_206:
                    v145 = 0LL;
                    v146 = v49 + 32;
                    v147 = v53 + 32;
LABEL_207:
                    if (v145 == v58) {
                      goto LABEL_372;
                    }
                    v148 = 0;
                    v149 = 0LL;
                    v150 = v145 + 1;
                    while (v104 != v149)
                    {
                      v151 = v149 + v145;
                      if (__OFADD__(v149, v145)) {
                        goto LABEL_333;
                      }
                      if (v151 >= v105)
                      {
                        if (v148) {
                          goto LABEL_232;
                        }
                        v148 = *(unsigned __int16 *)(v146 + 2 * v145);
                        if (*(_WORD *)(v146 + 2 * v145))
                        {
                          v148 = *(unsigned __int16 *)(v36 + 2 * v149 + 32);
                          if (*(_WORD *)(v36 + 2 * v149 + 32)) {
                            goto LABEL_232;
                          }
                        }
                      }

                      else
                      {
                        if (v151 < 0)
                        {
                          __break(1u);
LABEL_338:
                          __break(1u);
LABEL_339:
                          __break(1u);
LABEL_340:
                          __break(1u);
LABEL_341:
                          __break(1u);
                          goto LABEL_342;
                        }

                        v152 = 2 * v151;
                        v153 = v148
                        v148 = HIWORD(v153);
                        *(_WORD *)(v147 + v152) = v153;
                      }

                      if (v104 == ++v149)
                      {
                        if (!v148) {
                          goto LABEL_226;
                        }
                        char v60 = __OFADD__(v104, v145);
                        v154 = v104 + v145;
                        if (v60) {
                          goto LABEL_375;
                        }
                        if (v154 >= v105)
                        {
LABEL_232:
                          lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                          v157 = swift_allocError();
                          *v158 = 0;
                          swift_willThrow();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          __int128 v128 = (void *)v157;
                          goto LABEL_179;
                        }

                        if (v154 < 0) {
                          goto LABEL_376;
                        }
                        *(_WORD *)(v147 + 2 * v154) = v148;
LABEL_226:
                        v145 = v150;
                        if (v150 == v58)
                        {
                          v155 = *(void *)(v53 + 16);
                          if (v155 && !*(_WORD *)(v147 + 2 * v155 - 2))
                          {
                            do
                            {
                              *(void *)(v53 + 16) = v155 - 1;
                              if (v155 == 1) {
                                break;
                              }
                            }

                            while (!*(unsigned __int16 *)(v53 + 28 + 2 * v155--));
                          }

                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v98 = (uint64_t)v216;
                          uint64_t v59 = v33;
                          id v36 = v204;
                          char v100 = v206;
                          goto LABEL_177;
                        }

                        goto LABEL_207;
                      }
                    }

                    __break(1u);
LABEL_333:
                    __break(1u);
LABEL_334:
                    __break(1u);
                    goto LABEL_335;
                  }
                }

                swift_bridgeObjectRetain();
                char v53 = static Array._allocateBufferUninitialized(minimumCapacity:)();
                *(void *)(v53 + 16) = v105;
                bzero((void *)(v53 + 32), 2 * v105);
                goto LABEL_206;
              }
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            char v53 = MEMORY[0x18961AFE8];
          }

          id v36 = v204;
          uint64_t v98 = (uint64_t)v216;
LABEL_177:
          NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v53);
          if (!v54) {
            goto LABEL_185;
          }
LABEL_178:
          swift_bridgeObjectRelease();
          __int128 v128 = v54;
          goto LABEL_179;
        }

        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
        goto LABEL_125;
      }

  if (*(void *)(v2 + 96) != *(void *)(result + 96)) {
    uint64_t v20 = 1;
  }
  if ((v20 & 1) != 0) {
LABEL_124:
  }
    v4 |= 0x40000uLL;
LABEL_125:
  *a2 = v4;
  return result;
}

    uint64_t v105 = (v118 - 1) & v118;
  }

              if (v117)
              {
                LODWORD(v635) = v153;
                goto LABEL_127;
              }

              goto LABEL_264;
            }

      *(void *)v283 = v66;
      *(void *)&v283[8] = v84;
      *(void *)&v283[16] = v64;
      uint64_t v92 = __OFADD__(v62, 1LL);
      uint64_t v106 = v62 + 1;
      if (v92) {
        goto LABEL_164;
      }
      if (v66 != v234) {
        goto LABEL_165;
      }
      v230 = v106;
      if (v64)
      {
        uint64_t v107 = v83;
        uint64_t v108 = *(void *)(v64 + 24 * ((v84 >> ((4 * *(_BYTE *)(v64 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else
      {
        swift_unknownObjectRetain();
        uint64_t v107 = v83;
        uint64_t v108 = specialized Rope._Node.subscript.getter(v84, v82);
        swift_unknownObjectRelease();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v92 = __OFADD__(v85, v108);
      uint64_t v109 = v85 + v108;
      if (v92) {
        goto LABEL_166;
      }
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(v283, v82, v107, v232, v234);
      swift_unknownObjectRelease_n();
      v223 = *(void *)&v283[8];
      v235 = *(void *)v283;
      id v64 = *(void *)&v283[16];
      if (v238 == 2)
      {
        uint64_t v110 = v212[1];
        v410 = *v212;
        v411 = v110;
        v412 = v212[2];
        unsigned __int8 v111 = &v355;
        BigString.utf8.getter();
        BigString.startIndex.getter();
      }

      else
      {
        __int128 v112 = v212[1];
        v407 = *v212;
        v408 = v112;
        v409 = v212[2];
        BigString.utf8.getter();
        if (__OFSUB__(v109, v228 >> 11)) {
          goto LABEL_177;
        }
        unsigned __int8 v111 = &v354;
      }

      v228 = BigString.UTF8View.index(_:offsetBy:)();
      v221 = v114;
      v222 = v113;
      v238 = v115;
      outlined release of Locale((uint64_t)v111);
      outlined release of AttributedString.Runs((uint64_t)v288);
      uint64_t v116 = v207[1];
      v404 = *v207;
      v405 = v116;
      v406 = v207[2];
      uint64_t v117 = BigString.startIndex.getter();
      uint64_t v119 = v118;
      unsigned __int8 v121 = v120;
      unsigned __int8 v123 = v122;
      __int128 v124 = BigString.endIndex.getter();
      v396 = v117;
      v397 = v119;
      v398 = v121;
      v399 = v123;
      v400 = v124;
      v401 = v125;
      v402 = v126;
      v403 = v127;
      BigString.unicodeScalars.getter();
      outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(v213, v215, v220);
      swift_retain();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v356);
      outlined release of Locale((uint64_t)v357);
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v213, v215, v220);
      if (v359 >> 10 < v80 || v80 < v358 >> 10 || v81 < v358 >> 10 || v359 >> 10 < v81) {
        goto LABEL_167;
      }
      __int128 v128 = v207[1];
      v393 = *v207;
      v394 = v128;
      v395 = v207[2];
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.distance(from:to:)();
      outlined release of Locale((uint64_t)v360);
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v213, v215, v220);
      __int128 v129 = (_OWORD *)*v231;
      __int128 v130 = *(_OWORD *)(*v231 + 32);
      v390 = *(_OWORD *)(*v231 + 16);
      v391 = v130;
      v392 = v129[3];
      v131 = BigString.startIndex.getter();
      uint64_t v133 = v132;
      v135 = v134;
      v137 = v136;
      v138 = BigString.endIndex.getter();
      v382 = v131;
      v383 = v133;
      v384 = v135;
      v385 = v137;
      v386 = v138;
      v387 = v139;
      v388 = v140;
      v389 = v141;
      BigString.unicodeScalars.getter();
      swift_retain_n();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v361);
      outlined release of Locale((uint64_t)v362);
      swift_release();
      v142 = v241 >> 10;
      v143 = v363 >> 10;
      if (v241 >> 10 < v363 >> 10) {
        goto LABEL_168;
      }
      v144 = v364 >> 10;
      if (v364 >> 10 < v142) {
        goto LABEL_168;
      }
      v145 = v129[2];
      v379 = v129[1];
      v380 = v145;
      v381 = v129[3];
      BigString.unicodeScalars.getter();
      v146 = BigString.UnicodeScalarView.index(_:offsetBy:)();
      v148 = v147;
      v150 = v149;
      v152 = v151;
      outlined release of Locale((uint64_t)v365);
      swift_release();
      v153 = v146 >> 10;
      if (v146 >> 10 < v143 || v144 < v153) {
        goto LABEL_169;
      }
      if (v153 < v142) {
        goto LABEL_170;
      }
      *(void *)&v270 = v211;
      *((void *)&v270 + 1) = v210;
      *(void *)v283 = v241;
      *(void *)&v283[8] = v239;
      *(_OWORD *)&v283[16] = v240;
      *(void *)&v283[32] = v146;
      *(void *)&v283[40] = v148;
      *(void *)&v283[48] = v150;
      *(void *)&v283[56] = v152;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in String.LocalizationValue.restoreAttributedStringArguments(_:in:)( (uint64_t *)&v270,  v231,  (uint64_t *)v283,  v215);
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      *((void *)&v240 + 1) = v152;
      v241 = v146;
      v239 = v148;
      *(void *)&v240 = v150;
      uint64_t v62 = v230;
      id v63 = v199;
      BOOL v22 = v200;
      char v17 = v201;
      uint64_t v20 = v205;
      uint64_t v19 = v206;
      uint64_t v21 = v209;
      uint64_t v65 = v235;
      if (v230 == v199)
      {
        outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v213, v215, v220);
        outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v213, v215, v220);
        outlined release of AttributedString.Runs((uint64_t)v288);
        goto LABEL_6;
      }

      continue;
    }

    break;
  }

  if (v82) {
    uint64_t v86 = v236[9];
  }
  else {
    uint64_t v86 = 0LL;
  }
  if (v62 < 0 || v86 < v62) {
    goto LABEL_176;
  }
  if (!v82 || v62 >= v83 || !*(_WORD *)(v82 + 16))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v288);
    char v99 = swift_unknownObjectRetain();
    id v84 = specialized Rope._endPath.getter(v99);
    swift_unknownObjectRelease();
    id v64 = 0LL;
    if (!v82)
    {
      id v85 = 0LL;
      id v66 = v234;
      goto LABEL_121;
    }

    goto LABEL_82;
  }

  char v87 = *(unsigned __int8 *)(v82 + 18);
  v229 = v62;
  if (*(_BYTE *)(v82 + 18))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v288);
    swift_unknownObjectRetain();
    uint64_t v88 = v82;
    while (1)
    {
      uint64_t v90 = *(unsigned __int16 *)(v88 + 16);
      if (!*(_WORD *)(v88 + 16)) {
        goto LABEL_53;
      }
      uint64_t v91 = *(void *)(v88 + 32);
      uint64_t v92 = __OFSUB__(v62, v91);
      uint64_t v93 = v62 - v91;
      if (v92) {
        goto LABEL_154;
      }
      if (__OFADD__(v93, 1LL)) {
        goto LABEL_155;
      }
      if (v93 + 1 <= 0)
      {
        uint64_t v90 = 0LL;
      }

      else
      {
        if ((_DWORD)v90 == 1) {
          goto LABEL_52;
        }
        uint64_t v94 = *(void *)(v88 + 56);
        uint64_t v62 = v93 - v94;
        if (__OFSUB__(v93, v94)) {
          goto LABEL_174;
        }
        if (__OFADD__(v62, 1LL)) {
          goto LABEL_175;
        }
        if (v62 + 1 < 1)
        {
          uint64_t v90 = 1LL;
          uint64_t v62 = v93;
        }

        else
        {
          if ((_DWORD)v90 == 2) {
            goto LABEL_53;
          }
          uint64_t v95 = *(void *)(v88 + 80);
          uint64_t v92 = __OFSUB__(v62, v95);
          uint64_t v93 = v62 - v95;
          if (v92) {
            goto LABEL_179;
          }
          if (__OFADD__(v93, 1LL)) {
            goto LABEL_180;
          }
          if (v93 + 1 >= 1)
          {
            if ((_DWORD)v90 != 3)
            {
              uint64_t v96 = 3LL;
              if (v90 > 3) {
                uint64_t v96 = *(unsigned __int16 *)(v88 + 16);
              }
              uint64_t v97 = (void *)(v88 + 104);
              uint64_t v98 = 3LL;
              while (v96 != v98)
              {
                uint64_t v62 = v93 - *v97;
                if (__OFSUB__(v93, *v97)) {
                  goto LABEL_172;
                }
                if (__OFADD__(v62, 1LL)) {
                  goto LABEL_173;
                }
                if (v62 + 1 < 1)
                {
                  uint64_t v90 = v98;
                  uint64_t v62 = v93;
                  goto LABEL_54;
                }

                ++v98;
                v97 += 3;
                uint64_t v93 = v62;
                if (v90 == v98) {
                  goto LABEL_53;
                }
              }

                    uint64_t v57 = 2LL;
                    goto LABEL_149;
                  }

                uint64_t result = swift_unknownObjectRelease();
LABEL_122:
                id v66 = v172;
                if (!v71) {
                  goto LABEL_217;
                }
                goto LABEL_123;
              }

              if (v85)
              {
                v193 = ((v85 - 1) << v84) | ((-15LL << v84) - 1) & v75;
                id v52 = v82;
                v194 = v82;
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
LABEL_129:
                swift_unknownObjectRelease();
LABEL_130:
                uint64_t v18 = v159;
                id v66 = v172;
LABEL_131:
                swift_unknownObjectRelease();
                goto LABEL_132;
              }
            }

            v170 = v81;
            v167 = v79;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRetain();
            goto LABEL_113;
          }

          if (v76)
          {
            v193 = ((v76 - 1) << v74) | ((-15LL << v74) - 1) & v75;
            v194 = v73;
            swift_unknownObjectRetain();
            id v52 = v73;
            uint64_t v18 = v159;
            id v66 = v172;
            goto LABEL_132;
          }

          uint64_t result = swift_unknownObjectRetain();
          goto LABEL_122;
        }

        uint64_t result = swift_unknownObjectRetain();
        if (!v71) {
          goto LABEL_217;
        }
LABEL_123:
        id v52 = *(void *)(v72 + 24LL * ((int)v71 - 1));
        if (!*(_WORD *)(v52 + 16)) {
          goto LABEL_218;
        }
        uint64_t v95 = *(unsigned __int16 *)(v52 + 16) - 1LL;
        uint64_t v96 = *(unsigned __int8 *)(v52 + 18);
        v193 = ((-15LL << ((4 * v96 + 8) & 0x3C)) - 1) & (v193 & ((-15LL << v70) - 1) | ((v71 - 1) << v70)) | (v95 << ((4 * v96 + 8) & 0x3C));
        if (v96)
        {
          swift_unknownObjectRetain();
          uint64_t v97 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v52 + 24, v95, v142);
          swift_unknownObjectRelease();
          id v52 = v97;
        }

        uint64_t v18 = v159;
        v194 = v52;
LABEL_132:
        swift_unknownObjectRelease();
        if (v192 != v66) {
          goto LABEL_210;
        }
        id v69 = v193;
        if (v52) {
          goto LABEL_134;
        }
LABEL_99:
        swift_unknownObjectRetain();
        v158 = v69;
        uint64_t v86 = specialized Rope._Node.subscript.getter(v69, v62);
        swift_unknownObjectRelease();
        v167 = 0LL;
        char v87 = 1;
LABEL_135:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (__OFSUB__(v169, v86)) {
          goto LABEL_211;
        }
        if (v172 != v18[11]) {
          goto LABEL_212;
        }
        v152 = v169 - v86;
        if ((v87 & 1) != 0)
        {
          char v99 = v18[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v158, v99);
          v176 = v100;
          v157 = v101;
          swift_unknownObjectRelease();
        }

        else
        {
          char v102 = v167 + 24 * ((v158 >> ((4 * *(_BYTE *)(v167 + 18) + 8) & 0x3C)) & 0xF);
          uint64_t v103 = *(void *)(v102 + 40);
          v176 = *(void *)(v102 + 32);
          swift_bridgeObjectRetain();
          v157 = v103;
          swift_bridgeObjectRetain();
        }

        uint64_t v104 = v175;
        --v168;
        swift_bridgeObjectRetain();
        uint64_t v105 = v143;
        uint64_t v106 = v145;
        do
        {
          uint64_t v109 = *(v105 - 1);
          uint64_t v108 = *v105;
          if (*(void *)(v104 + 16))
          {
            swift_bridgeObjectRetain_n();
            uint64_t v110 = specialized __RawDictionaryStorage.find<A>(_:)(v109, v108);
            if ((v111 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue( *(void *)(v104 + 56) + 72 * v110,  (uint64_t)&v203);
            }

            else
            {
              v207 = 0LL;
              v205 = 0u;
              v206 = 0u;
              v203 = 0u;
              v204 = 0u;
            }

            swift_bridgeObjectRelease();
          }

          else
          {
            v207 = 0LL;
            v205 = 0u;
            v206 = 0u;
            v203 = 0u;
            v204 = 0u;
            swift_bridgeObjectRetain();
          }

          __int128 v112 = v176;
          if (*(void *)(v176 + 16))
          {
            swift_bridgeObjectRetain();
            __int128 v113 = specialized __RawDictionaryStorage.find<A>(_:)(v109, v108);
            if ((v114 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue( *(void *)(v112 + 56) + 72 * v113,  (uint64_t)&v198);
            }

            else
            {
              v202 = 0LL;
              v200 = 0u;
              v201 = 0u;
              v198 = 0u;
              v199 = 0u;
            }

            swift_bridgeObjectRelease();
            uint64_t v104 = v175;
          }

          else
          {
            v202 = 0LL;
            v200 = 0u;
            v201 = 0u;
            v198 = 0u;
            v199 = 0u;
          }

          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v203,  (uint64_t)&v192,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v198,  (uint64_t)v177,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (v195)
          {
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v192,  (uint64_t)v191,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v197)
            {
              outlined destroy of AttributedString._AttributeValue((uint64_t)v191);
LABEL_175:
              outlined destroy of Any?( (uint64_t)&v192,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?( (uint64_t)&v198,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v203,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_176:
              outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v209);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v138 = v155;
              uint64_t v18 = v159;
              goto LABEL_177;
            }

            __int128 v115 = *((_OWORD *)v177 + 3);
            v189[2] = *((_OWORD *)v177 + 2);
            v189[3] = v115;
            v190 = v177[8];
            uint64_t v116 = *((_OWORD *)v177 + 1);
            v189[0] = *(_OWORD *)v177;
            v189[1] = v116;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v191,  (uint64_t)v188);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v189,  (uint64_t)v187);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)v188,  (uint64_t)&v183,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)v187,  (uint64_t)v174,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v184)
            {
              if (v186)
              {
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v183, (uint64_t)v180);
                outlined init with take of any PredicateExpression<Self.Output == B1>(v174, (uint64_t)v179);
                uint64_t v117 = v181;
                v171 = v182;
                v170 = __swift_project_boxed_opaque_existential_1(v180, v181);
                v173 = v139;
                uint64_t v118 = *(void *)(v117 - 8);
                MEMORY[0x1895F8858](v170);
                unsigned __int8 v120 = &v139[-((v119 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v179,  (uint64_t)&v178);
                unsigned __int8 v121 = type metadata accessor for Optional();
                unsigned __int8 v122 = *(void *)(v121 - 8);
                MEMORY[0x1895F8858](v121);
                __int128 v124 = &v139[-v123];
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                __int128 v125 = swift_dynamicCast();
                __int128 v126 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v118 + 56);
                if (v125)
                {
                  v126(v124, 0LL, 1LL, v117);
                  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v118 + 32))(v120, v124, v117);
                  uint64_t v107 = dispatch thunk of static Equatable.== infix(_:_:)();
                  (*(void (**)(_BYTE *, uint64_t))(v118 + 8))(v120, v117);
                }

                else
                {
                  v126(v124, 1LL, 1LL, v117);
                  (*(void (**)(_BYTE *, uint64_t))(v122 + 8))(v124, v121);
                  uint64_t v107 = 0;
                }

                __swift_destroy_boxed_opaque_existential_1((uint64_t)v179);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v180);
                uint64_t v104 = v175;
LABEL_143:
                outlined destroy of Any?( (uint64_t)v187,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?( (uint64_t)v188,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v189);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v191);
                outlined destroy of Any?( (uint64_t)&v192,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v198,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v203,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v107 & 1) == 0) {
                  goto LABEL_176;
                }
                goto LABEL_144;
              }

              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v183);
            }

            else
            {
              if (!v186)
              {
                uint64_t v107 = 1;
                goto LABEL_143;
              }

              outlined destroy of Any?( (uint64_t)v174,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            }

            uint64_t v107 = 0;
            goto LABEL_143;
          }

          if (v197) {
            goto LABEL_175;
          }
          outlined destroy of Any?( (uint64_t)&v192,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)&v198,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?( (uint64_t)&v203,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_144:
          v105 += 2;
          --v106;
        }

        while (v106);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v209);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __int128 v127 = v152;
        v169 = v152;
        __int128 v128 = v155;
        id v52 = v167;
        id v40 = v168;
        id v54 = v158;
        uint64_t v18 = v159;
        int v61 = v172;
        uint64_t result = v154;
        if (v156 < v168) {
          continue;
        }
        break;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v169 = v127;
      v138 = v128;
LABEL_177:
      __int128 v129 = v151[1];
      v223 = *v151;
      v224 = v129;
      v225 = v151[2];
      BigString.utf8.getter();
      if (__OFSUB__(v169, v166)) {
        goto LABEL_206;
      }
      __int128 v130 = BigString.UTF8View.index(_:offsetBy:)();
      v132 = v131;
      v134 = v133;
      v136 = v135;
      outlined release of Locale((uint64_t)&v208);
      outlined release of AttributedString.Runs((uint64_t)&v210);
      v137 = v130 >> 10;
      char v17 = v149;
      if (v149 >= v130 >> 10) {
        uint64_t result = v150;
      }
      else {
        uint64_t result = v130;
      }
      if (v161 < result >> 10) {
        goto LABEL_207;
      }
      uint64_t v16 = v160 - 1;
      if (v149 >= v137) {
        a4 = v146;
      }
      else {
        a4 = v136;
      }
      if (v149 >= v137) {
        a3 = v147;
      }
      else {
        a3 = v134;
      }
      if (v149 >= v137) {
        a2 = v148;
      }
      else {
        a2 = v132;
      }
      if (v16 <= v138)
      {
        a6 = v141;
        goto LABEL_193;
      }
    }

    if ((_DWORD)v25)
    {
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v210);
      uint64_t v26 = v23;
      char v27 = v20;
      while (1)
      {
        uint64_t v30 = *(unsigned __int16 *)(v27 + 16);
        if (*(_WORD *)(v27 + 16))
        {
          uint64_t v31 = *(void *)(v27 + 40);
          uint64_t v32 = v26 - v31;
          if (__OFSUB__(v26, v31)) {
            goto LABEL_198;
          }
          if (__OFADD__(v32, 1LL)) {
            goto LABEL_199;
          }
          if (v32 + 1 <= 0)
          {
            uint64_t v30 = 0LL;
            goto LABEL_25;
          }

          if ((_DWORD)v30 == 1)
          {
            v26 -= v31;
          }

          else
          {
            uint64_t v33 = *(void *)(v27 + 64);
            char v34 = __OFSUB__(v32, v33);
            uint64_t v35 = v32 - v33;
            if (v34) {
              goto LABEL_200;
            }
            if (__OFADD__(v35, 1LL)) {
              goto LABEL_201;
            }
            if (v35 + 1 < 1)
            {
              uint64_t v30 = 1LL;
              uint64_t v26 = v32;
              goto LABEL_25;
            }

            if ((_DWORD)v30 != 2)
            {
              id v36 = (void *)(v27 + 88);
              char v37 = 2LL;
              while (v30 != v37)
              {
                uint64_t v26 = v35 - *v36;
                if (__OFSUB__(v35, *v36)) {
                  goto LABEL_195;
                }
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_196;
                }
                if (v26 + 1 < 1)
                {
                  uint64_t v30 = v37;
                  uint64_t v26 = v35;
                  goto LABEL_25;
                }

                ++v37;
                v36 += 3;
                uint64_t v35 = v26;
                if (v30 == v37) {
                  goto LABEL_24;
                }
              }

              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              __break(1u);
LABEL_197:
              __break(1u);
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
LABEL_200:
              __break(1u);
LABEL_201:
              __break(1u);
LABEL_202:
              __break(1u);
              goto LABEL_203;
            }

            uint64_t v26 = v35;
          }
        }

        __break(1u);
        goto LABEL_122;
      }

    char v56 = v3[8];
    if (v4 != v51)
    {
      v136 = v3[11];
      if (v56)
      {
        unint64_t v14 = v3[10];
        v135 = v3[9];
        uint64_t v77 = *(unsigned __int8 *)(v56 + 18);
        uint64_t v78 = *(unsigned __int16 *)(v56 + 16);
        swift_release();
        uint64_t v13 = 0LL;
        uint64_t v79 = (4 * v77 + 8) & 0x3C;
        uint64_t v80 = ((-15LL << v79) - 1) & v77;
        uint64_t v4 = v134;
        id v81 = v78 << v79;
        uint64_t v3 = v131;
        v138 = v80 | v81;
      }

      else
      {
        swift_release();
        v138 = 0LL;
        uint64_t v13 = 0LL;
        v135 = 0LL;
        unint64_t v14 = 0LL;
      }

      goto LABEL_231;
    }

    uint64_t v57 = v3[10];
    if (v56) {
      char v58 = v3[10];
    }
    else {
      char v58 = 0LL;
    }
    if (v58 < v4) {
      goto LABEL_344;
    }
    v136 = v3[11];
    if (!v56)
    {
      uint64_t result = (void *)swift_release();
      char v60 = 0LL;
      uint64_t v13 = 0LL;
      v138 = 0LL;
      v135 = 0LL;
      goto LABEL_230;
    }

    v135 = v3[9];
    uint64_t v59 = *(unsigned __int8 *)(v56 + 18);
    if (v4 < v57 && *(_WORD *)(v56 + 16))
    {
      if (*(_BYTE *)(v56 + 18))
      {
        uint64_t result = (void *)swift_unknownObjectRetain_n();
        char v60 = v4;
        int v61 = v56;
        while (1)
        {
          uint64_t v15 = *(unsigned __int16 *)(v61 + 16);
          if (!*(_WORD *)(v61 + 16)) {
            goto LABEL_134;
          }
          id v69 = *(void *)(v61 + 40);
          char v17 = __OFSUB__(v60, v69);
          uint64_t v16 = v60 - v69;
          if (v17) {
            goto LABEL_328;
          }
          if (__OFADD__(v16, 1LL)) {
            goto LABEL_329;
          }
          if (v16 + 1 <= 0)
          {
            uint64_t v15 = 0LL;
          }

          else
          {
            if ((_DWORD)v15 == 1) {
              goto LABEL_133;
            }
            uint64_t v70 = *(void *)(v61 + 64);
            char v60 = v16 - v70;
            if (__OFSUB__(v16, v70)) {
              goto LABEL_342;
            }
            if (__OFADD__(v60, 1LL)) {
              goto LABEL_343;
            }
            if (v60 + 1 < 1)
            {
              uint64_t v15 = 1LL;
              char v60 = v16;
            }

            else
            {
              if ((_DWORD)v15 == 2) {
                goto LABEL_134;
              }
              uint64_t v71 = *(void *)(v61 + 88);
              int v72 = v60 - v71;
              if (__OFSUB__(v60, v71)) {
                goto LABEL_360;
              }
              uint64_t v16 = v72 + 1;
              if (__OFADD__(v72, 1LL)) {
                goto LABEL_361;
              }
              if (v16 < 1)
              {
                uint64_t v15 = 2LL;
              }

              else
              {
                if ((_DWORD)v15 == 3)
                {
                  char v60 = v72;
                  goto LABEL_134;
                }

                int v73 = *(void *)(v61 + 112);
                char v17 = __OFSUB__(v72, v73);
                uint64_t v16 = v72 - v73;
                if (v17) {
                  goto LABEL_372;
                }
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_373;
                }
                if (v16 + 1 >= 1)
                {
                  if ((_DWORD)v15 != 4)
                  {
                    int v74 = 4LL;
                    if (v15 > 4) {
                      int v74 = *(unsigned __int16 *)(v61 + 16);
                    }
                    int v75 = (void *)(v61 + 136);
                    int v76 = 4LL;
                    while (v74 != v76)
                    {
                      char v60 = v16 - *v75;
                      if (__OFSUB__(v16, *v75)) {
                        goto LABEL_352;
                      }
                      if (__OFADD__(v60, 1LL)) {
                        goto LABEL_353;
                      }
                      if (v60 + 1 < 1)
                      {
                        uint64_t v15 = v76;
                        char v60 = v16;
                        goto LABEL_135;
                      }

                      ++v76;
                      v75 += 3;
                      uint64_t v16 = v60;
                      if (v15 == v76) {
                        goto LABEL_134;
                      }
                    }

        uint64_t v24 = &off_18C5D6000;
        if (_NSInflectionLog_onceToken != -1) {
          dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
        }
        uint64_t v59 = (os_log_s *)_NSInflectionLog_log;
        if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
        {
LABEL_124:
          v160 = 0LL;
          obja = 0LL;
          char v28 = 0;
LABEL_136:
          int v73 = (os_log_s *)_NSInflectionLog_log;
          if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_DEBUG))
          {
            v268.location = a3;
            v268.length = a4;
            v149 = NSStringFromRange(v268);
            *(_DWORD *)buf = 138412802;
            *(void *)&buf[4] = a2;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v164;
            *(_WORD *)&buf[22] = 2114;
            v236 = v149;
            _os_log_debug_impl( &dword_182EB1000,  v73,  OS_LOG_TYPE_DEBUG,  "NSInflect attribute is an inflection rule (%@ / %@), using it in range %{public}@",  buf,  0x20u);
          }

          v156 = 0;
LABEL_139:
          v158 = a4;
          v159 = a3;
          goto LABEL_140;
        }

        v256.location = a3;
        v256.length = a4;
        uint64_t v71 = NSStringFromRange(v256);
        int v72 = -[NSInflectionRule agreeWithArgument](a2, "agreeWithArgument");
        *(_DWORD *)buf = 138543618;
        *(void *)&buf[4] = v71;
        *(_WORD *)&buf[12] = 2050;
        *(void *)&buf[14] = v72;
        uint64_t v62 = "NSInflectionAgreementArgument attribute in range %{public}@ is set to %{public}ld which is out of bounds.";
      }

      else
      {
        if (!-[NSInflectionRule agreeWithConcept](a2, "agreeWithConcept"))
        {
LABEL_132:
          obja = 0LL;
          goto LABEL_133;
        }

        if (-[NSInflectionRule agreeWithConcept](a2, "agreeWithConcept") >= 1)
        {
          char v58 = -[NSInflectionRule agreeWithConcept](a2, "agreeWithConcept");
          if (v58 <= [*(id *)(a1 + 64) count])
          {
            obja = (id)objc_msgSend( *(id *)(a1 + 64),  "objectAtIndexedSubscript:",  -[NSInflectionRule agreeWithConcept](a2, "agreeWithConcept") - 1);
LABEL_133:
            v160 = 0LL;
LABEL_134:
            if (_NSInflectionLog_onceToken != -1) {
              dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
            }
            goto LABEL_136;
          }
        }

        if (_NSInflectionLog_onceToken != -1) {
          dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
        }
        uint64_t v59 = (os_log_s *)_NSInflectionLog_log;
        if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_124;
        }
        v253.location = a3;
        v253.length = a4;
        char v60 = NSStringFromRange(v253);
        int v61 = -[NSInflectionRule agreeWithConcept](a2, "agreeWithConcept");
        *(_DWORD *)buf = 138543618;
        *(void *)&buf[4] = v60;
        *(_WORD *)&buf[12] = 2050;
        *(void *)&buf[14] = v61;
        uint64_t v62 = "NSInflectionAgreementConcept attribute in range %{public}@ is set to %{public}ld which is out of bounds.";
      }

      _os_log_error_impl(&dword_182EB1000, v59, OS_LOG_TYPE_ERROR, v62, buf, 0x16u);
      char v28 = 0;
      goto LABEL_132;
    }

    if ([v7 count])
    {
      if ([v7 count] == 1)
      {
        uint64_t v30 = _NSInflectionLanguageWithLensAndRange(*(void *)(a1 + 88), a3, a4);
        uint64_t v31 = objc_msgSend((id)objc_msgSend(v7, "firstObject"), "replacementRangeInResult");
        uint64_t v33 = v32;
        v159 = v31;
        char v34 = v31 - a3;
        uint64_t v35 = (void *)(*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
        id v36 = objc_msgSend( v35,  "lowercaseStringWithLocale:",  objc_msgSend(MEMORY[0x189603F90], "localeWithLocaleIdentifier:", v30));
        char v37 = a4 - v33 - v34;
        id v38 = (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
        LOBYTE(v208) = 0;
        LOBYTE(v202) = 0;
        uint64_t v39 = +[NSMorphology _heuristicMorphologyForLanguage:prefix:suffix:featureName:matchedPrefix:matchedSuffix:]( &OBJC_CLASS___NSMorphology,  "_heuristicMorphologyForLanguage:prefix:suffix:featureName:matchedPrefix:matchedSuffix:",  v30,  v36,  v38,  &v214,  &v208,  &v202);
        if (v208 | v202)
        {
          id v40 = v39;
          obj = v35;
          if (_NSInflectionLog_onceToken != -1) {
            dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
          }
          char v41 = (os_log_s *)_NSInflectionLog_log;
          if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412546;
            *(void *)&buf[4] = v40;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v214;
            _os_log_debug_impl( &dword_182EB1000,  v41,  OS_LOG_TYPE_DEBUG,  "Found heuristic for prefix / suffix pair: %@, %@",  buf,  0x16u);
          }

          if (v40) {
            -[NSMorphology mergeMorphology:override:]((uint64_t)v164, v40, 1);
          }
          [v7 removeAllObjects];
          if ((_BYTE)v208) {
            char v42 = v34;
          }
          else {
            char v42 = 0LL;
          }
          if ((_BYTE)v202) {
            id v43 = v37;
          }
          else {
            id v43 = 0LL;
          }
          v158 = a4 - v42 - v43;
          if ((_BYTE)v208)
          {
            v156 = [obj isEqualToString:v36] ^ 1;
          }

          else
          {
            v156 = 0;
            v159 = a3;
          }

          goto LABEL_81;
        }
      }
    }

    else
    {
      uint64_t v44 = (void *)objc_msgSend( *(id *)(a1 + 56),  "_morphologyForLanguage:",  _NSInflectionLanguageWithLensAndRange(*(void *)(a1 + 88), a3, a4));
      -[NSMorphology mergeMorphology:override:]((uint64_t)v164, v44, 1);
      if (-[NSMorphology grammaticalGender](v164, "grammaticalGender") == NSGrammaticalGenderNeuter) {
        -[NSMorphology setGrammaticalGender:](v164, "setGrammaticalGender:", 4LL);
      }
    }

    v156 = 0;
    v158 = a4;
    v159 = a3;
LABEL_81:
    if (_NSInflectionLog_onceToken != -1) {
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    }
    char v45 = (os_log_s *)_NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_DEBUG))
    {
      v251.location = a3;
      v251.length = a4;
      char v50 = NSStringFromRange(v251);
      *(_DWORD *)buf = 138543618;
      *(void *)&buf[4] = v50;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v164;
      _os_log_debug_impl( &dword_182EB1000,  v45,  OS_LOG_TYPE_DEBUG,  "NSInflect attribute is YES, using automatic inflection in range %{public}@, initial target: %@",  buf,  0x16u);
    }

    uint64_t v29 = 0LL;
    v160 = 0LL;
    obja = 0LL;
    char v28 = 1;
LABEL_140:
    if (-[NSMorphology isIdentity](v164))
    {
      int v74 = (_NSAttributedStringGrammarInflection *)(*(uint64_t (**)(void))(*(void *)(a1 + 88) + 16LL))();
      if (_NSIsNSDictionary()) {
        int v74 =  -[_NSAttributedStringGrammarInflection initWithExternalRepresentationDictionary:error:]( objc_alloc(&OBJC_CLASS____NSAttributedStringGrammarInflection),  "initWithExternalRepresentationDictionary:error:",  v74,  0LL);
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0) {
        int v74 =  -[_NSAttributedStringGrammarInflection initWithMorphology:]( objc_alloc(&OBJC_CLASS____NSAttributedStringGrammarInflection),  "initWithMorphology:",  v74);
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0) {
        int v75 = v74;
      }
      else {
        int v75 = 0LL;
      }
      int v76 = v75 != 0LL;
      if (v75)
      {
        -[NSMorphology mergeMorphology:override:]( (uint64_t)v164,  -[NSMorphology initWithInflection:](objc_alloc(&OBJC_CLASS___NSMorphology), "initWithInflection:", v75),  1);
        if (_NSInflectionLog_onceToken != -1) {
          dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
        }
        uint64_t v77 = (os_log_s *)_NSInflectionLog_log;
        if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_DEBUG))
        {
          v265.location = a3;
          v265.length = a4;
          v145 = NSStringFromRange(v265);
          *(_DWORD *)buf = 138543618;
          *(void *)&buf[4] = v164;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v145;
          _os_log_debug_impl( &dword_182EB1000,  v77,  OS_LOG_TYPE_DEBUG,  "Inflection was identity; assumed inflection attribute value %{public}@ will be used instead in range %{public}@",
            buf,
            0x16u);
        }

        char v28 = 1;
      }

      (*(void (**)(void))(*(void *)(a1 + 96) + 16LL))();
    }

    else
    {
      int v76 = 0;
    }

    if (_NSInflectionLog_onceToken != -1) {
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    }
    uint64_t v78 = (os_log_s *)_NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_DEBUG))
    {
      v257.location = a3;
      v257.length = a4;
      uint64_t v97 = NSStringFromRange(v257);
      uint64_t v98 = *(void *)(a1 + 128);
      *(_DWORD *)buf = 138544130;
      *(void *)&buf[4] = v97;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v98;
      *(_WORD *)&buf[22] = 2112;
      v236 = (NSString *)a2;
      LOWORD(v237) = 2112;
      *(void *)((char *)&v237 + 2) = v164;
      _os_log_debug_impl( &dword_182EB1000,  v78,  OS_LOG_TYPE_DEBUG,  "Range %{public}@ of string with length %lld will be inflected with requested inflection: %@, resolved inflection %@",  buf,  0x2Au);
    }

    v157 = v76;
    (*(void (**)(void))(*(void *)(a1 + 96) + 16LL))();
    (*(void (**)(void))(*(void *)(a1 + 96) + 16LL))();
    (*(void (**)(void))(*(void *)(a1 + 96) + 16LL))();
    (*(void (**)(void))(*(void *)(a1 + 96) + 16LL))();
    uint64_t v79 = [v7 count];
    if (v160 || v79 || obja)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3052000000LL;
      v236 = (NSString *)__Block_byref_object_copy__7;
      *(void *)&v237 = __Block_byref_object_dispose__7;
      *((void *)&v237 + 1) = 0LL;
      v208 = 0LL;
      v209 = &v208;
      v210 = 0x3052000000LL;
      v211 = __Block_byref_object_copy__7;
      v212 = __Block_byref_object_dispose__7;
      v213 = 0LL;
      v202 = 0LL;
      v203 = &v202;
      v204 = 0x3052000000LL;
      v205 = __Block_byref_object_copy__7;
      v206 = __Block_byref_object_dispose__7;
      v207 = objc_alloc_init(&OBJC_CLASS___NSMorphology);
      v196 = 0LL;
      v197 = &v196;
      v198 = 0x3052000000LL;
      v199 = __Block_byref_object_copy__7;
      v200 = __Block_byref_object_dispose__7;
      v201 = objc_alloc_init(&OBJC_CLASS___NSMorphology);
      v190 = 0LL;
      v191 = &v190;
      v192 = 0x3052000000LL;
      v193 = __Block_byref_object_copy__7;
      v194 = __Block_byref_object_dispose__7;
      v195 = objc_alloc_init(&OBJC_CLASS___NSMorphology);
      v184 = 0LL;
      v185 = &v184;
      v186 = 0x3052000000LL;
      v187 = __Block_byref_object_copy__7;
      v188 = __Block_byref_object_dispose__7;
      v154 = v28;
      v155 = v29;
      v189 = objc_alloc_init(&OBJC_CLASS___NSMorphology);
      v176[0] = MEMORY[0x1895F87A8];
      v176[1] = 3221225472LL;
      v177 = ___NSInflect_block_invoke_19;
      v178 = &unk_189C9DD38;
      v179 = &v196;
      v180 = &v202;
      v181 = &v215;
      v182 = &v190;
      v183 = &v184;
      v167[0] = MEMORY[0x1895F87A8];
      v167[1] = 3221225472LL;
      v168 = ___NSInflect_block_invoke_22;
      v169 = &unk_189C9DD60;
      v174 = buf;
      v175 = &v208;
      uint64_t v80 = *(void *)(a1 + 88);
      v172 = *(void *)(a1 + 104);
      v173 = v176;
      v170 = v164;
      v171 = v80;
      if (obja)
      {
        a4 = v163;
        id v81 = _NSInflectionLanguageWithLensAndRange(v80, a3, v163);
        if (_NSIsNSString())
        {
          id v82 = [(id)(*(uint64_t (**)(void))(*(void *)(a1 + 104) + 16))() allPossibleWordAttributesForWord:obja];
          v177(v176, (void *)v82, 0LL);
        }

        else if (_NSIsNSArray())
        {
          v234 = 0u;
          v232 = 0u;
          v233 = 0u;
          v231 = 0u;
          id v83 = [obja countByEnumeratingWithState:&v231 objects:v230 count:16];
          if (v83)
          {
            id v84 = *(void *)v232;
            while (2)
            {
              for (j = 0LL; j != v83; ++j)
              {
                if (*(void *)v232 != v84) {
                  objc_enumerationMutation(obja);
                }
                uint64_t v86 = *(void **)(*((void *)&v231 + 1) + 8 * j);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0
                  && [v86 _isSupportedInLanguage:v81])
                {
                  char v87 = (void *)[v86 _withExtrapolatedPronouns];
                  goto LABEL_197;
                }
              }

              id v83 = [obja countByEnumeratingWithState:&v231 objects:v230 count:16];
              if (v83) {
                continue;
              }
              break;
            }
          }

          char v87 = 0LL;
LABEL_197:
          char v99 = (void *)[v87 _morphologyForLanguage:v81];
          if (v99) {
            -[NSMorphology mergeMorphology:override:]((uint64_t)v164, v99, 0);
          }
        }
      }

      else
      {
        a4 = v163;
        if (v160)
        {
          ___NSInflect_block_invoke_22(v167, v160);
        }

        else
        {
          v228 = 0u;
          v229 = 0u;
          v226 = 0u;
          v227 = 0u;
          uint64_t v88 = [v7 countByEnumeratingWithState:&v226 objects:v225 count:16];
          if (v88)
          {
            uint64_t v89 = *(void *)v227;
            do
            {
              for (k = 0LL; k != v88; ++k)
              {
                if (*(void *)v227 != v89) {
                  objc_enumerationMutation(v7);
                }
                uint64_t v91 = *(void **)(*((void *)&v226 + 1) + 8 * k);
                uint64_t v92 = [v91 replacementRangeInResult];
                uint64_t v94 = v93;
                if ([v91 replacementKind] != 2 && a3 <= v92 && a3 + v163 >= v92 + v94) {
                  v168(v167, v91);
                }
              }

              uint64_t v88 = [v7 countByEnumeratingWithState:&v226 objects:v225 count:16];
              a4 = v163;
            }

            while (v88);
          }
        }
      }

      -[NSMorphology mergeMorphology:override:]((uint64_t)v164, (void *)v203[5], 0);
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      char v100 = (os_log_s *)_NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_DEBUG))
      {
        v261.location = a3;
        v261.length = a4;
        v137 = NSStringFromRange(v261);
        v138 = *(void *)(a1 + 128);
        *(_DWORD *)v219 = 138543874;
        v220 = v137;
        v221 = 2048;
        v222 = v138;
        v223 = 2112;
        v224 = v164;
        _os_log_debug_impl( &dword_182EB1000,  v100,  OS_LOG_TYPE_DEBUG,  "Range %{public}@ of string with length %lld -- edited target inflection with attributes from replacements that are unambiguous nouns: %@.",  v219,  0x20u);
      }

      -[NSMorphology mergeMorphology:override:]((uint64_t)v164, (void *)v197[5], 0);
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      char v101 = (os_log_s *)_NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_DEBUG))
      {
        v262.location = a3;
        v262.length = a4;
        v139 = NSStringFromRange(v262);
        v140 = *(void *)(a1 + 128);
        *(_DWORD *)v219 = 138543874;
        v220 = v139;
        v221 = 2048;
        v222 = v140;
        v223 = 2112;
        v224 = v164;
        _os_log_debug_impl( &dword_182EB1000,  v101,  OS_LOG_TYPE_DEBUG,  "Range %{public}@ of string with length %lld -- edited target inflection with attributes from replacements that could be nouns or adjectives: %@.",  v219,  0x20u);
      }

      -[NSMorphology mergeMorphology:override:]((uint64_t)v164, (void *)v191[5], 0);
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      char v102 = (os_log_s *)_NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_DEBUG))
      {
        v263.location = a3;
        v263.length = a4;
        v141 = NSStringFromRange(v263);
        v142 = *(void *)(a1 + 128);
        *(_DWORD *)v219 = 138543874;
        v220 = v141;
        v221 = 2048;
        v222 = v142;
        v223 = 2112;
        v224 = v164;
        _os_log_debug_impl( &dword_182EB1000,  v102,  OS_LOG_TYPE_DEBUG,  "Range %{public}@ of string with length %lld -- edited target inflection with attributes from replacements that are unambiguous adjectives: %@.",  v219,  0x20u);
      }

      -[NSMorphology mergeMorphology:override:]((uint64_t)v164, (void *)v185[5], 0);
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      uint64_t v103 = (os_log_s *)_NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_DEBUG))
      {
        v264.location = a3;
        v264.length = a4;
        v143 = NSStringFromRange(v264);
        v144 = *(void *)(a1 + 128);
        *(_DWORD *)v219 = 138543874;
        v220 = v143;
        v221 = 2048;
        v222 = v144;
        v223 = 2112;
        v224 = v164;
        _os_log_debug_impl( &dword_182EB1000,  v103,  OS_LOG_TYPE_DEBUG,  "Range %{public}@ of string with length %lld -- edited target inflection with attributes from replacements that are other words: %@.",  v219,  0x20u);
      }

      if (*(void *)(*(void *)&buf[8] + 40LL) && v209[5])
      {
        -[NSMorphology applyPluralityRulesForNumbers:inLanguages:](v164, "applyPluralityRulesForNumbers:inLanguages:");
        if (_NSInflectionLog_onceToken != -1) {
          dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
        }
        uint64_t v104 = (os_log_s *)_NSInflectionLog_log;
        if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_DEBUG))
        {
          v266.location = a3;
          v266.length = a4;
          v146 = NSStringFromRange(v266);
          v147 = *(void *)(a1 + 128);
          *(_DWORD *)v219 = 138543874;
          v220 = v146;
          v221 = 2048;
          v222 = v147;
          v223 = 2112;
          v224 = v164;
          _os_log_debug_impl( &dword_182EB1000,  v104,  OS_LOG_TYPE_DEBUG,  "Range %{public}@ of string with length %lld -- edited target inflection with numbers supplied as replacement s with result: %@.",  v219,  0x20u);
        }
      }

      uint64_t v24 = &off_18C5D6000;
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      uint64_t v29 = v155;
      char v28 = v154;
      uint64_t v105 = (os_log_s *)_NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v219 = 138543362;
        v220 = v164;
        _os_log_debug_impl( &dword_182EB1000,  v105,  OS_LOG_TYPE_DEBUG,  "Target inflection after applying inflections inferred from replacements: %{public}@",  v219,  0xCu);
      }

      _Block_object_dispose(&v184, 8);
      _Block_object_dispose(&v190, 8);
      _Block_object_dispose(&v196, 8);
      _Block_object_dispose(&v202, 8);
      _Block_object_dispose(&v208, 8);
      _Block_object_dispose(buf, 8);
    }

    uint64_t v106 = *(void **)(a1 + 40);
    if (v106)
    {
      uint64_t v107 = (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
      uint64_t v108 = (*(uint64_t (**)(void))(*(void *)(a1 + 88) + 16LL))();
      LOBYTE(v153) = v157;
      objc_msgSend( v106,  "willProcessInflectableRange:sourceSubstring:inflectionRule:target:alternative:assumedInflectionFallback:fallbackWasUsed:",  a3,  a4,  v107,  a2,  v164,  v108,  (*(uint64_t (**)(void))(*(void *)(a1 + 88) + 16))(),  v153);
    }

    if ((v216[3] & 1) == 0)
    {
      v166[7] = MEMORY[0x1895F87A8];
      v166[8] = 3221225472LL;
      v166[9] = ___NSInflect_block_invoke_30;
      v166[10] = &unk_189C9DD88;
      uint64_t v110 = *(void *)(a1 + 104);
      uint64_t v109 = *(void *)(a1 + 112);
      v166[11] = *(void *)(a1 + 88);
      v166[12] = v110;
      v166[13] = &v215;
      (*(void (**)(void))(v109 + 16))();
    }

    if (_NSInflectionLog_onceToken != -1) {
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    }
    unsigned __int8 v111 = (os_log_s *)_NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_DEBUG))
    {
      v258.location = a3;
      v258.length = a4;
      __int128 v129 = NSStringFromRange(v258);
      __int128 v130 = *(void *)(a1 + 128);
      v131 = (NSString *)v216[3];
      *(_DWORD *)buf = 138543874;
      *(void *)&buf[4] = v129;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v130;
      *(_WORD *)&buf[22] = 2048;
      v236 = v131;
      _os_log_debug_impl( &dword_182EB1000,  v111,  OS_LOG_TYPE_DEBUG,  "Range %{public}@ of string with length %lld -- determined final disambiguation hints: %lld.",  buf,  0x20u);
    }

    __int128 v112 = _NSInflectionLanguageWithLensAndRange(*(void *)(a1 + 88), a3, a4);
    __int128 v113 = _NSRequiresMorphunInflectionForLanguageIdentifier(v112);
    if (_NSInflectionLog_onceToken != -1) {
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    }
    __int128 v114 = (os_log_s *)_NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_INFO))
    {
      __int128 v115 = "false";
      if (v113) {
        __int128 v115 = "true";
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = v115;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v112;
      _os_log_impl( &dword_182EB1000,  v114,  OS_LOG_TYPE_INFO,  "Inflection engine is enabled? %{public}s for language %{public}@",  buf,  0x16u);
    }

    if ((v28 & v113) != 1) {
      goto LABEL_276;
    }
    uint64_t v116 = (void *)(*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
    if (!v29)
    {
      __int128 v124 = (void *)_NSInflectionGrammarWithLensAndRange(*(void *)(a1 + 88), a3, v163);
      if (v124)
      {
        -[NSMorphology mergeMorphology:override:]((uint64_t)v164, v124, 0);
        -[NSMorphology setPartOfSpeech:](v164, "setPartOfSpeech:", [v124 partOfSpeech]);
      }

      __int128 v125 = (void *)_NSLexiconInflectedStringUsingMorphun(v116, v159, v158, (uint64_t)v112, v164, v214, v7);
      if (v156)
      {
        __int128 v126 = (void *)[objc_alloc(MEMORY[0x189603F90]) initWithLocaleIdentifier:v112];
        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3010000000LL;
        v236 = (NSString *)&unk_183A8509D;
        v237 = 0uLL;
        v208 = 0LL;
        v209 = &v208;
        v210 = 0x3052000000LL;
        v211 = __Block_byref_object_copy__7;
        v212 = __Block_byref_object_dispose__7;
        v213 = 0LL;
        __int128 v127 = [v125 length];
        v166[0] = MEMORY[0x1895F87A8];
        v166[1] = 3221225472LL;
        v166[2] = ___NSInflect_block_invoke_35;
        v166[3] = &unk_189C9DDB0;
        v166[4] = v126;
        v166[5] = &v208;
        v166[6] = buf;
        objc_msgSend(v125, "enumerateSubstringsInRange:options:usingBlock:", 0, v127, 2, v166);

        __int128 v128 = (void *)v209[5];
        uint64_t v24 = &off_18C5D6000;
        if (v128)
        {
          __int128 v125 = (void *)objc_msgSend( v128,  "stringByAppendingString:",  objc_msgSend( v125,  "substringFromIndex:",  *(void *)(*(void *)&buf[8] + 32) + *(void *)(*(void *)&buf[8] + 40)));
        }

        _Block_object_dispose(&v208, 8);
        _Block_object_dispose(buf, 8);
      }

LABEL_104:
        uint64_t v44 = v135;
        char v45 = outlined consume of LocalePreferences?;
        goto LABEL_85;
      }
    }

    else if (!v110)
    {
      goto LABEL_79;
    }

  if (BYTE9(v118[17]) != 2)
  {
    uint64_t v116 = MEMORY[0x1896184C8];
    LOBYTE(v115) = BYTE9(v118[17]) & 1;
    v117[0] = xmmword_1837294A0;
    outlined init with take of Any(&v115, &v117[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
    }
    uint64_t v103 = v12[2];
    char v102 = v12[3];
    if (v103 >= v102 >> 1) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v102 > 1),  v103 + 1,  1,  v12);
    }
    v12[2] = v103 + 1;
    uint64_t v104 = &v12[6 * v103];
    uint64_t v105 = v117[0];
    uint64_t v106 = v117[2];
    v104[3] = v117[1];
    v104[4] = v106;
    v104[2] = v105;
  }

  memcpy(v117, v118, 0x11AuLL);
  *(void *)&__int128 v115 = v12;
  uint64_t v107 = *MEMORY[0x18961A718];
  uint64_t v108 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v109 = *(void *)(v108 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v109 + 104))(v8, v107, v108);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v8, 0LL, 1LL, v108);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x18961A748], v2);
  outlined retain of DateComponents((uint64_t)v118);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

  *(void *)(v491 + 8 * v168) = v170 | v169;
  *(void *)(*(void *)(v166 + 48) + 8 * v167) = Path;
  v201 = *(void *)(v166 + 16);
  v202 = __OFADD__(v201, 1LL);
  v203 = v201 + 1;
  if (v202)
  {
    __break(1u);
    goto LABEL_322;
  }

  *(void *)(v166 + 16) = v203;
  __int128 v114 = (uint64_t)v499;
LABEL_248:
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0LL);
  v406 = v405;
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v407 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v407);
  swift_release();
  v408 = _ContiguousArrayBuffer._asCocoaArray()();
  v508._countAndFlagsBits = 0LL;
  __int128 v115 = v487;
  v409 = objc_msgSend(v487, sel_resourceValuesForKeys_error_, v408, &v508);
  swift_unknownObjectRelease();
  v410 = (void *)v508._countAndFlagsBits;
  if (!v409)
  {
    uint64_t v116 = (uint64_t)v486;
    if (v508._countAndFlagsBits)
    {
      v462 = (id)v508._countAndFlagsBits;
      swift_willThrow();
      swift_release();

LABEL_296:
      uint64_t v10 = 0LL;
      __int128 v113 = (Swift::Int)v500;
      uint64_t v21 = v489;
      goto LABEL_68;
    }

    __int128 v113 = (Swift::Int)v500;
    uint64_t v21 = v489;
    if (one-time initialization token for _nilObjCError == -1)
    {
LABEL_289:
      swift_willThrow();
      swift_release();
      uint64_t v10 = 0LL;
      goto LABEL_68;
    }

        if (v68)
        {
          id v82 = *(void *)(v60 + 16);
          if (v82) {
            goto LABEL_106;
          }
          goto LABEL_109;
        }

        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        char v50 = (void *)swift_allocError();
        *uint64_t v89 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
LABEL_145:
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }

  if (!v40)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0LL;
    return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
  }

  if (v40 != 1) {
    goto LABEL_162;
  }
  LOWORD(v25) = v106;
  NSDecimal.asVariableLengthInteger()(v100, v105, v104);
  id v40 = v71;
  NSDecimal.asVariableLengthInteger()(v103, v102, v101);
  BOOL v22 = v72;
  int v73 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v73 + 32) = 0LL;
  uint64_t v62 = (_WORD *)(v73 + 32);
  *(void *)(v73 + 16) = 8LL;
  v63._rawValue = (void *)v73;
  *(void *)(v73 + 40) = 0LL;
  id v64 = *(void *)(v40 + 16);
  uint64_t v65 = *(void *)(v22 + 16);
  if (v65 >= v64) {
    int v74 = *(void *)(v40 + 16);
  }
  else {
    int v74 = *(void *)(v22 + 16);
  }
  if (v74)
  {
    int v75 = v40 + 32;
    int v76 = (*(unsigned __int16 *)(v40 + 32) | 0x10000) - *(unsigned __int16 *)(v22 + 32);
    LODWORD(v77) = HIWORD(v76);
    *uint64_t v62 = *(_WORD *)(v40 + 32) - *(_WORD *)(v22 + 32);
    uint64_t v70 = v74 - 1;
    if (!v70)
    {
      uint64_t v78 = 1LL;
      goto LABEL_116;
    }

    int v76 = v77 + *(unsigned __int16 *)(v40 + 34) - *(unsigned __int16 *)(v22 + 34) + 0xFFFF;
    LODWORD(v77) = HIWORD(v76);
    *(_WORD *)(v73 + 34) = v76;
    if (v70 == 1)
    {
      uint64_t v78 = 2LL;
      goto LABEL_116;
    }

    int v61 = *(unsigned __int16 *)(v22 + 36);
    int v76 = v77 + *(unsigned __int16 *)(v40 + 36) - v61 + 0xFFFF;
    LODWORD(v77) = HIWORD(v76);
    *(_WORD *)(v73 + 36) = v76;
    if (v70 == 2)
    {
      uint64_t v78 = 3LL;
      goto LABEL_116;
    }

    int v76 = v77 + *(unsigned __int16 *)(v40 + 38) - *(unsigned __int16 *)(v22 + 38) + 0xFFFF;
    LODWORD(v77) = HIWORD(v76);
    *(_WORD *)(v73 + 38) = v76;
    if (v70 == 3)
    {
      uint64_t v78 = 4LL;
      goto LABEL_116;
    }

    int v61 = *(unsigned __int16 *)(v22 + 40);
    int v76 = v77 + *(unsigned __int16 *)(v40 + 40) - v61 + 0xFFFF;
    LODWORD(v77) = HIWORD(v76);
    *(_WORD *)(v73 + 40) = v76;
    if (v70 == 4)
    {
      uint64_t v78 = 5LL;
      goto LABEL_116;
    }

    int v76 = v77 + *(unsigned __int16 *)(v40 + 42) - *(unsigned __int16 *)(v22 + 42) + 0xFFFF;
    LODWORD(v77) = HIWORD(v76);
    *(_WORD *)(v73 + 42) = v76;
    if (v70 == 5)
    {
      uint64_t v78 = 6LL;
      goto LABEL_116;
    }

    int v61 = *(unsigned __int16 *)(v22 + 44);
    int v76 = v77 + *(unsigned __int16 *)(v40 + 44) - v61 + 0xFFFF;
    LODWORD(v77) = HIWORD(v76);
    *(_WORD *)(v73 + 44) = v76;
    if (v70 == 6)
    {
      uint64_t v78 = 7LL;
      goto LABEL_116;
    }

  swift_release();
  int v72 = v365;
  *(void *)&v347 = v365;
  v330 = v10;
  if (v324 > 0x7FF)
  {
    uint64_t v78 = *(void *)(v3 + 64);
    uint64_t v79 = *(void *)(v3 + 72);
    uint64_t v80 = *(void *)(v3 + 80);
    id v81 = *(void *)(v3 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v78, v79, v80, v81, &v373);
    v337 = v374;
    v342 = v373;
    int v76 = (void *)v3;
    uint64_t v77 = v375;
    swift_unknownObjectRelease();
    int v75 = v337;
    int v74 = v342;
  }

  else
  {
    int v73 = (void *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v73, 0LL, (unint64_t *)&v373);
    int v74 = v373;
    int v75 = v374;
    int v76 = (void *)v3;
    uint64_t v77 = v375;
  }

  v365 = v74;
  v366 = v75;
  *(void *)&v367 = v77;
  id v82 = v76[8];
  id v83 = v76[9];
  id v84 = v76[10];
  id v85 = v76[11];
  v341 = v76;
  Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  v338 = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0LL, Enum & 1, v82, v83, v84, v85, (uint64_t *)&v433);
  char v87 = v435;
  swift_unknownObjectRelease();
  if (v87 < v77 && *(void *)(v72 + 16))
  {
    v323 = (__int128 *)v63;
    do
    {
      uint64_t v89 = *((void *)&v365 + 1);
      uint64_t v88 = v365;
      uint64_t v90 = v366;
      uint64_t v91 = v341[8];
      uint64_t v2 = v341[9];
      uint64_t v92 = v341[10];
      uint64_t v93 = swift_unknownObjectRetain();
      uint64_t result = specialized Rope._endPath.getter(v93);
      if (v91)
      {
        uint64_t result = swift_unknownObjectRelease();
        if (v77 != v92) {
          goto LABEL_134;
        }
      }

      else if (v77)
      {
LABEL_134:
        uint64_t v104 = v341[8];
        uint64_t v105 = v341[9];
        uint64_t v2 = v341[10];
        uint64_t v106 = v341[11];
        *(void *)&v433 = v88;
        *((void *)&v433 + 1) = v89;
        *(void *)&v434 = v90;
        uint64_t v107 = *((void *)&v90 + 1) - 1LL;
        if (__OFSUB__(*((void *)&v90 + 1), 1LL)) {
          goto LABEL_398;
        }
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v433, v104, v105, v2, v106);
        uint64_t v108 = *((void *)&v433 + 1);
        uint64_t v89 = v434;
        uint64_t v95 = v433;
        uint64_t v109 = specialized Rope.subscript.getter(v433, *((unint64_t *)&v433 + 1), v434, v104, v105, v2, v106);
        uint64_t v2 = v110;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unsigned __int8 v111 = v77 - v109;
        if (__OFSUB__(v77, v109)) {
          goto LABEL_399;
        }
        uint64_t v10 = v324 >> 11;
        id v63 = (uint64_t)v323;
        uint64_t v3 = (int64_t)v341;
        goto LABEL_162;
      }

      uint64_t v3 = (int64_t)v341;
      id v40 = v341[8];
      uint64_t v94 = v341[9];
      uint64_t v95 = v341[11];
      if (v40)
      {
        uint64_t v96 = v341[9];
        uint64_t v13 = v341[11];
        uint64_t v10 = v324 >> 11;
        uint64_t v5 = -15LL;
        if (v341[10] < v332) {
          goto LABEL_403;
        }
        if (*(_WORD *)(v40 + 16))
        {
          uint64_t v15 = *(unsigned __int8 *)(v40 + 18);
          if (*(_BYTE *)(v40 + 18))
          {
            uint64_t result = swift_unknownObjectRetain_n();
            uint64_t v2 = v324 >> 11;
            uint64_t v19 = v40;
            while (1)
            {
              uint64_t v98 = *(unsigned __int16 *)(v19 + 16);
              if (!*(_WORD *)(v19 + 16)) {
                goto LABEL_427;
              }
              char v99 = *(void *)(v19 + 40);
              char v45 = __OFSUB__(v2, v99);
              char v100 = v2 - v99;
              if (v45) {
                goto LABEL_377;
              }
              if (v100 <= 0)
              {
                char v53 = 0LL;
              }

              else
              {
                if ((_DWORD)v98 == 1) {
                  goto LABEL_429;
                }
                char v101 = *(void *)(v19 + 64);
                uint64_t v2 = v100 - v101;
                if (__OFSUB__(v100, v101)) {
                  goto LABEL_381;
                }
                if (v2 >= 1)
                {
                  if ((_DWORD)v98 == 2) {
                    goto LABEL_429;
                  }
                  char v102 = (void *)(v19 + 88);
                  char v53 = 2LL;
                  while (v98 != v53)
                  {
                    uint64_t v103 = v2 - *v102;
                    if (__OFSUB__(v2, *v102)) {
                      goto LABEL_351;
                    }
                    if (v103 < 1) {
                      goto LABEL_118;
                    }
                    ++v53;
                    v102 += 3;
                    uint64_t v2 = v103;
                    if (v98 == v53) {
                      goto LABEL_429;
                    }
                  }

                  __break(1u);
LABEL_351:
                  __break(1u);
LABEL_352:
                  v311 = *(void *)(v19 + 48);
                  char v45 = __OFSUB__(v53, v311);
                  id v43 = v53 - v311;
                  if (v45) {
                    goto LABEL_425;
                  }
                  if (__OFADD__(v43, 1LL)) {
                    goto LABEL_426;
                  }
                  if (v43 + 1 >= 1)
                  {
                    if ((_DWORD)v2 != 2)
                    {
                      v312 = (void *)(v19 + 72);
                      id v46 = 2LL;
                      while (v2 != v46)
                      {
                        v208 = v43 - *v312;
                        if (__OFSUB__(v43, *v312)) {
                          goto LABEL_419;
                        }
                        if (__OFADD__(v208, 1LL)) {
                          goto LABEL_420;
                        }
                        if (v208 + 1 < 1) {
                          goto LABEL_371;
                        }
                        ++v46;
                        v312 += 3;
                        id v43 = v208;
                        if (v2 == v46) {
                          goto LABEL_334;
                        }
                      }

                      goto LABEL_418;
                    }

                    v208 = v43;
                    goto LABEL_334;
                  }

  v149 = HIBYTE(v85) & 0xF;
  if ((v85 & 0x2000000000000000LL) == 0) {
    v149 = v83 & 0xFFFFFFFFFFFFLL;
  }
  if (!v149)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v157 = v232;
    v158 = v234;
    swift_retain_n();
    swift_retain_n();
    uint64_t v21 = v157;
    if (!_foundation_swift_url_feature_enabled())
    {
      v184 = objc_msgSend(v21, sel__parameterString);
      if (v184)
      {
        v185 = v184;
        v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(v184);
        v188 = v187;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (v189 = objc_msgSend(v21, sel_path)) != 0)
        {
          v190 = v189;
          v191 = static String._unconditionallyBridgeFromObjectiveC(_:)(v189);
          v193 = v192;

          v238._countAndFlagsBits = (uint64_t)v191;
          v238._object = v193;
          swift_bridgeObjectRetain();
          v194._countAndFlagsBits = 59LL;
          v194._object = (void *)0xE100000000000000LL;
          String.append(_:)(v194);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v195._countAndFlagsBits = (uint64_t)v186;
          v195._object = v188;
          String.append(_:)(v195);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v238._countAndFlagsBits = 59LL;
          v238._object = (void *)0xE100000000000000LL;
          v212._countAndFlagsBits = (uint64_t)v186;
          v212._object = v188;
          String.append(_:)(v212);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
        goto LABEL_171;
      }

      v213 = objc_msgSend(v21, sel_path);
      if (!v213)
      {
        swift_release();
        swift_release();

        goto LABEL_171;
      }

      v159 = v213;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v213);
      swift_release();
      swift_release();

LABEL_170:
LABEL_171:
      v220 = (void *)objc_opt_self();
      v221 = String._bridgeToObjectiveCImpl()();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      char v50 = objc_msgSend( v220,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  4,  v221,  v21,  0,  0,  0,  0);
      goto LABEL_40;
    }

    v238._countAndFlagsBits = (uint64_t)v21;
    v238._object = v158;
    v239 = v6;
    v159 = v21;
    swift_retain();
    swift_retain();
    v160 = URL.path(percentEncoded:)(1);
    v238 = v160;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v160._countAndFlagsBits, (unint64_t)v160._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v236._countAndFlagsBits = Set.init(minimumCapacity:)();
    v161 = specialized Set._Variant.insert(_:)(&v237, 0x2FuLL);
    v162 = v236._countAndFlagsBits;
    v163 = v238._countAndFlagsBits;
    v164 = v238._object;
    v165 = ((unint64_t)v238._object >> 56) & 0xF;
    if (v165)
    {
      v166 = v159;
      v236 = v238;
      MEMORY[0x1895F8858](v161);
      v225 = (uint64_t)&v236;
      v226 = v162;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v224,  v163,  (unint64_t)v164);
      if (v167 == 1)
      {
        v169 = (unint64_t)v236._object;
        v168 = v236._countAndFlagsBits;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v168, v169, v162);
        v171 = v170;
        swift_bridgeObjectRelease();
      }

      else
      {
        v171 = v167;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v159 = v166;
      if (!v171)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_169;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_169:
    swift_release();
    swift_release();
    goto LABEL_170;
  }

  v150 = HIBYTE(v126) & 0xF;
  if ((v126 & 0x2000000000000000LL) == 0) {
    v150 = v124 & 0xFFFFFFFFFFFFLL;
  }
  if (!v150)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v172 = v228;
    swift_retain_n();
    swift_retain_n();
    v173 = v7;
    uint64_t v70 = v172;
    if (_foundation_swift_url_feature_enabled())
    {
      v238._countAndFlagsBits = (uint64_t)v70;
      v238._object = v173;
      v239 = v9;
      v174 = v70;
      v232 = v173;
      swift_retain();
      swift_retain();
      v175 = URL.path(percentEncoded:)(1);
      v238 = v175;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v175._countAndFlagsBits, (unint64_t)v175._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }

      v236._countAndFlagsBits = Set.init(minimumCapacity:)();
      v176 = specialized Set._Variant.insert(_:)(&v237, 0x2FuLL);
      v177 = v236._countAndFlagsBits;
      v179 = v238._countAndFlagsBits;
      v178 = v238._object;
      v180 = ((unint64_t)v238._object >> 56) & 0xF;
      if (v180)
      {
        v236 = v238;
        MEMORY[0x1895F8858](v176);
        v225 = (uint64_t)&v236;
        v226 = v177;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v224,  v179,  (unint64_t)v178);
        if (v181 == 1)
        {
          v183 = (unint64_t)v236._object;
          v182 = v236._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v182, v183, v177);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      v196 = objc_msgSend(v70, sel__parameterString);
      if (v196)
      {
        v197 = v196;
        v198 = static String._unconditionallyBridgeFromObjectiveC(_:)(v196);
        v200 = v199;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (v201 = objc_msgSend(v70, sel_path)) != 0)
        {
          v202 = v201;
          v203 = static String._unconditionallyBridgeFromObjectiveC(_:)(v201);
          v205 = v204;

          v238._countAndFlagsBits = (uint64_t)v203;
          v238._object = v205;
          swift_bridgeObjectRetain();
          v206._countAndFlagsBits = 59LL;
          v206._object = (void *)0xE100000000000000LL;
          String.append(_:)(v206);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v207._countAndFlagsBits = (uint64_t)v198;
          v207._object = v200;
          String.append(_:)(v207);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v238._countAndFlagsBits = 59LL;
          v238._object = (void *)0xE100000000000000LL;
          v217._countAndFlagsBits = (uint64_t)v198;
          v217._object = v200;
          String.append(_:)(v217);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
      }

      else
      {
        v218 = objc_msgSend(v70, sel_path);
        if (v218)
        {
          v219 = v218;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v218);
          swift_release();
          swift_release();
        }

        else
        {
          swift_release();
          swift_release();
        }
      }
    }

    v222 = (void *)objc_opt_self();
    v223 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v216 = objc_msgSend( v222,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  4,  v223,  v70,  0,  0,  0,  0);
LABEL_176:
    v216;
    swift_unknownObjectRelease();

    return (id)swift_willThrow();
  }

  v151 = MEMORY[0x186E20F44](v233);
  if (v151)
  {
    v152 = (void *)v151;
    v153 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v154 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v238._countAndFlagsBits = 0LL;
    v155 = objc_msgSend( v152,  sel_createSymbolicLinkAtPath_withDestinationPath_error_,  v153,  v154,  &v238);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if ((v155 & 1) != 0) {
      return (id)v238._countAndFlagsBits;
    }
    if (v238._countAndFlagsBits)
    {
      (id)v238._countAndFlagsBits;
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      v211 = (id)_nilObjCError;
    }

    return (id)swift_willThrow();
  }

  LODWORD(v226) = 0;
  v225 = 48LL;
  uint64_t result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_105;
  }

    if ((v77 & 0x1000000000000000LL) == 0)
    {
      if ((v77 & 0x2000000000000000LL) != 0)
      {
        __int128 v115 = HIBYTE(v77) & 0xF;
        *(void *)&v259 = v76;
        *((void *)&v259 + 1) = v77 & 0xFFFFFFFFFFFFFFLL;
        __int128 v114 = (char *)&v259;
        goto LABEL_109;
      }

      if ((v76 & 0x1000000000000000LL) != 0)
      {
        __int128 v114 = (char *)((v77 & 0xFFFFFFFFFFFFFFFLL) + 32);
        __int128 v115 = v76 & 0xFFFFFFFFFFFFLL;
        goto LABEL_109;
      }

    v135 = (v143 - 1) & v143;
    v173 = v144;
    v138 = __clz(__rbit64(v143)) + (v144 << 6);
LABEL_81:
    v139 = *(void *)(v162 + 72) * v138;
    outlined init with copy of ICUNumberFormatter.Signature( *(void *)(v96 + 48) + v139,  v136,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    v140 = 8 * v138;
    v141 = *(void *)(*(void *)(v96 + 56) + 8 * v138);
    outlined init with take of ICUNumberFormatter.Signature( v136,  *(void *)(v102 + 48) + v139,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(void *)(*(void *)(v102 + 56) + v140) = v141;
    swift_retain();
  }

  v145 = v173 + 8;
  if (v173 + 8 >= v167) {
    goto LABEL_105;
  }
  v143 = *(void *)&v169[2 * v145];
  if (v143)
  {
    v144 = v173 + 8;
    goto LABEL_104;
  }

  while (1)
  {
    v144 = v145 + 1;
    if (__OFADD__(v145, 1LL)) {
      break;
    }
    if (v144 >= v167) {
      goto LABEL_105;
    }
    v143 = *(void *)&v169[2 * v144];
    ++v145;
    if (v143) {
      goto LABEL_104;
    }
  }

      specialized _NativeDictionary._insert(at:key:value:)(v65, a1, a2, v10, v70);
      swift_bridgeObjectRetain();
      goto LABEL_105;
    }

    goto LABEL_71;
  }

  __break(1u);
LABEL_71:
  uint64_t v108 = v65;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftTimeZone>);
  int v74 = static _DictionaryStorage.copy(original:)();
  uint64_t v70 = v74;
  if (!*(void *)(v21 + 16))
  {
LABEL_103:
    swift_bridgeObjectRelease();
    uint64_t v65 = v108;
    goto LABEL_104;
  }

  uint64_t result = (char *)(v74 + 64);
  __srca = (char *)(v21 + 64);
  int v75 = (unint64_t)((1LL << *(_BYTE *)(v70 + 32)) + 63) >> 6;
  if (v70 != v21 || result >= &__srca[8 * v75]) {
    uint64_t result = (char *)memmove(result, __srca, 8 * v75);
  }
  uint64_t v117 = 0LL;
  *(void *)(v70 + 16) = *(void *)(v21 + 16);
  int v76 = 1LL << *(_BYTE *)(v21 + 32);
  uint64_t v77 = -1LL;
  if (v76 < 64) {
    uint64_t v77 = ~(-1LL << v76);
  }
  uint64_t v78 = v77 & *(void *)(v21 + 64);
  unsigned __int8 v111 = (unint64_t)(v76 + 63) >> 6;
  while (1)
  {
    if (v78)
    {
      uint64_t v79 = __clz(__rbit64(v78));
      v78 &= v78 - 1;
      uint64_t v80 = v79 | (v117 << 6);
      goto LABEL_79;
    }

    char v87 = v117 + 1;
    if (__OFADD__(v117, 1LL)) {
      goto LABEL_145;
    }
    if (v87 >= v111) {
      goto LABEL_103;
    }
    uint64_t v88 = *(void *)&__srca[8 * v87];
    uint64_t v89 = v117 + 1;
    if (!v88)
    {
      uint64_t v89 = v117 + 2;
      if (v117 + 2 >= v111) {
        goto LABEL_103;
      }
      uint64_t v88 = *(void *)&__srca[8 * v89];
      if (!v88)
      {
        uint64_t v89 = v117 + 3;
        if (v117 + 3 >= v111) {
          goto LABEL_103;
        }
        uint64_t v88 = *(void *)&__srca[8 * v89];
        if (!v88)
        {
          uint64_t v89 = v117 + 4;
          if (v117 + 4 >= v111) {
            goto LABEL_103;
          }
          uint64_t v88 = *(void *)&__srca[8 * v89];
          if (!v88)
          {
            uint64_t v89 = v117 + 5;
            if (v117 + 5 >= v111) {
              goto LABEL_103;
            }
            uint64_t v88 = *(void *)&__srca[8 * v89];
            if (!v88)
            {
              uint64_t v89 = v117 + 6;
              if (v117 + 6 >= v111) {
                goto LABEL_103;
              }
              uint64_t v88 = *(void *)&__srca[8 * v89];
              if (!v88)
              {
                uint64_t v89 = v117 + 7;
                if (v117 + 7 >= v111) {
                  goto LABEL_103;
                }
                uint64_t v88 = *(void *)&__srca[8 * v89];
                if (!v88) {
                  break;
                }
              }
            }
          }
        }
      }
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v78 = v4;
      goto LABEL_106;
    }
  }

  uint64_t v96 = v73;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _NSSwiftTimeZone>);
  id v82 = static _DictionaryStorage.copy(original:)();
  uint64_t v78 = v82;
  if (!*(void *)(v4 + 16))
  {
LABEL_141:
    swift_bridgeObjectRelease();
    int v73 = v96;
    if ((v21 & 1) != 0) {
      goto LABEL_107;
    }
    goto LABEL_142;
  }

  uint64_t result = (char *)(v82 + 64);
  __srcb = (char *)(v4 + 64);
  id v83 = (unint64_t)((1LL << *(_BYTE *)(v78 + 32)) + 63) >> 6;
  if (v78 != v4 || result >= &__srcb[8 * v83]) {
    uint64_t result = (char *)memmove(result, __srcb, 8 * v83);
  }
  id v84 = 0LL;
  *(void *)(v78 + 16) = *(void *)(v4 + 16);
  id v85 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v86 = -1LL;
  if (v85 < 64) {
    uint64_t v86 = ~(-1LL << v85);
  }
  char v87 = v86 & *(void *)(v4 + 64);
  char v99 = (unint64_t)(v85 + 63) >> 6;
  while (2)
  {
    if (v87)
    {
      uint64_t v88 = __clz(__rbit64(v87));
      v87 &= v87 - 1;
      uint64_t v89 = v88 | (v84 << 6);
LABEL_117:
      uint64_t v90 = 8 * v89;
      uint64_t v91 = *(void **)(*(void *)(v4 + 56) + v90);
      *(void *)(*(void *)(v78 + 48) + v90) = *(void *)(*(void *)(v4 + 48) + v90);
      *(void *)(*(void *)(v78 + 56) + v90) = v91;
      uint64_t result = v91;
      continue;
    }

    break;
  }

  uint64_t v92 = v84 + 1;
  if (__OFADD__(v84, 1LL)) {
    goto LABEL_148;
  }
  if (v92 >= v99) {
    goto LABEL_141;
  }
  uint64_t v93 = *(void *)&__srcb[8 * v92];
  ++v84;
  if (v93) {
    goto LABEL_140;
  }
  id v84 = v92 + 1;
  if (v92 + 1 >= v99) {
    goto LABEL_141;
  }
  uint64_t v93 = *(void *)&__srcb[8 * v84];
  if (v93) {
    goto LABEL_140;
  }
  id v84 = v92 + 2;
  if (v92 + 2 >= v99) {
    goto LABEL_141;
  }
  uint64_t v93 = *(void *)&__srcb[8 * v84];
  if (v93) {
    goto LABEL_140;
  }
  id v84 = v92 + 3;
  if (v92 + 3 >= v99) {
    goto LABEL_141;
  }
  uint64_t v93 = *(void *)&__srcb[8 * v84];
  if (v93) {
    goto LABEL_140;
  }
  id v84 = v92 + 4;
  if (v92 + 4 >= v99) {
    goto LABEL_141;
  }
  uint64_t v93 = *(void *)&__srcb[8 * v84];
  if (v93) {
    goto LABEL_140;
  }
  id v84 = v92 + 5;
  if (v92 + 5 >= v99) {
    goto LABEL_141;
  }
  uint64_t v93 = *(void *)&__srcb[8 * v84];
  if (v93) {
    goto LABEL_140;
  }
  id v84 = v92 + 6;
  if (v92 + 6 >= v99) {
    goto LABEL_141;
  }
  uint64_t v93 = *(void *)&__srcb[8 * v84];
  if (v93)
  {
LABEL_140:
    char v87 = (v93 - 1) & v93;
    uint64_t v89 = __clz(__rbit64(v93)) + (v84 << 6);
    goto LABEL_117;
  }

  uint64_t v94 = v92 + 7;
  if (v94 >= v99) {
    goto LABEL_141;
  }
  uint64_t v93 = *(void *)&__srcb[8 * v94];
  if (v93)
  {
    id v84 = v94;
    goto LABEL_140;
  }

  while (1)
  {
    id v84 = v94 + 1;
    if (__OFADD__(v94, 1LL)) {
      break;
    }
    if (v84 >= v99) {
      goto LABEL_141;
    }
    uint64_t v93 = *(void *)&__srcb[8 * v84];
    ++v94;
    if (v93) {
      goto LABEL_140;
    }
  }

  swift_release();
  int v75 = v371;
  *(void *)&v353 = v371;
  v341 = v10;
  if (v337 > 0x7FF)
  {
    uint64_t v80 = *(void *)(v3 + 64);
    id v81 = *(void *)(v3 + 72);
    id v82 = *(void *)(v3 + 80);
    id v83 = *(void *)(v3 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v80, v81, v82, v83, &v379);
    v349 = v379;
    v336 = v380;
    uint64_t v79 = v381;
    swift_unknownObjectRelease();
    uint64_t v78 = v336;
    uint64_t v77 = v349;
  }

  else
  {
    int v76 = (void *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v76, 0LL, (unint64_t *)&v379);
    uint64_t v77 = v379;
    uint64_t v78 = v380;
    uint64_t v79 = v381;
  }

  v371 = v77;
  v372 = v78;
  *(void *)&v373 = v79;
  id v84 = *(void *)(v3 + 64);
  id v85 = *(void *)(v3 + 72);
  uint64_t v86 = *(void *)(v3 + 80);
  char v87 = *(void *)(v3 + 88);
  Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  LODWORD(v349) = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0LL, Enum & 1, v84, v85, v86, v87, (uint64_t *)&v439);
  uint64_t v89 = v441;
  swift_unknownObjectRelease();
  if (v89 < v79 && *(void *)(v75 + 16))
  {
    do
    {
      uint64_t v90 = v371;
      uint64_t v91 = v372;
      uint64_t v92 = *(void *)(v3 + 64);
      uint64_t v2 = *(void *)(v3 + 72);
      uint64_t v93 = *(void *)(v3 + 80);
      uint64_t v94 = swift_unknownObjectRetain();
      uint64_t result = specialized Rope._endPath.getter(v94);
      if (v92)
      {
        uint64_t result = swift_unknownObjectRelease();
        if (v79 != v93) {
          goto LABEL_133;
        }
      }

      else if (v79)
      {
LABEL_133:
        uint64_t v107 = *(void *)(v3 + 64);
        uint64_t v108 = *(void *)(v3 + 72);
        uint64_t v2 = *(void *)(v3 + 80);
        uint64_t v109 = *(void *)(v3 + 88);
        v439 = v90;
        *(void *)&v440 = v91;
        uint64_t v110 = *((void *)&v91 + 1) - 1LL;
        if (__OFSUB__(*((void *)&v91 + 1), 1LL)) {
          goto LABEL_392;
        }
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v439, v107, v108, v2, v109);
        unsigned __int8 v111 = *((void *)&v439 + 1);
        char v100 = v440;
        uint64_t v96 = v439;
        __int128 v112 = specialized Rope.subscript.getter(v439, *((unint64_t *)&v439 + 1), v440, v107, v108, v2, v109);
        uint64_t v2 = v113;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        __int128 v114 = v79 - v112;
        if (__OFSUB__(v79, v112)) {
          goto LABEL_393;
        }
        uint64_t v97 = v337 >> 11;
        __int128 v115 = v343;
        goto LABEL_159;
      }

      uint64_t v95 = *(void *)(v3 + 64);
      uint64_t v10 = *(void *)(v3 + 72);
      uint64_t v96 = *(void *)(v3 + 88);
      *(void *)&v336 = *(void *)(v3 + 80);
      if (v95)
      {
        uint64_t v13 = *(void *)(v3 + 88);
        uint64_t v97 = v337 >> 11;
        if (*(_WORD *)(v95 + 16))
        {
          uint64_t v15 = *(unsigned __int8 *)(v95 + 18);
          if (*(_BYTE *)(v95 + 18))
          {
            uint64_t result = swift_unknownObjectRetain_n();
            uint64_t v2 = v337 >> 11;
            uint64_t v98 = v95;
            while (1)
            {
              char v101 = *(unsigned __int16 *)(v98 + 16);
              if (!*(_WORD *)(v98 + 16)) {
                goto LABEL_422;
              }
              char v102 = *(void *)(v98 + 40);
              char v45 = __OFSUB__(v2, v102);
              uint64_t v103 = v2 - v102;
              if (v45) {
                break;
              }
              if (v103 <= 0)
              {
                id v54 = 0LL;
              }

              else
              {
                if ((_DWORD)v101 == 1) {
                  goto LABEL_424;
                }
                uint64_t v104 = *(void *)(v98 + 64);
                uint64_t v2 = v103 - v104;
                if (__OFSUB__(v103, v104)) {
                  goto LABEL_375;
                }
                if (v2 >= 1)
                {
                  if ((_DWORD)v101 == 2) {
                    goto LABEL_424;
                  }
                  uint64_t v105 = (void *)(v98 + 88);
                  id v54 = 2LL;
                  while (v101 != v54)
                  {
                    uint64_t v106 = v2 - *v105;
                    if (__OFSUB__(v2, *v105)) {
                      goto LABEL_345;
                    }
                    if (v106 < 1) {
                      goto LABEL_117;
                    }
                    ++v54;
                    v105 += 3;
                    uint64_t v2 = v106;
                    if (v101 == v54) {
                      goto LABEL_424;
                    }
                  }

                  __break(1u);
LABEL_345:
                  __break(1u);
LABEL_346:
                  v324 = *(void *)(v2 + 48);
                  char v45 = __OFSUB__(v54, v324);
                  id v43 = v54 - v324;
                  if (v45) {
                    goto LABEL_420;
                  }
                  if (__OFADD__(v43, 1LL)) {
                    goto LABEL_421;
                  }
                  if (v43 + 1 >= 1)
                  {
                    if ((_DWORD)v98 != 2)
                    {
                      v325 = (void *)(v2 + 72);
                      id v46 = 2LL;
                      while (v98 != v46)
                      {
                        v216 = v43 - *v325;
                        if (__OFSUB__(v43, *v325)) {
                          goto LABEL_413;
                        }
                        if (__OFADD__(v216, 1LL)) {
                          goto LABEL_414;
                        }
                        if (v216 + 1 < 1) {
                          goto LABEL_369;
                        }
                        ++v46;
                        v325 += 3;
                        id v43 = v216;
                        if (v98 == v46) {
                          goto LABEL_360;
                        }
                      }

                      goto LABEL_412;
                    }

                    v216 = v43;
                    goto LABEL_360;
                  }

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          char v42 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v51 << 8);
          goto LABEL_105;
        }

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          char v42 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v51 << 8);
          goto LABEL_105;
        }

  id v54 = _StringGuts.validateInclusiveScalarIndex(_:)(v40, v37, v39);
  if (v26 < 0)
  {
    int v61 = 0LL;
    while (1)
    {
      if (v54 < 0x10000) {
        goto LABEL_152;
      }
      if ((v39 & 0x1000000000000000LL) == 0) {
        break;
      }
      id v54 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_123:
      if (v26 >= --v61) {
        goto LABEL_139;
      }
    }

    uint64_t v62 = v54 >> 16;
    if ((v39 & 0x2000000000000000LL) != 0)
    {
      int v72 = v37;
      int v73 = v39 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v72 + v62 - 1) & 0xC0) == 0x80)
      {
        id v64 = 0LL;
        do
          id v66 = *((_BYTE *)&v71 + v62 + v64-- + 6) & 0xC0;
        while (v66 == 128);
        goto LABEL_136;
      }
    }

    else
    {
      id v63 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v37 & 0x1000000000000000LL) == 0) {
        id v63 = _StringObject.sharedUTF8.getter();
      }
      if ((*(_BYTE *)(v62 + v63 - 1) & 0xC0) == 0x80)
      {
        id v64 = 0LL;
        do
          uint64_t v65 = *(_BYTE *)(v63 + v62 - 2 + v64--) & 0xC0;
        while (v65 == 128);
LABEL_136:
        uint64_t v67 = 1 - v64;
LABEL_138:
        id v54 = ((v62 - v67) << 16) | 5;
        goto LABEL_123;
      }
    }

    uint64_t v67 = 1LL;
    goto LABEL_138;
  }

  if (v26)
  {
    if ((v39 & 0x2000000000000000LL) != 0) {
      id v55 = HIBYTE(v39) & 0xF;
    }
    else {
      id v55 = v37 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      char v56 = v54 >> 16;
      if (v54 >> 16 >= v55) {
        goto LABEL_150;
      }
      if ((v39 & 0x1000000000000000LL) != 0)
      {
        id v54 = String.UnicodeScalarView._foreignIndex(after:)();
        if (!--v26) {
          break;
        }
      }

      else
      {
        if ((v39 & 0x2000000000000000LL) != 0)
        {
          int v72 = v37;
          int v73 = v39 & 0xFFFFFFFFFFFFFFLL;
          char v58 = *((unsigned __int8 *)&v72 + v56);
        }

        else
        {
          uint64_t v57 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v37 & 0x1000000000000000LL) == 0) {
            uint64_t v57 = _StringObject.sharedUTF8.getter();
          }
          char v58 = *(unsigned __int8 *)(v57 + v56);
        }

        uint64_t v59 = (char)v58;
        char v60 = __clz(v58 ^ 0xFF) - 24;
        if (v59 >= 0) {
          LOBYTE(v60) = 1;
        }
        id v54 = ((v56 + v60) << 16) | 5;
        if (!--v26) {
          break;
        }
      }
    }
  }

      char v49 = v113;
      char v50 = v114;
LABEL_105:
      if (!HIWORD(v45))
      {
        a4 = (unsigned __int16)a3 | (v45 << 16);
        goto LABEL_107;
      }

      goto LABEL_44;
    }

    if (__OFADD__(v29, 1LL)) {
      goto LABEL_176;
    }
  }

  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
  do
  {
    LODWORD(v115[0]) = (_DWORD)v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    uint64_t v116 = v114;
    uint64_t v117 = (__int16)v19;
    uint64_t v89 = _So9NSDecimala__exponent_getter((char *)v115);
    if (v89 > 0) {
      goto LABEL_269;
    }
    if (!v89) {
      goto LABEL_184;
    }
    uint64_t v90 = -v89 & ~(-v89 >> 31);
    uint64_t v91 = ~v89;
    while (v90 > v91)
    {
      a4 /= 0xAuLL;
      if (__CFADD__(v89++, 1)) {
        goto LABEL_184;
      }
    }

      char v49 = v113;
      char v50 = v114;
LABEL_105:
      if (!HIWORD(v45))
      {
        a4 = (unsigned __int16)a3 | (v45 << 16);
        goto LABEL_107;
      }

      goto LABEL_44;
    }

    if (__OFADD__(v29, 1LL)) {
      goto LABEL_176;
    }
  }

  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
  do
  {
    LODWORD(v115[0]) = (_DWORD)v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    uint64_t v116 = v114;
    uint64_t v117 = (__int16)v19;
    uint64_t v89 = _So9NSDecimala__exponent_getter((char *)v115);
    if (v89 > 0) {
      goto LABEL_269;
    }
    if (!v89) {
      goto LABEL_184;
    }
    uint64_t v90 = -v89 & ~(-v89 >> 31);
    uint64_t v91 = ~v89;
    while (v90 > v91)
    {
      a4 /= 0xAuLL;
      if (__CFADD__(v89++, 1)) {
        goto LABEL_184;
      }
    }

      char v49 = v113;
      char v50 = v114;
LABEL_105:
      if (!HIWORD(v45))
      {
        a4 = (unsigned __int16)a3 | (v45 << 16);
        goto LABEL_107;
      }

      goto LABEL_44;
    }

    if (__OFADD__(v29, 1LL)) {
      goto LABEL_176;
    }
  }

  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
  do
  {
    LODWORD(v115[0]) = (_DWORD)v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    uint64_t v116 = v114;
    uint64_t v117 = (__int16)v19;
    uint64_t v89 = _So9NSDecimala__exponent_getter((char *)v115);
    if (v89 > 0) {
      goto LABEL_269;
    }
    if (!v89) {
      goto LABEL_184;
    }
    uint64_t v90 = -v89 & ~(-v89 >> 31);
    uint64_t v91 = ~v89;
    while (v90 > v91)
    {
      a4 /= 0xAuLL;
      if (__CFADD__(v89++, 1)) {
        goto LABEL_184;
      }
    }

      char v49 = v113;
      char v50 = v114;
LABEL_105:
      if (!HIWORD(v45))
      {
        a4 = (unsigned __int16)a3 | (v45 << 16);
        goto LABEL_107;
      }

      goto LABEL_44;
    }

    if (__OFADD__(v29, 1LL)) {
      goto LABEL_176;
    }
  }

  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
  do
  {
    LODWORD(v116[0]) = (_DWORD)v8;
    WORD2(v116[0]) = a3;
    HIWORD(v116[0]) = v20;
    LOWORD(v116[1]) = v14;
    WORD1(v116[1]) = a5;
    WORD2(v116[1]) = v7;
    HIWORD(v116[1]) = v21;
    uint64_t v117 = v114;
    uint64_t v118 = (__int16)v19;
    uint64_t v89 = _So9NSDecimala__exponent_getter((char *)v116);
    if (v89 > 0) {
      goto LABEL_269;
    }
    LODWORD(v8) = v115;
    if (!v89) {
      return (char *)a4;
    }
    uint64_t v90 = -v89 & ~(-v89 >> 31);
    uint64_t v91 = ~v89;
    while (v90 > v91)
    {
      a4 /= 0xAuLL;
      if (__CFADD__(v89++, 1)) {
        return (char *)a4;
      }
    }

                uint64_t v9 = (unint64_t)&demangling cache variable for type metadata for (Hashable & Sendable)?;
                outlined destroy of Any?( (uint64_t)v256,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?( (uint64_t)v257,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v200);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v205);
                outlined destroy of Any?( (uint64_t)&v221,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v211,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v216,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v8 & 1) == 0) {
                  goto LABEL_136;
                }
LABEL_105:
                v96 += 2;
                ++v95;
                uint64_t v29 = v199;
                if (v97 == v7)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v57 = (void *)v188;
                  uint64_t v29 = *(void *)(v188 + 64);
                  uint64_t v9 = *(void *)(v188 + 80);
                  id v66 = *(void *)(v188 + 88);
                  v187 = v173;
                  char v34 = v178;
                  *(void *)&v221 = v178;
                  *((void *)&v221 + 1) = v182;
                  uint64_t v8 = v172;
                  v191 = v182;
                  *(void *)&v222 = v172;
                  uint64_t v44 = __OFADD__(v183++, 1LL);
                  if (!v44) {
                    goto LABEL_73;
                  }
                  __break(1u);
LABEL_134:
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v205);
LABEL_135:
                  outlined destroy of Any?( (uint64_t)&v221,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v211, (uint64_t *)v29);
                  outlined destroy of Any?((uint64_t)&v216, (uint64_t *)v29);
LABEL_136:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v57 = (void *)v188;
                  int v74 = v186;
                  uint64_t v8 = v175;
                  id v69 = v191;
                  goto LABEL_137;
                }
              }
            }

            goto LABEL_218;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_137:
          if (v181 != v57[11]) {
            goto LABEL_228;
          }
          if (v8)
          {
            uint64_t v29 = *(void *)(v8 + 24 * ((v69 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }

          else
          {
            __int128 v114 = *(void *)(v188 + 64);
            swift_unknownObjectRetain();
            uint64_t v29 = specialized Rope._Node.subscript.getter(v69, v114);
            swift_unknownObjectRelease();
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __int128 v115 = v187 + v29;
          if (__OFADD__(v187, v29)) {
            goto LABEL_229;
          }
          uint64_t v116 = v157;
          uint64_t v117 = v157[1];
          v257[0] = *v157;
          v257[1] = v117;
          v257[2] = v157[2];
          uint64_t v29 = (unint64_t)v257;
          BigString.utf8.getter();
          if (__OFSUB__(v115, v159 >> 11))
          {
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
            goto LABEL_232;
          }

          uint64_t v29 = BigString.UTF8View.index(_:offsetBy:)();
          uint64_t v119 = v118;
          unsigned __int8 v120 = v116;
          unsigned __int8 v122 = v121;
          __int128 v124 = v123;
          outlined release of Locale((uint64_t)v234);
          if (v170 >= v29 >> 10) {
            uint64_t v9 = v29;
          }
          else {
            uint64_t v9 = v171;
          }
          if (v170 >= v29 >> 10) {
            __int128 v125 = v119;
          }
          else {
            __int128 v125 = v169;
          }
          if (v170 >= v29 >> 10) {
            uint64_t v7 = v122;
          }
          else {
            uint64_t v7 = v168;
          }
          if (v170 >= v29 >> 10) {
            uint64_t v8 = v124;
          }
          else {
            uint64_t v8 = v167;
          }
          __int128 v126 = *v120;
          __int128 v127 = v120[2];
          v256[1] = v120[1];
          v256[2] = v127;
          v256[0] = v126;
          if (v9 >> 10 < v174) {
            goto LABEL_231;
          }
          *(void *)&v211 = v180;
          *((void *)&v211 + 1) = v184;
          v212 = v185;
          *(void *)&v213 = v9;
          *((void *)&v213 + 1) = v125;
          *(void *)&v214 = v7;
          *((void *)&v214 + 1) = v8;
          __int128 v128 = *(void *)(v74 + 16);
          if (!v128 || v174 == v9 >> 10)
          {
            v199 = v125;
LABEL_171:
            outlined release of AttributedString.Runs((uint64_t)v244);
LABEL_172:
            if (v165 == *(void *)(v188 + 88))
            {
              if (v164)
              {
                uint64_t v29 = *(void *)(v164 + 24 * ((v161 >> ((4 * *(_BYTE *)(v164 + 18) + 8) & 0x3C)) & 0xF) + 32);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }

              else
              {
                v134 = *(void *)(v188 + 64);
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v161, v134);
                uint64_t v29 = v135;
                swift_unknownObjectRelease();
              }

              if (one-time initialization token for name == -1)
              {
                if (!*(void *)(v29 + 16))
                {
LABEL_234:
                  v220 = 0LL;
                  v218 = 0u;
                  v219 = 0u;
                  v216 = 0u;
                  v217 = 0u;
                  goto LABEL_235;
                }

                uint64_t v9 = (unint64_t)&demangling cache variable for type metadata for (Hashable & Sendable)?;
                outlined destroy of Any?( (uint64_t)v258,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?( (uint64_t)v259,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v202);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v207);
                outlined destroy of Any?( (uint64_t)&v223,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v213,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v218,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v8 & 1) == 0) {
                  goto LABEL_136;
                }
LABEL_105:
                v97 += 2;
                ++v96;
                uint64_t v29 = v201;
                if (v98 == v7)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  id v63 = v189;
                  char v56 = (void *)v190;
                  uint64_t v29 = *(void *)(v190 + 64);
                  uint64_t v9 = *(void *)(v190 + 80);
                  uint64_t v67 = *(void *)(v190 + 88);
                  v188 = v175;
                  *(void *)&v223 = v189;
                  *((void *)&v223 + 1) = v183;
                  uint64_t v8 = v174;
                  v193 = v183;
                  *(void *)&v224 = v174;
                  id v43 = __OFADD__(v184++, 1LL);
                  if (!v43) {
                    goto LABEL_73;
                  }
                  __break(1u);
LABEL_134:
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v207);
LABEL_135:
                  outlined destroy of Any?( (uint64_t)&v223,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v213, (uint64_t *)v29);
                  outlined destroy of Any?((uint64_t)&v218, (uint64_t *)v29);
LABEL_136:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  char v56 = (void *)v190;
                  int v75 = v187;
                  uint64_t v8 = v177;
                  uint64_t v70 = v193;
                  goto LABEL_137;
                }
              }
            }

            goto LABEL_218;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_137:
          if (v182 != v56[11]) {
            goto LABEL_228;
          }
          if (v8)
          {
            uint64_t v29 = *(void *)(v8 + 24 * ((v70 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }

          else
          {
            __int128 v115 = *(void *)(v190 + 64);
            swift_unknownObjectRetain();
            uint64_t v29 = specialized Rope._Node.subscript.getter(v70, v115);
            swift_unknownObjectRelease();
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v116 = v188 + v29;
          if (__OFADD__(v188, v29)) {
            goto LABEL_229;
          }
          uint64_t v117 = v159;
          uint64_t v118 = v159[1];
          v259[0] = *v159;
          v259[1] = v118;
          v259[2] = v159[2];
          uint64_t v29 = (unint64_t)v259;
          BigString.utf8.getter();
          if (__OFSUB__(v116, v160 >> 11))
          {
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
            goto LABEL_232;
          }

          uint64_t v29 = BigString.UTF8View.index(_:offsetBy:)();
          unsigned __int8 v120 = v119;
          unsigned __int8 v121 = v117;
          unsigned __int8 v123 = v122;
          __int128 v125 = v124;
          outlined release of Locale((uint64_t)v236);
          if (v172 >= v29 >> 10) {
            uint64_t v9 = v29;
          }
          else {
            uint64_t v9 = v173;
          }
          if (v172 >= v29 >> 10) {
            __int128 v126 = v120;
          }
          else {
            __int128 v126 = v171;
          }
          if (v172 >= v29 >> 10) {
            uint64_t v7 = v123;
          }
          else {
            uint64_t v7 = v170;
          }
          if (v172 >= v29 >> 10) {
            uint64_t v8 = v125;
          }
          else {
            uint64_t v8 = v169;
          }
          __int128 v127 = *v121;
          __int128 v128 = v121[2];
          v258[1] = v121[1];
          v258[2] = v128;
          v258[0] = v127;
          if (v9 >> 10 < v176) {
            goto LABEL_231;
          }
          *(void *)&v213 = v181;
          *((void *)&v213 + 1) = v185;
          v214 = v186;
          *(void *)&v215 = v9;
          *((void *)&v215 + 1) = v126;
          *(void *)&v216 = v7;
          *((void *)&v216 + 1) = v8;
          __int128 v129 = *(void *)(v75 + 16);
          if (!v129 || v176 == v9 >> 10)
          {
            v201 = v126;
LABEL_171:
            outlined release of AttributedString.Runs((uint64_t)v246);
LABEL_172:
            if (v167 == *(void *)(v190 + 88))
            {
              if (v166)
              {
                uint64_t v29 = *(void *)(v166 + 24 * ((v163 >> ((4 * *(_BYTE *)(v166 + 18) + 8) & 0x3C)) & 0xF) + 32);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }

              else
              {
                v135 = *(void *)(v190 + 64);
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v163, v135);
                uint64_t v29 = v136;
                swift_unknownObjectRelease();
              }

              if (one-time initialization token for name == -1)
              {
                if (!*(void *)(v29 + 16))
                {
LABEL_234:
                  v222 = 0LL;
                  v220 = 0u;
                  v221 = 0u;
                  v218 = 0u;
                  v219 = 0u;
                  goto LABEL_235;
                }

                uint64_t v9 = (unint64_t)&demangling cache variable for type metadata for (Hashable & Sendable)?;
                outlined destroy of Any?( (uint64_t)v253,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?( (uint64_t)v254,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v197);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v202);
                outlined destroy of Any?( (uint64_t)&v218,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v208,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v213,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v8 & 1) == 0) {
                  goto LABEL_136;
                }
LABEL_105:
                a1 += 16LL;
                ++v95;
                uint64_t v29 = v196;
                if (v96 == v7)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v62 = v184;
                  a1 = v185;
                  uint64_t v29 = *(void *)(v185 + 64);
                  uint64_t v9 = *(void *)(v185 + 80);
                  id v66 = *(void *)(v185 + 88);
                  v183 = v169;
                  *(void *)&v218 = v184;
                  *((void *)&v218 + 1) = v178;
                  uint64_t v8 = v168;
                  v188 = v178;
                  *(void *)&v219 = v168;
                  id v43 = __OFADD__(v179++, 1LL);
                  if (!v43) {
                    goto LABEL_73;
                  }
                  __break(1u);
LABEL_134:
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v202);
LABEL_135:
                  outlined destroy of Any?( (uint64_t)&v218,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v208, (uint64_t *)v29);
                  outlined destroy of Any?((uint64_t)&v213, (uint64_t *)v29);
LABEL_136:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  a1 = v185;
                  int v74 = v182;
                  uint64_t v8 = v171;
                  id v69 = v188;
                  goto LABEL_137;
                }
              }
            }

            goto LABEL_218;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_137:
          if (v177 != *(void *)(a1 + 88)) {
            goto LABEL_228;
          }
          if (v8)
          {
            uint64_t v29 = *(void *)(v8 + 24 * ((v69 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }

          else
          {
            a1 = *(void *)(v185 + 64);
            swift_unknownObjectRetain();
            uint64_t v29 = specialized Rope._Node.subscript.getter(v69, a1);
            swift_unknownObjectRelease();
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __int128 v113 = v183 + v29;
          if (__OFADD__(v183, v29)) {
            goto LABEL_229;
          }
          __int128 v114 = v154;
          __int128 v115 = v154[1];
          v254[0] = *v154;
          v254[1] = v115;
          v254[2] = v154[2];
          uint64_t v29 = (unint64_t)v254;
          BigString.utf8.getter();
          if (__OFSUB__(v113, v155 >> 11))
          {
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
            goto LABEL_232;
          }

          uint64_t v29 = BigString.UTF8View.index(_:offsetBy:)();
          uint64_t v117 = v116;
          uint64_t v118 = v114;
          unsigned __int8 v120 = v119;
          a1 = v121;
          outlined release of Locale((uint64_t)v231);
          if (v166 >= v29 >> 10) {
            uint64_t v9 = v29;
          }
          else {
            uint64_t v9 = v167;
          }
          if (v166 >= v29 >> 10) {
            unsigned __int8 v122 = v117;
          }
          else {
            unsigned __int8 v122 = v165;
          }
          if (v166 >= v29 >> 10) {
            uint64_t v7 = v120;
          }
          else {
            uint64_t v7 = v164;
          }
          if (v166 >= v29 >> 10) {
            uint64_t v8 = a1;
          }
          else {
            uint64_t v8 = v163;
          }
          unsigned __int8 v123 = *v118;
          __int128 v124 = v118[2];
          v253[1] = v118[1];
          v253[2] = v124;
          v253[0] = v123;
          if (v9 >> 10 < v170) {
            goto LABEL_231;
          }
          *(void *)&v208 = v176;
          *((void *)&v208 + 1) = v180;
          v209 = v181;
          *(void *)&v210 = v9;
          *((void *)&v210 + 1) = v122;
          *(void *)&v211 = v7;
          *((void *)&v211 + 1) = v8;
          __int128 v125 = *(void *)(v74 + 16);
          if (!v125 || v170 == v9 >> 10)
          {
            v196 = v122;
LABEL_171:
            outlined release of AttributedString.Runs((uint64_t)v241);
LABEL_172:
            if (v162 == *(void *)(v185 + 88))
            {
              if (v161)
              {
                uint64_t v29 = *(void *)(v161 + 24 * ((v160 >> ((4 * *(_BYTE *)(v161 + 18) + 8) & 0x3C)) & 0xF) + 32);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }

              else
              {
                v131 = *(void *)(v185 + 64);
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v160, v131);
                uint64_t v29 = v132;
                swift_unknownObjectRelease();
              }

              a1 = v174;
              if (one-time initialization token for name == -1)
              {
                if (!*(void *)(v29 + 16))
                {
LABEL_234:
                  v217 = 0LL;
                  v215 = 0u;
                  v216 = 0u;
                  v213 = 0u;
                  v214 = 0u;
                  goto LABEL_235;
                }

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v6 = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return v6;
  }
  uint64_t v34 = ~v5;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  int v29 = *((unsigned __int8 *)a1 + 16);
  __int128 v9 = *(_OWORD *)(a1 + 5);
  v39[0] = *(_OWORD *)(a1 + 3);
  v39[1] = v9;
  v39[2] = *(_OWORD *)(a1 + 7);
  __int16 v40 = *((_WORD *)a1 + 36);
  uint64_t v26 = a1[10];
  uint64_t v27 = a1[11];
  uint64_t v32 = v8;
  uint64_t v33 = v7;
  while (1)
  {
    uint64_t v10 = *(void *)(v36 + 48) + 96 * v6;
    unsigned __int8 v11 = *(_BYTE *)(v10 + 24);
    uint64_t v12 = *(void *)(v10 + 32);
    v4.i32[0] = *(_DWORD *)(v10 + 40);
    uint64_t v13 = *(void *)(v10 + 48);
    char v14 = *(_BYTE *)(v10 + 56);
    char v15 = *(_BYTE *)(v10 + 57);
    v3.i32[0] = *(_DWORD *)(v10 + 58);
    char v16 = *(_BYTE *)(v10 + 62);
    char v17 = *(_BYTE *)(v10 + 63);
    uint64_t v18 = *(void *)(v10 + 64);
    char v19 = *(_BYTE *)(v10 + 72);
    char v20 = *(_BYTE *)(v10 + 73);
    uint64_t v37 = *(void *)(v10 + 80);
    uint64_t v38 = *(void *)(v10 + 88);
    if (*(void *)v10 == v7 && *(void *)(v10 + 8) == v8)
    {
    }

    else
    {
      int v28 = *(unsigned __int8 *)(v10 + 16);
      unsigned __int8 v31 = *(_BYTE *)(v10 + 24);
      uint64_t v30 = *(void *)(v10 + 32);
      char v22 = *(_BYTE *)(v10 + 56);
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v12 = v30;
      unsigned __int8 v11 = v31;
      if ((v23 & 1) == 0) {
        goto LABEL_5;
      }
      char v14 = v22;
      if (v28 != v29) {
        goto LABEL_5;
      }
    }

    v41[0] = v11;
    uint64_t v42 = v12;
    unsigned __int32 v43 = vmovn_s16((int16x8_t)vmovl_u8(v4)).u32[0];
    uint64_t v44 = v13;
    char v45 = v14;
    char v46 = v15;
    unsigned __int32 v47 = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    char v48 = v16;
    char v49 = v17;
    uint64_t v50 = v18;
    char v51 = v19;
    char v52 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)(v41, (unsigned __int8 *)v39))
    {
LABEL_3:
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }

    if (!v38)
    {
      swift_bridgeObjectRelease();
      if (!v27) {
        goto LABEL_25;
      }
      goto LABEL_4;
    }

    if (!v27) {
      goto LABEL_3;
    }
    if (v37 == v26 && v38 == v27) {
      break;
    }
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0) {
      return v6;
    }
LABEL_5:
    uint64_t v7 = v33;
    unint64_t v6 = (v6 + 1) & v34;
    uint64_t v8 = v32;
    if (((*(void *)(v35 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
      return v6;
    }
  }

  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(double *a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  uint64_t v35 = v2 + 64;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v33 = ~v3;
    uint64_t v34 = *(void *)(v2 + 48);
    uint64_t v36 = *((void *)a1 + 1);
    double v37 = *a1;
    uint64_t v31 = *((void *)a1 + 3);
    uint64_t v32 = *((void *)a1 + 2);
    int v30 = *((unsigned __int8 *)a1 + 32);
    uint64_t v28 = *((void *)a1 + 6);
    uint64_t v29 = *((void *)a1 + 5);
    int v27 = *((unsigned __int8 *)a1 + 56);
    uint64_t v25 = *((void *)a1 + 9);
    uint64_t v26 = *((void *)a1 + 8);
    double v5 = a1[11];
    int v24 = *((unsigned __int8 *)a1 + 80);
    do
    {
      uint64_t v6 = v34 + 96 * v4;
      uint64_t v8 = *(void *)(v6 + 16);
      uint64_t v7 = *(void *)(v6 + 24);
      int v9 = *(unsigned __int8 *)(v6 + 32);
      uint64_t v10 = *(void *)(v6 + 40);
      uint64_t v11 = *(void *)(v6 + 48);
      int v12 = *(unsigned __int8 *)(v6 + 56);
      uint64_t v13 = *(void *)(v6 + 64);
      uint64_t v14 = *(void *)(v6 + 72);
      int v15 = *(unsigned __int8 *)(v6 + 80);
      double v16 = *(double *)(v6 + 88);
      BOOL v17 = *(void *)v6 == *(void *)&v37 && *(void *)(v6 + 8) == v36;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v18 = v8 == v32 && v7 == v31;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          BOOL v19 = v9 == v30 && v10 == v29;
          BOOL v20 = v19 && v11 == v28;
          if (v20 && v12 == v27)
          {
            BOOL v22 = v13 == v26 && v14 == v25;
            if ((v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              && ((v24 ^ v15) & 1) == 0
              && v16 == v5)
            {
              break;
            }
          }
        }
      }

      unint64_t v4 = (v4 + 1) & v33;
    }

    while (((*(void *)(v35 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if (((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    unint64_t v24 = HIDWORD(a4);
    int v25 = a4;
    uint64_t v11 = ~v7;
    uint64_t v12 = *(void *)(v5 + 48);
    uint64_t v26 = a3;
    do
    {
      uint64_t v14 = v12 + 32 * v8;
      int v15 = *(_DWORD *)(v14 + 16);
      char v16 = *(_BYTE *)(v14 + 20);
      int v18 = *(_DWORD *)(v14 + 24);
      int v17 = *(_DWORD *)(v14 + 28);
      if (*(void *)v14 != a1 || *(void *)(v14 + 8) != a2)
      {
        uint64_t v20 = v11;
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v11 = v20;
        a3 = v26;
        if ((v21 & 1) == 0) {
          goto LABEL_7;
        }
      }

      if ((v16 & 1) != 0)
      {
        if ((a3 & 0x100000000LL) == 0) {
          goto LABEL_7;
        }
        BOOL v22 = v18 == v25;
      }

      else
      {
        if ((a3 & 0x100000000LL) != 0) {
          goto LABEL_7;
        }
        BOOL v22 = v15 == (_DWORD)a3 && v18 == v25;
      }

      if (v22 && v17 == (_DWORD)v24) {
        return v8;
      }
LABEL_7:
      unint64_t v8 = (v8 + 1) & v11;
    }

    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0);
  }

  return v8;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v5 = ~v3;
    int v6 = *a1;
    uint64_t v7 = *((void *)a1 + 1);
    int v15 = (__int128 *)(a1 + 32);
    char v16 = (__int128 *)(a1 + 16);
    int v14 = a1[48];
    do
    {
      unint64_t v8 = (unsigned __int8 *)(*(void *)(v2 + 48) + 56 * v4);
      if (*v8 == v6)
      {
        uint64_t v9 = *((void *)v8 + 1);
        __int128 v10 = *((_OWORD *)v8 + 1);
        int v11 = v8[48];
        __int128 v18 = *((_OWORD *)v8 + 2);
        if (v9)
        {
          if (!v7) {
            goto LABEL_4;
          }
          __int128 v17 = *((_OWORD *)v8 + 1);
          char v12 = specialized static Set.== infix(_:_:)(v9, v7);
          __int128 v10 = v17;
          if ((v12 & 1) == 0) {
            goto LABEL_4;
          }
        }

        else if (v7)
        {
          goto LABEL_4;
        }

        __int128 v20 = *v16;
        __int128 v21 = v10;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if ((specialized static Calendar.== infix(_:_:)((uint64_t)&v21, (uint64_t)&v20) & 1) != 0)
        {
          __int128 v20 = *v15;
          __int128 v21 = v18;
          char v19 = specialized static Locale.== infix(_:_:)((uint64_t)&v21, (uint64_t)&v20);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) != 0 && ((v14 ^ v11) & 1) == 0) {
            return v4;
          }
        }

        else
        {
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
      }

LABEL_4:
      unint64_t v4 = (v4 + 1) & v5;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

    swift_release();
    v152._countAndFlagsBits = 2683LL;
    v152._object = (void *)0xE200000000000000LL;
    String.append(_:)(v149);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 125LL;
    v13._object = (void *)0xE100000000000000LL;
    String.append(_:)(v13);
    String.append(_:)(v152);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v150);
    uint64_t v3 = (uint64_t)v133;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v4 = v106;
    uint64_t v2 = v107;
    char v12 = v142;
    int v11 = (uint64_t)v137;
    uint64_t v7 = v139;
    if (v142 != v106) {
      continue;
    }
    break;
  }

  uint64_t v5 = v166;
LABEL_151:
  swift_release();
  outlined release of AttributedString.Runs((uint64_t)&v193);
  return v5;
}

  if (v9)
  {
    v18._countAndFlagsBits = 95LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    v19._countAndFlagsBits = v11;
    v19._object = v12;
    String.append(_:)(v19);
  }

  outlined consume of Locale.LanguageCode?(v31, v30);
  outlined consume of Locale.LanguageCode?(v32, v6);
  outlined consume of Locale.LanguageCode?(v10, v9);
  __int128 v20 = 0LL;
  swift_bridgeObjectRetain();
  __int128 v21 = a1(257LL, 0LL, 0xE000000000000000LL);
  char v23 = v22;
  swift_bridgeObjectRelease();
  if (v23)
  {
    unint64_t v24 = a2(257LL, v21, v23);
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();
    if (v26)
    {
      swift_bridgeObjectRelease();
      return v24;
    }
  }

  return v20;
}

  if (v10)
  {
    v16._countAndFlagsBits = 95LL;
    v16._object = (void *)0xE100000000000000LL;
    String.append(_:)(v16);
    v17._countAndFlagsBits = v12;
    v17._object = v11;
    String.append(_:)(v17);
  }

  outlined consume of Locale.LanguageCode?(v29, v28);
  outlined consume of Locale.LanguageCode?(v5, v6);
  outlined consume of Locale.LanguageCode?(v9, v10);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  KeywordValuesForLocale = ucol_getKeywordValuesForLocale();
  swift_release();
  char v19 = MEMORY[0x18961AFE8];
  if (KeywordValuesForLocale)
  {
    type metadata accessor for ICU.Enumerator();
    *(void *)(swift_initStackObject() + 16) = KeywordValuesForLocale;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0);
    while (uenum_next())
    {
      __int128 v20 = String.init(cString:)();
      BOOL v22 = v21;
      char v23 = String.lowercased()();
      int v25 = *(void *)(v19 + 16);
      unint64_t v24 = *(void *)(v19 + 24);
      if (v25 >= v24 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      }
      *(void *)(v19 + 16) = v25 + 1;
      uint64_t v26 = (Swift::String *)(v19 + 32 * v25);
      v26[2]._countAndFlagsBits = v20;
      v26[2]._object = v22;
      v26[3] = v23;
    }

    swift_release();
  }

  return v19;
}

  if (v10)
  {
    v20._countAndFlagsBits = 95LL;
    v20._object = (void *)0xE100000000000000LL;
    String.append(_:)(v20);
    v21._countAndFlagsBits = v17;
    v21._object = v13;
    String.append(_:)(v21);
  }

  outlined consume of Locale.LanguageCode?(v28, v26);
  outlined consume of Locale.LanguageCode?(v27, v7);
  outlined consume of Locale.LanguageCode?(v11, v10);
  BOOL v22 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  char v23 = a1(v22 + 32, &v30);
  swift_release();
  if (v23 < 4 && v30 < 1) {
    return v23 + 1LL;
  }
  else {
    return 0LL;
  }
}

  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  unint64_t v4 = *(void *)(v1 + 24);
  if (!v4)
  {
    os_unfair_lock_unlock(v3);
    return;
  }

  uint64_t v5 = *(void **)(v1 + 32);
  int v6 = *(void *)(*(void *)v1 + 128LL);
  if (*(void *)(v1 + v6))
  {
    outlined copy of NSURLSession.DataTaskPublisher?(*(id *)(v1 + 24), *(void **)(v1 + 32));
    swift_retain();
  }

  else
  {
    uint64_t v7 = *(void **)(v4 + 16);
    outlined copy of NSURLSession.DataTaskPublisher?(*(id *)(v1 + 24), *(void **)(v1 + 32));
    swift_retain();
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMutableURLRequest();
    swift_dynamicCast();
    unint64_t v8 = (void *)aBlock[6];
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = partial apply for implicit closure #4 in implicit closure #3 in NSURLSession.DataTaskPublisher.Inner.request(_:);
    *(void *)(v9 + 24) = v1;
    aBlock[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_3;
    __int128 v10 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    int v11 = objc_msgSend(v5, sel_dataTaskWithRequest_completionHandler_, v8, v10);
    _Block_release(v10);

    char v12 = *(void **)(v1 + v6);
    *(void *)(v1 + v6) = v11;
  }

  uint64_t v13 = *(void *)(*(void *)v1 + 120LL);
  int v14 = *(void *)(v1 + v13);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0) {
    goto LABEL_12;
  }
  static Subscribers.Demand.unlimited.getter();
  char v16 = static Subscribers.Demand.== infix(_:_:)();
  int v15 = static Subscribers.Demand.unlimited.getter();
  if ((v16 & 1) != 0)
  {
    while (1)
    {
      *(void *)(v1 + v13) = v15;
LABEL_12:
      __int128 v17 = *(void **)(v1 + v6);
      if (v17) {
        goto LABEL_13;
      }
LABEL_19:
      __break(1u);
LABEL_20:
      if (v15 < 0)
      {
        __break(1u);
        goto LABEL_22;
      }
    }
  }

  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
  {
LABEL_18:
    int v15 = static Subscribers.Demand.unlimited.getter();
    *(void *)(v1 + v13) = v15;
    __int128 v17 = *(void **)(v1 + v6);
    if (!v17) {
      goto LABEL_19;
    }
LABEL_13:
    __int128 v18 = v17;
    os_unfair_lock_unlock(v3);
    objc_msgSend(v18, sel_resume);
    swift_release();

    outlined consume of NSURLSession.DataTaskPublisher?(v4, v5);
    return;
  }

  if (((v14 | a1) & 0x8000000000000000LL) == 0)
  {
    int v15 = v14 + a1;
    if (!__OFADD__(v14, a1)) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }

  objc_msgSend((id)objc_opt_self(), sel__performActivityWithOptions_reason_usingBlock_, a1, v8, v6);
  _Block_release(v6);
}

  uint64_t result = outlined release of DateComponents((uint64_t)__src);
LABEL_5:
  uint64_t v26 = 2;
  int v27 = 0.0;
  uint64_t v28 = a8;
LABEL_6:
  *(double *)uint64_t v28 = v27;
  *(_BYTE *)(v28 + 8) = v26;
  *(double *)(v28 + 16) = v20;
  return result;
}

    swift_release();
    v160._countAndFlagsBits = 2683LL;
    v160._object = (void *)0xE200000000000000LL;
    String.append(_:)(v157);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 125LL;
    v21._object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
    String.append(_:)(v160);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v158);
    int v11 = (uint64_t)v150;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    char v12 = v116;
    __int128 v10 = v117;
    __int128 v20 = v149;
    int v15 = v146;
    if (v149 != v116) {
      continue;
    }
    break;
  }

  outlined release of AttributedString.Runs((uint64_t)&v212);
  uint64_t v13 = v174;
LABEL_165:
  swift_release();
  swift_release();
  return v13;
}

  unint64_t v8 = *(void *)(result + 16);
  if (!v8 || (uint64_t result = specialized closure #1 in Rope.formIndex(before:)(v8 + 16, result), (result & 1) == 0))
  {
    swift_unknownObjectRetain();
    uint64_t v9 = specialized Rope._Node.formPredecessor(of:)(v6, a2);
    uint64_t result = swift_unknownObjectRelease();
    if ((v9 & 1) == 0) {
      goto LABEL_11;
    }
  }

  return result;
}

    swift_release();
    v149._countAndFlagsBits = 2683LL;
    v149._object = (void *)0xE200000000000000LL;
    String.append(_:)(v146);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 125LL;
    v14._object = (void *)0xE100000000000000LL;
    String.append(_:)(v14);
    String.append(_:)(v149);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v147);
    unint64_t v4 = (uint64_t)v132;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v5 = v106;
    uint64_t v3 = v107;
    uint64_t v13 = v139;
    char v12 = (uint64_t)v134._object;
    if (v139 != v106) {
      continue;
    }
    break;
  }

  outlined release of AttributedString.Runs((uint64_t)&v190);
  int v6 = v163;
LABEL_151:
  swift_release();
  return v6;
}

  v9._countAndFlagsBits = v6;
  v9._object = v7;
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(a1, v9, a2, a3);
  return swift_bridgeObjectRelease();
}

  uint64_t result = 0LL;
  char v12 = 1;
LABEL_11:
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v12;
  return result;
}

  if (!a3 || ((a2 >> ((4 * *(_BYTE *)(a3 + 18) + 8) & 0x3C)) & 0xF) == 0)
  {
    swift_unknownObjectRetain();
    unint64_t v8 = specialized Rope._Node.formPredecessor(of:)((uint64_t)v9, a4);
    uint64_t result = swift_unknownObjectRelease();
    if ((v8 & 1) != 0) {
      return v9[0];
    }
LABEL_12:
    __break(1u);
  }

  return result;
}

      ++v13;
      if (v12 == a5) {
        return v14;
      }
    }
  }

  if (a5 >= a2)
  {
    return 0LL;
  }

  else
  {
    int v14 = 0LL;
    while (1)
    {
      if (__OFSUB__(v14--, 1LL)) {
        goto LABEL_52;
      }
      if (v37 != a10) {
        break;
      }
      if (a7)
      {
      }

      else if (!v12)
      {
        goto LABEL_54;
      }

      if (v39 && (int v30 = (4 * *(_BYTE *)(v39 + 18) + 8) & 0x3C, ((v12 >> v30) & 0xF) != 0))
      {
        char v12 = ((((v12 >> v30) & 0xF) - 1) << v30) | ((-15LL << v30) - 1) & v12;
        uint64_t v38 = v12;
      }

      else
      {
        uint64_t v31 = *(unsigned __int8 *)(a7 + 18);
        uint64_t v32 = (4 * v31 + 8) & 0x3C;
        uint64_t v33 = (v12 >> v32) & 0xF;
        uint64_t v36 = v33;
        if (v31)
        {
          swift_unknownObjectRetain();
          uint64_t v34 = specialized closure #1 in Rope._Node.formPredecessor(of:)( a7 + 16,  a7 + 24,  (uint64_t *)&v36,  (uint64_t)&v37,  v31);
          uint64_t result = swift_unknownObjectRelease();
          if ((v34 & 1) == 0) {
            goto LABEL_55;
          }
          char v12 = v38;
        }

        else
        {
          if (!v33) {
            goto LABEL_55;
          }
          char v12 = ((v33 - 1) << v32) | ((-15LL << v32) - 1) & v12;
          uint64_t v38 = v12;
          uint64_t v39 = a7;
        }
      }

      if (v12 == a5) {
        return v14;
      }
    }

    *(void *)(a1 + 48) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x189604DD0], 0LL, 0LL, 0LL);
    goto LABEL_5;
  }

  return v6[0];
}

    objc_msgSend( a3,  "failWithError:",  +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  v8,  4864,  objc_msgSend(v9, "dictionaryWithObjects:forKeys:count:", v10, v11, 1)));
    return 0LL;
  }

  uint64_t v13 = [a3 versionForClassName:@"NSCountedSet"];
  if (v13 <= 1)
  {
    [a3 decodeValueOfObjCType:"I" at:&v34 size:4];
    int v14 = v34;
    _NSSetCheckSize((objc_class *)self, a2, v34, (uint64_t)"count");
    char v12 = -[NSCountedSet initWithCapacity:](self, "initWithCapacity:", v14);
    if ((_DWORD)v14)
    {
      do
      {
        [a3 decodeValueOfObjCType:"@" at:&v33 size:8];
        [a3 decodeValueOfObjCType:"I" at:&v34 size:4];
        int v15 = v34;
        if (v34)
        {
          do
          {
            --v15;
            -[NSCountedSet addObject:](v12, "addObject:", v33);
          }

          while (v15);
        }

        --v14;
      }

      while (v14);
    }

    return v12;
  }

  uint64_t v28 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: NSCountedSet cannot decode class version %lu",  _NSMethodExceptionProem((objc_class *)self, a2),  v13);

  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A48] reason:v28 userInfo:0]);
  return (NSCountedSet *)_NSSetCheckSize(v29, v30, v31, v32);
}

  free(v5);
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 3221225472LL;
  v10[2] = __74__NSFileProviderXPCMessenger_provideItemAtURL_withInfo_completionHandler___block_invoke_2;
  v10[3] = &unk_189C9E898;
  int v6 = *(void *)(a1 + 56);
  v10[4] = a2;
  v10[5] = v6;
  return +[NSFileCoordinator _performBarrierAsync:](&OBJC_CLASS___NSFileCoordinator, "_performBarrierAsync:", v10);
}

  uint64_t v9 = &stru_189CA6A28;
  return (id)-[__CFString copy](v9, "copy");
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if (((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
    return v7;
  }
  uint64_t v10 = ~v6;
  uint64_t v11 = *(void *)(v4 + 48);
  int v12 = a3;
  while (1)
  {
    uint64_t v13 = v11 + 24 * v7;
    if (*(_BYTE *)(v13 + 16) || v12 != 0) {
      break;
    }
    if ((*(void *)v13 != a1 || *(void *)(v13 + 8) != a2)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      unint64_t v7 = (v7 + 1) & v10;
      if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0) {
        continue;
      }
    }

    return v7;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v9 == v10)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }

    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = ~v4;
      unint64_t v5 = (v5 + 1) & v13;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v16 = v15;
          if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v16 == v17) {
            break;
          }
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v13;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if (((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
  {
    int v10 = a3;
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    do
    {
      uint64_t v13 = v12 + 24 * v7;
      int v14 = *(unsigned __int8 *)(v13 + 16);
      BOOL v15 = *(void *)v13 == a1 && *(void *)(v13 + 8) == a2;
      if ((v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) && v14 == v10) {
        break;
      }
      unint64_t v7 = (v7 + 1) & v11;
    }

    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0);
  }

  return v7;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if (((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
  {
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    do
    {
      uint64_t v13 = v12 + 24 * v7;
      int v14 = *(unsigned __int8 *)(v13 + 16);
      if (*(void *)v13 == a1 && *(void *)(v13 + 8) == a2)
      {
        if (v14 == (a3 & 1)) {
          return v7;
        }
      }

      else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && ((v14 ^ a3) & 1) == 0)
      {
        return v7;
      }

      unint64_t v7 = (v7 + 1) & v11;
    }

    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0);
  }

  return v7;
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)( uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x18961AFE8];
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15LL;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000LL) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7LL;
    if (((a6 >> 60) & ((a5 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v30 = 11LL;
    }
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)( v30 | (v11 << 16),  v47,  a2 & 1,  v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }

  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  uint64_t v13 = (void *)MEMORY[0x18961AFE8];
  unint64_t v14 = 15LL;
  unint64_t v15 = 15LL;
  unint64_t v16 = 15LL;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }

    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0) {
      break;
    }
    unint64_t v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }

  if (v14 >> 14 == v16 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = String.index(after:)();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }

  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v13[2] + 1LL,  1,  v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v26 > 1),  v27 + 1,  1,  v13);
  }
  v13[2] = v27 + 1;
  uint64_t v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = String.index(after:)();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  unint64_t v15 = v29;
  if (v13[2] != v42)
  {
    unint64_t v16 = v29;
    goto LABEL_9;
  }

  unint64_t v16 = v29;
LABEL_29:
  if (v48 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }

  if (v48 >= v15 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v13[2] + 1LL,  1,  v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v38 > 1),  v39 + 1,  1,  v13);
    }
    v13[2] = v39 + 1;
    __int16 v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)( unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v14[2] + 1LL,  1,  v14);
      *(void *)(a4 + 16) = v14;
    }

    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v16 > 1),  v17 + 1,  1,  v14);
      *(void *)(a4 + 16) = v14;
    }

    v14[2] = v17 + 1;
    char v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Int8>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<UDateFormatField>);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      int64_t v12 = v11 - 32;
      if (v11 < 32) {
        int64_t v12 = v11 - 31;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v13 = v10 + 32;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (char *)MEMORY[0x18961AFE8];
      uint64_t v13 = (char *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32]) {
          memmove(v13, a4 + 32, 2 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      int64_t v12 = v11 - 32;
      if (v11 < 32) {
        int64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (char *)MEMORY[0x18961AFE8];
      uint64_t v13 = (char *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      int64_t v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (char *)MEMORY[0x18961AFE8];
      int64_t v12 = (char *)(MEMORY[0x18961AFE8] + 32LL);
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    int64_t v12 = v11 - 32;
    if (v11 < 32) {
      int64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 16 * v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rope<AttributedString._InternalRun>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PresentationIntent.IntentType>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Morphology.Pronoun>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DateComponents>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 288);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[36 * v8 + 4]) {
          memmove(v12, a4 + 4, 288 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<JSONMap.Value>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributeScope.Type>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString._AttributeStorage>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ICUNumberFormatterBase.AttributePosition>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafePointer<UInt16>?>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(component: Calendar.Component, value: Int)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.TimeFormatStyle.Attributed.PatternComponent>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(skeleton: String, measurementUnit: Duration.UnitsFormatStyle.Unit, measurementValue: Double)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(id: PredicateExpressions.VariableID, value: Any)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<iovec>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Slice<DispatchData.Region>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DispatchData.Region>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String.LocalizationValue.FormatArgument>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 120);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[15 * v8 + 4]) {
          memmove(v12, a4 + 4, 120 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Error>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Slice<UnsafeBufferPointer<UInt8>>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Slice<UnsafeRawBufferPointer>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<CFRange>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<[UInt8]>,  &demangling cache variable for type metadata for [UInt8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.NumberingSystem>,  (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>,  (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeMutablePointer<Int8>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<BPlistMap.Value>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<XMLPlistMap.Value>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<[UDateFormatField]>,  &demangling cache variable for type metadata for [UDateFormatField]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<String.Encoding>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<(Range<AttributedString.Index>, NSInflectionRule)>,  &demangling cache variable for type metadata for (Range<AttributedString.Index>, NSInflectionRule));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<(Range<AttributedString.Index>, NSLocalizedNumberFormatRule)>,  &demangling cache variable for type metadata for (Range<AttributedString.Index>, NSLocalizedNumberFormatRule));
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }

  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if (v8 + 0x4000000000000000LL >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      unint64_t v14 = v11 + 4;
      if ((v6 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      int64_t v11 = (void *)MEMORY[0x18961AFE8];
      unint64_t v14 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }

  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if (v8 + 0x4000000000000000LL >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      unint64_t v14 = v11 + 4;
      if ((v6 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      int64_t v11 = (void *)MEMORY[0x18961AFE8];
      unint64_t v14 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }

  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if (v8 + 0x4000000000000000LL >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      unint64_t v14 = v11 + 4;
      if ((v6 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      int64_t v11 = (void *)MEMORY[0x18961AFE8];
      unint64_t v14 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }

  unint64_t v7 = *((void *)a4 + 3);
  int64_t v8 = v7 >> 1;
  if (v8 + 0x4000000000000000LL >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    int64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      int64_t v10 = *((void *)a4 + 2);
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (char *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * v12 - 64;
      uint64_t v13 = v11 + 32;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[v9 + 32]) {
          memmove(v13, a4 + 32, v9);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      int64_t v11 = (char *)MEMORY[0x18961AFE8];
      uint64_t v13 = (char *)(MEMORY[0x18961AFE8] + 32LL);
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v9, v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }

  unint64_t v7 = *((void *)a4 + 3);
  int64_t v8 = v7 >> 1;
  if (v8 + 0x4000000000000000LL >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    int64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      int64_t v10 = *((void *)a4 + 2);
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (char *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 29;
      }
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * (v13 >> 2);
      unint64_t v14 = v11 + 32;
      if ((v6 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      int64_t v11 = (char *)MEMORY[0x18961AFE8];
      unint64_t v14 = (char *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 32]) {
          memmove(v14, a4 + 32, 4 * v9);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void, int64_t, void *, void *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  int64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    int64_t v11 = a4[2];
    if (v10 <= v11) {
      int64_t v12 = a4[2];
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 1;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 5);
      unint64_t v16 = v13 + 4;
      if ((v8 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v13 = (void *)MEMORY[0x18961AFE8];
      unint64_t v16 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[4 * v11 + 4]) {
          memmove(v16, a4 + 4, 32 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    a6(0LL, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }

  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      unint64_t v16 = v13 + 4;
      if ((v8 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v13 = (void *)MEMORY[0x18961AFE8];
      unint64_t v16 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }

  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  size_t v14;
  void *v15;
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 72);
      uint64_t v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[9 * v11 + 4]) {
          memmove(v15, a4 + 4, 72 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v13 = (void *)MEMORY[0x18961AFE8];
      uint64_t v15 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }

  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_21;
    }

    if (__OFADD__(v13++, 1LL)) {
      goto LABEL_40;
    }
    if (v13 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v13);
    if (!v25)
    {
      int64_t v26 = v13 + 1;
      if (v13 + 1 >= v40)
      {
LABEL_31:
        swift_release();
        uint64_t v3 = v39;
        if ((v42 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }

      unint64_t v25 = *(void *)(v41 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          int64_t v13 = v26 + 1;
          if (__OFADD__(v26, 1LL)) {
            break;
          }
          if (v13 >= v40) {
            goto LABEL_31;
          }
          unint64_t v25 = *(void *)(v41 + 8 * v13);
          ++v26;
          if (v25) {
            goto LABEL_20;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  Swift::UInt v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char v34;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, String>);
  char v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0LL;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1LL << v9);
    }
    else {
      unint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        char v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }

      else
      {
        if (__OFADD__(v8++, 1LL)) {
          goto LABEL_40;
        }
        uint64_t result = v5 + 64;
        if (v8 >= v12)
        {
LABEL_31:
          if ((v34 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v2;
            goto LABEL_38;
          }

          uint64_t v32 = 1LL << *(_BYTE *)(v5 + 32);
          if (v32 >= 64) {
            bzero(v33, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
          }
          else {
            *uint64_t v33 = -1LL << v32;
          }
          uint64_t v3 = v2;
          *(void *)(v5 + 16) = 0LL;
          break;
        }

        unint64_t v22 = v33[v8];
        if (!v22)
        {
          uint64_t v23 = v8 + 1;
          if (v8 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v22 = v33[v23];
          if (!v22)
          {
            while (1)
            {
              uint64_t v8 = v23 + 1;
              if (__OFADD__(v23, 1LL)) {
                break;
              }
              if (v8 >= v12) {
                goto LABEL_31;
              }
              unint64_t v22 = v33[v8];
              ++v23;
              if (v22) {
                goto LABEL_20;
              }
            }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Weekday, [Int]>);
  uint64_t v32 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      unint64_t v10 = ~(-1LL << v8);
    }
    else {
      unint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v12 = (unint64_t)(v8 + 63) >> 6;
    int64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    unint64_t v15 = 0LL;
    while (1)
    {
      if (v11)
      {
        uint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v21 = v20 | (v15 << 6);
      }

      else
      {
        if (__OFADD__(v15++, 1LL)) {
          goto LABEL_38;
        }
        if (v15 >= v12)
        {
LABEL_31:
          swift_release();
          uint64_t v3 = v2;
          if ((v32 & 1) != 0)
          {
            uint64_t v31 = 1LL << *(_BYTE *)(v5 + 32);
            if (v31 >= 64) {
              bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
            }
            else {
              *uint64_t v9 = -1LL << v31;
            }
            *(void *)(v5 + 16) = 0LL;
          }

          break;
        }

        uint64_t v23 = v9[v15];
        if (!v23)
        {
          uint64_t v24 = v15 + 1;
          if (v15 + 1 >= v12) {
            goto LABEL_31;
          }
          uint64_t v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              unint64_t v15 = v24 + 1;
              if (__OFADD__(v24, 1LL)) {
                break;
              }
              if (v15 >= v12) {
                goto LABEL_31;
              }
              uint64_t v23 = v9[v15];
              ++v24;
              if (v23) {
                goto LABEL_20;
              }
            }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v34 = a2;
    uint64_t v33 = v3;
    uint64_t v8 = 0LL;
    uint64_t v9 = (void *)(v5 + 64);
    unint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    uint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v18 = v17 | (v8 << 6);
      }

      else
      {
        if (__OFADD__(v8++, 1LL)) {
          goto LABEL_38;
        }
        if (v8 >= v13)
        {
LABEL_29:
          if ((v34 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v33;
            goto LABEL_36;
          }

          uint64_t v32 = 1LL << *(_BYTE *)(v5 + 32);
          if (v32 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
          }
          else {
            *uint64_t v9 = -1LL << v32;
          }
          uint64_t v3 = v33;
          *(void *)(v5 + 16) = 0LL;
          break;
        }

        uint64_t v20 = v9[v8];
        if (!v20)
        {
          unint64_t v21 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_29;
          }
          uint64_t v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              uint64_t v8 = v21 + 1;
              if (__OFADD__(v21, 1LL)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_29;
              }
              uint64_t v20 = v9[v8];
              ++v21;
              if (v20) {
                goto LABEL_19;
              }
            }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Range<Int>]>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  unint64_t v35 = v2;
  BOOL v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }

    if (__OFADD__(v14++, 1LL)) {
      goto LABEL_40;
    }
    if (v14 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    uint64_t v24 = *(void *)(v36 + 8 * v14);
    if (!v24)
    {
      unint64_t v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        uint64_t v3 = v35;
        if ((v37 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }

      uint64_t v24 = *(void *)(v36 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          uint64_t v14 = v25 + 1;
          if (__OFADD__(v25, 1LL)) {
            break;
          }
          if (v14 >= v11) {
            goto LABEL_31;
          }
          uint64_t v24 = *(void *)(v36 + 8 * v14);
          ++v25;
          if (v24) {
            goto LABEL_20;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void *v31;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, Int>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v30 = a2;
    uint64_t v8 = 0LL;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1LL << v9);
    }
    else {
      unint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }

      else
      {
        unint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_31;
        }
        uint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          uint64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_31;
          }
          uint64_t v18 = v31[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }

              uint64_t v29 = 1LL << *(_BYTE *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v31 = -1LL << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            uint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                uint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }

            uint64_t v8 = v19;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, String>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0LL;
    char v34 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v31 = -1LL << v9;
    uint64_t v32 = v9;
    if (v9 < 64) {
      unint64_t v10 = ~(-1LL << v9);
    }
    else {
      unint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }

      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v34[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64) {
                  bzero(v34, 8 * v33);
                }
                else {
                  void *v34 = v31;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }

            uint64_t v8 = v22;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  void *v33;
  char v34;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Date.FormatStyle.DateStyle, String>);
  char v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0LL;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1LL << v9);
    }
    else {
      unint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }

      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }

              uint64_t v31 = 1LL << *(_BYTE *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v33 = -1LL << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }

            uint64_t v8 = v22;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  _OWORD v35[2];
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
    char v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        uint64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }

        if (v18 >= v33) {
          goto LABEL_34;
        }
        char v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          char v19 = v34[v13];
          if (!v19)
          {
            uint64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if ((a2 & 1) != 0)
              {
                uint64_t v32 = 1LL << *(_BYTE *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v34 = -1LL << v32;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            char v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1LL)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                char v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }

            int64_t v13 = v20;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }

    uint64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }

        int64_t v13 = v26;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  void *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
  uint64_t v45 = a2;
  unint64_t v48 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v6 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v43 = (void *)(v5 + 64);
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  uint64_t v8 = v7 & *(void *)(v5 + 64);
  uint64_t v41 = v2;
  char v42 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = v48 + 64;
  uint64_t result = swift_retain();
  uint64_t v11 = 0LL;
  uint64_t v44 = v5;
  while (1)
  {
    if (v8)
    {
      char v46 = (v8 - 1) & v8;
      uint64_t v47 = v11;
      uint64_t v20 = __clz(__rbit64(v8)) | (v11 << 6);
      goto LABEL_31;
    }

    unint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v21 >= v42) {
      break;
    }
    unint64_t v22 = v43;
    uint64_t v23 = v43[v21];
    uint64_t v24 = v11 + 1;
    if (!v23)
    {
      uint64_t v24 = v11 + 2;
      if (v11 + 2 >= v42) {
        goto LABEL_33;
      }
      uint64_t v23 = v43[v24];
      if (!v23)
      {
        unint64_t v25 = v11 + 3;
        if (v11 + 3 >= v42)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        uint64_t v23 = v43[v25];
        if (!v23)
        {
          while (1)
          {
            uint64_t v24 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_42;
            }
            if (v24 >= v42) {
              goto LABEL_33;
            }
            uint64_t v23 = v43[v24];
            ++v25;
            if (v23) {
              goto LABEL_30;
            }
          }
        }

        uint64_t v24 = v11 + 3;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  int64_t v34;
  char v35;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  unint64_t v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v33 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    char v34 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    while (1)
    {
      if (v10)
      {
        char v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v20 = v19 | (v13 << 6);
      }

      else
      {
        unint64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v21 >= v34) {
          goto LABEL_35;
        }
        unint64_t v22 = v33[v21];
        ++v13;
        if (!v22)
        {
          int64_t v13 = v21 + 1;
          if (v21 + 1 >= v34) {
            goto LABEL_35;
          }
          unint64_t v22 = v33[v13];
          if (!v22)
          {
            int64_t v13 = v21 + 2;
            if (v21 + 2 >= v34) {
              goto LABEL_35;
            }
            unint64_t v22 = v33[v13];
            if (!v22)
            {
              uint64_t v23 = v21 + 3;
              if (v23 >= v34)
              {
LABEL_35:
                swift_release();
                uint64_t v3 = v2;
                if ((v35 & 1) != 0)
                {
                  uint64_t v32 = 1LL << *(_BYTE *)(v5 + 32);
                  if (v32 >= 64) {
                    bzero(v33, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                  }
                  else {
                    *uint64_t v33 = -1LL << v32;
                  }
                  *(void *)(v5 + 16) = 0LL;
                }

                break;
              }

              unint64_t v22 = v33[v23];
              if (!v22)
              {
                while (1)
                {
                  int64_t v13 = v23 + 1;
                  if (__OFADD__(v23, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v34) {
                    goto LABEL_35;
                  }
                  unint64_t v22 = v33[v13];
                  ++v23;
                  if (v22) {
                    goto LABEL_32;
                  }
                }
              }

              int64_t v13 = v23;
            }
          }
        }

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  int64_t v33;
  char v34;
  unint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, XMLPlistMap.Value>);
  char v34 = a2;
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v4 + 32);
    uint64_t v32 = (void *)(v4 + 64);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    uint64_t v9 = v8 & *(void *)(v4 + 64);
    uint64_t v33 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v10 = v5 + 64;
    uint64_t result = swift_retain();
    uint64_t v12 = 0LL;
    while (1)
    {
      if (v9)
      {
        uint64_t v18 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        char v19 = v18 | (v12 << 6);
      }

      else
      {
        uint64_t v20 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v20 >= v33) {
          goto LABEL_35;
        }
        unint64_t v21 = v32[v20];
        ++v12;
        if (!v21)
        {
          uint64_t v12 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_35;
          }
          unint64_t v21 = v32[v12];
          if (!v21)
          {
            uint64_t v12 = v20 + 2;
            if (v20 + 2 >= v33) {
              goto LABEL_35;
            }
            unint64_t v21 = v32[v12];
            if (!v21)
            {
              unint64_t v22 = v20 + 3;
              if (v22 >= v33)
              {
LABEL_35:
                swift_release();
                if ((v34 & 1) != 0)
                {
                  uint64_t v31 = 1LL << *(_BYTE *)(v4 + 32);
                  if (v31 >= 64) {
                    bzero(v32, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                  }
                  else {
                    void *v32 = -1LL << v31;
                  }
                  *(void *)(v4 + 16) = 0LL;
                }

                break;
              }

              unint64_t v21 = v32[v22];
              if (!v21)
              {
                while (1)
                {
                  uint64_t v12 = v22 + 1;
                  if (__OFADD__(v22, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v12 >= v33) {
                    goto LABEL_35;
                  }
                  unint64_t v21 = v32[v12];
                  ++v22;
                  if (v21) {
                    goto LABEL_32;
                  }
                }
              }

              uint64_t v12 = v22;
            }
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  char v37;
  __int128 v38;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONMap.Value>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
    BOOL v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    unint64_t v35 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    while (1)
    {
      if (v10)
      {
        uint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }

      else
      {
        unint64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }

        if (v22 >= v35) {
          goto LABEL_33;
        }
        uint64_t v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_33;
          }
          uint64_t v23 = v36[v13];
          if (!v23)
          {
            uint64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if ((v37 & 1) != 0)
              {
                char v34 = 1LL << *(_BYTE *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  _BYTE *v36 = -1LL << v34;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            uint64_t v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_40;
                }
                if (v13 >= v35) {
                  goto LABEL_33;
                }
                uint64_t v23 = v36[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }

            int64_t v13 = v24;
          }
        }

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  &demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  &demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0LL;
    uint64_t v29 = (void *)(v5 + 64);
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1LL << v9);
    }
    else {
      unint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }

      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        unint64_t v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v21 = v29[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }

              uint64_t v28 = 1LL << *(_BYTE *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v29 = -1LL << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }

            uint64_t v8 = v22;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt, PredicateExpressions.VariableID>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    unint64_t v35 = a2;
    char v34 = v3;
    uint64_t v8 = 0LL;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    unint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v32 = -1LL << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    uint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v18 = v17 | (v8 << 6);
      }

      else
      {
        char v19 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }

        if (v19 >= v13) {
          goto LABEL_31;
        }
        uint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          uint64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v20 = v9[v8];
          if (!v20)
          {
            unint64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }

              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            uint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                uint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }

            uint64_t v8 = v21;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  void *v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Swift::UInt v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119[72];
  uint64_t __dst[50];
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateIntervalFormatter.Signature, ICUDateIntervalFormatter?>);
  uint64_t v67 = a2;
  id v83 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v62 = v2;
    id v63 = (void *)(v5 + 64);
    if (v6 < 64) {
      uint64_t v7 = ~(-1LL << v6);
    }
    else {
      uint64_t v7 = -1LL;
    }
    uint64_t v8 = v7 & *(void *)(v5 + 64);
    id v64 = (unint64_t)(v6 + 63) >> 6;
    id v66 = v83 + 64;
    uint64_t result = swift_retain();
    unint64_t v10 = 0LL;
    uint64_t v65 = v5;
    while (1)
    {
      if (v8)
      {
        id v69 = (v8 - 1) & v8;
        uint64_t v70 = v10;
        BOOL v36 = __clz(__rbit64(v8)) | (v10 << 6);
        if ((v67 & 1) != 0) {
          goto LABEL_10;
        }
      }

      else
      {
        unint64_t v48 = v10 + 1;
        if (__OFADD__(v10, 1LL))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }

        if (v48 >= v64) {
          goto LABEL_33;
        }
        char v49 = v63[v48];
        uint64_t v50 = v10 + 1;
        if (!v49)
        {
          uint64_t v50 = v10 + 2;
          if (v10 + 2 >= v64) {
            goto LABEL_33;
          }
          char v49 = v63[v50];
          if (!v49)
          {
            char v51 = v10 + 3;
            if (v10 + 3 >= v64)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v62;
              if ((v67 & 1) != 0)
              {
                int v61 = 1LL << *(_BYTE *)(v5 + 32);
                if (v61 >= 64) {
                  bzero(v63, ((unint64_t)(v61 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *id v63 = -1LL << v61;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            char v49 = v63[v51];
            if (!v49)
            {
              while (1)
              {
                uint64_t v50 = v51 + 1;
                if (__OFADD__(v51, 1LL)) {
                  goto LABEL_40;
                }
                if (v50 >= v64) {
                  goto LABEL_33;
                }
                char v49 = v63[v50];
                ++v51;
                if (v49) {
                  goto LABEL_22;
                }
              }
            }

            uint64_t v50 = v10 + 3;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
  uint64_t v44 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v43 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v41 = v2;
  char v42 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_22;
    }

    unint64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v22 >= v42) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    uint64_t v24 = *(void *)(v43 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v42) {
        goto LABEL_34;
      }
      uint64_t v24 = *(void *)(v43 + 8 * v13);
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v44 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }

        uint64_t v24 = *(void *)(v43 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_43;
            }
            if (v13 >= v42) {
              goto LABEL_34;
            }
            uint64_t v24 = *(void *)(v43 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }

        int64_t v13 = v25;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUListFormatter.Signature, ICUListFormatter>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  BOOL v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }

    unint64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    uint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      uint64_t v24 = *(void *)(v36 + 8 * v13);
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        uint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            uint64_t v24 = *(void *)(v36 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }

        int64_t v13 = v25;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  Swift::UInt64 v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt64 v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  Swift::UInt v42;
  uint64_t v43;
  Swift::UInt64 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  void *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  Swift::UInt8 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter?>);
  char v51 = a2;
  char v56 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = 1LL << *(_BYTE *)(v5 + 32);
    char v49 = (void *)(v5 + 64);
    if (v6 < 64) {
      uint64_t v7 = ~(-1LL << v6);
    }
    else {
      uint64_t v7 = -1LL;
    }
    uint64_t v8 = v7 & *(void *)(v5 + 64);
    uint64_t v47 = v2;
    unint64_t v48 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v9 = v56 + 64;
    uint64_t result = swift_retain();
    uint64_t v11 = 0LL;
    uint64_t v50 = v5;
    while (1)
    {
      if (v8)
      {
        char v52 = (v8 - 1) & v8;
        char v53 = v11;
        int64_t v26 = __clz(__rbit64(v8)) | (v11 << 6);
      }

      else
      {
        uint64_t v27 = v11 + 1;
        if (__OFADD__(v11, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v27 >= v48) {
          goto LABEL_36;
        }
        uint64_t v28 = v49[v27];
        uint64_t v29 = v11 + 1;
        if (!v28)
        {
          uint64_t v29 = v11 + 2;
          if (v11 + 2 >= v48) {
            goto LABEL_36;
          }
          uint64_t v28 = v49[v29];
          if (!v28)
          {
            uint64_t v30 = v11 + 3;
            if (v11 + 3 >= v48)
            {
LABEL_36:
              swift_release();
              uint64_t v3 = v47;
              if ((v51 & 1) != 0)
              {
                char v46 = 1LL << *(_BYTE *)(v5 + 32);
                if (v46 >= 64) {
                  bzero(v49, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *char v49 = -1LL << v46;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            uint64_t v28 = v49[v30];
            if (!v28)
            {
              while (1)
              {
                uint64_t v29 = v30 + 1;
                if (__OFADD__(v30, 1LL)) {
                  goto LABEL_43;
                }
                if (v29 >= v48) {
                  goto LABEL_36;
                }
                uint64_t v28 = v49[v29];
                ++v30;
                if (v28) {
                  goto LABEL_33;
                }
              }
            }

            uint64_t v29 = v11 + 3;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt32 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  void *v38;
  uint64_t i;
  char v40;
  __int128 v41;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICURelativeDateFormatter.Signature, ICURelativeDateFormatter?>);
  int64_t v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v14 = 0LL;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        char v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v19 >= v37) {
          goto LABEL_36;
        }
        uint64_t v20 = v38[v19];
        ++v14;
        if (!v20)
        {
          uint64_t v14 = v19 + 1;
          if (v19 + 1 >= v37) {
            goto LABEL_36;
          }
          uint64_t v20 = v38[v14];
          if (!v20)
          {
            unint64_t v21 = v19 + 2;
            if (v21 >= v37)
            {
LABEL_36:
              swift_release();
              uint64_t v3 = v2;
              if ((v40 & 1) != 0)
              {
                BOOL v36 = 1LL << *(_BYTE *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v38 = -1LL << v36;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            uint64_t v20 = v38[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_43;
                }
                if (v14 >= v37) {
                  goto LABEL_36;
                }
                uint64_t v20 = v38[v14];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }

            uint64_t v14 = v21;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Duration.UnitsFormatStyle.Unit, Double>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = a2;
    uint64_t v8 = 0LL;
    uint64_t v9 = (void *)(v5 + 64);
    unint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    uint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }

      else
      {
        uint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }

        if (v18 >= v13) {
          goto LABEL_31;
        }
        char v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          uint64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          char v19 = v9[v8];
          if (!v19)
          {
            uint64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v31 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }

              uint64_t v30 = 1LL << *(_BYTE *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v9 = -1LL << v30;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            char v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1LL)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                char v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }

            uint64_t v8 = v20;
          }
        }

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  &demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  &demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  __int128 v37;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    BOOL v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      unint64_t v10 = ~(-1LL << v9);
    }
    else {
      unint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    uint64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }

      else
      {
        uint64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }

        if (v23 >= v35) {
          goto LABEL_33;
        }
        uint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          uint64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          uint64_t v24 = v36[v14];
          if (!v24)
          {
            unint64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if ((v6 & 1) != 0)
              {
                char v34 = 1LL << *(_BYTE *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  _BYTE *v36 = -1LL << v34;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            uint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                uint64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                uint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }

            uint64_t v14 = v25;
          }
        }

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  &demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  uint64_t i;
  char v42;
  char v43;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  int64_t v40 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v38 = v2;
  unint64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }

    unint64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v22 >= v39) {
      break;
    }
    uint64_t v23 = v40;
    uint64_t v24 = v40[v22];
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v39) {
        goto LABEL_33;
      }
      uint64_t v24 = v40[v13];
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v38;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        uint64_t v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_42;
            }
            if (v13 >= v39) {
              goto LABEL_33;
            }
            uint64_t v24 = v40[v13];
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }

        int64_t v13 = v25;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0LL;
    char v34 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v31 = -1LL << v9;
    uint64_t v32 = v9;
    if (v9 < 64) {
      unint64_t v10 = ~(-1LL << v9);
    }
    else {
      unint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }

      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v34[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64) {
                  bzero(v34, 8 * v33);
                }
                else {
                  void *v34 = v31;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }

            uint64_t v8 = v22;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  BOOL v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v34 = v2;
  unint64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      char v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }

    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    uint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      uint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        uint64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        uint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1LL)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            uint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }

        int64_t v13 = v24;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }

    uint64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }

        int64_t v13 = v26;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t *v41;
  int64_t v42;
  void *v43;
  uint64_t i;
  char v45;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v45 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v41 = v2;
    uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v43 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    char v42 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    swift_retain();
    uint64_t v12 = 0LL;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v18 = v17 | (v12 << 6);
      }

      else
      {
        char v19 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }

        if (v19 >= v42) {
          goto LABEL_34;
        }
        uint64_t v20 = v43[v19];
        ++v12;
        if (!v20)
        {
          uint64_t v12 = v19 + 1;
          if (v19 + 1 >= v42) {
            goto LABEL_34;
          }
          uint64_t v20 = v43[v12];
          if (!v20)
          {
            unint64_t v21 = v19 + 2;
            if (v21 >= v42)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v41;
              if ((v45 & 1) != 0)
              {
                unint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
                if (v39 >= 64) {
                  bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v43 = -1LL << v39;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            uint64_t v20 = v43[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v12 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_41;
                }
                if (v12 >= v42) {
                  goto LABEL_34;
                }
                uint64_t v20 = v43[v12];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }

            uint64_t v12 = v21;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  _BYTE v36[72];
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AttributedString._AttributeStorage, Int>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v33 = v2;
  char v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }

    unint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    uint64_t v24 = *(void *)(v34 + 8 * v22);
    ++v14;
    if (!v24)
    {
      uint64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      uint64_t v24 = *(void *)(v34 + 8 * v14);
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v33;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        uint64_t v24 = *(void *)(v34 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            uint64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            uint64_t v24 = *(void *)(v34 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }

        uint64_t v14 = v25;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPatternGenerator.PatternGeneratorInfo, ICUPatternGenerator?>);
  uint64_t v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v35 = v2;
  BOOL v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      char v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }

    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    uint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      uint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        uint64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        uint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1LL)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            uint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }

        int64_t v13 = v24;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, _CalendarProtocol>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0LL;
    uint64_t v29 = (void *)(v5 + 64);
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1LL << v9);
    }
    else {
      unint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }

      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        unint64_t v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v21 = v29[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }

              uint64_t v28 = 1LL << *(_BYTE *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v29 = -1LL << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }

            uint64_t v8 = v22;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  void *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Morphology._CustomPronoun>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    char v34 = v2;
    uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
    BOOL v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    unint64_t v35 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    while (1)
    {
      if (v10)
      {
        uint64_t v37 = (v10 - 1) & v10;
        uint64_t v38 = v13;
        uint64_t v20 = __clz(__rbit64(v10)) | (v13 << 6);
      }

      else
      {
        unint64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }

        if (v21 >= v35) {
          goto LABEL_33;
        }
        unint64_t v22 = v36[v21];
        uint64_t v23 = v13 + 1;
        if (!v22)
        {
          uint64_t v23 = v13 + 2;
          if (v13 + 2 >= v35) {
            goto LABEL_33;
          }
          unint64_t v22 = v36[v23];
          if (!v22)
          {
            uint64_t v24 = v13 + 3;
            if (v13 + 3 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  _BYTE *v36 = -1LL << v33;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v22 = v36[v24];
            if (!v22)
            {
              while (1)
              {
                uint64_t v23 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_40;
                }
                if (v23 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v22 = v36[v23];
                ++v24;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }

            uint64_t v23 = v13 + 3;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  void *v29;
  id v30;
  uint64_t v31;
  int64_t v32;
  void *v33;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0LL;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1LL << v9);
    }
    else {
      unint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }

      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }

              uint64_t v31 = 1LL << *(_BYTE *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v33 = -1LL << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }

            uint64_t v8 = v22;
          }
        }

{
  uint64_t *v2;
  uint8x8_t v3;
  uint8x8_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  void *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int64_t v65;
  int16x8_t v66;
  int16x8_t v67;
  char v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80[72];
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  unsigned __int32 v86;
  uint64_t v87;
  char v88;
  char v89;
  unsigned __int32 v90;
  char v91;
  char v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v5 = v2;
  uint64_t v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.PatternCacheKey, String>);
  id v63 = a2;
  int v74 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v7 + 16))
  {
    uint64_t v59 = v2;
    uint64_t v8 = 1LL << *(_BYTE *)(v7 + 32);
    int v61 = (void *)(v7 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v7 + 64);
    char v60 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v74 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    uint64_t v62 = v7;
    while (1)
    {
      if (v10)
      {
        id v64 = (v10 - 1) & v10;
        uint64_t v65 = v13;
        unint64_t v22 = __clz(__rbit64(v10)) | (v13 << 6);
      }

      else
      {
        uint64_t v23 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }

        if (v23 >= v60) {
          goto LABEL_33;
        }
        uint64_t v24 = v61[v23];
        unint64_t v25 = v13 + 1;
        if (!v24)
        {
          unint64_t v25 = v13 + 2;
          if (v13 + 2 >= v60) {
            goto LABEL_33;
          }
          uint64_t v24 = v61[v25];
          if (!v24)
          {
            int64_t v26 = v13 + 3;
            if (v13 + 3 >= v60)
            {
LABEL_33:
              swift_release();
              uint64_t v5 = v59;
              if ((v63 & 1) != 0)
              {
                char v58 = 1LL << *(_BYTE *)(v7 + 32);
                if (v58 >= 64) {
                  bzero(v61, ((unint64_t)(v58 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *int v61 = -1LL << v58;
                }
                *(void *)(v7 + 16) = 0LL;
              }

              break;
            }

            uint64_t v24 = v61[v26];
            if (!v24)
            {
              while (1)
              {
                unint64_t v25 = v26 + 1;
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_40;
                }
                if (v25 >= v60) {
                  goto LABEL_33;
                }
                uint64_t v24 = v61[v25];
                ++v26;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }

            unint64_t v25 = v13 + 3;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  Swift::UInt64 v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::UInt64 v17;
  unint64_t v18;
  char v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::UInt v42;
  Swift::UInt v43;
  uint64_t v44;
  Swift::UInt64 v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  Swift::UInt8 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter.DateFormatInfo.UpdateSchedule>);
  char v58 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v50 = (void *)(v5 + 64);
    if (v6 < 64) {
      uint64_t v7 = ~(-1LL << v6);
    }
    else {
      uint64_t v7 = -1LL;
    }
    uint64_t v8 = v7 & *(void *)(v5 + 64);
    unint64_t v48 = v2;
    char v49 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v9 = v58 + 64;
    uint64_t result = swift_retain();
    uint64_t v11 = 0LL;
    char v51 = v5;
    while (1)
    {
      if (v8)
      {
        char v52 = (v8 - 1) & v8;
        char v53 = v11;
        uint64_t v27 = __clz(__rbit64(v8)) | (v11 << 6);
      }

      else
      {
        uint64_t v28 = v11 + 1;
        if (__OFADD__(v11, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v28 >= v49) {
          goto LABEL_36;
        }
        uint64_t v29 = v50[v28];
        uint64_t v30 = v11 + 1;
        if (!v29)
        {
          uint64_t v30 = v11 + 2;
          if (v11 + 2 >= v49) {
            goto LABEL_36;
          }
          uint64_t v29 = v50[v30];
          if (!v29)
          {
            uint64_t v31 = v11 + 3;
            if (v11 + 3 >= v49)
            {
LABEL_36:
              swift_release();
              uint64_t v3 = v48;
              if ((a2 & 1) != 0)
              {
                uint64_t v47 = 1LL << *(_BYTE *)(v5 + 32);
                if (v47 >= 64) {
                  bzero(v50, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v50 = -1LL << v47;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            uint64_t v29 = v50[v31];
            if (!v29)
            {
              while (1)
              {
                uint64_t v30 = v31 + 1;
                if (__OFADD__(v31, 1LL)) {
                  goto LABEL_43;
                }
                if (v30 >= v49) {
                  goto LABEL_36;
                }
                uint64_t v29 = v50[v30];
                ++v31;
                if (v29) {
                  goto LABEL_33;
                }
              }
            }

            uint64_t v30 = v11 + 3;
          }
        }

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  &demangling cache variable for type metadata for _DictionaryStorage<String, _LocaleProtocol>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  &demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftLocale>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::Int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  void *v71;
  int64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132[72];
  uint64_t __dst[45];
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Components, _LocaleProtocol>);
  int v74 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  int v75 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v70 = v2;
    uint64_t v71 = (void *)(v5 + 64);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    uint64_t v9 = v8 & *(void *)(v5 + 64);
    int v72 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v10 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v12 = 0LL;
    int v73 = v5;
    while (1)
    {
      if (v9)
      {
        uint64_t v24 = __clz(__rbit64(v9));
        unint64_t v25 = (v9 - 1) & v9;
        int64_t v26 = v24 | (v12 << 6);
      }

      else
      {
        uint64_t v27 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }

        if (v27 >= v72) {
          goto LABEL_34;
        }
        uint64_t v28 = v71[v27];
        ++v12;
        if (!v28)
        {
          uint64_t v12 = v27 + 1;
          if (v27 + 1 >= v72) {
            goto LABEL_34;
          }
          uint64_t v28 = v71[v12];
          if (!v28)
          {
            uint64_t v29 = v27 + 2;
            if (v29 >= v72)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v70;
              if ((v74 & 1) != 0)
              {
                id v69 = 1LL << *(_BYTE *)(v5 + 32);
                if (v69 >= 64) {
                  bzero(v71, ((unint64_t)(v69 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v71 = -1LL << v69;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            uint64_t v28 = v71[v29];
            if (!v28)
            {
              while (1)
              {
                uint64_t v12 = v29 + 1;
                if (__OFADD__(v29, 1LL)) {
                  goto LABEL_41;
                }
                if (v12 >= v72) {
                  goto LABEL_34;
                }
                uint64_t v28 = v71[v12];
                ++v29;
                if (v28) {
                  goto LABEL_21;
                }
              }
            }

            uint64_t v12 = v29;
          }
        }

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  &demangling cache variable for type metadata for _DictionaryStorage<NSURLResourceKey, Any>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  &demangling cache variable for type metadata for _DictionaryStorage<String, ICU.CaseMap>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, UnsafeMutablePointer<UnsafeMutableRawPointer?>>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = a2;
    uint64_t v32 = v3;
    uint64_t v8 = 0LL;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    unint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v30 = -1LL << v10;
    uint64_t v31 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    uint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }

      else
      {
        uint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }

        if (v18 >= v13) {
          goto LABEL_31;
        }
        char v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          uint64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          char v19 = v9[v8];
          if (!v19)
          {
            uint64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v32;
                goto LABEL_38;
              }

              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v30;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            char v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1LL)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                char v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }

            uint64_t v8 = v20;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  __int128 v37;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    BOOL v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      unint64_t v10 = ~(-1LL << v9);
    }
    else {
      unint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    uint64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }

      else
      {
        uint64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }

        if (v23 >= v35) {
          goto LABEL_33;
        }
        uint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          uint64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          uint64_t v24 = v36[v14];
          if (!v24)
          {
            unint64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if ((v6 & 1) != 0)
              {
                char v34 = 1LL << *(_BYTE *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  _BYTE *v36 = -1LL << v34;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            uint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                uint64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                uint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }

            uint64_t v14 = v25;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  void *v33;
  char v34;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.IdentifierType, String>);
  char v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0LL;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1LL << v9);
    }
    else {
      unint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }

      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }

              uint64_t v31 = 1LL << *(_BYTE *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v33 = -1LL << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }

            uint64_t v8 = v22;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, String?>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0LL;
    uint64_t v29 = (void *)(v5 + 64);
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1LL << v9);
    }
    else {
      unint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }

      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        unint64_t v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v21 = v29[v8];
          if (!v21)
          {
            unint64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }

              uint64_t v28 = 1LL << *(_BYTE *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v29 = -1LL << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }

            uint64_t v8 = v22;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v30 = v3;
    uint64_t v8 = 0LL;
    uint64_t v9 = (void *)(v5 + 64);
    unint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    uint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        char v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }

      else
      {
        unint64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v21 >= v13) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          uint64_t v8 = v21 + 1;
          if (v21 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            uint64_t v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v30;
                goto LABEL_40;
              }

              uint64_t v29 = 1LL << *(_BYTE *)(v5 + 32);
              if (v29 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v9 = -1LL << v29;
              }
              uint64_t v3 = v30;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_42;
                }
                if (v8 >= v13) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }

            uint64_t v8 = v23;
          }
        }

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  &demangling cache variable for type metadata for _DictionaryStorage<String, _TimeZoneProtocol>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  &demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftTimeZone>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _NSSwiftTimeZone>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    unint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v32 = -1LL << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    uint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
    char v34 = v3;
    unint64_t v35 = (unint64_t)(v10 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        char v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }

      else
      {
        unint64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v21 >= v35) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          uint64_t v8 = v21 + 1;
          if (v21 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            uint64_t v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_40;
              }

              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v35);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_42;
                }
                if (v8 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }

            uint64_t v8 = v23;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
  uint64_t v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  BOOL v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }

    uint64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v23 >= v11) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      uint64_t v14 = v23 + 1;
      if (v23 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v14);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            uint64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }

        uint64_t v14 = v26;
      }
    }

LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }

      ++v13;
    }

            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }

          ++v8;
        }

        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }

      ++v14;
    }

          char v52 = (4 * *(_BYTE *)(v51 + 18) + 8) & 0x3C;
          char v49 = ((-15LL << v52) - 1) & v49 | (v53 << v52);
          uint64_t v9 = *(void *)(v51 + 24 + 24 * v53);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          char v51 = v9;
          if (!*(_BYTE *)(v9 + 18)) {
            goto LABEL_71;
          }
        }
      }

      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v50 = v18;
      uint64_t v9 = v42;
LABEL_71:
      id v63 = *(unsigned __int16 *)(v9 + 16);
      if (!*(_WORD *)(v9 + 16))
      {
        id v64 = v50;
        goto LABEL_97;
      }

      id v64 = v50 - 1;
      if (__OFSUB__(v50, 1LL)) {
        goto LABEL_138;
      }
      if (!__OFADD__(v64, 1LL))
      {
        if (v50 <= 0)
        {
          id v63 = 0LL;
          goto LABEL_103;
        }

        if ((_DWORD)v63 != 1)
        {
          id v55 = __OFSUB__(v64, 1LL);
          id v64 = v50 - 2;
          if (v55) {
            goto LABEL_143;
          }
          if (__OFADD__(v64, 1LL)) {
            goto LABEL_144;
          }
          if (v50 - 1 < 1)
          {
            id v63 = 1LL;
            goto LABEL_103;
          }

          if ((_DWORD)v63 != 2)
          {
            id v55 = __OFSUB__(v64, 1LL);
            id v64 = v50 - 3;
            if (v55) {
              goto LABEL_145;
            }
            if (__OFADD__(v64, 1LL)) {
              goto LABEL_146;
            }
            if (v50 - 2 >= 1)
            {
              if ((_DWORD)v63 != 3)
              {
                uint64_t v65 = 0LL;
                id v66 = 3LL;
                if (v63 > 3) {
                  id v66 = *(unsigned __int16 *)(v9 + 16);
                }
                uint64_t v67 = v66 - 3;
                if (v64 >= v63 - 4) {
                  id v68 = v63 - 4;
                }
                else {
                  id v68 = v50 - 3;
                }
                if (v68 >= v50 + 0x7FFFFFFFFFFFFFFDLL) {
                  id v68 = v50 + 0x7FFFFFFFFFFFFFFDLL;
                }
                while (v67 > v68)
                {
                  if (v50 + 0x7FFFFFFFFFFFFFFDLL == v65) {
                    goto LABEL_142;
                  }
                  if (v64 == v65)
                  {
                    id v63 = v50;
                    goto LABEL_103;
                  }

                  if (v63 - 3 == ++v65)
                  {
                    v64 -= v65;
                    goto LABEL_97;
                  }
                }

  Hasher._combine(_:)(0);
  uint64_t v32 = 0LL;
LABEL_40:

  uint64_t v37 = v66;
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v0, v37);
    swift_bridgeObjectRelease();
    uint64_t v38 = v67;
    if (v67) {
      goto LABEL_42;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    if (v68) {
      goto LABEL_43;
    }
LABEL_46:
    Hasher._combine(_:)(0);
    goto LABEL_47;
  }

  Hasher._combine(_:)(0);
  uint64_t v38 = v67;
  if (!v67) {
    goto LABEL_45;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v0, v38);
  swift_bridgeObjectRelease();
  if (!v68) {
    goto LABEL_46;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_47:
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v39 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }

  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    int64_t v40 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }

  if (v71 == 2)
  {
    uint64_t v41 = 0;
  }

  else
  {
    uint64_t v41 = v71 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v41);
  if (v72 == 2)
  {
    char v42 = 0;
  }

  else
  {
    uint64_t v43 = v72 & 1;
    Hasher._combine(_:)(1u);
    char v42 = v43;
  }

  Hasher._combine(_:)(v42);
  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_60:
  swift_unknownObjectRelease();
  uint64_t v44 = *(void *)(v2 + 96);
  uint64_t v45 = *(void *)(v2 + 112);
  char v46 = *(unsigned __int8 *)(v2 + 120);
  uint64_t v47 = *(_BYTE *)(v2 + 121);
  unint64_t v48 = swift_getObjectType();
  char v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 112);
  swift_unknownObjectRetain();
  v49(v0, v48, v44);
  swift_unknownObjectRelease();
  uint64_t v50 = swift_getObjectType();
  char v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 120);
  swift_unknownObjectRetain();
  v51(v0, v50, v45);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v46);
  Hasher._combine(_:)(v47);
  return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)&v77,  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
}

  v0 = v20;
  Hasher._combine(_:)(0);
  uint64_t v37 = 0LL;
LABEL_40:

  char v42 = v75;
  if (v42)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v0, v42);
    swift_bridgeObjectRelease();
    uint64_t v43 = v76;
    if (v76) {
      goto LABEL_42;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    if (v77) {
      goto LABEL_43;
    }
LABEL_46:
    Hasher._combine(_:)(0);
    goto LABEL_47;
  }

  Hasher._combine(_:)(0);
  uint64_t v43 = v76;
  if (!v76) {
    goto LABEL_45;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v0, v43);
  swift_bridgeObjectRelease();
  if (!v77) {
    goto LABEL_46;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_47:
  if (v78 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v44 = v78 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v44);
  }

  if (v79 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v45 = v79 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v45);
  }

  if (v80 == 2)
  {
    char v46 = 0;
  }

  else
  {
    char v46 = v80 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v46);
  if (v81 == 2)
  {
    uint64_t v47 = 0;
  }

  else
  {
    unint64_t v48 = v81 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v47 = v48;
  }

  Hasher._combine(_:)(v47);
  outlined retain of LocalePreferences?( (uint64_t)v83,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v83,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_60:
  swift_unknownObjectRelease();
  char v49 = *(void *)(v2 + 96);
  uint64_t v50 = *(void *)(v2 + 112);
  char v51 = *(unsigned __int8 *)(v2 + 120);
  char v52 = *(_BYTE *)(v2 + 121);
  char v53 = swift_getObjectType();
  id v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 112);
  swift_unknownObjectRetain();
  v54(v0, v53, v49);
  swift_unknownObjectRelease();
  id v55 = swift_getObjectType();
  char v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 120);
  swift_unknownObjectRetain();
  v56(v0, v55, v50);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v51);
  Hasher._combine(_:)(v52);
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v86,  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v86,  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
}

  unint64_t v25 = __dst[16] * a1;
  if ((unsigned __int128)(__dst[16] * (__int128)a1) >> 64 != (__dst[16] * a1) >> 63)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }

  if (v25 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = __dst[16] * a1;
  }
  uint64_t v45 = v25 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[19] & 1) != 0)
  {
LABEL_11:
    if ((__dst[21] & 1) != 0) {
      goto LABEL_12;
    }
    goto LABEL_49;
  }

  uint64_t v116 = v26;
  *(void *)&__int128 v115 = *(void *)&v118[5];
  v117[0] = xmmword_1837293F0;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
  }
  uint64_t v43 = v12[2];
  char v42 = v12[3];
  if (v43 >= v42 >> 1) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v42 > 1),  v43 + 1,  1,  v12);
  }
  v12[2] = v43 + 1;
  uint64_t v44 = &v12[6 * v43];
  uint64_t v45 = v117[0];
  char v46 = v117[2];
  v44[3] = v117[1];
  v44[4] = v46;
  v44[2] = v45;
  if ((BYTE8(v118[7]) & 1) != 0)
  {
LABEL_17:
    if ((BYTE8(v118[8]) & 1) != 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }

  result.isEmpty = v2.value;
  result._0 = v1.value;
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

    uint64_t v14 = (v14 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_40:
  }

  if (v30 == v14 >> 14) {
    return 0LL;
  }
  uint64_t v18 = v14 & 0xC;
  uint64_t result = v14;
  if (v18 == v13) {
    goto LABEL_62;
  }
LABEL_50:
  if (v32 <= result >> 16)
  {
    __break(1u);
LABEL_64:
    uint64_t result = String.UTF8View._foreignSubscript(position:)();
    if (v18 == v13) {
      goto LABEL_65;
    }
    goto LABEL_54;
  }

  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_64;
  }
  if (!(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    uint64_t result = _StringObject.sharedUTF8.getter();
    if (v18 == v13) {
      goto LABEL_65;
    }
LABEL_54:
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_55;
    }
    return 1LL;
  }

  if (v18 != v13) {
    goto LABEL_54;
  }
LABEL_65:
  uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
  uint64_t v14 = result;
  if ((a2 & 0x1000000000000000LL) == 0) {
    return 1LL;
  }
LABEL_55:
  if (v32 > v14 >> 16)
  {
    String.UTF8View._foreignIndex(after:)();
    return 1LL;
  }

  __break(1u);
  return result;
}

    uint64_t v27 = v110;
    if (v9 < v12) {
      goto LABEL_133;
    }
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v27 + 2) + 1LL,  1,  v27);
    }
    uint64_t v29 = *((void *)v27 + 2);
    uint64_t v28 = *((void *)v27 + 3);
    uint64_t v11 = v29 + 1;
    if (v29 >= v28 >> 1) {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v28 > 1),  v29 + 1,  1,  v27);
    }
    *((void *)v27 + 2) = v11;
    uint64_t v30 = v27 + 32;
    uint64_t v31 = &v27[16 * v29 + 32];
    *(void *)uint64_t v31 = v12;
    *((void *)v31 + 1) = v9;
    uint64_t v110 = v27;
    if (v29)
    {
      while (1)
      {
        uint64_t v32 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v37 = &v30[16 * v11];
          uint64_t v38 = *((void *)v37 - 8);
          unint64_t v39 = *((void *)v37 - 7);
          uint64_t v43 = __OFSUB__(v39, v38);
          int64_t v40 = v39 - v38;
          if (v43) {
            goto LABEL_122;
          }
          char v42 = *((void *)v37 - 6);
          uint64_t v41 = *((void *)v37 - 5);
          uint64_t v43 = __OFSUB__(v41, v42);
          unint64_t v35 = v41 - v42;
          BOOL v36 = v43;
          if (v43) {
            goto LABEL_123;
          }
          uint64_t v44 = v11 - 2;
          uint64_t v45 = &v30[16 * v11 - 32];
          uint64_t v47 = *(void *)v45;
          char v46 = *((void *)v45 + 1);
          uint64_t v43 = __OFSUB__(v46, v47);
          unint64_t v48 = v46 - v47;
          if (v43) {
            goto LABEL_125;
          }
          uint64_t v43 = __OFADD__(v35, v48);
          char v49 = v35 + v48;
          if (v43) {
            goto LABEL_128;
          }
          if (v49 >= v40)
          {
            uint64_t v67 = &v30[16 * v32];
            id v69 = *(void *)v67;
            id v68 = *((void *)v67 + 1);
            uint64_t v43 = __OFSUB__(v68, v69);
            uint64_t v70 = v68 - v69;
            if (v43) {
              goto LABEL_132;
            }
            char v60 = v35 < v70;
            goto LABEL_76;
          }
        }

        else
        {
          if (v11 != 3)
          {
            int v61 = *((void *)v27 + 4);
            uint64_t v62 = *((void *)v27 + 5);
            uint64_t v43 = __OFSUB__(v62, v61);
            id v54 = v62 - v61;
            id v55 = v43;
            goto LABEL_70;
          }

          char v34 = *((void *)v27 + 4);
          uint64_t v33 = *((void *)v27 + 5);
          uint64_t v43 = __OFSUB__(v33, v34);
          unint64_t v35 = v33 - v34;
          BOOL v36 = v43;
        }

        if ((v36 & 1) != 0) {
          goto LABEL_124;
        }
        uint64_t v44 = v11 - 2;
        uint64_t v50 = &v30[16 * v11 - 32];
        char v52 = *(void *)v50;
        char v51 = *((void *)v50 + 1);
        char v53 = __OFSUB__(v51, v52);
        id v54 = v51 - v52;
        id v55 = v53;
        if (v53) {
          goto LABEL_127;
        }
        char v56 = &v30[16 * v32];
        char v58 = *(void *)v56;
        uint64_t v57 = *((void *)v56 + 1);
        uint64_t v43 = __OFSUB__(v57, v58);
        uint64_t v59 = v57 - v58;
        if (v43) {
          goto LABEL_130;
        }
        if (__OFADD__(v54, v59)) {
          goto LABEL_131;
        }
        if (v54 + v59 >= v35)
        {
          char v60 = v35 < v59;
LABEL_76:
          if (v60) {
            uint64_t v32 = v44;
          }
          goto LABEL_78;
        }

        outlined retain of Locale.Language( (uint64_t *)v131,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
        uint64_t v43 = 0LL;
        id v84 = 0LL;
        id v85 = 0LL;
        goto LABEL_40;
      }
    }

    int64_t v40 = 0LL;
    uint64_t v88 = 0LL;
    uint64_t v89 = 0LL;
    if (v96) {
      goto LABEL_36;
    }
    goto LABEL_39;
  }

  outlined retain of Locale.Language( (uint64_t *)v131,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  if (v23 != 1)
  {
    uint64_t v93 = v10;
    uint64_t v94 = v22;
    uint64_t v103 = countAndFlagsBits;
    uint64_t v95 = v21;
    uint64_t v96 = 0LL;
    uint64_t v91 = 0LL;
    uint64_t v92 = v26;
    uint64_t v98 = 0LL;
    uint64_t v86 = 0LL;
    char v87 = 0LL;
    uint64_t v89 = 0LL;
    uint64_t v90 = 0LL;
    char v101 = 0LL;
    uint64_t v88 = 0LL;
    id v84 = 0LL;
    id v85 = 0LL;
    goto LABEL_44;
  }

  return v23 & 1;
}

          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }

          char v56 = (4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C;
          char v53 = ((-15LL << v56) - 1) & v53 | (v57 << v56);
          unint64_t v10 = *(void *)(v55 + 24 + 24 * v57);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          id v55 = v10;
          if (!*(_BYTE *)(v10 + 18)) {
            goto LABEL_71;
          }
        }
      }

      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      uint64_t result = swift_unknownObjectRetain();
      id v54 = v22;
      unint64_t v10 = v46;
LABEL_71:
      uint64_t v67 = *(unsigned __int16 *)(v10 + 16);
      if (!*(_WORD *)(v10 + 16))
      {
        id v68 = v54;
        goto LABEL_97;
      }

      id v68 = v54 - 1;
      if (__OFSUB__(v54, 1LL)) {
        goto LABEL_138;
      }
      if (!__OFADD__(v68, 1LL))
      {
        if (v54 <= 0)
        {
          uint64_t v67 = 0LL;
          goto LABEL_103;
        }

        if ((_DWORD)v67 != 1)
        {
          uint64_t v59 = __OFSUB__(v68, 1LL);
          id v68 = v54 - 2;
          if (v59) {
            goto LABEL_143;
          }
          if (__OFADD__(v68, 1LL)) {
            goto LABEL_144;
          }
          if (v54 - 1 < 1)
          {
            uint64_t v67 = 1LL;
            goto LABEL_103;
          }

          if ((_DWORD)v67 != 2)
          {
            uint64_t v59 = __OFSUB__(v68, 1LL);
            id v68 = v54 - 3;
            if (v59) {
              goto LABEL_145;
            }
            if (__OFADD__(v68, 1LL)) {
              goto LABEL_146;
            }
            if (v54 - 2 >= 1)
            {
              if ((_DWORD)v67 != 3)
              {
                id v69 = 0LL;
                uint64_t v70 = 3LL;
                if (v67 > 3) {
                  uint64_t v70 = *(unsigned __int16 *)(v10 + 16);
                }
                uint64_t v71 = v70 - 3;
                if (v68 >= v67 - 4) {
                  int v72 = v67 - 4;
                }
                else {
                  int v72 = v54 - 3;
                }
                if (v72 >= v54 + 0x7FFFFFFFFFFFFFFDLL) {
                  int v72 = v54 + 0x7FFFFFFFFFFFFFFDLL;
                }
                while (v71 > v72)
                {
                  if (v54 + 0x7FFFFFFFFFFFFFFDLL == v69) {
                    goto LABEL_142;
                  }
                  if (v68 == v69)
                  {
                    uint64_t v67 = v54;
                    goto LABEL_103;
                  }

                  if (v67 - 3 == ++v69)
                  {
                    v68 -= v69;
                    goto LABEL_97;
                  }
                }

          if (v60)
          {
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
            goto LABEL_121;
          }

  a5[4] = v5;
  a5[5] = v6;
  a5[6] = v7;
  swift_bridgeObjectRetain_n();
  uint64_t result = swift_bridgeObjectRetain_n();
LABEL_40:
  uint64_t v29 = v10 + 1;
  uint64_t v30 = v61;
  if (__OFADD__(v10, 1LL))
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }

  if (v61 < v29)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }

  uint64_t v59 = a2;
  if (v29 != v61)
  {
    if (v29 < v61)
    {
      uint64_t v37 = ~v10 + v61;
      uint64_t v38 = &a2[3 * v10 + 5];
      while (1)
      {
        unint64_t v39 = *(v38 - 2);
        if (v39)
        {
          int64_t v40 = *(v38 - 1);
          uint64_t v41 = *v38;
          char v42 = a5[4];
          uint64_t v43 = a5[5];
          uint64_t v44 = a5[6];
          a5[4] = 0LL;
          a5[5] = 0LL;
          a5[6] = 0LL;
          if (v43)
          {
            uint64_t v62 = v42;
            id v63 = v40;
            id v64 = v41;
            uint64_t v45 = a5[1];
            char v46 = a5[2];
            uint64_t v47 = a5[3];
            a5[1] = 0LL;
            a5[2] = 0LL;
            a5[3] = 0LL;
            if (!v45)
            {
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
              uint64_t v45 = swift_allocObject();
              uint64_t v47 = 0LL;
              char v46 = 0LL;
              *(_WORD *)(v45 + 16) = 0;
              *(_BYTE *)(v45 + 18) = 0;
            }

            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            uint64_t result = swift_isUniquelyReferenced_nonNull();
            if ((result & 1) == 0)
            {
              unint64_t v48 = specialized Rope._Node.copy()(v45);
              char v46 = v49;
              uint64_t v47 = v50;
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v45 = v48;
              uint64_t v30 = v61;
            }

            int64_t v13 = __OFADD__(v46, 1LL);
            char v51 = v46 + 1;
            if (v13) {
              goto LABEL_70;
            }
            int64_t v13 = __OFADD__(v47, v62);
            char v52 = v47 + v62;
            if (v13) {
              goto LABEL_71;
            }
            char v53 = *(unsigned __int16 *)(v45 + 16);
            id v54 = (void *)(v45 + 24LL * *(unsigned __int16 *)(v45 + 16));
            v54[3] = v62;
            v54[4] = v43;
            v54[5] = v44;
            if (v53 == 0xFFFF) {
              goto LABEL_72;
            }
            id v55 = v53 + 1;
            *(_WORD *)(v45 + 16) = v55;
            if (v55 == 15)
            {
              char v56 = swift_unknownObjectRetain();
              specialized Rope.Builder._appendNow(_:)(v56, v51, v52);
              uint64_t v57 = v64;
              swift_bridgeObjectRelease();
              char v58 = v63;
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              a5[1] = v45;
              a5[2] = v51;
              a5[3] = v52;
              uint64_t v57 = v64;
              swift_bridgeObjectRelease();
              char v58 = v63;
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
            a5[4] = v39;
            a5[5] = v58;
            a5[6] = v57;
          }

          else
          {
            a5[4] = v39;
            a5[5] = v40;
            a5[6] = v41;
            swift_bridgeObjectRetain();
            uint64_t result = swift_bridgeObjectRetain();
          }
        }

        v38 += 3;
        if (!--v37) {
          goto LABEL_43;
        }
      }
    }

    goto LABEL_83;
  }

            BOOL v36 = (v40 - 1) & v40;
            uint64_t v38 = __clz(__rbit64(v40)) + (v32 << 6);
LABEL_40:
            char v42 = 8 * v38;
            uint64_t v43 = *(void *)(*(void *)(v31 + 56) + 8 * v38);
            uint64_t v44 = __OFADD__(v43, 1LL);
            uint64_t v45 = v43 + 1;
            if (v44)
            {
              __break(1u);
LABEL_81:
              __break(1u);
LABEL_82:
              __break(1u);
              goto LABEL_83;
            }

            uint64_t v44 = __OFADD__(v45, v26);
            char v46 = v45 + v26;
            if (v44) {
              goto LABEL_81;
            }
            uint64_t v47 = *(void *)(*(void *)(v31 + 48) + v42);
            *(void *)&v80[2] = *(void *)&__dst[2];
            BYTE8(v80[2]) = BYTE8(__dst[2]);
            *(void *)&v80[3] = *(void *)&__dst[3];
            BYTE8(v80[3]) = BYTE8(__dst[3]);
            unint64_t v48 = v46 == 0x7FFFFFFFFFFFFFFFLL;
            if (v46 == 0x7FFFFFFFFFFFFFFFLL) {
              char v46 = 0LL;
            }
            char v49 = v47 == 0x7FFFFFFFFFFFFFFFLL;
            if (v47 == 0x7FFFFFFFFFFFFFFFLL) {
              uint64_t v47 = 0LL;
            }
            *(void *)&v80[4] = v47;
            uint64_t v50 = v49;
            BYTE8(v80[4]) = v50;
            *(void *)&v80[5] = v46;
            BYTE8(v80[5]) = v48;
            *(void *)&v80[6] = *(void *)&__dst[6];
            BYTE8(v80[6]) = BYTE8(__dst[6]);
            *(void *)&v80[7] = *(void *)&__dst[7];
            BYTE8(v80[7]) = BYTE8(__dst[7]);
            *(void *)&v80[8] = *(void *)&__dst[8];
            BYTE8(v80[8]) = BYTE8(__dst[8]);
            *(void *)&v80[9] = *(void *)&__dst[9];
            BYTE8(v80[9]) = BYTE8(__dst[9]);
            *(void *)&v80[10] = *(void *)&__dst[10];
            BYTE8(v80[10]) = BYTE8(__dst[10]);
            *(void *)&v80[11] = *(void *)&__dst[11];
            BYTE8(v80[11]) = BYTE8(__dst[11]);
            *(void *)&v80[12] = *(void *)&__dst[12];
            BYTE8(v80[12]) = BYTE8(__dst[12]);
            *(void *)&v80[13] = *(void *)&__dst[13];
            BYTE8(v80[13]) = BYTE8(__dst[13]);
            *(void *)&v80[14] = *(void *)&__dst[14];
            BYTE8(v80[14]) = BYTE8(__dst[14]);
            *(void *)&v80[15] = *(void *)&__dst[15];
            BYTE8(v80[15]) = BYTE8(__dst[15]);
            BYTE8(v80[16]) = BYTE8(__dst[16]);
            *(void *)&v80[16] = *(void *)&__dst[16];
            *(void *)&v80[17] = *(void *)&__dst[17];
            WORD4(v80[17]) = WORD4(__dst[17]);
            v80[0] = __dst[0];
            v80[1] = __dst[1];
            outlined retain of DateComponents((uint64_t)__dst);
            outlined retain of DateComponents((uint64_t)v80);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v25[2] + 1LL,  1,  v25);
            }
            char v52 = v25[2];
            char v51 = v25[3];
            if (v52 >= v51 >> 1) {
              unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v51 > 1),  v52 + 1,  1,  v25);
            }
            v25[2] = v52 + 1;
            memcpy(&v25[36 * v52 + 4], v80, 0x11AuLL);
            outlined release of DateComponents((uint64_t)v80);
            id v82 = v25;
            if (v36) {
              goto LABEL_25;
            }
          }
        }

        *(void *)&v80[2] = *(void *)&__dst[2];
        BYTE8(v80[2]) = BYTE8(__dst[2]);
        *(void *)&v80[3] = *(void *)&__dst[3];
        BYTE8(v80[3]) = BYTE8(__dst[3]);
        *(void *)&v80[4] = *(void *)&__dst[4];
        BYTE8(v80[4]) = BYTE8(__dst[4]);
        if (v26 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v27 = 0LL;
        }
        else {
          uint64_t v27 = v26;
        }
        *(void *)&v80[5] = v27;
        BYTE8(v80[5]) = v26 == 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&v80[6] = *(void *)&__dst[6];
        BYTE8(v80[6]) = BYTE8(__dst[6]);
        *(void *)&v80[7] = *(void *)&__dst[7];
        BYTE8(v80[7]) = BYTE8(__dst[7]);
        *(void *)&v80[8] = *(void *)&__dst[8];
        BYTE8(v80[8]) = BYTE8(__dst[8]);
        *(void *)&v80[9] = *(void *)&__dst[9];
        BYTE8(v80[9]) = BYTE8(__dst[9]);
        *(void *)&v80[10] = *(void *)&__dst[10];
        BYTE8(v80[10]) = BYTE8(__dst[10]);
        *(void *)&v80[11] = *(void *)&__dst[11];
        BYTE8(v80[11]) = BYTE8(__dst[11]);
        *(void *)&v80[12] = *(void *)&__dst[12];
        BYTE8(v80[12]) = BYTE8(__dst[12]);
        *(void *)&v80[13] = *(void *)&__dst[13];
        BYTE8(v80[13]) = BYTE8(__dst[13]);
        *(void *)&v80[14] = *(void *)&__dst[14];
        BYTE8(v80[14]) = BYTE8(__dst[14]);
        *(void *)&v80[15] = *(void *)&__dst[15];
        BYTE8(v80[15]) = BYTE8(__dst[15]);
        BYTE8(v80[16]) = BYTE8(__dst[16]);
        *(void *)&v80[16] = *(void *)&__dst[16];
        *(void *)&v80[17] = *(void *)&__dst[17];
        WORD4(v80[17]) = WORD4(__dst[17]);
        v80[0] = __dst[0];
        v80[1] = __dst[1];
        outlined retain of DateComponents((uint64_t)__dst);
        outlined retain of DateComponents((uint64_t)v80);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v25[2] + 1LL,  1,  v25);
        }
        uint64_t v29 = v25[2];
        uint64_t v28 = v25[3];
        if (v29 >= v28 >> 1) {
          unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v28 > 1),  v29 + 1,  1,  v25);
        }
        v25[2] = v29 + 1;
        memcpy(&v25[36 * v29 + 4], v80, 0x11AuLL);
        outlined release of DateComponents((uint64_t)v80);
        id v82 = v25;
LABEL_10:
        ++v24;
      }

      while (v24 != v22);
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)v93);
    }

    swift_bridgeObjectRelease();
    goto LABEL_79;
  }

    swift_bridgeObjectRetain_n();
    outlined destroy of Any?( (uint64_t)&v101,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v106);
    swift_bridgeObjectRelease();
    *(unint64_t *)((char *)v94 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
    unint64_t v25 = __OFADD__(v97++, 1LL);
  }

  while (!v25);
  __break(1u);
LABEL_42:
  if (v97)
  {
    if (v97 != v12[2])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
      uint64_t v45 = static _DictionaryStorage.allocate(capacity:)();
      char v46 = 0LL;
      uint64_t v47 = *v94;
      unint64_t v48 = v45 + 64;
      while (1)
      {
        if (v47)
        {
          char v52 = __clz(__rbit64(v47));
          v47 &= v47 - 1;
          char v53 = v52 | (v46 << 6);
        }

        else
        {
          id v54 = v46 + 1;
          if (__OFADD__(v46, 1LL)) {
            goto LABEL_161;
          }
          if (v54 >= v93)
          {
LABEL_119:
            uint64_t v12 = (void *)v45;
            goto LABEL_153;
          }

          id v55 = v94[v54];
          ++v46;
          if (!v55)
          {
            char v46 = v54 + 1;
            if (v54 + 1 >= v93) {
              goto LABEL_119;
            }
            id v55 = v94[v46];
            if (!v55)
            {
              char v46 = v54 + 2;
              if (v54 + 2 >= v93) {
                goto LABEL_119;
              }
              id v55 = v94[v46];
              if (!v55)
              {
                char v46 = v54 + 3;
                if (v54 + 3 >= v93) {
                  goto LABEL_119;
                }
                id v55 = v94[v46];
                if (!v55)
                {
                  char v56 = v54 + 4;
                  if (v56 >= v93) {
                    goto LABEL_119;
                  }
                  id v55 = v94[v56];
                  if (!v55)
                  {
                    while (1)
                    {
                      char v46 = v56 + 1;
                      if (__OFADD__(v56, 1LL)) {
                        break;
                      }
                      if (v46 >= v93) {
                        goto LABEL_119;
                      }
                      id v55 = v94[v46];
                      ++v56;
                      if (v55) {
                        goto LABEL_109;
                      }
                    }

  char v46 = v9;
  swift_retain();
  swift_retain();
  v220 = v46;
  if (_foundation_swift_url_feature_enabled())
  {
    v228 = v5;
    v218 = v46;
    swift_retain();
    swift_retain();
    uint64_t v47 = URL.path(percentEncoded:)(1);
    unint64_t v48 = v47._countAndFlagsBits;
    v227 = v47;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      char v49 = (unint64_t)v47._object;
    }

    else
    {
      char v49 = (unint64_t)v47._object;
      if ((specialized BidirectionalCollection.last.getter(v47._countAndFlagsBits, (unint64_t)v47._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        unint64_t v48 = v227._countAndFlagsBits;
        char v49 = (unint64_t)v227._object;
      }
    }

    v225._countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v89 = specialized Set._Variant.insert(_:)(&v226, 0x2FuLL);
    uint64_t v90 = v225._countAndFlagsBits;
    uint64_t v91 = HIBYTE(v49) & 0xF;
    if ((v49 & 0x2000000000000000LL) == 0) {
      uint64_t v91 = v48 & 0xFFFFFFFFFFFFLL;
    }
    if (v91)
    {
      v217 = v4;
      v225._countAndFlagsBits = v48;
      v225._object = (void *)v49;
      MEMORY[0x1895F8858](v89);
      v214 = (uint64_t)&v225;
      v215 = v90;
      swift_bridgeObjectRetain();
      uint64_t v92 = v223;
      v221 = (uint64_t)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v213,  v48,  v49);
      v223 = v92;
      if (v93 == (void *)1)
      {
        uint64_t v95 = (unint64_t)v225._object;
        uint64_t v94 = v225._countAndFlagsBits;
        swift_bridgeObjectRetain();
        v221 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v94, v95, v90);
        uint64_t v97 = v96;
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v97 = v93;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v5 = v224;
      uint64_t v106 = v220;
      unint64_t v4 = v217;
      v219 = v97;
      if (!v97)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v221 = 0LL;
        v219 = (void *)0xE000000000000000LL;
        char v46 = v106;
        uint64_t v104 = v218;
        goto LABEL_91;
      }

      char v46 = v220;
    }

    else
    {
      swift_bridgeObjectRelease();
      v221 = 0LL;
      v219 = (void *)0xE000000000000000LL;
      uint64_t v5 = v224;
      char v46 = v220;
    }

    swift_release();
    swift_release();
    uint64_t v104 = v218;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_91:
    swift_release();
    swift_release();
    goto LABEL_92;
  }

  id v68 = objc_msgSend(v46, sel__parameterString);
  if (v68)
  {
    id v69 = v68;
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    int v72 = v71;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (int v73 = objc_msgSend(v46, sel_path)) != 0)
    {
      int v74 = v73;
      int v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
      v221 = (uint64_t)v70;
      uint64_t v77 = v76;

      v227._countAndFlagsBits = (uint64_t)v75;
      v227._object = v77;
      uint64_t v5 = v224;
      swift_bridgeObjectRetain();
      v78._countAndFlagsBits = 59LL;
      v78._object = (void *)0xE100000000000000LL;
      String.append(_:)(v78);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v79._countAndFlagsBits = v221;
      v79._object = v72;
      String.append(_:)(v79);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }

    else
    {
      v227._countAndFlagsBits = 59LL;
      v227._object = (void *)0xE100000000000000LL;
      v102._countAndFlagsBits = (uint64_t)v70;
      v102._object = v72;
      String.append(_:)(v102);
      swift_release();
      swift_release();
    }

    swift_bridgeObjectRelease();
    v221 = v227._countAndFlagsBits;
    v219 = v227._object;
  }

  else
  {
    uint64_t v103 = objc_msgSend(v46, sel_path);
    if (v103)
    {
      uint64_t v104 = v103;
      v221 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
      v219 = v105;
      swift_release();
      swift_release();

LABEL_92:
      goto LABEL_93;
    }

    swift_release();
    swift_release();

    v221 = 0LL;
    v219 = (void *)0xE000000000000000LL;
  }

  Hasher._combine(_:)(0);
LABEL_40:
  if (v46 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v46 & 1);
  }

  if (v39 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39 & 1);
  }

  if (v40 == 2)
  {
    unint64_t v35 = 0;
  }

  else
  {
    unint64_t v35 = v40 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v35);
  if (v8 == 2)
  {
    BOOL v36 = 0;
  }

  else
  {
    BOOL v36 = v8 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v36);
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
LABEL_40:
  if (v47 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v47 & 1);
  }

  if (v41 == 2)
  {
    Hasher._combine(_:)(0);
    if (v8 != 2)
    {
LABEL_45:
      uint64_t v37 = v8 & 1;
      Hasher._combine(_:)(1u);
      goto LABEL_48;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41 & 1);
    if (v8 != 2) {
      goto LABEL_45;
    }
  }

  uint64_t v37 = 0;
LABEL_48:
  Hasher._combine(_:)(v37);
  if (v9 == 2)
  {
    uint64_t v38 = 0;
  }

  else
  {
    uint64_t v38 = v9 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v38);
  return Hasher._finalize()();
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  unint64_t v35 = 0LL;
LABEL_40:
  uint64_t v5 = v50;

  BOOL v36 = v64;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v36);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  unint64_t v4 = v49;
  unint64_t v10 = v51;
  uint64_t v37 = v65;
  if (!v65)
  {
    Hasher._combine(_:)(0);
    if (v66) {
      goto LABEL_45;
    }
LABEL_47:
    Hasher._combine(_:)(0);
    goto LABEL_48;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v37);
  swift_bridgeObjectRelease();
  if (!v66) {
    goto LABEL_47;
  }
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_48:
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v38 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }

  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v39 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }

  if (v69 == 2)
  {
    int64_t v40 = 0;
  }

  else
  {
    int64_t v40 = v69 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v40);
  if (v70 == 2)
  {
    uint64_t v41 = 0;
  }

  else
  {
    char v42 = v70 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v41 = v42;
  }

  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?( (uint64_t)v72,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v72,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_61:
  uint64_t v43 = swift_getObjectType();
  uint64_t v44 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v52 + 112);
  swift_unknownObjectRetain();
  v44(v74, v43, v52);
  swift_unknownObjectRelease();
  uint64_t v45 = swift_getObjectType();
  char v46 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 120);
  swift_unknownObjectRetain();
  v46(v74, v45, v10);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

  char v49 = v12;
  swift_retain();
  swift_retain();
  v225 = v49;
  if (_foundation_swift_url_feature_enabled())
  {
    v223 = v17;
    v233 = v8;
    v224 = v49;
    swift_retain();
    swift_retain();
    uint64_t v50 = URL.path(percentEncoded:)(1);
    char v51 = v50._countAndFlagsBits;
    v232 = v50;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      char v52 = (unint64_t)v50._object;
    }

    else
    {
      char v52 = (unint64_t)v50._object;
      if ((specialized BidirectionalCollection.last.getter(v50._countAndFlagsBits, (unint64_t)v50._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        char v51 = v232._countAndFlagsBits;
        char v52 = (unint64_t)v232._object;
      }
    }

    v231._countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v93 = specialized Set._Variant.insert(_:)(&v234, 0x2FuLL);
    uint64_t v94 = v231._countAndFlagsBits;
    uint64_t v95 = HIBYTE(v52) & 0xF;
    if ((v52 & 0x2000000000000000LL) == 0) {
      uint64_t v95 = v51 & 0xFFFFFFFFFFFFLL;
    }
    if (v95)
    {
      v226 = v11;
      uint64_t v96 = v10;
      v231._countAndFlagsBits = v51;
      v231._object = (void *)v52;
      MEMORY[0x1895F8858](v93);
      v221 = &v231;
      v222 = v94;
      swift_bridgeObjectRetain();
      uint64_t v97 = v229;
      uint64_t v98 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v220,  v51,  v52);
      v229 = v97;
      if (v99 == 1)
      {
        char v100 = (unint64_t)v231._object;
        char v101 = v231._countAndFlagsBits;
        swift_bridgeObjectRetain();
        char v102 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v101, v100, v94);
        uint64_t v104 = v103;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v105 = v104;
      }

      else
      {
        uint64_t v105 = v99;
        char v102 = (uint64_t)v98;
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      unint64_t v10 = v96;
      uint64_t v11 = v226;
      if (!v105)
      {
        swift_release();
        swift_release();
        __int128 v115 = v224;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v102 = 0LL;
        __int128 v114 = 0xE000000000000000LL;
        goto LABEL_92;
      }

      __int128 v114 = v105;
    }

    else
    {
      swift_bridgeObjectRelease();
      char v102 = 0LL;
      __int128 v114 = 0xE000000000000000LL;
    }

    swift_release();
    swift_release();
    __int128 v115 = v224;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_92:
    unint64_t v17 = v223;
    swift_release();
    swift_release();

    uint64_t v109 = v114;
    goto LABEL_93;
  }

  int v72 = objc_msgSend(v49, sel__parameterString);
  if (v72)
  {
    int v73 = v72;
    int v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    int v76 = v75;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (uint64_t v77 = objc_msgSend(v49, sel_path)) != 0)
    {
      uint64_t v78 = v77;
      uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
      id v81 = v80;

      v232._countAndFlagsBits = (uint64_t)v79;
      v232._object = v81;
      swift_bridgeObjectRetain();
      v82._countAndFlagsBits = 59LL;
      v82._object = (void *)0xE100000000000000LL;
      String.append(_:)(v82);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v83._countAndFlagsBits = (uint64_t)v74;
      v83._object = v76;
      String.append(_:)(v83);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }

    else
    {
      v232._countAndFlagsBits = 59LL;
      v232._object = (void *)0xE100000000000000LL;
      v108._countAndFlagsBits = (uint64_t)v74;
      v108._object = v76;
      String.append(_:)(v108);
      swift_release();
      swift_release();
    }

    swift_bridgeObjectRelease();
    char v102 = v232._countAndFlagsBits;
    uint64_t v109 = (unint64_t)v232._object;
  }

  else
  {
    uint64_t v110 = objc_msgSend(v49, sel_path);
    if (v110)
    {
      unsigned __int8 v111 = v110;
      v224 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
      __int128 v112 = v49;
      uint64_t v109 = v113;
      swift_release();
      swift_release();

      char v102 = (uint64_t)v224;
    }

    else
    {
      swift_release();
      swift_release();

      char v102 = 0LL;
      uint64_t v109 = 0xE000000000000000LL;
    }
  }

  char v49 = v10;
  swift_retain();
  swift_retain();
  v212 = v9;
  if (_foundation_swift_url_feature_enabled())
  {
    v218 = v7;
    v209 = v49;
    swift_retain();
    swift_retain();
    uint64_t v50 = URL.path(percentEncoded:)(1);
    char v51 = v50._countAndFlagsBits;
    v217 = v50;
    swift_bridgeObjectRetain();
    v210 = v49;
    if (String.count.getter() <= 1)
    {
      char v52 = (unint64_t)v50._object;
    }

    else
    {
      char v52 = (unint64_t)v50._object;
      if ((specialized BidirectionalCollection.last.getter(v50._countAndFlagsBits, (unint64_t)v50._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        char v51 = v217._countAndFlagsBits;
        char v52 = (unint64_t)v217._object;
      }
    }

    v216._countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v94 = specialized Set._Variant.insert(_:)(&v219, 0x2FuLL);
    uint64_t v95 = v216._countAndFlagsBits;
    uint64_t v96 = HIBYTE(v52) & 0xF;
    if ((v52 & 0x2000000000000000LL) == 0) {
      uint64_t v96 = v51 & 0xFFFFFFFFFFFFLL;
    }
    if (v96)
    {
      v211 = v14;
      v216._countAndFlagsBits = v51;
      v216._object = (void *)v52;
      MEMORY[0x1895F8858](v94);
      v207 = &v216;
      v208 = v95;
      swift_bridgeObjectRetain();
      uint64_t v97 = v214;
      uint64_t v98 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v206,  v51,  v52);
      v214 = v97;
      if (v99 == 1)
      {
        char v100 = (unint64_t)v216._object;
        char v101 = v216._countAndFlagsBits;
        swift_bridgeObjectRetain();
        char v102 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v101, v100, v95);
        uint64_t v104 = v103;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v14 = v211;
        uint64_t v105 = v209;
        char v49 = v210;
        if (!v104) {
          goto LABEL_91;
        }
      }

      else
      {
        unsigned __int8 v111 = v98;
        uint64_t v104 = v99;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v14 = v211;
        char v102 = (uint64_t)v111;
        uint64_t v105 = v209;
        char v49 = v210;
        if (!v104)
        {
LABEL_91:
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v102 = 0LL;
          uint64_t v104 = 0xE000000000000000LL;
          goto LABEL_92;
        }
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      char v102 = 0LL;
      uint64_t v104 = 0xE000000000000000LL;
      uint64_t v105 = v209;
      char v49 = v210;
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_92:
    uint64_t v9 = v212;
    swift_release();
    swift_release();
    goto LABEL_93;
  }

  uint64_t v71 = objc_msgSend(v49, sel__parameterString);
  if (v71)
  {
    int v72 = v71;
    int v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    int v75 = v74;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (int v76 = objc_msgSend(v49, sel_path)) != 0)
    {
      uint64_t v77 = v76;
      v210 = v49;
      uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
      uint64_t v79 = v14;
      uint64_t v80 = v9;
      id v82 = v81;

      v217._countAndFlagsBits = (uint64_t)v78;
      v217._object = v82;
      swift_bridgeObjectRetain();
      v83._countAndFlagsBits = 59LL;
      v83._object = (void *)0xE100000000000000LL;
      String.append(_:)(v83);
      uint64_t v9 = v80;
      uint64_t v14 = v79;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v84._countAndFlagsBits = (uint64_t)v73;
      v84._object = v75;
      String.append(_:)(v84);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      char v49 = v210;
    }

    else
    {
      v217._countAndFlagsBits = 59LL;
      v217._object = (void *)0xE100000000000000LL;
      v108._countAndFlagsBits = (uint64_t)v73;
      v108._object = v75;
      String.append(_:)(v108);
      swift_release();
      swift_release();
    }

    swift_bridgeObjectRelease();
    char v102 = v217._countAndFlagsBits;
    uint64_t v104 = (unint64_t)v217._object;
  }

  else
  {
    uint64_t v109 = objc_msgSend(v49, sel_path);
    if (v109)
    {
      uint64_t v105 = v109;
      char v102 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
      uint64_t v104 = v110;
      swift_release();
      swift_release();

LABEL_93:
      goto LABEL_94;
    }

    swift_release();
    swift_release();

    char v102 = 0LL;
    uint64_t v104 = 0xE000000000000000LL;
  }

    goto LABEL_40;
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  uint64_t v7 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v7) {
    goto LABEL_39;
  }
  uint64_t v8 = objc_msgSend(v6, sel_count);
  if (!v8) {
    goto LABEL_38;
  }
  uint64_t v9 = (uint64_t)v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
  id v69 = v6;
  unint64_t v10 = (void *)v7[6];
  uint64_t v11 = v7[7];
  swift_retain();
  uint64_t v12 = v11;
  uint64_t v6 = v69;
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v10, v12, v69, v9);
  if ((result & 0x8000000000000000LL) == 0)
  {
    uint64_t v14 = result;
    if (v9 >= result)
    {
      v7[2] = result;
      if (result)
      {
        id v68 = v4;
        unint64_t v15 = v7 + 8;
        while (2)
        {
          uint64_t v20 = v14--;
          while (1)
          {
            if (((1LL << v14) & v15[v14 >> 6]) != 0) {
              goto LABEL_11;
            }
            unint64_t v21 = (uint64_t *)(v7[6] + 16 * v14);
            unint64_t v22 = *v21;
            uint64_t v23 = v21[1];
            swift_bridgeObjectRetain();
            uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23);
            int64_t v26 = v25;
            swift_bridgeObjectRelease();
            if ((v26 & 1) != 0) {
              break;
            }
            *(void *)((char *)v15 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
            if (v20 <= (uint64_t)v24)
            {
              *(_OWORD *)(v7[6] + 16 * v24) = *(_OWORD *)(v7[6] + 16 * v14);
              unint64_t v16 = v7[7];
              unint64_t v17 = (_OWORD *)(v16 + 32 * v14);
              uint64_t v18 = v17[1];
              char v19 = (_OWORD *)(v16 + 32 * v24);
              *char v19 = *v17;
              v19[1] = v18;
              goto LABEL_11;
            }

            if (v24 == v14) {
              goto LABEL_11;
            }
            uint64_t v27 = v7[6];
            uint64_t v28 = (uint64_t *)(v27 + 16 * v24);
            uint64_t v29 = (uint64_t *)(v27 + 16 * v14);
            uint64_t v30 = *v28;
            uint64_t v31 = v28[1];
            uint64_t v32 = v29[1];
            *uint64_t v28 = *v29;
            v28[1] = v32;
            *uint64_t v29 = v30;
            v29[1] = v31;
            uint64_t v33 = v7[7];
            char v34 = (_OWORD *)(v33 + 32 * v24);
            unint64_t v35 = (_OWORD *)(v33 + 32 * v14);
            outlined init with take of Any(v34, v3);
            outlined init with take of Any(v35, v34);
            outlined init with take of Any(v3, v35);
          }

          swift_arrayDestroy();
          uint64_t result = swift_arrayDestroy();
          BOOL v36 = v7[2];
          uint64_t v37 = __OFSUB__(v36, 1LL);
          uint64_t v38 = v36 - 1;
          if (!v37)
          {
            v7[2] = v38;
LABEL_11:
            if (v20 < 2) {
              goto LABEL_36;
            }
            continue;
          }

          break;
        }

        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }

      goto LABEL_37;
    }
  }

  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  char v42 = 0LL;
LABEL_40:

  uint64_t v43 = v65;
  if (v43)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v43);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v44 = v66;
  if (!v66)
  {
    Hasher._combine(_:)(0);
    if (v67) {
      goto LABEL_45;
    }
LABEL_47:
    Hasher._combine(_:)(0);
    goto LABEL_48;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v44);
  swift_bridgeObjectRelease();
  if (!v67) {
    goto LABEL_47;
  }
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_48:
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v45 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v45);
  }

  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v46 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v46);
  }

  if (v70 == 2)
  {
    uint64_t v47 = 0;
  }

  else
  {
    uint64_t v47 = v70 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v47);
  if (v71 == 2)
  {
    unint64_t v48 = 0;
  }

  else
  {
    char v49 = v71 & 1;
    Hasher._combine(_:)(1u);
    unint64_t v48 = v49;
  }

  Hasher._combine(_:)(v48);
  outlined retain of LocalePreferences?( (uint64_t)v73,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v73,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease_n();
}

  Hasher._combine(_:)(0);
  unint64_t v39 = 0LL;
LABEL_40:

  int64_t v40 = v61;
  if (v40)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v40);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v41 = v62;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    if (v63) {
      goto LABEL_45;
    }
LABEL_47:
    Hasher._combine(_:)(0);
    goto LABEL_48;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v41);
  swift_bridgeObjectRelease();
  if (!v63) {
    goto LABEL_47;
  }
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_48:
  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    char v42 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }

  if (v65 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v43 = v65 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }

  if (v66 == 2)
  {
    uint64_t v44 = 0;
  }

  else
  {
    uint64_t v44 = v66 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v44);
  if (v67 == 2)
  {
    uint64_t v45 = 0;
  }

  else
  {
    char v46 = v67 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v45 = v46;
  }

  Hasher._combine(_:)(v45);
  outlined retain of LocalePreferences?( (uint64_t)v69,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v69,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

    outlined init with copy of Any((uint64_t)&v46, (uint64_t)&v44);
    specialized Dictionary.subscript.setter((uint64_t)&v44, v12, v13);
    if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0
      || (unsigned __int16)specialized _ParseInfo.currChar.getter( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16)) != 59)
    {
      swift_bridgeObjectRelease();
      *(void *)&uint64_t v44 = 0LL;
      *((void *)&v44 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease();
      *(void *)&uint64_t v44 = 0xD000000000000014LL;
      *((void *)&v44 + 1) = 0x80000001839D09B0LL;
      specialized lineNumberStrings(_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
      v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      unint64_t v25 = v44;
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      int64_t v26 = swift_allocError();
      *uint64_t v27 = v25;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
LABEL_47:

      unint64_t v4 = 0LL;
      *(void *)(a1 + 24) = v26;
      return v4;
    }

    _ParseInfo.advance()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
  }

  __break(1u);
LABEL_55:
  _ParseInfo.retreat()();
  _StringGuts.grow(_:)(38LL);
  swift_bridgeObjectRelease();
  char v42 = 0xD000000000000018LL;
  uint64_t v43 = 0x80000001839D07D0LL;
  lazy protocol witness table accessor for type UInt16 and conformance UInt16();
  v40._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 0x6E696C2074612027LL;
  v41._object = (void *)0xEA00000000002065LL;
  String.append(_:)(v41);
  uint64_t v37 = *(void *)(a1 + 16);
  unint64_t v35 = v14;
  BOOL v36 = v15;
LABEL_53:
  specialized lineNumberStrings(_:)(v35, v36, v37);
  v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
  uint64_t v32 = swift_allocError();
  *unint64_t v39 = v42;
  v39[1] = v43;
LABEL_49:

  *(void *)(a1 + 24) = v32;
LABEL_50:
  uint64_t v44 = 0u;
  uint64_t v45 = 0u;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Any?((uint64_t)&v44);
  return 0LL;
}

  __src[14] = (int)ucal_getFieldDifference();
  LOBYTE(__src[15]) = 0;
  if ((a2 & 0x20) == 0)
  {
LABEL_26:
    if ((a2 & 0x40) == 0) {
      goto LABEL_27;
    }
    goto LABEL_41;
  }

      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
  }

  unint64_t v15 = v11 + 1;
  if (__OFADD__(v11, 1LL))
  {
    __break(1u);
    goto LABEL_101;
  }

  if (v15 >= v50) {
    goto LABEL_50;
  }
  unint64_t v16 = *(void *)(v49 + 8 * v15);
  ++v11;
  if (v16) {
    goto LABEL_24;
  }
  uint64_t v11 = v15 + 1;
  if (v15 + 1 >= v50) {
    goto LABEL_50;
  }
  unint64_t v16 = *(void *)(v49 + 8 * v11);
  if (v16) {
    goto LABEL_24;
  }
  uint64_t v11 = v15 + 2;
  if (v15 + 2 >= v50) {
    goto LABEL_50;
  }
  unint64_t v16 = *(void *)(v49 + 8 * v11);
  if (v16) {
    goto LABEL_24;
  }
  uint64_t v11 = v15 + 3;
  if (v15 + 3 >= v50) {
    goto LABEL_50;
  }
  unint64_t v16 = *(void *)(v49 + 8 * v11);
  if (v16) {
    goto LABEL_24;
  }
  unint64_t v17 = v15 + 4;
  if (v17 >= v50)
  {
LABEL_50:
    swift_release();
    uint64_t v28 = a1 + 64;
    uint64_t v29 = 1LL << *(_BYTE *)(a1 + 32);
    uint64_t v30 = -1LL;
    if (v29 < 64) {
      uint64_t v30 = ~(-1LL << v29);
    }
    uint64_t v31 = v30 & *(void *)(a1 + 64);
    char v51 = (unint64_t)(v29 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v32 = 0LL;
    if (v31) {
      goto LABEL_58;
    }
LABEL_59:
    BOOL v36 = v32 + 1;
    if (!__OFADD__(v32, 1LL))
    {
      if (v36 < v51)
      {
        uint64_t v37 = *(void *)(v28 + 8 * v36);
        ++v32;
        if (v37) {
          goto LABEL_74;
        }
        uint64_t v32 = v36 + 1;
        if (v36 + 1 >= v51) {
          goto LABEL_99;
        }
        uint64_t v37 = *(void *)(v28 + 8 * v32);
        if (v37) {
          goto LABEL_74;
        }
        uint64_t v32 = v36 + 2;
        if (v36 + 2 >= v51) {
          goto LABEL_99;
        }
        uint64_t v37 = *(void *)(v28 + 8 * v32);
        if (v37) {
          goto LABEL_74;
        }
        uint64_t v32 = v36 + 3;
        if (v36 + 3 >= v51) {
          goto LABEL_99;
        }
        uint64_t v37 = *(void *)(v28 + 8 * v32);
        if (v37)
        {
LABEL_74:
          uint64_t v31 = (v37 - 1) & v37;
          for (i = __clz(__rbit64(v37)) + (v32 << 6); ; i = v34 | (v32 << 6))
          {
            unint64_t v39 = (unint64_t *)(*(void *)(a1 + 48) + 16 * i);
            int64_t v40 = v39[1];
            if (!*(void *)(a1 + 16))
            {
              char v60 = 0LL;
              char v58 = 0u;
              uint64_t v59 = 0u;
              char v56 = 0u;
              uint64_t v57 = 0u;
              swift_bridgeObjectRetain();
LABEL_55:
              outlined destroy of Any?( (uint64_t)&v56,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              uint64_t v33 = 0LL;
LABEL_56:
              swift_bridgeObjectRetain();
              outlined consume of AttributedString.AttributeRunBoundaries?(v33, 1LL);
              outlined consume of AttributedString.AttributeRunBoundaries?(v4, v5);
LABEL_57:
              uint64_t result = swift_bridgeObjectRelease();
              if (!v31) {
                goto LABEL_59;
              }
              goto LABEL_58;
            }

            uint64_t v41 = *v39;
            swift_bridgeObjectRetain_n();
            char v42 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v40);
            if ((v43 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue( *(void *)(a1 + 56) + 72 * v42,  (uint64_t)&v56);
            }

            else
            {
              char v60 = 0LL;
              char v58 = 0u;
              uint64_t v59 = 0u;
              char v56 = 0u;
              uint64_t v57 = 0u;
            }

            swift_bridgeObjectRelease();
            if (!*((void *)&v57 + 1)) {
              goto LABEL_55;
            }
            uint64_t v33 = *((void *)&v58 + 1);
            uint64_t v44 = v59;
            outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v58 + 1), v59);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v56);
            if (!v44) {
              break;
            }
            if (v44 == 1) {
              goto LABEL_56;
            }
            if (!v5)
            {
LABEL_88:
              swift_bridgeObjectRelease();
              goto LABEL_57;
            }

            if (v33 != v4 || v44 != v5)
            {
              uint64_t v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v45 & 1) == 0) {
                goto LABEL_57;
              }
              goto LABEL_90;
            }

            swift_bridgeObjectRelease();
            if (!*(void *)(a1 + 16))
            {
LABEL_96:
              char v60 = 0LL;
              char v58 = 0u;
              uint64_t v59 = 0u;
              char v56 = 0u;
              uint64_t v57 = 0u;
              goto LABEL_97;
            }

  if (v24) {
    return -(uint64_t)i;
  }
  else {
    return i;
  }
}

      swift_bridgeObjectRelease();
      return 0LL;
    }

  if (!v6) {
    __break(1u);
  }
  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  uint64_t v33 = 0LL;
LABEL_40:

  uint64_t v38 = v58;
  if (v38)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v38);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v6 = v45;
  unint64_t v39 = v59;
  if (!v59)
  {
    Hasher._combine(_:)(0);
    if (v60) {
      goto LABEL_45;
    }
LABEL_47:
    Hasher._combine(_:)(0);
    goto LABEL_48;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v39);
  swift_bridgeObjectRelease();
  if (!v60) {
    goto LABEL_47;
  }
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_48:
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    int64_t v40 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }

  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v41 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }

  if (v63 == 2)
  {
    char v42 = 0;
  }

  else
  {
    char v42 = v63 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v42);
  if (v64 == 2)
  {
    uint64_t v43 = 0;
  }

  else
  {
    uint64_t v44 = v64 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v43 = v44;
  }

  Hasher._combine(_:)(v43);
  outlined retain of LocalePreferences?( (uint64_t)v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_61:
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v6);
}

    free(v10);
LABEL_40:
    _NSFileHandleRaiseOperationExceptionWhileReading((objc_class *)self, a2, 1);
  }

    unint64_t v25 = 1;
LABEL_40:
    if (location == v18) {
      unint64_t v10 = v25;
    }
    else {
      unint64_t v10 = 0;
    }
    return v10 & 1;
  }

  if (((unint64_t)indexSet & 0x8000000000000000LL) != 0)
  {
    uint64_t v20 = *MEMORY[0x189616658];
    unint64_t v21 = v20 ^ (unint64_t)indexSet;
    unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
    if ((~(_BYTE)v21 & 7) == 0) {
      unint64_t v22 = 0xFFFFFFFFFFFFFLL;
    }
    uint64_t v23 = v22 & (v21 >> 3);
    goto LABEL_61;
  }

  int64_t v26 = indexSet->_indexSetFlags;
  if ((*(_BYTE *)&v26 & 2) != 0)
  {
    uint64_t v23 = indexSet->_internal._singleRange._range.location;
LABEL_61:
    char v42 = -[NSIndexSet lastIndex](self, "lastIndex");
    uint64_t v44 = v42 != 0x7FFFFFFFFFFFFFFFLL && v42 >= 0x40;
    uint64_t v45 = !v44;
    if (v45 == 1)
    {
      char v46 = 0LL;
      uint64_t v47 = 0LL;
      uint64_t v43 = 0LL;
      unint64_t v48 = self->_indexSetFlags;
      char v49 = &self->_internal;
      uint64_t v50 = ($BA656A43A73A71AF6C4B982E4240B787 *)(&self->_internal._singleBitfield + 1);
      if ((*(_BYTE *)&v48 & 2) != 0) {
        uint64_t v50 = &self->_internal;
      }
      while (1)
      {
        char v51 = v50;
        if ((*(_BYTE *)&v48 & 3) == 0) {
          char v51 = ($BA656A43A73A71AF6C4B982E4240B787 *)(v49->_singleRange._range.location + 8);
        }
        char v52 = v51->_singleRange._range.location;
        char v53 = v51->_singleRange._range.location != 0;
        if ((*(_BYTE *)&v48 & 1) == 0 && v52) {
          char v53 = *(void *)(v49->_singleRange._range.location + 8);
        }
        if (v47 >= v53) {
          break;
        }
        id v54 = &self->_internal;
        if ((*(_BYTE *)&v48 & 1) == 0) {
          id v54 = ($BA656A43A73A71AF6C4B982E4240B787 *)(v49->_singleRange._range.location
        }
                                                    + 16LL * *(void *)(v49->_singleRange._range.location + 24)
                                                    + 64);
        id v55 = &v54[v46];
        char v56 = v55->_singleRange._range.location;
        uint64_t v57 = v55->_singleRange._range.length;
        char v58 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v57 << v56;
        if (v57) {
          uint64_t v59 = v58;
        }
        else {
          uint64_t v59 = 0LL;
        }
        v43 |= v59;
        ++v47;
        ++v46;
      }
    }

    if (v43 == v23) {
      unint64_t v10 = v45;
    }
    else {
      unint64_t v10 = 0;
    }
    return v10 & 1;
  }

  if ((*(_BYTE *)&indexSetFlags & 1) != 0) {
    uint64_t v27 = self->_internal._singleRange._range.length != 0;
  }
  else {
    uint64_t v27 = *(void *)(self->_internal._singleRange._range.location + 8);
  }
  if ((*(_BYTE *)&v26 & 1) != 0) {
    char v60 = indexSet->_internal._singleRange._range.length != 0;
  }
  else {
    char v60 = *(void *)(indexSet->_internal._singleRange._range.location + 8);
  }
  if (v27 != v60) {
    goto LABEL_116;
  }
  if (_isEmpty((uint64_t)self))
  {
    bitfield = 0LL;
  }

  else
  {
    uint64_t v62 = (*(_BYTE *)&indexSetFlags & 1) != 0
        ? &self->_internal._singleBitfield + 1
        : ($246AE1437D6384FE1219915B69C5C0EF *)(self->_internal._singleRange._range.location + 16);
    bitfield = v62->_bitfield;
  }

  if (_isEmpty((uint64_t)indexSet))
  {
    id v63 = 0LL;
  }

  else
  {
    id v64 = (*(_BYTE *)&v26 & 1) != 0
        ? &indexSet->_internal._singleBitfield + 1
        : ($246AE1437D6384FE1219915B69C5C0EF *)(indexSet->_internal._singleRange._range.location + 16);
    id v63 = v64->_bitfield;
  }

  if (bitfield != v63) {
    goto LABEL_116;
  }
  uint64_t v65 = &self->_internal;
  if ((*(_BYTE *)&indexSetFlags & 1) == 0) {
    uint64_t v65 = ($BA656A43A73A71AF6C4B982E4240B787 *)(v65->_singleRange._range.location
  }
                                              + 16LL * *(void *)(v65->_singleRange._range.location + 24)
                                              + 64);
  id v66 = &indexSet->_internal;
  if ((*(_BYTE *)&v26 & 1) == 0) {
    id v66 = ($BA656A43A73A71AF6C4B982E4240B787 *)(v66->_singleRange._range.location
  }
                                              + 16LL * *(void *)(v66->_singleRange._range.location + 24)
                                              + 64);
  if (!v27) {
    goto LABEL_115;
  }
  uint64_t v67 = v27 - 1;
  do
  {
    id v68 = *(int64x2_t *)v65++;
    id v69 = v68;
    uint64_t v70 = *(int64x2_t *)v66++;
    uint64_t v71 = vmovn_s64(vceqq_s64(v69, v70));
    unint64_t v10 = v71.i8[0] & v71.i8[4];
    uint64_t v44 = v67-- != 0;
    int v72 = v44;
  }

  while ((v71.i8[0] & v71.i8[4] & 1) != 0 && (v72 & 1) != 0);
  return v10 & 1;
}

  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  return 0LL;
}

LABEL_20:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_21:
    uint64_t v27 = 16 * v22;
    uint64_t v28 = (uint64_t *)(*(void *)(v5 + 48) + v27);
    uint64_t v30 = *v28;
    uint64_t v29 = v28[1];
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 56) + v27);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        BOOL v36 = v16 == v35;
        if (v16 == v35) {
          unint64_t v16 = 0LL;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v11 + 8 * v16);
      }

      while (v37 == -1);
      unint64_t v17 = __clz(__rbit64(~v37)) + (v16 << 6);
    }

    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    uint64_t v18 = 16 * v17;
    char v19 = (void *)(*(void *)(v7 + 48) + v18);
    *char v19 = v30;
    v19[1] = v29;
    uint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    void *v20 = v33;
    v20[1] = v32;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  uint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v38 = 1LL << *(_BYTE *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v38;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

        uint64_t v11 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }

      uint64_t v24 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      unint64_t v25 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v20);
      int64_t v26 = *v25;
      uint64_t v27 = v25[1];
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v24);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1LL << *(_BYTE *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }

          uint64_t v30 = v16 == v29;
          if (v16 == v29) {
            unint64_t v16 = 0LL;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v13 + 8 * v16);
        }

        while (v31 == -1);
        unint64_t v17 = __clz(__rbit64(~v31)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(void *)(*(void *)(v7 + 48) + 8 * v17) = v24;
      uint64_t v18 = (void *)(*(void *)(v7 + 56) + 16 * v17);
      *uint64_t v18 = v26;
      v18[1] = v27;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

        uint64_t v11 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v15 << 6);
      }

      unint64_t v25 = *(_BYTE *)(*(void *)(v5 + 48) + v21);
      int64_t v26 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
      if ((v32 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      unint64_t v16 = -1LL << *(_BYTE *)(v7 + 32);
      unint64_t v17 = result & ~v16;
      uint64_t v18 = v17 >> 6;
      if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        char v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }

          uint64_t v29 = v18 == v28;
          if (v18 == v28) {
            uint64_t v18 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v18);
        }

        while (v30 == -1);
        char v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }

      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      *(_BYTE *)(*(void *)(v7 + 48) + v19) = v25;
      *(void *)(*(void *)(v7 + 56) + 8 * v19) = v26;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    int64_t v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v32 = v17 == v31;
        if (v17 == v31) {
          unint64_t v17 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v12 + 8 * v17);
      }

      while (v33 == -1);
      uint64_t v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    char v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *char v19 = v28;
    v19[1] = v27;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v29;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  char v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

          if (v27 != 2) {
            goto LABEL_21;
          }
LABEL_22:
          if ((_DWORD)v42 != 3) {
            objc_msgSend(v31, sel_setPronounType_, v42 + 1);
          }
          swift_bridgeObjectRelease();
          if (v43 != 2)
          {
            if ((v43 & 1) != 0) {
              uint64_t v32 = 2LL;
            }
            else {
              uint64_t v32 = 1LL;
            }
            objc_msgSend(v31, sel_setDefiniteness_, v32);
          }

          if (v28)
          {
            uint64_t v33 = objc_allocWithZone((Class)&OBJC_CLASS___NSMorphology);
            swift_bridgeObjectRetain();
            char v34 = objc_msgSend(v33, sel_init);
            unint64_t v22 = v34;
            else {
              objc_msgSend(v34, sel_setGrammaticalGender_, v44 + 1);
            }
            if ((v44 & 0xFF0000) != 0x60000) {
              objc_msgSend(v22, sel_setNumber_, BYTE2(v44) + 1);
            }
            if ((v44 & 0xFF00) != 0xE00) {
              objc_msgSend(v22, sel_setPartOfSpeech_, BYTE1(v44) + 1);
            }
            BOOL v36 = v40 | (v41 << 32);
            if ((v40 & 0xFF000000) != 0x2000000) {
              objc_msgSend(v22, sel_setDetermination_, ((v36 >> 24) & 1) + 1);
            }
            if (BYTE2(v40) != 3) {
              objc_msgSend(v22, sel_setPronounType_, BYTE2(v40) + 1);
            }
            if ((_DWORD)v41 == 2)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease_n();
            }

            else
            {
              if ((v36 & 0x100000000LL) != 0) {
                uint64_t v37 = 2LL;
              }
              else {
                uint64_t v37 = 1LL;
              }
              objc_msgSend(v22, sel_setDefiniteness_, v37);
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
          }

          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v22 = 0LL;
          }

          objc_msgSend( objc_allocWithZone((Class)NSMorphologyPronoun),  sel_initWithPronoun_morphology_dependentMorphology_,  v48,  v31,  v22);

          swift_unknownObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          unint64_t v21 = v45 + 64;
          uint64_t v20 = v50 - 1;
          if (v50 == 1)
          {
            uint64_t v38 = v51;
            swift_bridgeObjectRelease();
            if (!(v51 >> 62)) {
              goto LABEL_55;
            }
LABEL_58:
            if (v38 >= 0) {
              v38 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            goto LABEL_56;
          }
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v38 = MEMORY[0x18961AFE8];
      if (MEMORY[0x18961AFE8] >> 62) {
        goto LABEL_58;
      }
LABEL_55:
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      uint64_t v38 = _ContiguousArrayBuffer._asCocoaArray()();
LABEL_56:
      objc_msgSend((id)objc_opt_self(), sel_localizedForLanguageIdentifier_withPronouns_, v19, v38);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v89)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          unint64_t v22 = v90;
          if (!v90)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_23;
          }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v14);
  if (!v6)
  {
LABEL_5:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
    if (!v29) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v14);
  if (!v6)
  {
LABEL_5:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
    if (!v29) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    if (v34 <= v15 >> 16) {
      goto LABEL_60;
    }
    unint64_t v15 = String.UTF8View._foreignIndex(after:)();
LABEL_25:
    if (v30 == v14 >> 14) {
      return 0LL;
    }
    uint64_t v18 = v14 & 0xC;
    unint64_t v21 = v14;
    if (v18 == v13) {
      unint64_t v21 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
    }
    unint64_t v22 = v21 >> 16;
    if (v21 >> 16 >= v32) {
      goto LABEL_59;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      uint64_t v24 = String.UTF8View._foreignSubscript(position:)();
      if (v18 == v13) {
        goto LABEL_34;
      }
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      unint64_t v35 = a1;
      BOOL v36 = v27;
      uint64_t v24 = *((_BYTE *)&v35 + v22);
      if (v18 == v13) {
        goto LABEL_34;
      }
    }

    else
    {
      uint64_t v23 = v26;
      if ((a1 & 0x1000000000000000LL) == 0) {
        uint64_t v23 = _StringObject.sharedUTF8.getter();
      }
      uint64_t v24 = *(_BYTE *)(v23 + v22);
      if (v18 == v13)
      {
LABEL_34:
        uint64_t v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
        if ((a2 & 0x1000000000000000LL) != 0) {
          goto LABEL_35;
        }
        goto LABEL_39;
      }
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_35:
      if (v32 <= v14 >> 16) {
        goto LABEL_61;
      }
      uint64_t v14 = String.UTF8View._foreignIndex(after:)();
      goto LABEL_40;
    }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v40)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v9 = v41;
    if (!v41) {
      goto LABEL_16;
    }
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v58, v9);
    swift_bridgeObjectRelease();
    unint64_t v10 = v42;
    if (!v42) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          uint64_t v14 = v47;
          if (!v47) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }

  __break(1u);
  return result;
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t v15 = v46;
        if (!v46)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          unint64_t v16 = v47;
          if (!v47)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_23;
          }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v14 = v46;
    if (!v46) {
      goto LABEL_16;
    }
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v14);
    swift_bridgeObjectRelease();
    unint64_t v15 = v47;
    if (!v47) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

  __break(1u);
  return result;
}

          uint64_t v30 = 256LL;
        }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v47)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          unint64_t v15 = v48;
          if (!v48) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v14 = v46;
    if (!v46) {
      goto LABEL_16;
    }
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v14);
    swift_bridgeObjectRelease();
    unint64_t v15 = v47;
    if (!v47) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v60) {
    goto LABEL_21;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  unint64_t v15 = v61;
  if (!v61)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v53) {
    goto LABEL_21;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  int64_t v13 = v54;
  if (!v54)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v57) {
    goto LABEL_21;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  unint64_t v16 = v58;
  if (!v58)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v52) {
    goto LABEL_21;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  unint64_t v15 = v53;
  if (!v53)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }

    swift_unknownObjectRetain();
    uint64_t v12 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v11, v5, v7, v8, v64);
    uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
LABEL_66:
    unint64_t v10 = v9;
    goto LABEL_67;
  }

  int v61 = v6[9];
  uint64_t v59 = v6[11];
  unint64_t v16 = *(unsigned __int8 *)(v7 + 18);
  if (*(_BYTE *)(v7 + 18))
  {
    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    unint64_t v17 = v4;
    uint64_t v18 = v7;
    while (1)
    {
      uint64_t v20 = *(unsigned __int16 *)(v18 + 16);
      if (*(_WORD *)(v18 + 16))
      {
        unint64_t v21 = *(void *)(v18 + 32);
        unint64_t v22 = __OFSUB__(v17, v21);
        uint64_t v23 = v17 - v21;
        if (v22) {
          goto LABEL_92;
        }
        if (__OFADD__(v23, 1LL)) {
          goto LABEL_93;
        }
        if (v23 + 1 < 1)
        {
          uint64_t v20 = 0LL;
          goto LABEL_26;
        }

        if ((_DWORD)v20 != 1)
        {
          uint64_t v24 = (uint64_t *)(v18 + 56);
          unint64_t v25 = 1LL;
          while (1)
          {
            int64_t v26 = *v24;
            v24 += 3;
            unint64_t v17 = v23 - v26;
            if (__OFSUB__(v23, v26)) {
              break;
            }
            if (__OFADD__(v17, 1LL)) {
              goto LABEL_90;
            }
            if (v17 + 1 < 1)
            {
              uint64_t v20 = v25;
              unint64_t v17 = v23;
              goto LABEL_26;
            }

            ++v25;
            uint64_t v23 = v17;
            if (v20 == v25) {
              goto LABEL_25;
            }
          }

          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }

        unint64_t v17 = v23;
      }

    swift_unknownObjectRetain();
    uint64_t v18 = v11;
    int64_t v13 = v55;
    uint64_t v57 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v14, v6, v8, v9, v55);
    swift_unknownObjectRelease_n();
    uint64_t v12 = v11;
    goto LABEL_67;
  }

  char v58 = v9;
  char v19 = *(unsigned __int8 *)(v8 + 18);
  if (!*(_BYTE *)(v8 + 18))
  {
    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v29 = 0LL;
    uint64_t v20 = v4;
    uint64_t v6 = v8;
    uint64_t v30 = *(unsigned __int16 *)(v8 + 16);
    if (*(_WORD *)(v8 + 16)) {
      goto LABEL_43;
    }
LABEL_54:
    uint64_t v31 = v20;
    goto LABEL_64;
  }

  uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  uint64_t v20 = v4;
  uint64_t v6 = v8;
  do
  {
    unint64_t v22 = *(unsigned __int16 *)(v6 + 16);
    if (*(_WORD *)(v6 + 16))
    {
      uint64_t v23 = *(void *)(v6 + 32);
      uint64_t v24 = __OFSUB__(v20, v23);
      unint64_t v25 = v20 - v23;
      if (v24) {
        goto LABEL_77;
      }
      if (__OFADD__(v25, 1LL)) {
        goto LABEL_78;
      }
      if (v25 + 1 < 1)
      {
        unint64_t v22 = 0LL;
        goto LABEL_26;
      }

      if ((_DWORD)v22 != 1)
      {
        int64_t v26 = (uint64_t *)(v6 + 56);
        uint64_t v27 = 1LL;
        while (1)
        {
          uint64_t v28 = *v26;
          v26 += 3;
          uint64_t v20 = v25 - v28;
          if (__OFSUB__(v25, v28)) {
            break;
          }
          if (__OFADD__(v20, 1LL)) {
            goto LABEL_75;
          }
          if (v20 + 1 < 1)
          {
            unint64_t v22 = v27;
            uint64_t v20 = v25;
            goto LABEL_26;
          }

          ++v27;
          unint64_t v25 = v20;
          if (v22 == v27) {
            goto LABEL_25;
          }
        }

        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }

      uint64_t v20 = v25;
    }

    swift_unknownObjectRetain();
    unint64_t v10 = v9;
    uint64_t v12 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v11, v5, v7, v8, v61);
    uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_66;
  }

  char v58 = v4[9];
  char v60 = result[7];
  unint64_t v16 = *(unsigned __int8 *)(v7 + 18);
  if (*(_BYTE *)(v7 + 18))
  {
    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    unint64_t v17 = v2;
    uint64_t v18 = v7;
    while (1)
    {
      uint64_t v20 = *(unsigned __int16 *)(v18 + 16);
      if (*(_WORD *)(v18 + 16))
      {
        unint64_t v21 = *(void *)(v18 + 32);
        unint64_t v22 = __OFSUB__(v17, v21);
        uint64_t v23 = v17 - v21;
        if (v22) {
          goto LABEL_91;
        }
        if (__OFADD__(v23, 1LL)) {
          goto LABEL_92;
        }
        if (v23 + 1 <= 0)
        {
          uint64_t v20 = 0LL;
          goto LABEL_26;
        }

        if ((_DWORD)v20 != 1)
        {
          uint64_t v24 = (uint64_t *)(v18 + 56);
          unint64_t v25 = 1LL;
          while (1)
          {
            int64_t v26 = *v24;
            v24 += 3;
            unint64_t v17 = v23 - v26;
            if (__OFSUB__(v23, v26)) {
              break;
            }
            if (__OFADD__(v17, 1LL)) {
              goto LABEL_89;
            }
            if (v17 + 1 < 1)
            {
              uint64_t v20 = v25;
              unint64_t v17 = v23;
              goto LABEL_26;
            }

            ++v25;
            uint64_t v23 = v17;
            if (v20 == v25) {
              goto LABEL_25;
            }
          }

          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
          goto LABEL_94;
        }

        unint64_t v17 = v23;
      }

    swift_unknownObjectRetain();
    uint64_t v11 = v58;
    int64_t v13 = v10;
    uint64_t v14 = (uint64_t *)specialized Rope._Node.distanceFromStart<A>(to:in:)(v58, v12, v5, v7, v8, v10);
    uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
    uint64_t v9 = v58;
LABEL_66:
    *(void *)&char v60 = v11;
    *((void *)&v60 + 1) = v12;
    *(void *)&int v61 = v5;
    unint64_t v25 = __OFADD__(v2, 1LL);
    int64_t v40 = v2 + 1;
    if (v25) {
      goto LABEL_83;
    }
    if (v11 != v9) {
      goto LABEL_84;
    }
    if (v5)
    {
      uint64_t v41 = *(void *)(v5 + 24 * ((v12 >> ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      uint64_t v41 = specialized Rope._Node.subscript.getter(v12, v7);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    unint64_t v25 = __OFADD__(v14, v41);
    char v42 = (char *)v14 + v41;
    if (v25) {
      goto LABEL_85;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v60, v7, v8, v13, v58);
    swift_unknownObjectRelease_n();
    uint64_t v43 = v60;
    uint64_t v44 = v57 + 1;
    uint64_t v45 = v61;
    if (v6 == 2)
    {
      char v46 = v57[2];
      char v60 = *v44;
      int v61 = v46;
      uint64_t v62 = v57[3];
      BigString.utf8.getter();
      BigString.startIndex.getter();
    }

    else
    {
      uint64_t v47 = v57[2];
      char v60 = *v44;
      int v61 = v47;
      uint64_t v62 = v57[3];
      BigString.utf8.getter();
      uint64_t result = (uint64_t *)v56;
      if (__OFSUB__(v42, v56 >> 11)) {
        goto LABEL_87;
      }
    }

    unint64_t v48 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v50 = v49;
    char v52 = v51;
    id v54 = v53;
    uint64_t result = (uint64_t *)outlined release of Locale((uint64_t)v59);
    *uint64_t v3 = v40;
    *(_OWORD *)(v3 + 1) = v43;
    v3[3] = v45;
    v3[4] = v48;
    v3[5] = v50;
    v3[6] = v52;
    v3[7] = v54;
    return result;
  }

  uint64_t v18 = v4[10];
  id v55 = result[7];
  char v19 = *(unsigned __int8 *)(v7 + 18);
  if (!*(_BYTE *)(v7 + 18))
  {
    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v20 = v2;
    uint64_t v5 = v7;
LABEL_42:
    uint64_t v30 = *(unsigned __int16 *)(v5 + 16);
    if (*(_WORD *)(v5 + 16))
    {
      uint64_t v31 = v20 - 1;
      if (__OFSUB__(v20, 1LL)) {
        goto LABEL_89;
      }
      if (__OFADD__(v31, 1LL)) {
        goto LABEL_91;
      }
      if (v20 <= 0)
      {
        uint64_t v30 = 0LL;
LABEL_64:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v12 = v19 & 0xFFFFFFFFFFFFF0FFLL | (v30 << 8);
        uint64_t v6 = v55;
        unint64_t v10 = v18;
        goto LABEL_20;
      }

      if ((_DWORD)v30 != 1)
      {
        uint64_t v32 = v30 - 2;
        if (v31 < v30 - 2) {
          uint64_t v32 = v20 - 1;
        }
        if (v32 >= v20 + 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v32 = v20 + 0x7FFFFFFFFFFFFFFFLL;
        }
        uint64_t v33 = v32 + 1;
        if (v33 >= 5)
        {
          unint64_t v35 = v33 & 3;
          if ((v33 & 3) == 0) {
            unint64_t v35 = 4LL;
          }
          BOOL v36 = v33 - v35;
          char v34 = v36 + 1;
          uint64_t v37 = 0uLL;
          uint64_t v38 = (int64x2_t)(unint64_t)(v20 - 1);
          v39.i64[0] = -1LL;
          v39.i64[1] = -1LL;
          do
          {
            uint64_t v38 = vaddq_s64(v38, v39);
            uint64_t v37 = vaddq_s64(v37, v39);
            v36 -= 4LL;
          }

          while (v36);
          uint64_t v31 = vaddvq_s64(vaddq_s64(v37, v38));
        }

        else
        {
          char v34 = 1LL;
        }

        while (v20 + 0x8000000000000000LL != v34)
        {
          if (v20 == v34)
          {
            uint64_t v30 = v20;
            goto LABEL_64;
          }

          ++v34;
          --v31;
          if (v30 == v34) {
            goto LABEL_63;
          }
        }

        goto LABEL_88;
      }
    }

    else
    {
      uint64_t v31 = v20;
    }

    v55[0] = v13;
    v55[1] = v12;
    uint64_t v31 = swift_bridgeObjectRetain();
    Calendar.ComponentSet.init(_:)(v31, &v54);
    uint64_t v32 = 1.59271755e13;
    if (v9 <= 1.59271755e13) {
      uint64_t v32 = v9;
    }
    *(void *)__src = fmax(v32, -2.11845067e11);
    Calendar._dateComponents(_:from:)(&v54, (double *)__src, &v60);
    swift_release();
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)&v60);
    if ((v63 & 1) != 0)
    {
      *(void *)a5 = 0LL;
LABEL_52:
      *(_BYTE *)(a5 + 8) = 1;
      return result;
    }

    uint64_t v33 = v62;
    char v56 = v13;
    uint64_t v57 = v12;
    char v52 = v9;
    char v53 = 0uLL;
    v49[0] = 0LL;
    v49[1] = 0LL;
    if (v10)
    {
      char v34 = v62 - a3;
      if (!__OFSUB__(v62, a3)) {
        goto LABEL_37;
      }
      __break(1u);
    }

    char v34 = v33 + a3;
    if (__OFADD__(v33, a3))
    {
      __break(1u);
      goto LABEL_56;
    }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v8);
  swift_bridgeObjectRelease();
LABEL_21:
  unint64_t v10 = v40;
  uint64_t v9 = v41;
  uint64_t v12 = v42;
  uint64_t v11 = v43;
  int64_t v13 = v44;
  if (v40)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v14 = v9;
    unint64_t v15 = v12;
    unint64_t v16 = v11;
    unint64_t v17 = v13;
    uint64_t v18 = v10;
    _CFObject.hash(into:)();
    if (v9) {
      goto LABEL_23;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v23 = v13;
    uint64_t v24 = v9;
    unint64_t v25 = v12;
    int64_t v26 = v11;
    if (v9)
    {
LABEL_23:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      char v19 = v9;
      _CFObject.hash(into:)();

      if (v12) {
        goto LABEL_24;
      }
      goto LABEL_29;
    }
  }

  Hasher._combine(_:)(0);
  if (v12)
  {
LABEL_24:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v20 = v12;
    _CFObject.hash(into:)();

    if (v11) {
      goto LABEL_25;
    }
LABEL_30:
    Hasher._combine(_:)(0);
    if (v13) {
      goto LABEL_26;
    }
    goto LABEL_31;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v51, v6);
  swift_bridgeObjectRelease();
LABEL_21:
  uint64_t v8 = v39;
  uint64_t v7 = v40;
  unint64_t v10 = v41;
  uint64_t v9 = v42;
  uint64_t v11 = v43;
  if (v39)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v12 = v7;
    int64_t v13 = v10;
    uint64_t v14 = v9;
    unint64_t v15 = v11;
    unint64_t v16 = v8;
    _CFObject.hash(into:)();
    if (v7) {
      goto LABEL_23;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v21 = v11;
    unint64_t v22 = v7;
    uint64_t v23 = v10;
    uint64_t v24 = v9;
    if (v7)
    {
LABEL_23:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v17 = v7;
      _CFObject.hash(into:)();

      if (v10) {
        goto LABEL_24;
      }
      goto LABEL_29;
    }
  }

  Hasher._combine(_:)(0);
  if (v10)
  {
LABEL_24:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v18 = v10;
    _CFObject.hash(into:)();

    if (v9) {
      goto LABEL_25;
    }
LABEL_30:
    Hasher._combine(_:)(0);
    if (v11) {
      goto LABEL_26;
    }
    goto LABEL_31;
  }

        swift_bridgeObjectRelease_n();
LABEL_22:
        do
        {
          unint64_t v22 = Substring.index(after:)();
          uint64_t v23 = Substring.index(after:)();
          uint64_t v14 = v22;
          unint64_t v15 = v23 >> 14;
          if (v23 >> 14 >= v38 || v14 >> 14 >= v36) {
            break;
          }
          unint64_t v39 = v14;
          unint64_t v25 = Substring.subscript.getter();
          uint64_t v27 = v26;
          if (v25 == Substring.subscript.getter() && v27 == v28) {
            goto LABEL_20;
          }
          unint64_t v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v14 = v39;
        }

        while ((v21 & 1) != 0);
      }
    }

    uint64_t v18 = swift_bridgeObjectRelease();
    MEMORY[0x1895F8858](v18);
    _withFixedUCharBuffer(size:defaultIsError:_:)( 128LL,  0,  (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    swift_bridgeObjectRelease();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    goto LABEL_21;
  }

  uint64_t v37 = 8204411LL;
  uint64_t v38 = 0xE300000000000000LL;
  uint64_t v6 = 1LL;
LABEL_22:
  char v34 = v3 + 32;
  while (v6 <= *(void *)(v3 + 16))
  {
    BOOL v36 = v6 - 1;
    unint64_t v35 = *(void *)(v34 + 16 * (v6 - 1) + 8);
    if ((v38 & 0x2000000000000000LL) != 0) {
      char v19 = HIBYTE(v38) & 0xF;
    }
    else {
      char v19 = v37 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v20 = 7LL;
    if (((v38 >> 60) & ((v37 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v20 = 11LL;
    }
    uint64_t v5 = v20 | (v19 << 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v21 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)( v5,  8204411LL,  0xE300000000000000LL);
    if ((v22 & 1) != 0) {
      goto LABEL_47;
    }
    uint64_t v23 = v21;
    uint64_t v24 = 4 * v19;
    while (1)
    {
      unint64_t v25 = v23;
      for (i = 15LL; i < 0x30000; i = String.index(after:)())
      {
        if (v24 <= v25 >> 14) {
          break;
        }
        uint64_t v28 = String.subscript.getter();
        uint64_t v30 = v29;
        uint64_t v31 = String.subscript.getter();
        uint64_t v5 = v32;
        if (v28 == v31 && v30 == v32)
        {
          swift_bridgeObjectRelease_n();
        }

        else
        {
          uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v27 & 1) == 0) {
            break;
          }
        }

        unint64_t v25 = String.index(after:)();
      }

      if ((i & 0xFFFFFFFFFFFFC000LL) == 0x30000) {
        break;
      }
      if (v23 < 0x4000) {
        goto LABEL_47;
      }
      uint64_t v23 = String.index(_:offsetBy:)();
    }

    swift_bridgeObjectRelease();
    if (v25 >> 14 < v23 >> 14) {
      goto LABEL_46;
    }
    uint64_t v5 = v35;
    lazy protocol witness table accessor for type String and conformance String();
    String.replaceSubrange<A>(_:with:)();
    swift_bridgeObjectRelease();
    uint64_t v3 = v33;
    uint64_t v6 = v36;
    if (!v36)
    {
      swift_bridgeObjectRelease();
      return v37;
    }
  }

  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  swift_bridgeObjectRelease();
  return v5;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v54)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v11 = v55;
    if (!v55) {
      goto LABEL_16;
    }
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v72, v11);
    swift_bridgeObjectRelease();
    uint64_t v12 = v56;
    if (!v56) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      char v19 = v27;
      uint64_t v20 = *(void *)(v28 + 16);
      if (v27)
      {
        if (MEMORY[0x186E1ACA4](*(void *)(v27 + 16) & 0x3FLL) >= (uint64_t)v20)
        {
          if ((swift_isUniquelyReferenced_native() & 1) == 0)
          {
            unint64_t v25 = _HashTable.copy()();
            swift_release();
            uint64_t v27 = v25;
            char v19 = v25;
            if (!v25)
            {
              __break(1u);
LABEL_36:
              swift_bridgeObjectRelease();
              return v5;
            }
          }

          _HashTable.UnsafeHandle.subscript.setter();
          uint64_t v5 = v19;
        }

        else
        {
          unint64_t v21 = *(void *)(v27 + 24) & 0x3FLL;
          if (v20 > 0xF || v21 != 0)
          {
LABEL_29:
            uint64_t v23 = MEMORY[0x186E1ACC8](v20);
            if (v21 <= v23) {
              uint64_t v24 = v23;
            }
            else {
              uint64_t v24 = v21;
            }
            uint64_t v5 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v28, v24, 0, v21);
            swift_release();
            uint64_t v27 = v5;
            goto LABEL_6;
          }

          swift_release();
          uint64_t v5 = 0LL;
          uint64_t v27 = 0LL;
        }
      }

      else
      {
        unint64_t v21 = 0LL;
        uint64_t v5 = 0LL;
        if (v20 > 0xF) {
          goto LABEL_29;
        }
      }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v89)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          unint64_t v22 = v90;
          if (!v90)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_23;
          }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v59) {
    goto LABEL_21;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  unint64_t v17 = v60;
  if (!v60)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v55) {
    goto LABEL_21;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  unint64_t v16 = v56;
  if (!v56)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }

    uint64_t v11 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_21:
    uint64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v14);
    char v19 = *v18;
    uint64_t v20 = (void *)v18[1];
    unint64_t v21 = *(void *)(*(void *)(v6 + 56) + 8 * v14);
    swift_retain();
    swift_bridgeObjectRetain();
    PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v21, v19, v20);
    swift_bridgeObjectRelease();
    if ((a2 & 1) != 0)
    {
      dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
      uint64_t v23 = v22;
      uint64_t v24 = swift_conformsToProtocol2();
      if (v24) {
        unint64_t v25 = v24;
      }
      else {
        unint64_t v25 = 0LL;
      }
      if (v24) {
        int64_t v26 = v23;
      }
      else {
        int64_t v26 = 0LL;
      }
      if (v26) {
        PredicateCodableConfiguration.allowKeyPathsForPropertiesProvided<A>(by:recursive:)(v26, 1LL, v26, v25);
      }
    }

    uint64_t result = swift_release();
  }

  unint64_t v17 = v15 + 3;
  if (v17 >= v12) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v8 + 8 * v17);
  if (v16)
  {
    uint64_t v7 = v17;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v7 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v8 + 8 * v7);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }

  if (v38 == 7)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if (v39)
  {
    Hasher._combine(_:)(0);
    if (!v40) {
      goto LABEL_25;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized Optional<A>.hash(into:)();
    if (!v40)
    {
LABEL_25:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v22);
      if (v32 != 4) {
        goto LABEL_26;
      }
LABEL_30:
      Hasher._combine(_:)(0);
      if (v8) {
        goto LABEL_27;
      }
      goto LABEL_31;
    }
  }

  Hasher._combine(_:)(0);
  if (v32 == 4) {
    goto LABEL_30;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v29, v8);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v29, v8);
    goto LABEL_32;
  }

      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v81 = *(void *)(a1 + 464);
      unint64_t v17 = v81;
      *(void *)(a1 + 464) = 0x8000000000000000LL;
      uint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      uint64_t v31 = *(void *)(v81 + 16);
      uint64_t v32 = (v29 & 1) == 0;
      uint64_t v33 = v31 + v32;
      if (!__OFADD__(v31, v32))
      {
        char v34 = v29;
        if (*(void *)(v81 + 24) < v33)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v33,  isUniquelyReferenced_nonNull_native);
          unint64_t v35 = v81;
          BOOL v36 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
          if ((v34 & 1) != (v37 & 1)) {
            goto LABEL_108;
          }
          uint64_t v30 = v36;
          uint64_t v38 = v83;
          if ((v34 & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_30;
        }

        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          unint64_t v35 = v81;
          uint64_t v38 = v83;
          if ((v29 & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_30;
        }

        int v76 = v30;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.IdentifierType, String>);
        char v58 = static _DictionaryStorage.copy(original:)();
        unint64_t v35 = v58;
        if (!*(void *)(v81 + 16)) {
          goto LABEL_100;
        }
        uint64_t v59 = (char *)(v58 + 64);
        __srca = (char *)(v81 + 64);
        char v60 = (unint64_t)((1LL << *(_BYTE *)(v35 + 32)) + 63) >> 6;
        if (v35 != v81 || v59 >= &__srca[8 * v60]) {
          memmove(v59, __srca, 8 * v60);
        }
        int v61 = 0LL;
        *(void *)(v35 + 16) = *(void *)(v81 + 16);
        uint64_t v62 = 1LL << *(_BYTE *)(v81 + 32);
        id v63 = -1LL;
        if (v62 < 64) {
          id v63 = ~(-1LL << v62);
        }
        id v64 = v63 & *(void *)(v81 + 64);
        uint64_t v65 = (unint64_t)(v62 + 63) >> 6;
        while (1)
        {
          if (v64)
          {
            id v66 = __clz(__rbit64(v64));
            v64 &= v64 - 1;
            uint64_t v67 = v66 | (v61 << 6);
          }

          else
          {
            int v72 = v61 + 1;
            if (__OFADD__(v61, 1LL))
            {
LABEL_105:
              __break(1u);
              goto LABEL_106;
            }

            if (v72 >= v65) {
              goto LABEL_100;
            }
            int v73 = *(void *)&__srca[8 * v72];
            ++v61;
            if (!v73)
            {
              int v61 = v72 + 1;
              if (v72 + 1 >= v65) {
                goto LABEL_100;
              }
              int v73 = *(void *)&__srca[8 * v61];
              if (!v73)
              {
                int v61 = v72 + 2;
                if (v72 + 2 >= v65) {
                  goto LABEL_100;
                }
                int v73 = *(void *)&__srca[8 * v61];
                if (!v73)
                {
                  int v61 = v72 + 3;
                  if (v72 + 3 >= v65) {
                    goto LABEL_100;
                  }
                  int v73 = *(void *)&__srca[8 * v61];
                  if (!v73)
                  {
                    int v61 = v72 + 4;
                    if (v72 + 4 >= v65) {
                      goto LABEL_100;
                    }
                    int v73 = *(void *)&__srca[8 * v61];
                    if (!v73)
                    {
                      int v61 = v72 + 5;
                      if (v72 + 5 >= v65) {
                        goto LABEL_100;
                      }
                      int v73 = *(void *)&__srca[8 * v61];
                      if (!v73)
                      {
                        int v61 = v72 + 6;
                        if (v72 + 6 >= v65) {
                          goto LABEL_100;
                        }
                        int v73 = *(void *)&__srca[8 * v61];
                        if (!v73)
                        {
                          int v74 = v72 + 7;
                          if (v74 >= v65) {
                            goto LABEL_100;
                          }
                          int v73 = *(void *)&__srca[8 * v74];
                          if (!v73)
                          {
                            while (1)
                            {
                              int v61 = v74 + 1;
                              if (__OFADD__(v74, 1LL)) {
                                goto LABEL_107;
                              }
                              if (v61 >= v65) {
                                break;
                              }
                              int v73 = *(void *)&__srca[8 * v61];
                              ++v74;
                              if (v73) {
                                goto LABEL_99;
                              }
                            }

        uint64_t v29 = v14;
        unint64_t v25 = object;
        int64_t v26 = countAndFlagsBits;
        uint64_t v27 = v21;
        uint64_t v62 = 0LL;
        id v63 = 0LL;
        id v64 = 0LL;
LABEL_21:
        uint64_t v30 = *(void *)a1;
        char v60 = *(void *)(a1 + 8);
        int v61 = v30;
        uint64_t v31 = *(void *)(a1 + 16);
        char v58 = *(void *)(a1 + 24);
        uint64_t v59 = v31;
        uint64_t v32 = *(void *)(a1 + 32);
        char v56 = *(void *)(a1 + 40);
        uint64_t v57 = v32;
        uint64_t v33 = *(void *)(a1 + 48);
        id v54 = *(void *)(a1 + 56);
        id v55 = v33;
        char v53 = *(_OWORD *)(a1 + 64);
        char v34 = *(void *)(a1 + 80);
        char v51 = *(void *)(a1 + 88);
        char v52 = v34;
        unint64_t v35 = v65;
        BOOL v36 = v67;
        *(void *)a1 = v65;
        *(void *)(a1 + 8) = v36;
        uint64_t v37 = v26;
        *(void *)(a1 + 16) = v26;
        *(void *)(a1 + 24) = v25;
        uint64_t v38 = v25;
        *(void *)(a1 + 32) = v27;
        *(void *)(a1 + 40) = v10;
        unint64_t v39 = v49;
        *(void *)(a1 + 48) = v24;
        *(void *)(a1 + 56) = v39;
        uint64_t v41 = v62;
        int64_t v40 = v63;
        *(void *)(a1 + 64) = v62;
        *(void *)(a1 + 72) = v29;
        *(void *)(a1 + 80) = v64;
        *(void *)(a1 + 88) = v40;
        char v42 = v29;
        uint64_t v47 = v37;
        unint64_t v48 = v38;
        outlined copy of Locale.LanguageCode?(v35, v36);
        id v66 = v27;
        outlined copy of Locale.LanguageCode?(v27, v10);
        outlined copy of Locale.LanguageCode?(v41, v42);
        outlined consume of Locale.Language?( v61,  v60,  v59,  v58,  v57,  v56,  v55,  v54,  v53,  *((uint64_t *)&v53 + 1),  v52,  v51,  (void (*)(void))outlined consume of Locale.LanguageCode?);
        if (v10)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined consume of Locale.LanguageCode?(v35, v67);
          uint64_t v43 = v66;
          outlined consume of Locale.LanguageCode?(v66, v10);
          outlined consume of Locale.LanguageCode?(v62, v42);
          swift_bridgeObjectRetain();
          uint64_t result = outlined consume of Locale.LanguageCode?(v43, v10);
          uint64_t v44 = v50;
          *uint64_t v50 = v43;
          v44[1] = v10;
        }

        else
        {
          outlined consume of Locale.LanguageCode?(v35, v67);
          outlined consume of Locale.LanguageCode?(v66, 0LL);
          uint64_t result = outlined consume of Locale.LanguageCode?(v62, v42);
          uint64_t v45 = v50;
          *uint64_t v50 = 0LL;
          v45[1] = 0LL;
        }

        return result;
      }
    }

    unint64_t v21 = 0LL;
    char v49 = 0LL;
    uint64_t v24 = 0LL;
    if (v14) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    *a2 = *(void *)(a1 + 32);
    a2[1] = result;
    return swift_bridgeObjectRetain();
  }

  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  return result;
}

  *v0 = v1 + 2;
  if (v1 + 2 == v2) {
    goto LABEL_29;
  }
  uint64_t v11 = v1[1];
  *v0 = v1 + 3;
  if (v1 + 3 == v2) {
    goto LABEL_29;
  }
  unint64_t v4 = 0;
  uint64_t v12 = v1[2];
  *v0 = v1 + 4;
  int64_t v13 = v3 | (v11 << 8) | (v12 << 16);
  uint64_t v9 = v1[3];
LABEL_23:
  LODWORD(v1) = v13 | (v9 << 24);
  uint64_t v14 = *((unsigned __int8 *)v0 + 16);
  unint64_t v15 = (v14 & 1) != 0 || v14 == 2;
  unint64_t v16 = bswap32(v1);
  if (v15) {
    LODWORD(v1) = v16;
  }
  return v1 | ((unint64_t)v4 << 32);
}

  __break(1u);
  return result;
}

    uint64_t v27 = *(void *)(v22 + 56) + 24 * v8;
    outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v27, *(void *)(v27 + 8), *(_BYTE *)(v27 + 16));
    *(void *)uint64_t v27 = v11;
    *(void *)(v27 + 8) = v10;
    *(_BYTE *)(v27 + 16) = v9;
LABEL_62:
    *(void *)(v12 + 16) = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of _XMLPlistEncodingFormat.Reference(v12, v26, 7);
    outlined consume of _XMLPlistEncodingFormat.Reference(v11, v10, v9);
    swift_bridgeObjectRelease();
    outlined consume of _XMLPlistEncodingFormat.Reference(v11, v10, v9);
    outlined consume of _XMLPlistEncodingFormat.Reference(v12, v26, 7);
    goto LABEL_63;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v89)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          unint64_t v22 = v90;
          if (!v90)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_23;
          }

          uint64_t result = specialized Rope._Node._innerRemovePrefix(descending:into:)(result, a2);
          uint64_t v6 = v36;
          if (v9 >= (uint64_t)v36)
          {
            swift_unknownObjectRelease();
            return swift_unknownObjectRelease();
          }

          uint64_t v12 = v34;
          if (!*(_BYTE *)(v34 + 18))
          {
            uint64_t v33 = v9;
            break;
          }
        }
      }

      uint64_t v20 = specialized closure #2 in Rope.builder<A>(splittingAt:in:)(v12 + 16, (void *)(v12 + 24), &v33);
      unint64_t v22 = v21;
      uint64_t v23 = v35;
      swift_unknownObjectRetain();
      uint64_t result = specialized Rope._Node._leafRemovePrefix(returning:into:)(v20, a2, v12, v23, v6);
      if (v22 < 0 || (int64_t v26 = result - v22, result < v22))
      {
        __break(1u);
LABEL_38:
        __break(1u);
        return result;
      }

      uint64_t v27 = v24;
      uint64_t v28 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope.Builder._insertAfterTip(_:)(v26, v27, v28);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    return swift_unknownObjectRelease();
  }

  uint64_t v12 = a4;
  swift_unknownObjectRetain();
  uint64_t v32 = 0LL;
  swift_unknownObjectRetain();
  MEMORY[0x186E20E78](&v32, 8LL);
  uint64_t v5 = v32;
  uint64_t v9 = *(void *)(a2 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_36:
  }
    uint64_t v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v9 + 16) + 1LL,  1,  (void *)v9);
  uint64_t v30 = *(void *)(v9 + 16);
  uint64_t v29 = *(void *)(v9 + 24);
  if (v30 >= v29 >> 1) {
    uint64_t v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v29 > 1),  v30 + 1,  1,  (void *)v9);
  }
  *(void *)(v9 + 16) = v30 + 1;
  uint64_t v31 = (void *)(v9 + 32 * v30);
  v31[4] = a3;
  v31[5] = v12;
  v31[6] = v6;
  v31[7] = v5;
  uint64_t result = swift_unknownObjectRelease_n();
  *(void *)(a2 + 80) = v9;
  return result;
}

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Morphology._CustomPronoun>);
    uint64_t v33 = static _DictionaryStorage.copy(original:)();
    unint64_t v17 = v33;
    if (*(void *)(v9 + 16))
    {
      uint64_t result = (char *)(v33 + 64);
      __srca = (char *)(v9 + 64);
      char v34 = (unint64_t)((1LL << *(_BYTE *)(v17 + 32)) + 63) >> 6;
      if (v17 != v9 || result >= &__srca[8 * v34]) {
        uint64_t result = (char *)memmove(result, __srca, 8 * v34);
      }
      unint64_t v35 = 0LL;
      *(void *)(v17 + 16) = *(void *)(v9 + 16);
      BOOL v36 = 1LL << *(_BYTE *)(v9 + 32);
      uint64_t v37 = -1LL;
      if (v36 < 64) {
        uint64_t v37 = ~(-1LL << v36);
      }
      uint64_t v38 = v37 & *(void *)(v9 + 64);
      uint64_t v92 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          uint64_t v96 = (v38 - 1) & v38;
          uint64_t v98 = v35;
          unint64_t v39 = __clz(__rbit64(v38)) | (v35 << 6);
        }

        else
        {
          id v54 = v35 + 1;
          if (__OFADD__(v35, 1LL)) {
            goto LABEL_81;
          }
          if (v54 >= v92) {
            break;
          }
          id v55 = *(void *)&__srca[8 * v54];
          char v56 = v35 + 1;
          if (!v55)
          {
            char v56 = v35 + 2;
            if (v35 + 2 >= v92) {
              break;
            }
            id v55 = *(void *)&__srca[8 * v56];
            if (!v55)
            {
              char v56 = v35 + 3;
              if (v35 + 3 >= v92) {
                break;
              }
              id v55 = *(void *)&__srca[8 * v56];
              if (!v55)
              {
                char v56 = v35 + 4;
                if (v35 + 4 >= v92) {
                  break;
                }
                id v55 = *(void *)&__srca[8 * v56];
                if (!v55)
                {
                  char v56 = v35 + 5;
                  if (v35 + 5 >= v92) {
                    break;
                  }
                  id v55 = *(void *)&__srca[8 * v56];
                  if (!v55)
                  {
                    uint64_t v57 = v35 + 6;
                    if (v35 + 6 >= v92) {
                      break;
                    }
                    id v55 = *(void *)&__srca[8 * v57];
                    if (!v55)
                    {
                      while (1)
                      {
                        char v56 = v57 + 1;
                        if (__OFADD__(v57, 1LL)) {
                          goto LABEL_82;
                        }
                        if (v56 >= v92) {
                          goto LABEL_78;
                        }
                        id v55 = *(void *)&__srca[8 * v56];
                        ++v57;
                        if (v55) {
                          goto LABEL_47;
                        }
                      }
                    }

                    char v56 = v35 + 6;
                  }
                }
              }
            }
          }

  char v56 = type metadata accessor for Array();
  MEMORY[0x186E20D4C](MEMORY[0x189618458], v56);
  MEMORY[0x186E20D4C](MEMORY[0x189618490], v56);
  uint64_t v57 = v62;
  RangeReplaceableCollection<>.removeLast()();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v57, v35);
  swift_release();
  return swift_release();
}

    outlined destroy of Any?( (uint64_t)&v23,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
    return 0LL;
  }

  outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v23,  (uint64_t)v22,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (!*((void *)&v29 + 1))
  {
    outlined destroy of Any?( (uint64_t)&v33,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?( (uint64_t)&v38,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v22);
    goto LABEL_20;
  }

  v20[2] = v30;
  v20[3] = v31;
  unint64_t v21 = v32;
  v20[0] = v28;
  v20[1] = v29;
  unint64_t v17 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)v22, (uint64_t)v20);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v20);
  outlined destroy of Any?( (uint64_t)&v33,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?( (uint64_t)&v38,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v22);
  outlined destroy of Any?( (uint64_t)&v23,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if ((v17 & 1) == 0) {
    return 0LL;
  }
LABEL_18:
  uint64_t v18 = 1LL;
  *a4 = 1;
  uint64_t v27 = 0LL;
  unint64_t v25 = 0u;
  int64_t v26 = 0u;
  uint64_t v23 = 0u;
  uint64_t v24 = 0u;
  swift_bridgeObjectRetain();
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v23, v11, v10);
  swift_bridgeObjectRelease();
  *a5 = a6;
  return v18;
}

    unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v26 > 1),  v24,  1,  v25);
    goto LABEL_16;
  }

  uint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
  unint64_t v10 = *(void *)(v1 + 64);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
  }
  uint64_t v12 = v9[2];
  uint64_t v11 = v9[3];
  if (v12 >= v11 >> 1) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
  }
  char v49 = &type metadata for _CodingKey;
  uint64_t v50 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  int64_t v13 = swift_allocObject();
  *(void *)&unint64_t v48 = v13;
  *(void *)(v13 + 24) = 0LL;
  *(void *)(v13 + 32) = 0LL;
  *(void *)(v13 + 16) = v10;
  *(_BYTE *)(v13 + 40) = 2;
  v9[2] = v12 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v48, (uint64_t)&v9[5 * v12 + 4]);
  uint64_t v14 = type metadata accessor for DecodingError();
  swift_allocError();
  unint64_t v16 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *unint64_t v16 = v4;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
  swift_willThrow();
  return v1;
}

    if (v9 != 7)
    {
      if (v9 < 0)
      {
        LOBYTE(v14) = 0;
        goto LABEL_24;
      }

      goto LABEL_23;
    }

    if (v9 != 15)
    {
      if (v9 < 0)
      {
        LOWORD(v14) = 0;
        goto LABEL_24;
      }

      goto LABEL_23;
    }

    if (v9 != 31)
    {
      if (v9 < 0)
      {
        uint64_t v14 = 0;
        goto LABEL_24;
      }

      goto LABEL_23;
    }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    __break(1u);
LABEL_21:
    __break(1u);
  }

  return result;
}

  v1 = (char *)dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(uint64_t, uint64_t))v41)(v36, v0);
  v16(v35, *(void *)(v8 - 128) + *(int *)(v23 + 36), v0);
  char v53 = dispatch thunk of static BinaryInteger.isSigned.getter();
  id v54 = *(char **)(v8 - 296);
  v16(v54, (uint64_t)v35, v0);
  if ((v53 & 1) == 0)
  {
    ((void (*)(char *, uint64_t))v41)(v54, v0);
    char v56 = *(char **)(v8 - 200);
    goto LABEL_27;
  }

  id v55 = dispatch thunk of BinaryInteger.bitWidth.getter();
  ((void (*)(char *, uint64_t))v41)(v54, v0);
  uint64_t v89 = v55 <= 64;
  char v56 = *(char **)(v8 - 200);
  if (v89) {
    goto LABEL_27;
  }
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v8 - 352);
  v16((char *)v37, (uint64_t)v35, v0);
  *(void *)(v8 - 96) = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64) {
      goto LABEL_55;
    }
    uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter();
    v33((uint64_t)v37, v0);
    if (v57 >= *(void *)(v8 - 96)) {
      goto LABEL_27;
    }
    goto LABEL_67;
  }

  uint64_t v80 = dispatch thunk of static BinaryInteger.isSigned.getter();
  id v81 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v80 & 1) != 0)
  {
    if (v81 > 64)
    {
      id v82 = *(void *)(v8 - 320);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      id v83 = dispatch thunk of static Comparable.< infix(_:_:)();
      v33(v82, v0);
      v33((uint64_t)v37, v0);
      unint64_t v35 = *(char **)(v8 - 184);
      if ((v83 & 1) == 0) {
        goto LABEL_27;
      }
      goto LABEL_67;
    }

    uint64_t v96 = *(void *)(v8 - 368);
    uint64_t v97 = swift_getAssociatedConformanceWitness();
    MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v96, v97);
    uint64_t v98 = *(void *)(v8 - 320);
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    char v99 = *(void *)(v8 - 352);
    *(_DWORD *)(v8 - 208) = dispatch thunk of static Comparable.< infix(_:_:)();
    *(void *)(v8 - 136) = v33;
    v33(v98, v0);
    unint64_t v10 = *(void *)(v8 - 392);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 272))(v10, v99, v0);
    if ((*(_DWORD *)(v8 - 208) & 1) != 0)
    {
LABEL_72:
      (*(void (**)(uint64_t, uint64_t))(v8 - 136))(v10, v0);
      __break(1u);
      JUMPOUT(0x1834538E0LL);
    }

    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v8 - 96);
    char v100 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 - 136))(v10, v0);
    uint64_t v89 = v100 < (uint64_t)v37;
  }

  else
  {
    if (v81 >= 64)
    {
LABEL_68:
      v33((uint64_t)v37, v0);
      unint64_t v35 = *(char **)(v8 - 184);
      goto LABEL_27;
    }

    uint64_t v88 = dispatch thunk of BinaryInteger._lowWord.getter();
    v33((uint64_t)v37, v0);
    uint64_t v89 = v88 < *(void *)(v8 - 96);
  }

  unint64_t v35 = *(char **)(v8 - 184);
  if (v89)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }

    __break(1u);
  }

  uint64_t v9 = 0LL;
  uint64_t v8 = 0LL;
  LOBYTE(v2) = 0;
LABEL_14:
  memset(__dst, 0, sizeof(__dst));
  uint64_t v12 = v2;
  if (v4 && v9 != v8) {
    memcpy(__dst, v8, v9 - v8);
  }
  uint64_t v3 = *(void *)__dst;
  swift_release();
  return v3;
}

  unint64_t v39 = dispatch thunk of BinaryInteger._lowWord.getter();
  v8(v31, v1);
  v15(v34, v29 + *(int *)(*(void *)(v7 - 144) + 36LL), v1);
  uint64_t v31 = dispatch thunk of static BinaryInteger.isSigned.getter();
  char v56 = *(void *)(v7 - 304);
  v15(v56, v34, v1);
  if ((v31 & 1) == 0)
  {
    v8(v56, v1);
    goto LABEL_26;
  }

  uint64_t v31 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v8(v56, v1);
  if (v31 <= 64) {
    goto LABEL_26;
  }
  uint64_t v31 = *(void *)(v7 - 360);
  v15(v31, v34, v1);
  *(void *)(v7 - 96) = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64) {
      goto LABEL_55;
    }
    uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter();
    char v58 = v31;
    uint64_t v59 = v1;
    goto LABEL_60;
  }

  id v81 = dispatch thunk of static BinaryInteger.isSigned.getter();
  id v82 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v81 & 1) == 0)
  {
    if (v82 >= 64)
    {
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
      v8(v31, v1);
      goto LABEL_26;
    }

    uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter();
    char v58 = v31;
    uint64_t v59 = v1;
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
LABEL_60:
    v8(v58, v59);
    if (v57 >= *(void *)(v7 - 96)) {
      goto LABEL_26;
    }
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }

  if (v82 <= 64)
  {
    uint64_t v98 = *(void *)(v7 - 376);
    char v99 = swift_getAssociatedConformanceWitness();
    MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v98, v99);
    char v100 = *(void *)(v7 - 336);
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    char v101 = *(void *)(v7 - 360);
    *(_DWORD *)(v7 - 192) = dispatch thunk of static Comparable.< infix(_:_:)();
    char v102 = v100;
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
    v8(v102, v1);
    uint64_t v9 = *(void *)(v7 - 400);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 280))(v9, v101, v1);
    if ((*(_DWORD *)(v7 - 192) & 1) != 0) {
      goto LABEL_72;
    }
    *(void *)(v7 - 192) = *(void *)(v7 - 96);
    uint64_t v31 = dispatch thunk of BinaryInteger._lowWord.getter();
    v8(v9, v1);
    if (v31 < *(void *)(v7 - 192)) {
      goto LABEL_61;
    }
    goto LABEL_26;
  }

  while (1)
  {
LABEL_55:
    char v87 = *(void *)(v7 - 336);
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v88 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v89 = v87;
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
    v8(v89, v1);
    v8(v31, v1);
    if ((v88 & 1) != 0) {
      goto LABEL_61;
    }
LABEL_26:
    char v60 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v15((uint64_t)v35, v34, v1);
    if (v60 >= 65)
    {
      v8((uint64_t)v35, v1);
      goto LABEL_28;
    }

    id v68 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v8((uint64_t)v35, v1);
    if (v68 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      break;
    }
LABEL_28:
    unint64_t v35 = *(void (**)(uint64_t, uint64_t))(v7 - 200);
    v15((uint64_t)v35, v34, v1);
    *(void *)(v7 - 96) = 0x7FFFFFFFFFFFFFFFLL;
    int v61 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v61 & 1) != 0)
    {
      if (v62 > 64)
      {
        id v63 = *(void *)(v7 - 336);
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        id v64 = *(void *)(v7 - 200);
        uint64_t v65 = dispatch thunk of static Comparable.< infix(_:_:)();
        id v66 = v63;
        unint64_t v35 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
        v35(v66, v1);
        uint64_t v67 = v64;
        uint64_t v8 = v35;
        v35(v67, v1);
        if ((v65 & 1) == 0) {
          break;
        }
        goto LABEL_40;
      }

  uint64_t v33 = v43;
  goto LABEL_21;
}

    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }

  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }

    goto LABEL_21;
  }

  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
  {
LABEL_22:
    __break(1u);
    return;
  }

    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }

  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSApplicationDirectory, 2uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }

    goto LABEL_21;
  }

  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
  {
LABEL_22:
    __break(1u);
    return;
  }

    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }

  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }

    goto LABEL_21;
  }

  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
  {
LABEL_22:
    __break(1u);
    return;
  }

    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }

  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSUserDirectory, 2uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }

    goto LABEL_21;
  }

  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
  {
LABEL_22:
    __break(1u);
    return;
  }

    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }

  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }

    goto LABEL_21;
  }

  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
  {
LABEL_22:
    __break(1u);
    return;
  }

    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }

  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSDesktopDirectory, 1uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }

    goto LABEL_21;
  }

  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
  {
LABEL_22:
    __break(1u);
    return;
  }

    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }

  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSApplicationSupportDirectory, 1uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }

    goto LABEL_21;
  }

  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
  {
LABEL_22:
    __break(1u);
    return;
  }

    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }

  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSDownloadsDirectory, 1uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }

    goto LABEL_21;
  }

  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
  {
LABEL_22:
    __break(1u);
    return;
  }

    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }

  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSMoviesDirectory, 1uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }

    goto LABEL_21;
  }

  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
  {
LABEL_22:
    __break(1u);
    return;
  }

    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }

  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSMusicDirectory, 1uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }

    goto LABEL_21;
  }

  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
  {
LABEL_22:
    __break(1u);
    return;
  }

    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }

  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSPicturesDirectory, 1uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }

    goto LABEL_21;
  }

  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
  {
LABEL_22:
    __break(1u);
    return;
  }

    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }

  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSSharedPublicDirectory, 1uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }

    goto LABEL_21;
  }

  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
  {
LABEL_22:
    __break(1u);
    return;
  }

    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }

  uint64_t v6 = NSSearchPathForDirectoriesInDomains(NSTrashDirectory, 1uLL, 1);
  if (v6)
  {
    uint64_t v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }

    goto LABEL_21;
  }

  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  if (!*(void *)(MEMORY[0x18961AFE8] + 16LL))
  {
LABEL_22:
    __break(1u);
    return;
  }

    if (v215 != v37) {
      goto LABEL_203;
    }
    v198 = v41;
    v187 = v37;
    v190 = v34;
    v195 = v32;
    *(void *)&v200 = v30;
    char v42 = v216;
    uint64_t v43 = v217;
    if (v217)
    {
      uint64_t v44 = (void *)(v217 + 24 * ((v216 >> ((4 * *(_BYTE *)(v217 + 18) + 8) & 0x3C)) & 0xF));
      char v46 = v44[3];
      uint64_t v45 = v44[4];
      uint64_t v47 = v44[5];
      unint64_t v48 = v218 + 1;
      char v49 = __OFADD__(v218, 1LL);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v49) {
        goto LABEL_204;
      }
      v218 = v48;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v50 = v46;
      v248 = v45;
      v192 = v47;
    }

    else
    {
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v42, v35);
      char v52 = v51;
      id v54 = v53;
      swift_unknownObjectRelease();
      if (__OFADD__(v218, 1LL)) {
        goto LABEL_204;
      }
      v192 = v54;
      v248 = v52;
      ++v218;
      swift_unknownObjectRetain();
      uint64_t v50 = specialized Rope._Node.subscript.getter(v42, v35);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (__OFADD__(v198, v50))
    {
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
      goto LABEL_207;
    }

    v219 = v198 + v50;
    if (!v35) {
      goto LABEL_213;
    }
    id v55 = ((-15LL << ((4 * *(_BYTE *)(v35 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v35 + 18) | ((unint64_t)*(unsigned __int16 *)(v35 + 16) << ((4 * *(_BYTE *)(v35 + 18) + 8) & 0x3C));
    swift_unknownObjectRetain();
    if (v42 >= v55) {
      goto LABEL_213;
    }
    char v56 = v199;
    uint64_t v57 = v200;
    if (v43)
    {
      char v58 = (4 * *(_BYTE *)(v43 + 18) + 8) & 0x3C;
      uint64_t v59 = ((v42 >> v58) & 0xF) + 1;
      if (v59 < *(unsigned __int16 *)(v43 + 16))
      {
        v216 = (v59 << v58) | ((-15LL << v58) - 1) & v42;
        swift_unknownObjectRelease_n();
        char v60 = v191;
        goto LABEL_43;
      }
    }

    int v61 = *(unsigned __int8 *)(v35 + 18);
    uint64_t v62 = (4 * v61 + 8) & 0x3C;
    *(void *)&v204 = (v42 >> v62) & 0xF;
    if (v61)
    {
      swift_unknownObjectRetain();
      id v63 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v35 + 24, (uint64_t *)&v204, (uint64_t)v183, v35, v61);
      swift_unknownObjectRelease();
      char v60 = v191;
      if ((v63 & 1) != 0)
      {
        swift_unknownObjectRelease_n();
        goto LABEL_43;
      }

      uint64_t v65 = *(unsigned __int8 *)(v35 + 18);
    }

    else
    {
      id v64 = ((v42 >> v62) & 0xF) + 1;
      char v60 = v191;
      if (v64 < *(unsigned __int16 *)(v35 + 16))
      {
        v216 = (v64 << v62) | ((-15LL << v62) - 1) & v42;
        swift_unknownObjectRelease_n();
        v217 = v35;
        goto LABEL_43;
      }

      uint64_t v65 = 0;
    }

    id v66 = *(unsigned __int16 *)(v35 + 16);
    uint64_t v67 = *(_BYTE *)(v35 + 18);
    swift_unknownObjectRelease_n();
    v215 = v187;
    v216 = ((-15LL << ((4 * v67 + 8) & 0x3C)) - 1) & v65 | (unint64_t)(v66 << ((4 * v67 + 8) & 0x3C));
    v217 = 0LL;
    uint64_t v57 = v200;
LABEL_43:
    id v68 = v195;
    id v69 = v60[1];
    v240 = *v60;
    v241 = v69;
    v242 = v60[2];
    BigString.utf8.getter();
    uint64_t v70 = v57;
    uint64_t v71 = v190;
    int v72 = (unint64_t)v56;
    int v73 = BigString.UTF8View.index(_:offsetBy:)();
    int v74 = v68;
    int v76 = v75;
    uint64_t v78 = v77;
    uint64_t v80 = v79;
    outlined release of Locale((uint64_t)&v224);
    if (v73 >> 10 < v72 >> 10) {
      goto LABEL_206;
    }
    v229 = v72;
    v230 = v70;
    v231 = v74;
    v232 = v71;
    v185 = (uint64_t *)v73;
    v186 = v76;
    v233 = v73;
    v234 = v76;
    v190 = v78;
    v235 = v78;
    v187 = v80;
    v236 = v80;
    id v81 = v191[1];
    v237 = *v191;
    v238 = v81;
    v239 = v191[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v225);
    MEMORY[0x186E1B6B8](&v226);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v222, v223);
    id v82 = v201;
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    v201 = v82;
    if (v82)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_194;
    }

    swift_bridgeObjectRelease();
    id v83 = v248;
    id v84 = v196;
    if (!*(void *)(v248 + 16)) {
      goto LABEL_52;
    }
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v220,  (uint64_t)&v204,  &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
    if (!*((void *)&v205 + 1))
    {
      outlined destroy of Any?( (uint64_t)&v204,  &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
LABEL_52:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v222, v223);
      dispatch thunk of UnkeyedEncodingContainer.superEncoder()();
      __swift_project_boxed_opaque_existential_1(v210, v211);
      lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();
      dispatch thunk of Encoder.container<A>(keyedBy:)();
      uint64_t v91 = v83 + 64;
      uint64_t v92 = 1LL << *(_BYTE *)(v83 + 32);
      if (v92 < 64) {
        uint64_t v93 = ~(-1LL << v92);
      }
      else {
        uint64_t v93 = -1LL;
      }
      uint64_t v94 = v93 & *(void *)(v83 + 64);
      *(void *)&v200 = (unint64_t)(v92 + 63) >> 6;
      swift_bridgeObjectRetain();
      uint64_t v95 = 0LL;
      v195 = v83 + 64;
      while (1)
      {
        while (v94)
        {
          uint64_t v96 = __clz(__rbit64(v94));
          v94 &= v94 - 1;
          uint64_t v97 = v96 | (v95 << 6);
          if (*(void *)(v84 + 16)) {
            goto LABEL_75;
          }
        }

        uint64_t v98 = __OFADD__(v95++, 1LL);
        if (v98)
        {
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
          goto LABEL_205;
        }

        char v99 = *(void *)(v91 + 8 * v95);
        if (!v99)
        {
          char v100 = v95 + 1;
          char v99 = *(void *)(v91 + 8 * v100);
          if (!v99)
          {
            char v100 = v95 + 2;
            char v99 = *(void *)(v91 + 8 * v100);
            if (!v99)
            {
              char v100 = v95 + 3;
              char v99 = *(void *)(v91 + 8 * v100);
              if (!v99)
              {
                char v100 = v95 + 4;
                char v99 = *(void *)(v91 + 8 * v100);
                if (!v99)
                {
                  char v100 = v95 + 5;
                  if (v95 + 5 >= (uint64_t)v200)
                  {
LABEL_96:
                    swift_release();
                    (*(void (**)(char *, uint64_t))(v189 + 8))(v194, v197);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    goto LABEL_154;
                  }

                  char v99 = *(void *)(v91 + 8 * v100);
                  if (!v99)
                  {
                    while (1)
                    {
                      uint64_t v95 = v100 + 1;
                      if (__OFADD__(v100, 1LL)) {
                        break;
                      }
                      char v99 = *(void *)(v91 + 8 * v95);
                      ++v100;
                      if (v99) {
                        goto LABEL_74;
                      }
                    }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v44)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          uint64_t v12 = v45;
          if (!v45) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v42)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v11 = v43;
    if (!v43) {
      goto LABEL_16;
    }
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v60, v11);
    swift_bridgeObjectRelease();
    uint64_t v12 = v44;
    if (!v44) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v47)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          unint64_t v15 = v48;
          if (!v48) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v14 = v46;
    if (!v46) {
      goto LABEL_16;
    }
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v14);
    swift_bridgeObjectRelease();
    unint64_t v15 = v47;
    if (!v47) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v14 = v46;
    if (!v46) {
      goto LABEL_16;
    }
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v14);
    swift_bridgeObjectRelease();
    unint64_t v15 = v47;
    if (!v47) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

          if ([v5 grammaticalCase]) {
            goto LABEL_22;
          }
          goto LABEL_21;
        }

        goto LABEL_10;
      }

      objc_msgSend(v5, "setGrammaticalGender:", objc_msgSend(a2, "grammaticalGender"));
    }

    if (![a2 partOfSpeech]) {
      goto LABEL_12;
    }
    if ((a3 & 1) != 0)
    {
LABEL_11:
      objc_msgSend(v5, "setPartOfSpeech:", objc_msgSend(a2, "partOfSpeech"));
      goto LABEL_12;
    }

    uint64_t v18 = (void *)MEMORY[0x189603F70];
    char v19 = (const __CFString *)*MEMORY[0x189603B38];
    uint64_t v20 = (NSString *)@"*** memory allocation failed";
    goto LABEL_25;
  }

    int64_t v13 = +[_NSAttributedStringGrammarInflection _thirdPartyPreferencesDomain]( &OBJC_CLASS____NSAttributedStringGrammarInflection,  "_thirdPartyPreferencesDomain");
    uint64_t v6 = (id)CFPreferencesCopyValue( @"AppleUserMorphology",  (CFStringRef)v13,  (CFStringRef)*MEMORY[0x189605198],  (CFStringRef)*MEMORY[0x189605178]);
    if (v6)
    {
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      uint64_t v14 = (os_log_s *)_NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v20 = (uint64_t)v6;
        unint64_t v21 = 2082;
        unint64_t v22 = "true";
        _os_log_impl( &dword_182EB1000,  v14,  OS_LOG_TYPE_INFO,  "User morphology preferences value read from the shared domain: %@ (is present? %{public}s)",  buf,  0x16u);
      }
    }

    goto LABEL_25;
  }

          uint64_t result = 0LL;
LABEL_24:
          uint64_t v24 = v17 & (a4 << 58 >> 63);
          if (result) {
            uint64_t v24 = result;
          }
          *a7 = v21;
          a7[1] = v24;
          a7[2] = 0LL;
          a7[3] = v13;
          a7[4] = v19;
          goto LABEL_27;
        }

        unint64_t v22 = [(id)v17 count];
        char v19 = (void *)[objc_alloc(MEMORY[0x189603FB8]) initWithLength:8 * v22];
        objc_msgSend((id)v17, "getObjects:range:", objc_msgSend(v19, "mutableBytes"), 0, v22);
      }

      else
      {
        char v19 = 0LL;
      }

      uint64_t v18 = 1;
    }

    unint64_t v21 = *a5;
    if ((a4 & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  if ((a4 & 2) != 0)
  {
    uint64_t result = [a1 valueForKeyPath:a2];
    if (!result) {
      uint64_t result = [MEMORY[0x189603FE8] null];
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *a7 = 1LL;
  a7[1] = result;
  a7[3] = 0LL;
  a7[4] = 0LL;
  a7[2] = 0LL;
LABEL_27:
  *a6 = 0;
  return result;
}

  uint64_t v27 = 0LL;
LABEL_24:
  uint64_t result = (__n128)a6[1];
  *(_OWORD *)a7 = *a6;
  *(__n128 *)(a7 + 16) = result;
  uint64_t v28 = *((void *)a6 + 4);
  *(void *)(a7 + 24) = v12;
  *(void *)(a7 + 32) = v28;
  *(void *)(a7 + 16) = v27;
  return result;
}

  unint64_t v16 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"alwaysShowsDecimalSeparator");
  if (v16) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605020], v16);
  }
  unint64_t v17 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"decimalSeparator");
  if (v17) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605048], v17);
  }
  uint64_t v18 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"currencyDecimalSeparator");
  if (v18) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605030], v18);
  }
  char v19 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"usesGroupingSeparator");
  if (v19) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605130], v19);
  }
  uint64_t v20 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"zeroSymbol");
  if (v20) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605148], v20);
  }
  unint64_t v21 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"notANumberSymbol");
  if (v21) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x1896050C8], v21);
  }
  unint64_t v22 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"groupingSeparator");
  if (v22) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605060], v22);
  }
  uint64_t v23 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"positivePrefix");
  if (v23) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605108], v23);
  }
  uint64_t v24 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"positiveSuffix");
  if (v24) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605110], v24);
  }
  unint64_t v25 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"negativePrefix");
  if (v25) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x1896050D0], v25);
  }
  int64_t v26 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"negativeSuffix");
  if (v26) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x1896050D8], v26);
  }
  uint64_t v27 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"currencyCode");
  if (v27) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605028], v27);
  }
  uint64_t v28 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"currencySymbol");
  if (v28) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605040], v28);
  }
  uint64_t v29 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"internationalCurrencySymbol");
  if (v29) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605070], v29);
  }
  uint64_t v30 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"percentSymbol");
  if (v30) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x1896050F8], v30);
  }
  uint64_t v31 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"perMillSymbol");
  if (v31) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x1896050F0], v31);
  }
  uint64_t v32 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"minusSign");
  if (v32) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x1896050B8], v32);
  }
  uint64_t v33 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"plusSign");
  if (v33) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605100], v33);
  }
  char v34 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"exponentSymbol");
  if (v34) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605050], v34);
  }
  unint64_t v35 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"groupingSize");
  if (v35) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605068], v35);
  }
  BOOL v36 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"secondaryGroupingSize");
  if (v36) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605128], v36);
  }
  uint64_t v37 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"formatWidth");
  if (v37) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605058], v37);
  }
  uint64_t v38 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"multiplier");
  if (v38) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x1896050C0], v38);
  }
  unint64_t v39 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"paddingCharacter");
  if (v39) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x1896050E0], v39);
  }
  int64_t v40 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"paddingPosition");
  if (v40) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x1896050E8], v40);
  }
  uint64_t v41 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"roundingMode");
  if (v41) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605120], v41);
  }
  char v42 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"roundingIncrement");
  if (v42) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605118], v42);
  }
  uint64_t v43 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"minimumIntegerDigits");
  if (v43) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x1896050A8], v43);
  }
  uint64_t v44 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"maximumIntegerDigits");
  if (v44) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605088], v44);
  }
  uint64_t v45 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"minimumFractionDigits");
  if (v45) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605098], v45);
  }
  char v46 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"maximumFractionDigits");
  if (v46) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605080], v46);
  }
  uint64_t v47 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"currencyGroupingSeparator");
  if (v47) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605038], v47);
  }
  unint64_t v48 = (const void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"lenient");
  if (v48) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605078], v48);
  }
  char v49 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"usesSignificantDigits");
  if (v49) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605138], v49);
  }
  uint64_t v50 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"minimumSignificantDigits");
  if (v50) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x1896050B0], v50);
  }
  char v51 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"maximumSignificantDigits");
  if (v51) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605090], v51);
  }
  char v52 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"usesCharacterDirection");
  if (v52) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x189605140], v52);
  }
  char v53 = (void *)-[NSMutableDictionary objectForKey:](self->_attributes, "objectForKey:", @"formattingContext");
  if (v53)
  {
    id v54 = v53;
  }

  id v55 = (const void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"minimumGroupingDigits");
  if (v55) {
    CFNumberFormatterSetProperty(self->_formatter, (CFNumberFormatterKey)*MEMORY[0x1896050A0], v55);
  }
}

  uint64_t v12 = (void *)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"maximumSignificantDigits");
  if (!v12 || [v12 integerValue] != v4)
  {
    int64_t v13 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v4);
    -[NSMutableDictionary setValue:forKey:]( self->_attributes,  "setValue:forKey:",  v13,  @"maximumSignificantDigits");
    ++self->_cacheGeneration;
    if (v9)
    {
      uint64_t v14 = self->_formatter;
      if (v14) {
        CFNumberFormatterSetProperty(v14, v9, v13);
      }
    }
  }

  ((void (*)(void *, uint64_t))v22)(v21, v10);
  +[__NSOperationInternalObserver _observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:]( &OBJC_CLASS_____NSOperationInternalObserver,  "_observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:",  @"isReady",  a3,  0LL,  0LL,  0LL,  0LL,  0LL);
LABEL_21:
}

  ((void (*)(void *, uint64_t))v22)(v21, v10);
  +[__NSOperationInternalObserver _observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:]( &OBJC_CLASS_____NSOperationInternalObserver,  "_observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:",  @"isReady",  self,  0LL,  0LL,  0LL,  0LL,  0LL);
LABEL_21:
}

  ((void (*)(uint64_t *, uint64_t))v20)(&v18, v7);
  +[__NSOperationInternalObserver _observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:]( &OBJC_CLASS_____NSOperationInternalObserver,  "_observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:",  @"isReady",  self,  0LL,  0LL,  0LL,  0LL,  0LL,  v18,  v19);
LABEL_21:
}

  if (v9 != (id *)v19) {
    free(v9);
  }
  return v8;
}

  uint64_t v7 = -[NSString substringWithRange:](self, "substringWithRange:", v13, v17);
  return +[NSURLKeyValuePair pairWithKey:value:](&OBJC_CLASS___NSURLKeyValuePair, "pairWithKey:value:", v6, v7);
}

      unint64_t v10 = -[NSNumber unsignedIntegerValue](self, "unsignedIntegerValue");
      if ((v10 & 0x8000000000000000LL) == 0) {
        return 2654435761u * v10;
      }
      uint64_t v11 = floor((double)v10 + 0.5);
      uint64_t v12 = ((double)v10 - v11) * 1.84467441e19;
      uint64_t result = 2654435761u * (unint64_t)fmod(v11, 1.84467441e19);
      goto LABEL_26;
    }

    if (((1LL << (v3 - 83)) & 0x102410000LL) == 0)
    {
      if (v3 == 83) {
        goto LABEL_20;
      }
      if (v4 == 30)
      {
        uint64_t v5 = -[NSNumber longLongValue](self, "longLongValue");
        uint64_t v6 = -(double)v5;
        if (v5 >= 0) {
          uint64_t v6 = (double)v5;
        }
        goto LABEL_25;
      }

      goto LABEL_17;
    }
  }

  uint64_t v7 = -[NSNumber integerValue](self, "integerValue");
  if (v7 >= 0) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = -v7;
  }
  return 2654435761LL * v8;
}

          uint64_t v14 = 0LL;
          return [v10 parser:v9 foundUnparsedEntityDeclarationWithName:Value publicID:v12 systemID:v13 notationName:v14];
        }
      }

      else
      {
        Value = 0LL;
        if (a3) {
          goto LABEL_8;
        }
      }

      uint64_t v12 = 0LL;
      if (a4) {
        goto LABEL_11;
      }
      goto LABEL_19;
    }
  }

  return result;
}

  qword_18C5D6210 = (uint64_t)"Should not be possible to have a non supported type encoding! Please file a radar!";
  __break(1u);
}

  v11.receiver = self;
  v11.super_class = (Class)&OBJC_CLASS____NSInflectionRuleExplicit;
  uint64_t v9 = -[NSInflectionRule _init](&v11, sel__init);
  if (v9)
  {
    v9->_morphology = (NSMorphology *)[v8 copy];
    v9->_agreeWithConcept = v6;
    v9->_agreeWithArgument = v5;
    v9->_referentConcept = v7;
  }

  return v9;
}

    if (v16 <= v18 + v17) {
      unint64_t v22 = v16;
    }
    else {
      unint64_t v22 = 0LL;
    }
    uint64_t v18 = v18 + v17 - v22;
    if (!--v19) {
      return result;
    }
  }

  unint64_t v21 = a2;
LABEL_37:
  *a4 = v18;
  unint64_t v25 = *(void *)(a1 + 16);
  int64_t v26 = v21;
  if ((v25 & 0x18) != 0) {
    int64_t v26 = *(void *)(*(void *)(a1 + 40) + 8 * v18);
  }
  a4[3] = v26;
  if ((v25 & 4) != 0) {
    uint64_t v27 = *(void *)(*(void *)(a1 + 48) + 8 * v18);
  }
  else {
    uint64_t v27 = 0LL;
  }
  a4[4] = v27;
  a4[1] = v21;
  if ((v25 & 0x60) != 0)
  {
    uint64_t v28 = (v25 >> 5) & 3;
    if (!v28) {
      goto LABEL_55;
    }
    uint64_t v29 = *(void *)(*(void *)(a1 + 8 * v28 + 40) + 8 * v18);
  }

  else
  {
    uint64_t v29 = 0LL;
  }

  a4[2] = v29;
  if ((v25 & 0x380) != 0)
  {
    uint64_t v30 = (v25 >> 7) & 7;
    if (!v30) {
      goto LABEL_55;
    }
    uint64_t v31 = *(void *)(*(void *)(a1 + 8 * v30 + 40) + 8 * v18);
  }

  else
  {
    uint64_t v31 = 1LL;
  }

  a4[5] = v31;
  if ((v25 & 0x1C00) != 0)
  {
    uint64_t v32 = (v25 >> 10) & 7;
    if (!v32) {
      goto LABEL_55;
    }
    uint64_t v33 = *(void *)(*(void *)(a1 + 8 * v32 + 40) + 8 * v18);
  }

  else
  {
    uint64_t v33 = 1LL;
  }

  a4[6] = v33;
  return result;
}

    uint64_t v24 = v20 + v23 * v17;
    if (v16 <= v24) {
      v24 %= v16;
    }
    v23 *= v19;
    if (v16 <= v23) {
      v23 %= v16;
    }
    if (!--v21) {
      return result;
    }
  }

  unint64_t v25 = a2;
LABEL_38:
  *uint64_t v43 = v24;
  uint64_t v28 = *(void *)(v7 + 16);
  uint64_t v29 = v25;
  if ((v28 & 0x18) != 0) {
    uint64_t v29 = *(void *)(*(void *)(v7 + 40) + 8 * v24);
  }
  v43[3] = v29;
  if ((v28 & 4) != 0) {
    uint64_t v30 = *(void *)(*(void *)(v7 + 48) + 8 * v24);
  }
  else {
    uint64_t v30 = 0LL;
  }
  v43[4] = v30;
  v43[1] = v25;
  if ((v28 & 0x60) != 0)
  {
    uint64_t v31 = (v28 >> 5) & 3;
    if (!v31) {
      goto LABEL_56;
    }
    uint64_t v32 = *(void *)(*(void *)(v7 + 8 * v31 + 40) + 8 * v24);
  }

  else
  {
    uint64_t v32 = 0LL;
  }

  v43[2] = v32;
  if ((v28 & 0x380) != 0)
  {
    uint64_t v33 = (v28 >> 7) & 7;
    if (!v33) {
      goto LABEL_56;
    }
    char v34 = *(void *)(*(void *)(v7 + 8 * v33 + 40) + 8 * v24);
  }

  else
  {
    char v34 = 1LL;
  }

  v43[5] = v34;
  if ((v28 & 0x1C00) != 0)
  {
    unint64_t v35 = (v28 >> 10) & 7;
    if (!v35) {
      goto LABEL_56;
    }
    BOOL v36 = *(void *)(*(void *)(v7 + 8 * v35 + 40) + 8 * v24);
  }

  else
  {
    BOOL v36 = 1LL;
  }

  v43[6] = v36;
  return result;
}

    a1[3] = v4;
    return 1LL;
  }

  uint64_t v9 = v5 + 1;
  if (v4 > v9)
  {
    unint64_t v10 = *a1;
    while (*(_BYTE *)(v10 + v9 - 1) != 42 || *(_BYTE *)(v10 + v9) != 47)
    {
      a1[3] = v9++;
      if (v4 == v9) {
        goto LABEL_13;
      }
    }

    unint64_t v4 = v9 + 1;
    goto LABEL_20;
  }

      ++v7;
      uint64_t result = 1LL;
      if (v7 < v4 && ++v8 < v5) {
        continue;
      }
      return result;
    }
  }

  return result;
}

      if (*((_BYTE *)v19 + 24))
      {
        uint64_t v14 = (os_log_s *)_NSFCFSEventsLog();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v34) = 138477827;
          *(void *)((char *)&v34 + 4) = v5;
          _os_log_error_impl( &dword_182EB1000,  v14,  OS_LOG_TYPE_ERROR,  "Using fileReferenceURL for  FSEventStreamCreate() returned NULL. Path: %{private}@",  (uint8_t *)&v34,  0xCu);
        }

        CFURLClearResourcePropertyCache((CFURLRef)self->_url);
        unint64_t v15 = (NSURL *)-[NSURL copy](-[NSURL fileReferenceURL](self->_url, "fileReferenceURL"), "copy");
        self->_fileReferenceURL = v15;
        self->_formerPath = (NSString *)objc_msgSend(-[NSURL path](v15, "path"), "copy");
      }

      _Block_object_dispose(&buf, 8);
      _Block_object_dispose(&v18, 8);
      _Block_object_dispose(&v22, 8);
      _Block_object_dispose(&v26, 8);
      return;
    }

    uint64_t v9 = (os_log_s *)_NSFCFSEventsLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      unint64_t v10 = self->_url;
      LODWORD(buf) = 138477827;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_error_impl( &dword_182EB1000,  v9,  OS_LOG_TYPE_ERROR,  "No file watcher could be started. URL: %{private}@",  (uint8_t *)&buf,  0xCu);
    }
  }

    if ((data & 8) == 0)
    {
LABEL_22:
      if ((data & 6) != 0) {
        [*(id *)(*(void *)(a1 + 48) + 104) addContentsChange];
      }
      if ((data & 1) != 0) {
        [*(id *)(*(void *)(a1 + 48) + 104) addDeletion];
      }
      return;
    }

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v37 = v3;
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v15 << 6);
      goto LABEL_31;
    }

    int64_t v24 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v24 >= v12) {
      break;
    }
    unint64_t v25 = (void *)(v6 + 64);
    unint64_t v26 = *(void *)(v38 + 8 * v24);
    ++v15;
    if (!v26)
    {
      int64_t v15 = v24 + 1;
      if (v24 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v26 = *(void *)(v38 + 8 * v15);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v12)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v37;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        unint64_t v26 = *(void *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v15 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            unint64_t v26 = *(void *)(v38 + 8 * v15);
            ++v27;
            if (v26) {
              goto LABEL_30;
            }
          }
        }

        int64_t v15 = v27;
      }
    }

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  _OWORD v37[2];
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v36 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_41;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v35 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v34 = (unint64_t)(v9 + 63) >> 6;
  int64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      uint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }

    unint64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v18 >= v34) {
      break;
    }
    unint64_t v19 = (void *)(v6 + 64);
    uint64_t v20 = *(void *)(v35 + 8 * v18);
    ++v14;
    if (!v20)
    {
      uint64_t v14 = v18 + 1;
      if (v18 + 1 >= v34) {
        goto LABEL_34;
      }
      uint64_t v20 = *(void *)(v35 + 8 * v14);
      if (!v20)
      {
        unint64_t v21 = v18 + 2;
        if (v21 >= v34)
        {
LABEL_34:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }

        uint64_t v20 = *(void *)(v35 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            uint64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1LL)) {
              goto LABEL_43;
            }
            if (v14 >= v34) {
              goto LABEL_34;
            }
            uint64_t v20 = *(void *)(v35 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }

        uint64_t v14 = v21;
      }
    }

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v35 = (unint64_t)(v9 + 63) >> 6;
  int64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      uint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }

    unint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    int64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      uint64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      int64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        int64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            uint64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            int64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }

        uint64_t v14 = v25;
      }
    }

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  void *v37;
  __int128 v38;
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v7 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (*(void *)(v6 + 16))
  {
    uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
    uint64_t v37 = (void *)(v6 + 64);
    if (v10 < 64) {
      unint64_t v11 = ~(-1LL << v10);
    }
    else {
      unint64_t v11 = -1LL;
    }
    int64_t v12 = v11 & *(void *)(v6 + 64);
    uint64_t v36 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = v8 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0LL;
    while (1)
    {
      if (v12)
      {
        unint64_t v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v23 = v22 | (v15 << 6);
      }

      else
      {
        int64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }

        if (v24 >= v36) {
          goto LABEL_33;
        }
        unint64_t v25 = v37[v24];
        ++v15;
        if (!v25)
        {
          int64_t v15 = v24 + 1;
          if (v24 + 1 >= v36) {
            goto LABEL_33;
          }
          unint64_t v25 = v37[v15];
          if (!v25)
          {
            unint64_t v26 = v24 + 2;
            if (v26 >= v36)
            {
LABEL_33:
              swift_release();
              unint64_t v4 = v3;
              if ((v7 & 1) != 0)
              {
                uint64_t v35 = 1LL << *(_BYTE *)(v6 + 32);
                if (v35 >= 64) {
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  uint64_t *v37 = -1LL << v35;
                }
                *(void *)(v6 + 16) = 0LL;
              }

              break;
            }

            unint64_t v25 = v37[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v15 = v26 + 1;
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_40;
                }
                if (v15 >= v36) {
                  goto LABEL_33;
                }
                unint64_t v25 = v37[v15];
                ++v26;
                if (v25) {
                  goto LABEL_30;
                }
              }
            }

            int64_t v15 = v26;
          }
        }

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v36 = v3;
  uint64_t v37 = (unint64_t)(v9 + 63) >> 6;
  int64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      uint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }

    unint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    int64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      uint64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      int64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        int64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            uint64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            int64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }

        uint64_t v14 = v25;
      }
    }

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt64 v30;
  Swift::UInt64 v31;
  int v32;
  Swift::UInt v33;
  Swift::UInt v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  Swift::UInt v38;
  uint64_t v39;
  int *v40;
  char *v41;
  char *v42;
  int v43;
  Swift::UInt v44;
  Swift::UInt64 v45;
  char *v46;
  Swift::UInt v47;
  uint64_t v48;
  Swift::UInt8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  Swift::UInt v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  unint64_t v64;
  Swift::UInt v65;
  Swift::UInt v66;
  int64_t v67;
  unint64_t v68;
  int64_t v69;
  Swift::UInt v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int64_t v76;
  unint64_t v77;
  unint64_t v78;
  Swift::UInt v79;
  Swift::UInt v80;
  int64_t v81;
  unint64_t v82;
  int64_t v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  Swift::UInt v104;
  Swift::UInt v105;
  Swift::UInt8 v106;
  Swift::UInt8 v107;
  Swift::UInt8 v108;
  Swift::Int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char v113;
  unint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  int64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int64_t v134;
  char *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  char v156;
  char v157;
  char v158;
  _BYTE v159[144];
  _BYTE v160[144];
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  char v171[80];
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  __int128 v124 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v8);
  __int128 v127 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ICUCurrencyNumberFormatter.Signature(0LL);
  __int128 v128 = *(void *)(v10 - 8);
  __int128 v129 = v10;
  MEMORY[0x1895F8858](v10);
  int64_t v12 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  __int128 v130 = a2;
  uint64_t v14 = static _DictionaryStorage.resize(original:capacity:move:)();
  int64_t v15 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_164;
  }
  uint64_t v16 = 1LL << *(_BYTE *)(v13 + 32);
  unint64_t v17 = *(void *)(v13 + 64);
  unsigned __int8 v120 = (void *)(v13 + 64);
  if (v16 < 64) {
    unint64_t v18 = ~(-1LL << v16);
  }
  else {
    unint64_t v18 = -1LL;
  }
  unint64_t v19 = v18 & v17;
  uint64_t v118 = v3;
  uint64_t v119 = (unint64_t)(v16 + 63) >> 6;
  __int128 v126 = v12 + 16;
  uint64_t v20 = v14 + 64;
  swift_retain();
  unint64_t v21 = 0LL;
  unsigned __int8 v122 = v15;
  unsigned __int8 v123 = v13;
  unsigned __int8 v121 = v5;
  __int128 v125 = v6;
  v135 = v12;
  while (1)
  {
    if (v19)
    {
      uint64_t v133 = (v19 - 1) & v19;
      int64_t v24 = __clz(__rbit64(v19)) | (v21 << 6);
    }

    else
    {
      unint64_t v25 = v21 + 1;
      if (__OFADD__(v21, 1LL)) {
        goto LABEL_169;
      }
      if (v25 >= v119) {
        goto LABEL_159;
      }
      unint64_t v26 = v120[v25];
      ++v21;
      if (!v26)
      {
        unint64_t v21 = v25 + 1;
        if (v25 + 1 >= v119) {
          goto LABEL_159;
        }
        unint64_t v26 = v120[v21];
        if (!v26)
        {
          int64_t v27 = v25 + 2;
          if (v27 >= v119) {
            goto LABEL_159;
          }
          unint64_t v26 = v120[v27];
          if (!v26)
          {
            while (1)
            {
              unint64_t v21 = v27 + 1;
              if (__OFADD__(v27, 1LL)) {
                goto LABEL_170;
              }
              if (v21 >= v119) {
                break;
              }
              unint64_t v26 = v120[v21];
              ++v27;
              if (v26) {
                goto LABEL_21;
              }
            }

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  type metadata accessor for ICUPercentNumberFormatter.Signature,  &demangling cache variable for type metadata for _DictionaryStorage<ICUPercentNumberFormatter.Signature, ICUPercentNumberFormatter?>);
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  &demangling cache variable for type metadata for _DictionaryStorage<ICUMeasurementNumberFormatter.Signature, ICUMeasurementNumberFormatter?>);
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unsigned __int8 *v23;
  Swift::UInt v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t ObjectType;
  void (*v30)(__int128 *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  Swift::UInt8 v33;
  void (*v34)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  Swift::UInt v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  Swift::UInt v52;
  Swift::UInt v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  Swift::UInt v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  Swift::UInt v67;
  Swift::UInt v68;
  int64_t v69;
  unint64_t v70;
  int64_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  Swift::UInt v92;
  Swift::UInt v93;
  Swift::UInt8 v94;
  Swift::UInt8 v95;
  Swift::UInt8 v96;
  Swift::Int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  int64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  int64_t v116;
  char v117;
  void *v118;
  Swift::UInt8 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  char v136[8];
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  char v152;
  char v153;
  void v154[18];
  _BYTE v155[144];
  _BYTE v156[144];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  unint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Date.ComponentsFormatStyle, NSDateComponentsFormatter>);
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    swift_release();
    uint64_t v105 = v107;
    goto LABEL_141;
  }

  __int128 v112 = a2;
  uint64_t v7 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v110 = (void *)(v4 + 64);
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  uint64_t v9 = v8 & *(void *)(v4 + 64);
  unsigned __int8 v111 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 64;
  swift_retain();
  unint64_t v11 = 0LL;
  uint64_t v108 = v6;
  uint64_t v109 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v17 = __clz(__rbit64(v9));
      unint64_t v18 = (v9 - 1) & v9;
      unint64_t v19 = v17 | (v11 << 6);
    }

    else
    {
      uint64_t v20 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_146;
      }
      if (v20 >= v111) {
        goto LABEL_134;
      }
      unint64_t v21 = v110[v20];
      ++v11;
      if (!v21)
      {
        unint64_t v11 = v20 + 1;
        if (v20 + 1 >= v111) {
          goto LABEL_134;
        }
        unint64_t v21 = v110[v11];
        if (!v21)
        {
          unint64_t v22 = v20 + 2;
          if (v22 >= v111) {
            goto LABEL_134;
          }
          unint64_t v21 = v110[v22];
          if (!v21)
          {
            while (1)
            {
              unint64_t v11 = v22 + 1;
              if (__OFADD__(v22, 1LL)) {
                goto LABEL_147;
              }
              if (v11 >= v111) {
                break;
              }
              unint64_t v21 = v110[v11];
              ++v22;
              if (v21) {
                goto LABEL_21;
              }
            }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  Swift::UInt8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 *v45;
  Swift::UInt v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  Swift::UInt v56;
  Swift::UInt v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  Swift::UInt v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  Swift::UInt v71;
  Swift::UInt v72;
  int64_t v73;
  unint64_t v74;
  int64_t v75;
  __int128 v76;
  __int128 v77;
  void *v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  Swift::UInt v94;
  Swift::UInt v95;
  Swift::UInt8 v96;
  Swift::UInt8 v97;
  Swift::UInt8 v98;
  Swift::Int v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  char v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  int64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  _BYTE v137[144];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _OWORD v146[2];
  _BYTE v147[160];
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LocaleCache.State.IdentifierAndPrefs, _NSSwiftLocale>);
  __int128 v113 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_134;
  }
  uint64_t v108 = v2;
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v109 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  __int128 v112 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0LL;
  uint64_t v110 = v7;
  unsigned __int8 v111 = v5;
  while (1)
  {
    if (v10)
    {
      uint64_t v116 = (v10 - 1) & v10;
      unint64_t v23 = __clz(__rbit64(v10)) | (v12 << 6);
    }

    else
    {
      int64_t v24 = v12 + 1;
      if (__OFADD__(v12, 1LL)) {
        goto LABEL_139;
      }
      if (v24 >= v112) {
        goto LABEL_129;
      }
      unint64_t v25 = v109[v24];
      ++v12;
      if (!v25)
      {
        int64_t v12 = v24 + 1;
        if (v24 + 1 >= v112) {
          goto LABEL_129;
        }
        unint64_t v25 = v109[v12];
        if (!v25)
        {
          unint64_t v26 = v24 + 2;
          if (v26 >= v112) {
            goto LABEL_129;
          }
          unint64_t v25 = v109[v26];
          if (!v25)
          {
            while (1)
            {
              int64_t v12 = v26 + 1;
              if (__OFADD__(v26, 1LL)) {
                goto LABEL_140;
              }
              if (v12 >= v112) {
                break;
              }
              unint64_t v25 = v109[v12];
              ++v26;
              if (v25) {
                goto LABEL_21;
              }
            }

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
  uint64_t v39 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  int v40 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v38 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v36 = v2;
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }

    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v21 >= v37) {
      break;
    }
    unint64_t v22 = v38;
    unint64_t v23 = v38[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_34;
      }
      unint64_t v23 = v38[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v36;
          if ((v40 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }

        unint64_t v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1LL)) {
              goto LABEL_43;
            }
            if (v17 >= v37) {
              goto LABEL_34;
            }
            unint64_t v23 = v38[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }

        int64_t v17 = v24;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v3 = v2;
  char v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v44 = *(void *)(v46 - 8);
  MEMORY[0x1895F8858](v46);
  uint64_t v45 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RegexPatternCache.Key, Regex<AnyRegexOutput>>);
  uint64_t v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    int v40 = v2;
    uint64_t v9 = 1LL << *(_BYTE *)(v6 + 32);
    uint64_t v10 = *(void *)(v6 + 64);
    char v42 = (void *)(v6 + 64);
    if (v9 < 64) {
      uint64_t v11 = ~(-1LL << v9);
    }
    else {
      uint64_t v11 = -1LL;
    }
    uint64_t v12 = v11 & v10;
    uint64_t v41 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 64;
    uint64_t result = swift_retain();
    uint64_t v15 = 0LL;
    uint64_t v16 = v44;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v15 << 6);
      }

      else
      {
        int64_t v21 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }

        if (v21 >= v41) {
          goto LABEL_34;
        }
        unint64_t v22 = v42[v21];
        ++v15;
        if (!v22)
        {
          uint64_t v15 = v21 + 1;
          if (v21 + 1 >= v41) {
            goto LABEL_34;
          }
          unint64_t v22 = v42[v15];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v41)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v40;
              if ((v43 & 1) != 0)
              {
                uint64_t v39 = 1LL << *(_BYTE *)(v6 + 32);
                if (v39 >= 64) {
                  bzero(v42, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *char v42 = -1LL << v39;
                }
                *(void *)(v6 + 16) = 0LL;
              }

              break;
            }

            unint64_t v22 = v42[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v15 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_41;
                }
                if (v15 >= v41) {
                  goto LABEL_34;
                }
                unint64_t v22 = v42[v15];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }

            uint64_t v15 = v23;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  void *v38;
  int v39;
  _OWORD v40[2];
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  uint64_t v39 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v38 = (void *)(v9 + 64);
  if (v12 < 64) {
    unint64_t v14 = ~(-1LL << v12);
  }
  else {
    unint64_t v14 = -1LL;
  }
  uint64_t v15 = v14 & v13;
  uint64_t v36 = v2;
  int64_t v37 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }

    unint64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = v38;
    int64_t v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      unint64_t v18 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_34;
      }
      int64_t v24 = v38[v18];
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }

        int64_t v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            unint64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_43;
            }
            if (v18 >= v37) {
              goto LABEL_34;
            }
            int64_t v24 = v38[v18];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }

        unint64_t v18 = v25;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  void *v38;
  int v39;
  __int128 v40;
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CombineIdentifier();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CombineIdentifier, NSTimer.TimerPublisher.Side>);
  uint64_t v39 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v38 = (void *)(v9 + 64);
  if (v12 < 64) {
    unint64_t v14 = ~(-1LL << v12);
  }
  else {
    unint64_t v14 = -1LL;
  }
  uint64_t v15 = v14 & v13;
  uint64_t v36 = v2;
  int64_t v37 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }

    unint64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = v38;
    int64_t v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      unint64_t v18 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_34;
      }
      int64_t v24 = v38[v18];
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }

        int64_t v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            unint64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_43;
            }
            if (v18 >= v37) {
              goto LABEL_34;
            }
            int64_t v24 = v38[v18];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }

        unint64_t v18 = v25;
      }
    }

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_135;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v6 + 32);
  __int128 v114 = v3;
  __int128 v115 = (void *)(v6 + 64);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v119 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  swift_retain();
  int64_t v13 = 0LL;
  uint64_t v117 = v8;
  uint64_t v118 = v6;
  char v116 = a2;
LABEL_8:
  if (v11)
  {
    uint64_t v124 = (v11 - 1) & v11;
    unint64_t v25 = __clz(__rbit64(v11)) | (v13 << 6);
  }

  else
  {
    int64_t v26 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_140;
    }
    if (v26 >= v119) {
      goto LABEL_130;
    }
    unint64_t v27 = v115[v26];
    ++v13;
    if (!v27)
    {
      int64_t v13 = v26 + 1;
      if (v26 + 1 >= v119) {
        goto LABEL_130;
      }
      unint64_t v27 = v115[v13];
      if (!v27)
      {
        int64_t v28 = v26 + 2;
        if (v28 >= v119) {
          goto LABEL_130;
        }
        unint64_t v27 = v115[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v13 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_141;
            }
            if (v13 >= v119) {
              break;
            }
            unint64_t v27 = v115[v13];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }

LABEL_130:
          swift_release();
          unint64_t v4 = v114;
          if ((a2 & 1) != 0)
          {
            uint64_t v113 = 1LL << *(_BYTE *)(v6 + 32);
            if (v113 >= 64) {
              bzero(v115, ((unint64_t)(v113 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
            }
            else {
              *__int128 v115 = -1LL << v113;
            }
            *(void *)(v6 + 16) = 0LL;
          }

    uint64_t v106 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v28, v29);
    if (!v15) {
      break;
    }
    if ((v106 & 1) == 0)
    {
      unint64_t v107 = one-time initialization token for schemesToPercentEncodeHost;
      swift_bridgeObjectRetain_n();
      if (v107 != -1) {
        swift_once();
      }
      unint64_t v108 = static RFC3986Parser.schemesToPercentEncodeHost;
      char v109 = String.lowercased()();
      LOBYTE(v108) = specialized Set.contains(_:)(v109._countAndFlagsBits, (uint64_t)v109._object, v108);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if ((v108 & 1) == 0) {
        goto LABEL_165;
      }
    }

  __break(1u);
}

          __break(1u);
          goto LABEL_131;
        }

        outlined release of Locale((uint64_t)v226);
      }

      else
      {
        v229 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
        v240 = v239;
        v651 = v242;
        v652 = v241;
        v655 = v240;
        swift_retain();
LABEL_147:
        v243 = v677[1];
        v1085 = *v677;
        v1086 = v243;
        v1087 = v677[2];
        if ((v223 & 0xC) == 8)
        {
          v226 = &v1085;
          BigString.utf16.getter();
          v244 = BigString.UTF16View.count.getter();
          v1107[0] = v1085;
          v1107[1] = v1086;
          v1107[2] = v1087;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v1107, (uint64_t)v1108);
          outlined retain of Locale((uint64_t)v1108);
          outlined release of Locale((uint64_t)&v848);
          v245 = v229;
          v246 = (unsigned __int16)v223 >> 14;
          BigString.utf16.getter();
          BigString.startIndex.getter();
          v247 = BigString.UTF16View.index(_:offsetBy:)();
          v249 = v248;
          v251 = v250;
          uint64_t v123 = v252;
          outlined release of Locale((uint64_t)&v849);
          if (v246)
          {
            BigString.utf8.getter();
            v247 = BigString.UTF8View.index(_:offsetBy:)();
            v656 = v253;
            v251 = v254;
            uint64_t v123 = v255;
            outlined release of Locale((uint64_t)&v850);
          }

          else
          {
            v656 = v249;
          }

          v229 = v245;
          v260 = v655;
          outlined release of Locale((uint64_t)&v1085);
        }

        else
        {
          v247 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
          v656 = v256;
          v251 = v257;
          uint64_t v123 = v258;
          v259 = BigString.endIndex.getter();
          v260 = v655;
          if (v259 >> 10 < v247 >> 10) {
            goto LABEL_131;
          }
        }

        v261 = v677[1];
        v1082 = *v677;
        v1083 = v261;
        v1084 = v677[2];
        if (v229 >> 10 >= (unint64_t)BigString.startIndex.getter() >> 10)
        {
          v631 = v229 >> 10;
          v262 = BigString.endIndex.getter();
          swift_release();
          if (v247 >> 10 > v262 >> 10) {
            continue;
          }
          v689 = v65;
          v263 = v677[1];
          v1079 = *v677;
          v1080 = v263;
          v1081 = v677[2];
          v264 = BigString.startIndex.getter();
          v625 = v229;
          v265 = v264;
          v655 = v260;
          v267 = v266;
          v269 = v268;
          int64_t v65 = v270;
          v271 = BigString.endIndex.getter();
          v1071 = v265;
          v1072 = v267;
          v1073 = v269;
          v1074 = v65;
          v272 = v679;
          v1075 = v271;
          v1076 = v273;
          v1077 = v274;
          v1078 = v275;
          BigString.unicodeScalars.getter();
          swift_retain_n();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v851);
          outlined release of Locale((uint64_t)v852);
          swift_release();
          v1020 = v625;
          v1021 = v655;
          v1022 = v652;
          v1023 = v651;
          v1024 = v247;
          v1025 = v656;
          v1026 = v251;
          v1027 = v123;
          if (v631 < v852[6] >> 10 || v852[10] >> 10 < v247 >> 10)
          {
            __break(1u);
LABEL_320:
            __break(1u);
            goto LABEL_321;
          }

          v276 = v677[1];
          v1068 = *v677;
          v1069 = v276;
          v1070 = v677[2];
          BigString.unicodeScalars.getter();
          swift_retain();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v853);
          outlined release of Locale((uint64_t)&v854);
          swift_release();
          int64_t v65 = *(void *)&v855[24];
          v277 = *(void *)&v855[32];
          v793 = *(_OWORD *)v855;
          v794 = *(_OWORD *)&v855[16];
          v795 = *(_OWORD *)&v855[32];
          v796 = *(_OWORD *)&v855[48];
          *(void *)&v797 = v272;
          v278 = *(void *)v855;
          *((void *)&v797 + 1) = *(void *)v855;
          v646 = *(_OWORD **)&v855[16];
          v647 = *(void *)&v855[8];
          v798 = *(_OWORD *)&v855[8];
          v799 = *(_OWORD *)&v855[24];
          v800 = *(_OWORD *)&v855[40];
          v801 = *(unint64_t *)&v855[56];
          v279 = v691;
          v280 = v691[2];
          v1065 = v691[1];
          v1066 = v280;
          v1067 = v691[3];
          v281 = BigString.startIndex.getter();
          v283 = v282;
          uint64_t v123 = v284;
          v286 = v285;
          v287 = BigString.endIndex.getter();
          v1057 = v281;
          v1058 = v283;
          v1059 = v123;
          v1060 = v286;
          v1061 = v287;
          v1062 = v288;
          v1063 = v289;
          v1064 = v290;
          BigString.unicodeScalars.getter();
          swift_retain_n();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v856);
          outlined release of Locale((uint64_t)v857);
          v650 = v279;
          swift_release();
          v1046 = v683;
          v1047 = (uint64_t)v682;
          v1048 = v681;
          v1049 = v680;
          v1050 = v664;
          v1051 = v663;
          v1052 = v662;
          v1053 = v661;
          v617 = v683 >> 10;
          if (v683 >> 10 < v857[6] >> 10 || v857[10] >> 10 < v664 >> 10) {
            goto LABEL_320;
          }
          v291 = v650;
          v292 = v650 + 1;
          v293 = v650[2];
          v1054 = v650[1];
          v1055 = v293;
          v1056 = v650[3];
          BigString.unicodeScalars.getter();
          swift_retain();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v858);
          outlined release of Locale((uint64_t)&v859);
          swift_release();
          __int128 v115 = *(id *)&v860[8];
          uint64_t v113 = *(void *)v860;
          v802 = *(_OWORD *)v860;
          v803 = *(_OWORD *)&v860[16];
          v804 = *(_OWORD *)&v860[32];
          v805 = *(_OWORD *)&v860[48];
          *(void *)&v806 = v291;
          *((void *)&v806 + 1) = *(void *)v860;
          v807 = *(_OWORD *)&v860[8];
          v808 = *(_OWORD *)&v860[24];
          v809 = *(_OWORD *)&v860[40];
          v810 = *(unint64_t *)&v860[56];
          v294 = v277 >> 10;
          v663 = *(void *)&v860[24];
          __int128 v114 = *(void **)&v860[16];
          v664 = *(void *)&v860[32] >> 10;
          v783 = v801;
          v782 = v800;
          v781 = v799;
          v780 = v798;
          v779 = v797;
          v778 = v796;
          v777 = v795;
          v775 = v793;
          v776 = v794;
          v790 = *(_OWORD *)&v860[24];
          v791 = *(_OWORD *)&v860[40];
          v792 = *(unint64_t *)&v860[56];
          v786 = *(_OWORD *)&v860[32];
          v787 = *(_OWORD *)&v860[48];
          v789 = *(_OWORD *)&v860[8];
          v788 = v806;
          v640 = v278 >> 10;
          v645 = *(void *)v860 >> 10;
          v785 = *(_OWORD *)&v860[16];
          v784 = *(_OWORD *)v860;
          swift_retain();
          swift_retain();
          v295 = v294;
          v656 = v294;
          while (1)
          {
            v296 = v278 >> 10;
            v662 = v278 >> 10;
            if (v278 >> 10 == v295)
            {
              v772 = v781;
              v773 = v782;
              v774 = v783;
              v768 = v777;
              v769 = v778;
              v771 = v780;
              v770 = v779;
              v297 = v113 >> 10;
              v767 = v776;
              v766 = v775;
              v298 = v664;
              if (v113 >> 10 == v664)
              {
                v763 = v790;
                v764 = v791;
                v765 = v792;
                v759 = v786;
                v760 = v787;
                v762 = v789;
                v761 = v788;
                v758 = v785;
                v757 = v784;
                outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v757);
                outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v766);
                v314 = (uint64_t)v679;
                swift_release();
                swift_release();
                v315 = v677[1];
                v1031 = *v677;
                v1032 = v315;
                v1033 = v677[2];
                BigString.startIndex.getter();
                BigString.endIndex.getter();
                BigString.unicodeScalars.getter();
                swift_retain();
                BigString.UnicodeScalarView.subscript.getter();
                outlined release of Locale((uint64_t)&v865);
                outlined release of Locale((uint64_t)&v866);
                v316 = *((_OWORD *)v623 + 1);
                v913[8] = *(_OWORD *)v623;
                v913[9] = v316;
                v317 = *((_OWORD *)v623 + 3);
                v913[10] = *((_OWORD *)v623 + 2);
                v913[11] = v317;
                AttributedString.Runs.init(_:in:)(v314, v755);
                v318 = v755[0];
                v319 = v755[1];
                v320 = v755[2];
                v321 = v755[3];
                v322 = *(void *)&v755[4];
                v323 = v621;
                v324 = v622;
                v325 = *((_OWORD *)v622 + 5);
                *((_OWORD *)v621 + 4) = *((_OWORD *)v622 + 4);
                v323[5] = v325;
                v326 = v324[7];
                v323[6] = v324[6];
                v323[7] = v326;
                v327 = v324[1];
                *v323 = *v324;
                v323[1] = v327;
                v328 = v324[3];
                v323[2] = v324[2];
                v323[3] = v328;
                v756[0] = v318;
                v756[1] = v319;
                v756[2] = v320;
                v756[3] = v321;
                *(void *)&v756[4] = v322;
                *((void *)&v756[12] + 1) = *((void *)&v318 + 1);
                v756[13] = v319;
                v756[14] = v320;
                v756[15] = v321;
                *(void *)&v756[16] = v322;
                specialized IndexingIterator.next()((uint64_t)v755);
                __int128 v115 = *(id *)&v755[0];
                if (*(void *)&v755[0])
                {
                  uint64_t v113 = *((void *)&v755[0] + 1);
                  v329 = *(void **)&v755[1];
                  v662 = *(void *)&v755[2];
                  v663 = *((void *)&v755[1] + 1);
                  v661 = *((void *)&v755[2] + 1);
                  v656 = *((void *)&v755[3] + 1);
                  v330 = *(void *)&v755[3];
                  v650 = *(_OWORD **)&v755[4];
                  v331 = v680;
                  v332 = (unint64_t)v681;
                  v333 = (uint64_t)v682;
                  v334 = v683;
                  v647 = *((void *)&v755[4] + 1);
                  v335 = *(void *)&v755[5];
                  v336 = v635;
                  while (2)
                  {
                    v635 = v336;
                    LODWORD(v628) = v620 | v336;
                    v645 = v332;
                    v646 = v331;
                    v643 = (void *)v333;
                    v664 = v334;
                    while (2)
                    {
                      v634 = v335;
                      v639 = v329;
                      v640 = v330;
                      v337 = v677[1];
                      v948 = *v677;
                      v949 = v337;
                      v950 = v677[2];
                      v338 = BigString.startIndex.getter();
                      v340 = v339;
                      v342 = v341;
                      __int128 v114 = v343;
                      v344 = BigString.endIndex.getter();
                      v940 = v338;
                      v941 = v340;
                      v942 = v342;
                      v943 = v114;
                      v345 = v640;
                      v944 = v344;
                      v945 = v346;
                      v946 = v347;
                      v947 = v348;
                      BigString.unicodeScalars.getter();
                      swift_retain_n();
                      BigString.UnicodeScalarView.subscript.getter();
                      outlined release of Locale((uint64_t)&v868);
                      outlined release of Locale((uint64_t)&v869);
                      v349 = (unint64_t)v639;
                      swift_release();
                      if (v871 >> 10 < v345 >> 10
                        || v345 >> 10 < v870 >> 10
                        || v349 >> 10 < v870 >> 10
                        || v871 >> 10 < v349 >> 10)
                      {
                        __break(1u);
LABEL_290:
                        __break(1u);
LABEL_291:
                        __break(1u);
LABEL_292:
                        __break(1u);
LABEL_293:
                        __break(1u);
                        goto LABEL_294;
                      }

                      v633 = v113;
                      uint64_t v113 = (unint64_t)v115;
                      v350 = v677[1];
                      v937 = *v677;
                      v938 = v350;
                      v939 = v677[2];
                      BigString.unicodeScalars.getter();
                      BigString.UnicodeScalarView.distance(from:to:)();
                      outlined release of Locale((uint64_t)&v872);
                      swift_release();
                      v351 = v691;
                      v352 = v691[2];
                      v934 = v691[1];
                      v935 = v352;
                      v936 = v691[3];
                      v353 = BigString.startIndex.getter();
                      v355 = v354;
                      v357 = v356;
                      int64_t v65 = v358;
                      v359 = BigString.endIndex.getter();
                      v926 = v353;
                      v927 = v355;
                      v928 = v357;
                      v929 = v65;
                      v930 = v359;
                      v931 = v360;
                      v932 = v361;
                      v933 = v362;
                      BigString.unicodeScalars.getter();
                      swift_retain_n();
                      BigString.UnicodeScalarView.subscript.getter();
                      outlined release of Locale((uint64_t)&v873);
                      outlined release of Locale((uint64_t)&v874);
                      swift_release();
                      __int128 v114 = (void *)(v664 >> 10);
                      v363 = v875 >> 10;
                      if (v664 >> 10 < v875 >> 10) {
                        goto LABEL_290;
                      }
                      __int128 v115 = (id)(v876 >> 10);
                      v364 = v351[2];
                      v925[3] = v351[1];
                      v925[4] = v364;
                      v925[5] = v351[3];
                      BigString.unicodeScalars.getter();
                      v334 = BigString.UnicodeScalarView.index(_:offsetBy:)();
                      v366 = v365;
                      int64_t v65 = v367;
                      v638 = v368;
                      outlined release of Locale((uint64_t)&v877);
                      swift_release_n();
                      v369 = v334 >> 10;
                      v636 = (void *)v65;
                      v637 = v366;
                      __int128 v115 = (id)v113;
                      *(void *)&v723 = v113;
                      uint64_t v113 = v633;
                      *((void *)&v723 + 1) = v633;
                      LOBYTE(v704) = 1;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      {
                        v370 = v351[2];
                        v925[0] = v351[1];
                        v925[1] = v370;
                        v925[2] = v351[3];
                        v371 = *((void *)v351 + 8);
                        v372 = *((void *)v351 + 9);
                        v373 = *((void *)v351 + 10);
                        v374 = *((void *)v351 + 11);
                        type metadata accessor for AttributedString.Guts();
                        swift_allocObject();
                        outlined retain of Locale((uint64_t)v925);
                        swift_unknownObjectRetain();
                        v375 = AttributedString.Guts.init(string:runs:)(v925, v371, v372, v373, v374);
                        v691 = (_OWORD *)v375;
                        swift_release();
                        v351 = (_OWORD *)v375;
                      }

                      int64_t v65 = v689;
                      v376 = v638;
                      v377 = v351[2];
                      v922 = v351[1];
                      v923 = v377;
                      v924 = v351[3];
                      BigString.startIndex.getter();
                      BigString.endIndex.getter();
                      v914 = v664;
                      v915 = v643;
                      v916 = v645;
                      v917 = v646;
                      v918 = v334;
                      v919 = v637;
                      v920 = v636;
                      v921 = v376;
                      BigString.unicodeScalars.getter();
                      swift_retain_n();
                      BigString.UnicodeScalarView.subscript.getter();
                      swift_release();
                      outlined release of Locale((uint64_t)&v878);
                      outlined release of Locale((uint64_t)&v879);
                      v378 = v632;
                      v379 = v632[1];
                      v380 = v675;
                      *v675 = *v632;
                      v380[1] = v379;
                      v381 = v378[3];
                      v380[2] = v378[2];
                      v380[3] = v381;
                      *(void *)&v755[0] = v351;
                      if (one-time initialization token for currentIdentity != -1) {
                        swift_once();
                      }
                      v382 = (uint64_t *)(static AttributedString.currentIdentity + 16);
                      v383 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
                      swift_retain();
                      os_unfair_lock_lock(v383);
                      v384 = v660;
                      closure #1 in static AttributedString._nextModifyIdentity.getter(v382, (uint64_t *)&v737);
                      v660 = v384;
                      os_unfair_lock_unlock(v383);
                      swift_release();
                      __int128 v114 = v737;
                      *((void *)&v755[4] + 1) = v737;
                      BigString.init()();
                      v737 = 0LL;
                      MEMORY[0x186E20E78](&v737, 8LL);
                      v385 = (uint64_t)v737;
                      type metadata accessor for AttributedString.Guts();
                      v386 = swift_allocObject();
                      if ((BigString.isEmpty.getter() & 1) == 0) {
                        goto LABEL_293;
                      }
                      v387 = v880[5];
                      *(_OWORD *)(v386 + 16) = v880[4];
                      *(_OWORD *)(v386 + 32) = v387;
                      *(_OWORD *)(v386 + 48) = v880[6];
                      *(void *)(v386 + 64) = 0LL;
                      *(void *)(v386 + 72) = 0LL;
                      *(void *)(v386 + 80) = 0LL;
                      *(void *)(v386 + 88) = v385;
                      swift_release();
                      AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v723, (char *)&v704);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v691 = *(_OWORD **)&v755[0];
                      swift_release();
                      if ((v628 & 1) != 0)
                      {
                        v607 = v634;
                        v606 = v647;
                        v605 = v650;
                        outlined consume of AttributedString.Runs.Run?((uint64_t)v115);
LABEL_180:
                        specialized IndexingIterator.next()((uint64_t)v755);
                        uint64_t v113 = *((void *)&v755[0] + 1);
                        __int128 v115 = *(id *)&v755[0];
                        v329 = *(void **)&v755[1];
                        v662 = *(void *)&v755[2];
                        v663 = *((void *)&v755[1] + 1);
                        v661 = *((void *)&v755[2] + 1);
                        v656 = *((void *)&v755[3] + 1);
                        v330 = *(void *)&v755[3];
                        v650 = *(_OWORD **)&v755[4];
                        v646 = v638;
                        v647 = *((void *)&v755[4] + 1);
                        v645 = (unint64_t)v636;
                        v643 = (void *)v637;
                        v664 = v334;
                        v335 = *(void *)&v755[5];
                        if (!*(void *)&v755[0]) {
                          goto LABEL_204;
                        }
                        continue;
                      }

                      break;
                    }

                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    specialized AttributedString._AttributeStorage.subscript.getter((uint64_t)v115, (uint64_t)v755);
                    v607 = v634;
                    v606 = v647;
                    v605 = v650;
                    outlined consume of AttributedString.Runs.Run?((uint64_t)v115);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v388 = *((void *)&v755[0] + 1);
                    outlined consume of AttributedString.AttributeRunBoundaries?( *(uint64_t *)&v755[0],  *((uint64_t *)&v755[0] + 1));
                    if (v388 == 1) {
                      goto LABEL_180;
                    }
                    specialized IndexingIterator.next()((uint64_t)v755);
                    uint64_t v113 = *((void *)&v755[0] + 1);
                    __int128 v115 = *(id *)&v755[0];
                    v329 = *(void **)&v755[1];
                    v662 = *(void *)&v755[2];
                    v663 = *((void *)&v755[1] + 1);
                    v661 = *((void *)&v755[2] + 1);
                    v656 = *((void *)&v755[3] + 1);
                    v330 = *(void *)&v755[3];
                    v647 = *((void *)&v755[4] + 1);
                    v650 = *(_OWORD **)&v755[4];
                    v336 = 1;
                    v335 = *(void *)&v755[5];
                    v332 = (unint64_t)v636;
                    v333 = v637;
                    v331 = v638;
                    if (*(void *)&v755[0]) {
                      continue;
                    }
                    break;
                  }

                  memcpy(v755, v756, 0x108uLL);
                  outlined release of AttributedString.Runs((uint64_t)v755);
                  v635 = 1;
LABEL_205:
                  v389 = v677[1];
                  v1028 = *v677;
                  v1029 = v389;
                  v1030 = v677[2];
                  BigString.startIndex.getter();
                  BigString.endIndex.getter();
                  BigString.unicodeScalars.getter();
                  v390 = (uint64_t)v679;
                  swift_retain();
                  BigString.UnicodeScalarView.subscript.getter();
                  outlined release of Locale((uint64_t)&v881);
                  outlined release of Locale((uint64_t)&v882);
                  v391 = *((_OWORD *)v619 + 1);
                  v913[4] = *(_OWORD *)v619;
                  v913[5] = v391;
                  v392 = *((_OWORD *)v619 + 3);
                  v913[6] = *((_OWORD *)v619 + 2);
                  v913[7] = v392;
                  AttributedString.Runs.init(_:in:)(v390, &v737);
                  v393 = v618[5];
                  v751 = v618[4];
                  v752 = v393;
                  v394 = v618[7];
                  v753 = v618[6];
                  v754 = v394;
                  v395 = v618[1];
                  v747 = *v618;
                  v748 = v395;
                  v396 = v618[3];
                  v749 = v618[2];
                  v750 = v396;
                  v397 = v740;
                  v398 = v741;
                  v399 = (char *)v742;
                  v656 = v744;
                  v400 = (_OWORD *)(v739 >> 10);
                  v639 = (void *)v743;
                  v640 = (unint64_t)v737;
                  v637 = v746;
                  v638 = v745;
                  v636 = (void *)(v743 >> 10);
                  v643 = (void *)v739;
                  if (v739 >> 10 != v743 >> 10)
                  {
                    v406 = v740;
                    v407 = v741;
                    v408 = v742;
                    v409 = v739;
                    v633 = v741;
                    v634 = v740;
                    v628 = v742;
                    while (1)
                    {
                      v663 = v406;
                      v664 = v409;
                      v661 = v408;
                      v662 = v407;
                      v650 = v400;
                      v421 = v751;
                      v422 = v752;
                      v423 = v752;
                      v424 = v629;
                      *((_OWORD *)v629 + 4) = v751;
                      *((_OWORD *)v424 + 5) = v422;
                      v425 = v753;
                      v426 = v754;
                      v427 = v754;
                      *((_OWORD *)v424 + 6) = v753;
                      *((_OWORD *)v424 + 7) = v426;
                      v428 = v747;
                      v429 = v748;
                      v430 = v748;
                      *(_OWORD *)v424 = v747;
                      *((_OWORD *)v424 + 1) = v429;
                      v431 = v749;
                      v432 = v750;
                      v433 = v750;
                      *((_OWORD *)v424 + 2) = v749;
                      *((_OWORD *)v424 + 3) = v432;
                      v434 = v630;
                      v630[4] = v421;
                      v434[5] = v423;
                      v434[6] = v425;
                      v434[7] = v427;
                      *v434 = v428;
                      v434[1] = v430;
                      v434[2] = v431;
                      v434[3] = v433;
                      v436 = v639;
                      v435 = v640;
                      v704 = v640;
                      v437 = v643;
                      v710 = v643;
                      v711 = v397;
                      v712 = v398;
                      v713 = v399;
                      v714 = v639;
                      v715 = v656;
                      v716 = v638;
                      v438 = v638;
                      v717 = v637;
                      v439 = v637;
                      v703[0] = v409;
                      v703[1] = v406;
                      v703[2] = v407;
                      v703[3] = v408;
                      v440 = v397;
                      AttributedString.Runs.subscript.getter(v703, &v718);
                      v647 = v719;
                      v645 = v718;
                      v646 = v722;
                      v441 = v752;
                      v442 = v666;
                      v666[4] = v751;
                      v442[5] = v441;
                      v443 = v754;
                      v442[6] = v753;
                      v442[7] = v443;
                      v444 = v748;
                      *v442 = v747;
                      v442[1] = v444;
                      v445 = v750;
                      v442[2] = v749;
                      v442[3] = v445;
                      *(void *)&v723 = v435;
                      v728 = v437;
                      *(void *)&v729 = v440;
                      *((void *)&v729 + 1) = v398;
                      v730 = v399;
                      v731 = v436;
                      v732 = v656;
                      v446 = v438;
                      v733 = v438;
                      v734 = v439;
                      v735 = &outlined read-only object #0 of String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:);
                      v447 = MEMORY[0x18961AFE8];
                      v736 = MEMORY[0x18961AFE8];
                      v692 = v435;
                      v695 = v437;
                      v696 = v440;
                      v697 = v398;
                      v698 = v399;
                      v699 = v436;
                      v700 = v656;
                      v701 = v446;
                      v702 = v439;
                      v718 = v664;
                      v719 = v663;
                      v720 = v662;
                      v721 = v661;
                      swift_retain();
                      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v723);
                      v448 = &v692;
                      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)( &v718,  (uint64_t)&outlined read-only object #0 of String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:),  v447,  (uint64_t *)&v704);
                      swift_release();
                      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v723);
                      v417 = v704;
                      v416 = v704 >> 10;
                      v407 = *((void *)&v705 + 1);
                      v418 = v705;
                      v449 = v706;
                      v450 = v645;
                      if (*(void *)(v645 + 16)
                        && (v451 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012LL, v627),
                            (v452 & 1) != 0))
                      {
                        outlined init with copy of AttributedString._AttributeValue( *(void *)(v450 + 56) + 72 * v451,  (uint64_t)&v704);
                        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v704,  (uint64_t)&v692);
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                        swift_dynamicCast();
                        outlined destroy of AttributedString._AttributeValue((uint64_t)&v704);
                        v453 = 0;
                        LOBYTE(v719) = 0;
                        v454 = v718;
                      }

                      else
                      {
                        v454 = 0LL;
                        v718 = 0LL;
                        v453 = 1;
                        LOBYTE(v719) = 1;
                      }

                      swift_release();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v453 & 1) == 0)
                      {
                        v616 = v454;
                        v647 = v449;
                        v650 = (_OWORD *)v407;
                        v455 = v677[1];
                        v1017 = *v677;
                        v1018 = v455;
                        v1019 = v677[2];
                        v456 = BigString.startIndex.getter();
                        v458 = v457;
                        v460 = v459;
                        v462 = v461;
                        v463 = BigString.endIndex.getter();
                        v1009 = v456;
                        v1010 = v458;
                        v1011 = v460;
                        v1012 = v462;
                        v1013 = v463;
                        v1014 = v464;
                        v1015 = v465;
                        v1016 = v466;
                        BigString.unicodeScalars.getter();
                        swift_retain_n();
                        BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)&v884);
                        outlined release of Locale((uint64_t)&v885);
                        swift_release();
                        v467 = v664 >> 10;
                        if (v887 >> 10 < v664 >> 10 || v467 < v886 >> 10 || v631 < v886 >> 10 || v887 >> 10 < v631)
                        {
                          __break(1u);
LABEL_323:
                          __break(1u);
LABEL_324:
                          __break(1u);
LABEL_325:
                          __break(1u);
LABEL_326:
                          __break(1u);
LABEL_327:
                          __break(1u);
LABEL_328:
                          __break(1u);
                        }

                        v468 = v677;
                        v469 = v677[1];
                        v1006 = *v677;
                        v1007 = v469;
                        v1008 = v677[2];
                        BigString.unicodeScalars.getter();
                        v646 = (_OWORD *)BigString.UnicodeScalarView.distance(from:to:)();
                        outlined release of Locale((uint64_t)&v888);
                        swift_release();
                        v470 = v468[1];
                        v1003 = *v468;
                        v1004 = v470;
                        v1005 = v468[2];
                        v471 = BigString.startIndex.getter();
                        v473 = v472;
                        v475 = v474;
                        v477 = v476;
                        v478 = BigString.endIndex.getter();
                        v995 = v471;
                        v996 = v473;
                        v997 = v475;
                        v998 = v477;
                        v999 = v478;
                        v1000 = v479;
                        v1001 = v480;
                        v1002 = v481;
                        BigString.unicodeScalars.getter();
                        swift_retain_n();
                        BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)&v889);
                        outlined release of Locale((uint64_t)&v890);
                        swift_release();
                        if (v892 >> 10 < v416 || v416 < v891 >> 10 || v467 < v891 >> 10 || v892 >> 10 < v467) {
                          goto LABEL_323;
                        }
                        v615 = v417 >> 10;
                        v482 = v677[1];
                        v992 = *v677;
                        v993 = v482;
                        v994 = v677[2];
                        BigString.unicodeScalars.getter();
                        v613 = v418;
                        v614 = v417;
                        v483 = BigString.UnicodeScalarView.distance(from:to:)();
                        outlined release of Locale((uint64_t)&v893);
                        swift_release();
                        v484 = v691;
                        v485 = v691[2];
                        v989 = v691[1];
                        v990 = v485;
                        v991 = v691[3];
                        v486 = BigString.startIndex.getter();
                        v488 = v487;
                        v490 = v489;
                        v492 = v491;
                        v493 = BigString.endIndex.getter();
                        v981 = v486;
                        v982 = v488;
                        v983 = v490;
                        v984 = v492;
                        v985 = v493;
                        v986 = v494;
                        v987 = v495;
                        v988 = v496;
                        BigString.unicodeScalars.getter();
                        swift_retain_n();
                        BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)&v894);
                        outlined release of Locale((uint64_t)&v895);
                        swift_release();
                        v497 = v896 >> 10;
                        if (v617 < v896 >> 10) {
                          goto LABEL_324;
                        }
                        v498 = v897 >> 10;
                        if (v897 >> 10 < v617) {
                          goto LABEL_324;
                        }
                        v645 = v483;
                        v499 = v484 + 1;
                        v500 = v484[2];
                        v978 = v484[1];
                        v979 = v500;
                        v980 = v484[3];
                        BigString.unicodeScalars.getter();
                        v501 = BigString.UnicodeScalarView.index(_:offsetBy:)();
                        v662 = v502;
                        v663 = v503;
                        v664 = v504;
                        outlined release of Locale((uint64_t)&v898);
                        swift_release_n();
                        v661 = v501;
                        v505 = v501 >> 10;
                        if (v501 >> 10 < v497 || v498 < v505) {
                          goto LABEL_325;
                        }
                        v506 = v484[2];
                        v975 = *v499;
                        v976 = v506;
                        v977 = v484[3];
                        v507 = BigString.startIndex.getter();
                        v509 = v508;
                        v511 = v510;
                        v513 = v512;
                        v514 = BigString.endIndex.getter();
                        v967 = v507;
                        v968 = v509;
                        v969 = v511;
                        v970 = v513;
                        v971 = v514;
                        v972 = v515;
                        v973 = v516;
                        v974 = v517;
                        BigString.unicodeScalars.getter();
                        swift_retain_n();
                        BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)&v899);
                        outlined release of Locale((uint64_t)&v900);
                        swift_release();
                        v518 = v901 >> 10;
                        if (v505 < v901 >> 10) {
                          goto LABEL_326;
                        }
                        v519 = v902 >> 10;
                        if (v902 >> 10 < v505) {
                          goto LABEL_326;
                        }
                        v520 = v484[2];
                        v966[3] = *v499;
                        v966[4] = v520;
                        v646 = v484 + 1;
                        v966[5] = v484[3];
                        BigString.unicodeScalars.getter();
                        v521 = BigString.UnicodeScalarView.index(_:offsetBy:)();
                        v523 = v522;
                        v525 = v524;
                        v527 = v526;
                        outlined release of Locale((uint64_t)&v903);
                        v612 = v484;
                        swift_release_n();
                        v528 = v521 >> 10;
                        if (v521 >> 10 < v518 || v519 < v528) {
                          goto LABEL_327;
                        }
                        v645 = v527;
                        if (v528 < v505) {
                          goto LABEL_328;
                        }
                        v529 = v521;
                        v530 = v523;
                        v531 = v646;
                        v532 = v646[1];
                        v966[0] = *v646;
                        v966[1] = v532;
                        v966[2] = v646[2];
                        BigString.startIndex.getter();
                        BigString.endIndex.getter();
                        BigString.utf16.getter();
                        outlined retain of Locale((uint64_t)v966);
                        v534 = v661;
                        v533 = v662;
                        v536 = v663;
                        v535 = v664;
                        v611 = BigString.UTF16View.distance(from:to:)();
                        outlined release of Locale((uint64_t)&v904);
                        BigString.utf16.getter();
                        v610 = BigString.UTF16View.distance(from:to:)();
                        outlined release of Locale((uint64_t)v966);
                        outlined release of Locale((uint64_t)&v905);
                        v537 = v531[1];
                        v963 = *v531;
                        v964 = v537;
                        v965 = v531[2];
                        BigString.startIndex.getter();
                        BigString.endIndex.getter();
                        v952 = v534;
                        v953 = v533;
                        v954 = v535;
                        v955 = v536;
                        v956 = v529;
                        v957 = v530;
                        v958 = v525;
                        v959 = v645;
                        BigString.unicodeScalars.getter();
                        v538 = (unint64_t)v612;
                        swift_retain();
                        BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)&v906);
                        outlined release of Locale((uint64_t)&v907);
                        v539 = *((_OWORD *)v626 + 1);
                        v913[0] = *(_OWORD *)v626;
                        v913[1] = v539;
                        v540 = *((_OWORD *)v626 + 3);
                        v913[2] = *((_OWORD *)v626 + 2);
                        v913[3] = v540;
                        swift_retain();
                        specialized AttributedString.Guts.getUniformValue<A>(in:key:)(v913, (uint64_t)&v704);
                        if ((void)v706)
                        {
                          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v704,  (uint64_t)&v692);
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                          swift_dynamicCast();
                          outlined destroy of AttributedString._AttributeValue((uint64_t)&v704);
                        }

                        else
                        {
                          outlined destroy of Any?( (uint64_t)&v704,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                          v719 = 0LL;
                          v718 = 0LL;
                          LODWORD(v720) = 0;
                          BYTE4(v720) = -1;
                        }

                        v407 = (unint64_t)v650;
                        v449 = v647;
                        swift_release();
                        v541 = BYTE4(v720);
                        v542 = v720;
                        swift_release();
                        v543 = v646;
                        if (v541 <= 0xFEuLL) {
                          __asm { BR              X9 }
                        }

                        v544 = v646[1];
                        v960 = *v646;
                        v961 = v544;
                        v962 = v646[2];
                        BigString.startIndex.getter();
                        BigString.endIndex.getter();
                        BigString.unicodeScalars.getter();
                        swift_retain();
                        BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)&v909);
                        outlined release of Locale((uint64_t)&v910);
                        v545 = *((_OWORD *)v624 + 1);
                        v912[7] = *(_OWORD *)v624;
                        v912[8] = v545;
                        v546 = *((_OWORD *)v624 + 3);
                        v912[9] = *((_OWORD *)v624 + 2);
                        v912[10] = v546;
                        v547 = *v543;
                        v548 = v543[1];
                        v951[2] = v543[2];
                        v951[1] = v548;
                        v951[0] = v547;
                        swift_retain();
                        outlined retain of Locale((uint64_t)v951);
                        BigString.subscript.getter();
                        outlined release of Locale((uint64_t)v951);
                        outlined release of Locale((uint64_t)v912);
                        swift_release();
                        v705 = v912[3];
                        v706 = v912[4];
                        v707 = v912[5];
                        v708 = v912[6];
                        v704 = v538;
                        v709 = 0LL;
                        lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
                        String.init<A>(_:)();
                        v549 = String._bridgeToObjectiveCImpl()();
                        swift_bridgeObjectRelease();
                        *(void *)&v706 = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
                        v704 = v549;
                        v550 = v616;
                        outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v704,  (uint64_t)&v692,  &demangling cache variable for type metadata for Any?);
                        v551 = v694;
                        if (v694)
                        {
                          v410 = __swift_project_boxed_opaque_existential_1(&v692, v694);
                          v411 = *(void *)(v551 - 8);
                          v412 = MEMORY[0x1895F8858](v410);
                          v414 = (char *)&v609 - ((v413 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                          (*(void (**)(char *, __n128))(v411 + 16))(v414, v412);
                          v415 = _bridgeAnythingToObjectiveC<A>(_:)();
                          (*(void (**)(char *, uint64_t))(v411 + 8))(v414, v551);
                          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v692);
                        }

                        else
                        {
                          v415 = 0LL;
                        }

                        v417 = v614;
                        v416 = v615;
                        v418 = v613;
                        v419 = objc_allocWithZone((Class)&OBJC_CLASS____NSAttributedStringReplacement);
                        objc_msgSend( v419,  sel_initWithIndex_specifierRangeInFormatString_replacementRangeInResult_replacementKind_argument_,  v550,  0x7FFFFFFFFFFFFFFFLL,  0x7FFFFFFFFFFFFFFFLL,  v611,  v610,  0,  v415);
                        v420 = swift_unknownObjectRelease();
                        MEMORY[0x186E1BAC0](v420);
                        if (*(void *)((v690 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v690 & 0xFFFFFFFFFFFFFF8LL)
                                                                                           + 0x18) >> 1)
                          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                        specialized Array._endMutation()();
                        outlined destroy of Any?((uint64_t)&v704, &demangling cache variable for type metadata for Any?);
                      }

                      v406 = v418;
                      v408 = v449;
                      v409 = v417;
                      v400 = (_OWORD *)v416;
                      v398 = v633;
                      v397 = v634;
                      v399 = (char *)v628;
                    }

                    __break(1u);
                    goto LABEL_315;
                  }

                                    uint64_t v2 = v32;
LABEL_128:
                                    MEMORY[0x186E20E60](v19, -1LL, -1LL);
                                    return v2;
                                  }

                                  uint64_t v74 = v61 + 6;
                                }
                              }
                            }
                          }
                        }

LABEL_135:
          swift_release();
          *unint64_t v4 = v8;
          return;
        }

        int64_t v13 = v28;
      }
    }

                      id v88 = (v95 - 1) & v95;
                      id v94 = __clz(__rbit64(v95)) + (v87 << 6);
                    }

                    id v97 = (uint64_t *)(*(void *)(v124 + 48) + 16 * v94);
                    uint64_t v99 = *v97;
                    uint64_t v98 = v97[1];
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v124 + 56) + 72 * v94,  (uint64_t)&v148);
                    __int128 v140 = v150;
                    __int128 v141 = v151;
                    __int128 v142 = v152;
                    __int128 v138 = v148;
                    uint64_t v139 = v149;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    Swift::UInt v100 = Hasher._finalize()();
                    Swift::UInt v101 = -1LL << *(_BYTE *)(v86 + 32);
                    Swift::UInt8 v102 = v100 & ~v101;
                    Swift::UInt8 v103 = v102 >> 6;
                    if (((-1LL << v102) & ~*(void *)(v89 + 8 * (v102 >> 6))) != 0)
                    {
                      id v90 = __clz(__rbit64((-1LL << v102) & ~*(void *)(v89 + 8 * (v102 >> 6)))) | v102 & 0x7FFFFFFFFFFFFFC0LL;
                    }

                    else
                    {
                      Swift::UInt8 v104 = 0;
                      Swift::Int v105 = (unint64_t)(63 - v101) >> 6;
                      do
                      {
                        if (++v103 == v105 && (v104 & 1) != 0) {
                          goto LABEL_153;
                        }
                        uint64_t v106 = v103 == v105;
                        if (v103 == v105) {
                          Swift::UInt8 v103 = 0LL;
                        }
                        v104 |= v106;
                        unint64_t v107 = *(void *)(v89 + 8 * v103);
                      }

                      while (v107 == -1);
                      id v90 = __clz(__rbit64(~v107)) + (v103 << 6);
                    }

                    *(void *)(v89 + ((v90 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v90;
                    id v91 = (void *)(*(void *)(v86 + 48) + 16 * v90);
                    *id v91 = v99;
                    v91[1] = v98;
                    id v92 = *(void *)(v86 + 56) + 72 * v90;
                    *(_OWORD *)(v92 + 16) = v139;
                    *(_OWORD *)(v92 + 32) = v140;
                    *(_OWORD *)(v92 + 48) = v141;
                    *(void *)(v92 + 64) = v142;
                    *(_OWORD *)id v92 = v138;
                    ++*(void *)(v86 + 16);
                    if (!--v120) {
                      goto LABEL_149;
                    }
                  }
                }
              }
            }

            __int128 v36 = v46;
          }

                                      swift_release();
LABEL_136:
                                      swift_release();
                                      uint64_t v9 = v62;
                                      break;
                                    }
                                  }
                                }
                              }
                            }

                            int64_t v65 = v71;
                          }

  if ((_DWORD)v75)
  {
    int64_t v81 = *((void *)v61._rawValue + 2);
    if (v81) {
      goto LABEL_137;
    }
    goto LABEL_140;
  }

  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  char v49 = (void *)swift_allocError();
  *id v96 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_21:
  __int128 v137 = 0LL;
  __int128 v138 = 0LL;
  _So9NSDecimala__exponent_setter(0LL, &v136);
  _So9NSDecimala__length_setter(0LL, &v136);
  _So9NSDecimala__isNegative_setter(1LL, &v136);
  _So9NSDecimala__isCompact_setter_0(0LL, &v136);
  _So9NSDecimala__reserved_setter(&v136);
}

              __int128 v37 = 513LL;
LABEL_152:
              v176 = v37;
              v170 = v6;
              swift_retain_n();
              __int128 v114 = v34;
              swift_retain_n();
              __int128 v115 = v114;
              if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
                goto LABEL_212;
              }
              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
              char v116 = (int)POSIXErrorCode.rawValue.getter();
              uint64_t v117 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
              uint64_t v118 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              int64_t v119 = (char *)objc_msgSend( v117,  sel_initWithDomain_code_userInfo_,  v118,  v116,  _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              unint64_t v60 = v119;
              uint64_t v120 = objc_msgSend(v119, sel_domain);
              uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
              int64_t v13 = v122;

              if (v121 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                && v13 == v123)
              {
                swift_bridgeObjectRelease_n();
              }

              else
              {
                uint64_t v124 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v124 & 1) == 0) {
                  goto LABEL_207;
                }
              }

              unint64_t v11 = v171;
              goto LABEL_158;
            }

    __break(1u);
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }

  __int128 v41 = v172;
  outlined init with take of LocalePreferences?( (uint64_t)v25,  (uint64_t)v172,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  __int128 v42 = (uint64_t)v41 + *(int *)(v164 + 40);
  uint64_t v44 = v41[2];
  uint64_t v43 = v41[3];
  Swift::UInt8 v45 = v41[1];
  uint64_t v46 = swift_getObjectType();
  uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t))(v45 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v48 = v47(v46, v45);
  uint64_t v50 = v49;
  swift_unknownObjectRelease();
  Swift::UInt v51 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v45 + 464);
  swift_unknownObjectRetain();
  v51(v178, v46, v45);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v178,  (uint64_t)v179,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  int64_t v52 = v171;
  outlined init with copy of ICUNumberFormatter.Signature( v42,  v171,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v53 = v169;
  uint64_t v54 = (void *)(v52 + v169[5]);
  *uint64_t v54 = v44;
  v54[1] = v43;
  uint64_t v55 = (uint64_t *)(v52 + v53[6]);
  *uint64_t v55 = v48;
  v55[1] = v50;
  unint64_t v56 = v52;
  int64_t v57 = v52 + v53[7];
  outlined init with take of LocalePreferences?( (uint64_t)v179,  v57,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v58 = *(void *)algn_18C5CBA68;
  v173 = static ICUCurrencyNumberFormatter.cache;
  unint64_t v59 = *(void *)algn_18C5CBA68 + 16LL;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v58 + 24));
  unint64_t v60 = 0LL;
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v58 + 16, v56, (uint64_t *)&v177);
  os_unfair_lock_unlock((os_unfair_lock_t)(v58 + 24));
  swift_release();
  Swift::UInt v61 = v177;
  if (v177 != (void *)1)
  {
    swift_release();
    id v94 = v174;
    goto LABEL_108;
  }

  v170 = 0LL;
  Swift::UInt v62 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)(v56);
  unint64_t v64 = v63;
  int64_t v65 = *v55;
  uint64_t v66 = v55[1];
  outlined init with take of LocalePreferences?( v57,  (uint64_t)v178,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  type metadata accessor for ICUCurrencyNumberFormatter();
  swift_allocObject();
  outlined init with take of LocalePreferences?( (uint64_t)v178,  (uint64_t)v176,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v178);
  Swift::UInt v61 = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v62, v64, v65, v66, (uint64_t)v176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v58 + 24));
  Swift::UInt v67 = *(void *)(*(void *)(v58 + 16) + 16LL);
  int64_t v68 = (os_unfair_lock_s *)(v58 + 24);
  v168 = *(void *)(v58 + 16);
  if (v173 >= v67) {
    swift_bridgeObjectRetain();
  }
  else {
    *(void *)unint64_t v59 = MEMORY[0x18961AFF0];
  }
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v176[0] = *(void *)v59;
  id v96 = v176[0];
  *(void *)unint64_t v59 = 0x8000000000000000LL;
  unint64_t v56 = v171;
  uint64_t v98 = specialized __RawDictionaryStorage.find<A>(_:)(v171);
  uint64_t v99 = *(void *)(v96 + 16);
  Swift::UInt v100 = (v97 & 1) == 0;
  Swift::UInt v101 = v99 + v100;
  id v94 = v174;
  if (__OFADD__(v99, v100))
  {
    __break(1u);
  }

  else
  {
    LODWORD(v59) = v97;
    if (*(void *)(v96 + 24) < v101)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v101,  isUniquelyReferenced_nonNull_native);
      Swift::UInt8 v102 = v176[0];
      Swift::UInt8 v103 = specialized __RawDictionaryStorage.find<A>(_:)(v56);
      if ((v59 & 1) != (v104 & 1)) {
        goto LABEL_142;
      }
      uint64_t v98 = v103;
      if ((v59 & 1) == 0) {
        goto LABEL_106;
      }
LABEL_30:
      Swift::Int v105 = *(void *)(v102 + 56);
      uint64_t v106 = 8 * v98;
      swift_release();
      *(void *)(v105 + v106) = v61;
LABEL_107:
      *(void *)(v58 + 16) = v102;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v68);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??((uint64_t)v177);
      swift_release();
      unint64_t v60 = v170;
LABEL_108:
      outlined destroy of ICUNumberFormatter.Signature( v56,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      if (!v61) {
        goto LABEL_131;
      }
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_initStackObject();
      __int128 v148 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
      if (v60)
      {

LABEL_130:
        swift_release();
        goto LABEL_131;
      }

      MEMORY[0x1895F8858](v148);
      LODWORD(v178[0]) = 0;
      __int128 v149 = unumf_resultToString();
      if (LODWORD(v178[0]) != 15)
      {
        uint64_t v74 = specialized String.init(_utf16:)((uint64_t)(&v161 - 8), v149);
        unint64_t v76 = v155;
        goto LABEL_122;
      }

      __int128 v150 = v149 + 1;
      if (!__OFADD__((_DWORD)v149, 1))
      {
        if ((v150 & 0x80000000) == 0)
        {
          if (v150 < 513 || (__int128 v149 = swift_stdlib_isStackAllocationSafe(), (v149 & 1) != 0))
          {
            MEMORY[0x1895F8858](v149);
            __int128 v152 = (char *)&v161 - v151;
            LODWORD(v176[0]) = 0;
            __int128 v153 = unumf_resultToString();
            if (SLODWORD(v176[0]) <= 0 && v153 > 0)
            {
              uint64_t v74 = specialized String.init(_utf16:)((uint64_t)v152, v153);
              unint64_t v76 = v154;
              goto LABEL_122;
            }

              v180 = (unint64_t)v675;
              v158 = (unint64_t)v671;
            }

            BigString.utf16.getter();
            v226 = BigString.UTF16View.count.getter();
            swift_retain();
            outlined retain of Locale((uint64_t)v1069);
            outlined release of Locale((uint64_t)&v832);
            if (v226 >= v225) {
              break;
            }
            outlined release of Locale((uint64_t)v1069);
            swift_release();
            v180 = (unint64_t)v675;
          }

          v636 = v216;
          BigString.utf16.getter();
          BigString.startIndex.getter();
          v227 = BigString.UTF16View.index(_:offsetBy:)();
          v229 = v233;
          v235 = v234;
          v237 = v236;
          outlined release of Locale((uint64_t)&v833);
          if (v222 >> 14)
          {
            BigString.utf8.getter();
            v227 = BigString.UTF8View.index(_:offsetBy:)();
            v229 = v238;
            v629 = v239;
            v638 = v240;
            outlined release of Locale((uint64_t)&v834);
          }

          else
          {
            v638 = v237;
            v629 = v235;
          }

          outlined release of Locale((uint64_t)v1069);
          v216 = v636;
LABEL_152:
          v241 = v663[1];
          v1066 = *v663;
          v1067 = v241;
          v1068 = v663[2];
          if ((v223 & 0xC) != 8)
          {
            v623 = v229;
            v244 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
            v255 = v254;
            v248 = v256;
            v250 = v257;
            if ((unint64_t)BigString.endIndex.getter() >> 10 >= v244 >> 10)
            {
              v636 = v216;
              v637 = v255;
              goto LABEL_160;
            }

            goto LABEL_134;
          }

          BigString.utf16.getter();
          v242 = BigString.UTF16View.count.getter();
          v1091[0] = v1066;
          v1091[1] = v1067;
          v1091[2] = v1068;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v1091, (uint64_t)v1092);
          outlined retain of Locale((uint64_t)v1092);
          outlined release of Locale((uint64_t)&v835);
          if (v242 < (uint64_t)(v223 >> 16))
          {
            outlined release of Locale((uint64_t)&v1066);
LABEL_134:
            swift_release();
            goto LABEL_135;
          }

          v622 = v227;
          v623 = v229;
          v243 = (unsigned __int16)v223 >> 14;
          BigString.utf16.getter();
          BigString.startIndex.getter();
          v244 = BigString.UTF16View.index(_:offsetBy:)();
          v246 = v245;
          v248 = v247;
          v250 = v249;
          outlined release of Locale((uint64_t)&v836);
          if (v243)
          {
            BigString.utf8.getter();
            v244 = BigString.UTF8View.index(_:offsetBy:)();
            v637 = v251;
            v248 = v252;
            v250 = v253;
            outlined release of Locale((uint64_t)&v837);
          }

          else
          {
            v637 = v246;
          }

          v227 = v622;
          v636 = v216;
          outlined release of Locale((uint64_t)&v1066);
LABEL_160:
          v180 = (unint64_t)v675;
          v258 = v663[1];
          v1063 = *v663;
          v1064 = v258;
          v1065 = v663[2];
          v259 = v227 >> 10;
          swift_release();
          v158 = (unint64_t)v671;
        }

        v260 = BigString.endIndex.getter();
        swift_release();
        BOOL v111 = (uint64_t *)(v244 >> 10);
        if (v244 >> 10 <= v260 >> 10) {
          break;
        }
        v158 = (unint64_t)v671;
      }

      v261 = v663[1];
      v1060 = *v663;
      v1061 = v261;
      v1062 = v663[2];
      v262 = BigString.startIndex.getter();
      v622 = v227;
      v263 = v262;
      v615 = v259;
      v265 = v264;
      v267 = v266;
      id v97 = v268;
      v269 = BigString.endIndex.getter();
      v1052 = v263;
      v1053 = v265;
      v1054 = v267;
      v1055 = v97;
      v270 = v662;
      v1056 = v269;
      v1057 = v271;
      v1058 = v272;
      v1059 = v273;
      BigString.unicodeScalars.getter();
      swift_retain_n();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v838);
      outlined release of Locale((uint64_t)v839);
      swift_release();
      v1001 = v622;
      v1002 = v623;
      v1003 = v629;
      v1004 = v638;
      v1005 = v244;
      v1006 = v637;
      v1007 = v248;
      v1008 = v250;
      if (v615 < v839[6] >> 10 || v839[10] >> 10 < (unint64_t)v111)
      {
        __break(1u);
LABEL_333:
        __break(1u);
        goto LABEL_334;
      }

      v274 = v663[1];
      v1049 = *v663;
      v1050 = v274;
      v1051 = v663[2];
      BigString.unicodeScalars.getter();
      swift_retain();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v840);
      outlined release of Locale((uint64_t)&v841);
      swift_release();
      v275 = *(void *)&v842[32];
      v781 = *(_OWORD *)v842;
      v782 = *(_OWORD *)&v842[16];
      v783 = *(_OWORD *)&v842[32];
      v784 = *(_OWORD *)&v842[48];
      *(void *)&v785 = v270;
      v276 = *(void *)v842;
      *((void *)&v785 + 1) = *(void *)v842;
      v633 = *(void *)&v842[16];
      v634 = *(void *)&v842[8];
      v786 = *(_OWORD *)&v842[8];
      v632 = *(uint64_t **)&v842[24];
      v787 = *(_OWORD *)&v842[24];
      v788 = *(_OWORD *)&v842[40];
      v789 = *(unint64_t *)&v842[56];
      v277 = v677;
      v278 = v677[2];
      v1046 = v677[1];
      v1047 = v278;
      v1048 = v677[3];
      v279 = BigString.startIndex.getter();
      BOOL v111 = v280;
      v282 = v281;
      v284 = v283;
      v285 = BigString.endIndex.getter();
      v1038 = v279;
      v1039 = v111;
      v1040 = v282;
      v1041 = v284;
      v1042 = v285;
      v1043 = v286;
      v1044 = v287;
      v1045 = v288;
      BigString.unicodeScalars.getter();
      swift_retain_n();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v843);
      outlined release of Locale((uint64_t)v844);
      v637 = v277;
      swift_release();
      v1027 = v668;
      v1028 = v642;
      v1029 = v667;
      v1030 = v666;
      v1031 = v636;
      v1032 = v646;
      v1033 = v665;
      v1034 = v649;
      v608 = v668 >> 10;
      if (v668 >> 10 < v844[6] >> 10 || v844[10] >> 10 < v636 >> 10) {
        goto LABEL_333;
      }
      v289 = v637;
      v290 = v637 + 1;
      v291 = v637[2];
      v1035 = v637[1];
      v1036 = v291;
      v1037 = v637[3];
      BigString.unicodeScalars.getter();
      swift_retain();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v845);
      outlined release of Locale((uint64_t)&v846);
      swift_release();
      id v97 = *(void *)v847;
      BOOL v111 = *(uint64_t **)&v847[16];
      v790 = *(_OWORD *)v847;
      v791 = *(_OWORD *)&v847[16];
      v792 = *(_OWORD *)&v847[32];
      v793 = *(_OWORD *)&v847[48];
      *(void *)&v794 = v289;
      *((void *)&v794 + 1) = *(void *)v847;
      v795 = *(_OWORD *)&v847[8];
      v796 = *(_OWORD *)&v847[24];
      v797 = *(_OWORD *)&v847[40];
      v798 = *(unint64_t *)&v847[56];
      v292 = v275 >> 10;
      v293 = *(_OWORD **)&v847[24];
      v665 = *(void *)&v847[32] >> 10;
      v771 = v789;
      v770 = v788;
      v769 = v787;
      v768 = v786;
      v767 = v785;
      v766 = v784;
      v765 = v783;
      v763 = v781;
      v764 = v782;
      v778 = *(_OWORD *)&v847[24];
      v779 = *(_OWORD *)&v847[40];
      v780 = *(unint64_t *)&v847[56];
      v774 = *(_OWORD *)&v847[32];
      v775 = *(_OWORD *)&v847[48];
      v777 = *(_OWORD *)&v847[8];
      v776 = v794;
      v628 = (const void *)(v276 >> 10);
      v636 = *(void *)v847 >> 10;
      v773 = *(_OWORD *)&v847[16];
      v772 = *(_OWORD *)v847;
      swift_retain();
      v294 = v292;
      swift_retain();
      v627 = v292;
      while (2)
      {
        v295 = v276 >> 10;
        v649 = v276 >> 10;
        if (v276 >> 10 != v294)
        {
          v630 = v293;
          v631 = (uint64_t)v111;
          v298 = v663;
          v299 = v663[1];
          v1024 = *v663;
          v1025 = v299;
          v1026 = v663[2];
          BigString.unicodeScalars.getter();
          BOOL v111 = v632;
          LODWORD(v646) = BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v848);
          v300 = *v298;
          v301 = v298[1];
          v1023 = v298[2];
          v1022 = v301;
          v1021 = v300;
          BigString.unicodeScalars.getter();
          outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v781);
          v302 = BigString.UnicodeScalarView.index(after:)();
          v633 = v304;
          v634 = v303;
          v632 = (uint64_t *)v305;
          outlined release of Locale((uint64_t)&v849);
          swift_release();
          if (v627 < v302 >> 10) {
            goto LABEL_285;
          }
          v760 = v787;
          v761 = v788;
          v762 = v789;
          v756 = v783;
          v757 = v784;
          v759 = v786;
          v758 = v785;
          v296 = v97 >> 10;
          v755 = v782;
          v754 = v781;
          v297 = v665;
          BOOL v111 = (uint64_t *)v631;
          if (v97 >> 10 == v665)
          {
            v751 = v778;
            v752 = v779;
            v753 = v780;
            v747 = v774;
            v748 = v775;
            v750 = v777;
            v749 = v776;
            v746 = v773;
            v745 = v772;
LABEL_207:
            outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v745);
            outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v754);
            swift_release();
            swift_release();
            v158 = (unint64_t)v671;
            v172 = v652;
            v180 = (unint64_t)v675;
            goto LABEL_136;
          }

          v276 = v302;
          v294 = v627;
          goto LABEL_177;
        }

        v760 = v769;
        v761 = v770;
        v762 = v771;
        v756 = v765;
        v757 = v766;
        v759 = v768;
        v758 = v767;
        v296 = v97 >> 10;
        v755 = v764;
        v754 = v763;
        v297 = v665;
        if (v97 >> 10 != v665)
        {
          LODWORD(v646) = 0;
LABEL_177:
          if (v296 < v636 || v296 >= v297) {
            goto LABEL_282;
          }
          v306 = v290[1];
          v1018 = *v290;
          v1019 = v306;
          v1020 = v290[2];
          BigString.unicodeScalars.getter();
          v307 = BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v850);
          v308 = v290[1];
          v1015 = *v290;
          v1016 = v308;
          v1017 = v290[2];
          BigString.unicodeScalars.getter();
          outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v790);
          id v97 = BigString.UnicodeScalarView.index(after:)();
          BOOL v111 = v309;
          v293 = v310;
          outlined release of Locale((uint64_t)&v851);
          swift_release();
          if (v665 < v97 >> 10) {
            goto LABEL_283;
          }
          v751 = v796;
          v752 = v797;
          v753 = v798;
          v747 = v792;
          v748 = v793;
          v750 = v795;
          v749 = v794;
          v746 = v791;
          v745 = v790;
          if (v649 == v294 || (_DWORD)v646 != v307) {
            goto LABEL_207;
          }
          v769 = v760;
          v770 = v761;
          v771 = v762;
          v765 = v756;
          v766 = v757;
          v768 = v759;
          v767 = v758;
          v764 = v755;
          v763 = v754;
          v778 = v796;
          v779 = v797;
          v780 = v798;
          v774 = v792;
          v775 = v793;
          v777 = v795;
          v776 = v794;
          v773 = v791;
          v772 = v790;
          continue;
        }

        break;
      }

      v751 = v778;
      v752 = v779;
      v753 = v780;
      v747 = v774;
      v748 = v775;
      v750 = v777;
      v749 = v776;
      v746 = v773;
      v745 = v772;
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v745);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v754);
      v311 = v662;
      swift_release();
      swift_release();
      v312 = v663[1];
      v1012 = *v663;
      v1013 = v312;
      v1014 = v663[2];
      BigString.startIndex.getter();
      BigString.endIndex.getter();
      BigString.unicodeScalars.getter();
      swift_retain();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v852);
      outlined release of Locale((uint64_t)&v853);
      v313 = *((_OWORD *)v613 + 1);
      v901[8] = *(_OWORD *)v613;
      v901[9] = v313;
      v314 = *((_OWORD *)v613 + 3);
      v901[10] = *((_OWORD *)v613 + 2);
      v901[11] = v314;
      AttributedString.Runs.init(_:in:)(v311, v743);
      v315 = v743[0];
      v316 = v743[1];
      v317 = v743[2];
      v318 = v743[3];
      v319 = *(void *)&v743[4];
      v320 = v611;
      v321 = v612;
      v322 = *((_OWORD *)v612 + 5);
      *((_OWORD *)v611 + 4) = *((_OWORD *)v612 + 4);
      v320[5] = v322;
      v323 = v321[7];
      v320[6] = v321[6];
      v320[7] = v323;
      v324 = v321[1];
      *v320 = *v321;
      v320[1] = v324;
      v325 = v321[3];
      v320[2] = v321[2];
      v320[3] = v325;
      v744[0] = v315;
      v744[1] = v316;
      v744[2] = v317;
      v744[3] = v318;
      *(void *)&v744[4] = v319;
      *((void *)&v744[12] + 1) = *((void *)&v315 + 1);
      v744[13] = v316;
      v744[14] = v317;
      v744[15] = v318;
      *(void *)&v744[16] = v319;
      specialized IndexingIterator.next()((uint64_t)v743);
      v665 = *(void *)&v743[0];
      if (*(void *)&v743[0])
      {
        v628 = (const void *)*((void *)&v743[0] + 1);
        v649 = *((void *)&v743[1] + 1);
        v326 = *(void *)&v743[1];
        v646 = *(void *)&v743[2];
        v636 = *((void *)&v743[3] + 1);
        v327 = *(const void **)&v743[3];
        v637 = (_OWORD *)*((void *)&v743[2] + 1);
        v328 = v666;
        v329 = (uint64_t)v667;
        uint64_t v58 = v642;
        id v97 = v668;
        v633 = *((void *)&v743[4] + 1);
        v634 = *(void *)&v743[4];
        v330 = *(void **)&v743[5];
        while (2)
        {
          v631 = v329;
          v632 = (uint64_t *)v328;
          v630 = v58;
          int64_t v28 = v97;
          while (1)
          {
            v621 = v330;
            v626 = v327;
            v627 = v326;
            v331 = v663[1];
            v929 = *v663;
            v930 = v331;
            v931 = v663[2];
            v332 = BigString.startIndex.getter();
            v334 = v333;
            __int128 v114 = v335;
            id v97 = v336;
            v337 = BigString.endIndex.getter();
            v921 = v332;
            v922 = v334;
            v339 = (unint64_t)v626;
            v338 = v627;
            v923 = v114;
            v924 = v97;
            v925 = v337;
            v926 = v340;
            v927 = v341;
            v928 = v342;
            BigString.unicodeScalars.getter();
            swift_retain_n();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)&v855);
            outlined release of Locale((uint64_t)&v856);
            swift_release();
            if (v858 >> 10 < v339 >> 10
              || v339 >> 10 < v857 >> 10
              || v338 >> 10 < v857 >> 10
              || v858 >> 10 < v338 >> 10)
            {
              __break(1u);
LABEL_288:
              __break(1u);
LABEL_289:
              __break(1u);
LABEL_290:
              __break(1u);
LABEL_291:
              __break(1u);
              goto LABEL_292;
            }

            v343 = v663[1];
            v918 = *v663;
            v919 = v343;
            v920 = v663[2];
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.distance(from:to:)();
            outlined release of Locale((uint64_t)&v859);
            swift_release();
            v344 = v677;
            v345 = v677[2];
            v915 = v677[1];
            v916 = v345;
            v917 = v677[3];
            v346 = BigString.startIndex.getter();
            id v97 = v347;
            v349 = v348;
            v351 = v350;
            v352 = BigString.endIndex.getter();
            v907 = v346;
            v908 = v97;
            v909 = v349;
            v910 = v351;
            v911 = v352;
            v912 = v353;
            v913 = v354;
            v914 = v355;
            BigString.unicodeScalars.getter();
            swift_retain_n();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)&v860);
            outlined release of Locale((uint64_t)&v861);
            swift_release();
            __int128 v114 = v28 >> 10;
            uint64_t v58 = (_OWORD *)(v862 >> 10);
            if (v28 >> 10 < v862 >> 10) {
              goto LABEL_288;
            }
            BOOL v111 = (uint64_t *)(v863 >> 10);
            if (v863 >> 10 < v114) {
              goto LABEL_288;
            }
            v356 = v344[2];
            v906[3] = v344[1];
            v906[4] = v356;
            v906[5] = v344[3];
            BigString.unicodeScalars.getter();
            id v97 = BigString.UnicodeScalarView.index(_:offsetBy:)();
            v358 = v357;
            v360 = v359;
            v625 = v361;
            outlined release of Locale((uint64_t)&v864);
            swift_release_n();
            v362 = v97 >> 10;
            if (v362 < v114) {
              goto LABEL_290;
            }
            v624 = v360;
            *(void *)&v710 = v665;
            *((void *)&v710 + 1) = v628;
            LOBYTE(v691) = 1;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              v363 = v344[2];
              v906[0] = v344[1];
              v906[1] = v363;
              v906[2] = v344[3];
              v364 = *((void *)v344 + 8);
              v365 = *((void *)v344 + 9);
              v367 = *((void *)v344 + 10);
              v366 = *((void *)v344 + 11);
              type metadata accessor for AttributedString.Guts();
              swift_allocObject();
              outlined retain of Locale((uint64_t)v906);
              swift_unknownObjectRetain();
              v368 = AttributedString.Guts.init(string:runs:)(v906, v364, v365, v367, v366);
              v677 = (_OWORD *)v368;
              swift_release();
              v344 = (_OWORD *)v368;
            }

            BOOL v111 = &demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?;
            v369 = v344[2];
            v903 = v344[1];
            v904 = v369;
            v905 = v344[3];
            BigString.startIndex.getter();
            BigString.endIndex.getter();
            v902[2] = v28;
            v902[3] = v630;
            v902[4] = v631;
            v902[5] = v632;
            v902[6] = v97;
            uint64_t v58 = v358;
            v902[7] = v358;
            v902[8] = v624;
            v902[9] = v625;
            BigString.unicodeScalars.getter();
            swift_retain_n();
            BigString.UnicodeScalarView.subscript.getter();
            swift_release();
            outlined release of Locale((uint64_t)&v865);
            outlined release of Locale((uint64_t)&v866);
            v370 = v620;
            v371 = v620[1];
            v372 = v660;
            *v660 = *v620;
            v372[1] = v371;
            v373 = v370[3];
            v372[2] = v370[2];
            v372[3] = v373;
            *(void *)&v743[0] = v344;
            if (one-time initialization token for currentIdentity != -1) {
              swift_once();
            }
            v374 = (uint64_t *)(static AttributedString.currentIdentity + 16);
            v375 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
            swift_retain();
            os_unfair_lock_lock(v375);
            v376 = v644;
            closure #1 in static AttributedString._nextModifyIdentity.getter(v374, (uint64_t *)&v725);
            os_unfair_lock_unlock(v375);
            swift_release();
            v377 = v725;
            *((void *)&v743[4] + 1) = v725;
            BigString.init()();
            v725 = 0LL;
            MEMORY[0x186E20E78](&v725, 8LL);
            __int128 v114 = (unint64_t)v725;
            type metadata accessor for AttributedString.Guts();
            int64_t v28 = swift_allocObject();
            if ((BigString.isEmpty.getter() & 1) == 0) {
              goto LABEL_291;
            }
            v378 = v867[5];
            *(_OWORD *)(v28 + 16) = v867[4];
            *(_OWORD *)(v28 + 32) = v378;
            *(_OWORD *)(v28 + 48) = v867[6];
            *(void *)(v28 + 64) = 0LL;
            *(void *)(v28 + 72) = 0LL;
            *(void *)(v28 + 80) = 0LL;
            *(void *)(v28 + 88) = v114;
            swift_release();
            AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v710, (char *)&v691);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v644 = v376;
            v677 = *(_OWORD **)&v743[0];
            swift_release();
            if (!(((v650[2] & 1) == 0) | v635 & 1)) {
              break;
            }
            outlined consume of AttributedString.Runs.Run?(v665);
            specialized IndexingIterator.next()((uint64_t)v743);
            v628 = (const void *)*((void *)&v743[0] + 1);
            v649 = *((void *)&v743[1] + 1);
            v326 = *(void *)&v743[1];
            v637 = (_OWORD *)*((void *)&v743[2] + 1);
            v646 = *(void *)&v743[2];
            v636 = *((void *)&v743[3] + 1);
            v327 = *(const void **)&v743[3];
            v632 = (uint64_t *)v625;
            v633 = *((void *)&v743[4] + 1);
            v634 = *(void *)&v743[4];
            v630 = v58;
            v631 = v624;
            int64_t v28 = v97;
            v330 = *(void **)&v743[5];
            v665 = *(void *)&v743[0];
            if (!*(void *)&v743[0])
            {
              v158 = (unint64_t)v671;
              goto LABEL_209;
            }
          }

          v379 = v665;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized AttributedString._AttributeStorage.subscript.getter(v379, (uint64_t)v743);
          outlined consume of AttributedString.Runs.Run?(v379);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v380 = *((void *)&v743[0] + 1);
          outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v743[0], *((uint64_t *)&v743[0] + 1));
          LODWORD(v635) = v380 != 1;
          specialized IndexingIterator.next()((uint64_t)v743);
          v628 = (const void *)*((void *)&v743[0] + 1);
          v649 = *((void *)&v743[1] + 1);
          v326 = *(void *)&v743[1];
          v637 = (_OWORD *)*((void *)&v743[2] + 1);
          v646 = *(void *)&v743[2];
          v636 = *((void *)&v743[3] + 1);
          v327 = *(const void **)&v743[3];
          v633 = *((void *)&v743[4] + 1);
          v634 = *(void *)&v743[4];
          v330 = *(void **)&v743[5];
          v158 = (unint64_t)v671;
          v665 = *(void *)&v743[0];
          v329 = v624;
          v328 = v625;
          if (*(void *)&v743[0]) {
            continue;
          }
          break;
        }
      }

      else
      {
        v158 = (unint64_t)v671;
      }

                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
                goto LABEL_138;
              }

              uint64_t v7 = v17;
            }
          }
        }
      }

          int64_t v68 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C;
          unint64_t v59 = ((-15LL << v68) - 1) & v59 | (v15 << v68);
          int64_t v13 = *(void *)(v61 + 24 + 24 * v15);
          swift_unknownObjectRetain();
          uint64_t result = (void *)swift_unknownObjectRelease();
          Swift::UInt v61 = v13;
          if (!*(_BYTE *)(v13 + 18)) {
            goto LABEL_177;
          }
        }
      }

      uint64_t result = (void *)swift_unknownObjectRetain_n();
      unint64_t v59 = 0LL;
      unint64_t v60 = v4;
      int64_t v13 = v56;
LABEL_177:
      __int128 v83 = *(unsigned __int16 *)(v13 + 16);
      if (!*(_WORD *)(v13 + 16)) {
        goto LABEL_186;
      }
      id v84 = *(void *)(v13 + 24);
      __int128 v17 = __OFSUB__(v60, v84);
      id v85 = v60 - v84;
      if (v17) {
        goto LABEL_363;
      }
      if (__OFADD__(v85, 1LL)) {
        goto LABEL_367;
      }
      if (v85 + 1 <= 0)
      {
        __int128 v83 = 0LL;
      }

      else
      {
        if ((_DWORD)v83 == 1)
        {
LABEL_187:
          if (v85) {
            goto LABEL_362;
          }
          unint64_t v60 = 0LL;
          goto LABEL_228;
        }

        id v86 = *(void *)(v13 + 48);
        unint64_t v60 = v85 - v86;
        if (__OFSUB__(v85, v86)) {
          goto LABEL_377;
        }
        if (__OFADD__(v60, 1LL)) {
          goto LABEL_378;
        }
        if (v60 + 1 < 1)
        {
          __int128 v83 = 1LL;
          unint64_t v60 = v85;
        }

        else
        {
          if ((_DWORD)v83 == 2)
          {
LABEL_186:
            id v85 = v60;
            goto LABEL_187;
          }

          id v91 = *(void *)(v13 + 72);
          __int128 v17 = __OFSUB__(v60, v91);
          id v85 = v60 - v91;
          if (v17) {
            goto LABEL_389;
          }
          if (__OFADD__(v85, 1LL)) {
            goto LABEL_390;
          }
          if (v85 + 1 < 1)
          {
            __int128 v83 = 2LL;
          }

          else
          {
            if ((_DWORD)v83 == 3) {
              goto LABEL_187;
            }
            id v92 = *(void *)(v13 + 96);
            unint64_t v60 = v85 - v92;
            if (__OFSUB__(v85, v92)) {
              goto LABEL_393;
            }
            if (__OFADD__(v60, 1LL)) {
              goto LABEL_394;
            }
            if (v60 + 1 >= 1)
            {
              if ((_DWORD)v83 != 4)
              {
                if (v83 <= 4) {
                  id v93 = 4LL;
                }
                else {
                  id v93 = *(unsigned __int16 *)(v13 + 16);
                }
                id v94 = (void *)(v13 + 120);
                id v95 = 4LL;
                while (v93 != v95)
                {
                  id v85 = v60 - *v94;
                  if (__OFSUB__(v60, *v94)) {
                    goto LABEL_385;
                  }
                  if (__OFADD__(v85, 1LL)) {
                    goto LABEL_386;
                  }
                  if (v85 + 1 < 1)
                  {
                    __int128 v83 = v95;
                    goto LABEL_228;
                  }

                  ++v95;
                  v94 += 3;
                  unint64_t v60 = v85;
                  if (v83 == v95) {
                    goto LABEL_187;
                  }
                }

      swift_bridgeObjectRetain_n();
      specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v62, v19, v20, v6, v5);
      *(Swift::UInt16_optional *)&uint64_t v58 = String.UTF16View.Iterator.next()();
      uint64_t v6 = v58;
      unint64_t v4 = v63;
      swift_bridgeObjectRelease();
      __int128 v21 = (_WORD *)swift_bridgeObjectRelease();
      if ((v6 & 0x10000) != 0) {
        goto LABEL_54;
      }
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
  }

  else
  {
    unint64_t v4 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
      __break(1u);
      goto LABEL_135;
    }

    __int128 v21 = calloc(v20 + 1, 2uLL);
    if (v21)
    {
      __int128 v19 = (unint64_t)v21;
      *__int128 v21 = v18;
      __int128 v18 = v20;
      if (v4 >= 1)
      {
        ++v21;
        if ((v5 & 0x1000000000000000LL) == 0)
        {
          if ((v20 & 0x8000000000000000LL) == 0)
          {
            String._copyUTF16CodeUnits(into:range:)();
            goto LABEL_73;
          }

          goto LABEL_141;
        }

      unint64_t v72 = *(id *)&v88[1];
      free(v83);
      objc_autoreleasePoolPop(v29);
      uint64_t result = *(id *)&v88[1];
      break;
  }

  return result;
}

LABEL_138:
                __break(1u);
                goto LABEL_139;
              }

              int64_t v52 = v65;
            }
          }
        }

  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
}

                  __int128 v83 = v88;
LABEL_139:
                  if (v83) {
                    goto LABEL_294;
                  }
                  goto LABEL_140;
                }

                id v86 = 2LL;
              }
            }

              unint64_t v64 = (4 * *(_BYTE *)(v63 + 18) + 8) & 0x3C;
              Swift::UInt v61 = ((-15LL << v64) - 1) & v61 | (v65 << v64);
              uint64_t v10 = *(void *)(v63 + 24 + 24 * v65);
              swift_unknownObjectRetain();
              uint64_t result = (void *)swift_unknownObjectRelease();
              int64_t v63 = v10;
              if (!*(_BYTE *)(v10 + 18)) {
                goto LABEL_171;
              }
            }
          }

          uint64_t result = (void *)swift_unknownObjectRetain_n();
          Swift::UInt v61 = 0LL;
          Swift::UInt v62 = v101;
          uint64_t v10 = v59;
LABEL_171:
          unint64_t v75 = *(unsigned __int16 *)(v10 + 16);
          if (!*(_WORD *)(v10 + 16)) {
            goto LABEL_182;
          }
          unint64_t v76 = *(void *)(v10 + 24);
          uint64_t v12 = __OFSUB__(v62, v76);
          Swift::UInt v77 = v62 - v76;
          if (v12) {
            goto LABEL_308;
          }
          if (__OFADD__(v77, 1LL)) {
            goto LABEL_309;
          }
          if (v77 + 1 <= 0)
          {
            unint64_t v75 = 0LL;
          }

          else
          {
            if ((_DWORD)v75 == 1) {
              goto LABEL_176;
            }
            Swift::UInt v78 = *(void *)(v10 + 48);
            Swift::UInt v62 = v77 - v78;
            if (__OFSUB__(v77, v78)) {
              goto LABEL_318;
            }
            if (__OFADD__(v62, 1LL))
            {
LABEL_319:
              __break(1u);
LABEL_320:
              __break(1u);
              goto LABEL_321;
            }

            if (v62 + 1 < 1)
            {
              unint64_t v75 = 1LL;
              Swift::UInt v62 = v77;
            }

            else
            {
              if ((_DWORD)v75 == 2) {
                goto LABEL_182;
              }
              int64_t v81 = *(void *)(v10 + 72);
              uint64_t v12 = __OFSUB__(v62, v81);
              Swift::UInt v77 = v62 - v81;
              if (v12) {
                goto LABEL_322;
              }
              if (__OFADD__(v77, 1LL)) {
                goto LABEL_323;
              }
              if (v77 + 1 < 1)
              {
                unint64_t v75 = 2LL;
              }

              else
              {
                if ((_DWORD)v75 != 3)
                {
                  __int128 v82 = 3LL;
                  if (v75 > 3) {
                    __int128 v82 = *(unsigned __int16 *)(v10 + 16);
                  }
                  __int128 v83 = (void *)(v10 + 96);
                  id v84 = 3LL;
                  while (v82 != v84)
                  {
                    Swift::UInt v62 = v77 - *v83;
                    if (__OFSUB__(v77, *v83)) {
                      goto LABEL_313;
                    }
                    if (__OFADD__(v62, 1LL)) {
                      goto LABEL_314;
                    }
                    if (v62 + 1 < 1)
                    {
                      unint64_t v75 = v84;
                      Swift::UInt v62 = v77;
                      goto LABEL_183;
                    }

                    ++v84;
                    v83 += 3;
                    Swift::UInt v77 = v62;
                    if (v75 == v84) {
                      goto LABEL_182;
                    }
                  }

                  goto LABEL_312;
                }

  if ((_DWORD)v59)
  {
    uint64_t v74 = *(void *)(v36 + 16);
    if (v74) {
      goto LABEL_140;
    }
    goto LABEL_143;
  }

  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  id v91 = swift_allocError();
  *id v92 = 0;
  swift_willThrow();
  uint64_t v30 = (void *)v91;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_16:
  __int128 v134 = 0LL;
  __int128 v135 = 0LL;
  _So9NSDecimala__exponent_setter(0LL, &v133);
  _So9NSDecimala__length_setter(0LL, &v133);
  _So9NSDecimala__isNegative_setter(1LL, &v133);
  _So9NSDecimala__isCompact_setter_0(0LL, &v133);
  _So9NSDecimala__reserved_setter(&v133);

  __int128 v17 = v133;
  LOWORD(v6) = v134;
  LOWORD(v7) = WORD1(v134);
  LOWORD(v8) = WORD2(v134);
  LOWORD(v9) = HIWORD(v134);
  LOWORD(v10) = v135;
  LOWORD(v11) = WORD1(v135);
  LOWORD(v5) = WORD2(v135);
  LOWORD(v18) = HIWORD(v135);
LABEL_17:
  uint64_t v32 = a1;
LABEL_20:
  void *v32 = v17;
  *((_WORD *)v32 + 2) = v6;
  *((_WORD *)v32 + 3) = v7;
  *((_WORD *)v32 + 4) = v8;
  *((_WORD *)v32 + 5) = v9;
  *((_WORD *)v32 + 6) = v10;
  *((_WORD *)v32 + 7) = v11;
  *((_WORD *)v32 + 8) = v5;
  *((_WORD *)v32 + 9) = v18;
}

  if ((_DWORD)v76)
  {
    id v84 = *(void *)(v57 + 16);
    if (v84) {
      goto LABEL_140;
    }
    goto LABEL_143;
  }

  if ((_DWORD)v76)
  {
    id v84 = *(void *)(v57 + 16);
    if (v84) {
      goto LABEL_140;
    }
    goto LABEL_143;
  }

                                swift_bridgeObjectRelease();
                                __int128 v22 = v109;
                                if ((v3 & 1) == 0)
                                {
LABEL_139:
                                  specialized _NativeDictionary._insert(at:key:value:)(v22, a1, a2, v10, v28);
                                  swift_bridgeObjectRetain();
LABEL_140:
                                  *(void *)(v4 + 104) = v28;
                                  swift_unknownObjectRelease();
LABEL_141:
                                  swift_bridgeObjectRelease();
LABEL_142:
                                  swift_bridgeObjectRelease();
                                  return (char *)v10;
                                }

                    __break(1u);
LABEL_139:
                    __break(1u);
                  }

                  uint64_t v44 = v33 + 6;
                }
              }
            }
          }
        }

                                v1 = v73;
LABEL_139:
                                MEMORY[0x186E20E60](v100, -1LL, -1LL);
                                return v1;
                              }

                              uint64_t v74 = v84;
                            }
                          }
                        }
                      }

      __break(1u);
      goto LABEL_139;
    }
  }

  __break(1u);
LABEL_145:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

LABEL_63:
        unint64_t v56 = (v64 - 1) & v64;
        unint64_t v60 = __clz(__rbit64(v64)) + (v52 << 6);
      }

      Swift::UInt v61 = *(unsigned __int8 *)(*(void *)(v50 + 48) + v60);
      Swift::UInt v62 = *(void *)(*(void *)(v50 + 56) + 8 * v60);
      __int128 v135 = v133;
      __int128 v136 = v131;
      __int128 v137 = v129;
      __int128 v138 = v127;
      uint64_t v139 = v58;
      Hasher._combine(_:)(v61);
      Hasher._combine(_:)(v62);
      v51 ^= Hasher._finalize()();
    }
  }

  Hasher._combine(_:)(0);
  uint64_t v66 = *((void *)&v149 + 1);
  if (!*((void *)&v149 + 1)) {
    goto LABEL_88;
  }
LABEL_65:
  Hasher._combine(_:)(1u);
  Swift::UInt v67 = 0LL;
  int64_t v68 = 0LL;
  uint64_t v69 = v66 + 64;
  uint64_t v70 = 1LL << *(_BYTE *)(v66 + 32);
  if (v70 < 64) {
    uint64_t v71 = ~(-1LL << v70);
  }
  else {
    uint64_t v71 = -1LL;
  }
  unint64_t v72 = v71 & *(void *)(v66 + 64);
  int64_t v73 = (unint64_t)(v70 + 63) >> 6;
  __int128 v132 = v141;
  __int128 v134 = v140;
  __int128 v128 = v143;
  __int128 v130 = v142;
  uint64_t v74 = v144;
  while (1)
  {
    if (v72)
    {
      unint64_t v75 = __clz(__rbit64(v72));
      v72 &= v72 - 1;
      unint64_t v76 = v75 | (v68 << 6);
      goto LABEL_70;
    }

    int64_t v79 = v68 + 1;
    if (__OFADD__(v68, 1LL)) {
      goto LABEL_137;
    }
    if (v79 >= v73)
    {
LABEL_86:
      swift_bridgeObjectRetain();
      Hasher._combine(_:)(v67);
      swift_bridgeObjectRelease();
      goto LABEL_89;
    }

    unint64_t v80 = *(void *)(v69 + 8 * v79);
    ++v68;
    if (!v80)
    {
      int64_t v68 = v79 + 1;
      if (v79 + 1 >= v73) {
        goto LABEL_86;
      }
      unint64_t v80 = *(void *)(v69 + 8 * v68);
      if (!v80)
      {
        int64_t v68 = v79 + 2;
        if (v79 + 2 >= v73) {
          goto LABEL_86;
        }
        unint64_t v80 = *(void *)(v69 + 8 * v68);
        if (!v80) {
          break;
        }
      }
    }

      __break(1u);
      goto LABEL_64;
    }

    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }

  uint64_t result = swift_unknownObjectRetain_n();
  unint64_t v14 = v8;
  do
  {
    uint64_t v16 = *(unsigned __int16 *)(v14 + 16);
    if (*(_WORD *)(v14 + 16))
    {
      __int128 v17 = *(void *)(v14 + 40);
      __int128 v18 = __OFSUB__(v9, v17);
      __int128 v19 = v9 - v17;
      if (v18) {
        goto LABEL_59;
      }
      if (__OFADD__(v19, 1LL)) {
        goto LABEL_60;
      }
      if (v19 + 1 < 1)
      {
        uint64_t v16 = 0LL;
        goto LABEL_17;
      }

      if ((_DWORD)v16 != 1)
      {
        __int128 v20 = (uint64_t *)(v14 + 64);
        __int128 v21 = 1LL;
        while (1)
        {
          __int128 v22 = *v20;
          v20 += 3;
          uint64_t v9 = v19 - v22;
          if (__OFSUB__(v19, v22)) {
            break;
          }
          if (__OFADD__(v9, 1LL)) {
            goto LABEL_57;
          }
          if (v9 + 1 < 1)
          {
            uint64_t v16 = v21;
            uint64_t v9 = v19;
            goto LABEL_17;
          }

          ++v21;
          __int128 v19 = v9;
          if (v16 == v21) {
            goto LABEL_16;
          }
        }

        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }

      uint64_t v9 = v19;
    }

      if ((v23 & 1) != 0)
      {
        if (v140) {
          goto LABEL_82;
        }
        if ((_DWORD)v31 == (_DWORD)v39) {
          goto LABEL_66;
        }
        goto LABEL_84;
      }

      uint64_t v48 = Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)(a5 & 1, v129 & 1, a7 & 1, v31);
      uint64_t v50 = v49;
      Swift::UInt v51 = specialized Collection.first.getter(v48, v49);
      if ((v51 & 0x100000000LL) != 0)
      {
        swift_bridgeObjectRelease();
        if (v140)
        {
          __int128 v17 = a12;
          __int128 v19 = a10;
          __int128 v18 = a11;
          uint64_t v16 = a13;
          __int128 v20 = v124;
          if (v137 != v139) {
            goto LABEL_202;
          }
          goto LABEL_240;
        }

        __int128 v23 = 0;
        goto LABEL_85;
      }

      int64_t v52 = v51;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      __int128 v143 = 15LL;
      uint64_t v53 = _StringGuts.validateScalarIndex(_:)(0xFuLL, v48, v50);
      if ((v50 & 0x1000000000000000LL) != 0)
      {
        uint64_t v58 = String.UnicodeScalarView._foreignIndex(after:)();
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v54 = v53 >> 16;
        if ((v50 & 0x2000000000000000LL) != 0)
        {
          __int128 v141 = v48;
          __int128 v142 = v50 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v55 = *((unsigned __int8 *)&v141 + v54);
        }

        else
        {
          uint64_t v55 = (v48 & 0x1000000000000000LL) != 0
        }

        swift_bridgeObjectRelease();
        unint64_t v56 = __clz(v55 ^ 0xFF) - 24;
        int64_t v57 = (v55 & 0x80u) == 0 ? 1 : v56;
        uint64_t v58 = ((v54 + v57) << 16) | 5;
      }

      __int128 v143 = v58;
      if (v140) {
        break;
      }
      int64_t v28 = v50;
      unint64_t v25 = v48;
      LODWORD(v31) = v52;
      if (v52 == (_DWORD)v39)
      {
LABEL_66:
        uint64_t v47 = 0;
        __int128 v17 = a12;
        uint64_t v16 = a13;
        if ((v28 & 0x2000000000000000LL) != 0) {
          goto LABEL_151;
        }
        goto LABEL_149;
      }

    specialized _NativeDictionary._insert(at:key:value:)(v2, 32LL, v235, v6, (void *)v4);
LABEL_64:
    v242 = v4;
    swift_bridgeObjectRelease();
    if (v7 < 2) {
      goto LABEL_17;
    }
LABEL_65:
    swift_bridgeObjectRetain();
    uint64_t v3 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(64LL);
    int64_t v65 = *(void *)(v4 + 16);
    uint64_t v66 = (v64 & 1) == 0;
    Swift::UInt v67 = v65 + v66;
    if (!__OFADD__(v65, v66)) {
      break;
    }
LABEL_81:
    __break(1u);
LABEL_82:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    int64_t v73 = static _DictionaryStorage.copy(original:)();
    uint64_t v74 = MEMORY[0x18961AFF0];
    uint64_t v9 = v73;
    unint64_t v75 = *(void *)(MEMORY[0x18961AFF0] + 16LL);
    if (v75)
    {
      unint64_t v76 = (void *)(v73 + 64);
      Swift::UInt v77 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
      if (v9 != MEMORY[0x18961AFF0] || (unint64_t)v76 >= MEMORY[0x18961AFF0] + 8 * v77 + 64)
      {
        memmove(v76, (const void *)(MEMORY[0x18961AFF0] + 64LL), 8 * v77);
        uint64_t v74 = MEMORY[0x18961AFF0];
      }

      Swift::UInt v78 = 0LL;
      *(void *)(v9 + 16) = v75;
      int64_t v79 = 1LL << *(_BYTE *)(v74 + 32);
      unint64_t v80 = *(void *)(v74 + 64);
      int64_t v81 = -1LL;
      if (v79 < 64) {
        int64_t v81 = ~(-1LL << v79);
      }
      __int128 v82 = v81 & v80;
      __src = (void *)((unint64_t)(v79 + 63) >> 6);
      while (1)
      {
        if (v82)
        {
          __int128 v83 = __clz(__rbit64(v82));
          v82 &= v82 - 1;
          id v84 = v83 | (v78 << 6);
          id v85 = MEMORY[0x18961AFF0];
        }

        else
        {
          id v93 = __OFADD__(v78++, 1LL);
          id v85 = MEMORY[0x18961AFF0];
          if (v93)
          {
            __break(1u);
LABEL_321:
            __break(1u);
LABEL_322:
            __break(1u);
LABEL_323:
            __break(1u);
LABEL_324:
            __break(1u);
LABEL_325:
            __break(1u);
LABEL_326:
            __break(1u);
            goto LABEL_327;
          }

          id v94 = *(void *)(MEMORY[0x18961AFF0] + 8 * v78 + 64);
          if (!v94)
          {
            id v95 = v78 + 1;
            id v94 = *(void *)(MEMORY[0x18961AFF0] + 8 * v95 + 64);
            if (!v94)
            {
              id v95 = v78 + 2;
              id v94 = *(void *)(MEMORY[0x18961AFF0] + 8 * v95 + 64);
              if (!v94)
              {
                id v95 = v78 + 3;
                id v94 = *(void *)(MEMORY[0x18961AFF0] + 8 * v95 + 64);
                if (!v94)
                {
                  id v95 = v78 + 4;
                  id v94 = *(void *)(MEMORY[0x18961AFF0] + 8 * v95 + 64);
                  if (!v94)
                  {
                    id v95 = v78 + 5;
                    id v94 = *(void *)(MEMORY[0x18961AFF0] + 8 * v95 + 64);
                    if (!v94)
                    {
                      id v95 = v78 + 6;
                      id v94 = *(void *)(MEMORY[0x18961AFF0] + 8 * v95 + 64);
                      if (!v94)
                      {
                        id v95 = v78 + 7;
                        id v94 = *(void *)(MEMORY[0x18961AFF0] + 8 * v95 + 64);
                        if (!v94)
                        {
                          while (1)
                          {
                            Swift::UInt v78 = v95 + 1;
                            if (__OFADD__(v95, 1LL)) {
                              break;
                            }
                            id v85 = MEMORY[0x18961AFF0];
                            id v94 = *(void *)(MEMORY[0x18961AFF0] + 8 * v78 + 64);
                            ++v95;
                            if (v94) {
                              goto LABEL_110;
                            }
                          }

                              int64_t v79 = *(void *)(v76 + 56) + 16 * v71;
                              outlined consume of Data._Representation(*(void *)v79, *(void *)(v79 + 8));
                              unint64_t v80 = v157;
                              *(void *)int64_t v79 = v28;
                              *(void *)(v79 + 8) = v80;
LABEL_68:
                              v165 = v76;
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              goto LABEL_42;
                            }
                          }
                        }
                      }
                    }
                  }
                }

                __int128 v130 = v144;
              }

            uint64_t v29 = 256LL;
          }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_21;
          }
        }

        __break(1u);
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }

      goto LABEL_74;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::UInt v51 = MEMORY[0x18961AFE8];
LABEL_21:
  memset(v69, 0, 20);
  LODWORD(v65) = a1;
  WORD2(v65) = v61;
  HIWORD(v65) = v57;
  LOWORD(v66) = a2;
  WORD1(v66) = v52;
  WORD2(v66) = v58;
  HIWORD(v66) = v60;
  Swift::UInt v67 = a3;
  int64_t v68 = v59;
  isNegative_getter = _So9NSDecimala__isNegative_getter(&v65);
  int64_t v65 = a4;
  uint64_t v66 = a5;
  Swift::UInt v67 = v10;
  int64_t v68 = v55;
  int64_t v26 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v65);
  _So9NSDecimala__isNegative_setter(v26, v69);
  LODWORD(v65) = a1;
  WORD2(v65) = v61;
  HIWORD(v65) = v57;
  LOWORD(v66) = a2;
  WORD1(v66) = v52;
  WORD2(v66) = v58;
  HIWORD(v66) = v60;
  Swift::UInt v67 = a3;
  int64_t v68 = v59;
  unint64_t v27 = _So9NSDecimala__exponent_getter((char *)&v65);
  LODWORD(v65) = v56;
  WORD2(v65) = v54;
  HIWORD(v65) = v53;
  uint64_t v66 = a5;
  Swift::UInt v67 = v10;
  int64_t v68 = v55;
  int64_t v28 = _So9NSDecimala__exponent_getter((char *)&v65) + v27;
  v29._rawValue = (void *)v51;
  if (*(void *)(v51 + 16) >= 9uLL)
  {
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v51, 0LL);
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    if (v33 > 0x7FFFFFFF)
    {
LABEL_72:
      __break(1u);
    }

    else
    {
      uint64_t v34 = __OFADD__((_DWORD)v28, (_DWORD)v33);
      int64_t v28 = (v28 + v33);
      if (!v34)
      {
        v29._rawValue = v31;
        goto LABEL_26;
      }
    }

    __break(1u);
LABEL_74:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_75;
  }

            LODWORD(v29) = 0;
            LOBYTE(v95[0]) = 1;
            goto LABEL_66;
          }

          LOBYTE(v24) = 1;
        }

        LOBYTE(v95[0]) = v24;
        LODWORD(v29) = 0;
        goto LABEL_66;
      }

      __int128 v21 = 0LL;
LABEL_83:
      swift_bridgeObjectRelease();
      uint64_t v58 = 0LL;
      LOBYTE(v59) = v104;
      BYTE1(v59) = v103;
      BYTE2(v59) = v102;
      BYTE3(v59) = v101;
      BYTE4(v59) = v100;
      BYTE5(v59) = v99;
      BYTE6(v59) = v98;
      HIBYTE(v59) = v97;
      unint64_t v60 = v96;
      *(_DWORD *)Swift::UInt v61 = v95[0];
      *(_DWORD *)&v61[3] = *(_DWORD *)((char *)v95 + 3);
      Swift::UInt v62 = 0u;
      int64_t v63 = 0u;
      unint64_t v64 = 0u;
      int64_t v65 = 0u;
      uint64_t v66 = 0LL;
      Swift::UInt v67 = v94;
      *(_DWORD *)int64_t v68 = *(_DWORD *)v93;
      *(_DWORD *)&v68[3] = *(_DWORD *)&v93[3];
      uint64_t v69 = 0LL;
      uint64_t v70 = 0LL;
      uint64_t v71 = v56;
      unint64_t v72 = v57;
      int64_t v73 = 0LL;
      uint64_t v74 = 0LL;
      unint64_t v75 = v92;
      unint64_t v76 = v91;
      outlined release of URLComponents((uint64_t)&v58);
    }

    else
    {
      outlined release of URLComponents((uint64_t)&v77);
      return 0LL;
    }

    return v21;
  }

  unint64_t v64 = v60 == 0x7FFFFFFFFFFFFFFFLL;
  if (v60 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v60 = 0LL;
  }
LABEL_65:
  v182 = v60;
  LOBYTE(v212) = v64;
  if (v218 == 1)
  {
    if ((v201 & 1) == 0 && v45 <= v199) {
      Swift::UInt8 v45 = v199;
    }
    if (v45 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v199 = 0LL;
      v201 = 1;
    }

    else
    {
      v201 = 0;
      v199 = v45;
    }

    v174 = *(void *)&v233[6];
    v173 = BYTE8(v233[6]);
    v172 = *(void *)&v233[16];
    v176 = *(void *)&v233[17];
    __int128 v149 = *((void *)&v233[0] + 1);
    __int128 v150 = *(void *)&v233[0];
    v230[0] = v233[0];
    __int128 v147 = *((void *)&v233[1] + 1);
    __int128 v148 = *(void *)&v233[1];
    v230[1] = v233[1];
    __int128 v146 = *(void *)&v233[2];
    *(void *)&v230[2] = *(void *)&v233[2];
    v145 = BYTE8(v233[2]);
    BYTE8(v230[2]) = BYTE8(v233[2]);
    *(void *)&v230[3] = v199;
    BYTE8(v230[3]) = v201;
    *(void *)&v230[4] = v175;
    BYTE8(v230[4]) = v208 == 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&v230[5] = 1LL;
    BYTE8(v230[5]) = 0;
    *(void *)&v230[6] = *(void *)&v233[6];
    BYTE8(v230[6]) = BYTE8(v233[6]);
    v170 = *(void *)&v233[7];
    *(void *)&v230[7] = *(void *)&v233[7];
    v169 = BYTE8(v233[7]);
    BYTE8(v230[7]) = BYTE8(v233[7]);
    v168 = *(void *)&v233[8];
    *(void *)&v230[8] = *(void *)&v233[8];
    v167 = BYTE8(v233[8]);
    BYTE8(v230[8]) = BYTE8(v233[8]);
    v166 = *(void *)&v233[9];
    *(void *)&v230[9] = *(void *)&v233[9];
    v165 = BYTE8(v233[9]);
    BYTE8(v230[9]) = BYTE8(v233[9]);
    v164 = *(void *)&v233[10];
    *(void *)&v230[10] = *(void *)&v233[10];
    v163 = BYTE8(v233[10]);
    BYTE8(v230[10]) = BYTE8(v233[10]);
    v162 = *(void *)&v233[11];
    *(void *)&v230[11] = *(void *)&v233[11];
    v161 = BYTE8(v233[11]);
    BYTE8(v230[11]) = BYTE8(v233[11]);
    v160 = *(void *)&v233[12];
    *(void *)&v230[12] = *(void *)&v233[12];
    v159 = BYTE8(v233[12]);
    BYTE8(v230[12]) = BYTE8(v233[12]);
    v158 = *(void *)&v233[13];
    *(void *)&v230[13] = *(void *)&v233[13];
    v157 = BYTE8(v233[13]);
    BYTE8(v230[13]) = BYTE8(v233[13]);
    v156 = *(void *)&v233[14];
    *(void *)&v230[14] = *(void *)&v233[14];
    v155 = BYTE8(v233[14]);
    BYTE8(v230[14]) = BYTE8(v233[14]);
    __int128 v154 = *(void *)&v233[15];
    *(void *)&v230[15] = *(void *)&v233[15];
    __int128 v152 = BYTE8(v233[16]);
    __int128 v153 = BYTE8(v233[15]);
    BYTE8(v230[15]) = BYTE8(v233[15]);
    BYTE8(v230[16]) = BYTE8(v233[16]);
    *(void *)&v230[16] = *(void *)&v233[16];
    *(void *)&v230[17] = *(void *)&v233[17];
    __int128 v151 = BYTE8(v233[17]);
    WORD4(v230[17]) = WORD4(v233[17]);
    __int128 v143 = BYTE9(v233[17]);
    memcpy(v229, v230, 0x11AuLL);
    unint64_t v80 = *(void (**)(_OWORD *__return_ptr, __int128 *, uint64_t, uint64_t))(v42 + 176);
    outlined retain of DateComponents((uint64_t)v230);
    v80(v228, v229, ObjectType, v42);
    outlined release of DateComponents((uint64_t)v230);
    unint64_t v76 = *(double *)v228;
    if ((BYTE8(v228[0]) & 1) != 0) {
      goto LABEL_94;
    }
    *(void *)&v229[0] = v41;
    *((void *)&v229[0] + 1) = v42;
    LOBYTE(v224[0]) = 2;
    *(void *)&v225[0] = *(void *)&v228[0];
    Calendar.date(byAdding:value:to:wrappingComponents:)( (Foundation::Calendar::Component)v224,  1LL,  v81,  (Swift::Bool)v225);
    Swift::UInt8 v102 = *(double *)v228;
    id v84 = v207;
    if ((BYTE8(v228[0]) & 1) != 0)
    {
      outlined release of DateComponents((uint64_t)v230);
      outlined release of DateComponents((uint64_t)__dst);
      *(double *)v221 = v102;
      *(_BYTE *)(v221 + 8) = 1;
      v229[0] = v59;
      v229[1] = v58;
      *(void *)&v229[2] = v196;
      BYTE8(v229[2]) = v197;
      *(void *)&v229[3] = v199;
      BYTE8(v229[3]) = v201;
      *(void *)&v229[4] = v208;
      BYTE8(v229[4]) = 0;
      *(void *)&v229[5] = v203;
      BYTE8(v229[5]) = 0;
      *(void *)&v229[6] = v180;
      BYTE8(v229[6]) = v181;
      *(void *)&v229[7] = v205;
      BYTE8(v229[7]) = v204;
      *(void *)&v229[8] = v210;
      BYTE8(v229[8]) = v206;
      *(void *)&v229[9] = v182;
      BYTE8(v229[9]) = v212;
      *(void *)&v229[10] = v183;
      BYTE8(v229[10]) = v184;
      *(void *)&v229[11] = v185;
      BYTE8(v229[11]) = v186;
      *(void *)&v229[12] = v187;
      BYTE8(v229[12]) = v188;
      *(void *)&v229[13] = v189;
      BYTE8(v229[13]) = v190;
      *(void *)&v229[14] = v191;
      BYTE8(v229[14]) = v192;
      *(void *)&v229[15] = v193;
      BYTE8(v229[15]) = v194;
      BYTE8(v229[16]) = v195;
      *(void *)&v229[16] = v178;
      *(void *)&v229[17] = v198;
LABEL_120:
      BYTE8(v229[17]) = v179;
      BYTE9(v229[17]) = v177;
      return (char *)outlined release of DateComponents((uint64_t)v229);
    }

    char v109 = *(double *)v228;
    *(void *)&v228[0] = 4LL;
    if (v102 > 1.59271755e13) {
      char v109 = 1.59271755e13;
    }
    *(void *)&v225[0] = fmax(v109, -2.11845067e11);
    ((void (*)(__int128 *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))v213)( v229,  v228,  v225,  ObjectType,  v42);
    outlined release of DateComponents((uint64_t)v229);
    id v97 = 0;
    unint64_t v110 = *(void *)&v229[4];
    if (BYTE8(v229[4])) {
      unint64_t v110 = 0LL;
    }
    id v96 = v110 == 0x7FFFFFFFFFFFFFFFLL;
    if (v110 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v99 = 0LL;
    }
    else {
      uint64_t v99 = v110;
    }
    uint64_t v98 = 1LL;
    Swift::UInt v101 = v199;
    id v94 = v199;
    Swift::UInt v100 = v201;
    id v95 = v201;
    id v91 = v197;
    id v85 = v196;
    id v86 = *((void *)&v58 + 1);
    id v87 = v58;
    id v92 = v208;
    id v93 = v175;
    int64_t v73 = v172;
    id v90 = v212;
    goto LABEL_129;
  }

  v174 = *(void *)&v233[6];
  v173 = BYTE8(v233[6]);
  BYTE8(v230[3]) = v45 == 0x7FFFFFFFFFFFFFFFLL;
  __int128 v149 = *((void *)&v233[0] + 1);
  __int128 v150 = *(void *)&v233[0];
  v230[0] = v233[0];
  __int128 v147 = *((void *)&v233[1] + 1);
  __int128 v148 = *(void *)&v233[1];
  v230[1] = v233[1];
  __int128 v146 = *(void *)&v233[2];
  *(void *)&v230[2] = *(void *)&v233[2];
  v145 = BYTE8(v233[2]);
  BYTE8(v230[2]) = BYTE8(v233[2]);
  *(void *)&v230[3] = v171;
  *(void *)&v230[4] = v175;
  BYTE8(v230[4]) = v208 == 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&v230[5] = 1LL;
  BYTE8(v230[5]) = 0;
  *(void *)&v230[6] = *(void *)&v233[6];
  BYTE8(v230[6]) = BYTE8(v233[6]);
  v170 = *(void *)&v233[7];
  *(void *)&v230[7] = *(void *)&v233[7];
  v169 = BYTE8(v233[7]);
  BYTE8(v230[7]) = BYTE8(v233[7]);
  v168 = *(void *)&v233[8];
  *(void *)&v230[8] = *(void *)&v233[8];
  v167 = BYTE8(v233[8]);
  BYTE8(v230[8]) = BYTE8(v233[8]);
  v166 = *(void *)&v233[9];
  *(void *)&v230[9] = *(void *)&v233[9];
  v165 = BYTE8(v233[9]);
  BYTE8(v230[9]) = BYTE8(v233[9]);
  v164 = *(void *)&v233[10];
  *(void *)&v230[10] = *(void *)&v233[10];
  v163 = BYTE8(v233[10]);
  BYTE8(v230[10]) = BYTE8(v233[10]);
  v162 = *(void *)&v233[11];
  *(void *)&v230[11] = *(void *)&v233[11];
  v161 = BYTE8(v233[11]);
  BYTE8(v230[11]) = BYTE8(v233[11]);
  v160 = *(void *)&v233[12];
  *(void *)&v230[12] = *(void *)&v233[12];
  v159 = BYTE8(v233[12]);
  BYTE8(v230[12]) = BYTE8(v233[12]);
  v158 = *(void *)&v233[13];
  *(void *)&v230[13] = *(void *)&v233[13];
  v157 = BYTE8(v233[13]);
  BYTE8(v230[13]) = BYTE8(v233[13]);
  v156 = *(void *)&v233[14];
  *(void *)&v230[14] = *(void *)&v233[14];
  v155 = BYTE8(v233[14]);
  BYTE8(v230[14]) = BYTE8(v233[14]);
  __int128 v154 = *(void *)&v233[15];
  *(void *)&v230[15] = *(void *)&v233[15];
  __int128 v152 = BYTE8(v233[16]);
  __int128 v153 = BYTE8(v233[15]);
  BYTE8(v230[15]) = BYTE8(v233[15]);
  BYTE8(v230[16]) = BYTE8(v233[16]);
  int64_t v73 = *(void *)&v233[16];
  *(void *)&v230[16] = *(void *)&v233[16];
  v176 = *(void *)&v233[17];
  *(void *)&v230[17] = *(void *)&v233[17];
  __int128 v151 = BYTE8(v233[17]);
  WORD4(v230[17]) = WORD4(v233[17]);
  uint64_t v74 = BYTE9(v233[17]);
  memcpy(v229, v230, 0x11AuLL);
  unint64_t v75 = *(void (**)(_OWORD *__return_ptr, __int128 *, uint64_t, uint64_t))(v42 + 176);
  outlined retain of DateComponents((uint64_t)v230);
  v75(v228, v229, ObjectType, v42);
  outlined release of DateComponents((uint64_t)v230);
  unint64_t v76 = *(double *)v228;
  if ((BYTE8(v228[0]) & 1) != 0)
  {
LABEL_94:
    outlined release of DateComponents((uint64_t)v230);
    outlined release of DateComponents((uint64_t)__dst);
    *(double *)v221 = v76;
    *(_BYTE *)(v221 + 8) = 1;
    v229[0] = v59;
    v229[1] = v58;
    *(void *)&v229[2] = v196;
    BYTE8(v229[2]) = v197;
    *(void *)&v229[3] = v199;
    BYTE8(v229[3]) = v201;
    *(void *)&v229[4] = v208;
    BYTE8(v229[4]) = 0;
    *(void *)&v229[5] = v203;
    BYTE8(v229[5]) = 0;
    *(void *)&v229[6] = v180;
    BYTE8(v229[6]) = v181;
    *(void *)&v229[7] = v205;
    BYTE8(v229[7]) = v204;
    *(void *)&v229[8] = v210;
    BYTE8(v229[8]) = v206;
    *(void *)&v229[9] = v182;
    BYTE8(v229[9]) = v212;
    *(void *)&v229[10] = v183;
    BYTE8(v229[10]) = v184;
    *(void *)&v229[11] = v185;
    BYTE8(v229[11]) = v186;
    *(void *)&v229[12] = v187;
    BYTE8(v229[12]) = v188;
    *(void *)&v229[13] = v189;
    BYTE8(v229[13]) = v190;
    *(void *)&v229[14] = v191;
    BYTE8(v229[14]) = v192;
    *(void *)&v229[15] = v193;
    BYTE8(v229[15]) = v194;
    BYTE8(v229[16]) = v195;
    *(void *)&v229[16] = v178;
    *(void *)&v229[17] = v198;
    BYTE8(v229[17]) = v179;
    BYTE9(v229[17]) = v177;
    Swift::UInt v77 = v229;
    return (char *)outlined release of DateComponents((uint64_t)v77);
  }

  __int128 v82 = *(double *)v228;
  LOBYTE(v228[0]) = 3;
  LOBYTE(v225[0]) = 2;
  if (v76 > 1.59271755e13) {
    __int128 v82 = 1.59271755e13;
  }
  *(void *)&v229[0] = fmax(v82, -2.11845067e11);
  uint64_t result = (char *)(*(uint64_t (**)(_OWORD *, _OWORD *, __int128 *, uint64_t, uint64_t))(v42 + 144))( v228,  v225,  v229,  ObjectType,  v42);
  id v84 = v207;
  id v85 = v196;
  id v86 = *((void *)&v58 + 1);
  id v87 = v58;
  if ((v88 & 1) != 0)
  {
    outlined release of DateComponents((uint64_t)v230);
    outlined release of DateComponents((uint64_t)__dst);
    v229[0] = v59;
    v229[1] = v58;
    *(void *)&v229[2] = v196;
    BYTE8(v229[2]) = v197;
    *(_BYTE *)(v221 + 8) = 1;
    *(void *)v221 = 0LL;
    *(void *)&v229[3] = v199;
    BYTE8(v229[3]) = v201;
    *(void *)&v229[4] = v208;
    BYTE8(v229[4]) = 0;
    *(void *)&v229[5] = v203;
    BYTE8(v229[5]) = 0;
    *(void *)&v229[6] = v180;
    BYTE8(v229[6]) = v181;
    *(void *)&v229[7] = v205;
    BYTE8(v229[7]) = v204;
    *(void *)&v229[8] = v210;
    BYTE8(v229[8]) = v206;
    *(void *)&v229[9] = v182;
    BYTE8(v229[9]) = v212;
    *(void *)&v229[10] = v183;
    BYTE8(v229[10]) = v184;
    *(void *)&v229[11] = v185;
    BYTE8(v229[11]) = v186;
    *(void *)&v229[12] = v187;
    BYTE8(v229[12]) = v188;
    *(void *)&v229[13] = v189;
    BYTE8(v229[13]) = v190;
    *(void *)&v229[14] = v191;
    BYTE8(v229[14]) = v192;
    *(void *)&v229[15] = v193;
    BYTE8(v229[15]) = v194;
    BYTE8(v229[16]) = v195;
    *(void *)&v229[16] = v178;
    *(void *)&v229[17] = v198;
    goto LABEL_120;
  }

  __int128 v143 = v74;
  id v89 = v83 - (void)result;
  id v90 = v212;
  id v91 = v197;
  if (__OFSUB__(v83, result))
  {
    __break(1u);
  }

  else
  {
    id v92 = v208;
    id v93 = v175;
    id v94 = v171;
    id v95 = v144;
    uint64_t result = (char *)&v229[16] + 8;
    if (v203 >= v89 || (id v89 = v203 - 1, !__OFSUB__(v203, 1LL)))
    {
      id v96 = 0;
      id v97 = v89 == 0x7FFFFFFFFFFFFFFFLL;
      if (v89 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v98 = 0LL;
      }
      else {
        uint64_t v98 = v89;
      }
      uint64_t v99 = v208;
      Swift::UInt v100 = v201;
      Swift::UInt v101 = v199;
LABEL_129:
      *(void *)&v229[0] = v150;
      *((void *)&v229[0] + 1) = v149;
      *(void *)&v229[1] = v148;
      *((void *)&v229[1] + 1) = v147;
      *(void *)&v229[2] = v146;
      BYTE8(v229[2]) = v145;
      *(void *)&v229[3] = v94;
      BYTE8(v229[3]) = v95;
      *(void *)&v229[4] = v93;
      BYTE8(v229[4]) = v92 == 0x7FFFFFFFFFFFFFFFLL;
      *(void *)&v229[5] = 1LL;
      BYTE8(v229[5]) = 0;
      *(void *)&v229[6] = v174;
      BYTE8(v229[6]) = v173;
      *(void *)&v229[7] = v170;
      BYTE8(v229[7]) = v169;
      *(void *)&v229[8] = v168;
      BYTE8(v229[8]) = v167;
      *(void *)&v229[9] = v166;
      BYTE8(v229[9]) = v165;
      *(void *)&v229[10] = v164;
      BYTE8(v229[10]) = v163;
      *(void *)&v229[11] = v162;
      BYTE8(v229[11]) = v161;
      *(void *)&v229[12] = v160;
      BYTE8(v229[12]) = v159;
      *(void *)&v229[13] = v158;
      BYTE8(v229[13]) = v157;
      *(void *)&v229[14] = v156;
      BYTE8(v229[14]) = v155;
      *(void *)&v229[15] = v154;
      BYTE8(v229[15]) = v153;
      BYTE8(v229[16]) = v152;
      *(void *)&v229[16] = v73;
      *(void *)&v229[17] = v176;
      BYTE8(v229[17]) = v151;
      BYTE9(v229[17]) = v143;
      *(void *)&v225[0] = v41;
      *((void *)&v225[0] + 1) = v42;
      *(double *)v223 = v23;
      v230[0] = v59;
      *(void *)&v230[1] = v87;
      *((void *)&v230[1] + 1) = v86;
      *(void *)&v230[2] = v85;
      BYTE8(v230[2]) = v91;
      v200 = v101;
      *(void *)&v230[3] = v101;
      v202 = v100;
      BYTE8(v230[3]) = v100;
      *(void *)&v230[4] = v99;
      BYTE8(v230[4]) = v96;
      *(void *)&v230[5] = v98;
      BYTE8(v230[5]) = v97;
      *(void *)&v230[6] = v180;
      BYTE8(v230[6]) = v181;
      *(void *)&v230[7] = v205;
      BYTE8(v230[7]) = v204;
      *(void *)&v230[8] = v210;
      BYTE8(v230[8]) = v206;
      *(void *)&v230[9] = v182;
      BYTE8(v230[9]) = v90;
      *(void *)&v230[10] = v183;
      BYTE8(v230[10]) = v184;
      *(void *)&v230[11] = v185;
      BYTE8(v230[11]) = v186;
      *(void *)&v230[12] = v187;
      BYTE8(v230[12]) = v188;
      *(void *)&v230[13] = v189;
      BYTE8(v230[13]) = v190;
      *(void *)&v230[14] = v191;
      BYTE8(v230[14]) = v192;
      *(void *)&v230[15] = v193;
      BYTE8(v230[15]) = v194;
      BYTE8(v230[16]) = v195;
      *(void *)&v230[16] = v178;
      *(void *)&v230[17] = v198;
      BYTE8(v230[17]) = v179;
      BYTE9(v230[17]) = v177;
      BOOL v111 = v96;
      uint64_t v112 = v99;
      uint64_t v113 = v97;
      __int128 v114 = v98;
      memcpy(v228, v230, 0x11AuLL);
      LOBYTE(v222[0]) = v216;
      LOBYTE(v226) = v218;
      v227 = v214;
      outlined retain of DateComponents((uint64_t)v230);
      Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)( (double *)v223,  v228,  (unsigned __int8 *)v222,  (unsigned __int8 *)&v226,  &v227,  (double *)v224);
      if (v84)
      {
        outlined release of DateComponents((uint64_t)__dst);
        outlined release of DateComponents((uint64_t)v230);
        unint64_t v108 = v229;
        goto LABEL_131;
      }

      v215 = v113;
      v217 = v112;
      outlined release of DateComponents((uint64_t)v230);
      __int128 v115 = *(double *)v224;
      if ((BYTE8(v224[0]) & 1) != 0)
      {
        outlined release of DateComponents((uint64_t)v229);
        outlined release of DateComponents((uint64_t)__dst);
        uint64_t result = (char *)outlined release of DateComponents((uint64_t)v230);
        uint64_t v48 = v221;
        *(double *)v221 = v115;
        goto LABEL_14;
      }

      DateComponents.setUnits.getter(&v226);
      uint64_t v121 = v226;
      *(void *)&v228[0] = v226;
      if (v115 <= 1.59271755e13) {
        uint64_t v122 = v115;
      }
      else {
        uint64_t v122 = 1.59271755e13;
      }
      *(void *)&v224[0] = fmax(v122, -2.11845067e11);
      outlined retain of DateComponents((uint64_t)v230);
      ((void (*)(_OWORD *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))v213)( v225,  v228,  v224,  ObjectType,  v42);
      uint64_t v123 = *(void *)&v225[0];
      if ((v121 & 0x4000) != 0)
      {
        *(void *)&v225[0] = v41;
        *((void *)&v225[0] + 1) = v42;
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        if (*(void *)&v225[1])
        {
          v228[0] = v225[1];
          swift_unknownObjectRetain();
          Calendar.timeZone.setter((uint64_t *)v228);
          uint64_t v123 = *(void *)&v225[0];
        }

        else
        {
          uint64_t v123 = v41;
        }
      }

      uint64_t v66 = v221;
      __int128 v133 = v225[1];
      *(_OWORD *)((char *)&v228[16] + 10) = *(_OWORD *)((char *)&v225[16] + 10);
      v228[14] = v225[14];
      v228[15] = v225[15];
      v228[16] = v225[16];
      v228[10] = v225[10];
      v228[11] = v225[11];
      v228[12] = v225[12];
      v228[13] = v225[13];
      v228[6] = v225[6];
      v228[7] = v225[7];
      v228[8] = v225[8];
      v228[9] = v225[9];
      v228[2] = v225[2];
      v228[3] = v225[3];
      v228[4] = v225[4];
      v228[5] = v225[5];
      *(void *)&v228[0] = v123;
      *((void *)&v228[0] + 1) = *((void *)&v225[0] + 1);
      v228[1] = v225[1];
      if ((void)v59)
      {
        v228[0] = v59;
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        if ((void)v133)
        {
          v224[0] = v133;
          swift_unknownObjectRetain();
          Calendar.timeZone.setter((uint64_t *)v224);
        }
      }

      int64_t v79 = v198;
      if ((void)v58)
      {
        v228[1] = v58;
        swift_unknownObjectRetain_n();
        swift_unknownObjectRelease();
        if (*(void *)&v228[0])
        {
          v224[0] = v58;
          Calendar.timeZone.setter((uint64_t *)v224);
        }

        else
        {
          swift_unknownObjectRelease();
        }
      }

      memcpy(v224, v228, 0x11AuLL);
      memcpy(v223, v228, 0x11AuLL);
      memcpy(v222, v230, 0x11AuLL);
      __int128 v134 = specialized static DateComponents.== infix(_:_:)((uint64_t)v223, v222);
      outlined release of DateComponents((uint64_t)v224);
      outlined release of DateComponents((uint64_t)__dst);
      outlined release of DateComponents((uint64_t)v230);
      outlined release of DateComponents((uint64_t)v229);
      if (v134) {
        Swift::UInt v67 = v115;
      }
      else {
        Swift::UInt v67 = 0.0;
      }
      int64_t v65 = !v134;
      __int128 v135 = a10;
      __int128 v136 = v111;
      __int128 v137 = v217;
      __int128 v138 = v215;
      uint64_t v139 = v114;
      __int128 v140 = v178;
      Swift::UInt v78 = v177;
      goto LABEL_190;
    }
  }

  __break(1u);
  return result;
}

                uint64_t v74 = (v65 - 1) & v65;
                unint64_t v75 = v66;
                uint64_t v54 = __clz(__rbit64(v65)) + (v66 << 6);
              }

              uint64_t v55 = 16 * v54;
              unint64_t v56 = (uint64_t *)(*(void *)(v36 + 48) + v55);
              uint64_t v58 = *v56;
              int64_t v57 = v56[1];
              unint64_t v59 = (uint64_t *)(*(void *)(v36 + 56) + v55);
              unint64_t v60 = *v59;
              Swift::UInt v61 = v59[1];
              Swift::UInt v62 = (void *)(*(void *)(v32 + 48) + v55);
              *Swift::UInt v62 = v58;
              v62[1] = v57;
              int64_t v63 = (void *)(*(void *)(v32 + 56) + v55);
              *int64_t v63 = v60;
              v63[1] = v61;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v53 = v74;
              uint64_t v50 = v75;
            }
          }

  if (!v28) {
    goto LABEL_64;
  }
LABEL_106:
  __break(1u);
  return result;
}

    if (v31) {
      goto LABEL_90;
    }
    goto LABEL_64;
  }

  uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  __int128 v20 = v2;
  __int128 v21 = v7;
  while (1)
  {
    __int128 v23 = *(unsigned __int16 *)(v21 + 16);
    if (*(_WORD *)(v21 + 16)) {
      break;
    }
LABEL_25:
    if (v20) {
      goto LABEL_79;
    }
LABEL_26:
    __int128 v22 = (4 * *(_BYTE *)(v21 + 18) + 8) & 0x3C;
    __int128 v19 = ((-15LL << v22) - 1) & v19 | (v23 << v22);
    uint64_t v5 = *(void *)(v21 + 24 + 24 * v23);
    swift_unknownObjectRetain();
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    __int128 v21 = v5;
    if (!*(_BYTE *)(v5 + 18)) {
      goto LABEL_42;
    }
  }

  __int128 v24 = *(void *)(v21 + 32);
  unint64_t v25 = __OFSUB__(v20, v24);
  int64_t v26 = v20 - v24;
  if (v25) {
    goto LABEL_80;
  }
  if (__OFADD__(v26, 1LL)) {
    goto LABEL_81;
  }
  if (v26 + 1 <= 0)
  {
    __int128 v23 = 0LL;
    goto LABEL_26;
  }

  if ((_DWORD)v23 == 1)
  {
    __int128 v20 = v26;
    goto LABEL_25;
  }

  unint64_t v27 = (uint64_t *)(v21 + 56);
  int64_t v28 = 1LL;
  while (1)
  {
    uint64_t v29 = *v27;
    v27 += 3;
    __int128 v20 = v26 - v29;
    if (__OFSUB__(v26, v29)) {
      break;
    }
    if (__OFADD__(v20, 1LL)) {
      goto LABEL_78;
    }
    if (v20 + 1 < 1)
    {
      __int128 v23 = v28;
      __int128 v20 = v26;
      goto LABEL_26;
    }

    ++v28;
    int64_t v26 = v20;
    if (v23 == v28) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
  return result;
}

      Swift::UInt v67 = *(void *)(v64 + 56);

      *(void *)(v67 + 8 * v60) = v56;
LABEL_99:
      *(void *)(v4 + 72) = v64;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v56;
    }

    if ((v57 & 1) != 0)
    {
      unint64_t v64 = v58;
      if ((v59 & 1) == 0) {
        goto LABEL_98;
      }
      goto LABEL_63;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftLocale>);
  int64_t v68 = static _DictionaryStorage.copy(original:)();
  unint64_t v64 = v68;
  if (!*(void *)(v58 + 16))
  {
LABEL_97:
    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0) {
      goto LABEL_98;
    }
    goto LABEL_63;
  }

  uint64_t v69 = (void *)(v68 + 64);
  uint64_t v70 = (unint64_t)((1LL << *(_BYTE *)(v64 + 32)) + 63) >> 6;
  uint64_t v71 = 0LL;
  *(void *)(v64 + 16) = *(void *)(v58 + 16);
  unint64_t v72 = 1LL << *(_BYTE *)(v58 + 32);
  int64_t v73 = -1LL;
  if (v72 < 64) {
    int64_t v73 = ~(-1LL << v72);
  }
  uint64_t v74 = v73 & *(void *)(v58 + 64);
  id v88 = v58 + 64;
  id v90 = (unint64_t)(v72 + 63) >> 6;
  while (2)
  {
    if (v74)
    {
      __srca = (void *)((v74 - 1) & v74);
      id v94 = v71;
      unint64_t v75 = __clz(__rbit64(v74)) | (v71 << 6);
LABEL_73:
      unint64_t v76 = 16 * v75;
      Swift::UInt v77 = (void *)(*(void *)(v58 + 48) + 16 * v75);
      Swift::UInt v78 = v77[1];
      int64_t v79 = 8 * v75;
      unint64_t v80 = *(void **)(*(void *)(v58 + 56) + v79);
      int64_t v81 = (void *)(*(void *)(v64 + 48) + v76);
      *int64_t v81 = *v77;
      v81[1] = v78;
      *(void *)(*(void *)(v64 + 56) + v79) = v80;
      swift_bridgeObjectRetain();
      __int128 v82 = v80;
      uint64_t v74 = (unint64_t)__srca;
      uint64_t v71 = v94;
      continue;
    }

    break;
  }

  __int128 v83 = v71 + 1;
  if (__OFADD__(v71, 1LL)) {
    goto LABEL_102;
  }
  if (v83 >= v90) {
    goto LABEL_97;
  }
  id v84 = *(void *)(v88 + 8 * v83);
  id v85 = v71 + 1;
  if (v84) {
    goto LABEL_96;
  }
  id v85 = v71 + 2;
  if (v71 + 2 >= v90) {
    goto LABEL_97;
  }
  id v84 = *(void *)(v88 + 8 * v85);
  if (v84) {
    goto LABEL_96;
  }
  id v85 = v71 + 3;
  if (v71 + 3 >= v90) {
    goto LABEL_97;
  }
  id v84 = *(void *)(v88 + 8 * v85);
  if (v84) {
    goto LABEL_96;
  }
  id v85 = v71 + 4;
  if (v71 + 4 >= v90) {
    goto LABEL_97;
  }
  id v84 = *(void *)(v88 + 8 * v85);
  if (v84) {
    goto LABEL_96;
  }
  id v85 = v71 + 5;
  if (v71 + 5 >= v90) {
    goto LABEL_97;
  }
  id v84 = *(void *)(v88 + 8 * v85);
  if (v84) {
    goto LABEL_96;
  }
  id v85 = v71 + 6;
  if (v71 + 6 >= v90) {
    goto LABEL_97;
  }
  id v84 = *(void *)(v88 + 8 * v85);
  if (v84) {
    goto LABEL_96;
  }
  id v85 = v71 + 7;
  if (v71 + 7 >= v90) {
    goto LABEL_97;
  }
  id v84 = *(void *)(v88 + 8 * v85);
  if (v84)
  {
LABEL_96:
    __srca = (void *)((v84 - 1) & v84);
    id v94 = v85;
    unint64_t v75 = __clz(__rbit64(v84)) + (v85 << 6);
    goto LABEL_73;
  }

  id v86 = v71 + 8;
  if (v71 + 8 >= v90) {
    goto LABEL_97;
  }
  id v84 = *(void *)(v88 + 8 * v86);
  if (v84)
  {
    id v85 = v71 + 8;
    goto LABEL_96;
  }

  while (1)
  {
    id v85 = v86 + 1;
    if (__OFADD__(v86, 1LL)) {
      break;
    }
    if (v85 >= v90) {
      goto LABEL_97;
    }
    id v84 = *(void *)(v88 + 8 * v85);
    ++v86;
    if (v84) {
      goto LABEL_96;
    }
  }

  *(double *)v179 = v51;
  if (*(void *)(a8 + 16))
  {
    uint64_t v53 = @"NSFileGroupOwnerAccountID";
    uint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v53);
    if ((v55 & 1) != 0) {
      outlined init with copy of Any(*(void *)(a8 + 56) + 32 * v54, (uint64_t)&v189);
    }
    else {
      memset(&v189, 0, 32);
    }
  }

  else
  {
    memset(&v189, 0, 32);
  }

  unint64_t v56 = (unint64_t)specialized _readFileAttributePrimitive<A>(_:as:)((uint64_t)&v189);
  uint64_t v58 = v57;
  outlined destroy of Any?((uint64_t)&v189, &demangling cache variable for type metadata for Any?);
  if (!v40)
  {
    if ((v46 & 1) != 0)
    {
      uint64_t v15 = v184;
      if (!v52 && (v58 & 1) != 0)
      {
LABEL_111:
        specialized static _FileManagerImpl._setCatInfoAttributes(_:path:)(a8, a2, v187);
        if (*(double *)&v15 != 0.0)
        {
LABEL_112:
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v180);
          int64_t v68 = (uint64_t)v182;
          goto LABEL_160;
        }

        *(double *)&uint64_t v15 = -2.31584178e77;
        uint64_t v69 = String._bridgeToObjectiveCImpl()();
        if (*(void *)(a8 + 16) && (uint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v69), (v71 & 1) != 0)) {
          outlined init with copy of Any(*(void *)(a8 + 56) + 32 * v70, (uint64_t)&v189);
        }
        else {
          memset(&v189, 0, 32);
        }
        swift_unknownObjectRelease();
        if (v189.f_bavail)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Data]);
          if ((swift_dynamicCast() & 1) != 0)
          {
            specialized static _FileManagerImpl._setAttributes(_:at:followSymLinks:)(*(uint64_t *)&v198);
            swift_bridgeObjectRelease();
          }
        }

        else
        {
          outlined destroy of Any?((uint64_t)&v189, &demangling cache variable for type metadata for Any?);
        }

        if (*(void *)(a8 + 16))
        {
          Swift::UInt v100 = @"NSFileModificationDate";
          Swift::UInt v101 = specialized __RawDictionaryStorage.find<A>(_:)(v100);
          if ((v102 & 1) != 0) {
            outlined init with copy of Any(*(void *)(a8 + 56) + 32 * v101, (uint64_t)&v189);
          }
          else {
            memset(&v189, 0, 32);
          }

          if (v189.f_bavail)
          {
            if ((swift_dynamicCast() & 1) != 0)
            {
              Swift::UInt8 v103 = COERCE_UNSIGNED_INT64(v198 + 978307200.0) & 0x7FF0000000000000LL;
              Swift::UInt8 v104 = trunc(v198 + 978307200.0);
              Swift::Int v105 = v103 == 0x7FF0000000000000LL ? v198 + 978307200.0 : v104;
              if (v105 > -9.22337204e18 && v105 < 9.22337204e18 && v105 == trunc(v105))
              {
                uint64_t v106 = (v198 + 978307200.0 - v104) * 1000000.0;
                if (v103 == 0x7FF0000000000000LL) {
                  uint64_t v106 = 0.0;
                }
                unint64_t v107 = round(v106);
                if (v107 > -2147483650.0 && v107 < 2147483650.0)
                {
                  *(void *)&v189.f_bsize = (uint64_t)v105;
                  LODWORD(v189.f_blocks) = (int)v107;
                  v189.f_bfree = (uint64_t)v105;
                  LODWORD(v189.f_bavail) = (int)v107;
                  if (utimes(v13, (const timeval *)&v189))
                  {
                    LODWORD(v23) = MEMORY[0x186E1B0E8]();
                    CocoaError.Code.init(fileErrno:reading:)((Swift::Int32)v23, 0);
                    unint64_t v108 = (uint64_t (*)(void))v197[0];
                    if ((_DWORD)v23 == 102)
                    {
                      char v109 = 0LL;
                      unint64_t v110 = v182;
                      BOOL v111 = v187;
                      uint64_t v15 = a2;
                    }

                    else
                    {
                      unint64_t v110 = v182;
                      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
                        goto LABEL_287;
                      }
                      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                      int64_t v125 = (int)POSIXErrorCode.rawValue.getter();
                      uint64_t v126 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
                      __int128 v127 = String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      char v109 = objc_msgSend( v126,  sel_initWithDomain_code_userInfo_,  v127,  v125,  _NativeDictionary.bridged()());
                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();
                      __int128 v128 = objc_msgSend(v109, sel_domain);
                      __int128 v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
                      __int128 v131 = v130;

                      if (v129 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                        && v131 == v132)
                      {
                        swift_bridgeObjectRelease_n();
                        uint64_t v15 = a2;
                      }

                      else
                      {
                        __int128 v134 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        LODWORD(v23) = v181;
                        uint64_t v15 = a2;
                        if ((v134 & 1) == 0)
                        {
                          __break(1u);
LABEL_279:
                          __break(1u);
                          goto LABEL_280;
                        }
                      }

                      BOOL v111 = v187;
                    }

                    swift_bridgeObjectRetain();
                    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( v108,  v15,  v111,  v109,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v198,  0LL,  0LL);
                    swift_willThrow();
                    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v180);
                    int64_t v68 = (uint64_t)v110;
                    goto LABEL_160;
                  }
                }
              }
            }

        swift_bridgeObjectRelease();
        if ((v3 & 1) != 0) {
          goto LABEL_23;
        }
        goto LABEL_64;
      }

      __break(1u);
      goto LABEL_29;
    }
  }

  type metadata accessor for _TimeZoneGMTICU();
  int64_t v28 = (void *)swift_allocObject();
  uint64_t v29 = specialized static TimeZone.nameForSecondsFromGMT(_:)(a1);
  if (!v30)
  {
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  v28[3] = v29;
  v28[4] = v30;
  __int128 v21 = a1;
  v28[2] = a1;
  if (a1 < 0)
  {
    __int128 v21 = -a1;
    if (__OFSUB__(0LL, a1))
    {
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
  }

  uint64_t v3 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU,  (uint64_t)&protocol conformance descriptor for _TimeZoneGMTICU);
  uint64_t v31 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  uint64_t v32 = (char *)objc_allocWithZone(v31);
  uint64_t v33 = &v32[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *(void *)uint64_t v33 = v28;
  *((void *)v33 + 1) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  uint64_t v34 = swift_allocObject();
  *(_DWORD *)(v34 + 32) = 0;
  *(_OWORD *)(v34 + 16) = xmmword_1837ADD10;
  *(void *)&v32[OBJC_IVAR____NSSwiftTimeZone_lock] = v34;
  v106.receiver = v32;
  v106.super_class = v31;
  swift_retain_n();
  uint64_t v2 = objc_msgSendSuper2(&v106, sel_init);
  if (__ROR8__(0xFEDCBA987654321LL * v21 + 0x91A2B3C4D5E6F8LL, 3) > 0x2468ACF13579BEuLL)
  {
    swift_release_n();
    return (char *)v2;
  }

  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v105 = *(void *)(v5 + 48);
  unint64_t v4 = v105;
  *(void *)(v5 + 48) = 0x8000000000000000LL;
  __int128 v35 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  __int128 v37 = *(void *)(v4 + 16);
  __int128 v38 = (v36 & 1) == 0;
  __int128 v39 = __OFADD__(v37, v38);
  __int128 v40 = v37 + v38;
  if (v39) {
    goto LABEL_30;
  }
  LOBYTE(v21) = v36;
  if (*(void *)(v4 + 24) < v40)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, isUniquelyReferenced_nonNull_native);
    __int128 v41 = v105;
    __int128 v35 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v21 & 1) != (v42 & 1))
    {
LABEL_103:
      int64_t v73 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_104;
    }

    goto LABEL_26;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    __int128 v41 = v4;
LABEL_26:
    if ((v21 & 1) == 0) {
      goto LABEL_99;
    }
    goto LABEL_27;
  }

  id v95 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
  uint64_t v58 = static _DictionaryStorage.copy(original:)();
  __int128 v41 = v58;
  if (!*(void *)(v4 + 16)) {
    goto LABEL_98;
  }
  uint64_t result = (char *)(v58 + 64);
  __srca = (char *)(v4 + 64);
  unint64_t v59 = (unint64_t)((1LL << *(_BYTE *)(v41 + 32)) + 63) >> 6;
  if (v41 != v4 || result >= &__srca[8 * v59]) {
    uint64_t result = (char *)memmove(result, __srca, 8 * v59);
  }
  unint64_t v60 = 0LL;
  *(void *)(v41 + 16) = *(void *)(v4 + 16);
  Swift::UInt v61 = 1LL << *(_BYTE *)(v4 + 32);
  Swift::UInt v62 = -1LL;
  if (v61 < 64) {
    Swift::UInt v62 = ~(-1LL << v61);
  }
  int64_t v63 = v62 & *(void *)(v4 + 64);
  uint64_t v98 = (unint64_t)(v61 + 63) >> 6;
  while (1)
  {
    if (v63)
    {
      unint64_t v64 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      int64_t v65 = v64 | (v60 << 6);
      goto LABEL_74;
    }

    uint64_t v70 = v60 + 1;
    if (__OFADD__(v60, 1LL)) {
      goto LABEL_147;
    }
    if (v70 >= v98) {
      goto LABEL_98;
    }
    uint64_t v71 = *(void *)&__srca[8 * v70];
    ++v60;
    if (!v71)
    {
      unint64_t v60 = v70 + 1;
      if (v70 + 1 >= v98) {
        goto LABEL_98;
      }
      uint64_t v71 = *(void *)&__srca[8 * v60];
      if (!v71)
      {
        unint64_t v60 = v70 + 2;
        if (v70 + 2 >= v98) {
          goto LABEL_98;
        }
        uint64_t v71 = *(void *)&__srca[8 * v60];
        if (!v71)
        {
          unint64_t v60 = v70 + 3;
          if (v70 + 3 >= v98) {
            goto LABEL_98;
          }
          uint64_t v71 = *(void *)&__srca[8 * v60];
          if (!v71)
          {
            unint64_t v60 = v70 + 4;
            if (v70 + 4 >= v98) {
              goto LABEL_98;
            }
            uint64_t v71 = *(void *)&__srca[8 * v60];
            if (!v71)
            {
              unint64_t v60 = v70 + 5;
              if (v70 + 5 >= v98) {
                goto LABEL_98;
              }
              uint64_t v71 = *(void *)&__srca[8 * v60];
              if (!v71)
              {
                unint64_t v60 = v70 + 6;
                if (v70 + 6 >= v98) {
                  goto LABEL_98;
                }
                uint64_t v71 = *(void *)&__srca[8 * v60];
                if (!v71) {
                  break;
                }
              }
            }
          }
        }
      }
    }

  __break(1u);
  return result;
}

      if (v27) {
        goto LABEL_441;
      }
      goto LABEL_64;
    }

    int64_t v26 = ((-15LL << ((4 * v13 + 8) & 0x3C)) - 1) & v13 | ((unint64_t)*(unsigned __int16 *)(v5 + 16) << ((4 * v13 + 8) & 0x3C));
    swift_unknownObjectRetain();
    unint64_t v27 = 0LL;
    __int128 v18 = 0LL;
LABEL_65:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v197, v26, v18, v5, v10);
    uint64_t result = (void *)swift_unknownObjectRelease_n();
    int64_t v13 = v206;
    uint64_t v10 = v207;
    __int128 v18 = v205;
LABEL_66:
    int64_t v28 = i - v27;
    if (__OFSUB__(i, v27)) {
      goto LABEL_416;
    }
    __int128 v19 = v196;
LABEL_68:
    if (v18 >= v28) {
      return result;
    }
    if (v10 != v19[11]) {
      goto LABEL_401;
    }
    v202 = (void *)v4;
    if (v4)
    {
      __int128 v42 = (void *)(v4 + 24 * ((v13 >> ((4 * *(_BYTE *)(v4 + 18) + 8) & 0x3C)) & 0xF));
      uint64_t v43 = v42[4];
      uint64_t v5 = v42[5];
      uint64_t v44 = v42[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v10 = v43;
      int64_t v13 = v5;
    }

    else
    {
      Swift::UInt8 v45 = v19[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v13, v45);
      uint64_t v43 = v46;
      uint64_t v5 = v47;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (v207 != v19[11]) {
        goto LABEL_420;
      }
      uint64_t v48 = v20;
      char v49 = v19[8];
      swift_unknownObjectRetain();
      uint64_t v44 = specialized Rope._Node.subscript.getter(v13, v49);
      uint64_t v10 = v50;
      int64_t v13 = v51;
      __int128 v20 = v48;
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    int64_t v52 = v205 + v44;
    if (__OFADD__(v205, v44)) {
      goto LABEL_402;
    }
    *(void *)&v218 = v43;
    *((void *)&v218 + 1) = v5;
    if (v205 >= v20) {
      uint64_t v53 = v20;
    }
    else {
      uint64_t v53 = v205;
    }
    if (v205 >= i) {
      __int128 v18 = v53;
    }
    else {
      __int128 v18 = i;
    }
    if (v52 <= i) {
      uint64_t v54 = i;
    }
    else {
      uint64_t v54 = v52;
    }
    if (v52 > v20) {
      uint64_t v54 = v20;
    }
    if (v18 == v54) {
      break;
    }
    if (v18 != v205 || v54 != v52)
    {
      v192 = v54;
      i = v43 + 64;
      uint64_t v66 = 1LL << *(_BYTE *)(v43 + 32);
      if (v66 < 64) {
        Swift::UInt v67 = ~(-1LL << v66);
      }
      else {
        Swift::UInt v67 = -1LL;
      }
      int64_t v68 = v67 & *(void *)(v43 + 64);
      uint64_t v69 = (unint64_t)(v66 + 63) >> 6;
      uint64_t result = (void *)swift_bridgeObjectRetain();
      unint64_t v4 = 0LL;
      v198 = 0;
      if (v68)
      {
LABEL_123:
        uint64_t v70 = __clz(__rbit64(v68));
        v68 &= v68 - 1;
        uint64_t v71 = v70 | (v4 << 6);
        goto LABEL_141;
      }

      while (1)
      {
        unint64_t v14 = v4 + 1;
        if (__OFADD__(v4, 1LL))
        {
          __break(1u);
LABEL_377:
          __break(1u);
LABEL_378:
          __break(1u);
LABEL_379:
          __break(1u);
LABEL_380:
          v190 = (uint64_t *)(v4 + 48);
          uint64_t v15 = 1LL;
          while (1)
          {
            v191 = *v190;
            v190 += 3;
            __int128 v17 = v14 - v191;
            if (__OFSUB__(v14, v191)) {
              goto LABEL_449;
            }
            if (__OFADD__(v17, 1LL)) {
              goto LABEL_450;
            }
            if (v17 + 1 < 1) {
              goto LABEL_392;
            }
            ++v15;
            unint64_t v14 = v17;
            if (v18 == v15)
            {
LABEL_385:
              if (!v17) {
                goto LABEL_386;
              }
              goto LABEL_469;
            }
          }
        }

        if (v14 >= v69) {
          break;
        }
        unint64_t v72 = *(void *)(i + 8 * v14);
        ++v4;
        if (!v72)
        {
          unint64_t v4 = v14 + 1;
          if (v14 + 1 >= v69) {
            break;
          }
          unint64_t v72 = *(void *)(i + 8 * v4);
          if (!v72)
          {
            unint64_t v4 = v14 + 2;
            if (v14 + 2 >= v69) {
              break;
            }
            unint64_t v72 = *(void *)(i + 8 * v4);
            if (!v72)
            {
              unint64_t v4 = v14 + 3;
              if (v14 + 3 >= v69) {
                break;
              }
              unint64_t v72 = *(void *)(i + 8 * v4);
              if (!v72)
              {
                int64_t v73 = v14 + 4;
                if (v73 >= v69) {
                  break;
                }
                unint64_t v72 = *(void *)(i + 8 * v73);
                if (!v72)
                {
                  while (1)
                  {
                    unint64_t v4 = v73 + 1;
                    if (__OFADD__(v73, 1LL)) {
                      goto LABEL_408;
                    }
                    if (v4 >= v69) {
                      goto LABEL_147;
                    }
                    unint64_t v72 = *(void *)(i + 8 * v4);
                    ++v73;
                    if (v72) {
                      goto LABEL_140;
                    }
                  }
                }

                unint64_t v4 = v73;
              }
            }
          }
        }

        int64_t v52 = v66;
LABEL_64:
        if (v52 >= v41)
        {
          uint64_t v54 = MEMORY[0x1895F8858](v52 - v41);
          unint64_t v60 = v55;
          Swift::UInt v61 = v54;
          return String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
        }

        goto LABEL_81;
      }

          uint64_t v43 = (v52 - 1) & v52;
          uint64_t v46 = __clz(__rbit64(v52)) + (v40 << 6);
        }

        uint64_t v47 = 16 * v46;
        uint64_t v48 = (void *)(*(void *)(v9 + 48) + v47);
        char v49 = v48[1];
        uint64_t v50 = (void *)(*(void *)(v12 + 48) + v47);
        *uint64_t v50 = *v48;
        v50[1] = v49;
        uint64_t result = swift_bridgeObjectRetain();
      }
    }

    uint64_t v55 = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v12 = v55;
    if (*(void *)(v9 + 16))
    {
      id v91 = v8;
      unint64_t v56 = 1LL << *(_BYTE *)(v9 + 32);
      int64_t v57 = v9 + 56;
      if (v56 < 64) {
        uint64_t v58 = ~(-1LL << v56);
      }
      else {
        uint64_t v58 = -1LL;
      }
      unint64_t v59 = v58 & *(void *)(v9 + 56);
      id v93 = a2;
      id v95 = (void *)((unint64_t)(v56 + 63) >> 6);
      unint64_t v60 = v55 + 56;
      uint64_t result = swift_retain_n();
      Swift::UInt v61 = 0LL;
      while (1)
      {
        if (v59)
        {
          unint64_t v64 = __clz(__rbit64(v59));
          v59 &= v59 - 1;
          int64_t v65 = v64 | (v61 << 6);
        }

        else
        {
          uint64_t v66 = v61 + 1;
          if (__OFADD__(v61, 1LL)) {
            goto LABEL_122;
          }
          Swift::UInt v67 = *(void *)(v57 + 8 * v66);
          ++v61;
          if (!v67)
          {
            Swift::UInt v61 = v66 + 1;
            Swift::UInt v67 = *(void *)(v57 + 8 * v61);
            if (!v67)
            {
              Swift::UInt v61 = v66 + 2;
              Swift::UInt v67 = *(void *)(v57 + 8 * v61);
              if (!v67)
              {
                int64_t v68 = v66 + 3;
                Swift::UInt v67 = *(void *)(v57 + 8 * v68);
                if (!v67)
                {
                  while (1)
                  {
                    Swift::UInt v61 = v68 + 1;
                    if (__OFADD__(v68, 1LL)) {
                      goto LABEL_125;
                    }
                    Swift::UInt v67 = *(void *)(v57 + 8 * v61);
                    ++v68;
                    if (v67) {
                      goto LABEL_88;
                    }
                  }

  Swift::UInt v101 = v55;
  if (one-time initialization token for recognizedEnglishPronouns != -1) {
    swift_once();
  }
  rawValue = recognizedEnglishPronouns._rawValue;
  unint64_t v59 = *((void *)recognizedEnglishPronouns._rawValue + 2);
  swift_bridgeObjectRetain();
  if (!v59)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v91 = v115;
    id v92 = v107;
    id v93 = v108;
    id v94 = v109;
    id v95 = v111;
    id v96 = a1;
LABEL_98:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *id v96 = v92;
    v96[1] = v93;
    v96[2] = v94;
    v96[3] = v91;
    v96[4] = v116;
    v96[5] = v113;
    v96[6] = v110;
    _OWORD v96[7] = v112;
    v96[8] = v95;
    v96[9] = v24;
    v96[10] = v21;
    v96[11] = v25;
    v96[12] = v14;
    return outlined copy of TermOfAddress._TermOfAddress( v92,  v93,  v94,  v91,  v116,  v113,  v110,  v112,  v95,  v24,  v21,  v25,  v14);
  }

  uint64_t v99 = v21;
  swift_bridgeObjectRetain();
  unint64_t v60 = rawValue[11];
  __int128 v141 = rawValue[10];
  __int128 v142 = v60;
  __int128 v143 = rawValue[12];
  uint64_t v144 = *((void *)rawValue + 26);
  Swift::UInt v61 = rawValue[7];
  __int128 v137 = rawValue[6];
  __int128 v138 = v61;
  Swift::UInt v62 = rawValue[9];
  uint64_t v139 = rawValue[8];
  __int128 v140 = v62;
  int64_t v63 = rawValue[3];
  __int128 v133 = rawValue[2];
  __int128 v134 = v63;
  unint64_t v64 = rawValue[5];
  uint64_t v117 = rawValue;
  __int128 v135 = rawValue[4];
  __int128 v136 = v64;
  uint64_t v126 = 216LL;
  for (i = v59 - 1; ; --i)
  {
    int64_t v125 = v133;
    int64_t v65 = *((void *)&v134 + 1);
    uint64_t v122 = v135;
    uint64_t v123 = v134;
    uint64_t v66 = v136;
    uint64_t v124 = v137;
    Swift::UInt v67 = v138;
    __int128 v131 = *((void *)&v135 + 1);
    __int128 v132 = *((void *)&v137 + 1);
    int64_t v68 = *((void *)&v138 + 1);
    uint64_t v69 = v139;
    __int128 v129 = *((void *)&v133 + 1);
    uint64_t v70 = *((void *)&v140 + 1);
    __int128 v128 = v140;
    uint64_t v71 = v141;
    unint64_t v72 = v142;
    int64_t v73 = v143;
    uint64_t v74 = v144;
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?( v67,  v68,  v69,  *((uint64_t *)&v69 + 1),  v128,  v70,  v71,  *((uint64_t *)&v71 + 1),  v72,  *((uint64_t *)&v72 + 1),  v73,  *((uint64_t *)&v73 + 1),  v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v130)
    {
      swift_bridgeObjectRelease();
      unint64_t v76 = v117;
      goto LABEL_94;
    }

    if (v119 == v125 && v130 == v129)
    {
      swift_bridgeObjectRelease();
      unint64_t v75 = v131;
      unint64_t v76 = v117;
    }

    else
    {
      Swift::UInt v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      unint64_t v75 = v131;
      unint64_t v76 = v117;
      if ((v77 & 1) == 0) {
        goto LABEL_94;
      }
    }

    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?( v67,  v68,  v69,  *((uint64_t *)&v69 + 1),  v128,  v70,  v71,  *((uint64_t *)&v71 + 1),  v72,  *((uint64_t *)&v72 + 1),  v73,  *((uint64_t *)&v73 + 1),  v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v121 || v106 == v123 && v121 == v65)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      int64_t v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v79 & 1) == 0) {
        goto LABEL_94;
      }
    }

    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?( v67,  v68,  v69,  *((uint64_t *)&v69 + 1),  v128,  v70,  v71,  *((uint64_t *)&v71 + 1),  v72,  *((uint64_t *)&v72 + 1),  v73,  *((uint64_t *)&v73 + 1),  v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v120 || v103 == v122 && v120 == v75)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      unint64_t v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v80 & 1) == 0) {
        goto LABEL_94;
      }
    }

    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?( v67,  v68,  v69,  *((uint64_t *)&v69 + 1),  v128,  v70,  v71,  *((uint64_t *)&v71 + 1),  v72,  *((uint64_t *)&v72 + 1),  v73,  *((uint64_t *)&v73 + 1),  v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v118 && __PAIR128__(v118, v102) != v66)
    {
      int64_t v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v81 & 1) == 0) {
        goto LABEL_94;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?( v67,  v68,  v69,  *((uint64_t *)&v69 + 1),  v128,  v70,  v71,  *((uint64_t *)&v71 + 1),  v72,  *((uint64_t *)&v72 + 1),  v73,  *((uint64_t *)&v73 + 1),  v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v101)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __int128 v114 = v124;
      goto LABEL_101;
    }

    if (v114 == v124 && v101 == v132) {
      break;
    }
    Swift::UInt v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v78 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __int128 v114 = v124;
      goto LABEL_101;
    }

      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }

    uint64_t v44 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[NSMachPort sendBeforeDate:] Cannot send (%s)",  mach_error_string(v40));
    __int128 v42 = (void *)MEMORY[0x189603F70];
    uint64_t v43 = @"NSPortSendException";
    goto LABEL_64;
  }

  return result;
}

          uint64_t v34 = 0LL;
          goto LABEL_95;
        }
      }

      else
      {
        LOBYTE(v66) = 0;
      }

LABEL_85:
    unint64_t v72 = (v80 - 1) & v80;
    unint64_t v76 = __clz(__rbit64(v80)) + (v68 << 6);
LABEL_70:
    Swift::UInt v77 = *(unsigned __int8 *)(*(void *)(v66 + 48) + v76);
    Swift::UInt v78 = *(void *)(*(void *)(v66 + 56) + 8 * v76);
    __int128 v135 = v134;
    __int128 v136 = v132;
    __int128 v137 = v130;
    __int128 v138 = v128;
    uint64_t v139 = v74;
    Hasher._combine(_:)(v77);
    Hasher._combine(_:)(v78);
    v67 ^= Hasher._finalize()();
  }

  int64_t v81 = v79 + 3;
  if (v81 >= v73) {
    goto LABEL_86;
  }
  unint64_t v80 = *(void *)(v69 + 8 * v81);
  if (v80)
  {
    int64_t v68 = v81;
    goto LABEL_85;
  }

  while (1)
  {
    int64_t v68 = v81 + 1;
    if (__OFADD__(v81, 1LL)) {
      break;
    }
    if (v68 >= v73) {
      goto LABEL_86;
    }
    unint64_t v80 = *(void *)(v69 + 8 * v68);
    ++v81;
    if (v80) {
      goto LABEL_85;
    }
  }

  int64_t v68 = MEMORY[0x186E1C36C](v72, v70);
LABEL_41:
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v68 + 32) != 3)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x18300C6F8LL);
  }

  __break(1u);
LABEL_86:
  __break(1u);
  return result;
}

  if ((a5 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_86:
  uint64_t v55 = 1;
LABEL_87:
  LOBYTE(v76[0]) = 4;
  if (v10 <= 1.59271755e13) {
    Swift::UInt8 v45 = v10;
  }
  else {
    Swift::UInt8 v45 = 1.59271755e13;
  }
  v77[0] = fmax(v45, -2.11845067e11);
  uint64_t result = v22(v79, v76, v77, ObjectType, v14);
  if ((LOBYTE(v79[2]) & 1) != 0)
  {
LABEL_104:
    unint64_t v25 = a8;
    if ((v55 & 1) != 0)
    {
LABEL_110:
      *(double *)unint64_t v25 = v10;
      *(_BYTE *)(v25 + 8) = 0;
      return result;
    }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v105)
        {
LABEL_40:
          Hasher._combine(_:)(0);
          __int128 v38 = v106;
          if (!v106) {
            goto LABEL_41;
          }
          goto LABEL_87;
        }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v112)
        {
LABEL_40:
          Hasher._combine(_:)(0);
          __int128 v35 = v113;
          if (!v113) {
            goto LABEL_41;
          }
          goto LABEL_87;
        }

          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
          uint64_t v66 = static _DictionaryStorage.copy(original:)();
          Swift::UInt v61 = v66;
          if (!*(void *)(v5 + 16)) {
            goto LABEL_117;
          }
          Swift::UInt v67 = (char *)(v66 + 64);
          unint64_t v107 = v61;
          __srca = (char *)(v5 + 64);
          int64_t v68 = (unint64_t)((1LL << *(_BYTE *)(v61 + 32)) + 63) >> 6;
          if (v61 != v5 || v67 >= &__srca[8 * v68]) {
            memmove(v67, __srca, 8 * v68);
          }
          uint64_t v69 = 0LL;
          *(void *)(v61 + 16) = *(void *)(v5 + 16);
          uint64_t v70 = 1LL << *(_BYTE *)(v5 + 32);
          uint64_t v71 = -1LL;
          if (v70 < 64) {
            uint64_t v71 = ~(-1LL << v70);
          }
          unint64_t v72 = v71 & *(void *)(v5 + 64);
          int64_t v73 = (unint64_t)(v70 + 63) >> 6;
          while (1)
          {
            if (v72)
            {
              uint64_t v74 = __clz(__rbit64(v72));
              v72 &= v72 - 1;
              unint64_t v75 = v74 | (v69 << 6);
            }

            else
            {
              id v84 = v69 + 1;
              if (__OFADD__(v69, 1LL))
              {
LABEL_121:
                __break(1u);
                goto LABEL_122;
              }

              if (v84 >= v73) {
                goto LABEL_117;
              }
              id v85 = *(void *)&__srca[8 * v84];
              ++v69;
              if (!v85)
              {
                uint64_t v69 = v84 + 1;
                if (v84 + 1 >= v73) {
                  goto LABEL_117;
                }
                id v85 = *(void *)&__srca[8 * v69];
                if (!v85)
                {
                  uint64_t v69 = v84 + 2;
                  if (v84 + 2 >= v73) {
                    goto LABEL_117;
                  }
                  id v85 = *(void *)&__srca[8 * v69];
                  if (!v85)
                  {
                    uint64_t v69 = v84 + 3;
                    if (v84 + 3 >= v73) {
                      goto LABEL_117;
                    }
                    id v85 = *(void *)&__srca[8 * v69];
                    if (!v85)
                    {
                      uint64_t v69 = v84 + 4;
                      if (v84 + 4 >= v73) {
                        goto LABEL_117;
                      }
                      id v85 = *(void *)&__srca[8 * v69];
                      if (!v85)
                      {
                        uint64_t v69 = v84 + 5;
                        if (v84 + 5 >= v73) {
                          goto LABEL_117;
                        }
                        id v85 = *(void *)&__srca[8 * v69];
                        if (!v85)
                        {
                          uint64_t v69 = v84 + 6;
                          if (v84 + 6 >= v73) {
                            goto LABEL_117;
                          }
                          id v85 = *(void *)&__srca[8 * v69];
                          if (!v85)
                          {
                            id v86 = v84 + 7;
                            if (v86 >= v73) {
                              goto LABEL_117;
                            }
                            id v85 = *(void *)&__srca[8 * v86];
                            if (!v85)
                            {
                              while (1)
                              {
                                uint64_t v69 = v86 + 1;
                                if (__OFADD__(v86, 1LL)) {
                                  goto LABEL_123;
                                }
                                Swift::UInt v61 = v107;
                                if (v69 >= v73) {
                                  break;
                                }
                                id v85 = *(void *)&__srca[8 * v69];
                                ++v86;
                                if (v85) {
                                  goto LABEL_116;
                                }
                              }

        uint64_t v120 = (v56 - 1) & v56;
        uint64_t v121 = v57;
        uint64_t v54 = __clz(__rbit64(v56)) + (v57 << 6);
      }

      unint64_t v59 = (uint64_t *)(v2[6] + 16 * v54);
      Swift::UInt v61 = *v59;
      unint64_t v60 = v59[1];
      Swift::UInt v62 = v2[7] + 48 * v54;
      int64_t v63 = *(void *)v62;
      unint64_t v64 = *(void *)(v62 + 8);
      int64_t v65 = *(void *)(v62 + 16);
      uint64_t v66 = *(void *)(v62 + 24);
      Swift::UInt v67 = *(void *)(v62 + 32);
      int64_t v68 = *(unsigned __int8 *)(v62 + 40);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      __int128 v115 = v63;
      char v116 = v64;
      uint64_t v118 = v67;
      LODWORD(v117) = v68;
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v63, v64, v65, v66, v67, v68);
      String.hash(into:)();
      uint64_t v69 = Hasher._finalize()();
      Swift::UInt8 v45 = v112;
      uint64_t v70 = -1LL << *((_BYTE *)v112 + 32);
      uint64_t v71 = v69 & ~v70;
      unint64_t v72 = v71 >> 6;
      if (((-1LL << v71) & ~v49[v71 >> 6]) != 0)
      {
        uint64_t v50 = __clz(__rbit64((-1LL << v71) & ~v49[v71 >> 6])) | v71 & 0x7FFFFFFFFFFFFFC0LL;
        goto LABEL_65;
      }

      int64_t v73 = 0;
      uint64_t v74 = (unint64_t)(63 - v70) >> 6;
      do
      {
        if (++v72 == v74 && (v73 & 1) != 0)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }

        unint64_t v75 = v72 == v74;
        if (v72 == v74) {
          unint64_t v72 = 0LL;
        }
        v73 |= v75;
        unint64_t v76 = v49[v72];
      }

      while (v76 == -1);
      uint64_t v50 = __clz(__rbit64(~v76)) + (v72 << 6);
LABEL_65:
      *(void *)((char *)v49 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v50;
      Swift::UInt v51 = (void *)(v45[6] + 16 * v50);
      *Swift::UInt v51 = v61;
      v51[1] = v60;
      int64_t v52 = v45[7] + 48 * v50;
      uint64_t v53 = v116;
      *(void *)int64_t v52 = v115;
      *(void *)(v52 + 8) = v53;
      *(void *)(v52 + 16) = v65;
      *(void *)(v52 + 24) = v66;
      uint64_t v2 = (void *)v119;
      *(void *)(v52 + 32) = v118;
      *(_BYTE *)(v52 + 40) = v117;
      ++v45[2];
      uint64_t v48 = v114 - 1;
      uint64_t v47 = v120;
      uint64_t v46 = v121;
      if (v114 == 1) {
        return v45;
      }
    }
  }

  swift_retain();
  return v2;
}

      uint64_t v54 = String.UTF8View._foreignCount()();
      goto LABEL_29;
    }
  }

  __int128 v137 = (char *)&v131;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  a7 = (uint64_t)&v131 - v27;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, a7, v26, 1, v23, v22);
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
  {
    a4 = (void *)a6;
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    uint64_t v43 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v44 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v15 = (int *)objc_msgSend(v43, sel_initWithDomain_code_userInfo_, v44, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    Swift::UInt8 v45 = objc_msgSend(v15, sel_domain);
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    uint64_t v48 = v47;

    char v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    a7 = v50;
    if (v46 == v49 && v48 == v50)
    {
      swift_bridgeObjectRelease_n();
      a6 = (uint64_t)a4;
    }

    else
    {
      int64_t v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a6 = (uint64_t)a4;
      if ((v65 & 1) == 0)
      {
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
    }

    swift_willThrow();
    __int128 v40 = v139;
    __int128 v39 = v141;
    __int128 v41 = v138;
LABEL_68:
    swift_willThrow();
    goto LABEL_77;
  }

  __int128 v23 = *a3;
  __int128 v22 = a3[1];
  __int128 v132 = a6;
  if ((v22 & 0x1000000000000000LL) != 0) {
    goto LABEL_81;
  }
  if ((v22 & 0x2000000000000000LL) != 0) {
    uint64_t v30 = HIBYTE(v22) & 0xF;
  }
  else {
    uint64_t v30 = v23 & 0xFFFFFFFFFFFFLL;
  }
LABEL_14:
  a6 = 3 * v30;
  if ((unsigned __int128)(v30 * (__int128)3LL) >> 64 != (3 * v30) >> 63)
  {
    __break(1u);
    goto LABEL_83;
  }

  if (a6 < -1)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }

  uint64_t v31 = a6 + 1;
  outlined copy of PathOrURL(v141, v139, v132, v138);
  swift_bridgeObjectRetain();
  uint64_t v32 = swift_bridgeObjectRetain();
  if (a6 < 1024 || (uint64_t v32 = swift_stdlib_isStackAllocationSafe(), (v32 & 1) != 0))
  {
    __int128 v131 = (uint64_t)&v131;
    MEMORY[0x1895F8858](v32);
    uint64_t v34 = (char *)&v131 - v33;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v34, v31, 1, v23, v22);
    __int128 v36 = v35;
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
    {
      __int128 v37 = v34;
      __int128 v38 = (char *)a7;
      __int128 v39 = v141;
      __int128 v40 = v139;
      a6 = v132;
      __int128 v41 = v138;
      __int128 v42 = v136;
      closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( v37,  v38,  a3,  v141,  v139,  v132,  v138,  v135,  v134,  (uint64_t)a8,  v133,  v140,  (uint64_t)a4,  v15);
      if (!v42) {
        goto LABEL_47;
      }
      goto LABEL_50;
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    uint64_t v66 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    Swift::UInt v67 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    int64_t v68 = objc_msgSend(v66, sel_initWithDomain_code_userInfo_, v67, 514, _NativeDictionary.bridged()(), v131);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v69 = objc_msgSend(v68, sel_domain);
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    unint64_t v72 = v71;

    if (v70 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v72 == v73)
    {
      swift_bridgeObjectRelease_n();
      a6 = v132;
      __int128 v39 = v141;
LABEL_49:
      swift_willThrow();
      __int128 v40 = v139;
      __int128 v41 = v138;
LABEL_50:
      swift_willThrow();
LABEL_67:
      outlined consume of PathOrURL(v39, v40, a6, v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_68;
    }

    id v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a6 = v132;
    __int128 v39 = v141;
    if ((v91 & 1) != 0) {
      goto LABEL_49;
    }
    goto LABEL_87;
  }

  __int128 v83 = swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, v83, v31, 1, v23, v22);
  id v85 = v84;
  swift_bridgeObjectRelease();
  if ((v85 & 1) != 0)
  {
    id v89 = v83;
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    Swift::UInt8 v102 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    Swift::UInt8 v103 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    Swift::UInt8 v104 = objc_msgSend(v102, sel_initWithDomain_code_userInfo_, v103, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    Swift::Int v105 = objc_msgSend(v104, sel_domain);
    uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
    unint64_t v108 = v107;

    if (v106 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v108 == v109)
    {
      swift_bridgeObjectRelease_n();
      __int128 v39 = v141;
    }

    else
    {
      uint64_t v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __int128 v39 = v141;
      if ((v117 & 1) == 0)
      {
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
      }
    }

    swift_willThrow();
    a6 = v132;
    __int128 v40 = v139;
    __int128 v41 = v138;
LABEL_66:
    MEMORY[0x186E20E60](v89, -1LL, -1LL);
    goto LABEL_67;
  }

  id v86 = (char *)v83;
  id v87 = (char *)a7;
  id v88 = a3;
  __int128 v39 = v141;
  __int128 v40 = v139;
  id v89 = v83;
  a6 = v132;
  __int128 v41 = v138;
  id v90 = v136;
  closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)( v86,  v87,  v88,  v141,  v139,  v132,  v138,  v135,  v134,  (uint64_t)a8,  v133,  v140,  (uint64_t)a4,  v15);
  if (v90) {
    goto LABEL_66;
  }
  MEMORY[0x186E20E60](v89, -1LL, -1LL);
LABEL_47:
  outlined consume of PathOrURL(v39, v40, a6, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_77:
  outlined consume of PathOrURL(v39, v40, a6, v41);
  return swift_bridgeObjectRelease();
}

          int64_t v57 = 512LL;
LABEL_93:
          v210 = v57;
          __int128 v134 = v17;
          swift_retain_n();
          __int128 v135 = v15;
          swift_retain_n();
          __int128 v136 = v135;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            __int128 v137 = (int)POSIXErrorCode.rawValue.getter();
            __int128 v138 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
            uint64_t v139 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            uint64_t v122 = objc_msgSend(v138, sel_initWithDomain_code_userInfo_, v139, v137, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            __int128 v140 = objc_msgSend(v122, sel_domain);
            __int128 v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
            __int128 v143 = v142;

            if (v141 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v143 == v144)
            {
              swift_bridgeObjectRelease_n();
            }

            else
            {
              Path = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((Path & 1) == 0)
              {
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
                goto LABEL_162;
              }
            }

            __int128 v17 = v134;
LABEL_99:
            v145 = v15;
            swift_retain();
            swift_retain();
            if (!_foundation_swift_url_feature_enabled())
            {
              __int128 v150 = objc_msgSend(v145, sel__parameterString);
              if (v150)
              {
                __int128 v151 = v150;
                __int128 v152 = static String._unconditionallyBridgeFromObjectiveC(_:)(v150);
                __int128 v154 = v153;

                if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                  && (v155 = objc_msgSend(v145, sel_path)) != 0)
                {
                  v156 = v155;
                  v157 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
                  v209 = v145;
                  v158 = v15;
                  v160 = v159;

                  v277 = (uint64_t)v157;
                  *(void *)v278 = v160;
                  swift_bridgeObjectRetain();
                  v161._countAndFlagsBits = 59LL;
                  v161._object = (void *)0xE100000000000000LL;
                  String.append(_:)(v161);
                  uint64_t v15 = v158;
                  v145 = v209;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  v162._countAndFlagsBits = (uint64_t)v152;
                  v162._object = v154;
                  String.append(_:)(v162);
                  swift_bridgeObjectRelease();
                }

                else
                {
                  v277 = 59LL;
                  *(void *)v278 = 0xE100000000000000LL;
                  v170._countAndFlagsBits = (uint64_t)v152;
                  v170._object = v154;
                  String.append(_:)(v170);
                }

                swift_bridgeObjectRelease();
                v171 = (uint64_t)v206;
                outlined consume of PathOrURL(v15, v16, (uint64_t)v206, 1);
              }

              else
              {
                v172 = objc_msgSend(v145, sel_path);
                if (v172)
                {
                  v173 = v172;
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v172);
                }

                v171 = (uint64_t)v206;
                outlined consume of PathOrURL(v15, v16, (uint64_t)v206, 1);
              }

              goto LABEL_124;
            }

            *(void *)&v278[8] = v206;
            __int128 v146 = v145;
            v205 = (uint64_t *)v16;
            swift_retain();
            swift_retain();
            __int128 v147 = URL.path(percentEncoded:)(1);
            countAndFlagsBits = v147._countAndFlagsBits;
            v277 = v147._countAndFlagsBits;
            *(void *)v278 = v147._object;
            swift_bridgeObjectRetain();
            v204 = v15;
            v207 = v17;
            if (String.count.getter() <= 1)
            {
              object = (unint64_t)v147._object;
            }

            else
            {
              object = (unint64_t)v147._object;
              if ((specialized BidirectionalCollection.last.getter( v147._countAndFlagsBits,  (unint64_t)v147._object) & 0x1FF) == 0x2F)
              {
                specialized RangeReplaceableCollection<>.popLast()();
                swift_bridgeObjectRelease();
                countAndFlagsBits = v277;
                object = *(void *)v278;
              }
            }

            *(void *)&v213 = Set.init(minimumCapacity:)();
            v163 = specialized Set._Variant.insert(_:)(&v211, 0x2FuLL);
            v164 = v213;
            v165 = HIBYTE(object) & 0xF;
            if ((object & 0x2000000000000000LL) == 0) {
              v165 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (v165)
            {
              v209 = v145;
              *(void *)&v213 = countAndFlagsBits;
              *((void *)&v213 + 1) = object;
              MEMORY[0x1895F8858](v163);
              v194 = (uint64_t)&v213;
              v195 = v164;
              swift_bridgeObjectRetain();
              specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v193,  countAndFlagsBits,  object);
              if (v166 == 1)
              {
                v167 = v213;
                swift_bridgeObjectRetain();
                specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v167,  *((unint64_t *)&v167 + 1),  v164);
                v169 = v168;
                swift_bridgeObjectRelease();
              }

              else
              {
                v169 = v166;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v15 = v204;
              uint64_t v16 = (unint64_t)v205;
              v145 = v209;
              if (!v169)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v175 = (uint64_t)v206;
                outlined consume of PathOrURL(v15, v16, (uint64_t)v206, 1);
                outlined consume of PathOrURL(v15, v16, v175, 1);
                goto LABEL_123;
              }
            }

            else
            {
              swift_bridgeObjectRelease();
              uint64_t v15 = v204;
              uint64_t v16 = (unint64_t)v205;
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v174 = (uint64_t)v206;
            outlined consume of PathOrURL(v15, v16, (uint64_t)v206, 1);
            outlined consume of PathOrURL(v15, v16, v174, 1);
LABEL_123:
            v171 = (uint64_t)v206;
LABEL_124:
            v176 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v177 = v145;
            v178 = v171;
            outlined consume of PathOrURL(v15, v16, v171, 1);
            if (v122)
            {
              v277 = (uint64_t)v122;
              lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
              uint64_t v122 = v122;
              if (_getErrorEmbeddedNSError<A>(_:)())
              {
              }

              else
              {
                swift_allocError();
                *v180 = v122;
              }

              v179 = (void *)_swift_stdlib_bridgeErrorToNSError();
            }

            else
            {
              v179 = 0LL;
            }

             objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v210,  v176,  v177,  v179,  0,  0,  0);

            swift_unknownObjectRelease();
            outlined consume of PathOrURL(v15, v16, v178, 1);
            return swift_willThrow();
          }

          break;
      }

    __break(1u);
    goto LABEL_86;
  }

  __int128 v17 = type metadata accessor for DecodingError();
  swift_allocError();
  __int128 v19 = v18;
  *__int128 v18 = v105;
  if (a9 == -1)
  {
    _CodingPathNode.path.getter(a5);
  }

  else
  {
    outlined copy of _CodingKey(a6, a7, a8, a9);
    __int128 v20 = _CodingPathNode.path.getter(a5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    __int128 v21 = swift_initStackObject();
    *(_OWORD *)(v21 + 16) = xmmword_183720D90;
    *(void *)(v21 + 56) = &type metadata for _CodingKey;
    *(void *)(v21 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    __int128 v22 = swift_allocObject();
    *(void *)(v21 + 32) = v22;
    *(void *)(v22 + 16) = a6;
    *(void *)(v22 + 24) = a7;
    *(void *)(v22 + 32) = a8;
    *(_BYTE *)(v22 + 40) = a9;
    uint64_t v121 = v20;
    specialized Array.append<A>(contentsOf:)(v21);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  uint64_t v121 = 0LL;
  uint64_t v122 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(55LL);
  v35._countAndFlagsBits = 0xD000000000000019LL;
  v35._object = (void *)0x80000001839D2D40LL;
  String.append(_:)(v35);
  v36._object = (void *)0x80000001839D2E40LL;
  v36._countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0xD00000000000001CLL;
  v37._object = (void *)0x80000001839D2D60LL;
  String.append(_:)(v37);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v17 - 8) + 104LL))( v19,  *MEMORY[0x189619368],  v17);
  return swift_willThrow();
}

                        __break(1u);
LABEL_86:
                        swift_unexpectedError();
                        __break(1u);
LABEL_87:
                        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                        JUMPOUT(0x1834112B4LL);
                      }

                      __int128 v151 = v138 + 5;
                    }
                  }
                }
              }

      if (v14) {
        goto LABEL_118;
      }
      goto LABEL_86;
    }
  }

  swift_unknownObjectRetain_n();
  swift_retain();
  uint64_t v12 = specialized Rope._endPath.getter(v5);
  uint64_t result = (void *)swift_unknownObjectRelease();
  int64_t v13 = 0LL;
  unint64_t v14 = 0LL;
  if (!v5)
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = a2;
    goto LABEL_14;
  }

  __break(1u);
LABEL_86:
  result.value._object = v23;
  result.value._countAndFlagsBits = (uint64_t)v22;
  return result;
}

  v75((uint64_t)&v73);
  +[__NSOperationInternalObserver _observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:]( &OBJC_CLASS_____NSOperationInternalObserver,  "_observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:",  @"isReady",  v64,  0LL,  0LL,  0LL,  0LL,  0LL);
LABEL_86:

LABEL_87:
  if (!v62) {
    goto LABEL_102;
  }
  Class = object_getClass(v64);
  uint64_t v53 = 0LL;
  int64_t v73 = MEMORY[0x1895F87A8];
  uint64_t v74 = 3221225472LL;
  unint64_t v75 = ____NSOQOpFinished_block_invoke;
  unint64_t v76 = &unk_189C9F600;
  Swift::UInt v77 = v62;
  Swift::UInt v78 = v64;
  int64_t v79 = v63;
  unint64_t v80 = Class == (Class)&OBJC_CLASS____NSBarrierOperation;
  uint64_t v54 = 1;
  while (1)
  {
LABEL_89:
    uint64_t v55 = v54;
    unint64_t v56 = _NSOperationQueueOperationsAndOperationCountKeys[v53];
    if (v56 == @"operations")
    {
      int64_t v57 = v62 + 503;
      goto LABEL_95;
    }

    if (v56 == @"operationCount") {
      break;
    }
    uint64_t v54 = 0;
    uint64_t v53 = 1LL;
    if ((v55 & 1) == 0) {
      goto LABEL_99;
    }
  }

  int64_t v57 = v62 + 504;
LABEL_95:
  uint64_t v58 = atomic_load(v57);
  unint64_t v59 = v58 != 0;
  if (!v58)
  {
    uint64_t v54 = 0;
    uint64_t v53 = 1LL;
    if (((v55 ^ 1) & 1) == 0) {
      goto LABEL_89;
    }
  }

  if (v59)
  {
    [v62 _changeValueForKeys:_NSOperationQueueOperationsAndOperationCountKeys count:2 maybeOldValuesDict:0 maybeNewValuesDict:0 usingBlock:&v73];
    goto LABEL_100;
  }

                  unint64_t v60 = -[NSString stringByAppendingPathComponent:](v93, "stringByAppendingPathComponent:", v58);
                  Swift::UInt v61 = (void *)v91;
LABEL_86:
                  [v61 addObject:v60];
                  continue;
                }
              }

LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
}

      __break(1u);
LABEL_140:
      __break(1u);
      goto LABEL_141;
    }

    Swift::UInt8 v45 = v18;
    if (v90 == 2)
    {
      uint64_t v46 = v87;
      if (v42)
      {
        outlined retain of AttributedString.Runs((uint64_t)&v137);
        swift_unknownObjectRetain();
        uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v88, v87, v9, v42, v43, v86);
        uint64_t v47 = result;
      }

      else
      {
        uint64_t result = swift_retain();
        uint64_t v47 = 0LL;
      }
    }

    else
    {
      uint64_t v47 = v82 >> 11;
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v46 = v87;
    }

      swift_unknownObjectRetain();
      unint64_t v107 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v96, v108, v5, v42, v95);
      uint64_t result = swift_unknownObjectRelease_n();
LABEL_158:
      uint64_t v112 = v346 - v3;
      if (__OFSUB__(v346, v3)) {
        goto LABEL_399;
      }
      uint64_t v113 = v346;
LABEL_160:
      *(void *)&v369 = v96;
      *((void *)&v369 + 1) = v108;
      *(void *)&v370 = v5;
      *((void *)&v370 + 1) = v107;
      *(void *)&v371 = v112;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v369,  0LL,  v113,  (void *)v33,  (uint64_t *)&v351,  v334,  v336,  (uint64_t)&v357);
      swift_bridgeObjectRelease();
      swift_release();
      Swift::UInt v78 = v371;
      uint64_t v121 = *(void *)(v33 + 64);
      uint64_t v122 = *(void *)(v33 + 72);
      uint64_t v123 = *(void *)(v33 + 80);
      uint64_t v124 = *(void *)(v33 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( 0LL,  v343 & 1,  v121,  v122,  v123,  v124,  (uint64_t *)&v437);
      int64_t v125 = v439;
      swift_unknownObjectRelease();
      if (v125 >= v78 || !*(void *)(v351 + 16))
      {
        swift_release();
        __int128 v83 = v348;
        goto LABEL_164;
      }
    }
  }

  swift_release();
LABEL_164:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&v369 = v83;
  uint64_t v126 = *(void *)(v33 + 64);
  __int128 v127 = *(void *)(v33 + 72);
  __int128 v128 = *(void *)(v33 + 80);
  __int128 v42 = *(void *)(v33 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v83 - 1,  v343 & 1,  v126,  v127,  v128,  v42,  (uint64_t *)&v437);
  v335 = v438;
  v337 = v437;
  __int128 v129 = v439;
  swift_unknownObjectRelease();
  v450[0] = v337;
  v450[1] = v335;
  v451 = v129;
  __int128 v130 = *(void *)(v33 + 64);
  __int128 v131 = *(void *)(v33 + 72);
  __int128 v132 = *(void *)(v33 + 80);
  __int128 v133 = *(void *)(v33 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v450, v130, v131, v132, v133);
  __int128 v135 = v134;
  uint64_t v3 = v136;
  swift_unknownObjectRelease();
  unint64_t v11 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)( (uint64_t (*)(uint64_t, uint64_t, __int128 *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:),  0LL,  v135);
  uint64_t v43 = v137;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(v11 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v5 = 0LL;
  *(void *)&v351 = result;
  __int128 v138 = 1LL << *(_BYTE *)(v11 + 32);
  char v49 = -1LL;
  if (v138 < 64) {
    char v49 = ~(-1LL << v138);
  }
  uint64_t v139 = v11 + 64;
  __int128 v140 = v49 & *(void *)(v11 + 64);
  uint64_t v44 = (unint64_t)(v138 + 63) >> 6;
  while (1)
  {
    if (v140)
    {
      __int128 v141 = __clz(__rbit64(v140));
      v140 &= v140 - 1;
      __int128 v142 = v141 | (v5 << 6);
      goto LABEL_168;
    }

    uint64_t v46 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      goto LABEL_369;
    }
    if (v46 >= v44)
    {
LABEL_188:
      swift_release();
      __int128 v146 = *(_OWORD *)(v33 + 32);
      v447 = *(_OWORD *)(v33 + 16);
      v448 = v146;
      v449 = *(_OWORD *)(v33 + 48);
      BigString.utf8.getter();
      __int128 v147 = BigString.UTF8View.count.getter();
      uint64_t result = outlined release of Locale((uint64_t)v380);
      if (v147 < v348)
      {
LABEL_403:
        __break(1u);
LABEL_404:
        __break(1u);
LABEL_405:
        __break(1u);
LABEL_406:
        __break(1u);
        goto LABEL_407;
      }

      uint64_t v3 = *(void *)(v33 + 64);
      __int128 v148 = *(void *)(v33 + 72);
      __int128 v149 = *(void *)(v33 + 80);
      __int128 v150 = *(void *)(v33 + 88);
      swift_unknownObjectRetain();
      swift_retain();
      __int128 v151 = v150;
      __int128 v35 = v348;
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v348,  v343 & 1,  v3,  v148,  v149,  v151,  (uint64_t *)&v437);
      v344 = v437;
      __int128 v152 = v438;
      __int128 v153 = v439;
      swift_unknownObjectRelease();
      v437 = v344;
      v438 = v152;
      *(void *)&v439 = v153;
      if (v348 != v147) {
        goto LABEL_193;
      }
LABEL_194:
      AttributedString._InternalRunsSlice.startIndex.getter((void *)v33, v35, v381);
      for (i = &v382; v153 < *i && !specialized Collection.isEmpty.getter(v351); i = &v384)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v437,  v35,  v147,  (void *)v33,  (uint64_t *)&v351,  v11,  v43,  (uint64_t)&v369);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)( (void *)v33,  v35,  v147,  (uint64_t *)&v437);
        __int128 v153 = v439;
        if (v35 == v147) {
          goto LABEL_194;
        }
LABEL_193:
        uint64_t v3 = *(void *)(v33 + 64);
        __int128 v154 = *(void *)(v33 + 72);
        v155 = *(void *)(v33 + 80);
        v156 = *(void *)(v33 + 88);
        v157 = swift_unknownObjectRetain();
        v158 = v156;
        __int128 v35 = v348;
        AttributedString._InternalRuns.endIndex.getter(v157, v154, v155, v158, v383);
        swift_unknownObjectRelease();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v34 = v357;
      __int128 v36 = v369;
      __int128 v20 = v320;
      uint64_t v5 = v331;
LABEL_198:
      v160 = *(_OWORD *)(v33 + 32);
      v444 = *(_OWORD *)(v33 + 16);
      v445 = v160;
      v446 = *(_OWORD *)(v33 + 48);
      BigString.utf8.getter();
      v161 = BigString.UTF8View.count.getter();
      outlined release of Locale((uint64_t)v385);
      v162 = *(_OWORD **)v5;
      v163 = *(_OWORD *)(*(void *)v5 + 32LL);
      v369 = *(_OWORD *)(*(void *)v5 + 16LL);
      v370 = v163;
      v164 = *(_OWORD *)(v5 + 8);
      v371 = v162[3];
      v372 = v164;
      v165 = *(_OWORD *)(v5 + 40);
      v373 = *(_OWORD *)(v5 + 24);
      v374 = v165;
      v375 = *(_OWORD *)(v5 + 56);
      swift_unknownObjectRetain();
      BigString.init()();
      v166 = v387;
      v162[1] = v386;
      v162[2] = v166;
      v162[3] = v388;
      swift_unknownObjectRelease();
      LODWORD(v437) = v332;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<Unicode.Scalar>);
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type CollectionOfOne<Unicode.Scalar> and conformance CollectionOfOne<A>,  &demangling cache variable for type metadata for CollectionOfOne<Unicode.Scalar>,  MEMORY[0x189619498]);
      BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)();
      v167 = *(_OWORD **)v5;
      v441 = v373;
      v442 = v374;
      v443 = v375;
      v437 = v369;
      v438 = v370;
      v440 = v372;
      v439 = v371;
      v458 = v372;
      v459 = v373;
      v460 = v374;
      v461 = v375;
      BigSubstring.UnicodeScalarView.base.getter();
      v168 = v399;
      v167[1] = v398;
      v167[2] = v168;
      v167[3] = v400;
      swift_unknownObjectRelease();
      v169 = v459;
      *(_OWORD *)(v5 + 8) = v458;
      *(_OWORD *)(v5 + 24) = v169;
      v170 = v461;
      *(_OWORD *)(v5 + 40) = v460;
      *(_OWORD *)(v5 + 56) = v170;
      v171 = *(void *)v5;
      v172 = *(_OWORD *)(*(void *)v5 + 32LL);
      v434 = *(_OWORD *)(*(void *)v5 + 16LL);
      v435 = v172;
      v436 = *(_OWORD *)(v171 + 48);
      BigString.utf8.getter();
      v173 = BigString.UTF8View.count.getter();
      uint64_t result = outlined release of Locale((uint64_t)v389);
      v174 = v173 - v161;
      if (__OFSUB__(v173, v161)) {
        goto LABEL_392;
      }
      v175 = v329 + v174;
      if (__OFADD__(v329, v174))
      {
LABEL_393:
        __break(1u);
      }

      else
      {
        swift_bridgeObjectRetain();
        uint64_t v3 = MEMORY[0x18961AFF8];
        swift_bridgeObjectRetain();
        specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v346, v35, v175, v20, v3);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v176 = *(void *)v5;
        v177 = *(_OWORD *)(*(void *)v5 + 32LL);
        v431 = *(_OWORD *)(*(void *)v5 + 16LL);
        v432 = v177;
        v433 = *(_OWORD *)(v176 + 48);
        BigString.utf8.getter();
        v178 = BigString.UTF8View.count.getter();
        uint64_t result = outlined release of Locale((uint64_t)v390);
        v179 = v178 - v161;
        if (!__OFSUB__(v178, v161))
        {
          uint64_t v48 = __OFADD__(v36, v179);
          v180 = v36 + v179;
          if (!v48)
          {
            if (v180 >= v34)
            {
              v325 = v176;
              v181 = *(void *)(v176 + 80);
              if (!*(void *)(v176 + 64))
              {
                v220 = swift_unknownObjectRetain();
                specialized Rope._endPath.getter(v220);
                swift_unknownObjectRelease();
                goto LABEL_240;
              }

              v318 = v34;
              v319 = v180;
              v182 = swift_unknownObjectRetain_n();
              specialized Rope._endPath.getter(v182);
              swift_unknownObjectRelease_n();
              if (!v181) {
                goto LABEL_240;
              }
              v183 = (__int128 *)(v176 + 16);
              v184 = *(_OWORD *)(v176 + 32);
              v428 = *(_OWORD *)(v176 + 16);
              v429 = v184;
              v430 = *(_OWORD *)(v176 + 48);
              BigString.utf8.getter();
              BigString.startIndex.getter();
              v185 = BigString.UTF8View.index(_:offsetBy:)();
              uint64_t v3 = v186;
              v188 = v187;
              v190 = v189;
              outlined release of Locale((uint64_t)v391);
              v191 = *(_OWORD *)(v325 + 32);
              v425 = *(_OWORD *)(v325 + 16);
              v426 = v191;
              v427 = *(_OWORD *)(v325 + 48);
              uint64_t result = BigString.utf8.getter();
              if (!__OFSUB__(v319, v34))
              {
                v192 = BigString.UTF8View.index(_:offsetBy:)();
                v194 = v193;
                v195 = v183;
                v197 = v196;
                v199 = v198;
                outlined release of Locale((uint64_t)v392);
                specialized Range.init(uncheckedBounds:)(v185, v3, v188, v190, v192, v194, v197, v199, v418);
                *(void *)&v417[0] = MEMORY[0x18961AFF0];
                v200 = v195[1];
                v422 = *v195;
                v423 = v200;
                v424 = v195[2];
                BigString.unicodeScalars.getter();
                v317 = v418[0];
                v201 = BigString.UnicodeScalarView.index(roundingDown:)();
                v203 = v202;
                uint64_t v3 = v204;
                v206 = v205;
                outlined release of Locale((uint64_t)v393);
                v207 = v195[1];
                v419 = *v195;
                v420 = v207;
                v328 = (unint64_t)v195;
                v421 = v195[2];
                BigString.unicodeScalars.getter();
                v316 = v418[4];
                v208 = BigString.UnicodeScalarView.index(roundingUp:)();
                uint64_t result = outlined release of Locale((uint64_t)v394);
                *(void *)&v462 = v201;
                *((void *)&v462 + 1) = v203;
                *(void *)&v463 = v3;
                *((void *)&v463 + 1) = v206;
                uint64_t v44 = v201 >> 11;
                uint64_t v5 = v208 >> 11;
                if (v208 >> 11 >= v201 >> 11)
                {
                  uint64_t v16 = *(void *)(v325 + 64);
                  if (v16) {
                    v209 = *(void *)(v325 + 80);
                  }
                  else {
                    v209 = 0LL;
                  }
                  if (v209 >= v44)
                  {
                    v210 = *(void *)(v325 + 72);
                    unint64_t v11 = *(void *)(v325 + 88);
                    if (!v16 || v44 >= *(void *)(v325 + 80) || !*(_WORD *)(v16 + 16))
                    {
                      swift_retain_n();
                      v221 = swift_unknownObjectRetain_n();
                      uint64_t v3 = specialized Rope._endPath.getter(v221);
                      swift_unknownObjectRelease();
                      uint64_t v43 = 0LL;
                      v211 = 0LL;
                      if (!v16) {
                        goto LABEL_372;
                      }
                      goto LABEL_242;
                    }

                    v346 = *(void *)(v325 + 72);
                    __int128 v42 = *(unsigned __int8 *)(v16 + 18);
                    if (!*(_BYTE *)(v16 + 18))
                    {
                      swift_unknownObjectRetain_n();
                      uint64_t result = swift_retain_n();
                      v211 = v44;
                      uint64_t v43 = v16;
LABEL_327:
                      uint64_t v3 = *(unsigned __int16 *)(v43 + 16);
                      if (!*(_WORD *)(v43 + 16)) {
                        goto LABEL_333;
                      }
                      v298 = *(void *)(v43 + 24);
                      unint64_t v56 = v211 - v298;
                      if (__OFSUB__(v211, v298)) {
                        goto LABEL_420;
                      }
                      if (__OFADD__(v56, 1LL)) {
                        goto LABEL_421;
                      }
                      if (v56 + 1 <= 0)
                      {
                        uint64_t v3 = 0LL;
                      }

                      else
                      {
                        if ((_DWORD)v3 != 1) {
                          goto LABEL_351;
                        }
                        v211 -= v298;
LABEL_333:
                        if (v211)
                        {
                          __break(1u);
LABEL_335:
                          if (v43 < v319) {
                            goto LABEL_336;
                          }
LABEL_338:
                          LOBYTE(v44) = 0;
                          goto LABEL_339;
                        }
                      }

                      goto LABEL_371;
                    }

                    swift_unknownObjectRetain_n();
                    uint64_t result = swift_retain_n();
                    v211 = v44;
                    uint64_t v3 = v16;
                    while (1)
                    {
                      v213 = *(unsigned __int16 *)(v3 + 16);
                      if (!*(_WORD *)(v3 + 16)) {
                        goto LABEL_217;
                      }
                      v214 = *(void *)(v3 + 40);
                      v215 = v211 - v214;
                      if (__OFSUB__(v211, v214)) {
                        goto LABEL_389;
                      }
                      if (__OFADD__(v215, 1LL)) {
                        goto LABEL_390;
                      }
                      if (v215 + 1 <= 0)
                      {
                        v213 = 0LL;
                      }

                      else
                      {
                        if ((_DWORD)v213 == 1)
                        {
                          v211 -= v214;
                          goto LABEL_217;
                        }

                        v216 = *(void *)(v3 + 64);
                        uint64_t v48 = __OFSUB__(v215, v216);
                        v217 = v215 - v216;
                        if (v48) {
                          goto LABEL_405;
                        }
                        if (__OFADD__(v217, 1LL)) {
                          goto LABEL_406;
                        }
                        if (v217 + 1 < 1)
                        {
                          v213 = 1LL;
                          v211 = v215;
                        }

                        else
                        {
                          if ((_DWORD)v213 == 2)
                          {
                            v211 = v217;
LABEL_217:
                            if (v211) {
                              goto LABEL_388;
                            }
                            goto LABEL_218;
                          }

                          v218 = (void *)(v3 + 88);
                          v219 = 2LL;
                          while (1)
                          {
                            if (v213 == v219) {
                              goto LABEL_381;
                            }
                            v211 = v217 - *v218;
                            if (__OFSUB__(v217, *v218)) {
                              goto LABEL_382;
                            }
                            if (__OFADD__(v211, 1LL)) {
                              goto LABEL_383;
                            }
                            if (v211 + 1 < 1) {
                              break;
                            }
                            ++v219;
                            v218 += 3;
                            v217 = v211;
                            if (v213 == v219) {
                              goto LABEL_217;
                            }
                          }

                          v213 = v219;
                          v211 = v217;
                        }
                      }

      __break(1u);
LABEL_140:
      __break(1u);
      goto LABEL_141;
    }

    char v49 = v22;
    if (v96 == 2)
    {
      uint64_t v50 = v93;
      if (v46)
      {
        outlined retain of AttributedString.Runs((uint64_t)&v137);
        swift_unknownObjectRetain();
        uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v94, v93, v10, v46, v47, v92);
        Swift::UInt v51 = result;
      }

      else
      {
        uint64_t result = swift_retain();
        Swift::UInt v51 = 0LL;
      }
    }

    else
    {
      Swift::UInt v51 = v88 >> 11;
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v50 = v93;
    }

  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  if (v79)
  {
    id v87 = v69[2];
    if (v87) {
      goto LABEL_141;
    }
    goto LABEL_144;
  }

                          __int128 v83 = (v93 - 1) & v93;
                          id v90 = v94;
                          id v91 = __clz(__rbit64(v93)) + (v94 << 6);
                        }

                        id v96 = 16 * v91;
                        id v97 = *(void *)(v3 + 56);
                        uint64_t v98 = (uint64_t *)(*(void *)(v3 + 48) + v96);
                        Swift::UInt v100 = *v98;
                        uint64_t v99 = v98[1];
                        Swift::UInt v101 = (uint64_t *)(v97 + v96);
                        Swift::UInt8 v102 = *v101;
                        Swift::UInt8 v103 = *((_BYTE *)v101 + 8);
                        Hasher.init(_seed:)();
                        swift_bridgeObjectRetain();
                        String.hash(into:)();
                        Swift::UInt8 v104 = Hasher._finalize()();
                        Swift::Int v105 = -1LL << *(_BYTE *)(v81 + 32);
                        uint64_t v106 = v104 & ~v105;
                        unint64_t v107 = v106 >> 6;
                        if (((-1LL << v106) & ~*(void *)(v84 + 8 * (v106 >> 6))) != 0)
                        {
                          id v85 = __clz(__rbit64((-1LL << v106) & ~*(void *)(v84 + 8 * (v106 >> 6)))) | v106 & 0x7FFFFFFFFFFFFFC0LL;
                        }

                        else
                        {
                          unint64_t v108 = 0;
                          char v109 = (unint64_t)(63 - v105) >> 6;
                          do
                          {
                            if (++v107 == v109 && (v108 & 1) != 0) {
                              goto LABEL_153;
                            }
                            unint64_t v110 = v107 == v109;
                            if (v107 == v109) {
                              unint64_t v107 = 0LL;
                            }
                            v108 |= v110;
                            BOOL v111 = *(void *)(v84 + 8 * v107);
                          }

                          while (v111 == -1);
                          id v85 = __clz(__rbit64(~v111)) + (v107 << 6);
                        }

                        *(void *)(v84 + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v85;
                        id v86 = 16 * v85;
                        id v87 = (void *)(*(void *)(v81 + 48) + v86);
                        *id v87 = v100;
                        v87[1] = v99;
                        id v88 = *(void *)(v81 + 56) + v86;
                        *(void *)id v88 = v102;
                        *(_BYTE *)(v88 + 8) = v103;
                        ++*(void *)(v81 + 16);
                        char v49 = v115 - 1;
                        uint64_t v3 = v117;
                        __int128 v82 = v90;
                        if (v115 == 1) {
                          goto LABEL_149;
                        }
                      }
                    }

                    int64_t v28 = v37;
                  }
                }
              }
            }

        __break(1u);
      }

      goto LABEL_136;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      Swift::UInt8 v102 = v96;
      if ((v97 & 1) != 0) {
        goto LABEL_30;
      }
LABEL_106:
      __int128 v146 = v163;
      __int128 v147 = v98;
      outlined init with copy of ICUNumberFormatter.Signature( v56,  v163,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v147, v146, (uint64_t)v61, (void *)v102);
      goto LABEL_107;
    }
  }

  v164 = v98;
  LODWORD(v165) = v59;
  v166 = v58 + 24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  __int128 v129 = static _DictionaryStorage.copy(original:)();
  Swift::UInt8 v102 = v129;
  if (!*(void *)(v96 + 16))
  {
LABEL_105:
    swift_bridgeObjectRelease();
    id v94 = v174;
    unint64_t v56 = v171;
    int64_t v68 = (os_unfair_lock_s *)v166;
    uint64_t v98 = v164;
    if ((v165 & 1) != 0) {
      goto LABEL_30;
    }
    goto LABEL_106;
  }

  __int128 v130 = (int *)(v129 + 64);
  __int128 v131 = 1LL << *(_BYTE *)(v102 + 32);
  v169 = (int *)(v96 + 64);
  __int128 v132 = (unint64_t)(v131 + 63) >> 6;
  if (v102 != v96 || v130 >= &v169[2 * v132]) {
    memmove(v130, v169, 8 * v132);
  }
  v173 = 0LL;
  *(void *)(v102 + 16) = *(void *)(v96 + 16);
  __int128 v133 = 1LL << *(_BYTE *)(v96 + 32);
  __int128 v134 = -1LL;
  if (v133 < 64) {
    __int128 v134 = ~(-1LL << v133);
  }
  __int128 v135 = v134 & *(void *)(v96 + 64);
  v167 = (unint64_t)(v133 + 63) >> 6;
  __int128 v136 = v163;
  while (1)
  {
    if (v135)
    {
      __int128 v137 = __clz(__rbit64(v135));
      v135 &= v135 - 1;
      __int128 v138 = v137 | (v173 << 6);
      goto LABEL_81;
    }

    __int128 v142 = v173 + 1;
    if (__OFADD__(v173, 1LL))
    {
      __break(1u);
      goto LABEL_141;
    }

    if (v142 >= v167) {
      goto LABEL_105;
    }
    __int128 v143 = *(void *)&v169[2 * v142];
    uint64_t v144 = v173 + 1;
    if (!v143)
    {
      uint64_t v144 = v173 + 2;
      if (v173 + 2 >= v167) {
        goto LABEL_105;
      }
      __int128 v143 = *(void *)&v169[2 * v144];
      if (!v143)
      {
        uint64_t v144 = v173 + 3;
        if (v173 + 3 >= v167) {
          goto LABEL_105;
        }
        __int128 v143 = *(void *)&v169[2 * v144];
        if (!v143)
        {
          uint64_t v144 = v173 + 4;
          if (v173 + 4 >= v167) {
            goto LABEL_105;
          }
          __int128 v143 = *(void *)&v169[2 * v144];
          if (!v143)
          {
            uint64_t v144 = v173 + 5;
            if (v173 + 5 >= v167) {
              goto LABEL_105;
            }
            __int128 v143 = *(void *)&v169[2 * v144];
            if (!v143)
            {
              uint64_t v144 = v173 + 6;
              if (v173 + 6 >= v167) {
                goto LABEL_105;
              }
              __int128 v143 = *(void *)&v169[2 * v144];
              if (!v143)
              {
                uint64_t v144 = v173 + 7;
                if (v173 + 7 >= v167) {
                  goto LABEL_105;
                }
                __int128 v143 = *(void *)&v169[2 * v144];
                if (!v143) {
                  break;
                }
              }
            }
          }
        }
      }
    }

                  __break(1u);
LABEL_140:
                  __break(1u);
                }
              }
            }
          }

          __int128 v36 = v48;
        }

  int64_t v68 = v71;
  if ((*(_BYTE *)v71 & 2) != 0) {
    uint64_t v69 = v40 | 3;
  }
  else {
    uint64_t v69 = v40;
  }
  if ((v71[1] & 2) != 0) {
    uint64_t v70 = v54 | 3;
  }
  else {
    uint64_t v70 = v54;
  }
  if (v70 >> 14 >= v69 >> 14)
  {
    swift_bridgeObjectRelease();
    *int64_t v68 = v69;
    v68[1] = v70;
    v68[2] = v37;
    v68[3] = v39;
    return;
  }

                            v83[(v134 >> 6) + 8] |= 1LL << v134;
                            __int128 v142 = (uint64_t *)(v83[6] + 16 * v134);
                            *__int128 v142 = v138;
                            v142[1] = v131;
                            __int128 v143 = (uint64_t *)(v83[7] + 16 * v134);
                            *__int128 v143 = v14;
                            v143[1] = v82;
                            uint64_t v144 = v83[2];
                            uint64_t v44 = __OFADD__(v144, 1LL);
                            v145 = v144 + 1;
                            if (v44) {
                              goto LABEL_231;
                            }
                            v83[2] = v145;
                            swift_bridgeObjectRetain();
LABEL_141:
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
LABEL_131:
                            uint64_t v6 = v8 + 1;
                            v200 = (uint64_t)v83;
                            uint64_t v7 = v192;
                            goto LABEL_4;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            __int128 v151 = v164;
          }

                            v83[(v134 >> 6) + 8] |= 1LL << v134;
                            __int128 v142 = (uint64_t *)(v83[6] + 16 * v134);
                            *__int128 v142 = v138;
                            v142[1] = v131;
                            __int128 v143 = (uint64_t *)(v83[7] + 16 * v134);
                            *__int128 v143 = v14;
                            v143[1] = v82;
                            uint64_t v144 = v83[2];
                            uint64_t v44 = __OFADD__(v144, 1LL);
                            v145 = v144 + 1;
                            if (v44) {
                              goto LABEL_231;
                            }
                            v83[2] = v145;
                            swift_bridgeObjectRetain();
LABEL_141:
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
LABEL_131:
                            uint64_t v6 = v8 + 1;
                            v200 = (uint64_t)v83;
                            uint64_t v7 = v192;
                            goto LABEL_4;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            __int128 v151 = v164;
          }

        unint64_t v59 = (uint64_t)v21;
        swift_bridgeObjectRetain_n();
        specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v62, v59, v18, v6, v5);
        *(Swift::UInt16_optional *)&unint64_t v60 = String.UTF16View.Iterator.next()();
        uint64_t v6 = v60;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v6 & 0x10000) != 0) {
          goto LABEL_73;
        }
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
      }

LABEL_159:
            swift_release();
            uint64_t v3 = v118;
            if ((v130 & 1) != 0)
            {
              uint64_t v117 = 1LL << *(_BYTE *)(v13 + 32);
              if (v117 >= 64) {
                bzero(v120, ((unint64_t)(v117 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v120 = -1LL << v117;
              }
              *(void *)(v13 + 16) = 0LL;
            }

            swift_release();
            uint64_t v7 = v122;
            if ((v135 & 1) != 0)
            {
              uint64_t v120 = 1LL << *(_BYTE *)(v16 + 32);
              if (v120 >= 64) {
                bzero(v124, ((unint64_t)(v120 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v124 = -1LL << v120;
              }
              *(void *)(v16 + 16) = 0LL;
            }

                    __break(1u);
LABEL_160:
                    __break(1u);
                  }
                }
              }
            }

            int64_t v65 = v74;
          }

                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
                goto LABEL_163;
              }
            }

            Swift::UInt v78 = v84;
          }

                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
              }

              int64_t v63 = v51 + 6;
            }
          }
        }
      }
    }

  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  os_unfair_lock_unlock((os_unfair_lock_t)v65);
  __break(1u);
LABEL_162:
  os_unfair_lock_unlock((os_unfair_lock_t)v61);
  __break(1u);
LABEL_163:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

            unint64_t v107 = 512LL;
LABEL_163:
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
              __int128 v150 = (int)POSIXErrorCode.rawValue.getter();
              __int128 v151 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
              __int128 v152 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              uint64_t v118 = objc_msgSend( v151,  sel_initWithDomain_code_userInfo_,  v152,  v150,  _NativeDictionary.bridged()(),  v183,  v184);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              __int128 v153 = objc_msgSend(v118, sel_domain);
              __int128 v154 = static String._unconditionallyBridgeFromObjectiveC(_:)(v153);
              v156 = v155;

              if (v154 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                && v156 == v157)
              {
                swift_bridgeObjectRelease_n();
                id v96 = v186;
                int64_t v28 = v189;
                goto LABEL_168;
              }

              v158 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v96 = v186;
              int64_t v28 = v189;
              if ((v158 & 1) != 0) {
                goto LABEL_168;
              }
LABEL_218:
              __break(1u);
LABEL_219:
              __break(1u);
              goto LABEL_220;
            }

            value = 0LL;
            v193 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(22LL);
            swift_bridgeObjectRelease();
            value = 0xD000000000000014LL;
            v193 = 0x80000001839C9190LL;
            v191 = v97;
            break;
        }

  __break(1u);
LABEL_160:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

                __break(1u);
                __break(1u);
                __break(1u);
                goto LABEL_160;
              }

  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
  return result;
}

LABEL_164:
            swift_release();
            *uint64_t v3 = v15;
            return;
          }

          __int128 v21 = v27;
        }
      }

            swift_release();
            *uint64_t v7 = v18;
            return;
          }

          __int128 v24 = v30;
        }
      }

          v159 = (v117 - 1) & v117;
        }

                    __break(1u);
LABEL_165:
                    __break(1u);
                  }

                  uint64_t v46 = v56;
                }
              }
            }
          }

LABEL_126:
    Hasher._combine(_:)(0);
    if (v87)
    {
LABEL_122:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      id v96 = v87;
      _CFObject.hash(into:)();

      if (v88) {
        goto LABEL_123;
      }
      goto LABEL_128;
    }

    Hasher._combine(_:)(0);
    if (v89)
    {
LABEL_122:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v99 = v89;
      _CFObject.hash(into:)();

      if (v91) {
        goto LABEL_123;
      }
      goto LABEL_128;
    }

              __int128 v19 = (int64_t)v74;
              swift_bridgeObjectRetain();
              uint64_t v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              *(void *)(v32 + 16) = v20;
              bzero((void *)(v32 + 32), 2 * v20);
LABEL_127:
              __int128 v83 = 0LL;
              id v84 = v19 + 32;
              id v85 = v32 + 32;
              do
              {
                if (v83 == v6) {
                  goto LABEL_182;
                }
                id v86 = 0;
                id v87 = 0LL;
                id v88 = v83 + 1;
                do
                {
                  if (v14 == v87) {
                    goto LABEL_170;
                  }
                  id v91 = v87 + v83;
                  if (__OFADD__(v87, v83)) {
                    goto LABEL_171;
                  }
                  if (v91 >= v20)
                  {
                    if (v86) {
                      goto LABEL_154;
                    }
                    id v86 = *(unsigned __int16 *)(v84 + 2 * v83);
                    if (*(_WORD *)(v84 + 2 * v83))
                    {
                      id v86 = *((unsigned __int16 *)v11._rawValue + v87 + 16);
                      if (*((_WORD *)v11._rawValue + v87 + 16)) {
                        goto LABEL_154;
                      }
                    }
                  }

                  else
                  {
                    if (v91 < 0)
                    {
                      __break(1u);
LABEL_175:
                      __break(1u);
LABEL_176:
                      __break(1u);
                      goto LABEL_177;
                    }

                    id v89 = 2 * v91;
                    id v90 = v86
                    id v86 = HIWORD(v90);
                    *(_WORD *)(v85 + v89) = v90;
                  }

                  ++v87;
                }

                while (v14 != v87);
                if (v86)
                {
                  unint64_t v27 = __OFADD__(v14, v83);
                  id v92 = v14 + v83;
                  if (v27) {
                    goto LABEL_187;
                  }
                  if (v92 >= v20) {
                    goto LABEL_154;
                  }
                  if (v92 < 0) {
                    goto LABEL_188;
                  }
                  *(_WORD *)(v85 + 2 * v92) = v86;
                }

                __int128 v83 = v88;
              }

              while (v88 != v6);
              id v93 = *(void *)(v32 + 16);
              LOWORD(v139) = (_WORD)v22;
              if (!v93) {
                goto LABEL_172;
              }
              unint64_t v75 = v126;
              Swift::UInt v77 = v120;
              if (!*(_WORD *)(v85 + 2 * v93 - 2))
              {
                do
                {
                  *(void *)(v32 + 16) = v93 - 1;
                  if (v93 == 1) {
                    break;
                  }
                }

                while (!*(unsigned __int16 *)(v32 + 28 + 2 * v93--));
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_173;
            }

  *(void *)&v243 = v227;
  *((void *)&v243 + 1) = v17;
  Measurement<>.AttributedStyle.formatAsDescription(_:)((uint64_t)&v243, v40, v215, v216, v226);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v214, v40);
}

  __break(1u);
LABEL_127:
  __break(1u);
  return result;
}

      unint64_t v60 = (4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C;
      uint64_t v12 = ((-15LL << v60) - 1) & v12 | (v24 << v60);
      int64_t v13 = *(void *)(v9 + 24 + 24 * v24);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v9 = v13;
      if (!*(_BYTE *)(v13 + 18)) {
        goto LABEL_153;
      }
    }
  }

  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v12 = 0LL;
  unint64_t v4 = (uint64_t)v6;
  int64_t v13 = v57;
LABEL_153:
  uint64_t v69 = *(unsigned __int16 *)(v13 + 16);
  if (!*(_WORD *)(v13 + 16))
  {
LABEL_162:
    uint64_t v71 = v4;
    goto LABEL_163;
  }

  uint64_t v70 = *(void *)(v13 + 24);
  uint64_t v15 = __OFSUB__(v4, v70);
  uint64_t v71 = v4 - v70;
  if (v15) {
    goto LABEL_296;
  }
  if (__OFADD__(v71, 1LL)) {
    goto LABEL_297;
  }
  if (v71 + 1 <= 0)
  {
    uint64_t v69 = 0LL;
LABEL_176:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v12 = v12 & 0xFFFFFFFFFFFFF0FFLL | (v69 << 8);
    uint64_t v6 = (void *)a2;
    goto LABEL_177;
  }

  if ((_DWORD)v69 == 1)
  {
LABEL_163:
    if (v71) {
      goto LABEL_295;
    }
    unint64_t v4 = 0LL;
    goto LABEL_176;
  }

  unint64_t v72 = *(void *)(v13 + 48);
  unint64_t v4 = v71 - v72;
  if (__OFSUB__(v71, v72)) {
    goto LABEL_301;
  }
  if (__OFADD__(v4, 1LL)) {
    goto LABEL_302;
  }
  if (v4 + 1 < 1)
  {
    uint64_t v69 = 1LL;
    unint64_t v4 = v71;
    goto LABEL_176;
  }

  if ((_DWORD)v69 == 2) {
    goto LABEL_162;
  }
  int64_t v73 = (void *)(v13 + 72);
  uint64_t v74 = 2LL;
  while (v69 != v74)
  {
    uint64_t v71 = v4 - *v73;
    if (__OFSUB__(v4, *v73)) {
      goto LABEL_290;
    }
    if (__OFADD__(v71, 1LL)) {
      goto LABEL_291;
    }
    if (v71 + 1 < 1)
    {
      uint64_t v69 = v74;
      goto LABEL_176;
    }

    ++v74;
    v73 += 3;
    unint64_t v4 = v71;
    if (v69 == v74) {
      goto LABEL_163;
    }
  }

                  __break(1u);
                  goto LABEL_127;
                }

    unint64_t v14 = (char *)_StringObject.sharedUTF8.getter();
    if (!v15) {
      goto LABEL_127;
    }
LABEL_19:
    if ((v14 & 7) != 0)
    {
      if (v15 < 1) {
        goto LABEL_127;
      }
      if (*v14 < 0) {
        return 0LL;
      }
      uint64_t v16 = 1LL;
      __int128 v17 = 9LL;
      if (v15 >= 2 && (((_BYTE)v14 + 1) & 7) != 0)
      {
        if (v14[1] < 0) {
          return 0LL;
        }
        uint64_t v16 = 2LL;
        __int128 v17 = 10LL;
        if (v15 >= 3 && (((_BYTE)v14 + 2) & 7) != 0)
        {
          if (v14[2] < 0) {
            return 0LL;
          }
          uint64_t v16 = 3LL;
          __int128 v17 = 11LL;
          if (v15 >= 4 && (((_BYTE)v14 + 3) & 7) != 0)
          {
            if (v14[3] < 0) {
              return 0LL;
            }
            uint64_t v16 = 4LL;
            __int128 v17 = 12LL;
            if (v15 >= 5 && (((_BYTE)v14 + 4) & 7) != 0)
            {
              if (v14[4] < 0) {
                return 0LL;
              }
              uint64_t v16 = 5LL;
              __int128 v17 = 13LL;
              if (v15 >= 6 && (((_BYTE)v14 + 5) & 7) != 0)
              {
                if (v14[5] < 0) {
                  return 0LL;
                }
                uint64_t v16 = 6LL;
                __int128 v17 = 14LL;
                if (v15 >= 7 && (((_BYTE)v14 + 6) & 7) != 0)
                {
                  if (v14[6] < 0) {
                    return 0LL;
                  }
                  uint64_t v16 = 7LL;
                  __int128 v17 = 15LL;
                  if (v15 >= 8 && (((_BYTE)v14 - 1) & 7) != 0)
                  {
                    if (v14[7] < 0) {
                      return 0LL;
                    }
                    uint64_t v16 = 8LL;
                    __int128 v17 = 16LL;
                  }
                }
              }
            }
          }
        }
      }

      if (v15 >= v17) {
        goto LABEL_108;
      }
LABEL_111:
      if (v16 >= v15) {
        goto LABEL_127;
      }
    }

    else
    {
      if (v15 > 7)
      {
        uint64_t v16 = 0LL;
        __int128 v17 = 8LL;
LABEL_108:
        while ((*(void *)&v14[v16] & 0x8080808080808080LL) == 0)
        {
          __int128 v39 = v17 + 8;
          uint64_t v16 = v17;
          __int128 v17 = v39;
          if (v15 < v39)
          {
            uint64_t v16 = v39 - 8;
            goto LABEL_111;
          }
        }

        return 0LL;
      }

      if (v15 <= 0) {
        goto LABEL_127;
      }
      uint64_t v16 = 0LL;
    }

    if (v14[v16] < 0) {
      return 0LL;
    }
    __int128 v40 = v16 + 1;
    while (v40 < v15)
    {
      uint64_t v9 = 0LL;
      __int128 v41 = v14[v40++];
      if (v41 < 0) {
        return v9;
      }
    }

    goto LABEL_127;
  }

  if (v7 != 2415919360LL)
  {
    if (v7 <= 2483028223LL)
    {
      if (v7 == 10)
      {
        __int128 v19 = 0LL;
        __int128 v18 = 65279LL;
        goto LABEL_49;
      }

      if (v7 == 2348810496LL)
      {
        if ((a2 & 1) == 0)
        {
          unint64_t v64 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
          int64_t v65 = &protocol witness table for <A> [A];
          Swift::UInt v62 = (uint64_t)&outlined read-only object #0 of String.data(using:allowLossyConversion:);
          __int128 v42 = __swift_project_boxed_opaque_existential_1(&v62, (uint64_t)v64);
          uint64_t v43 = specialized Data._Representation.init(_:)( (_BYTE *)(*v42 + 32LL),  (_BYTE *)(*v42 + 32LL + *(void *)(*v42 + 16LL)));
          Swift::UInt8 v45 = v44;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
          Swift::UInt v62 = 2617245952LL;
          uint64_t v46 = String.data(using:allowLossyConversion:)(&v62, 0LL, v6, v5);
          uint64_t v9 = v46;
          uint64_t v48 = v47;
          if (v47 >> 60 == 15)
          {
            outlined consume of Data._Representation((uint64_t)v43, v45);
          }

          else
          {
            uint64_t v66 = v43;
            Swift::UInt v67 = v45;
            unint64_t v64 = &type metadata for Data;
            int64_t v65 = &protocol witness table for Data;
            Swift::UInt v62 = v46;
            int64_t v63 = v47;
            Swift::UInt v51 = __swift_project_boxed_opaque_existential_1(&v62, (uint64_t)&type metadata for Data);
            int64_t v52 = *v51;
            uint64_t v53 = v51[1];
            outlined copy of Data._Representation((uint64_t)v43, v45);
            outlined copy of Data?(v9, v48);
            specialized Data._Representation.withUnsafeBytes<A>(_:)(v52, v53);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
            outlined consume of Data?(v9, v48);
            outlined consume of Data._Representation((uint64_t)v43, v45);
            return (unint64_t)v66;
          }

          return v9;
        }

        Swift::UInt v62 = a3;
        int64_t v63 = a4;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v29 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v30 = objc_msgSend(v29, sel_dataUsingEncoding_allowLossyConversion_, 2348810496, 1);
LABEL_105:
        swift_unknownObjectRelease();
        if (v30)
        {
          __int128 v38 = v30;
          uint64_t v9 = (uint64_t)specialized Data.init(referencing:)(v38);

          return v9;
        }

        return 0LL;
      }
    }

    else
    {
      if (v7 == 2617245952LL || v7 == 2550137088LL)
      {
        uint64_t v31 = HIBYTE(a4) & 0xF;
        if ((a4 & 0x2000000000000000LL) == 0) {
          uint64_t v31 = a3;
        }
        uint64_t v32 = 7LL;
        if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
          uint64_t v32 = 11LL;
        }
        isStackAllocationSafe = String.UnicodeScalarView.distance(from:to:)(0xFuLL, v32 | (v31 << 16), a3, a4);
        if ((isStackAllocationSafe - 0x2000000000000000LL) >> 62 != 3) {
          goto LABEL_142;
        }
        uint64_t v34 = 4 * isStackAllocationSafe;
        if (((4 * isStackAllocationSafe) & 0x8000000000000000LL) != 0) {
          goto LABEL_143;
        }
        if (v34 <= 1024
          || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
        {
          MEMORY[0x1895F8858](isStackAllocationSafe);
          __int128 v36 = (char *)&v61 - v35;
          if ((v7 | 0x4000000) == 0x9C000100LL)
          {
            swift_bridgeObjectRetain();
            specialized Sequence._copySequenceContents(initializing:)( (uint64_t)&v62,  (uint64_t)v36,  v34,  v6,  v5,  v7 != 2617245952LL);
            swift_bridgeObjectRelease();
            return specialized Data.init<A>(_:)((uint64_t)v36, v34);
          }
        }

        else
        {
          char v49 = swift_slowAlloc();
          if ((v7 | 0x4000000) == 0x9C000100LL)
          {
            uint64_t v50 = v49;
            swift_bridgeObjectRetain();
            specialized Sequence._copySequenceContents(initializing:)( (uint64_t)&v62,  v50,  v34,  v6,  v5,  v7 != 2617245952LL);
            swift_bridgeObjectRelease();
            uint64_t v9 = specialized Data.init<A>(_:)(v50, v34);
            MEMORY[0x186E20E60](v50, -1LL, -1LL);
            return v9;
          }
        }

        goto LABEL_145;
      }

      if (v7 == 2483028224LL) {
        goto LABEL_48;
      }
    }

    Swift::UInt v62 = a3;
    int64_t v63 = a4;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    __int128 v37 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = objc_msgSend(v37, sel_dataUsingEncoding_allowLossyConversion_, v7, a2 & 1);
    goto LABEL_105;
  }

    swift_bridgeObjectRelease();
    id v95 = (uint64_t)v227;
    id v94 = (uint64_t)v228;
    v197 = (uint64_t)v224;
    v177 = v237;
    if ((v168 & 1) == 0) {
      goto LABEL_127;
    }
    goto LABEL_83;
  }

  v194 = v167;
  id v95 = (uint64_t)v227;
  id v94 = (uint64_t)v228;
  v197 = (uint64_t)v224;
  if ((v189 & 1) == 0)
  {
LABEL_127:
    v215 = v177;
    outlined init with copy of ICUNumberFormatter.Signature( v95,  v197,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    specialized _NativeDictionary._insert(at:key:value:)(v215, v197, v222, (void *)v194);
    goto LABEL_128;
  }

LABEL_127:
    Hasher._combine(_:)(0);
    if (v88)
    {
LABEL_123:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      id v97 = v88;
      _CFObject.hash(into:)();

      goto LABEL_129;
    }

    Hasher._combine(_:)(0);
    if (v91)
    {
LABEL_123:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      Swift::UInt v100 = v91;
      _CFObject.hash(into:)();

      goto LABEL_129;
    }

    __break(1u);
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v19,  (uint64_t)v13,  &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  __int128 v22 = (char *)v13 + *(int *)(v11 + 40);
  __int128 v24 = v13[2];
  __int128 v23 = v13[3];
  unint64_t v25 = v13[1];
  __int128 v151 = v13;
  int64_t v26 = swift_getObjectType();
  unint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  int64_t v28 = v27(v26, v25);
  uint64_t v30 = v29;
  swift_unknownObjectRelease();
  uint64_t v31 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v25 + 464);
  swift_unknownObjectRetain();
  v31(v154, v26, v25);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v154,  (uint64_t)v155,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v32 = (uint64_t)v22;
  uint64_t v33 = v150;
  outlined init with copy of ICUNumberFormatter.Signature( v32,  v150,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v34 = v149;
  __int128 v35 = (void *)(v33 + *(int *)(v149 + 20));
  void *v35 = v24;
  v35[1] = v23;
  __int128 v36 = (uint64_t *)(v33 + *(int *)(v34 + 24));
  uint64_t *v36 = v28;
  v36[1] = v30;
  __int128 v37 = v33 + *(int *)(v34 + 28);
  outlined init with take of LocalePreferences?( (uint64_t)v155,  v37,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  __int128 v38 = *(void *)algn_18C5CBA68;
  __int128 v146 = static ICUCurrencyNumberFormatter.cache;
  __int128 v39 = *(void *)algn_18C5CBA68 + 16LL;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v38 + 24));
  __int128 v40 = 0LL;
  __int128 v41 = specialized closure #1 in FormatterCache.formatter(for:creator:)(v38 + 16, v33);
  os_unfair_lock_unlock((os_unfair_lock_t)(v38 + 24));
  swift_release();
  if (v41 != 1)
  {
    swift_release();
    uint64_t v66 = (uint64_t)v151;
    Swift::UInt v67 = v152;
    goto LABEL_100;
  }

  v145 = 0LL;
  __int128 v42 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)(v33);
  uint64_t v44 = v43;
  Swift::UInt8 v45 = *v36;
  uint64_t v46 = v36[1];
  outlined init with take of LocalePreferences?( v37,  (uint64_t)v154,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  type metadata accessor for ICUCurrencyNumberFormatter();
  swift_allocObject();
  outlined init with take of LocalePreferences?( (uint64_t)v154,  (uint64_t)v153,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?( (uint64_t)v154,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  uint64_t v47 = v45;
  uint64_t v48 = (os_unfair_lock_s *)(v38 + 24);
  __int128 v41 = (uint64_t)ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v42, v44, v47, v46, (uint64_t)v153);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v38 + 24));
  char v49 = *(void *)(*(void *)(v38 + 16) + 16LL);
  uint64_t v144 = *(void *)(v38 + 16);
  if (v146 >= v49) {
    swift_bridgeObjectRetain();
  }
  else {
    *(void *)__int128 v39 = MEMORY[0x18961AFF0];
  }
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v153[0] = *(void *)v39;
  uint64_t v69 = v153[0];
  *(void *)__int128 v39 = 0x8000000000000000LL;
  uint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v150);
  unint64_t v72 = *(void *)(v69 + 16);
  int64_t v73 = (v70 & 1) == 0;
  uint64_t v74 = v72 + v73;
  if (__OFADD__(v72, v73))
  {
    __break(1u);
  }

  else
  {
    LODWORD(v39) = v70;
    Swift::UInt v67 = v152;
    if (*(void *)(v69 + 24) < v74)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v74,  isUniquelyReferenced_nonNull_native);
      unint64_t v75 = v153[0];
      uint64_t v33 = v150;
      unint64_t v76 = specialized __RawDictionaryStorage.find<A>(_:)(v150);
      if ((v39 & 1) != (v77 & 1)) {
        goto LABEL_134;
      }
      uint64_t v71 = v76;
      if ((v39 & 1) == 0) {
        goto LABEL_98;
      }
LABEL_21:
      Swift::UInt v78 = *(void *)(v75 + 56);
      int64_t v79 = 8 * v71;
      swift_release();
      *(void *)(v78 + v79) = v41;
LABEL_99:
      uint64_t v66 = (uint64_t)v151;
      *(void *)(v38 + 16) = v75;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v48);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1LL);
      swift_release();
      __int128 v40 = v145;
LABEL_100:
      outlined destroy of ICUNumberFormatter.Signature( v33,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      if (!v41) {
        goto LABEL_123;
      }
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_initStackObject();
      uint64_t v124 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
      if (v40)
      {

LABEL_122:
        swift_release();
        uint64_t v66 = (uint64_t)v151;
        goto LABEL_123;
      }

      MEMORY[0x1895F8858](v124);
      LODWORD(v154[0]) = 0;
      int64_t v125 = unumf_resultToString();
      if (LODWORD(v154[0]) != 15)
      {
        id v85 = specialized String.init(_utf16:)((uint64_t)(&v139 - 8), v125);
        id v87 = v131;
        goto LABEL_114;
      }

      uint64_t v126 = v125 + 1;
      if (!__OFADD__((_DWORD)v125, 1))
      {
        if ((v126 & 0x80000000) == 0)
        {
          if (v126 < 513 || (int64_t v125 = swift_stdlib_isStackAllocationSafe(), (v125 & 1) != 0))
          {
            MEMORY[0x1895F8858](v125);
            __int128 v128 = (char *)&v139 - v127;
            LODWORD(v153[0]) = 0;
            __int128 v129 = unumf_resultToString();
            if (SLODWORD(v153[0]) <= 0 && v129 > 0)
            {
              id v85 = specialized String.init(_utf16:)((uint64_t)v128, v129);
              id v87 = v130;
              goto LABEL_114;
            }

    __break(1u);
    goto LABEL_128;
  }

  uint64_t v32 = static Duration.zero.getter();
  uint64_t v34 = v33;
  __int128 v35 = static Duration.zero.getter();
LABEL_23:
  __int128 v41 = v35;
  uint64_t v43 = v36;
  uint64_t v31 = v174;
LABEL_24:
  static Duration.zero.getter();
  unint64_t v64 = static Duration.< infix(_:_:)() & 1;
  static Duration.zero.getter();
  if (v64 == (static Duration.< infix(_:_:)() & 1))
  {
    v167 = v34;
  }

  else
  {
    int64_t v65 = static Duration.zero.getter();
    __int128 v41 = MEMORY[0x186E1D11C](v65);
    uint64_t v43 = v66;
    Swift::UInt v67 = static Duration.zero.getter();
    uint64_t v32 = MEMORY[0x186E1D11C](v67);
    v167 = v68;
  }

  static Duration.zero.getter();
  uint64_t v69 = v41;
  uint64_t v70 = v43;
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    uint64_t v71 = static Duration.zero.getter();
    uint64_t v69 = MEMORY[0x186E1D11C](v71);
    uint64_t v70 = v72;
  }

  v168 = v32;
  static Duration.zero.getter();
  int64_t v73 = static Duration.< infix(_:_:)();
  uint64_t v74 = a1;
  unint64_t v75 = v31;
  if ((v73 & 1) != 0)
  {
    unint64_t v76 = static Duration.zero.getter();
    uint64_t v74 = MEMORY[0x186E1D11C](v76);
    unint64_t v75 = v77;
  }

  MEMORY[0x186E1D11C](v69, v70, v74, v75);
  static Duration.zero.getter();
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    Swift::UInt v78 = static Duration.zero.getter();
    MEMORY[0x186E1D11C](v78);
  }

  static Duration.zero.getter();
  if ((static Duration.== infix(_:_:)() & 1) != 0)
  {
    v175 = 2LL;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    unint64_t v80 = v167;
    int64_t v79 = v168;
    static Duration./ infix<A>(_:_:)();
    v175 = 2LL;
    int64_t v81 = static Duration.* infix<A>(_:_:)();
    MEMORY[0x186E1D11C](v79, v80, v81, v82);
    static Duration.zero.getter();
    __int128 v83 = v174;
    LODWORD(v162) = static Duration.== infix(_:_:)();
    id v84 = *MEMORY[0x189619F78];
    v167 = v83;
    v168 = a1;
  }

  else
  {
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      id v85 = static Duration.zero.getter();
      __int128 v19 = MEMORY[0x186E1D11C](v85);
      __int128 v20 = v86;
    }

    id v87 = MEMORY[0x186E1D110](v41, v43, v19, v20);
    id v89 = v88;
    static Duration.zero.getter();
    id v90 = v87;
    id v91 = v89;
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      id v92 = static Duration.zero.getter();
      id v90 = MEMORY[0x186E1D11C](v92);
      id v91 = v93;
    }

    static Duration.zero.getter();
    id v94 = static Duration.< infix(_:_:)();
    id v95 = a1;
    id v96 = v31;
    if ((v94 & 1) != 0)
    {
      id v97 = static Duration.zero.getter();
      id v95 = MEMORY[0x186E1D11C](v97);
      id v96 = v98;
    }

    v157 = v87;
    MEMORY[0x186E1D11C](v90, v91, v95, v96);
    static Duration.zero.getter();
    uint64_t v99 = static Duration.< infix(_:_:)();
    v158 = v89;
    if ((v99 & 1) != 0)
    {
      Swift::UInt v100 = static Duration.zero.getter();
      MEMORY[0x186E1D11C](v100);
    }

    Swift::UInt v101 = v172;
    Swift::UInt8 v102 = v162;
    Swift::UInt8 v103 = v169;
    (*(void (**)(char *, uint64_t, uint64_t))(v172 + 16))(v162, v173, v169);
    Swift::UInt8 v104 = (*(uint64_t (**)(char *, uint64_t))(v101 + 88))(v102, v103);
    id v84 = *MEMORY[0x189619F78];
    v161 = v41;
    if (v104 == v84)
    {
      Swift::Int v105 = static Duration.< infix(_:_:)();
      uint64_t v106 = v157;
      if ((v105 & 1) != 0)
      {
        uint64_t v106 = v41;
        unint64_t v107 = v43;
      }

      else
      {
        unint64_t v107 = v158;
      }

      unint64_t v108 = v106;
    }

    else if (v104 == *MEMORY[0x189619F70])
    {
      unint64_t v108 = v41;
      unint64_t v107 = v43;
      if ((static Duration.< infix(_:_:)() & 1) == 0)
      {
        __int128 v134 = static Duration.== infix(_:_:)();
        unint64_t v108 = v157;
        unint64_t v107 = v158;
        if ((v134 & 1) != 0)
        {
          v175 = 2LL;
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          __int128 v136 = v167;
          __int128 v135 = v168;
          static Duration./ infix<A>(_:_:)();
          v175 = 2LL;
          __int128 v137 = static Duration.* infix<A>(_:_:)();
          MEMORY[0x186E1D11C](v135, v136, v137, v138);
          static Duration.zero.getter();
          uint64_t v139 = static Duration.== infix(_:_:)();
          if ((v139 & 1) != 0) {
            unint64_t v108 = v161;
          }
          else {
            unint64_t v108 = v157;
          }
          if ((v139 & 1) != 0) {
            unint64_t v107 = v43;
          }
          else {
            unint64_t v107 = v158;
          }
        }
      }
    }

    else if (v104 == *MEMORY[0x189619F88])
    {
      uint64_t v144 = v157;
      __int128 v143 = v158;
      v145 = static Duration.< infix(_:_:)();
      if ((v145 & 1) != 0) {
        unint64_t v108 = v41;
      }
      else {
        unint64_t v108 = v144;
      }
      if ((v145 & 1) != 0) {
        unint64_t v107 = v43;
      }
      else {
        unint64_t v107 = v143;
      }
    }

    else if (v104 == *MEMORY[0x189619F90])
    {
      __int128 v152 = v157;
      __int128 v151 = v158;
      __int128 v153 = static Duration.< infix(_:_:)();
      if ((v153 & 1) != 0) {
        unint64_t v108 = v152;
      }
      else {
        unint64_t v108 = v41;
      }
      if ((v153 & 1) != 0) {
        unint64_t v107 = v151;
      }
      else {
        unint64_t v107 = v43;
      }
    }

    else
    {
      unint64_t v108 = v41;
      unint64_t v107 = v43;
      if (v104 != *MEMORY[0x189619F60])
      {
        unint64_t v108 = v157;
        unint64_t v107 = v158;
        if (v104 != *MEMORY[0x189619F68]) {
          goto LABEL_136;
        }
      }
    }

    v175 = 2LL;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    unint64_t v110 = v167;
    char v109 = v168;
    static Duration./ infix<A>(_:_:)();
    v175 = 2LL;
    BOOL v111 = static Duration.* infix<A>(_:_:)();
    MEMORY[0x186E1D11C](v109, v110, v111, v112);
    static Duration.zero.getter();
    uint64_t v113 = static Duration.== infix(_:_:)();
    v167 = v107;
    v168 = v108;
    LODWORD(v162) = v113 ^ static Duration.== infix(_:_:)() ^ 1;
  }

  static Duration.zero.getter();
  __int128 v114 = static Duration.< infix(_:_:)();
  __int128 v115 = v166;
  char v116 = *(int *)(v166 + 48);
  uint64_t v117 = v172;
  uint64_t v31 = *(void (**)(void, void, void))(v172 + 16);
  uint64_t v118 = v163;
  __int128 v20 = v169;
  v31(v163, v173, v169);
  v118[v116] = (v114 & 1) == 0;
  int64_t v119 = *(uint64_t (**)(char *, uint64_t))(v117 + 88);
  uint64_t v120 = v119(v118, v20);
  uint64_t v121 = *MEMORY[0x189619F70];
  LODWORD(v163) = *MEMORY[0x189619F70];
  if (v120 == v84 || v120 == v121)
  {
    uint64_t v124 = v84;
    if ((v170 & 1) != 0) {
      __int128 v127 = -2LL;
    }
    else {
      __int128 v127 = 2LL;
    }
    v175 = v127;
    lazy protocol witness table accessor for type Int and conformance Int();
    int64_t v125 = static Duration./ infix<A>(_:_:)();
    goto LABEL_58;
  }

  uint64_t v123 = v164;
  uint64_t v122 = v165;
  if (v120 != *MEMORY[0x189619F88])
  {
    if (v120 == *MEMORY[0x189619F90])
    {
      uint64_t v124 = v84;
      __int128 v128 = v167;
      if ((v170 & 1) == 0) {
        goto LABEL_60;
      }
      __int128 v141 = static Duration.zero.getter();
LABEL_104:
      uint64_t v122 = v141;
      uint64_t v123 = v142;
      goto LABEL_60;
    }

    if (v120 == *MEMORY[0x189619F60])
    {
      uint64_t v124 = v84;
      static Duration.zero.getter();
      __int128 v128 = v167;
      __int128 v147 = static Duration.== infix(_:_:)();
      __int128 v148 = -1LL;
      if ((v170 & 1) != 0) {
        __int128 v149 = -1LL;
      }
      else {
        __int128 v149 = 1LL;
      }
      if ((v114 & 1) == 0) {
        __int128 v148 = 1LL;
      }
      if ((v147 & 1) == 0) {
        __int128 v149 = 0LL;
      }
      else {
        __int128 v150 = v148;
      }
      v175 = v150;
      lazy protocol witness table accessor for type Int and conformance Int();
      __int128 v141 = static Duration.* infix<A>(_:_:)();
      goto LABEL_104;
    }

    if (v120 == *MEMORY[0x189619F68])
    {
      static Duration.zero.getter();
      if ((static Duration.== infix(_:_:)() & 1) != 0
        || (static Duration.zero.getter(), ((static Duration.< infix(_:_:)() ^ v170) & 1) == 0))
      {
        uint64_t v124 = v84;
        int64_t v125 = static Duration.zero.getter();
        goto LABEL_58;
      }

      uint64_t v124 = v84;
      static Duration.zero.getter();
      if ((static Duration.< infix(_:_:)() & 1) != 0) {
        goto LABEL_59;
      }
      int64_t v125 = static Duration.zero.getter();
      goto LABEL_53;
    }

                        uint64_t v54 = (v59 - 1) & v59;
                        uint64_t v58 = __clz(__rbit64(v59)) + (v53 << 6);
                      }

                      Swift::UInt v61 = *(unsigned __int8 *)(*(void *)(v76 + 48) + v58);
                      Hasher.init(_seed:)();
                      Hasher._combine(_:)(v61);
                      Swift::UInt v62 = Hasher._finalize()();
                      int64_t v63 = -1LL << *(_BYTE *)(v20 + 32);
                      unint64_t v64 = v62 & ~v63;
                      int64_t v65 = v64 >> 6;
                      if (((-1LL << v64) & ~*(void *)(v55 + 8 * (v64 >> 6))) != 0)
                      {
                        unint64_t v56 = __clz(__rbit64((-1LL << v64) & ~*(void *)(v55 + 8 * (v64 >> 6)))) | v64 & 0x7FFFFFFFFFFFFFC0LL;
                      }

                      else
                      {
                        uint64_t v66 = 0;
                        Swift::UInt v67 = (unint64_t)(63 - v63) >> 6;
                        do
                        {
                          if (++v65 == v67 && (v66 & 1) != 0) {
                            goto LABEL_147;
                          }
                          int64_t v68 = v65 == v67;
                          if (v65 == v67) {
                            int64_t v65 = 0LL;
                          }
                          v66 |= v68;
                          uint64_t v69 = *(void *)(v55 + 8 * v65);
                        }

                        while (v69 == -1);
                        unint64_t v56 = __clz(__rbit64(~v69)) + (v65 << 6);
                      }

                      *(void *)(v55 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v56;
                      *(_BYTE *)(*(void *)(v20 + 48) + v56) = v61;
                      ++*(void *)(v20 + 16);
                      if (!--v34) {
                        goto LABEL_143;
                      }
                    }
                  }
                }
              }
            }

            __int128 v21 = v30;
          }

          __break(1u);
          __break(1u);
        }

        uint64_t v33 = inited;
LABEL_53:
        __int128 v37 = v21;
        WeekendTransition = ucal_getWeekendTransition();
        __int128 v21 = 0;
        if (!v37)
        {
          v39.i64[1] = 0LL;
          *(double *)v39.i64 = (double)WeekendTransition / 1000.0;
          goto LABEL_118;
        }

        __int128 v20 = (double)WeekendTransition / 1000.0;
        LODWORD(inited) = v33;
        if ((v31 & 1) != 0) {
          goto LABEL_55;
        }
LABEL_36:
        if (v5 <= 1) {
          __int128 v22 = 1LL;
        }
        else {
          __int128 v22 = v5;
        }
        if (v5 >= 2)
        {
          if (*(_DWORD *)(v6 + 36) == 1) {
            goto LABEL_41;
          }
          if (v22 != 2)
          {
            if (*(_DWORD *)(v6 + 40) == 1) {
              goto LABEL_47;
            }
            if (v22 != 3)
            {
              if (*(_DWORD *)(v6 + 44) == 1) {
                goto LABEL_75;
              }
              if (v22 != 4)
              {
                if (*(_DWORD *)(v6 + 48) != 1) {
                  goto LABEL_81;
                }
                goto LABEL_78;
              }
            }
          }
        }

  v155 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
LABEL_128:
  v157 = objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v326,  v151,  v152,  v15,  v155,  0,  0);
LABEL_205:
  v157;
  swift_unknownObjectRelease();

  outlined consume of PathOrURL(v59, (uint64_t)v331, v63, 1);
LABEL_206:
  swift_willThrow();
  swift_willThrow();
LABEL_291:
  swift_bridgeObjectRelease();
LABEL_292:
  swift_bridgeObjectRelease();
  return v15;
}

                                uint64_t v3 = v61;
LABEL_128:
                                MEMORY[0x186E20E60](v88, -1LL, -1LL);
                                return v3;
                              }
                            }
                          }
                        }

                        Swift::UInt v62 = v73;
                      }

                    __break(1u);
                    goto LABEL_128;
                  }

      if ((v5 & 0x2000000000000000LL) != 0) {
        uint64_t v54 = HIBYTE(v5) & 0xF;
      }
      else {
        uint64_t v54 = v6 & 0xFFFFFFFFFFFFLL;
      }
      goto LABEL_130;
    }

    if ((a3 & 0x1000000000000000LL) != 0)
    {
      unint64_t v14 = (char *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFLL;
      if ((a3 & 0xFFFFFFFFFFFFLL) == 0) {
        goto LABEL_127;
      }
      goto LABEL_19;
    }

LABEL_128:
    Hasher._combine(_:)(0);
    id v97 = 0LL;
LABEL_129:
    int64_t v13 = v123;

    Swift::UInt8 v102 = v152;
    if (v102)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v161, v102);
      swift_bridgeObjectRelease();
    }

    else
    {
      Hasher._combine(_:)(0);
    }

    uint64_t v5 = v121;
    uint64_t v15 = v122;
    uint64_t v6 = v125;
    Swift::UInt8 v103 = v153;
    if (v153)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v161, v103);
      swift_bridgeObjectRelease();
      if (!v154) {
        goto LABEL_136;
      }
    }

    else
    {
      Hasher._combine(_:)(0);
      if (!v154)
      {
LABEL_136:
        Hasher._combine(_:)(0);
        goto LABEL_137;
      }
    }

    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
LABEL_137:
    if (v155 == 2)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Swift::UInt8 v104 = v155 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v104);
    }

    if (v156 == 2)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Swift::Int v105 = v156 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v105);
    }

    if (v157 == 2)
    {
      uint64_t v106 = 0;
    }

    else
    {
      uint64_t v106 = v157 & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v106);
    if (v158 == 2)
    {
      unint64_t v107 = 0;
    }

    else
    {
      unint64_t v108 = v158 & 1;
      Hasher._combine(_:)(1u);
      unint64_t v107 = v108;
    }

    Hasher._combine(_:)(v107);
    outlined retain of LocalePreferences?( (uint64_t)v159,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v159,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    uint64_t v12 = v135;
LABEL_150:
    char v109 = Hasher._finalize()();
    unint64_t v110 = -1LL << *(_BYTE *)(v15 + 32);
    BOOL v111 = v109 & ~v110;
    uint64_t v112 = v111 >> 6;
    if (((-1LL << v111) & ~*(void *)(v20 + 8 * (v111 >> 6))) != 0)
    {
      __int128 v22 = __clz(__rbit64((-1LL << v111) & ~*(void *)(v20 + 8 * (v111 >> 6)))) | v111 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v113 = 0;
      __int128 v114 = (unint64_t)(63 - v110) >> 6;
      do
      {
        if (++v112 == v114 && (v113 & 1) != 0)
        {
          __break(1u);
          goto LABEL_165;
        }

        __int128 v115 = v112 == v114;
        if (v112 == v114) {
          uint64_t v112 = 0LL;
        }
        v113 |= v115;
        char v116 = *(void *)(v20 + 8 * v112);
      }

      while (v116 == -1);
      __int128 v22 = __clz(__rbit64(~v116)) + (v112 << 6);
    }

    __int128 v23 = v132;
    *(void *)(v20 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v12,  *(void *)(v15 + 48) + v23 * v22,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(void *)(*(void *)(v15 + 56) + 8 * v22) = v131;
    ++*(void *)(v15 + 16);
    __int128 v19 = v133;
    __int128 v21 = v134;
  }

  outlined retain of LocalePreferences?( (uint64_t)v159,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v159,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  int64_t v52 = v50 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v52 += 16LL;
    --v51;
  }

  while (v51);
  swift_bridgeObjectRelease();
  if (!v143) {
    goto LABEL_65;
  }
LABEL_72:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v144) {
    goto LABEL_66;
  }
LABEL_73:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v53 = v145;
  if (!v145) {
    goto LABEL_67;
  }
LABEL_74:
  Hasher._combine(_:)(1u);
  unint64_t v56 = 0LL;
  int64_t v57 = 0LL;
  uint64_t v58 = v53 + 64;
  unint64_t v59 = 1LL << *(_BYTE *)(v53 + 32);
  if (v59 < 64) {
    unint64_t v60 = ~(-1LL << v59);
  }
  else {
    unint64_t v60 = -1LL;
  }
  Swift::UInt v61 = v60 & *(void *)(v53 + 64);
  Swift::UInt v62 = (unint64_t)(v59 + 63) >> 6;
  while (2)
  {
    if (v61)
    {
      int64_t v63 = __clz(__rbit64(v61));
      v61 &= v61 - 1;
      unint64_t v64 = v63 | (v57 << 6);
LABEL_79:
      int64_t v65 = *(unsigned __int8 *)(*(void *)(v53 + 48) + v64);
      uint64_t v66 = *(void *)(*(void *)(v53 + 56) + 8 * v64);
      __int128 v136 = v161;
      __int128 v137 = v162;
      __int128 v138 = v163;
      uint64_t v139 = v164;
      __int128 v140 = v165;
      Hasher._combine(_:)(v65);
      Hasher._combine(_:)(v66);
      v56 ^= Hasher._finalize()();
      continue;
    }

    break;
  }

  Swift::UInt v67 = v57 + 1;
  if (__OFADD__(v57, 1LL))
  {
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
    goto LABEL_167;
  }

  if (v67 >= v62) {
    goto LABEL_95;
  }
  int64_t v68 = *(void *)(v58 + 8 * v67);
  ++v57;
  if (v68) {
    goto LABEL_94;
  }
  int64_t v57 = v67 + 1;
  if (v67 + 1 >= v62) {
    goto LABEL_95;
  }
  int64_t v68 = *(void *)(v58 + 8 * v57);
  if (v68) {
    goto LABEL_94;
  }
  int64_t v57 = v67 + 2;
  if (v67 + 2 >= v62) {
    goto LABEL_95;
  }
  int64_t v68 = *(void *)(v58 + 8 * v57);
  if (v68)
  {
LABEL_94:
    Swift::UInt v61 = (v68 - 1) & v68;
    unint64_t v64 = __clz(__rbit64(v68)) + (v57 << 6);
    goto LABEL_79;
  }

  uint64_t v69 = v67 + 3;
  if (v69 < v62)
  {
    int64_t v68 = *(void *)(v58 + 8 * v69);
    if (!v68)
    {
      while (1)
      {
        int64_t v57 = v69 + 1;
        if (__OFADD__(v69, 1LL)) {
          break;
        }
        if (v57 >= v62) {
          goto LABEL_95;
        }
        int64_t v68 = *(void *)(v58 + 8 * v57);
        ++v69;
        if (v68) {
          goto LABEL_94;
        }
      }

    Hasher._combine(_:)(0);
    Swift::UInt v100 = 0LL;
LABEL_129:
    uint64_t v16 = v127;

    Swift::Int v105 = v157;
    if (v105)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v166, v105);
      swift_bridgeObjectRelease();
    }

    else
    {
      Hasher._combine(_:)(0);
    }

    __int128 v18 = v125;
    a3 = v126;
    uint64_t v9 = v129;
    uint64_t v106 = v158;
    if (v158)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v166, v106);
      swift_bridgeObjectRelease();
      if (!v159) {
        goto LABEL_136;
      }
    }

    else
    {
      Hasher._combine(_:)(0);
      if (!v159)
      {
LABEL_136:
        Hasher._combine(_:)(0);
        goto LABEL_137;
      }
    }

    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
LABEL_137:
    if (v160 == 2)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      unint64_t v107 = v160 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v107);
    }

    if (v161 == 2)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      unint64_t v108 = v161 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v108);
    }

    if (v162 == 2)
    {
      char v109 = 0;
    }

    else
    {
      char v109 = v162 & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v109);
    if (v163 == 2)
    {
      unint64_t v110 = 0;
    }

    else
    {
      BOOL v111 = v163 & 1;
      Hasher._combine(_:)(1u);
      unint64_t v110 = v111;
    }

    Hasher._combine(_:)(v110);
    outlined retain of LocalePreferences?( (uint64_t)v164,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v164,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    uint64_t v15 = v140;
LABEL_150:
    uint64_t v112 = Hasher._finalize()();
    uint64_t v113 = -1LL << *(_BYTE *)(v18 + 32);
    __int128 v114 = v112 & ~v113;
    __int128 v115 = v114 >> 6;
    if (((-1LL << v114) & ~*(void *)(v23 + 8 * (v114 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1LL << v114) & ~*(void *)(v23 + 8 * (v114 >> 6)))) | v114 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v116 = 0;
      uint64_t v117 = (unint64_t)(63 - v113) >> 6;
      do
      {
        if (++v115 == v117 && (v116 & 1) != 0)
        {
          __break(1u);
          goto LABEL_165;
        }

        uint64_t v118 = v115 == v117;
        if (v115 == v117) {
          __int128 v115 = 0LL;
        }
        v116 |= v118;
        int64_t v119 = *(void *)(v23 + 8 * v115);
      }

      while (v119 == -1);
      unint64_t v25 = __clz(__rbit64(~v119)) + (v115 << 6);
    }

    int64_t v26 = v137;
    *(void *)(v23 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v15, *(void *)(v18 + 48) + v26 * v25, a3);
    *(void *)(*(void *)(v18 + 56) + 8 * v25) = v136;
    ++*(void *)(v18 + 16);
    __int128 v22 = v138;
    __int128 v24 = v139;
  }

  outlined retain of LocalePreferences?( (uint64_t)v164,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v164,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v55 = v53 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v55 += 16LL;
    --v54;
  }

  while (v54);
  swift_bridgeObjectRelease();
  if (!v148) {
    goto LABEL_65;
  }
LABEL_72:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v149) {
    goto LABEL_66;
  }
LABEL_73:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v56 = v150;
  if (!v150) {
    goto LABEL_67;
  }
LABEL_74:
  Hasher._combine(_:)(1u);
  unint64_t v59 = 0LL;
  unint64_t v60 = 0LL;
  Swift::UInt v61 = v56 + 64;
  Swift::UInt v62 = 1LL << *(_BYTE *)(v56 + 32);
  if (v62 < 64) {
    int64_t v63 = ~(-1LL << v62);
  }
  else {
    int64_t v63 = -1LL;
  }
  unint64_t v64 = v63 & *(void *)(v56 + 64);
  int64_t v65 = (unint64_t)(v62 + 63) >> 6;
  while (2)
  {
    if (v64)
    {
      uint64_t v66 = __clz(__rbit64(v64));
      v64 &= v64 - 1;
      Swift::UInt v67 = v66 | (v60 << 6);
LABEL_79:
      int64_t v68 = *(unsigned __int8 *)(*(void *)(v56 + 48) + v67);
      uint64_t v69 = *(void *)(*(void *)(v56 + 56) + 8 * v67);
      __int128 v141 = v166;
      __int128 v142 = v167;
      __int128 v143 = v168;
      uint64_t v144 = v169;
      v145 = v170;
      Hasher._combine(_:)(v68);
      Hasher._combine(_:)(v69);
      v59 ^= Hasher._finalize()();
      continue;
    }

    break;
  }

  uint64_t v70 = v60 + 1;
  if (__OFADD__(v60, 1LL))
  {
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
    goto LABEL_167;
  }

  if (v70 >= v65) {
    goto LABEL_95;
  }
  uint64_t v71 = *(void *)(v61 + 8 * v70);
  ++v60;
  if (v71) {
    goto LABEL_94;
  }
  unint64_t v60 = v70 + 1;
  if (v70 + 1 >= v65) {
    goto LABEL_95;
  }
  uint64_t v71 = *(void *)(v61 + 8 * v60);
  if (v71) {
    goto LABEL_94;
  }
  unint64_t v60 = v70 + 2;
  if (v70 + 2 >= v65) {
    goto LABEL_95;
  }
  uint64_t v71 = *(void *)(v61 + 8 * v60);
  if (v71)
  {
LABEL_94:
    unint64_t v64 = (v71 - 1) & v71;
    Swift::UInt v67 = __clz(__rbit64(v71)) + (v60 << 6);
    goto LABEL_79;
  }

  unint64_t v72 = v70 + 3;
  if (v72 < v65)
  {
    uint64_t v71 = *(void *)(v61 + 8 * v72);
    if (!v71)
    {
      while (1)
      {
        unint64_t v60 = v72 + 1;
        if (__OFADD__(v72, 1LL)) {
          break;
        }
        if (v60 >= v65) {
          goto LABEL_95;
        }
        uint64_t v71 = *(void *)(v61 + 8 * v60);
        ++v72;
        if (v71) {
          goto LABEL_94;
        }
      }

                __break(1u);
LABEL_129:
                __break(1u);
LABEL_130:
                __break(1u);
LABEL_131:
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
LABEL_134:
                __break(1u);
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
LABEL_138:
                __break(1u);
                goto LABEL_139;
              }
            }

            uint64_t v50 = v56;
          }

    Swift::UInt v78 = v5[8];
    if (i != v75)
    {
      uint64_t v12 = v5[11];
      if (v78)
      {
        __int128 v18 = v5[9];
        unint64_t v11 = v5[10];
        id v94 = *(unsigned __int8 *)(v78 + 18);
        id v95 = *(unsigned __int16 *)(v78 + 16);
        swift_release();
        uint64_t v15 = 0LL;
        __int128 v148 = ((-15LL << ((4 * v94 + 8) & 0x3C)) - 1) & v94 | (unint64_t)(v95 << ((4 * v94 + 8) & 0x3C));
      }

      else
      {
        swift_release();
        __int128 v148 = 0LL;
        uint64_t v15 = 0LL;
        __int128 v18 = 0LL;
        unint64_t v11 = 0LL;
      }

      goto LABEL_189;
    }

    int64_t v79 = v5[10];
    if (v78) {
      unint64_t v80 = v5[10];
    }
    else {
      unint64_t v80 = 0LL;
    }
    if (v80 < i) {
      goto LABEL_313;
    }
    __int128 v147 = v5[11];
    if (v78)
    {
      int64_t v81 = v5[9];
      __int128 v82 = *(unsigned __int8 *)(v78 + 18);
      if (i < v79 && *(_WORD *)(v78 + 16))
      {
        if (*(_BYTE *)(v78 + 18))
        {
          uint64_t result = (void *)swift_unknownObjectRetain_n();
          __int128 v83 = i;
          id v84 = v78;
          while (1)
          {
            id v86 = *(unsigned __int16 *)(v84 + 16);
            if (!*(_WORD *)(v84 + 16)) {
              goto LABEL_139;
            }
            id v87 = *(void *)(v84 + 40);
            __int128 v35 = __OFSUB__(v83, v87);
            id v88 = v83 - v87;
            if (v35) {
              goto LABEL_295;
            }
            if (__OFADD__(v88, 1LL)) {
              goto LABEL_296;
            }
            if (v88 + 1 <= 0)
            {
              id v86 = 0LL;
            }

            else
            {
              if ((_DWORD)v86 == 1) {
                goto LABEL_138;
              }
              id v89 = *(void *)(v84 + 64);
              __int128 v83 = v88 - v89;
              if (__OFSUB__(v88, v89)) {
                goto LABEL_311;
              }
              if (__OFADD__(v83, 1LL)) {
                goto LABEL_312;
              }
              if (v83 + 1 < 1)
              {
                id v86 = 1LL;
                __int128 v83 = v88;
              }

              else
              {
                if ((_DWORD)v86 == 2) {
                  goto LABEL_139;
                }
                id v90 = *(void *)(v84 + 88);
                __int128 v35 = __OFSUB__(v83, v90);
                id v88 = v83 - v90;
                if (v35) {
                  goto LABEL_324;
                }
                if (__OFADD__(v88, 1LL)) {
                  goto LABEL_325;
                }
                if (v88 + 1 >= 1)
                {
                  if ((_DWORD)v86 != 3)
                  {
                    id v91 = 3LL;
                    if (v86 > 3) {
                      id v91 = *(unsigned __int16 *)(v84 + 16);
                    }
                    id v92 = (void *)(v84 + 112);
                    id v93 = 3LL;
                    while (v91 != v93)
                    {
                      __int128 v83 = v88 - *v92;
                      if (__OFSUB__(v88, *v92)) {
                        goto LABEL_305;
                      }
                      if (__OFADD__(v83, 1LL)) {
                        goto LABEL_306;
                      }
                      if (v83 + 1 < 1)
                      {
                        id v86 = v93;
                        __int128 v83 = v88;
                        goto LABEL_140;
                      }

                      ++v93;
                      v92 += 3;
                      id v88 = v83;
                      if (v86 == v93) {
                        goto LABEL_139;
                      }
                    }

      swift_bridgeObjectRelease();
      int64_t v79 = 0LL;
      unint64_t v80 = 0xE000000000000000LL;
      goto LABEL_157;
    }
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  uint64_t v33 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      swift_bridgeObjectRetain_n();
      goto LABEL_72;
    }

    if ((a2 & 0x2000000000000000LL) != 0)
    {
      __int128 v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      __int128 v136 = a2 & 0xFFFFFFFFFFFFFFLL;
      __int128 v141 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      __int128 v142 = 0LL;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v135,  HIBYTE(a2) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v141,  1,  (unsigned __int8 *)&v135,  HIBYTE(a2) & 0xF,  (uint64_t *)&v139);
      int64_t v26 = v139;
      object = v140;
      swift_release();
      goto LABEL_71;
    }

    if ((a1 & 0x1000000000000000LL) == 0) {
      goto LABEL_188;
    }
    uint64_t v34 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_68;
  }

  int64_t v26 = 0LL;
  object = 0xE000000000000000LL;
  while (1)
  {
LABEL_76:
    Swift::UInt8 v45 = specialized Collection.first.getter(v26, object);
    if ((v45 & 0x1FF) != 0x5B) {
      goto LABEL_129;
    }
    if ((object & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignCount()();
      if (__OFSUB__(result, 1LL)) {
        goto LABEL_211;
      }
      uint64_t v47 = (v26 >> 59) & 1;
      Swift::UInt8 v45 = MEMORY[0x186E1B838](15LL, result - 1, v26, object);
LABEL_82:
      if ((v45 & 0xC) != 4LL << v47) {
        goto LABEL_83;
      }
      goto LABEL_186;
    }

    uint64_t v46 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000LL) == 0) {
      uint64_t v46 = v26 & 0xFFFFFFFFFFFFLL;
    }
    if (v46)
    {
      Swift::UInt8 v45 = (v46 << 16) - 65532;
      LOBYTE(v47) = 1;
      goto LABEL_82;
    }

    __break(1u);
LABEL_186:
    Swift::UInt8 v45 = _StringGuts._slowEnsureMatchingEncoding(_:)(v45, v26, object);
LABEL_83:
    uint64_t v48 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000LL) == 0) {
      uint64_t v48 = v26 & 0xFFFFFFFFFFFFLL;
    }
    char v49 = v45 >> 16;
    if (v45 >> 16 < v48) {
      break;
    }
    __break(1u);
LABEL_188:
    uint64_t v34 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    uint64_t v33 = v127;
LABEL_68:
    __int128 v135 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
    __int128 v136 = 0LL;
    swift_bridgeObjectRetain_n();
    int64_t v26 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v34,  v33,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v135,  1,  v34,  v33);
    object = v35;
LABEL_71:
    swift_bridgeObjectRelease();
    if (object == 1)
    {
LABEL_72:
      __int128 v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      __int128 v136 = a2;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      __int128 v36 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      __int128 v37 = objc_msgSend(v36, sel__fastCharacterContents);
      __int128 v38 = v36;
      if (!v37)
      {
        __int128 v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
        __int128 v136 = a2;
        swift_bridgeObjectRetain();
        uint64_t v66 = String.init<A>(_:)();
        int64_t v68 = v67;
        if ((v67 & 0x1000000000000000LL) != 0) {
          goto LABEL_202;
        }
        goto LABEL_107;
      }

      __int128 v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      __int128 v136 = a2;
      StringProtocol._ephemeralString.getter();
      __int128 v39 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      __int128 v40 = objc_msgSend(v39, sel_length);
      __int128 v41 = swift_unknownObjectRelease();
      __int128 v42 = MEMORY[0x1895F8858](v41);
      LOBYTE(v133) = 1;
      MEMORY[0x1895F8858](v42);
      _OWORD v131[2] = v37;
      v131[3] = v40;
      int64_t v26 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v37,  (uint64_t)v40,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToASCII(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  v43,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t)v131);
      object = v44;
      swift_bridgeObjectRelease_n();
      if (!object) {
        goto LABEL_74;
      }
    }

    else
    {
      swift_bridgeObjectRelease_n();
      if (!object) {
        goto LABEL_74;
      }
    }
  }

  if ((object & 0x1000000000000000LL) != 0)
  {
    Swift::UInt v51 = String.UTF8View._foreignSubscript(position:)();
  }

  else if ((object & 0x2000000000000000LL) != 0)
  {
    __int128 v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
    __int128 v136 = object & 0xFFFFFFFFFFFFFFLL;
    Swift::UInt v51 = *((_BYTE *)&v135 + v49);
  }

  else
  {
    if ((v26 & 0x1000000000000000LL) != 0) {
      uint64_t v50 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v50 = _StringObject.sharedUTF8.getter();
    }
    Swift::UInt v51 = *(_BYTE *)(v50 + v49);
  }

  if (v51 == 93)
  {
    swift_bridgeObjectRetain();
    unint64_t v72 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v26, object);
    swift_bridgeObjectRelease();
    if ((v72 & 1) == 0) {
      goto LABEL_114;
    }
LABEL_135:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v4 + 72) = v26;
    *(void *)(v4 + 80) = object;
    return result;
  }

      __break(1u);
      goto LABEL_129;
    }

                __break(1u);
LABEL_129:
                __break(1u);
LABEL_130:
                __break(1u);
LABEL_131:
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
LABEL_134:
                __break(1u);
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
LABEL_138:
                __break(1u);
                goto LABEL_139;
              }
            }

            uint64_t v54 = v60;
          }

                __int128 v148 = v100;
                __int128 v150 = (v99 - 1) & v99;
                id v86 = __clz(__rbit64(v99)) + (v100 << 6);
              }

              id v87 = 16 * v86;
              id v88 = *(void *)(v8 + 56);
              id v89 = (void *)(*(void *)(v8 + 48) + 16 * v86);
              id v90 = v89[1];
              id v91 = 48 * v86;
              id v92 = *(void *)(v88 + v91);
              id v93 = *(void *)(v88 + v91 + 8);
              id v94 = *(void *)(v88 + v91 + 16);
              uint64_t v12 = *(void *)(v88 + v91 + 24);
              uint64_t v10 = *(void **)(v88 + v91 + 32);
              id v95 = *(_BYTE *)(v88 + v91 + 40);
              id v96 = (void *)(*(void *)(v77 + 48) + v87);
              *id v96 = *v89;
              v96[1] = v90;
              id v97 = *(void *)(v77 + 56) + v91;
              *(void *)id v97 = v92;
              *(void *)(v97 + 8) = v93;
              *(void *)(v97 + 16) = v94;
              *(void *)(v97 + 24) = v12;
              *(void *)(v97 + 32) = v10;
              *(_BYTE *)(v97 + 40) = v95;
              swift_bridgeObjectRetain();
              outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v92, v93, v94, v12, (uint64_t)v10, v95);
            }
          }

      v186 = (void *)(*(void *)(v184 + 56) + 16 * v24);
      swift_unknownObjectRelease();
      *v186 = v6;
      v186[1] = v15;
LABEL_133:
      v2[6] = v184;
      swift_bridgeObjectRelease();
      *(void *)&v175 = v6;
      *((void *)&v175 + 1) = v15;
      goto LABEL_134;
    }
  }

  v208 = v24;
  v209 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
  v190 = static _DictionaryStorage.copy(original:)();
  v184 = v190;
  if (!*(void *)(v22 + 16)) {
    goto LABEL_176;
  }
  v207 = v2;
  v191 = (char *)(v190 + 64);
  __srca = (char *)(v22 + 64);
  v192 = (unint64_t)((1LL << *(_BYTE *)(v184 + 32)) + 63) >> 6;
  if (v184 != v22 || v191 >= &__srca[8 * v192]) {
    memmove(v191, __srca, 8 * v192);
  }
  v193 = 0LL;
  *(void *)(v184 + 16) = *(void *)(v22 + 16);
  v194 = 1LL << *(_BYTE *)(v22 + 32);
  v195 = -1LL;
  if (v194 < 64) {
    v195 = ~(-1LL << v194);
  }
  v196 = v195 & *(void *)(v22 + 64);
  v197 = (unint64_t)(v194 + 63) >> 6;
  while (1)
  {
    if (v196)
    {
      v198 = __clz(__rbit64(v196));
      v196 &= v196 - 1;
      v199 = v198 | (v193 << 6);
      goto LABEL_149;
    }

    v204 = v193 + 1;
    if (__OFADD__(v193, 1LL)) {
      goto LABEL_182;
    }
    if (v204 >= v197) {
      goto LABEL_176;
    }
    v205 = *(void *)&__srca[8 * v204];
    ++v193;
    if (!v205)
    {
      v193 = v204 + 1;
      if (v204 + 1 >= v197) {
        goto LABEL_176;
      }
      v205 = *(void *)&__srca[8 * v193];
      if (!v205)
      {
        v193 = v204 + 2;
        if (v204 + 2 >= v197) {
          goto LABEL_176;
        }
        v205 = *(void *)&__srca[8 * v193];
        if (!v205)
        {
          v193 = v204 + 3;
          if (v204 + 3 >= v197) {
            goto LABEL_176;
          }
          v205 = *(void *)&__srca[8 * v193];
          if (!v205)
          {
            v193 = v204 + 4;
            if (v204 + 4 >= v197) {
              goto LABEL_176;
            }
            v205 = *(void *)&__srca[8 * v193];
            if (!v205)
            {
              v193 = v204 + 5;
              if (v204 + 5 >= v197) {
                goto LABEL_176;
              }
              v205 = *(void *)&__srca[8 * v193];
              if (!v205)
              {
                v193 = v204 + 6;
                if (v204 + 6 >= v197) {
                  goto LABEL_176;
                }
                v205 = *(void *)&__srca[8 * v193];
                if (!v205)
                {
                  v193 = v204 + 7;
                  if (v204 + 7 >= v197) {
                    goto LABEL_176;
                  }
                  v205 = *(void *)&__srca[8 * v193];
                  if (!v205) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
      inited = swift_initStackObject();
      char v109 = specialized static Array._adoptStorage(_:count:)(inited, 7LL);
      *(_OWORD *)unint64_t v110 = xmmword_183817050;
      *(void *)(v110 + 16) = 0x43900000430LL;
      *(_DWORD *)(v110 + 24) = 1085;
      BOOL v111 = destructiveProjectEnumData for PredicateCodableError(v109, v110);
      uint64_t v112 = specialized String.UnicodeScalarView.init<A>(_:)(v111);
      __int128 v114 = v113;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      __int128 v115 = String.count.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t)specialized Collection.count.getter(v112, v114) < v115)
      {
        swift_bridgeObjectRetain();
        char v116 = String.UnicodeScalarView.hasSuffix(_:)(v112, v114, a1, a2);
        swift_bridgeObjectRelease();
        if ((v116 & 1) != 0)
        {
          uint64_t v117 = specialized Collection.count.getter(v112, v114);
          swift_bridgeObjectRetain();
          uint64_t v118 = specialized BidirectionalCollection.dropLast(_:)(v117, a1, a2);
          uint64_t v120 = v119;
          uint64_t v122 = v121;
          uint64_t v124 = v123;
          swift_bridgeObjectRelease();
          int64_t v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v118, v120, v122, v124);
          swift_bridgeObjectRelease();
LABEL_163:
          swift_bridgeObjectRelease();
          goto LABEL_164;
        }
      }

      int64_t v125 = swift_initStackObject();
      uint64_t v126 = specialized static Array._adoptStorage(_:count:)(v125, 5LL);
      *(_OWORD *)__int128 v127 = xmmword_183817060;
      *(_DWORD *)(v127 + 16) = 1090;
      __int128 v128 = destructiveProjectEnumData for PredicateCodableError(v126, v127);
      __int128 v129 = specialized String.UnicodeScalarView.init<A>(_:)(v128);
      __int128 v131 = v130;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      __int128 v132 = String.count.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t)specialized Collection.count.getter(v129, v131) < v132)
      {
        swift_bridgeObjectRetain();
        __int128 v133 = String.UnicodeScalarView.hasSuffix(_:)(v129, v131, a1, a2);
        swift_bridgeObjectRelease();
        if ((v133 & 1) != 0)
        {
          __int128 v134 = specialized Collection.count.getter(v129, v131);
          swift_bridgeObjectRetain();
          __int128 v135 = specialized BidirectionalCollection.dropLast(_:)(v134, a1, a2);
          __int128 v137 = v136;
          uint64_t v139 = v138;
          __int128 v141 = v140;
          swift_bridgeObjectRelease();
          int64_t v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v135, v137, v139, v141);
          swift_bridgeObjectRelease();
LABEL_162:
          swift_bridgeObjectRelease();
          goto LABEL_163;
        }
      }

      __int128 v142 = swift_initStackObject();
      __int128 v143 = specialized static Array._adoptStorage(_:count:)(v142, 4LL);
      *uint64_t v144 = xmmword_183817070;
      v145 = destructiveProjectEnumData for PredicateCodableError(v143, v144);
      __int128 v146 = specialized String.UnicodeScalarView.init<A>(_:)(v145);
      __int128 v148 = v147;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      __int128 v149 = String.count.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t)specialized Collection.count.getter(v146, v148) < v149)
      {
        swift_bridgeObjectRetain();
        __int128 v150 = String.UnicodeScalarView.hasSuffix(_:)(v146, v148, a1, a2);
        swift_bridgeObjectRelease();
        if ((v150 & 1) != 0)
        {
          __int128 v151 = specialized Collection.count.getter(v146, v148);
          swift_bridgeObjectRetain();
          __int128 v152 = specialized BidirectionalCollection.dropLast(_:)(v151, a1, a2);
          __int128 v154 = v153;
          v156 = v155;
          v158 = v157;
          swift_bridgeObjectRelease();
          int64_t v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v152, v154, v156, v158);
          swift_bridgeObjectRelease();
          goto LABEL_161;
        }
      }

      v159 = swift_initStackObject();
      v160 = specialized static Array._adoptStorage(_:count:)(v159, 4LL);
      *v161 = xmmword_183817080;
      v162 = destructiveProjectEnumData for PredicateCodableError(v160, v161);
      v163 = specialized String.UnicodeScalarView.init<A>(_:)(v162);
      v165 = v164;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v166 = String.count.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t)specialized Collection.count.getter(v163, v165) < v166)
      {
        swift_bridgeObjectRetain();
        v167 = String.UnicodeScalarView.hasSuffix(_:)(v163, v165, a1, a2);
        swift_bridgeObjectRelease();
        if ((v167 & 1) != 0)
        {
          v168 = specialized Collection.count.getter(v163, v165);
          swift_bridgeObjectRetain();
          v169 = specialized BidirectionalCollection.dropLast(_:)(v168, a1, a2);
          v171 = v170;
          v173 = v172;
          v175 = v174;
          swift_bridgeObjectRelease();
          int64_t v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v169, v171, v173, v175);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_161;
        }
      }

      v176 = swift_initStackObject();
      v177 = specialized static Array._adoptStorage(_:count:)(v176, 4LL);
      *v178 = xmmword_183817090;
      v179 = destructiveProjectEnumData for PredicateCodableError(v177, v178);
      v180 = specialized String.UnicodeScalarView.init<A>(_:)(v179);
      v182 = v181;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v183 = String.count.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t)specialized Collection.count.getter(v180, v182) < v183
        && (swift_bridgeObjectRetain(),
            v184 = String.UnicodeScalarView.hasSuffix(_:)(v180, v182, a1, a2),
            swift_bridgeObjectRelease(),
            (v184 & 1) != 0))
      {
        v185 = specialized Collection.count.getter(v180, v182);
        swift_bridgeObjectRetain();
        v186 = specialized BidirectionalCollection.dropLast(_:)(v185, a1, a2);
        v188 = v187;
        v190 = v189;
        v192 = v191;
        swift_bridgeObjectRelease();
        int64_t v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v186, v188, v190, v192);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        v193 = swift_initStackObject();
        v194 = specialized static Array._adoptStorage(_:count:)(v193, 4LL);
        *v195 = xmmword_1838170A0;
        v196 = destructiveProjectEnumData for PredicateCodableError(v194, v195);
        v197 = specialized String.UnicodeScalarView.init<A>(_:)(v196);
        v199 = v198;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v200 = String.count.getter();
        swift_bridgeObjectRelease();
        if ((uint64_t)specialized Collection.count.getter(v197, v199) >= v200
          || (swift_bridgeObjectRetain(),
              v201 = String.UnicodeScalarView.hasSuffix(_:)(v197, v199, a1, a2),
              swift_bridgeObjectRelease(),
              (v201 & 1) == 0))
        {
          v210 = swift_initStackObject();
          v211 = specialized static Array._adoptStorage(_:count:)(v210, 4LL);
          *v212 = xmmword_1838170B0;
          v213 = destructiveProjectEnumData for PredicateCodableError(v211, v212);
          v214 = specialized String.UnicodeScalarView.init<A>(_:)(v213);
          v216 = v215;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v217 = String.count.getter();
          swift_bridgeObjectRelease();
          if ((uint64_t)specialized Collection.count.getter(v214, v216) < v217
            && (swift_bridgeObjectRetain(),
                v218 = String.UnicodeScalarView.hasSuffix(_:)(v214, v216, a1, a2),
                swift_bridgeObjectRelease(),
                (v218 & 1) != 0))
          {
            v219 = specialized Collection.count.getter(v214, v216);
            swift_bridgeObjectRetain();
            v220 = specialized BidirectionalCollection.dropLast(_:)(v219, a1, a2);
            v222 = v221;
            v224 = v223;
            v226 = v225;
            swift_bridgeObjectRelease();
            int64_t v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v220, v222, v224, v226);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }

          else
          {
            v227 = swift_initStackObject();
            v228 = specialized static Array._adoptStorage(_:count:)(v227, 4LL);
            *v229 = xmmword_1838170C0;
            v230 = destructiveProjectEnumData for PredicateCodableError(v228, v229);
            v231 = specialized String.UnicodeScalarView.init<A>(_:)(v230);
            v233 = v232;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v234 = String.count.getter();
            swift_bridgeObjectRelease();
            if ((uint64_t)specialized Collection.count.getter(v231, v233) >= v234
              || (swift_bridgeObjectRetain(),
                  v235 = String.UnicodeScalarView.hasSuffix(_:)(v231, v233, a1, a2),
                  swift_bridgeObjectRelease(),
                  (v235 & 1) == 0))
            {
              v244 = swift_initStackObject();
              v245 = specialized static Array._adoptStorage(_:count:)(v244, 4LL);
              *v246 = xmmword_1838170D0;
              v247 = destructiveProjectEnumData for PredicateCodableError(v245, v246);
              v248 = specialized String.UnicodeScalarView.init<A>(_:)(v247);
              v250 = v249;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v251 = String.count.getter();
              swift_bridgeObjectRelease();
              if ((uint64_t)specialized Collection.count.getter(v248, v250) < v251
                && (swift_bridgeObjectRetain(),
                    v252 = String.UnicodeScalarView.hasSuffix(_:)(v248, v250, a1, a2),
                    swift_bridgeObjectRelease(),
                    (v252 & 1) != 0))
              {
                v253 = specialized Collection.count.getter(v248, v250);
                swift_bridgeObjectRetain();
                v254 = specialized BidirectionalCollection.dropLast(_:)(v253, a1, a2);
                v256 = v255;
                v258 = v257;
                v260 = v259;
                swift_bridgeObjectRelease();
                int64_t v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v254, v256, v258, v260);
              }

              else
              {
                v261 = swift_initStackObject();
                v262 = specialized static Array._adoptStorage(_:count:)(v261, 3LL);
                *(void *)v263 = 0x4310000002ELL;
                *(_DWORD *)(v263 + 8) = 1075;
                v264 = destructiveProjectEnumData for PredicateCodableError(v262, v263);
                v265 = specialized String.UnicodeScalarView.init<A>(_:)(v264);
                v267 = v266;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v268 = String.count.getter();
                swift_bridgeObjectRelease();
                if ((uint64_t)specialized Collection.count.getter(v265, v267) >= v268
                  || (swift_bridgeObjectRetain(),
                      v269 = String.UnicodeScalarView.hasSuffix(_:)(v265, v267, a1, a2),
                      swift_bridgeObjectRelease(),
                      (v269 & 1) == 0))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  int64_t v81 = 0;
                  goto LABEL_165;
                }

                v270 = specialized Collection.count.getter(v265, v267);
                swift_bridgeObjectRetain();
                v271 = specialized BidirectionalCollection.dropLast(_:)(v270, a1, a2);
                v278 = v272;
                v274 = v273;
                v276 = v275;
                swift_bridgeObjectRelease();
                int64_t v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v271, v278, v274, v276);
                swift_bridgeObjectRelease();
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_161;
            }

            v236 = specialized Collection.count.getter(v231, v233);
            swift_bridgeObjectRetain();
            v237 = specialized BidirectionalCollection.dropLast(_:)(v236, a1, a2);
            v239 = v238;
            v241 = v240;
            v243 = v242;
            swift_bridgeObjectRelease();
            int64_t v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v237, v239, v241, v243);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_161:
          swift_bridgeObjectRelease();
          goto LABEL_162;
        }

        v202 = specialized Collection.count.getter(v197, v199);
        swift_bridgeObjectRetain();
        v203 = specialized BidirectionalCollection.dropLast(_:)(v202, a1, a2);
        v205 = v204;
        v207 = v206;
        v209 = v208;
        swift_bridgeObjectRelease();
        int64_t v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v203, v205, v207, v209);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      goto LABEL_161;
    }

                      unint64_t v75 = (v83 - 1) & v83;
                      int64_t v81 = __clz(__rbit64(v83)) + (v74 << 6);
                    }

                    id v85 = *(void *)(v1 + 56);
                    id v86 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v81);
                    id v88 = *v86;
                    id v87 = v86[1];
                    outlined init with copy of AttributedString._AttributeValue(v85 + 72 * v81, (uint64_t)&v121);
                    uint64_t v117 = v123;
                    uint64_t v118 = v124;
                    int64_t v119 = v125;
                    __int128 v115 = v121;
                    char v116 = v122;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    id v89 = Hasher._finalize()();
                    id v90 = -1LL << *(_BYTE *)(v73 + 32);
                    id v91 = v89 & ~v90;
                    id v92 = v91 >> 6;
                    if (((-1LL << v91) & ~*(void *)(v76 + 8 * (v91 >> 6))) != 0)
                    {
                      Swift::UInt v77 = __clz(__rbit64((-1LL << v91) & ~*(void *)(v76 + 8 * (v91 >> 6)))) | v91 & 0x7FFFFFFFFFFFFFC0LL;
                    }

                    else
                    {
                      id v93 = 0;
                      id v94 = (unint64_t)(63 - v90) >> 6;
                      do
                      {
                        if (++v92 == v94 && (v93 & 1) != 0) {
                          goto LABEL_143;
                        }
                        id v95 = v92 == v94;
                        if (v92 == v94) {
                          id v92 = 0LL;
                        }
                        v93 |= v95;
                        id v96 = *(void *)(v76 + 8 * v92);
                      }

                      while (v96 == -1);
                      Swift::UInt v77 = __clz(__rbit64(~v96)) + (v92 << 6);
                    }

                    *(void *)(v76 + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v77;
                    Swift::UInt v78 = (void *)(*(void *)(v73 + 48) + 16 * v77);
                    *Swift::UInt v78 = v88;
                    v78[1] = v87;
                    int64_t v79 = *(void *)(v73 + 56) + 72 * v77;
                    *(_OWORD *)(v79 + 16) = v116;
                    *(_OWORD *)(v79 + 32) = v117;
                    *(_OWORD *)(v79 + 48) = v118;
                    *(void *)(v79 + 64) = v119;
                    *(_OWORD *)int64_t v79 = v115;
                    ++*(void *)(v73 + 16);
                    --v48;
                    v1 = v107;
                    if (!v48) {
                      goto LABEL_138;
                    }
                  }
                }

                int64_t v28 = v37;
              }
            }
          }

                      __break(1u);
                    }

                          if ((userInfo & 0x20) == 0)
                          {
                            v210 = a5;
                            goto LABEL_130;
                          }

                  __break(1u);
                  goto LABEL_129;
                }

                __int128 v37 = v49;
              }
            }
          }
        }

                    __break(1u);
                    goto LABEL_129;
                  }

                  __int128 v42 = v57;
                }
              }
            }
          }

LABEL_167:
      __break(1u);
      goto LABEL_168;
    }

    int64_t v57 = v69;
    goto LABEL_94;
  }

      __break(1u);
      goto LABEL_168;
    }

    unint64_t v60 = v72;
    goto LABEL_94;
  }

  swift_release();

  if (*(void *)(v232 + 16))
  {
    swift_bridgeObjectRelease();
    v234[14] = v232;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease();
      v277 = 0xD000000000000014LL;
      *(void *)v278 = 0x80000001839C9190LL;
      LODWORD(v213) = v54;
      v192._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v192);
      swift_bridgeObjectRelease();
      LODWORD(v195) = 0;
      v194 = 73LL;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1832CFF58LL);
    }

    unint64_t v64 = 4LL;
    switch(v54)
    {
      case 1:
      case 13:
        unint64_t v64 = 513LL;
        goto LABEL_134;
      case 2:
        goto LABEL_134;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_86;
      case 17:
        unint64_t v64 = 516LL;
        goto LABEL_134;
      case 28:
      case 69:
        unint64_t v64 = 640LL;
        goto LABEL_134;
      case 30:
        unint64_t v64 = 642LL;
        goto LABEL_134;
      case 63:
        unint64_t v64 = 514LL;
        goto LABEL_134;
      default:
        if (v54 == 102)
        {
          uint64_t v123 = 0LL;
          uint64_t v124 = 512LL;
        }

        else
        {
LABEL_86:
          unint64_t v64 = 512LL;
LABEL_134:
          v210 = v64;
          v181 = v15;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_167;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          v182 = (int)POSIXErrorCode.rawValue.getter();
          v183 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          v184 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v123 = objc_msgSend(v183, sel_initWithDomain_code_userInfo_, v184, v182, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v185 = objc_msgSend(v123, sel_domain);
          v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(v185);
          Path = v187;

          if (v186 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && Path == v188)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v15 = v181;
          }

          else
          {
            v189 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v15 = v181;
            if ((v189 & 1) == 0) {
              goto LABEL_160;
            }
          }

          uint64_t v124 = v210;
        }

        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v124,  (uint64_t)v15,  v16,  v123,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v277,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
        break;
    }

    return swift_willThrow();
  }

  __int128 v17 = v14;
  uint64_t v16 = a5;
  uint64_t v15 = a4;
  v209 = a8;
  __int128 v22 = a9;
  v210 = (uint64_t)__old;
  if (!rename(__old, __new)) {
    goto LABEL_67;
  }
  LODWORD(Path) = Path & 1;
  __int128 v23 = MEMORY[0x186E1B0E8]();
  if ((_DWORD)v23 != 22) {
    goto LABEL_15;
  }
  v200 = a9;
  v208 = Path;
  v207 = v14;
  unint64_t v25 = *a3;
  __int128 v24 = a3[1];
  swift_bridgeObjectRetain();
  getpid();
  if (_foundation_sandbox_check())
  {
    v205 = (uint64_t *)v16;
    URL.init(fileURLWithPath:isDirectory:)(v25, v24, 0, (uint64_t)&v277);
    int64_t v26 = (id)v277;
    v202 = *(void *)v278;
    v203 = *(void *)&v278[8];
    unint64_t v27 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v277 = 0LL;
    v201 = v26;
    int64_t v28 = objc_msgSend(v27, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v26, 1, &v277);
    uint64_t v29 = v24;
    uint64_t v30 = v28;

    uint64_t v31 = (id)v277;
    if (!v30)
    {
      if (v277)
      {
        (id)v277;
        Path = (unint64_t)v201;
LABEL_56:
        swift_willThrow();
        swift_willThrow();
        swift_bridgeObjectRelease();

        swift_release();
        return swift_release();
      }

      Path = (unint64_t)v201;
      if (one-time initialization token for _nilObjCError == -1)
      {
LABEL_55:
        id v93 = (id)_nilObjCError;
        goto LABEL_56;
      }

LABEL_95:
  swift_bridgeObjectRetain();
  Hasher._combine(_:)(v56);
  swift_bridgeObjectRelease();
  uint64_t v54 = v146;
  if (!v146) {
    goto LABEL_68;
  }
LABEL_96:
  Hasher._combine(_:)(1u);
  uint64_t v70 = 0LL;
  uint64_t v71 = 0LL;
  unint64_t v72 = v54 + 64;
  int64_t v73 = 1LL << *(_BYTE *)(v54 + 32);
  if (v73 < 64) {
    uint64_t v74 = ~(-1LL << v73);
  }
  else {
    uint64_t v74 = -1LL;
  }
  unint64_t v75 = v74 & *(void *)(v54 + 64);
  unint64_t v76 = (unint64_t)(v73 + 63) >> 6;
  while (2)
  {
    if (v75)
    {
      Swift::UInt v77 = __clz(__rbit64(v75));
      v75 &= v75 - 1;
      Swift::UInt v78 = v77 | (v71 << 6);
LABEL_101:
      int64_t v79 = *(unsigned __int8 *)(*(void *)(v54 + 48) + v78);
      unint64_t v80 = *(void *)(*(void *)(v54 + 56) + 8 * v78);
      __int128 v136 = v161;
      __int128 v137 = v162;
      __int128 v138 = v163;
      uint64_t v139 = v164;
      __int128 v140 = v165;
      Hasher._combine(_:)(v79);
      Hasher._combine(_:)(v80);
      v70 ^= Hasher._finalize()();
      continue;
    }

    break;
  }

  int64_t v81 = v71 + 1;
  if (__OFADD__(v71, 1LL)) {
    goto LABEL_166;
  }
  if (v81 >= v76)
  {
LABEL_117:
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v70);
    swift_bridgeObjectRelease();
    goto LABEL_118;
  }

  __int128 v82 = *(void *)(v72 + 8 * v81);
  ++v71;
  if (v82) {
    goto LABEL_116;
  }
  uint64_t v71 = v81 + 1;
  if (v81 + 1 >= v76) {
    goto LABEL_117;
  }
  __int128 v82 = *(void *)(v72 + 8 * v71);
  if (v82) {
    goto LABEL_116;
  }
  uint64_t v71 = v81 + 2;
  if (v81 + 2 >= v76) {
    goto LABEL_117;
  }
  __int128 v82 = *(void *)(v72 + 8 * v71);
  if (v82)
  {
LABEL_116:
    unint64_t v75 = (v82 - 1) & v82;
    Swift::UInt v78 = __clz(__rbit64(v82)) + (v71 << 6);
    goto LABEL_101;
  }

  __int128 v83 = v81 + 3;
  if (v83 >= v76) {
    goto LABEL_117;
  }
  __int128 v82 = *(void *)(v72 + 8 * v83);
  if (v82)
  {
    uint64_t v71 = v83;
    goto LABEL_116;
  }

  while (1)
  {
    uint64_t v71 = v83 + 1;
    if (__OFADD__(v83, 1LL)) {
      break;
    }
    if (v71 >= v76) {
      goto LABEL_117;
    }
    __int128 v82 = *(void *)(v72 + 8 * v71);
    ++v83;
    if (v82) {
      goto LABEL_116;
    }
  }

  swift_bridgeObjectRetain();
  Hasher._combine(_:)(v59);
  swift_bridgeObjectRelease();
  int64_t v57 = v151;
  if (!v151) {
    goto LABEL_68;
  }
LABEL_96:
  Hasher._combine(_:)(1u);
  int64_t v73 = 0LL;
  uint64_t v74 = 0LL;
  unint64_t v75 = v57 + 64;
  unint64_t v76 = 1LL << *(_BYTE *)(v57 + 32);
  if (v76 < 64) {
    Swift::UInt v77 = ~(-1LL << v76);
  }
  else {
    Swift::UInt v77 = -1LL;
  }
  Swift::UInt v78 = v77 & *(void *)(v57 + 64);
  int64_t v79 = (unint64_t)(v76 + 63) >> 6;
  while (2)
  {
    if (v78)
    {
      unint64_t v80 = __clz(__rbit64(v78));
      v78 &= v78 - 1;
      int64_t v81 = v80 | (v74 << 6);
LABEL_101:
      __int128 v82 = *(unsigned __int8 *)(*(void *)(v57 + 48) + v81);
      __int128 v83 = *(void *)(*(void *)(v57 + 56) + 8 * v81);
      __int128 v141 = v166;
      __int128 v142 = v167;
      __int128 v143 = v168;
      uint64_t v144 = v169;
      v145 = v170;
      Hasher._combine(_:)(v82);
      Hasher._combine(_:)(v83);
      v73 ^= Hasher._finalize()();
      continue;
    }

    break;
  }

  id v84 = v74 + 1;
  if (__OFADD__(v74, 1LL)) {
    goto LABEL_166;
  }
  if (v84 >= v79)
  {
LABEL_117:
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v73);
    swift_bridgeObjectRelease();
    goto LABEL_118;
  }

  id v85 = *(void *)(v75 + 8 * v84);
  ++v74;
  if (v85) {
    goto LABEL_116;
  }
  uint64_t v74 = v84 + 1;
  if (v84 + 1 >= v79) {
    goto LABEL_117;
  }
  id v85 = *(void *)(v75 + 8 * v74);
  if (v85) {
    goto LABEL_116;
  }
  uint64_t v74 = v84 + 2;
  if (v84 + 2 >= v79) {
    goto LABEL_117;
  }
  id v85 = *(void *)(v75 + 8 * v74);
  if (v85)
  {
LABEL_116:
    Swift::UInt v78 = (v85 - 1) & v85;
    int64_t v81 = __clz(__rbit64(v85)) + (v74 << 6);
    goto LABEL_101;
  }

  id v86 = v84 + 3;
  if (v86 >= v79) {
    goto LABEL_117;
  }
  id v85 = *(void *)(v75 + 8 * v86);
  if (v85)
  {
    uint64_t v74 = v86;
    goto LABEL_116;
  }

  while (1)
  {
    uint64_t v74 = v86 + 1;
    if (__OFADD__(v86, 1LL)) {
      break;
    }
    if (v74 >= v79) {
      goto LABEL_117;
    }
    id v85 = *(void *)(v75 + 8 * v74);
    ++v86;
    if (v85) {
      goto LABEL_116;
    }
  }

                if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
                  goto LABEL_129;
                }
                static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                __int128 v83 = (int)POSIXErrorCode.rawValue.getter();
                id v84 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
                id v85 = String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                uint64_t v44 = objc_msgSend(v84, sel_initWithDomain_code_userInfo_, v85, v83, _NativeDictionary.bridged()());
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                __int128 v17 = objc_msgSend(v44, sel_domain);
                id v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
                id v88 = v87;

                if (v86 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                  || v88 != v89)
                {
                  id v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  id v90 = (uint64_t)v121;
                  if ((v91 & 1) == 0) {
                    goto LABEL_128;
                  }
LABEL_101:
                  swift_bridgeObjectRetain();
                  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v40,  v90,  v119,  v44,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v132,  0LL,  0LL);
LABEL_110:
                  swift_willThrow();

                  return;
                }

                swift_bridgeObjectRelease_n();
LABEL_99:
                id v90 = (uint64_t)v121;
                goto LABEL_101;
            }
          }

      swift_bridgeObjectRelease();
      *(void *)(v106 + 16) = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v106 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: JSONReference));
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v106 = v7;
    __dst = (unint64_t *)(v7 + 32);
  }

  uint64_t v9 = 0LL;
  Swift::Int v105 = v2;
  uint64_t v10 = *v2;
  unint64_t v110 = (char *)MEMORY[0x18961AFE8];
  while (1)
  {
    uint64_t v12 = v9++;
    if (v9 < v3)
    {
      int64_t v13 = specialized Sequence<>.lexicographicallyPrecedes<A>(_:)( *(void *)(v10 + 24 * v12),  *(void *)(v10 + 24 * v12 + 8),  *(void *)(v10 + 24 * v9),  *(void *)(v10 + 24 * v9 + 8));
      uint64_t v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        unint64_t v14 = (unint64_t *)(v10 + 32 + 24 * v12);
        uint64_t v15 = v14;
        while (1)
        {
          uint64_t v16 = v15[3];
          v15 += 3;
          if (((v13 ^ specialized Sequence<>.lexicographicallyPrecedes<A>(_:)( *(v14 - 1),  *v14,  v14[2],  v16)) & 1) != 0) {
            break;
          }
          ++v9;
          unint64_t v14 = v15;
          if (v3 == v9)
          {
            uint64_t v9 = v3;
            break;
          }
        }
      }

      if ((v13 & 1) != 0)
      {
        if (v9 < v12) {
          goto LABEL_140;
        }
        if (v12 < v9)
        {
          __int128 v17 = 24 * v9;
          __int128 v18 = 24 * v12;
          __int128 v19 = v9;
          __int128 v20 = v12;
          do
          {
            if (v20 != --v19)
            {
              if (!v10) {
                goto LABEL_146;
              }
              __int128 v21 = v10 + v18;
              __int128 v22 = v10 + v17;
              __int128 v23 = *(void *)(v10 + v18);
              __int128 v24 = *(_OWORD *)(v10 + v18 + 8);
              unint64_t v25 = *(_OWORD *)(v10 + v17 - 24);
              *(void *)(v21 + 16) = *(void *)(v10 + v17 - 8);
              *(_OWORD *)__int128 v21 = v25;
              *(void *)(v22 - 24) = v23;
              *(_OWORD *)(v22 - 16) = v24;
            }

            ++v20;
            v17 -= 24LL;
            v18 += 24LL;
          }

          while (v20 < v19);
        }
      }
    }

    if (v9 >= v3) {
      goto LABEL_39;
    }
    if (__OFSUB__(v9, v12)) {
      goto LABEL_138;
    }
    if (v9 - v12 >= v107) {
      goto LABEL_39;
    }
    if (__OFADD__(v12, v107)) {
      goto LABEL_141;
    }
    int64_t v26 = v12 + v107 >= v3 ? v3 : v12 + v107;
    if (v26 < v12) {
      break;
    }
    if (v9 != v26)
    {
      Swift::UInt v77 = v10 - 24 + 24 * v9;
      unint64_t v27 = v110;
      do
      {
        Swift::UInt v78 = (unint64_t *)(v10 + 24 * v9);
        int64_t v79 = *v78;
        unint64_t v80 = v78[1];
        int64_t v81 = v12;
        __int128 v82 = v77;
        do
        {
          if ((specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(*(void *)v82, *(void *)(v82 + 8), v79, v80) & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_144;
          }
          __int128 v83 = *(_OWORD *)(v82 + 32);
          id v84 = *(void *)(v82 + 16);
          int64_t v79 = *(void *)(v82 + 24);
          *(_OWORD *)(v82 + 24) = *(_OWORD *)v82;
          *(void *)(v82 + 40) = v84;
          *(void *)__int128 v82 = v79;
          *(_OWORD *)(v82 + 8) = v83;
          unint64_t v80 = v83;
          v82 -= 24LL;
          ++v81;
        }

        while (v9 != v81);
        ++v9;
        v77 += 24LL;
      }

      while (v9 != v26);
      uint64_t v9 = v26;
      if (v26 < v12) {
        goto LABEL_133;
      }
      goto LABEL_40;
    }

  unint64_t v80 = &v12[-v9];
  if (v12 == (unsigned __int8 *)v9)
  {
    __int128 v83 = 0LL;
    __int128 v82 = 0LL;
    int64_t v81 = 0LL;
    LOBYTE(v15) = 1;
  }

  else
  {
    NSDecimal.compact()();
    id v88 = LODWORD(v113[0]);
    id v89 = WORD2(v113[0]);
    id v90 = WORD3(v113[0]);
    id v91 = WORD4(v113[0]);
    id v92 = WORD5(v113[0]);
    id v93 = WORD6(v113[0]);
    id v94 = HIWORD(v113[0]);
    id v95 = LOWORD(v113[1]);
    id v96 = WORD1(v113[1]);
    *(_OWORD *)uint64_t v112 = v113[0];
    *(_DWORD *)&v112[16] = v113[1];
    *(_DWORD *)uint64_t v112 = v88;
    *(_WORD *)&v112[4] = v89;
    *(_WORD *)&v112[6] = v90;
    *(_WORD *)&v112[8] = v91;
    *(_WORD *)&v112[10] = v92;
    *(_WORD *)&v112[12] = v93;
    *(_WORD *)&v112[14] = v94;
    *(_WORD *)&v112[16] = v95;
    *(_WORD *)&v112[18] = v96;
    if (!_So9NSDecimala__isNegative_getter(v112))
    {
LABEL_97:
      LOBYTE(v15) = 0;
      __int128 v83 = v88 | (v89 << 32) | (v90 << 48);
      __int128 v82 = v91 | (v92 << 16) | (v93 << 32) | (v94 << 48);
      int64_t v81 = v95 | (v96 << 16);
    }

    else
    {
      __int128 v83 = 0LL;
      __int128 v82 = 0LL;
      int64_t v81 = 0LL;
      LOBYTE(v15) = 0;
    }
  }

      uint64_t v29 = 0;
      uint64_t v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }

    goto LABEL_96;
  }

      __break(1u);
      goto LABEL_96;
    }
  }

  if (v7) {
    int64_t v13 = v4[9];
  }
  else {
    int64_t v13 = 0LL;
  }
  if (v2 < 0 || v13 < v2) {
    goto LABEL_100;
  }
  if (!v7 || (v2 < v8 ? (unint64_t v14 = *(unsigned __int16 *)(v7 + 16) == 0) : (unint64_t v14 = 1), v14))
  {
    uint64_t v15 = swift_unknownObjectRetain_n();
    unint64_t v11 = specialized Rope._endPath.getter(v15);
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    uint64_t v5 = 0LL;
    if (!v7)
    {
      uint64_t v10 = v9;
      goto LABEL_65;
    }

      __break(1u);
      goto LABEL_96;
    }

            int64_t v125 = 256LL;
          }

              if (v9 == v25 && a2 == 0x80000001839CFFC0LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                uint64_t result = v39;
              }

              else if (v9 == v4 + 4 && a2 == 0x80000001839CFFE0LL {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                uint64_t result = v40;
              }

              else
              {
                if (v9 != v11 || a2 != 0x80000001839D0000LL)
                {
                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((result & 1) == 0) {
                    goto LABEL_7;
                  }
                }

                uint64_t result = v41;
              }

            __break(1u);
            goto LABEL_96;
          }

          __int128 v21 = (unint64_t *)v75;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
          *((void *)v11 + 20) = v91;
          swift_retain();
          swift_release();
          int64_t v13 = *((void *)v11 + 2);
          if (!*(void *)(v13 + 16)) {
            goto LABEL_99;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_100;
          }
          Swift::UInt v78 = *(void *)(v13 + 16);
          if (!v78) {
            goto LABEL_101;
          }
LABEL_66:
          *(void *)(v13 + 16) = v78 - 1;
          *((void *)v11 + 2) = v13;
          swift_release();
          outlined consume of JSONEncoder.KeyEncodingStrategy(v19);
          swift_release();
          return v21;
        }

LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
}

  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
}

      __break(1u);
      goto LABEL_169;
    }

    __break(1u);
    goto LABEL_168;
  }

  if ((v140 & 1) != 0)
  {
    specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(&v150, v134, v130, v18, v17);
    specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(&v149, v136, a2, a3, a4);
    __int128 v22 = v150;
  }

  if ((v149 ^ a2) >> 14) {
    unint64_t v110 = -1LL;
  }
  else {
    unint64_t v110 = 0LL;
  }
  if (v139 == v22 >> 14) {
    BOOL v111 = v110;
  }
  else {
    BOOL v111 = 1LL;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v111) {
    return v138;
  }
  return v111;
}

  v174 = 0LL;
  __int128 v19 = v22 - v24;
  if (__OFSUB__(v22, v24)) {
    goto LABEL_170;
  }
LABEL_32:
  if (v178 != *(void *)(v18 + 88))
  {
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
    goto LABEL_187;
  }

  __int128 v38 = v37;
  if (v37)
  {
    __int128 v39 = v37 + 24 * ((v175 >> ((4 * *(_BYTE *)(v37 + 18) + 8) & 0x3C)) & 0xF);
    __int128 v40 = *(void *)(v39 + 32);
    __int128 v41 = *(void *)(v39 + 40);
    swift_bridgeObjectRetain();
    uint64_t result = (unint64_t *)swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v42 = *(void *)(v18 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v175, v42);
    __int128 v40 = v43;
    __int128 v41 = v44;
    uint64_t result = (unint64_t *)swift_unknownObjectRelease();
  }

  Swift::UInt8 v45 = v167;
  if (*((uint64_t *)&v215[0] + 1) < v174)
  {
    v149[0] = *((void *)&v215[0] + 1);
    v149[1] = v41;
    v179 = (__int128 *)&v211;
    v180 = &v192;
    __int128 v152 = (uint64_t *)(v166 + 40);
    v171 = v40;
LABEL_38:
    v161 = v19;
    uint64_t v46 = *(void *)(v18 + 64);
    uint64_t v47 = *(void *)(v18 + 88);
    uint64_t v48 = v175;
    v188 = v178;
    v189 = v175;
    v190 = v38;
    if (v178 != v47) {
      goto LABEL_186;
    }
    if (v46)
    {
      char v49 = *(unsigned __int8 *)(v46 + 18);
      uint64_t result = (unint64_t *)swift_unknownObjectRetain();
      if (v48 <= v49)
      {
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
        goto LABEL_190;
      }
    }

    else if (!v175)
    {
      goto LABEL_187;
    }

    if (v38)
    {
      uint64_t v50 = (4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C;
      if (((v48 >> v50) & 0xF) != 0)
      {
        Swift::UInt v51 = ((((v48 >> v50) & 0xF) - 1) << v50) | ((-15LL << v50) - 1) & v48;
        v189 = v51;
        goto LABEL_50;
      }
    }

    int64_t v52 = *(unsigned __int8 *)(v46 + 18);
    uint64_t v53 = (4 * v52 + 8) & 0x3C;
    uint64_t v54 = (v48 >> v53) & 0xF;
    *(void *)&v209 = v54;
    if (v52)
    {
      swift_unknownObjectRetain();
      uint64_t v55 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v46 + 16,  v46 + 24,  (uint64_t *)&v209,  (uint64_t)&v188,  v52);
      uint64_t result = (unint64_t *)swift_unknownObjectRelease();
      if ((v55 & 1) != 0)
      {
        if (v188 != v178) {
          goto LABEL_188;
        }
        Swift::UInt v51 = v189;
        __int128 v38 = v190;
        if (v190)
        {
LABEL_50:
          unint64_t v56 = *(void *)(v38 + 24 * ((v51 >> ((4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          int64_t v57 = 0;
          goto LABEL_54;
        }

        swift_unknownObjectRetain();
        int64_t v81 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v180, v95, (uint64_t)v18, v11, v178);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        __int128 v20 = __OFSUB__(v21, v9);
        v21 -= v9;
        if (v20) {
          goto LABEL_361;
        }
        goto LABEL_231;
      }

      __int128 v22 = *(unsigned __int8 *)(v11 + 18);
      if (*(_BYTE *)(v11 + 18))
      {
        uint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v9 = v21;
        uint64_t v6 = (uint64_t *)v11;
        while (1)
        {
          uint64_t v33 = *((unsigned __int16 *)v6 + 8);
          if (!*((_WORD *)v6 + 8)) {
            goto LABEL_152;
          }
          id v89 = v6[5];
          __int128 v20 = __OFSUB__(v9, v89);
          __int128 v35 = v9 - v89;
          if (v20) {
            goto LABEL_339;
          }
          if (__OFADD__(v35, 1LL)) {
            goto LABEL_340;
          }
          if (v35 + 1 <= 0)
          {
            uint64_t v33 = 0LL;
          }

          else
          {
            if ((_DWORD)v33 == 1)
            {
              uint64_t v9 = v35;
LABEL_152:
              if (v9) {
                goto LABEL_336;
              }
              goto LABEL_153;
            }

            id v90 = v6 + 8;
            id v91 = 1LL;
            while (1)
            {
              id v92 = *v90;
              v90 += 3;
              uint64_t v9 = v35 - v92;
              if (__OFSUB__(v35, v92)) {
                goto LABEL_332;
              }
              if (__OFADD__(v9, 1LL)) {
                goto LABEL_333;
              }
              if (v9 + 1 < 1) {
                break;
              }
              ++v91;
              __int128 v35 = v9;
              if (v33 == v91) {
                goto LABEL_152;
              }
            }

            uint64_t v33 = v91;
            uint64_t v9 = v35;
          }

        swift_unknownObjectRetain();
        unint64_t v80 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v179, v94, (uint64_t)v18, v11, v177);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        __int128 v20 = __OFSUB__(v21, v9);
        v21 -= v9;
        if (v20) {
          goto LABEL_361;
        }
        goto LABEL_231;
      }

      __int128 v22 = *(unsigned __int8 *)(v11 + 18);
      if (*(_BYTE *)(v11 + 18))
      {
        uint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v9 = v21;
        uint64_t v6 = (uint64_t *)v11;
        while (1)
        {
          uint64_t v33 = *((unsigned __int16 *)v6 + 8);
          if (!*((_WORD *)v6 + 8)) {
            goto LABEL_152;
          }
          id v88 = v6[5];
          __int128 v20 = __OFSUB__(v9, v88);
          __int128 v35 = v9 - v88;
          if (v20) {
            goto LABEL_339;
          }
          if (__OFADD__(v35, 1LL)) {
            goto LABEL_340;
          }
          if (v35 + 1 <= 0)
          {
            uint64_t v33 = 0LL;
          }

          else
          {
            if ((_DWORD)v33 == 1)
            {
              uint64_t v9 = v35;
LABEL_152:
              if (v9) {
                goto LABEL_336;
              }
              goto LABEL_153;
            }

            id v89 = v6 + 8;
            id v90 = 1LL;
            while (1)
            {
              id v91 = *v89;
              v89 += 3;
              uint64_t v9 = v35 - v91;
              if (__OFSUB__(v35, v91)) {
                goto LABEL_332;
              }
              if (__OFADD__(v9, 1LL)) {
                goto LABEL_333;
              }
              if (v9 + 1 < 1) {
                break;
              }
              ++v90;
              __int128 v35 = v9;
              if (v33 == v90) {
                goto LABEL_152;
              }
            }

            uint64_t v33 = v90;
            uint64_t v9 = v35;
          }

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v7 = v4;
  uint64_t v132 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v132 - 8);
  MEMORY[0x1895F8858](v132);
  __int128 v128 = (char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v11);
  __int128 v131 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a3(0LL);
  uint64_t v133 = *(void *)(v13 - 8);
  uint64_t v134 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (Swift::UInt64 *)((char *)&v121 - v14);
  uint64_t v16 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  int v135 = a2;
  uint64_t v17 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v18 = v17;
  if (!*(void *)(v16 + 16)) {
    goto LABEL_164;
  }
  uint64_t v19 = 1LL << *(_BYTE *)(v16 + 32);
  uint64_t v20 = *(void *)(v16 + 64);
  uint64_t v124 = (void *)(v16 + 64);
  if (v19 < 64) {
    uint64_t v21 = ~(-1LL << v19);
  }
  else {
    uint64_t v21 = -1LL;
  }
  unint64_t v22 = v21 & v20;
  uint64_t v122 = v7;
  int64_t v123 = (unint64_t)(v19 + 63) >> 6;
  __int128 v130 = (char *)(v15 + 2);
  uint64_t v23 = v17 + 64;
  swift_retain();
  int64_t v24 = 0LL;
  uint64_t v126 = a3;
  uint64_t v127 = v16;
  uint64_t v125 = v18;
  uint64_t v129 = v9;
  __int128 v140 = v15;
  while (1)
  {
    if (v22)
    {
      uint64_t v138 = (v22 - 1) & v22;
      unint64_t v27 = __clz(__rbit64(v22)) | (v24 << 6);
    }

    else
    {
      int64_t v28 = v24 + 1;
      if (__OFADD__(v24, 1LL)) {
        goto LABEL_169;
      }
      if (v28 >= v123) {
        goto LABEL_159;
      }
      unint64_t v29 = v124[v28];
      ++v24;
      if (!v29)
      {
        int64_t v24 = v28 + 1;
        if (v28 + 1 >= v123) {
          goto LABEL_159;
        }
        unint64_t v29 = v124[v24];
        if (!v29)
        {
          int64_t v30 = v28 + 2;
          if (v30 >= v123) {
            goto LABEL_159;
          }
          unint64_t v29 = v124[v30];
          if (!v29)
          {
            while (1)
            {
              int64_t v24 = v30 + 1;
              if (__OFADD__(v30, 1LL)) {
                goto LABEL_170;
              }
              if (v24 >= v123) {
                break;
              }
              unint64_t v29 = v124[v24];
              ++v30;
              if (v29) {
                goto LABEL_21;
              }
            }

LABEL_134:
            swift_release();
            uint64_t v105 = v107;
            if ((v112 & 1) != 0)
            {
              uint64_t v106 = 1LL << *(_BYTE *)(v4 + 32);
              if (v106 >= 64) {
                bzero(v110, ((unint64_t)(v106 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *Swift::UInt8 v110 = -1LL << v106;
              }
              *(void *)(v4 + 16) = 0LL;
            }

            swift_release();
LABEL_141:
            *uint64_t v105 = v6;
            return;
          }

          uint64_t v11 = v22;
        }
      }

            swift_release();
            *uint64_t v3 = v7;
            return;
          }

          uint64_t v12 = v26;
        }
      }

    v31(v159, v173, v20);
    uint64_t v175 = 0LL;
    v176 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(36LL);
    v154._object = (void *)0x80000001839CC100LL;
    v154._countAndFlagsBits = 0xD000000000000022LL;
    String.append(_:)(v154);
    _print_unlocked<A, B>(_:_:)();
    goto LABEL_136;
  }

  uint64_t v124 = v84;
  uint64_t v125 = static Duration.zero.getter();
  if ((v170 & 1) != 0) {
LABEL_53:
  }
    uint64_t v125 = MEMORY[0x186E1D11C](v125);
LABEL_58:
  uint64_t v122 = v125;
  int64_t v123 = v126;
LABEL_59:
  __int128 v128 = v167;
LABEL_60:
  uint64_t v129 = MEMORY[0x186E1D110](v168, v128, v122, v123);
  static Duration.zero.getter();
  __int128 v130 = static Duration.< infix(_:_:)();
  __int128 v131 = *(int *)(v115 + 48);
  uint64_t v132 = v171;
  v31(v171, v173, v20);
  v132[v131] = (v130 & 1) == 0;
  uint64_t v133 = v119(v132, v20);
  if (v133 == v124)
  {
    static Duration.zero.getter();
    __int128 v140 = static Duration.< infix(_:_:)();
    goto LABEL_75;
  }

  if (v133 == (_DWORD)v163)
  {
LABEL_89:
    (*(void (**)(char *, uint64_t))(v172 + 8))(v171, v20);
LABEL_90:
    static Duration.== infix(_:_:)();
    return v129;
  }

  if (v133 == *MEMORY[0x189619F88]) {
    goto LABEL_64;
  }
  if (v133 == *MEMORY[0x189619F90])
  {
LABEL_88:
    LODWORD(v162) = v170;
    goto LABEL_89;
  }

  if (v133 == *MEMORY[0x189619F60])
  {
    static Duration.zero.getter();
    __int128 v140 = static Duration.< infix(_:_:)() ^ v170;
LABEL_75:
    (*(void (**)(char *, uint64_t))(v172 + 8))(v171, v20);
    if ((v140 & 1) != 0) {
      return v129;
    }
    goto LABEL_90;
  }

  if (v133 == *MEMORY[0x189619F68])
  {
    if ((v130 & 1) == 0)
    {
LABEL_64:
      (*(void (**)(char *, uint64_t))(v172 + 8))(v171, v20);
      if ((v170 & 1) == 0) {
        return v129;
      }
      goto LABEL_90;
    }

    goto LABEL_88;
  }

  v31(v160, v173, v20);
  uint64_t v175 = 0LL;
  v176 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(36LL);
  v155._object = (void *)0x80000001839CC100LL;
  v155._countAndFlagsBits = 0xD000000000000022LL;
  String.append(_:)(v155);
  _print_unlocked<A, B>(_:_:)();
LABEL_136:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  __int128 v174 = HIBYTE(v132) & 0xF;
  if ((v132 & 0x2000000000000000LL) == 0) {
    __int128 v174 = v130 & 0xFFFFFFFFFFFFLL;
  }
  if (!v174)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v175 = v117;
    swift_retain_n();
    swift_retain_n();
    uint64_t v54 = v175;
    if (_foundation_swift_url_feature_enabled())
    {
      v217._countAndFlagsBits = (uint64_t)v54;
      v217._object = v215;
      v218 = v9;
      v176 = v54;
      swift_retain();
      swift_retain();
      v177 = URL.path(percentEncoded:)(1);
      v217 = v177;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v177._countAndFlagsBits, (unint64_t)v177._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }

      v216._countAndFlagsBits = Set.init(minimumCapacity:)();
      v178 = specialized Set._Variant.insert(_:)(&v219, 0x2FuLL);
      v179 = v216._countAndFlagsBits;
      v180 = v217._countAndFlagsBits;
      v181 = v217._object;
      v182 = ((unint64_t)v217._object >> 56) & 0xF;
      if (v182)
      {
        v216 = v217;
        MEMORY[0x1895F8858](v178);
        v207 = &v216;
        v208 = v179;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v206,  v180,  (unint64_t)v181);
        if (v183 == 1)
        {
          v184 = (unint64_t)v216._object;
          v185 = v216._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v185, v184, v179);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      v186 = objc_msgSend(v54, sel__parameterString);
      if (v186)
      {
        v187 = v186;
        v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v186);
        v190 = v189;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (v191 = objc_msgSend(v54, sel_path)) != 0)
        {
          v192 = v191;
          v193 = static String._unconditionallyBridgeFromObjectiveC(_:)(v191);
          v195 = v194;

          v217._countAndFlagsBits = (uint64_t)v193;
          v217._object = v195;
          swift_bridgeObjectRetain();
          v196._countAndFlagsBits = 59LL;
          v196._object = (void *)0xE100000000000000LL;
          String.append(_:)(v196);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v197._countAndFlagsBits = (uint64_t)v188;
          v197._object = v190;
          String.append(_:)(v197);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v217._countAndFlagsBits = 59LL;
          v217._object = (void *)0xE100000000000000LL;
          v201._countAndFlagsBits = (uint64_t)v188;
          v201._object = v190;
          String.append(_:)(v201);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
        goto LABEL_170;
      }

      v200 = objc_msgSend(v54, sel_path);
      if (!v200)
      {
        swift_release();
        swift_release();

        goto LABEL_170;
      }

      v176 = v200;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v200);
      swift_release();
      swift_release();
    }

LABEL_170:
    v204 = (void *)objc_opt_self();
    v205 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v114 = objc_msgSend( v204,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  4,  v205,  v54,  0,  0,  0,  0);
    goto LABEL_89;
  }

  specialized _FileManagerImpl.moveItem(atPath:toPath:options:)(v102, v104, v130, v132);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  _StringGuts.grow(_:)(57LL);
  v102._object = (void *)0x80000001839CF3A0LL;
  v102._countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v102);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  swift_getAtKeyPath();
  swift_release();
  v103._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v103);
  swift_bridgeObjectRelease();
  v104._countAndFlagsBits = 46LL;
  v104._object = (void *)0xE100000000000000LL;
  String.append(_:)(v104);
  v105._countAndFlagsBits = v11;
  v105._object = v10;
  String.append(_:)(v105);
  v106._countAndFlagsBits = 92LL;
  v106._object = (void *)0xE100000000000000LL;
  String.append(_:)(v106);
  swift_bridgeObjectRelease();
  v107._countAndFlagsBits = 0x2720646E612027LL;
  v107._object = (void *)0xE700000000000000LL;
  String.append(_:)(v107);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  swift_getAtKeyPath();
  swift_release();
  v108._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v108);
  swift_bridgeObjectRelease();
  v109._countAndFlagsBits = 46LL;
  v109._object = (void *)0xE100000000000000LL;
  String.append(_:)(v109);
  v110._countAndFlagsBits = v12;
  v110._object = v140;
  String.append(_:)(v110);
  v111._countAndFlagsBits = 92LL;
  v111._object = (void *)0xE100000000000000LL;
  String.append(_:)(v111);
  swift_bridgeObjectRelease();
  v112._countAndFlagsBits = 0xD000000000000017LL;
  v112._object = (void *)0x80000001839CF3C0LL;
  String.append(_:)(v112);
  String.append(_:)(v151);
  v113._countAndFlagsBits = 39LL;
  v113._object = (void *)0xE100000000000000LL;
  String.append(_:)(v113);
LABEL_138:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_139:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

                                v1 = v67;
LABEL_135:
                                MEMORY[0x186E20E60](v94, -1LL, -1LL);
                                return v1;
                              }

                              unint64_t v78 = v68 + 5;
                            }
                          }
                        }
                      }

  if (4 * v5 < v8)
  {
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    _StringObject.sharedUTF8.getter();
  }

  return String.UnicodeScalarView.subscript.getter();
}

        swift_bridgeObjectRetain();
        uint64_t v120 = specialized BidirectionalCollection.last.getter(v205, v206);
        uint64_t v122 = v121;
        swift_bridgeObjectRelease();
        if (!v122) {
          goto LABEL_145;
        }
        if (v120 == 47 && v122 == 0xE100000000000000LL)
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          int64_t v123 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v123 & 1) == 0) {
            goto LABEL_145;
          }
        }

        if (String.count.getter() <= 1)
        {
LABEL_145:
          swift_bridgeObjectRelease();
          goto LABEL_146;
        }

        uint64_t v124 = (void *)v227;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v124 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v124[2] + 1LL,  1,  v124);
        }
        uint64_t v126 = v124[2];
        uint64_t v125 = v124[3];
        if (v126 >= v125 >> 1) {
          uint64_t v124 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v125 > 1),  v126 + 1,  1,  v124);
        }
        v124[2] = v126 + 1;
        uint64_t v127 = &v124[2 * v126];
        v127[4] = 47LL;
        v127[5] = 0xE100000000000000LL;
        swift_bridgeObjectRelease();
        v227 = (unint64_t)v124;
LABEL_146:
        v220 = v227;
        v227 = 47LL;
        v228 = 0xE100000000000000LL;
        v225 = v222;
        v226 = v46;
        if ((v46 & 0x1000000000000000LL) == 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v54 = String.subscript.getter();
          uint64_t v129 = v128;
          uint64_t v57 = 47LL;
          v216 = specialized static StringProtocol.== infix<A>(_:_:)( 47LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL);
          __int128 v130 = Substring.init<A>(_:)();
          v214 = v132;
          v218 = v133;
          uint64_t v134 = v129 >> 14;
          int v135 = v54 >> 14;
          if (v54 >> 14 < v129 >> 14)
          {
            v206 = v131;
            v208 = v130;
            v210 = v130 ^ v131;
            uint64_t v6 = v54;
            v205 = v54 >> 14;
            uint64_t v136 = v54 >> 14;
            v223 = (void *)MEMORY[0x18961AFE8];
            v212 = v134;
            while (1)
            {
              if (v134 < v136) {
                goto LABEL_235;
              }
              swift_bridgeObjectRetain();
              a3 = v54;
              uint64_t v137 = Substring.subscript.getter();
              int64_t v139 = v138;
              __int128 v141 = v140;
              uint64_t v57 = v142;
              swift_bridgeObjectRelease();
              if ((v137 ^ v139) < 0x4000 || v210 < 0x4000) {
                break;
              }
              if ((v216 & 1) != 0)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v54 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v208,  v206,  v214,  v218,  0,  0,  0,  0,  0,  v137,  v139,  v141,  v57);
                __int128 v144 = v143;
                uint64_t v146 = v145;
                swift_bridgeObjectRelease_n();
                uint64_t v57 = v218;
              }

              else
              {
                uint64_t v54 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v208,  v206,  v214,  v218,  0,  0,  0,  0,  0,  v137,  v139,  v141,  v57);
                __int128 v144 = v147;
                uint64_t v146 = v148;
              }

              swift_bridgeObjectRelease();
              if ((v146 & 1) != 0 || (int v135 = v144 >> 14, v54 >> 14 == v144 >> 14))
              {
                int v135 = v136;
                uint64_t v54 = a3;
LABEL_179:
                uint64_t v134 = v212;
                goto LABEL_180;
              }

              if (v54 >> 14 < v136) {
                goto LABEL_237;
              }
              uint64_t v149 = Substring.subscript.getter();
              uint64_t v57 = v150;
              uint64_t v151 = MEMORY[0x186E1B610](v149);
              __int128 v153 = v152;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                v223 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v223[2] + 1LL,  1,  v223);
              }
              v155 = v223[2];
              __int128 v154 = v223[3];
              if (v155 >= v154 >> 1) {
                v223 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v154 > 1),  v155 + 1,  1,  v223);
              }
              v223[2] = v155 + 1;
              v156 = &v223[2 * v155];
              v156[4] = v151;
              v156[5] = v153;
              swift_bridgeObjectRelease();
              uint64_t v6 = v144;
              uint64_t v136 = v144 >> 14;
              uint64_t v134 = v212;
              uint64_t v54 = a3;
              if (v135 >= v212) {
                goto LABEL_180;
              }
            }

            char v161 = v223;
            if ((v137 ^ v139) >= 0x4000) {
              char v161 = (void *)MEMORY[0x18961AFE8];
            }
            v223 = v161;
            if ((v137 ^ v139) >= 0x4000) {
              int v135 = v205;
            }
            else {
              int v135 = v136;
            }
            uint64_t v54 = a3;
            swift_bridgeObjectRelease();
            goto LABEL_179;
          }

          v223 = (void *)MEMORY[0x18961AFE8];
LABEL_180:
          if (v134 < v135)
          {
            __break(1u);
          }

          else
          {
            char v162 = Substring.subscript.getter();
            uint64_t v57 = MEMORY[0x186E1B610](v162);
            uint64_t v54 = v163;
            a3 = (unint64_t)v223;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
LABEL_182:
              v165 = *(void *)(a3 + 16);
              v164 = *(void *)(a3 + 24);
              if (v165 >= v164 >> 1) {
                a3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v164 > 1),  v165 + 1,  1,  (void *)a3);
              }
              *(void *)(a3 + 16) = v165 + 1;
              __int128 v166 = a3 + 16 * v165;
              *(void *)(v166 + 32) = v57;
              *(void *)(v166 + 40) = v54;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_185;
            }
          }

          a3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a3 + 16) + 1LL,  1,  (void *)a3);
          goto LABEL_182;
        }

        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        uint64_t v54 = MEMORY[0x189617FA8];
        StringProtocol._ephemeralString.getter();
        uint64_t v157 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        StringProtocol._ephemeralString.getter();
        uint64_t v158 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v159 = objc_msgSend(v157, sel_componentsSeparatedByString_, v158);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (!v159)
        {
          a3 = MEMORY[0x18961AFE8];
          goto LABEL_186;
        }

        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        char v160 = swift_dynamicCastClass();
        if (v160)
        {
          a3 = v160;

          goto LABEL_186;
        }

        swift_unknownObjectRelease();
        objc_msgSend(v159, sel_copy);
        uint64_t v54 = _bridgeCocoaArray<A>(_:)();
        swift_unknownObjectRelease();
        a3 = specialized _arrayForceCast<A, B>(_:)(v54);

LABEL_185:
        swift_bridgeObjectRelease();
LABEL_186:
        __int128 v167 = *(void *)(a3 + 16);
        __int128 v168 = v222;
        if (v167)
        {
          __int128 v169 = (uint64_t *)(a3 + 40);
          uint64_t v170 = (void *)MEMORY[0x18961AFE8];
          do
          {
            uint64_t v6 = *(v169 - 1);
            __int128 v173 = *v169;
            __int128 v174 = HIBYTE(*v169) & 0xF;
            if ((*v169 & 0x2000000000000000LL) == 0) {
              __int128 v174 = v6 & 0xFFFFFFFFFFFFLL;
            }
            if (v174)
            {
              swift_bridgeObjectRetain();
              uint64_t v175 = swift_isUniquelyReferenced_nonNull_native();
              v227 = (unint64_t)v170;
              if ((v175 & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v170[2] + 1LL,  1);
                __int128 v168 = v222;
                uint64_t v170 = (void *)v227;
              }

              a3 = v170[2];
              __int128 v171 = v170[3];
              uint64_t v54 = a3 + 1;
              if (a3 >= v171 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v171 > 1,  a3 + 1,  1);
                __int128 v168 = v222;
                uint64_t v170 = (void *)v227;
              }

              v170[2] = v54;
              __int128 v172 = &v170[2 * a3];
              v172[4] = v6;
              v172[5] = v173;
            }

            v169 += 2;
            --v167;
          }

          while (v167);
        }

        else
        {
          uint64_t v170 = (void *)MEMORY[0x18961AFE8];
        }

        swift_bridgeObjectRelease();
        v227 = (unint64_t)v170;
        swift_bridgeObjectRetain();
        v176 = specialized Collection.first.getter(v168, v46);
        v178 = v177;
        swift_bridgeObjectRelease();
        if (v178)
        {
          if (v176 == 47 && v178 == 0xE100000000000000LL)
          {
            swift_bridgeObjectRelease();
          }

          else
          {
            v179 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v179 & 1) == 0) {
              goto LABEL_204;
            }
          }

          specialized Array.replaceSubrange<A>(_:with:)(0LL, 0LL, 47LL, 0xE100000000000000LL);
        }

LABEL_101:
    Hasher._combine(_:)(0);
    if (v74)
    {
LABEL_97:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      int64_t v84 = v74;
      _CFObject.hash(into:)();

      if (v76) {
        goto LABEL_98;
      }
      goto LABEL_103;
    }

      __break(1u);
      goto LABEL_102;
    }

    __break(1u);
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }

  if (!value)
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }

  uint64_t v15 = specialized Data.init(bytes:count:)(value, v14);
  id v95 = v16;
  swift_bridgeObjectRetain();
  uint64_t v17 = swift_isUniquelyReferenced_nonNull_native();
  id v97 = *a6;
  uint64_t v18 = *a6;
  *a6 = 0x8000000000000000LL;
  uint64_t v19 = a7;
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a7, a8);
  unint64_t v22 = *(void *)(v18 + 16);
  uint64_t v23 = (v20 & 1) == 0;
  int64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(a7) = v20;
    if (*(void *)(v18 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, v17);
      unint64_t v25 = v97;
      uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v19, a8);
      if ((a7 & 1) != (v27 & 1)) {
        goto LABEL_105;
      }
      uint64_t v21 = v26;
      if ((a7 & 1) == 0) {
        goto LABEL_60;
      }
LABEL_15:
      Swift::UInt64 v34 = *(void *)(v25 + 56) + 16 * v21;
      outlined consume of Data._Representation(*(void *)v34, *(void *)(v34 + 8));
      *(void *)Swift::UInt64 v34 = v15;
      *(void *)(v34 + 8) = v95;
      goto LABEL_62;
    }

    if ((v17 & 1) != 0)
    {
      unint64_t v25 = v18;
      if ((v20 & 1) != 0) {
        goto LABEL_15;
      }
LABEL_60:
      int64_t v65 = v21;
      unint64_t v66 = v19;
      unint64_t v67 = a8;
      Swift::UInt v68 = v15;
      Swift::UInt v69 = v95;
      goto LABEL_61;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  int v47 = static _DictionaryStorage.copy(original:)();
  unint64_t v25 = v47;
  if (!*(void *)(v18 + 16))
  {
LABEL_59:
    swift_bridgeObjectRelease();
    if ((a7 & 1) != 0) {
      goto LABEL_15;
    }
    goto LABEL_60;
  }

  Swift::UInt v48 = (void *)(v47 + 64);
  Swift::UInt64 v49 = (unint64_t)((1LL << *(_BYTE *)(v25 + 32)) + 63) >> 6;
  id v87 = v18 + 64;
  Swift::UInt v50 = 0LL;
  *(void *)(v25 + 16) = *(void *)(v18 + 16);
  uint64_t v51 = 1LL << *(_BYTE *)(v18 + 32);
  Swift::UInt8 v52 = -1LL;
  if (v51 < 64) {
    Swift::UInt8 v52 = ~(-1LL << v51);
  }
  uint64_t v53 = v52 & *(void *)(v18 + 64);
  __src = (void *)((unint64_t)(v51 + 63) >> 6);
  while (1)
  {
    if (v53)
    {
      uint64_t v54 = __clz(__rbit64(v53));
      v53 &= v53 - 1;
      id v93 = v50;
      uint64_t v55 = v54 | (v50 << 6);
      goto LABEL_35;
    }

    uint64_t v61 = v50 + 1;
    if (__OFADD__(v50, 1LL))
    {
      __break(1u);
      goto LABEL_100;
    }

    uint64_t v62 = *(void *)(v87 + 8 * v61);
    uint64_t v63 = v50 + 1;
    if (!v62)
    {
      uint64_t v63 = v50 + 2;
      uint64_t v62 = *(void *)(v87 + 8 * v63);
      if (!v62)
      {
        uint64_t v63 = v50 + 3;
        uint64_t v62 = *(void *)(v87 + 8 * v63);
        if (!v62)
        {
          uint64_t v63 = v50 + 4;
          uint64_t v62 = *(void *)(v87 + 8 * v63);
          if (!v62)
          {
            uint64_t v63 = v50 + 5;
            uint64_t v62 = *(void *)(v87 + 8 * v63);
            if (!v62)
            {
              uint64_t v63 = v50 + 6;
              uint64_t v62 = *(void *)(v87 + 8 * v63);
              if (!v62)
              {
                uint64_t v63 = v50 + 7;
                uint64_t v62 = *(void *)(v87 + 8 * v63);
                if (!v62) {
                  break;
                }
              }
            }
          }
        }
      }
    }

  *(void *)a6 = v83;
  *(void *)(a6 + 8) = v82;
  *(void *)(a6 + 16) = v81;
  *(void *)(a6 + 24) = v80;
  *(_BYTE *)(a6 + 32) = v15;
}

  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

        outlined destroy of Any?((uint64_t)v150, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of Any?((uint64_t)v151, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v152);
        outlined destroy of Any?( (uint64_t)v165,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v166,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v157);
        uint64_t result = outlined destroy of Any?( (uint64_t)&v158,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if ((v72 & 1) == 0) {
          goto LABEL_211;
        }
      }

      else
      {
        outlined destroy of Any?( (uint64_t)v165,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v166,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
        if (v164) {
          goto LABEL_210;
        }
        uint64_t result = outlined destroy of Any?( (uint64_t)&v158,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      }

      uint64_t v55 = v136;
      if (v54) {
        goto LABEL_103;
      }
      goto LABEL_107;
    }

    if ((void)v174 == 1LL)
    {
      outlined consume of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v173 + 1), 1LL);
      outlined consume of AttributedString.AttributeRunBoundaries?(0LL, 0LL);
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
    uint64_t result = swift_bridgeObjectRelease();
    if (v54) {
      goto LABEL_103;
    }
LABEL_107:
    unint64_t v78 = v140 + 1;
    if (__OFADD__(v140, 1LL)) {
      goto LABEL_231;
    }
    if (v78 < v138)
    {
      int64_t v79 = v134[v78];
      if (v79) {
        goto LABEL_110;
      }
      unint64_t v80 = v140 + 2;
      ++v140;
      if (v78 + 1 < v138)
      {
        int64_t v79 = v134[v80];
        if (v79) {
          goto LABEL_113;
        }
        __int128 v140 = v78 + 1;
        if (v78 + 2 < v138)
        {
          int64_t v79 = v134[v78 + 2];
          if (v79)
          {
            v78 += 2LL;
LABEL_110:
            uint64_t v54 = (v79 - 1) & v79;
            int64_t v74 = __clz(__rbit64(v79)) + (v78 << 6);
            __int128 v140 = v78;
            goto LABEL_104;
          }

          unint64_t v80 = v78 + 3;
          __int128 v140 = v78 + 2;
          if (v78 + 3 < v138)
          {
            int64_t v79 = v134[v80];
            if (v79)
            {
LABEL_113:
              unint64_t v78 = v80;
              goto LABEL_110;
            }

            while (1)
            {
              unint64_t v78 = v80 + 1;
              if (__OFADD__(v80, 1LL)) {
                goto LABEL_245;
              }
              if (v78 >= v138) {
                break;
              }
              int64_t v79 = v134[v78];
              ++v80;
              if (v79) {
                goto LABEL_110;
              }
            }

            __int128 v140 = v126;
          }
        }
      }
    }

    uint64_t v54 = 0LL;
    char v163 = 0LL;
    char v161 = 0u;
    char v162 = 0u;
    uint64_t v159 = 0u;
    char v160 = 0u;
    uint64_t v158 = 0u;
  }

  swift_release();
  Swift::UInt v82 = *(void *)(v38 + 64);
  Swift::UInt v83 = 1LL << *(_BYTE *)(v38 + 32);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v84 = 0LL;
  unint64_t v85 = -1LL;
  if (v83 < 64) {
    unint64_t v85 = ~(-1LL << v83);
  }
  int64_t v86 = v85 & v82;
  id v87 = v133;
  int64_t v139 = (unint64_t)&v162 + 8;
  __int128 v140 = (uint64_t)&v159;
  uint64_t v137 = (__int128 *)v148;
  uint64_t v138 = (unint64_t)(v83 + 63) >> 6;
  __int128 v128 = v138 - 5;
  uint64_t v136 = (__int128 *)(v38 + 64);
  uint64_t v125 = v138 - 1;
  uint64_t v126 = v38 + 104;
  if (!v86) {
    goto LABEL_133;
  }
LABEL_129:
  while (2)
  {
    id v88 = __clz(__rbit64(v86));
    v86 &= v86 - 1;
    id v89 = v88 | (v84 << 6);
LABEL_130:
    id v90 = *(void *)(v38 + 56);
    id v91 = (void *)(*(void *)(v38 + 48) + 16 * v89);
    id v92 = v91[1];
    *(void *)&uint64_t v158 = *v91;
    *((void *)&v158 + 1) = v92;
    outlined init with copy of AttributedString._AttributeValue(v90 + 72 * v89, v140);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v158, (uint64_t)&v176);
      id v96 = v177;
      if (!v177) {
        goto LABEL_206;
      }
      id v97 = v176;
      __int128 v173 = v180;
      __int128 v174 = v181;
      uint64_t v175 = v182;
      __int128 v171 = v178;
      __int128 v172 = v179;
      id v98 = *((void *)&v180 + 1);
      if (!(void)v181) {
        break;
      }
      if ((void)v174 == 1LL)
      {
        outlined consume of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v173 + 1), 1LL);
        outlined consume of AttributedString.AttributeRunBoundaries?(0LL, 0LL);
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
      uint64_t result = swift_bridgeObjectRelease();
      if (v86) {
        goto LABEL_129;
      }
LABEL_133:
      id v93 = v84 + 1;
      if (__OFADD__(v84, 1LL)) {
        goto LABEL_232;
      }
      if (v93 >= v138)
      {
        id v95 = v84;
      }

      else
      {
        id v94 = *((void *)v136 + v93);
        if (v94) {
          goto LABEL_136;
        }
        id v95 = v84 + 1;
        if (v84 + 2 < v138)
        {
          id v94 = *((void *)v136 + v84 + 2);
          if (v94)
          {
            id v93 = v84 + 2;
LABEL_136:
            int64_t v86 = (v94 - 1) & v94;
            id v89 = __clz(__rbit64(v94)) + (v93 << 6);
            int64_t v84 = v93;
            goto LABEL_130;
          }

          id v95 = v84 + 2;
          if (v84 + 3 < v138)
          {
            id v94 = *((void *)v136 + v84 + 3);
            if (v94)
            {
              id v93 = v84 + 3;
              goto LABEL_136;
            }

            id v93 = v84 + 4;
            id v95 = v84 + 3;
            if (v84 + 4 < v138)
            {
              id v94 = *((void *)v136 + v93);
              if (v94) {
                goto LABEL_136;
              }
              while (v128 != v84)
              {
                id v94 = *(void *)(v126 + 8 * v84++);
                if (v94)
                {
                  id v93 = v84 + 4;
                  goto LABEL_136;
                }
              }

              id v95 = v125;
            }
          }
        }
      }

      int64_t v86 = 0LL;
      char v163 = 0LL;
      char v161 = 0u;
      char v162 = 0u;
      uint64_t v159 = 0u;
      char v160 = 0u;
      int64_t v84 = v95;
      uint64_t v158 = 0u;
    }

    swift_bridgeObjectRelease_n();
    outlined consume of AttributedString.AttributeRunBoundaries?(v98, 0LL);
    if (*(void *)(v87 + 16))
    {
      id v99 = specialized __RawDictionaryStorage.find<A>(_:)(v97, v96);
      if ((v100 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v87 + 56) + 72 * v99, (uint64_t)&v166);
      }

      else
      {
        uint64_t v170 = 0LL;
        __int128 v168 = 0u;
        __int128 v169 = 0u;
        __int128 v166 = 0u;
        __int128 v167 = 0u;
      }
    }

    else
    {
      uint64_t v170 = 0LL;
      __int128 v168 = 0u;
      __int128 v169 = 0u;
      __int128 v166 = 0u;
      __int128 v167 = 0u;
    }

    swift_bridgeObjectRelease();
    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v171, (uint64_t)v165);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v166,  (uint64_t)&v158,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v165,  v139,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!*((void *)&v159 + 1))
    {
      outlined destroy of Any?( (uint64_t)v165,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v166,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
      if (v164) {
        goto LABEL_219;
      }
      uint64_t result = outlined destroy of Any?( (uint64_t)&v158,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_167;
    }

    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v158,  (uint64_t)v157,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (v164)
    {
      id v101 = *(_OWORD *)(v139 + 48);
      __int128 v154 = *(_OWORD *)(v139 + 32);
      v155 = v101;
      v156 = *(void *)(v139 + 64);
      id v102 = *(_OWORD *)(v139 + 16);
      __int128 v152 = *(_OWORD *)v139;
      __int128 v153 = v102;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v157,  (uint64_t)v151);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v152,  (uint64_t)v150);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v151,  (uint64_t)&v146,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v150,  (uint64_t)v137,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v147)
      {
        if (v149)
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v146, (uint64_t)v143);
          outlined init with take of any PredicateExpression<Self.Output == B1>(v137, (uint64_t)v142);
          id v103 = v144;
          __int128 v131 = v145;
          uint64_t v129 = __swift_project_boxed_opaque_existential_1(v143, v144);
          uint64_t v134 = &v124;
          id v104 = *(void *)(v103 - 8);
          MEMORY[0x1895F8858](v129);
          __int128 v130 = (char *)&v124 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v142,  (uint64_t)v141);
          uint64_t v106 = type metadata accessor for Optional();
          uint64_t v132 = &v124;
          Swift::UInt v107 = *(void *)(v106 - 8);
          MEMORY[0x1895F8858](v106);
          Swift::UInt8 v109 = (char *)&v124 - v108;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          Swift::UInt8 v110 = swift_dynamicCast();
          Swift::UInt8 v111 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v104 + 56);
          if (v110)
          {
            v111(v109, 0LL, 1LL, v103);
            Swift::Int v112 = v130;
            (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v130, v109, v103);
            uint64_t v113 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*(void (**)(char *, uint64_t))(v104 + 8))(v112, v103);
          }

          else
          {
            v111(v109, 1LL, 1LL, v103);
            (*(void (**)(char *, uint64_t))(v107 + 8))(v109, v106);
            uint64_t v113 = 0;
          }

          id v87 = v133;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v143);
          goto LABEL_166;
        }

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
LABEL_162:
        uint64_t v113 = 0;
      }

      else
      {
        if (v149)
        {
          outlined destroy of Any?( (uint64_t)v137,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_162;
        }

        uint64_t v113 = 1;
      }

    __break(1u);
    goto LABEL_102;
  }

  uint64_t v16 = *(void *)(v49 + 8 * v17);
  if (v16)
  {
    uint64_t v11 = v17;
LABEL_24:
    uint64_t v9 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= v50) {
      goto LABEL_50;
    }
    uint64_t v16 = *(void *)(v49 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_24;
    }
  }

    swift_release();
    goto LABEL_102;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v13 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v12 = v13;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_101;
  }
  id v90 = v8;
  uint64_t v14 = 1LL << *(_BYTE *)(v9 + 32);
  id v92 = a2;
  id v94 = (void *)(v9 + 56);
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  else {
    uint64_t v15 = -1LL;
  }
  uint64_t v16 = v15 & *(void *)(v9 + 56);
  uint64_t v17 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v13 + 56;
  uint64_t result = swift_retain();
  uint64_t v19 = 0LL;
  while (1)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      uint64_t v23 = v22 | (v19 << 6);
      goto LABEL_28;
    }

    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      goto LABEL_120;
    }
    if (v24 >= v17)
    {
LABEL_64:
      swift_release();
      uint64_t v54 = 1LL << *(_BYTE *)(v9 + 32);
      uint64_t v8 = v90;
      a2 = v92;
      if (v54 > 63) {
        bzero(v94, ((unint64_t)(v54 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
      }
      else {
        *id v94 = -1LL << v54;
      }
      *(void *)(v9 + 16) = 0LL;
      goto LABEL_101;
    }

    unint64_t v25 = v94[v24];
    ++v19;
    if (!v25)
    {
      uint64_t v19 = v24 + 1;
      if (v24 + 1 >= v17) {
        goto LABEL_64;
      }
      unint64_t v25 = v94[v19];
      if (!v25)
      {
        uint64_t v19 = v24 + 2;
        if (v24 + 2 >= v17) {
          goto LABEL_64;
        }
        unint64_t v25 = v94[v19];
        if (!v25) {
          break;
        }
      }
    }

                if (v7 != 63)
                {
                  int v35 = ~v28;
                  uint64_t v3 = (unint64_t)v64;
                  if (v15) {
                    Swift::UInt v36 = v64 == 0LL;
                  }
                  else {
                    Swift::UInt v36 = 1;
                  }
                  Swift::UInt v37 = !v36;
                  unint64_t v78 = v37;
                  int v38 = v14 != 0LL;
                  unsigned int v39 = ptr;
                  if (v63) {
                    uint64_t v40 = (unint64_t *)v63;
                  }
                  else {
                    uint64_t v40 = (unint64_t *)ptr;
                  }
                  if (v63) {
                    int v41 = v38;
                  }
                  else {
                    int v41 = 0;
                  }
                  uint64_t v43 = v61;
                  Swift::UInt v42 = v62;
                  if (v66) {
                    uint64_t v44 = v62 == 0LL;
                  }
                  else {
                    uint64_t v44 = 1;
                  }
                  Swift::UInt8 v45 = !v44;
                  uint64_t v75 = v45;
                  uint64_t v76 = v41;
                  if (v12) {
                    uint64_t v46 = v61 == 0LL;
                  }
                  else {
                    uint64_t v46 = 1;
                  }
                  unint64_t v4 = !v46;
                  int v47 = v59;
                  Swift::UInt v48 = v60;
                  if (v69) {
                    Swift::UInt64 v49 = v60 == 0LL;
                  }
                  else {
                    Swift::UInt64 v49 = 1;
                  }
                  Swift::UInt v50 = !v49;
                  Swift::UInt v73 = v50;
                  int64_t v74 = v4;
                  if (v71) {
                    uint64_t v51 = v59 == 0LL;
                  }
                  else {
                    uint64_t v51 = 1;
                  }
                  Swift::UInt8 v52 = !v51;
                  int64_t v72 = v52;
                  if (v8 <= 1) {
                    uint64_t v53 = 1LL;
                  }
                  else {
                    uint64_t v53 = v8;
                  }
                  uint64_t v54 = v64;
                  do
                  {
                    uint64_t v56 = *v40++;
                    uint64_t v55 = v56;
                    if (v56 != v28 && v55 != v35)
                    {
                      uint64_t v2 = *(_DWORD *)(a1 + 16) & 3;
                      switch(*(_DWORD *)(a1 + 16) & 3)
                      {
                        case 3:
                          ___CFBasicHashFindBucket3(a1, v55, 1, v82);
                          break;
                        case 2:
                          ___CFBasicHashFindBucket2(a1, v55, 1, v82);
                          break;
                        case 1:
                          ___CFBasicHashFindBucket1(a1, v55, 1, v82);
                          break;
                        default:
                          goto LABEL_4;
                      }

                      a1 = (uint64_t)cf;
                      int v35 = ~v28;
                      if (v81)
                      {
                        uint64_t v3 = v82[0];
                        unint64_t v4 = (unint64_t)v81;
                        v81[v82[0]] = *v39;
                      }

                      if (v78)
                      {
                        uint64_t v3 = v82[0];
                        unint64_t v4 = v68;
                        *(void *)(v68 + 8 * v82[0]) = *v54;
                      }

                      if (v76)
                      {
                        uint64_t v3 = v67;
                        *(void *)(v67 + 8 * v82[0]) = v55;
                      }

                      if (v75)
                      {
                        uint64_t v3 = v82[0];
                        unint64_t v4 = v66;
                        *(void *)(v66 + 8 * v82[0]) = *v42;
                      }

                      if (v74)
                      {
                        uint64_t v3 = v82[0];
                        unint64_t v4 = v70;
                        *(void *)(v70 + 8 * v82[0]) = *v43;
                      }

                      if (v73)
                      {
                        uint64_t v3 = v82[0];
                        unint64_t v4 = v69;
                        *(void *)(v69 + 8 * v82[0]) = *v48;
                      }

                      if (v72)
                      {
                        uint64_t v3 = v82[0];
                        unint64_t v4 = v71;
                        *(void *)(v71 + 8 * v82[0]) = *v47;
                      }
                    }

                    ++v47;
                    ++v48;
                    ++v43;
                    ++v42;
                    ++v54;
                    ++v39;
                    --v53;
                  }

                  while (v53);
                }

                goto LABEL_167;
              }

              uint64_t v2 = (unsigned __int16)v2 >> 13;
              if (v2)
              {
                Swift::UInt64 v34 = a1 + 8 * v2;
                Swift::UInt v59 = *(void **)(v34 + 40);
                *(void *)(v34 + 40) = v71;
                if (!v7) {
                  goto LABEL_167;
                }
                goto LABEL_101;
              }
            }
          }
        }
      }
    }

    int64_t v79 = __CFBasicHashTableSizes[v6 + v2];
    uint64_t v16 = 8 * v10;
    uint64_t v17 = CFGetAllocator((CFTypeRef)a1);
    a1 = MEMORY[0x186E1D20C](v17, v16, 0LL);
    unint64_t v81 = (void *)a1;
    if (a1)
    {
      uint64_t v18 = (_BYTE *)MEMORY[0x1896049A0];
      if (*MEMORY[0x1896049A0]) {
        __CFSetLastAllocationEventName();
      }
      a1 = (uint64_t)cf;
      if ((cf[16] & 4) != 0)
      {
        uint64_t v19 = CFGetAllocator(cf);
        a1 = MEMORY[0x186E1D20C](v19, v16, 0LL);
        if (a1)
        {
          uint64_t v15 = (void *)a1;
          if (*v18) {
            __CFSetLastAllocationEventName();
          }
          a1 = (uint64_t)cf;
          goto LABEL_20;
        }
      }

      else
      {
        uint64_t v15 = 0LL;
LABEL_20:
        if ((*(_BYTE *)(a1 + 16) & 0x18) != 0)
        {
          uint64_t v20 = CFGetAllocator((CFTypeRef)a1);
          a1 = MEMORY[0x186E1D20C](v20, v16, 0LL);
          if (a1)
          {
            uint64_t v14 = (void *)a1;
            if (*v18) {
              __CFSetLastAllocationEventName();
            }
            a1 = (uint64_t)cf;
            goto LABEL_26;
          }
        }

        else
        {
          uint64_t v14 = 0LL;
LABEL_26:
          if ((*(_BYTE *)(a1 + 16) & 0x60) != 0)
          {
            uint64_t v21 = CFGetAllocator((CFTypeRef)a1);
            a1 = MEMORY[0x186E1D20C](v21, v16, 0LL);
            if (a1)
            {
              uint64_t v13 = (void *)a1;
              if (*v18) {
                __CFSetLastAllocationEventName();
              }
              a1 = (uint64_t)cf;
              goto LABEL_32;
            }
          }

          else
          {
            uint64_t v13 = 0LL;
LABEL_32:
            if ((*(_WORD *)(a1 + 16) & 0x380) != 0)
            {
              unint64_t v22 = CFGetAllocator((CFTypeRef)a1);
              if (__CFAllocatorRespectsHintZeroWhenAllocating())
              {
                a1 = MEMORY[0x186E1D20C](v22, v16, 1LL);
                uint64_t v12 = a1;
                if (a1) {
                  goto LABEL_39;
                }
              }

              else
              {
                a1 = MEMORY[0x186E1D20C](v22, v16, 0LL);
                if (a1)
                {
                  uint64_t v12 = a1;
                  bzero((void *)a1, v16);
LABEL_39:
                  if (*v18) {
                    __CFSetLastAllocationEventName();
                  }
                  a1 = (uint64_t)cf;
                  goto LABEL_42;
                }
              }
            }

            else
            {
              uint64_t v12 = 0LL;
LABEL_42:
              uint64_t v77 = v8;
              uint64_t v23 = v18;
              if ((*(_BYTE *)(a1 + 17) & 0x1C) == 0)
              {
                uint64_t v5 = 0LL;
                goto LABEL_52;
              }

              int64_t v24 = CFGetAllocator((CFTypeRef)a1);
              if (__CFAllocatorRespectsHintZeroWhenAllocating())
              {
                a1 = MEMORY[0x186E1D20C](v24, v16, 1LL);
                uint64_t v5 = a1;
                if (a1)
                {
LABEL_49:
                  if (*v23) {
                    __CFSetLastAllocationEventName();
                  }
                  a1 = (uint64_t)cf;
LABEL_52:
                  if ((*(_BYTE *)(a1 + 17) & 0xE0) == 0)
                  {
                    uint64_t v11 = 0LL;
                    goto LABEL_62;
                  }

                  unint64_t v25 = CFGetAllocator((CFTypeRef)a1);
                  if (__CFAllocatorRespectsHintZeroWhenAllocating())
                  {
                    a1 = MEMORY[0x186E1D20C](v25, v16, 1LL);
                    uint64_t v11 = a1;
                    if (a1) {
                      goto LABEL_59;
                    }
                  }

                  else
                  {
                    a1 = MEMORY[0x186E1D20C](v25, v16, 0LL);
                    if (a1)
                    {
                      uint64_t v11 = a1;
                      bzero((void *)a1, v16);
LABEL_59:
                      if (*v23) {
                        __CFSetLastAllocationEventName();
                      }
                      a1 = (uint64_t)cf;
LABEL_62:
                      uint64_t v8 = v77;
                      uint64_t v10 = v79;
                      goto LABEL_63;
                    }
                  }
                }
              }

              else
              {
                a1 = MEMORY[0x186E1D20C](v24, v16, 0LL);
                if (a1)
                {
                  uint64_t v5 = a1;
                  bzero((void *)a1, v16);
                  goto LABEL_49;
                }
              }
            }
          }
        }
      }
    }
  }

  qword_18C5D6210 = (uint64_t)"overflow while growing CFBasicHash";
  __break(1u);
}

      uint64_t v5 = v10 - v6;
    }

    while (v10 != v6);
  }

LABEL_144:
      __break(1u);
      goto LABEL_145;
    }

    uint64_t v43 = v56;
    goto LABEL_69;
  }

    if ((v29 & 0x2000000000000000LL) != 0) {
      int64_t v24 = HIBYTE(v29) & 0xF;
    }
    else {
      int64_t v24 = v28 & 0xFFFFFFFFFFFFLL;
    }
    if (!v24)
    {
      swift_bridgeObjectRelease();
      unint64_t v29 = 0xE000000000000000LL;
      goto LABEL_207;
    }

    unint64_t v115 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v28, v29);
    if ((v115 & 1) == 0)
    {
      *(void *)&v258 = v28;
      *((void *)&v258 + 1) = v29;
      MEMORY[0x1895F8858](v115);
      v243 = (uint64_t)&v258;
      LOBYTE(v244) = 4;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v242,  v28,  v29);
      if (!v122)
      {
        uint64_t v145 = *((void *)&v258 + 1);
        __int128 v144 = v258;
        swift_bridgeObjectRetain();
        specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v144, v145, 4u);
        int64_t v123 = v146;
        swift_bridgeObjectRelease_n();
        goto LABEL_191;
      }

      int64_t v123 = v122;
      goto LABEL_205;
    }

    char v116 = specialized Collection.first.getter(v28, v29);
    if ((v116 & 0x100) != 0) {
      goto LABEL_280;
    }
    if (v116 == 91)
    {
      if ((v29 & 0x1000000000000000LL) == 0)
      {
        unint64_t v117 = (v24 << 16) - 65532;
        LOBYTE(v118) = 1;
        goto LABEL_153;
      }
    }

    else
    {
      __break(1u);
    }

    char v116 = String.UTF8View._foreignCount()();
    if (__OFSUB__(v116, 1LL)) {
      goto LABEL_281;
    }
    BOOL v118 = (v28 >> 59) & 1;
    unint64_t v117 = MEMORY[0x186E1B838](15LL, v116 - 1, v28, v29);
LABEL_153:
    if ((v117 & 0xC) == 4LL << v118) {
      unint64_t v117 = _StringGuts._slowEnsureMatchingEncoding(_:)(v117, v28, v29);
    }
    uint64_t v119 = v117 >> 16;
    if (v117 >> 16 >= v24)
    {
      __break(1u);
LABEL_263:
      __break(1u);
      goto LABEL_264;
    }

    if ((v29 & 0x1000000000000000LL) != 0)
    {
      uint64_t v121 = String.UTF8View._foreignSubscript(position:)();
    }

    else if ((v29 & 0x2000000000000000LL) != 0)
    {
      *(void *)&v258 = v28;
      *((void *)&v258 + 1) = v29 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v121 = *((_BYTE *)&v258 + v119);
    }

    else
    {
      if ((v28 & 0x1000000000000000LL) != 0) {
        uint64_t v120 = (v29 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v120 = _StringObject.sharedUTF8.getter();
      }
      uint64_t v121 = *(_BYTE *)(v120 + v119);
    }

    if (v121 != 93) {
      goto LABEL_263;
    }
    uint64_t v147 = specialized Collection<>.firstIndex(of:)(0x25u, v28, v29);
    if ((v148 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v28, v29) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        unint64_t v29 = 0LL;
        v268 = 1;
        goto LABEL_59;
      }

      *(void *)&v258 = v28;
      *((void *)&v258 + 1) = v29;
      String.init<A>(_:)();
      int64_t v123 = v150;
LABEL_191:
      swift_bridgeObjectRelease();
LABEL_206:
      unint64_t v29 = v123;
LABEL_207:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v269 = 1;
      goto LABEL_59;
    }

    uint64_t v149 = v147;
    if ((v29 & 0x1000000000000000LL) != 0)
    {
      uint64_t v151 = String.UTF8View._foreignCount()();
      if (__OFSUB__(v151, 1LL))
      {
        __break(1u);
        goto LABEL_270;
      }

      int64_t v24 = MEMORY[0x186E1B838](15LL, v151 - 1, v28, v29);
    }

    else
    {
      int64_t v24 = (v24 << 16) - 65532;
    }

    if (v24 >> 14 >= v149 >> 14)
    {
      swift_bridgeObjectRetain_n();
      __int128 v152 = String.subscript.getter();
      __int128 v154 = v153;
      *(void *)&v258 = v152;
      *((void *)&v258 + 1) = v155;
      *(void *)&v259 = v156;
      *((void *)&v259 + 1) = v153;
      MEMORY[0x1895F8858](v152);
      v243 = (uint64_t)&v258;
      LOBYTE(v244) = 8;
      char v160 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v242,  v158,  v159,  v157,  v154);
      if (v161)
      {
        char v162 = (uint64_t)v160;
        char v163 = v161;
      }

      else
      {
        __int128 v173 = *((void *)&v258 + 1);
        __int128 v172 = v258;
        uint64_t v175 = *((void *)&v259 + 1);
        __int128 v174 = v259;
        swift_bridgeObjectRetain();
        char v162 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v172, v173, v174, v175, 8u);
        char v163 = v176;
        uint64_t v15 = v254;
        swift_bridgeObjectRelease();
      }

      v177 = String.subscript.getter();
      v178 = MEMORY[0x186E1B610](v177);
      v180 = v179;
      swift_bridgeObjectRelease();
      *(void *)&v258 = v178;
      *((void *)&v258 + 1) = v180;
      v181._countAndFlagsBits = v162;
      v181._object = v163;
      String.append(_:)(v181);
      swift_bridgeObjectRelease();
      v182._countAndFlagsBits = 93LL;
      v182._object = (void *)0xE100000000000000LL;
      String.append(_:)(v182);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      int64_t v123 = *((void *)&v258 + 1);
LABEL_205:
      swift_bridgeObjectRelease_n();
      goto LABEL_206;
    }

    __break(1u);
LABEL_267:
    Swift::UInt64 v49 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
LABEL_37:
    v258 = (unint64_t)v30;
    uint64_t v51 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v258;
  }

  if ((v106 & 1) != 0) {
    goto LABEL_144;
  }
  swift_bridgeObjectRetain();
LABEL_165:
  uint64_t v124 = v28 & 0xFFFFFFFFFFFFLL;
  if ((v29 & 0x2000000000000000LL) != 0) {
    uint64_t v125 = HIBYTE(v29) & 0xF;
  }
  else {
    uint64_t v125 = v28 & 0xFFFFFFFFFFFFLL;
  }
  if (!v125)
  {
    uint64_t v132 = 0LL;
    uint64_t v133 = 0xE000000000000000LL;
    goto LABEL_273;
  }

  if ((v29 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain_n();
  }

  else
  {
    if ((v29 & 0x2000000000000000LL) != 0)
    {
      *(void *)&v258 = v28;
      *((void *)&v258 + 1) = v29 & 0xFFFFFFFFFFFFFFLL;
      v256 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      v257 = 0LL;
      swift_bridgeObjectRetain_n();
      __int128 v128 = &v258;
      uint64_t v127 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v256;
      __int128 v130 = (unsigned __int8 *)&v258;
      uint64_t v129 = HIBYTE(v29) & 0xF;
      __int128 v131 = v129;
    }

    else
    {
      if ((v28 & 0x1000000000000000LL) != 0)
      {
        uint64_t v126 = (v29 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }

      else
      {
        uint64_t v126 = _StringObject.sharedUTF8.getter();
        uint64_t v124 = v230;
      }

      *(void *)&v258 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      *((void *)&v258 + 1) = 0LL;
      swift_bridgeObjectRetain_n();
      uint64_t v127 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v258;
      __int128 v128 = (__int128 *)v126;
      uint64_t v129 = v124;
      __int128 v130 = (unsigned __int8 *)v126;
      __int128 v131 = v124;
    }

    uint64_t v132 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v128,  v129,  v127,  1,  v130,  v131);
    uint64_t v133 = v134;
    swift_bridgeObjectRelease();
    if (v133 != 1)
    {
      swift_bridgeObjectRelease_n();
      if (!v133) {
        goto LABEL_276;
      }
      goto LABEL_273;
    }
  }

  *(void *)&v258 = v28;
  *((void *)&v258 + 1) = v29;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  int v135 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v136 = objc_msgSend(v135, sel__fastCharacterContents);
  uint64_t v137 = v135;
  if (v136)
  {
    *(void *)&v258 = v28;
    *((void *)&v258 + 1) = v29;
    StringProtocol._ephemeralString.getter();
    uint64_t v138 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    int64_t v139 = objc_msgSend(v138, sel_length);
    __int128 v140 = swift_unknownObjectRelease();
    __int128 v141 = MEMORY[0x1895F8858](v140);
    LOBYTE(v243) = 1;
    MEMORY[0x1895F8858](v141);
    v240 = v136;
    v241 = v139;
    uint64_t v132 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v136,  (uint64_t)v139,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToASCII(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  v142,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t)v239);
    uint64_t v133 = v143;
    swift_bridgeObjectRelease_n();
    if (!v133) {
      goto LABEL_276;
    }
    goto LABEL_273;
  }

  *(void *)&v258 = v28;
  *((void *)&v258 + 1) = v29;
  swift_bridgeObjectRetain();
  v165 = String.init<A>(_:)();
  __int128 v166 = v164;
  if ((v164 & 0x1000000000000000LL) != 0)
  {
LABEL_270:
    v165 = static String._copying(_:)();
    v232 = v231;
    swift_bridgeObjectRelease();
    __int128 v166 = v232;
    if ((v232 & 0x2000000000000000LL) == 0) {
      goto LABEL_200;
    }
LABEL_271:
    __int128 v168 = HIBYTE(v166) & 0xF;
    *(void *)&v258 = v165;
    *((void *)&v258 + 1) = v166 & 0xFFFFFFFFFFFFFFLL;
    v256 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
    v257 = 0LL;
    __int128 v167 = (unsigned __int8 *)&v258;
    __int128 v169 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v256;
    uint64_t v170 = (unsigned __int8 *)&v258;
    __int128 v171 = v168;
    goto LABEL_272;
  }

  if ((v164 & 0x2000000000000000LL) != 0) {
    goto LABEL_271;
  }
LABEL_200:
  if ((v165 & 0x1000000000000000LL) != 0)
  {
    __int128 v167 = (unsigned __int8 *)((v166 & 0xFFFFFFFFFFFFFFFLL) + 32);
    __int128 v168 = v165 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    __int128 v167 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }

  *(void *)&v258 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
  *((void *)&v258 + 1) = 0LL;
  __int128 v169 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v258;
  uint64_t v170 = v167;
  __int128 v171 = v168;
LABEL_272:
  uint64_t v132 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v167,  v168,  v169,  1,  v170,  v171);
  uint64_t v133 = v233;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (!v133) {
    goto LABEL_276;
  }
LABEL_273:
  swift_bridgeObjectRetain();
  v234 = specialized static RFC3986Parser.validate<A>(_:component:)(v132, v133, 3);
  swift_bridgeObjectRelease();
  if ((v234 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v29 = v133;
    goto LABEL_59;
  }

  swift_bridgeObjectRelease();
LABEL_276:
  v268 = 1;
  specialized static RFC3986Parser.percentEncode<A>(_:component:)(v28, v29, 3);
  v236 = v235;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v269 = 1;
  unint64_t v29 = v236;
LABEL_59:
  uint64_t v61 = objc_msgSend((id)a1, sel_percentEncodedUser);
  if (!v61)
  {
    uint64_t v63 = 0LL;
    int64_t v65 = 0LL;
    v274 = 0;
    goto LABEL_67;
  }

  uint64_t v62 = v61;
  uint64_t v63 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
  int64_t v65 = v64;

  v276 = 0;
  v274 = 0;
  if ((v65 & 0x1000000000000000LL) != 0)
  {
    *(void *)&v258 = v63;
    *((void *)&v258 + 1) = v65;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v191 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v192 = (unsigned __int16 *)objc_msgSend(v191, sel__fastCharacterContents);
    v193 = v191;
    if (v192)
    {
      *(void *)&v258 = v63;
      *((void *)&v258 + 1) = v65;
      StringProtocol._ephemeralString.getter();
      v194 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v195 = objc_msgSend(v194, sel_length);
      swift_unknownObjectRelease();
      v196 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v192,  (uint64_t)v195,  2u,  1);
    }

    else
    {
      v196 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v63, v65, 2u, 1);
    }

    v216 = v196;
    swift_bridgeObjectRelease();
    if ((v216 & 1) == 0) {
      goto LABEL_234;
    }
LABEL_67:
    swift_bridgeObjectRelease();
    Swift::UInt v68 = objc_msgSend((id)a1, sel_percentEncodedPassword);
    if (!v68)
    {
      uint64_t v23 = 0LL;
      unint64_t v71 = 0LL;
      HIBYTE(v273) = 0;
      goto LABEL_75;
    }

    Swift::UInt v69 = v68;
    uint64_t v23 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    unint64_t v71 = v70;

    v276 = 0;
    HIBYTE(v273) = 0;
    if ((v71 & 0x1000000000000000LL) != 0)
    {
      *(void *)&v258 = v23;
      *((void *)&v258 + 1) = v71;
      v197 = lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      v253 = v197;
      StringProtocol._ephemeralString.getter();
      v198 = v23;
      v199 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v200 = (unsigned __int16 *)objc_msgSend(v199, sel__fastCharacterContents);
      v201 = v199;
      v250 = v200;
      if (v200)
      {
        uint64_t v23 = v198;
        *(void *)&v258 = v198;
        *((void *)&v258 + 1) = v71;
        StringProtocol._ephemeralString.getter();
        v202 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v203 = (uint64_t)objc_msgSend(v202, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v203) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v250,  v203,  2u,  1);
        swift_bridgeObjectRelease();
        if ((v203 & 1) != 0) {
          goto LABEL_75;
        }
      }

      else
      {
        v218 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v198,  v71,  2u,  1);
        swift_bridgeObjectRelease();
        uint64_t v23 = v198;
        if ((v218 & 1) != 0) {
          goto LABEL_75;
        }
      }
    }

    else
    {
      if ((v71 & 0x2000000000000000LL) != 0)
      {
        Swift::UInt v73 = HIBYTE(v71) & 0xF;
        *(void *)&v258 = v23;
        *((void *)&v258 + 1) = v71 & 0xFFFFFFFFFFFFFFLL;
        int64_t v72 = (char *)&v258;
      }

      else if ((v23 & 0x1000000000000000LL) != 0)
      {
        int64_t v72 = (char *)((v71 & 0xFFFFFFFFFFFFFFFLL) + 32);
        Swift::UInt v73 = v23 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        int64_t v72 = (char *)_StringObject.sharedUTF8.getter();
      }

      if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v72, v73, 2u, 1))
      {
LABEL_75:
        v250 = (unsigned __int16 *)v71;
        swift_bridgeObjectRelease();
        int64_t v74 = objc_msgSend((id)a1, sel_encodedHost);
        v251 = v63;
        *((void *)&v249 + 1) = v23;
        if (!v74)
        {
          v276 = 0;
          LOBYTE(v273) = 0;
          v269 = 0;
          v268 = 0;
          swift_bridgeObjectRelease();
          uint64_t v76 = 0LL;
          unint64_t v78 = 0LL;
          goto LABEL_104;
        }

        uint64_t v75 = v74;
        uint64_t v76 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        unint64_t v78 = v77;

        v276 = 0;
        LOBYTE(v273) = 0;
        v269 = 0;
        v268 = 0;
        int64_t v79 = specialized Collection.first.getter(v76, v78);
        if ((v79 & 0x1FF) != 0x5B) {
          goto LABEL_97;
        }
        if ((v78 & 0x1000000000000000LL) != 0)
        {
          char v116 = String.UTF8View._foreignCount()();
          if (__OFSUB__(v116, 1LL))
          {
            __break(1u);
LABEL_279:
            __break(1u);
LABEL_280:
            __break(1u);
LABEL_281:
            __break(1u);
            os_unfair_lock_unlock((os_unfair_lock_t)v116);
            __break(1u);
            goto LABEL_282;
          }

          unint64_t v81 = (v76 >> 59) & 1;
          int64_t v79 = MEMORY[0x186E1B838](15LL, v116 - 1, v76, v78);
        }

        else
        {
          unint64_t v80 = HIBYTE(v78) & 0xF;
          if ((v78 & 0x2000000000000000LL) == 0) {
            unint64_t v80 = v76 & 0xFFFFFFFFFFFFLL;
          }
          if (!v80)
          {
            __break(1u);
LABEL_226:
            int64_t v79 = _StringGuts._slowEnsureMatchingEncoding(_:)(v79, v76, v78);
LABEL_83:
            Swift::UInt v82 = HIBYTE(v78) & 0xF;
            if ((v78 & 0x2000000000000000LL) == 0) {
              Swift::UInt v82 = v76 & 0xFFFFFFFFFFFFLL;
            }
            Swift::UInt v83 = v79 >> 16;
            if (v79 >> 16 >= v82)
            {
              __break(1u);
              goto LABEL_228;
            }

            if ((v78 & 0x1000000000000000LL) != 0)
            {
              unint64_t v85 = String.UTF8View._foreignSubscript(position:)();
            }

            else if ((v78 & 0x2000000000000000LL) != 0)
            {
              *(void *)&v258 = v76;
              *((void *)&v258 + 1) = v78 & 0xFFFFFFFFFFFFFFLL;
              unint64_t v85 = *((_BYTE *)&v258 + v83);
            }

            else
            {
              if ((v76 & 0x1000000000000000LL) != 0) {
                int64_t v84 = (v78 & 0xFFFFFFFFFFFFFFFLL) + 32;
              }
              else {
                int64_t v84 = _StringObject.sharedUTF8.getter();
              }
              unint64_t v85 = *(_BYTE *)(v84 + v83);
            }

            if (v85 == 93)
            {
              swift_bridgeObjectRetain();
              int64_t v86 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v76, v78);
              swift_bridgeObjectRelease();
              if ((v86 & 1) == 0) {
                goto LABEL_219;
              }
LABEL_103:
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRelease();
              id v89 = specialized Sequence<>.contains(_:)(37, v76, v78);
              swift_bridgeObjectRelease_n();
              v269 = v89 & 1;
LABEL_104:
              id v90 = objc_msgSend((id)a1, sel_port);
              id v91 = v90;
              if (v90)
              {
                unint64_t v29 = (unint64_t)objc_msgSend(v90, sel_integerValue);

                HIBYTE(v272) = 0;
                if ((v29 & 0x8000000000000000LL) != 0)
                {
                  v244 = 0;
                  v243 = 764LL;
                  goto LABEL_284;
                }
              }

              else
              {
                unint64_t v29 = 0LL;
                HIBYTE(v272) = 0;
              }

              v253 = v76;
              v270 = v91 == 0LL;
              id v92 = objc_msgSend((id)a1, sel_percentEncodedPath);
              if (v92)
              {
                id v93 = v92;
                uint64_t v76 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
                uint64_t v63 = v94;
              }

              else
              {
                uint64_t v76 = 0LL;
                uint64_t v63 = 0xE000000000000000LL;
              }

              v276 = 0;
              LOBYTE(v272) = 0;
              swift_bridgeObjectRetain();
              LOBYTE(v23) = 5;
              id v95 = specialized static RFC3986Parser.validate<A>(_:component:)(v76, v63, 5);
              swift_bridgeObjectRelease();
              if ((v95 & 1) != 0)
              {
                *(void *)&v249 = v65;
                swift_bridgeObjectRelease();
                id v96 = objc_msgSend((id)a1, sel_percentEncodedQuery);
                if (v96)
                {
                  id v97 = v96;
                  uint64_t v15 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
                  int64_t v65 = v98;
                }

                else
                {
                  uint64_t v15 = 0LL;
                  int64_t v65 = 0LL;
                }

                HIBYTE(v271) = 0;
                if ((specialized static RFC3986Parser.validate<A>(_:component:)(v15, v65, 6) & 1) == 0)
                {
                  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
                  swift_allocError();
                  *v238 = 6;
                  swift_willThrow();
                  swift_bridgeObjectRelease();
                  v244 = 0;
                  v243 = 918LL;
                  goto LABEL_284;
                }

                swift_bridgeObjectRelease();
                id v99 = objc_msgSend((id)a1, sel_percentEncodedFragment);
                if (!v99)
                {
                  uint64_t v23 = 0LL;
                  a1 = 0LL;
                  v276 = 0;
                  LOBYTE(v271) = 0;
LABEL_124:
                  swift_bridgeObjectRelease();
                  LOBYTE(v256) = v270;
                  *(void *)&v258 = 0LL;
                  BYTE8(v258) = v276;
                  BYTE9(v258) = v275;
                  BYTE10(v258) = v274;
                  BYTE11(v258) = HIBYTE(v273);
                  BYTE12(v258) = v273;
                  BYTE13(v258) = HIBYTE(v272);
                  BYTE14(v258) = v272;
                  HIBYTE(v258) = HIBYTE(v271);
                  LOBYTE(v259) = v271;
                  *((void *)&v259 + 1) = v255;
                  *(void *)&v260 = v254;
                  *((void *)&v260 + 1) = v251;
                  v261 = v249;
                  *(void *)&v262 = v250;
                  *((void *)&v262 + 1) = v253;
                  *(void *)&v263 = v78;
                  *((void *)&v263 + 1) = v29;
                  LOBYTE(v264) = v270;
                  *((void *)&v264 + 1) = v76;
                  *(void *)&v265 = v63;
                  *((void *)&v265 + 1) = v15;
                  *(void *)&v266[0] = v65;
                  *((void *)&v266[0] + 1) = v23;
                  *(void *)&v266[1] = a1;
                  BYTE8(v266[1]) = v269;
                  BYTE9(v266[1]) = v268;
                  destructiveProjectEnumData for PredicateCodableError(&v258, v268);
                  uint64_t v10 = v252;
                  goto LABEL_125;
                }

                id v100 = v99;
                uint64_t v23 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
                a1 = v101;

                v276 = 0;
                LOBYTE(v271) = 0;
                if ((a1 & 0x1000000000000000LL) != 0)
                {
                  *(void *)&v258 = v23;
                  *((void *)&v258 + 1) = a1;
                  v247 = (id)lazy protocol witness table accessor for type String and conformance String();
                  swift_bridgeObjectRetain();
                  StringProtocol._ephemeralString.getter();
                  v248 = (unsigned __int16 *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  v205 = (unsigned __int16 *)objc_msgSend(v248, sel__fastCharacterContents);
                  v206 = v248;
                  v248 = v205;
                  if (v205)
                  {
                    *(void *)&v258 = v23;
                    *((void *)&v258 + 1) = a1;
                    StringProtocol._ephemeralString.getter();
                    v246 = (id)String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    v247 = objc_msgSend(v246, sel_length);
                    swift_unknownObjectRelease();
                    v207 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v248,  (uint64_t)v247,  0x40u,  1);
                  }

                  else
                  {
                    v207 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v23,  a1,  0x40u,  1);
                  }

                  v219 = v207;
                  swift_bridgeObjectRelease();
                  if ((v219 & 1) != 0) {
                    goto LABEL_124;
                  }
                  goto LABEL_239;
                }

                if ((a1 & 0x2000000000000000LL) != 0)
                {
                  id v103 = HIBYTE(a1) & 0xF;
                  *(void *)&v258 = v23;
                  *((void *)&v258 + 1) = a1 & 0xFFFFFFFFFFFFFFLL;
                  id v102 = (char *)&v258;
                  goto LABEL_123;
                }

                if ((v23 & 0x1000000000000000LL) != 0)
                {
                  id v102 = (char *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  id v103 = v23 & 0xFFFFFFFFFFFFLL;
                  goto LABEL_123;
                }

    swift_bridgeObjectRelease();
    *((void *)a1 + 15) = v178;
    *((void *)a1 + 16) = v179;
    goto LABEL_145;
  }

  v178 = *((void *)&v320 + 1);
  v179 = *(void *)&v321[0];
LABEL_145:
  v197 = *(void *)a1;
  v198 = *((_BYTE *)a1 + 8);
  v199 = *((_BYTE *)a1 + 9);
  v200 = *((_BYTE *)a1 + 10);
  v201 = *((_BYTE *)a1 + 11);
  v202 = *((_BYTE *)a1 + 12);
  v203 = *((_BYTE *)a1 + 13);
  v204 = *((_BYTE *)a1 + 14);
  v205 = *((_BYTE *)a1 + 15);
  v206 = *((_BYTE *)a1 + 16);
  v207 = *((void *)a1 + 11);
  v208 = *((_BYTE *)a1 + 152);
  v209 = *((_BYTE *)a1 + 153);
  v296 = *((_BYTE *)a1 + 96);
  v304 = v197;
  LOBYTE(v305) = v198;
  BYTE1(v305) = v199;
  BYTE2(v305) = v200;
  BYTE3(v305) = v201;
  BYTE4(v305) = v202;
  BYTE5(v305) = v203;
  BYTE6(v305) = v204;
  HIBYTE(v305) = v205;
  v306 = v206;
  v307 = *(__int128 *)((char *)a1 + 24);
  v308 = *(__int128 *)((char *)a1 + 40);
  v309 = *(__int128 *)((char *)a1 + 56);
  v310 = *(__int128 *)((char *)a1 + 72);
  v311 = v207;
  v312 = v296;
  v313 = *(__int128 *)((char *)a1 + 104);
  v314 = v178;
  v315 = v179;
  v316 = *(__int128 *)((char *)a1 + 136);
  v317 = v208;
  v318 = v209;
  v210 = URLComponents._URLComponents.fragment.getter(v207);
  if (!v211) {
    goto LABEL_149;
  }
  v212 = v210;
  v213 = v211;
  uint64_t result = swift_bridgeObjectRelease();
  v215 = HIBYTE(v213) & 0xF;
  if ((v213 & 0x2000000000000000LL) == 0) {
    v215 = (unint64_t)v212 & 0xFFFFFFFFFFFFLL;
  }
  if (!v215)
  {
LABEL_149:
    v216 = URL.ParseStrategy.defaultValues.getter();
    v217 = specialized Dictionary.subscript.getter(128LL, v216);
    v219 = v218;
    swift_bridgeObjectRelease();
    *((_BYTE *)a1 + 8) = 0;
    *((_BYTE *)a1 + 16) = 0;
    if (v219)
    {
      if ((v219 & 0x1000000000000000LL) != 0)
      {
        v294 = v217;
        v295 = v219;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v241 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v242 = (unsigned __int16 *)objc_msgSend(v241, sel__fastCharacterContents);
        v243 = v241;
        if (v242)
        {
          v294 = v217;
          v295 = v219;
          StringProtocol._ephemeralString.getter();
          v244 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v245 = objc_msgSend(v244, sel_length);
          swift_unknownObjectRelease();
          v246 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v242,  (uint64_t)v245,  0x40u,  0);
        }

        else
        {
          v246 = specialized Sequence.allSatisfy(_:)(v217, v219, 64);
        }

        v263 = v246;
        v222 = swift_bridgeObjectRelease();
        if ((v263 & 1) == 0) {
          goto LABEL_156;
        }
      }

      else
      {
        if ((v219 & 0x2000000000000000LL) != 0)
        {
          v221 = HIBYTE(v219) & 0xF;
          v294 = v217;
          v295 = v219 & 0xFFFFFFFFFFFFFFLL;
          v220 = (char *)&v294;
        }

        else if ((v217 & 0x1000000000000000LL) != 0)
        {
          v220 = (char *)((v219 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v221 = v217 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          v220 = (char *)_StringObject.sharedUTF8.getter();
        }

        v222 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v220,  v221,  0x40u,  0);
        if ((v222 & 1) == 0)
        {
LABEL_156:
          v223 = HIBYTE(v219) & 0xF;
          if ((v219 & 0x2000000000000000LL) == 0) {
            v223 = v217 & 0xFFFFFFFFFFFFLL;
          }
          if (v223)
          {
            v294 = v217;
            v295 = v219;
            MEMORY[0x1895F8858](v222);
            v270 = (uint64_t)&v294;
            LOBYTE(v271) = 64;
            swift_bridgeObjectRetain();
            v224 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (uint64_t)v269,  v217,  v219);
            if (v225)
            {
              v217 = (uint64_t)v224;
              v226 = v225;
              swift_bridgeObjectRelease_n();
            }

            else
            {
              v227 = v294;
              v228 = v295;
              swift_bridgeObjectRetain();
              v217 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v227, v228, 0x40u);
              v226 = v229;
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
            }

            v219 = v226;
          }

          else
          {
            swift_bridgeObjectRelease();
            v217 = 0LL;
            v219 = 0xE000000000000000LL;
          }
        }
      }
    }

    uint64_t result = swift_bridgeObjectRelease();
    *((void *)a1 + 17) = v217;
    *((void *)a1 + 18) = v219;
  }

  return result;
}

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v101 = v69[2];
      if (HIDWORD(v101)) {
        goto LABEL_163;
      }
      _So9NSDecimala__length_setter(v101, &v137);
      LODWORD(v135) = v76;
      WORD2(v135) = v81;
      WORD3(v135) = v44;
      WORD4(v135) = v74;
      WORD5(v135) = v77;
      WORD6(v135) = v123;
      HIWORD(v135) = v121;
      LOWORD(v136) = v119;
      HIWORD(v136) = v75;
      id v102 = _So9NSDecimala__isNegative_getter(&v135);
      _So9NSDecimala__isNegative_setter(v102, &v137);
      v93._rawValue = v69;
LABEL_146:
      NSDecimal.copyVariableLengthInteger(_:)(v93);
      if (v103)
      {
        Swift::UInt v37 = v103;
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }

      swift_bridgeObjectRelease();
LABEL_149:
      _So9NSDecimala__isCompact_setter(&v137);
      NSDecimal.compact()();
      LODWORD(v8) = v137;
      LOWORD(v5) = WORD2(v137);
      LOWORD(v15) = WORD3(v137);
      LOWORD(v11) = WORD4(v137);
      LOWORD(v6) = WORD5(v137);
      LOWORD(v9) = WORD6(v137);
      LOWORD(v10) = HIWORD(v137);
      LOWORD(v7) = v138;
      LOWORD(v14) = HIWORD(v138);
      goto LABEL_22;
    }

    Swift::UInt v82 = 0LL;
  }

      if (v334 >= v331)
      {
LABEL_386:
        __break(1u);
        goto LABEL_387;
      }

      uint64_t v147 = *(void *)(v21 + 64);
      uint64_t v148 = *(void *)(v21 + 72);
      uint64_t v149 = *(void *)(v21 + 80);
      v346 = *(void *)(v21 + 88);
      if (v147)
      {
        uint64_t v150 = v357;
        if (v149 < (uint64_t)v358)
        {
LABEL_401:
          __break(1u);
          goto LABEL_402;
        }

        if (*(_WORD *)(v147 + 16) && (uint64_t)v358 < v149)
        {
          v360 = v148;
          uint64_t v151 = *(unsigned __int8 *)(v147 + 18);
          if (*(_BYTE *)(v147 + 18))
          {
            swift_unknownObjectRetain_n();
            outlined retain of AttributedString.Runs((uint64_t)v434);
            uint64_t result = swift_unknownObjectRetain();
            __int128 v152 = v358;
            __int128 v153 = v147;
            while (1)
            {
              v156 = *(unsigned __int16 *)(v153 + 16);
              if (!*(_WORD *)(v153 + 16)) {
                goto LABEL_152;
              }
              uint64_t v157 = *(void *)(v153 + 40);
              Swift::UInt64 v34 = __OFSUB__(v152, v157);
              uint64_t v158 = (__int128 *)((char *)v152 - v157);
              if (v34) {
                goto LABEL_375;
              }
              if (__OFADD__(v158, 1LL)) {
                goto LABEL_376;
              }
              if ((uint64_t)v158 + 1 < 1)
              {
                v156 = 0LL;
              }

              else
              {
                if ((_DWORD)v156 == 1)
                {
                  __int128 v152 = v158;
LABEL_152:
                  if (v152) {
                    goto LABEL_372;
                  }
                  goto LABEL_153;
                }

                uint64_t v159 = (uint64_t *)(v153 + 64);
                char v160 = 1LL;
                while (1)
                {
                  char v161 = *v159;
                  v159 += 3;
                  __int128 v152 = (__int128 *)((char *)v158 - v161);
                  if (__OFSUB__(v158, v161)) {
                    goto LABEL_368;
                  }
                  if (__OFADD__(v152, 1LL)) {
                    goto LABEL_369;
                  }
                  ++v160;
                  uint64_t v158 = v152;
                  if (v156 == v160) {
                    goto LABEL_152;
                  }
                }

                v156 = v160;
                __int128 v152 = v158;
              }

                  __break(1u);
LABEL_145:
                  __break(1u);
                }

                uint64_t v54 = v44 + 5;
              }
            }
          }
        }

          swift_bridgeObjectRelease();
        }
      }

      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v66,  isUniquelyReferenced_nonNull_native);
        unint64_t v67 = v149;
        Swift::UInt v68 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v17);
        int64_t v70 = v133;
        if ((v133 & 1) != (v69 & 1)) {
          goto LABEL_225;
        }
        uint64_t v63 = v68;
      }

      swift_bridgeObjectRelease();
      if ((v70 & 1) == 0)
      {
        *(void *)(v67 + 8 * (v63 >> 6) + 64) |= 1LL << v63;
        unint64_t v71 = (uint64_t *)(*(void *)(v67 + 48) + 16 * v63);
        void *v71 = v9;
        v71[1] = v17;
        *(void *)(*(void *)(v67 + 56) + 8 * v63) = MEMORY[0x18961AFE8];
        int64_t v72 = *(void *)(v67 + 16);
        unint64_t v22 = __OFADD__(v72, 1LL);
        Swift::UInt v73 = v72 + 1;
        if (v22) {
          goto LABEL_209;
        }
        *(void *)(v67 + 16) = v73;
        swift_bridgeObjectRetain();
      }

      uint64_t v134 = v67;
      int64_t v74 = *(void *)(v67 + 56);
      __int128 v131 = v63;
      uint64_t v11 = *(void *)(v74 + 8 * v63);
      uint64_t v75 = *(void *)(v11 + 16);
      if (v75 && (uint64_t v76 = v75 - 1, *(void *)(v11 + 32 + 16 * (v75 - 1) + 8) == v139))
      {
        uint64_t v9 = *(void *)(v11 + 32 + 16 * v76);
        uint64_t v77 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v74 + 8 * v131) = v11;
        if ((v77 & 1) == 0)
        {
          uint64_t v11 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v11);
          *(void *)(v74 + 8 * v131) = v11;
        }

        unint64_t v78 = v11 + 16 * v76;
        *(void *)(v78 + 32) = v9;
      }

      else
      {
        int64_t v79 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v74 + 8 * v131) = v11;
        if ((v79 & 1) == 0)
        {
          uint64_t v11 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v11 + 16) + 1LL,  1,  (void *)v11);
          *(void *)(v74 + 8 * v131) = v11;
        }

        uint64_t v9 = *(void *)(v11 + 16);
        unint64_t v80 = *(void *)(v11 + 24);
        if (v9 >= v80 >> 1)
        {
          uint64_t v11 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v80 > 1),  v9 + 1,  1,  (void *)v11);
          *(void *)(v74 + 8 * v131) = v11;
        }

        *(void *)(v11 + 16) = v9 + 1;
        unint64_t v78 = v11 + 16 * v9;
        *(void *)(v78 + 32) = v139;
      }

      *(void *)(v78 + 40) = v138;
      swift_bridgeObjectRelease_n();
      uint64_t v145 = v134;
      if (!v46) {
        goto LABEL_54;
      }
    }
  }

  uint64_t v145 = MEMORY[0x18961AFF0];
LABEL_148:
  swift_release();
  id v103 = 0LL;
  uint64_t v148 = v145 + 64;
  id v104 = 1LL << *(_BYTE *)(v145 + 32);
  uint64_t v105 = -1LL;
  if (v104 < 64) {
    uint64_t v105 = ~(-1LL << v104);
  }
  uint64_t v106 = v105 & *(void *)(v145 + 64);
  Swift::UInt v107 = (unint64_t)(v104 + 63) >> 6;
  while (v106)
  {
    Swift::UInt v108 = __clz(__rbit64(v106));
    v106 &= v106 - 1;
    Swift::UInt8 v109 = v108 | (v103 << 6);
    Swift::UInt8 v110 = v145;
LABEL_167:
    unint64_t v114 = *(void *)(*(void *)(v110 + 56) + 8 * v109);
    unint64_t v115 = *(void *)(v114 + 16);
    if (v115)
    {
      char v116 = (unint64_t *)(*(void *)(v145 + 48) + 16 * v109);
      BOOL v118 = *v116;
      unint64_t v117 = v116[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v119 = (uint64_t *)(v114 + 40);
      do
      {
        AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)( v118,  v117,  *(v119 - 1),  *v119,  0);
        v119 += 2;
        --v115;
      }

      while (v115);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }

  Swift::UInt8 v111 = v103 + 1;
  Swift::UInt8 v110 = v145;
  if (__OFADD__(v103, 1LL))
  {
    __break(1u);
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
    goto LABEL_203;
  }

  if (v111 >= v107) {
    return swift_release();
  }
  Swift::Int v112 = *(void *)(v148 + 8 * v111);
  ++v103;
  if (v112) {
    goto LABEL_166;
  }
  id v103 = v111 + 1;
  if (v111 + 1 >= v107) {
    return swift_release();
  }
  Swift::Int v112 = *(void *)(v148 + 8 * v103);
  if (v112) {
    goto LABEL_166;
  }
  id v103 = v111 + 2;
  if (v111 + 2 >= v107) {
    return swift_release();
  }
  Swift::Int v112 = *(void *)(v148 + 8 * v103);
  if (v112)
  {
LABEL_166:
    uint64_t v106 = (v112 - 1) & v112;
    Swift::UInt8 v109 = __clz(__rbit64(v112)) + (v103 << 6);
    goto LABEL_167;
  }

  uint64_t v113 = v111 + 3;
  if (v113 < v107)
  {
    Swift::Int v112 = *(void *)(v148 + 8 * v113);
    if (!v112)
    {
      while (1)
      {
        id v103 = v113 + 1;
        if (__OFADD__(v113, 1LL)) {
          break;
        }
        if (v103 >= v107) {
          return swift_release();
        }
        Swift::Int v112 = *(void *)(v148 + 8 * v103);
        ++v113;
        if (v112) {
          goto LABEL_166;
        }
      }

          if (v25) {
            goto LABEL_477;
          }
LABEL_145:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          Swift::UInt v69 = v59 & 0xFFFFFFFFFFFFF0FFLL | (v71 << 8);
          goto LABEL_146;
        }
      }

      else if (a3 > 0)
      {
        goto LABEL_475;
      }

      swift_unknownObjectRetain_n();
      Swift::UInt v69 = specialized Rope._endPath.getter(v10);
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v25 = 0LL;
      if (!v10)
      {
        int64_t v70 = v254;
        goto LABEL_147;
      }

      uint64_t v15 = v4;
      uint64_t v58 = v55;
      uint64_t v62 = 0LL;
      int64_t v70 = v254;
LABEL_146:
      swift_unknownObjectRetain();
      specialized Rope._Node.distanceFromStart<A>(to:in:)(v255, v69, v62, v10, v245);
      uint64_t result = swift_unknownObjectRelease_n();
      uint64_t v55 = v58;
      unint64_t v4 = v15;
      int64_t v24 = v259;
LABEL_147:
      uint64_t v77 = a3 - v25;
      if (__OFSUB__(a3, v25)) {
        goto LABEL_457;
      }
      uint64_t v56 = v249;
      if (v70 >= v77)
      {
LABEL_419:
        swift_bridgeObjectRelease();
        swift_release();
        return swift_release();
      }

LABEL_70:
  swift_bridgeObjectRetain();
  Hasher._combine(_:)(v42);
  swift_bridgeObjectRelease();
  uint64_t v40 = v141;
  if (!v141) {
    goto LABEL_43;
  }
LABEL_71:
  Hasher._combine(_:)(1u);
  uint64_t v57 = 0LL;
  uint64_t v58 = 0LL;
  Swift::UInt v59 = v40 + 64;
  int64_t v60 = 1LL << *(_BYTE *)(v40 + 32);
  if (v60 < 64) {
    uint64_t v61 = ~(-1LL << v60);
  }
  else {
    uint64_t v61 = -1LL;
  }
  uint64_t v62 = v61 & *(void *)(v40 + 64);
  uint64_t v63 = (unint64_t)(v60 + 63) >> 6;
  __int128 v128 = v158;
  __int128 v130 = v157;
  uint64_t v124 = v160;
  uint64_t v126 = v159;
  unint64_t v64 = v161;
  while (2)
  {
    if (v62)
    {
      int64_t v65 = __clz(__rbit64(v62));
      v62 &= v62 - 1;
      unint64_t v66 = v65 | (v58 << 6);
LABEL_76:
      unint64_t v67 = *(unsigned __int8 *)(*(void *)(v40 + 48) + v66);
      Swift::UInt v68 = *(void *)(*(void *)(v40 + 56) + 8 * v66);
      __int128 v131 = v130;
      uint64_t v132 = v128;
      uint64_t v133 = v126;
      uint64_t v134 = v124;
      int v135 = v64;
      Hasher._combine(_:)(v67);
      Hasher._combine(_:)(v68);
      v57 ^= Hasher._finalize()();
      continue;
    }

    break;
  }

  Swift::UInt v69 = v58 + 1;
  if (__OFADD__(v58, 1LL)) {
    goto LABEL_143;
  }
  if (v69 >= v63)
  {
LABEL_92:
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v57);
    swift_bridgeObjectRelease();
    goto LABEL_93;
  }

  int64_t v70 = *(void *)(v59 + 8 * v69);
  ++v58;
  if (v70) {
    goto LABEL_91;
  }
  uint64_t v58 = v69 + 1;
  if (v69 + 1 >= v63) {
    goto LABEL_92;
  }
  int64_t v70 = *(void *)(v59 + 8 * v58);
  if (v70) {
    goto LABEL_91;
  }
  uint64_t v58 = v69 + 2;
  if (v69 + 2 >= v63) {
    goto LABEL_92;
  }
  int64_t v70 = *(void *)(v59 + 8 * v58);
  if (v70)
  {
LABEL_91:
    uint64_t v62 = (v70 - 1) & v70;
    unint64_t v66 = __clz(__rbit64(v70)) + (v58 << 6);
    goto LABEL_76;
  }

  unint64_t v71 = v69 + 3;
  if (v71 >= v63) {
    goto LABEL_92;
  }
  int64_t v70 = *(void *)(v59 + 8 * v71);
  if (v70)
  {
    uint64_t v58 = v71;
    goto LABEL_91;
  }

  while (1)
  {
    uint64_t v58 = v71 + 1;
    if (__OFADD__(v71, 1LL)) {
      break;
    }
    if (v58 >= v63) {
      goto LABEL_92;
    }
    int64_t v70 = *(void *)(v59 + 8 * v58);
    ++v71;
    if (v70) {
      goto LABEL_91;
    }
  }

  __break(1u);
  return result;
}

  if (v32)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }

    swift_retain();
    id v93 = (id)v17;
    swift_retain();
    uint64_t result = _foundation_swift_url_feature_enabled();
    if (!(_DWORD)result)
    {
      id v95 = objc_msgSend(v93, sel_relativeString);
      Swift::UInt64 v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
      id v94 = v96;

      goto LABEL_74;
    }

    if (*((void *)&v17 + 1))
    {
      Swift::UInt64 v33 = *(id *)(*((void *)&v17 + 1) + 16LL);
      id v94 = *(void **)(*((void *)&v17 + 1) + 24LL);
      swift_bridgeObjectRetain();
LABEL_74:
      outlined consume of URL?((void *)v17);
      goto LABEL_87;
    }

    __break(1u);
LABEL_304:
    __break(1u);
    goto LABEL_305;
  }

  v310 = v2;
  v306 = v7;
  v344 = v353;
  v345 = v354;
  v346[0] = *(_OWORD *)v355;
  *(_OWORD *)((char *)v346 + 10) = *(_OWORD *)&v355[10];
  v340 = v349;
  v341 = v350;
  v342 = v351;
  v343 = v352;
  v338 = v347;
  v339 = v348;
  uint64_t v21 = v349;
  v307 = v8;
  v308 = v4;
  v311 = v9;
  v309 = (_BYTE *)v347;
  if ((void)v349)
  {
    unint64_t v22 = *((void *)&v348 + 1);
    outlined retain of URLComponents((uint64_t)&v347);
    uint64_t v23 = v21;
    int64_t v24 = v11;
  }

  else
  {
    int64_t v24 = v11;
    if (BYTE9(v347) != 1 || !(void)v347 || (*(_BYTE *)(v347 + 48) & 1) != 0)
    {
      outlined retain of URLComponents((uint64_t)&v347);
      int64_t v28 = MEMORY[0x18961AFE8];
      goto LABEL_17;
    }

    outlined retain of URLComponents((uint64_t)&v347);
    outlined retain of URLComponents((uint64_t)&v347);
    uint64_t v136 = String.subscript.getter();
    unint64_t v22 = MEMORY[0x186E1B610](v136);
    uint64_t v23 = v137;
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v347);
  }

  *((void *)&v326[0] + 1) = MEMORY[0x189617FA8];
  *(void *)&v325 = v22;
  *((void *)&v325 + 1) = v23;
  v329 = xmmword_183725740;
  outlined init with take of Any(&v325, &v330);
  swift_bridgeObjectRetain();
  unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
  unint64_t v27 = v25[2];
  uint64_t v26 = v25[3];
  if (v27 >= v26 >> 1) {
    unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v26 > 1),  v27 + 1,  1,  v25);
  }
  v25[2] = v27 + 1;
  int64_t v28 = (unint64_t)v25;
  unint64_t v29 = &v25[6 * v27];
  int64_t v30 = v329;
  uint64_t v31 = v331;
  v29[3] = v330;
  v29[4] = v31;
  v29[2] = v30;
LABEL_17:
  outlined retain of URLComponents((uint64_t)&v347);
  Swift::UInt64 v34 = URLComponents._URLComponents.percentEncodedUser.getter();
  v313 = v1;
  if (!v35)
  {
    outlined release of URLComponents((uint64_t)&v347);
    unsigned int v39 = 0LL;
    goto LABEL_36;
  }

  Swift::UInt v36 = v35;
  Swift::UInt v37 = HIBYTE(v35) & 0xF;
  if ((v35 & 0x2000000000000000LL) == 0) {
    Swift::UInt v37 = v34 & 0xFFFFFFFFFFFFLL;
  }
  if (v37)
  {
    *(void *)&v329 = v34;
    *((void *)&v329 + 1) = v35;
    MEMORY[0x1895F8858](v34);
    *(&v304 - 2) = (uint64_t)&v329;
    *(&v304 - 1) = v38;
    unsigned int v39 = 0LL;
    int v41 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)(&v304 - 4),  v40,  v36);
    if (v42 == 1)
    {
      uint64_t v44 = *((void *)&v329 + 1);
      uint64_t v43 = v329;
      swift_bridgeObjectRetain();
      Swift::UInt8 v45 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v43,  v44,  MEMORY[0x18961AFF8]);
      int v47 = v46;
      swift_bridgeObjectRelease();
    }

    else
    {
      Swift::UInt8 v45 = v41;
      int v47 = v42;
    }

    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v347);
    v1 = v313;
    if (!v47) {
      goto LABEL_36;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v347);
    Swift::UInt8 v45 = 0LL;
    unsigned int v39 = 0LL;
    int v47 = 0xE000000000000000LL;
  }

  *((void *)&v326[0] + 1) = MEMORY[0x189617FA8];
  *(void *)&v325 = v45;
  *((void *)&v325 + 1) = v47;
  v329 = xmmword_183725750;
  outlined init with take of Any(&v325, &v330);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v28 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v28 + 16) + 1LL,  1,  (void *)v28);
  }
  Swift::UInt8 v52 = *(void *)(v28 + 16);
  uint64_t v51 = *(void *)(v28 + 24);
  if (v52 >= v51 >> 1) {
    int64_t v28 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v51 > 1),  v52 + 1,  1,  (void *)v28);
  }
  *(void *)(v28 + 16) = v52 + 1;
  uint64_t v53 = (_OWORD *)(v28 + 48 * v52);
  uint64_t v54 = v329;
  uint64_t v55 = v331;
  v53[3] = v330;
  v53[4] = v55;
  v53[2] = v54;
LABEL_36:
  uint64_t v56 = v351;
  if ((void)v351)
  {
    uint64_t v57 = *((void *)&v350 + 1);
    uint64_t v58 = outlined retain of URLComponents((uint64_t)&v347);
    Swift::UInt v59 = v56;
  }

  else
  {
    if (BYTE11(v347) != 1 || !v309 || (v309[96] & 1) != 0) {
      goto LABEL_55;
    }
    outlined retain of URLComponents((uint64_t)&v347);
    Swift::UInt v68 = String.subscript.getter();
    uint64_t v57 = MEMORY[0x186E1B610](v68);
    Swift::UInt v59 = v69;
    v1 = v313;
    uint64_t v58 = swift_bridgeObjectRelease();
  }

  int64_t v60 = HIBYTE(v59) & 0xF;
  if ((v59 & 0x2000000000000000LL) == 0) {
    int64_t v60 = v57 & 0xFFFFFFFFFFFFLL;
  }
  if (!v60)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v347);
    int64_t v65 = 0LL;
    unint64_t v67 = 0xE000000000000000LL;
LABEL_50:
    *((void *)&v326[0] + 1) = MEMORY[0x189617FA8];
    *(void *)&v325 = v65;
    *((void *)&v325 + 1) = v67;
    v329 = xmmword_183725760;
    outlined init with take of Any(&v325, &v330);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
      int64_t v70 = (void *)v28;
    }
    else {
      int64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v28 + 16) + 1LL,  1,  (void *)v28);
    }
    int64_t v72 = v70[2];
    unint64_t v71 = v70[3];
    if (v72 >= v71 >> 1) {
      int64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v71 > 1),  v72 + 1,  1,  v70);
    }
    v70[2] = v72 + 1;
    int64_t v28 = (unint64_t)v70;
    Swift::UInt v73 = &v70[6 * v72];
    int64_t v74 = v329;
    uint64_t v75 = v331;
    v73[3] = v330;
    v73[4] = v75;
    v73[2] = v74;
    goto LABEL_55;
  }

  *(void *)&v329 = v57;
  *((void *)&v329 + 1) = v59;
  MEMORY[0x1895F8858](v58);
  *(&v304 - 2) = (uint64_t)&v329;
  *(&v304 - 1) = MEMORY[0x18961AFF8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v61 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)(&v304 - 4),  v57,  v59);
  if (v62 == 1)
  {
    unint64_t v64 = *((void *)&v329 + 1);
    uint64_t v63 = v329;
    swift_bridgeObjectRetain();
    int64_t v65 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v63, v64, MEMORY[0x18961AFF8]);
    unint64_t v67 = v66;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }

  else
  {
    int64_t v65 = v61;
    unint64_t v67 = v62;
    swift_bridgeObjectRelease_n();
  }

  outlined release of URLComponents((uint64_t)&v347);
  v1 = v313;
  if (v67) {
    goto LABEL_50;
  }
LABEL_55:
  outlined retain of URLComponents((uint64_t)&v347);
  uint64_t v76 = URLComponents._URLComponents.encodedHost.getter();
  if (!v77)
  {
    outlined release of URLComponents((uint64_t)&v347);
    goto LABEL_112;
  }

  unint64_t v78 = v76;
  int64_t v79 = v77;
  unint64_t v80 = HIBYTE(v77) & 0xF;
  unint64_t v81 = v76 & 0xFFFFFFFFFFFFLL;
  if ((v77 & 0x2000000000000000LL) != 0) {
    Swift::UInt v82 = HIBYTE(v77) & 0xF;
  }
  else {
    Swift::UInt v82 = v76 & 0xFFFFFFFFFFFFLL;
  }
  if (!v82)
  {
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v347);
    id v87 = 0LL;
    id v89 = 0xE000000000000000LL;
    goto LABEL_107;
  }

  if ((v355[24] & 1) != 0)
  {
    *(void *)&v329 = v76;
    *((void *)&v329 + 1) = v77;
    MEMORY[0x1895F8858](v76);
    *(&v304 - 2) = (uint64_t)&v329;
    *(&v304 - 1) = MEMORY[0x18961AFF8];
    Swift::UInt v83 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)(&v304 - 4),  v78,  v79);
    if (v84 == 1)
    {
      int64_t v86 = *((void *)&v329 + 1);
      unint64_t v85 = v329;
      swift_bridgeObjectRetain();
      id v87 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v85,  v86,  MEMORY[0x18961AFF8]);
      id v89 = v88;
      swift_bridgeObjectRelease();
    }

    else
    {
      id v87 = (uint64_t)v83;
      id v89 = v84;
    }

    goto LABEL_105;
  }

  if ((v77 & 0x1000000000000000LL) != 0) {
    goto LABEL_300;
  }
  if ((v77 & 0x2000000000000000LL) != 0)
  {
    *(void *)&v329 = v76;
    *((void *)&v329 + 1) = v77 & 0xFFFFFFFFFFFFFFLL;
    *(void *)&v325 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v325 + 1) = 0LL;
    swift_bridgeObjectRetain_n();
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v329,  v80,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v325,  0,  (unsigned __int8 *)&v329,  v80,  (uint64_t *)&v322);
    id v89 = *((void *)&v322 + 1);
    id v87 = v322;
    swift_release();
  }

  else
  {
    if ((v76 & 0x1000000000000000LL) != 0)
    {
      id v97 = (unsigned __int8 *)((v77 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      id v97 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      unint64_t v81 = v301;
    }

    *(void *)&v329 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v329 + 1) = 0LL;
    swift_bridgeObjectRetain_n();
    id v87 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v97,  v81,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v329,  0,  v97,  v81);
    id v89 = v98;
  }

  swift_bridgeObjectRelease();
  if (v89 != 1)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_106;
  }

  while (2)
  {
    *(void *)&v329 = v78;
    *((void *)&v329 + 1) = v79;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    uint64_t v127 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    __int128 v128 = objc_msgSend(v127, sel__fastCharacterContents);
    uint64_t v129 = v127;
    if (v128)
    {
      *(void *)&v329 = v78;
      *((void *)&v329 + 1) = v79;
      StringProtocol._ephemeralString.getter();
      __int128 v130 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      __int128 v131 = objc_msgSend(v130, sel_length);
      uint64_t v132 = swift_unknownObjectRelease();
      uint64_t v133 = MEMORY[0x1895F8858](v132);
      *((_BYTE *)&v304 - 16) = 0;
      MEMORY[0x1895F8858](v133);
      *(&v304 - 2) = (uint64_t)v128;
      *(&v304 - 1) = (uint64_t)v131;
      id v87 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v128,  (uint64_t)v131,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  v134,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t)(&v304 - 4));
      id v89 = v135;
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v347);
      if (!v89)
      {
LABEL_94:
        v1 = v313;
        goto LABEL_112;
      }
    }

    else
    {
      *(void *)&v329 = v78;
      *((void *)&v329 + 1) = v79;
      swift_bridgeObjectRetain();
      uint64_t v138 = String.init<A>(_:)();
      __int128 v140 = v139;
      if ((v139 & 0x1000000000000000LL) != 0)
      {
        uint64_t v138 = static String._copying(_:)();
        v303 = v302;
        swift_bridgeObjectRelease();
        __int128 v140 = v303;
      }

      if ((v140 & 0x2000000000000000LL) != 0)
      {
        *(void *)&v329 = v138;
        *((void *)&v329 + 1) = v140 & 0xFFFFFFFFFFFFFFLL;
        *(void *)&v325 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v325 + 1) = 0LL;
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v329,  HIBYTE(v140) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v325,  0,  (unsigned __int8 *)&v329,  HIBYTE(v140) & 0xF,  (uint64_t *)&v322);
        id v89 = *((void *)&v322 + 1);
        id v87 = v322;
        swift_release();
      }

      else
      {
        if ((v138 & 0x1000000000000000LL) != 0)
        {
          __int128 v141 = (unsigned __int8 *)((v140 & 0xFFFFFFFFFFFFFFFLL) + 32);
          __int128 v142 = v138 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          __int128 v141 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }

        *(void *)&v329 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v329 + 1) = 0LL;
        id v87 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v141,  v142,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v329,  0,  v141,  v142);
        id v89 = v143;
      }

      swift_bridgeObjectRelease_n();
LABEL_105:
      swift_bridgeObjectRelease();
LABEL_106:
      outlined release of URLComponents((uint64_t)&v347);
      if (!v89) {
        goto LABEL_94;
      }
    }

  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  swift_once();
LABEL_8:
  if (static JSONEncoder.compatibility1 == 1)
  {
    uint64_t v44 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS10Foundation13JSONReferenceCG_So8NSStringC3key_AH5valuets5NeverOTg5061_s10Foundation10JSONWriterV15serializeObject_5depthySDySSAA13e11CG_SitKFSo8F31C3key_AG5valuetSSAK_AgLt_tXEfU_Tf1cn_n((uint64_t)_._rawValue);
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)( &v44,  (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(),  specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    if (!v5)
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = *(void *)(v44 + 16);
      if (v6)
      {
        uint64_t v7 = (uint64_t *)(v44 + 40);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = (void *)*(v7 - 1);
          uint64_t v10 = *v7;
          uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
          uint64_t v13 = v12;
          if ((v8 & 1) != 0)
          {
            uint64_t v14 = v9;
            swift_retain();
          }

          else if ((v2[1] & 1) != 0)
          {
            uint64_t v44 = 2604LL;
            Swift::UInt8 v45 = 0xE200000000000000LL;
            uint64_t v15 = v9;
            swift_retain();
            specialized String.withUTF8<A>(_:)(&v44);
            swift_bridgeObjectRelease();
            JSONWriter.writeIndent()();
          }

          else
          {
            uint64_t v44 = 44LL;
            Swift::UInt8 v45 = 0xE100000000000000LL;
            uint64_t v16 = v9;
            swift_retain();
            specialized String.withUTF8<A>(_:)(&v44);
            swift_bridgeObjectRelease();
          }

          uint64_t v44 = 34LL;
          Swift::UInt8 v45 = 0xE100000000000000LL;
          specialized String.withUTF8<A>(_:)(&v44);
          swift_bridgeObjectRelease();
          uint64_t v44 = (uint64_t)v11;
          Swift::UInt8 v45 = v13;
          swift_bridgeObjectRetain();
          specialized String.withUTF8<A>(_:)(&v44, (uint64_t)v2);
          swift_bridgeObjectRelease();
          Swift::UInt v42 = 34LL;
          uint64_t v43 = 0xE100000000000000LL;
          specialized String.withUTF8<A>(_:)(&v42);
          swift_bridgeObjectRelease();
          if (*((_BYTE *)v2 + 8) == 1)
          {
            uint64_t v44 = 2112032LL;
            Swift::UInt8 v45 = 0xE300000000000000LL;
          }

          else
          {
            uint64_t v44 = 58LL;
            Swift::UInt8 v45 = 0xE100000000000000LL;
          }

          specialized String.withUTF8<A>(_:)(&v44);
          swift_bridgeObjectRelease();
          JSONWriter.serializeJSON(_:depth:)(v10);
          swift_release();

          swift_bridgeObjectRelease();
          uint64_t v8 = 0;
          v7 += 2;
          --v6;
        }

        while (v6);
      }

      goto LABEL_65;
    }

        if ((v55 & 1) != 0) {
          goto LABEL_126;
        }
        uint64_t v63 = &v30[16 * v32];
        int64_t v65 = *(void *)v63;
        unint64_t v64 = *((void *)v63 + 1);
        uint64_t v43 = __OFSUB__(v64, v65);
        unint64_t v66 = v64 - v65;
        if (v43) {
          goto LABEL_129;
        }
        if (v66 < v54) {
          goto LABEL_15;
        }
LABEL_78:
        unint64_t v71 = v32 - 1;
        if (v32 - 1 >= v11)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }

        if (!v10) {
          goto LABEL_145;
        }
        int64_t v72 = &v30[16 * v71];
        Swift::UInt v73 = *(void *)v72;
        int64_t v74 = &v30[16 * v32];
        uint64_t v75 = *((void *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)( (unint64_t *)(v10 + 24LL * *(void *)v72),  (unint64_t *)(v10 + 24LL * *(void *)v74),  v10 + 24 * v75,  __dst);
        if (v1) {
          goto LABEL_95;
        }
        if (v75 < v73) {
          goto LABEL_119;
        }
        if (v32 > *((void *)v110 + 2)) {
          goto LABEL_120;
        }
        *(void *)int64_t v72 = v73;
        *(void *)&v30[16 * v71 + 8] = v75;
        uint64_t v76 = *((void *)v110 + 2);
        if (v32 >= v76) {
          goto LABEL_121;
        }
        unint64_t v27 = v110;
        uint64_t v11 = v76 - 1;
        memmove(&v30[16 * v32], v74 + 16, 16 * (v76 - 1 - v32));
        *((void *)v110 + 2) = v76 - 1;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }

    uint64_t v11 = 1LL;
LABEL_15:
    uint64_t v3 = v108;
    if (v9 >= v108)
    {
      uint64_t v8 = v106;
      id v97 = v110;
      uint64_t v2 = v105;
      goto LABEL_105;
    }
  }

            unsigned int v39 = v79;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_23;
          }
        }

        __break(1u);
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }

      goto LABEL_81;
    }
  }

  unint64_t v71 = v14;
  unsigned int v39 = v79;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::UInt v69 = MEMORY[0x18961AFE8];
LABEL_23:
  memset(v96, 0, 20);
  id v87 = v70;
  id v88 = v83;
  uint64_t v40 = v39;
  id v89 = v39;
  id v90 = v82;
  id v91 = v81;
  id v92 = v80;
  id v93 = v86;
  id v94 = v85;
  id v95 = v84;
  isNegative_getter = _So9NSDecimala__isNegative_getter(&v87);
  id v87 = v13;
  id v88 = v71;
  id v89 = v77;
  id v90 = v16;
  id v91 = v76;
  id v92 = v75;
  id v93 = v19;
  id v94 = v74;
  id v95 = v73;
  Swift::UInt v42 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v87);
  _So9NSDecimala__isNegative_setter(v42, v96);
  id v87 = v70;
  id v88 = v83;
  id v89 = v40;
  id v90 = v82;
  id v91 = v81;
  id v92 = v80;
  id v93 = v86;
  id v94 = v85;
  id v95 = v84;
  uint64_t v43 = _So9NSDecimala__exponent_getter((char *)&v87);
  id v87 = v13;
  id v88 = v71;
  id v89 = v77;
  id v90 = v16;
  id v91 = v76;
  id v92 = v75;
  id v93 = v19;
  id v94 = v74;
  id v95 = v73;
  uint64_t v44 = _So9NSDecimala__exponent_getter((char *)&v87) + v43;
  v45._rawValue = (void *)v69;
  if (*(void *)(v69 + 16) >= 9uLL)
  {
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v69, a4);
    unint64_t v64 = v46;
    int64_t v65 = v47;
    swift_bridgeObjectRelease();
    if (v65 > 0x7FFFFFFF)
    {
LABEL_79:
      __break(1u);
    }

    else
    {
      uint64_t v58 = __OFADD__((_DWORD)v44, (_DWORD)v65);
      uint64_t v44 = (v44 + v65);
      if (!v58)
      {
        v45._rawValue = v64;
        goto LABEL_62;
      }
    }

    __break(1u);
LABEL_81:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_82;
  }

    id v90 = (v66 - 1) & v66;
    Swift::UInt v48 = v67;
    Swift::UInt64 v49 = __clz(__rbit64(v66)) + (v67 << 6);
LABEL_47:
    Swift::UInt v50 = 96 * v49;
    uint64_t v51 = *(void *)(v30 + 48) + 96 * v49;
    Swift::UInt8 v52 = *(void *)(v51 + 8);
    uint64_t v53 = *(void *)(v51 + 16);
    uint64_t v54 = *(void *)(v51 + 24);
    uint64_t v55 = *(_BYTE *)(v51 + 32);
    uint64_t v56 = *(_BYTE *)(v51 + 56);
    uint64_t v57 = *(void *)(v51 + 64);
    uint64_t v58 = *(void *)(v51 + 72);
    Swift::UInt v59 = *(_BYTE *)(v51 + 80);
    int64_t v60 = 8 * v49;
    uint64_t v61 = *(void *)(*(void *)(v30 + 56) + v60);
    uint64_t v62 = *(void *)(v51 + 88);
    uint64_t v63 = *(void *)(v37 + 48) + v50;
    unint64_t v64 = *(_OWORD *)(v51 + 40);
    *(void *)uint64_t v63 = *(void *)v51;
    *(void *)(v63 + 8) = v52;
    *(void *)(v63 + 16) = v53;
    *(void *)(v63 + 24) = v54;
    *(_BYTE *)(v63 + 32) = v55;
    *(_OWORD *)(v63 + 40) = v64;
    *(_BYTE *)(v63 + 56) = v56;
    *(void *)(v63 + 64) = v57;
    *(void *)(v63 + 72) = v58;
    *(_BYTE *)(v63 + 80) = v59;
    *(void *)(v63 + 88) = v62;
    *(void *)(*(void *)(v37 + 56) + v60) = v61;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v44 = v48;
    int v47 = v90;
  }

  Swift::UInt v68 = v65 + 7;
  if (v68 >= v86) {
    goto LABEL_71;
  }
  Swift::UInt v69 = v11;
  int64_t v70 = v37;
  unint64_t v66 = *(void *)&v88[8 * v68];
  if (v66)
  {
    unint64_t v67 = v68;
    goto LABEL_70;
  }

  while (1)
  {
    unint64_t v67 = v68 + 1;
    if (__OFADD__(v68, 1LL)) {
      break;
    }
    Swift::UInt v37 = v70;
    unint64_t v25 = v81;
    v1 = v78;
    uint64_t v11 = v69;
    if (v67 >= v86) {
      goto LABEL_71;
    }
    unint64_t v66 = *(void *)&v88[8 * v67];
    ++v68;
    if (v66) {
      goto LABEL_70;
    }
  }

                  __break(1u);
                  goto LABEL_71;
                }

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
    if (!v121) {
      return 0LL;
    }
LABEL_12:
    if ((a1[168] & 1) != 0) {
      int64_t v30 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      int64_t v30 = String.subscript.getter();
    }
    int64_t v70 = v30;
    unint64_t v71 = v31;
    int64_t v72 = v32;
    Swift::UInt v73 = v33;
    int64_t v74 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v30,  v31,  v32,  v33,  0x10u,  1);
    if (v74 == 2)
    {
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      uint64_t v75 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v76 = (unsigned __int16 *)objc_msgSend(v75, sel__fastCharacterContents);
      uint64_t v77 = v75;
      if (!v76)
      {
        swift_bridgeObjectRetain();
        uint64_t v105 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v70,  v71,  v72,  v73,  0x10u,  1);
        swift_bridgeObjectRelease_n();
        if (!v105) {
          return 0LL;
        }
        goto LABEL_35;
      }

      StringProtocol._ephemeralString.getter();
      unint64_t v78 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      int64_t v79 = objc_msgSend(v78, sel_length);
      swift_unknownObjectRelease();
      int64_t v74 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v76,  (uint64_t)v79,  0x10u,  1);
    }

    unint64_t v80 = v74;
    swift_bridgeObjectRelease();
    if ((v80 & 1) == 0) {
      return 0LL;
    }
LABEL_35:
    if ((a1[192] & 1) == 0)
    {
      unint64_t v81 = String.subscript.getter();
      Swift::UInt v83 = v82;
      unint64_t v85 = v84;
      id v87 = v86;
      id v88 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v81,  v82,  v84,  v86,  0x40u,  1);
      if (v88 != 2) {
        goto LABEL_39;
      }
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      id v89 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v90 = (unsigned __int16 *)objc_msgSend(v89, sel__fastCharacterContents);
      id v91 = v89;
      if (v90)
      {
        StringProtocol._ephemeralString.getter();
        id v92 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v93 = objc_msgSend(v92, sel_length);
        swift_unknownObjectRelease();
        id v88 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v90,  (uint64_t)v93,  0x40u,  1);
LABEL_39:
        id v94 = v88;
        swift_bridgeObjectRelease();
        if ((v94 & 1) == 0) {
          return 0LL;
        }
        goto LABEL_40;
      }

      swift_bridgeObjectRetain();
      uint64_t v132 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v81,  v83,  v85,  v87,  0x40u,  1);
      swift_bridgeObjectRelease_n();
      if (!v132) {
        return 0LL;
      }
    }

            uint64_t v26 = __clz(__rbit64(v27)) + (a2 << 6);
          }

          __asm { BR              X8 }
        }
      }

      uint64_t v16 = v35;
      if (!v35) {
        goto LABEL_7;
      }
      int64_t v30 = (void *)(v35 + 64);
      uint64_t v11 = 1LL << *(_BYTE *)(v35 + 32);
      if (v11 < 64) {
        uint64_t v17 = ~(-1LL << v11);
      }
      else {
        uint64_t v17 = -1LL;
      }
      uint64_t v18 = v17 & *(void *)(v35 + 64);
      outlined retain of LocalePreferences?( (uint64_t)v33,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      swift_bridgeObjectRetain();
      uint64_t v19 = MEMORY[0x18961AFF0];
      if (v18)
      {
        uint64_t v20 = __clz(__rbit64(v18));
        goto LABEL_48;
      }

      if ((unint64_t)(v11 + 63) >> 6 > 1)
      {
        uint64_t v21 = v30[1];
        a2 = 1LL;
        if (v21) {
          goto LABEL_47;
        }
        a2 = 2LL;
        uint64_t v21 = v30[2];
        if (v21) {
          goto LABEL_47;
        }
        a2 = 3LL;
        uint64_t v21 = v30[3];
        if (v21)
        {
LABEL_47:
          uint64_t v20 = __clz(__rbit64(v21)) + (a2 << 6);
LABEL_48:
          __asm { BR              X8 }
        }

        unint64_t v22 = 4LL;
        if ((unint64_t)(v11 + 63) >> 6 > 4)
        {
          uint64_t v21 = v30[4];
          if (v21)
          {
            a2 = 4LL;
            goto LABEL_47;
          }

          while (1)
          {
            a2 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              break;
            }
            uint64_t v21 = v30[a2];
            ++v22;
            if (v21) {
              goto LABEL_47;
            }
          }

          __break(1u);
          __break(1u);
          goto LABEL_88;
        }
      }

    __break(1u);
LABEL_71:
    v190[1] = v40;
    v191 = v48;
    v192 = v47;
    __int128 v169 = (void *)v46;
    v193 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
    uint64_t v170 = static _DictionaryStorage.copy(original:)();
    uint64_t v46 = v170;
    v196 = v169;
    if (v169[2]) {
      break;
    }
LABEL_105:
    swift_bridgeObjectRelease();
    v165 = (uint64_t)v202;
    unint64_t v22 = v193;
    Swift::UInt v48 = v191;
    if ((v192 & 1) != 0)
    {
LABEL_55:
      __int128 v166 = *(void *)(v46 + 56);
      __int128 v167 = 8 * v48;
      swift_release();
      uint64_t v40 = v198;
      *(void *)(v166 + v167) = v198;
    }

    else
    {
LABEL_106:
      v189 = v48;
      outlined init with copy of ICUNumberFormatter.Signature( v22,  v165,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      uint64_t v40 = v198;
      specialized _NativeDictionary._insert(at:key:value:)(v189, v165, v198, (void *)v46);
    }

    countAndFlagsBits = v220._countAndFlagsBits;
    object = v220._object;
    *((void *)v34 + 2) = v46;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v197);
    swift_release_n();
    swift_bridgeObjectRelease();
  }

  __int128 v171 = (char *)(v170 + 64);
  __int128 v172 = 1LL << *(_BYTE *)(v46 + 32);
  v195 = (char *)(v196 + 8);
  __int128 v173 = (unint64_t)(v172 + 63) >> 6;
  if ((void *)v46 != v196 || v171 >= &v195[8 * v173]) {
    memmove(v171, v195, 8 * v173);
  }
  v199 = 0LL;
  __int128 v174 = v196;
  *(void *)(v46 + 16) = v196[2];
  uint64_t v175 = 1LL << *((_BYTE *)v174 + 32);
  v176 = -1LL;
  if (v175 < 64) {
    v176 = ~(-1LL << v175);
  }
  v177 = v176 & v174[8];
  v194 = (unint64_t)(v175 + 63) >> 6;
  int v38 = v202;
  while (2)
  {
    if (v177)
    {
      v178 = __clz(__rbit64(v177));
      v177 &= v177 - 1;
      v179 = v178 | (v199 << 6);
LABEL_79:
      v180 = v196;
      v181 = *(void *)(v224 + 72) * v179;
      outlined init with copy of ICUNumberFormatter.Signature( v196[6] + v181,  (uint64_t)v38,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      v182 = v180[7];
      v183 = 8 * v179;
      v184 = *(void *)(v182 + 8 * v179);
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v38,  *(void *)(v46 + 48) + v181,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      *(void *)(*(void *)(v46 + 56) + v183) = v184;
      swift_retain();
      continue;
    }

    break;
  }

  v185 = v199 + 1;
  if (__OFADD__(v199, 1LL))
  {
    __break(1u);
    goto LABEL_112;
  }

  if (v185 >= v194) {
    goto LABEL_105;
  }
  v186 = *(void *)&v195[8 * v185];
  v187 = v199 + 1;
  if (v186) {
    goto LABEL_104;
  }
  v187 = v199 + 2;
  if (v199 + 2 >= v194) {
    goto LABEL_105;
  }
  v186 = *(void *)&v195[8 * v187];
  if (v186) {
    goto LABEL_104;
  }
  v187 = v199 + 3;
  if (v199 + 3 >= v194) {
    goto LABEL_105;
  }
  v186 = *(void *)&v195[8 * v187];
  if (v186) {
    goto LABEL_104;
  }
  v187 = v199 + 4;
  if (v199 + 4 >= v194) {
    goto LABEL_105;
  }
  v186 = *(void *)&v195[8 * v187];
  if (v186) {
    goto LABEL_104;
  }
  v187 = v199 + 5;
  if (v199 + 5 >= v194) {
    goto LABEL_105;
  }
  v186 = *(void *)&v195[8 * v187];
  if (v186) {
    goto LABEL_104;
  }
  v187 = v199 + 6;
  if (v199 + 6 >= v194) {
    goto LABEL_105;
  }
  v186 = *(void *)&v195[8 * v187];
  if (v186) {
    goto LABEL_104;
  }
  v187 = v199 + 7;
  if (v199 + 7 >= v194) {
    goto LABEL_105;
  }
  v186 = *(void *)&v195[8 * v187];
  if (v186) {
    goto LABEL_104;
  }
  v187 = v199 + 8;
  if (v199 + 8 >= v194) {
    goto LABEL_105;
  }
  v186 = *(void *)&v195[8 * v187];
  if (v186)
  {
LABEL_104:
    v177 = (v186 - 1) & v186;
    v199 = v187;
    v179 = __clz(__rbit64(v186)) + (v187 << 6);
    goto LABEL_79;
  }

  v188 = v199 + 9;
  if (v199 + 9 >= v194) {
    goto LABEL_105;
  }
  v186 = *(void *)&v195[8 * v188];
  if (v186)
  {
    v187 = v199 + 9;
    goto LABEL_104;
  }

  while (1)
  {
    v187 = v188 + 1;
    if (__OFADD__(v188, 1LL)) {
      break;
    }
    if (v187 >= v194) {
      goto LABEL_105;
    }
    v186 = *(void *)&v195[8 * v187];
    ++v188;
    if (v186) {
      goto LABEL_104;
    }
  }

      LOBYTE(v174) = 6;
      v176 = 5;
      v177._time = v10;
      v186 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v174,  (Foundation::Calendar::Component)&v176,  a3);
      value = v186.value;
      if (v186.is_nil) {
        goto LABEL_401;
      }
      a3._time = (v10 - floor(v10) + (double)v186.value + -1.0) * 1000000000.0;
      if ((~*(void *)&a3._time & 0x7FF0000000000000LL) == 0) {
        goto LABEL_418;
      }
      if (a3._time <= -9.22337204e18)
      {
LABEL_419:
        __break(1u);
        goto LABEL_420;
      }

      if (a3._time >= 9.22337204e18)
      {
LABEL_420:
        __break(1u);
LABEL_421:
        __break(1u);
        goto LABEL_422;
      }

      value = (uint64_t)a3._time + 1;
      if (__OFADD__((uint64_t)a3._time, 1LL))
      {
        __break(1u);
LABEL_77:
        LODWORD(v174) = 0;
        v176 = 3;
        uint64_t v175 = 11;
        v177._time = v10;
        v187 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
        value = v187.value;
        if (v187.is_nil) {
          goto LABEL_401;
        }
        unsigned int v39 = v187.value - 1;
        if (__OFSUB__(v187.value, 1LL)) {
          goto LABEL_421;
        }
        uint64_t v40 = 24 * v39;
        if ((unsigned __int128)(v39 * (__int128)24LL) >> 64 != (24 * v39) >> 63)
        {
LABEL_422:
          __break(1u);
          goto LABEL_423;
        }

        int v41 = ucal_get();
        Swift::UInt v42 = v40 + v41;
        if (__OFADD__(v40, v41))
        {
LABEL_423:
          __break(1u);
LABEL_424:
          __break(1u);
          goto LABEL_425;
        }

        value = v42 + 1;
        if (__OFADD__(v42, 1LL))
        {
          __break(1u);
LABEL_84:
          LODWORD(v174) = 0;
          v176 = 4;
          uint64_t v175 = 11;
          v177._time = v10;
          v188 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
          value = v188.value;
          if (v188.is_nil) {
            goto LABEL_401;
          }
          uint64_t v43 = v188.value - 1;
          if (__OFSUB__(v188.value, 1LL)) {
            goto LABEL_424;
          }
          uint64_t v44 = 60 * v43;
          if ((unsigned __int128)(v43 * (__int128)60LL) >> 64 != (60 * v43) >> 63)
          {
LABEL_425:
            __break(1u);
            goto LABEL_426;
          }

          Swift::UInt8 v45 = ucal_get();
          uint64_t v46 = v44 + v45;
          if (__OFADD__(v44, v45))
          {
LABEL_426:
            __break(1u);
LABEL_427:
            __break(1u);
            goto LABEL_428;
          }

          value = v46 + 1;
          if (__OFADD__(v46, 1LL))
          {
            __break(1u);
LABEL_91:
            LODWORD(v174) = 0;
            v176 = 5;
            uint64_t v175 = 11;
            v177._time = v10;
            v189 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v176,  (Foundation::Calendar::Component)&v175,  a3);
            value = v189.value;
            if (v189.is_nil) {
              goto LABEL_401;
            }
            int v47 = v189.value - 1;
            if (__OFSUB__(v189.value, 1LL)) {
              goto LABEL_427;
            }
            Swift::UInt v48 = 60 * v47;
            if ((unsigned __int128)(v47 * (__int128)60LL) >> 64 != (60 * v47) >> 63)
            {
LABEL_428:
              __break(1u);
              goto LABEL_429;
            }

            Swift::UInt64 v49 = ucal_get();
            Swift::UInt v50 = v48 + v49;
            if (__OFADD__(v48, v49))
            {
LABEL_429:
              __break(1u);
LABEL_430:
              __break(1u);
              goto LABEL_431;
            }

            value = v50 + 1;
            if (__OFADD__(v50, 1LL))
            {
              __break(1u);
LABEL_98:
              LOBYTE(v174) = 6;
              v176 = 11;
              v177._time = v10;
              v190 = _CalendarICU._locked_ordinality(of:in:for:)( (Foundation::Calendar::Component)&v174,  (Foundation::Calendar::Component)&v176,  a3);
              value = v190.value;
              if (v190.is_nil) {
                goto LABEL_401;
              }
              uint64_t v51 = (v10 - floor(v10) + (double)v190.value + -1.0) * 1000000000.0;
              if ((~*(void *)&v51 & 0x7FF0000000000000LL) == 0) {
                goto LABEL_430;
              }
              if (v51 <= -9.22337204e18)
              {
LABEL_431:
                __break(1u);
                goto LABEL_432;
              }

              if (v51 >= 9.22337204e18)
              {
LABEL_432:
                __break(1u);
LABEL_433:
                __break(1u);
                goto LABEL_434;
              }

              value = (uint64_t)v51 + 1;
              if (__OFADD__((uint64_t)v51, 1LL))
              {
                __break(1u);
LABEL_105:
                uint64_t v11 = *(void *)(v4 + 56);
LABEL_106:
                Swift::UInt8 v52 = __OFSUB__(value, v11);
                uint64_t v53 = value - v11;
                if (!v52)
                {
                  if (v53 <= 0) {
                    value = v53 + 7;
                  }
                  else {
                    value = v53;
                  }
                  LOBYTE(v8) = 0;
                  goto LABEL_401;
                }

        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }

      uint64_t v15 = v19;
    }

      swift_unknownObjectRelease();
      unsigned int v39 = v167;
      swift_unknownObjectRelease();
      uint64_t v43 = v26 & 0xFFFFFFFFFFFFF0FFLL | (v44 << 8);
      goto LABEL_71;
    }

    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)&v206);
    swift_unknownObjectRelease();
    int v41 = *(unsigned __int16 *)(v22 + 16);
    Swift::UInt v42 = *(_BYTE *)(v22 + 18);
    swift_unknownObjectRelease_n();
    unint64_t v27 = 0LL;
    unsigned int v39 = 0LL;
    uint64_t v43 = ((-15LL << ((4 * v42 + 8) & 0x3C)) - 1) & v26 | (unint64_t)(v41 << ((4 * v42 + 8) & 0x3C));
LABEL_71:
    swift_unknownObjectRetain();
    __int128 v166 = v43;
    uint64_t v40 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v168, v43, v39, v22, v173);
    swift_unknownObjectRelease_n();
    uint64_t v21 = v165;
LABEL_72:
    uint64_t v159 = v25 - v27;
    if (__OFSUB__(v25, v27)) {
      goto LABEL_209;
    }
    if (v168 != *(void *)(v21 + 88)) {
      goto LABEL_210;
    }
    __int128 v167 = v39;
    if (v39)
    {
      Swift::UInt v50 = v39 + 24 * ((v166 >> ((4 * *(_BYTE *)(v39 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v51 = *(void *)(v50 + 32);
      Swift::UInt8 v52 = *(void *)(v50 + 40);
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v53 = *(void *)(v21 + 64);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v166, v53);
      Swift::UInt8 v52 = v54;
      uint64_t v51 = v55;
      uint64_t result = swift_unknownObjectRelease();
    }

    if (*((uint64_t *)&v206 + 1) >= v40)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_178;
    }

    __int128 v143 = v52;
    __int128 v144 = (uint64_t *)(v162 + 40);
    __int128 v172 = v51;
    uint64_t v138 = *((void *)&v206 + 1);
    while (2)
    {
      uint64_t v56 = *(void *)(v21 + 64);
      uint64_t v57 = *(uint64_t **)(v21 + 72);
      Swift::UInt v59 = *(void *)(v21 + 80);
      uint64_t v58 = *(void *)(v21 + 88);
      v188 = v168;
      int64_t v60 = v166;
      v189 = v166;
      v190 = v167;
      if (v168 != v58) {
        goto LABEL_213;
      }
      if (v56)
      {
        uint64_t v61 = *(unsigned __int8 *)(v56 + 18);
        uint64_t result = swift_unknownObjectRetain();
        if (v60 <= v61) {
          goto LABEL_214;
        }
      }

      else if (!v166)
      {
        goto LABEL_214;
      }

      uint64_t v62 = v167;
      uint64_t v158 = v40;
      if (v167)
      {
        uint64_t v63 = (4 * *(_BYTE *)(v167 + 18) + 8) & 0x3C;
        if (((v60 >> v63) & 0xF) != 0)
        {
          unint64_t v64 = ((((v60 >> v63) & 0xF) - 1) << v63) | ((-15LL << v63) - 1) & v60;
          v189 = v64;
LABEL_134:
          id v92 = (v64 >> ((4 * *(_BYTE *)(v62 + 18) + 8) & 0x3C)) & 0xF;
          __int128 v167 = v62;
          unint64_t v80 = *(void *)(v62 + 24LL * v92 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v81 = 0;
          goto LABEL_135;
        }
      }

      __int128 v173 = v59;
      int64_t v65 = (4 * *(_BYTE *)(v56 + 18) + 8) & 0x3C;
      unint64_t v66 = (v60 >> v65) & 0xF;
      if (!*(_BYTE *)(v56 + 18))
      {
        if (!v66) {
          goto LABEL_226;
        }
        unint64_t v64 = ((v66 - 1) << v65) | ((-15LL << v65) - 1) & v60;
        v189 = v64;
        v190 = v56;
        uint64_t v62 = v56;
        if (v56) {
          goto LABEL_134;
        }
        goto LABEL_98;
      }

      unint64_t v67 = v56 + 24;
      if (v66 < *(unsigned __int16 *)(v56 + 16))
      {
        uint64_t v170 = v57;
        Swift::UInt v68 = *(void *)(v67 + 24 * ((v60 >> v65) & 0xF));
        Swift::UInt v69 = (4 * *(_BYTE *)(v68 + 18) + 8) & 0x3C;
        int64_t v70 = (v60 >> v69) & 0xF;
        if (!*(_BYTE *)(v68 + 18))
        {
          if (v70)
          {
            v189 = ((v70 - 1) << v69) | ((-15LL << v69) - 1) & v166;
            v190 = v68;
            swift_unknownObjectRetain();
            uint64_t v62 = v68;
            goto LABEL_132;
          }

          uint64_t result = swift_unknownObjectRetain();
LABEL_110:
          if (!v66) {
            goto LABEL_222;
          }
          goto LABEL_111;
        }

        unint64_t v71 = (uint64_t *)(v68 + 24);
        if (v70 >= *(unsigned __int16 *)(v68 + 16))
        {
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRetain();
LABEL_104:
          if (v70)
          {
            Swift::UInt v82 = v71[3 * (int)v70 - 3];
            if (!*(_WORD *)(v82 + 16)) {
              goto LABEL_229;
            }
            Swift::UInt v83 = *(unsigned __int16 *)(v82 + 16) - 1LL;
            int64_t v84 = *(unsigned __int8 *)(v82 + 18);
            v189 = ((-15LL << ((4 * v84 + 8) & 0x3C)) - 1) & (v189 & ((-15LL << v69) - 1) | ((v70 - 1) << v69)) | (v83 << ((4 * v84 + 8) & 0x3C));
            if (v84)
            {
              swift_unknownObjectRetain();
              uint64_t v62 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v82 + 24, v83, v137);
              swift_unknownObjectRelease();
            }

            else
            {
              uint64_t v62 = v82;
            }

            v190 = v62;
            goto LABEL_131;
          }

          uint64_t result = swift_unknownObjectRelease();
          goto LABEL_110;
        }

        __int128 v169 = (uint64_t *)(v68 + 24);
        int64_t v72 = v71[3 * v70];
        Swift::UInt v73 = (4 * *(_BYTE *)(v72 + 18) + 8) & 0x3C;
        int64_t v74 = (v166 >> v73) & 0xF;
        if (!*(_BYTE *)(v72 + 18))
        {
          if (v74)
          {
            v189 = ((v74 - 1) << v73) | ((-15LL << v73) - 1) & v166;
            v190 = v72;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            uint64_t v62 = v72;
LABEL_131:
            swift_unknownObjectRelease();
            goto LABEL_132;
          }

          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRetain();
          unint64_t v71 = v169;
          goto LABEL_104;
        }

        uint64_t v75 = v72 + 24;
        if (v74 >= *(unsigned __int16 *)(v72 + 16))
        {
          __int128 v166 = (4 * *(_BYTE *)(v72 + 18) + 8) & 0x3C;
          __int128 v167 = v72 + 24;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
        }

        else
        {
          v164 = v72;
          uint64_t v76 = *(void *)(v75 + 24 * ((v166 >> v73) & 0xF));
          uint64_t v77 = *(unsigned __int8 *)(v76 + 18);
          unint64_t v78 = (4 * v77 + 8) & 0x3C;
          int64_t v79 = (v166 >> v78) & 0xF;
          *(void *)&v179 = v79;
          if (v77)
          {
            __int128 v166 = v73;
            __int128 v167 = v75;
            char v163 = v76 + 16;
            uint64_t v145 = v76 + 24;
            LODWORD(v140) = v77;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            LODWORD(v163) = specialized closure #1 in Rope._Node.formPredecessor(of:)( v163,  v145,  (uint64_t *)&v179,  (uint64_t)&v188,  v140);
            uint64_t result = swift_unknownObjectRelease();
            if ((v163 & 1) != 0)
            {
              uint64_t v62 = v190;
LABEL_130:
              swift_unknownObjectRelease();
              goto LABEL_131;
            }

            goto LABEL_119;
          }

          if (v79)
          {
            v189 = ((v79 - 1) << v78) | ((-15LL << v78) - 1) & v166;
            uint64_t v62 = v76;
            v190 = v76;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            goto LABEL_130;
          }

          __int128 v166 = v73;
          __int128 v167 = v75;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
        }

        uint64_t result = swift_unknownObjectRetain();
LABEL_119:
        if (v74)
        {
          id v89 = v74 - 1;
          uint64_t v62 = *(void *)(v167 + 24LL * ((int)v74 - 1));
          if (!*(_WORD *)(v62 + 16)) {
            goto LABEL_230;
          }
          id v90 = *(unsigned __int16 *)(v62 + 16) - 1LL;
          id v91 = *(unsigned __int8 *)(v62 + 18);
          v189 = ((-15LL << ((4 * v91 + 8) & 0x3C)) - 1) & (v189 & ((-15LL << v166) - 1) | (v89 << v166)) | (v90 << ((4 * v91 + 8) & 0x3C));
          if (v91)
          {
            swift_unknownObjectRetain();
            uint64_t v62 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v62 + 24, v90, v137);
            swift_unknownObjectRelease();
          }

          v190 = v62;
          swift_unknownObjectRelease();
          goto LABEL_131;
        }

        uint64_t result = swift_unknownObjectRelease();
        unint64_t v71 = v169;
        goto LABEL_104;
      }

      uint64_t result = swift_unknownObjectRetain();
      if (!v66) {
        goto LABEL_222;
      }
LABEL_111:
      unint64_t v85 = v66 - 1;
      int64_t v86 = *(void *)(v67 + 24LL * ((int)v66 - 1));
      if (!*(_WORD *)(v86 + 16)) {
        goto LABEL_223;
      }
      id v87 = *(unsigned __int16 *)(v86 + 16) - 1LL;
      id v88 = *(unsigned __int8 *)(v86 + 18);
      v189 = ((-15LL << ((4 * v88 + 8) & 0x3C)) - 1) & (v189 & ((-15LL << v65) - 1) | (v85 << v65)) | (v87 << ((4 * v88 + 8) & 0x3C));
      if (v88)
      {
        swift_unknownObjectRetain();
        uint64_t v62 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v86 + 24, v87, v137);
        swift_unknownObjectRelease();
        v190 = v62;
      }

      else
      {
        uint64_t v62 = v86;
        v190 = v86;
      }

        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }

      if (a4)
      {
LABEL_17:
        Swift::UInt v36 = *(void *)(a4 + 16);
        int v35 = v22;
        Swift::UInt64 v34 = v121;
        if (!v36) {
          return result;
        }
        swift_bridgeObjectRetain_n();
        Swift::UInt v37 = 40LL;
        do
        {
          if (!*(void *)(a4 + v37))
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            Swift::UInt64 v33 = v125;
            goto LABEL_44;
          }

          swift_bridgeObjectRelease();
          v37 += 16LL;
          --v36;
        }

        while (v36);
        uint64_t result = swift_bridgeObjectRelease_n();
        Swift::UInt64 v33 = v125;
        if ((v114 & 1) == 0) {
          return result;
        }
        goto LABEL_22;
      }

      unint64_t v29 = v15 ^ 1;
      uint64_t v10 = 0;
      if (v14) {
        unint64_t v29 = 1;
      }
      if ((v29 & 1) != 0)
      {
        uint64_t v7 = 0;
      }

      else
      {
        uint64_t v15 = 1;
        uint64_t v14 = 0;
        uint64_t v7 = 0;
        if (!v8 && v6)
        {
          uint64_t v11 = 0LL;
          uint64_t v16 = 2617245952LL;
          goto LABEL_43;
        }
      }

            if (!v14) {
              return 1LL;
            }
            uint64_t v16 = *v15++;
            LOBYTE(v13) = v16;
            v14 -= 2LL;
            if (v16 >= 0x80) {
              return 0LL;
            }
            continue;
        }
      }
    }

    return 0LL;
  }

  if (!a1 || !a2)
  {
    uint64_t v6 = 0LL;
    return v6 == 0;
  }

  uint64_t v5 = *a1;
  if (v5 > 0x7F) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  uint64_t v7 = 2 * a2 - 2;
  uint64_t v8 = a1 + 1;
  do
  {
    if ((unsigned __int16)v5 == 37)
    {
      if (v6) {
        return 0LL;
      }
      uint64_t v6 = 2LL;
    }

    else
    {
      switch((char)v5)
      {
        case '!':
        case '$':
        case '\'':
        case '(':
        case ')':
        case '*':
        case ',':
LABEL_10:
          if ((v4 & 0xF6) == 0) {
            return 0LL;
          }
          goto LABEL_33;
        case '&':
LABEL_16:
          if ((v4 & 0x76) == 0) {
            return 0LL;
          }
          goto LABEL_33;
        case '+':
          if ((v4 & 0xFFFFFFF7) == 0) {
            return 0LL;
          }
          goto LABEL_33;
        case '-':
        case '.':
          goto LABEL_32;
        case '/':
LABEL_18:
          if (v4 < 0x10) {
            return 0LL;
          }
          goto LABEL_33;
        default:
          break;
      }

      switch((char)v5)
      {
        case ':':
          if ((v4 & 0xD2) == 0) {
            return 0LL;
          }
          goto LABEL_33;
        case ';':
          goto LABEL_10;
        case '=':
          goto LABEL_16;
        case '?':
          if (v4 < 0x40) {
            return 0LL;
          }
          goto LABEL_33;
        case '@':
          goto LABEL_18;
        default:
          if (v5 == 95)
          {
            if (v4 < 2) {
              return 0LL;
            }
          }

          else if ((v5 - 123) > 0xE5u)
          {
LABEL_32:
            if (!v4) {
              return 0LL;
            }
          }

          else
          {
            uint64_t result = 0LL;
          }

  swift_release();
  return v3;
}

            if (!v14) {
              return 1LL;
            }
            uint64_t v16 = *v15++;
            uint64_t v13 = v16;
            --v14;
            if (v16 < 0) {
              return 0LL;
            }
            continue;
        }
      }
    }

    return 0LL;
  }

  if (a1 != a2)
  {
    if ((*(char *)(a3 + a1) & 0x80000000) == 0)
    {
      uint64_t v6 = 0LL;
      uint64_t v8 = *(unsigned __int8 *)(a3 + a1);
      uint64_t v9 = ~a1 + a2;
      uint64_t v10 = (char *)(a1 + a3 + 1);
      while (2)
      {
        switch(v8)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_10:
            if ((v5 & 0xF6) == 0) {
              return 0LL;
            }
            goto LABEL_35;
          case '%':
            if (v6) {
              return 0LL;
            }
            uint64_t v6 = 2LL;
            goto LABEL_41;
          case '&':
LABEL_16:
            if ((v5 & 0x76) == 0) {
              return 0LL;
            }
            goto LABEL_35;
          case '+':
            if ((v5 & 0xFFFFFFF7) == 0) {
              return 0LL;
            }
            goto LABEL_35;
          case '-':
          case '.':
            goto LABEL_34;
          case '/':
LABEL_18:
            if (v5 < 0x10) {
              return 0LL;
            }
            goto LABEL_35;
          default:
            break;
        }

        switch(v8)
        {
          case ':':
            if ((v5 & 0xD2) == 0) {
              return 0LL;
            }
            goto LABEL_35;
          case ';':
            goto LABEL_10;
          case '=':
            goto LABEL_16;
          case '?':
            if (v5 < 0x40) {
              return 0LL;
            }
            goto LABEL_35;
          case '@':
            goto LABEL_18;
          default:
            if (v8 == 95)
            {
              if (v5 < 2) {
                return 0LL;
              }
            }

            else if ((v8 - 123) > 0xFFFFFFE5)
            {
LABEL_34:
              if (!v5) {
                return 0LL;
              }
            }

            else
            {
              uint64_t result = 0LL;
              if (v8 != 126 || v5 < 2) {
                return result;
              }
            }

    __break(1u);
LABEL_71:
    i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v10 > 1),  v7,  1,  i);
LABEL_7:
    i[2] = v7;
    uint64_t v13 = &i[2 * v1];
    v13[4] = v8;
    v13[5] = v12;
  }

  if ((*(_BYTE *)(a1 + 96) & 1) != 0) {
    goto LABEL_18;
  }
  do
  {
    unint64_t v78 = v5;
    int64_t v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v16 = &v78;
    uint64_t v20 = StringProtocol._toUTF16Offsets(_:)();
    uint64_t v12 = v21 - v20;
    if (!__OFSUB__(v21, v20))
    {
      unint64_t v22 = (uint64_t *)v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
        goto LABEL_15;
      }
      goto LABEL_75;
    }

    __break(1u);
LABEL_73:
    i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  i[2] + 1LL,  1,  i);
LABEL_10:
    v3 |= 2u;
    uint64_t v18 = i[2];
    uint64_t v17 = i[3];
    if (v18 >= v17 >> 1) {
      i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v17 > 1),  v18 + 1,  1,  i);
    }
    i[2] = v18 + 1;
    uint64_t v19 = &i[2 * v18];
    v19[4] = v16;
    v19[5] = v12;
  }

  while ((*(_BYTE *)(a1 + 96) & 1) == 0);
  while (1)
  {
LABEL_18:
    uint64_t v26 = *(_BYTE *)(a1 + 144);
    if (!v26) {
      v3 |= 0x10u;
    }
    uint64_t v77 = v5;
    if ((*(_BYTE *)(a1 + 120) & 1) == 0)
    {
      if ((*(void *)(a1 + 112) ^ *(void *)(a1 + 104)) >> 14) {
        unint64_t v27 = 0;
      }
      else {
        unint64_t v27 = (v3 & 0x16) == 0;
      }
      if (v27)
      {
        if ((*(_BYTE *)(a1 + 144) & 1) != 0) {
          break;
        }
        goto LABEL_33;
      }

      unint64_t v78 = v5;
      int64_t v79 = v4;
      uint64_t v76 = v4;
      lazy protocol witness table accessor for type String and conformance String();
      int64_t v28 = &v78;
      unint64_t v29 = StringProtocol._toUTF16Offsets(_:)();
      uint64_t v31 = v30 - v29;
      if (__OFSUB__(v30, v29))
      {
        __break(1u);
      }

      else
      {
        int64_t v28 = (uint64_t *)v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_27:
          v3 |= 8u;
          Swift::UInt64 v33 = i[2];
          uint64_t v32 = i[3];
          if (v33 >= v32 >> 1) {
            i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v32 > 1),  v33 + 1,  1,  i);
          }
          i[2] = v33 + 1;
          Swift::UInt64 v34 = &i[2 * v33];
          v34[4] = v28;
          v34[5] = v31;
          uint64_t v5 = v77;
          unint64_t v4 = v76;
          goto LABEL_30;
        }
      }

      i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  i[2] + 1LL,  1,  i);
      goto LABEL_27;
    }

      swift_bridgeObjectRetain();
      v221 = 4LL;
      while (1)
      {
        v222 = v481 ? (id)MEMORY[0x186E1C36C](v221 - 4, v484) : *(id *)(v484 + 8 * v221);
        v223 = v222;
        v224 = v221 - 3;
        if (__OFADD__(v221 - 4, 1LL)) {
          break;
        }
        if (objc_msgSend(v222, sel_index) == v214)
        {
          swift_bridgeObjectRelease();
          goto LABEL_81;
        }

        ++v221;
        if (v224 == v216) {
          goto LABEL_149;
        }
      }

      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
      goto LABEL_196;
    }

    if (v481)
    {
      v217 = (id)MEMORY[0x186E1C36C](v215, v484);
    }

    else
    {
      if (v215 >= *(void *)((v484 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_194;
      }
      v217 = *(id *)(v479 + 8 * v215);
    }

    v218 = v217;
    v219 = objc_msgSend(v217, sel_index);

    if (v219 != v214) {
      goto LABEL_70;
    }
    v220 = v481 ? (id)MEMORY[0x186E1C36C](v215, v484) : *(id *)(v479 + 8 * v215);
    v223 = v220;
LABEL_81:
    v225 = v223;
    v226 = objc_msgSend(v225, sel_replacementRangeInResult);
    v228 = v227;
    *(void *)v542 = v485;
    swift_retain();
    Range<>.init(_:in:)((uint64_t)v226, v228, v542, (uint64_t *)&v583);
    v229 = v585;
    if (v585 == 2) {
      break;
    }
    v525 = v583;
    v230 = v584;
    v517 = v586;
    v500 = v587;
    v231 = v485[2];
    v759[0] = *v482;
    v759[1] = v231;
    v759[2] = v485[3];
    v232 = BigString.startIndex.getter();
    v233 = BigString.endIndex.getter();
    v465 = v225;
    v754 = v525;
    v755 = v230;
    v756 = v229;
    v757 = v517;
    v758 = v500;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v759);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v759);
    outlined release of Locale((uint64_t)&v568);
    swift_release();
    v614 = v569;
    v615 = v570;
    v616 = v571;
    v617 = v572;
    v495 = v571;
    v501 = v569;
    *(_OWORD *)v542 = v569;
    *(_OWORD *)&v542[16] = v570;
    *(_OWORD *)&v542[32] = v571;
    *(_OWORD *)&v542[48] = v572;
    *(void *)&v542[64] = v485;
    v470 = *((void *)&v569 + 1);
    *(_OWORD *)&v542[72] = v569;
    v471 = v569;
    v468 = *((void *)&v570 + 1);
    *(_OWORD *)&v542[88] = v570;
    v469 = v570;
    v466 = *((void *)&v571 + 1);
    *(_OWORD *)&v542[104] = v571;
    v467 = v571;
    v472 = *((void *)&v572 + 1);
    v473 = v572;
    v543 = v572;
    v544 = 0LL;
    v234 = *v530;
    v752 = v530[1];
    v753 = v530[2];
    v751 = v234;
    v526 = *(void *)v530;
    v235 = v198[3];
    v236 = v198[4];
    v237 = v198;
    v238 = v198[5];
    v239 = v237[7];
    v518 = v237[6];
    v240 = BigString.startIndex.getter();
    v242 = v241;
    v244 = v243;
    v246 = v245;
    v247 = BigString.endIndex.getter();
    if (v247 >> 10 < v504 || v504 < v240 >> 10 || v247 >> 10 < v240 >> 10) {
      goto LABEL_187;
    }
    v737 = v526;
    v738 = v235;
    v739 = v236;
    v740 = v238;
    v741 = v518;
    v742 = v239;
    v743 = v240;
    v744 = v242;
    v745 = v244;
    v746 = v246;
    v747 = v247;
    v748 = v248;
    v749 = v249;
    v750 = v250;
    v810[0] = v751;
    v810[1] = v752;
    v810[2] = v753;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v810, (uint64_t)v811);
    outlined retain of Locale((uint64_t)v811);
    v527 = BigSubstring.distance(from:to:)();
    outlined release of Locale((uint64_t)&v751);
    v251 = v538;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v252 = v530[1];
      v736[0] = *v530;
      v736[1] = v252;
      v736[2] = v530[2];
      v253 = v538[8];
      v254 = v538[9];
      v255 = v538[10];
      v256 = v538[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v736);
      swift_unknownObjectRetain();
      v251 = (_OWORD *)AttributedString.Guts.init(string:runs:)(v736, v253, v254, v255, v256);
      swift_release();
    }

    v257 = v251[2];
    v733 = v251[1];
    v734 = v257;
    v735 = v251[3];
    v258 = BigString.startIndex.getter();
    v260 = v259;
    v262 = v261;
    v264 = v263;
    v265 = BigString.endIndex.getter();
    v594 = (uint64_t)v251;
    v595 = v258;
    v596 = v260;
    v597 = v262;
    v598 = v264;
    v599 = v265;
    *(void *)&v600 = v266;
    *((void *)&v600 + 1) = v267;
    *(void *)&v601 = v268;
    v269 = one-time initialization token for currentIdentity;
    swift_retain();
    if (v269 != -1) {
      swift_once();
    }
    v270 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v271 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v271);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v270, v578);
    os_unfair_lock_unlock(v271);
    swift_release();
    v272 = v578[0];
    *((void *)&v601 + 1) = v578[0];
    BigString.init()();
    v578[0] = 0LL;
    MEMORY[0x186E20E78](v578, 8LL);
    v273 = v578[0];
    type metadata accessor for AttributedString.Guts();
    v274 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0) {
      goto LABEL_188;
    }
    v275 = v574;
    *(_OWORD *)(v274 + 16) = v573;
    *(_OWORD *)(v274 + 32) = v275;
    *(_OWORD *)(v274 + 48) = v575;
    *(void *)(v274 + 64) = 0LL;
    *(void *)(v274 + 72) = 0LL;
    *(void *)(v274 + 80) = 0LL;
    *(void *)(v274 + 88) = v273;
    swift_release();
    if (v504 < v258 >> 10 || v265 >> 10 < v477) {
      goto LABEL_189;
    }
    v276 = v251[1];
    v731[1] = v251[2];
    v732 = v251[3];
    v731[0] = v276;
    v277 = v251[1];
    v278 = v251[2];
    v812[2] = v732;
    v812[1] = v278;
    v812[0] = v277;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v812, (uint64_t)v813);
    outlined retain of Locale((uint64_t)v813);
    v519 = MEMORY[0x186E1AE90](v502, v507, v511, v509);
    v533 = v272;
    v280 = v279;
    v282 = v281;
    v284 = v283;
    outlined release of Locale((uint64_t)v731);
    v285 = v251[1];
    v729[1] = v251[2];
    v730 = v251[3];
    v729[0] = v285;
    v286 = v251[1];
    v287 = v251[2];
    v814[2] = v730;
    v814[1] = v287;
    v814[0] = v286;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v814, (uint64_t)v815);
    outlined retain of Locale((uint64_t)v815);
    v288 = MEMORY[0x186E1AE90](v476, v475, v474, v478);
    v290 = v289;
    v292 = v291;
    v294 = v293;
    outlined release of Locale((uint64_t)v729);
    v726[0] = v519;
    v726[1] = v280;
    v726[2] = v282;
    v726[3] = v284;
    v726[4] = v288;
    v726[5] = v290;
    v726[6] = v292;
    v726[7] = v294;
    v295 = *v482;
    v296 = v485[2];
    v728[2] = v485[3];
    v728[1] = v296;
    v728[0] = v295;
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v542);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v542);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v542);
    swift_retain();
    outlined retain of Locale((uint64_t)v728);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v728);
    outlined release of Locale((uint64_t)v576);
    swift_release_n();
    v297 = v485[2];
    v727[0] = v485[1];
    v727[1] = v297;
    v727[2] = v485[3];
    v727[3] = v576[3];
    v727[4] = v576[4];
    v727[5] = v576[5];
    v727[6] = v576[6];
    swift_unknownObjectRetain();
    swift_release();
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v726, (uint64_t)v727);
    swift_unknownObjectRelease();
    swift_release();
    if (*((void *)&v601 + 1) != v533) {
      goto LABEL_198;
    }
    uint64_t v5 = (_OWORD *)v594;
    swift_release();
    v298 = v5[2];
    v723 = v5[1];
    v724 = v298;
    v725 = v5[3];
    v299 = BigString.startIndex.getter();
    v300 = BigString.endIndex.getter();
    if (v495 >> 10 < v501 >> 10) {
      goto LABEL_190;
    }
    v301 = v300;
    v302 = v485[2];
    v712 = v485[1];
    v713 = v302;
    v714 = v485[3];
    v715 = v471;
    v716 = v470;
    v717 = v469;
    v718 = v468;
    v719 = v467;
    v720 = v466;
    v721 = v473;
    v722 = v472;
    swift_unknownObjectRetain();
    swift_retain();
    v303 = BigSubstring.distance(from:to:)();
    swift_unknownObjectRelease();
    if (__OFADD__(v527, v303)) {
      goto LABEL_191;
    }
    v304 = v299 >> 10;
    v305 = v301 >> 10;
    if (v301 >> 10 < v299 >> 10) {
      goto LABEL_192;
    }
    v306 = v5[1];
    v710[1] = v5[2];
    v711 = v5[3];
    v710[0] = v306;
    v307 = v5[1];
    v308 = v5[2];
    v816[2] = v711;
    v816[1] = v308;
    v816[0] = v307;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v816, (uint64_t)v817);
    outlined retain of Locale((uint64_t)v817);
    v309 = BigString.index(_:offsetBy:)();
    v532 = v310;
    uint64_t v12 = v311;
    uint64_t v14 = v312;
    outlined release of Locale((uint64_t)v710);
    swift_release();
    swift_release();
    swift_release();

    uint64_t v8 = v309;
    uint64_t v149 = v309 >> 10;
    if (v149 < v304 || v305 < v149) {
      goto LABEL_193;
    }
LABEL_36:
    uint64_t v20 = v5 + 1;
    uint64_t v150 = v5[2];
    v802 = v5[1];
    v803 = v150;
    v804 = v5[3];
    BigString.startIndex.getter();
    uint64_t v16 = BigString.endIndex.getter();
    uint64_t v151 = v149 > v16 >> 10;
    uint64_t v10 = v532;
    if (v151) {
      goto LABEL_157;
    }
  }

  swift_release();

LABEL_151:
  *v483 = 0LL;
  return swift_release();
}

    swift_unknownObjectRetain();
    uint64_t v46 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v41, v27, v10, v39, v43, v45);
    uint64_t result = swift_unknownObjectRelease_n();
LABEL_110:
    int v47 = v41;
    goto LABEL_111;
  }

  Swift::UInt64 v49 = *(unsigned __int8 *)(v39 + 18);
  if (*(_BYTE *)(v39 + 18))
  {
    swift_unknownObjectRetain_n();
    uint64_t result = swift_retain();
    Swift::UInt v50 = v161;
    uint64_t v51 = v39;
    while (1)
    {
      uint64_t v53 = *(unsigned __int16 *)(v51 + 16);
      if (*(_WORD *)(v51 + 16))
      {
        uint64_t v54 = *(void *)(v51 + 32);
        uint64_t v55 = __OFSUB__(v50, v54);
        uint64_t v56 = v50 - v54;
        if (v55) {
          goto LABEL_137;
        }
        if (__OFADD__(v56, 1LL)) {
          goto LABEL_138;
        }
        if (v56 + 1 <= 0)
        {
          uint64_t v53 = 0LL;
          goto LABEL_42;
        }

        if ((_DWORD)v53 != 1)
        {
          uint64_t v57 = *(void *)(v51 + 56);
          Swift::UInt v50 = v56 - v57;
          if (__OFSUB__(v56, v57)) {
            goto LABEL_151;
          }
          if (__OFADD__(v50, 1LL)) {
            goto LABEL_152;
          }
          if (v50 + 1 < 1)
          {
            uint64_t v53 = 1LL;
            Swift::UInt v50 = v56;
            goto LABEL_42;
          }

          if ((_DWORD)v53 == 2) {
            goto LABEL_41;
          }
          uint64_t v58 = *(void *)(v51 + 80);
          uint64_t v55 = __OFSUB__(v50, v58);
          uint64_t v56 = v50 - v58;
          if (v55) {
            goto LABEL_155;
          }
          if (__OFADD__(v56, 1LL)) {
            goto LABEL_156;
          }
          if (v56 + 1 < 1)
          {
            uint64_t v53 = 2LL;
            goto LABEL_42;
          }

          if ((_DWORD)v53 != 3)
          {
            Swift::UInt v59 = 3LL;
            if (v53 > 3) {
              Swift::UInt v59 = *(unsigned __int16 *)(v51 + 16);
            }
            int64_t v60 = (void *)(v51 + 104);
            uint64_t v61 = 3LL;
            while (v59 != v61)
            {
              Swift::UInt v50 = v56 - *v60;
              if (__OFSUB__(v56, *v60)) {
                goto LABEL_149;
              }
              if (__OFADD__(v50, 1LL)) {
                goto LABEL_150;
              }
              if (v50 + 1 < 1)
              {
                uint64_t v53 = v61;
                Swift::UInt v50 = v56;
                goto LABEL_42;
              }

              ++v61;
              v60 += 3;
              uint64_t v56 = v50;
              if (v53 == v61) {
                goto LABEL_41;
              }
            }

LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
}

      id v97 = (v111 - 1) & v111;
      id v101 = __clz(__rbit64(v111)) + (v99 << 6);
LABEL_126:
      id v102 = (uint64_t *)(*(void *)(v30 + 48) + 16 * v101);
      id v104 = *v102;
      id v103 = (void *)v102[1];
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v30 + 56) + 72 * v101, (uint64_t)&v157);
      v156._countAndFlagsBits = v104;
      v156._object = v103;
      uint64_t v149 = v158;
      uint64_t v150 = v159;
      uint64_t v151 = *(_OWORD *)v160;
      __int128 v152 = *(void *)&v160[16];
      uint64_t v147 = v156;
      uint64_t v148 = v157;
      uint64_t v105 = v156;
      swift_bridgeObjectRetain();
      String.append(_:)(v105);
      v106._countAndFlagsBits = 2112800LL;
      v106._object = (void *)0xE300000000000000LL;
      String.append(_:)(v106);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v148,  (uint64_t)v155);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      v107._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v107);
      swift_bridgeObjectRelease();
      v108._countAndFlagsBits = 10LL;
      v108._object = (void *)0xE100000000000000LL;
      String.append(_:)(v108);
      v109._countAndFlagsBits = 9LL;
      v109._object = (void *)0xE100000000000000LL;
      String.append(_:)(v109);
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of Any?( (uint64_t)&v147,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    }

            id v100 = 256LL;
          }

                                                  swift_bridgeObjectRelease();
                                                  Swift::UInt v42 = v162;
                                                  uint64_t v32 = v160;
                                                  if ((v39 & 1) == 0) {
                                                    goto LABEL_31;
                                                  }
LABEL_28:
                                                  uint64_t v43 = (uint64_t *)(*(void *)(v30 + 56) + 16 * v35);
                                                  *uint64_t v43 = v158;
                                                  v43[1] = v32;
                                                  swift_bridgeObjectRelease();
                                                }

                                                else
                                                {
                                                  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v38,  v33);
                                                  int64_t v30 = v26;
                                                  uint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)( 0x79636E6572727563LL,  0xE800000000000000LL);
                                                  if ((v39 & 1) != (v41 & 1)) {
                                                    goto LABEL_192;
                                                  }
                                                  int v35 = v40;
                                                  Swift::UInt v42 = v162;
                                                  if ((v39 & 1) != 0) {
                                                    goto LABEL_28;
                                                  }
LABEL_31:
                                                  specialized _NativeDictionary._insert(at:key:value:)( v35,  0x79636E6572727563LL,  0xE800000000000000LL,  v158,  v32,  (void *)v30);
                                                }

                                                swift_bridgeObjectRelease();
                                                if (v42)
                                                {
LABEL_33:
                                                  swift_bridgeObjectRetain();
                                                  uint64_t v44 = swift_isUniquelyReferenced_nonNull_native();
                                                  uint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)( 0x737265626D756ELL,  0xE700000000000000LL);
                                                  int v47 = *(void *)(v30 + 16);
                                                  Swift::UInt v48 = (v45 & 1) == 0;
                                                  Swift::UInt64 v49 = v47 + v48;
                                                  if (!__OFADD__(v47, v48))
                                                  {
                                                    Swift::UInt v50 = v45;
                                                    if (*(void *)(v30 + 24) >= v49)
                                                    {
                                                      if ((v44 & 1) != 0)
                                                      {
                                                        uint64_t v51 = v30;
                                                        uint64_t v31 = v161;
                                                        if ((v45 & 1) != 0) {
                                                          goto LABEL_37;
                                                        }
                                                        goto LABEL_40;
                                                      }

                                                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
                                                      id v101 = static _DictionaryStorage.copy(original:)();
                                                      uint64_t v51 = v101;
                                                      if (*(void *)(v30 + 16))
                                                      {
                                                        id v102 = (void *)(v101 + 64);
                                                        id v103 = v30 + 64;
                                                        id v104 = (unint64_t)((1LL << *(_BYTE *)(v51 + 32)) + 63) >> 6;
                                                        uint64_t v105 = 0LL;
                                                        *(void *)(v51 + 16) = *(void *)(v30 + 16);
                                                        uint64_t v106 = 1LL << *(_BYTE *)(v30 + 32);
                                                        Swift::UInt v107 = -1LL;
                                                        if (v106 < 64) {
                                                          Swift::UInt v107 = ~(-1LL << v106);
                                                        }
                                                        Swift::UInt v108 = v107 & *(void *)(v30 + 64);
                                                        Swift::UInt8 v109 = (unint64_t)(v106 + 63) >> 6;
                                                        while (1)
                                                        {
                                                          if (v108)
                                                          {
                                                            Swift::UInt8 v110 = __clz(__rbit64(v108));
                                                            v108 &= v108 - 1;
                                                            Swift::UInt8 v111 = v110 | (v105 << 6);
                                                          }

                                                          else
                                                          {
                                                            uint64_t v121 = v105 + 1;
                                                            if (__OFADD__(v105, 1LL)) {
                                                              goto LABEL_186;
                                                            }
                                                            if (v121 >= v109) {
                                                              break;
                                                            }
                                                            uint64_t v122 = *(void *)(v103 + 8 * v121);
                                                            ++v105;
                                                            if (!v122)
                                                            {
                                                              uint64_t v105 = v121 + 1;
                                                              if (v121 + 1 >= v109) {
                                                                break;
                                                              }
                                                              uint64_t v122 = *(void *)(v103 + 8 * v105);
                                                              if (!v122)
                                                              {
                                                                uint64_t v105 = v121 + 2;
                                                                if (v121 + 2 >= v109) {
                                                                  break;
                                                                }
                                                                uint64_t v122 = *(void *)(v103 + 8 * v105);
                                                                if (!v122)
                                                                {
                                                                  uint64_t v105 = v121 + 3;
                                                                  if (v121 + 3 >= v109) {
                                                                    break;
                                                                  }
                                                                  uint64_t v122 = *(void *)(v103 + 8 * v105);
                                                                  if (!v122)
                                                                  {
                                                                    uint64_t v105 = v121 + 4;
                                                                    if (v121 + 4 >= v109) {
                                                                      break;
                                                                    }
                                                                    uint64_t v122 = *(void *)(v103 + 8 * v105);
                                                                    if (!v122)
                                                                    {
                                                                      uint64_t v105 = v121 + 5;
                                                                      if (v121 + 5 >= v109) {
                                                                        break;
                                                                      }
                                                                      uint64_t v122 = *(void *)(v103 + 8 * v105);
                                                                      if (!v122)
                                                                      {
                                                                        uint64_t v105 = v121 + 6;
                                                                        if (v121 + 6 >= v109) {
                                                                          break;
                                                                        }
                                                                        uint64_t v122 = *(void *)(v103 + 8 * v105);
                                                                        if (!v122)
                                                                        {
                                                                          int64_t v123 = v121 + 7;
                                                                          if (v123 >= v109) {
                                                                            break;
                                                                          }
                                                                          uint64_t v124 = v1;
                                                                          uint64_t v122 = *(void *)(v103 + 8 * v123);
                                                                          if (!v122)
                                                                          {
                                                                            while (1)
                                                                            {
                                                                              uint64_t v105 = v123 + 1;
                                                                              if (__OFADD__(v123, 1LL)) {
                                                                                break;
                                                                              }
                                                                              v1 = v124;
                                                                              if (v105 >= v109) {
                                                                                goto LABEL_147;
                                                                              }
                                                                              uint64_t v122 = *(void *)(v103 + 8 * v105);
                                                                              ++v123;
                                                                              if (v122) {
                                                                                goto LABEL_142;
                                                                              }
                                                                            }

      id v94 = (v99 - 1) & v99;
      id v96 = __clz(__rbit64(v99)) + (v12 << 6);
LABEL_122:
      id v97 = *(void *)(*(void *)(v88 + 56) + 8 * v96);
      *(_BYTE *)(*(void *)(v23 + 48) + v96) = *(_BYTE *)(*(void *)(v88 + 48) + v96);
      *(void *)(*(void *)(v23 + 56) + 8 * v96) = v97;
      swift_bridgeObjectRetain();
    }

    id v100 = v98 + 7;
    if (v100 >= v157) {
      goto LABEL_146;
    }
    id v99 = *(void *)(v153 + 8 * v100);
    if (v99)
    {
      uint64_t v12 = v100;
      goto LABEL_145;
    }

    while (1)
    {
      uint64_t v12 = v100 + 1;
      if (__OFADD__(v100, 1LL)) {
        goto LABEL_238;
      }
      uint64_t v10 = v161;
      if (v12 >= v157) {
        break;
      }
      id v99 = *(void *)(v153 + 8 * v12);
      ++v100;
      if (v99) {
        goto LABEL_145;
      }
    }

      outlined destroy of Any?((uint64_t)v327, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v328, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v265);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v270);
      outlined destroy of Any?( (uint64_t)&v272,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v282,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = outlined destroy of Any?( (uint64_t)&v287,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v125 & 1) == 0) {
        goto LABEL_177;
      }
LABEL_146:
      v124 += 2;
      ++v123;
      BOOL v118 = v264;
      if (v126 == v55)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unsigned int v39 = (uint64_t)v258;
        id v91 = (uint64_t *)v258[8];
        id v96 = v258[11];
        v243 = v229;
        id v95 = v254;
        v272 = v254;
        v273 = v239;
        unint64_t v71 = (uint64_t)v228;
        *(void *)&v255 = v239;
        v274 = v228;
        uint64_t v31 = __OFADD__(v241++, 1LL);
        if (!v31) {
          goto LABEL_113;
        }
        __break(1u);
LABEL_175:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v270);
LABEL_176:
        outlined destroy of Any?( (uint64_t)&v272,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v282, v91);
        outlined destroy of Any?((uint64_t)&v287, v91);
LABEL_177:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unsigned int v39 = (uint64_t)v258;
        id v100 = v240;
        uint64_t v105 = v253;
        id v102 = v255;
        goto LABEL_178;
      }
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_178:
  if (v238 != *(void *)(v39 + 88)) {
    goto LABEL_286;
  }
  if (v105)
  {
    uint64_t v145 = *(void *)(v105 + 24 * ((v102 >> ((4 * *(_BYTE *)(v105 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v146 = *(void *)(v39 + 64);
    swift_unknownObjectRetain();
    uint64_t v145 = specialized Rope._Node.subscript.getter(v102, v146);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v147 = v243 + v145;
  if (__OFADD__(v243, v145)) {
    goto LABEL_287;
  }
  uint64_t v148 = v233;
  uint64_t v149 = v233[1];
  v328[0] = *v233;
  v328[1] = v149;
  v328[2] = v233[2];
  BigString.utf8.getter();
  uint64_t result = v224;
  if (__OFSUB__(v147, v224 >> 11))
  {
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
    goto LABEL_295;
  }

  uint64_t v150 = BigString.UTF8View.index(_:offsetBy:)();
  __int128 v152 = v151;
  __int128 v153 = v148;
  v155 = v154;
  uint64_t v157 = v156;
  uint64_t result = outlined release of Locale((uint64_t)v318);
  uint64_t v158 = v227;
  if (v226 >= v150 >> 10) {
    uint64_t v159 = v150;
  }
  else {
    uint64_t v159 = v251;
  }
  if (v226 >= v150 >> 10)
  {
    char v160 = v155;
  }

  else
  {
    __int128 v152 = v237;
    char v160 = v236;
  }

  if (v226 < v150 >> 10) {
    uint64_t v157 = v235;
  }
  char v161 = *v153;
  char v162 = v153[1];
  v327[2] = v153[2];
  v327[1] = v162;
  v327[0] = v161;
  if (v159 >> 10 < v227) {
    goto LABEL_289;
  }
  *(void *)&v282 = v244;
  *((void *)&v282 + 1) = v247;
  *(void *)&v283 = v246;
  *((void *)&v283 + 1) = v245;
  *(void *)&v284 = v159;
  *((void *)&v284 + 1) = v152;
  *(void *)&v285 = v160;
  *((void *)&v285 + 1) = v157;
  char v163 = *(void *)(v100 + 16);
  if (!v163 || v227 == v159 >> 10)
  {
    v263 = v157;
    v264 = v160;
LABEL_208:
    swift_release();
    uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v292);
    __int128 v169 = v234;
    goto LABEL_209;
  }

  v164 = v152;
  outlined retain of Locale((uint64_t)v327);
  swift_bridgeObjectRetain();
  v165 = 40LL;
  __int128 v166 = v163;
  while (*(void *)(v100 + v165))
  {
    swift_bridgeObjectRelease();
    v165 += 16LL;
    if (!--v166)
    {
      swift_bridgeObjectRelease();
      __int128 v152 = v164;
      goto LABEL_203;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v319);
  v270[0] = v244;
  v270[1] = v247;
  v270[2] = v246;
  v270[3] = v245;
  v270[4] = v244;
  v270[5] = v247;
  v270[6] = v246;
  v270[7] = v245;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, v270, &v272);
  uint64_t result = outlined release of Locale((uint64_t)&v320);
  __int128 v152 = v164;
  if (v279 != (__int128 *)2)
  {
    uint64_t v159 = v276;
    if (v158 > v276 >> 10) {
      goto LABEL_303;
    }
    __int128 v152 = v277;
    char v160 = v278;
    uint64_t v157 = v279;
  }

      outlined destroy of Any?((uint64_t)v359, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v360, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v297);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v302);
      outlined destroy of Any?( (uint64_t)&v304,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v314,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = outlined destroy of Any?( (uint64_t)&v319,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t v8 = v126;
      uint64_t v120 = v293;
      if ((v127 & 1) == 0) {
        goto LABEL_177;
      }
LABEL_146:
      v125 += 2;
      ++v124;
      if (v128 == v54)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        id v91 = *(void *)(v8 + 64);
        id v96 = *(void *)(v8 + 88);
        id v99 = v261;
        v276 = v262;
        int64_t v72 = v281;
        v304 = v281;
        v305 = v261;
        unint64_t v71 = v260;
        v306 = v260;
        uint64_t v31 = __OFADD__(v273++, 1LL);
        if (!v31) {
          goto LABEL_113;
        }
        __break(1u);
LABEL_175:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v302);
LABEL_176:
        outlined destroy of Any?( (uint64_t)&v304,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?( (uint64_t)&v314,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v319,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_177:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        id v99 = v284;
        goto LABEL_178;
      }
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_178:
  if (v272 != *(void *)(v8 + 88)) {
    goto LABEL_301;
  }
  if (v275)
  {
    uint64_t v147 = *(void *)(v275 + 24 * ((v99 >> ((4 * *(_BYTE *)(v275 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v148 = *(void *)(v8 + 64);
    swift_unknownObjectRetain();
    uint64_t v147 = specialized Rope._Node.subscript.getter(v99, v148);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v149 = &v276[v147];
  if (__OFADD__(v276, v147)) {
    goto LABEL_302;
  }
  uint64_t v150 = v266;
  uint64_t v151 = v266[1];
  v360[0] = *v266;
  v360[1] = v151;
  v360[2] = v266[2];
  BigString.utf8.getter();
  uint64_t result = v256;
  if (__OFSUB__(v149, v256 >> 11))
  {
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
LABEL_307:
    __break(1u);
LABEL_308:
    __break(1u);
LABEL_309:
    __break(1u);
    goto LABEL_310;
  }

  __int128 v152 = BigString.UTF8View.index(_:offsetBy:)();
  __int128 v154 = v153;
  v155 = v150;
  uint64_t v157 = v156;
  uint64_t v159 = v158;
  uint64_t result = outlined release of Locale((uint64_t)v350);
  char v160 = v259;
  if (v258 >= v152 >> 10) {
    char v161 = v152;
  }
  else {
    char v161 = v283;
  }
  if (v258 >= v152 >> 10)
  {
    char v162 = v157;
  }

  else
  {
    __int128 v154 = v271;
    char v162 = v270;
  }

  if (v258 >= v152 >> 10) {
    char v163 = v159;
  }
  else {
    char v163 = v269;
  }
  v164 = *v155;
  v165 = v155[1];
  v359[2] = v155[2];
  v359[1] = v165;
  v359[0] = v164;
  if (v161 >> 10 < v259) {
    goto LABEL_304;
  }
  *(void *)&v314 = v289;
  *((void *)&v314 + 1) = v280;
  *(void *)&v315 = v279;
  *((void *)&v315 + 1) = v278;
  *(void *)&v316 = v161;
  *((void *)&v316 + 1) = v154;
  *(void *)&v317 = v162;
  *((void *)&v317 + 1) = v163;
  __int128 v166 = v274;
  __int128 v167 = *(void *)(v274 + 16);
  v296 = (uint64_t *)v163;
  if (!v167 || v259 == v161 >> 10)
  {
    v295 = v162;
LABEL_209:
    swift_release();
    uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v324);
    uint64_t v175 = v267;
    __int128 v174 = v268;
    v176 = (uint64_t)v296;
    goto LABEL_210;
  }

  __int128 v168 = v154;
  outlined retain of Locale((uint64_t)v359);
  swift_bridgeObjectRetain();
  __int128 v169 = 40LL;
  uint64_t v170 = v167;
  while (*(void *)(v166 + v169))
  {
    swift_bridgeObjectRelease();
    v169 += 16LL;
    if (!--v170)
    {
      swift_bridgeObjectRelease();
      __int128 v154 = v168;
      __int128 v171 = (uint64_t)v296;
      goto LABEL_204;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v351);
  v302[0] = v289;
  v302[1] = v280;
  v302[2] = v279;
  v302[3] = v278;
  v302[4] = v289;
  v302[5] = v280;
  v302[6] = v279;
  v302[7] = v278;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, v302, (unint64_t *)&v304);
  uint64_t result = outlined release of Locale((uint64_t)&v352);
  __int128 v154 = v168;
  __int128 v171 = (uint64_t)v296;
  if (v311 != 2)
  {
    char v161 = v308;
    if (v160 > v308 >> 10) {
      goto LABEL_318;
    }
    __int128 v154 = v309;
    char v162 = v310;
    __int128 v171 = v311;
  }

    outlined release of Locale((uint64_t)v417);
    goto LABEL_146;
  }

  BigString.utf8.getter();
  v359 = (_BYTE *)v127;
  uint64_t v136 = BigString.UTF8View.index(before:)();
  v355 = v138;
  v356 = v137;
  __int128 v140 = v139;
  outlined release of Locale((uint64_t)&v391);
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  uint64_t result = outlined release of Locale((uint64_t)&v392);
  if (v135 < v136 >> 10)
  {
LABEL_419:
    __break(1u);
    goto LABEL_420;
  }

  v418[0] = v136;
  v418[1] = v356;
  v418[2] = v355;
  v418[3] = v140;
  v418[4] = v131;
  v418[5] = v123;
  v418[6] = v125;
  uint64_t v127 = (uint64_t)v359;
  v418[7] = v359;
  specialized BidirectionalCollection<>._getBlock(for:in:)(1LL, v418, &v368);
  uint64_t result = outlined release of Locale((uint64_t)&v393);
  int v47 = v339;
  Swift::UInt8 v52 = v327;
  __int128 v141 = v333;
  if (v371 == 2) {
    goto LABEL_141;
  }
  Swift::UInt8 v52 = v368;
  if ((unint64_t)v360 >= v368 >> 10)
  {
    v328 = v369;
    __int128 v141 = v370;
    Swift::UInt v48 = v371;
    goto LABEL_141;
  }

  v185[0] = v165;
  v185[1] = v162;
  v185[2] = v161;
  v185[3] = v160;
  v185[4] = v110;
  v185[5] = v104;
  v185[6] = v111;
  v185[7] = v112;
  uint64_t v120 = *(void *)(v115 + 16);
  if (!v120)
  {
LABEL_149:
    outlined release of Locale((uint64_t)v216);
LABEL_150:
    uint64_t result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v217);
LABEL_151:
    uint64_t v122 = v144;
    *__int128 v144 = v110;
    v122[1] = v104;
    v122[2] = v111;
    v122[3] = v112;
    return result;
  }

  uint64_t v121 = 40LL;
  while (!*(void *)(v115 + v121))
  {
    v121 += 16LL;
    if (!--v120) {
      goto LABEL_149;
    }
  }

  v178 = v104;
  swift_bridgeObjectRetain();
  int64_t v123 = (unint64_t *)(v115 + 40);
  uint64_t v124 = (char *)MEMORY[0x18961AFE8];
  do
  {
    uint64_t v125 = *v123;
    if (*v123)
    {
      uint64_t v126 = *(v123 - 1);
      if ((v125 & 0x2000000000000000LL) != 0 ? HIBYTE(v125) & 0xF : v126 & 0xFFFFFFFFFFFFLL)
      {
        if ((v125 & 0x1000000000000000LL) != 0)
        {
          __int128 v128 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v125 & 0x2000000000000000LL) != 0)
          {
            v186 = *(v123 - 1);
            v187 = v125 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }

          else
          {
            if ((v126 & 0x1000000000000000LL) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            swift_bridgeObjectRetain();
          }

          __int128 v128 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v124 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v124 + 2) + 1LL,  1,  v124);
        }
        __int128 v130 = *((void *)v124 + 2);
        uint64_t v129 = *((void *)v124 + 3);
        if (v130 >= v129 >> 1) {
          uint64_t v124 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v129 > 1),  v130 + 1,  1,  v124);
        }
        *((void *)v124 + 2) = v130 + 1;
        *(_DWORD *)&v124[4 * v130 + 32] = v128;
      }
    }

    v123 += 2;
    --v116;
  }

  while (v116);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v215);
  __int128 v131 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v124);
  uint64_t v133 = v132;
  int v135 = v134;
  uint64_t v137 = v136;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v186);
  outlined release of Locale((uint64_t)v216);
  uint64_t result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v217);
  id v104 = v178;
  if (v137 == 2) {
    goto LABEL_151;
  }
  if (v152 <= v131 >> 10)
  {
    Swift::UInt8 v110 = v131;
    id v104 = v133;
    Swift::UInt8 v111 = v135;
    Swift::Int v112 = v137;
    goto LABEL_151;
  }

    outlined release of Locale((uint64_t)v438);
    goto LABEL_147;
  }

  BigString.utf8.getter();
  uint64_t v134 = BigString.UTF8View.index(before:)();
  v381 = v135;
  v378 = v136;
  uint64_t v138 = v137;
  outlined release of Locale((uint64_t)&v412);
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  uint64_t result = outlined release of Locale((uint64_t)&v413);
  if (v130 < v134 >> 10)
  {
LABEL_440:
    __break(1u);
    goto LABEL_441;
  }

  v439[0] = v134;
  v439[1] = v381;
  v439[2] = v378;
  v439[3] = v138;
  v439[4] = v121;
  v439[5] = v123;
  v439[6] = v125;
  v439[7] = v127;
  specialized BidirectionalCollection<>._getBlock(for:in:)(1LL, v439, &v389);
  uint64_t result = outlined release of Locale((uint64_t)&v414);
  uint64_t v23 = v367;
  uint64_t v53 = v346;
  int64_t v139 = v351;
  unint64_t v22 = v375;
  if (v392 == 2) {
    goto LABEL_141;
  }
  uint64_t v53 = v389;
  if (v130 >= v389 >> 10)
  {
    int64_t v139 = v390;
    v347 = v392;
    v348 = (unint64_t)v391;
    goto LABEL_141;
  }

            uint64_t v150 = 0LL;
            v223[0] = v149;
            v223[1] = v147;
            v223[2] = v148;
            v223[3] = v47;
            v223[4] = v125;
            v223[5] = v127;
            uint64_t v151 = 40LL;
            v223[6] = v134;
            v223[7] = v216;
            while (1)
            {
              __int128 v152 = v150 + 1;
              if (__OFADD__(v150, 1LL)) {
                break;
              }
              if (*(void *)(v139 + v151))
              {
                v155 = v149;
                v217 = v47;
                v156 = v147;
                swift_bridgeObjectRetain();
                uint64_t v157 = (unint64_t *)(v139 + 40);
                uint64_t v158 = (char *)MEMORY[0x18961AFE8];
                do
                {
                  uint64_t v159 = *v157;
                  if (*v157)
                  {
                    char v160 = *(v157 - 1);
                    if ((v159 & 0x2000000000000000LL) != 0 ? HIBYTE(v159) & 0xF : v160 & 0xFFFFFFFFFFFFLL)
                    {
                      if ((v159 & 0x1000000000000000LL) != 0)
                      {
                        char v162 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                      }

                      else
                      {
                        if ((v159 & 0x2000000000000000LL) != 0)
                        {
                          v224 = *(v157 - 1);
                          v225 = v159 & 0xFFFFFFFFFFFFFFLL;
                          swift_bridgeObjectRetain();
                        }

                        else
                        {
                          if ((v160 & 0x1000000000000000LL) == 0) {
                            _StringObject.sharedUTF8.getter();
                          }
                          swift_bridgeObjectRetain();
                        }

                        char v162 = _decodeScalar(_:startingAt:)();
                        swift_bridgeObjectRelease();
                      }

                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                        uint64_t v158 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v158 + 2) + 1LL,  1,  v158);
                      }
                      v164 = *((void *)v158 + 2);
                      char v163 = *((void *)v158 + 3);
                      if (v164 >= v163 >> 1) {
                        uint64_t v158 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v163 > 1),  v164 + 1,  1,  v158);
                      }
                      *((void *)v158 + 2) = v164 + 1;
                      *(_DWORD *)&v158[4 * v164 + 32] = v162;
                    }
                  }

                  v157 += 2;
                  --v135;
                }

                while (v135);
                swift_bridgeObjectRelease();
                BigString.unicodeScalars.getter();
                BigString.UnicodeScalarView.subscript.getter();
                outlined release of Locale((uint64_t)v249);
                v165 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v158);
                __int128 v167 = v166;
                __int128 v169 = v168;
                __int128 v171 = v170;
                swift_bridgeObjectRelease();
                outlined release of Locale((uint64_t)&v224);
                uint64_t result = outlined release of Locale((uint64_t)v252);
                uint64_t v23 = v198;
                uint64_t v54 = v156;
                uint64_t v55 = v148;
                int v47 = v217;
                uint64_t v53 = v155;
                if (v171 != 2)
                {
                  if (v211 < v165 >> 10) {
                    goto LABEL_202;
                  }
                  uint64_t v53 = v165;
                  uint64_t v54 = v167;
                  uint64_t v55 = v169;
                  int v47 = v171;
                }

                goto LABEL_173;
              }

              v151 += 16LL;
              ++v150;
              if (v152 == v135)
              {
                __int128 v153 = v147;
                __int128 v154 = v149;
                uint64_t result = outlined release of Locale((uint64_t)v252);
                uint64_t v53 = v154;
                uint64_t v55 = v148;
                uint64_t v54 = v153;
                uint64_t v23 = v198;
                goto LABEL_173;
              }
            }

  v189 = HIBYTE(v139) & 0xF;
  if ((v139 & 0x2000000000000000LL) == 0) {
    v189 = v137 & 0xFFFFFFFFFFFFLL;
  }
  if (!v189)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v190 = v121;
    swift_retain_n();
    swift_retain_n();
    v191 = v11;
    uint64_t v55 = v190;
    if (_foundation_swift_url_feature_enabled())
    {
      v232._countAndFlagsBits = (uint64_t)v55;
      v232._object = v10;
      v233 = v191;
      v192 = v55;
      swift_retain();
      v226 = v191;
      swift_retain();
      v193 = URL.path(percentEncoded:)(1);
      v232 = v193;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v193._countAndFlagsBits, (unint64_t)v193._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }

      v231._countAndFlagsBits = Set.init(minimumCapacity:)();
      v194 = specialized Set._Variant.insert(_:)(&v234, 0x2FuLL);
      v195 = v231._countAndFlagsBits;
      v196 = v232._countAndFlagsBits;
      v197 = v232._object;
      v198 = ((unint64_t)v232._object >> 56) & 0xF;
      if (v198)
      {
        v230 = v192;
        v231 = v232;
        MEMORY[0x1895F8858](v194);
        v221 = &v231;
        v222 = v195;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v220,  v196,  (unint64_t)v197);
        if (v199 == 1)
        {
          v200 = (unint64_t)v231._object;
          v201 = v231._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v201, v200, v195);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v192 = v230;
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      v202 = objc_msgSend(v55, sel__parameterString);
      if (v202)
      {
        v203 = v202;
        v204 = static String._unconditionallyBridgeFromObjectiveC(_:)(v202);
        v206 = v205;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (v207 = objc_msgSend(v55, sel_path)) != 0)
        {
          v208 = v207;
          v209 = static String._unconditionallyBridgeFromObjectiveC(_:)(v207);
          v211 = v210;

          v232._countAndFlagsBits = (uint64_t)v209;
          v232._object = v211;
          swift_bridgeObjectRetain();
          v212._countAndFlagsBits = 59LL;
          v212._object = (void *)0xE100000000000000LL;
          String.append(_:)(v212);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v213._countAndFlagsBits = (uint64_t)v204;
          v213._object = v206;
          String.append(_:)(v213);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v232._countAndFlagsBits = 59LL;
          v232._object = (void *)0xE100000000000000LL;
          v217._countAndFlagsBits = (uint64_t)v204;
          v217._object = v206;
          String.append(_:)(v217);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
        goto LABEL_174;
      }

      v216 = objc_msgSend(v55, sel_path);
      if (!v216)
      {
        swift_release();
        swift_release();

        goto LABEL_174;
      }

      v192 = v216;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v216);
      swift_release();
      swift_release();
    }

LABEL_174:
    v218 = (void *)objc_opt_self();
    v219 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    BOOL v118 = objc_msgSend( v218,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  4,  v219,  v55,  0,  0,  0,  0);
    goto LABEL_89;
  }

  _FileManagerImpl.copyItem(atPath:toPath:options:)((uint64_t)v224, v109, v137, v139, v227);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

  if (v14 != -2 && v14) {
    yydestruct(v73, &v77);
  }
  for (; v12 != v13; v12 -= 2)
    yydestruct(yystos[*(__int16 *)v12], v10--);
  if (v13 != v79) {
    free(v13);
  }
  if (v66 == 2)
  {
    Swift::UInt v69 = [MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:@"The predicate parser overflowed its buffer." userInfo:0];
  }

  else
  {
    if (v66 != 1)
    {
      _qfqp2_delete_buffer(v72);
      return (uint64_t *)v76[0];
    }

    Swift::UInt v68 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to parse the format string %@",  v71);
    Swift::UInt v69 = [MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:v68 userInfo:0];
  }

  int64_t v70 = (void *)v69;
  _qfqp2_delete_buffer(v72);
  uint64_t result = (uint64_t *)v76[0];
  if (v70)
  {

    return (uint64_t *)v70;
  }

  return result;
}

LABEL_129:
            swift_release();
            uint64_t v3 = v108;
            if ((v113 & 1) != 0)
            {
              Swift::UInt v107 = 1LL << *(_BYTE *)(v5 + 32);
              if (v107 >= 64) {
                bzero(v109, ((unint64_t)(v107 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *Swift::UInt8 v109 = -1LL << v107;
              }
              *(void *)(v5 + 16) = 0LL;
            }

  if ((object & 0x1000000000000000LL) != 0) {
    goto LABEL_181;
  }
  if ((object & 0x2000000000000000LL) != 0)
  {
    Swift::UInt v82 = HIBYTE(object) & 0xF;
    int v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
    uint64_t v136 = object & 0xFFFFFFFFFFFFFFLL;
    unint64_t v81 = (char *)&v135;
    goto LABEL_134;
  }

  if ((v26 & 0x1000000000000000LL) == 0) {
    goto LABEL_190;
  }
  unint64_t v81 = (char *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
  Swift::UInt v82 = v26 & 0xFFFFFFFFFFFFLL;
LABEL_134:
  if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v81, v82, 4u, 1)) {
    goto LABEL_135;
  }
LABEL_114:
  swift_bridgeObjectRelease();
  *(_BYTE *)(v4 + 153) = 1;
  if (!v3) {
    goto LABEL_128;
  }
  while (2)
  {
    Swift::UInt v73 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(a1, a2);
    if ((v73 & 1) == 0)
    {
      int v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      uint64_t v136 = a2;
      MEMORY[0x1895F8858](v73);
      uint64_t v133 = &v135;
      uint64_t v134 = 4;
      swift_bridgeObjectRetain();
      goto LABEL_137;
    }

    uint64_t result = specialized Collection.first.getter(a1, a2);
    if ((result & 0x100) != 0) {
      goto LABEL_209;
    }
    if (result == 91)
    {
      if ((a2 & 0x1000000000000000LL) == 0)
      {
        int64_t v74 = (v3 << 16) - 65532;
        LOBYTE(v75) = 1;
        goto LABEL_120;
      }
    }

    else
    {
      __break(1u);
    }

    uint64_t result = String.UTF8View._foreignCount()();
    if (__OFSUB__(result, 1LL)) {
      goto LABEL_212;
    }
    uint64_t v75 = (a1 >> 59) & 1;
    int64_t v74 = MEMORY[0x186E1B838](15LL, result - 1, a1, a2);
LABEL_120:
    if ((v74 & 0xC) == 4LL << v75) {
      int64_t v74 = _StringGuts._slowEnsureMatchingEncoding(_:)(v74, a1, a2);
    }
    uint64_t v76 = v74 >> 16;
    if (v74 >> 16 >= v3)
    {
      __break(1u);
LABEL_195:
      __break(1u);
      goto LABEL_196;
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t v78 = String.UTF8View._foreignSubscript(position:)();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      int v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      uint64_t v136 = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v78 = *((_BYTE *)&v135 + v76);
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0) {
        uint64_t v77 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v77 = _StringObject.sharedUTF8.getter();
      }
      unint64_t v78 = *(_BYTE *)(v77 + v76);
    }

    if (v78 != 93) {
      goto LABEL_195;
    }
    id v88 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2);
    if ((v89 & 1) == 0)
    {
      id v90 = v88;
      if ((a2 & 0x1000000000000000LL) == 0)
      {
        id v91 = (v3 << 16) - 65532;
        goto LABEL_150;
      }

      id v93 = String.UTF8View._foreignCount()();
      if (!__OFSUB__(v93, 1LL))
      {
        id v91 = MEMORY[0x186E1B838](15LL, v93 - 1, a1, a2);
LABEL_150:
        if (v91 >> 14 >= v90 >> 14)
        {
          swift_bridgeObjectRetain_n();
          id v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.subscript.getter();
          int64_t v60 = v95;
          int v135 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v94;
          uint64_t v136 = v96;
          uint64_t v137 = v97;
          uint64_t v138 = v95;
          MEMORY[0x1895F8858](v94);
          uint64_t v133 = &v135;
          uint64_t v134 = 8;
          goto LABEL_152;
        }

  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  unsigned int v39 = swift_allocError();
  *int64_t v79 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  LOWORD(v29) = 0;
LABEL_130:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  NSDecimal.asVariableLengthInteger()(v182, v179, v176);
  unint64_t v81 = *(void *)(v80 + 16);
  swift_bridgeObjectRelease();
  Swift::UInt v82 = floor((double)(8 - v81) * 4.81647993);
  if ((~*(void *)&v82 & 0x7FF0000000000000LL) == 0) {
    goto LABEL_328;
  }
  Swift::UInt v83 = (uint64_t)v187;
  if (v82 <= -9.22337204e18)
  {
LABEL_329:
    __break(1u);
    goto LABEL_330;
  }

  if (v82 >= 9.22337204e18)
  {
LABEL_330:
    __break(1u);
    goto LABEL_331;
  }

  int64_t v84 = (uint64_t)v82;
  NSDecimal.asVariableLengthInteger()(*v187, v187[1], *((_DWORD *)v187 + 4));
  v185 = v84;
  int64_t v86 = v84 - v174;
  if (__OFSUB__(v84, v174))
  {
LABEL_331:
    __break(1u);
    goto LABEL_332;
  }

  uint64_t v43 = v85;
  if (!v86)
  {
    id v87 = v85;
    goto LABEL_190;
  }

  id v87 = specialized abs<A>(_:)(v84 - v174);
  id v88 = (uint64_t)powerOfTen._rawValue;
  unsigned int v39 = *((void *)powerOfTen._rawValue + 2);
  __int128 v173 = v35;
  if (v39 > v87)
  {
    swift_bridgeObjectRetain();
    int v35 = v43;
    if ((v87 & 0x8000000000000000LL) == 0) {
      goto LABEL_137;
    }
LABEL_257:
    __break(1u);
LABEL_258:
    __int128 v128 = powerOfTen._rawValue;
    int v35 = v41;
LABEL_259:
    if ((v88 & 0x8000000000000000LL) == 0)
    {
      if ((unint64_t)v88 < v128[2])
      {
        uint64_t v149 = v128[v88 + 4];
        if (v83 < 0)
        {
          swift_bridgeObjectRetain();
          __int128 v131 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v43, v149, 8LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        else
        {
          unsigned int v39 = *(void *)(v43 + 16);
          if (v39)
          {
            id v87 = *(void *)(v149 + 16);
            if (v87)
            {
              int v41 = v35;
              uint64_t v150 = v39 + v87;
              if (__OFADD__(v39, v87)) {
                goto LABEL_369;
              }
              if (v150 <= 7)
              {
                if (v150 < 0) {
                  goto LABEL_373;
                }
                if (!v150)
                {
                  swift_bridgeObjectRetain();
                  __int128 v131 = MEMORY[0x18961AFE8];
LABEL_281:
                  __int128 v152 = 0LL;
                  __int128 v153 = v149 + 32;
                  __int128 v154 = v131 + 32;
                  while (v152 != v87)
                  {
                    v155 = 0;
                    v156 = 0LL;
                    uint64_t v157 = v152 + 1;
                    do
                    {
                      if (v39 == v156) {
                        goto LABEL_338;
                      }
                      char v160 = v156 + v152;
                      if (__OFADD__(v156, v152)) {
                        goto LABEL_339;
                      }
                      if (v160 >= v150)
                      {
                        if (v155) {
                          goto LABEL_308;
                        }
                        v155 = *(unsigned __int16 *)(v153 + 2 * v152);
                        if (*(_WORD *)(v153 + 2 * v152))
                        {
                          v155 = *(unsigned __int16 *)(v43 + 2 * v156 + 32);
                          if (*(_WORD *)(v43 + 2 * v156 + 32)) {
                            goto LABEL_308;
                          }
                        }
                      }

                      else
                      {
                        if (v160 < 0) {
                          goto LABEL_346;
                        }
                        uint64_t v158 = 2 * v160;
                        uint64_t v159 = v155
                        v155 = HIWORD(v159);
                        *(_WORD *)(v154 + v158) = v159;
                      }

                      ++v156;
                    }

                    while (v39 != v156);
                    if (v155)
                    {
                      Swift::UInt v50 = __OFADD__(v39, v152);
                      char v161 = v39 + v152;
                      if (v50) {
                        goto LABEL_370;
                      }
                      if (v161 >= v150)
                      {
LABEL_308:
                        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                        v164 = swift_allocError();
                        *v165 = 0;
                        swift_willThrow();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        Swift::UInt v108 = (void *)v164;
                        goto LABEL_192;
                      }

                      if (v161 < 0) {
                        goto LABEL_371;
                      }
                      *(_WORD *)(v154 + 2 * v161) = v155;
                    }

                    __int128 v152 = v157;
                    if (v157 == v87)
                    {
                      char v162 = *(void *)(v131 + 16);
                      if (v162 && !*(_WORD *)(v154 + 2 * v162 - 2))
                      {
                        do
                        {
                          *(void *)(v131 + 16) = v162 - 1;
                          if (v162 == 1) {
                            break;
                          }
                        }

                        while (!*(unsigned __int16 *)(v131 + 28 + 2 * v162--));
                      }

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      int v35 = v41;
                      Swift::UInt v83 = v185;
                      goto LABEL_272;
                    }
                  }

        __break(1u);
        goto LABEL_130;
      }

                __break(1u);
LABEL_130:
                __break(1u);
LABEL_131:
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
LABEL_134:
                __break(1u);
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
LABEL_138:
                __break(1u);
LABEL_139:
                __break(1u);
                goto LABEL_140;
              }
            }

            int64_t v60 = v66;
          }

                                swift_bridgeObjectRelease();
                                if ((v11 & 1) == 0)
                                {
LABEL_130:
                                  specialized _NativeDictionary._insert(at:key:value:)( a3,  v151._countAndFlagsBits,  (uint64_t)v151._object,  (uint64_t)v153,  (void *)v77);
                                  swift_bridgeObjectRetain();
                                  goto LABEL_131;
                                }

                                    uint64_t v2 = v77;
LABEL_130:
                                    MEMORY[0x186E20E60](v113, -1LL, -1LL);
                                    return v2;
                                  }

                                  id v89 = v78 + 6;
                                }
                              }
                            }
                          }
                        }

            swift_release();
            goto LABEL_130;
          }

          v156 = swift_slowAlloc();
          LODWORD(v176[0]) = 0;
          uint64_t v157 = unumf_resultToString();
          if (SLODWORD(v176[0]) > 0 || v157 <= 0)
          {
            MEMORY[0x186E20E60](v156, -1LL, -1LL);
            goto LABEL_129;
          }

          int64_t v74 = specialized String.init(_utf16:)(v156, v157);
          uint64_t v76 = v158;
          MEMORY[0x186E20E60](v156, -1LL, -1LL);
LABEL_122:
          swift_release();
          swift_release();
          if (v76)
          {
LABEL_132:
            Swift::UInt64 v33 = v175;
            uint64_t v77 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
            __int128 v128 = (uint64_t)v172;
            goto LABEL_133;
          }

                  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
                  swift_allocError();
                  *(_OWORD *)uint64_t v58 = 0u;
                  *(_OWORD *)(v58 + 16) = 0u;
                  Swift::UInt v59 = 6;
                  goto LABEL_174;
                }

                    __break(1u);
LABEL_130:
                    __break(1u);
LABEL_131:
                    __break(1u);
LABEL_132:
                    swift_bridgeObjectRelease_n();
                    goto LABEL_133;
                  }

                  uint64_t v16 = v22;
                }
              }
            }
          }

  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
  return result;
}

              outlined destroy of Any?( (uint64_t)v178,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of Any?( (uint64_t)v179,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of AttributedString._AttributeValue((uint64_t)v180);
              outlined destroy of AttributedString._AttributeValue((uint64_t)v182);
              outlined destroy of Any?( (uint64_t)&v183,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v189,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v194,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              Swift::UInt v83 = v168;
              if ((v99 & 1) == 0) {
                goto LABEL_161;
              }
LABEL_130:
              v97 += 2;
              if (!--v98)
              {
                outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205);
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                uint64_t v15 = v159;
                uint64_t v58 = v160;
                uint64_t v57 = v159[8];
                Swift::UInt v59 = v159[11];
                uint64_t v158 = v150;
                v183 = v160;
                v184 = v156;
                Swift::UInt v36 = v149;
                v164 = v156;
                v185 = v149;
                uint64_t v17 = __OFADD__(v157++, 1LL);
                if (v17) {
                  goto LABEL_215;
                }
                goto LABEL_76;
              }
            }
          }

          if (v57)
          {
            id v90 = *(unsigned __int8 *)(v57 + 18);
            id v91 = *(unsigned __int16 *)(v57 + 16);
            uint64_t result = swift_unknownObjectRelease_n();
            v156 = ((-15LL << ((4 * v90 + 8) & 0x3C)) - 1) & v90 | (unint64_t)(v91 << ((4 * v90 + 8) & 0x3C));
          }

          else
          {
            v156 = 0LL;
          }

          uint64_t v16 = v161;
          Swift::UInt v36 = v155;
          Swift::UInt v83 = v168;
          uint64_t v57 = 0LL;
          v183 = v153;
          goto LABEL_121;
        }

LABEL_97:
    Hasher._combine(_:)(0);
    if (v78)
    {
LABEL_93:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      id v87 = v78;
      _CFObject.hash(into:)();

      goto LABEL_99;
    }

        if (v64) {
          goto LABEL_137;
        }
        goto LABEL_103;
      }

  __break(1u);
  return result;
}

            if ((v78 & 0x1000000000000000LL) != 0)
            {
              *(void *)&v258 = v76;
              *((void *)&v258 + 1) = v78;
              lazy protocol witness table accessor for type String and conformance String();
              v253 = v76;
              swift_bridgeObjectRetain_n();
              StringProtocol._ephemeralString.getter();
              v208 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v209 = (unsigned __int16 *)objc_msgSend(v208, sel__fastCharacterContents);
              v210 = v208;
              if (v209)
              {
                *(void *)&v258 = v253;
                *((void *)&v258 + 1) = v78;
                StringProtocol._ephemeralString.getter();
                v211 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v212 = (uint64_t)objc_msgSend(v211, sel_length);
                swift_unknownObjectRelease();
                LOBYTE(v212) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v209,  v212,  4u,  1);
                swift_bridgeObjectRelease_n();
                uint64_t v76 = v253;
                if ((v212 & 1) == 0)
                {
LABEL_219:
                  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
                  swift_allocError();
                  *v213 = 3;
                  swift_willThrow();
                  swift_bridgeObjectRelease();
                  v244 = 0;
                  v243 = 876LL;
                  goto LABEL_284;
                }
              }

              else
              {
                uint64_t v76 = v253;
                v225 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v253,  v78,  4u,  1);
                swift_bridgeObjectRelease_n();
                if ((v225 & 1) == 0) {
                  goto LABEL_219;
                }
              }
            }

            else
            {
              if ((v78 & 0x2000000000000000LL) != 0)
              {
                id v88 = HIBYTE(v78) & 0xF;
                *(void *)&v258 = v76;
                *((void *)&v258 + 1) = v78 & 0xFFFFFFFFFFFFFFLL;
                id v87 = (char *)&v258;
              }

              else if ((v76 & 0x1000000000000000LL) != 0)
              {
                id v87 = (char *)((v78 & 0xFFFFFFFFFFFFFFFLL) + 32);
                id v88 = v76 & 0xFFFFFFFFFFFFLL;
              }

              else
              {
                id v87 = (char *)_StringObject.sharedUTF8.getter();
              }

              if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v87,  v88,  4u,  1)) {
                goto LABEL_219;
              }
            }

            goto LABEL_103;
          }

          int64_t v79 = (v80 << 16) - 65532;
          LOBYTE(v81) = 1;
        }

        if ((v79 & 0xC) != 4LL << v81) {
          goto LABEL_83;
        }
        goto LABEL_226;
      }
    }

    lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
    swift_allocError();
    *v204 = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
    v244 = 0;
    v243 = 831LL;
    goto LABEL_284;
  }

  if ((v65 & 0x2000000000000000LL) != 0)
  {
    unint64_t v67 = HIBYTE(v65) & 0xF;
    *(void *)&v258 = v63;
    *((void *)&v258 + 1) = v65 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v66 = (char *)&v258;
  }

  else if ((v63 & 0x1000000000000000LL) != 0)
  {
    unint64_t v66 = (char *)((v65 & 0xFFFFFFFFFFFFFFFLL) + 32);
    unint64_t v67 = v63 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    unint64_t v66 = (char *)_StringObject.sharedUTF8.getter();
  }

  if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v66, v67, 2u, 1)) {
    goto LABEL_67;
  }
LABEL_234:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *v217 = 1;
  swift_willThrow();
  swift_bridgeObjectRelease();
  v244 = 0;
  v243 = 810LL;
LABEL_284:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    *(void *)&Swift::UInt v108 = v54;
    *((void *)&v108 + 1) = v52;
    *(void *)&Swift::UInt8 v109 = v9;
    if (!__OFADD__(v51, 1LL))
    {
      if (v54 == v49)
      {
        uint64_t v106 = v51 + 1;
        int64_t v74 = v50;
        if (v9)
        {
          uint64_t v75 = v47;
          uint64_t v76 = v48;
          uint64_t v77 = *(void *)(v9 + 24 * ((v52 >> ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          swift_unknownObjectRetain();
          uint64_t v75 = v47;
          uint64_t v76 = v48;
          uint64_t v77 = specialized Rope._Node.subscript.getter(v52, v46);
          swift_unknownObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v78 = v53 + v77;
        if (!__OFADD__(v53, v77))
        {
          int64_t v79 = (__int128 *)(v107 + 16);
          swift_unknownObjectRetain();
          specialized Rope.formIndex(after:)(&v108, v46, v75, v76, v49);
          swift_unknownObjectRelease_n();
          id v102 = v108;
          unint64_t v80 = v109;
          if (v74 == 2)
          {
            unint64_t v81 = *(_OWORD *)(v107 + 32);
            Swift::UInt v108 = *v79;
            Swift::UInt8 v109 = v81;
            Swift::UInt8 v110 = *(_OWORD *)(v107 + 48);
            BigString.utf8.getter();
            BigString.startIndex.getter();
LABEL_106:
            Swift::UInt v83 = BigString.UTF8View.index(_:offsetBy:)();
            unint64_t v85 = v84;
            id v87 = v86;
            id v89 = v88;
            outlined release of Locale((uint64_t)v114);
            swift_release();
            *(void *)(v92 + 200) = v106;
            *(_OWORD *)(v92 + 208) = v102;
            *(void *)(v92 + 224) = v80;
            *(void *)(v92 + 232) = v83;
            *(void *)(v92 + 240) = v85;
            *(void *)(v92 + 248) = v87;
            *(void *)(v92 + 256) = v89;
            return;
          }

          Swift::UInt v82 = *(_OWORD *)(v107 + 32);
          Swift::UInt v108 = *v79;
          Swift::UInt8 v109 = v82;
          Swift::UInt8 v110 = *(_OWORD *)(v107 + 48);
          BigString.utf8.getter();
          if (!__OFSUB__(v78, v91 >> 11)) {
            goto LABEL_106;
          }
          goto LABEL_124;
        }

        goto LABEL_120;
      }

    if ((v104 & 0xF00000000000000LL) != 0) {
      goto LABEL_103;
    }
  }

                          swift_bridgeObjectRelease();
                          Swift::UInt8 v45 = v96;
                          if ((a7 & 1) == 0)
                          {
LABEL_98:
                            int64_t v65 = v39;
                            unint64_t v66 = v37;
                            unint64_t v67 = a8;
                            Swift::UInt v68 = v45;
                            Swift::UInt v69 = v33;
LABEL_61:
                            specialized _NativeDictionary._insert(at:key:value:)(v65, v66, v67, v68, v69, (void *)v25);
                            swift_bridgeObjectRetain();
LABEL_62:
                            *a6 = v25;
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            return;
                          }

        if (v68) {
          goto LABEL_137;
        }
        goto LABEL_103;
      }

        __break(1u);
        goto LABEL_98;
      }

              __break(1u);
LABEL_98:
              __break(1u);
              goto LABEL_99;
            }
          }

          else if (v11)
          {
            goto LABEL_70;
          }

          __break(1u);
          goto LABEL_80;
        }

          Hasher._combine(_:)(0);
          if (v77)
          {
LABEL_93:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            id v87 = v77;
            _CFObject.hash(into:)();

            if (v79)
            {
LABEL_94:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              id v88 = v79;
              _CFObject.hash(into:)();

              goto LABEL_100;
            }

          Hasher._combine(_:)(0);
          if (v77)
          {
LABEL_93:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            id v87 = v77;
            _CFObject.hash(into:)();

            if (v79)
            {
LABEL_94:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              id v88 = v79;
              _CFObject.hash(into:)();

              goto LABEL_100;
            }

            uint64_t v63 = 256LL;
          }

            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
            unint64_t v80 = static _DictionaryStorage.copy(original:)();
            uint64_t v77 = v80;
            if (!*(void *)(v8 + 16)) {
              goto LABEL_129;
            }
            unint64_t v81 = (char *)(v80 + 64);
            __srca = (char *)(v8 + 64);
            Swift::UInt v82 = (unint64_t)((1LL << *(_BYTE *)(v77 + 32)) + 63) >> 6;
            __int128 v142 = v77;
            if (v77 != v8 || v81 >= &__srca[8 * v82]) {
              memmove(v81, __srca, 8 * v82);
            }
            *(void *)(v77 + 16) = *(void *)(v8 + 16);
            Swift::UInt v83 = 1LL << *(_BYTE *)(v8 + 32);
            int64_t v84 = -1LL;
            if (v83 < 64) {
              int64_t v84 = ~(-1LL << v83);
            }
            uint64_t v148 = 0LL;
            uint64_t v150 = v84 & *(void *)(v8 + 64);
            __int128 v144 = (unint64_t)(v83 + 63) >> 6;
            while (1)
            {
              uint64_t v9 = v139;
              if (v150)
              {
                unint64_t v85 = __clz(__rbit64(v150));
                v150 &= v150 - 1;
                int64_t v86 = v85 | (v148 << 6);
              }

              else
              {
                id v98 = v148 + 1;
                if (__OFADD__(v148, 1LL))
                {
LABEL_133:
                  __break(1u);
                  goto LABEL_134;
                }

                if (v98 >= v144) {
                  goto LABEL_129;
                }
                id v99 = *(void *)&__srca[8 * v98];
                id v100 = v148 + 1;
                if (!v99)
                {
                  id v100 = v148 + 2;
                  if (v148 + 2 >= v144) {
                    goto LABEL_129;
                  }
                  id v99 = *(void *)&__srca[8 * v100];
                  if (!v99)
                  {
                    id v100 = v148 + 3;
                    if (v148 + 3 >= v144) {
                      goto LABEL_129;
                    }
                    id v99 = *(void *)&__srca[8 * v100];
                    if (!v99)
                    {
                      id v100 = v148 + 4;
                      if (v148 + 4 >= v144) {
                        goto LABEL_129;
                      }
                      id v99 = *(void *)&__srca[8 * v100];
                      if (!v99)
                      {
                        id v100 = v148 + 5;
                        if (v148 + 5 >= v144) {
                          goto LABEL_129;
                        }
                        id v99 = *(void *)&__srca[8 * v100];
                        if (!v99)
                        {
                          id v100 = v148 + 6;
                          if (v148 + 6 >= v144) {
                            goto LABEL_129;
                          }
                          id v99 = *(void *)&__srca[8 * v100];
                          if (!v99)
                          {
                            id v100 = v148 + 7;
                            if (v148 + 7 >= v144) {
                              goto LABEL_129;
                            }
                            id v99 = *(void *)&__srca[8 * v100];
                            if (!v99)
                            {
                              id v101 = v148 + 8;
                              if (v148 + 8 >= v144) {
                                goto LABEL_129;
                              }
                              id v99 = *(void *)&__srca[8 * v101];
                              if (!v99)
                              {
                                while (1)
                                {
                                  id v100 = v101 + 1;
                                  if (__OFADD__(v101, 1LL)) {
                                    goto LABEL_135;
                                  }
                                  uint64_t v77 = v142;
                                  uint64_t v9 = v139;
                                  if (v100 >= v144) {
                                    break;
                                  }
                                  id v99 = *(void *)&__srca[8 * v100];
                                  ++v101;
                                  if (v99) {
                                    goto LABEL_128;
                                  }
                                }

    uint64_t v63 = (v71 - 1) & v71;
    int64_t v65 = __clz(__rbit64(v71)) + (v60 << 6);
LABEL_74:
    unint64_t v66 = 8 * v65;
    unint64_t v67 = *(void *)(*(void *)(v4 + 48) + 8 * v65);
    Swift::UInt v68 = 16 * v65;
    Swift::UInt v69 = *(_OWORD *)(*(void *)(v4 + 56) + v68);
    *(void *)(*(void *)(v41 + 48) + v66) = v67;
    *(_OWORD *)(*(void *)(v41 + 56) + v68) = v69;
    uint64_t result = (char *)swift_unknownObjectRetain();
  }

  int64_t v72 = v70 + 7;
  if (v72 >= v98) {
    goto LABEL_98;
  }
  unint64_t v71 = *(void *)&__srca[8 * v72];
  if (v71)
  {
    int64_t v60 = v72;
    goto LABEL_97;
  }

  while (1)
  {
    int64_t v60 = v72 + 1;
    if (__OFADD__(v72, 1LL)) {
      goto LABEL_150;
    }
    if (v60 >= v98) {
      break;
    }
    unint64_t v71 = *(void *)&__srca[8 * v60];
    ++v72;
    if (v71) {
      goto LABEL_97;
    }
  }

              uint64_t v53 = (uint64_t)v9;
              *(void *)&__src[8] = v53;
              BYTE8(__src[8]) = (uint64_t)v9 == 0x7FFFFFFFFFFFFFFFLL;
              if ((v12 & 0x40) == 0)
              {
LABEL_58:
                if ((v12 & 0x80) == 0) {
                  goto LABEL_59;
                }
                goto LABEL_103;
              }

                  char v160 = (char *)v337._nsError._reserved;
                  if (v337._nsError._reserved < (void *)v337._nsError._code)
                  {
                    char v161 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  (uint64_t)v337._nsError._reserved);
                    v337._nsError._reserved = v160 + 1;
                    if (v161 == 45) {
                      goto LABEL_99;
                    }
                  }

                  __dst[0] = *(_OWORD *)&v337._nsError._domain;
                  __dst[1] = v338;
                  *(void *)&__dst[2] = v339;
                  __tp.tv_sec = 0LL;
                  __tp.tv_nsec = 0LL;
                  clock_gettime(_CLOCK_REALTIME, &__tp);
                  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
                  v179 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                  *(void *)&__dst[0] = 0LL;
                  *((void *)&__dst[0] + 1) = 0xE000000000000000LL;
                  _StringGuts.grow(_:)(88LL);
                  v180._countAndFlagsBits = 0x7020746F6E6E6143LL;
                  v180._object = (void *)0xED00002065737261LL;
                  String.append(_:)(v180);
                  v181._countAndFlagsBits = a1;
                  v181._object = a2;
                  String.append(_:)(v181);
                  v182._object = (void *)0x80000001839CAB20LL;
                  v182._countAndFlagsBits = 0xD000000000000046LL;
                  String.append(_:)(v182);
                  String.append(_:)(v179);
                  v183._countAndFlagsBits = 46LL;
                  v183._object = (void *)0xE100000000000000LL;
                  String.append(_:)(v183);
                  v184 = __dst[0];
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                  v185 = swift_allocObject();
                  v186 = specialized static Array._adoptStorage(_:count:)(v185, 1LL);
                  v188 = v187;
                  *v187 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
                  v188[1] = v189;
                  v188[5] = (id)MEMORY[0x189617FA8];
                  *((_OWORD *)v188 + 1) = v184;
                  v190 = destructiveProjectEnumData for PredicateCodableError(v186, v189);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                  v191 = (void *)static _DictionaryStorage.allocate(capacity:)();
                  outlined init with copy of (String, Any)(v190 + 32, (uint64_t)__dst);
                  v192 = __dst[0];
                  swift_retain();
                  v193 = specialized __RawDictionaryStorage.find<A>(_:)(v192, *((uint64_t *)&v192 + 1));
                  if ((v194 & 1) == 0)
                  {
                    v191[(v193 >> 6) + 8] |= 1LL << v193;
                    *(_OWORD *)(v191[6] + 16 * v193) = v192;
                    outlined init with take of Any(&__dst[1], (_OWORD *)(v191[7] + 32 * v193));
                    v195 = v191[2];
                    uint64_t v40 = __OFADD__(v195, 1LL);
                    v196 = v195 + 1;
                    if (!v40)
                    {
                      v191[2] = v196;
                      swift_release();
                      swift_bridgeObjectRelease();
                      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                      v197 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
                      v198 = String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      uint64_t v7 = objc_msgSend( v197,  sel_initWithDomain_code_userInfo_,  v198,  2048,  _NativeDictionary.bridged()());
                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();
                      a3 = (char *)objc_msgSend(v7, sel_domain);
                      v199 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                      v201 = v200;

                      v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                      a2 = v203;
                      if (v199 == v202 && v201 == v203) {
                        goto LABEL_176;
                      }
                      a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((a1 & 1) != 0) {
                        goto LABEL_216;
                      }
                      __break(1u);
LABEL_120:
                      if (v164) {
                        v204 = 0LL;
                      }
                      else {
                        v204 = 2LL;
                      }
                      v205 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)( v204,  v163,  0,  (unint64_t *)&v337._nsError._reserved,  0x30u,  0x39u,  a1,  a2);
                      if (v7) {
                        goto LABEL_217;
                      }
                      v206 = v205;
                      LOBYTE(__dst[0]) = 3;
                      _CalendarGregorian.maximumRange(of:)((uint64_t)__dst);
                      if ((v209 & 1) != 0)
                      {
LABEL_288:
                        __break(1u);
                        JUMPOUT(0x183400860LL);
                      }

                      if (!specialized Range.contains(_:)(v206, v207, v208)) {
                        goto LABEL_215;
                      }
                      DateComponents.day.setter(v206, 0);
LABEL_127:
                      if ((userInfo & 0x10) == 0) {
                        goto LABEL_128;
                      }
                      if (BYTE4(v337._nsError._domain) == 1)
                      {
                        v213 = (char *)v337._nsError._reserved;
                        code = v337._nsError._code;
                        if (v337._nsError._reserved >= (void *)v337._nsError._code
                          || (v214 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  (uint64_t)v337._nsError._reserved),  unint64_t v29 = v213 + 1,  v337._nsError._reserved = v213 + 1,  v214 != 84))
                        {
                          __dst[0] = *(_OWORD *)&v337._nsError._domain;
                          __dst[1] = v338;
                          *(void *)&__dst[2] = v339;
                          __tp.tv_sec = 0LL;
                          __tp.tv_nsec = 0LL;
                          clock_gettime(_CLOCK_REALTIME, &__tp);
                          *(double *)&__tp.tv_sec = (double)__tp.tv_sec
                                                  + -978307200.0
                                                  + (double)__tp.tv_nsec * 0.000000001;
                          v215 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                          *(void *)&__dst[0] = 0LL;
                          *((void *)&__dst[0] + 1) = 0xE000000000000000LL;
                          _StringGuts.grow(_:)(88LL);
                          v216._countAndFlagsBits = 0x7020746F6E6E6143LL;
                          v216._object = (void *)0xED00002065737261LL;
                          String.append(_:)(v216);
                          v217._countAndFlagsBits = a1;
                          v217._object = a2;
                          String.append(_:)(v217);
                          v218._object = (void *)0x80000001839CAB20LL;
                          v218._countAndFlagsBits = 0xD000000000000046LL;
                          String.append(_:)(v218);
                          String.append(_:)(v215);
                          v219._countAndFlagsBits = 46LL;
                          v219._object = (void *)0xE100000000000000LL;
                          String.append(_:)(v219);
                          v220 = __dst[0];
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                          v221 = swift_allocObject();
                          v222 = specialized static Array._adoptStorage(_:count:)(v221, 1LL);
                          v224 = v223;
                          *v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
                          v224[1] = v225;
                          v224[5] = (id)MEMORY[0x189617FA8];
                          *((_OWORD *)v224 + 1) = v220;
                          v226 = destructiveProjectEnumData for PredicateCodableError(v222, v225);
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                          v227 = (void *)static _DictionaryStorage.allocate(capacity:)();
                          outlined init with copy of (String, Any)(v226 + 32, (uint64_t)__dst);
                          v228 = __dst[0];
                          swift_retain();
                          v229 = specialized __RawDictionaryStorage.find<A>(_:)(v228, *((uint64_t *)&v228 + 1));
                          if ((v230 & 1) == 0)
                          {
                            v227[(v229 >> 6) + 8] |= 1LL << v229;
                            *(_OWORD *)(v227[6] + 16 * v229) = v228;
                            outlined init with take of Any(&__dst[1], (_OWORD *)(v227[7] + 32 * v229));
                            v231 = v227[2];
                            uint64_t v40 = __OFADD__(v231, 1LL);
                            v232 = v231 + 1;
                            if (!v40)
                            {
                              v227[2] = v232;
                              swift_release();
                              swift_bridgeObjectRelease();
                              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                              v233 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
                              v234 = String._bridgeToObjectiveCImpl()();
                              swift_bridgeObjectRelease();
                              uint64_t v7 = objc_msgSend( v233,  sel_initWithDomain_code_userInfo_,  v234,  2048,  _NativeDictionary.bridged()());
                              swift_unknownObjectRelease();
                              swift_unknownObjectRelease();
                              a3 = (char *)objc_msgSend(v7, sel_domain);
                              v235 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                              v237 = v236;

                              v238 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                              a2 = v239;
                              if (v235 != v238 || v237 != v239)
                              {
                                a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                if ((a1 & 1) == 0)
                                {
                                  __break(1u);
                                  goto LABEL_140;
                                }

                __break(1u);
                goto LABEL_98;
              }

                outlined destroy of Any?( (uint64_t)v214,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?( (uint64_t)v223,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v183);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v188);
                outlined destroy of Any?( (uint64_t)&v189,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v195,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                uint64_t result = outlined destroy of Any?( (uint64_t)&v200,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v71 & 1) == 0) {
                  goto LABEL_129;
                }
LABEL_98:
                v70 += 2;
                ++v69;
                unint64_t v64 = v182;
                if (v72 == v46)
                {
                  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v216);
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  id v91 = v151;
                  __int128 v169 = v151;
                  uint64_t v13 = v156;
                  if (v150 < v174) {
                    goto LABEL_73;
                  }
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  __int128 v169 = v91;
                  goto LABEL_130;
                }
              }
            }
          }

          uint64_t v54 = *(unsigned __int8 *)(v47 + 18);
          uint64_t v55 = (4 * v54 + 8) & 0x3C;
          uint64_t v56 = (v49 >> v55) & 0xF;
          *(void *)&v210 = v56;
          if (v54)
          {
            swift_unknownObjectRetain();
            uint64_t v57 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v47 + 16,  v47 + 24,  (uint64_t *)&v210,  (uint64_t)&v189,  v54);
            uint64_t result = swift_unknownObjectRelease();
            if ((v57 & 1) == 0) {
              goto LABEL_209;
            }
            if (v189 != v179) {
              goto LABEL_208;
            }
            uint64_t v53 = v190;
            Swift::UInt v50 = v191;
            uint64_t v46 = v177;
            if (v191) {
              goto LABEL_85;
            }
          }

          else
          {
            if (!v56) {
              goto LABEL_209;
            }
            uint64_t v53 = ((v56 - 1) << v55) | ((-15LL << v55) - 1) & v49;
            v190 = v53;
            v191 = v47;
            Swift::UInt v50 = v47;
            if (v47) {
              goto LABEL_85;
            }
          }

          swift_unknownObjectRetain();
          v180 = v53;
          Swift::UInt v59 = specialized Rope._Node.subscript.getter(v53, v47);
          swift_unknownObjectRelease();
          v178 = 0LL;
          int64_t v60 = 1;
          goto LABEL_89;
        }

        if (v180) {
          goto LABEL_78;
        }
LABEL_205:
        __break(1u);
        goto LABEL_206;
      }

LABEL_137:
      __break(1u);
      goto LABEL_138;
    }

    int v47 = v60;
    goto LABEL_64;
  }

          int64_t v30 = 512LL;
LABEL_143:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_285;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          Swift::UInt v82 = (int)POSIXErrorCode.rawValue.getter();
          Swift::UInt v83 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          int64_t v84 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          int64_t v72 = objc_msgSend(v83, sel_initWithDomain_code_userInfo_, v84, v82, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v85 = objc_msgSend(v72, sel_domain);
          int64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
          uint64_t v15 = v87;

          id v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          LODWORD(v23) = v89;
          if (v86 == v88 && v15 == v89)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_148;
          }

          id v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v90 & 1) != 0) {
            goto LABEL_148;
          }
          break;
      }

  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

            __int128 v141 = (v150 - 1) & v150;
            uint64_t v145 = __clz(__rbit64(v150)) + (v143 << 6);
          }

          uint64_t v146 = (uint64_t *)(*(void *)(v417 + 56) + 16 * v145);
          uint64_t v147 = *v146;
          uint64_t v148 = v146[1];
          swift_bridgeObjectRetain_n();
          outlined copy of Data._Representation(v147, v148);
          specialized Data._Representation.withUnsafeBytes<A>(_:)(v147, v148);
          outlined consume of Data._Representation(v147, v148);
          swift_bridgeObjectRelease();
        }
      }

      int64_t v65 = MEMORY[0x186E1B0E8](v117);
      if (v60 && objc_msgSend(v60, sel_isCancelled))
      {
        uint64_t v119 = v52;
        unlink(v52);
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        uint64_t v120 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v121 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v122 = objc_msgSend(v120, sel_initWithDomain_code_userInfo_, v121, 3072, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        int64_t v123 = objc_msgSend(v122, sel_domain);
        uint64_t v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
        uint64_t v126 = v125;

        if (v124 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v126 == v127)
        {
          swift_bridgeObjectRelease_n();
        }

        else
        {
          v242 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v242 & 1) == 0) {
            goto LABEL_355;
          }
        }

        swift_willThrow();

        close(v416);
        MEMORY[0x186E20E60](v119, -1LL, -1LL);
        return swift_bridgeObjectRelease();
      }

      if ((v413 & 1) == 0)
      {
        CocoaError.Code.init(fileErrno:reading:)(v65, 0);
        __int128 v172 = (uint64_t (*)(void))v418._countAndFlagsBits;
        if (v65 == 102)
        {
          __int128 v173 = 0LL;
        }

        else
        {
          v410 = v60;
          v233 = v52;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_361;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          v234 = (int)POSIXErrorCode.rawValue.getter();
          v235 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          v236 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          __int128 v173 = objc_msgSend(v235, sel_initWithDomain_code_userInfo_, v236, v234, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v237 = objc_msgSend(v173, sel_domain);
          v238 = static String._unconditionallyBridgeFromObjectiveC(_:)(v237);
          v240 = v239;

          if (v238 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v240 == v241)
          {
            swift_bridgeObjectRelease_n();
          }

          else
          {
            v374 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v374 & 1) == 0) {
              goto LABEL_359;
            }
          }

          Swift::UInt8 v52 = v233;
          int64_t v60 = v410;
        }

        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( v172,  (uint64_t)v409,  v7,  v173,  0LL,  0LL,  0LL,  0LL,  &v421,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
        goto LABEL_338;
      }

      CocoaError.Code.init(fileErrno:reading:)(v65, 0);
      v414 = v420;
      swift_retain_n();
      int v135 = v409;
      swift_retain_n();
      uint64_t v136 = v135;
      v412 = v118;
      v410 = v60;
      if (v65 == 102)
      {
        uint64_t v137 = 0LL;
      }

      else
      {
        v224 = v52;
        v406 = v8;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
          goto LABEL_360;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        v225 = (int)POSIXErrorCode.rawValue.getter();
        v226 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        v227 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v137 = objc_msgSend(v226, sel_initWithDomain_code_userInfo_, v227, v225, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v228 = objc_msgSend(v137, sel_domain);
        v229 = static String._unconditionallyBridgeFromObjectiveC(_:)(v228);
        v231 = v230;

        if (v229 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v231 == v232)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v8 = v406;
        }

        else
        {
          v342 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v8 = v406;
          if ((v342 & 1) == 0) {
            goto LABEL_358;
          }
        }

        Swift::UInt8 v52 = v224;
      }

      v343 = v136;
      v344 = v7;
      swift_retain();
      swift_retain();
      v345 = _foundation_swift_url_feature_enabled();
      v408 = (uint64_t *)v52;
      if (!v345)
      {
        v360 = v8;
        v361 = v344;
        v362 = objc_msgSend(v343, sel__parameterString);
        if (v362)
        {
          v363 = v362;
          v364 = static String._unconditionallyBridgeFromObjectiveC(_:)(v362);
          v366 = v365;

          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
            && (v367 = objc_msgSend(v343, sel_path)) != 0)
          {
            v368 = v367;
            v346 = v343;
            v369 = static String._unconditionallyBridgeFromObjectiveC(_:)(v367);
            v371 = v370;

            v421._countAndFlagsBits = (uint64_t)v369;
            v421._object = v371;
            swift_bridgeObjectRetain();
            v372._countAndFlagsBits = 59LL;
            v372._object = (void *)0xE100000000000000LL;
            String.append(_:)(v372);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v373._countAndFlagsBits = (uint64_t)v364;
            v373._object = v366;
            String.append(_:)(v373);
            swift_bridgeObjectRelease();
          }

          else
          {
            v346 = v343;
            v421._countAndFlagsBits = 59LL;
            v421._object = (void *)0xE100000000000000LL;
            v377._countAndFlagsBits = (uint64_t)v364;
            v377._object = v366;
            String.append(_:)(v377);
          }

          swift_bridgeObjectRelease();
          v378 = v409;
          v379 = v361;
          v380 = v361;
          uint64_t v8 = v360;
          outlined consume of PathOrURL(v409, v380, v360, 1);
          v381 = v414;
        }

        else
        {
          v346 = v343;
          v382 = objc_msgSend(v343, sel_path);
          if (v382)
          {
            v383 = v382;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v382);
          }

          v378 = v409;
          v379 = v344;
          uint64_t v8 = v360;
          outlined consume of PathOrURL(v409, v344, v360, 1);
          v381 = v414;
        }

        goto LABEL_331;
      }

      v421._countAndFlagsBits = (uint64_t)v343;
      v421._object = (void *)v7;
      v422 = v8;
      v346 = v343;
      v347 = v343;
      v417 = v7;
      swift_retain();
      swift_retain();
      v348 = URL.path(percentEncoded:)(1);
      v421 = v348;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v348._countAndFlagsBits, (unint64_t)v348._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }

      v418._countAndFlagsBits = Set.init(minimumCapacity:)();
      v349 = specialized Set._Variant.insert(_:)(&v419, 0x2FuLL);
      v350 = v418._countAndFlagsBits;
      v351 = v421._countAndFlagsBits;
      v352 = v421._object;
      v353 = ((unint64_t)v421._object >> 56) & 0xF;
      if (v353)
      {
        v354 = v8;
        v418 = v421;
        MEMORY[0x1895F8858](v349);
        v404 = (uint64_t)&v418;
        v405 = v350;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v403,  v351,  (unint64_t)v352);
        if (v355 == 1)
        {
          v357 = (unint64_t)v418._object;
          v356 = v418._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v356, v357, v350);
          v359 = v358;
          swift_bridgeObjectRelease();
        }

        else
        {
          v359 = v355;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v8 = v354;
        v381 = v414;
        if (!v359)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v395 = v409;
          v396 = v417;
          outlined consume of PathOrURL(v409, v417, v8, 1);
          outlined consume of PathOrURL(v395, v396, v8, 1);
          goto LABEL_330;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        v381 = v414;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v393 = v409;
      v394 = v417;
      outlined consume of PathOrURL(v409, v417, v8, 1);
      outlined consume of PathOrURL(v393, v394, v8, 1);
LABEL_330:
      v379 = v417;
      v378 = v409;
LABEL_331:
      v397 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v398 = v346;
      outlined consume of PathOrURL(v378, v379, v8, 1);
      if (v137)
      {
        v421._countAndFlagsBits = (uint64_t)v137;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        uint64_t v137 = v137;
        if (_getErrorEmbeddedNSError<A>(_:)())
        {
        }

        else
        {
          swift_allocError();
          *v400 = v137;
        }

        v399 = (void *)_swift_stdlib_bridgeErrorToNSError();
      }

      else
      {
        v399 = 0LL;
      }

       objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v381,  v397,  v398,  v399,  0,  0,  0);

      swift_unknownObjectRelease();
      outlined consume of PathOrURL(v409, v379, v8, 1);
      BOOL v118 = v412;
      Swift::UInt8 v52 = (char *)v408;
      int64_t v60 = v410;
LABEL_338:
      swift_willThrow();

      close(v416);
      goto LABEL_339;
    }

    __int128 v130 = MEMORY[0x186E1B0E8]();
    int64_t v65 = v130;
    if ((v413 & 1) == 0)
    {
      CocoaError.Code.init(fileErrno:reading:)(v130, 0);
      __int128 v168 = (uint64_t (*)(void))v418._countAndFlagsBits;
      __int128 v169 = (uint64_t)v409;
      if (v65 == 102)
      {
        uint64_t v170 = 0LL;
      }

      else
      {
        v207 = v52;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
          goto LABEL_361;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        v208 = (int)POSIXErrorCode.rawValue.getter();
        v209 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        v210 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v170 = objc_msgSend(v209, sel_initWithDomain_code_userInfo_, v210, v208, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v211 = objc_msgSend(v170, sel_domain);
        v212 = static String._unconditionallyBridgeFromObjectiveC(_:)(v211);
        v214 = v213;

        if (v212 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v214 == v215)
        {
          swift_bridgeObjectRelease_n();
        }

        else
        {
          v336 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v336 & 1) == 0) {
            goto LABEL_357;
          }
        }

        Swift::UInt8 v52 = v207;
      }

      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( v168,  v169,  v7,  v170,  0LL,  0LL,  0LL,  0LL,  &v421,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
      goto LABEL_325;
    }

    CocoaError.Code.init(fileErrno:reading:)(v130, 0);
    v416 = v420;
    swift_retain_n();
    __int128 v131 = v409;
    swift_retain_n();
    uint64_t v132 = v131;
    v408 = (uint64_t *)v52;
    uint64_t v133 = v8;
    if (v65 == 102)
    {
      uint64_t v134 = 0LL;
    }

    else
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
        goto LABEL_360;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      v199 = (int)POSIXErrorCode.rawValue.getter();
      v200 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      v201 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v134 = objc_msgSend(v200, sel_initWithDomain_code_userInfo_, v201, v199, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v202 = objc_msgSend(v134, sel_domain);
      v203 = static String._unconditionallyBridgeFromObjectiveC(_:)(v202);
      v205 = v204;

      if (v203 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v205 == v206)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        v309 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v309 & 1) == 0) {
          goto LABEL_356;
        }
      }

      Swift::UInt8 v52 = (char *)v408;
    }

    v310 = v132;
    swift_retain();
    swift_retain();
    if (!_foundation_swift_url_feature_enabled())
    {
      v323 = objc_msgSend(v310, sel__parameterString);
      if (v323)
      {
        v324 = v323;
        v325 = static String._unconditionallyBridgeFromObjectiveC(_:)(v323);
        v327 = v326;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (v328 = objc_msgSend(v310, sel_path)) != 0)
        {
          v329 = v328;
          v330 = static String._unconditionallyBridgeFromObjectiveC(_:)(v328);
          v331 = v7;
          v333 = v332;

          v421._countAndFlagsBits = (uint64_t)v330;
          v421._object = v333;
          swift_bridgeObjectRetain();
          v334._countAndFlagsBits = 59LL;
          v334._object = (void *)0xE100000000000000LL;
          String.append(_:)(v334);
          uint64_t v7 = v331;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v335._countAndFlagsBits = (uint64_t)v325;
          v335._object = v327;
          String.append(_:)(v335);
          swift_bridgeObjectRelease();
          Swift::UInt8 v52 = (char *)v408;
        }

        else
        {
          v421._countAndFlagsBits = 59LL;
          v421._object = (void *)0xE100000000000000LL;
          v337._countAndFlagsBits = (uint64_t)v325;
          v337._object = v327;
          String.append(_:)(v337);
        }

        swift_bridgeObjectRelease();
        v338 = v409;
        v339 = v133;
        outlined consume of PathOrURL(v409, v7, v133, 1);
      }

      else
      {
        v340 = objc_msgSend(v310, sel_path);
        if (v340)
        {
          v341 = v340;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v340);
        }

        v338 = v409;
        v339 = v133;
        outlined consume of PathOrURL(v409, v7, v133, 1);
      }

      goto LABEL_318;
    }

    v421._countAndFlagsBits = (uint64_t)v310;
    v421._object = (void *)v7;
    v422 = v133;
    v311 = v310;
    v417 = v7;
    swift_retain();
    v406 = v133;
    swift_retain();
    v312 = URL.path(percentEncoded:)(1);
    v421 = v312;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v312._countAndFlagsBits, (unint64_t)v312._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v418._countAndFlagsBits = Set.init(minimumCapacity:)();
    v313 = specialized Set._Variant.insert(_:)(&v419, 0x2FuLL);
    v314 = v418._countAndFlagsBits;
    v315 = v421._countAndFlagsBits;
    v316 = v421._object;
    v317 = ((unint64_t)v421._object >> 56) & 0xF;
    if (v317)
    {
      v418 = v421;
      MEMORY[0x1895F8858](v313);
      v404 = (uint64_t)&v418;
      v405 = v314;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v403,  v315,  (unint64_t)v316);
      if (v318 == 1)
      {
        v320 = (unint64_t)v418._object;
        v319 = v418._countAndFlagsBits;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v319, v320, v314);
        v322 = v321;
        swift_bridgeObjectRelease();
      }

      else
      {
        v322 = v318;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = v417;
      if (!v322)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v384 = v409;
        v385 = v406;
        outlined consume of PathOrURL(v409, v7, v406, 1);
        outlined consume of PathOrURL(v384, v7, v385, 1);
        goto LABEL_317;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v7 = v417;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v375 = v409;
    v376 = v406;
    outlined consume of PathOrURL(v409, v7, v406, 1);
    outlined consume of PathOrURL(v375, v7, v376, 1);
LABEL_317:
    Swift::UInt8 v52 = (char *)v408;
    v338 = v409;
    v339 = v406;
LABEL_318:
    v386 = v52;
    v387 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v388 = v310;
    v389 = v339;
    outlined consume of PathOrURL(v338, v7, v339, 1);
    if (v134)
    {
      v421._countAndFlagsBits = (uint64_t)v134;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      uint64_t v134 = v134;
      if (_getErrorEmbeddedNSError<A>(_:)())
      {
      }

      else
      {
        swift_allocError();
        *v392 = v134;
      }

      v391 = v416;
      v390 = (void *)_swift_stdlib_bridgeErrorToNSError();
    }

    else
    {
      v390 = 0LL;
      v391 = v416;
    }

     objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v391,  v387,  v388,  v390,  0,  0,  0);

    swift_unknownObjectRelease();
    outlined consume of PathOrURL(v338, v7, v389, 1);
    Swift::UInt8 v52 = v386;
LABEL_325:
    swift_willThrow();
LABEL_339:
    MEMORY[0x186E20E60](v52, -1LL, -1LL);
    return swift_bridgeObjectRelease();
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  int64_t v86 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  id v87 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v88 = objc_msgSend(v86, sel_initWithDomain_code_userInfo_, v87, 514, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v89 = objc_msgSend(v88, sel_domain);
  id v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
  id v92 = v91;

  if (v90 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v92 == v93)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    unint64_t v114 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v114 & 1) == 0) {
      goto LABEL_349;
    }
  }

  swift_willThrow();
  unint64_t v115 = v52;
LABEL_101:
  MEMORY[0x186E20E60](v115, -1LL, -1LL);
  return swift_bridgeObjectRelease();
}

                id v95 = (v105 - 1) & v105;
                BOOL v118 = v106;
                id v97 = __clz(__rbit64(v105)) + (v106 << 6);
              }

              id v98 = 16 * v97;
              id v99 = (void *)(*(void *)(v21 + 48) + 16 * v97);
              id v100 = v99[1];
              id v101 = 8 * v97;
              id v102 = *(void **)(*(void *)(v21 + 56) + v101);
              id v103 = (void *)(*(void *)(v28 + 48) + v98);
              *id v103 = *v99;
              v103[1] = v100;
              *(void *)(*(void *)(v28 + 56) + v101) = v102;
              swift_bridgeObjectRetain();
              uint64_t result = v102;
            }
          }

          int64_t v28 = v21;
        }

        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v27,  isUniquelyReferenced_nonNull_native);
          int64_t v28 = v121;
          unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
        }

        goto LABEL_25;
      }

      goto LABEL_27;
    }

    swift_bridgeObjectRelease();
  }

  type metadata accessor for _TimeZoneICU();
  swift_allocObject();
  swift_bridgeObjectRetain();
  int64_t v30 = _TimeZoneICU.init(identifier:)(a1, a2);
  if (!v30) {
    return 0LL;
  }
  uint64_t v15 = (uint64_t)v30;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v121 = *(void *)(v4 + 40);
  uint64_t v21 = v121;
  *(void *)(v4 + 40) = 0x8000000000000000LL;
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  uint64_t v32 = *(void *)(v21 + 16);
  Swift::UInt64 v33 = (v31 & 1) == 0;
  Swift::UInt64 v34 = v32 + v33;
  if (__OFADD__(v32, v33))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  LOBYTE(v3) = v31;
  if (*(void *)(v21 + 24) < v34)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, isUniquelyReferenced_nonNull_native);
    int v35 = v121;
    Swift::UInt v36 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    uint64_t v10 = v36;
    goto LABEL_21;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_28:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _TimeZoneProtocol>);
    Swift::UInt v42 = static _DictionaryStorage.copy(original:)();
    int v35 = v42;
    if (*(void *)(v21 + 16))
    {
      uint64_t result = (char *)(v42 + 64);
      __src = (char *)(v21 + 64);
      uint64_t v44 = (unint64_t)((1LL << *(_BYTE *)(v35 + 32)) + 63) >> 6;
      if (v35 != v21 || result >= &__src[8 * v44]) {
        uint64_t result = (char *)memmove(result, __src, 8 * v44);
      }
      Swift::UInt8 v45 = 0LL;
      *(void *)(v35 + 16) = *(void *)(v21 + 16);
      uint64_t v46 = 1LL << *(_BYTE *)(v21 + 32);
      int v47 = -1LL;
      if (v46 < 64) {
        int v47 = ~(-1LL << v46);
      }
      Swift::UInt v48 = v47 & *(void *)(v21 + 64);
      Swift::UInt8 v110 = (unint64_t)(v46 + 63) >> 6;
      while (1)
      {
        if (v48)
        {
          Swift::UInt64 v49 = __clz(__rbit64(v48));
          v48 &= v48 - 1;
          Swift::UInt v50 = v49 | (v45 << 6);
        }

        else
        {
          uint64_t v57 = v45 + 1;
          if (__OFADD__(v45, 1LL))
          {
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
            goto LABEL_147;
          }

          if (v57 >= v110) {
            break;
          }
          uint64_t v58 = *(void *)&__src[8 * v57];
          ++v45;
          if (!v58)
          {
            Swift::UInt8 v45 = v57 + 1;
            if (v57 + 1 >= v110) {
              break;
            }
            uint64_t v58 = *(void *)&__src[8 * v45];
            if (!v58)
            {
              Swift::UInt8 v45 = v57 + 2;
              if (v57 + 2 >= v110) {
                break;
              }
              uint64_t v58 = *(void *)&__src[8 * v45];
              if (!v58)
              {
                Swift::UInt8 v45 = v57 + 3;
                if (v57 + 3 >= v110) {
                  break;
                }
                uint64_t v58 = *(void *)&__src[8 * v45];
                if (!v58)
                {
                  Swift::UInt8 v45 = v57 + 4;
                  if (v57 + 4 >= v110) {
                    break;
                  }
                  uint64_t v58 = *(void *)&__src[8 * v45];
                  if (!v58)
                  {
                    Swift::UInt8 v45 = v57 + 5;
                    if (v57 + 5 >= v110) {
                      break;
                    }
                    uint64_t v58 = *(void *)&__src[8 * v45];
                    if (!v58)
                    {
                      Swift::UInt8 v45 = v57 + 6;
                      if (v57 + 6 >= v110) {
                        break;
                      }
                      uint64_t v58 = *(void *)&__src[8 * v45];
                      if (!v58)
                      {
                        Swift::UInt v59 = v57 + 7;
                        if (v59 >= v110) {
                          break;
                        }
                        uint64_t v58 = *(void *)&__src[8 * v59];
                        if (!v58)
                        {
                          while (1)
                          {
                            Swift::UInt8 v45 = v59 + 1;
                            if (__OFADD__(v59, 1LL)) {
                              break;
                            }
                            if (v45 >= v110) {
                              goto LABEL_60;
                            }
                            uint64_t v58 = *(void *)&__src[8 * v45];
                            ++v59;
                            if (v58) {
                              goto LABEL_59;
                            }
                          }

LABEL_65:
  swift_bridgeObjectRetain();
  Hasher._combine(_:)(v46);
  swift_bridgeObjectRelease();
  uint64_t v44 = *((void *)&v141 + 1);
  if (!*((void *)&v141 + 1)) {
    goto LABEL_38;
  }
LABEL_66:
  Hasher._combine(_:)(1u);
  uint64_t v61 = 0LL;
  uint64_t v62 = 0LL;
  uint64_t v63 = v44 + 64;
  unint64_t v64 = 1LL << *(_BYTE *)(v44 + 32);
  if (v64 < 64) {
    int64_t v65 = ~(-1LL << v64);
  }
  else {
    int64_t v65 = -1LL;
  }
  unint64_t v66 = v65 & *(void *)(v44 + 64);
  unint64_t v67 = (unint64_t)(v64 + 63) >> 6;
  uint64_t v124 = v133;
  uint64_t v126 = v132;
  uint64_t v120 = v135;
  uint64_t v122 = v134;
  Swift::UInt v68 = v136;
  while (2)
  {
    if (v66)
    {
      Swift::UInt v69 = __clz(__rbit64(v66));
      v66 &= v66 - 1;
      int64_t v70 = v69 | (v62 << 6);
LABEL_71:
      unint64_t v71 = *(unsigned __int8 *)(*(void *)(v44 + 48) + v70);
      int64_t v72 = *(void *)(*(void *)(v44 + 56) + 8 * v70);
      uint64_t v127 = v126;
      __int128 v128 = v124;
      uint64_t v129 = v122;
      __int128 v130 = v120;
      __int128 v131 = v68;
      Hasher._combine(_:)(v71);
      Hasher._combine(_:)(v72);
      v61 ^= Hasher._finalize()();
      continue;
    }

    break;
  }

  Swift::UInt v73 = v62 + 1;
  if (__OFADD__(v62, 1LL)) {
    goto LABEL_136;
  }
  if (v73 >= v67)
  {
LABEL_87:
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v61);
    swift_bridgeObjectRelease();
    goto LABEL_88;
  }

  int64_t v74 = *(void *)(v63 + 8 * v73);
  ++v62;
  if (v74) {
    goto LABEL_86;
  }
  uint64_t v62 = v73 + 1;
  if (v73 + 1 >= v67) {
    goto LABEL_87;
  }
  int64_t v74 = *(void *)(v63 + 8 * v62);
  if (v74) {
    goto LABEL_86;
  }
  uint64_t v62 = v73 + 2;
  if (v73 + 2 >= v67) {
    goto LABEL_87;
  }
  int64_t v74 = *(void *)(v63 + 8 * v62);
  if (v74)
  {
LABEL_86:
    unint64_t v66 = (v74 - 1) & v74;
    int64_t v70 = __clz(__rbit64(v74)) + (v62 << 6);
    goto LABEL_71;
  }

  uint64_t v75 = v73 + 3;
  if (v75 >= v67) {
    goto LABEL_87;
  }
  int64_t v74 = *(void *)(v63 + 8 * v75);
  if (v74)
  {
    uint64_t v62 = v75;
    goto LABEL_86;
  }

  while (1)
  {
    uint64_t v62 = v75 + 1;
    if (__OFADD__(v75, 1LL)) {
      break;
    }
    if (v62 >= v67) {
      goto LABEL_87;
    }
    int64_t v74 = *(void *)(v63 + 8 * v62);
    ++v75;
    if (v74) {
      goto LABEL_86;
    }
  }

          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          goto LABEL_69;
        }

    int64_t v28 = v3 + 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v3;
    bzero((void *)(v8 + 32), 2 * v3);
    unint64_t v29 = *(unsigned __int16 *)(v2 + 32) + 1;
    *(_WORD *)(v8 + 32) = *(_WORD *)(v2 + 32) + 1;
    int64_t v30 = v3 - 1;
    if (v3 != 1)
    {
      uint64_t v31 = (_WORD *)(v8 + 34);
      uint64_t v32 = (unsigned __int16 *)(v2 + 34);
      do
      {
        Swift::UInt64 v33 = *v32++;
        unint64_t v29 = v33 + HIWORD(v29);
        *v31++ = v29;
        --v30;
      }

      while (v30);
    }

    uint64_t v9 = v3;
    if (v29 < 0x10000)
    {
LABEL_83:
      swift_bridgeObjectRelease();
      return;
    }

    swift_release();
    if (*((_BYTE *)v2 + 8) == 1)
    {
      uint64_t v44 = 10LL;
      Swift::UInt8 v45 = 0xE100000000000000LL;
      specialized String.withUTF8<A>(_:)(&v44);
      swift_bridgeObjectRelease();
      if (__OFSUB__(*v2, 1LL))
      {
        __break(1u);
        goto LABEL_74;
      }

      --*v2;
      JSONWriter.writeIndent()();
    }

    uint64_t v44 = 125LL;
    Swift::UInt8 v45 = 0xE100000000000000LL;
    specialized String.withUTF8<A>(_:)(&v44);
    swift_bridgeObjectRelease();
  }

  v508._countAndFlagsBits = (uint64_t)Path;
  v508._object = v72;
  swift_bridgeObjectRetain();
  id v101 = Substring.init<A>(_:)();
  id v103 = v102;
  uint64_t v105 = v104;
  Swift::UInt v107 = v106;
  v508._countAndFlagsBits = (uint64_t)v498;
  v508._object = v98;
  swift_bridgeObjectRetain();
  Swift::UInt v108 = Substring.init<A>(_:)();
  Swift::Int v112 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( v108,  v109,  v110,  v111,  0,  0,  1,  0,  0,  v101,  v103,  v105,  v107);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v112)
  {
LABEL_66:
    unint64_t v114 = (uint64_t)v499;
    uint64_t v113 = (Swift::Int)v500;
LABEL_67:
    a4 = v497;
    uint64_t v10 = v494;
    uint64_t v21 = v489;
    char v116 = (uint64_t)v486;
    unint64_t v115 = v487;
    goto LABEL_68;
  }

  v483 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  char v162 = (id *)swift_allocObject();
  char v163 = (void *)*MEMORY[0x189603D08];
  v498 = (char *)v162;
  v162[4] = v163;
  v164 = v162 + 4;
  unint64_t v114 = 1LL;
  v484 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  v165 = static _SetStorage.allocate(capacity:)();
  char v116 = v165 + 56;
  v493 = v164;
  unint64_t v115 = *v164;
  v482 = v163;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
  Hasher.init(_seed:)();
  Path = v115;
  String.hash(into:)();
  uint64_t v113 = Hasher._finalize()();
  __int128 v166 = v165;
  swift_bridgeObjectRelease();
  uint64_t v21 = -1LL << *(_BYTE *)(v165 + 32);
  __int128 v167 = v113 & ~v21;
  __int128 v168 = v167 >> 6;
  v491 = v116;
  __int128 v169 = *(void *)(v116 + 8 * (v167 >> 6));
  uint64_t v170 = 1LL << v167;
  v485 = (void *)v166;
  if (((1LL << v167) & v169) != 0)
  {
    unint64_t v114 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v166 + 48) + 8 * v167));
    uint64_t v113 = v171;
    if ((id)v114 == static String._unconditionallyBridgeFromObjectiveC(_:)(v115) && v113 == v172)
    {
      swift_bridgeObjectRelease_n();
      a4 = v497;
LABEL_246:

LABEL_247:
      unint64_t v114 = (uint64_t)v499;
      goto LABEL_248;
    }

    v213 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a4 = v497;
    if ((v213 & 1) != 0) {
      goto LABEL_246;
    }
    char v116 = ~v21;
    __int128 v167 = (v167 + 1) & ~v21;
    __int128 v168 = v167 >> 6;
    __int128 v169 = *(void *)(v491 + 8 * (v167 >> 6));
    uint64_t v170 = 1LL << v167;
    if ((v169 & (1LL << v167)) != 0)
    {
      uint64_t v21 = v497;
      unint64_t v114 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(v485[6] + 8 * v167));
      uint64_t v113 = v214;
      if ((id)v114 == static String._unconditionallyBridgeFromObjectiveC(_:)(v115) && v113 == v215) {
        goto LABEL_120;
      }
      v404 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a4 = v21;
      if ((v404 & 1) != 0) {
        goto LABEL_246;
      }
      __int128 v167 = (v167 + 1) & v116;
      __int128 v168 = v167 >> 6;
      __int128 v169 = *(void *)(v491 + 8 * (v167 >> 6));
      uint64_t v170 = 1LL << v167;
      if ((v169 & (1LL << v167)) != 0)
      {
        unint64_t v114 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(v485[6] + 8 * v167));
        uint64_t v113 = v469;
        if ((id)v114 == static String._unconditionallyBridgeFromObjectiveC(_:)(v115) && v113 == v470)
        {
LABEL_120:
          swift_bridgeObjectRelease_n();
          a4 = v21;
          goto LABEL_246;
        }

        v471 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a4 = v21;
        if ((v471 & 1) != 0) {
          goto LABEL_246;
        }
        __int128 v167 = (v167 + 1) & v116;
        __int128 v168 = v167 >> 6;
        __int128 v169 = *(void *)(v491 + 8 * (v167 >> 6));
        uint64_t v170 = 1LL << v167;
        if ((v169 & (1LL << v167)) != 0)
        {
          __int128 v166 = (uint64_t)v485;
          while (1)
          {
            uint64_t v113 = v472;
            if ((id)v114 == static String._unconditionallyBridgeFromObjectiveC(_:)(v115) && v113 == v473) {
              break;
            }
            v475 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v475 & 1) != 0) {
              goto LABEL_320;
            }
            __int128 v167 = (v167 + 1) & v116;
            __int128 v168 = v167 >> 6;
            __int128 v169 = *(void *)(v491 + 8 * (v167 >> 6));
            uint64_t v170 = 1LL << v167;
            a4 = v21;
            __int128 v166 = (uint64_t)v485;
            if ((v169 & (1LL << v167)) == 0) {
              goto LABEL_104;
            }
          }

    if ((uint64_t)v11 >= (uint64_t)result)
    {
      if (!__OFADD__(v1, 1LL))
      {
        *(void *)(v0 + 56) = v1 + 1;
        goto LABEL_68;
      }

      goto LABEL_80;
    }

                      LOBYTE(v95[0]) = 0;
                      goto LABEL_66;
                    }
                  }
                }
              }
            }

            goto LABEL_63;
          }
        }

        else
        {
          if (v24)
          {
            LODWORD(v29) = (v23 - 48);
            if (v29 < 0xA)
            {
              if (v24 == 1) {
                goto LABEL_65;
              }
              if ((BYTE1(v23) - 48) <= 9u)
              {
                LODWORD(v29) = 10 * v29 + (BYTE1(v23) - 48);
                uint64_t v40 = v24 - 2;
                if (v40)
                {
                  int v41 = (unsigned __int8 *)v54;
                  while (1)
                  {
                    Swift::UInt v42 = *v41 - 48;
                    if (v42 > 9) {
                      goto LABEL_63;
                    }
                    uint64_t v43 = 10LL * v29;
                    if ((v43 & 0xFFFFFFFF00000000LL) != 0) {
                      goto LABEL_63;
                    }
                    LODWORD(v29) = v43 + v42;
                    ++v41;
                    if (!--v40) {
                      goto LABEL_65;
                    }
                  }
                }

                goto LABEL_65;
              }
            }

      uint64_t v12 = 0LL;
LABEL_66:
      *(void *)&unint64_t v64 = v10;
      *((void *)&v64 + 1) = v11;
      *(void *)&int64_t v65 = v5;
      unint64_t v22 = __OFSUB__(v2, 1LL);
      Swift::UInt v37 = v2 - 1;
      if (!v22)
      {
        if (v10 == v62)
        {
          if (v7)
          {
            int v38 = *(unsigned __int8 *)(v7 + 18);
            swift_unknownObjectRetain();
            if (v38 < v11)
            {
LABEL_70:
              int64_t v60 = v37;
              if (v5)
              {
                unsigned int v39 = (4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C;
                if (((v11 >> v39) & 0xF) != 0)
                {
                  uint64_t v8 = (uint64_t)v4;
                  uint64_t v40 = v6;
                  uint64_t v11 = ((((v11 >> v39) & 0xF) - 1) << v39) | ((-15LL << v39) - 1) & v11;
LABEL_77:
                  Swift::UInt v42 = *(void *)(v5 + 24 * ((v11 >> ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C)) & 0xF) + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_unknownObjectRelease();
                  goto LABEL_81;
                }
              }

              swift_unknownObjectRetain();
              int v41 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v64, v7);
              uint64_t result = (uint64_t *)swift_unknownObjectRelease();
              if ((v41 & 1) == 0)
              {
LABEL_99:
                __break(1u);
LABEL_100:
                __break(1u);
LABEL_101:
                __break(1u);
LABEL_102:
                __break(1u);
                goto LABEL_103;
              }

              if ((void)v64 == v62)
              {
                uint64_t v8 = (uint64_t)v4;
                uint64_t v11 = *((void *)&v64 + 1);
                uint64_t v5 = v65;
                if ((void)v65)
                {
                  uint64_t v40 = v6;
                  goto LABEL_77;
                }

        __break(1u);
        goto LABEL_66;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_65;
  }

  swift_bridgeObjectRetain();
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))0x100,  a2,  a3,  0LL,  0LL,  0LL,  0LL,  0LL,  &v85,  0LL,  0LL);
  return swift_willThrow();
}

      id v94 = swift_bridgeObjectRelease();
      int v135 = 8204667LL;
      *(void *)&uint64_t v136 = 0xE300000000000000LL;
      MEMORY[0x1895F8858](v94);
      id v95 = _withFixedUCharBuffer(size:defaultIsError:_:)( 128LL,  0,  (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
      id v97 = 0x7D317B202C7D307BLL;
      if (v96)
      {
        id v97 = v95;
        id v98 = v96;
      }

      else
      {
        id v98 = 0xE800000000000000LL;
      }

      char v160 = v97;
      char v161 = v98;
      if (!*((void *)&v150 + 1)) {
        goto LABEL_107;
      }
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
      swift_bridgeObjectRelease();
      int v135 = 8204667LL;
      *(void *)&uint64_t v136 = 0xE300000000000000LL;
      char v160 = 8204411LL;
      char v161 = 0xE300000000000000LL;
      uint64_t v77 = v123;
      if (!*((void *)&v150 + 1)) {
        goto LABEL_108;
      }
      RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
      LOBYTE(v15) = v125;
      goto LABEL_71;
    }

    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  uint64_t v19 = v16;
  uint64_t v20 = v17;
  uint64_t v21 = v18;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v142, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], v141);
  specialized AttributedString.subscript.setter(v15);
  uint64_t v15 = *(void *)(v21 + 16);
  if (v15)
  {
    unint64_t v22 = v19;
    uint64_t v23 = v141[0];
    lazy protocol witness table accessor for type String and conformance String();
    int64_t v24 = v21 + 48;
    uint64_t v124 = v22;
    uint64_t v120 = v20;
    while (1)
    {
      uint64_t v133 = *(_DWORD *)(v24 - 16) == 11;
      int v135 = v22;
      *(void *)&uint64_t v136 = v20;
      swift_bridgeObjectRetain();
      unint64_t v25 = String.Index.init<A>(utf16Offset:in:)();
      int v135 = v22;
      *(void *)&uint64_t v136 = v20;
      swift_bridgeObjectRetain();
      uint64_t v26 = String.Index.init<A>(utf16Offset:in:)();
      if (v26 >> 14 < v25 >> 14) {
        goto LABEL_99;
      }
      unint64_t v27 = v26;
      int64_t v28 = *(_OWORD *)(v23 + 32);
      v175[0] = *(_OWORD *)(v23 + 16);
      v175[1] = v28;
      v175[2] = *(_OWORD *)(v23 + 48);
      if ((v25 & 0xC) == 8)
      {
        BigString.utf16.getter();
        unint64_t v29 = BigString.UTF16View.count.getter();
        swift_retain();
        outlined retain of Locale((uint64_t)v175);
        outlined release of Locale((uint64_t)&v143);
        if (v29 >= (uint64_t)(v25 >> 16))
        {
          BigString.utf16.getter();
          BigString.startIndex.getter();
          int64_t v30 = BigString.UTF16View.index(_:offsetBy:)();
          uint64_t v32 = v31;
          Swift::UInt64 v34 = v33;
          Swift::UInt v36 = v35;
          outlined release of Locale((uint64_t)&v144);
          if ((unsigned __int16)v25 >> 14)
          {
            BigString.utf8.getter();
            Swift::UInt v37 = BigString.UTF8View.index(_:offsetBy:)();
            __int128 v128 = v39;
            __int128 v130 = v38;
            uint64_t v126 = v40;
            outlined release of Locale((uint64_t)&v145);
            outlined release of Locale((uint64_t)v175);
          }

          else
          {
            uint64_t v126 = v34;
            __int128 v128 = v36;
            __int128 v130 = v32;
            outlined release of Locale((uint64_t)v175);
            Swift::UInt v37 = v30;
          }

          uint64_t v20 = v120;
LABEL_16:
          Swift::UInt8 v45 = (_OWORD *)(v23 + 16);
          uint64_t v46 = *(_OWORD *)(v23 + 32);
          __int128 v172 = *(_OWORD *)(v23 + 16);
          __int128 v173 = v46;
          __int128 v174 = *(_OWORD *)(v23 + 48);
          if ((v27 & 0xC) == 8)
          {
            BigString.utf16.getter();
            int v47 = BigString.UTF16View.count.getter();
            v176[0] = v172;
            v176[1] = v173;
            v176[2] = v174;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v176, (uint64_t)v177);
            outlined retain of Locale((uint64_t)v177);
            outlined release of Locale((uint64_t)&v146);
            if (v47 < (uint64_t)(v27 >> 16))
            {
              outlined release of Locale((uint64_t)&v172);
LABEL_26:
              swift_release();
              unint64_t v22 = v124;
              goto LABEL_6;
            }

            uint64_t v119 = v37;
            uint64_t v53 = (unsigned __int16)v27 >> 14;
            BigString.utf16.getter();
            BigString.startIndex.getter();
            unint64_t v117 = BigString.UTF16View.index(_:offsetBy:)();
            uint64_t v55 = v54;
            uint64_t v57 = v56;
            Swift::UInt8 v52 = v58;
            outlined release of Locale((uint64_t)&v147);
            if (v53)
            {
              BigString.utf8.getter();
              Swift::UInt v48 = BigString.UTF8View.index(_:offsetBy:)();
              uint64_t v121 = v60;
              uint64_t v122 = v59;
              Swift::UInt8 v52 = v61;
              outlined release of Locale((uint64_t)&v148);
            }

            else
            {
              uint64_t v121 = v57;
              uint64_t v122 = v55;
              Swift::UInt v48 = v117;
            }

            outlined release of Locale((uint64_t)&v172);
            Swift::UInt v37 = v119;
          }

          else
          {
            Swift::UInt v48 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
            uint64_t v121 = v50;
            uint64_t v122 = v49;
            Swift::UInt8 v52 = v51;
          }

          uint64_t v62 = *(_OWORD *)(v23 + 32);
          v171[3] = *v45;
          v171[4] = v62;
          v171[5] = *(_OWORD *)(v23 + 48);
          if (v37 >> 10 >= (unint64_t)BigString.startIndex.getter() >> 10)
          {
            uint64_t v63 = BigString.endIndex.getter();
            swift_release();
            if (v63 >> 10 < v48 >> 10)
            {
              unint64_t v22 = v124;
              goto LABEL_6;
            }

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              unint64_t v64 = *(_OWORD *)(v23 + 32);
              v171[0] = *v45;
              v171[1] = v64;
              v171[2] = *(_OWORD *)(v23 + 48);
              int64_t v65 = *(void *)(v23 + 64);
              unint64_t v66 = *(void *)(v23 + 72);
              BOOL v118 = *(void *)(v23 + 80);
              unint64_t v115 = *(void *)(v23 + 88);
              type metadata accessor for AttributedString.Guts();
              swift_allocObject();
              outlined retain of Locale((uint64_t)v171);
              swift_unknownObjectRetain();
              unint64_t v67 = AttributedString.Guts.init(string:runs:)(v171, v65, v66, v118, v115);
              swift_release();
              uint64_t v23 = v67;
            }

            Swift::UInt v68 = *(_OWORD *)(v23 + 32);
            __int128 v168 = *(_OWORD *)(v23 + 16);
            __int128 v169 = v68;
            uint64_t v170 = *(_OWORD *)(v23 + 48);
            BigString.startIndex.getter();
            BigString.endIndex.getter();
            char v160 = v37;
            char v161 = v130;
            char v162 = v126;
            char v163 = v128;
            v164 = v48;
            v165 = v122;
            __int128 v166 = v121;
            __int128 v167 = v52;
            BigString.unicodeScalars.getter();
            swift_retain_n();
            BigString.UnicodeScalarView.subscript.getter();
            swift_release();
            outlined release of Locale((uint64_t)&v149);
            outlined release of Locale((uint64_t)&v150);
            uint64_t v136 = *(_OWORD *)&v153[8];
            uint64_t v137 = v154;
            uint64_t v138 = v155;
            int64_t v139 = v156;
            int v135 = v23;
            if (one-time initialization token for currentIdentity != -1) {
              swift_once();
            }
            Swift::UInt v69 = (uint64_t *)(static AttributedString.currentIdentity + 16);
            int64_t v70 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
            swift_retain();
            os_unfair_lock_lock(v70);
            closure #1 in static AttributedString._nextModifyIdentity.getter(v69, &v134);
            os_unfair_lock_unlock(v70);
            swift_release();
            unint64_t v71 = v134;
            __int128 v140 = v134;
            BigString.init()();
            uint64_t v134 = 0LL;
            MEMORY[0x186E20E78](&v134, 8LL);
            int64_t v72 = v134;
            type metadata accessor for AttributedString.Guts();
            Swift::UInt v73 = swift_allocObject();
            if ((BigString.isEmpty.getter() & 1) == 0) {
              goto LABEL_101;
            }
            int64_t v74 = v158;
            *(_OWORD *)(v73 + 16) = v157;
            *(_OWORD *)(v73 + 32) = v74;
            *(_OWORD *)(v73 + 48) = v159;
            *(void *)(v73 + 64) = 0LL;
            *(void *)(v73 + 72) = 0LL;
            *(void *)(v73 + 80) = 0LL;
            *(void *)(v73 + 88) = v72;
            swift_release();
            specialized AttributedSubstring.subscript.setter(v133);
            if (v140 != v71) {
              goto LABEL_109;
            }
            uint64_t v23 = v135;
          }

          goto LABEL_26;
        }

        outlined release of Locale((uint64_t)v175);
        swift_release();
      }

      else
      {
        Swift::UInt v37 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
        __int128 v128 = v42;
        __int128 v130 = v41;
        uint64_t v44 = v43;
        if ((unint64_t)BigString.endIndex.getter() >> 10 >= v37 >> 10)
        {
          uint64_t v126 = v44;
          swift_retain();
          goto LABEL_16;
        }
      }

        v95._countAndFlagsBits = v92;
        v95._object = v93;
        String.append(_:)(v95);
        swift_bridgeObjectRelease();
        uint64_t v15 = v198;
        if ((v6[144] & 1) == 0) {
          goto LABEL_40;
        }
        goto LABEL_66;
      }
    }

    int64_t v84 = MEMORY[0x186E1B610](v63, v64, v65, v66);
    uint64_t v63 = v123;
    swift_bridgeObjectRelease();
    uint64_t v124 = v84 & 0xFFFFFFFFFFFFLL;
    if ((v63 & 0x2000000000000000LL) != 0) {
      uint64_t v125 = HIBYTE(v63) & 0xF;
    }
    else {
      uint64_t v125 = v84 & 0xFFFFFFFFFFFFLL;
    }
    if (!v125)
    {
      swift_bridgeObjectRelease();
      unint64_t v64 = 0LL;
      unint64_t v66 = 0xE000000000000000LL;
      uint64_t v15 = v198;
      goto LABEL_116;
    }

    if ((v63 & 0x1000000000000000LL) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = v198;
      goto LABEL_112;
    }

    if ((v63 & 0x2000000000000000LL) != 0)
    {
      v203._countAndFlagsBits = v84;
      v203._object = (void *)(v63 & 0xFFFFFFFFFFFFFFLL);
      v201 = (uint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      v202 = 0LL;
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v203,  HIBYTE(v63) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v201,  1,  (unsigned __int8 *)&v203,  HIBYTE(v63) & 0xF,  (uint64_t *)&v199);
      unint64_t v64 = v199;
      unint64_t v66 = v200;
      swift_release();
      uint64_t v15 = v198;
      goto LABEL_111;
    }

    if ((v84 & 0x1000000000000000LL) == 0) {
      goto LABEL_158;
    }
    uint64_t v126 = (unsigned __int8 *)((v63 & 0xFFFFFFFFFFFFFFFLL) + 32);
    while (1)
    {
      uint64_t v15 = v198;
      v203._countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      v203._object = 0LL;
      swift_bridgeObjectRetain_n();
      unint64_t v64 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v126,  v124,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v203,  1,  v126,  v124);
      unint64_t v66 = v127;
LABEL_111:
      swift_bridgeObjectRelease();
      if (v66 != 1)
      {
        swift_bridgeObjectRelease_n();
        if (!v66) {
          goto LABEL_114;
        }
        goto LABEL_116;
      }

      __break(1u);
      goto LABEL_66;
    }

    uint64_t v2 = v13;
    goto LABEL_23;
  }

            uint64_t v32 = (v36 - 1) & v36;
            Swift::UInt64 v34 = __clz(__rbit64(v36)) + (v28 << 6);
          }

          int v38 = *(void *)(v3 + 56) + 16 * v34;
          unsigned int v39 = *(uint64_t **)v38;
          if (*(_BYTE *)(v38 + 8) == 1) {
            break;
          }
          if (v39 != a2) {
            goto LABEL_77;
          }
        }

        uint64_t v40 = *a2;
        if ((unint64_t)(v40 - 513) < 2)
        {
          swift_getKeyPath();
          int v41 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          Swift::UInt v48 = v47;
          swift_release();
          if ((v48 & 1) != 0) {
            goto LABEL_165;
          }
          goto LABEL_76;
        }

        if (v40)
        {
          if (v40 == 512)
          {
            swift_getKeyPath();
            int v41 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
            uint64_t v43 = v42;
            uint64_t result = swift_release();
            if ((v43 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            goto LABEL_76;
          }

      if ((unsigned __int16)result == 10)
      {
        uint64_t v15 = __OFADD__(v11++, 1LL);
        if (v15) {
          goto LABEL_127;
        }
      }

                    int64_t v30 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a1, a2);
                    goto LABEL_49;
                  }

    swift_bridgeObjectRetain();
    Swift::UInt v69 = specialized BidirectionalCollection.last.getter(v64, (unint64_t)object);
    unint64_t v71 = v70;
    swift_bridgeObjectRelease();
    if (v71)
    {
      if (v69 == 47 && v71 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        int64_t v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v72 & 1) == 0) {
          goto LABEL_75;
        }
      }

      if (String.count.getter() > 1)
      {
        int v41 = v121;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_131;
        }
        while (1)
        {
          int64_t v74 = *(void *)(v41 + 16);
          Swift::UInt v73 = *(void *)(v41 + 24);
          if (v74 >= v73 >> 1) {
            int v41 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v73 > 1),  v74 + 1,  1,  (void *)v41);
          }
          *(void *)(v41 + 16) = v74 + 1;
          uint64_t v75 = v41 + 16 * v74;
          *(void *)(v75 + 32) = 47LL;
          *(void *)(v75 + 40) = 0xE100000000000000LL;
          swift_bridgeObjectRelease_n();
          uint64_t v121 = v41;
LABEL_76:
          uint64_t v76 = v121;
          uint64_t v17 = *(void **)(v121 + 16);
          if (v17) {
            break;
          }
          swift_bridgeObjectRelease();
          int v41 = MEMORY[0x18961AFE8];
LABEL_113:
          id v101 = *(void *)(v41 + 16);
          if (v101 < 2) {
            return v41;
          }
          id v102 = v41 + 16 * v101;
          id v103 = *(void *)(v102 + 16) == 47LL && *(void *)(v102 + 24) == 0xE100000000000000LL;
          if (!v103 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return v41;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            id v104 = *(void *)(v41 + 16);
            if (v104) {
              goto LABEL_121;
            }
          }

          else
          {
            int v41 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v41);
            id v104 = *(void *)(v41 + 16);
            if (v104)
            {
LABEL_121:
              *(void *)(v41 + 16) = v104 - 1;
LABEL_122:
              swift_bridgeObjectRelease();
              return v41;
            }
          }

          __break(1u);
LABEL_131:
          int v41 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v41 + 16) + 1LL,  1,  (void *)v41);
        }

        v120._countAndFlagsBits = (uint64_t)v54;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  (int64_t)v17,  0);
        uint64_t v5 = 0LL;
        unint64_t v117 = v76;
        uint64_t v15 = (unint64_t *)(v76 + 40);
        while (1)
        {
          uint64_t v77 = *(v15 - 1);
          int v41 = *v15;
          unint64_t v78 = HIBYTE(*v15) & 0xF;
          int64_t v79 = v77 & 0xFFFFFFFFFFFFLL;
          if ((*v15 & 0x2000000000000000LL) != 0) {
            unint64_t v80 = HIBYTE(*v15) & 0xF;
          }
          else {
            unint64_t v80 = v77 & 0xFFFFFFFFFFFFLL;
          }
          if (!v80)
          {
LABEL_98:
            id v88 = 0LL;
            id v89 = 0xE000000000000000LL;
            goto LABEL_99;
          }

          if ((v41 & 0x1000000000000000LL) != 0)
          {
            swift_bridgeObjectRetain();
            unint64_t v80 = String.UTF8View._foreignCount()();
            if (v80 < 0)
            {
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
              goto LABEL_128;
            }

            goto LABEL_92;
          }

          if ((v41 & 0x2000000000000000LL) != 0)
          {
            uint64_t v121 = *(v15 - 1);
            uint64_t v122 = v41 & 0xFFFFFFFFFFFFFFLL;
            int64_t v86 = swift_bridgeObjectRetain();
            uint64_t v54 = &v106;
            MEMORY[0x1895F8858](v86);
            int64_t v84 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( (uint64_t)&v106 - v87,  (unsigned __int8 *)&v121,  v78,  MEMORY[0x18961AFF8],  (uint64_t (*)(void))specialized StringProtocol.hexToAscii(_:));
          }

          else
          {
            if ((v77 & 0x1000000000000000LL) != 0)
            {
              unint64_t v81 = (unsigned __int8 *)((v41 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }

            else
            {
              unint64_t v81 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
              int64_t v79 = v100;
              if (v100 < 0)
              {
                __break(1u);
LABEL_111:
                swift_bridgeObjectRelease();
                goto LABEL_113;
              }
            }

            isStackAllocationSafe = swift_bridgeObjectRetain();
            if (v79 >= 1025)
            {
              isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
              if ((isStackAllocationSafe & 1) == 0)
              {
                id v98 = swift_slowAlloc();
                id v88 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v98,  v81,  v79,  MEMORY[0x18961AFF8],  (uint64_t (*)(void))specialized StringProtocol.hexToAscii(_:));
                id v89 = v99;
                MEMORY[0x186E20E60](v98, -1LL, -1LL);
                if (v89 != 1) {
                  goto LABEL_97;
                }
                goto LABEL_91;
              }
            }

            MEMORY[0x1895F8858](isStackAllocationSafe);
            int64_t v84 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( (uint64_t)&v106 - v83,  v81,  v79,  MEMORY[0x18961AFF8],  (uint64_t (*)(void))specialized StringProtocol.hexToAscii(_:));
          }

          id v88 = v84;
          id v89 = v85;
          if (v85 != 1) {
            goto LABEL_97;
          }
LABEL_91:
          if (v80 < 0) {
            goto LABEL_124;
          }
LABEL_92:
          id v90 = swift_bridgeObjectRetain();
          if (v80 < 1025 || (id v90 = swift_stdlib_isStackAllocationSafe(), (v90 & 1) != 0))
          {
            MEMORY[0x1895F8858](v90);
            id v88 = (uint64_t)specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( (uint64_t)&v106 - v91,  v77,  v41,  MEMORY[0x18961AFF8]);
            id v89 = v92;
          }

          else
          {
            id v93 = swift_slowAlloc();
            id v88 = (uint64_t)specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v93,  v77,  v41,  MEMORY[0x18961AFF8]);
            id v89 = v94;
            MEMORY[0x186E20E60](v93, -1LL, -1LL);
          }

          swift_bridgeObjectRelease();
LABEL_97:
          swift_bridgeObjectRelease();
          if (!v89) {
            goto LABEL_98;
          }
LABEL_99:
          int v41 = v120._countAndFlagsBits;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v41 + 16) + 1LL,  1);
            int v41 = v120._countAndFlagsBits;
          }

          id v96 = *(void *)(v41 + 16);
          id v95 = *(void *)(v41 + 24);
          if (v96 >= v95 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v95 > 1,  v96 + 1,  1);
            int v41 = v120._countAndFlagsBits;
          }

          v15 += 2;
          *(void *)(v41 + 16) = v96 + 1;
          id v97 = v41 + 16 * v96;
          *(void *)(v97 + 32) = v88;
          *(void *)(v97 + 40) = v89;
          uint64_t v17 = (void *)((char *)v17 - 1);
          if (!v17) {
            goto LABEL_111;
          }
        }
      }
    }

          int v38 = (v43 - 1) & v43;
          int v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }

        *(_BYTE *)(*(void *)(v10 + 48) + v41) = *(_BYTE *)(*(void *)(v7 + 48) + v41);
      }
    }

    uint64_t result = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v10 = result;
    if (*(void *)(v7 + 16))
    {
      int64_t v74 = v6;
      uint64_t v46 = 0LL;
      int v47 = v7 + 56;
      Swift::UInt v48 = 1LL << *(_BYTE *)(v7 + 32);
      if (v48 < 64) {
        Swift::UInt64 v49 = ~(-1LL << v48);
      }
      else {
        Swift::UInt64 v49 = -1LL;
      }
      Swift::UInt v50 = v49 & *(void *)(v7 + 56);
      uint64_t v51 = (unint64_t)(v48 + 63) >> 6;
      Swift::UInt8 v52 = result + 56;
      while (1)
      {
        if (v50)
        {
          uint64_t v54 = __clz(__rbit64(v50));
          v50 &= v50 - 1;
          uint64_t v55 = v54 | (v46 << 6);
        }

        else
        {
          uint64_t v56 = v46 + 1;
          if (__OFADD__(v46, 1LL)) {
            goto LABEL_118;
          }
          if (v56 >= v51) {
            goto LABEL_114;
          }
          uint64_t v57 = *(void *)(v47 + 8 * v56);
          ++v46;
          if (!v57)
          {
            uint64_t v46 = v56 + 1;
            if (v56 + 1 >= v51) {
              goto LABEL_114;
            }
            uint64_t v57 = *(void *)(v47 + 8 * v46);
            if (!v57)
            {
              uint64_t v46 = v56 + 2;
              if (v56 + 2 >= v51) {
                goto LABEL_114;
              }
              uint64_t v57 = *(void *)(v47 + 8 * v46);
              if (!v57)
              {
                uint64_t v46 = v56 + 3;
                if (v56 + 3 >= v51) {
                  goto LABEL_114;
                }
                uint64_t v57 = *(void *)(v47 + 8 * v46);
                if (!v57)
                {
                  uint64_t v58 = v56 + 4;
                  if (v58 >= v51) {
                    goto LABEL_114;
                  }
                  uint64_t v57 = *(void *)(v47 + 8 * v58);
                  if (!v57)
                  {
                    while (1)
                    {
                      uint64_t v46 = v58 + 1;
                      if (__OFADD__(v58, 1LL)) {
                        goto LABEL_122;
                      }
                      if (v46 >= v51) {
                        break;
                      }
                      uint64_t v57 = *(void *)(v47 + 8 * v46);
                      ++v58;
                      if (v57) {
                        goto LABEL_92;
                      }
                    }

          int v38 = (v43 - 1) & v43;
          int v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }

        *(_BYTE *)(*(void *)(v10 + 48) + v41) = *(_BYTE *)(*(void *)(v7 + 48) + v41);
      }
    }

    uint64_t result = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v10 = result;
    if (!*(void *)(v7 + 16)) {
      goto LABEL_105;
    }
    uint64_t v46 = 0LL;
    int v47 = v7 + 56;
    Swift::UInt v48 = 1LL << *(_BYTE *)(v7 + 32);
    if (v48 < 64) {
      Swift::UInt64 v49 = ~(-1LL << v48);
    }
    else {
      Swift::UInt64 v49 = -1LL;
    }
    Swift::UInt v50 = v49 & *(void *)(v7 + 56);
    uint64_t v51 = (unint64_t)(v48 + 63) >> 6;
    Swift::UInt8 v52 = result + 56;
    while (1)
    {
      if (v50)
      {
        uint64_t v54 = __clz(__rbit64(v50));
        v50 &= v50 - 1;
        uint64_t v55 = v54 | (v46 << 6);
      }

      else
      {
        uint64_t v56 = v46 + 1;
        if (__OFADD__(v46, 1LL)) {
          goto LABEL_117;
        }
        if (v56 >= v51) {
          goto LABEL_105;
        }
        uint64_t v57 = *(void *)(v47 + 8 * v56);
        ++v46;
        if (!v57)
        {
          uint64_t v46 = v56 + 1;
          if (v56 + 1 >= v51) {
            goto LABEL_105;
          }
          uint64_t v57 = *(void *)(v47 + 8 * v46);
          if (!v57)
          {
            uint64_t v46 = v56 + 2;
            if (v56 + 2 >= v51) {
              goto LABEL_105;
            }
            uint64_t v57 = *(void *)(v47 + 8 * v46);
            if (!v57)
            {
              uint64_t v46 = v56 + 3;
              if (v56 + 3 >= v51) {
                goto LABEL_105;
              }
              uint64_t v57 = *(void *)(v47 + 8 * v46);
              if (!v57)
              {
                uint64_t v58 = v56 + 4;
                if (v58 >= v51) {
                  goto LABEL_105;
                }
                uint64_t v57 = *(void *)(v47 + 8 * v58);
                if (!v57)
                {
                  while (1)
                  {
                    uint64_t v46 = v58 + 1;
                    if (__OFADD__(v58, 1LL)) {
                      goto LABEL_121;
                    }
                    if (v46 >= v51) {
                      break;
                    }
                    uint64_t v57 = *(void *)(v47 + 8 * v46);
                    ++v58;
                    if (v57) {
                      goto LABEL_92;
                    }
                  }

          int v38 = (v43 - 1) & v43;
          int v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }

        *(void *)(*(void *)(v10 + 48) + 8 * v41) = *(void *)(*(void *)(v7 + 48) + 8 * v41);
      }
    }

    uint64_t result = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v10 = result;
    if (!*(void *)(v7 + 16)) {
      goto LABEL_105;
    }
    Swift::UInt8 v45 = 0LL;
    uint64_t v46 = v7 + 56;
    int v47 = 1LL << *(_BYTE *)(v7 + 32);
    if (v47 < 64) {
      Swift::UInt v48 = ~(-1LL << v47);
    }
    else {
      Swift::UInt v48 = -1LL;
    }
    Swift::UInt64 v49 = v48 & *(void *)(v7 + 56);
    Swift::UInt v50 = (unint64_t)(v47 + 63) >> 6;
    uint64_t v51 = result + 56;
    while (1)
    {
      if (v49)
      {
        uint64_t v53 = __clz(__rbit64(v49));
        v49 &= v49 - 1;
        uint64_t v54 = v53 | (v45 << 6);
      }

      else
      {
        uint64_t v55 = v45 + 1;
        if (__OFADD__(v45, 1LL)) {
          goto LABEL_117;
        }
        if (v55 >= v50) {
          goto LABEL_105;
        }
        uint64_t v56 = *(void *)(v46 + 8 * v55);
        ++v45;
        if (!v56)
        {
          Swift::UInt8 v45 = v55 + 1;
          if (v55 + 1 >= v50) {
            goto LABEL_105;
          }
          uint64_t v56 = *(void *)(v46 + 8 * v45);
          if (!v56)
          {
            Swift::UInt8 v45 = v55 + 2;
            if (v55 + 2 >= v50) {
              goto LABEL_105;
            }
            uint64_t v56 = *(void *)(v46 + 8 * v45);
            if (!v56)
            {
              Swift::UInt8 v45 = v55 + 3;
              if (v55 + 3 >= v50) {
                goto LABEL_105;
              }
              uint64_t v56 = *(void *)(v46 + 8 * v45);
              if (!v56)
              {
                uint64_t v57 = v55 + 4;
                if (v57 >= v50) {
                  goto LABEL_105;
                }
                uint64_t v56 = *(void *)(v46 + 8 * v57);
                if (!v56)
                {
                  while (1)
                  {
                    Swift::UInt8 v45 = v57 + 1;
                    if (__OFADD__(v57, 1LL)) {
                      goto LABEL_121;
                    }
                    if (v45 >= v50) {
                      break;
                    }
                    uint64_t v56 = *(void *)(v46 + 8 * v45);
                    ++v57;
                    if (v56) {
                      goto LABEL_92;
                    }
                  }

          unsigned int v39 = (v44 - 1) & v44;
          Swift::UInt v42 = __clz(__rbit64(v44)) + (v36 << 6);
        }

        *(void *)(*(void *)(v10 + 48) + 8 * v42) = *(void *)(*(void *)(v7 + 48) + 8 * v42);
        uint64_t result = swift_retain();
      }
    }

    int v47 = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v10 = v47;
    if (*(void *)(v7 + 16))
    {
      int64_t v79 = v6;
      Swift::UInt v48 = 1LL << *(_BYTE *)(v7 + 32);
      Swift::UInt64 v49 = v7 + 56;
      if (v48 < 64) {
        Swift::UInt v50 = ~(-1LL << v48);
      }
      else {
        Swift::UInt v50 = -1LL;
      }
      uint64_t v51 = v50 & *(void *)(v7 + 56);
      Swift::UInt8 v52 = (unint64_t)(v48 + 63) >> 6;
      uint64_t v53 = v47 + 56;
      uint64_t result = swift_retain();
      uint64_t v54 = 0LL;
      while (1)
      {
        if (v51)
        {
          uint64_t v56 = __clz(__rbit64(v51));
          v51 &= v51 - 1;
          uint64_t v57 = v56 | (v54 << 6);
        }

        else
        {
          uint64_t v58 = v54 + 1;
          if (__OFADD__(v54, 1LL)) {
            goto LABEL_118;
          }
          if (v58 >= v52) {
            goto LABEL_114;
          }
          Swift::UInt v59 = *(void *)(v49 + 8 * v58);
          ++v54;
          if (!v59)
          {
            uint64_t v54 = v58 + 1;
            if (v58 + 1 >= v52) {
              goto LABEL_114;
            }
            Swift::UInt v59 = *(void *)(v49 + 8 * v54);
            if (!v59)
            {
              uint64_t v54 = v58 + 2;
              if (v58 + 2 >= v52) {
                goto LABEL_114;
              }
              Swift::UInt v59 = *(void *)(v49 + 8 * v54);
              if (!v59)
              {
                uint64_t v54 = v58 + 3;
                if (v58 + 3 >= v52) {
                  goto LABEL_114;
                }
                Swift::UInt v59 = *(void *)(v49 + 8 * v54);
                if (!v59)
                {
                  int64_t v60 = v58 + 4;
                  if (v60 >= v52) {
                    goto LABEL_114;
                  }
                  Swift::UInt v59 = *(void *)(v49 + 8 * v60);
                  if (!v59)
                  {
                    while (1)
                    {
                      uint64_t v54 = v60 + 1;
                      if (__OFADD__(v60, 1LL)) {
                        goto LABEL_122;
                      }
                      if (v54 >= v52) {
                        break;
                      }
                      Swift::UInt v59 = *(void *)(v49 + 8 * v54);
                      ++v60;
                      if (v59) {
                        goto LABEL_92;
                      }
                    }

          int v38 = (v43 - 1) & v43;
          int v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }

        *(_DWORD *)(*(void *)(v10 + 48) + 4 * v41) = *(_DWORD *)(*(void *)(v7 + 48) + 4 * v41);
      }
    }

    uint64_t result = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v10 = result;
    if (*(void *)(v7 + 16))
    {
      int64_t v74 = v6;
      uint64_t v46 = 0LL;
      int v47 = v7 + 56;
      Swift::UInt v48 = 1LL << *(_BYTE *)(v7 + 32);
      if (v48 < 64) {
        Swift::UInt64 v49 = ~(-1LL << v48);
      }
      else {
        Swift::UInt64 v49 = -1LL;
      }
      Swift::UInt v50 = v49 & *(void *)(v7 + 56);
      uint64_t v51 = (unint64_t)(v48 + 63) >> 6;
      Swift::UInt8 v52 = result + 56;
      while (1)
      {
        if (v50)
        {
          uint64_t v54 = __clz(__rbit64(v50));
          v50 &= v50 - 1;
          uint64_t v55 = v54 | (v46 << 6);
        }

        else
        {
          uint64_t v56 = v46 + 1;
          if (__OFADD__(v46, 1LL)) {
            goto LABEL_118;
          }
          if (v56 >= v51) {
            goto LABEL_114;
          }
          uint64_t v57 = *(void *)(v47 + 8 * v56);
          ++v46;
          if (!v57)
          {
            uint64_t v46 = v56 + 1;
            if (v56 + 1 >= v51) {
              goto LABEL_114;
            }
            uint64_t v57 = *(void *)(v47 + 8 * v46);
            if (!v57)
            {
              uint64_t v46 = v56 + 2;
              if (v56 + 2 >= v51) {
                goto LABEL_114;
              }
              uint64_t v57 = *(void *)(v47 + 8 * v46);
              if (!v57)
              {
                uint64_t v46 = v56 + 3;
                if (v56 + 3 >= v51) {
                  goto LABEL_114;
                }
                uint64_t v57 = *(void *)(v47 + 8 * v46);
                if (!v57)
                {
                  uint64_t v58 = v56 + 4;
                  if (v58 >= v51) {
                    goto LABEL_114;
                  }
                  uint64_t v57 = *(void *)(v47 + 8 * v58);
                  if (!v57)
                  {
                    while (1)
                    {
                      uint64_t v46 = v58 + 1;
                      if (__OFADD__(v58, 1LL)) {
                        goto LABEL_122;
                      }
                      if (v46 >= v51) {
                        break;
                      }
                      uint64_t v57 = *(void *)(v47 + 8 * v46);
                      ++v58;
                      if (v57) {
                        goto LABEL_92;
                      }
                    }

          int v38 = (v43 - 1) & v43;
          int v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }

        *(void *)(*(void *)(v10 + 48) + 8 * v41) = *(void *)(*(void *)(v7 + 48) + 8 * v41);
      }
    }

    uint64_t result = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v10 = result;
    if (!*(void *)(v7 + 16)) {
      goto LABEL_105;
    }
    Swift::UInt8 v45 = 0LL;
    uint64_t v46 = v7 + 56;
    int v47 = 1LL << *(_BYTE *)(v7 + 32);
    if (v47 < 64) {
      Swift::UInt v48 = ~(-1LL << v47);
    }
    else {
      Swift::UInt v48 = -1LL;
    }
    Swift::UInt64 v49 = v48 & *(void *)(v7 + 56);
    Swift::UInt v50 = (unint64_t)(v47 + 63) >> 6;
    uint64_t v51 = result + 56;
    while (1)
    {
      if (v49)
      {
        uint64_t v53 = __clz(__rbit64(v49));
        v49 &= v49 - 1;
        uint64_t v54 = v53 | (v45 << 6);
      }

      else
      {
        uint64_t v55 = v45 + 1;
        if (__OFADD__(v45, 1LL)) {
          goto LABEL_117;
        }
        if (v55 >= v50) {
          goto LABEL_105;
        }
        uint64_t v56 = *(void *)(v46 + 8 * v55);
        ++v45;
        if (!v56)
        {
          Swift::UInt8 v45 = v55 + 1;
          if (v55 + 1 >= v50) {
            goto LABEL_105;
          }
          uint64_t v56 = *(void *)(v46 + 8 * v45);
          if (!v56)
          {
            Swift::UInt8 v45 = v55 + 2;
            if (v55 + 2 >= v50) {
              goto LABEL_105;
            }
            uint64_t v56 = *(void *)(v46 + 8 * v45);
            if (!v56)
            {
              Swift::UInt8 v45 = v55 + 3;
              if (v55 + 3 >= v50) {
                goto LABEL_105;
              }
              uint64_t v56 = *(void *)(v46 + 8 * v45);
              if (!v56)
              {
                uint64_t v57 = v55 + 4;
                if (v57 >= v50) {
                  goto LABEL_105;
                }
                uint64_t v56 = *(void *)(v46 + 8 * v57);
                if (!v56)
                {
                  while (1)
                  {
                    Swift::UInt8 v45 = v57 + 1;
                    if (__OFADD__(v57, 1LL)) {
                      goto LABEL_121;
                    }
                    if (v45 >= v50) {
                      break;
                    }
                    uint64_t v56 = *(void *)(v46 + 8 * v45);
                    ++v57;
                    if (v56) {
                      goto LABEL_92;
                    }
                  }

          int v38 = (v43 - 1) & v43;
          int v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }

        *(_BYTE *)(*(void *)(v10 + 48) + v41) = *(_BYTE *)(*(void *)(v7 + 48) + v41);
      }
    }

    uint64_t result = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v10 = result;
    if (*(void *)(v7 + 16))
    {
      int64_t v74 = v6;
      uint64_t v46 = 0LL;
      int v47 = v7 + 56;
      Swift::UInt v48 = 1LL << *(_BYTE *)(v7 + 32);
      if (v48 < 64) {
        Swift::UInt64 v49 = ~(-1LL << v48);
      }
      else {
        Swift::UInt64 v49 = -1LL;
      }
      Swift::UInt v50 = v49 & *(void *)(v7 + 56);
      uint64_t v51 = (unint64_t)(v48 + 63) >> 6;
      Swift::UInt8 v52 = result + 56;
      while (1)
      {
        if (v50)
        {
          uint64_t v54 = __clz(__rbit64(v50));
          v50 &= v50 - 1;
          uint64_t v55 = v54 | (v46 << 6);
        }

        else
        {
          uint64_t v56 = v46 + 1;
          if (__OFADD__(v46, 1LL)) {
            goto LABEL_118;
          }
          if (v56 >= v51) {
            goto LABEL_114;
          }
          uint64_t v57 = *(void *)(v47 + 8 * v56);
          ++v46;
          if (!v57)
          {
            uint64_t v46 = v56 + 1;
            if (v56 + 1 >= v51) {
              goto LABEL_114;
            }
            uint64_t v57 = *(void *)(v47 + 8 * v46);
            if (!v57)
            {
              uint64_t v46 = v56 + 2;
              if (v56 + 2 >= v51) {
                goto LABEL_114;
              }
              uint64_t v57 = *(void *)(v47 + 8 * v46);
              if (!v57)
              {
                uint64_t v46 = v56 + 3;
                if (v56 + 3 >= v51) {
                  goto LABEL_114;
                }
                uint64_t v57 = *(void *)(v47 + 8 * v46);
                if (!v57)
                {
                  uint64_t v58 = v56 + 4;
                  if (v58 >= v51) {
                    goto LABEL_114;
                  }
                  uint64_t v57 = *(void *)(v47 + 8 * v58);
                  if (!v57)
                  {
                    while (1)
                    {
                      uint64_t v46 = v58 + 1;
                      if (__OFADD__(v58, 1LL)) {
                        goto LABEL_122;
                      }
                      if (v46 >= v51) {
                        break;
                      }
                      uint64_t v57 = *(void *)(v47 + 8 * v46);
                      ++v58;
                      if (v57) {
                        goto LABEL_92;
                      }
                    }

        uint64_t v40 = (v48 - 1) & v48;
        uint64_t v43 = __clz(__rbit64(v48)) + (v37 << 6);
      }

      uint64_t v44 = 8 * v43;
      Swift::UInt8 v45 = *(void **)(*(void *)(v7 + 48) + v44);
      *(void *)(*(void *)(v10 + 48) + v44) = v45;
      uint64_t v46 = v45;
    }
  }

  uint64_t v51 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v10 = v51;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  Swift::UInt8 v52 = 1LL << *(_BYTE *)(v7 + 32);
  id v93 = (void *)(v7 + 56);
  if (v52 < 64) {
    uint64_t v53 = ~(-1LL << v52);
  }
  else {
    uint64_t v53 = -1LL;
  }
  uint64_t v54 = v53 & *(void *)(v7 + 56);
  id v95 = (unint64_t)(v52 + 63) >> 6;
  uint64_t v55 = v51 + 56;
  swift_retain();
  uint64_t v56 = 0LL;
  while (v54)
  {
    uint64_t v58 = __clz(__rbit64(v54));
    v54 &= v54 - 1;
    Swift::UInt v59 = v58 | (v56 << 6);
LABEL_93:
    uint64_t v63 = *(void **)(*(void *)(v7 + 48) + 8 * v59);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    Hasher.init(_seed:)();
    unint64_t v64 = v63;
    String.hash(into:)();
    int64_t v65 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    unint64_t v66 = -1LL << *(_BYTE *)(v10 + 32);
    unint64_t v67 = v65 & ~v66;
    Swift::UInt v68 = v67 >> 6;
    if (((-1LL << v67) & ~*(void *)(v55 + 8 * (v67 >> 6))) != 0)
    {
      uint64_t v57 = __clz(__rbit64((-1LL << v67) & ~*(void *)(v55 + 8 * (v67 >> 6)))) | v67 & 0x7FFFFFFFFFFFFFC0LL;
      goto LABEL_74;
    }

    Swift::UInt v69 = 0;
    int64_t v70 = (unint64_t)(63 - v66) >> 6;
    do
    {
      if (++v68 == v70 && (v69 & 1) != 0)
      {
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
        goto LABEL_128;
      }

      unint64_t v71 = v68 == v70;
      if (v68 == v70) {
        Swift::UInt v68 = 0LL;
      }
      v69 |= v71;
      int64_t v72 = *(void *)(v55 + 8 * v68);
    }

    while (v72 == -1);
    uint64_t v57 = __clz(__rbit64(~v72)) + (v68 << 6);
LABEL_74:
    *(void *)(v55 + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v57;
    *(void *)(*(void *)(v10 + 48) + 8 * v57) = v64;
    ++*(void *)(v10 + 16);
  }

  int64_t v60 = v56 + 1;
  if (__OFADD__(v56, 1LL)) {
    goto LABEL_127;
  }
  if (v60 >= v95)
  {
    swift_release_n();
    uint64_t v6 = v91;
    goto LABEL_106;
  }

  uint64_t v6 = v91;
  uint64_t v61 = v93[v60];
  ++v56;
  if (v61) {
    goto LABEL_92;
  }
  uint64_t v56 = v60 + 1;
  if (v60 + 1 >= v95) {
    goto LABEL_123;
  }
  uint64_t v61 = v93[v56];
  if (v61) {
    goto LABEL_92;
  }
  uint64_t v56 = v60 + 2;
  if (v60 + 2 >= v95) {
    goto LABEL_123;
  }
  uint64_t v61 = v93[v56];
  if (v61) {
    goto LABEL_92;
  }
  uint64_t v56 = v60 + 3;
  if (v60 + 3 >= v95) {
    goto LABEL_123;
  }
  uint64_t v61 = v93[v56];
  if (v61)
  {
LABEL_92:
    uint64_t v54 = (v61 - 1) & v61;
    Swift::UInt v59 = __clz(__rbit64(v61)) + (v56 << 6);
    goto LABEL_93;
  }

  uint64_t v62 = v60 + 4;
  if (v62 >= v95) {
    goto LABEL_123;
  }
  uint64_t v61 = v93[v62];
  if (v61)
  {
    uint64_t v56 = v62;
    goto LABEL_92;
  }

  while (1)
  {
    uint64_t v56 = v62 + 1;
    if (__OFADD__(v62, 1LL)) {
      goto LABEL_131;
    }
    if (v56 >= v95) {
      break;
    }
    uint64_t v61 = v93[v56];
    ++v62;
    if (v61) {
      goto LABEL_92;
    }
  }

          Swift::UInt8 v45 = (v56 - 1) & v56;
          Swift::UInt v48 = __clz(__rbit64(v56)) + (v42 << 6);
        }

        Swift::UInt64 v49 = 32 * v48;
        Swift::UInt v50 = (void *)(*(void *)(v10 + 48) + v49);
        uint64_t v51 = v50[1];
        Swift::UInt8 v52 = v50[2];
        uint64_t v53 = v50[3];
        uint64_t v54 = (void *)(*(void *)(v13 + 48) + v49);
        *uint64_t v54 = *v50;
        v54[1] = v51;
        v54[2] = v52;
        v54[3] = v53;
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
      }
    }

    Swift::UInt v59 = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v13 = v59;
    if (*(void *)(v10 + 16))
    {
      id v97 = a4;
      int64_t v60 = 1LL << *(_BYTE *)(v10 + 32);
      uint64_t v61 = v10 + 56;
      if (v60 < 64) {
        uint64_t v62 = ~(-1LL << v60);
      }
      else {
        uint64_t v62 = -1LL;
      }
      uint64_t v63 = v62 & *(void *)(v10 + 56);
      id v103 = (unint64_t)(v60 + 63) >> 6;
      unint64_t v64 = v59 + 56;
      uint64_t result = swift_retain();
      int64_t v65 = 0LL;
      while (1)
      {
        if (v63)
        {
          Swift::UInt v68 = __clz(__rbit64(v63));
          v63 &= v63 - 1;
          Swift::UInt v69 = v68 | (v65 << 6);
        }

        else
        {
          int64_t v70 = v65 + 1;
          if (__OFADD__(v65, 1LL)) {
            goto LABEL_127;
          }
          if (v70 >= v103) {
            goto LABEL_123;
          }
          unint64_t v71 = *(void *)(v61 + 8 * v70);
          ++v65;
          if (!v71)
          {
            int64_t v65 = v70 + 1;
            if (v70 + 1 >= v103) {
              goto LABEL_123;
            }
            unint64_t v71 = *(void *)(v61 + 8 * v65);
            if (!v71)
            {
              int64_t v65 = v70 + 2;
              if (v70 + 2 >= v103) {
                goto LABEL_123;
              }
              unint64_t v71 = *(void *)(v61 + 8 * v65);
              if (!v71)
              {
                int64_t v65 = v70 + 3;
                if (v70 + 3 >= v103) {
                  goto LABEL_123;
                }
                unint64_t v71 = *(void *)(v61 + 8 * v65);
                if (!v71)
                {
                  int64_t v72 = v70 + 4;
                  if (v72 >= v103) {
                    goto LABEL_123;
                  }
                  unint64_t v71 = *(void *)(v61 + 8 * v72);
                  if (!v71)
                  {
                    while (1)
                    {
                      int64_t v65 = v72 + 1;
                      if (__OFADD__(v72, 1LL)) {
                        goto LABEL_131;
                      }
                      if (v65 >= v103) {
                        break;
                      }
                      unint64_t v71 = *(void *)(v61 + 8 * v65);
                      ++v72;
                      if (v71) {
                        goto LABEL_92;
                      }
                    }

      uint64_t v12 = 0LL;
LABEL_66:
      swift_bridgeObjectRelease();
      return (uint64_t)v12;
    }
  }

  else
  {
    if (v8 != 45)
    {
      if (v15)
      {
        uint64_t v17 = 0LL;
        Swift::UInt64 v33 = a5 + 48;
        Swift::UInt64 v34 = a5 + 55;
        int v35 = a5 + 87;
        if (a5 > 10)
        {
          Swift::UInt64 v33 = 58;
        }

        else
        {
          int v35 = 97;
          Swift::UInt64 v34 = 65;
        }

        Swift::UInt v36 = &v40;
        while (1)
        {
          Swift::UInt v37 = *(unsigned __int8 *)v36;
          if (v37 < 0x30 || v37 >= v33)
          {
            if (v37 < 0x41 || v37 >= v34)
            {
              uint64_t v12 = 0LL;
              if (v37 < 0x61 || v37 >= v35) {
                goto LABEL_66;
              }
              int v38 = -87;
            }

            else
            {
              int v38 = -55;
            }
          }

          else
          {
            int v38 = -48;
          }

          unsigned int v39 = v17 * a5;
          uint64_t v17 = v39 + (v37 + v38);
          Swift::UInt v36 = (uint64_t *)((char *)v36 + 1);
          if (!--v15) {
            goto LABEL_64;
          }
        }
      }

      goto LABEL_65;
    }

    if (v15)
    {
      uint64_t v16 = v15 - 1;
      if (v16)
      {
        uint64_t v17 = 0LL;
        uint64_t v18 = a5 + 48;
        uint64_t v19 = a5 + 55;
        uint64_t v20 = a5 + 87;
        if (a5 > 10)
        {
          uint64_t v18 = 58;
        }

        else
        {
          uint64_t v20 = 97;
          uint64_t v19 = 65;
        }

        uint64_t v21 = (unsigned __int8 *)&v40 + 1;
        while (1)
        {
          unint64_t v22 = *v21;
          if (v22 < 0x30 || v22 >= v18)
          {
            if (v22 < 0x41 || v22 >= v19)
            {
              uint64_t v12 = 0LL;
              if (v22 < 0x61 || v22 >= v20) {
                goto LABEL_66;
              }
              uint64_t v23 = -87;
            }

            else
            {
              uint64_t v23 = -55;
            }
          }

          else
          {
            uint64_t v23 = -48;
          }

          int64_t v24 = v17 * a5;
          uint64_t v17 = v24 - (v22 + v23);
          ++v21;
          if (!--v16) {
            goto LABEL_64;
          }
        }
      }

      goto LABEL_65;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

      uint64_t v10 = 0LL;
LABEL_66:
      swift_bridgeObjectRelease();
      return (uint64_t)v10;
    }
  }

  else
  {
    if (v6 != 45)
    {
      if (v13)
      {
        uint64_t v15 = 0LL;
        uint64_t v31 = a3 + 48;
        uint64_t v32 = a3 + 55;
        Swift::UInt64 v33 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v31 = 58;
        }

        else
        {
          Swift::UInt64 v33 = 97;
          uint64_t v32 = 65;
        }

        Swift::UInt64 v34 = &v38;
        while (1)
        {
          int v35 = *(unsigned __int8 *)v34;
          if (v35 < 0x30 || v35 >= v31)
          {
            if (v35 < 0x41 || v35 >= v32)
            {
              uint64_t v10 = 0LL;
              if (v35 < 0x61 || v35 >= v33) {
                goto LABEL_66;
              }
              Swift::UInt v36 = -87;
            }

            else
            {
              Swift::UInt v36 = -55;
            }
          }

          else
          {
            Swift::UInt v36 = -48;
          }

          Swift::UInt v37 = v15 * a3;
          uint64_t v15 = v37 + (v35 + v36);
          Swift::UInt64 v34 = (uint64_t *)((char *)v34 + 1);
          if (!--v13) {
            goto LABEL_64;
          }
        }
      }

      goto LABEL_65;
    }

    if (v13)
    {
      uint64_t v14 = v13 - 1;
      if (v14)
      {
        uint64_t v15 = 0LL;
        uint64_t v16 = a3 + 48;
        uint64_t v17 = a3 + 55;
        uint64_t v18 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v16 = 58;
        }

        else
        {
          uint64_t v18 = 97;
          uint64_t v17 = 65;
        }

        uint64_t v19 = (unsigned __int8 *)&v38 + 1;
        while (1)
        {
          uint64_t v20 = *v19;
          if (v20 < 0x30 || v20 >= v16)
          {
            if (v20 < 0x41 || v20 >= v17)
            {
              uint64_t v10 = 0LL;
              if (v20 < 0x61 || v20 >= v18) {
                goto LABEL_66;
              }
              uint64_t v21 = -87;
            }

            else
            {
              uint64_t v21 = -55;
            }
          }

          else
          {
            uint64_t v21 = -48;
          }

          unint64_t v22 = v15 * a3;
          uint64_t v15 = v22 - (v20 + v21);
          ++v19;
          if (!--v14) {
            goto LABEL_64;
          }
        }
      }

      goto LABEL_65;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

      if (v56 >= v326)
      {
LABEL_387:
        __break(1u);
        goto LABEL_388;
      }

      uint64_t v58 = *(void *)(v22 + 64);
      uint64_t v57 = *(void *)(v22 + 72);
      Swift::UInt v59 = *(void *)(v22 + 80);
      uint64_t v8 = *(void *)(v22 + 88);
      v337 = v8;
      v353 = v57;
      if (v58)
      {
        uint64_t v10 = v349;
        if (v59 < (uint64_t)v351)
        {
LABEL_430:
          __break(1u);
LABEL_431:
          __break(1u);
          goto LABEL_432;
        }

        if (*(_WORD *)(v58 + 16) && (uint64_t)v351 < v59)
        {
          int64_t v60 = *(unsigned __int8 *)(v58 + 18);
          if (*(_BYTE *)(v58 + 18))
          {
            swift_unknownObjectRetain_n();
            outlined retain of AttributedString.Runs((uint64_t)v413);
            swift_unknownObjectRetain();
            uint64_t v10 = -15LL;
            uint64_t v21 = 24LL;
            uint64_t v9 = (unint64_t)v351;
            uint64_t v8 = v58;
            while (1)
            {
              uint64_t v63 = *(unsigned __int16 *)(v8 + 16);
              if (!*(_WORD *)(v8 + 16)) {
                goto LABEL_73;
              }
              unint64_t v64 = *(void *)(v8 + 40);
              int64_t v65 = v9 - v64;
              if (__OFSUB__(v9, v64)) {
                goto LABEL_372;
              }
              if (__OFADD__(v65, 1LL)) {
                goto LABEL_373;
              }
              if ((uint64_t)(v65 + 1) <= 0)
              {
                uint64_t v63 = 0LL;
              }

              else
              {
                if ((_DWORD)v63 == 1)
                {
                  v9 -= v64;
                  goto LABEL_73;
                }

                unint64_t v66 = *(void *)(v8 + 64);
                uint64_t v40 = __OFSUB__(v65, v66);
                unint64_t v67 = v65 - v66;
                if (v40) {
                  goto LABEL_380;
                }
                if (__OFADD__(v67, 1LL)) {
                  goto LABEL_381;
                }
                if ((uint64_t)(v67 + 1) < 1)
                {
                  uint64_t v63 = 1LL;
                  uint64_t v9 = v65;
                }

                else
                {
                  if ((_DWORD)v63 == 2)
                  {
                    uint64_t v9 = v67;
LABEL_73:
                    if (v9) {
                      goto LABEL_369;
                    }
                    goto LABEL_74;
                  }

                  Swift::UInt v68 = (void *)(v8 + 88);
                  Swift::UInt v69 = 2LL;
                  while (1)
                  {
                    if (v63 == v69) {
                      goto LABEL_363;
                    }
                    uint64_t v9 = v67 - *v68;
                    if (__OFSUB__(v67, *v68)) {
                      goto LABEL_364;
                    }
                    if (__OFADD__(v9, 1LL)) {
                      goto LABEL_365;
                    }
                    ++v69;
                    v68 += 3;
                    unint64_t v67 = v9;
                    if (v63 == v69) {
                      goto LABEL_73;
                    }
                  }

                  uint64_t v63 = v69;
                  uint64_t v9 = v67;
                }
              }

    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflectionAgreementConcept");
  uint64_t v21 = v20;
  if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v21 == v22)
  {
    swift_bridgeObjectRelease_n();
LABEL_23:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v43 = (void *)*a4;
      uint64_t v44 = *(_OWORD *)(*a4 + 16);
      Swift::UInt8 v45 = *(_OWORD *)(*a4 + 48);
      uint64_t v146 = *(_OWORD *)(*a4 + 32);
      uint64_t v147 = v45;
      uint64_t v145 = v44;
      uint64_t v46 = v43[8];
      Swift::UInt8 v109 = v43[9];
      int v47 = v43[10];
      Swift::UInt v48 = v43[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v145);
      swift_unknownObjectRetain();
      *a4 = AttributedString.Guts.init(string:runs:)(&v145, v46, v109, v47, v48);
      swift_release();
    }

    Swift::UInt64 v49 = *a4;
    Swift::UInt v50 = *(_OWORD *)(*a4 + 32);
    __int128 v142 = *(_OWORD *)(*a4 + 16);
    __int128 v143 = v50;
    __int128 v144 = *(_OWORD *)(v49 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    int v135 = v113;
    uint64_t v136 = v114;
    uint64_t v137 = v115;
    uint64_t v138 = v9;
    int64_t v139 = v10;
    __int128 v140 = v11;
    __int128 v141 = v12;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v123);
    outlined release of Locale((uint64_t)v124);
    BOOL v118 = v128;
    uint64_t v119 = v129;
    uint64_t v120 = v130;
    uint64_t v121 = v131;
    unint64_t v117 = (void *)v49;
    if (one-time initialization token for currentIdentity == -1) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }

  int64_t v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v24 & 1) != 0) {
    goto LABEL_23;
  }
  unint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflectionAgreementArgument");
  unint64_t v27 = v26;
  if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v27 == v28)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_33;
  }

  uint64_t v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v58 & 1) != 0)
  {
LABEL_33:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      Swift::UInt v59 = (void *)*a4;
      int64_t v60 = *(_OWORD *)(*a4 + 16);
      uint64_t v61 = *(_OWORD *)(*a4 + 48);
      uint64_t v146 = *(_OWORD *)(*a4 + 32);
      uint64_t v147 = v61;
      uint64_t v145 = v60;
      uint64_t v62 = v59[8];
      Swift::UInt8 v110 = v59[9];
      uint64_t v63 = v59[10];
      unint64_t v64 = v59[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v145);
      swift_unknownObjectRetain();
      *a4 = AttributedString.Guts.init(string:runs:)(&v145, v62, v110, v63, v64);
      swift_release();
    }

    int64_t v65 = *a4;
    unint64_t v66 = *(_OWORD *)(*a4 + 32);
    __int128 v142 = *(_OWORD *)(*a4 + 16);
    __int128 v143 = v66;
    __int128 v144 = *(_OWORD *)(v65 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    int v135 = v113;
    uint64_t v136 = v114;
    uint64_t v137 = v115;
    uint64_t v138 = v9;
    int64_t v139 = v10;
    __int128 v140 = v11;
    __int128 v141 = v12;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v123);
    outlined release of Locale((uint64_t)v124);
    BOOL v118 = v128;
    uint64_t v119 = v129;
    uint64_t v120 = v130;
    uint64_t v121 = v131;
    unint64_t v117 = (void *)v65;
    if (one-time initialization token for currentIdentity == -1) {
      goto LABEL_36;
    }
    goto LABEL_59;
  }

  int64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflectionReferentConcept");
  int64_t v74 = v73;
  if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v74 == v75)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_42;
  }

  uint64_t v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v76 & 1) != 0)
  {
LABEL_42:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v77 = (void *)*a4;
      unint64_t v78 = *(_OWORD *)(*a4 + 16);
      int64_t v79 = *(_OWORD *)(*a4 + 48);
      uint64_t v146 = *(_OWORD *)(*a4 + 32);
      uint64_t v147 = v79;
      uint64_t v145 = v78;
      unint64_t v80 = v77[8];
      Swift::UInt8 v111 = v77[9];
      unint64_t v81 = v77[10];
      Swift::UInt v82 = v77[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v145);
      swift_unknownObjectRetain();
      *a4 = AttributedString.Guts.init(string:runs:)(&v145, v80, v111, v81, v82);
      swift_release();
    }

    Swift::UInt v83 = *a4;
    int64_t v84 = *(_OWORD *)(*a4 + 32);
    __int128 v142 = *(_OWORD *)(*a4 + 16);
    __int128 v143 = v84;
    __int128 v144 = *(_OWORD *)(v83 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    int v135 = v113;
    uint64_t v136 = v114;
    uint64_t v137 = v115;
    uint64_t v138 = v9;
    int64_t v139 = v10;
    __int128 v140 = v11;
    __int128 v141 = v12;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v123);
    outlined release of Locale((uint64_t)v124);
    BOOL v118 = v128;
    uint64_t v119 = v129;
    uint64_t v120 = v130;
    uint64_t v121 = v131;
    unint64_t v117 = (void *)v83;
    if (one-time initialization token for currentIdentity == -1) {
      goto LABEL_45;
    }
    goto LABEL_61;
  }

  id v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedNumberFormat");
  id v92 = v91;
  if (v90 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v92 == v93)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_51;
  }

  id v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v94 & 1) != 0)
  {
LABEL_51:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      id v95 = (void *)*a4;
      id v96 = *(_OWORD *)(*a4 + 16);
      id v97 = *(_OWORD *)(*a4 + 48);
      uint64_t v146 = *(_OWORD *)(*a4 + 32);
      uint64_t v147 = v97;
      uint64_t v145 = v96;
      id v98 = v95[8];
      Swift::Int v112 = v95[9];
      id v99 = v95[10];
      id v100 = v95[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v145);
      swift_unknownObjectRetain();
      *a4 = AttributedString.Guts.init(string:runs:)(&v145, v98, v112, v99, v100);
      swift_release();
    }

    id v101 = *a4;
    id v102 = *(_OWORD *)(*a4 + 32);
    __int128 v142 = *(_OWORD *)(*a4 + 16);
    __int128 v143 = v102;
    __int128 v144 = *(_OWORD *)(v101 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    int v135 = v113;
    uint64_t v136 = v114;
    uint64_t v137 = v115;
    uint64_t v138 = v9;
    int64_t v139 = v10;
    __int128 v140 = v11;
    __int128 v141 = v12;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v123);
    outlined release of Locale((uint64_t)v124);
    BOOL v118 = v128;
    uint64_t v119 = v129;
    uint64_t v120 = v130;
    uint64_t v121 = v131;
    unint64_t v117 = (void *)v101;
    if (one-time initialization token for currentIdentity == -1) {
      goto LABEL_54;
    }
    goto LABEL_63;
  }

  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1LL);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  a4[(result >> 6) + 8] |= 1LL << result;
  uint64_t v4 = a4[6] + 56 * result;
  uint64_t v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(v4 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a4[7] + 8 * result) = a3;
  BOOL v6 = a4[2];
  uint64_t v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

{
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  a5[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

{
  void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  uint64_t v6 = a5[7] + 72 * result;
  *(void *)(v6 + 64) = *(void *)(a4 + 64);
  BOOL v7 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v6 + 48) = v7;
  uint64_t v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 16) = v8;
  BOOL v9 = a5[2];
  uint64_t v10 = __OFADD__(v9, 1LL);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a5[2] = v11;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  *(_DWORD *)(a5[6] + 4 * result) = a2;
  BOOL v5 = (void *)(a5[7] + 16 * result);
  *BOOL v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = a6[7] + 16 * result;
  *(void *)uint64_t v7 = a4;
  *(_BYTE *)(v7 + 8) = a5 & 1;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a4, a5[7] + 48 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for CombineIdentifier();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a2,  v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  uint64_t v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

{
  uint64_t result;
  void *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneICU,  (uint64_t)&protocol conformance descriptor for _TimeZoneICU);
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v11 = (void *)(a5[6] + 16 * a1);
  char *v11 = a2;
  v11[1] = a3;
  uint64_t v12 = (void *)(a5[7] + 16 * a1);
  *uint64_t v12 = a4;
  v12[1] = result;
  uint64_t v13 = a5[2];
  uint64_t v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a5[2] = v15;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return specialized _NativeDictionary._insert(at:key:value:)( a1,  a2,  a3,  a4,  type metadata accessor for ICUNumberFormatter.Signature);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  BOOL v9 = type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
  uint64_t result = outlined init with take of ICUNumberFormatter.Signature( a2,  v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  uint64_t v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)( a1,  a2,  a3,  a4,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
}

{
  return specialized _NativeDictionary._insert(at:key:value:)( a1,  a2,  a3,  a4,  type metadata accessor for ICUPercentNumberFormatter.Signature);
}

{
  uint64_t result;
  void *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU,  (uint64_t)&protocol conformance descriptor for _TimeZoneGMTICU);
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  BOOL v9 = (void *)(a4[7] + 16 * a1);
  *BOOL v9 = a3;
  v9[1] = result;
  uint64_t v10 = a4[2];
  uint64_t v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

void *specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t result = memcpy((void *)(a4[6] + 392 * a1), a2, 0x188uLL);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, _OWORD *a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  uint64_t v4 = (_OWORD *)(a4[6] + 176 * result);
  __int128 v5 = a2[9];
  v4[8] = a2[8];
  v4[9] = v5;
  *(_OWORD *)((char *)v4 + 156) = *(_OWORD *)((char *)a2 + 156);
  __int128 v6 = a2[5];
  v4[4] = a2[4];
  v4[5] = v6;
  __int128 v7 = a2[7];
  v4[6] = a2[6];
  v4[7] = v7;
  __int128 v8 = a2[1];
  *uint64_t v4 = *a2;
  v4[1] = v8;
  __int128 v9 = a2[3];
  v4[2] = a2[2];
  v4[3] = v9;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  a4[(result >> 6) + 8] |= 1LL << result;
  uint64_t v4 = (_OWORD *)(a4[6] + 96 * result);
  __int128 v5 = a2[3];
  v4[2] = a2[2];
  v4[3] = v5;
  __int128 v6 = a2[5];
  v4[4] = a2[4];
  v4[5] = v6;
  __int128 v7 = a2[1];
  *uint64_t v4 = *a2;
  v4[1] = v7;
  *(void *)(a4[7] + 8 * result) = a3;
  __int128 v8 = a4[2];
  __int128 v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  a4[(result >> 6) + 8] |= 1LL << result;
  uint64_t v4 = (_OWORD *)(a4[6] + 160 * result);
  __int128 v5 = a2[7];
  v4[6] = a2[6];
  v4[7] = v5;
  v4[8] = a2[8];
  *(_OWORD *)((char *)v4 + 140) = *(_OWORD *)((char *)a2 + 140);
  __int128 v6 = a2[3];
  v4[2] = a2[2];
  v4[3] = v6;
  __int128 v7 = a2[5];
  v4[4] = a2[4];
  v4[5] = v7;
  __int128 v8 = a2[1];
  *uint64_t v4 = *a2;
  v4[1] = v8;
  *(void *)(a4[7] + 8 * result) = a3;
  __int128 v9 = a4[2];
  uint64_t v10 = __OFADD__(v9, 1LL);
  BOOL v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a4[2] = v11;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1LL << result;
  __int128 v7 = (void *)(a7[6] + 32 * result);
  *__int128 v7 = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  *(void *)(a7[7] + 8 * result) = a6;
  uint64_t v8 = a7[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a7[2] = v10;
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  a7[(result >> 6) + 8] |= 1LL << result;
  __int128 v7 = a7[6] + 32 * result;
  *(void *)__int128 v7 = a2;
  *(void *)(v7 + 8) = a3;
  *(_DWORD *)(v7 + 16) = a4;
  *(_BYTE *)(v7 + 20) = BYTE4(a4) & 1;
  *(void *)(v7 + 24) = a5;
  *(void *)(a7[7] + 8 * result) = a6;
  uint64_t v8 = a7[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a7[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = a5(0LL);
  uint64_t result = outlined init with take of ICUNumberFormatter.Signature( a2,  v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a5);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, void *a8)
{
  a8[(result >> 6) + 8] |= 1LL << result;
  uint64_t v8 = (void *)(a8[6] + 16 * result);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a8[7] + 32 * result;
  *(void *)uint64_t v9 = a4;
  *(_BYTE *)(v9 + 8) = a5;
  *(void *)(v9 + 16) = a6;
  *(_BYTE *)(v9 + 24) = a7;
  uint64_t v10 = a8[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a8[2] = v12;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, void *a8)
{
  a8[(result >> 6) + 8] |= 1LL << result;
  uint64_t v8 = a8[6] + 24 * result;
  *(void *)uint64_t v8 = a2;
  *(void *)(v8 + 8) = a3;
  *(_BYTE *)(v8 + 16) = a4;
  uint64_t v9 = a8[7] + 24 * result;
  *(void *)uint64_t v9 = a5;
  *(void *)(v9 + 8) = a6;
  *(_BYTE *)(v9 + 16) = a7;
  uint64_t v10 = a8[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a8[2] = v12;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  uint64_t v6 = a6[6] + 24 * result;
  *(void *)uint64_t v6 = a2;
  *(void *)(v6 + 8) = a3;
  *(_BYTE *)(v6 + 16) = a4;
  *(void *)(a6[7] + 8 * result) = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1LL);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  __int128 v5 = (void *)(a5[6] + 16 * result);
  *__int128 v5 = a2;
  v5[1] = a3;
  uint64_t v6 = (_OWORD *)(a5[7] + 80 * result);
  __int128 v7 = a4[4];
  __int128 v8 = a4[2];
  v6[3] = a4[3];
  v6[4] = v7;
  __int128 v9 = a4[1];
  *uint64_t v6 = *a4;
  v6[1] = v9;
  v6[2] = v8;
  uint64_t v10 = a5[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a5[2] = v12;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  __int128 v5 = (_OWORD *)(a5[6] + 96 * result);
  __int128 v6 = a2[3];
  v5[2] = a2[2];
  v5[3] = v6;
  __int128 v7 = a2[5];
  v5[4] = a2[4];
  v5[5] = v7;
  __int128 v8 = a2[1];
  *__int128 v5 = *a2;
  v5[1] = v8;
  __int128 v9 = (void *)(a5[7] + 16 * result);
  *__int128 v9 = a3;
  v9[1] = a4;
  uint64_t v10 = a5[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a5[2] = v12;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, _OWORD *a2, uint64_t a3, char a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  __int128 v5 = (_OWORD *)(a5[6] + 96 * result);
  __int128 v6 = a2[3];
  v5[2] = a2[2];
  v5[3] = v6;
  __int128 v7 = a2[5];
  v5[4] = a2[4];
  v5[5] = v7;
  __int128 v8 = a2[1];
  *__int128 v5 = *a2;
  v5[1] = v8;
  uint64_t v9 = a5[7] + 16 * result;
  *(void *)uint64_t v9 = a3;
  *(_BYTE *)(v9 + 8) = a4 & 1;
  uint64_t v10 = a5[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a5[2] = v12;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  BOOL v11 = a4[2];
  uint64_t v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6)
{
  a6[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v9 = a6[6] + 24 * a1;
  *(void *)uint64_t v9 = a2;
  *(void *)(v9 + 8) = a3;
  *(_BYTE *)(v9 + 16) = a4;
  uint64_t v10 = a6[7];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a5,  v11);
  uint64_t v13 = a6[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a6[2] = v15;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, int a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  *(_BYTE *)(a5[6] + result) = a2;
  BOOL v5 = (void *)(a5[7] + 16 * result);
  *BOOL v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)( void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)( void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618C78], MEMORY[0x189618C50]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618C70], MEMORY[0x189618C50]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618C60], MEMORY[0x189618C50]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618C58], MEMORY[0x189618C50]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618C68], MEMORY[0x189618C50]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189617FE8], MEMORY[0x189617FA8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189617FE0], MEMORY[0x189617FA8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189617FF0], MEMORY[0x189617FA8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for String, MEMORY[0x189617FA8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189617FC0], MEMORY[0x189617FA8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for String, MEMORY[0x189617FA8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Variable<A>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.KeyPath<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a3 + 8LL);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> PredicateExpressions.Value<A>( uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5 = *a3;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void v11[4];
  void v12[4];
  __int128 v5 = a3[1];
  BOOL v7 = *(void *)(*a3 + 24LL);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  v12[0] = *(void *)(*a3 + 16LL);
  uint64_t v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(void *)(a1 + 16) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>,  a2,  v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>, a2, v11);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Disjunction<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Disjunction<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void v11[4];
  void v12[4];
  __int128 v5 = a3[1];
  BOOL v7 = *(void *)(*a3 + 24LL);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  v12[0] = *(void *)(*a3 + 16LL);
  uint64_t v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(void *)(a1 + 16) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.Disjunction<A, B>,  a2,  v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.Disjunction<A, B>, a2, v11);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Equal<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void v11[4];
  void v12[4];
  __int128 v5 = a3[1];
  BOOL v7 = *(void *)(*a3 + 24LL);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  v12[0] = *(void *)(*a3 + 16LL);
  uint64_t v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(void *)(a1 + 16) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>,  a2,  v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, a2, v11);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.NotEqual<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.NotEqual<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void v11[4];
  void v12[4];
  __int128 v5 = a3[1];
  BOOL v7 = *(void *)(*a3 + 24LL);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  v12[0] = *(void *)(*a3 + 16LL);
  uint64_t v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(void *)(a1 + 16) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.NotEqual<A, B>,  a2,  v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.NotEqual<A, B>, a2, v11);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Arithmetic<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Arithmetic<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Comparison<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Comparison<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void v11[4];
  void v12[4];
  __int128 v5 = a3[1];
  BOOL v7 = *(void *)(*a3 + 24LL);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  v12[0] = *(void *)(*a3 + 16LL);
  uint64_t v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(void *)(a1 + 16) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.Comparison<A, B>,  a2,  v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.Comparison<A, B>, a2, v11);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.UnaryMinus<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a3 + 8LL);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.UnaryMinus<A>, a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceMinimum<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a3 + 8LL);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.SequenceMinimum<A>, a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceMaximum<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a3 + 8LL);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.SequenceMaximum<A>, a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ClosedRange<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.ClosedRange<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Range<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Range<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Conditional<A, B, C>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conditional<A, B, C>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Conditional<A, B, C>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionIndexSubscript<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.CollectionIndexSubscript<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionRangeSubscript<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.CollectionRangeSubscript<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionContainsCollection<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.CollectionContainsCollection<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void v11[4];
  void v12[4];
  uint64_t v5 = a3[1];
  BOOL v7 = *(void *)(*a3 + 24LL);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  v12[0] = *(void *)(*a3 + 16LL);
  uint64_t v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(void *)(a1 + 16) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.CollectionContainsCollection<A, B>,  a2,  v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  uint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.CollectionContainsCollection<A, B>,  a2,  v11);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a3 + 8LL);
  uint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.ConditionalCast<A, B>,  a2,  &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ForceCast<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a3 + 8LL);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.ForceCast<A, B>, a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.TypeCheck<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a3 + 8LL);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.TypeCheck<A, B>, a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void v8[2];
  void v9[2];
  uint64_t v6 = *(void *)(*(void *)a3 + 24LL);
  v9[0] = *(void *)(*(void *)a3 + 16LL);
  uint64_t v5 = v9[0];
  v9[1] = v6;
  *(void *)(a1 + 16) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.TypeCheck<A, B>,  a2,  v9);
  v8[0] = v5;
  v8[1] = v6;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.TypeCheck<A, B>, a2, v8);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ForcedUnwrap<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a3 + 8LL);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.ForcedUnwrap<A, B>, a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.DictionaryKeySubscript<A, B, C>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.DictionaryKeySubscript<A, B, C>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conditional<A, B, C>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Conditional<A, B, C>( uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a3[1] + 8LL);
  uint64_t v6 = *(void *)(a3[2] + 8LL);
  v8[0] = *(void *)(*a3 + 8LL);
  v8[1] = v5;
  v8[2] = v6;
  uint64_t result = MEMORY[0x186E20D4C](a4, a2, v8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.FloatDivision<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.FloatDivision<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.IntDivision<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.IntDivision<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.IntRemainder<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.IntRemainder<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Negation<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a3 + 8LL);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.Negation<A>, a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void v8[2];
  void v9[2];
  uint64_t v6 = *(void *)(*(void *)a3 + 24LL);
  v9[0] = *(void *)(*(void *)a3 + 16LL);
  uint64_t v5 = v9[0];
  v9[1] = v6;
  *(void *)(a1 + 16) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.Negation<A>,  a2,  v9);
  v8[0] = v5;
  v8[1] = v6;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.Negation<A>, a2, v8);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.NilCoalesce<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.NilCoalesce<A, B>);
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.NilLiteral<A>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.NilLiteral<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.NilLiteral<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.RangeExpressionContains<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.RangeExpressionContains<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void v11[4];
  void v12[4];
  uint64_t v5 = a3[1];
  BOOL v7 = *(void *)(*a3 + 24LL);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  v12[0] = *(void *)(*a3 + 16LL);
  uint64_t v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(void *)(a1 + 16) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.RangeExpressionContains<A, B>,  a2,  v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  uint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.RangeExpressionContains<A, B>,  a2,  v11);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceContains<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceContains<A, B>);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceContains<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceContains<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceStartsWith<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceStartsWith<A, B>);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceStartsWith<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceStartsWith<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceContainsWhere<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceContainsWhere<A, B>);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceContainsWhere<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceContainsWhere<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceAllSatisfy<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceAllSatisfy<A, B>);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceAllSatisfy<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceAllSatisfy<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Filter<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Filter<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.StringContainsRegex<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringContainsRegex<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void v11[4];
  void v12[4];
  uint64_t v5 = a3[1];
  BOOL v7 = *(void *)(*a3 + 24LL);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  v12[0] = *(void *)(*a3 + 16LL);
  uint64_t v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(void *)(a1 + 16) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.StringContainsRegex<A, B>,  a2,  v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  uint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.StringContainsRegex<A, B>,  a2,  v11);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>( uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  void v12[2];
  MEMORY[0x1895F8858]();
  BOOL v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v5)
  {
    uint64_t v8 = (uint64_t *)(*(void *)(v2 + 8) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v9 = v7;
    do
    {
      uint64_t v10 = *v8++;
      *v9++ = *(void *)(v10 + 8);
      --v5;
    }

    while (v5);
  }

  v12[0] = v4;
  v12[1] = v7;
  uint64_t result = MEMORY[0x186E20D4C](v3);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>( uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>( uint64_t a1, uint64_t a2, void *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void v11[4];
  void v12[4];
  uint64_t v5 = a3[1];
  BOOL v7 = *(void *)(*a3 + 24LL);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  v12[0] = *(void *)(*a3 + 16LL);
  uint64_t v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(void *)(a1 + 16) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>,  a2,  v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  uint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>,  a2,  v11);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>( uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a3[1] + 8LL);
  v7[0] = *(void *)(*a3 + 8LL);
  v7[1] = v5;
  uint64_t result = MEMORY[0x186E20D4C](a4, a2, v7);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for DebugStringConversionState()
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DebugStringConversionState(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DebugStringConversionState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

void *assignWithTake for DebugStringConversionState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for DebugStringConversionState(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DebugStringConversionState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DebugStringConversionState()
{
  return &type metadata for DebugStringConversionState;
}

uint64_t dispatch thunk of DebugStringConvertiblePredicateExpression.debugString(state:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String?, value: Any));
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 288 * a1 + 32;
    unint64_t v6 = a3 + 288 * v4;
    if (v5 >= v6 || v5 + 288 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (skeleton: String, measurementUnit: Duration.UnitsFormatStyle.Unit, measurementValue: Double));
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 120 * a1 + 32;
    unint64_t v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined retain of LocaleCache.State.IdentifierAndPrefs(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  __int128 v12 = *(_OWORD *)(a1 + 80);
  __int128 v10 = *(_OWORD *)(a1 + 112);
  __int128 v11 = *(_OWORD *)(a1 + 96);
  swift_bridgeObjectRetain();
  outlined copy of LocalePreferences?( v13,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  (void *)v12,  *((void **)&v12 + 1),  (void *)v11,  *((void **)&v11 + 1),  (void *)v10);
  return a1;
}

uint64_t outlined copy of LocalePreferences?( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v13 = a9;
    id v14 = a10;
    id v15 = a11;
    id v16 = a12;
    id v17 = a13;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }

  return result;
}

uint64_t _s10Foundation17LocalePreferencesVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t outlined retain of LocalePreferences?( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))
{
  return a1;
}

uint64_t outlined consume of LocalePreferences?( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

void *outlined retain of LocalePreferences(void *a1)
{
  int v2 = (void *)a1[8];
  uint64_t v4 = (void *)a1[9];
  uint64_t v3 = (void *)a1[10];
  uint64_t v5 = (void *)a1[11];
  __int128 v12 = (void *)a1[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v2;
  id v7 = v4;
  id v8 = v3;
  id v9 = v5;
  id v10 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of (LocalePreferences?, LocalePreferences?)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 152);
  uint64_t v13 = *(void *)(a1 + 144);
  uint64_t v3 = *(void *)(a1 + 160);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  uint64_t v6 = *(void *)(a1 + 184);
  uint64_t v7 = *(void *)(a1 + 192);
  uint64_t v8 = *(void *)(a1 + 200);
  __int128 v12 = *(_OWORD *)(a1 + 208);
  __int128 v10 = *(_OWORD *)(a1 + 240);
  __int128 v11 = *(_OWORD *)(a1 + 224);
  outlined consume of LocalePreferences?( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void **)(a1 + 64),  *(void **)(a1 + 72),  *(void **)(a1 + 80),  *(void **)(a1 + 88),  *(void **)(a1 + 96));
  outlined consume of LocalePreferences?( v13,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  (void *)v12,  *((void **)&v12 + 1),  (void *)v11,  *((void **)&v11 + 1),  (void *)v10);
  return a1;
}

uint64_t outlined release of LocaleCache.State.IdentifierAndPrefs(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  __int128 v12 = *(_OWORD *)(a1 + 80);
  __int128 v10 = *(_OWORD *)(a1 + 112);
  __int128 v11 = *(_OWORD *)(a1 + 96);
  swift_bridgeObjectRelease();
  outlined consume of LocalePreferences?( v13,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  (void *)v12,  *((void **)&v12 + 1),  (void *)v11,  *((void **)&v11 + 1),  (void *)v10);
  return a1;
}

void *outlined release of LocalePreferences(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  uint64_t v4 = (void *)a1[9];
  uint64_t v3 = (void *)a1[10];
  uint64_t v6 = (void *)a1[11];
  uint64_t v5 = (void *)a1[12];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = (char *)(a4 + 2 * a1 + 32);
    size_t v6 = 2 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = (char *)(a4 + 40 * a1 + 32);
    size_t v6 = 40 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of FloatingPointRoundingRule?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of _XMLPlistEncodingFormat.Reference(uint64_t result, unint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    case 5:
      uint64_t result = outlined copy of Data._Representation(result, a2);
      break;
    case 6:
    case 7:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }

  return result;
}

uint64_t outlined consume of _XMLPlistEncodingFormat.Reference(uint64_t result, unint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 5:
      uint64_t result = outlined consume of Data._Representation(result, a2);
      break;
    case 6:
    case 7:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }

  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v5 & 0x8000000000000000LL) == 0)
  {
    unint64_t v6 = a4 + 72 * a1 + 32;
    unint64_t v7 = a3 + 72 * v5;
    if (v6 >= v7 || v6 + 72 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v5 & 0x8000000000000000LL) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined retain of Locale(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Locale(uint64_t a1)
{
  return a1;
}

uint64_t *outlined retain of ICUDateIntervalFormatter.Signature(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[13];
  uint64_t v8 = a1[14];
  uint64_t v9 = a1[18];
  uint64_t v10 = a1[17];
  uint64_t v11 = a1[22];
  uint64_t v12 = a1[21];
  uint64_t v13 = a1[27];
  uint64_t v14 = a1[26];
  uint64_t v15 = a1[31];
  uint64_t v16 = a1[30];
  uint64_t v17 = a1[35];
  uint64_t v18 = a1[34];
  uint64_t v19 = a1[41];
  uint64_t v20 = a1[40];
  outlined copy of Locale.LanguageCode?(*a1, a1[1]);
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v4, v5);
  outlined copy of Locale.LanguageCode?(v6, v8);
  outlined copy of Locale.LanguageCode?(v10, v9);
  outlined copy of Locale.LanguageCode?(v12, v11);
  outlined copy of Locale.LanguageCode?(v14, v13);
  outlined copy of Locale.LanguageCode?(v16, v15);
  outlined copy of Locale.LanguageCode?(v18, v17);
  swift_unknownObjectRetain();
  outlined copy of Locale.LanguageCode?(v20, v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of Locale.LanguageCode?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }

  return result;
}

uint64_t *outlined release of ICUDateIntervalFormatter.Signature(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[13];
  uint64_t v8 = a1[14];
  uint64_t v9 = a1[18];
  uint64_t v10 = a1[17];
  uint64_t v11 = a1[22];
  uint64_t v12 = a1[21];
  uint64_t v13 = a1[27];
  uint64_t v14 = a1[26];
  uint64_t v15 = a1[31];
  uint64_t v16 = a1[30];
  uint64_t v17 = a1[35];
  uint64_t v18 = a1[34];
  uint64_t v19 = a1[41];
  uint64_t v20 = a1[40];
  outlined consume of Locale.LanguageCode?(*a1, a1[1]);
  outlined consume of Locale.LanguageCode?(v2, v3);
  outlined consume of Locale.LanguageCode?(v4, v5);
  outlined consume of Locale.LanguageCode?(v6, v8);
  outlined consume of Locale.LanguageCode?(v10, v9);
  outlined consume of Locale.LanguageCode?(v12, v11);
  outlined consume of Locale.LanguageCode?(v14, v13);
  outlined consume of Locale.LanguageCode?(v16, v15);
  outlined consume of Locale.LanguageCode?(v18, v17);
  swift_unknownObjectRelease();
  outlined consume of Locale.LanguageCode?(v20, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of Locale.LanguageCode?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t outlined copy of PredicateCodableConfiguration.AllowListKeyPath( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0) {
    return swift_retain();
  }
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of ICUByteCountNumberFormatter.Signature(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  __int128 v10 = *(_OWORD *)(a1 + 112);
  __int128 v11 = *(_OWORD *)(a1 + 96);
  __int128 v9 = *(_OWORD *)(a1 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of LocalePreferences?( v13,  v12,  v2,  v3,  v4,  v5,  v6,  v7,  (void *)v11,  *((void **)&v11 + 1),  (void *)v10,  *((void **)&v10 + 1),  (void *)v9);
  return a1;
}

uint64_t outlined release of ICUByteCountNumberFormatter.Signature(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  __int128 v10 = *(_OWORD *)(a1 + 112);
  __int128 v11 = *(_OWORD *)(a1 + 96);
  __int128 v9 = *(_OWORD *)(a1 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of LocalePreferences?( v13,  v12,  v2,  v3,  v4,  v5,  v6,  v7,  (void *)v11,  *((void **)&v11 + 1),  (void *)v10,  *((void **)&v10 + 1),  (void *)v9);
  return a1;
}

uint64_t *outlined retain of Locale.Components(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[13];
  uint64_t v8 = a1[14];
  uint64_t v9 = a1[18];
  uint64_t v10 = a1[17];
  uint64_t v11 = a1[22];
  uint64_t v12 = a1[21];
  uint64_t v13 = a1[27];
  uint64_t v14 = a1[26];
  uint64_t v15 = a1[31];
  uint64_t v16 = a1[30];
  uint64_t v17 = a1[35];
  uint64_t v18 = a1[34];
  uint64_t v19 = a1[41];
  uint64_t v20 = a1[40];
  outlined copy of Locale.LanguageCode?(*a1, a1[1]);
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v4, v5);
  outlined copy of Locale.LanguageCode?(v6, v8);
  outlined copy of Locale.LanguageCode?(v10, v9);
  outlined copy of Locale.LanguageCode?(v12, v11);
  outlined copy of Locale.LanguageCode?(v14, v13);
  outlined copy of Locale.LanguageCode?(v16, v15);
  outlined copy of Locale.LanguageCode?(v18, v17);
  swift_unknownObjectRetain();
  outlined copy of Locale.LanguageCode?(v20, v19);
  return a1;
}

uint64_t outlined init with copy of ICUNumberFormatter.Signature( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of ICUNumberFormatter.Signature( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ICUNumberFormatter.Signature(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of AttributedString._AttributeValue(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *outlined consume of URL?(void *result)
{
  if (result)
  {

    swift_release();
    return (void *)swift_release();
  }

  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_182F09890()
{
  return swift_deallocObject();
}

uint64_t sub_182F098B4()
{
  return swift_deallocObject();
}

unint64_t outlined copy of XMLPlistMap.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }

  return result;
}

uint64_t URL.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for FilePath();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v7 = String.init(validating:)();
  if (v8)
  {
    URL.init(fileURLWithPath:)(v7, v8, (uint64_t)&v13);
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    uint64_t v10 = v13;
    __int128 v11 = v14;
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    uint64_t v10 = 0LL;
    __int128 v11 = 0uLL;
  }

  *(void *)a2 = v10;
  *(_OWORD *)(a2 + 8) = v11;
  return result;
}

uint64_t URL.init(_:isDirectory:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for FilePath();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v6);
  uint64_t v9 = String.init(validating:)();
  if (v10)
  {
    URL.init(fileURLWithPath:isDirectory:)(v9, v10, a2 & 1, (uint64_t)&v15);
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v12 = v15;
    __int128 v13 = v16;
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v12 = 0LL;
    __int128 v13 = 0uLL;
  }

  *(void *)a3 = v12;
  *(_OWORD *)(a3 + 8) = v13;
  return result;
}

uint64_t FilePath.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  swift_retain();
  id v6 = v3;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    v43._uint64_t countAndFlagsBits = (uint64_t)v6;
    v43._unint64_t object = v4;
    uint64_t v44 = v5;
    URL.scheme.getter();
    if (!v7)
    {
      swift_release_n();
      swift_release_n();

LABEL_18:
      uint64_t v27 = type metadata accessor for FilePath();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))( a2,  1LL,  1LL,  v27);
    }

    Swift::String v8 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v8._countAndFlagsBits == 1701603686 && v8._object == (void *)0xE400000000000000LL)
    {
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      goto LABEL_7;
    }

    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
LABEL_17:
      swift_release();
      swift_release();
      goto LABEL_18;
    }
  }

  else
  {
    unsigned __int8 v9 = objc_msgSend(v6, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v9 & 1) == 0) {
      goto LABEL_17;
    }
  }

LABEL_7:
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v44 = v5;
    id v10 = v6;
    swift_retain();
    swift_retain();
    Swift::String v11 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v11._countAndFlagsBits;
    Swift::String v43 = v11;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v11._object;
    }

    else
    {
      unint64_t object = (unint64_t)v11._object;
      if ((specialized BidirectionalCollection.last.getter(v11._countAndFlagsBits, (unint64_t)v11._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v43._countAndFlagsBits;
        unint64_t object = (unint64_t)v43._object;
      }
    }

    uint64_t v40 = Set.init(minimumCapacity:)();
    uint64_t v29 = specialized Set._Variant.insert(_:)(&v42, 0x2FuLL);
    uint64_t v30 = v40;
    uint64_t v31 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000LL) == 0) {
      uint64_t v31 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v31)
    {
      id v39 = v10;
      uint64_t v40 = countAndFlagsBits;
      unint64_t v41 = object;
      MEMORY[0x1895F8858](v29);
      v38[2] = &v40;
      v38[3] = v30;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v38,  countAndFlagsBits,  object);
      if (v32 == 1)
      {
        Swift::Int v33 = v40;
        unint64_t v34 = v41;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v33, v34, v30);
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v10 = v39;
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }

  else
  {
    id v14 = objc_msgSend(v6, sel__parameterString);
    if (v14)
    {
      uint64_t v15 = v14;
      id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v18 = v17;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v19 = objc_msgSend(v6, sel_path)) != 0)
      {
        uint64_t v20 = v19;
        id v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        uint64_t v23 = v22;

        v43._uint64_t countAndFlagsBits = (uint64_t)v21;
        v43._unint64_t object = v23;
        swift_bridgeObjectRetain();
        v24._uint64_t countAndFlagsBits = 59LL;
        v24._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v25._uint64_t countAndFlagsBits = (uint64_t)v16;
        v25._unint64_t object = v18;
        String.append(_:)(v25);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }

      else
      {
        v43._uint64_t countAndFlagsBits = 59LL;
        v43._unint64_t object = (void *)0xE100000000000000LL;
        v36._uint64_t countAndFlagsBits = (uint64_t)v16;
        v36._unint64_t object = v18;
        String.append(_:)(v36);
        swift_release();
        swift_release();
      }

      swift_bridgeObjectRelease();
      goto LABEL_33;
    }

    id v35 = objc_msgSend(v6, sel_path);
    if (!v35)
    {
      swift_release();
      swift_release();

      goto LABEL_33;
    }

    id v10 = v35;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    swift_release();
    swift_release();
  }

LABEL_33:
  FilePath.init(_:)();
  uint64_t v37 = type metadata accessor for FilePath();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(a2, 0LL, 1LL, v37);
}

  __break(1u);
  return result;
}

  uint64_t v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v12;
LABEL_8:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  __int128 v13 = *(void *)(a2 + 112);
  if (v13)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v13;
    id v14 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = *(void *)(a2 + 144);
    if (v15) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v20 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v20;
    uint64_t v17 = *(void *)(a2 + 176);
    if (v17) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }

  id v19 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v19;
  uint64_t v15 = *(void *)(a2 + 144);
  if (!v15) {
    goto LABEL_13;
  }
LABEL_10:
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v15;
  id v16 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = *(void *)(a2 + 176);
  if (v17)
  {
LABEL_11:
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = v17;
    uint64_t v18 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }

  _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)v3, v4);
}

  Hasher._combine(_:)(0);
}

  Hasher._combine(_:)(0);
}

    uint64_t v23 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v23 >= v31) {
      goto LABEL_29;
    }
    Swift::String v24 = *(void *)(v30 + 8 * v23);
    ++v6;
    if (!v24)
    {
      id v6 = v23 + 1;
      if (v23 + 1 >= v31) {
        goto LABEL_29;
      }
      Swift::String v24 = *(void *)(v30 + 8 * v6);
      if (!v24)
      {
        id v6 = v23 + 2;
        if (v23 + 2 >= v31) {
          goto LABEL_29;
        }
        Swift::String v24 = *(void *)(v30 + 8 * v6);
        if (!v24)
        {
          id v6 = v23 + 3;
          if (v23 + 3 >= v31) {
            goto LABEL_29;
          }
          Swift::String v24 = *(void *)(v30 + 8 * v6);
          if (!v24) {
            break;
          }
        }
      }
    }

  __break(1u);
  return result;
}

    uint64_t v5 = *(_OWORD *)a2;
    id v6 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v6;
    *(_OWORD *)a1 = v5;
    return a1;
  }

  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }

  uint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }

  uint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v8;
  *(_BYTE *)(a3 + 32) = v9;
  return result;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    *uint64_t v4 = *v6;
    goto LABEL_8;
  }

  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }

  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v7;
  swift_retain();
  swift_release();
LABEL_8:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

    *uint64_t v4 = *v6;
    goto LABEL_8;
  }

  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }

  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v7;
  swift_release();
LABEL_8:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
LABEL_8:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v7);
  swift_bridgeObjectRelease();
  if ((_DWORD)v8 == 14)
  {
    Hasher._combine(_:)(0);
    if ((_DWORD)v9 != 3) {
      goto LABEL_10;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8 + 1);
    if ((_DWORD)v9 != 3)
    {
LABEL_10:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9 + 1);
      if ((_DWORD)v10 != 3) {
        goto LABEL_11;
      }
      goto LABEL_16;
    }
  }

  Hasher._combine(_:)(0);
  if ((_DWORD)v10 != 3)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10 + 1);
    if (v11 != 2) {
      goto LABEL_12;
    }
LABEL_17:
    Hasher._combine(_:)(0);
    if (v12 != 2) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }

  Hasher._combine(_:)(0);
LABEL_8:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v7);
  if ((_DWORD)v8 == 14)
  {
    Hasher._combine(_:)(0);
    if ((_DWORD)v9 != 3) {
      goto LABEL_10;
    }
LABEL_13:
    Hasher._combine(_:)(0);
    if ((_DWORD)v10 != 3) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v8 + 1);
  if ((_DWORD)v9 == 3) {
    goto LABEL_13;
  }
LABEL_10:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v9 + 1);
  if ((_DWORD)v10 != 3)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10 + 1);
    goto LABEL_15;
  }

      uint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
LABEL_8:
      *a1 = result;
      if (v6 <= result >> 14) {
        return result;
      }
    }

    if (v15 <= v17 >> 16)
    {
      __break(1u);
LABEL_40:
      __break(1u);
    }

  __break(1u);
  return result;
}

  Swift::String v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

  __int128 v13 = a4(v9, v10, a3);
  swift_bridgeObjectRelease();
  return v13;
}

  Swift::String v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 & 0x1FFFF;
}

  __break(1u);
  return result;
}

    uint64_t v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v5;
    goto LABEL_8;
  }

  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }

  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
LABEL_8:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

    Swift::String v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v8;
    goto LABEL_8;
  }

  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }

  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
LABEL_8:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    void *v35 = 2;
    goto LABEL_8;
  }

  Swift::String v36 = v88;
  uint64_t v37 = v97;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v16, 0LL, 1LL, v97);
  uint64_t v4 = v84;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v84, v16, v37);
  id v90 = v37;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v89);
  (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(boxed_opaque_existential_1, v4, v37);
  _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
  if (!*((void *)&v92 + 1))
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v37);
    outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
    if (v34) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  int64_t v74 = 0LL;
  outlined init with take of Any(&v91, &v94);
  __swift_project_boxed_opaque_existential_1(&v94, v95);
  unint64_t v41 = _bridgeAnythingToObjectiveC<A>(_:)();
  Swift::UInt v73 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v41);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v37);

LABEL_18:
  int v47 = v83;
  Swift::UInt v48 = v82;
  Swift::UInt64 v49 = v85;
  uint64_t v4 = (char *)&v80[*(int *)(v85 + 64)];
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v81, v4, v83);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
    Swift::UInt v50 = v95;
    uint64_t v51 = v96;
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    Swift::UInt8 v52 = v74;
    uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v77, v50, v51);
    uint64_t v55 = v52;
    if (!v52)
    {
      uint64_t v63 = (id)v53;
      unint64_t v64 = v54;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      if ((v64 & 1) != 0)
      {
        LOBYTE(v94) = 1;
        int64_t v65 = v63;
        unint64_t v66 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        unint64_t v67 = (void *)objc_opt_self();
        Swift::UInt v68 = objc_msgSend(v67, sel_expressionForConstantValue_, v66);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        Swift::UInt v69 = objc_msgSend(v67, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        uint64_t v63 = objc_msgSend(v67, sel_expressionForConditional_trueExpression_falseExpression_, v65, v68, v69);
      }

      goto LABEL_34;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    uint64_t v56 = 0LL;
    uint64_t v57 = v55;
    Swift::UInt64 v49 = v85;
  }

  else
  {
    id v93 = 0LL;
    id v91 = 0u;
    id v92 = 0u;
    outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v57 = 0LL;
    uint64_t v56 = v74;
  }

  *(void *)&id v94 = MEMORY[0x18961AFE8];
  (*(void (**)(__int128 *, uint64_t))(*(void *)(v49 + 40) + 16LL))(&v94, v47);
  if (!v56)
  {
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v48, 0LL, 1LL, v37);
    uint64_t v58 = v76;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v76, v48, v37);
    id v90 = v37;
    Swift::UInt v59 = __swift_allocate_boxed_opaque_existential_1(v89);
    (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(v59, v58, v37);
    _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
    if (!*((void *)&v92 + 1))
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v58, v37);
      outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
      goto LABEL_26;
    }

    outlined init with take of Any(&v91, &v94);
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    int64_t v70 = _bridgeAnythingToObjectiveC<A>(_:)();
    uint64_t v63 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v70);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v58, v37);

LABEL_34:
    unint64_t v71 = objc_allocWithZone((Class)&OBJC_CLASS___NSComparisonPredicate);
    int64_t v72 = v73;
    uint64_t v4 = (char *)objc_msgSend( v71,  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v73,  v63,  0,  v25,  0);

    return v4;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v48, 1LL, 1LL, v37);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v48, v87);
LABEL_26:
  int64_t v60 = v73;
  if (!v57)
  {
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *uint64_t v61 = 2;
  }

  swift_willThrow();

  return v4;
}

    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    uint64_t *v36 = 2;
    goto LABEL_8;
  }

  uint64_t v37 = v86;
  int v38 = v84;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v16, 0LL, 1LL, v84);
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v21, v16, v38);
  id v88 = v38;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v87);
  (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 16))(boxed_opaque_existential_1, v21, v38);
  _expressionCompatibleValue(for:)((uint64_t)v87, (uint64_t)&v89);
  id v35 = v85;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
  if (!*((void *)&v90 + 1))
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v21, v38);
    outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
    if (v33) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  outlined init with take of Any(&v89, &v92);
  __swift_project_boxed_opaque_existential_1(&v92, v93);
  int v47 = v37;
  Swift::UInt v48 = _bridgeAnythingToObjectiveC<A>(_:)();
  uint64_t v40 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v48);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v21, v38);

LABEL_17:
  Swift::UInt64 v49 = v81;
  Swift::UInt v50 = v78;
  uint64_t v51 = v80;
  Swift::UInt8 v52 = v77;
  uint64_t v53 = v76;
  *(void *)(v35 + 32) = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v95 + *(int *)(v51 + 60), v49);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v89, (uint64_t)&v92);
    uint64_t v54 = v93;
    uint64_t v55 = v94;
    __swift_project_boxed_opaque_existential_1(&v92, v93);
    uint64_t v62 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v50, v54, v55);
    unint64_t v64 = v63;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    if ((v64 & 1) != 0)
    {
      LOBYTE(v92) = 1;
      int64_t v65 = v62;
      unint64_t v66 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      unint64_t v67 = (void *)objc_opt_self();
      Swift::UInt v68 = objc_msgSend(v67, sel_expressionForConstantValue_, v66);
      swift_unknownObjectRelease();
      LOBYTE(v92) = 0;
      Swift::UInt v69 = objc_msgSend(v67, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      uint64_t v62 = objc_msgSend(v67, sel_expressionForConditional_trueExpression_falseExpression_, v65, v68, v69);
    }
  }

  else
  {
    id v91 = 0LL;
    id v89 = 0u;
    id v90 = 0u;
    outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(void *)&id v92 = MEMORY[0x18961AFE8];
    uint64_t v56 = v75;
    (*(void (**)(__int128 *, uint64_t))(*(void *)(v51 + 40) + 16LL))(&v92, v49);
    unint64_t v34 = 0LL;
    uint64_t v57 = v86;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v56, 0LL, 1LL, v38);
    uint64_t v58 = v74;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v74, v56, v38);
    id v88 = v38;
    Swift::UInt v59 = __swift_allocate_boxed_opaque_existential_1(v87);
    (*(void (**)(uint64_t *, char *, uint64_t))(v57 + 16))(v59, v58, v38);
    _expressionCompatibleValue(for:)((uint64_t)v87, (uint64_t)&v89);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    if (!*((void *)&v90 + 1))
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v38);
      outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *int64_t v60 = 2;
      swift_willThrow();

      goto LABEL_21;
    }

    outlined init with take of Any(&v89, &v92);
    __swift_project_boxed_opaque_existential_1(&v92, v93);
    int64_t v70 = v57;
    unint64_t v71 = _bridgeAnythingToObjectiveC<A>(_:)();
    uint64_t v62 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v71);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v58, v38);
  }

  *(void *)(v35 + 40) = v62;
  *(void *)&id v92 = v35;
  specialized Array._endMutation()();
  if ((unint64_t)v92 >> 62)
  {
    else {
      int64_t v72 = v92 & 0xFFFFFFFFFFFFFF8LL;
    }
  }

  else
  {
    type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSExpression);
    int64_t v72 = _ContiguousArrayBuffer._asCocoaArray()();
  }

  unint64_t v34 = objc_msgSend((id)objc_opt_self(), sel_expressionForAggregate_, v72);
  swift_unknownObjectRelease();
  return v34;
}

    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    void *v35 = 2;
    goto LABEL_8;
  }

  Swift::String v36 = v93;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v16, 0LL, 1LL, v13);
  uint64_t v37 = v89;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v89, v16, v13);
  id v95 = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v94);
  (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(boxed_opaque_existential_1, v37, v13);
  _expressionCompatibleValue(for:)((uint64_t)v94, (uint64_t)&v96);
  id v102 = 0LL;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
  unint64_t v41 = v34;
  if (!*((void *)&v97 + 1))
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v13);
    outlined destroy of Any?((uint64_t)&v96, &demangling cache variable for type metadata for Any?);
    if (v34) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  outlined init with take of Any(&v96, &v99);
  __swift_project_boxed_opaque_existential_1(&v99, v100);
  char v42 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v91 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v42);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v13);

LABEL_18:
  Swift::UInt v48 = v88;
  Swift::UInt64 v49 = v87;
  Swift::UInt v50 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v84, v86, v85);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v96, (uint64_t)&v99);
    uint64_t v51 = v100;
    Swift::UInt8 v52 = v101;
    __swift_project_boxed_opaque_existential_1(&v99, v100);
    uint64_t v53 = v102;
    uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v92, v51, v52);
    uint64_t v56 = v53;
    if (!v53)
    {
      uint64_t v63 = (id)v54;
      unint64_t v64 = v55;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
      if ((v64 & 1) != 0)
      {
        LOBYTE(v99) = 1;
        int64_t v65 = v63;
        unint64_t v66 = AssociatedTypeWitness;
        unint64_t v67 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        Swift::UInt v68 = (void *)objc_opt_self();
        Swift::UInt v69 = objc_msgSend(v68, sel_expressionForConstantValue_, v67);
        swift_unknownObjectRelease();
        LOBYTE(v99) = 0;
        int64_t v70 = objc_msgSend(v68, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        uint64_t v63 = objc_msgSend(v68, sel_expressionForConditional_trueExpression_falseExpression_, v65, v69, v70);

        AssociatedTypeWitness = v66;
      }

      goto LABEL_34;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
    uint64_t v57 = 0LL;
    unint64_t v34 = v56;
  }

  else
  {
    id v98 = 0LL;
    id v96 = 0u;
    id v97 = 0u;
    outlined destroy of Any?((uint64_t)&v96, &demangling cache variable for type metadata for ConvertibleExpression?);
    unint64_t v34 = 0LL;
    uint64_t v57 = v102;
  }

  *(void *)&id v99 = v26;
  (*(void (**)(__int128 *, uint64_t))(v81 + 16))(&v99, v50);
  if (v57)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v49, 1LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v49, v79);
    if (v34) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }

  (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v49, 0LL, 1LL, AssociatedTypeWitness);
  uint64_t v58 = v80;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v80, v49, AssociatedTypeWitness);
  id v95 = AssociatedTypeWitness;
  Swift::UInt v59 = __swift_allocate_boxed_opaque_existential_1(v94);
  (*(void (**)(uint64_t *, char *, uint64_t))(v48 + 16))(v59, v58, AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)v94, (uint64_t)&v96);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
  if (!*((void *)&v97 + 1))
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v80, AssociatedTypeWitness);
    outlined destroy of Any?((uint64_t)&v96, &demangling cache variable for type metadata for Any?);
    if (v34) {
      goto LABEL_28;
    }
LABEL_27:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *int64_t v60 = 2;
LABEL_28:
    uint64_t v61 = v91;
    swift_willThrow();

    return v34;
  }

  outlined init with take of Any(&v96, &v99);
  __swift_project_boxed_opaque_existential_1(&v99, v100);
  unint64_t v71 = _bridgeAnythingToObjectiveC<A>(_:)();
  uint64_t v63 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v71);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v80, AssociatedTypeWitness);

LABEL_34:
  if (swift_conformsToProtocol2()) {
    int64_t v72 = AssociatedTypeWitness;
  }
  else {
    int64_t v72 = 0LL;
  }
  if (v72) {
    Swift::UInt v73 = 100LL;
  }
  else {
    Swift::UInt v73 = 10LL;
  }
  int64_t v74 = objc_allocWithZone((Class)&OBJC_CLASS___NSComparisonPredicate);
  uint64_t v75 = v91;
  unint64_t v34 = objc_msgSend(v74, sel_initWithLeftExpression_rightExpression_modifier_type_options_, v91, v63, 0, v73, 0);

  return v34;
}

    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *Swift::String v43 = 2;
    goto LABEL_8;
  }

  Swift::UInt8 v45 = v39;
  v172[7](v22, 0LL, 1LL, v19);
  uint64_t v46 = v170;
  ((void (*)(char *, char *, uint64_t))v42[4])(v170, v22, v19);
  *((void *)&v180 + 1) = v19;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v179);
  ((void (*)(uint64_t *, char *, uint64_t))v42[2])(boxed_opaque_existential_1, v46, v19);
  _expressionCompatibleValue(for:)((uint64_t)&v179, (uint64_t)&v182);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
  if (!*((void *)&v183 + 1))
  {
    ((void (*)(char *, uint64_t))v42[1])(v170, v19);
    outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
    if (v45) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  v153[0] = v17;
  outlined init with take of Any(&v182, &v188);
  __swift_project_boxed_opaque_existential_1(&v188, v189);
  uint64_t v55 = _bridgeAnythingToObjectiveC<A>(_:)();
  Swift::UInt v48 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v55);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
  ((void (*)(char *, uint64_t))v42[1])(v170, v19);

LABEL_17:
  uint64_t v57 = v163;
  uint64_t v56 = v164;
  Swift::UInt v59 = v165;
  uint64_t v58 = v166;
  int64_t v60 = *(char **)(v160 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v60)(v159, v165, v166);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v182, (uint64_t)&v188);
    uint64_t v61 = v189;
    uint64_t v62 = v190;
    __swift_project_boxed_opaque_existential_1(&v188, v189);
    Swift::UInt v82 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v171, v61, v62);
    int64_t v84 = v83;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
    if ((v84 & 1) != 0)
    {
      LOBYTE(v188) = 1;
      unint64_t v85 = v82;
      int64_t v86 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      id v87 = (void *)objc_opt_self();
      id v88 = objc_msgSend(v87, sel_expressionForConstantValue_, v86);
      swift_unknownObjectRelease();
      LOBYTE(v188) = 0;
      id v89 = objc_msgSend(v87, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      Swift::UInt v82 = objc_msgSend(v87, sel_expressionForConditional_trueExpression_falseExpression_, v85, v88, v89);
    }

    goto LABEL_37;
  }

  v191 = v60;
  *(void *)&v184 = 0LL;
  v182 = 0u;
  v183 = 0u;
  outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for ConvertibleExpression?);
  *(void *)&v188 = MEMORY[0x18961AFE8];
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v57 + 16))(&v188, v58, v57);
  __int128 v172 = (void (**)(char *, void, uint64_t, uint64_t))v48;
  unint64_t v78 = v161;
  int64_t v79 = v162;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v161 + 56))(v56, 0LL, 1LL, v162);
  unint64_t v80 = v157;
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v157, v56, v79);
  *((void *)&v180 + 1) = v79;
  unint64_t v81 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v179);
  (*(void (**)(uint64_t *, char *, uint64_t))(v78 + 16))(v81, v80, v79);
  _expressionCompatibleValue(for:)((uint64_t)&v179, (uint64_t)&v182);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
  Swift::UInt v48 = v172;
  if (*((void *)&v183 + 1))
  {
    outlined init with take of Any(&v182, &v188);
    __swift_project_boxed_opaque_existential_1(&v188, v189);
    id v101 = _bridgeAnythingToObjectiveC<A>(_:)();
    Swift::UInt v82 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v101);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
    (*(void (**)(char *, uint64_t))(v161 + 8))(v157, v162);

LABEL_37:
    unint64_t v41 = objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v48,  v82,  0,  100,  0);

    return v41;
  }

  (*(void (**)(char *, uint64_t))(v161 + 8))(v157, v162);
  outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
  lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
  uint64_t v63 = (void *)swift_allocError();
  *unint64_t v64 = 2;
  swift_willThrow();

  int64_t v65 = v191;
  ((void (*)(char *, uint64_t, uint64_t))v191)(v158, v59, v58);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RangeOperator);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(void *)&v184 = 0LL;
    v182 = 0u;
    v183 = 0u;
    outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for _RangeOperator?);
    unint64_t v41 = v154;
    ((void (*)(char *, uint64_t, uint64_t))v65)(v154, v59, v58);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RangeValue);
    if (swift_dynamicCast())
    {
      uint64_t v76 = *((void *)&v180 + 1);
      uint64_t v77 = v181;
      unint64_t v41 = __swift_project_boxed_opaque_existential_1(&v179, *((uint64_t *)&v180 + 1));
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v77 + 8))(&v182, v76, v77);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
      if (v187 != 255)
      {
        outlined init with take of AnyRange((uint64_t)&v182, (uint64_t)&v188);
        outlined init with copy of AnyRange((uint64_t)&v188, (uint64_t)&v182);
        __asm { BR              X10 }
      }
    }

    else
    {
      v181 = 0LL;
      v179 = 0u;
      v180 = 0u;
      outlined destroy of Any?((uint64_t)&v179, &demangling cache variable for type metadata for _RangeValue?);
      v182 = 0u;
      v183 = 0u;
      v184 = 0u;
      v185 = 0u;
      v186 = 0u;
      v187 = -1;
    }

    outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for AnyRange?);
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *id v100 = 2;
    swift_willThrow();

    return v41;
  }

  __int128 v172 = (void (**)(char *, void, uint64_t, uint64_t))v48;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v182, (uint64_t)&v188);
  unint64_t v66 = v189;
  unint64_t v67 = v190;
  __swift_project_boxed_opaque_existential_1(&v188, v189);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v67 + 8))(&v182, v66, v67);
  Swift::UInt v69 = *((void *)&v183 + 1);
  Swift::UInt v68 = v184;
  int64_t v70 = __swift_project_boxed_opaque_existential_1(&v182, *((uint64_t *)&v183 + 1));
  unint64_t v71 = MEMORY[0x1895F8858](v70);
  (*(void (**)(char *, void *, uint64_t, __n128))(v73 + 16))( (char *)v153 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v70,  v69,  v71);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v176, (uint64_t)&v179);
    int64_t v74 = *((void *)&v180 + 1);
    uint64_t v75 = v181;
    __swift_project_boxed_opaque_existential_1(&v179, *((uint64_t *)&v180 + 1));
    id v104 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v171, v74, v75);
    uint64_t v106 = v105;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
    if ((v106 & 1) != 0)
    {
      LOBYTE(v179) = 1;
      Swift::UInt v108 = v104;
      Swift::UInt8 v109 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      Swift::UInt8 v110 = (void *)objc_opt_self();
      Swift::UInt8 v111 = objc_msgSend(v110, sel_expressionForConstantValue_, v109);
      swift_unknownObjectRelease();
      LOBYTE(v179) = 0;
      Swift::Int v112 = objc_msgSend(v110, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      __int128 v169 = objc_msgSend(v110, sel_expressionForConditional_trueExpression_falseExpression_, v108, v111, v112);
    }

    else
    {
      __int128 v169 = v104;
    }

    goto LABEL_46;
  }

  v178 = 0LL;
  v176 = 0u;
  v177 = 0u;
  outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for ConvertibleExpression?);
  v191 = 0LL;
  __int128 v169 = 0LL;
  id v90 = swift_getAssociatedTypeWitness();
  __int128 v173 = v153;
  id v91 = *(void *)(v90 - 8);
  MEMORY[0x1895F8858](v90);
  __int128 v168 = (void (**)(char *, id))((char *)v153 - v92);
  id v93 = type metadata accessor for Optional();
  uint64_t v170 = (char *)v153;
  id v94 = *(void *)(v93 - 8);
  id v95 = MEMORY[0x1895F8858](v93);
  id v97 = (char *)v153 - v96;
  *(void *)&v179 = MEMORY[0x18961AFE8];
  id v98 = v169;
  (*(void (**)(__int128 *, uint64_t, uint64_t, __n128))(v68 + 16))(&v179, v69, v68, v95);
  if (v98)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56))(v97, 1LL, 1LL, v90);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v97, v93);
    unint64_t v41 = v172;
    if (v191)
    {
LABEL_32:
      swift_willThrow();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
      return v41;
    }

      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      void *v35 = 2;
      goto LABEL_8;
    }

    Swift::String v36 = v131;
    v131[7](v18, 0LL, 1LL, v14);
    uint64_t v37 = v130;
    ((void (*)(char *, char *, uint64_t))v36[4])(v130, v18, v14);
    uint64_t v134 = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v133);
    ((void (*)(uint64_t *, char *, uint64_t))v36[2])(boxed_opaque_existential_1, v37, v14);
    _expressionCompatibleValue(for:)((uint64_t)v133, (uint64_t)&v135);
    uint64_t v132 = 0LL;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
    if (!*((void *)&v136 + 1))
    {
      ((void (*)(char *, uint64_t))v36[1])(v37, v14);
      outlined destroy of Any?((uint64_t)&v135, &demangling cache variable for type metadata for Any?);
      if (v33) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }

    outlined init with take of Any(&v135, &v138);
    __swift_project_boxed_opaque_existential_1(&v138, v139);
    Swift::UInt v48 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v39 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v48);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
    ((void (*)(char *, uint64_t))v36[1])(v37, v14);

    int v47 = v128;
    uint64_t v46 = v129;
    goto LABEL_17;
  }

  id v39 = (id)v31;
  uint64_t v40 = v32;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
  uint64_t v132 = 0LL;
  if ((v40 & 1) != 0)
  {
    LOBYTE(v138) = 1;
    unint64_t v41 = v39;
    char v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    Swift::String v43 = (void *)objc_opt_self();
    uint64_t v44 = objc_msgSend(v43, sel_expressionForConstantValue_, v42);
    swift_unknownObjectRelease();
    LOBYTE(v138) = 0;
    Swift::UInt8 v45 = objc_msgSend(v43, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    id v39 = objc_msgSend(v43, sel_expressionForConditional_trueExpression_falseExpression_, v41, v44, v45);
  }

  int v47 = v128;
  uint64_t v46 = v129;
  Swift::String v11 = v117;
LABEL_17:
  Swift::UInt64 v49 = v141;
  Swift::UInt v50 = *(char **)&v11[*((int *)v141 + 18)];
  uint64_t v51 = (char *)v39;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&uint64_t v138 = *(void *)(v47 + 8);
  uint64_t v53 = v138;
  *(void *)(v47 + 8) = 0x8000000000000000LL;
  __int128 v131 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v50;
  uint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
  uint64_t v56 = *(void *)(v53 + 16);
  uint64_t v57 = (v54 & 1) == 0;
  uint64_t v58 = v56 + v57;
  if (__OFADD__(v56, v57))
  {
    __break(1u);
  }

  else
  {
    if (*(void *)(v53 + 24) < v58)
    {
      Swift::UInt v59 = v54;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v58,  isUniquelyReferenced_nonNull_native);
      int64_t v60 = v138;
      uint64_t v61 = (uint64_t)v131;
      uint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(v131);
      if ((v59 & 1) != (v63 & 1)) {
        goto LABEL_82;
      }
      uint64_t v55 = v62;
      Swift::UInt v50 = v51;
      if ((v59 & 1) != 0) {
        goto LABEL_21;
      }
LABEL_24:
      specialized _NativeDictionary._insert(at:key:value:)(v55, v61, (uint64_t)v50, (void *)v60);
LABEL_25:
      unint64_t v67 = v127;
      *(void *)(v47 + 8) = v60;

      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v67, &v11[*((int *)v49 + 17)], v46);
      if (swift_dynamicCast())
      {
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v135, (uint64_t)&v138);
        Swift::UInt v68 = v139;
        Swift::UInt v69 = v140;
        __swift_project_boxed_opaque_existential_1(&v138, v139);
        int64_t v70 = v132;
        unint64_t v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v47, v68, v69);
        Swift::UInt v73 = v70;
        if (!v70)
        {
          Swift::UInt v82 = (id)v71;
          Swift::UInt v83 = v72;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
          if ((v83 & 1) != 0)
          {
            LOBYTE(v138) = 1;
            int64_t v84 = v82;
            unint64_t v85 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
            int64_t v86 = (void *)objc_opt_self();
            id v87 = objc_msgSend(v86, sel_expressionForConstantValue_, v85);
            swift_unknownObjectRelease();
            LOBYTE(v138) = 0;
            id v88 = objc_msgSend(v86, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
            swift_unknownObjectRelease();
            Swift::UInt v82 = objc_msgSend(v86, sel_expressionForConditional_trueExpression_falseExpression_, v84, v87, v88);
          }

          goto LABEL_41;
        }

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
        int64_t v74 = 0LL;
        Swift::String v11 = v73;
      }

      else
      {
        uint64_t v137 = 0LL;
        int v135 = 0u;
        uint64_t v136 = 0u;
        outlined destroy of Any?( (uint64_t)&v135,  &demangling cache variable for type metadata for ConvertibleExpression?);
        Swift::String v11 = 0LL;
        int64_t v74 = v132;
      }

      *(void *)&uint64_t v138 = MEMORY[0x18961AFE8];
      uint64_t v75 = v122;
      (*(void (**)(__int128 *, uint64_t))(v121 + 16))(&v138, v46);
      if (v74)
      {

        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v123 + 56))(v75, 1LL, 1LL, v124);
        (*(void (**)(char *, uint64_t))(v118 + 8))(v75, v119);
        if (v11) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }

      uint64_t v76 = v123;
      uint64_t v77 = v124;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v75, 0LL, 1LL, v124);
      unint64_t v78 = v120;
      (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v120, v75, v77);
      uint64_t v134 = v77;
      int64_t v79 = __swift_allocate_boxed_opaque_existential_1(v133);
      (*(void (**)(uint64_t *, char *, uint64_t))(v76 + 16))(v79, v78, v77);
      _expressionCompatibleValue(for:)((uint64_t)v133, (uint64_t)&v135);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
      if (!*((void *)&v136 + 1))
      {
        (*(void (**)(char *, uint64_t))(v76 + 8))(v120, v77);
        outlined destroy of Any?((uint64_t)&v135, &demangling cache variable for type metadata for Any?);
        if (v11) {
          goto LABEL_35;
        }
LABEL_34:
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *unint64_t v80 = 2;
LABEL_35:
        swift_willThrow();

        return (uint64_t)v11;
      }

      outlined init with take of Any(&v135, &v138);
      __swift_project_boxed_opaque_existential_1(&v138, v139);
      id v89 = v76;
      id v90 = _bridgeAnythingToObjectiveC<A>(_:)();
      Swift::UInt v82 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v90);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v120, v77);

LABEL_41:
      id v91 = (void *)objc_opt_self();
      id v92 = v50;
      id v93 = objc_msgSend(v91, sel_expressionForConstantValue_, 0);
      id v94 = objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v92,  v93,  0,  5,  0);

      id v95 = v94;
      id v96 = objc_msgSend(v91, sel_expressionForConstantValue_, 0);
      Swift::String v11 = (char *)objc_msgSend(v91, sel_expressionForConditional_trueExpression_falseExpression_, v95, v82, v96);

      return (uint64_t)v11;
    }

    Swift::UInt v50 = v51;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      int64_t v60 = v53;
      uint64_t v61 = (uint64_t)v131;
      if ((v54 & 1) == 0) {
        goto LABEL_24;
      }
LABEL_21:
      unint64_t v64 = *(void *)(v60 + 56);
      int64_t v65 = v11;
      unint64_t v66 = 8 * v55;

      *(void *)(v64 + v66) = v50;
      Swift::String v11 = v65;
      goto LABEL_25;
    }
  }

  char v116 = v55;
  LODWORD(v117) = v54;
  __int128 v130 = v50;
  id v97 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  id v98 = static _DictionaryStorage.copy(original:)();
  int64_t v60 = v98;
  if (!*(void *)(v53 + 16))
  {
LABEL_78:
    swift_bridgeObjectRelease();
    Swift::String v11 = v97;
    Swift::UInt64 v49 = v141;
    uint64_t v46 = v129;
    Swift::UInt v50 = v130;
    uint64_t v61 = (uint64_t)v131;
    uint64_t v55 = v116;
    goto LABEL_21;
  }

  id v99 = (void *)(v98 + 64);
  id v100 = v53 + 64;
  id v101 = (unint64_t)((1LL << *(_BYTE *)(v60 + 32)) + 63) >> 6;
  id v102 = 0LL;
  *(void *)(v60 + 16) = *(void *)(v53 + 16);
  id v103 = 1LL << *(_BYTE *)(v53 + 32);
  id v104 = -1LL;
  if (v103 < 64) {
    id v104 = ~(-1LL << v103);
  }
  uint64_t v105 = v104 & *(void *)(v53 + 64);
  uint64_t v106 = (unint64_t)(v103 + 63) >> 6;
  while (1)
  {
    if (v105)
    {
      Swift::UInt v107 = __clz(__rbit64(v105));
      v105 &= v105 - 1;
      Swift::UInt v108 = v107 | (v102 << 6);
      goto LABEL_51;
    }

    if (__OFADD__(v102++, 1LL))
    {
      __break(1u);
      goto LABEL_81;
    }

    if (v102 >= v106) {
      goto LABEL_78;
    }
    uint64_t v113 = *(void *)(v100 + 8 * v102);
    if (!v113) {
      break;
    }
LABEL_73:
    uint64_t v105 = (v113 - 1) & v113;
    Swift::UInt v108 = __clz(__rbit64(v113)) + (v102 << 6);
LABEL_51:
    Swift::UInt8 v109 = 8 * v108;
    Swift::UInt8 v110 = *(void **)(*(void *)(v53 + 56) + v109);
    *(void *)(*(void *)(v60 + 48) + v109) = *(void *)(*(void *)(v53 + 48) + v109);
    *(void *)(*(void *)(v60 + 56) + v109) = v110;
    Swift::UInt8 v111 = v110;
  }

  unint64_t v114 = v102 + 1;
  if (v102 + 1 >= v106) {
    goto LABEL_78;
  }
  uint64_t v113 = *(void *)(v100 + 8 * v114);
  if (v113) {
    goto LABEL_72;
  }
  unint64_t v114 = v102 + 2;
  if (v102 + 2 >= v106) {
    goto LABEL_78;
  }
  uint64_t v113 = *(void *)(v100 + 8 * v114);
  if (v113) {
    goto LABEL_72;
  }
  unint64_t v114 = v102 + 3;
  if (v102 + 3 >= v106) {
    goto LABEL_78;
  }
  uint64_t v113 = *(void *)(v100 + 8 * v114);
  if (v113) {
    goto LABEL_72;
  }
  unint64_t v114 = v102 + 4;
  if (v102 + 4 >= v106) {
    goto LABEL_78;
  }
  uint64_t v113 = *(void *)(v100 + 8 * v114);
  if (v113) {
    goto LABEL_72;
  }
  unint64_t v114 = v102 + 5;
  if (v102 + 5 >= v106) {
    goto LABEL_78;
  }
  uint64_t v113 = *(void *)(v100 + 8 * v114);
  if (v113) {
    goto LABEL_72;
  }
  unint64_t v114 = v102 + 6;
  if (v102 + 6 >= v106) {
    goto LABEL_78;
  }
  uint64_t v113 = *(void *)(v100 + 8 * v114);
  if (v113) {
    goto LABEL_72;
  }
  unint64_t v114 = v102 + 7;
  if (v102 + 7 >= v106) {
    goto LABEL_78;
  }
  uint64_t v113 = *(void *)(v100 + 8 * v114);
  if (v113) {
    goto LABEL_72;
  }
  unint64_t v114 = v102 + 8;
  if (v102 + 8 >= v106) {
    goto LABEL_78;
  }
  uint64_t v113 = *(void *)(v100 + 8 * v114);
  if (v113)
  {
LABEL_72:
    id v102 = v114;
    goto LABEL_73;
  }

  while (1)
  {
    id v102 = v114 + 1;
    if (__OFADD__(v114, 1LL)) {
      break;
    }
    if (v102 >= v106) {
      goto LABEL_78;
    }
    uint64_t v113 = *(void *)(v100 + 8 * v102);
    ++v114;
    if (v113) {
      goto LABEL_73;
    }
  }

    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    void *v38 = 2;
    goto LABEL_8;
  }

  id v39 = v90;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v19, 0LL, 1LL, v16);
  uint64_t v40 = v87;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v87, v19, v16);
  id v93 = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v92._countAndFlagsBits);
  (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 16))(boxed_opaque_existential_1, v40, v16);
  _expressionCompatibleValue(for:)((uint64_t)&v92, (uint64_t)&v94);
  uint64_t v37 = (char *)v9;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
  if (!*((void *)&v95 + 1))
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v16);
    outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for Any?);
    if (v35) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  uint64_t v75 = v9;
  outlined init with take of Any(&v94, &v97);
  __swift_project_boxed_opaque_existential_1(&v97, v98);
  uint64_t v44 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v91 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v44);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v16);

  Swift::UInt8 v45 = v85;
  uint64_t v46 = v84;
  int v47 = v86;
LABEL_18:
  uint64_t v53 = v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v81, v100 + *((int *)v82 + 17), v46);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v94, (uint64_t)&v97);
    uint64_t v54 = v98;
    uint64_t v55 = v99;
    __swift_project_boxed_opaque_existential_1(&v97, v98);
    int64_t v60 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v53, v54, v55);
    uint64_t v62 = v61;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
    if ((v62 & 1) != 0)
    {
      LOBYTE(v97) = 1;
      uint64_t v63 = v60;
      unint64_t v64 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      int64_t v65 = (void *)objc_opt_self();
      unint64_t v66 = objc_msgSend(v65, sel_expressionForConstantValue_, v64);
      swift_unknownObjectRelease();
      LOBYTE(v97) = 0;
      unint64_t v67 = objc_msgSend(v65, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      int64_t v60 = objc_msgSend(v65, sel_expressionForConditional_trueExpression_falseExpression_, v63, v66, v67);
    }

    Swift::UInt v68 = v91;
  }

  else
  {
    id v96 = 0LL;
    id v94 = 0u;
    id v95 = 0u;
    outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(void *)&id v97 = MEMORY[0x18961AFE8];
    (*(void (**)(__int128 *, uint64_t))(v78 + 16))(&v97, v46);
    uint64_t v56 = (void (**)(char *, char *, uint64_t))v75;
    (*((void (**)(char *, void, uint64_t, uint64_t))v75 + 7))(v45, 0LL, 1LL, v47);
    uint64_t v37 = v74;
    v56[4](v74, v45, v47);
    id v93 = v47;
    uint64_t v57 = __swift_allocate_boxed_opaque_existential_1(&v92._countAndFlagsBits);
    v56[2]((char *)v57, v37, v47);
    _expressionCompatibleValue(for:)((uint64_t)&v92, (uint64_t)&v94);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    Swift::UInt v68 = v91;
    if (!*((void *)&v95 + 1))
    {
      ((void (*)(char *, uint64_t))v56[1])(v37, v47);
      outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for Any?);
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *uint64_t v58 = 2;
      swift_willThrow();

      return v37;
    }

    outlined init with take of Any(&v94, &v97);
    __swift_project_boxed_opaque_existential_1(&v97, v98);
    Swift::UInt v69 = v37;
    int64_t v70 = _bridgeAnythingToObjectiveC<A>(_:)();
    int64_t v60 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v70);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
    ((void (*)(char *, uint64_t))v56[1])(v69, v47);
  }

  if (objc_msgSend(v60, sel_constantValue))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    id v94 = 0u;
    id v95 = 0u;
  }

  outlined init with take of Any?((uint64_t)&v94, (uint64_t)&v97);
  if (v98)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      *(void *)&id v97 = 10798LL;
      *((void *)&v97 + 1) = 0xE200000000000000LL;
      String.append(_:)(v92);
      swift_bridgeObjectRelease();
      v71._uint64_t countAndFlagsBits = 10798LL;
      v71._unint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v71);
      int64_t v72 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      Swift::UInt v73 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v72);

      swift_unknownObjectRelease();
      int64_t v60 = v73;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v97, &demangling cache variable for type metadata for Any?);
  }

  uint64_t v37 = (char *)objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v68,  v60,  0,  6,  0);

  return v37;
}

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t v5 = MEMORY[0x186E1ACC8](v3);
  if (v2 <= v5) {
    id v6 = v5;
  }
  else {
    id v6 = v2;
  }
  uint64_t v4 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v1, v6, 0, v2);
LABEL_11:
  uint64_t result = swift_release();
  *v0 = v4;
  return result;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }

  uint64_t v5 = a2[1];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  swift_retain();
  swift_release();
LABEL_8:
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }

  uint64_t v5 = a2[1];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  swift_release();
LABEL_8:
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease();
  type metadata accessor for NSUUID();
  v8._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 544175136LL;
  v9._unint64_t object = (void *)0xE400000000000000LL;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 1145656661LL;
  v10._unint64_t object = (void *)0xE400000000000000LL;
  String.append(_:)(v10);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

        unsigned __int8 v9 = result;
        id v10 = v8;
        specialized RangeReplaceableCollection.removeFirst(_:)(1LL);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v9, v10);
      }

  if ((v17 & 0x2000000000000000LL) != 0) {
    isStackAllocationSafe = HIBYTE(v17) & 0xF;
  }
  else {
    isStackAllocationSafe = v16 & 0xFFFFFFFFFFFFLL;
  }
LABEL_10:
  id v19 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    JUMPOUT(0x1832CA3B8LL);
  }

  if (v19 < -1)
  {
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
    goto LABEL_347;
  }

  uint64_t v20 = v19 + 1;
  if (v19 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    unint64_t v22 = (char *)&v406 - v21;
    uint64_t v23 = (unint64_t)v415;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v22, v20, 1, v16, v23);
    Swift::String v25 = v24;
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      uint64_t v31 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      uint64_t v32 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      Swift::Int v33 = objc_msgSend(v31, sel_initWithDomain_code_userInfo_, v32, 514, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v34 = objc_msgSend(v33, sel_domain);
      id v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      if (v35 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v37 == v38)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        uint64_t v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v61 & 1) == 0)
        {
LABEL_347:
          __break(1u);
          goto LABEL_348;
        }
      }

      swift_willThrow();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }

    if ((v416 & 2) != 0) {
      char v26 = 3585;
    }
    else {
      char v26 = 1537;
    }
    LODWORD(v416) = _NSOpenFileDescriptor_Protected(v22, v26, v416, 438LL);
    if ((v416 & 0x80000000) == 0)
    {
      v408 = &v406;
      if ((v410 & 1) != 0
        && (uint64_t v27 = (void *)objc_opt_self(),
            int64_t v28 = objc_msgSend(v27, sel_currentProgress),
            v28,
            v28))
      {
        if (v411) {
          uint64_t v29 = &v412[-v411];
        }
        else {
          uint64_t v29 = 0LL;
        }
        uint64_t v30 = objc_msgSend(v27, sel_progressWithTotalUnitCount_, v29);
      }

      else
      {
        uint64_t v30 = 0LL;
      }

      v421._uint64_t countAndFlagsBits = (uint64_t)v6;
      v421._unint64_t object = (void *)v7;
      v422 = v8;
      v423 = (char)v413;
      uint64_t v62 = (char *)v414;
      uint64_t v63 = write(buffer:toFileDescriptor:path:parentProgress:)(v411, (uint64_t)v412, v416, (uint64_t)&v421, v30);
      unint64_t v64 = v62;
      if (v62)
      {
        int64_t v65 = MEMORY[0x186E1B0E8](v63);
        if (v30 && objc_msgSend(v30, sel_isCancelled))
        {
          unlink(v22);
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          unint64_t v66 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          unint64_t v67 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          Swift::UInt v68 = objc_msgSend(v66, sel_initWithDomain_code_userInfo_, v67, 3072, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          Swift::UInt v69 = objc_msgSend(v68, sel_domain);
          int64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
          int64_t v72 = v71;

          if (v70 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v72 == v73)
          {
            swift_bridgeObjectRelease_n();
          }

          else
          {
            __int128 v171 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v171 & 1) == 0) {
              goto LABEL_352;
            }
          }

          swift_willThrow();

          close(v416);
          swift_willThrow();
          return swift_bridgeObjectRelease();
        }

        v407 = v30;
        if ((v413 & 1) != 0)
        {
          CocoaError.Code.init(fileErrno:reading:)(v65, 0);
          id v94 = v420;
          swift_retain_n();
          id v95 = v6;
          swift_retain_n();
          id v96 = v95;
          v406 = v8;
          v412 = v64;
          v414 = v94;
          if (v65 == 102)
          {
            id v97 = 0LL;
            goto LABEL_160;
          }

          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            __int128 v152 = (int)POSIXErrorCode.rawValue.getter();
            __int128 v153 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
            __int128 v154 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v97 = objc_msgSend(v153, sel_initWithDomain_code_userInfo_, v154, v152, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v155 = objc_msgSend(v97, sel_domain);
            v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
            uint64_t v158 = v157;

            if (v156 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v158 == v159)
            {
              swift_bridgeObjectRelease_n();
              Swift::String v8 = v406;
            }

            else
            {
              __int128 v174 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              Swift::String v8 = v406;
              if ((v174 & 1) == 0) {
                goto LABEL_353;
              }
            }

  v16.value = value;
  return v16.value;
}

  closure #1 in _XMLPlistEncodingFormat.Writer.appendEscaped(_:)(v5, v6, a2);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  outlined init with copy of Any((uint64_t)v4, (uint64_t)v102);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    id v91 = v3;
    id v93 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    Swift::String v8 = v103;
    uint64_t v7 = v104;
    unsigned __int8 v9 = __swift_project_boxed_opaque_existential_1(v102, v103);
    id v95 = v89;
    id v10 = *(void *)(v8 - 8);
    Swift::String v11 = *(void *)(v10 + 64);
    uint64_t v12 = MEMORY[0x1895F8858](v9);
    __int128 v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    id v14 = *(void (**)(char *, __n128))(v10 + 16);
    v14((char *)v89 - v13, v12);
    uint64_t v15 = *(void *)(v7 + 8);
    id v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v17 = v16;
    id v94 = v89;
    uint64_t v18 = MEMORY[0x1895F8858](v16);
    uint64_t v105 = (void (*)(char *, char *, uint64_t, __n128))v14;
    ((void (*)(char *, char *, uint64_t, __n128))v14)((char *)v89 - v13, (char *)v89 - v13, v8, v18);
    id v97 = (char *)v89 - v13;
    id v19 = v15;
    uint64_t v20 = (v17 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
    Swift::Int v33 = v32((char *)v89 - v13, v8);
    unint64_t v34 = MEMORY[0x1895F8858](v33);
    id v35 = (char *)v89 - v13;
    v105((char *)v89 - v13, v97, v8, v34);
    id v96 = v89;
    if (v20)
    {
      *(void *)&id v98 = 0x8000000000000000LL;
      Swift::String v36 = v19;
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      {
        uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v37 < 64)
        {
LABEL_48:
          Swift::UInt v68 = dispatch thunk of BinaryInteger._lowWord.getter();
          uint64_t v51 = v32;
          v32(v35, v8);
          Swift::UInt8 v52 = v97;
LABEL_26:
          uint64_t v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
          uint64_t v54 = MEMORY[0x1895F8858](v53);
          v105((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v52, v8, v54);
          id v92 = v89;
          if (v53 < 65)
          {
            uint64_t v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
            uint64_t v55 = v51((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
            if (v57 == 64)
            {
              uint64_t v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
              uint64_t v56 = v55 ^ 1;
            }

            else
            {
              uint64_t v56 = 0;
            }
          }

          else
          {
            uint64_t v55 = v51((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
            uint64_t v56 = 1;
          }

          uint64_t v62 = MEMORY[0x1895F8858](v55);
          uint64_t v63 = (char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          v105(v63, v52, v8, v62);
          if ((v56 & 1) == 0)
          {
            v51((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
            goto LABEL_45;
          }

          unint64_t v64 = v51;
          *(void *)&id v98 = 0x7FFFFFFFFFFFFFFFLL;
          int64_t v65 = dispatch thunk of static BinaryInteger.isSigned.getter();
          unint64_t v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if ((v65 & 1) != 0)
          {
            if (v66 > 64)
            {
              MEMORY[0x1895F8858](v66);
              lazy protocol witness table accessor for type Int and conformance Int();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              unint64_t v67 = dispatch thunk of static Comparable.< infix(_:_:)();
              uint64_t v51 = v64;
              v64((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
              v64(v63, v8);
              Swift::UInt8 v52 = v97;
              goto LABEL_50;
            }
          }

          else if (v66 >= 64)
          {
            uint64_t v105 = (void (*)(char *, char *, uint64_t, __n128))v89;
            v101[0] = 0x7FFFFFFFFFFFFFFFLL;
            MEMORY[0x1895F8858](v66);
            lazy protocol witness table accessor for type Int and conformance Int();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            unint64_t v67 = dispatch thunk of static Comparable.< infix(_:_:)();
            uint64_t v51 = v64;
            v64(v63, v8);
            v64((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
LABEL_50:
            if ((v67 & 1) != 0) {
              goto LABEL_55;
            }
LABEL_45:
            uint64_t v4 = (__int128 *)dispatch thunk of BinaryInteger._lowWord.getter();
            v51(v52, v8);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
            return v4;
          }

          dispatch thunk of BinaryInteger._lowWord.getter();
          uint64_t v51 = v64;
          v64((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
          goto LABEL_45;
        }

        goto LABEL_33;
      }

      uint64_t v58 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v58 & 1) != 0)
      {
        if (v37 <= 64)
        {
          id v90 = *(void *)(*(void *)(v19 + 24) + 16LL);
          AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          id v92 = v89;
          MEMORY[0x1895F8858](AssociatedTypeWitness);
          v89[0] = (char *)v89 - v70;
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          int64_t v72 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
          v89[1] = v89;
          MEMORY[0x1895F8858](v72);
          Swift::UInt v73 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
          dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
          id v90 = v36;
          int64_t v74 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v51 = v32;
          uint64_t v75 = v32((char *)v89 - v73, v8);
          uint64_t v76 = MEMORY[0x1895F8858](v75);
          uint64_t v77 = (char *)v89 - v73;
          (*(void (**)(char *, char *, uint64_t, __n128))(v10 + 32))((char *)v89 - v73, v35, v8, v76);
          Swift::UInt8 v52 = v97;
          if ((v74 & 1) != 0)
          {
            v32(v77, v8);
          }

          else
          {
            unint64_t v78 = v98;
            int64_t v79 = dispatch thunk of BinaryInteger._lowWord.getter();
            v32(v77, v8);
            if (v79 >= v78) {
              goto LABEL_26;
            }
          }

  outlined init with copy of Any((uint64_t)v4, (uint64_t)v87);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    int64_t v79 = v3;
    unint64_t v80 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    Swift::String v8 = v88;
    uint64_t v7 = v89;
    unsigned __int8 v9 = __swift_project_boxed_opaque_existential_1(v87, v88);
    id v90 = &v73;
    id v10 = *(void **)(v8 - 8);
    Swift::String v11 = v10[8];
    uint64_t v12 = MEMORY[0x1895F8858](v9);
    __int128 v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    id v14 = (char *)&v73 - v13;
    uint64_t v15 = (void (*)(char *, __n128))v10[2];
    v15((char *)&v73 - v13, v12);
    id v16 = *(void *)(v7 + 8);
    uint64_t v17 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v7) = v17;
    Swift::UInt v82 = &v73;
    uint64_t v18 = MEMORY[0x1895F8858](v17);
    ((void (*)(char *, char *, uint64_t, __n128))v15)((char *)&v73 - v13, (char *)&v73 - v13, v8, v18);
    unint64_t v81 = v10;
    if ((v7 & 1) != 0)
    {
      unint64_t v78 = (char *)&v73 - v13;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v77 = &v73;
      MEMORY[0x1895F8858](AssociatedTypeWitness);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      id v21 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
      uint64_t v76 = &v73;
      MEMORY[0x1895F8858](v21);
      unint64_t v22 = v81;
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      LOBYTE(AssociatedTypeWitness) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v23 = (void (*)(char *, uint64_t))v22[1];
      v23((char *)&v73 - v13, v8);
      v23((char *)&v73 - v13, v8);
      if ((AssociatedTypeWitness & 1) != 0)
      {
        v23(v78, v8);
LABEL_37:
        unint64_t v64 = type metadata accessor for DecodingError();
        swift_allocError();
        unint64_t v66 = v65;
        *(void *)&Swift::UInt v83 = 0LL;
        *((void *)&v83 + 1) = 0xE000000000000000LL;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52LL);
        v67._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v67._unint64_t object = (void *)0x80000001839D13E0LL;
        String.append(_:)(v67);
        __swift_project_boxed_opaque_existential_1(v87, v88);
        v68._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v4 = &v83;
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v69._unint64_t object = (void *)0x80000001839D1400LL;
        v69._uint64_t countAndFlagsBits = 0xD000000000000012LL;
        String.append(_:)(v69);
        v70._uint64_t countAndFlagsBits = 1953384789LL;
        v70._unint64_t object = (void *)0xE400000000000000LL;
        String.append(_:)(v70);
        v71._uint64_t countAndFlagsBits = 46LL;
        v71._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v71);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v64 - 8) + 104LL))( v66,  *MEMORY[0x189619360],  v64);
        goto LABEL_38;
      }

      id v14 = v78;
    }

    else
    {
      uint64_t v23 = (void (*)(char *, uint64_t))v10[1];
      v23((char *)&v73 - v13, v8);
    }

    Swift::UInt v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
    Swift::UInt64 v49 = MEMORY[0x1895F8858](v48);
    ((void (*)(char *, char *, uint64_t, __n128))v15)( (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v14,  v8,  v49);
    if (v48 <= 63)
    {
      v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
LABEL_24:
      uint64_t v4 = (__int128 *)dispatch thunk of BinaryInteger._lowWord.getter();
      v23(v14, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return v4;
    }

    uint64_t v77 = &v73;
    *(void *)&Swift::UInt v83 = -1LL;
    Swift::UInt v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v50 & 1) != 0)
    {
      if (v51 <= 64)
      {
        unint64_t v78 = v14;
        uint64_t v75 = v16;
        int64_t v74 = *(void *)(*(void *)(v16 + 24) + 16LL);
        Swift::UInt8 v52 = swift_getAssociatedTypeWitness();
        uint64_t v76 = &v73;
        MEMORY[0x1895F8858](v52);
        uint64_t v53 = swift_getAssociatedConformanceWitness();
        uint64_t v54 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v52, v53);
        Swift::UInt v73 = (uint64_t)&v73;
        MEMORY[0x1895F8858](v54);
        uint64_t v55 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
        LODWORD(v74) = dispatch thunk of static Comparable.> infix(_:_:)();
        uint64_t v56 = ((uint64_t (*)(char *, uint64_t))v23)((char *)&v73 - v55, v8);
        uint64_t v76 = (uint64_t *)v83;
        uint64_t v57 = MEMORY[0x1895F8858](v56);
        ((void (*)(char *, char *, uint64_t, __n128))v81[4])((char *)&v73 - v55, (char *)&v73 - v55, v8, v57);
        if ((v74 & 1) == 0)
        {
          v23((char *)&v73 - v55, v8);
          id v14 = v78;
          goto LABEL_24;
        }

        uint64_t v58 = dispatch thunk of BinaryInteger._lowWord.getter();
        v23((char *)&v73 - v55, v8);
        Swift::UInt v59 = (unint64_t)v76 >= v58;
        id v14 = v78;
LABEL_35:
        if (v59) {
          goto LABEL_24;
        }
        goto LABEL_36;
      }
    }

    else if (v51 <= 64)
    {
      uint64_t v63 = dispatch thunk of BinaryInteger._lowWord.getter();
      v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
      Swift::UInt v59 = (unint64_t)v83 >= v63;
      goto LABEL_35;
    }

    MEMORY[0x1895F8858](v51);
    lazy protocol witness table accessor for type UInt and conformance UInt();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v62 = dispatch thunk of static Comparable.< infix(_:_:)();
    v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
    v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
    if ((v62 & 1) == 0) {
      goto LABEL_24;
    }
LABEL_36:
    v23(v14, v8);
    goto LABEL_37;
  }

  unint64_t v85 = 0LL;
  Swift::UInt v83 = 0u;
  int64_t v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    Swift::String v24 = __swift_project_boxed_opaque_existential_1(v87, v88);
    Swift::String v25 = MEMORY[0x1895F8858](v24);
    (*(void (**)(char *, __n128))(v27 + 16))((char *)&v73 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL), v25);
    lazy protocol witness table accessor for type UInt and conformance UInt();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE8(v83) & 1) == 0)
    {
      uint64_t v4 = (__int128 *)v83;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return v4;
    }

    int64_t v28 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v30 = v29;
    *(void *)&Swift::UInt v83 = 0LL;
    *((void *)&v83 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v4 = &v83;
    _StringGuts.grow(_:)(52LL);
    v31._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v31._unint64_t object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v31);
    _print_unlocked<A, B>(_:_:)();
    v32._unint64_t object = (void *)0x80000001839D1400LL;
    v32._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = 1953384789LL;
    v33._unint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v33);
    v34._uint64_t countAndFlagsBits = 46LL;
    v34._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104LL))( v30,  *MEMORY[0x189619360],  v28);
LABEL_38:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    return v4;
  }

  unint64_t v85 = 0LL;
  Swift::UInt v83 = 0u;
  int64_t v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v87);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    id v35 = (void *)v83;
    Swift::String v36 = type metadata accessor for DecodingError();
    swift_allocError();
    int v38 = v37;
    v87[0] = 0LL;
    v87[1] = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v39._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v39._unint64_t object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v39);
    uint64_t v40 = objc_msgSend(v35, sel_description);
    unint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    Swift::String v43 = v42;

    uint64_t v4 = (__int128 *)v87;
    v44._uint64_t countAndFlagsBits = (uint64_t)v41;
    v44._unint64_t object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._unint64_t object = (void *)0x80000001839D1400LL;
    v45._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v45);
    v46._uint64_t countAndFlagsBits = 1953384789LL;
    v46._unint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v46);
    v47._uint64_t countAndFlagsBits = 46LL;
    v47._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v36 - 8) + 104LL))( v38,  *MEMORY[0x189619360],  v36);
    swift_willThrow();
  }

  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x189618CD8], v4, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  return v4;
}

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    uint64_t v7 = 0;
LABEL_46:
    LOBYTE(v102[0]) = v7;
    return;
  }

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    id v91 = v3;
    id v93 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    unsigned __int8 v9 = v103;
    Swift::String v8 = v104;
    id v10 = __swift_project_boxed_opaque_existential_1(v102, v103);
    id v95 = v89;
    Swift::String v11 = *(void *)(v9 - 8);
    uint64_t v12 = *(void *)(v11 + 64);
    __int128 v13 = MEMORY[0x1895F8858](v10);
    id v14 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v15 = *(void (**)(char *, __n128))(v11 + 16);
    v15((char *)v89 - v14, v13);
    id v16 = *(void *)(v8 + 8);
    uint64_t v17 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v18 = v17;
    id v94 = v89;
    id v19 = MEMORY[0x1895F8858](v17);
    uint64_t v105 = (void (*)(char *, char *, uint64_t, __n128))v15;
    ((void (*)(char *, char *, uint64_t, __n128))v15)((char *)v89 - v14, (char *)v89 - v14, v9, v19);
    id v97 = (char *)v89 - v14;
    uint64_t v20 = v16;
    id v21 = (v18 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 32;
    Swift::Int v33 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
    unint64_t v34 = v33((char *)v89 - v14, v9);
    id v35 = MEMORY[0x1895F8858](v34);
    Swift::String v36 = (char *)v89 - v14;
    v105((char *)v89 - v14, v97, v9, v35);
    id v96 = v89;
    if (v21)
    {
      LODWORD(v98) = 0x80000000;
      uint64_t v37 = v20;
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      {
        int v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v38 < 32)
        {
LABEL_49:
          Swift::UInt v69 = dispatch thunk of BinaryInteger._lowWord.getter();
          Swift::UInt8 v52 = v33;
          v33(v36, v9);
          uint64_t v53 = v97;
LABEL_26:
          uint64_t v54 = dispatch thunk of BinaryInteger.bitWidth.getter();
          uint64_t v55 = MEMORY[0x1895F8858](v54);
          v105((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v53, v9, v55);
          id v92 = v89;
          if (v54 < 33)
          {
            uint64_t v58 = dispatch thunk of BinaryInteger.bitWidth.getter();
            uint64_t v56 = v52((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v9);
            if (v58 == 32)
            {
              uint64_t v56 = dispatch thunk of static BinaryInteger.isSigned.getter();
              uint64_t v57 = v56 ^ 1;
            }

            else
            {
              uint64_t v57 = 0;
            }
          }

          else
          {
            uint64_t v56 = v52((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v9);
            uint64_t v57 = 1;
          }

          uint64_t v63 = MEMORY[0x1895F8858](v56);
          unint64_t v64 = (char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          v105(v64, v53, v9, v63);
          if ((v57 & 1) == 0)
          {
            v52((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v9);
            goto LABEL_45;
          }

          int64_t v65 = v52;
          LODWORD(v98) = 0x7FFFFFFF;
          unint64_t v66 = dispatch thunk of static BinaryInteger.isSigned.getter();
          unint64_t v67 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if ((v66 & 1) != 0)
          {
            if (v67 > 32)
            {
              MEMORY[0x1895F8858](v67);
              lazy protocol witness table accessor for type Int32 and conformance Int32();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              Swift::UInt v68 = dispatch thunk of static Comparable.< infix(_:_:)();
              Swift::UInt8 v52 = v65;
              v65((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v9);
              v65(v64, v9);
              uint64_t v53 = v97;
              goto LABEL_51;
            }
          }

          else if (v67 >= 32)
          {
            uint64_t v105 = (void (*)(char *, char *, uint64_t, __n128))v89;
            v101[0] = 0x7FFFFFFF;
            MEMORY[0x1895F8858](v67);
            lazy protocol witness table accessor for type Int32 and conformance Int32();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            Swift::UInt v68 = dispatch thunk of static Comparable.< infix(_:_:)();
            Swift::UInt8 v52 = v65;
            v65(v64, v9);
            v65((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v9);
LABEL_51:
            if ((v68 & 1) != 0) {
              goto LABEL_56;
            }
LABEL_45:
            dispatch thunk of BinaryInteger._lowWord.getter();
            v52(v53, v9);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
            uint64_t v7 = 0;
            goto LABEL_46;
          }

          dispatch thunk of BinaryInteger._lowWord.getter();
          Swift::UInt8 v52 = v65;
          v65((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v9);
          goto LABEL_45;
        }

        goto LABEL_33;
      }

      Swift::UInt v59 = dispatch thunk of static BinaryInteger.isSigned.getter();
      int v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v59 & 1) != 0)
      {
        if (v38 <= 32)
        {
          id v90 = *(void *)(*(void *)(v20 + 24) + 16LL);
          AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          id v92 = v89;
          MEMORY[0x1895F8858](AssociatedTypeWitness);
          v89[0] = (char *)v89 - v71;
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          Swift::UInt v73 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
          v89[1] = v89;
          MEMORY[0x1895F8858](v73);
          int64_t v74 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
          dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
          id v90 = v37;
          uint64_t v75 = dispatch thunk of static Comparable.< infix(_:_:)();
          Swift::UInt8 v52 = v33;
          uint64_t v76 = v33((char *)v89 - v74, v9);
          uint64_t v77 = MEMORY[0x1895F8858](v76);
          unint64_t v78 = (char *)v89 - v74;
          (*(void (**)(char *, char *, uint64_t, __n128))(v11 + 32))((char *)v89 - v74, v36, v9, v77);
          uint64_t v53 = v97;
          if ((v75 & 1) != 0)
          {
            v33(v78, v9);
          }

          else
          {
            int64_t v79 = v98;
            unint64_t v80 = dispatch thunk of BinaryInteger._lowWord.getter();
            v33(v78, v9);
            if (v79 <= v80) {
              goto LABEL_26;
            }
          }

  outlined init with copy of Any((uint64_t)v4, (uint64_t)v102);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    id v91 = v3;
    id v93 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    Swift::String v8 = v103;
    uint64_t v7 = v104;
    unsigned __int8 v9 = __swift_project_boxed_opaque_existential_1(v102, v103);
    id v95 = v89;
    id v10 = *(void *)(v8 - 8);
    Swift::String v11 = *(void *)(v10 + 64);
    uint64_t v12 = MEMORY[0x1895F8858](v9);
    __int128 v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    id v14 = *(void (**)(char *, __n128))(v10 + 16);
    v14((char *)v89 - v13, v12);
    uint64_t v15 = *(void *)(v7 + 8);
    id v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v17 = v16;
    id v94 = v89;
    uint64_t v18 = MEMORY[0x1895F8858](v16);
    uint64_t v105 = (void (*)(char *, char *, uint64_t, __n128))v14;
    ((void (*)(char *, char *, uint64_t, __n128))v14)((char *)v89 - v13, (char *)v89 - v13, v8, v18);
    id v97 = (char *)v89 - v13;
    id v19 = v15;
    uint64_t v20 = (v17 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
    Swift::Int v33 = v32((char *)v89 - v13, v8);
    unint64_t v34 = MEMORY[0x1895F8858](v33);
    id v35 = (char *)v89 - v13;
    v105((char *)v89 - v13, v97, v8, v34);
    id v96 = v89;
    if (v20)
    {
      *(void *)&id v98 = 0x8000000000000000LL;
      Swift::String v36 = v19;
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      {
        uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v37 < 64)
        {
LABEL_48:
          Swift::UInt v68 = dispatch thunk of BinaryInteger._lowWord.getter();
          uint64_t v51 = v32;
          v32(v35, v8);
          Swift::UInt8 v52 = v97;
LABEL_26:
          uint64_t v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
          uint64_t v54 = MEMORY[0x1895F8858](v53);
          v105((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v52, v8, v54);
          id v92 = v89;
          if (v53 < 65)
          {
            uint64_t v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
            uint64_t v55 = v51((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
            if (v57 == 64)
            {
              uint64_t v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
              uint64_t v56 = v55 ^ 1;
            }

            else
            {
              uint64_t v56 = 0;
            }
          }

          else
          {
            uint64_t v55 = v51((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
            uint64_t v56 = 1;
          }

          uint64_t v62 = MEMORY[0x1895F8858](v55);
          uint64_t v63 = (char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          v105(v63, v52, v8, v62);
          if ((v56 & 1) == 0)
          {
            v51((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
            goto LABEL_45;
          }

          unint64_t v64 = v51;
          *(void *)&id v98 = 0x7FFFFFFFFFFFFFFFLL;
          int64_t v65 = dispatch thunk of static BinaryInteger.isSigned.getter();
          unint64_t v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if ((v65 & 1) != 0)
          {
            if (v66 > 64)
            {
              MEMORY[0x1895F8858](v66);
              lazy protocol witness table accessor for type Int64 and conformance Int64();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              unint64_t v67 = dispatch thunk of static Comparable.< infix(_:_:)();
              uint64_t v51 = v64;
              v64((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
              v64(v63, v8);
              Swift::UInt8 v52 = v97;
              goto LABEL_50;
            }
          }

          else if (v66 >= 64)
          {
            uint64_t v105 = (void (*)(char *, char *, uint64_t, __n128))v89;
            v101[0] = 0x7FFFFFFFFFFFFFFFLL;
            MEMORY[0x1895F8858](v66);
            lazy protocol witness table accessor for type Int64 and conformance Int64();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            unint64_t v67 = dispatch thunk of static Comparable.< infix(_:_:)();
            uint64_t v51 = v64;
            v64(v63, v8);
            v64((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
LABEL_50:
            if ((v67 & 1) != 0) {
              goto LABEL_55;
            }
LABEL_45:
            uint64_t v4 = (__int128 *)dispatch thunk of BinaryInteger._lowWord.getter();
            v51(v52, v8);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
            return v4;
          }

          dispatch thunk of BinaryInteger._lowWord.getter();
          uint64_t v51 = v64;
          v64((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
          goto LABEL_45;
        }

        goto LABEL_33;
      }

      uint64_t v58 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v58 & 1) != 0)
      {
        if (v37 <= 64)
        {
          id v90 = *(void *)(*(void *)(v19 + 24) + 16LL);
          AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          id v92 = v89;
          MEMORY[0x1895F8858](AssociatedTypeWitness);
          v89[0] = (char *)v89 - v70;
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          int64_t v72 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
          v89[1] = v89;
          MEMORY[0x1895F8858](v72);
          Swift::UInt v73 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
          dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
          id v90 = v36;
          int64_t v74 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v51 = v32;
          uint64_t v75 = v32((char *)v89 - v73, v8);
          uint64_t v76 = MEMORY[0x1895F8858](v75);
          uint64_t v77 = (char *)v89 - v73;
          (*(void (**)(char *, char *, uint64_t, __n128))(v10 + 32))((char *)v89 - v73, v35, v8, v76);
          Swift::UInt8 v52 = v97;
          if ((v74 & 1) != 0)
          {
            v32(v77, v8);
          }

          else
          {
            unint64_t v78 = v98;
            int64_t v79 = dispatch thunk of BinaryInteger._lowWord.getter();
            v32(v77, v8);
            if (v79 >= v78) {
              goto LABEL_26;
            }
          }

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  if (swift_dynamicCast())
  {
    uint64_t v7 = 0;
LABEL_15:
    LOBYTE(v87[0]) = v7;
    return;
  }

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    int64_t v79 = v3;
    unint64_t v80 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    unsigned __int8 v9 = v88;
    Swift::String v8 = v89;
    id v10 = __swift_project_boxed_opaque_existential_1(v87, v88);
    id v90 = &v73;
    Swift::String v11 = *(void **)(v9 - 8);
    uint64_t v12 = v11[8];
    __int128 v13 = MEMORY[0x1895F8858](v10);
    id v14 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v15 = (char *)&v73 - v14;
    id v16 = (void (*)(char *, __n128))v11[2];
    v16((char *)&v73 - v14, v13);
    uint64_t v17 = *(void *)(v8 + 8);
    uint64_t v18 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v8) = v18;
    Swift::UInt v82 = &v73;
    id v19 = MEMORY[0x1895F8858](v18);
    ((void (*)(char *, char *, uint64_t, __n128))v16)((char *)&v73 - v14, (char *)&v73 - v14, v9, v19);
    unint64_t v81 = v11;
    if ((v8 & 1) != 0)
    {
      unint64_t v78 = (char *)&v73 - v14;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v77 = &v73;
      MEMORY[0x1895F8858](AssociatedTypeWitness);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      unint64_t v22 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
      uint64_t v76 = &v73;
      MEMORY[0x1895F8858](v22);
      uint64_t v23 = v81;
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      LOBYTE(AssociatedTypeWitness) = dispatch thunk of static Comparable.< infix(_:_:)();
      Swift::String v24 = (void (*)(char *, uint64_t))v23[1];
      v24((char *)&v73 - v14, v9);
      v24((char *)&v73 - v14, v9);
      if ((AssociatedTypeWitness & 1) != 0)
      {
        v24(v78, v9);
LABEL_38:
        int64_t v65 = type metadata accessor for DecodingError();
        swift_allocError();
        unint64_t v67 = v66;
        *(void *)&Swift::UInt v83 = 0LL;
        *((void *)&v83 + 1) = 0xE000000000000000LL;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52LL);
        v68._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v68._unint64_t object = (void *)0x80000001839D13E0LL;
        String.append(_:)(v68);
        __swift_project_boxed_opaque_existential_1(v87, v88);
        v69._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v69);
        swift_bridgeObjectRelease();
        v70._unint64_t object = (void *)0x80000001839D1400LL;
        v70._uint64_t countAndFlagsBits = 0xD000000000000012LL;
        String.append(_:)(v70);
        v71._uint64_t countAndFlagsBits = 0x3233746E4955LL;
        v71._unint64_t object = (void *)0xE600000000000000LL;
        String.append(_:)(v71);
        v72._uint64_t countAndFlagsBits = 46LL;
        v72._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v72);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v65 - 8) + 104LL))( v67,  *MEMORY[0x189619360],  v65);
LABEL_39:
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
        return;
      }

      uint64_t v15 = v78;
    }

    else
    {
      Swift::String v24 = (void (*)(char *, uint64_t))v11[1];
      v24((char *)&v73 - v14, v9);
    }

    Swift::UInt64 v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
    Swift::UInt v50 = MEMORY[0x1895F8858](v49);
    ((void (*)(char *, char *, uint64_t, __n128))v16)( (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v15,  v9,  v50);
    if (v49 <= 31)
    {
      v24((char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v9);
LABEL_25:
      dispatch thunk of BinaryInteger._lowWord.getter();
      v24(v15, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      uint64_t v7 = 0;
      goto LABEL_15;
    }

    uint64_t v77 = &v73;
    LODWORD(v83) = -1;
    uint64_t v51 = dispatch thunk of static BinaryInteger.isSigned.getter();
    Swift::UInt8 v52 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v51 & 1) != 0)
    {
      if (v52 <= 32)
      {
        unint64_t v78 = v15;
        uint64_t v75 = v17;
        int64_t v74 = *(void *)(*(void *)(v17 + 24) + 16LL);
        uint64_t v53 = swift_getAssociatedTypeWitness();
        uint64_t v76 = &v73;
        MEMORY[0x1895F8858](v53);
        uint64_t v54 = swift_getAssociatedConformanceWitness();
        uint64_t v55 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v53, v54);
        Swift::UInt v73 = (uint64_t)&v73;
        MEMORY[0x1895F8858](v55);
        uint64_t v56 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
        LODWORD(v74) = dispatch thunk of static Comparable.> infix(_:_:)();
        uint64_t v57 = ((uint64_t (*)(char *, uint64_t))v24)((char *)&v73 - v56, v9);
        LODWORD(v76) = v83;
        uint64_t v58 = MEMORY[0x1895F8858](v57);
        ((void (*)(char *, char *, uint64_t, __n128))v81[4])((char *)&v73 - v56, (char *)&v73 - v56, v9, v58);
        if ((v74 & 1) == 0)
        {
          v24((char *)&v73 - v56, v9);
          uint64_t v15 = v78;
          goto LABEL_25;
        }

        Swift::UInt v59 = dispatch thunk of BinaryInteger._lowWord.getter();
        v24((char *)&v73 - v56, v9);
        int64_t v60 = v76 >= v59;
        uint64_t v15 = v78;
LABEL_36:
        if (v60) {
          goto LABEL_25;
        }
        goto LABEL_37;
      }
    }

    else if (v52 <= 32)
    {
      unint64_t v64 = dispatch thunk of BinaryInteger._lowWord.getter();
      v24((char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v9);
      int64_t v60 = v83 >= v64;
      goto LABEL_36;
    }

    MEMORY[0x1895F8858](v52);
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v63 = dispatch thunk of static Comparable.< infix(_:_:)();
    v24((char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v9);
    v24((char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v9);
    if ((v63 & 1) == 0) {
      goto LABEL_25;
    }
LABEL_37:
    v24(v15, v9);
    goto LABEL_38;
  }

  unint64_t v85 = 0LL;
  Swift::UInt v83 = 0u;
  int64_t v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    Swift::String v25 = __swift_project_boxed_opaque_existential_1(v87, v88);
    char v26 = MEMORY[0x1895F8858](v25);
    (*(void (**)(char *, __n128))(v28 + 16))((char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL), v26);
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE4(v83) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      uint64_t v7 = 0;
      goto LABEL_15;
    }

    uint64_t v29 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v31 = v30;
    *(void *)&Swift::UInt v83 = 0LL;
    *((void *)&v83 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v32._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v32._unint64_t object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v32);
    _print_unlocked<A, B>(_:_:)();
    v33._unint64_t object = (void *)0x80000001839D1400LL;
    v33._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v33);
    v34._uint64_t countAndFlagsBits = 0x3233746E4955LL;
    v34._unint64_t object = (void *)0xE600000000000000LL;
    String.append(_:)(v34);
    v35._uint64_t countAndFlagsBits = 46LL;
    v35._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v35);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v29 - 8) + 104LL))( v31,  *MEMORY[0x189619360],  v29);
    goto LABEL_39;
  }

  unint64_t v85 = 0LL;
  Swift::UInt v83 = 0u;
  int64_t v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    Swift::String v36 = (void *)v83;
    uint64_t v37 = type metadata accessor for DecodingError();
    swift_allocError();
    id v39 = v38;
    v87[0] = 0LL;
    v87[1] = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v40._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v40._unint64_t object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v40);
    unint64_t v41 = objc_msgSend(v36, sel_description);
    char v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    uint64_t v44 = v43;

    v45._uint64_t countAndFlagsBits = (uint64_t)v42;
    v45._unint64_t object = v44;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._unint64_t object = (void *)0x80000001839D1400LL;
    v46._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v46);
    v47._uint64_t countAndFlagsBits = 0x3233746E4955LL;
    v47._unint64_t object = (void *)0xE600000000000000LL;
    String.append(_:)(v47);
    v48._uint64_t countAndFlagsBits = 46LL;
    v48._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v48);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v37 - 8) + 104LL))( v39,  *MEMORY[0x189619360],  v37);
    swift_willThrow();
  }

  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v62 = v61;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x18961A860], a1, v62);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  outlined init with copy of Any((uint64_t)v4, (uint64_t)v87);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    int64_t v79 = v3;
    unint64_t v80 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    Swift::String v8 = v88;
    uint64_t v7 = v89;
    unsigned __int8 v9 = __swift_project_boxed_opaque_existential_1(v87, v88);
    id v90 = &v73;
    id v10 = *(void **)(v8 - 8);
    Swift::String v11 = v10[8];
    uint64_t v12 = MEMORY[0x1895F8858](v9);
    __int128 v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    id v14 = (char *)&v73 - v13;
    uint64_t v15 = (void (*)(char *, __n128))v10[2];
    v15((char *)&v73 - v13, v12);
    id v16 = *(void *)(v7 + 8);
    uint64_t v17 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v7) = v17;
    Swift::UInt v82 = &v73;
    uint64_t v18 = MEMORY[0x1895F8858](v17);
    ((void (*)(char *, char *, uint64_t, __n128))v15)((char *)&v73 - v13, (char *)&v73 - v13, v8, v18);
    unint64_t v81 = v10;
    if ((v7 & 1) != 0)
    {
      unint64_t v78 = (char *)&v73 - v13;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v77 = &v73;
      MEMORY[0x1895F8858](AssociatedTypeWitness);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      id v21 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
      uint64_t v76 = &v73;
      MEMORY[0x1895F8858](v21);
      unint64_t v22 = v81;
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      LOBYTE(AssociatedTypeWitness) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v23 = (void (*)(char *, uint64_t))v22[1];
      v23((char *)&v73 - v13, v8);
      v23((char *)&v73 - v13, v8);
      if ((AssociatedTypeWitness & 1) != 0)
      {
        v23(v78, v8);
LABEL_37:
        unint64_t v64 = type metadata accessor for DecodingError();
        swift_allocError();
        unint64_t v66 = v65;
        *(void *)&Swift::UInt v83 = 0LL;
        *((void *)&v83 + 1) = 0xE000000000000000LL;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52LL);
        v67._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v67._unint64_t object = (void *)0x80000001839D13E0LL;
        String.append(_:)(v67);
        __swift_project_boxed_opaque_existential_1(v87, v88);
        v68._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v4 = &v83;
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v69._unint64_t object = (void *)0x80000001839D1400LL;
        v69._uint64_t countAndFlagsBits = 0xD000000000000012LL;
        String.append(_:)(v69);
        v70._uint64_t countAndFlagsBits = 0x3436746E4955LL;
        v70._unint64_t object = (void *)0xE600000000000000LL;
        String.append(_:)(v70);
        v71._uint64_t countAndFlagsBits = 46LL;
        v71._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v71);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v64 - 8) + 104LL))( v66,  *MEMORY[0x189619360],  v64);
        goto LABEL_38;
      }

      id v14 = v78;
    }

    else
    {
      uint64_t v23 = (void (*)(char *, uint64_t))v10[1];
      v23((char *)&v73 - v13, v8);
    }

    Swift::UInt v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
    Swift::UInt64 v49 = MEMORY[0x1895F8858](v48);
    ((void (*)(char *, char *, uint64_t, __n128))v15)( (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v14,  v8,  v49);
    if (v48 <= 63)
    {
      v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
LABEL_24:
      uint64_t v4 = (__int128 *)dispatch thunk of BinaryInteger._lowWord.getter();
      v23(v14, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return v4;
    }

    uint64_t v77 = &v73;
    *(void *)&Swift::UInt v83 = -1LL;
    Swift::UInt v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v50 & 1) != 0)
    {
      if (v51 <= 64)
      {
        unint64_t v78 = v14;
        uint64_t v75 = v16;
        int64_t v74 = *(void *)(*(void *)(v16 + 24) + 16LL);
        Swift::UInt8 v52 = swift_getAssociatedTypeWitness();
        uint64_t v76 = &v73;
        MEMORY[0x1895F8858](v52);
        uint64_t v53 = swift_getAssociatedConformanceWitness();
        uint64_t v54 = MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v52, v53);
        Swift::UInt v73 = (uint64_t)&v73;
        MEMORY[0x1895F8858](v54);
        uint64_t v55 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
        LODWORD(v74) = dispatch thunk of static Comparable.> infix(_:_:)();
        uint64_t v56 = ((uint64_t (*)(char *, uint64_t))v23)((char *)&v73 - v55, v8);
        uint64_t v76 = (uint64_t *)v83;
        uint64_t v57 = MEMORY[0x1895F8858](v56);
        ((void (*)(char *, char *, uint64_t, __n128))v81[4])((char *)&v73 - v55, (char *)&v73 - v55, v8, v57);
        if ((v74 & 1) == 0)
        {
          v23((char *)&v73 - v55, v8);
          id v14 = v78;
          goto LABEL_24;
        }

        uint64_t v58 = dispatch thunk of BinaryInteger._lowWord.getter();
        v23((char *)&v73 - v55, v8);
        Swift::UInt v59 = (unint64_t)v76 >= v58;
        id v14 = v78;
LABEL_35:
        if (v59) {
          goto LABEL_24;
        }
        goto LABEL_36;
      }
    }

    else if (v51 <= 64)
    {
      uint64_t v63 = dispatch thunk of BinaryInteger._lowWord.getter();
      v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
      Swift::UInt v59 = (unint64_t)v83 >= v63;
      goto LABEL_35;
    }

    MEMORY[0x1895F8858](v51);
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v62 = dispatch thunk of static Comparable.< infix(_:_:)();
    v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
    v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
    if ((v62 & 1) == 0) {
      goto LABEL_24;
    }
LABEL_36:
    v23(v14, v8);
    goto LABEL_37;
  }

  unint64_t v85 = 0LL;
  Swift::UInt v83 = 0u;
  int64_t v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    Swift::String v24 = __swift_project_boxed_opaque_existential_1(v87, v88);
    Swift::String v25 = MEMORY[0x1895F8858](v24);
    (*(void (**)(char *, __n128))(v27 + 16))((char *)&v73 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL), v25);
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE8(v83) & 1) == 0)
    {
      uint64_t v4 = (__int128 *)v83;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return v4;
    }

    int64_t v28 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v30 = v29;
    *(void *)&Swift::UInt v83 = 0LL;
    *((void *)&v83 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint64_t v4 = &v83;
    _StringGuts.grow(_:)(52LL);
    v31._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v31._unint64_t object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v31);
    _print_unlocked<A, B>(_:_:)();
    v32._unint64_t object = (void *)0x80000001839D1400LL;
    v32._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = 0x3436746E4955LL;
    v33._unint64_t object = (void *)0xE600000000000000LL;
    String.append(_:)(v33);
    v34._uint64_t countAndFlagsBits = 46LL;
    v34._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104LL))( v30,  *MEMORY[0x189619360],  v28);
LABEL_38:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    return v4;
  }

  unint64_t v85 = 0LL;
  Swift::UInt v83 = 0u;
  int64_t v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v87);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    id v35 = (void *)v83;
    Swift::String v36 = type metadata accessor for DecodingError();
    swift_allocError();
    int v38 = v37;
    v87[0] = 0LL;
    v87[1] = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v39._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v39._unint64_t object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v39);
    uint64_t v40 = objc_msgSend(v35, sel_description);
    unint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    Swift::String v43 = v42;

    uint64_t v4 = (__int128 *)v87;
    v44._uint64_t countAndFlagsBits = (uint64_t)v41;
    v44._unint64_t object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._unint64_t object = (void *)0x80000001839D1400LL;
    v45._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v45);
    v46._uint64_t countAndFlagsBits = 0x3436746E4955LL;
    v46._unint64_t object = (void *)0xE600000000000000LL;
    String.append(_:)(v46);
    v47._uint64_t countAndFlagsBits = 46LL;
    v47._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v36 - 8) + 104LL))( v38,  *MEMORY[0x189619360],  v36);
    swift_willThrow();
  }

  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x18961A8C8], v4, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  return v4;
}

  outlined init with copy of Any((uint64_t)v1, (uint64_t)v51);
  outlined init with copy of Any((uint64_t)v1, (uint64_t)v50);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)v51);
    uint64_t v4 = v52;
    uint64_t v5 = __swift_project_boxed_opaque_existential_1(v51, v52);
    id v6 = MEMORY[0x1895F8858](v5);
    Swift::String v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(_BYTE *, __n128))(v9 + 16))(v8, v6);
    id v10 = specialized BinaryFloatingPoint.init<A>(exactly:)(v8, v4);
    if ((v11 & 1) != 0)
    {
      unint64_t v1 = (void *)type metadata accessor for DecodingError();
      swift_allocError();
      __int128 v13 = v12;
      *(void *)&int v47 = 0LL;
      *((void *)&v47 + 1) = 0xE000000000000000LL;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(52LL);
      v14._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v14._unint64_t object = (void *)0x80000001839D13E0LL;
      String.append(_:)(v14);
      _print_unlocked<A, B>(_:_:)();
      v15._unint64_t object = (void *)0x80000001839D1400LL;
      v15._uint64_t countAndFlagsBits = 0xD000000000000012LL;
      String.append(_:)(v15);
      v16._uint64_t countAndFlagsBits = 0x656C62756F44LL;
      v16._unint64_t object = (void *)0xE600000000000000LL;
      String.append(_:)(v16);
      v17._uint64_t countAndFlagsBits = 46LL;
      v17._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v17);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, void *))(*(v1 - 1) + 104LL))( v13,  *MEMORY[0x189619360],  v1);
LABEL_20:
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
      return v1;
    }

    goto LABEL_16;
  }

  Swift::UInt64 v49 = 0LL;
  int v47 = 0u;
  Swift::UInt v48 = 0u;
  outlined destroy of Any?((uint64_t)&v47, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)v1, (uint64_t)v50);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)v51);
    uint64_t v18 = v52;
    id v19 = __swift_project_boxed_opaque_existential_1(v51, v52);
    uint64_t v20 = MEMORY[0x1895F8858](v19);
    unint64_t v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, __n128))(v23 + 16))(v22, v20);
    id v10 = Double.init<A>(exactly:)((uint64_t)v22, v18);
    if ((v24 & 1) != 0)
    {
      unint64_t v1 = (void *)type metadata accessor for DecodingError();
      swift_allocError();
      int v38 = v37;
      *(void *)&int v47 = 0LL;
      *((void *)&v47 + 1) = 0xE000000000000000LL;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(52LL);
      v39._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v39._unint64_t object = (void *)0x80000001839D13E0LL;
      String.append(_:)(v39);
      __swift_project_boxed_opaque_existential_1(v51, v52);
      v40._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._unint64_t object = (void *)0x80000001839D1400LL;
      v41._uint64_t countAndFlagsBits = 0xD000000000000012LL;
      String.append(_:)(v41);
      v42._uint64_t countAndFlagsBits = 0x656C62756F44LL;
      v42._unint64_t object = (void *)0xE600000000000000LL;
      String.append(_:)(v42);
      v43._uint64_t countAndFlagsBits = 46LL;
      v43._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v43);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, void *))(*(v1 - 1) + 104LL))( v38,  *MEMORY[0x189619360],  v1);
      goto LABEL_20;
    }

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v51);
  if (swift_dynamicCast())
  {
    uint64_t v4 = 0;
LABEL_14:
    LOBYTE(v51[0]) = v4;
    return;
  }

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v50);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)v51);
    uint64_t v5 = v52;
    id v6 = __swift_project_boxed_opaque_existential_1(v51, v52);
    uint64_t v7 = MEMORY[0x1895F8858](v6);
    unsigned __int8 v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(_BYTE *, __n128))(v10 + 16))(v9, v7);
    if ((specialized BinaryFloatingPoint.init<A>(exactly:)(v9, v5) & 0x100000000LL) == 0)
    {
LABEL_11:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
      uint64_t v4 = 0;
      goto LABEL_14;
    }

    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    id v19 = v18;
    *(void *)&int v47 = 0LL;
    *((void *)&v47 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v20._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v20._unint64_t object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v20);
    _print_unlocked<A, B>(_:_:)();
    v21._unint64_t object = (void *)0x80000001839D1400LL;
    v21._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v21);
    v22._uint64_t countAndFlagsBits = 0x74616F6C46LL;
    v22._unint64_t object = (void *)0xE500000000000000LL;
    String.append(_:)(v22);
    v23._uint64_t countAndFlagsBits = 46LL;
    v23._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v23);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v17 - 8) + 104LL))( v19,  *MEMORY[0x189619360],  v17);
    goto LABEL_22;
  }

  Swift::UInt64 v49 = 0LL;
  int v47 = 0u;
  Swift::UInt v48 = 0u;
  outlined destroy of Any?((uint64_t)&v47, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v50);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)v51);
    Swift::String v11 = v52;
    uint64_t v12 = __swift_project_boxed_opaque_existential_1(v51, v52);
    __int128 v13 = MEMORY[0x1895F8858](v12);
    uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, __n128))(v16 + 16))(v15, v13);
    uint64_t v37 = type metadata accessor for DecodingError();
    swift_allocError();
    id v39 = v38;
    *(void *)&int v47 = 0LL;
    *((void *)&v47 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v40._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v40._unint64_t object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v40);
    __swift_project_boxed_opaque_existential_1(v51, v52);
    v41._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._unint64_t object = (void *)0x80000001839D1400LL;
    v42._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v42);
    v43._uint64_t countAndFlagsBits = 0x74616F6C46LL;
    v43._unint64_t object = (void *)0xE500000000000000LL;
    String.append(_:)(v43);
    v44._uint64_t countAndFlagsBits = 46LL;
    v44._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v44);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v37 - 8) + 104LL))( v39,  *MEMORY[0x189619360],  v37);
LABEL_22:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    return;
  }

  Swift::UInt64 v49 = 0LL;
  int v47 = 0u;
  Swift::UInt v48 = 0u;
  outlined destroy of Any?((uint64_t)&v47, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v51);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    Swift::String v24 = (void *)v47;
    Swift::String v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    v51[0] = 0LL;
    v51[1] = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v28._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v28._unint64_t object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v28);
    uint64_t v29 = objc_msgSend(v24, sel_description);
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v32 = v31;

    v33._uint64_t countAndFlagsBits = (uint64_t)v30;
    v33._unint64_t object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._unint64_t object = (void *)0x80000001839D1400LL;
    v34._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v34);
    v35._uint64_t countAndFlagsBits = 0x74616F6C46LL;
    v35._unint64_t object = (void *)0xE500000000000000LL;
    String.append(_:)(v35);
    v36._uint64_t countAndFlagsBits = 46LL;
    v36._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v36);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  *MEMORY[0x189619360],  v25);
    swift_willThrow();
  }

  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v46 = v45;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x189618620], a1, v46);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v11);
  uint64_t result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    *(void *)a2 = v9;
    *(_BYTE *)(a2 + 8) = 0;
  }

  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v8 = v7;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)((uint64_t)&type metadata for Date, a1, v8);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  return result;
}

  uint64_t v4 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v4, v13);
  swift_bridgeObjectRelease();
  uint64_t v5 = specialized __PlistDictionaryDecoder.unbox(_:as:)(v13);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if (v0) {
    return v7 & 1;
  }
  if (v5 != 2)
  {
    uint64_t v7 = v5 & 1;
    return v7 & 1;
  }

  __break(1u);
  return result;
}

  uint64_t v4 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v4, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)((uint64_t)v13);
  if (v0) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  id v10 = v5;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v10 & 1) != 0) {
    __break(1u);
  }
  return result;
}

  uint64_t v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v15);
  swift_bridgeObjectRelease();
  id v6 = specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)((uint64_t)v15);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (uint64_t)v0;
  }

  v0 = v6;
  Swift::String v11 = v7;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((v11 & 1) == 0) {
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

  uint64_t v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v15);
  swift_bridgeObjectRelease();
  id v6 = specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)((uint64_t)v15);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (uint64_t)v0;
  }

  v0 = v6;
  Swift::String v11 = v7;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((v11 & 1) == 0) {
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

  uint64_t v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return (uint64_t)v0;
  }

  v0 = v6;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  __break(1u);
  return result;
}

  uint64_t v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return (uint64_t)v0;
  }

  v0 = v6;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  __break(1u);
  return result;
}

  uint64_t v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return v0;
  }

  v0 = (unint64_t)v6;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v0 & 0x100000000LL) == 0) {
    return v0;
  }
  __break(1u);
  return result;
}

  uint64_t v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v15);
  swift_bridgeObjectRelease();
  id v6 = specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)((uint64_t)v15);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (uint64_t)v0;
  }

  v0 = v6;
  Swift::String v11 = v7;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((v11 & 1) == 0) {
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

  uint64_t v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return (uint64_t)v0;
  }

  v0 = v6;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  __break(1u);
  return result;
}

  uint64_t v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return (uint64_t)v0;
  }

  v0 = v6;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  __break(1u);
  return result;
}

  uint64_t v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return v0;
  }

  v0 = (unint64_t)v6;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v0 & 0x100000000LL) == 0) {
    return v0;
  }
  __break(1u);
  return result;
}

  uint64_t v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v15);
  swift_bridgeObjectRelease();
  id v6 = specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)((uint64_t)v15);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (uint64_t)v0;
  }

  v0 = v6;
  Swift::String v11 = v7;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((v11 & 1) == 0) {
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

  uint64_t v4 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v4, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(v13);
  if (v0) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  id v10 = v5;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v10 & 0x100000000LL) != 0) {
    __break(1u);
  }
  return result;
}

  v16.value = value;
  return v16.value;
}

  ucal_setAttribute();
LABEL_25:
  if ((a7 & 1) != 0)
  {
    uint64_t v31 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 464);
    swift_unknownObjectRetain();
    v31(v43, ObjectType, v10);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v43,  (uint64_t)v44,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v44,  (uint64_t)__dst,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)__dst) != 1)
    {
      uint64_t v32 = __dst[7];
      swift_bridgeObjectRetain();
      outlined release of LocalePreferences?((uint64_t)v44);
      if (v32)
      {
        if (*(void *)(v32 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v17), (v33 & 1) != 0))
        {
          swift_bridgeObjectRelease();
          ucal_setAttribute();
        }

        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
  }

  else
  {
    ucal_setAttribute();
  }

  outlined release of Locale.Components((uint64_t *)__src);
  return v9;
}

  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  __int128 v13 = (unsigned __int16)*a2 - v7;
  if (v13 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  *a2 = v13;
  id v14 = &__dst[24 * v7];
  return v6;
}

  __break(1u);
}

          if ((uint64_t)(a1 - v16) >= 0)
          {
            if ((uint64_t)(a6 - a1) >= 0)
            {
              if ((uint64_t)(v16 + a4 - a6) >= 0)
              {
                uint64_t v18 = static String._tryFromUTF8(_:)();
                if (v19)
                {
                  id v16 = v18;
                  swift_bridgeObjectRelease();
                  return v16;
                }

                goto LABEL_129;
              }

              goto LABEL_209;
            }

  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
    uint64_t result = v14;
    uint64_t v3 = v31;
  }

  __int128 v13 = v3 + 4;
  if (v3 + 4 >= v30) {
    return 1LL;
  }
  Swift::String v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    uint64_t v12 = v3 + 4;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v12 >= v30) {
      return 1LL;
    }
    Swift::String v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_23;
    }
  }

          uint64_t v12 = v32;
          goto LABEL_8;
        }

        uint64_t v12 = 1;
        goto LABEL_130;
      case '2':
        if (v9 != 1)
        {
          if (v9 != 2) {
            goto LABEL_7;
          }
          uint64_t v12 = 32;
          goto LABEL_8;
        }

        uint64_t v12 = 2;
        goto LABEL_130;
      case '3':
        if (v9 == 1)
        {
          uint64_t v12 = 3;
LABEL_130:
          if ((((_WORD)v12 + v32) & 0x100) == 0)
          {
            uint64_t v27 = v12 + v32;
            if (!specialized Set.contains(_:)(v12 + v32, a4))
            {
              *(_BYTE *)(a1 + v10) = v27;
              unint64_t v22 = __OFADD__(v10++, 1LL);
              if (!v22)
              {
                uint64_t v12 = 0;
                goto LABEL_8;
              }

              goto LABEL_157;
            }

            if (!__OFADD__(v10, 2LL))
            {
              if (v10 + 2 >= v10)
              {
                LOBYTE(v39) = 37;
                HIBYTE(v39) = specialized StringProtocol.hexToAscii(_:)(v27 >> 4);
                uint64_t v40 = v17;
                if (a1)
                {
                  int64_t v28 = a1 + v10;
                  if ((unint64_t)&v39 < a1 + v10 + 3 && v28 < (unint64_t)v41)
                  {
                    _fatalErrorMessage(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x18349B08CLL);
                  }

                  uint64_t v29 = v39;
                  *(_BYTE *)(v28 + 2) = v40;
                  *(_WORD *)int64_t v28 = v29;
                }

                unint64_t v22 = __OFADD__(v10, 3LL);
                v10 += 3LL;
                if (!v22)
                {
                  uint64_t v12 = v27;
                  goto LABEL_8;
                }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v12;
LABEL_8:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  __int128 v13 = *(void *)(a2 + 112);
  if (v13)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v13;
    id v14 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = *(void *)(a2 + 144);
    if (v15) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v20 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v20;
    uint64_t v17 = *(void *)(a2 + 176);
    if (v17) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }

  id v19 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v19;
  uint64_t v15 = *(void *)(a2 + 144);
  if (!v15) {
    goto LABEL_13;
  }
LABEL_10:
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v15;
  id v16 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = *(void *)(a2 + 176);
  if (v17)
  {
LABEL_11:
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = v17;
    uint64_t v18 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }

  *unint64_t v1 = 0xFFFFLL;
  return result;
}

  id v10 = malloc(0x18uLL);
  *id v10 = a3;
  v10[1] = [a4 copy];
  Swift::String v11 = *a5;
  if (*a5)
  {
    uint64_t v12 = 0;
    __int128 v13 = a5 + 1;
    do
    {
      v12 |= 1 << (v11 - 97);
      id v14 = *(unsigned __int8 *)v13++;
      Swift::String v11 = v14;
    }

    while (v14);
  }

  else
  {
    uint64_t v12 = 0;
  }

  *((_DWORD *)v10 + 4) = v12;
  os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_94);
  if (NSMapGet((NSMapTable *)qword_18C4965E0, a4)) {
    free(v10);
  }
  else {
    NSMapInsert((NSMapTable *)qword_18C4965E0, a4, v10);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_94);
}

    -[NSAttributedString length](v7, "length");
    unsigned __int8 v9 = -[NSString rangeOfString:](-[NSAttributedString string](v7, "string"), "rangeOfString:", @"}");
    if (v9 != 0x7FFFFFFFFFFFFFFFLL)
    {
      id v10 = v9;
      while (v10 < -[NSAttributedString length](v7, "length") - 1
           && -[NSString characterAtIndex:](-[NSAttributedString string](v7, "string"), "characterAtIndex:", v10 + 1) == 125)
      {
        -[NSMutableString replaceCharactersInRange:withString:]( -[NSMutableAttributedString mutableString](v7, "mutableString"),  "replaceCharactersInRange:withString:",  v10,  2LL,  @"}");
        id v10 = -[NSString rangeOfString:options:range:]( -[NSAttributedString string](v7, "string"),  "rangeOfString:options:range:",  @"}",  0LL,  v10 + 1,  -[NSAttributedString length](v7, "length") - (v10 + 1));
        if (v10 == 0x7FFFFFFFFFFFFFFFLL) {
          return v7;
        }
      }

    if ((options & 0x40000000000LL) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  if ((options & 0x20000000000LL) == 0) {
    goto LABEL_7;
  }
LABEL_15:
  -[NSString UTF8String]( +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"NSActivityAssertion: %@", a4),  "UTF8String");
  v10->_transaction = (OS_os_transaction *)os_transaction_create();
  options = v10->_options;
  if ((options & 0x40000000000LL) == 0)
  {
LABEL_8:
    if ((options & 0x80000000000LL) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }

  id v19 = (NSError *)v26[0];
  if (!(v18 | v26[0]))
  {
    id v19 = _NSIPCocoaErrorWithCode( 4864LL,  0LL,  0LL,  (uint64_t)@"A string could not be instantiated because of an unknown error.",  v14,  v15,  v16,  v17,  v25);
    v26[0] = v19;
  }

  if (a5 && v19) {
    *a5 = v19;
  }
  return (id)v18;
}

    LastError = xmlCtxtGetLastError(self->_parserContext);
    if (LastError && LastError->code == a3) {
      -[NSXMLParser _setExpandedParserError:]( self,  "_setExpandedParserError:",  _NSErrorFromXMLError((uint64_t)LastError, (uint64_t)self));
    }
    else {
      -[NSXMLParser _setParserError:](self, "_setParserError:", a3);
    }
    return 0;
  }

  return 1;
}

    LOBYTE(v5) = 0;
  }

  return v5;
}

  if (a4) {
    id v10 = 1000000;
  }
  else {
    id v10 = 0;
  }
  Swift::String v11 = +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  a1 + 1000 * a2 + v10 + 100000000 * (int)a3 + 1);
  uint64_t result = (NSNumberFormatter *)[(id)fileSizeFormatter_numberFormatterCache objectForKey:v11];
  if (!result)
  {
    __int128 v13 = objc_alloc_init(&OBJC_CLASS___NSNumberFormatter);
    -[NSNumberFormatter setFormatterBehavior:](v13, "setFormatterBehavior:", 1040LL);
    -[NSNumberFormatter setNumberStyle:](v13, "setNumberStyle:", 1LL);
    if (a3) {
      -[NSNumberFormatter setFormattingContext:](v13, "setFormattingContext:", a3);
    }
    if (a1 < 0)
    {
      -[NSNumberFormatter setMinimumSignificantDigits:](v13, "setMinimumSignificantDigits:", 3LL);
      -[NSNumberFormatter setUsesSignificantDigits:](v13, "setUsesSignificantDigits:", 1LL);
    }

    else
    {
      -[NSNumberFormatter setMaximumFractionDigits:](v13, "setMaximumFractionDigits:", a1);
      if (a4) {
        -[NSNumberFormatter setMinimumFractionDigits:](v13, "setMinimumFractionDigits:", a1);
      }
    }

    -[NSNumberFormatter setLocale:](v13, "setLocale:", [MEMORY[0x189603F90] currentLocale]);
    -[NSNumberFormatter setUsesGroupingSeparator:](v13, "setUsesGroupingSeparator:", 1LL);
    -[NSNumberFormatter setRoundingMode:](v13, "setRoundingMode:", a2);
    [(id)fileSizeFormatter_numberFormatterCache setObject:v13 forKey:v11];
    return v13;
  }

  return result;
}

  location1 = self->_location1;
  if (location1)
  {
    uint64_t v7 = malloc(0x10uLL);
    options1 = self->_options1;
    buf[0] = location1;
    *uint64_t v7 = options1;
    location2 = self->_location2;
    id v10 = 1LL;
    if (!location2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  location2 = self->_location2;
  if (location2)
  {
    uint64_t v7 = malloc(0x10uLL);
    LODWORD(v10) = 0;
LABEL_12:
    buf[v10] = location2;
    v7[v10] = self->_options2;
    id v10 = (v10 + 1);
LABEL_13:
    Swift::String v11 = [MEMORY[0x189603F18] arrayWithObjects:buf count:v10];
    uint64_t v12 = MEMORY[0x1895F87A8];
    v16[0] = MEMORY[0x1895F87A8];
    v16[1] = 3221225472LL;
    v16[2] = __36__NSFileWritingWritingClaim_granted__block_invoke;
    v16[3] = &unk_189CA3C30;
    v16[4] = self;
    v16[5] = v7;
    -[NSFileAccessClaim makeProvidersProvideItemsForReadingLocations:options:andWritingLocationsIfNecessary:options:thenContinue:]( self,  "makeProvidersProvideItemsForReadingLocations:options:andWritingLocationsIfNecessary:options:thenContinue:",  0LL,  0LL,  v11,  v7,  v16);
    v15[0] = v12;
    v15[1] = 3221225472LL;
    v15[2] = __36__NSFileWritingWritingClaim_granted__block_invoke_6;
    v15[3] = &unk_189C9A030;
    v15[4] = self;
    -[NSFileAccessClaim whenRevokedPerformProcedure:](self, "whenRevokedPerformProcedure:", v15);
  }

  -[NSFileAccessClaim unblockClaimerForReason:](self, "unblockClaimerForReason:", @"Initial blockage");
}

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

  Swift::String v8 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: Custom transports do not support this method.", _NSMethodExceptionProem((objc_class *)self, a2)), 0 reason userInfo];
  objc_exception_throw(v8);
  -[NSXPCConnection _setLanguages:](v9, v10, v11);
}

  id v10 = v6[5];
  _Block_object_dispose(&v13, 8);
  return v10;
}

  id v6 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: Remote connections do not support this method.", _NSMethodExceptionProem((objc_class *)self, a2)), 0 reason userInfo];
  objc_exception_throw(v6);
  -[NSXPCListener _setQueue:](v7, v8, v9);
}

uint64_t partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)( a1,  a2,  *(void *)(v3 + 24),  a3);
}

{
  return partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t result = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(a1, a2, *(void *)(v3 + 24));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
  }

  return result;
}

uint64_t AttributedString.Guts.init(string:runs:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  int v12 = BigString.isEmpty.getter();
  if (a2)
  {
    unint64_t v13 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v13);
    uint64_t result = swift_unknownObjectRelease_n();
    if ((((a4 == 0) ^ v12) & 1) == 0)
    {
LABEL_3:
      __int128 v15 = a1[1];
      *(_OWORD *)(v6 + 16) = *a1;
      *(_OWORD *)(v6 + 32) = v15;
      *(_OWORD *)(v6 + 48) = a1[2];
      *(void *)(v6 + 64) = a2;
      *(void *)(v6 + 72) = a3;
      *(void *)(v6 + 80) = a4;
      *(void *)(v6 + 88) = a5;
      return v6;
    }
  }

  else
  {
    unint64_t v16 = swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v16);
    uint64_t result = swift_unknownObjectRelease();
    if ((v12 & 1) != 0) {
      goto LABEL_3;
    }
  }

  __break(1u);
  return result;
}

uint64_t AttributedString.Guts.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AttributedString.Guts()
{
  return objc_opt_self();
}

_OWORD *AttributedString.Guts.copy(in:)(unint64_t *a1)
{
  uint64_t v2 = v1;
  __int128 v4 = *(_OWORD *)(v1 + 32);
  v26[6] = *(_OWORD *)(v1 + 16);
  v26[7] = v4;
  v26[8] = *(_OWORD *)(v1 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v25);
  BigString.init(_:)();
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v2 + 72);
  uint64_t v7 = *(void *)(v2 + 80);
  unint64_t v8 = *a1;
  uint64_t v9 = *a1 >> 11;
  unint64_t v10 = a1[4];
  swift_unknownObjectRetain();
  uint64_t v11 = specialized Rope.extract<A>(from:to:in:)(v9, v10 >> 11, v5, v6, v7);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_unknownObjectRelease();
  uint64_t v18 = (_OWORD *)swift_allocObject();
  outlined retain of Locale((uint64_t)v26);
  swift_unknownObjectRetain();
  AttributedString.Guts.init(string:runs:)(v26, v11, v13, v15, v17);
  if ((BigString.startIndex.getter() ^ v8) > 0x3FF || (BigString.endIndex.getter() ^ v10) >= 0x400)
  {
    __int128 v19 = v18[2];
    v26[3] = v18[1];
    v26[4] = v19;
    v26[5] = v18[3];
    unint64_t v20 = BigString.startIndex.getter();
    unint64_t v21 = BigString.endIndex.getter();
    uint64_t v22 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v20 >> 11, v21 >> 11);
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v22, v23, 1, 0LL);
  }

  swift_release();
  outlined release of Locale((uint64_t)v26);
  swift_unknownObjectRelease();
  return v18;
}

Swift::UInt AttributedString.Guts.characterwiseHash(in:into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_retain();
  AttributedString.Runs.init(_:in:)(v4, &v137);
  uint64_t v5 = *((void *)&v137 + 1);
  uint64_t v6 = *((void *)&v141 + 1);
  Swift::UInt result = *((void *)&v141 + 1) - *((void *)&v137 + 1);
  if (__OFSUB__(*((void *)&v141 + 1), *((void *)&v137 + 1))) {
    goto LABEL_140;
  }
  unint64_t v87 = *((void *)&v138 + 1);
  uint64_t v88 = v138;
  uint64_t v8 = *((void *)&v139 + 1);
  uint64_t v9 = v139;
  uint64_t v11 = *((void *)&v140 + 1);
  uint64_t v10 = v140;
  uint64_t v90 = v141;
  Hasher._combine(_:)(result);
  if (v5 == v6) {
    return outlined release of AttributedString.Runs((uint64_t)&v137);
  }
  uint64_t v80 = *((void *)&v146 + 1);
  uint64_t v81 = v146;
  unint64_t v78 = *((void *)&v145 + 1);
  uint64_t v79 = v147;
  int64_t v76 = *((void *)&v147 + 1) >> 11;
  unint64_t v77 = *((void *)&v145 + 1) >> 10;
  id v89 = (void *)v137;
  unint64_t v85 = (__int128 *)(v137 + 16);
  Swift::UInt v73 = (_OWORD *)(v2 + 16);
  Swift::UInt result = outlined retain of AttributedString.Runs((uint64_t)&v137);
  uint64_t v74 = v6;
  uint64_t v75 = a2;
  do
  {
    if (v5 >= v6)
    {
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }

    __int128 v109 = v147;
    __int128 v110 = v148;
    uint64_t v111 = v149;
    __int128 v105 = v143;
    __int128 v106 = v144;
    __int128 v107 = v145;
    __int128 v108 = v146;
    __int128 v101 = v139;
    __int128 v102 = v140;
    __int128 v103 = v141;
    __int128 v104 = v142;
    __int128 v99 = v137;
    __int128 v100 = v138;
    v98[0] = v5;
    v98[1] = v88;
    v98[2] = v87;
    v98[3] = v9;
    v98[4] = v8;
    v98[5] = v10;
    v98[6] = v11;
    v98[7] = v90;
    Swift::UInt result = (Swift::UInt)AttributedString.Runs._resolve(_:)(v98, &v91);
    if (v91 != v89[11]) {
      goto LABEL_121;
    }
    Swift::UInt v82 = v8;
    uint64_t v18 = v5;
    unint64_t v19 = v92;
    unint64_t v21 = v94;
    uint64_t v20 = v95;
    uint64_t v22 = v96;
    uint64_t v23 = v97;
    if (v93)
    {
      Swift::String v24 = (void *)(v93 + 24 * ((v92 >> ((4 * *(_BYTE *)(v93 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v26 = v24[3];
      uint64_t v25 = v24[4];
      uint64_t v27 = v24[5];
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      uint64_t v84 = v25;
      swift_bridgeObjectRetain();
      uint64_t v83 = v27;
      Swift::UInt result = swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v28 = v89[8];
      outlined retain of AttributedString.Runs((uint64_t)&v137);
      swift_unknownObjectRetain();
      unint64_t v26 = specialized Rope._Node.subscript.getter(v19, v28);
      uint64_t v83 = v30;
      uint64_t v84 = v29;
      Swift::UInt result = swift_unknownObjectRelease();
    }

    if (v77 >= v21 >> 10) {
      unint64_t v31 = v78;
    }
    else {
      unint64_t v31 = v21;
    }
    if (v77 >= v21 >> 10)
    {
      uint64_t v20 = v81;
      uint64_t v22 = v80;
      uint64_t v23 = v79;
    }

    if (__OFADD__(v26, v21 >> 11)) {
      goto LABEL_122;
    }
    else {
      unint64_t v32 = v76;
    }
    __int128 v33 = v85[1];
    __int128 v132 = *v85;
    __int128 v133 = v33;
    __int128 v134 = v85[2];
    Swift::UInt result = BigString.utf8.getter();
    if (__OFSUB__(v32, v31 >> 11)) {
      goto LABEL_123;
    }
    unint64_t v34 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v36 = v35;
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    Swift::UInt result = outlined release of Locale((uint64_t)v112);
    if (v34 >> 10 < v31 >> 10) {
      goto LABEL_124;
    }
    unint64_t v116 = v31;
    uint64_t v117 = v20;
    uint64_t v118 = v22;
    uint64_t v119 = v23;
    unint64_t v120 = v34;
    uint64_t v121 = v36;
    uint64_t v122 = v38;
    uint64_t v123 = v40;
    uint64_t v41 = v88;
    uint64_t v42 = v89[8];
    uint64_t v43 = v89[9];
    uint64_t v44 = v89[11];
    uint64_t v86 = v89[10];
    if (v9 == 1 || v88 != v44)
    {
      if (v42) {
        uint64_t v48 = v89[9];
      }
      else {
        uint64_t v48 = 0LL;
      }
      if (v18 < 0) {
        goto LABEL_133;
      }
      uint64_t v45 = v18;
      if (v48 < v18) {
        goto LABEL_133;
      }
      if (!v42 || v18 >= v43 || !*(_WORD *)(v42 + 16))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v137);
        unint64_t v62 = swift_unknownObjectRetain();
        unint64_t v46 = specialized Rope._endPath.getter(v62);
        Swift::UInt result = swift_unknownObjectRelease();
        uint64_t v9 = 0LL;
        if (!v42)
        {
          uint64_t v47 = 0LL;
          goto LABEL_105;
        }

LABEL_141:
                __break(1u);
LABEL_142:
                __break(1u);
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
                return result;
              }

              goto LABEL_97;
            }

            unint64_t v63 = 2LL;
LABEL_103:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v46 = v49 & 0xFFFFFFFFFFFFF0FFLL | (v63 << 8);
            goto LABEL_67;
          }
        }

  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_142:
  char v160 = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_143:
  result._unint64_t object = v161;
  result._uint64_t countAndFlagsBits = v160;
  return result;
}

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v95 = *((void *)v63._rawValue + 2);
    if (HIDWORD(v95)) {
      goto LABEL_161;
    }
    _So9NSDecimala__length_setter(v95, &v129);
    LODWORD(v126) = v110;
    WORD2(v126) = v99;
    HIWORD(v126) = v25;
    LOWORD(v127) = v122;
    WORD1(v127) = v120;
    WORD2(v127) = v118;
    HIWORD(v127) = v116;
    LOWORD(v128) = v114;
    HIWORD(v128) = v112;
    goto LABEL_143;
  }

  unint64_t v78 = 0LL;
LABEL_121:
  if (v78 <= v64) {
    unint64_t v92 = v64;
  }
  else {
    unint64_t v92 = v78;
  }
  do
  {
    if (v92 == v78)
    {
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
      goto LABEL_153;
    }

    if (v78 >= *((void *)v63._rawValue + 2)) {
      goto LABEL_150;
    }
    v62[v78] = *(_WORD *)(v40 + 32 + 2 * v78);
    ++v78;
  }

  while ((uint64_t)v78 < (uint64_t)v64);
  LODWORD(v77) = 1;
LABEL_128:
  if ((uint64_t)v78 < (uint64_t)v65)
  {
    while (1)
    {
LABEL_129:
      if (v78 >= v65) {
        goto LABEL_157;
      }
      unint64_t v64 = *((void *)v63._rawValue + 2);
      if (v78 < v64) {
        break;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      LODWORD(v77) = HIWORD(v61);
      unint64_t v78 = v64;
    }

    uint64_t v93 = v77 + (*(unsigned __int16 *)(v22 + 32 + 2 * v78) ^ 0xFFFF);
    --v65;
    unint64_t v64 = v22 + 34;
    while (1)
    {
      LODWORD(v77) = HIWORD(v93);
      v62[v78] = v93;
      if (v65 == v78) {
        break;
      }
      uint64_t v93 = v77 + (*(unsigned __int16 *)(v64 + 2 * v78++) ^ 0xFFFF);
      if (v78 >= *((void *)v63._rawValue + 2)) {
        goto LABEL_134;
      }
    }
  }

    uint64_t v122 = specialized Collection.first.getter(countAndFlagsBits, object);
    if (v123)
    {
      uint64_t v124 = v122;
      __int128 v125 = v123;
      unint64_t v68 = countAndFlagsBits;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v218 = String.index(after:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::UInt v82 = object & 0x2000000000000000LL;
      uint64_t v81 = object;
      uint64_t v83 = HIBYTE(object) & 0xF;
      uint64_t v84 = v68 & 0xFFFFFFFFFFFFLL;
      uint64_t v29 = v124;
      unint64_t v31 = v125;
      __int128 v33 = v212;
      unint64_t v78 = v194;
LABEL_143:
      if (v82) {
        uint64_t v28 = v83;
      }
      else {
        uint64_t v28 = v84;
      }
      if (!v200 || v28)
      {
        v221 = v28;
        if (v200)
        {
          __int128 v126 = v81;
          uint64_t v22 = v216;
          if (v28)
          {
LABEL_150:
            __int128 v127 = v33 & 0x2000000000000000LL;
            __int128 v128 = HIBYTE(v33) & 0xF;
            uint64_t v43 = v22 & 0xFFFFFFFFFFFFLL;
            goto LABEL_156;
          }

                __break(1u);
LABEL_142:
                __break(1u);
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
                return result;
              }

              goto LABEL_97;
            }

            unint64_t v67 = 2LL;
LABEL_103:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t v50 = v53 & 0xFFFFFFFFFFFFF0FFLL | (v67 << 8);
            goto LABEL_67;
          }
        }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v115 = *((void *)v46._rawValue + 2);
    if (HIDWORD(v115)) {
      goto LABEL_163;
    }
    _So9NSDecimala__length_setter(v115, &v155);
    LODWORD(v152) = v97;
    WORD2(v152) = v99;
    HIWORD(v152) = v143;
    LOWORD(v153) = v95;
    WORD1(v153) = v120;
    WORD2(v153) = v125;
    HIWORD(v153) = v150;
    LOWORD(v154) = v147;
    HIWORD(v154) = v96;
LABEL_143:
    unint64_t v116 = _So9NSDecimala__isNegative_getter(&v152);
    _So9NSDecimala__isNegative_setter(v116, &v155);
    goto LABEL_144;
  }

  id v98 = 0LL;
  uint64_t v20 = v124;
  __int128 v99 = v145;
LABEL_121:
  if (v98 <= v79) {
    Swift::Int v112 = v79;
  }
  else {
    Swift::Int v112 = v98;
  }
  do
  {
    if (v112 == v98)
    {
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }

    if (v98 >= *((void *)v46._rawValue + 2)) {
      goto LABEL_152;
    }
    v78[v98] = *(_WORD *)(v48 + 32 + 2 * v98);
    ++v98;
  }

  while ((uint64_t)v98 < (uint64_t)v79);
  LODWORD(v94) = 1;
LABEL_128:
  if ((uint64_t)v98 < (uint64_t)v80)
  {
    while (1)
    {
LABEL_129:
      if (v98 >= v80) {
        goto LABEL_159;
      }
      uint64_t v79 = *((void *)v46._rawValue + 2);
      if (v98 < v79) {
        break;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      LODWORD(v94) = HIWORD(v77);
      id v98 = v79;
    }

    char v113 = v94 + (*(unsigned __int16 *)(v75 + 32 + 2 * v98) ^ 0xFFFF);
    --v80;
    uint64_t v79 = v75 + 34;
    while (1)
    {
      LODWORD(v94) = HIWORD(v113);
      v78[v98] = v113;
      if (v80 == v98) {
        break;
      }
      char v113 = v94 + (*(unsigned __int16 *)(v79 + 2 * v98++) ^ 0xFFFF);
      if (v98 >= *((void *)v46._rawValue + 2)) {
        goto LABEL_134;
      }
    }
  }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v115 = *((void *)v46._rawValue + 2);
    if (HIDWORD(v115)) {
      goto LABEL_163;
    }
    _So9NSDecimala__length_setter(v115, &v155);
    LODWORD(v152) = v97;
    WORD2(v152) = v99;
    HIWORD(v152) = v143;
    LOWORD(v153) = v95;
    WORD1(v153) = v120;
    WORD2(v153) = v125;
    HIWORD(v153) = v150;
    LOWORD(v154) = v147;
    HIWORD(v154) = v96;
LABEL_143:
    unint64_t v116 = _So9NSDecimala__isNegative_getter(&v152);
    _So9NSDecimala__isNegative_setter(v116, &v155);
    goto LABEL_144;
  }

  id v98 = 0LL;
  uint64_t v20 = v124;
  __int128 v99 = v145;
LABEL_121:
  if (v98 <= v79) {
    Swift::Int v112 = v79;
  }
  else {
    Swift::Int v112 = v98;
  }
  do
  {
    if (v112 == v98)
    {
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }

    if (v98 >= *((void *)v46._rawValue + 2)) {
      goto LABEL_152;
    }
    v78[v98] = *(_WORD *)(v48 + 32 + 2 * v98);
    ++v98;
  }

  while ((uint64_t)v98 < (uint64_t)v79);
  LODWORD(v94) = 1;
LABEL_128:
  if ((uint64_t)v98 < (uint64_t)v80)
  {
    while (1)
    {
LABEL_129:
      if (v98 >= v80) {
        goto LABEL_159;
      }
      uint64_t v79 = *((void *)v46._rawValue + 2);
      if (v98 < v79) {
        break;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      LODWORD(v94) = HIWORD(v77);
      id v98 = v79;
    }

    char v113 = v94 + (*(unsigned __int16 *)(v75 + 32 + 2 * v98) ^ 0xFFFF);
    --v80;
    uint64_t v79 = v75 + 34;
    while (1)
    {
      LODWORD(v94) = HIWORD(v113);
      v78[v98] = v113;
      if (v80 == v98) {
        break;
      }
      char v113 = v94 + (*(unsigned __int16 *)(v79 + 2 * v98++) ^ 0xFFFF);
      if (v98 >= *((void *)v46._rawValue + 2)) {
        goto LABEL_134;
      }
    }
  }

            outlined destroy of Any?( (uint64_t)v206,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?( (uint64_t)v207,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v208);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v210);
            outlined destroy of Any?( (uint64_t)&v246,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v211,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v216,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            __int128 v107 = v192;
            if ((v113 & 1) == 0) {
              goto LABEL_173;
            }
LABEL_142:
            v112 += 2;
            ++v111;
            if (v114 == v193)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              __int128 v33 = v184;
              uint64_t v84 = v184[8];
              uint64_t v88 = v184[11];
              unint64_t v85 = v169;
              *(void *)&v182 = v170;
              uint64_t v65 = v173;
              *(void *)&v246 = v173;
              *((void *)&v246 + 1) = v169;
              unint64_t v64 = v168;
              *(void *)&v247 = v168;
              uint64_t v25 = __OFADD__((void)v181, 1LL);
              *(void *)&v181 = v181 + 1;
              if (!v25) {
                goto LABEL_113;
              }
              __break(1u);
LABEL_171:
              outlined destroy of AttributedString._AttributeValue((uint64_t)v210);
LABEL_172:
              outlined destroy of Any?( (uint64_t)&v246,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?( (uint64_t)&v211,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v216,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_173:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              __int128 v33 = v184;
              goto LABEL_174;
            }
          }
        }
      }

      uint64_t v96 = *(unsigned __int8 *)(v84 + 18);
      uint64_t v97 = (4 * v96 + 8) & 0x3C;
      id v98 = (v85 >> v97) & 0xF;
      *(void *)&v202 = v98;
      if (v96)
      {
        swift_unknownObjectRetain();
        __int128 v99 = specialized closure #1 in Rope._Node.formSuccessor(of:)( v84 + 24,  (uint64_t *)&v202,  (uint64_t)&v246,  v84,  v96);
        swift_unknownObjectRelease();
        if ((v99 & 1) != 0)
        {
          swift_unknownObjectRelease_n();
          uint64_t v95 = *((void *)&v246 + 1);
          goto LABEL_128;
        }
      }

      else
      {
        __int128 v102 = v98 + 1;
        if (v98 + 1 < (unint64_t)*(unsigned __int16 *)(v84 + 16))
        {
          swift_unknownObjectRelease_n();
          uint64_t v95 = (v102 << v97) | ((-15LL << v97) - 1) & v85;
          __int128 v100 = v84;
          goto LABEL_129;
        }
      }

      __int128 v103 = *(unsigned __int8 *)(v84 + 18);
      __int128 v104 = *(unsigned __int16 *)(v84 + 16);
      swift_unknownObjectRelease_n();
      uint64_t v95 = ((-15LL << ((4 * v103 + 8) & 0x3C)) - 1) & v103 | (unint64_t)(v104 << ((4 * v103 + 8) & 0x3C));
      __int128 v101 = v195;
      __int128 v100 = 0LL;
      *(void *)&v246 = v180;
      goto LABEL_133;
    }

                      uint64_t v70 = (v78 - 1) & v78;
                      int64_t v76 = __clz(__rbit64(v78)) + (v69 << 6);
                    }

                    uint64_t v80 = (uint64_t *)(v12[6] + 16 * v76);
                    Swift::UInt v82 = *v80;
                    uint64_t v81 = v80[1];
                    outlined init with copy of AttributedString._AttributeValue(v12[7] + 72 * v76, (uint64_t)&v101);
                    __int128 v108 = v103;
                    __int128 v109 = v104;
                    __int128 v110 = v105;
                    __int128 v106 = v101;
                    __int128 v107 = v102;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    uint64_t v83 = Hasher._finalize()();
                    uint64_t v84 = -1LL << *(_BYTE *)(v68 + 32);
                    unint64_t v85 = v83 & ~v84;
                    uint64_t v86 = v85 >> 6;
                    if (((-1LL << v85) & ~*(void *)(v71 + 8 * (v85 >> 6))) != 0)
                    {
                      __int128 v72 = __clz(__rbit64((-1LL << v85) & ~*(void *)(v71 + 8 * (v85 >> 6)))) | v85 & 0x7FFFFFFFFFFFFFC0LL;
                    }

                    else
                    {
                      unint64_t v87 = 0;
                      uint64_t v88 = (unint64_t)(63 - v84) >> 6;
                      do
                      {
                        if (++v86 == v88 && (v87 & 1) != 0) {
                          goto LABEL_158;
                        }
                        id v89 = v86 == v88;
                        if (v86 == v88) {
                          uint64_t v86 = 0LL;
                        }
                        v87 |= v89;
                        uint64_t v90 = *(void *)(v71 + 8 * v86);
                      }

                      while (v90 == -1);
                      __int128 v72 = __clz(__rbit64(~v90)) + (v86 << 6);
                    }

                    *(void *)(v71 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v72;
                    Swift::UInt v73 = (void *)(*(void *)(v68 + 48) + 16 * v72);
                    _OWORD *v73 = v82;
                    v73[1] = v81;
                    uint64_t v74 = *(void *)(v68 + 56) + 72 * v72;
                    *(_OWORD *)(v74 + 16) = v107;
                    *(_OWORD *)(v74 + 32) = v108;
                    *(_OWORD *)(v74 + 48) = v109;
                    *(void *)(v74 + 64) = v110;
                    *(_OWORD *)uint64_t v74 = v106;
                    ++*(void *)(v68 + 16);
                    if (!--v97) {
                      goto LABEL_151;
                    }
                  }
                }

                unint64_t v26 = v35;
              }
            }
          }

  swift_release();
  return 0LL;
}

                          uint64_t v88 = (v98 - 1) & v98;
                          uint64_t v95 = v99;
                          uint64_t v96 = __clz(__rbit64(v98)) + (v99 << 6);
                        }

                        __int128 v101 = 16 * v96;
                        __int128 v102 = (uint64_t *)(*(void *)(v3 + 48) + v101);
                        __int128 v104 = *v102;
                        __int128 v103 = v102[1];
                        __int128 v105 = *(void *)(v3 + 56) + v101;
                        __int128 v106 = *(void *)v105;
                        __int128 v107 = *(_BYTE *)(v105 + 8);
                        Hasher.init(_seed:)();
                        swift_bridgeObjectRetain();
                        String.hash(into:)();
                        __int128 v108 = Hasher._finalize()();
                        __int128 v109 = -1LL << *(_BYTE *)(v86 + 32);
                        __int128 v110 = v108 & ~v109;
                        uint64_t v111 = v110 >> 6;
                        if (((-1LL << v110) & ~*(void *)(v89 + 8 * (v110 >> 6))) != 0)
                        {
                          uint64_t v90 = __clz(__rbit64((-1LL << v110) & ~*(void *)(v89 + 8 * (v110 >> 6)))) | v110 & 0x7FFFFFFFFFFFFFC0LL;
                        }

                        else
                        {
                          Swift::Int v112 = 0;
                          char v113 = (unint64_t)(63 - v109) >> 6;
                          do
                          {
                            if (++v111 == v113 && (v112 & 1) != 0) {
                              goto LABEL_155;
                            }
                            char v114 = v111 == v113;
                            if (v111 == v113) {
                              uint64_t v111 = 0LL;
                            }
                            v112 |= v114;
                            unint64_t v115 = *(void *)(v89 + 8 * v111);
                          }

                          while (v115 == -1);
                          uint64_t v90 = __clz(__rbit64(~v115)) + (v111 << 6);
                        }

                        *(void *)(v89 + ((v90 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v90;
                        uint64_t v91 = 16 * v90;
                        unint64_t v92 = (void *)(*(void *)(v86 + 48) + v91);
                        *unint64_t v92 = v104;
                        v92[1] = v103;
                        uint64_t v93 = *(void *)(v86 + 56) + v91;
                        *(void *)uint64_t v93 = v106;
                        *(_BYTE *)(v93 + 8) = v107;
                        ++*(void *)(v86 + 16);
                        BOOL v55 = v119 - 1;
                        uint64_t v3 = v123;
                        unint64_t v87 = v95;
                        if (v119 == 1) {
                          goto LABEL_151;
                        }
                      }
                    }

                    unint64_t v31 = v41;
                  }
                }
              }
            }

                    __break(1u);
LABEL_142:
                    __break(1u);
                  }

                  uint64_t v57 = v46 + 6;
                }
              }
            }
          }
        }

  __break(1u);
LABEL_142:
  Swift::UInt result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __int128 v72 = v185;
  if (v178 >= 1)
  {
    *(double *)&v190 = v110;
    *(double *)v193 = v13;
    *((void *)&v193[0] + 1) = v17;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)((double *)&v190, (uint64_t)v193, (uint64_t)v194);
    if ((LOBYTE(v194[2]) & 1) == 0) {
      __int128 v110 = v110 - v194[1];
    }
  }

  uint64_t v9 = v101 + v110 + 0.0;
LABEL_145:
  uint64_t v118 = v174;
  if (!v72) {
    uint64_t v118 = 1;
  }
  if ((v118 & 1) != 0)
  {
    uint64_t v119 = v179;
    unint64_t v120 = v180;
    goto LABEL_166;
  }

  uint64_t v121 = fmod(v9, 1.0);
  uint64_t v122 = v9 - v121;
  if (v121 < 0.0) {
    uint64_t v122 = v9 - v121 + -1.0;
  }
  uint64_t v123 = (double)v72;
  if (v121 >= 0.0) {
    uint64_t v124 = v121;
  }
  else {
    uint64_t v124 = v121 + 1.0;
  }
  __int128 v125 = v123 * 86400.0 + v122;
  *(double *)__src = v9;
  v126._time = _CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE(v123 * 86400.0));
  *(double *)__src = v125;
  if (v126._time != _CalendarGregorian.timeInDay(for:)(v126))
  {
    __int128 v127 = swift_getObjectType();
    *(double *)__src = v125;
    __int128 v128 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v17 + 40);
    __int128 v129 = v128(__src, v127, v17);
    *(double *)__src = v9;
    Swift::UInt result = v128(__src, v127, v17);
    if (v129 != result)
    {
      __int128 v130 = result;
      __int128 v131 = result - v129;
      if (!__OFSUB__(result, v129))
      {
        __int128 v132 = v125 + (double)v131;
        *(double *)__src = v132;
        if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v131)) == v126._time)
        {
          __int128 v125 = v132;
        }

        else if (v130 >= v129)
        {
          __int128 v125 = v132;
        }

        goto LABEL_161;
      }

                      Swift::UInt v82 = v49;
                      unint64_t v77 = (v86 - 1) & v86;
                      uint64_t v84 = __clz(__rbit64(v86)) + (v76 << 6);
                    }

                    uint64_t v88 = *(void *)(v3 + 56);
                    id v89 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v84);
                    uint64_t v91 = *v89;
                    uint64_t v90 = v89[1];
                    outlined init with copy of AttributedString._AttributeValue(v88 + 72 * v84, (uint64_t)&v117);
                    char v114 = v119;
                    unint64_t v115 = v120;
                    unint64_t v116 = v121;
                    Swift::Int v112 = v117;
                    char v113 = v118;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    unint64_t v92 = Hasher._finalize()();
                    uint64_t v93 = -1LL << *(_BYTE *)(v75 + 32);
                    unint64_t v94 = v92 & ~v93;
                    uint64_t v95 = v94 >> 6;
                    if (((-1LL << v94) & ~*(void *)(v78 + 8 * (v94 >> 6))) != 0)
                    {
                      uint64_t v79 = __clz(__rbit64((-1LL << v94) & ~*(void *)(v78 + 8 * (v94 >> 6)))) | v94 & 0x7FFFFFFFFFFFFFC0LL;
                    }

                    else
                    {
                      uint64_t v96 = 0;
                      uint64_t v97 = (unint64_t)(63 - v93) >> 6;
                      do
                      {
                        if (++v95 == v97 && (v96 & 1) != 0) {
                          goto LABEL_155;
                        }
                        id v98 = v95 == v97;
                        if (v95 == v97) {
                          uint64_t v95 = 0LL;
                        }
                        v96 |= v98;
                        __int128 v99 = *(void *)(v78 + 8 * v95);
                      }

                      while (v99 == -1);
                      uint64_t v79 = __clz(__rbit64(~v99)) + (v95 << 6);
                    }

                    *(void *)(v78 + ((v79 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v79;
                    uint64_t v80 = (void *)(*(void *)(v75 + 48) + 16 * v79);
                    *uint64_t v80 = v91;
                    v80[1] = v90;
                    uint64_t v81 = *(void *)(v75 + 56) + 72 * v79;
                    *(_OWORD *)(v81 + 16) = v113;
                    *(_OWORD *)(v81 + 32) = v114;
                    *(_OWORD *)(v81 + 48) = v115;
                    *(void *)(v81 + 64) = v116;
                    *(_OWORD *)uint64_t v81 = v112;
                    ++*(void *)(v75 + 16);
                    uint64_t v49 = (uint64_t *)((char *)v82 - 1);
                    uint64_t v3 = v110;
                  }
                }

                uint64_t v29 = v41;
              }
            }
          }

  if (!v86) {
    uint64_t v86 = 1LL;
  }
  uint64_t v70 = -[NSCalendarDate initWithYear:month:day:hour:minute:second:timeZone:]( self,  "initWithYear:month:day:hour:minute:second:timeZone:",  v52,  v68,  v11);
  -[NSCalendarDate setCalendarFormat:](v70, "setCalendarFormat:", v73);
  if (v70 && v82) {
    v70->_timeIntervalSinceReferenceDate = (double)v82 / 1000.0 + 0.0001 + v70->_timeIntervalSinceReferenceDate;
  }
  return v70;
}

LABEL_106:
    *(void *)&__int128 v99 = v41;
    *((void *)&v99 + 1) = v46;
    *(void *)&__int128 v100 = v9;
    BOOL v55 = __OFADD__(v45, 1LL);
    uint64_t v5 = v45 + 1;
    if (v55) {
      goto LABEL_125;
    }
    if (v41 != v44) {
      goto LABEL_126;
    }
    if (v9)
    {
      unint64_t v69 = *(void *)(v9 + 24 * ((v46 >> ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v70 = v86;
    }

    else
    {
      swift_unknownObjectRetain();
      unint64_t v71 = v46;
      uint64_t v70 = v86;
      unint64_t v69 = specialized Rope._Node.subscript.getter(v71, v42);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    Swift::UInt result = swift_bridgeObjectRelease();
    if (__OFADD__(v47, v69)) {
      goto LABEL_127;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v99, v42, v43, v70, v44);
    swift_unknownObjectRelease_n();
    unint64_t v87 = *((void *)&v99 + 1);
    uint64_t v88 = v99;
    uint64_t v9 = v100;
    if (v90 == 2)
    {
      __int128 v12 = v85[1];
      __int128 v129 = *v85;
      __int128 v130 = v12;
      __int128 v131 = v85[2];
      uint64_t v13 = &v114;
      BigString.utf8.getter();
      BigString.startIndex.getter();
    }

    else
    {
      __int128 v72 = v85[1];
      __int128 v126 = *v85;
      __int128 v127 = v72;
      __int128 v128 = v85[2];
      BigString.utf8.getter();
      Swift::UInt result = v82;
      if (__OFSUB__(v47 + v69, v82 >> 11)) {
        goto LABEL_134;
      }
      uint64_t v13 = &v113;
    }

    uint64_t v8 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v10 = v14;
    uint64_t v11 = v15;
    uint64_t v90 = v16;
    outlined release of Locale((uint64_t)v13);
    outlined release of AttributedString.Runs((uint64_t)&v137);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v75, v84);
    specialized Set.hash(into:)(v75, v83);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __int128 v17 = v73[1];
    v124[0] = *v73;
    v124[1] = v17;
    __int128 v125 = v73[2];
    v135[0] = v124[0];
    v135[1] = v17;
    v135[2] = v125;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v135, (uint64_t)v136);
    outlined retain of Locale((uint64_t)v136);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v124);
    BigSubstring.hash(into:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::UInt result = outlined release of Locale((uint64_t)v115);
    uint64_t v6 = v74;
  }

  while (v5 != v74);
  outlined release of AttributedString.Runs((uint64_t)&v137);
  return outlined release of AttributedString.Runs((uint64_t)&v137);
}

  __break(1u);
LABEL_107:
  swift_once();
LABEL_59:
  a5 = (os_unfair_lock_s *)static CalendarCache.cache;
  uint64_t v45 = static CalendarCache.cache + 16;
  uint64_t v20 = static CalendarCache.cache + 60;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)v20);
  closure #1 in CalendarCache.fixed(_:)(v45, 7LL, __src);
  if (!v71)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)v20);
    swift_release_n();
    uint64_t v79 = __src[0];
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v86 = &v66;
    uint64_t v20 = static TimeZoneCache.cache;
    unint64_t v46 = static TimeZoneCache.cache + 16;
    a5 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
    swift_retain_n();
    os_unfair_lock_lock(a5);
    closure #1 in TimeZoneCache.offsetFixed(_:)(v46, 0LL, __src);
    os_unfair_lock_unlock(a5);
    swift_release_n();
    if (!*(void *)&__src[0]) {
      goto LABEL_116;
    }
    __dst[0] = __src[0];
    Calendar.timeZone.setter((uint64_t *)__dst);
    __dst[0] = 0uLL;
    unint64_t v77 = 0LL;
    int64_t v76 = 0LL;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  &v76,  0LL,  1,  v24,  0,  v33,  0,  (uint64_t)__src,  v69,  0,  v70,  0,  v68,  0,  (uint64_t)v67,  0,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
    uint64_t v20 = *((void *)&v79 + 1);
    ObjectType = swift_getObjectType();
    memcpy(__dst, __src, 0x11AuLL);
    uint64_t v48 = *(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t, unint64_t))(v20 + 176);
    swift_unknownObjectRetain();
    v48(&v76, __dst, ObjectType, v20);
    swift_unknownObjectRelease();
    outlined release of DateComponents((uint64_t)__src);
    swift_unknownObjectRelease();
    if ((v77 & 1) == 0)
    {
      uint64_t v65 = v76;
      swift_release();
      void *v72 = v65;
      return;
    }

    if (v30)
    {
      uint64_t v49 = __OFSUB__(0LL, v24);
      Swift::String v24 = -v24;
      if (v49)
      {
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
        goto LABEL_117;
      }
    }

    if (v33 <= 127)
    {
      if (v69 <= 127)
      {
        if (v70 <= 127)
        {
          if (v33 >= -128 && v69 >= -128 && v70 >= -128 && v68 >= -128)
          {
            if (v68 <= 127)
            {
              if (!__OFSUB__(v24, 2001LL))
              {
                uint64_t v50 = (double)(uint64_t)v67;
                specialized static Date.daysSinceReferenceDate(year:month:day:)(v24 - 2001, v33, v69);
                char v52 = v51;
                swift_release();
                *(double *)__int128 v72 = (double)v70 * 3600.0 + (double)v68 * 60.0 + v50 + v52 * 86400.0;
                return;
              }

              goto LABEL_114;
            }

    swift_bridgeObjectRelease();
    uint64_t v80 = (unint64_t)String.subscript.getter() >> 14;
    if (v80 == v81 >> 14) {
      goto LABEL_107;
    }
    Swift::UInt v82 = v79;
    uint64_t v83 = Substring.index(before:)();
    if (Substring.subscript.getter() == 47 && v84 == 0xE100000000000000LL)
    {
LABEL_111:
      swift_bridgeObjectRelease();
    }

    else
    {
      v98[1] = v82;
      unint64_t v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v85 & 1) == 0)
      {
        while (v80 != v83 >> 14)
        {
          uint64_t v83 = Substring.index(before:)();
          if (Substring.subscript.getter() == 47 && v94 == 0xE100000000000000LL) {
            goto LABEL_111;
          }
          uint64_t v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v96 & 1) != 0) {
            goto LABEL_113;
          }
        }

    swift_bridgeObjectRelease();
    uint64_t v80 = (unint64_t)String.subscript.getter() >> 14;
    if (v80 == v81 >> 14) {
      goto LABEL_107;
    }
    Swift::UInt v82 = v79;
    uint64_t v83 = Substring.index(before:)();
    if (Substring.subscript.getter() == 47 && v84 == 0xE100000000000000LL)
    {
LABEL_111:
      swift_bridgeObjectRelease();
    }

    else
    {
      v98[1] = v82;
      unint64_t v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v85 & 1) == 0)
      {
        while (v80 != v83 >> 14)
        {
          uint64_t v83 = Substring.index(before:)();
          if (Substring.subscript.getter() == 47 && v94 == 0xE100000000000000LL) {
            goto LABEL_111;
          }
          uint64_t v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v96 & 1) != 0) {
            goto LABEL_113;
          }
        }

    *(void *)&__int128 v105 = v45;
    *((void *)&v105 + 1) = v50;
    *(void *)&__int128 v106 = v10;
    uint64_t v59 = __OFADD__(v49, 1LL);
    uint64_t v7 = v49 + 1;
    if (v59) {
      goto LABEL_125;
    }
    if (v45 != v48) {
      goto LABEL_126;
    }
    if (v10)
    {
      Swift::UInt v73 = *(void *)(v10 + 24 * ((v50 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v74 = v92;
    }

    else
    {
      swift_unknownObjectRetain();
      uint64_t v75 = v50;
      uint64_t v74 = v92;
      Swift::UInt v73 = specialized Rope._Node.subscript.getter(v75, v46);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    Swift::UInt result = swift_bridgeObjectRelease();
    int64_t v76 = v51 + v73;
    if (__OFADD__(v51, v73)) {
      goto LABEL_127;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v105, v46, v47, v74, v48);
    swift_unknownObjectRelease_n();
    uint64_t v93 = *((void *)&v105 + 1);
    unint64_t v94 = v105;
    uint64_t v10 = v106;
    if (v96 == 2)
    {
      uint64_t v14 = v91[1];
      v134[6] = *v91;
      v134[7] = v14;
      v134[8] = v91[2];
      uint64_t v15 = &v120;
      BigString.utf8.getter();
      BigString.startIndex.getter();
    }

    else
    {
      unint64_t v77 = v91[1];
      v134[3] = *v91;
      v134[4] = v77;
      v134[5] = v91[2];
      BigString.utf8.getter();
      Swift::UInt result = v88;
      if (__OFSUB__(v76, v88 >> 11)) {
        goto LABEL_134;
      }
      uint64_t v15 = &v119;
    }

    uint64_t v11 = BigString.UTF8View.index(_:offsetBy:)();
    __int128 v12 = v16;
    uint64_t v13 = v17;
    uint64_t v96 = v18;
    outlined release of Locale((uint64_t)v15);
    outlined release of AttributedString.Runs((uint64_t)&v137);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v81, v90);
    specialized Set.hash(into:)(v81, v89);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v19 = *v79;
    uint64_t v20 = v79[2];
    v134[1] = v79[1];
    v134[2] = v20;
    v134[0] = v19;
    unint64_t v21 = *v79;
    v135[1] = v79[1];
    v135[2] = v20;
    v135[0] = v21;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v135, (uint64_t)v136);
    outlined retain of Locale((uint64_t)v136);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v134);
    BigSubstring.hash(into:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::UInt result = outlined release of Locale((uint64_t)v121);
    uint64_t v8 = v80;
  }

  while (v7 != v80);
  outlined release of AttributedString.Runs((uint64_t)&v137);
LABEL_116:
  outlined release of AttributedString.Runs((uint64_t)&v137);
  return outlined release of AttributedString.Runs(v78);
}

        __break(1u);
LABEL_107:
        __break(1u);
        goto LABEL_108;
      }

  Swift::UInt result = swift_bridgeObjectRelease();
  uint64_t v74 = v134 & ((v13 >= v14) ^ (time < v14));
  *uint64_t v43 = time;
LABEL_107:
  *((_BYTE *)v43 + 8) = v74;
  return result;
}

  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  Swift::UInt result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

        if ((v72 & 1) != 0) {
          goto LABEL_146;
        }
        uint64_t v80 = &v47[16 * v49];
        Swift::UInt v82 = *(void *)v80;
        uint64_t v81 = *((void *)v80 + 1);
        int64_t v60 = __OFSUB__(v81, v82);
        uint64_t v83 = v81 - v82;
        if (v60) {
          goto LABEL_149;
        }
        if (v83 < v71) {
          goto LABEL_15;
        }
LABEL_114:
        uint64_t v88 = v49 - 1;
        if (v49 - 1 >= v12)
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
          goto LABEL_161;
        }

        if (!v10) {
          goto LABEL_164;
        }
        id v89 = v11;
        uint64_t v90 = v10;
        uint64_t v91 = &v47[16 * v88];
        unint64_t v92 = *(void *)v91;
        uint64_t v93 = &v47[16 * v49];
        unint64_t v94 = *((void *)v93 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v90 + 48LL * *(void *)v91),  (char *)(v90 + 48LL * *(void *)v93),  v90 + 48 * v94,  __dst);
        if (v1) {
          goto LABEL_122;
        }
        if (v94 < v92) {
          goto LABEL_139;
        }
        if (v49 > *((void *)v89 + 2)) {
          goto LABEL_140;
        }
        *(void *)uint64_t v91 = v92;
        *(void *)&v47[16 * v88 + 8] = v94;
        uint64_t v95 = *((void *)v89 + 2);
        if (v49 >= v95) {
          goto LABEL_141;
        }
        uint64_t v11 = v89;
        __int128 v12 = v95 - 1;
        memmove(&v47[16 * v49], v93 + 16, 16 * (v95 - 1 - v49));
        *((void *)v89 + 2) = v95 - 1;
        unint64_t v77 = v95 > 2;
        uint64_t v10 = v110;
        if (!v77) {
          goto LABEL_15;
        }
      }
    }

    __int128 v12 = 1LL;
    uint64_t v10 = v110;
LABEL_15:
    uint64_t v3 = v109;
    if (v9 >= v109)
    {
      uint64_t v8 = v107;
      goto LABEL_125;
    }
  }

  if (__OFADD__(v13, v108)) {
    goto LABEL_160;
  }
  if (v13 + v108 >= v3) {
    uint64_t v35 = v3;
  }
  else {
    uint64_t v35 = v13 + v108;
  }
  if (v35 >= v13)
  {
    if (v9 != v35)
    {
      uint64_t v36 = v104 + 48 * v9;
      do
      {
        uint64_t v37 = v13;
        uint64_t v38 = v36;
        do
        {
          if (*(_BYTE *)(v38 + 64) || *(_BYTE *)(v38 + 16)) {
            goto LABEL_167;
          }
          uint64_t v39 = (_OWORD *)(v38 + 48);
          uint64_t v40 = *(void *)(v38 + 48) == *(void *)v38 && *(void *)(v38 + 56) == *(void *)(v38 + 8);
          if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_163;
          }
          uint64_t v41 = *(_OWORD *)v38;
          uint64_t v42 = *(_OWORD *)(v38 + 16);
          uint64_t v43 = *(_OWORD *)(v38 + 32);
          *(_OWORD *)uint64_t v38 = *(_OWORD *)(v38 + 48);
          *(_OWORD *)(v38 + 24) = *(_OWORD *)(v38 + 72);
          uint64_t v44 = *(_BYTE *)(v38 + 88);
          *(_BYTE *)(v38 + 16) = *(_BYTE *)(v38 + 64);
          *(_BYTE *)(v38 + 40) = v44;
          v38 -= 48LL;
          *uint64_t v39 = v41;
          v39[1] = v42;
          ++v37;
          v39[2] = v43;
        }

        while (v9 != v37);
        ++v9;
        v36 += 48LL;
      }

      while (v9 != v35);
      uint64_t v9 = v35;
    }

    goto LABEL_74;
  }

              if (v25) {
                goto LABEL_432;
              }
LABEL_107:
              uint64_t v61 = (4 * *(_BYTE *)(v60 + 18) + 8) & 0x3C;
              uint64_t v59 = ((-15LL << v61) - 1) & v59 | (v47 << v61);
              unint64_t v62 = *(void *)(v60 + 24 + 24 * v47);
              swift_unknownObjectRetain();
              Swift::UInt result = swift_unknownObjectRelease();
              int64_t v60 = v62;
              if (!*(_BYTE *)(v62 + 18)) {
                goto LABEL_131;
              }
            }
          }

          Swift::UInt result = swift_unknownObjectRetain_n();
          uint64_t v25 = a3;
          unint64_t v62 = v10;
LABEL_131:
          unint64_t v71 = *(unsigned __int16 *)(v62 + 16);
          if (*(_WORD *)(v62 + 16))
          {
            __int128 v72 = *(void *)(v62 + 24);
            uint64_t v30 = __OFSUB__(v25, v72);
            Swift::UInt v73 = v25 - v72;
            uint64_t v70 = v254;
            if (v30) {
              goto LABEL_478;
            }
            if (__OFADD__(v73, 1LL))
            {
LABEL_479:
              __break(1u);
LABEL_480:
              __break(1u);
LABEL_481:
              __break(1u);
LABEL_482:
              __break(1u);
LABEL_483:
              __break(1u);
LABEL_484:
              __break(1u);
LABEL_485:
              __break(1u);
LABEL_486:
              __break(1u);
LABEL_487:
              __break(1u);
              goto LABEL_488;
            }

            if (v73 + 1 < 1)
            {
              unint64_t v71 = 0LL;
              goto LABEL_145;
            }

            if ((_DWORD)v71 != 1)
            {
              uint64_t v74 = (uint64_t *)(v62 + 48);
              uint64_t v75 = 1LL;
              while (1)
              {
                int64_t v76 = *v74;
                v74 += 3;
                uint64_t v25 = v73 - v76;
                if (__OFSUB__(v73, v76)) {
                  goto LABEL_459;
                }
                if (__OFADD__(v25, 1LL)) {
                  break;
                }
                if (v25 + 1 < 1)
                {
                  unint64_t v71 = v75;
                  uint64_t v25 = v73;
                  goto LABEL_145;
                }

                ++v75;
                Swift::UInt v73 = v25;
                if (v71 == v75) {
                  goto LABEL_144;
                }
              }

            __break(1u);
            goto LABEL_107;
          }

          unint64_t v34 = v105;
          if (!v29) {
            goto LABEL_151;
          }
          -[NSMutableString insertString:atIndex:](v105, "insertString:atIndex:", @"{0} ", 0LL);
LABEL_108:
          unitsStyle = 1LL;
          goto LABEL_109;
        }

        uint64_t v43 = v102;
        if (v102 < 0) {
          uint64_t v43 = -v102;
        }
        __int128 v102 = v43;
      }

      uint64_t v41 = -2LL;
    }

    else
    {
      if (v101 >= 0) {
        uint64_t v39 = v101;
      }
      else {
        uint64_t v39 = -v101;
      }
      uint64_t v40 = v102;
      if (v102 < 0) {
        uint64_t v40 = -v102;
      }
      __int128 v101 = v39;
      __int128 v102 = v40;
      uint64_t v41 = -3LL;
    }

    __int128 v131 = 0u;
    __int128 v132 = 0u;
    __int128 v129 = 0u;
    __int128 v130 = 0u;
    __int128 v127 = 0u;
    __int128 v128 = 0u;
    __int128 v125 = 0u;
    __int128 v126 = 0u;
    uint64_t v123 = 0u;
    uint64_t v124 = 0u;
    uint64_t v121 = 0u;
    uint64_t v122 = 0u;
    uint64_t v119 = 0u;
    unint64_t v120 = 0u;
    uint64_t v117 = 0u;
    uint64_t v118 = 0u;
    LODWORD(v111[0]) = 0;
    TimePattern = uatmufmt_getTimePattern();
    if (SLODWORD(v111[0]) > 0) {
      goto LABEL_89;
    }
    uint64_t v45 = TimePattern;
    __int128 v105 = +[NSString string](&OBJC_CLASS___NSMutableString, "string");
    unint64_t v115 = 0u;
    unint64_t v116 = 0u;
    char v113 = 0u;
    char v114 = 0u;
    unint64_t v46 = +[NSDateFormatter _componentsFromFormatString:]( &OBJC_CLASS___NSDateFormatter,  "_componentsFromFormatString:",  +[NSString stringWithCharacters:length:](&OBJC_CLASS___NSString, "stringWithCharacters:length:", &v117, v45));
    uint64_t v47 = [v46 countByEnumeratingWithState:&v113 objects:v112 count:16];
    v29 += v41;
    if (v47)
    {
      uint64_t v48 = *(void *)v114;
      uint64_t v49 = *MEMORY[0x189603A38];
      uint64_t v50 = *MEMORY[0x189603A28];
      do
      {
        for (n = 0LL; n != v47; ++n)
        {
          if (*(void *)v114 != v48) {
            objc_enumerationMutation(v46);
          }
          char v52 = *(void **)(*((void *)&v113 + 1) + 8 * n);
          unint64_t v53 = (void *)[v52 objectForKey:v49];
          if ((objc_msgSend((id)objc_msgSend(v52, "objectForKey:", v50), "BOOLValue") & 1) == 0)
          {
            uint64_t v54 = [v53 length];
            BOOL v55 = ((v54 < 2) & WORD1(zeroFormattingBehavior)) != 0 ? 2LL : v54;
            [v36 setMinimumIntegerDigits:v55];
            uint64_t v56 = [v53 hasPrefix:@"h"];
            uint64_t v57 = v103;
            if ((v56 & 1) != 0
              || (v58 = [v53 hasPrefix:@"m"], uint64_t v57 = v102, (v58 & 1) != 0)
              || (v59 = [v53 hasPrefix:@"s"], uint64_t v57 = v101, v59))
            {
              unint64_t v53 = (void *)objc_msgSend( v36,  "stringFromNumber:",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v57));
            }
          }

          -[NSMutableString appendString:](v105, "appendString:", v53);
        }

        uint64_t v47 = [v46 countByEnumeratingWithState:&v113 objects:v112 count:16];
      }

      while (v47);
    }

    Swift::String v24 = v100;
    goto LABEL_106;
  }

  __int128 v105 = 0LL;
  unint64_t v34 = 0LL;
  if (!v29) {
    goto LABEL_151;
  }
LABEL_109:
  int64_t v60 = 0uLL;
  __int128 v131 = 0u;
  __int128 v132 = 0u;
  __int128 v129 = 0u;
  __int128 v130 = 0u;
  __int128 v127 = 0u;
  __int128 v128 = 0u;
  __int128 v125 = 0u;
  __int128 v126 = 0u;
  uint64_t v123 = 0u;
  uint64_t v124 = 0u;
  uint64_t v121 = 0u;
  uint64_t v122 = 0u;
  uint64_t v119 = 0u;
  unint64_t v120 = 0u;
  uint64_t v117 = 0u;
  uint64_t v118 = 0u;
  uint64_t v61 = v29 - 2;
  if (v29 != 2)
  {
    if (v29 == 1)
    {
      memset(&v111[8], 0, 128);
      if (!v105)
      {
        __int128 v105 = +[NSString stringWithString:](&OBJC_CLASS___NSMutableString, "stringWithString:", @"{0}");
        int64_t v60 = 0uLL;
      }

      v111[6] = v60;
      v111[7] = v60;
      v111[4] = v60;
      v111[5] = v60;
      v111[2] = v60;
      v111[3] = v60;
      v111[0] = v60;
      v111[1] = v60;
      os_unfair_lock_lock(&v24->_lock);
      if (-[NSDateComponentsFormatter _updateFormatterCacheIfNeeded_locked:unitsStyle:]( v24,  "_updateFormatterCacheIfNeeded_locked:unitsStyle:",  v99,  unitsStyle))
      {
        icuUnitFromNSUnit(*(uint64_t *)&v135[0]);
        unint64_t v62 = uatmufmt_format();
        os_unfair_lock_unlock(&v24->_lock);
        unint64_t v63 = -[NSString rangeOfString:](v105, "rangeOfString:", @"{0}");
        -[NSMutableString replaceCharactersInRange:withCharacters:length:]( v105,  "replaceCharactersInRange:withCharacters:length:",  v63,  v64,  v111,  v62);
      }

      else
      {
        os_unfair_lock_unlock(&v24->_lock);
        __int128 v105 = 0LL;
      }

      goto LABEL_150;
    }

    goto LABEL_116;
  }

  if (!v105)
  {
    icuStyleFromNSStyle(unitsStyle);
    ListPattern = uatmufmt_getListPattern();
    unint64_t v34 = 0LL;
    if (ListPattern < 1) {
      goto LABEL_151;
    }
    unint64_t v34 =  -[NSString initWithCharacters:length:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithCharacters:length:",  &v117,  ListPattern);
    uint64_t v123 = 0u;
    uint64_t v124 = 0u;
    uint64_t v121 = 0u;
    uint64_t v122 = 0u;
    uint64_t v119 = 0u;
    unint64_t v120 = 0u;
    uint64_t v117 = 0u;
    uint64_t v118 = 0u;
    os_unfair_lock_lock(&v24->_lock);
    if (-[NSDateComponentsFormatter _updateFormatterCacheIfNeeded_locked:unitsStyle:]( v24,  "_updateFormatterCacheIfNeeded_locked:unitsStyle:",  v99,  unitsStyle))
    {
      icuUnitFromNSUnit(*((uint64_t *)&v135[0] + 1));
      unint64_t v67 = uatmufmt_format();
      os_unfair_lock_unlock(&v24->_lock);
      unint64_t v87 = -[NSString rangeOfString:](v34, "rangeOfString:", @"{1}");
      -[NSMutableString replaceCharactersInRange:withCharacters:length:]( v34,  "replaceCharactersInRange:withCharacters:length:",  v87,  v88,  &v117,  v67);
      id v89 = 0;
    }

    else
    {
      os_unfair_lock_unlock(&v24->_lock);
      unint64_t v34 = 0LL;
      id v89 = 1;
    }

    uint64_t v123 = 0u;
    uint64_t v124 = 0u;
    uint64_t v121 = 0u;
    uint64_t v122 = 0u;
    uint64_t v119 = 0u;
    unint64_t v120 = 0u;
    uint64_t v117 = 0u;
    uint64_t v118 = 0u;
    os_unfair_lock_lock(&v24->_lock);
    if (-[NSDateComponentsFormatter _updateFormatterCacheIfNeeded_locked:unitsStyle:]( v24,  "_updateFormatterCacheIfNeeded_locked:unitsStyle:",  v99,  unitsStyle))
    {
      icuUnitFromNSUnit(*(void *)((unint64_t)v135 & 0xFFFFFFFFFFFFFFF7LL | (8LL * (v89 & 1))));
      uint64_t v90 = uatmufmt_format();
      os_unfair_lock_unlock(&v24->_lock);
      uint64_t v91 = -[NSString rangeOfString:](v34, "rangeOfString:", @"{0}");
      -[NSMutableString replaceCharactersInRange:withCharacters:length:]( v34,  "replaceCharactersInRange:withCharacters:length:",  v91,  v92,  &v117,  v90);
      goto LABEL_151;
    }

    os_unfair_lock_unlock(&v24->_lock);
LABEL_89:
    unint64_t v34 = 0LL;
    goto LABEL_151;
  }

  uint64_t v38 = 0LL;
LABEL_107:
  (*((void (**)(void *, id, void, void, unint64_t, unint64_t, char *))block + 2))( block,  v38,  v66,  *((void *)&v66 + 1),  v25,  v29,  &v79);
  if (v38) {

  }
  if (v79) {
    goto LABEL_36;
  }
  if ((opts & 0x100) != 0)
  {
    if (v25 <= location) {
      goto LABEL_36;
    }
    uint64_t v11 = v25 - 1;
LABEL_122:
    if (v23 == 1000)
    {
      _CFAutoreleasePoolPop();
      _CFAutoreleasePoolPush();
      uint64_t v23 = 0LL;
    }

    else
    {
      ++v23;
    }

    goto LABEL_125;
  }

  uint64_t v49 = -[NSString length](self, "length");
  uint64_t v50 = v49 - v12;
  if (v49 == v12)
  {
    uint64_t v51 = v12;
    goto LABEL_121;
  }

  uint64_t v51 = v49;
  v29 += v50;
  v10 += v50;
  uint64_t v22 = cf;
  if (!cf)
  {
LABEL_121:
    uint64_t v11 = v29 + v25;
    __int128 v12 = v51;
    if (v29 + v25 >= v10) {
      goto LABEL_36;
    }
    goto LABEL_122;
  }

  v52.location = v29 + v25;
  if ((opts & 0x800) != 0) {
    unint64_t v53 = v49;
  }
  else {
    unint64_t v53 = v10;
  }
  v52.length = v53 - v52.location;
  CFStringTokenizerSetString(cf, (CFStringRef)self, v52);
  v56[2](v56, cf);
  uint64_t v54 = CFStringTokenizerGetCurrentTokenRange(cf);
  int64_t v60 = v54.location;
  if (v54.location != -1)
  {
    uint64_t v59 = v54.length;
    goto LABEL_121;
  }

  _CFAutoreleasePoolPop();
LABEL_37:
  CFRelease(v22);
LABEL_38:
  if (v78) {
    free(v78);
  }
  if (v77) {
    free(v77);
  }
}

    uregex_useTransparentBounds(internal, 0, &v61);
    if ((v9 & 0x10) == 0) {
      goto LABEL_108;
    }
    goto LABEL_107;
  }

  uregex_setText(internal, (const UChar *)&status, 0, &v61);
  if ((v9 & 1) != 0)
  {
    uregex_setMatchCallback(internal, 0LL, 0LL, &v61);
    block = v54;
  }

  else
  {
    block = v54;
    if ((v9 & 4) == 0)
    {
      if ((v9 & 8) == 0) {
        goto LABEL_25;
      }
LABEL_81:
      uregex_useTransparentBounds(internal, 0, &v61);
      if ((v9 & 0x10) == 0) {
        goto LABEL_83;
      }
      goto LABEL_82;
    }
  }

  uregex_setFindProgressCallback(internal, 0LL, 0LL, &v61);
  if ((v9 & 8) != 0) {
    goto LABEL_81;
  }
LABEL_25:
  if ((v9 & 0x10) != 0) {
LABEL_82:
  }
    uregex_useAnchoringBounds(internal, 1, &v61);
LABEL_83:
  if ((v9 & 2) != 0 && !(_BYTE)v60) {
    (*((void (**)(void *, void, uint64_t, unsigned __int8 *))block + 2))(block, 0LL, 18LL, &v57);
  }
  uint64_t v61 = U_ZERO_ERROR;
LABEL_87:
  if (v19) {
    utext_close(v19);
  }
}

uint64_t AttributedString.Guts.description(in:)()
{
  uint64_t v166 = 0LL;
  unint64_t v167 = 0xE000000000000000LL;
  uint64_t v1 = swift_retain();
  AttributedString.Runs.init(_:in:)(v1, &v193);
  uint64_t v2 = v194;
  uint64_t v3 = v193;
  __int128 v122 = v202;
  uint64_t v4 = v202;
  if (v194 == (void *)v202)
  {
    outlined retain of AttributedString.Runs((uint64_t)&v193);
    uint64_t v5 = 0LL;
    goto LABEL_151;
  }

  uint64_t v120 = v196;
  uint64_t v121 = v195;
  uint64_t v6 = v197;
  uint64_t v7 = v198;
  uint64_t v118 = v200;
  uint64_t v119 = v199;
  __int128 v113 = v204;
  __int128 v114 = v203;
  __int128 v112 = v205;
  uint64_t v8 = v201;
  unint64_t v9 = v206;
  uint64_t v125 = v208;
  uint64_t v126 = v207;
  uint64_t v124 = v209;
  __int128 v117 = v210;
  __int128 v108 = (__int128 *)(v0 + 16);
  __int128 v110 = v211;
  uint64_t result = outlined retain of AttributedString.Runs((uint64_t)&v193);
  uint64_t v127 = v9;
  unint64_t v109 = v9 >> 10;
  uint64_t v123 = (__int128 *)(v3 + 16);
  uint64_t v11 = v120;
  uint64_t countAndFlagsBits = v121;
  uint64_t v135 = v6;
  uint64_t v115 = v7;
  uint64_t v116 = v6;
  uint64_t v131 = v118;
  uint64_t v132 = v119;
  uint64_t v111 = v8;
  uint64_t v140 = v8;
  uint64_t v12 = (uint64_t)v2;
  uint64_t v106 = v4;
  __int128 v107 = v2;
  __int128 v133 = (void *)v3;
  while (2)
  {
    if (v12 >= v4) {
      goto LABEL_156;
    }
    v152._uint64_t countAndFlagsBits = v3;
    v152._unint64_t object = v2;
    *(void *)&__int128 v153 = v121;
    *((void *)&v153 + 1) = v120;
    *(void *)&__int128 v154 = v116;
    *((void *)&v154 + 1) = v115;
    *(void *)&__int128 v155 = v119;
    *((void *)&v155 + 1) = v118;
    *(_OWORD *)&v156[8] = v122;
    __int128 v157 = v114;
    __int128 v158 = v113;
    __int128 v159 = v112;
    *(void *)v156 = v111;
    uint64_t v160 = v127;
    uint64_t v161 = v126;
    uint64_t v162 = v125;
    uint64_t v163 = v124;
    __int128 v164 = v117;
    __int128 v165 = v110;
    uint64_t v141 = v12;
    v151[0] = v12;
    v151[1] = countAndFlagsBits;
    unint64_t v136 = v11;
    v151[2] = v11;
    v151[3] = v135;
    v151[4] = v7;
    v151[5] = v132;
    v151[6] = v131;
    v151[7] = v140;
    uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)(v151, &v143._countAndFlagsBits);
    if (v143._countAndFlagsBits != *(void *)(v3 + 88))
    {
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
      goto LABEL_160;
    }

    unint64_t object = (unint64_t)v143._object;
    unint64_t v15 = *((void *)&v145 + 1);
    uint64_t v16 = *((void *)&v146 + 1);
    uint64_t v18 = v146;
    uint64_t v17 = v147;
    unint64_t v138 = v7;
    if ((void)v144)
    {
      uint64_t v19 = v144 + 24 * (((unint64_t)v143._object >> ((4 * *(_BYTE *)(v144 + 18) + 8) & 0x3C)) & 0xF);
      unint64_t v20 = *(void *)(v19 + 24);
      uint64_t v21 = *(void *)(v19 + 32);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v22 = *((void *)&v146 + 1);
      uint64_t v23 = v133[8];
      uint64_t v24 = v147;
      swift_retain();
      swift_unknownObjectRetain();
      uint64_t v17 = v24;
      unint64_t v20 = specialized Rope._Node.subscript.getter(object, v23);
      uint64_t v21 = v25;
      uint64_t v16 = v22;
      uint64_t result = swift_unknownObjectRelease();
    }

    if (v109 >= v15 >> 10) {
      unint64_t v26 = v127;
    }
    else {
      unint64_t v26 = v15;
    }
    if (v109 >= v15 >> 10) {
      uint64_t v27 = v126;
    }
    else {
      uint64_t v27 = v18;
    }
    if (v109 >= v15 >> 10) {
      uint64_t v28 = v125;
    }
    else {
      uint64_t v28 = v16;
    }
    if (v109 >= v15 >> 10) {
      uint64_t v17 = v124;
    }
    if (__OFADD__(v20, v15 >> 11)) {
      goto LABEL_158;
    }
    else {
      unint64_t v29 = (unint64_t)v117 >> 11;
    }
    __int128 v30 = v123[1];
    __int128 v190 = *v123;
    __int128 v191 = v30;
    __int128 v192 = v123[2];
    uint64_t result = BigString.utf8.getter();
    if (__OFSUB__(v29, v26 >> 11)) {
      goto LABEL_159;
    }
    unint64_t v31 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t result = outlined release of Locale((uint64_t)v168);
    if (v31 >> 10 < v26 >> 10)
    {
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }

    unint64_t v173 = v26;
    uint64_t v174 = v27;
    uint64_t v175 = v28;
    uint64_t v176 = v17;
    unint64_t v177 = v31;
    uint64_t v178 = v33;
    uint64_t v179 = v35;
    uint64_t v180 = v37;
    uint64_t v38 = countAndFlagsBits;
    unint64_t v39 = v133[8];
    uint64_t v40 = v133[10];
    uint64_t v41 = v135;
    uint64_t v129 = v40;
    uint64_t v130 = v133[11];
    uint64_t v128 = v133[9];
    if (v135 != 1 && countAndFlagsBits == v133[11])
    {
      if (v140 != 2)
      {
        unint64_t v43 = v138 >> 11;
        swift_unknownObjectRetain();
        uint64_t result = swift_retain();
        unint64_t v42 = v136;
        goto LABEL_111;
      }

      unint64_t v42 = v136;
      if (v39)
      {
        swift_retain();
        swift_unknownObjectRetain();
        uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(countAndFlagsBits, v136, v135, v39, v128, v40);
        unint64_t v43 = result;
        goto LABEL_111;
      }

      uint64_t result = swift_retain();
      goto LABEL_110;
    }

    if (v39) {
      uint64_t v44 = v133[9];
    }
    else {
      uint64_t v44 = 0LL;
    }
    if (v141 < 0 || v44 < v141)
    {
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
      goto LABEL_174;
    }

    if (v39 && v141 < v133[9] && *(_WORD *)(v39 + 16))
    {
      uint64_t v45 = *(unsigned __int8 *)(v39 + 18);
      if (*(_BYTE *)(v39 + 18))
      {
        swift_unknownObjectRetain_n();
        uint64_t result = swift_retain();
        uint64_t v46 = v141;
        unint64_t v47 = v39;
        while (1)
        {
          unint64_t v50 = *(unsigned __int16 *)(v47 + 16);
          if (*(_WORD *)(v47 + 16))
          {
            uint64_t v51 = *(void *)(v47 + 32);
            BOOL v52 = __OFSUB__(v46, v51);
            uint64_t v53 = v46 - v51;
            if (v52) {
              goto LABEL_154;
            }
            if (__OFADD__(v53, 1LL)) {
              goto LABEL_155;
            }
            if (v53 + 1 <= 0)
            {
              unint64_t v50 = 0LL;
              goto LABEL_44;
            }

            if ((_DWORD)v50 != 1)
            {
              uint64_t v54 = *(void *)(v47 + 56);
              uint64_t v46 = v53 - v54;
              if (__OFSUB__(v53, v54)) {
                goto LABEL_168;
              }
              if (__OFADD__(v46, 1LL)) {
                goto LABEL_169;
              }
              if (v46 + 1 < 1)
              {
                unint64_t v50 = 1LL;
                uint64_t v46 = v53;
                goto LABEL_44;
              }

              if ((_DWORD)v50 == 2) {
                goto LABEL_43;
              }
              uint64_t v55 = *(void *)(v47 + 80);
              BOOL v52 = __OFSUB__(v46, v55);
              uint64_t v53 = v46 - v55;
              if (v52) {
                goto LABEL_172;
              }
              if (__OFADD__(v53, 1LL)) {
                goto LABEL_173;
              }
              if (v53 + 1 < 1)
              {
                unint64_t v50 = 2LL;
                goto LABEL_44;
              }

              if ((_DWORD)v50 != 3)
              {
                uint64_t v56 = 3LL;
                if (v50 > 3) {
                  uint64_t v56 = *(unsigned __int16 *)(v47 + 16);
                }
                uint64_t v57 = (void *)(v47 + 104);
                uint64_t v58 = 3LL;
                while (1)
                {
                  if (v56 == v58) {
                    goto LABEL_164;
                  }
                  uint64_t v46 = v53 - *v57;
                  if (__OFSUB__(v53, *v57)) {
                    goto LABEL_165;
                  }
                  if (__OFADD__(v46, 1LL)) {
                    goto LABEL_166;
                  }
                  if (v46 + 1 < 1) {
                    break;
                  }
                  ++v58;
                  v57 += 3;
                  uint64_t v53 = v46;
                  if (v50 == v58) {
                    goto LABEL_43;
                  }
                }

                unint64_t v50 = v58;
                uint64_t v46 = v53;
                goto LABEL_44;
              }
            }

            uint64_t v46 = v53;
          }

LABEL_149:
      unint64_t v90 = (v104 - 1) & v104;
      unint64_t v94 = __clz(__rbit64(v104)) + (v92 << 6);
LABEL_130:
      uint64_t v95 = (uint64_t *)(*(void *)(v21 + 48) + 16 * v94);
      uint64_t v97 = *v95;
      uint64_t v96 = (void *)v95[1];
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v21 + 56) + 72 * v94, (uint64_t)&v153);
      v152._uint64_t countAndFlagsBits = v97;
      v152._unint64_t object = v96;
      __int128 v145 = v154;
      __int128 v146 = v155;
      __int128 v147 = *(_OWORD *)v156;
      uint64_t v148 = *(void *)&v156[16];
      Swift::String v143 = v152;
      __int128 v144 = v153;
      Swift::String v98 = v152;
      swift_bridgeObjectRetain();
      String.append(_:)(v98);
      v99._uint64_t countAndFlagsBits = 2112800LL;
      v99._unint64_t object = (void *)0xE300000000000000LL;
      String.append(_:)(v99);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v144,  (uint64_t)v151);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      v100._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v100);
      swift_bridgeObjectRelease();
      v101._uint64_t countAndFlagsBits = 10LL;
      v101._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v101);
      v102._uint64_t countAndFlagsBits = 9LL;
      v102._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v102);
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of Any?( (uint64_t)&v143,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    }

                                uint64_t v4 = v86;
LABEL_150:
                                MEMORY[0x186E20E60](v110, -1LL, -1LL);
                                goto LABEL_151;
                              }
                            }
                          }
                        }

                        uint64_t v87 = v96;
                      }

      unint64_t v93 = v25 & 0xFFFFFFFFFFFFLL;
LABEL_152:
      if (v143 >> 14 == 4 * v93)
      {
        if ((v47 & 1) != 0)
        {
LABEL_154:
          unint64_t v94 = 0;
          if ((v26 & 0x2000000000000000LL) == 0) {
            goto LABEL_155;
          }
          goto LABEL_158;
        }

      uint64_t v27 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      goto LABEL_53;
    }

    unint64_t v26 = 0LL;
    unint64_t v31 = 0LL;
    uint64_t v32 = (v8 >> 59) & 1;
    if ((v7 & 0x1000000000000000LL) == 0) {
      LOBYTE(v32) = 1;
    }
    uint64_t v130 = 4LL << v32;
    uint64_t v123 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v124 = v7 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v127 = v7;
    while (1)
    {
      uint64_t v6 = v10 & 0xC;
      uint64_t v33 = v10;
      if (v6 == v130) {
        uint64_t v33 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      }
      uint64_t v14 = v33 >> 16;
      if (v33 >> 16 >= v132)
      {
        __break(1u);
LABEL_148:
        __break(1u);
        goto LABEL_149;
      }

      if ((v7 & 0x1000000000000000LL) != 0)
      {
        uint64_t v35 = String.UTF8View._foreignSubscript(position:)();
      }

      else if ((v7 & 0x2000000000000000LL) != 0)
      {
        *(void *)&v133[0] = v8;
        *((void *)&v133[0] + 1) = v124;
        uint64_t v35 = *((unsigned __int8 *)v133 + v14);
      }

      else
      {
        uint64_t v34 = v123;
        if ((v8 & 0x1000000000000000LL) == 0) {
          uint64_t v34 = _StringObject.sharedUTF8.getter();
        }
        uint64_t v35 = *(unsigned __int8 *)(v34 + v14);
      }

      uint64_t v129 = v10 & 0xC;
      if ((v26 & 1) == 0)
      {
        __int128 v122 = v10;
        __int128 v134 = v10;
        uint64_t v12 = LODWORD(v135[0]);
        uint64_t v6 = WORD2(v135[0]);
        unint64_t v50 = WORD3(v135[0]);
        uint64_t v51 = WORD4(v135[0]);
        uint64_t v14 = WORD5(v135[0]);
        uint64_t v10 = WORD6(v135[0]);
        unint64_t v26 = HIWORD(v135[0]);
        BOOL v52 = v135[1];
        uint64_t v126 = WORD1(v135[1]);
        NSDecimal._multiply(byShort:)( (NSDecimal *)(WORD4(v135[0]) | ((unint64_t)WORD5(v135[0]) << 16) | ((unint64_t)WORD6(v135[0]) << 32)),  0xAu);
        if (v31 || (NSDecimal._add(_:)((NSDecimal *)(v35 - 48), (v35 - 48)), v31))
        {

          LODWORD(v133[0]) = v12;
          WORD2(v133[0]) = v6;
          WORD3(v133[0]) = v50;
          WORD4(v133[0]) = v51;
          WORD5(v133[0]) = v14;
          WORD6(v133[0]) = v10;
          HIWORD(v133[0]) = v26;
          LOWORD(v133[1]) = v52;
          WORD1(v133[1]) = v126;
          if (_So9NSDecimala__exponent_getter((char *)v133) == 127)
          {
            *(void *)((char *)v133 + 4) = 0LL;
            *(void *)((char *)v133 + 12) = 0LL;
            _So9NSDecimala__exponent_setter(0LL, v133);
            _So9NSDecimala__length_setter(0LL, v133);
            _So9NSDecimala__isNegative_setter(1LL, v133);
            _So9NSDecimala__isCompact_setter_0(0LL, v133);
            _So9NSDecimala__reserved_setter(v133);
            uint64_t v56 = v133[0];
            uint64_t v57 = WORD2(v133[0]);
            uint64_t v58 = WORD3(v133[0]);
            unint64_t v59 = WORD4(v133[0]);
            unint64_t v60 = WORD5(v133[0]);
            uint64_t v61 = WORD6(v133[0]);
            uint64_t v6 = HIWORD(v133[0]);
            uint64_t v62 = v133[1];
            unint64_t v63 = WORD1(v133[1]);
            v135[0] = v133[0];
            LODWORD(v135[1]) = v133[1];
          }

          else
          {
            LODWORD(v133[0]) = v12;
            WORD2(v133[0]) = v6;
            WORD3(v133[0]) = v50;
            WORD4(v133[0]) = v51;
            WORD5(v133[0]) = v14;
            WORD6(v133[0]) = v10;
            HIWORD(v133[0]) = v26;
            LOWORD(v133[1]) = v52;
            WORD1(v133[1]) = v126;
            unint64_t v66 = _So9NSDecimala__exponent_getter((char *)v133);
            _So9NSDecimala__exponent_setter((v66 + 1), v135);
            uint64_t v56 = v135[0];
            uint64_t v57 = WORD2(v135[0]);
            uint64_t v58 = WORD3(v135[0]);
            unint64_t v59 = WORD4(v135[0]);
            unint64_t v60 = WORD5(v135[0]);
            uint64_t v61 = WORD6(v135[0]);
            uint64_t v6 = HIWORD(v135[0]);
            uint64_t v62 = v135[1];
            unint64_t v63 = WORD1(v135[1]);
          }

          LODWORD(v133[0]) = v56;
          WORD2(v133[0]) = v57;
          WORD3(v133[0]) = v58;
          WORD4(v133[0]) = v59;
          WORD5(v133[0]) = v60;
          WORD6(v133[0]) = v61;
          HIWORD(v133[0]) = v6;
          LOWORD(v133[1]) = v62;
          WORD1(v133[1]) = v63;
          if (!_So9NSDecimala__length_getter(v133))
          {
            LODWORD(v133[0]) = v56;
            WORD2(v133[0]) = v57;
            WORD3(v133[0]) = v58;
            WORD4(v133[0]) = v59;
            WORD5(v133[0]) = v60;
            WORD6(v133[0]) = v61;
            HIWORD(v133[0]) = v6;
            LOWORD(v133[1]) = v62;
            WORD1(v133[1]) = v63;
          }

          uint64_t v7 = v127;
          uint64_t v8 = v128;
          specialized $defer #1 <A>() in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( v128,  v127,  &v134);
          unint64_t v31 = 0LL;
          unint64_t v26 = 1LL;
          uint64_t v10 = v134;
          goto LABEL_93;
        }

        *(void *)&v135[0] = v53;
        *((void *)&v135[0] + 1) = v54;
        LODWORD(v135[1]) = v55;
        if (v129 == v130)
        {
          uint64_t v7 = v127;
          uint64_t v8 = v128;
          uint64_t v67 = _StringGuts._slowEnsureMatchingEncoding(_:)(v122, v128, v127);
          if ((v127 & 0x1000000000000000LL) != 0) {
            goto LABEL_101;
          }
LABEL_96:
          uint64_t v10 = (v67 & 0xFFFFFFFFFFFF0000LL) + 65540;
        }

        else
        {
          uint64_t v7 = v127;
          uint64_t v8 = v128;
          uint64_t v67 = v122;
          if ((v127 & 0x1000000000000000LL) == 0) {
            goto LABEL_96;
          }
LABEL_101:
          if (v132 <= v67 >> 16)
          {
            __break(1u);
LABEL_198:
            unint64_t v68 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
            while (1)
            {
              uint64_t v28 = v68 >> 16;
              if (v68 >> 16 < v132) {
                break;
              }
              __break(1u);
LABEL_200:
              unint64_t v29 = _StringObject.sharedUTF8.getter();
LABEL_58:
              __int128 v30 = *(_BYTE *)(v29 + v28);
LABEL_105:
              if (v30 == 69) {
                goto LABEL_121;
              }
              unint64_t v68 = v10;
              if (v26 == v14) {
                goto LABEL_198;
              }
            }

            if ((v7 & 0x1000000000000000LL) != 0)
            {
              __int128 v70 = String.UTF8View._foreignSubscript(position:)();
            }

            else if ((v7 & 0x2000000000000000LL) != 0)
            {
              *(void *)&v133[0] = v8;
              *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
              __int128 v70 = *((_BYTE *)v133 + v28);
            }

            else
            {
              if ((v8 & 0x1000000000000000LL) != 0) {
                unint64_t v69 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
              }
              else {
                unint64_t v69 = _StringObject.sharedUTF8.getter();
              }
              __int128 v70 = *(_BYTE *)(v69 + v28);
            }

            if (v70 != 101) {
              goto LABEL_245;
            }
LABEL_121:
            if (v26 == v14) {
              goto LABEL_153;
            }
            if ((v7 & 0x1000000000000000LL) != 0) {
              goto LABEL_154;
            }
LABEL_123:
            uint64_t v10 = (v10 & 0xFFFFFFFFFFFF0000LL) + 65540;
            goto LABEL_156;
          }

          uint64_t v10 = String.UTF8View._foreignIndex(after:)();
        }

        unint64_t v26 = 0LL;
        __int128 v134 = v10;
LABEL_93:
        uint64_t v12 = v10 >> 14;
        goto LABEL_64;
      }

      uint64_t v125 = v31;
      uint64_t v36 = v10;
      uint64_t v37 = v135[0];
      uint64_t v38 = WORD2(v135[0]);
      unint64_t v39 = WORD3(v135[0]);
      uint64_t v40 = WORD4(v135[0]);
      uint64_t v41 = WORD5(v135[0]);
      unint64_t v42 = WORD6(v135[0]);
      unint64_t v43 = HIWORD(v135[0]);
      uint64_t v44 = v135[1];
      uint64_t v45 = WORD1(v135[1]);
      v133[0] = v135[0];
      LODWORD(v133[1]) = v135[1];
      if (_So9NSDecimala__exponent_getter((char *)v133) == 127)
      {
        *(_OWORD *)((char *)v133 + 4) = 0uLL;
        _So9NSDecimala__exponent_setter(0LL, v133);
        _So9NSDecimala__length_setter(0LL, v133);
        _So9NSDecimala__isNegative_setter(1LL, v133);
        _So9NSDecimala__isCompact_setter_0(0LL, v133);
        _So9NSDecimala__reserved_setter(v133);
        uint64_t v14 = LODWORD(v133[0]);
        unint64_t v26 = WORD2(v133[0]);
        uint64_t v10 = WORD3(v133[0]);
        uint64_t v46 = WORD4(v133[0]);
        unint64_t v47 = WORD5(v133[0]);
        uint64_t v6 = WORD6(v133[0]);
        char v48 = HIWORD(v133[0]);
        uint64_t v12 = LOWORD(v133[1]);
        unint64_t v49 = WORD1(v133[1]);
        v135[0] = v133[0];
        LODWORD(v135[1]) = v133[1];
      }

      else
      {
        LODWORD(v133[0]) = v37;
        WORD2(v133[0]) = v38;
        WORD3(v133[0]) = v39;
        WORD4(v133[0]) = v40;
        WORD5(v133[0]) = v41;
        WORD6(v133[0]) = v42;
        HIWORD(v133[0]) = v43;
        LOWORD(v133[1]) = v44;
        WORD1(v133[1]) = v45;
        unint64_t v64 = _So9NSDecimala__exponent_getter((char *)v133);
        _So9NSDecimala__exponent_setter((v64 + 1), v135);
        uint64_t v14 = LODWORD(v135[0]);
        unint64_t v26 = WORD2(v135[0]);
        uint64_t v10 = WORD3(v135[0]);
        uint64_t v46 = WORD4(v135[0]);
        unint64_t v47 = WORD5(v135[0]);
        uint64_t v6 = WORD6(v135[0]);
        char v48 = HIWORD(v135[0]);
        uint64_t v12 = LOWORD(v135[1]);
        unint64_t v49 = WORD1(v135[1]);
      }

      LODWORD(v133[0]) = v14;
      WORD2(v133[0]) = v26;
      WORD3(v133[0]) = v10;
      WORD4(v133[0]) = v46;
      WORD5(v133[0]) = v47;
      WORD6(v133[0]) = v6;
      HIWORD(v133[0]) = v48;
      LOWORD(v133[1]) = v12;
      WORD1(v133[1]) = v49;
      if (!_So9NSDecimala__length_getter(v133))
      {
        LODWORD(v133[0]) = v14;
        WORD2(v133[0]) = v26;
        WORD3(v133[0]) = v10;
        WORD4(v133[0]) = v46;
        WORD5(v133[0]) = v47;
        WORD6(v133[0]) = v6;
        HIWORD(v133[0]) = v48;
        LOWORD(v133[1]) = v12;
        WORD1(v133[1]) = v49;
        if (_So9NSDecimala__isNegative_getter(v133))
        {
          __int128 v134 = v36;
LABEL_125:
          specialized $defer #1 <A>() in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( v128,  v127,  &v134);
          goto LABEL_243;
        }
      }

      if (v129 == v130)
      {
        uint64_t v7 = v127;
        uint64_t v8 = v128;
        unint64_t v65 = _StringGuts._slowEnsureMatchingEncoding(_:)(v36, v128, v127);
        unint64_t v31 = v125;
        if ((v127 & 0x1000000000000000LL) != 0)
        {
LABEL_87:
          if (v132 <= v65 >> 16) {
            goto LABEL_148;
          }
          uint64_t v10 = String.UTF8View._foreignIndex(after:)();
          goto LABEL_63;
        }
      }

      else
      {
        uint64_t v7 = v127;
        uint64_t v8 = v128;
        unint64_t v65 = v36;
        unint64_t v31 = v125;
        if ((v127 & 0x1000000000000000LL) != 0) {
          goto LABEL_87;
        }
      }

      uint64_t v10 = (v65 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_63:
      uint64_t v12 = v10 >> 14;
      unint64_t v26 = 1LL;
LABEL_64:
      if (v12 == v131) {
        goto LABEL_48;
      }
    }

    __int128 v134 = v10;
    if (v12 >= v131
      || (specialized stringViewContainsDecimalSeparator #1 <A>(at:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( v10,  a3,  a4,  v8,  v7) & 1) == 0)
    {
      goto LABEL_49;
    }

    if ((a4 & 0x1000000000000000LL) != 0) {
      uint64_t v71 = String.UTF8View._foreignCount()();
    }
    else {
      uint64_t v71 = (a4 & 0x2000000000000000LL) != 0 ? HIBYTE(a4) & 0xF : a3 & 0xFFFFFFFFFFFFLL;
    }
    specialized Collection.formIndex(_:offsetBy:)(&v134, v71, v8, v7);
    uint64_t v10 = v134;
    if (v131 == v134 >> 14) {
      goto LABEL_49;
    }
    while (1)
    {
      uint64_t v72 = v10;
      if ((v10 & 0xC) == v130) {
        uint64_t v72 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      }
      uint64_t v14 = v72 >> 16;
      if (v72 >> 16 >= v132) {
        break;
      }
      if ((v7 & 0x1000000000000000LL) != 0)
      {
        uint64_t v74 = String.UTF8View._foreignSubscript(position:)();
      }

      else if ((v7 & 0x2000000000000000LL) != 0)
      {
        *(void *)&v133[0] = v8;
        *((void *)&v133[0] + 1) = v124;
        uint64_t v74 = *((unsigned __int8 *)v133 + v14);
      }

      else
      {
        uint64_t v73 = v123;
        if ((v8 & 0x1000000000000000LL) == 0) {
          uint64_t v73 = _StringObject.sharedUTF8.getter();
        }
        uint64_t v74 = *(unsigned __int8 *)(v73 + v14);
      }

      if ((v26 & 1) != 0)
      {
        LOBYTE(v26) = 1;
      }

      else
      {
        NSDecimal._multiplyBy10AndAdd(number:)((NSDecimal *)(v74 - 48), (v74 - 48));
        if (v78)
        {

          LOBYTE(v26) = 1;
          uint64_t v7 = v127;
        }

        else
        {
          uint64_t v79 = v75;
          uint64_t v6 = v76;
          __int128 v80 = v77;
          *(void *)&v135[0] = v75;
          uint64_t v81 = HIDWORD(v75);
          uint64_t v12 = HIWORD(v75);
          Swift::UInt v82 = HIWORD(v77);
          *((void *)&v135[0] + 1) = v76;
          uint64_t v83 = v76 >> 16;
          uint64_t v84 = HIDWORD(v76);
          unint64_t v26 = HIWORD(v76);
          LODWORD(v135[1]) = v77;
          *(void *)&v133[0] = v75;
          *((void *)&v133[0] + 1) = v76;
          LODWORD(v133[1]) = v77;
          LODWORD(v133[0]) = v79;
          WORD2(v133[0]) = v81;
          WORD3(v133[0]) = v12;
          WORD4(v133[0]) = v6;
          WORD5(v133[0]) = v83;
          WORD6(v133[0]) = v84;
          HIWORD(v133[0]) = v26;
          LOWORD(v133[1]) = v80;
          WORD1(v133[1]) = v82;
          Swift::String v85 = _So9NSDecimala__exponent_getter((char *)v133);
          _So9NSDecimala__exponent_setter((v85 - 1), v135);
          LOBYTE(v26) = 0;
          uint64_t v7 = v127;
          uint64_t v8 = v128;
        }
      }

      specialized $defer #1 <A>() in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( v8,  v7,  &v134);
      uint64_t v10 = v134;
      if (v131 == v134 >> 14) {
        goto LABEL_49;
      }
    }

    __break(1u);
LABEL_153:
    uint64_t v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
    if ((v7 & 0x1000000000000000LL) == 0) {
      goto LABEL_123;
    }
LABEL_154:
    if (v132 <= v10 >> 16) {
      goto LABEL_202;
    }
    uint64_t v10 = String.UTF8View._foreignIndex(after:)();
LABEL_156:
    __int128 v134 = v10;
    uint64_t v6 = v10 >> 14;
    unint64_t v15 = v10 & 0xC;
    if (v10 >> 14 != v131)
    {
      unint64_t v90 = v10;
      if (v15 == v14) {
        unint64_t v90 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      }
      int64_t v91 = v90 >> 16;
      if (v90 >> 16 >= v132)
      {
        __break(1u);
      }

      else
      {
        if ((v7 & 0x1000000000000000LL) != 0)
        {
          unint64_t v93 = String.UTF8View._foreignSubscript(position:)();
        }

        else if ((v7 & 0x2000000000000000LL) != 0)
        {
          *(void *)&v133[0] = v8;
          *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v93 = *((_BYTE *)v133 + v91);
        }

        else
        {
          if ((v8 & 0x1000000000000000LL) != 0) {
            int64_t v92 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
          }
          else {
            int64_t v92 = _StringObject.sharedUTF8.getter();
          }
          unint64_t v93 = *(_BYTE *)(v92 + v91);
        }

        if (v93 != 45)
        {
          unint64_t v94 = v10;
          if (v15 == v14) {
            goto LABEL_275;
          }
          goto LABEL_174;
        }

      unint64_t v90 = (v104 - 1) & v104;
      unint64_t v94 = __clz(__rbit64(v104)) + (v92 << 6);
LABEL_130:
      uint64_t v95 = (uint64_t *)(*(void *)(v21 + 48) + 16 * v94);
      uint64_t v97 = *v95;
      uint64_t v96 = (void *)v95[1];
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v21 + 56) + 72 * v94, (uint64_t)&v150);
      v149._uint64_t countAndFlagsBits = v97;
      v149._unint64_t object = v96;
      uint64_t v142 = v151;
      Swift::String v143 = v152;
      __int128 v144 = *(_OWORD *)v153;
      __int128 v145 = *(void *)&v153[16];
      uint64_t v140 = v149;
      uint64_t v141 = v150;
      Swift::String v98 = v149;
      swift_bridgeObjectRetain();
      String.append(_:)(v98);
      v99._uint64_t countAndFlagsBits = 2112800LL;
      v99._unint64_t object = (void *)0xE300000000000000LL;
      String.append(_:)(v99);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v141,  (uint64_t)v148);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      v100._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v100);
      swift_bridgeObjectRelease();
      v101._uint64_t countAndFlagsBits = 10LL;
      v101._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v101);
      v102._uint64_t countAndFlagsBits = 9LL;
      v102._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v102);
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of Any?( (uint64_t)&v140,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    }

                                      uint64_t v3 = v81;
LABEL_150:
                                      MEMORY[0x186E20E60](v114, -1LL, -1LL);
                                      return v3;
                                    }

                                    unint64_t v94 = v82 + 6;
                                  }
                                }
                              }
                            }
                          }

          uint64_t v61 = (v142 - 1) & v142;
          __int128 v133 = __clz(__rbit64(v142)) + (v129 << 6);
        }

        __int128 v134 = 24 * v133;
        uint64_t v135 = *(void *)(v65 + 48) + 24 * v133;
        unint64_t v136 = *(void *)v135;
        __int128 v137 = *(void *)(v135 + 8);
        LOBYTE(v135) = *(_BYTE *)(v135 + 16);
        unint64_t v138 = 8 * v133;
        uint64_t v139 = *(void *)(*(void *)(v65 + 56) + v138);
        uint64_t v140 = *(void *)(v94 + 48) + v134;
        *(void *)uint64_t v140 = v136;
        *(void *)(v140 + 8) = v137;
        *(_BYTE *)(v140 + 16) = v135;
        *(void *)(*(void *)(v94 + 56) + v138) = v139;
        swift_retain();
        swift_bridgeObjectRetain();
      }
    }

    goto LABEL_76;
  }

  if (String.count.getter() < 3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }

  uint64_t v19 = specialized Collection.prefix(_:)(2LL);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  MEMORY[0x186E1B610](v19, v21, v23, v25);
  swift_bridgeObjectRelease();
  unint64_t v26 = String.uppercased()();
  uint64_t v27 = v26._countAndFlagsBits;
  uint64_t v28 = v26._object;
  swift_bridgeObjectRelease();
  unint64_t v29 = String.uppercased()();
  *(Swift::String *)(v8 + 328) = v26;
  *(Swift::String *)(v8 + 344) = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = v161;
  uint64_t v14 = v153;
LABEL_45:
  outlined copy of Locale.Subdivision??(v15, v14);
  swift_bridgeObjectRelease();
  __int128 v165 = 1600417397LL;
  uint64_t v166 = 0xE400000000000000LL;
  v60._uint64_t countAndFlagsBits = v27;
  v60._unint64_t object = v28;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  uint64_t v61 = v165;
  uint64_t v62 = v166;
  unint64_t v63 = one-time initialization token for _patternGeneratorCache;
  swift_bridgeObjectRetain();
  if (v63 != -1) {
    swift_once();
  }
  unint64_t v9 = unk_18C5D62C0;
  __int128 v159 = (char *)static ICUPatternGenerator._patternGeneratorCache;
  unint64_t v64 = (uint64_t *)(unk_18C5D62C0 + 16LL);
  unint64_t v65 = unk_18C5D62C0 + 24LL;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  p_os_unfair_lock_opaque = (void *)v61;
  uint64_t v163 = v62;
  unint64_t v66 = specialized closure #1 in FormatterCache.formatter(for:creator:)(v9 + 16, v61, v62, v164);
  if (v4) {
    goto LABEL_161;
  }
  uint64_t v67 = v66;
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
  swift_release();
  if (v67 != 1)
  {
LABEL_114:
    swift_release();
    swift_bridgeObjectRelease_n();
    if (!v67)
    {
      uint64_t result = (uint64_t)outlined release of Locale.Components(v167);
      *(_BYTE *)(v8 + 281) = 2;
      *uint64_t v162 = 2;
      return result;
    }

    goto LABEL_154;
  }

  LOBYTE(v165) = v164;
  type metadata accessor for ICUPatternGenerator();
  swift_allocObject();
  unint64_t v68 = v163;
  swift_bridgeObjectRetain();
  uint64_t v67 = ICUPatternGenerator.init(localeIdentifier:calendarIdentifier:)( (uint64_t)p_os_unfair_lock_opaque,  v68,  (char *)&v165);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  unint64_t v69 = *(void *)(v9 + 16);
  __int128 v70 = *(void *)(v69 + 16);
  uint64_t v161 = 0LL;
  __int128 v157 = v69;
  __int128 v158 = (os_unfair_lock_t)(v9 + 24);
  else {
    *unint64_t v64 = MEMORY[0x18961AFF0];
  }
  swift_retain();
  uint64_t v79 = swift_isUniquelyReferenced_nonNull_native();
  __int128 v165 = *v64;
  __int128 v80 = v165;
  *unint64_t v64 = 0x8000000000000000LL;
  uint64_t v81 = v80;
  Swift::UInt v82 = (uint64_t)p_os_unfair_lock_opaque;
  uint64_t v84 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)p_os_unfair_lock_opaque, v163, v164);
  Swift::String v85 = *(void *)(v81 + 16);
  Swift::String v86 = (v83 & 1) == 0;
  uint64_t v87 = v85 + v86;
  if (!__OFADD__(v85, v86))
  {
    unint64_t v65 = v83;
    if (*(void *)(v81 + 24) < v87)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v87, v79);
      uint64_t v88 = v165;
      uint64_t v89 = specialized __RawDictionaryStorage.find<A>(_:)(v82, v163, v164);
      if ((v65 & 1) != (v90 & 1)) {
        goto LABEL_163;
      }
      uint64_t v84 = v89;
      if ((v65 & 1) == 0) {
        goto LABEL_112;
      }
LABEL_65:
      int64_t v91 = *(void *)(v88 + 56);
      int64_t v92 = 8 * v84;
      swift_release();
      *(void *)(v91 + v92) = v67;
LABEL_113:
      *(void *)(v9 + 16) = v88;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v158);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1LL);
      goto LABEL_114;
    }

    if ((v79 & 1) != 0)
    {
      uint64_t v88 = v81;
      if ((v83 & 1) != 0) {
        goto LABEL_65;
      }
LABEL_112:
      specialized _NativeDictionary._insert(at:key:value:)(v84, v82, v163, v164, v67, (void *)v88);
      swift_bridgeObjectRetain();
      goto LABEL_113;
    }

    goto LABEL_77;
  }

  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  unint64_t object = v84;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPatternGenerator.PatternGeneratorInfo, ICUPatternGenerator?>);
  unint64_t v104 = static _DictionaryStorage.copy(original:)();
  uint64_t v88 = v104;
  uint64_t v61 = v81;
  if (!*(void *)(v81 + 16))
  {
LABEL_111:
    swift_bridgeObjectRelease();
    Swift::UInt v82 = (uint64_t)p_os_unfair_lock_opaque;
    uint64_t v84 = object;
    if ((v65 & 1) != 0) {
      goto LABEL_65;
    }
    goto LABEL_112;
  }

  int64_t v105 = (char *)(v104 + 64);
  uint64_t v106 = 1LL << *(_BYTE *)(v88 + 32);
  __int128 v159 = (char *)(v81 + 64);
  __int128 v107 = (unint64_t)(v106 + 63) >> 6;
  if (v88 != v81 || v105 >= &v159[8 * v107]) {
    memmove(v105, v159, 8 * v107);
  }
  __int128 v108 = 0LL;
  *(void *)(v88 + 16) = *(void *)(v81 + 16);
  unint64_t v109 = 1LL << *(_BYTE *)(v81 + 32);
  __int128 v110 = -1LL;
  if (v109 < 64) {
    __int128 v110 = ~(-1LL << v109);
  }
  uint64_t v111 = v110 & *(void *)(v81 + 64);
  v156 = (unint64_t)(v109 + 63) >> 6;
  while (1)
  {
    if (v111)
    {
      __int128 v112 = __clz(__rbit64(v111));
      v111 &= v111 - 1;
      __int128 v113 = v112 | (v108 << 6);
      goto LABEL_85;
    }

    uint64_t v121 = v108 + 1;
    if (__OFADD__(v108, 1LL))
    {
      __break(1u);
      goto LABEL_158;
    }

    if (v121 >= v156) {
      goto LABEL_111;
    }
    __int128 v122 = *(void *)&v159[8 * v121];
    ++v108;
    if (!v122)
    {
      __int128 v108 = v121 + 1;
      if (v121 + 1 >= v156) {
        goto LABEL_111;
      }
      __int128 v122 = *(void *)&v159[8 * v108];
      if (!v122)
      {
        __int128 v108 = v121 + 2;
        if (v121 + 2 >= v156) {
          goto LABEL_111;
        }
        __int128 v122 = *(void *)&v159[8 * v108];
        if (!v122)
        {
          __int128 v108 = v121 + 3;
          if (v121 + 3 >= v156) {
            goto LABEL_111;
          }
          __int128 v122 = *(void *)&v159[8 * v108];
          if (!v122)
          {
            __int128 v108 = v121 + 4;
            if (v121 + 4 >= v156) {
              goto LABEL_111;
            }
            __int128 v122 = *(void *)&v159[8 * v108];
            if (!v122)
            {
              __int128 v108 = v121 + 5;
              if (v121 + 5 >= v156) {
                goto LABEL_111;
              }
              __int128 v122 = *(void *)&v159[8 * v108];
              if (!v122)
              {
                __int128 v108 = v121 + 6;
                if (v121 + 6 >= v156) {
                  goto LABEL_111;
                }
                __int128 v122 = *(void *)&v159[8 * v108];
                if (!v122)
                {
                  __int128 v108 = v121 + 7;
                  if (v121 + 7 >= v156) {
                    goto LABEL_111;
                  }
                  __int128 v122 = *(void *)&v159[8 * v108];
                  if (!v122) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

        swift_release();

        close((int)v188);
        MEMORY[0x186E20E60](v184, -1LL, -1LL);
        goto LABEL_202;
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      uint64_t v74 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      uint64_t v75 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      __int128 v76 = objc_msgSend(v74, sel_initWithDomain_code_userInfo_, v75, 514, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v77 = objc_msgSend(v76, sel_domain);
      uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
      __int128 v80 = v79;

      if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v80 == v81)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        unint64_t v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v90 & 1) == 0)
        {
LABEL_216:
          __break(1u);
          goto LABEL_217;
        }
      }

      swift_willThrow();
      int64_t v91 = v55;
LABEL_77:
      MEMORY[0x186E20E60](v91, -1LL, -1LL);
      goto LABEL_202;
    }
  }

  __int128 v184 = &v183;
  MEMORY[0x1895F8858](v19);
  uint64_t v21 = (char *)&v183 - v20;
  uint64_t v22 = v190;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v21, v18, 1, v189, v22);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0)
  {
    else {
      uint64_t v25 = 1537;
    }
    LODWORD(v188) = _NSOpenFileDescriptor_Protected(v21, v25, (int)a4, 438LL);
    if ((v188 & 0x80000000) == 0)
    {
      if ((a5 & 1) != 0)
      {
        unint64_t v26 = (void *)objc_opt_self();
        uint64_t v27 = objc_msgSend(v26, sel_currentProgress);

        uint64_t v28 = v189;
        if (v27)
        {
          if (v13) {
            unint64_t v29 = v15;
          }
          else {
            unint64_t v29 = 0LL;
          }
          __int128 v30 = objc_msgSend(v26, sel_progressWithTotalUnitCount_, v29);
        }

        else
        {
          __int128 v30 = 0LL;
        }

        uint64_t v7 = v5;
      }

      else
      {
        __int128 v30 = 0LL;
        uint64_t v28 = v189;
      }

      value = v28;
      uint64_t v193 = v22;
      v194 = 0LL;
      uint64_t v195 = 0;
      uint64_t v95 = write(buffer:toFileDescriptor:path:parentProgress:)((uint64_t)v13, a1, (int)v188, (uint64_t)&value, v30);
      uint64_t v96 = v7;
      __int128 v186 = v7;
      __int128 v183 = v30;
      if (v7)
      {
        uint64_t v97 = MEMORY[0x186E1B0E8](v95);
        if (v30 && objc_msgSend(v30, sel_isCancelled))
        {
          unlink(v21);
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          Swift::String v98 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          Swift::String v99 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          Swift::String v100 = objc_msgSend(v98, sel_initWithDomain_code_userInfo_, v99, 3072, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          Swift::String v101 = objc_msgSend(v100, sel_domain);
          Swift::String v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
          unint64_t v104 = v103;

          if (v102 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
            && v104 == v105)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v106 = v186;
LABEL_113:
            swift_willThrow();

            uint64_t v116 = v106;
LABEL_169:

            close((int)v188);
            goto LABEL_170;
          }

          uint64_t v115 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v106 = v186;
          if ((v115 & 1) != 0) {
            goto LABEL_113;
          }
          goto LABEL_219;
        }

        __int128 v107 = 4LL;
        switch(v97)
        {
          case 1:
          case 13:
            __int128 v107 = 513LL;
            goto LABEL_163;
          case 2:
            goto LABEL_163;
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 14:
          case 15:
          case 16:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 29:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
            goto LABEL_159;
          case 17:
            __int128 v107 = 516LL;
            goto LABEL_163;
          case 28:
          case 69:
            __int128 v107 = 640LL;
            goto LABEL_163;
          case 30:
            __int128 v107 = 642LL;
            goto LABEL_163;
          case 63:
            __int128 v107 = 514LL;
            goto LABEL_163;
          default:
            if (v97 == 102)
            {
              uint64_t v118 = 0LL;
              __int128 v107 = 512LL;
LABEL_168:
              swift_bridgeObjectRetain();
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v107,  v28,  v22,  v118,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&value,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
              swift_willThrow();

              uint64_t v116 = v96;
              goto LABEL_169;
            }

                              __break(1u);
LABEL_150:
                              __break(1u);
                              goto LABEL_151;
                            }

                            unint64_t v47 = v57;
                          }
                        }
                      }
                    }
                  }
                }
              }

                Swift::String v85 = (4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C;
                uint64_t v84 = ((-15LL << v85) - 1) & v84 | (v28 << v85);
                unint64_t v68 = *(void **)(v6 + 24 + 24 * v28);
                swift_unknownObjectRetain();
                uint64_t result = (void *)swift_unknownObjectRelease();
                uint64_t v6 = (uint64_t)v68;
                if (!*((_BYTE *)v68 + 18)) {
                  goto LABEL_204;
                }
              }
            }

            uint64_t result = (void *)swift_unknownObjectRetain_n();
            unint64_t v9 = v32;
            unint64_t v68 = (void *)v5;
LABEL_204:
            uint64_t v126 = *((unsigned __int16 *)v68 + 8);
            if (*((_WORD *)v68 + 8))
            {
              uint64_t v127 = v68[3];
              uint64_t v21 = __OFSUB__(v9, v127);
              uint64_t v128 = v9 - v127;
              if (v21) {
                goto LABEL_379;
              }
              if (__OFADD__(v128, 1LL)) {
                goto LABEL_380;
              }
              if (v128 + 1 <= 0)
              {
                uint64_t v126 = 0LL;
              }

              else
              {
                if ((_DWORD)v126 == 1)
                {
                  unint64_t v9 = v128;
                  goto LABEL_221;
                }

                uint64_t v132 = v68 + 6;
                __int128 v133 = 1LL;
                while (1)
                {
                  __int128 v134 = *v132;
                  v132 += 3;
                  unint64_t v9 = v128 - v134;
                  if (__OFSUB__(v128, v134)) {
                    goto LABEL_357;
                  }
                  if (__OFADD__(v9, 1LL)) {
                    goto LABEL_358;
                  }
                  if (v9 + 1 < 1) {
                    break;
                  }
                  ++v133;
                  uint64_t v128 = v9;
                  if (v126 == v133) {
                    goto LABEL_221;
                  }
                }

                uint64_t v126 = v133;
                unint64_t v9 = v128;
              }
            }

            else
            {
LABEL_221:
              if (v9) {
                goto LABEL_374;
              }
            }

            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            int64_t v91 = v84 & 0xFFFFFFFFFFFFF0FFLL | (v126 << 8);
LABEL_164:
            swift_unknownObjectRetain();
            int64_t v92 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v15, v91, (uint64_t)v68, v5, v8);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = (void *)swift_unknownObjectRelease_n();
          }

          else
          {
            unint64_t v90 = swift_unknownObjectRetain_n();
            int64_t v91 = specialized Rope._endPath.getter(v90);
            swift_unknownObjectRelease();
            unint64_t v68 = 0LL;
            unint64_t v9 = 0LL;
            if (v5) {
              goto LABEL_164;
            }
            swift_bridgeObjectRelease();
            uint64_t result = (void *)swift_bridgeObjectRelease();
            int64_t v92 = 0LL;
          }

          unint64_t v104 = v184;
          uint64_t v21 = __OFSUB__(v186, v9);
          v186 -= v9;
          if (v21) {
            goto LABEL_354;
          }
          unint64_t v9 = a3;
          goto LABEL_226;
        }

        if (v11 != v39[11]) {
          goto LABEL_350;
        }
        if (!*(void *)v6) {
          goto LABEL_405;
        }
        specialized Rope._Node._prepareModify(at:)(v179, (uint64_t)&v196);
        v207[0] = v197;
        __int128 v192 = v196;
        uint64_t v193 = v197;
        v194 = v198;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v207);
        uint64_t result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v207 + 8);
        uint64_t v193 = MEMORY[0x18961AFF0];
        v39[11] = v11 + 1;
        if (!v39[8]) {
          goto LABEL_406;
        }
        specialized Rope._Node._finalizeModify(_:)(&v189, &v192);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        LOBYTE(v192) = v171;
        uint64_t result = (void *)specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(a4, (char *)&v192);
        if (v11 + 1 != v39[11]) {
          goto LABEL_352;
        }
        if (!*(void *)v6) {
          goto LABEL_407;
        }
        specialized Rope._Node._prepareModify(at:)(v179, (uint64_t)&v199);
        __int128 v205 = v200;
        unint64_t v206 = v201;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v206);
        __int128 v192 = v199;
        v194 = v202;
        unint64_t v66 = *((void *)&v195 + 1);
        uint64_t result = (void *)v195;
        uint64_t v193 = v195;
        uint64_t v67 = v11 + 2;
        v39[11] = v11 + 2;
        if (!v39[8]) {
          goto LABEL_408;
        }
        uint64_t v175 = (uint64_t)result;
        swift_bridgeObjectRetain_n();
        unint64_t v173 = v66;
        swift_bridgeObjectRetain_n();
        unint64_t v68 = specialized Rope._Node._finalizeModify(_:)(v188, &v192);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v69 = v39[8];
        __int128 v70 = v39[9];
        uint64_t v71 = v39[10];
        uint64_t v72 = v39[11];
        *(void *)&__int128 v192 = v67;
        *((void *)&v192 + 1) = v179;
        *(void *)&uint64_t v193 = v68;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(after:)(&v192, v69, v70, v71, v72);
        swift_unknownObjectRelease();
        uint64_t v73 = v192;
        uint64_t v74 = v193;
        uint64_t v75 = swift_unknownObjectRetain();
        __int128 v76 = specialized Rope._endPath.getter(v75);
        uint64_t result = (void *)swift_unknownObjectRelease();
        __int128 v181 = v67;
        if (*((void *)&v73 + 1) >= v76)
        {
          unint64_t v93 = v176;
          unint64_t v9 = a3;
        }

        else
        {
          if ((void)v73 != v39[11]) {
            goto LABEL_364;
          }
          if (v74)
          {
            uint64_t v77 = v74 + 24 * ((*((void *)&v73 + 1) >> ((4 * *(_BYTE *)(v74 + 18) + 8) & 0x3C)) & 0xFLL);
            uint64_t v78 = *(void *)(v77 + 32);
            uint64_t v79 = *(void *)(v77 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            unint64_t v9 = a3;
            __int128 v80 = v184;
          }

          else
          {
            __int128 v80 = v184;
            unint64_t v94 = v184[8];
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(*((unint64_t *)&v73 + 1), v94);
            uint64_t v78 = v95;
            uint64_t v79 = v96;
            swift_unknownObjectRelease();
            unint64_t v9 = a3;
          }

          unint64_t v93 = v176;
          if ((specialized static Dictionary<>.== infix(_:_:)(v78, v175) & 1) != 0)
          {
            uint64_t v97 = specialized static Set.== infix(_:_:)(v79, v173);
            swift_bridgeObjectRelease();
            uint64_t result = (void *)swift_bridgeObjectRelease();
            if ((v97 & 1) != 0)
            {
              Swift::String v98 = specialized Rope._remove(at:)((uint64_t)&v192, v67, v179);
              Swift::String v99 = v80[8];
              Swift::String v100 = v80[11];
              if (v98 < specialized Rope._endPath.getter(v99) && *(_BYTE *)(v99 + 18))
              {
                Swift::String v101 = (v98 >> ((4 * *(_BYTE *)(v99 + 18) + 8) & 0x3C)) & 0xF;
                swift_unknownObjectRetain();
                specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v99 + 24, v101, v98);
                swift_unknownObjectRelease();
              }

              Swift::String v102 = v192;
              swift_bridgeObjectRelease();
              uint64_t result = (void *)swift_bridgeObjectRelease();
              if (v100 != v80[11]) {
                goto LABEL_386;
              }
              if (!*v176) {
                goto LABEL_409;
              }
              uint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(v98, (uint64_t)v203);
              __int128 v192 = v203[0];
              uint64_t v193 = v203[1];
              v194 = v203[2];
              if (__OFADD__(*((void *)&v203[0] + 1), v102)) {
                goto LABEL_387;
              }
              *((void *)&v192 + 1) = *((void *)&v203[0] + 1) + v102;
              __int128 v181 = v100 + 1;
              v80[11] = v100 + 1;
              if (!v80[8]) {
                goto LABEL_410;
              }
              unint64_t v68 = specialized Rope._Node._finalizeModify(_:)(v188, &v192);
              swift_bridgeObjectRelease();
              uint64_t result = (void *)swift_bridgeObjectRelease();
              int64_t v92 = v178;
              int64_t v103 = *v176;
              if (!*v176) {
                goto LABEL_181;
              }
LABEL_180:
              int64_t v103 = *(unsigned __int8 *)(v103 + 18);
              goto LABEL_181;
            }
          }

          else
          {
            swift_bridgeObjectRelease();
            uint64_t result = (void *)swift_bridgeObjectRelease();
          }
        }

        int64_t v92 = v178;
        Swift::String v98 = v179;
        int64_t v103 = *v93;
        if (*v93) {
          goto LABEL_180;
        }
LABEL_181:
        unint64_t v104 = v184;
        if (v98 <= v103)
        {
          int64_t v91 = v98;
          swift_bridgeObjectRelease_n();
          uint64_t result = (void *)swift_bridgeObjectRelease_n();
          unint64_t v15 = v181;
          goto LABEL_226;
        }

        int64_t v105 = v184[8];
        uint64_t v106 = v184[11];
        *(void *)&__int128 v192 = v181;
        *((void *)&v192 + 1) = v98;
        *(void *)&uint64_t v193 = v68;
        if (v181 != v106) {
          goto LABEL_365;
        }
        int64_t v91 = v98;
        if (v105)
        {
          __int128 v107 = *(unsigned __int8 *)(v105 + 18);
          uint64_t result = (void *)swift_unknownObjectRetain();
          if (v98 <= v107) {
            goto LABEL_366;
          }
        }

        else if (!v98)
        {
          goto LABEL_366;
        }

        __int128 v108 = (4 * *((_BYTE *)v68 + 18) + 8) & 0x3C;
        if (((v98 >> v108) & 0xF) != 0)
        {
          unint64_t v109 = ((((v98 >> v108) & 0xF) - 1) << v108) | ((-15LL << v108) - 1) & v98;
          uint64_t result = (void *)swift_unknownObjectRelease();
          __int128 v110 = v68;
          uint64_t v111 = v181;
        }

        else
        {
          swift_unknownObjectRetain();
          __int128 v112 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v192, v105);
          uint64_t result = (void *)swift_unknownObjectRelease_n();
          if ((v112 & 1) == 0) {
            goto LABEL_377;
          }
          unint64_t v109 = *((void *)&v192 + 1);
          uint64_t v111 = v192;
          __int128 v110 = (void *)v193;
        }

        if (v111 != v184[11]) {
          goto LABEL_367;
        }
        if (v110)
        {
          __int128 v113 = &v110[3 * ((v109 >> ((4 * *((_BYTE *)v110 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v115 = v113[4];
          __int128 v114 = v113[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          uint64_t v116 = v184[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v109, v116);
          uint64_t v115 = v117;
          __int128 v114 = v118;
          swift_unknownObjectRelease();
        }

        if ((specialized static Dictionary<>.== infix(_:_:)(v115, v175) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_202:
          unint64_t v15 = v181;
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          goto LABEL_226;
        }

        uint64_t v119 = specialized static Set.== infix(_:_:)(v114, v173);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v119 & 1) == 0) {
          goto LABEL_202;
        }
        uint64_t v120 = specialized Rope._remove(at:)((uint64_t)&v192, v181, v91);
        uint64_t v121 = v184[8];
        __int128 v122 = v184[11];
        if (v120 >= specialized Rope._endPath.getter(v121))
        {
          uint64_t v121 = 0LL;
          uint64_t v123 = v186;
        }

        else
        {
          uint64_t v123 = v186;
          if (*(_BYTE *)(v121 + 18))
          {
            uint64_t v124 = (v120 >> ((4 * *(_BYTE *)(v121 + 18) + 8) & 0x3C)) & 0xF;
            swift_unknownObjectRetain();
            uint64_t v125 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v121 + 24, v124, v120);
            swift_unknownObjectRelease();
            uint64_t v121 = v125;
          }
        }

        __int128 v189 = v122;
        __int128 v190 = v120;
        __int128 v191 = v121;
        uint64_t v129 = v192;
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if (v122 != v184[11]) {
          goto LABEL_388;
        }
        uint64_t v130 = v184[8];
        if (v130)
        {
          uint64_t v131 = *(unsigned __int8 *)(v130 + 18);
          uint64_t result = (void *)swift_unknownObjectRetain();
          if (v120 <= v131) {
            goto LABEL_389;
          }
        }

        else if (!v120)
        {
          goto LABEL_389;
        }

        if (v121 && (__int128 v165 = (4 * *(_BYTE *)(v121 + 18) + 8) & 0x3C, ((v120 >> v165) & 0xF) != 0))
        {
          __int128 v190 = ((((v120 >> v165) & 0xF) - 1) << v165) | ((-15LL << v165) - 1) & v120;
          uint64_t result = (void *)swift_unknownObjectRelease();
          unint64_t v9 = a3;
        }

        else
        {
          swift_unknownObjectRetain();
          uint64_t v166 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v189, v130);
          uint64_t result = (void *)swift_unknownObjectRelease_n();
          unint64_t v9 = a3;
          if ((v166 & 1) == 0) {
            goto LABEL_399;
          }
          __int128 v122 = v189;
        }

        if (v122 != v184[11]) {
          goto LABEL_390;
        }
        if (!*v176) {
          goto LABEL_411;
        }
        int64_t v91 = v190;
        uint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(v190, (uint64_t)v204);
        __int128 v192 = v204[0];
        uint64_t v193 = v204[1];
        v194 = v204[2];
        uint64_t v21 = __OFSUB__(v123, *((void *)&v204[0] + 1));
        unint64_t v167 = v123 - *((void *)&v204[0] + 1);
        if (v21) {
          goto LABEL_392;
        }
        if (__OFADD__(*((void *)&v204[0] + 1), v129)) {
          goto LABEL_394;
        }
        __int128 v186 = v167;
        *((void *)&v192 + 1) = *((void *)&v204[0] + 1) + v129;
        __int128 v168 = v122 + 1;
        v184[11] = v168;
        if (!v184[8]) {
          goto LABEL_412;
        }
        unint64_t v68 = specialized Rope._Node._finalizeModify(_:)(v188, &v192);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        int64_t v92 = v178 - 1;
        if (__OFSUB__(v178, 1LL)) {
          goto LABEL_395;
        }
        unint64_t v15 = v168;
LABEL_226:
        uint64_t v135 = v104[8];
        unint64_t v136 = v104[11];
        *(void *)&__int128 v192 = v15;
        *((void *)&v192 + 1) = v91;
        *(void *)&uint64_t v193 = v68;
        uint64_t v21 = __OFADD__(v92, 1LL);
        __int128 v137 = v92 + 1;
        if (v21) {
          goto LABEL_342;
        }
        if (v15 != v136) {
          goto LABEL_343;
        }
        if (v68)
        {
          unint64_t v138 = v68[3 * ((v91 >> ((4 * *((_BYTE *)v68 + 18) + 8) & 0x3C)) & 0xF) + 3];
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          swift_unknownObjectRetain();
          unint64_t v138 = specialized Rope._Node.subscript.getter(v91, v135);
        }

        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        uint64_t v21 = __OFADD__(v186, v138);
        __int128 v187 = v186 + v138;
        if (v21) {
          goto LABEL_344;
        }
        if (v135)
        {
          uint64_t v139 = ((-15LL << ((4 * *(_BYTE *)(v135 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v135 + 18) | ((unint64_t)*(unsigned __int16 *)(v135 + 16) << ((4 * *(_BYTE *)(v135 + 18) + 8) & 0x3C));
          uint64_t result = (void *)swift_unknownObjectRetain();
        }

        else
        {
          uint64_t v139 = 0LL;
        }

        uint64_t v5 = a2;
        if (v91 >= v139) {
          goto LABEL_345;
        }
        uint64_t v178 = v137;
        if (v68
          && (uint64_t v140 = (4 * *((_BYTE *)v68 + 18) + 8) & 0x3C,
              uint64_t v141 = ((v91 >> v140) & 0xF) + 1,
              v141 < *((unsigned __int16 *)v68 + 8)))
        {
          uint64_t v33 = (v141 << v140) | ((-15LL << v140) - 1) & v91;
          uint64_t result = (void *)swift_unknownObjectRelease_n();
          uint64_t v6 = (uint64_t)v176;
          uint64_t v32 = v187;
        }

        else
        {
          __int128 v182 = v15;
          uint64_t v142 = *(unsigned __int8 *)(v135 + 18);
          Swift::String v143 = (4 * v142 + 8) & 0x3C;
          __int128 v189 = (v91 >> v143) & 0xF;
          if (v142)
          {
            swift_unknownObjectRetain();
            __int128 v144 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v135 + 24, &v189, (uint64_t)&v192, v135, v142);
            uint64_t result = (void *)swift_unknownObjectRelease();
            uint64_t v32 = v187;
            if ((v144 & 1) == 0) {
              goto LABEL_244;
            }
            uint64_t result = (void *)swift_unknownObjectRelease_n();
            uint64_t v33 = *((void *)&v192 + 1);
            uint64_t v6 = (uint64_t)v176;
          }

          else
          {
            __int128 v145 = ((v91 >> v143) & 0xF) + 1;
            uint64_t v32 = v187;
            if (v145 >= *(unsigned __int16 *)(v135 + 16))
            {
LABEL_244:
              uint64_t v6 = (uint64_t)v176;
              if (v135)
              {
                __int128 v146 = *(unsigned __int8 *)(v135 + 18);
                __int128 v147 = *(unsigned __int16 *)(v135 + 16);
                uint64_t result = (void *)swift_unknownObjectRelease_n();
                uint64_t v33 = ((-15LL << ((4 * v146 + 8) & 0x3C)) - 1) & v146 | (unint64_t)(v147 << ((4 * v146 + 8) & 0x3C));
              }

              else
              {
                uint64_t v33 = 0LL;
              }

              *(void *)&__int128 v192 = v182;
              *((void *)&v192 + 1) = v33;
              *(void *)&uint64_t v193 = 0LL;
              goto LABEL_248;
            }

            uint64_t v33 = (v145 << v143) | ((-15LL << v143) - 1) & v91;
            *((void *)&v192 + 1) = v33;
            uint64_t result = (void *)swift_unknownObjectRelease_n();
            *(void *)&uint64_t v193 = v135;
            uint64_t v6 = (uint64_t)v176;
          }
        }

      uint64_t v79 = v56[8];
      uint64_t v78 = v56[9];
      __int128 v80 = v56[10];
      uint64_t v81 = v56[11];
      swift_unknownObjectRetain();
      specialized Rope.subscript.getter(v24, v55, v4, v79, v78, v80, v81);
      uint64_t v10 = v82;
      uint64_t v84 = v83;
      swift_unknownObjectRelease();
      Swift::String v85 = v56[8];
      Swift::String v86 = v56[9];
      uint64_t v87 = v56;
      uint64_t v88 = v56[10];
      uint64_t v89 = v87[11];
      swift_unknownObjectRetain();
      unint64_t v90 = specialized Rope.subscript.getter(v24, v55, v4, v85, v86, v88, v89);
      uint64_t v5 = v91;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      int64_t v92 = v254 + v90;
      if (__OFADD__(v254, v90)) {
        goto LABEL_442;
      }
      v281 = v10;
      v282 = v84;
      if (v254 >= a4) {
        unint64_t v93 = a4;
      }
      else {
        unint64_t v93 = v254;
      }
      if (v254 >= a3) {
        unint64_t v94 = v93;
      }
      else {
        unint64_t v94 = a3;
      }
      if (v92 <= a3) {
        uint64_t v95 = a3;
      }
      else {
        uint64_t v95 = v254 + v90;
      }
      if (v92 > a4) {
        uint64_t v95 = a4;
      }
      if (v94 == v95)
      {
LABEL_443:
        __break(1u);
LABEL_444:
        __break(1u);
LABEL_445:
        __break(1u);
        goto LABEL_446;
      }

      if (v94 != v254 || v95 != v92)
      {
        v243 = v95;
        v244 = v94;
        v257 = v10 + 64;
        unint64_t v109 = 1LL << *(_BYTE *)(v10 + 32);
        if (v109 < 64) {
          __int128 v110 = ~(-1LL << v109);
        }
        else {
          __int128 v110 = -1LL;
        }
        uint64_t v25 = v110 & *(void *)(v10 + 64);
        v261 = (unint64_t)(v109 + 63) >> 6;
        uint64_t result = swift_bridgeObjectRetain();
        v247 = 0;
        unint64_t v15 = 0LL;
        while (1)
        {
LABEL_204:
          if (v25)
          {
            uint64_t v111 = __clz(__rbit64(v25));
            v25 &= v25 - 1;
            __int128 v112 = v111 | (v15 << 6);
          }

          else
          {
            __int128 v30 = __OFADD__(v15++, 1LL);
            if (v30)
            {
              __break(1u);
LABEL_421:
              __break(1u);
LABEL_422:
              __break(1u);
LABEL_423:
              __break(1u);
LABEL_424:
              __break(1u);
              goto LABEL_425;
            }

            if (v15 >= v261) {
              goto LABEL_231;
            }
            __int128 v113 = *(void *)(v257 + 8 * v15);
            if (!v113)
            {
              __int128 v114 = v15 + 1;
              if (v15 + 1 >= v261) {
                goto LABEL_231;
              }
              __int128 v113 = *(void *)(v257 + 8 * v114);
              if (!v113)
              {
                __int128 v114 = v15 + 2;
                if (v15 + 2 >= v261) {
                  goto LABEL_231;
                }
                __int128 v113 = *(void *)(v257 + 8 * v114);
                if (!v113)
                {
                  __int128 v114 = v15 + 3;
                  if (v15 + 3 >= v261) {
                    goto LABEL_231;
                  }
                  __int128 v113 = *(void *)(v257 + 8 * v114);
                  if (!v113)
                  {
                    __int128 v114 = v15 + 4;
                    if (v15 + 4 >= v261)
                    {
LABEL_231:
                      swift_release();
                      __int128 v122 = 1LL << *(_BYTE *)(v267 + 32);
                      if (v122 < 64) {
                        uint64_t v123 = ~(-1LL << v122);
                      }
                      else {
                        uint64_t v123 = -1LL;
                      }
                      unint64_t v15 = v123 & *(void *)(v267 + 64);
                      uint64_t v25 = (unint64_t)(v122 + 63) >> 6;
                      uint64_t result = swift_retain();
                      uint64_t v124 = 0LL;
                      if (v15)
                      {
LABEL_235:
                        uint64_t v125 = __clz(__rbit64(v15));
                        v15 &= v15 - 1;
                        uint64_t v126 = v125 | (v124 << 6);
                        goto LABEL_252;
                      }

                      while (1)
                      {
LABEL_239:
                        __int128 v30 = __OFADD__(v124++, 1LL);
                        if (v30) {
                          goto LABEL_422;
                        }
                        if (v124 >= v25) {
                          goto LABEL_291;
                        }
                        uint64_t v128 = *(void *)(v265 + 8 * v124);
                        if (!v128)
                        {
                          uint64_t v129 = v124 + 1;
                          if (v124 + 1 >= v25) {
                            goto LABEL_291;
                          }
                          uint64_t v128 = *(void *)(v265 + 8 * v129);
                          if (!v128)
                          {
                            uint64_t v129 = v124 + 2;
                            if (v124 + 2 >= v25) {
                              goto LABEL_291;
                            }
                            uint64_t v128 = *(void *)(v265 + 8 * v129);
                            if (!v128)
                            {
                              uint64_t v129 = v124 + 3;
                              if (v124 + 3 >= v25) {
                                goto LABEL_291;
                              }
                              uint64_t v128 = *(void *)(v265 + 8 * v129);
                              if (!v128)
                              {
                                uint64_t v129 = v124 + 4;
                                if (v124 + 4 >= v25) {
                                  goto LABEL_291;
                                }
                                uint64_t v128 = *(void *)(v265 + 8 * v129);
                                if (!v128)
                                {
                                  while (1)
                                  {
                                    uint64_t v124 = v129 + 1;
                                    if (__OFADD__(v129, 1LL)) {
                                      goto LABEL_449;
                                    }
                                    if (v124 >= v25) {
                                      break;
                                    }
                                    uint64_t v128 = *(void *)(v265 + 8 * v124);
                                    ++v129;
                                    if (v128) {
                                      goto LABEL_251;
                                    }
                                  }

    uint64_t v18 = 0;
    goto LABEL_150;
  }

  if ((v13 - 58) >= 0xF7u)
  {
LABEL_148:
    v215 = a4;
    goto LABEL_149;
  }

  switch(v13)
  {
    case '+':
    case '-':
      if (v11 < 2)
      {
        if (v11 != 1) {
          goto LABEL_315;
        }
        uint64_t v127 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12);
        unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        uint64_t v95 = v128;
        uint64_t v97 = v129;
        uint64_t v11 = v127;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        __int128 v112 = 0xD000000000000010LL;
        __int128 v113 = "at end of number";
        goto LABEL_146;
      }

      uint64_t v40 = v12 + 1;
      uint64_t v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12 + 1);
      if (v41 == 48)
      {
        unint64_t v42 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v12, v11);
        uint64_t v44 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)( v42,  v43,  (unsigned __int8 *)(v12 + 1),  a3,  a4);
        if (v6) {
          return v7;
        }
        uint64_t v40 = (unint64_t)v44;
        v215 = a4;
        if ((v45 & 1) == 0)
        {
          uint64_t v18 = 0;
          goto LABEL_151;
        }

    uint64_t v18 = 0;
    goto LABEL_150;
  }

  if ((v13 - 58) >= 0xF7u)
  {
LABEL_148:
    v215 = a4;
    goto LABEL_149;
  }

  switch(v13)
  {
    case '+':
    case '-':
      if (v11 < 2)
      {
        if (v11 != 1) {
          goto LABEL_316;
        }
        uint64_t v127 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12);
        unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        uint64_t v95 = v128;
        uint64_t v97 = v129;
        uint64_t v11 = v127;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        __int128 v112 = 0xD000000000000010LL;
        __int128 v113 = "at end of number";
        goto LABEL_146;
      }

      uint64_t v40 = v12 + 1;
      uint64_t v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12 + 1);
      if (v41 == 48)
      {
        unint64_t v42 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v12, v11);
        uint64_t v44 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)( v42,  v43,  (unsigned __int8 *)(v12 + 1),  a3,  a4);
        if (v6) {
          return v7;
        }
        uint64_t v40 = (unint64_t)v44;
        v215 = a4;
        if ((v45 & 1) == 0) {
          goto LABEL_253;
        }
LABEL_14:
        if (*(_BYTE *)v12 != 45) {
          goto LABEL_270;
        }
        unint64_t v20 = specialized _parseJSON5Integer<A>(_:isHex:)( (_BYTE *)v12,  v11,  1,  (uint64_t (*)(_BYTE *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v21 & 1) == 0)
        {
          *(double *)&uint64_t v22 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v20));
          if ((v23 & 1) == 0) {
            return *(double *)&v22;
          }
        }

        goto LABEL_179;
      }

      uint64_t v179 = v41;
      if (v41 == 46) {
        goto LABEL_281;
      }
      if (v41 == 78)
      {
        uint64_t v197 = a4;
        uint64_t v18 = 1;
        uint64_t v198 = (char *)specialized BufferView.dropFirst(_:)(1LL, v12, v11);
        specialized static JSON5Scanner.validateNaN(from:fullSource:)(v198, v199, a3, v197);
        if (v6) {
          return v7;
        }
        v215 = v197;
        goto LABEL_151;
      }

      if (v41 != 73)
      {
        v226 = 0.0;
        v227 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(20LL);
        v200._uint64_t countAndFlagsBits = 0x27207265746661LL;
        v200._unint64_t object = (void *)0xE700000000000000LL;
        DefaultStringInterpolation.appendLiteral(_:)(v200);
        uint64_t v201 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12);
        __int128 v202 = (v201 + 1);
        if ((v201 & 0x80) != 0) {
          __int128 v202 = (((v201 & 0x3F) << 8) | (v201 >> 6)) + 33217;
        }
        v225 = (v202 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v202) >> 3)) & 7)));
        v203._uint64_t countAndFlagsBits = MEMORY[0x186E1B6AC](&v225);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v203);
        swift_bridgeObjectRelease();
        v204._uint64_t countAndFlagsBits = 0x6D756E206E692027LL;
        v204._unint64_t object = (void *)0xEB00000000726562LL;
        DefaultStringInterpolation.appendLiteral(_:)(v204);
        __int128 v205 = v226;
        unint64_t v206 = v227;
        unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v40, a3, a4);
        uint64_t v95 = v207;
        uint64_t v97 = v208;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(double *)unint64_t v39 = v205;
        *(void *)(v39 + 8) = v206;
        *(void *)(v39 + 16) = v179;
        goto LABEL_246;
      }

      __int128 v190 = a4;
      uint64_t v18 = 1;
      __int128 v191 = (char *)specialized BufferView.dropFirst(_:)(1LL, v12, v11);
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v191, v192, a3, v190);
      if (v6) {
        return v7;
      }
      v215 = v190;
LABEL_151:
      uint64_t v132 = v12 + v11 - 1;
      __int128 v133 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v132);
      if ((v133 | 0x20) != 0x65)
      {
        specialized BufferView.withUnsafePointer<A>(_:)((const char *)v12);
        if ((v143 & 1) == 0)
        {
          uint64_t v7 = v142;
          if ((~*(void *)&v142 & 0x7FF0000000000000LL) == 0)
          {
            if ((v18 & 1) != 0) {
              return v7;
            }
            goto LABEL_179;
          }

          goto LABEL_213;
        }

        uint64_t v148 = specialized BufferView.suffix(from:)(v40, v12, v11);
        if (v149 < 1) {
          goto LABEL_307;
        }
        Swift::String v150 = v148;
        uint64_t v151 = v149;
        uint64_t v12 = v148 + v149;
        Swift::String v152 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v148);
        if (v152 == 45 || (uint64_t v11 = v150, v152 == 43)) {
          uint64_t v11 = v150 + 1;
        }
        v224 = a3;
        if (!specialized static Comparable.<= infix(_:_:)(v11, v12)) {
          goto LABEL_308;
        }
        if (v11 - v150 < 0) {
          goto LABEL_309;
        }
        __int128 v153 = (const char *)specialized BufferView.prefix(_:)(2LL, v11);
        if (specialized BufferView.withUnsafePointer<A>(_:)(v153, v154))
        {
          if (v11 < v12)
          {
            __int128 v155 = _asciiNumbers.getter();
            v156 = v155;
            __int128 v157 = 0;
            __int128 v158 = 0;
            v214 = v151 + v150;
            __int128 v210 = -v150;
            __int128 v159 = 1;
            uint64_t v160 = HIBYTE(v155);
            while (1)
            {
              v218 = v159;
              v221 = v157;
              __int128 v76 = 0LL;
              uint64_t v161 = v214 - v11;
              while (1)
              {
                if ((uint64_t)(v210 + v11 + v76) < 0 || (Swift::UInt v82 = v161 < 1, --v161, v82))
                {
                  __break(1u);
LABEL_268:
                  __break(1u);
LABEL_269:
                  __break(1u);
LABEL_270:
                  __int128 v187 = specialized _parseJSON5Integer<A>(_:isHex:)( (unsigned __int8 *)v12,  v11,  1,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
                  if ((v188 & 1) == 0)
                  {
                    *(double *)&uint64_t v22 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v187));
                    if ((v189 & 1) == 0) {
                      return *(double *)&v22;
                    }
                  }

    uint64_t v18 = 0;
    goto LABEL_150;
  }

  if ((v13 - 58) >= 0xF7u)
  {
LABEL_148:
    v217 = a4;
    goto LABEL_149;
  }

  switch(v13)
  {
    case '+':
    case '-':
      if (v11 < 2)
      {
        if (v11 != 1) {
          goto LABEL_315;
        }
        uint64_t v129 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12);
        uint64_t v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        uint64_t v97 = v130;
        Swift::String v99 = v131;
        uint64_t v11 = v129;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        __int128 v114 = 0xD000000000000010LL;
        uint64_t v115 = "at end of number";
        goto LABEL_146;
      }

      uint64_t v40 = v12 + 1;
      uint64_t v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12 + 1);
      if (v41 == 48)
      {
        unint64_t v42 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v12, v11);
        uint64_t v44 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)( v42,  v43,  (unsigned __int8 *)(v12 + 1),  a3,  a4);
        if (v6) {
          return v7;
        }
        uint64_t v40 = (unint64_t)v44;
        v217 = a4;
        if ((v45 & 1) == 0)
        {
          uint64_t v18 = 0;
          goto LABEL_151;
        }

    uint64_t v18 = 0;
    goto LABEL_150;
  }

  if ((v13 - 58) >= 0xF7u)
  {
LABEL_148:
    v218 = a4;
    goto LABEL_149;
  }

  switch(v13)
  {
    case '+':
    case '-':
      if (v11 < 2)
      {
        if (v11 != 1) {
          goto LABEL_317;
        }
        uint64_t v121 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12);
        unint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        BOOL v52 = v122;
        uint64_t v54 = v123;
        uint64_t v11 = v121;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        uint64_t v124 = 0xD000000000000010LL;
        uint64_t v125 = "at end of number";
        goto LABEL_251;
      }

      unint64_t v31 = v12 + 1;
      uint64_t v32 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12 + 1);
      if (v32 == 48)
      {
        uint64_t v33 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v12, v11);
        uint64_t v35 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)( v33,  v34,  (unsigned __int8 *)(v12 + 1),  a3,  a4);
        if (v6) {
          return v7;
        }
        unint64_t v31 = (unint64_t)v35;
        v218 = a4;
        if ((v36 & 1) == 0)
        {
          uint64_t v18 = 0;
          goto LABEL_151;
        }

    int64_t v103 = v14 + v13;
    unint64_t v104 = v14 + v13 - 1;
    int64_t v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v104);
    if ((v105 - 58) > 0xF5u)
    {
      uint64_t result = a9(v14, v13);
      if ((result & 0x100) == 0) {
        return result;
      }
      return ((uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))a8)( v187 & 1,  v14,  v13,  a3,  v11,  v21);
    }

    BOOL v52 = v104 - a3;
    if (v104 < a3 || a3 + a4 < v104)
    {
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }

    if (a3 + a4 >= v103) {
      uint64_t v106 = v103;
    }
    else {
      uint64_t v106 = a3 + a4;
    }
    if (v106 <= a3)
    {
      uint64_t v21 = 0LL;
      Swift::String v13 = 1LL;
      goto LABEL_180;
    }

    uint64_t v180 = v105;
    __int128 v185 = v104 - a3;
    __int128 v107 = a4 + a3;
    __int128 v108 = -(uint64_t)a3;
    Swift::String v13 = 1LL;
    __int128 v189 = a4 + a3;
    v194 = -(uint64_t)a3;
LABEL_157:
    unint64_t v109 = 0LL;
    __int128 v110 = 0LL;
    uint64_t v111 = v107 - a3;
    __int128 v112 = v108 + a3;
    while ((uint64_t)(v112 + v110) >= 0 && (uint64_t)(v111 + v109) >= 1)
    {
      __int128 v113 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v110);
      if (v113 == 10)
      {
        uint64_t v58 = __OFADD__(v13++, 1LL);
        __int128 v108 = v194;
        if (!v58)
        {
          a3 += v110 + 1;
          goto LABEL_174;
        }

        goto LABEL_278;
      }

      if (v113 == 13)
      {
        __int128 v114 = a3 + v110;
        __int128 v108 = v194;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v110 + 1, v104)) {
          goto LABEL_172;
        }
        if (((v194 + a3 + v110 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v110 + v111) >= 1)
        {
LABEL_172:
          uint64_t v58 = __OFADD__(v13++, 1LL);
          if (!v58)
          {
            a3 = v114 + 1;
LABEL_174:
            __int128 v107 = v189;
            if (a3 >= v106)
            {
              uint64_t v21 = 0LL;
LABEL_176:
              int64_t v105 = v180;
              BOOL v52 = v185;
LABEL_180:
              unint64_t v65 = v105;
              goto LABEL_181;
            }

            goto LABEL_157;
          }

    int64_t v103 = v14 + v13;
    unint64_t v104 = v14 + v13 - 1;
    int64_t v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v104);
    if ((v105 - 58) > 0xF5u)
    {
      uint64_t result = a9(v14, v13);
      if ((result & 0x10000) == 0) {
        return result;
      }
      return ((uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))a8)( v187 & 1,  v14,  v13,  a3,  v11,  v21);
    }

    BOOL v52 = v104 - a3;
    if (v104 < a3 || a3 + a4 < v104)
    {
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }

    if (a3 + a4 >= v103) {
      uint64_t v106 = v103;
    }
    else {
      uint64_t v106 = a3 + a4;
    }
    if (v106 <= a3)
    {
      uint64_t v21 = 0LL;
      Swift::String v13 = 1LL;
      goto LABEL_180;
    }

    uint64_t v180 = v105;
    __int128 v185 = v104 - a3;
    __int128 v107 = a4 + a3;
    __int128 v108 = -(uint64_t)a3;
    Swift::String v13 = 1LL;
    __int128 v189 = a4 + a3;
    v194 = -(uint64_t)a3;
LABEL_157:
    unint64_t v109 = 0LL;
    __int128 v110 = 0LL;
    uint64_t v111 = v107 - a3;
    __int128 v112 = v108 + a3;
    while ((uint64_t)(v112 + v110) >= 0 && (uint64_t)(v111 + v109) >= 1)
    {
      __int128 v113 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v110);
      if (v113 == 10)
      {
        uint64_t v58 = __OFADD__(v13++, 1LL);
        __int128 v108 = v194;
        if (!v58)
        {
          a3 += v110 + 1;
          goto LABEL_174;
        }

        goto LABEL_278;
      }

      if (v113 == 13)
      {
        __int128 v114 = a3 + v110;
        __int128 v108 = v194;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v110 + 1, v104)) {
          goto LABEL_172;
        }
        if (((v194 + a3 + v110 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v110 + v111) >= 1)
        {
LABEL_172:
          uint64_t v58 = __OFADD__(v13++, 1LL);
          if (!v58)
          {
            a3 = v114 + 1;
LABEL_174:
            __int128 v107 = v189;
            if (a3 >= v106)
            {
              uint64_t v21 = 0LL;
LABEL_176:
              int64_t v105 = v180;
              BOOL v52 = v185;
LABEL_180:
              unint64_t v65 = v105;
              goto LABEL_181;
            }

            goto LABEL_157;
          }

    unint64_t v104 = v14 + v13;
    int64_t v105 = v14 + v13 - 1;
    uint64_t v106 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v105);
    if ((v106 - 58) > 0xF5u)
    {
      uint64_t result = (char *)a9(v14, v13);
      if ((v116 & 1) == 0) {
        return result;
      }
      return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( v187 & 1,  (char *)v14,  v13,  a3,  v11,  v21,  (uint64_t (*)(char **))a8);
    }

    BOOL v52 = v105 - a3;
    if (v105 < a3 || a3 + a4 < v105)
    {
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }

    if (a3 + a4 >= v104) {
      __int128 v107 = v104;
    }
    else {
      __int128 v107 = a3 + a4;
    }
    if (v107 <= a3)
    {
      uint64_t v21 = 0LL;
      Swift::String v13 = 1LL;
      goto LABEL_180;
    }

    uint64_t v180 = v106;
    __int128 v185 = v105 - a3;
    __int128 v108 = a4 + a3;
    unint64_t v109 = -(uint64_t)a3;
    Swift::String v13 = 1LL;
    __int128 v189 = a4 + a3;
    v194 = -(uint64_t)a3;
LABEL_157:
    __int128 v110 = 0LL;
    uint64_t v111 = 0LL;
    __int128 v112 = v108 - a3;
    __int128 v113 = v109 + a3;
    while ((uint64_t)(v113 + v111) >= 0 && (uint64_t)(v112 + v110) >= 1)
    {
      __int128 v114 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v111);
      if (v114 == 10)
      {
        uint64_t v58 = __OFADD__(v13++, 1LL);
        unint64_t v109 = v194;
        if (!v58)
        {
          a3 += v111 + 1;
          goto LABEL_174;
        }

        goto LABEL_278;
      }

      if (v114 == 13)
      {
        uint64_t v115 = a3 + v111;
        unint64_t v109 = v194;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v111 + 1, v105)) {
          goto LABEL_172;
        }
        if (((v194 + a3 + v111 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v111 + v112) >= 1)
        {
LABEL_172:
          uint64_t v58 = __OFADD__(v13++, 1LL);
          if (!v58)
          {
            a3 = v115 + 1;
LABEL_174:
            __int128 v108 = v189;
            if (a3 >= v107)
            {
              uint64_t v21 = 0LL;
LABEL_176:
              uint64_t v106 = v180;
              BOOL v52 = v185;
LABEL_180:
              unint64_t v66 = v106;
              goto LABEL_181;
            }

            goto LABEL_157;
          }

      specialized _NativeDictionary._insert(at:key:value:)(v154, v248, v192, v161, (void *)v90);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_150:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFADD__(v161, 1LL)) {
        goto LABEL_209;
      }
      __int128 v184 = v161 + 1;
LABEL_152:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v222, v223);
      uint64_t v162 = v201;
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      uint64_t v201 = v162;
      if (!v162)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
        __int128 v188 = v90;
LABEL_154:
        uint64_t v41 = v219;
        uint64_t v35 = v212[0];
        __int128 v30 = v186;
        uint64_t v199 = v185;
        uint64_t v32 = v190;
        uint64_t v34 = v187;
        uint64_t v38 = v213;
        uint64_t v37 = v214;
        if (v212[0]) {
          continue;
        }
LABEL_19:
        if (!v41) {
          goto LABEL_195;
        }
        goto LABEL_20;
      }

      swift_unknownObjectRelease();
      outlined destroy of Any?( (uint64_t)v220,  &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
LABEL_197:
      swift_bridgeObjectRelease();
      uint64_t v25 = v222;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    }

    break;
  }

  uint64_t v161 = v184;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    unint64_t v90 = v151;
    if ((v153 & 1) != 0) {
      goto LABEL_146;
    }
    goto LABEL_149;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AttributedString._AttributeStorage, Int>);
  uint64_t v163 = static _DictionaryStorage.copy(original:)();
  unint64_t v90 = v163;
  if (!*(void *)(v151 + 16))
  {
LABEL_191:
    swift_bridgeObjectRelease();
    uint64_t v161 = v184;
    if ((v158 & 1) != 0) {
      goto LABEL_146;
    }
    goto LABEL_149;
  }

  __int128 v164 = (void *)(v163 + 64);
  __int128 v165 = v188 + 64;
  uint64_t v166 = (unint64_t)((1LL << *(_BYTE *)(v90 + 32)) + 63) >> 6;
  unint64_t v167 = 0LL;
  __int128 v168 = v188;
  *(void *)(v90 + 16) = *(void *)(v188 + 16);
  char v169 = 1LL << *(_BYTE *)(v168 + 32);
  if (v169 < 64) {
    char v170 = ~(-1LL << v169);
  }
  else {
    char v170 = -1LL;
  }
  __int128 v171 = v170 & *(void *)(v168 + 64);
  __int128 v172 = (unint64_t)(v169 + 63) >> 6;
  while (2)
  {
    if (v171)
    {
      unint64_t v173 = __clz(__rbit64(v171));
      v171 &= v171 - 1;
      uint64_t v174 = v173 | (v167 << 6);
LABEL_165:
      uint64_t v175 = 16 * v174;
      uint64_t v176 = 8 * v174;
      unint64_t v177 = *(void *)(*(void *)(v168 + 56) + v176);
      uint64_t v178 = *(void *)(v90 + 48);
      uint64_t v200 = *(_OWORD *)(*(void *)(v168 + 48) + v175);
      *(_OWORD *)(v178 + v175) = v200;
      *(void *)(*(void *)(v90 + 56) + v176) = v177;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }

    break;
  }

  Swift::String v98 = __OFADD__(v167++, 1LL);
  if (v98) {
    goto LABEL_214;
  }
  if (v167 >= v172) {
    goto LABEL_191;
  }
  uint64_t v179 = *(void *)(v165 + 8 * v167);
  if (v179)
  {
LABEL_186:
    __int128 v171 = (v179 - 1) & v179;
    uint64_t v174 = __clz(__rbit64(v179)) + (v167 << 6);
    goto LABEL_165;
  }

  if (v167 + 1 >= v172) {
    goto LABEL_191;
  }
  uint64_t v179 = *(void *)(v165 + 8 * (v167 + 1));
  if (v179)
  {
    ++v167;
    goto LABEL_186;
  }

  uint64_t v180 = v167 + 2;
  if (v167 + 2 >= v172) {
    goto LABEL_191;
  }
  uint64_t v179 = *(void *)(v165 + 8 * v180);
  if (v179) {
    goto LABEL_185;
  }
  uint64_t v180 = v167 + 3;
  if (v167 + 3 >= v172) {
    goto LABEL_191;
  }
  uint64_t v179 = *(void *)(v165 + 8 * v180);
  if (v179) {
    goto LABEL_185;
  }
  uint64_t v180 = v167 + 4;
  if (v167 + 4 >= v172) {
    goto LABEL_191;
  }
  uint64_t v179 = *(void *)(v165 + 8 * v180);
  if (v179) {
    goto LABEL_185;
  }
  uint64_t v180 = v167 + 5;
  if (v167 + 5 >= v172) {
    goto LABEL_191;
  }
  uint64_t v179 = *(void *)(v165 + 8 * v180);
  if (v179) {
    goto LABEL_185;
  }
  uint64_t v180 = v167 + 6;
  if (v167 + 6 >= v172) {
    goto LABEL_191;
  }
  uint64_t v179 = *(void *)(v165 + 8 * v180);
  if (v179) {
    goto LABEL_185;
  }
  uint64_t v180 = v167 + 7;
  if (v167 + 7 >= v172) {
    goto LABEL_191;
  }
  uint64_t v179 = *(void *)(v165 + 8 * v180);
  if (v179)
  {
LABEL_185:
    unint64_t v167 = v180;
    __int128 v168 = v188;
    goto LABEL_186;
  }

  while (1)
  {
    unint64_t v167 = v180 + 1;
    if (__OFADD__(v180, 1LL)) {
      break;
    }
    if (v167 >= v172) {
      goto LABEL_191;
    }
    uint64_t v179 = *(void *)(v165 + 8 * v167);
    ++v180;
    __int128 v168 = v188;
    if (v179) {
      goto LABEL_186;
    }
  }

unint64_t AttributedString.Guts.index(afterRun:)(unint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 64);
  int64_t v3 = result >> 11;
  if (v2) {
    int64_t v4 = *(void *)(v1 + 80);
  }
  else {
    int64_t v4 = 0LL;
  }
  if (v4 < v3)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }

  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v6 = *(void *)(v1 + 88);
  if (!v2 || (v3 < *(void *)(v1 + 80) ? (BOOL v7 = *(unsigned __int16 *)(v2 + 16) == 0) : (BOOL v7 = 1), v7))
  {
    unint64_t v8 = swift_unknownObjectRetain_n();
    unint64_t v9 = specialized Rope._endPath.getter(v8);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v10 = 0LL;
    uint64_t v11 = v5;
    int64_t v12 = 0LL;
    if (v2) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }

  uint64_t v33 = *(void *)(v1 + 72);
  uint64_t v34 = *(void *)(v1 + 88);
  uint64_t v19 = *(unsigned __int8 *)(v2 + 18);
  if (!*(_BYTE *)(v2 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    int64_t v12 = v3;
    uint64_t v10 = v2;
    uint64_t v27 = *(unsigned __int16 *)(v2 + 16);
    if (!*(_WORD *)(v2 + 16)) {
      goto LABEL_53;
    }
LABEL_42:
    uint64_t v28 = *(void *)(v10 + 24);
    BOOL v13 = __OFSUB__(v12, v28);
    int64_t v29 = v12 - v28;
    if (v13) {
      goto LABEL_68;
    }
    if (!__OFADD__(v29, 1LL))
    {
      if (v29 + 1 < 1)
      {
        uint64_t v27 = 0LL;
        goto LABEL_54;
      }

      if ((_DWORD)v27 == 1)
      {
        int64_t v12 = v29;
        goto LABEL_53;
      }

      __int128 v30 = (uint64_t *)(v10 + 48);
      uint64_t v31 = 1LL;
      while (1)
      {
        uint64_t v32 = *v30;
        v30 += 3;
        int64_t v12 = v29 - v32;
        if (__OFSUB__(v29, v32)) {
          goto LABEL_66;
        }
        if (__OFADD__(v12, 1LL)) {
          goto LABEL_67;
        }
        if (v12 + 1 < 1)
        {
          uint64_t v27 = v31;
          int64_t v12 = v29;
          goto LABEL_54;
        }

        ++v31;
        int64_t v29 = v12;
        if (v27 == v31) {
          goto LABEL_53;
        }
      }
    }

uint64_t AttributedString.Guts.index(beforeRun:)(unint64_t a1)
{
  unint64_t v2 = v1;
  __int128 v4 = *(_OWORD *)(v1 + 32);
  __int128 v54 = *(_OWORD *)(v1 + 16);
  __int128 v55 = v4;
  __int128 v56 = *(_OWORD *)(v1 + 48);
  BigString.utf8.getter();
  unint64_t v5 = BigString.UTF8View.index(before:)();
  uint64_t result = outlined release of Locale((uint64_t)v49);
  uint64_t v7 = *(void *)(v1 + 64);
  int64_t v8 = *(void *)(v1 + 80);
  if (v7) {
    int64_t v9 = *(void *)(v1 + 80);
  }
  else {
    int64_t v9 = 0LL;
  }
  int64_t v48 = v5 >> 11;
  uint64_t v10 = *(void *)(v1 + 72);
  uint64_t v11 = *(__int128 **)(v1 + 88);
  unint64_t v47 = a1;
  if (!v7 || v48 >= v8 || !*(_WORD *)(v7 + 16))
  {
    unint64_t v24 = swift_unknownObjectRetain_n();
    unint64_t v25 = specialized Rope._endPath.getter(v24);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v26 = v10;
    uint64_t v16 = 0LL;
    int64_t v13 = 0LL;
    int64_t v27 = 0LL;
    if (!v7) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }

  uint64_t v46 = v10;
  uint64_t v12 = *(unsigned __int8 *)(v7 + 18);
  if (!*(_BYTE *)(v7 + 18)) {
    goto LABEL_51;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  int64_t v13 = v48;
  uint64_t v14 = v7;
  while (2)
  {
    uint64_t v17 = *(unsigned __int16 *)(v14 + 16);
    if (!*(_WORD *)(v14 + 16)) {
      goto LABEL_11;
    }
    uint64_t v18 = *(void *)(v14 + 40);
    BOOL v19 = __OFSUB__(v13, v18);
    int64_t v20 = v13 - v18;
    if (v19) {
      goto LABEL_76;
    }
    if (__OFADD__(v20, 1LL)) {
      goto LABEL_77;
    }
    if (v20 + 1 < 1)
    {
      uint64_t v17 = 0LL;
      goto LABEL_12;
    }

    if ((_DWORD)v17 == 1)
    {
      int64_t v13 = v20;
LABEL_11:
      if (!v13) {
        goto LABEL_12;
      }
      goto LABEL_75;
    }

    uint64_t v21 = (uint64_t *)(v14 + 64);
    uint64_t v22 = 1LL;
    while (1)
    {
      uint64_t v23 = *v21;
      v21 += 3;
      int64_t v13 = v20 - v23;
      if (__OFSUB__(v20, v23))
      {
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }

      if (__OFADD__(v13, 1LL)) {
        goto LABEL_74;
      }
      if (v13 + 1 < 1) {
        break;
      }
      ++v22;
      int64_t v20 = v13;
      if (v17 == v22) {
        goto LABEL_11;
      }
    }

    uint64_t v17 = v22;
    int64_t v13 = v20;
LABEL_12:
    char v15 = (4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C;
    uint64_t v12 = ((-15LL << v15) - 1) & v12 | (v17 << v15);
    uint64_t v16 = *(void *)(v14 + 24 + 24 * v17);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v14 = v16;
    if (*(_BYTE *)(v16 + 18)) {
      continue;
    }
    break;
  }

  while (1)
  {
    uint64_t v38 = *(unsigned __int16 *)(v16 + 16);
    if (*(_WORD *)(v16 + 16))
    {
      uint64_t v39 = *(void *)(v16 + 24);
      BOOL v19 = __OFSUB__(v13, v39);
      int64_t v40 = v13 - v39;
      if (v19) {
        goto LABEL_90;
      }
      if (__OFADD__(v40, 1LL)) {
        goto LABEL_91;
      }
      if (v40 + 1 < 1)
      {
        uint64_t v38 = 0LL;
        goto LABEL_70;
      }

      if ((_DWORD)v38 != 1)
      {
        unint64_t v43 = (uint64_t *)(v16 + 48);
        uint64_t v44 = 1LL;
        while (1)
        {
          uint64_t v45 = *v43;
          v43 += 3;
          int64_t v13 = v40 - v45;
          if (__OFSUB__(v40, v45)) {
            goto LABEL_82;
          }
          if (__OFADD__(v13, 1LL)) {
            goto LABEL_83;
          }
          if (v13 + 1 < 1)
          {
            uint64_t v38 = v44;
            int64_t v13 = v40;
            goto LABEL_70;
          }

          ++v44;
          int64_t v40 = v13;
          if (v38 == v44) {
            goto LABEL_69;
          }
        }
      }

      int64_t v13 = v40;
    }

LABEL_28:
    uint64_t v28 = v48 - v27;
    if (__OFSUB__(v48, v27)) {
      goto LABEL_79;
    }
    if (v16)
    {
      unint64_t v29 = *(void *)(v16 + 24 * ((v25 >> ((4 * *(_BYTE *)(v16 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v30 = *(void *)(v2 + 64);
      swift_unknownObjectRetain();
      unint64_t v29 = specialized Rope._Node.subscript.getter(v25, v30);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (__OFADD__(v28, v29)) {
      goto LABEL_81;
    }
    uint64_t v12 = v2 + 16;
    if (v28 < 1) {
      goto LABEL_84;
    }
    uint64_t v31 = *(_BYTE **)(v2 + 64);
    uint64_t v7 = *(void *)(v2 + 80);
    uint64_t v32 = *(__int128 **)(v2 + 88);
    *(void *)&__int128 v51 = v11;
    *((void *)&v51 + 1) = v25;
    *(void *)&__int128 v52 = v16;
    if (v11 != v32) {
      goto LABEL_85;
    }
    if (v31)
    {
      unint64_t v2 = v31[18];
      swift_unknownObjectRetain_n();
      if (v2 < v25) {
        goto LABEL_39;
      }
    }

    else
    {
      unint64_t v2 = 0LL;
      if (v25)
      {
LABEL_39:
        if (!v16) {
          goto LABEL_45;
        }
        char v33 = (4 * *(_BYTE *)(v16 + 18) + 8) & 0x3C;
        if (((v25 >> v33) & 0xF) == 0) {
          goto LABEL_45;
        }
        unint64_t v34 = ((((v25 >> v33) & 0xF) - 1) << v33) | ((-15LL << v33) - 1) & v25;
        *((void *)&v51 + 1) = v34;
        swift_unknownObjectRelease();
        goto LABEL_48;
      }
    }

    __break(1u);
LABEL_51:
    uint64_t result = swift_unknownObjectRetain_n();
    int64_t v13 = v48;
    uint64_t v16 = v7;
  }

  __int128 v35 = *(_OWORD *)(v2 + 32);
  __int128 v51 = *(_OWORD *)v12;
  __int128 v52 = v35;
  __int128 v53 = *(_OWORD *)(v2 + 48);
  uint64_t v31 = v50;
  uint64_t v11 = &v51;
  BigString.utf8.getter();
  if (!__OFSUB__(v28, v48))
  {
LABEL_61:
    uint64_t v42 = BigString.UTF8View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v50);
    return v42;
  }

  __break(1u);
LABEL_45:
  swift_unknownObjectRetain();
  char v36 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v51, (uint64_t)v31);
  uint64_t result = swift_unknownObjectRelease_n();
  if ((v36 & 1) == 0) {
    goto LABEL_89;
  }
  unint64_t v34 = *((void *)&v51 + 1);
  uint64_t v16 = v52;
  if ((void)v52)
  {
LABEL_48:
    unint64_t v37 = *(void *)(v16 + 24 * ((v34 >> ((4 * *(_BYTE *)(v16 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_59;
  }

  swift_unknownObjectRetain();
  unint64_t v37 = specialized Rope._Node.subscript.getter(v34, (uint64_t)v31);
  swift_unknownObjectRelease();
LABEL_59:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v28, v37)) {
    goto LABEL_87;
  }
  __int128 v41 = *(_OWORD *)(v12 + 16);
  __int128 v51 = *(_OWORD *)v12;
  __int128 v52 = v41;
  __int128 v53 = *(_OWORD *)(v12 + 32);
  uint64_t result = BigString.utf8.getter();
  if (!__OFSUB__(v28 - v37, v48)) {
    goto LABEL_61;
  }
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

  Hasher._combine(_:)(0);
LABEL_29:
  BOOL v19 = v61;
  int64_t v20 = v62;
  uint64_t v22 = v63;
  uint64_t v21 = v64;
  uint64_t v23 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v24 = v20;
    unint64_t v25 = v22;
    uint64_t v26 = v21;
    int64_t v27 = v23;
    uint64_t v28 = v19;
    _CFObject.hash(into:)();
    __int128 v53 = v19;
    if (v20) {
      goto LABEL_31;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    char v33 = v23;
    unint64_t v34 = v20;
    __int128 v35 = v22;
    char v36 = v21;
    __int128 v53 = 0LL;
    if (v20)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v29 = v20;
      _CFObject.hash(into:)();

      if (v22) {
        goto LABEL_32;
      }
      goto LABEL_37;
    }
  }

  Hasher._combine(_:)(0);
  if (v22)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v30 = v22;
    _CFObject.hash(into:)();

    if (v21) {
      goto LABEL_33;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v23) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }

  int64_t v20 = v0;
  Hasher._combine(_:)(0);
LABEL_29:
  uint64_t v22 = v70;
  uint64_t v21 = v71;
  unint64_t v24 = v72;
  uint64_t v23 = v73;
  unint64_t v25 = v74;
  unint64_t v60 = v73;
  uint64_t v61 = v71;
  uint64_t v58 = v74;
  if (v70)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v26 = v61;
    int64_t v27 = v24;
    uint64_t v28 = v24;
    unint64_t v29 = v23;
    uint64_t v30 = v25;
    uint64_t v31 = v22;
    uint64_t v21 = v61;
    _CFObject.hash(into:)();
    unint64_t v59 = v22;
    if (v61) {
      goto LABEL_31;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v38 = v25;
    uint64_t v39 = v21;
    int64_t v27 = v24;
    int64_t v40 = v24;
    __int128 v41 = v23;
    unint64_t v59 = 0LL;
    if (v21)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v32 = v21;
      _CFObject.hash(into:)();

      if (v27) {
        goto LABEL_32;
      }
      goto LABEL_37;
    }
  }

  Hasher._combine(_:)(0);
  if (v27)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v33 = v27;
    _CFObject.hash(into:)();

    unint64_t v34 = v60;
    if (v60) {
      goto LABEL_33;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    char v36 = v58;
    if (v58) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }

  Hasher._combine(_:)(0);
  if (!v34)
  {
LABEL_17:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
    if (!v35) {
      goto LABEL_18;
    }
    goto LABEL_30;
  }

  Hasher._combine(_:)(0);
  if (!v36)
  {
LABEL_13:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v23);
    if (!v37) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  Hasher._combine(_:)(0);
  if (!v36)
  {
LABEL_13:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v23);
    if (!v37) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  objc_msgSend(v8, sel_setHour_, v23);
  if ((v39 & 1) != 0)
  {
LABEL_11:
    if ((v40 & 1) != 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }

  result._unint64_t object = v14;
  result._uint64_t countAndFlagsBits = v13;
  return result;
}

    __int128 v164 = (char *)((v62 - 1) & v62);
    unint64_t v59 = __clz(__rbit64(v62)) + (v60 << 6);
LABEL_29:
    unint64_t v64 = v163;
    outlined init with copy of AnyHashable(*(void *)(v163 + 48) + 40 * v59, (uint64_t)&v176);
    outlined init with copy of Any(*(void *)(v64 + 56) + 32 * v59, (uint64_t)v154);
    unint64_t v173 = v178;
    uint64_t v174 = v179;
    uint64_t v175 = v180;
    __int128 v171 = v176;
    __int128 v172 = v177;
    outlined init with copy of AnyHashable((uint64_t)&v171, (uint64_t)v170);
    unint64_t v65 = v156;
    unint64_t v66 = swift_dynamicCast();
    uint64_t v67 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v36[7];
    if (!v66)
    {
      v67(v65, 1LL, 1LL, a2);
      outlined destroy of Any?( (uint64_t)&v171,  &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v65, v141);
LABEL_69:
      swift_release();
      goto LABEL_73;
    }

    v67(v65, 0LL, 1LL, a2);
    unint64_t v68 = (void (*)(uint64_t, uint64_t, uint64_t))v36[4];
    v68(v53, v65, a2);
    outlined init with copy of Any((uint64_t)v148, (uint64_t)v170);
    outlined destroy of Any?( (uint64_t)&v171,  &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    unint64_t v69 = v155;
    __int128 v70 = swift_dynamicCast();
    uint64_t v71 = v168;
    uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v168 + 56);
    if ((v70 & 1) == 0)
    {
      v72(v69, 1LL, 1LL, a3);
      ((void (*)(uint64_t, uint64_t))v167[1])(v53, a2);
      (*(void (**)(char *, uint64_t))(v138 + 8))(v69, v139);
      goto LABEL_69;
    }

    uint64_t v162 = (char *)v60;
    v72(v69, 0LL, 1LL, a3);
    uint64_t v73 = v69;
    uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
    uint64_t v75 = v151;
    v74(v151, v73, a3);
    __int128 v76 = v153;
    uint64_t v77 = &v153[*(int *)(TupleTypeMetadata2 + 48)];
    v68((uint64_t)v153, v53, a2);
    v74(v77, v75, a3);
    uint64_t v78 = v159;
    uint64_t v79 = a2;
    __int128 v80 = a3;
    uint64_t v81 = v152;
    Swift::UInt v82 = &v152[*(int *)(v159 + 48)];
    uint64_t v83 = v76;
    uint64_t v84 = v169;
    v68((uint64_t)v152, (uint64_t)v83, v79);
    v74(v82, v77, v80);
    Swift::String v85 = &v81[*(int *)(v78 + 48)];
    Swift::String v86 = v149;
    uint64_t v87 = v81;
    a3 = v80;
    a2 = v79;
    v68((uint64_t)v149, (uint64_t)v87, v79);
    uint64_t v88 = v150;
    v74(v150, v85, a3);
    uint64_t v89 = v86;
    unint64_t v90 = v146;
    v68((uint64_t)v165, (uint64_t)v89, v79);
    v74(v166, v88, a3);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    int64_t v91 = -1LL << *((_BYTE *)v84 + 32);
    int64_t v92 = result & ~v91;
    unint64_t v93 = v92 >> 6;
    if (((-1LL << v92) & ~*(void *)&v90[8 * (v92 >> 6)]) != 0)
    {
      uint64_t v57 = __clz(__rbit64((-1LL << v92) & ~*(void *)&v90[8 * (v92 >> 6)])) | v92 & 0x7FFFFFFFFFFFFFC0LL;
      char v36 = v167;
      __int128 v53 = v157;
    }

    else
    {
      unint64_t v94 = 0;
      uint64_t v95 = (unint64_t)(63 - v91) >> 6;
      char v36 = v167;
      __int128 v53 = v157;
      do
      {
        if (++v93 == v95 && (v94 & 1) != 0)
        {
          __break(1u);
          goto LABEL_76;
        }

        uint64_t v96 = v93 == v95;
        if (v93 == v95) {
          unint64_t v93 = 0LL;
        }
        v94 |= v96;
        uint64_t v97 = *(void *)&v90[8 * v93];
      }

      while (v97 == -1);
      uint64_t v57 = __clz(__rbit64(~v97)) + (v93 << 6);
    }

    *(void *)&v90[(v57 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v57;
    uint64_t v58 = v169;
    v68(v169[6] + v36[9] * v57, (uint64_t)v165, a2);
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v74)( v58[7] + *(void *)(v168 + 72) * v57,  v166,  a3);
    ++v58[2];
    __int128 v56 = (uint64_t)v162;
    __int128 v52 = (unint64_t)v164;
  }

  unint64_t v63 = (char *)(v56 + 5);
  if (v56 + 5 >= (uint64_t)v145)
  {
LABEL_70:
    swift_release();
    goto LABEL_74;
  }

  uint64_t v62 = *(void *)(v158 + 8LL * (void)v63);
  if (v62)
  {
    unint64_t v60 = v56 + 5;
    goto LABEL_28;
  }

  while (1)
  {
    unint64_t v60 = (uint64_t)(v63 + 1);
    if (__OFADD__(v63, 1LL)) {
      break;
    }
    uint64_t v62 = *(void *)(v158 + 8 * v60);
    ++v63;
    if (v62) {
      goto LABEL_28;
    }
  }

    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v21 = 1LL;
    *(_OWORD *)(v21 + 8) = 0u;
    *(_OWORD *)(v21 + 24) = 0u;
    *(void *)(v21 + 40) = 0LL;
    uint64_t v22 = 12;
LABEL_46:
    *(_BYTE *)(v21 + 48) = v22;
    return swift_willThrow();
  }

  int64_t v9 = (unint64_t)(a3 + 2);
  unint64_t v34 = a1 + a2 - (void)(a3 + 2);
  if ((((unint64_t)&a3[-a1 + 2] | v34) & 0x8000000000000000LL) != 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v34 >= 2) {
    __int128 v35 = 2LL;
  }
  else {
    __int128 v35 = a1 + a2 - (void)(a3 + 2);
  }
  if (v34 >= 2)
  {
    char v36 = 0;
    unint64_t v37 = a3 + 2;
    while (1)
    {
      uint64_t v38 = *v37;
      uint64_t v39 = v38 - 48;
      if ((v38 - 48) >= 0xA)
      {
        if ((v38 - 65) < 6)
        {
          uint64_t v39 = v38 - 55;
        }

        else
        {
          uint64_t v39 = v38 - 87;
        }
      }

      if (v36 > 0xFu) {
        goto LABEL_45;
      }
      char v36 = v39 + 16 * v36;
      if (++v37 >= &a3[v35 + 2])
      {
        if (v36)
        {
          LODWORD(result) = v36;
          return result;
        }

  specialized Set._Variant.insert(_:)(&v3, 7uLL);
  if ((a1 & 0x400) == 0)
  {
LABEL_10:
    if ((a1 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

            if (!v56) {
              goto LABEL_29;
            }
LABEL_238:
            __break(1u);
LABEL_239:
            __break(1u);
LABEL_240:
            __break(1u);
LABEL_241:
            __break(1u);
LABEL_242:
            __break(1u);
LABEL_243:
            __break(1u);
LABEL_244:
            __break(1u);
LABEL_245:
            __break(1u);
LABEL_246:
            __break(1u);
LABEL_247:
            __break(1u);
LABEL_248:
            __break(1u);
LABEL_249:
            __break(1u);
LABEL_250:
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
LABEL_254:
            __break(1u);
LABEL_255:
            __break(1u);
            goto LABEL_256;
          }

          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs(v169);
          uint64_t result = swift_unknownObjectRetain();
          unint64_t v64 = 0LL;
          char v36 = v57;
LABEL_52:
          uint64_t v78 = *(unsigned __int16 *)(v36 + 16);
          if (*(_WORD *)(v36 + 16))
          {
            uint64_t v79 = v56 - 1;
            if (__OFSUB__(v56, 1LL)) {
              goto LABEL_264;
            }
            if (__OFADD__(v79, 1LL)) {
              goto LABEL_265;
            }
            if (v56 <= 0)
            {
              uint64_t v78 = 0LL;
            }

            else
            {
              if ((_DWORD)v78 == 1) {
                goto LABEL_72;
              }
              uint64_t v74 = __OFSUB__(v79, 1LL);
              uint64_t v79 = v56 - 2;
              if (v74) {
                goto LABEL_268;
              }
              if (__OFADD__(v79, 1LL)) {
                goto LABEL_269;
              }
              if (v56 - 1 < 1)
              {
                uint64_t v78 = 1LL;
              }

              else
              {
                if ((_DWORD)v78 == 2) {
                  goto LABEL_72;
                }
                __int128 v80 = 0LL;
                uint64_t v81 = v78 - 2;
                if (v79 >= v78 - 3) {
                  Swift::UInt v82 = v78 - 3;
                }
                else {
                  Swift::UInt v82 = v56 - 2;
                }
                if (v82 >= v56 + 0x7FFFFFFFFFFFFFFELL) {
                  Swift::UInt v82 = v56 + 0x7FFFFFFFFFFFFFFELL;
                }
                while (1)
                {
                  if (v81 <= v82) {
                    goto LABEL_261;
                  }
                  if (v56 + 0x7FFFFFFFFFFFFFFELL == v80) {
                    goto LABEL_262;
                  }
                  if (v79 == v80) {
                    break;
                  }
                  if (v81 == ++v80)
                  {
                    v79 -= v80;
                    goto LABEL_72;
                  }
                }

                uint64_t v78 = v56;
              }
            }
          }

          else
          {
            uint64_t v79 = v56;
LABEL_72:
            if (v79) {
              goto LABEL_263;
            }
          }

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v60 = v64 & 0xFFFFFFFFFFFFF0FFLL | (v78 << 8);
        }

        else
        {
          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs(v169);
          unint64_t v66 = *(unsigned __int16 *)(v57 + 16);
          uint64_t v67 = *(_BYTE *)(v57 + 18);
          swift_unknownObjectRelease_n();
          char v36 = 0LL;
          unint64_t v60 = ((-15LL << ((4 * v67 + 8) & 0x3C)) - 1) & v64 | (unint64_t)(v66 << ((4 * v67 + 8) & 0x3C));
        }

        swift_unknownObjectRetain();
        unint64_t v59 = v61;
        uint64_t v62 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v61, v60, v36, v57, v58, v171);
        uint64_t result = swift_unknownObjectRelease_n();
      }

      else
      {
        uint64_t result = outlined retain of AttributedString.Runs(v169);
        unint64_t v60 = 0LL;
        char v36 = 0LL;
        uint64_t v62 = 0LL;
        uint64_t v61 = v59;
      }
    }

    else if (v168 == 2)
    {
      unint64_t v60 = v165;
      if (v57)
      {
        outlined retain of AttributedString.Runs(v169);
        swift_unknownObjectRetain();
        uint64_t v61 = v174;
        uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v174, v165, v36, v57, v58, v171);
        uint64_t v62 = result;
      }

      else
      {
        uint64_t result = outlined retain of AttributedString.Runs(v169);
        uint64_t v62 = 0LL;
        uint64_t v61 = v174;
      }
    }

    else
    {
      uint64_t v62 = v164 >> 11;
      outlined retain of AttributedString.Runs(v169);
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v61 = v174;
      unint64_t v60 = v165;
    }

    *(void *)&uint64_t v195 = v61;
    *((void *)&v195 + 1) = v60;
    *(void *)&uint64_t v196 = v36;
    if (__OFADD__(v167, 1LL)) {
      goto LABEL_246;
    }
    if (v61 != v59) {
      goto LABEL_247;
    }
    uint64_t v178 = v167 + 1;
    uint64_t v180 = v43;
    if (v36)
    {
      uint64_t v83 = v60;
      uint64_t v84 = *(void *)(v36 + 24 * ((v60 >> ((4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      uint64_t v83 = v60;
      uint64_t v84 = specialized Rope._Node.subscript.getter(v60, v57);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v74 = __OFADD__(v62, v84);
    Swift::String v85 = v62 + v84;
    if (v74) {
      goto LABEL_248;
    }
    Swift::String v86 = v59;
    if (v57)
    {
      uint64_t v87 = ((-15LL << ((4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v57 + 18) | ((unint64_t)*(unsigned __int16 *)(v57 + 16) << ((4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C));
      uint64_t result = swift_unknownObjectRetain();
    }

    else
    {
      uint64_t v87 = 0LL;
    }

    if (v83 >= v87) {
      goto LABEL_249;
    }
    if (v36
      && (uint64_t v88 = (4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C,
          uint64_t v89 = ((v83 >> v88) & 0xF) + 1,
          v89 < *(unsigned __int16 *)(v36 + 16)))
    {
      unint64_t v90 = (v89 << v88) | ((-15LL << v88) - 1) & v83;
      swift_unknownObjectRelease_n();
    }

    else
    {
      int64_t v91 = *(unsigned __int8 *)(v57 + 18);
      int64_t v92 = (4 * v91 + 8) & 0x3C;
      __int128 v191 = (v83 >> v92) & 0xF;
      if (v91)
      {
        swift_unknownObjectRetain();
        unint64_t v93 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v57 + 24, &v191, (uint64_t)&v195, v57, v91);
        swift_unknownObjectRelease();
        if ((v93 & 1) == 0) {
          goto LABEL_98;
        }
        swift_unknownObjectRelease_n();
        unint64_t v90 = *((void *)&v195 + 1);
      }

      else
      {
        unint64_t v94 = ((v83 >> v92) & 0xF) + 1;
        if (v94 >= *(unsigned __int16 *)(v57 + 16))
        {
LABEL_98:
          if (v57)
          {
            uint64_t v96 = *(unsigned __int8 *)(v57 + 18);
            uint64_t v97 = *(unsigned __int16 *)(v57 + 16);
            swift_unknownObjectRelease_n();
            unint64_t v90 = ((-15LL << ((4 * v96 + 8) & 0x3C)) - 1) & v96 | (unint64_t)(v97 << ((4 * v96 + 8) & 0x3C));
          }

          else
          {
            unint64_t v90 = 0LL;
          }

          uint64_t v95 = v168;
          *(void *)&uint64_t v195 = v86;
          *((void *)&v195 + 1) = v90;
          *(void *)&uint64_t v196 = 0LL;
          goto LABEL_102;
        }

        unint64_t v90 = (v94 << v92) | ((-15LL << v92) - 1) & v83;
        *((void *)&v195 + 1) = v90;
        swift_unknownObjectRelease_n();
        *(void *)&uint64_t v196 = v57;
      }
    }

    uint64_t v95 = v168;
LABEL_102:
    __int128 v165 = v90;
    uint64_t v174 = v195;
    char v36 = v196;
    Swift::String v98 = v183 + 1;
    if (v95 == 2)
    {
      Swift::String v99 = v183[2];
      v274 = *v98;
      v275 = v99;
      v276 = v183[3];
      Swift::String v100 = &v262;
      BigString.utf8.getter();
      BigString.startIndex.getter();
      Swift::String v101 = BigString.UTF8View.index(_:offsetBy:)();
      int64_t v103 = v102;
      int64_t v105 = v104;
      __int128 v107 = v106;
      unint64_t v2 = v166;
    }

    else
    {
      __int128 v108 = v183[2];
      v271 = *v98;
      v272 = v108;
      v273 = v183[3];
      BigString.utf8.getter();
      uint64_t result = v164;
      unint64_t v2 = v166;
      if (__OFSUB__(v85, v164 >> 11)) {
        goto LABEL_255;
      }
      Swift::String v100 = &v261;
      Swift::String v101 = BigString.UTF8View.index(_:offsetBy:)();
      int64_t v103 = v109;
      int64_t v105 = v110;
      __int128 v107 = v111;
    }

    outlined release of Locale((uint64_t)v100);
    outlined release of AttributedString.Runs(v169);
    *(void *)&v254 = v167 + 1;
    *((void *)&v254 + 1) = v174;
    v255 = v165;
    v256 = v36;
    v257 = v101;
    v258 = v103;
    v259 = v105;
    __int128 v168 = v107;
    v260 = v107;
    v218 = v326;
    v219 = v327;
    v220 = v328;
    v214 = v322;
    v215 = v323;
    v216 = v324;
    v217 = v325;
    __int128 v210 = v318;
    __int128 v211 = v319;
    v212 = v320;
    v213 = v321;
    uint64_t v208 = v316;
    uint64_t v209 = v317;
    if (v42 == v176)
    {
      __int128 v205 = v300;
      unint64_t v206 = v301;
      uint64_t v207 = v302;
      uint64_t v201 = v296;
      __int128 v202 = v297;
      __int128 v203 = v298;
      __int128 v204 = v299;
      uint64_t v197 = v292;
      uint64_t v198 = v293;
      uint64_t v199 = v294;
      uint64_t v200 = v295;
      uint64_t v195 = v290;
      uint64_t v196 = v291;
      if (v175)
      {
LABEL_218:
        outlined release of AttributedString.Runs((uint64_t)&v195);
        outlined release of AttributedString.Runs((uint64_t)&v208);
        uint64_t v162 = v175;
        goto LABEL_222;
      }

      uint64_t v161 = 0LL;
LABEL_220:
      outlined release of AttributedString.Runs((uint64_t)&v195);
      outlined release of AttributedString.Runs((uint64_t)&v208);
      if (!v161) {
        return 1LL;
      }
      uint64_t v162 = v161;
LABEL_222:
      outlined consume of AttributedString.Runs.Run?(v162);
      return 0LL;
    }

    __int128 v164 = v101;
    ++v167;
    __int128 v54 = v187;
    uint64_t v46 = v189;
    unint64_t v43 = v180;
LABEL_108:
    uint64_t result = (uint64_t)AttributedString.Runs.subscript.getter(&v234, &v191);
    if (v42 >= v176)
    {
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
      goto LABEL_238;
    }

    __int128 v112 = v46;
    __int128 v182 = v193;
    char v170 = v192;
    __int128 v184 = v194;
    __int128 v172 = v191;
    __int128 v113 = *(_OWORD **)v2;
    __int128 v114 = *(void *)(*(void *)v2 + 64LL);
    uint64_t v115 = *(void *)(*(void *)v2 + 72LL);
    __int128 v181 = *(void *)(*(void *)v2 + 80LL);
    __int128 v188 = *(void *)(*(void *)v2 + 88LL);
    if (v44 == 1 || v54 != *(void *)(*(void *)v2 + 88LL))
    {
      if (v114) {
        __int128 v117 = *(void *)(*(void *)v2 + 72LL);
      }
      else {
        __int128 v117 = 0LL;
      }
      if (v42 < 0 || v117 < v42) {
        goto LABEL_250;
      }
      if (!v114)
      {
        uint64_t result = outlined retain of AttributedString.Runs(v2);
        uint64_t v129 = v188;
        unint64_t v43 = 0LL;
        uint64_t v44 = 0LL;
        uint64_t v116 = 0LL;
        __int128 v54 = v188;
        goto LABEL_180;
      }

      uint64_t v118 = *(unsigned __int8 *)(v114 + 18);
      if (!*(_WORD *)(v114 + 16) || v42 >= v115)
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs(v2);
        uint64_t v130 = *(unsigned __int16 *)(v114 + 16);
        uint64_t v131 = *(_BYTE *)(v114 + 18);
        swift_unknownObjectRelease_n();
        uint64_t v44 = 0LL;
        unint64_t v43 = ((-15LL << ((4 * v131 + 8) & 0x3C)) - 1) & v118 | (unint64_t)(v130 << ((4 * v131 + 8) & 0x3C));
LABEL_179:
        swift_unknownObjectRetain();
        __int128 v54 = v188;
        uint64_t v116 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v188, v43, v44, v114, v115, v181);
        uint64_t result = swift_unknownObjectRelease_n();
        uint64_t v129 = v188;
        goto LABEL_180;
      }

      if (*(_BYTE *)(v114 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs(v2);
        uint64_t result = swift_unknownObjectRetain();
        uint64_t v119 = v42;
        uint64_t v120 = v114;
        while (1)
        {
          __int128 v122 = *(unsigned __int16 *)(v120 + 16);
          if (*(_WORD *)(v120 + 16))
          {
            uint64_t v123 = *(void *)(v120 + 32);
            uint64_t v124 = v119 - v123;
            if (__OFSUB__(v119, v123)) {
              goto LABEL_230;
            }
            if (__OFADD__(v124, 1LL)) {
              goto LABEL_231;
            }
            if (v124 + 1 <= 0)
            {
              __int128 v122 = 0LL;
              goto LABEL_126;
            }

            if ((_DWORD)v122 == 1)
            {
              v119 -= v123;
            }

            else
            {
              uint64_t v125 = *(void *)(v120 + 56);
              uint64_t v74 = __OFSUB__(v124, v125);
              uint64_t v126 = v124 - v125;
              if (v74) {
                goto LABEL_243;
              }
              if (__OFADD__(v126, 1LL)) {
                goto LABEL_244;
              }
              if (v126 + 1 < 1)
              {
                __int128 v122 = 1LL;
                uint64_t v119 = v124;
                goto LABEL_126;
              }

              if ((_DWORD)v122 != 2)
              {
                uint64_t v127 = (void *)(v120 + 80);
                uint64_t v128 = 2LL;
                while (v122 != v128)
                {
                  uint64_t v119 = v126 - *v127;
                  if (__OFSUB__(v126, *v127)) {
                    goto LABEL_227;
                  }
                  if (__OFADD__(v119, 1LL)) {
                    goto LABEL_228;
                  }
                  if (v119 + 1 < 1)
                  {
                    __int128 v122 = v128;
                    uint64_t v119 = v126;
                    goto LABEL_126;
                  }

                  ++v128;
                  v127 += 3;
                  uint64_t v126 = v119;
                  if (v122 == v128) {
                    goto LABEL_125;
                  }
                }

                __break(1u);
LABEL_227:
                __break(1u);
LABEL_228:
                __break(1u);
LABEL_229:
                __break(1u);
LABEL_230:
                __break(1u);
LABEL_231:
                __break(1u);
LABEL_232:
                __break(1u);
                goto LABEL_233;
              }

              uint64_t v119 = v126;
            }
          }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  specialized Set._Variant.insert(_:)(&v3, 7uLL);
  if ((v1 & 0x100) == 0)
  {
LABEL_10:
    if ((v1 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

            uint64_t v11 = (v15 | v25) == 0;
            if (v15 && v25)
            {
              if (v16 == v23 && v15 == v25) {
                uint64_t v11 = 1;
              }
              else {
                uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
              }
            }

            goto LABEL_35;
          }
        }

        else
        {
          uint64_t v23 = 0LL;
          unint64_t v25 = 0LL;
          if (v13 != v18) {
            goto LABEL_27;
          }
        }

        if (v14 == v20) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
    }

    else
    {
      outlined destroy of Any?((uint64_t)v28);
    }

    unint64_t v68 = dispatch thunk of BinaryInteger._lowWord.getter();
    v45(v34, v5);
    unint64_t v50 = v131;
    goto LABEL_10;
  }

  uint64_t v61 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v61 & 1) == 0)
  {
    unint64_t v47 = v124;
    if (v62 >= 64)
    {
      v45(v34, v5);
      unint64_t v50 = v131;
      goto LABEL_10;
    }

    goto LABEL_28;
  }

  if (v62 > 64)
  {
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    unint64_t v63 = v123;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    unint64_t v64 = dispatch thunk of static Comparable.< infix(_:_:)();
    v45(v63, v5);
    v45(v34, v5);
    unint64_t v50 = v131;
    unint64_t v47 = v124;
    if ((v64 & 1) != 0) {
      goto LABEL_36;
    }
    goto LABEL_10;
  }

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v20, AssociatedConformanceWitness);
  uint64_t v72 = v123;
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  uint64_t v73 = dispatch thunk of static Comparable.< infix(_:_:)();
  v45(v72, v5);
  uint64_t v74 = v106;
  (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v106, v34, v5);
  unint64_t v50 = v131;
  if ((v73 & 1) != 0)
  {
    v45(v74, v5);
  }

  else
  {
    uint64_t v75 = *(void *)&v135[0];
    __int128 v76 = dispatch thunk of BinaryInteger._lowWord.getter();
    v45(v74, v5);
    unint64_t v47 = v124;
    if (v76 >= v75) {
      goto LABEL_10;
    }
  }

  BOOL v19 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v4);
  swift_bridgeObjectRelease_n();
LABEL_17:
  int64_t v20 = v19 + 32;
  if (!(v3 >> 62))
  {
LABEL_18:
    uint64_t v21 = v3 & 0xFFFFFFFFFFFFFF8LL;
    goto LABEL_19;
  }

      uint64_t result = swift_release();
      uint64_t v22 = 0LL;
      uint64_t v14 = 0LL;
      uint64_t v16 = 0LL;
      uint64_t v17 = 0LL;
      BOOL v19 = 0LL;
      uint64_t v18 = 0LL;
      int64_t v20 = 0LL;
      uint64_t v21 = 0;
LABEL_29:
      *(void *)a3 = v22;
      *(void *)(a3 + 8) = v14;
      *(void *)(a3 + 16) = v16;
      *(void *)(a3 + 24) = v17;
      *(void *)(a3 + 32) = v19;
      *(void *)(a3 + 40) = v18;
      *(void *)(a3 + 48) = v20;
      *(_BYTE *)(a3 + 56) = v21;
      return result;
    }

        swift_once();
        goto LABEL_23;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_28;
  }

      swift_once();
      goto LABEL_14;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v50);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  unint64_t v29 = swift_initStackObject();
  *(_OWORD *)(v29 + 16) = xmmword_183720D90;
  *(void *)(v29 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(v29 + 72) = MEMORY[0x189617FA8];
  *(void *)(v29 + 40) = v30;
  *(void *)(v29 + 48) = 0xD00000000000001DLL;
  *(void *)(v29 + 56) = 0x80000001839CC780LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  unint64_t v1 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(v29 + 32, (uint64_t)&v50);
  uint64_t v10 = *((void *)&v50 + 1);
  int64_t v9 = v50;
  swift_retain();
  uint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
  if ((v32 & 1) != 0) {
    goto LABEL_26;
  }
  v1[(v31 >> 6) + 8] |= 1LL << v31;
  char v33 = (uint64_t *)(v1[6] + 16 * v31);
  *char v33 = v9;
  v33[1] = v10;
  outlined init with take of Any(v51, (_OWORD *)(v1[7] + 32 * v31));
  unint64_t v34 = v1[2];
  char v15 = __OFADD__(v34, 1LL);
  __int128 v35 = v34 + 1;
  if (v15)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  v1[2] = v35;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  char v36 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  unint64_t v37 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v38 = objc_msgSend(v36, sel_initWithDomain_code_userInfo_, v37, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v39 = objc_msgSend(v38, sel_domain);
  int64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  uint64_t v42 = v41;

  if (v40 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v42 == v43)
  {
LABEL_20:
    swift_bridgeObjectRelease_n();
    goto LABEL_22;
  }

  uint64_t v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v44 & 1) != 0) {
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  __src[22] = (int)ucal_get();
  LOBYTE(__src[23]) = 0;
  if ((a2 & 0x100) == 0)
  {
LABEL_14:
    if ((a2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

      specialized _NativeDictionary._insert(at:key:value:)(v21, a1, a2, 0LL, 0LL, v39);
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }

    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
    uint64_t v44 = static _DictionaryStorage.copy(original:)();
    uint64_t v39 = v44;
    if (*(void *)(a4 + 16))
    {
      uint64_t v45 = (char *)(v44 + 64);
      __src = (char *)(a4 + 64);
      uint64_t v46 = (unint64_t)((1LL << *(_BYTE *)(v39 + 32)) + 63) >> 6;
      if (v39 != a4 || v45 >= &__src[8 * v46]) {
        memmove(v45, __src, 8 * v46);
      }
      unint64_t v47 = 0LL;
      *(void *)(v39 + 16) = *(void *)(a4 + 16);
      int64_t v48 = 1LL << *(_BYTE *)(a4 + 32);
      unint64_t v49 = -1LL;
      if (v48 < 64) {
        unint64_t v49 = ~(-1LL << v48);
      }
      unint64_t v50 = v49 & *(void *)(a4 + 64);
      Swift::UInt v82 = (void *)((unint64_t)(v48 + 63) >> 6);
      while (1)
      {
        if (v50)
        {
          __int128 v51 = __clz(__rbit64(v50));
          v50 &= v50 - 1;
          __int128 v52 = v51 | (v47 << 6);
        }

        else
        {
          uint64_t v28 = __OFADD__(v47++, 1LL);
          if (v28)
          {
            __break(1u);
LABEL_109:
            __break(1u);
            goto LABEL_110;
          }

          unint64_t v59 = *(void *)&__src[8 * v47];
          if (!v59)
          {
            unint64_t v60 = v47 + 1;
            unint64_t v59 = *(void *)&__src[8 * v60];
            if (!v59)
            {
              unint64_t v60 = v47 + 2;
              unint64_t v59 = *(void *)&__src[8 * v60];
              if (!v59)
              {
                unint64_t v60 = v47 + 3;
                unint64_t v59 = *(void *)&__src[8 * v60];
                if (!v59)
                {
                  unint64_t v60 = v47 + 4;
                  unint64_t v59 = *(void *)&__src[8 * v60];
                  if (!v59)
                  {
                    unint64_t v60 = v47 + 5;
                    unint64_t v59 = *(void *)&__src[8 * v60];
                    if (!v59)
                    {
                      unint64_t v60 = v47 + 6;
                      unint64_t v59 = *(void *)&__src[8 * v60];
                      if (!v59)
                      {
                        unint64_t v60 = v47 + 7;
                        unint64_t v59 = *(void *)&__src[8 * v60];
                        if (!v59)
                        {
                          while (1)
                          {
                            unint64_t v47 = v60 + 1;
                            if (__OFADD__(v60, 1LL)) {
                              break;
                            }
                            unint64_t v59 = *(void *)&__src[8 * v47];
                            ++v60;
                            if (v59) {
                              goto LABEL_66;
                            }
                          }

        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }

    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  swift_unknownObjectRetain();
  uint64_t v17 = specialized Rope._Node._graftBack(_:)(&v39, a2);
  BOOL v19 = v18;
  uint64_t v21 = v20;
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v23 = v39;
  unint64_t v24 = v3[1];
  unint64_t v25 = __OFADD__(v24, v39);
  uint64_t v26 = v24 + v39;
  if (v25)
  {
    __break(1u);
    goto LABEL_27;
  }

  int64_t v27 = v40;
  v3[1] = v26;
  uint64_t v28 = v3[2];
  unint64_t v25 = __OFADD__(v28, v27);
  unint64_t v29 = v28 + v27;
  if (v25)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  v3[2] = v29;
  if (!v17)
  {
    uint64_t result = 0LL;
    goto LABEL_23;
  }

  if (*(_WORD *)(*v3 + 16) != 15)
  {
    unint64_t v25 = __OFADD__(v23, v19);
    v23 += v19;
    if (v25)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }

    unint64_t v25 = __OFADD__(v27, v21);
    v27 += v21;
    if (v25)
    {
LABEL_33:
      __break(1u);
      return result;
    }

    specialized Rope._Node._appendNode(_:)(v17, v19, v21);
    uint64_t result = 0LL;
LABEL_23:
    *a1 = v23;
    goto LABEL_24;
  }

  swift_unknownObjectRetain();
  uint64_t result = specialized Rope._Node.split(keeping:)(7LL);
  uint64_t v39 = result;
  int64_t v40 = v31;
  __int128 v41 = v30;
  uint64_t v32 = v23 - v31;
  if (__OFSUB__(v23, v31))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  unint64_t v25 = __OFSUB__(v27, v30);
  v27 -= v30;
  if (v25)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  specialized Rope._Node._appendNode(_:)(v17, v19, v21);
  swift_unknownObjectRelease();
  uint64_t result = v39;
  *a1 = v32;
LABEL_24:
  a1[1] = v27;
  return result;
}

    uint64_t v30 = a4[8];
    uint64_t v11 = a5;
    if (a5 != a6)
    {
      uint64_t v7 = a4[11];
      if (v30)
      {
        int64_t v9 = 0LL;
        uint64_t v10 = a4[9];
        uint64_t v11 = a4[10];
        int64_t v8 = ((-15LL << ((4 * *(_BYTE *)(v30 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v30 + 18) | ((unint64_t)*(unsigned __int16 *)(v30 + 16) << ((4 * *(_BYTE *)(v30 + 18) + 8) & 0x3C));
      }

      else
      {
        int64_t v8 = 0LL;
        int64_t v9 = 0LL;
        uint64_t v10 = 0LL;
        uint64_t v11 = 0LL;
      }

      goto LABEL_5;
    }

    if (v30) {
      uint64_t v31 = a4[10];
    }
    else {
      uint64_t v31 = 0LL;
    }
    if (a5 < 0 || v31 < a5) {
      goto LABEL_192;
    }
    uint64_t v7 = a4[11];
    if (!v30)
    {
      int64_t v9 = 0LL;
      int64_t v8 = 0LL;
      uint64_t v10 = 0LL;
      goto LABEL_5;
    }

    uint64_t v32 = *(unsigned __int8 *)(v30 + 18);
    uint64_t v88 = a4[9];
    if (!*(_WORD *)(v30 + 16) || a4[10] <= a5)
    {
      int64_t v8 = ((-15LL << ((4 * v32 + 8) & 0x3C)) - 1) & v32 | ((unint64_t)*(unsigned __int16 *)(v30 + 16) << ((4 * v32 + 8) & 0x3C));
      swift_unknownObjectRetain();
      char v33 = 0LL;
      int64_t v9 = 0LL;
      goto LABEL_91;
    }

    if (*(_BYTE *)(v30 + 18))
    {
      uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
      char v33 = a5;
      unint64_t v34 = v30;
      while (1)
      {
        char v36 = *(unsigned __int16 *)(v34 + 16);
        if (!*(_WORD *)(v34 + 16)) {
          break;
        }
        unint64_t v37 = *(void *)(v34 + 40);
        uint64_t v38 = v33 - v37;
        if (__OFSUB__(v33, v37)) {
          goto LABEL_181;
        }
        if (__OFADD__(v38, 1LL)) {
          goto LABEL_182;
        }
        if (v38 + 1 <= 0)
        {
          char v36 = 0LL;
          goto LABEL_41;
        }

        if ((_DWORD)v36 == 1)
        {
          v33 -= v37;
          break;
        }

        uint64_t v39 = *(void *)(v34 + 64);
        char v15 = __OFSUB__(v38, v39);
        int64_t v40 = v38 - v39;
        if (v15) {
          goto LABEL_190;
        }
        if (__OFADD__(v40, 1LL)) {
          goto LABEL_191;
        }
        if (v40 + 1 < 1)
        {
          char v36 = 1LL;
          char v33 = v38;
          goto LABEL_41;
        }

        if ((_DWORD)v36 == 2)
        {
          char v33 = v40;
          break;
        }

        __int128 v41 = (void *)(v34 + 88);
        uint64_t v42 = 2LL;
        while (1)
        {
          if (v36 == v42)
          {
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
            goto LABEL_176;
          }

          char v33 = v40 - *v41;
          if (__OFSUB__(v40, *v41)) {
            goto LABEL_171;
          }
          if (__OFADD__(v33, 1LL)) {
            goto LABEL_172;
          }
          if (v33 + 1 < 1) {
            break;
          }
          ++v42;
          v41 += 3;
          int64_t v40 = v33;
          if (v36 == v42) {
            goto LABEL_40;
          }
        }

        char v36 = v42;
        char v33 = v40;
LABEL_41:
        __int128 v35 = (4 * *(_BYTE *)(v34 + 18) + 8) & 0x3C;
        uint64_t v32 = ((-15LL << v35) - 1) & v32 | (v36 << v35);
        int64_t v9 = *(void *)(v34 + 24 + 24 * v36);
        swift_unknownObjectRetain();
        uint64_t result = (uint64_t *)swift_unknownObjectRelease();
        unint64_t v34 = v9;
        if (!*(_BYTE *)(v9 + 18)) {
          goto LABEL_68;
        }
      }

  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

  uint64_t result = specialized XMLPlistMap.Value._parseXMLPlistInteger<A>(_:)((unint64_t)&v41, a9, a10);
  if ((v24 & 1) == 0) {
    return result;
  }
  uint64_t v39 = 0LL;
  int64_t v40 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(34LL);
  swift_bridgeObjectRelease();
  uint64_t v39 = 0xD000000000000020LL;
  int64_t v40 = 0x80000001839CA190LL;
  unint64_t v25 = v43;
  if ((unint64_t)v43 >= v44)
  {
    uint64_t v26 = 1LL;
LABEL_61:
    uint64_t v46 = v26;
    goto LABEL_62;
  }

  uint64_t v26 = 1LL;
  while (1)
  {
    if (*v25 == 13)
    {
      int64_t v27 = __OFADD__(v26++, 1LL);
      if (v27) {
        goto LABEL_70;
      }
      goto LABEL_32;
    }

    if (v42 < 2) {
      goto LABEL_71;
    }
    if (*(_BYTE *)(v41 + 1) == 10)
    {
      int64_t v27 = __OFADD__(v26++, 1LL);
      if (v27) {
        break;
      }
    }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_22:
    Hasher._combine(_:)(0);
    uint64_t v21 = v63;
    if (!v63) {
      goto LABEL_23;
    }
LABEL_30:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v21);
    swift_bridgeObjectRelease();
    uint64_t v22 = v64;
    if (!v64) {
      goto LABEL_24;
    }
    goto LABEL_31;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v80, v21);
  swift_bridgeObjectRelease();
LABEL_29:
  uint64_t v22 = v64;
  if (v64)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v80, v22);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v23 = v66;
  unint64_t v25 = v67;
  unint64_t v24 = v68;
  uint64_t v26 = v69;
  __int128 v53 = v69;
  __int128 v54 = v65;
  if (v65)
  {
    __int128 v56 = v5;
    int64_t v27 = v65;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v28 = v23;
    unint64_t v29 = v25;
    uint64_t v30 = v24;
    uint64_t v31 = v26;
    uint64_t v32 = v27;
    unint64_t v5 = v56;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    char v33 = v26;
    unint64_t v34 = v23;
    __int128 v35 = v25;
    char v36 = v24;
  }

  uint64_t v57 = v24;
  unint64_t v37 = v5;
  if (v23)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v38 = v23;
    uint64_t v39 = v23;
    int64_t v40 = v25;
    __int128 v41 = v39;
    _CFObject.hash(into:)();

    unint64_t v25 = v40;
  }

  else
  {
    uint64_t v38 = 0LL;
    Hasher._combine(_:)(0);
  }

  __int128 v55 = v25;
  if (v25)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v42 = v25;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  unint64_t v43 = v38;
  unint64_t v5 = v37;
  if (v57)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v44 = v57;
    _CFObject.hash(into:)();

    if (v53)
    {
LABEL_43:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v45 = v53;
      _CFObject.hash(into:)();

      goto LABEL_46;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v53) {
      goto LABEL_43;
    }
  }

  Hasher._combine(_:)(0);
  uint64_t v45 = 0LL;
LABEL_46:

  uint64_t v46 = v70;
  if (v46)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v80, v46);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  unint64_t v47 = v71;
  if (!v71)
  {
    Hasher._combine(_:)(0);
    if (v72) {
      goto LABEL_51;
    }
LABEL_53:
    Hasher._combine(_:)(0);
    goto LABEL_54;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v80, v47);
  swift_bridgeObjectRelease();
  if (!v72) {
    goto LABEL_53;
  }
LABEL_51:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_54:
  uint64_t v11 = v58;
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    int64_t v48 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v48);
  }

  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v49 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }

  if (v75 == 2)
  {
    unint64_t v50 = 0;
  }

  else
  {
    unint64_t v50 = v75 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v50);
  if (v76 == 2)
  {
    __int128 v51 = 0;
  }

  else
  {
    __int128 v52 = v76 & 1;
    Hasher._combine(_:)(1u);
    __int128 v51 = v52;
  }

  Hasher._combine(_:)(v51);
  outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_12:
  uint64_t v12 = swift_getObjectType();
  int64_t v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 112);
  swift_unknownObjectRetain();
  v13(v80, v12, v5);
  swift_unknownObjectRelease();
  uint64_t v14 = swift_getObjectType();
  char v15 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 120);
  swift_unknownObjectRetain();
  v15(v80, v14, v11);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

  __break(1u);
  return result;
}

      uint64_t v7 = 0LL;
      uint64_t v67 = 0LL;
      unint64_t v66 = 0u;
      memset(v65, 0, sizeof(v65));
      unint64_t v64 = 0u;
    }

    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v64,  (uint64_t)v63,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (v68)
    {
      uint64_t v23 = *(_OWORD *)(v49 + 48);
      v61[2] = *(_OWORD *)(v49 + 32);
      v61[3] = v23;
      uint64_t v62 = *(void *)(v49 + 64);
      unint64_t v24 = *(_OWORD *)(v49 + 16);
      v61[0] = *(_OWORD *)v49;
      v61[1] = v24;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v63,  (uint64_t)v60);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v61,  (uint64_t)v59);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v60,  (uint64_t)&v55,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v59,  (uint64_t)v46,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      unint64_t v47 = v7;
      if (v56)
      {
        if (v58)
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v55, (uint64_t)v52);
          outlined init with take of any PredicateExpression<Self.Output == B1>(v46, (uint64_t)v51);
          unint64_t v25 = v53;
          uint64_t v42 = v54;
          __int128 v41 = __swift_project_boxed_opaque_existential_1(v52, v53);
          uint64_t v44 = &v35;
          uint64_t v26 = *(void *)(v25 - 8);
          MEMORY[0x1895F8858](v41);
          uint64_t v28 = (char *)&v35 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v51,  (uint64_t)&v50);
          unint64_t v29 = type metadata accessor for Optional();
          unint64_t v43 = &v35;
          uint64_t v30 = *(void *)(v29 - 8);
          MEMORY[0x1895F8858](v29);
          uint64_t v32 = (char *)&v35 - v31;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          char v33 = swift_dynamicCast();
          unint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
          if (v33)
          {
            v34(v32, 0LL, 1LL, v25);
            (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v32, v25);
            uint64_t v10 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
          }

          else
          {
            v34(v32, 1LL, 1LL, v25);
            (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
            uint64_t v10 = 0;
          }

          a2 = v38;
          int64_t v3 = v39;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
          int64_t v8 = v37;
          goto LABEL_7;
        }

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
      }

      else
      {
        if (!v58)
        {
          uint64_t v10 = 1;
          goto LABEL_7;
        }

        outlined destroy of Any?((uint64_t)v46, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      }

      uint64_t v10 = 0;
LABEL_7:
      outlined destroy of Any?((uint64_t)v59, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v60, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v61);
      outlined destroy of Any?( (uint64_t)v69,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v70,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v75);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v63);
      uint64_t result = outlined destroy of Any?( (uint64_t)&v64,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t v7 = v47;
      if ((v10 & 1) == 0) {
        goto LABEL_52;
      }
      if (v47) {
        continue;
      }
      goto LABEL_11;
    }

    break;
  }

  outlined destroy of Any?( (uint64_t)v69,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?( (uint64_t)&v70,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v75);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v63);
LABEL_51:
  outlined destroy of Any?( (uint64_t)&v64,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_52:
  swift_release();
  return v19 == 0;
}

  outlined init with take of Int?(v21 + 64, (uint64_t)v78);
  uint64_t result = outlined init with take of Int?((uint64_t)v78, (uint64_t)&v88);
  if ((v89 & 1) != 0)
  {
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }

  uint64_t result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( v88,  2LL,  &v69,  48);
  *a5 = 1;
LABEL_30:
  if (v14 && (v14 & 4) != 0)
  {
    if (*a5 != 1) {
      goto LABEL_46;
    }
    if ((v10[3] & 1) != 0)
    {
      uint64_t v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        goto LABEL_46;
      }
    }

    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }

    int64_t v27 = v71;
    if (v71 >= v70)
    {
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }

    *(_BYTE *)(v69 + v71) = 45;
    uint64_t v71 = v27 + 1;
LABEL_46:
    outlined init with take of Int?(v21 + 256, (uint64_t)v77);
    uint64_t result = outlined init with take of Int?((uint64_t)v77, (uint64_t)&v90);
    if ((v91 & 1) != 0)
    {
LABEL_144:
      __break(1u);
      goto LABEL_145;
    }

    uint64_t v28 = v71;
    if (v71 >= v70)
    {
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }

    unint64_t v29 = v90;
    *(_BYTE *)(v69 + v71) = 87;
    uint64_t v71 = v28 + 1;
    uint64_t result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( v29,  2LL,  &v69,  48);
    *a5 = 1;
    unint64_t v24 = v14;
    if (!v14) {
      goto LABEL_49;
    }
    goto LABEL_33;
  }

  unint64_t v24 = v14;
  if (!v14) {
    goto LABEL_49;
  }
LABEL_33:
  if ((v24 & 8) == 0)
  {
    unint64_t v25 = v14;
LABEL_35:
    if ((v25 & 0x10) == 0)
    {
LABEL_36:
      if ((v14 & 0x20) == 0) {
        goto LABEL_100;
      }
LABEL_92:
      if ((a7 & 1) != 0 || !a6 || (unint64_t)(a6 - 64800) <= 0xFFFFFFFFFFFE05C0LL)
      {
        uint64_t v57 = v71;
        if (v71 >= v70)
        {
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
          goto LABEL_123;
        }

        *(_BYTE *)(v69 + v71) = 90;
        uint64_t v71 = v57 + 1;
        goto LABEL_100;
      }

      __int128 v53 = v70;
      __int128 v52 = v71;
      __int128 v54 = a6;
      if (a6 < 0)
      {
        if (v71 >= v70)
        {
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }

        __int128 v55 = v10;
        __int128 v54 = -v54;
        __int128 v56 = 45;
      }

      else
      {
        if (v71 >= v70)
        {
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }

        __int128 v55 = v10;
        __int128 v56 = 43;
      }

      unint64_t v59 = a8;
      unint64_t v60 = v69;
      *(_BYTE *)(v69 + v71) = v56;
      uint64_t v61 = (unsigned __int16)v54 % 0xE10u / 0x3C;
      uint64_t v62 = (unsigned __int16)v54 % 0xE10u % 0x3C;
      uint64_t v71 = v52 + 1;
      append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( (unsigned __int16)v54 / 0xE10u,  2LL,  &v69,  48);
      unint64_t v63 = v55[2];
      if ((v63 & 1) != 0)
      {
        unint64_t v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v64 & 1) == 0)
        {
          uint64_t result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( v61,  2LL,  &v69,  48);
          a8 = v59;
          if (!(_DWORD)v62) {
            goto LABEL_100;
          }
          goto LABEL_113;
        }
      }

      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }

      unint64_t v65 = v71;
      if (v71 >= v53)
      {
LABEL_137:
        __break(1u);
        goto LABEL_138;
      }

      *(_BYTE *)(v60 + v71) = 58;
      uint64_t v71 = v65 + 1;
      uint64_t result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( v61,  2LL,  &v69,  48);
      a8 = v59;
      if (!(_DWORD)v62) {
        goto LABEL_100;
      }
      if ((v63 & 1) == 0)
      {
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_116;
      }

    uint64_t v44 = v10[20];
    uint64_t v46 = v10[17];
    *(void *)&unint64_t v65 = v10[16];
    uint64_t v45 = v65;
    *((void *)&v65 + 1) = v46;
    swift_retain_n();
    swift_retain_n();
    outlined copy of JSONEncoder.KeyEncodingStrategy(v65);
    unint64_t v47 = a2;
    char v15 = (void *)v60;
    int64_t v48 = static JSONDecoderImpl.KeyedContainer.stringify(objectRegion:using:codingPathNode:keyDecodingStrategy:)( v47,  v25,  (uint64_t)v10,  v44,  (unint64_t *)&v65);
    unint64_t v69 = v61;
    if (v61)
    {
      swift_release();
      swift_release_n();
      outlined consume of JSONEncoder.KeyEncodingStrategy(v45);
      swift_release();
      unint64_t v49 = v64;
      goto LABEL_37;
    }

    uint64_t v62 = v48;
    outlined consume of JSONEncoder.KeyEncodingStrategy(v45);
    swift_release();
    *(void *)&unint64_t v65 = v10;
    *((void *)&v65 + 1) = v44;
    unint64_t v66 = v62;
    __int128 v55 = type metadata accessor for JSONDecoderImpl.KeyedContainer(0LL, v60, a3, v54);
    MEMORY[0x186E20D4C](&protocol conformance descriptor for JSONDecoderImpl.KeyedContainer<A>, v55);
    KeyedDecodingContainer.init<A>(_:)();
    swift_release();
    v10[20] = v64;
    swift_retain();
    swift_release();
    __int128 v56 = (void *)v10[2];
    if (v56[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        uint64_t v57 = v56[2];
        if (v57) {
          goto LABEL_35;
        }
        goto LABEL_49;
      }
    }

    else
    {
      __break(1u);
    }

    __int128 v56 = specialized _ArrayBuffer._consumeAndCreateNew()(v56);
    uint64_t v57 = v56[2];
    if (v57)
    {
LABEL_35:
      v56[2] = v57 - 1;
      v10[2] = v56;
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      if (!__OFADD__(v59, 1LL))
      {
        *(void *)(v4 + 64) = v59 + 1;
        *uint64_t v7 = 0LL;
        v7[1] = 0LL;
        *(_BYTE *)(v4 + 40) = -2;
        return result;
      }

    uint64_t v12 = 0LL;
    uint64_t result = 0LL;
    LOBYTE(v6) = 1;
    goto LABEL_25;
  }

  if (v11 > 63)
  {
    if (v12 < -64 || v12 > 64) {
      goto LABEL_11;
    }
  }

  else if (v12 < -64 || v12 > 64)
  {
    goto LABEL_11;
  }

  if (v12 < 0) {
    goto LABEL_32;
  }
  if ((unint64_t)v12 < 0x40)
  {
    uint64_t v14 = v5 << v12;
    if (v8 != 63) {
      goto LABEL_17;
    }
LABEL_34:
    if (a2 < 0.0 && !v14) {
      goto LABEL_36;
    }
    goto LABEL_28;
  }

          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }

        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_28;
  }

  return 0LL;
}

        switch(v16)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_29:
            uint64_t v17 = v24;
            goto LABEL_30;
          case '%':
            if (v7) {
              goto LABEL_60;
            }
            uint64_t v7 = 2LL;
            goto LABEL_10;
          case '&':
LABEL_35:
            if (!v23) {
              goto LABEL_60;
            }
            goto LABEL_53;
          case '+':
            uint64_t v17 = v22;
LABEL_30:
            if (!v17) {
              goto LABEL_60;
            }
            goto LABEL_53;
          case '-':
          case '.':
            goto LABEL_52;
          case '/':
LABEL_37:
            if (a3 < 0x10u) {
              goto LABEL_60;
            }
            goto LABEL_53;
          default:
            break;
        }

        switch(v16)
        {
          case ':':
            uint64_t v17 = v21;
            goto LABEL_30;
          case ';':
            goto LABEL_29;
          case '=':
            goto LABEL_35;
          case '?':
            if (a3 < 0x40u) {
              goto LABEL_60;
            }
            goto LABEL_53;
          case '@':
            goto LABEL_37;
          default:
            if (v16 == 95)
            {
              if (a3 < 2u) {
                goto LABEL_60;
              }
            }

            else if ((v16 - 123) > 0xE5u)
            {
LABEL_52:
              if (!a3) {
                goto LABEL_60;
              }
            }

            else
            {
              uint64_t v18 = 0;
              if (v16 != 126 || a3 < 2u) {
                return v18 & 1;
              }
            }

                  uint64_t v7 = (v20 & 0xFFFFFFFFFFFF0000LL) + 65540;
                  goto LABEL_46;
                }

    *(void *)(v8 + 8 * v16) = v18 | v17;
    *(void *)(*(void *)(v10 + 48) + 8 * v15) = v12;
    __int128 v41 = *(void *)(v10 + 16);
    uint64_t v42 = __OFADD__(v41, 1LL);
    unint64_t v43 = v41 + 1;
    if (v42)
    {
      __break(1u);
LABEL_232:
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      v246 = (id)_nilObjCError;
LABEL_235:
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      swift_release_n();

      return;
    }

    *(void *)(v10 + 16) = v43;
LABEL_4:
    ++v9;
  }

  while (v9 != 3);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0LL);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v44 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v44);
  swift_release();
  *(void *)&v278 = 0LL;
  uint64_t v45 = objc_msgSend(v266, sel_resourceValuesForKeys_error_, _ContiguousArrayBuffer._asCocoaArray()(), &v278);
  swift_unknownObjectRelease();
  uint64_t v46 = (void *)v278;
  if (!v45)
  {
    if (!(void)v278)
    {
      if (one-time initialization token for _nilObjCError != -1) {
        goto LABEL_246;
      }
      goto LABEL_69;
    }

    (id)v278;
LABEL_70:
    swift_willThrow();
    swift_release();
    return;
  }

  unint64_t v47 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v45);
  int64_t v48 = v46;

  *(void *)&v278 = v47;
  *((void *)&v278 + 1) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v49 = URLResourceValues._get(_:)(v264);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v49 & 1) == 0)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v50 = 2LL;
    goto LABEL_92;
  }

  v265 = v47;
  __int128 v51 = (void *)swift_allocObject();
  __int128 v52 = (void *)*MEMORY[0x189603BB0];
  v51[4] = *MEMORY[0x189603BB0];
  v271 = v51 + 4;
  v51[5] = v257;
  v51[6] = v253;
  __int128 v53 = static _SetStorage.allocate(capacity:)();
  __int128 v54 = v53 + 56;
  __int128 v55 = v52;
  v258 = v257;
  v254 = v253;
  __int128 v56 = 0LL;
  v267 = (void *)(v53 + 56);
  while (2)
  {
    uint64_t v57 = (void *)v271[v56];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    Hasher.init(_seed:)();
    uint64_t v58 = v57;
    String.hash(into:)();
    unint64_t v59 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    unint64_t v60 = -1LL << *(_BYTE *)(v53 + 32);
    uint64_t v61 = v59 & ~v60;
    uint64_t v62 = v61 >> 6;
    unint64_t v63 = *(void *)(v54 + 8 * (v61 >> 6));
    unint64_t v64 = 1LL << v61;
    if (((1LL << v61) & v63) == 0) {
      goto LABEL_62;
    }
    unint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v53 + 48) + 8 * v61));
    uint64_t v67 = v66;
    if (v65 == static String._unconditionallyBridgeFromObjectiveC(_:)(v57) && v67 == v68) {
      goto LABEL_36;
    }
    __int128 v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v70 & 1) != 0) {
      goto LABEL_37;
    }
    uint64_t v71 = ~v60;
    uint64_t v61 = (v61 + 1) & v71;
    uint64_t v62 = v61 >> 6;
    __int128 v54 = v53 + 56;
    unint64_t v63 = v267[v61 >> 6];
    unint64_t v64 = 1LL << v61;
    if ((v63 & (1LL << v61)) == 0) {
      goto LABEL_62;
    }
    uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v53 + 48) + 8 * v61));
    uint64_t v74 = v73;
    if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(v57) && v74 == v75) {
      goto LABEL_36;
    }
    uint64_t v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v77 & 1) != 0) {
      goto LABEL_37;
    }
    uint64_t v61 = (v61 + 1) & v71;
    uint64_t v62 = v61 >> 6;
    __int128 v54 = v53 + 56;
    unint64_t v63 = v267[v61 >> 6];
    unint64_t v64 = 1LL << v61;
    if ((v63 & (1LL << v61)) == 0)
    {
LABEL_62:
      *(void *)(v54 + 8 * v62) = v64 | v63;
      *(void *)(*(void *)(v53 + 48) + 8 * v61) = v58;
      uint64_t v88 = *(void *)(v53 + 16);
      uint64_t v42 = __OFADD__(v88, 1LL);
      uint64_t v89 = v88 + 1;
      if (v42)
      {
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        swift_once();
LABEL_69:
        Swift::String v99 = (id)_nilObjCError;
        goto LABEL_70;
      }

      *(void *)(v53 + 16) = v89;
      goto LABEL_38;
    }

    uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v53 + 48) + 8 * v61));
    __int128 v80 = v79;
    if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)(v57) && v80 == v81)
    {
LABEL_36:
      swift_bridgeObjectRelease_n();
      goto LABEL_37;
    }

    while (1)
    {
      Swift::UInt v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v82 & 1) != 0) {
        break;
      }
      uint64_t v61 = (v61 + 1) & v71;
      uint64_t v62 = v61 >> 6;
      __int128 v54 = v53 + 56;
      unint64_t v63 = v267[v61 >> 6];
      unint64_t v64 = 1LL << v61;
      if ((v63 & (1LL << v61)) == 0) {
        goto LABEL_62;
      }
      uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v53 + 48) + 8 * v61));
      Swift::String v85 = v84;
      if (v83 == static String._unconditionallyBridgeFromObjectiveC(_:)(v57) && v85 == v86) {
        goto LABEL_36;
      }
    }

  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

        int64_t v9 = 256LL;
        goto LABEL_31;
      }
    }

    else if (a1 != 13)
    {
      if (a1 == 27)
      {
        int64_t v9 = 263LL;
        goto LABEL_31;
      }

      if (a1 == 63)
      {
        int64_t v9 = 258LL;
        goto LABEL_31;
      }

      goto LABEL_28;
    }

    int64_t v9 = 257LL;
    goto LABEL_31;
  }

  if (a1 <= 27)
  {
    if (a1 > 12)
    {
      if (a1 != 13)
      {
        if (a1 == 17)
        {
          int64_t v9 = 516LL;
          goto LABEL_31;
        }

        goto LABEL_30;
      }
    }

    else if (a1 != 1)
    {
      if (a1 == 2)
      {
        int64_t v9 = 4LL;
        goto LABEL_31;
      }

      goto LABEL_30;
    }

    int64_t v9 = 513LL;
    goto LABEL_31;
  }

  if (a1 <= 62)
  {
    if (a1 != 28)
    {
      if (a1 == 30)
      {
        int64_t v9 = 642LL;
        goto LABEL_31;
      }

      goto LABEL_30;
    }

  uint64_t v14 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Index %ld out of bounds [0...%ld]",  a3,  v9);
LABEL_19:
  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:v14 userInfo:0]);
LABEL_20:
  length = v10 - v12;
LABEL_26:
  uint64_t v18 = v12;
  result.length = length;
  result.location = v18;
  return result;
}

      return 0LL;
    }

    if (v12 == 76)
    {
      Implementation = _NSSetUnsignedLongValueForKeyWithMethod;
    }

    else
    {
      if (v12 != 81)
      {
LABEL_27:
        free(v10);
        goto LABEL_28;
      }

      Implementation = _NSSetUnsignedLongLongValueForKeyWithMethod;
    }
  }

        ++v24;
      }

      while (v24 != 6);
    }

    maximumUnitCount = v68->_maximumUnitCount;
    if (maximumUnitCount >= 1)
    {
      char v36 = 0LL;
      unint64_t v37 = 0;
      uint64_t v38 = 0LL;
      while (1)
      {
        if (!*((void *)v74 + v36) || !*((void *)v72 + v36))
        {
          uint64_t v39 = v38;
          goto LABEL_36;
        }

        uint64_t v39 = v38 + 1;
        if (v38 == maximumUnitCount) {
          break;
        }
        unint64_t v37 = v36;
LABEL_36:
        ++v36;
        uint64_t v38 = v39;
        if (v36 == 7) {
          goto LABEL_39;
        }
      }

      unint64_t v37 = v36;
LABEL_39:
      if (v39 > maximumUnitCount && (int)v37 >= 1)
      {
        int64_t v40 = v37;
        if (v37 <= 5)
        {
          __int128 v41 = 8LL * v37;
          bzero((char *)v72 + v41 + 8, 8LL * (5 - v37) + 8);
          do
          {
            allowedUnits &= ~*(void *)((char *)v74 + v41 + 8);
            v41 += 8LL;
          }

          while (v41 != 48);
        }

        uint64_t v42 = 0;
        while (1)
        {
          if (v42)
          {
            unint64_t v43 = *((void *)v72 + v40);
            uint64_t v44 = v42 + v43;
            if (v40)
            {
              uint64_t v45 = [a4 rangeOfUnit:*((void *)v74 + v40) inUnit:*((void *)v74 + (v40 - 1)) forDate:v21];
              unint64_t v47 = v45 + v46 - 1;
              else {
                int64_t v48 = 1;
              }
              unint64_t v49 = v47 >= v44;
              if (v47 >= v44) {
                unint64_t v50 = 0LL;
              }
              else {
                unint64_t v50 = v45 + v46;
              }
              if (v49) {
                uint64_t v42 = 0;
              }
              else {
                uint64_t v42 = v48;
              }
              __int128 v51 = v44 - v50;
            }

            else
            {
              uint64_t v42 = 0;
              __int128 v51 = v44;
            }

            *((void *)v72 + v40) = v51;
            __int128 v52 = v39 - (v51 == 0);
            if (v51) {
              __int128 v53 = v39 + 1;
            }
            else {
              __int128 v53 = v39;
            }
            if ((_DWORD)v43) {
              LODWORD(v39) = v52;
            }
            else {
              LODWORD(v39) = v53;
            }
            int64_t v8 = a4;
          }

          __int128 v54 = v68->_maximumUnitCount;
          __int128 v56 = *((void *)v72 + v40);
          if (v40)
          {
          }

          if (!v56) {
            goto LABEL_86;
          }
LABEL_87:
          if (v40-- <= 0) {
            goto LABEL_89;
          }
        }

        if (*((void *)v74 + v40) == 16LL && *((void *)v74 + (v40 - 1)) == 4096LL)
        {
          uint64_t v57 = *((void *)v72 + v40);
          uint64_t v58 = 7;
        }

        else
        {
          unint64_t v59 = objc_msgSend(v8, "rangeOfUnit:inUnit:forDate:");
          uint64_t v58 = v59 + v60;
          uint64_t v57 = *((void *)v72 + v40);
        }

        uint64_t v61 = 2 * v57;
        if ((v57 & 0x4000000000000000LL) != 0) {
          uint64_t v61 = -2 * v57;
        }
        if (v57 > 0) {
          uint64_t v62 = 1;
        }
        else {
          uint64_t v62 = -1;
        }
        if (v61 >= v58) {
          uint64_t v42 = v62;
        }
        else {
          uint64_t v42 = 0;
        }
        *((void *)v72 + v40) = 0LL;
        LODWORD(v39) = v39 - ((_DWORD)v56 != 0);
LABEL_86:
        allowedUnits &= ~*((void *)v74 + v40);
        goto LABEL_87;
      }
    }

    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"Unknown predicate type %ld", a3), 0 reason userInfo]);
    return +[NSPredicateOperator operatorWithCustomSelector:modifier:](v25, v26, v27, v28);
  }

  switch(a3)
  {
    case 0uLL:
      uint64_t v7 = objc_alloc(&OBJC_CLASS___NSComparisonPredicateOperator);
      int64_t v8 = 0LL;
      int64_t v9 = a4;
      uint64_t v10 = 0LL;
      return -[NSComparisonPredicateOperator initWithOperatorType:modifier:variant:options:]( v7,  "initWithOperatorType:modifier:variant:options:",  v8,  v9,  v10,  a5);
    case 1uLL:
      uint64_t v7 = objc_alloc(&OBJC_CLASS___NSComparisonPredicateOperator);
      int64_t v8 = 1LL;
      int64_t v9 = a4;
      uint64_t v10 = 1LL;
      return -[NSComparisonPredicateOperator initWithOperatorType:modifier:variant:options:]( v7,  "initWithOperatorType:modifier:variant:options:",  v8,  v9,  v10,  a5);
    case 2uLL:
      uint64_t v7 = objc_alloc(&OBJC_CLASS___NSComparisonPredicateOperator);
      int64_t v8 = 2LL;
      int64_t v9 = a4;
      uint64_t v10 = 2LL;
      return -[NSComparisonPredicateOperator initWithOperatorType:modifier:variant:options:]( v7,  "initWithOperatorType:modifier:variant:options:",  v8,  v9,  v10,  a5);
    case 3uLL:
      uint64_t v7 = objc_alloc(&OBJC_CLASS___NSComparisonPredicateOperator);
      int64_t v8 = 3LL;
      int64_t v9 = a4;
      uint64_t v10 = 3LL;
      return -[NSComparisonPredicateOperator initWithOperatorType:modifier:variant:options:]( v7,  "initWithOperatorType:modifier:variant:options:",  v8,  v9,  v10,  a5);
    case 4uLL:
      uint64_t v14 = objc_alloc(&OBJC_CLASS___NSEqualityPredicateOperator);
      char v15 = 4LL;
      uint64_t v16 = a4;
      uint64_t v17 = 0LL;
      return -[NSEqualityPredicateOperator initWithOperatorType:modifier:negate:options:]( v14,  "initWithOperatorType:modifier:negate:options:",  v15,  v16,  v17,  a5);
    case 5uLL:
      uint64_t v14 = objc_alloc(&OBJC_CLASS___NSEqualityPredicateOperator);
      char v15 = 5LL;
      uint64_t v16 = a4;
      uint64_t v17 = 1LL;
      return -[NSEqualityPredicateOperator initWithOperatorType:modifier:negate:options:]( v14,  "initWithOperatorType:modifier:negate:options:",  v15,  v16,  v17,  a5);
    case 6uLL:
      uint64_t v18 = objc_alloc(&OBJC_CLASS___NSMatchingPredicateOperator);
      BOOL v19 = 6LL;
      return -[NSStringPredicateOperator initWithOperatorType:modifier:variant:]( v18,  "initWithOperatorType:modifier:variant:",  v19,  a4,  a5);
    case 7uLL:
      uint64_t v18 = objc_alloc(&OBJC_CLASS___NSLikePredicateOperator);
      BOOL v19 = 7LL;
      return -[NSStringPredicateOperator initWithOperatorType:modifier:variant:]( v18,  "initWithOperatorType:modifier:variant:",  v19,  a4,  a5);
    case 8uLL:
      int64_t v20 = objc_alloc(&OBJC_CLASS___NSSubstringPredicateOperator);
      uint64_t v21 = 8LL;
      uint64_t v22 = a4;
      uint64_t v23 = a5;
      unint64_t v24 = 0LL;
      goto LABEL_22;
    case 9uLL:
      int64_t v20 = objc_alloc(&OBJC_CLASS___NSSubstringPredicateOperator);
      uint64_t v21 = 9LL;
      uint64_t v22 = a4;
      uint64_t v23 = a5;
      unint64_t v24 = 1LL;
LABEL_22:
      uint64_t result = -[NSSubstringPredicateOperator initWithOperatorType:modifier:variant:position:]( v20,  "initWithOperatorType:modifier:variant:position:",  v21,  v22,  v23,  v24);
      break;
    case 0xAuLL:
      uint64_t v11 = objc_alloc(&OBJC_CLASS___NSInPredicateOperator);
      uint64_t v12 = 10LL;
      return -[NSInPredicateOperator initWithOperatorType:modifier:options:]( v11,  "initWithOperatorType:modifier:options:",  v12,  a4,  a5);
    default:
      goto LABEL_28;
  }

  return result;
}

  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

  (*((void (**)(id, uint64_t, uint64_t, NSString *))a3 + 2))(a3, v12, v11, self->_path);
}