LABEL_372:
            __break(1u);
LABEL_373:
            __break(1u);
LABEL_374:
            __break(1u);
LABEL_375:
            __break(1u);
LABEL_376:
            __break(1u);
LABEL_377:
            __break(1u);
LABEL_378:
            __break(1u);
LABEL_379:
            __break(1u);
LABEL_380:
            __break(1u);
LABEL_381:
            __break(1u);
            goto LABEL_382;
          }

          result = swift_unknownObjectRetain_n();
          v16 = v340 >> 11;
          a3 = v100;
LABEL_141:
          v120 = *(unsigned __int16 *)(a3 + 16);
          if (!*(_WORD *)(a3 + 16)) {
            goto LABEL_426;
          }
          v121 = *(void *)(a3 + 24);
          v46 = __OFSUB__(v16, v121);
          v122 = v16 - v121;
          if (v46) {
            goto LABEL_409;
          }
          if (v122 <= 0)
          {
            v125 = 0LL;
          }

          else
          {
            if ((_DWORD)v120 == 1) {
              goto LABEL_428;
            }
            v123 = *(void *)(a3 + 48);
            v16 = v122 - v123;
            if (__OFSUB__(v122, v123)) {
              goto LABEL_411;
            }
            if (v16 >= 1)
            {
              if ((_DWORD)v120 == 2) {
                goto LABEL_428;
              }
              v124 = (void *)(a3 + 72);
              v125 = 2LL;
              while (v120 != v125)
              {
                v126 = v16 - *v124;
                if (__OFSUB__(v16, *v124)) {
                  goto LABEL_375;
                }
                if (v126 < 1) {
                  goto LABEL_156;
                }
                ++v125;
                v124 += 3;
                v16 = v126;
                if (v120 == v125) {
                  goto LABEL_428;
                }
              }

              goto LABEL_374;
            }

            v16 = v122;
            v125 = 1LL;
          }

LABEL_363:
  swift_release();
  v232 = 0LL;
  v44 = v32 - v219;
  if (__OFSUB__(v32, v219)) {
    goto LABEL_365;
  }
LABEL_241:
  *(void *)&v370 = v338;
  *((void *)&v370 + 1) = v32;
  *(void *)&v371 = a3;
  *((void *)&v371 + 1) = v11;
  *(void *)&v372 = v231;
  *((void *)&v372 + 1) = v42;
  v373 = v232;
  v374 = v44;
  specialized IndexingIterator.next()();
  if (!v233)
  {
    v267 = MEMORY[0x18961AFF0];
    goto LABEL_284;
  }

  v234 = v233;
  v235 = (__int128 *)v340;
  while (1)
  {
    v237 = v235[1];
    v413 = *v235;
    v414 = v237;
    v415 = v235[2];
    BigString.utf8.getter();
    v238 = v455;
    v239 = BigString.UTF8View.index(_:offsetBy:)();
    v241 = v240;
    v243 = v242;
    v245 = v244;
    outlined release of Locale((uint64_t)v404);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v246 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v234);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v337 = v243;
    v335 = v241;
    v336 = v245;
    if ((v246 & 1) != 0 && v239 >> 10 > v238 >> 10) {
      break;
    }
LABEL_243:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v455, v239, v335, v337, v336);
    specialized IndexingIterator.next()();
    v234 = v236;
    if (!v236) {
      goto LABEL_283;
    }
  }

  v247 = v238;
  v347 = v234 + 64;
  while (2)
  {
    v248 = v235[1];
    v410 = *v235;
    v411 = v248;
    v412 = v235[2];
    BigString.unicodeScalars.getter();
    v353 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v405);
    v249 = v235[1];
    v407 = *v235;
    v408 = v249;
    v409 = v235[2];
    BigString.unicodeScalars.getter();
    v350 = v247;
    v351 = BigString.UnicodeScalarView.index(after:)();
    outlined release of Locale((uint64_t)v406);
    v250 = 1LL << *(_BYTE *)(v234 + 32);
    if (v250 < 64) {
      v251 = ~(-1LL << v250);
    }
    else {
      v251 = -1LL;
    }
    v252 = v251 & *(void *)(v234 + 64);
    v253 = (unint64_t)(v250 + 63) >> 6;
    swift_bridgeObjectRetain();
    v254 = 0LL;
LABEL_253:
    if (v252)
    {
      v255 = __clz(__rbit64(v252));
      v252 &= v252 - 1;
      v256 = v255 | (v254 << 6);
      goto LABEL_255;
    }

    v260 = v254 + 1;
    if (!__OFADD__(v254, 1LL))
    {
      if (v260 < v253)
      {
        v261 = *(void *)(v347 + 8 * v260);
        if (v261)
        {
LABEL_259:
          v252 = (v261 - 1) & v261;
          v256 = __clz(__rbit64(v261)) + (v260 << 6);
          v254 = v260;
LABEL_255:
          v257 = *(void *)(v234 + 56);
          v258 = (void *)(*(void *)(v234 + 48) + 16 * v256);
          v259 = v258[1];
          *(void *)&v357 = *v258;
          *((void *)&v357 + 1) = v259;
          outlined init with copy of AttributedString._AttributeValue(v257 + 72 * v256, (uint64_t)&v358);
          swift_bridgeObjectRetain();
LABEL_265:
          outlined init with take of LocalePreferences?( (uint64_t)&v357,  (uint64_t)&v363,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
          v262 = v364;
          if (!v364)
          {
            swift_release();
            v235 = (__int128 *)v340;
            v247 = v351;
            if (v239 >> 10 <= v351 >> 10) {
              goto LABEL_243;
            }
            continue;
          }

          v263 = v363;
          v264 = v366;
          v265 = v367;
          outlined copy of AttributedString.AttributeRunBoundaries?(v366, v367);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v365);
          if (v265 != 1)
          {
            *(void *)&v357 = v264;
            *((void *)&v357 + 1) = v265;
            v266 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
            outlined consume of AttributedString.AttributeRunBoundaries?(v264, v265);
            if ((v266 & 0x100000000LL) == 0 && v353 != (_DWORD)v266) {
              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)( v263,  v262,  v350,  v351,  (uint64_t *)v423);
            }
          }

          swift_bridgeObjectRelease();
          goto LABEL_253;
        }

        if (v254 + 2 >= v253)
        {
          ++v254;
        }

        else
        {
          v261 = *(void *)(v347 + 8 * (v254 + 2));
          if (v261)
          {
            v260 = v254 + 2;
            goto LABEL_259;
          }

          if (v254 + 3 >= v253)
          {
            v254 += 2LL;
          }

          else
          {
            v261 = *(void *)(v347 + 8 * (v254 + 3));
            if (v261)
            {
              v260 = v254 + 3;
              goto LABEL_259;
            }

            v260 = v254 + 4;
            if (v254 + 4 >= v253)
            {
              v254 += 3LL;
            }

            else
            {
              v261 = *(void *)(v347 + 8 * v260);
              if (v261) {
                goto LABEL_259;
              }
              while (v253 - 5 != v254)
              {
                v261 = *(void *)(v234 + 104 + 8 * v254++);
                if (v261)
                {
                  v260 = v254 + 4;
                  goto LABEL_259;
                }
              }

              v254 = v253 - 1;
            }
          }
        }
      }

      v252 = 0LL;
      v362 = 0LL;
      v360 = 0u;
      v361 = 0u;
      v358 = 0u;
      v359 = 0u;
      v357 = 0u;
      goto LABEL_265;
    }

    break;
  }

  __break(1u);
LABEL_283:
  v267 = *(void *)&v423[0];
LABEL_284:
  result = swift_release();
  v268 = 0LL;
  v269 = v267 + 64;
  v270 = 1LL << *(_BYTE *)(v267 + 32);
  v271 = -1LL;
  if (v270 < 64) {
    v271 = ~(-1LL << v270);
  }
  v272 = v271 & *(void *)(v267 + 64);
  v356 = (unint64_t)(v270 + 63) >> 6;
  v16 = v338;
  while (2)
  {
    if (v272)
    {
      v273 = __clz(__rbit64(v272));
      v272 &= v272 - 1;
      v274 = v273 | (v268 << 6);
LABEL_300:
      v277 = (unint64_t *)(*(void *)(v267 + 48) + 16 * v274);
      v279 = *v277;
      v278 = v277[1];
      v280 = *(void *)(*(void *)(v267 + 56) + 8 * v274);
      result = specialized Array._getCount()(v280);
      if (result)
      {
        v281 = result;
        if (result < 1)
        {
          __break(1u);
          goto LABEL_372;
        }

        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v282 = (uint64_t *)(v280 + 40);
        do
        {
          AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)( v279,  v278,  *(v282 - 1),  *v282,  0);
          v282 += 2;
          --v281;
        }

        while (v281);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
      }

      continue;
    }

    break;
  }

  v46 = __OFADD__(v268++, 1LL);
  if (v46) {
    goto LABEL_373;
  }
  if (v268 < v356)
  {
    v275 = *(void *)(v269 + 8 * v268);
    if (!v275)
    {
      v276 = v268 + 1;
      if (v268 + 1 >= v356) {
        goto LABEL_309;
      }
      v275 = *(void *)(v269 + 8 * v276);
      if (!v275)
      {
        v276 = v268 + 2;
        if (v268 + 2 >= v356) {
          goto LABEL_309;
        }
        v275 = *(void *)(v269 + 8 * v276);
        if (!v275)
        {
          v276 = v268 + 3;
          if (v268 + 3 >= v356) {
            goto LABEL_309;
          }
          v275 = *(void *)(v269 + 8 * v276);
          if (!v275)
          {
            while (1)
            {
              v268 = v276 + 1;
              if (__OFADD__(v276, 1LL)) {
                break;
              }
              if (v268 >= v356) {
                goto LABEL_309;
              }
              v275 = *(void *)(v269 + 8 * v268);
              ++v276;
              if (v275) {
                goto LABEL_299;
              }
            }

              v227 = (4 * *(_BYTE *)(v226 + 18) + 8) & 0x3C;
              v224 = ((-15LL << v227) - 1) & v224 | (v228 << v227);
              v4 = *(void *)(v226 + 24 + 24 * v228);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v226 = v4;
              if (!*(_BYTE *)(v4 + 18)) {
                goto LABEL_393;
              }
            }
          }

          result = swift_unknownObjectRetain_n();
          v225 = a3;
          v4 = v221;
LABEL_393:
          v236 = *(unsigned __int16 *)(v4 + 16);
          if (*(_WORD *)(v4 + 16))
          {
            v237 = *(void *)(v4 + 24);
            v238 = v225 - v237;
            if (__OFSUB__(v225, v237)) {
              goto LABEL_493;
            }
            if (__OFADD__(v238, 1LL)) {
              goto LABEL_494;
            }
            if (v238 + 1 <= 0)
            {
              v236 = 0LL;
            }

            else
            {
              if ((_DWORD)v236 == 1)
              {
                v225 -= v237;
                goto LABEL_413;
              }

              v239 = *(void *)(v4 + 48);
              v30 = __OFSUB__(v238, v239);
              v240 = v238 - v239;
              if (v30) {
                goto LABEL_501;
              }
              if (__OFADD__(v240, 1LL)) {
                goto LABEL_502;
              }
              if (v240 + 1 >= 1)
              {
                if ((_DWORD)v236 != 2)
                {
                  v241 = (void *)(v4 + 72);
                  v242 = 2LL;
                  while (v236 != v242)
                  {
                    v225 = v240 - *v241;
                    if (__OFSUB__(v240, *v241)) {
                      goto LABEL_490;
                    }
                    if (__OFADD__(v225, 1LL)) {
                      goto LABEL_491;
                    }
                    if (v225 + 1 < 1)
                    {
                      v236 = v242;
                      v225 = v240;
                      goto LABEL_414;
                    }

                    ++v242;
                    v241 += 3;
                    v240 = v225;
                    if (v236 == v242) {
                      goto LABEL_413;
                    }
                  }

                  goto LABEL_489;
                }

                v225 = v240;
                goto LABEL_413;
              }

              v236 = 1LL;
              v225 = v238;
            }
          }

          else
          {
LABEL_413:
            if (v225) {
              goto LABEL_492;
            }
          }

LABEL_387:
            __break(1u);
LABEL_388:
            __break(1u);
            goto LABEL_389;
          }
        }
      }

      v268 = v276;
    }

LABEL_299:
    v272 = (v275 - 1) & v275;
    v274 = __clz(__rbit64(v275)) + (v268 << 6);
    goto LABEL_300;
  }

                v162 = v37;
                goto LABEL_300;
              }

              v160 = 1LL;
              v37 = v162;
            }

                if (v162) {
                  goto LABEL_402;
                }
                v35 = 0LL;
                goto LABEL_327;
              }

              v14 = ((-15LL << ((4 * v150 + 8) & 0x3C)) - 1) & v150 | ((unint64_t)*(unsigned __int16 *)(v146 + 16) << ((4 * v150 + 8) & 0x3C));
              swift_unknownObjectRetain();
              v35 = 0LL;
              v15 = 0LL;
              goto LABEL_52;
            }

            if (v8 > 0) {
              goto LABEL_384;
            }
            v35 = 0LL;
            v15 = 0LL;
            v14 = 0LL;
            v177 = 0LL;
LABEL_53:
            v22 = __OFSUB__(v8, v35);
            v181 = v8 - v35;
            v34 = v180;
            if (v22) {
              goto LABEL_374;
            }
          }

          else
          {
            v181 = 0LL;
            v177 = 0LL;
            v15 = 0LL;
            v14 = 0LL;
            v11 = v180[11];
            if (v146)
            {
              v15 = 0LL;
              v181 = v180[10];
              v177 = v180[9];
              v14 = ((-15LL << ((4 * *(_BYTE *)(v146 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v146 + 18) | ((unint64_t)*(unsigned __int16 *)(v146 + 16) << ((4 * *(_BYTE *)(v146 + 18) + 8) & 0x3C));
            }
          }
        }
      }

      if (*((_BYTE *)v10 + 18))
      {
        result = (void *)swift_unknownObjectRetain_n();
        v6 = (uint64_t)v10;
LABEL_73:
        v29 = *(unsigned __int16 *)(v6 + 16);
        if (!*(_WORD *)(v6 + 16)) {
          goto LABEL_71;
        }
        v43 = *(void *)(v6 + 40);
        v22 = __OFSUB__(v8, v43);
        v31 = v8 - v43;
        if (v22) {
          goto LABEL_336;
        }
        if (__OFADD__(v31, 1LL)) {
          goto LABEL_337;
        }
        if (v31 + 1 <= 0)
        {
          v29 = 0LL;
          goto LABEL_72;
        }

        if ((_DWORD)v29 == 1)
        {
          v8 = v31;
LABEL_71:
          if (!v8) {
            goto LABEL_72;
          }
          __break(1u);
LABEL_335:
          __break(1u);
LABEL_336:
          __break(1u);
LABEL_337:
          __break(1u);
LABEL_338:
          __break(1u);
LABEL_339:
          __break(1u);
          goto LABEL_340;
        }

        v44 = (uint64_t *)(v6 + 64);
        v45 = 1LL;
        while (1)
        {
          v46 = *v44;
          v44 += 3;
          v8 = v31 - v46;
          if (__OFSUB__(v31, v46)) {
            break;
          }
          if (__OFADD__(v8, 1LL)) {
            goto LABEL_330;
          }
          if (v8 + 1 < 1)
          {
            v29 = v45;
            v8 = v31;
LABEL_72:
            v42 = (4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C;
            v38 = ((-15LL << v42) - 1) & v38 | (v29 << v42);
            v11 = *(void *)(v6 + 24 + 24 * v29);
            swift_unknownObjectRetain();
            result = (void *)swift_unknownObjectRelease();
            v6 = v11;
            if (!*(_BYTE *)(v11 + 18)) {
              goto LABEL_87;
            }
            goto LABEL_73;
          }

          ++v45;
          v31 = v8;
          if (v29 == v45) {
            goto LABEL_71;
          }
        }

        __break(1u);
LABEL_330:
        __break(1u);
LABEL_331:
        __break(1u);
LABEL_332:
        __break(1u);
LABEL_333:
        v27 = v31;
        v16 = v29;
        continue;
      }

      break;
    }

    result = (void *)swift_unknownObjectRetain_n();
    v38 = 0LL;
    v11 = (uint64_t)v10;
LABEL_87:
    v47 = *(unsigned __int16 *)(v11 + 16);
    if (!*(_WORD *)(v11 + 16)) {
      goto LABEL_99;
    }
    v48 = *(void *)(v11 + 24);
    v22 = __OFSUB__(v8, v48);
    v49 = v8 - v48;
    if (v22) {
      goto LABEL_381;
    }
    if (__OFADD__(v49, 1LL)) {
      goto LABEL_382;
    }
    if (v49 + 1 <= 0)
    {
      v47 = 0LL;
    }

    else
    {
      if ((_DWORD)v47 == 1)
      {
        v8 = v49;
LABEL_99:
        if (v8) {
          goto LABEL_379;
        }
        goto LABEL_100;
      }

      v50 = (uint64_t *)(v11 + 48);
      v51 = 1LL;
      while (1)
      {
        v52 = *v50;
        v50 += 3;
        v8 = v49 - v52;
        if (__OFSUB__(v49, v52)) {
          goto LABEL_361;
        }
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_362;
        }
        if (v8 + 1 < 1) {
          break;
        }
        ++v51;
        v49 = v8;
        if (v47 == v51) {
          goto LABEL_99;
        }
      }

      v47 = v51;
      v8 = v49;
    }

                v161 = v37;
                goto LABEL_300;
              }

              v159 = 1LL;
              v37 = v161;
            }

LABEL_309:
  swift_release();
  v283 = v331 >> 10;
  if (!specialized Range.isEmpty.getter())
  {
    v298 = *(_OWORD *)(v340 + 16);
    v423[0] = *(_OWORD *)v340;
    v423[1] = v298;
    v423[2] = *(_OWORD *)(v340 + 32);
    v16 = v338;
    result = v334 - 1;
    if (__OFSUB__(v334, 1LL)) {
      goto LABEL_419;
    }
    if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v334) & 1) != 0)
    {
      v299 = *(_OWORD *)v340;
      v300 = *(_OWORD *)(v340 + 16);
      v422 = *(_OWORD *)(v340 + 32);
      v421[1] = v300;
      v421[0] = v299;
      v301 = *(_OWORD *)v340;
      v456 = *(_OWORD *)(v340 + 16);
      v457 = v422;
      v455 = v301;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v455, (uint64_t)v458);
      outlined retain of Locale((uint64_t)v458);
      v302 = BigString.index(before:)();
      v304 = v303;
      v306 = v305;
      v308 = v307;
      outlined release of Locale((uint64_t)v421);
      AttributedString.Guts._paragraphExtending(from:)(v302, v304, v306, v308, (uint64_t)&v357);
      v295 = Range<>._utf8OffsetRange.getter();
      v297 = v309;
      v310 = 0;
    }

    else
    {
LABEL_319:
      v295 = 0LL;
      v297 = 0LL;
      v310 = 1;
    }

    v311 = *(_OWORD *)(v340 + 16);
    v418 = *(_OWORD *)v340;
    v419 = v311;
    v420 = *(_OWORD *)(v340 + 32);
    if ((v310 & 1) != 0)
    {
      if (v332 < 1) {
        goto LABEL_238;
      }
    }

    else if (v297 >= v332)
    {
LABEL_334:
      v310 = 0;
      goto LABEL_335;
    }

    if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v332 - 1, v332) & 1) != 0)
    {
      v313 = *(_OWORD *)v340;
      v314 = *(_OWORD *)(v340 + 16);
      v417 = *(_OWORD *)(v340 + 32);
      v416[1] = v314;
      v416[0] = v313;
      v315 = *(_OWORD *)v340;
      v371 = *(_OWORD *)(v340 + 16);
      v372 = v417;
      v370 = v315;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v370, (uint64_t)v459);
      outlined retain of Locale((uint64_t)v459);
      v316 = BigString.index(before:)();
      v318 = v317;
      v320 = v319;
      v322 = v321;
      outlined release of Locale((uint64_t)v416);
      AttributedString.Guts._paragraphExtending(from:)(v316, v318, v320, v322, (uint64_t)&v363);
      v323 = Range<>._utf8OffsetRange.getter();
      v325 = v324;
      v326 = 1;
      goto LABEL_336;
    }

uint64_t AttributedString.CharacterView._replaceSubrange<A>(_:with:)( unint64_t *a1, __int128 *a2, uint64_t a3)
{
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v8 = (void *)*v3;
    __int128 v9 = *(_OWORD *)(*v3 + 16);
    __int128 v10 = *(_OWORD *)(*v3 + 48);
    v32[1] = *(_OWORD *)(*v3 + 32);
    v32[2] = v10;
    v32[0] = v9;
    uint64_t v11 = v8[8];
    uint64_t v12 = v8[9];
    uint64_t v29 = a3;
    uint64_t v13 = v8[10];
    uint64_t v14 = v8[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v32);
    swift_unknownObjectRetain();
    uint64_t v15 = v14;
    a3 = v29;
    uint64_t *v4 = AttributedString.Guts.init(string:runs:)(v32, v11, v12, v13, v15);
    swift_release();
  }

  if (a3 == MEMORY[0x18960D7F8])
  {
    __int128 v16 = a2[2];
    __int128 v17 = a2[3];
    __int128 v18 = *a2;
    v31[1] = a2[1];
    v31[2] = v16;
    __int128 v19 = a2[6];
    __int128 v20 = a2[4];
    v31[5] = a2[5];
    v31[6] = v19;
    v31[3] = v17;
    v31[4] = v20;
    v31[0] = v18;
    uint64_t v21 = *v4;
    __int128 v22 = *(_OWORD *)(*v4 + 32);
    v31[7] = *(_OWORD *)(*v4 + 16);
    v31[8] = v22;
    __int128 v23 = *(_OWORD *)(v4 + 1);
    v31[9] = *(_OWORD *)(v21 + 48);
    v31[10] = v23;
    __int128 v24 = *(_OWORD *)(v4 + 5);
    v31[11] = *(_OWORD *)(v4 + 3);
    v31[12] = v24;
    v31[13] = *(_OWORD *)(v4 + 7);
    outlined retain of Locale((uint64_t)v31);
    swift_unknownObjectRetain();
    BigSubstring.subscript.getter();
    swift_unknownObjectRelease();
    BigSubstring.isIdentical(to:)();
    outlined release of Locale((uint64_t)v31);
    outlined release of Locale((uint64_t)&v30);
  }

  uint64_t v25 = AttributedString.Guts.attributesToUseForTextReplacement(in:)(a1);
  uint64_t v27 = v26;
  MEMORY[0x1895F8858](v25);
  AttributedString.CharacterView._mutateStringContents(in:attributes:with:)( a1,  v25,  v27,  (void (*)(__int128 *, void *))partial apply for closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*AttributedString.CharacterView.subscript.modify( void (**a1)(uint64_t a1, char a2), unint64_t *a2))(uint64_t a1, char a2)
{
  result = (void (*)(uint64_t, char))malloc(0xC0uLL);
  *a1 = result;
  unint64_t v7 = *a2;
  unint64_t v6 = a2[1];
  *((void *)result + 19) = v2;
  *((void *)result + 20) = v7;
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  *((void *)result + 21) = v6;
  *((void *)result + 22) = v8;
  *((void *)result + 23) = v9;
  if (v7 >> 10 < v2[1] >> 10 || v7 >> 10 >= v2[5] >> 10)
  {
    __break(1u);
  }

  else
  {
    uint64_t v11 = result;
    uint64_t v12 = (uint64_t)result + 48;
    uint64_t v13 = (uint64_t)result + 96;
    uint64_t v14 = (_OWORD *)*v2;
    __int128 v16 = *(_OWORD *)(*v2 + 32LL);
    __int128 v15 = *(_OWORD *)(*v2 + 48LL);
    *((_OWORD *)result + 3) = *(_OWORD *)(*v2 + 16LL);
    *((_OWORD *)result + 4) = v16;
    *((_OWORD *)result + 5) = v15;
    __int128 v17 = v14[1];
    __int128 v18 = v14[3];
    *((_OWORD *)result + 1) = v14[2];
    *((_OWORD *)result + 2) = v18;
    *(_OWORD *)result = v17;
    outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)result, (uint64_t)result + 96);
    outlined retain of Locale(v13);
    uint64_t v19 = BigString.subscript.getter();
    uint64_t v21 = v20;
    outlined release of Locale(v12);
    *((void *)v11 + 17) = v19;
    *((void *)v11 + 18) = v21;
    return AttributedString.CharacterView.subscript.modify;
  }

  return result;
}

void AttributedString.CharacterView.subscript.modify(uint64_t a1, char a2)
{
  v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 136LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 176LL);
  uint64_t v4 = *(void *)(*(void *)a1 + 184LL);
  uint64_t v6 = *(void *)(*(void *)a1 + 168LL);
  uint64_t v7 = *(void *)(*(void *)a1 + 144LL);
  v8[0] = *(void *)(*(void *)a1 + 160LL);
  v8[1] = v6;
  v8[2] = v5;
  v8[3] = v4;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized AttributedString.CharacterView.subscript.setter(v3, v7, v8);
    swift_bridgeObjectRelease();
  }

  else
  {
    specialized AttributedString.CharacterView.subscript.setter(v3, v7, v8);
  }

  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t AttributedString.CharacterView.subscript.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *(void *)(result + 32);
  if (*(void *)result >> 10 >= v2[1] >> 10 && v2[5] >> 10 >= v4 >> 10)
  {
    uint64_t v6 = (_OWORD *)*v2;
    uint64_t v7 = *(void *)(result + 56);
    uint64_t v8 = *(void *)(result + 24);
    v19[14] = *(void *)result;
    __int128 v20 = *(_OWORD *)(result + 8);
    uint64_t v21 = v8;
    unint64_t v22 = v4;
    __int128 v23 = *(_OWORD *)(result + 40);
    uint64_t v24 = v7;
    __int128 v9 = v6[1];
    __int128 v10 = v6[3];
    v25[1] = v6[2];
    v25[2] = v10;
    v25[0] = v9;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v25);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v25);
    outlined release of Locale((uint64_t)v19);
    result = swift_release();
    uint64_t v11 = v19[6];
    uint64_t v12 = v19[7];
    uint64_t v13 = v19[8];
    uint64_t v14 = v19[9];
    uint64_t v15 = v19[10];
    uint64_t v16 = v19[11];
    uint64_t v17 = v19[12];
    uint64_t v18 = v19[13];
    a2[8] = v6;
    a2[9] = v11;
    a2[10] = v12;
    a2[11] = v13;
    a2[12] = v14;
    a2[13] = v15;
    a2[14] = v16;
    a2[15] = v17;
    a2[16] = v18;
    a2[17] = 0LL;
    *a2 = v11;
    a2[1] = v12;
    a2[2] = v13;
    a2[3] = v14;
    a2[4] = v15;
    a2[5] = v16;
    a2[6] = v17;
    a2[7] = v18;
  }

  else
  {
    __break(1u);
  }

  return result;
}

__n128 key path getter for AttributedString.CharacterView.subscript(_:) : AttributedString.CharacterView@<Q0>( uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1[9];
  uint64_t v12 = *a1;
  __int128 v13 = *(_OWORD *)(a1 + 1);
  __int128 v14 = *(_OWORD *)(a1 + 3);
  __int128 v15 = *(_OWORD *)(a1 + 5);
  __int128 v16 = *(_OWORD *)(a1 + 7);
  uint64_t v17 = v4;
  __int128 v5 = a2[1];
  v11[0] = *a2;
  v11[1] = v5;
  __int128 v6 = a2[3];
  v11[2] = a2[2];
  v11[3] = v6;
  AttributedString.CharacterView.subscript.getter((uint64_t)v11, v18);
  __int128 v7 = v18[7];
  *(_OWORD *)(a3 + 96) = v18[6];
  *(_OWORD *)(a3 + 112) = v7;
  *(_OWORD *)(a3 + 128) = v18[8];
  __int128 v8 = v18[3];
  *(_OWORD *)(a3 + 32) = v18[2];
  *(_OWORD *)(a3 + 48) = v8;
  __int128 v9 = v18[5];
  *(_OWORD *)(a3 + 64) = v18[4];
  *(_OWORD *)(a3 + 80) = v9;
  __n128 result = (__n128)v18[1];
  *(_OWORD *)a3 = v18[0];
  *(__n128 *)(a3 + 16) = result;
  return result;
}

uint64_t key path setter for AttributedString.CharacterView.subscript(_:) : AttributedString.CharacterView( _OWORD *a1, uint64_t a2, _OWORD *a3)
{
  __int128 v3 = a3[1];
  v10[0] = *a3;
  v10[1] = v3;
  __int128 v4 = a3[3];
  v10[2] = a3[2];
  v10[3] = v4;
  __int128 v5 = a1[7];
  v11[6] = a1[6];
  v11[7] = v5;
  v11[8] = a1[8];
  __int128 v6 = a1[3];
  v11[2] = a1[2];
  v11[3] = v6;
  __int128 v7 = a1[5];
  _OWORD v11[4] = a1[4];
  v11[5] = v7;
  __int128 v8 = a1[1];
  v11[0] = *a1;
  v11[1] = v8;
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v11);
  specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)((uint64_t *)v10, (uint64_t)v11);
  return outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v11);
}

__int128 *AttributedString.CharacterView.subscript.setter(__int128 *result, uint64_t *a2)
{
  __int128 v3 = result[7];
  __int128 v62 = result[6];
  __int128 v63 = v3;
  __int128 v64 = result[8];
  __int128 v4 = result[3];
  __int128 v58 = result[2];
  __int128 v59 = v4;
  __int128 v5 = result[5];
  __int128 v60 = result[4];
  __int128 v61 = v5;
  __int128 v6 = result[1];
  uint64_t v7 = *a2;
  unint64_t v8 = v2[1];
  unint64_t v9 = (unint64_t)*a2 >> 10;
  __int128 v56 = *result;
  __int128 v57 = v6;
  if (v9 < v8 >> 10)
  {
    __break(1u);
  }

  else
  {
    unint64_t v10 = a2[4];
    if (v2[5] >> 10 >= v10 >> 10)
    {
      uint64_t v11 = a2[1];
      uint64_t v12 = a2[2];
      uint64_t v13 = a2[3];
      uint64_t v14 = a2[5];
      uint64_t v15 = a2[6];
      uint64_t v16 = a2[7];
      uint64_t v17 = (_OWORD *)*v2;
      __int128 v18 = *(_OWORD *)(*v2 + 16LL);
      __int128 v19 = *(_OWORD *)(*v2 + 48LL);
      v51[1] = *(_OWORD *)(*v2 + 32LL);
      v51[2] = v19;
      v51[0] = v18;
      __int128 v20 = v17[1];
      v52[1] = v17[2];
      v52[2] = v19;
      v52[0] = v20;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v52, (uint64_t)v53);
      outlined retain of Locale((uint64_t)v53);
      uint64_t v21 = MEMORY[0x186E1AE90](v7, v11, v12, v13);
      uint64_t v23 = v22;
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      outlined release of Locale((uint64_t)v51);
      __int128 v28 = v17[1];
      __int128 v29 = v17[3];
      v50[1] = v17[2];
      v50[2] = v29;
      v50[0] = v28;
      __int128 v30 = v17[1];
      v54[1] = v17[2];
      v54[2] = v29;
      v54[0] = v30;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v54, (uint64_t)v55);
      outlined retain of Locale((uint64_t)v55);
      uint64_t v31 = MEMORY[0x186E1AE90](v10, v14, v15, v16);
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      uint64_t v37 = v36;
      outlined release of Locale((uint64_t)v50);
      v47[0] = v21;
      v47[1] = v23;
      v47[2] = v25;
      v47[3] = v27;
      v47[4] = v31;
      v47[5] = v33;
      v47[6] = v35;
      v47[7] = v37;
      v48[7] = v56;
      v48[8] = v57;
      v48[9] = v58;
      v48[10] = v59;
      v38 = (_OWORD *)v60;
      __int128 v39 = *(_OWORD *)(v60 + 16);
      __int128 v40 = *(_OWORD *)(v60 + 48);
      v49[1] = *(_OWORD *)(v60 + 32);
      v49[2] = v40;
      v49[0] = v39;
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      outlined retain of Locale((uint64_t)v49);
      BigString.subscript.getter();
      outlined release of Locale((uint64_t)v49);
      outlined release of Locale((uint64_t)v42);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      __int128 v41 = v38[2];
      v48[0] = v38[1];
      v48[1] = v41;
      v48[2] = v38[3];
      v48[3] = v43;
      v48[4] = v44;
      v48[5] = v45;
      v48[6] = v46;
      swift_unknownObjectRetain();
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v47, (uint64_t)v48);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      swift_unknownObjectRelease();
      return (__int128 *)outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
    }
  }

  __break(1u);
  return result;
}

void *AttributedString.CharacterView.subscript.modify(void *a1, unint64_t *a2)
{
  __n128 result = malloc(0x7C0uLL);
  *a1 = result;
  result[239] = v2;
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  result[240] = *a2;
  result[241] = v7;
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  result[242] = v8;
  result[243] = v9;
  unint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  result[244] = v10;
  result[245] = v11;
  unint64_t v12 = a2[6];
  unint64_t v13 = a2[7];
  result[246] = v12;
  unint64_t v14 = v2[1];
  result[247] = v13;
  if (v6 >> 10 < v14 >> 10 || v2[5] >> 10 < v10 >> 10)
  {
    __break(1u);
  }

  else
  {
    uint64_t v15 = result;
    uint64_t v16 = (_OWORD *)*v2;
    uint64_t v17 = (uint64_t)(result + 54);
    result[132] = v6;
    uint64_t v18 = (uint64_t)(result + 200);
    result[133] = v7;
    result[134] = v8;
    result[135] = v9;
    result[136] = v10;
    result[137] = v11;
    result[138] = v12;
    result[139] = v13;
    __int128 v20 = v16[2];
    __int128 v19 = v16[3];
    *((_OWORD *)result + 100) = v16[1];
    *((_OWORD *)result + 101) = v20;
    *((_OWORD *)result + 102) = v19;
    swift_retain_n();
    outlined retain of Locale(v18);
    BigString.subscript.getter();
    outlined release of Locale(v18);
    outlined release of Locale(v17);
    swift_release();
    uint64_t v21 = v15[60];
    uint64_t v22 = v15[61];
    uint64_t v23 = v15[62];
    uint64_t v24 = v15[63];
    uint64_t v25 = v15[64];
    uint64_t v26 = v15[65];
    uint64_t v27 = v15[66];
    uint64_t v28 = v15[67];
    v15[44] = v16;
    v15[45] = v21;
    v15[46] = v22;
    v15[47] = v23;
    v15[48] = v24;
    v15[49] = v25;
    v15[50] = v26;
    v15[51] = v27;
    v15[52] = v28;
    v15[53] = 0LL;
    v15[36] = v21;
    v15[37] = v22;
    v15[38] = v23;
    v15[39] = v24;
    v15[40] = v25;
    v15[41] = v26;
    __n128 result = AttributedString.CharacterView.subscript.modify;
    v15[42] = v27;
    v15[43] = v28;
  }

  return result;
}

void AttributedString.CharacterView.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  __int128 v3 = (_OWORD *)(*a1 + 288);
  unint64_t v4 = *(void *)(*a1 + 1920);
  __int128 v5 = *(void **)(*a1 + 1912);
  unint64_t v6 = v4 >> 10;
  if ((a2 & 1) != 0)
  {
    __int128 v7 = *(_OWORD *)(*a1 + 336);
    *(_OWORD *)(v2 + 32) = *(_OWORD *)(*a1 + 320);
    *(_OWORD *)(v2 + 48) = v7;
    __int128 v8 = v3[8];
    __int128 v9 = v3[6];
    *(_OWORD *)(v2 + 112) = v3[7];
    *(_OWORD *)(v2 + 128) = v8;
    __int128 v10 = v3[5];
    *(_OWORD *)(v2 + 64) = v3[4];
    *(_OWORD *)(v2 + 80) = v10;
    *(_OWORD *)(v2 + 96) = v9;
    __int128 v11 = v3[1];
    *(_OWORD *)uint64_t v2 = *v3;
    *(_OWORD *)(v2 + 16) = v11;
    if (v6 < v5[1] >> 10)
    {
      __break(1u);
    }

    else if (v5[5] >> 10 >= *(void *)(v2 + 1952) >> 10)
    {
      uint64_t v97 = *(void *)(v2 + 1952);
      uint64_t v103 = *(void *)(v2 + 1976);
      uint64_t v101 = *(void *)(v2 + 1968);
      uint64_t v99 = *(void *)(v2 + 1960);
      uint64_t v93 = *(void *)(v2 + 1944);
      uint64_t v91 = *(void *)(v2 + 1936);
      uint64_t v12 = *(void *)(v2 + 1928);
      unint64_t v13 = (_OWORD *)*v5;
      __int128 v15 = *(_OWORD *)(*v5 + 32LL);
      __int128 v14 = *(_OWORD *)(*v5 + 48LL);
      *(_OWORD *)(v2 + 1552) = *(_OWORD *)(*v5 + 16LL);
      *(_OWORD *)(v2 + 1568) = v15;
      *(_OWORD *)(v2 + 1584) = v14;
      unint64_t v16 = v4;
      outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
      outlined retain of Locale(v2 + 1552);
      uint64_t v17 = MEMORY[0x186E1AE90](v16, v12, v91, v93);
      uint64_t v92 = v18;
      uint64_t v94 = v17;
      uint64_t v20 = v19;
      uint64_t v90 = v21;
      outlined release of Locale(v2 + 1552);
      __int128 v23 = v13[2];
      __int128 v22 = v13[3];
      *(_OWORD *)(v2 + 1456) = v13[1];
      *(_OWORD *)(v2 + 1472) = v23;
      *(_OWORD *)(v2 + 1488) = v22;
      __int128 v24 = v13[1];
      __int128 v25 = v13[3];
      *(_OWORD *)(v2 + 1664) = v13[2];
      *(_OWORD *)(v2 + 1680) = v25;
      *(_OWORD *)(v2 + 1648) = v24;
      outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)(v2 + 1648), v2 + 1832);
      outlined retain of Locale(v2 + 1832);
      uint64_t v26 = MEMORY[0x186E1AE90](v97, v99, v101, v103);
      uint64_t v28 = v27;
      uint64_t v30 = v29;
      uint64_t v32 = v31;
      outlined release of Locale(v2 + 1456);
      *(void *)(v2 + 992) = v94;
      *(void *)(v2 + 1000) = v92;
      *(void *)(v2 + 1008) = v20;
      *(void *)(v2 + 1016) = v90;
      *(void *)(v2 + 1024) = v26;
      *(void *)(v2 + 1032) = v28;
      *(void *)(v2 + 1040) = v30;
      *(void *)(v2 + 1048) = v32;
      __int128 v33 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v2 + 1120) = *(_OWORD *)v2;
      *(_OWORD *)(v2 + 1136) = v33;
      __int128 v34 = *(_OWORD *)(v2 + 48);
      *(_OWORD *)(v2 + 1152) = *(_OWORD *)(v2 + 32);
      *(_OWORD *)(v2 + 1168) = v34;
      uint64_t v35 = *(_OWORD **)(v2 + 64);
      __int128 v36 = v35[3];
      __int128 v37 = v35[1];
      *(_OWORD *)(v2 + 1520) = v35[2];
      *(_OWORD *)(v2 + 1536) = v36;
      *(_OWORD *)(v2 + 1504) = v37;
      outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
      outlined retain of Locale(v2 + 1504);
      BigString.subscript.getter();
      outlined release of Locale(v2 + 1504);
      outlined release of Locale(v2 + 656);
      outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
      outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
      __int128 v38 = v35[2];
      __int128 v39 = v35[3];
      *(_OWORD *)(v2 + 880) = v35[1];
      *(_OWORD *)(v2 + 896) = v38;
      __int128 v40 = *(_OWORD *)(v2 + 704);
      __int128 v41 = *(_OWORD *)(v2 + 720);
      *(_OWORD *)(v2 + 912) = v39;
      *(_OWORD *)(v2 + 928) = v40;
      __int128 v42 = *(_OWORD *)(v2 + 736);
      __int128 v43 = *(_OWORD *)(v2 + 752);
      *(_OWORD *)(v2 + 944) = v41;
      *(_OWORD *)(v2 + 960) = v42;
      *(_OWORD *)(v2 + 976) = v43;
      swift_unknownObjectRetain();
      outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
      specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v2 + 992, v2 + 880);
      outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
      swift_unknownObjectRelease();
      outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
      __int128 v44 = v3[7];
      *(_OWORD *)(v2 + 240) = v3[6];
      *(_OWORD *)(v2 + 256) = v44;
      *(_OWORD *)(v2 + 272) = v3[8];
      __int128 v45 = v3[3];
      *(_OWORD *)(v2 + 176) = v3[2];
      *(_OWORD *)(v2 + 192) = v45;
      __int128 v46 = v3[5];
      *(_OWORD *)(v2 + 208) = v3[4];
      *(_OWORD *)(v2 + 224) = v46;
      __int128 v47 = v3[1];
      *(_OWORD *)(v2 + 144) = *v3;
      *(_OWORD *)(v2 + 160) = v47;
      uint64_t v48 = v2 + 144;
LABEL_8:
      outlined release of Slice<AttributedString.UnicodeScalarView>(v48);
      free((void *)v2);
      return;
    }

    __break(1u);
    goto LABEL_11;
  }

  __int128 v49 = *(_OWORD *)(*a1 + 336);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(*a1 + 320);
  *(_OWORD *)(v2 + 48) = v49;
  __int128 v50 = v3[8];
  __int128 v51 = v3[6];
  *(_OWORD *)(v2 + 112) = v3[7];
  *(_OWORD *)(v2 + 128) = v50;
  __int128 v52 = v3[5];
  *(_OWORD *)(v2 + 64) = v3[4];
  *(_OWORD *)(v2 + 80) = v52;
  *(_OWORD *)(v2 + 96) = v51;
  __int128 v53 = v3[1];
  *(_OWORD *)uint64_t v2 = *v3;
  *(_OWORD *)(v2 + 16) = v53;
  if (v6 < v5[1] >> 10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (v5[5] >> 10 >= *(void *)(v2 + 1952) >> 10)
  {
    uint64_t v104 = *(void *)(v2 + 1952);
    unint64_t v95 = v4;
    uint64_t v100 = *(void *)(v2 + 1968);
    uint64_t v102 = *(void *)(v2 + 1976);
    uint64_t v98 = *(void *)(v2 + 1960);
    uint64_t v54 = *(void *)(v2 + 1944);
    uint64_t v55 = *(void *)(v2 + 1936);
    uint64_t v56 = *(void *)(v2 + 1928);
    __int128 v57 = (_OWORD *)*v5;
    __int128 v59 = *(_OWORD *)(*v5 + 32LL);
    __int128 v58 = *(_OWORD *)(*v5 + 48LL);
    *(_OWORD *)(v2 + 1312) = *(_OWORD *)(*v5 + 16LL);
    *(_OWORD *)(v2 + 1328) = v59;
    *(_OWORD *)(v2 + 1344) = v58;
    __int128 v60 = v57[1];
    __int128 v61 = v57[3];
    *(_OWORD *)(v2 + 1760) = v57[2];
    *(_OWORD *)(v2 + 1776) = v61;
    *(_OWORD *)(v2 + 1744) = v60;
    outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)(v2 + 1744), v2 + 1792);
    outlined retain of Locale(v2 + 1792);
    uint64_t v96 = MEMORY[0x186E1AE90](v95, v56, v55, v54);
    uint64_t v63 = v62;
    uint64_t v65 = v64;
    uint64_t v67 = v66;
    outlined release of Locale(v2 + 1312);
    __int128 v69 = v57[2];
    __int128 v68 = v57[3];
    *(_OWORD *)(v2 + 1360) = v57[1];
    *(_OWORD *)(v2 + 1376) = v69;
    *(_OWORD *)(v2 + 1392) = v68;
    __int128 v70 = v57[1];
    __int128 v71 = v57[3];
    *(_OWORD *)(v2 + 1712) = v57[2];
    *(_OWORD *)(v2 + 1728) = v71;
    *(_OWORD *)(v2 + 1696) = v70;
    outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)(v2 + 1696), v2 + 1872);
    outlined retain of Locale(v2 + 1872);
    uint64_t v72 = MEMORY[0x186E1AE90](v104, v98, v100, v102);
    uint64_t v74 = v73;
    uint64_t v76 = v75;
    uint64_t v78 = v77;
    outlined release of Locale(v2 + 1360);
    *(void *)(v2 + 1184) = v96;
    *(void *)(v2 + 1192) = v63;
    *(void *)(v2 + 1200) = v65;
    *(void *)(v2 + 1208) = v67;
    *(void *)(v2 + 1216) = v72;
    *(void *)(v2 + 1224) = v74;
    *(void *)(v2 + 1232) = v76;
    *(void *)(v2 + 1240) = v78;
    __int128 v79 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v2 + 1248) = *(_OWORD *)v2;
    *(_OWORD *)(v2 + 1264) = v79;
    __int128 v80 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v2 + 1280) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v2 + 1296) = v80;
    v81 = *(_OWORD **)(v2 + 64);
    __int128 v82 = v81[3];
    __int128 v83 = v81[1];
    *(_OWORD *)(v2 + 1424) = v81[2];
    *(_OWORD *)(v2 + 1440) = v82;
    *(_OWORD *)(v2 + 1408) = v83;
    outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
    outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
    outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
    outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
    outlined retain of Locale(v2 + 1408);
    BigString.subscript.getter();
    outlined release of Locale(v2 + 1408);
    outlined release of Locale(v2 + 544);
    outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
    outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
    __int128 v84 = v81[2];
    __int128 v85 = v81[3];
    *(_OWORD *)(v2 + 768) = v81[1];
    *(_OWORD *)(v2 + 784) = v84;
    __int128 v86 = *(_OWORD *)(v2 + 592);
    __int128 v87 = *(_OWORD *)(v2 + 608);
    *(_OWORD *)(v2 + 800) = v85;
    *(_OWORD *)(v2 + 816) = v86;
    __int128 v88 = *(_OWORD *)(v2 + 624);
    __int128 v89 = *(_OWORD *)(v2 + 640);
    *(_OWORD *)(v2 + 832) = v87;
    *(_OWORD *)(v2 + 848) = v88;
    *(_OWORD *)(v2 + 864) = v89;
    swift_unknownObjectRetain();
    outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v2 + 1184, v2 + 768);
    outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
    swift_unknownObjectRelease();
    uint64_t v48 = v2;
    goto LABEL_8;
  }

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.CharacterView( unint64_t *result)
{
  unint64_t v2 = *result >> 10;
  unint64_t v3 = v1[1] >> 10;
  if (v2 >= v3 && v1[5] >> 10 >= v2)
  {
    __int128 v5 = result;
    uint64_t v6 = *v1;
    __int128 v7 = *(_OWORD *)(*v1 + 16LL);
    __int128 v8 = *(_OWORD *)(*v1 + 48LL);
    v17[1] = *(_OWORD *)(*v1 + 32LL);
    v17[2] = v8;
    v17[0] = v7;
    __int128 v9 = *(_OWORD *)(v6 + 16);
    v18[1] = *(_OWORD *)(v6 + 32);
    v18[2] = v8;
    v18[0] = v9;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v18, (uint64_t)v19);
    outlined retain of Locale((uint64_t)v19);
    unint64_t v10 = BigString.index(before:)();
    unint64_t v12 = v11;
    unint64_t v14 = v13;
    unint64_t v16 = v15;
    __n128 result = (unint64_t *)outlined release of Locale((uint64_t)v17);
    if (v3 <= v10 >> 10)
    {
      *__int128 v5 = v10;
      v5[1] = v12;
      v5[2] = v14;
      v5[3] = v16;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

__int128 *protocol witness for Collection.subscript.read in conformance AttributedString.CharacterView( __int128 **a1, void *a2)
{
  __n128 result = (__int128 *)malloc(0xA0uLL);
  *a1 = result;
  unint64_t v6 = *a2 >> 10;
  if (v6 < v2[1] >> 10 || v6 >= v2[5] >> 10)
  {
    __break(1u);
  }

  else
  {
    __int128 v8 = result;
    uint64_t v9 = (uint64_t)(result + 3);
    uint64_t v10 = (uint64_t)(result + 6);
    unint64_t v11 = (_OWORD *)*v2;
    __int128 v13 = *(_OWORD *)(*v2 + 32LL);
    __int128 v12 = *(_OWORD *)(*v2 + 48LL);
    result[3] = *(_OWORD *)(*v2 + 16LL);
    result[4] = v13;
    result[5] = v12;
    __int128 v14 = v11[1];
    __int128 v15 = v11[3];
    result[1] = v11[2];
    result[2] = v15;
    *__n128 result = v14;
    outlined init with take of any PredicateExpression<Self.Output == B1>(result, (uint64_t)(result + 6));
    outlined retain of Locale(v10);
    uint64_t v16 = BigString.subscript.getter();
    uint64_t v18 = v17;
    *((void *)v8 + 19) = v17;
    outlined release of Locale(v9);
    *((void *)v8 + 17) = v16;
    *((void *)v8 + 18) = v18;
    return (__int128 *)protocol witness for Collection.subscript.read in conformance AttributedString.CharacterView;
  }

  return result;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.CharacterView(void **a1)
{
  v1 = *a1;
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t protocol witness for Collection.count.getter in conformance AttributedString.CharacterView()
{
  uint64_t v0 = BigSubstring.distance(from:to:)();
  swift_unknownObjectRelease();
  return v0;
}

unint64_t *protocol witness for Collection.formIndex(after:) in conformance AttributedString.CharacterView( unint64_t *result)
{
  unint64_t v2 = *result >> 10;
  unint64_t v3 = v1[5] >> 10;
  if (v2 >= v1[1] >> 10 && v3 >= v2)
  {
    __int128 v5 = result;
    uint64_t v6 = *v1;
    __int128 v7 = *(_OWORD *)(*v1 + 16LL);
    __int128 v8 = *(_OWORD *)(*v1 + 48LL);
    v17[1] = *(_OWORD *)(*v1 + 32LL);
    v17[2] = v8;
    v17[0] = v7;
    __int128 v9 = *(_OWORD *)(v6 + 16);
    v18[1] = *(_OWORD *)(v6 + 32);
    v18[2] = v8;
    v18[0] = v9;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v18, (uint64_t)v19);
    outlined retain of Locale((uint64_t)v19);
    unint64_t v10 = BigString.index(after:)();
    unint64_t v12 = v11;
    unint64_t v14 = v13;
    unint64_t v16 = v15;
    __n128 result = (unint64_t *)outlined release of Locale((uint64_t)v17);
    if (v3 >= v10 >> 10)
    {
      *__int128 v5 = v10;
      v5[1] = v12;
      v5[2] = v14;
      v5[3] = v16;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.CharacterView()
{
  __int128 v1 = v0[3];
  v5[2] = v0[2];
  v5[3] = v1;
  v5[4] = v0[4];
  __int128 v2 = v0[1];
  v5[0] = *v0;
  v5[1] = v2;
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v5);
  outlined release of AttributedString.Runs((uint64_t)v5);
  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString.CharacterView( uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString.CharacterView@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

uint64_t AttributedString.CharacterView._mutateStringContents(in:attributes:with:)( void *a1, uint64_t a2, uint64_t a3, void (*a4)(__int128 *, void *))
{
  __int128 v5 = v4;
  unint64_t v10 = (_OWORD *)*v4;
  uint64_t v11 = *a1 >> 11;
  uint64_t v12 = a1[4] >> 11;
  uint64_t v34 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v11, v12);
  uint64_t v35 = v13;
  __int128 v14 = v10[2];
  v58[7] = v10[1];
  v58[8] = v14;
  v58[9] = v10[3];
  BigString.utf8.getter();
  uint64_t v15 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v43);
  __int128 v16 = v10[2];
  __int128 v36 = v10[1];
  __int128 v37 = v16;
  __int128 v17 = *(_OWORD *)(v5 + 1);
  __int128 v38 = v10[3];
  __int128 v39 = v17;
  __int128 v18 = *(_OWORD *)(v5 + 5);
  __int128 v40 = *(_OWORD *)(v5 + 3);
  __int128 v41 = v18;
  __int128 v42 = *(_OWORD *)(v5 + 7);
  swift_unknownObjectRetain();
  BigString.init()();
  __int128 v19 = v45;
  v10[1] = v44;
  v10[2] = v19;
  v10[3] = v46;
  swift_unknownObjectRelease();
  uint64_t v20 = a1;
  uint64_t v21 = v15;
  a4(&v36, v20);
  v58[4] = v40;
  v58[5] = v41;
  v58[6] = v42;
  v58[0] = v36;
  v58[1] = v37;
  v58[2] = v38;
  v58[3] = v39;
  __int128 v61 = v41;
  __int128 v62 = v42;
  __int128 v59 = v39;
  __int128 v60 = v40;
  BigSubstring.base.getter();
  __int128 v22 = v48;
  v10[1] = v47;
  v10[2] = v22;
  v10[3] = v49;
  swift_unknownObjectRelease();
  __int128 v23 = v60;
  *(_OWORD *)(v5 + 1) = v59;
  *(_OWORD *)(v5 + 3) = v23;
  __int128 v24 = v62;
  *(_OWORD *)(v5 + 5) = v61;
  *(_OWORD *)(v5 + 7) = v24;
  __int128 v25 = v10[2];
  __int128 v55 = v10[1];
  __int128 v56 = v25;
  __int128 v57 = v10[3];
  BigString.utf8.getter();
  uint64_t v26 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v50);
  uint64_t v28 = v26 - v21;
  if (__OFSUB__(v26, v21))
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v29 = v12 - v11 + v28;
  if (__OFADD__(v12 - v11, v28))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v11, v12, v29, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __int128 v30 = v10[2];
  __int128 v52 = v10[1];
  __int128 v53 = v30;
  __int128 v54 = v10[3];
  BigString.utf8.getter();
  uint64_t v31 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v51);
  uint64_t v32 = v31 - v21;
  if (__OFSUB__(v31, v21))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v33 = v35 + v32;
  if (__OFADD__(v35, v32))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t result = v34;
  if (v33 >= v34)
  {
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v34, v33, 1, 0LL);
    return outlined release of Locale((uint64_t)v58);
  }

void closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 v9 = MEMORY[0x1895F8858](a1);
  if (*v10 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))( (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6,  a5,  v9);
    BigSubstring.replaceSubrange<A>(_:with:)();
  }

uint64_t protocol witness for RangeReplaceableCollection.init() in conformance AttributedString.CharacterView@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v16 = 0LL;
  MEMORY[0x186E20E78](&v16, 8LL);
  uint64_t v2 = v16;
  type metadata accessor for AttributedString.Guts();
  uint64_t v3 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    __int128 v5 = v18;
    *(_OWORD *)(v3 + 16) = v17;
    *(_OWORD *)(v3 + 32) = v5;
    *(_OWORD *)(v3 + 48) = v19;
    *(void *)(v3 + 64) = 0LL;
    *(void *)(v3 + 72) = 0LL;
    *(void *)(v3 + 80) = 0LL;
    *(void *)(v3 + 88) = v2;
    uint64_t v6 = BigString.startIndex.getter();
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t result = BigString.endIndex.getter();
    *a1 = v3;
    a1[1] = v6;
    a1[2] = v8;
    a1[3] = v10;
    a1[4] = v12;
    a1[5] = result;
    a1[6] = v13;
    a1[7] = v14;
    a1[8] = v15;
    a1[9] = 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance AttributedString.CharacterView( uint64_t *a1, __int128 *a2, ValueMetadata *a3)
{
  return (*((uint64_t (**)(__int128 *, ValueMetadata *))a3[-1].Description + 1))(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance AttributedString.CharacterView@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized RangeReplaceableCollection.init(repeating:count:)(*a1, a1[1], a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance AttributedString.CharacterView( uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  v8[0] = v1[5];
  v8[1] = v4;
  v8[2] = v5;
  v8[3] = v6;
  uint64_t v8[4] = v8[0];
  v8[5] = v4;
  v8[6] = v5;
  v8[7] = v6;
  specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)(v8, v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance AttributedString.CharacterView( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  v8[0] = *a2;
  v8[1] = v4;
  v8[2] = v5;
  v8[3] = v6;
  uint64_t v8[4] = v8[0];
  v8[5] = v4;
  v8[6] = v5;
  v8[7] = v6;
  specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)(v8, v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance AttributedString.CharacterView( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
}

unint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance AttributedString.CharacterView@<X0>( uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized RangeReplaceableCollection.remove(at:)( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24));
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t *protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance AttributedString.CharacterView( _OWORD *a1)
{
  __int128 v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  __int128 v2 = a1[3];
  v4[2] = a1[2];
  v4[3] = v2;
  return specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)((uint64_t *)v4);
}

void protocol witness for RangeReplaceableCollection.removeFirst() in conformance AttributedString.CharacterView( void *a1@<X8>)
{
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for RangeReplaceableCollection.removeFirst(_:) in conformance AttributedString.CharacterView( uint64_t a1)
{
  return specialized RangeReplaceableCollection.removeFirst(_:)( a1,  (void *(*)(__int128 *__return_ptr, void *, uint64_t, _OWORD *))AttributedString.CharacterView._index(_:offsetBy:limitedBy:),  (uint64_t (*)(__int128 *))specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:));
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(keepingCapacity:) in conformance AttributedString.CharacterView( uint64_t result)
{
  if ((result & 1) != 0)
  {
    unint64_t v2 = *(void *)(v1 + 40);
    if (v2 >> 10 >= *(void *)(v1 + 8) >> 10)
    {
      uint64_t v3 = *(void *)(v1 + 64);
      uint64_t v4 = *(void *)(v1 + 32);
      *(void *)__int128 v19 = *(void *)(v1 + 8);
      *(_OWORD *)&v19[8] = *(_OWORD *)(v1 + 16);
      *(void *)&v19[24] = v4;
      *(void *)uint64_t v20 = v2;
      *(_OWORD *)&v20[8] = *(_OWORD *)(v1 + 48);
      uint64_t v21 = v3;
      return (uint64_t)specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)((uint64_t *)v19);
    }

    __break(1u);
    goto LABEL_8;
  }

  swift_release();
  BigString.init()();
  uint64_t v18 = 0LL;
  MEMORY[0x186E20E78](&v18, 8LL);
  uint64_t v5 = v18;
  type metadata accessor for AttributedString.Guts();
  uint64_t v6 = swift_allocObject();
  unint64_t result = BigString.isEmpty.getter();
  if ((result & 1) == 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  __int128 v7 = *(_OWORD *)&v19[16];
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v19;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)v20;
  *(void *)(v6 + 64) = 0LL;
  *(void *)(v6 + 72) = 0LL;
  *(void *)(v6 + 80) = 0LL;
  *(void *)(v6 + 88) = v5;
  uint64_t v8 = BigString.startIndex.getter();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  unint64_t result = BigString.endIndex.getter();
  *(void *)uint64_t v1 = v6;
  *(void *)(v1 + 8) = v8;
  *(void *)(v1 + 16) = v10;
  *(void *)(v1 + 24) = v12;
  *(void *)(v1 + 32) = v14;
  *(void *)(v1 + 40) = result;
  *(void *)(v1 + 48) = v15;
  *(void *)(v1 + 56) = v16;
  *(void *)(v1 + 64) = v17;
  *(void *)(v1 + 72) = 0LL;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance AttributedString.CharacterView( uint64_t (*a1)(void *))
{
  return specialized RangeReplaceableCollection.removeAll(where:)(a1);
}

double specialized Rope.Builder._appendNow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 8);
  __int128 v8 = *(_OWORD *)(v3 + 16);
  *(void *)(v3 + 16) = 0LL;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + 8) = 0LL;
  if (!v7)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
    uint64_t v7 = swift_allocObject();
    *(_WORD *)(v7 + 16) = 0;
    *(_BYTE *)(v7 + 18) = 0;
    __int128 v8 = 0uLL;
  }

  uint64_t v11 = v7;
  __int128 v12 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Rope._Node._appendItem(_:)(a1, a2, a3);
  if (*(_WORD *)(v11 + 16) == 15)
  {
    uint64_t v9 = swift_unknownObjectRetain();
    specialized Rope.Builder._appendNow(_:)(v9, v12, *((uint64_t *)&v12 + 1));
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 8) = v11;
    double result = *(double *)&v12;
    *(_OWORD *)(v3 + 16) = v12;
  }

  return result;
}

uint64_t specialized Rope.Builder._appendNow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t v10 = (void *)*v3;
  if (!*(void *)(*v3 + 16LL))
  {
    swift_unknownObjectRetain();
    uint64_t v11 = a1;
LABEL_38:
    __int128 v50 = 0LL;
    swift_unknownObjectRetain();
    MEMORY[0x186E20E78](&v50, 8LL);
    __int128 v41 = v50;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v10[2] + 1LL,  1,  v10);
    }
    unint64_t v43 = v10[2];
    unint64_t v42 = v10[3];
    if (v43 >= v42 >> 1) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v42 > 1),  v43 + 1,  1,  v10);
    }
    v10[2] = v43 + 1;
    __int128 v44 = &v10[4 * v43];
    v44[4] = v11;
    v44[5] = v8;
    v44[6] = v7;
    v44[7] = v41;
LABEL_43:
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    *__int128 v48 = v10;
    return result;
  }

  swift_unknownObjectRetain();
  uint64_t v11 = a1;
  while (1)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      uint64_t v13 = v10[2];
      if (!v13) {
        goto LABEL_33;
      }
    }

    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      uint64_t v10 = (void *)result;
      uint64_t v13 = *(void *)(result + 16);
      if (!v13)
      {
LABEL_33:
        __break(1u);
LABEL_34:
        uint64_t v49 = 0LL;
        swift_unknownObjectRetain();
        MEMORY[0x186E20E78](&v49, 8LL);
        uint64_t v31 = specialized static Rope.join(_:_:)((uint64_t)v3, v6, v4, v5, v11, v8, v7);
        uint64_t v33 = v32;
        uint64_t v35 = v34;
        uint64_t v37 = v36;
        unint64_t v38 = v10[2];
        unint64_t v39 = v10[3];
        swift_unknownObjectRetain();
        if (v38 >= v39 >> 1) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v39 > 1),  v38 + 1,  1,  v10);
        }
        v10[2] = v38 + 1;
        __int128 v40 = &v10[4 * v38];
        v40[4] = v31;
        v40[5] = v33;
        v40[6] = v35;
        v40[7] = v37;
        swift_unknownObjectRelease();
        goto LABEL_43;
      }
    }

    uint64_t v14 = v13 - 1;
    unint64_t v15 = (unint64_t)(v10 + 4);
    uint64_t v16 = &v10[4 * v14 + 4];
    uint64_t v3 = (void *)*v16;
    uint64_t v6 = v16[1];
    uint64_t v4 = v16[2];
    uint64_t v5 = v16[3];
    v10[2] = v14;
    if (!v3) {
      break;
    }
    while (*((unsigned __int8 *)v3 + 18) < *(unsigned __int8 *)(v11 + 18))
    {
LABEL_9:
      uint64_t v17 = v10[2];
      if (!v17) {
        goto LABEL_34;
      }
      uint64_t v18 = v17 - 1;
      __int128 v19 = (uint64_t *)(v15 + 32 * v18);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      uint64_t v22 = v19[2];
      uint64_t v23 = v19[3];
      v10[2] = v18;
      uint64_t result = specialized static Rope.join(_:_:)(v20, v21, v22, v23, (uint64_t)v3, v6, v4);
      uint64_t v3 = (void *)result;
      uint64_t v6 = v24;
      uint64_t v4 = v25;
      uint64_t v5 = v26;
      if (!result) {
        goto LABEL_8;
      }
    }

    __int128 v50 = v3;
    uint64_t v51 = v6;
    uint64_t v52 = v4;
    int v27 = *(unsigned __int8 *)(v11 + 18);
    uint64_t v3 = &v50;
    BOOL v28 = specialized Rope._Node.rebalance(nextNeighbor:)((uint64_t)&v53);
    uint64_t v11 = (uint64_t)v50;
    uint64_t v8 = v51;
    uint64_t v7 = v52;
    if (v28)
    {
      swift_unknownObjectRelease();
LABEL_25:
      uint64_t v53 = v11;
      goto LABEL_26;
    }

    unint64_t v15 = *((unsigned __int8 *)v50 + 18) + 1;
    unint64_t v30 = v15 >> 8;
    if ((v15 & 0x100) != 0) {
      goto LABEL_47;
    }
    uint64_t v47 = v53;
    uint64_t v5 = v54;
    uint64_t v6 = v55;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
    uint64_t v4 = swift_allocObject();
    *(_WORD *)(v4 + 16) = 0;
    *(_BYTE *)(v4 + 18) = v15;
    unint64_t v15 = v8 + v5;
    if (__OFADD__(v8, v5)) {
      goto LABEL_48;
    }
    uint64_t v3 = (void *)(v7 + v6);
    if (__OFADD__(v7, v6)) {
      goto LABEL_49;
    }
    specialized closure #1 in static Rope._Node.createInner(children:_:)( (_WORD *)(v4 + 16),  v4 + 24,  v11,  v8,  v7,  v47,  v5,  v6);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v53 = v4;
    v8 += v5;
    v7 += v6;
    uint64_t v11 = v4;
LABEL_26:
    uint64_t v54 = v8;
    uint64_t v55 = v7;
    if (!v10[2]) {
      goto LABEL_38;
    }
  }

uint64_t specialized static Rope.join(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a1;
  if (!a5) {
    return v7;
  }
  if (!*(_WORD *)(a5 + 16))
  {
    swift_unknownObjectRelease();
    return v7;
  }

  if (!a1) {
    return a5;
  }
  if (!*(_WORD *)(a1 + 16))
  {
    swift_unknownObjectRelease();
    return a5;
  }

  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  if (*(unsigned __int8 *)(a1 + 18) < *(unsigned __int8 *)(a5 + 18))
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t result = specialized Rope._Node._graftFront(_:)(v31, &v35);
    if (!result)
    {
      uint64_t v18 = v32;
      uint64_t v30 = 0LL;
      swift_unknownObjectRetain();
      MEMORY[0x186E20E78](&v30, 8LL);
      swift_unknownObjectRelease();
      goto LABEL_20;
    }

    uint64_t v12 = result;
    unsigned int v13 = *(unsigned __int8 *)(result + 18) + 1;
    if (((v13 >> 8) & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v14 = v10;
      uint64_t v15 = v11;
      uint64_t v16 = v33;
      uint64_t v29 = v32;
      uint64_t v17 = v34;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
      uint64_t v18 = swift_allocObject();
      *(_WORD *)(v18 + 16) = 0;
      uint64_t result = v18 + 16;
      *(_BYTE *)(v18 + 18) = v13;
      if (!__OFADD__(v14, v16))
      {
        if (!__OFADD__(v15, v17))
        {
          specialized closure #1 in static Rope._Node.createInner(children:_:)( (_WORD *)result,  v18 + 24,  v12,  v14,  v15,  v29,  v16,  v17);
          uint64_t v30 = 0LL;
          swift_unknownObjectRetain();
          MEMORY[0x186E20E78](&v30, 8LL);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
LABEL_20:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
LABEL_22:
          swift_unknownObjectRelease();
          return v18;
        }

        goto LABEL_26;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t result = specialized Rope._Node._graftBack(_:)(v31, &v32);
  if (!result)
  {
    uint64_t v18 = v35;
    uint64_t v30 = 0LL;
    swift_unknownObjectRetain();
    MEMORY[0x186E20E78](&v30, 8LL);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_22;
  }

  uint64_t v21 = v35;
  unsigned int v22 = *(unsigned __int8 *)(v35 + 18) + 1;
  if (((v22 >> 8) & 1) != 0) {
    goto LABEL_27;
  }
  uint64_t v23 = result;
  uint64_t v24 = v19;
  uint64_t v25 = v20;
  uint64_t v27 = v36;
  uint64_t v26 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
  uint64_t v28 = swift_allocObject();
  *(_WORD *)(v28 + 16) = 0;
  uint64_t result = v28 + 16;
  *(_BYTE *)(v28 + 18) = v22;
  if (__OFADD__(v27, v24))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  if (!__OFADD__(v26, v25))
  {
    specialized closure #1 in static Rope._Node.createInner(children:_:)( (_WORD *)result,  v28 + 24,  v21,  v27,  v26,  v23,  v24,  v25);
    uint64_t v30 = 0LL;
    swift_unknownObjectRetain();
    MEMORY[0x186E20E78](&v30, 8LL);
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v28;
  }

uint64_t specialized Rope.Builder._insertBeforeTip(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v50 = a1;
  *(void *)&__int128 v51 = a2;
  *((void *)&v51 + 1) = a3;
  if (*(_BYTE *)(a1 + 18))
  {
    uint64_t v9 = v3[4];
    uint64_t v8 = v3[5];
    uint64_t v10 = v3[6];
    v3[5] = 0LL;
    v3[6] = 0LL;
    v3[4] = 0LL;
    if (v8)
    {
      uint64_t v11 = v3[1];
      __int128 v12 = *((_OWORD *)v3 + 1);
      v3[2] = 0LL;
      v3[3] = 0LL;
      v3[1] = 0LL;
      if (!v11)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
        uint64_t v11 = swift_allocObject();
        *(_WORD *)(v11 + 16) = 0;
        *(_BYTE *)(v11 + 18) = 0;
        __int128 v12 = 0uLL;
      }

      uint64_t v44 = v11;
      __int128 v47 = v12;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope._Node._appendItem(_:)(v9, v8, v10);
      if (*(_WORD *)(v44 + 16) == 15)
      {
        specialized Rope.Builder._appendNow(_:)(v44, v47, *((uint64_t *)&v47 + 1));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3[1] = v44;
        *((_OWORD *)v3 + 1) = v47;
      }
    }

    else
    {
      swift_unknownObjectRetain();
    }

    uint64_t v24 = v3[1];
    uint64_t v25 = v3[2];
    uint64_t v26 = v3[3];
    v3[2] = 0LL;
    v3[3] = 0LL;
    v3[1] = 0LL;
    if (v24) {
      specialized Rope.Builder._appendNow(_:)(v24, v25, v26);
    }
    specialized Rope.Builder._appendNow(_:)(a1, a2, a3);
    return swift_unknownObjectRelease();
  }

  if (*(_WORD *)(a1 + 16) != 1)
  {
    uint64_t v29 = v3[4];
    uint64_t v28 = v3[5];
    uint64_t v30 = v3[6];
    v3[5] = 0LL;
    v3[6] = 0LL;
    v3[4] = 0LL;
    if (v28)
    {
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (specialized Rope._Node.insert(_:at:)(v29, v28, v30, 0LL))
      {
        uint64_t v33 = v31;
        uint64_t v34 = v32;
        uint64_t v35 = swift_unknownObjectRetain();
        specialized Rope.Builder._insertBeforeTip(_:)(v35, v51, *((void *)&v51 + 1));
        uint64_t v36 = swift_unknownObjectRetain();
        specialized Rope.Builder._insertBeforeTip(_:)(v36, v33, v34);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_33:
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_unknownObjectRetain();
    }

    uint64_t v37 = v3[1];
    __int128 v38 = *((_OWORD *)v3 + 1);
    v3[2] = 0LL;
    v3[3] = 0LL;
    v3[1] = 0LL;
    if (v37)
    {
      uint64_t v46 = v37;
      __int128 v49 = v38;
      uint64_t v39 = v37;
      if (specialized Rope._Node.rebalance(nextNeighbor:)((uint64_t)&v50) && *(_WORD *)(v46 + 16) != 15)
      {
        swift_unknownObjectRelease();
        uint64_t result = swift_unknownObjectRelease();
        v4[1] = v39;
        __int128 v43 = v49;
        goto LABEL_39;
      }

      specialized Rope.Builder._appendNow(_:)(v46, v49, *((uint64_t *)&v49 + 1));
    }

    uint64_t v40 = v50;
    if (*(_WORD *)(v50 + 16) == 15)
    {
      __int128 v41 = v51;
      uint64_t v42 = swift_unknownObjectRetain();
      specialized Rope.Builder._appendNow(_:)(v42, v41, *((uint64_t *)&v41 + 1));
      goto LABEL_33;
    }

    uint64_t result = swift_unknownObjectRelease();
    v4[1] = v40;
    __int128 v43 = v51;
LABEL_39:
    *((_OWORD *)v4 + 1) = v43;
    return result;
  }

  swift_unknownObjectRetain();
  unint64_t v13 = specialized Rope._Node.subscript.getter(0LL, a1);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  if (v13)
  {
    unint64_t v18 = v13;
    uint64_t v19 = v3[5];
    if (v19)
    {
      uint64_t v20 = v3[4];
      uint64_t v21 = v3[6];
      uint64_t v22 = v3[1];
      __int128 v23 = *((_OWORD *)v3 + 1);
      v3[2] = 0LL;
      v3[3] = 0LL;
      v3[1] = 0LL;
      if (!v22)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
        uint64_t v22 = swift_allocObject();
        *(_WORD *)(v22 + 16) = 0;
        *(_BYTE *)(v22 + 18) = 0;
        __int128 v23 = 0uLL;
      }

      uint64_t v45 = v22;
      __int128 v48 = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope._Node._appendItem(_:)(v20, v19, v21);
      if (*(_WORD *)(v45 + 16) == 15)
      {
        specialized Rope.Builder._appendNow(_:)(v45, v48, *((uint64_t *)&v48 + 1));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3[1] = v45;
        *((_OWORD *)v3 + 1) = v48;
      }

      swift_unknownObjectRelease_n();
      uint64_t result = swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t result = swift_unknownObjectRelease_n();
    }

    v3[4] = v18;
    v3[5] = v15;
    v3[6] = v17;
  }

  else
  {
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

BOOL specialized Rope._Node.rebalance(nextNeighbor:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(unsigned __int16 *)(*v1 + 16);
  uint64_t v5 = *(void *)a1;
  if (*(_WORD *)(*v1 + 16))
  {
    uint64_t v6 = *(unsigned __int16 *)(v5 + 16);
    if (v4 >= 8 && v6 >= 8)
    {
      return 0LL;
    }

    else
    {
      specialized static Rope._Node.redistributeChildren(_:_:to:)( v1,  (uint64_t *)a1,  (unint64_t)(v6 + v4) >> ((unint64_t)(v6 + v4) > 0xF));
      return *(_WORD *)(*(void *)a1 + 16LL) == 0;
    }
  }

  else
  {
    __int128 v9 = *(_OWORD *)(a1 + 8);
    uint64_t *v1 = v5;
    __int128 v10 = *(_OWORD *)(v1 + 1);
    *(_OWORD *)(v1 + 1) = v9;
    *(void *)a1 = v3;
    *(_OWORD *)(a1 + 8) = v10;
    return 1LL;
  }

uint64_t specialized Rope._Node._appendNode(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if ((_DWORD)result)
  {
    uint64_t v8 = v3[1];
  }

  else
  {
    uint64_t v9 = specialized Rope._Node.copy()(*v3);
    uint64_t v8 = v10;
    uint64_t v12 = v11;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t *v3 = v9;
    v3[1] = v8;
    v3[2] = v12;
  }

  if (__OFADD__(v8, a2))
  {
    __break(1u);
    goto LABEL_9;
  }

  v3[1] = v8 + a2;
  uint64_t v13 = v3[2];
  BOOL v14 = __OFADD__(v13, a3);
  uint64_t v15 = v13 + a3;
  if (v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  v3[2] = v15;
  uint64_t v16 = *v3;
  int v17 = *(unsigned __int16 *)(*v3 + 16);
  unint64_t v18 = (void *)(*v3 + 24LL * *(unsigned __int16 *)(*v3 + 16));
  __int128 v18[3] = a1;
  v18[4] = a2;
  v18[5] = a3;
  if (v17 != 0xFFFF)
  {
    *(_WORD *)(v16 + 16) = v17 + 1;
    return result;
  }

uint64_t specialized Rope._Node.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  uint64_t v10 = *v4;
  if ((result & 1) == 0)
  {
    uint64_t v10 = specialized Rope._Node.copy()(*v4);
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t *v4 = v10;
    v4[1] = v12;
    v4[2] = v14;
  }

  unint64_t v15 = (a4 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF;
  unint64_t v16 = *(unsigned __int16 *)(v10 + 16);
  if (*(_BYTE *)(v10 + 18))
  {
    if (v15 < v16)
    {
      MEMORY[0x1895F8858](result);
      uint64_t v18 = specialized Rope._Node._innerInsert(at:with:)( v17,  (void *(*)(void *__return_ptr, void *))partial apply for specialized closure #1 in Rope._Node.insert(_:at:));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18;
    }

    __break(1u);
  }

  else if (v15 <= v16)
  {
    return specialized Rope._Node._leafInsert(_:at:)(a1, a2, a3, v15);
  }

  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._leafInsert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_WORD *)(*(void *)v4 + 16LL) != 15)
  {
    specialized Rope._Node._insertItem(_:at:)(a1, a2, a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (a4 < 8)
  {
    uint64_t v9 = specialized Rope._Node.split(keeping:)(7LL);
    specialized Rope._Node._insertItem(_:at:)(a1, a2, a3, a4);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return v9;
  }

  uint64_t v9 = specialized Rope._Node.split(keeping:)(8LL);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = *(unsigned __int16 *)(*(void *)v4 + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if ((result & 1) == 0)
  {
    uint64_t v16 = specialized Rope._Node.copy()(v9);
    uint64_t v11 = v17;
    uint64_t v13 = v18;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v9 = v16;
  }

  if (__OFADD__(v11, 1LL))
  {
    __break(1u);
  }

  else if (!__OFADD__(v13, a1))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    specialized Rope._UnsafeHandle._insertChild(_:at:)(a1, a2, a3, a4 - v14, (_WORD *)(v9 + 16), v9 + 24);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    return v9;
  }

  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._innerInsert(at:with:)( uint64_t result, void *(*a2)(void *__return_ptr, void *))
{
  uint64_t v3 = v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = *v2 + 24 * result;
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v6 = (void *)(v5 + 32);
  uint64_t v8 = v4 - v7;
  if (__OFSUB__(v4, v7))
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v9 = v2[2];
  uint64_t v10 = v6 + 1;
  uint64_t v11 = v6[1];
  uint64_t v12 = v9 - v11;
  if (__OFSUB__(v9, v11))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v14 = result;
  swift_unknownObjectRetain();
  uint64_t result = (uint64_t)a2(v21, v6 - 1);
  BOOL v15 = __OFADD__(v8, *v6);
  uint64_t v16 = v8 + *v6;
  if (v15)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v17 = v12 + *v10;
  if (__OFADD__(v12, *v10))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v19 = v21[0];
  uint64_t v18 = v21[1];
  uint64_t v20 = v21[2];
  swift_unknownObjectRelease();
  v3[1] = v16;
  v3[2] = v17;
  if (v19) {
    return specialized Rope._Node._applySpawn(_:of:)(v19, v18, v20, v14);
  }
  else {
    return 0LL;
  }
}

uint64_t specialized Rope._Node.split(keeping:)(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v2;
  char v5 = *(_BYTE *)(*v2 + 18);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
    uint64_t v6 = swift_allocObject();
    *(_WORD *)(v6 + 16) = 0;
    *(_BYTE *)(v6 + 18) = v5;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
    uint64_t v6 = swift_allocObject();
    *(_WORD *)(v6 + 16) = 0;
    *(_BYTE *)(v6 + 18) = 0;
  }

  uint64_t v14 = v6;
  if (a1 < 1)
  {
    v2[1] = 0LL;
    v2[2] = 0LL;
    uint64_t *v2 = v6;
  }

  else
  {
    char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
    uint64_t v8 = *v2;
    if ((isUniquelyReferenced_nonNull & 1) == 0)
    {
      uint64_t v8 = specialized Rope._Node.copy()(*v2);
      uint64_t v10 = v9;
      uint64_t v12 = v11;
      swift_unknownObjectRelease();
      uint64_t *v2 = v8;
      v2[1] = v10;
      v2[2] = v12;
    }

    specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(v2, *(unsigned __int16 *)(v8 + 16) - a1);
    return v14;
  }

  return v4;
}

uint64_t specialized Rope._Node._applySpawn(_:of:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v36[0] = result;
  v36[1] = a2;
  v36[2] = a3;
  uint64_t v5 = a4 + 1;
  if (__OFADD__(a4, 1LL))
  {
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v9 = result;
  if (a4 >= 1)
  {
    uint64_t v10 = *v4;
    uint64_t v11 = *v4 + 24LL;
    uint64_t v12 = v11 + 24 * a4;
    uint64_t v14 = *(void *)(v12 - 24);
    uint64_t v13 = (uint64_t *)(v12 - 24);
    unint64_t v15 = *(unsigned __int16 *)(*(void *)(v11 + 24 * a4) + 16LL) + (unint64_t)*(unsigned __int16 *)(v14 + 16);
    if (v15 >= 0x10)
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
LABEL_8:
      swift_unknownObjectRelease();
      uint64_t v8 = a2;
      goto LABEL_9;
    }

    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    specialized static Rope._Node.redistributeChildren(_:_:to:)(v13, (uint64_t *)(v11 + 24 * a4), v15);
    specialized Rope._UnsafeHandle._removeChild(at:)(a4, (_WORD *)(v10 + 16), v11);
    uint64_t result = swift_unknownObjectRelease();
    BOOL v16 = __OFSUB__(v5--, 1LL);
    if (!v16)
    {
      uint64_t v7 = a3;
      goto LABEL_8;
    }

uint64_t specialized Rope._UnsafeHandle._insertChild(_:at:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6)
{
  uint64_t v6 = (unsigned __int16)*a5;
  BOOL v7 = __OFSUB__(v6, a4);
  uint64_t v8 = v6 - a4;
  if (v7)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if ((v8 & 0x8000000000000000LL) == 0)
  {
    uint64_t v13 = (void *)(a6 + 24 * a4);
    uint64_t result = (uint64_t)memmove(v13 + 3, v13, 24 * v8);
    *uint64_t v13 = a1;
    v13[1] = a2;
    v13[2] = a3;
    int v15 = (unsigned __int16)*a5;
    if (v15 != 0xFFFF)
    {
      *a5 = v15 + 1;
      return result;
    }

    goto LABEL_6;
  }

uint64_t specialized Rope._Node._graftBack(_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v6 = specialized Rope._Node.copy()(*v2);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    swift_unknownObjectRelease();
    uint64_t *v3 = v6;
    v3[1] = v8;
    v3[2] = v10;
  }

  char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  uint64_t v12 = *a2;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    uint64_t v12 = specialized Rope._Node.copy()(*a2);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    swift_unknownObjectRelease();
    *a2 = v12;
    a2[1] = v14;
    a2[2] = v16;
  }

  if (*(unsigned __int8 *)(v12 + 18) >= *(unsigned __int8 *)(*v3 + 18))
  {
    uint64_t v34 = v3[1];
    uint64_t v33 = v3[2];
    else {
      uint64_t result = swift_unknownObjectRetain();
    }
    uint64_t v35 = v3[1];
    BOOL v25 = __OFSUB__(v35, v34);
    uint64_t v36 = v35 - v34;
    if (!v25)
    {
      uint64_t v37 = v3[2];
      BOOL v25 = __OFSUB__(v37, v33);
      uint64_t v38 = v37 - v33;
      if (!v25)
      {
        *a1 = v36;
        a1[1] = v38;
        return result;
      }

      goto LABEL_29;
    }

uint64_t specialized Rope._Node._graftFront(_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v6 = specialized Rope._Node.copy()(*v2);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    swift_unknownObjectRelease();
    uint64_t *v3 = v6;
    v3[1] = v8;
    v3[2] = v10;
  }

  char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  uint64_t v12 = *a2;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    uint64_t v12 = specialized Rope._Node.copy()(*a2);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    swift_unknownObjectRelease();
    *a2 = v12;
    a2[1] = v14;
    a2[2] = v16;
  }

  if (*(unsigned __int8 *)(v12 + 18) >= *(unsigned __int8 *)(*v3 + 18))
  {
    uint64_t v40 = a2[1];
    uint64_t v39 = a2[2];
    uint64_t result = specialized Rope._Node.rebalance(nextNeighbor:)((uint64_t)v3);
    if ((result & 1) != 0)
    {
      uint64_t v30 = 0LL;
      uint64_t v41 = *v3;
      __int128 v42 = *(_OWORD *)(a2 + 1);
      uint64_t *v3 = *a2;
      __int128 v43 = *(_OWORD *)(v3 + 1);
      *(_OWORD *)(v3 + 1) = v42;
      *a2 = v41;
      *(_OWORD *)(a2 + 1) = v43;
      *a1 = v40;
      a1[1] = v39;
      return v30;
    }

    uint64_t v44 = a2[1];
    if (!__OFSUB__(v40, v44))
    {
      uint64_t v45 = a2[2];
      if (!__OFSUB__(v39, v45))
      {
        uint64_t v30 = *a2;
        *a1 = v40 - v44;
        a1[1] = v39 - v45;
        swift_unknownObjectRetain();
        return v30;
      }

      goto LABEL_30;
    }

uint64_t specialized Rope.builder<A>(removing:in:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = v4[2];
  ++v4[3];
  uint64_t v7 = *v4;
  if (*v4) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0LL;
  }
  if (result < 0 || v8 < a2) {
    goto LABEL_79;
  }
  uint64_t v10 = result;
  if (result == a2) {
    return specialized Rope.builder<A>(splittingAt:in:)(result, a4);
  }
  uint64_t v11 = v4[1];
  uint64_t v50 = v6;
  uint64_t v51 = MEMORY[0x18961AFE8];
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  uint64_t v56 = 0LL;
  uint64_t v57 = MEMORY[0x18961AFE8];
  uint64_t v48 = v7;
  __int128 v49 = (void *)v11;
  v4[1] = 0LL;
  v4[2] = 0LL;
  uint64_t *v4 = 0LL;
  uint64_t v47 = result;
  if (*(_BYTE *)(v7 + 18))
  {
    uint64_t v12 = result;
    uint64_t v13 = a2;
    while (1)
    {
      uint64_t v14 = *(unsigned __int16 *)(v7 + 16);
      uint64_t v15 = v12;
      if (!*(_WORD *)(v7 + 16)) {
        goto LABEL_31;
      }
      uint64_t v16 = *(void *)(v7 + 40);
      BOOL v17 = __OFSUB__(v12, v16);
      uint64_t v15 = v12 - v16;
      if (v17) {
        goto LABEL_74;
      }
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_75;
      }
      if (v15 + 1 > 0) {
        break;
      }
      uint64_t v20 = v13 - v12;
      if (__OFSUB__(v13, v12)) {
        goto LABEL_78;
      }
      uint64_t result = 0LL;
LABEL_34:
      uint64_t v13 = v12 + v20;
      if (__OFADD__(v12, v20))
      {
        __break(1u);
        goto LABEL_70;
      }

      if (result >= v14)
      {
        a3 = result;
      }

      else
      {
        uint64_t v22 = *(void *)(v7 + 24 + 24 * result + 16);
        a3 = result;
        if (v22 < v13)
        {
          BOOL v17 = __OFSUB__(v13, v22);
          v13 -= v22;
          if (v17) {
            goto LABEL_77;
          }
          a3 = result + 1;
          if (result + 1 < v14)
          {
            uint64_t v23 = *(void *)(v7 + 24 + 24 * a3 + 16);
            if (v23 < v13)
            {
              BOOL v17 = __OFSUB__(v13, v23);
              v13 -= v23;
              if (v17) {
                goto LABEL_82;
              }
              a3 = result + 2;
              if (result + 2 < v14)
              {
                uint64_t v24 = (uint64_t *)(v7 + 24 * result + 88);
                while (1)
                {
                  uint64_t v26 = *v24;
                  v24 += 3;
                  uint64_t v25 = v26;
                  if (v26 >= v13) {
                    break;
                  }
                  BOOL v17 = __OFSUB__(v13, v25);
                  v13 -= v25;
                  if (v17) {
                    goto LABEL_76;
                  }
                  if (v14 == ++a3)
                  {
                    a3 = *(unsigned __int16 *)(v7 + 16);
                    break;
                  }
                }
              }
            }
          }
        }
      }

      if (result < a3) {
        goto LABEL_54;
      }
      uint64_t result = specialized Rope._Node._innerSplit(at:into:)(result, (uint64_t)&v51);
      uint64_t v7 = v48;
      if (!*(_BYTE *)(v48 + 18))
      {
        uint64_t v47 = v12;
        goto LABEL_55;
      }
    }

    if ((_DWORD)v14 != 1)
    {
      uint64_t v18 = *(void *)(v7 + 64);
      BOOL v17 = __OFSUB__(v15, v18);
      uint64_t v19 = v15 - v18;
      if (v17) {
        goto LABEL_80;
      }
      if (__OFADD__(v19, 1LL)) {
        goto LABEL_81;
      }
      if (v19 + 1 < 1)
      {
        uint64_t result = 1LL;
        uint64_t v20 = v13 - v12;
        if (__OFSUB__(v13, v12)) {
          goto LABEL_53;
        }
LABEL_33:
        uint64_t v12 = v15;
        goto LABEL_34;
      }

      if ((_DWORD)v14 != 2)
      {
        uint64_t v21 = (void *)(v7 + 88);
        uint64_t result = 2LL;
        while (v14 != result)
        {
          uint64_t v15 = v19 - *v21;
          if (__OFSUB__(v19, *v21)) {
            goto LABEL_71;
          }
          if (__OFADD__(v15, 1LL)) {
            goto LABEL_72;
          }
          if (v15 + 1 < 1)
          {
            uint64_t v15 = v19;
            uint64_t v20 = v13 - v12;
            if (__OFSUB__(v13, v12)) {
              goto LABEL_53;
            }
            goto LABEL_33;
          }

          ++result;
          v21 += 3;
          uint64_t v19 = v15;
          if (v14 == result) {
            goto LABEL_31;
          }
        }

uint64_t specialized Rope.Builder.insertBeforeTip<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(v3 + 40);
    if (v7)
    {
      uint64_t v8 = *(void *)(v3 + 32);
      uint64_t v9 = *(void *)(v3 + 48);
      uint64_t v10 = *(void *)(v3 + 8);
      __int128 v11 = *(_OWORD *)(v3 + 16);
      *(void *)(v3 + 16) = 0LL;
      *(void *)(v3 + 24) = 0LL;
      *(void *)(v3 + 8) = 0LL;
      if (!v10)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
        uint64_t v10 = swift_allocObject();
        *(_WORD *)(v10 + 16) = 0;
        *(_BYTE *)(v10 + 18) = 0;
        __int128 v11 = 0uLL;
      }

      uint64_t v13 = v10;
      __int128 v14 = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope._Node._appendItem(_:)(v8, v7, v9);
      if (*(_WORD *)(v13 + 16) == 15)
      {
        uint64_t v12 = swift_unknownObjectRetain();
        specialized Rope.Builder._appendNow(_:)(v12, v14, *((uint64_t *)&v14 + 1));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)(v3 + 8) = v13;
        *(_OWORD *)(v3 + 16) = v14;
      }
    }

    *(void *)(v3 + 32) = v6;
    *(void *)(v3 + 40) = a2;
    *(void *)(v3 + 48) = a3;
  }

  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  char v49;
  unint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  void *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  unint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v4 = *(void *)(result + 64);
  if (v4) {
    uint64_t v5 = *(void *)(result + 80);
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 < 0) {
    goto LABEL_294;
  }
  uint64_t v6 = (void *)a2;
  if (v5 < a2) {
    goto LABEL_294;
  }
  uint64_t v7 = a3;
  uint64_t v8 = (void *)result;
  uint64_t v9 = *(void *)(result + 72);
  v119 = *(void *)(result + 88);
  v107 = (void *)result;
  if (v4)
  {
    if (*(void *)(result + 80) > a2 && *(_WORD *)(v4 + 16) != 0)
    {
      v118 = *(void *)(result + 72);
      uint64_t v12 = *(unsigned __int8 *)(v4 + 18);
      if (*(_BYTE *)(v4 + 18))
      {
        swift_unknownObjectRetain_n();
        uint64_t result = swift_retain_n();
        __int128 v14 = (uint64_t)v6;
        uint64_t v91 = v4;
        while (1)
        {
          uint64_t v93 = *(unsigned __int16 *)(v91 + 16);
          if (!*(_WORD *)(v91 + 16)) {
            goto LABEL_198;
          }
          uint64_t v94 = *(void *)(v91 + 40);
          unint64_t v95 = v14 - v94;
          if (__OFSUB__(v14, v94)) {
            goto LABEL_284;
          }
          if (__OFADD__(v95, 1LL)) {
            goto LABEL_285;
          }
          if (v95 + 1 <= 0)
          {
            uint64_t v93 = 0LL;
          }

          else
          {
            if ((_DWORD)v93 == 1)
            {
              v14 -= v94;
              goto LABEL_198;
            }

            uint64_t v96 = *(void *)(v91 + 64);
            uint64_t v15 = __OFSUB__(v95, v96);
            uint64_t v97 = v95 - v96;
            if (v15) {
              goto LABEL_292;
            }
            if (__OFADD__(v97, 1LL)) {
              goto LABEL_293;
            }
            if (v97 + 1 < 1)
            {
              uint64_t v93 = 1LL;
              __int128 v14 = v95;
            }

            else
            {
              if ((_DWORD)v93 == 2)
              {
                __int128 v14 = v97;
LABEL_198:
                if (v14) {
                  goto LABEL_283;
                }
                goto LABEL_199;
              }

              uint64_t v98 = (void *)(v91 + 88);
              uint64_t v99 = 2LL;
              while (1)
              {
                if (v93 == v99) {
                  goto LABEL_276;
                }
                __int128 v14 = v97 - *v98;
                if (__OFSUB__(v97, *v98)) {
                  goto LABEL_277;
                }
                if (__OFADD__(v14, 1LL)) {
                  goto LABEL_278;
                }
                if (v14 + 1 < 1) {
                  break;
                }
                ++v99;
                v98 += 3;
                uint64_t v97 = v14;
                if (v93 == v99) {
                  goto LABEL_198;
                }
              }

              uint64_t v93 = v99;
              __int128 v14 = v97;
            }
          }

LABEL_249:
            __break(1u);
LABEL_250:
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
            goto LABEL_254;
          }

          uint64_t v4 = v16;
          goto LABEL_125;
        }

        uint64_t v24 = 1LL;
        uint64_t v4 = v62;
      }

uint64_t specialized Rope._Node._innerSplit(at:into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  uint64_t v7 = *v2;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    uint64_t v7 = specialized Rope._Node.copy()(v7);
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    swift_unknownObjectRelease();
    uint64_t *v3 = v7;
    v3[1] = v9;
    v3[2] = v11;
  }

  uint64_t v12 = *(unsigned __int16 *)(v7 + 16);
  if (v12 - 2 == a1)
  {
    uint64_t v13 = specialized Rope._Node._removeNode(at:)(v12 - 1);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v52 = 0LL;
    swift_unknownObjectRetain();
    MEMORY[0x186E20E78](&v52, 8LL);
    uint64_t v18 = v52;
    uint64_t v19 = *(void **)(a2 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v19[2] + 1LL,  1,  v19);
    }
    unint64_t v21 = v19[2];
    unint64_t v20 = v19[3];
    if (v21 >= v20 >> 1) {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v20 > 1),  v21 + 1,  1,  v19);
    }
    v19[2] = v21 + 1;
    uint64_t v22 = &v19[4 * v21];
    v22[4] = v13;
    v22[5] = v15;
    v22[6] = v17;
    v22[7] = v18;
    swift_unknownObjectRelease();
    *(void *)(a2 + 80) = v19;
  }

  if (a1 == 1)
  {
    uint64_t v23 = specialized Rope._Node._removeNode(at:)(0LL);
    specialized Rope.Builder._insertBeforeTip(_:)(v23, v24, v25);
    a1 = 0LL;
  }

  uint64_t v26 = specialized Rope._Node._removeNode(at:)(a1);
  uint64_t v27 = *v3;
  uint64_t v28 = v3[1];
  uint64_t v29 = v3[2];
  uint64_t *v3 = v26;
  v3[1] = v30;
  v3[2] = v31;
  uint64_t v52 = v27;
  uint64_t v53 = v28;
  uint64_t v54 = v29;
  if (!*(_WORD *)(v27 + 16)) {
    return swift_unknownObjectRelease();
  }
  if (a1)
  {
    if (a1 == *(unsigned __int16 *)(v27 + 16))
    {
      return specialized Rope.Builder._insertBeforeTip(_:)(v27, v28, v29);
    }

    else
    {
      uint64_t v38 = specialized Rope._Node.split(keeping:)(a1);
      uint64_t v40 = v39;
      uint64_t v42 = v41;
      uint64_t v43 = v53;
      uint64_t v44 = v54;
      uint64_t v45 = swift_unknownObjectRetain();
      specialized Rope.Builder._insertBeforeTip(_:)(v45, v43, v44);
      uint64_t v51 = 0LL;
      swift_unknownObjectRetain();
      MEMORY[0x186E20E78](&v51, 8LL);
      uint64_t v46 = v51;
      uint64_t v47 = *(void **)(a2 + 80);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v47[2] + 1LL,  1,  v47);
      }
      unint64_t v49 = v47[2];
      unint64_t v48 = v47[3];
      if (v49 >= v48 >> 1) {
        uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v48 > 1),  v49 + 1,  1,  v47);
      }
      void v47[2] = v49 + 1;
      uint64_t v50 = &v47[4 * v49];
      v50[4] = v38;
      v50[5] = v40;
      v50[6] = v42;
      v50[7] = v46;
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(a2 + 80) = v47;
    }
  }

  else
  {
    uint64_t v51 = 0LL;
    swift_unknownObjectRetain();
    MEMORY[0x186E20E78](&v51, 8LL);
    uint64_t v33 = v51;
    uint64_t v34 = *(void **)(a2 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v34[2] + 1LL,  1,  v34);
    }
    unint64_t v36 = v34[2];
    unint64_t v35 = v34[3];
    if (v36 >= v35 >> 1) {
      uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v35 > 1),  v36 + 1,  1,  v34);
    }
    v34[2] = v36 + 1;
    uint64_t v37 = &v34[4 * v36];
    v37[4] = v27;
    v37[5] = v28;
    v37[6] = v29;
    v37[7] = v33;
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(a2 + 80) = v34;
  }

  return result;
}

uint64_t specialized Rope._Node._leafSplit(at:into:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = a5;
  uint64_t v52 = a3;
  uint64_t v54 = a5;
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull() & 1) != 0)
  {
    uint64_t v11 = a3;
  }

  else
  {
    uint64_t v11 = specialized Rope._Node.copy()(a3);
    a4 = v12;
    uint64_t v6 = v13;
    swift_unknownObjectRelease();
    uint64_t v52 = v11;
    uint64_t v54 = v6;
  }

  if (*(unsigned __int16 *)(v11 + 16) - 2LL == a1)
  {
    uint64_t v14 = *(unsigned __int16 *)(a3 + 16) - 1LL;
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v15 = specialized Rope._Node.copy()(v11);
      a4 = v16;
      uint64_t v6 = v17;
      swift_unknownObjectRelease();
      uint64_t v52 = v15;
      uint64_t v53 = a4;
      uint64_t v11 = v15;
    }

    swift_unknownObjectRetain();
    uint64_t v18 = specialized Rope._UnsafeHandle._removeChild(at:)(v14, (_WORD *)(v11 + 16), v11 + 24);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    swift_unknownObjectRelease();
    BOOL v23 = __OFSUB__(a4, 1LL);
    a4 = (void *)((char *)a4 - 1);
    if (v23) {
      goto LABEL_37;
    }
    BOOL v23 = __OFSUB__(v6, v18);
    v6 -= v18;
    if (v23)
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    specialized Rope.Builder._insertAfterTip(_:)(v18, v20, v22);
  }

  if (a1 == 1)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v24 = specialized Rope._Node.copy()(v11);
      a4 = v25;
      uint64_t v6 = v26;
      swift_unknownObjectRelease();
      uint64_t v52 = v24;
      uint64_t v53 = a4;
      uint64_t v11 = v24;
      uint64_t v54 = v6;
    }

    swift_unknownObjectRetain();
    uint64_t v18 = specialized Rope._UnsafeHandle._removeChild(at:)(0LL, (_WORD *)(v11 + 16), v11 + 24);
    uint64_t v28 = v27;
    uint64_t v22 = v29;
    swift_unknownObjectRelease();
    BOOL v23 = __OFSUB__(a4, 1LL);
    a4 = (void *)((char *)a4 - 1);
    if (v23) {
      goto LABEL_39;
    }
    BOOL v23 = __OFSUB__(v6, v18);
    v6 -= v18;
    if (v23)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }

    specialized Rope.Builder.insertBeforeTip(_:)(v18, v28, v22);
    a1 = 0LL;
  }

  uint64_t v22 = a2;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v30 = specialized Rope._Node.copy()(v11);
    a4 = v31;
    uint64_t v6 = v32;
    swift_unknownObjectRelease();
    uint64_t v52 = v30;
    uint64_t v11 = v30;
  }

  uint64_t v33 = (_WORD *)(v11 + 16);
  swift_unknownObjectRetain();
  uint64_t v5 = specialized Rope._UnsafeHandle._removeChild(at:)(a1, (_WORD *)(v11 + 16), v11 + 24);
  swift_unknownObjectRelease();
  uint64_t v18 = (uint64_t)a4 - 1;
  if (__OFSUB__(a4, 1LL))
  {
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v53 = (void *)((char *)a4 - 1);
  BOOL v23 = __OFSUB__(v6, v5);
  v6 -= v5;
  if (v23)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  uint64_t v54 = v6;
  if (!*v33)
  {
LABEL_24:
    swift_unknownObjectRelease();
    goto LABEL_34;
  }

  if (!a1)
  {
    uint64_t v51 = 0LL;
    swift_unknownObjectRetain_n();
    MEMORY[0x186E20E78](&v51, 8LL);
    uint64_t v49 = v51;
    a4 = *(void **)(a2 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_26:
      unint64_t v36 = a4[2];
      unint64_t v35 = a4[3];
      if (v36 >= v35 >> 1) {
        a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v35 > 1),  v36 + 1,  1,  a4);
      }
      a4[2] = v36 + 1;
      uint64_t v37 = &a4[4 * v36];
      v37[4] = v11;
      v37[5] = v18;
      v37[6] = v6;
      v37[7] = v49;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      *(void *)(v22 + 80) = a4;
      goto LABEL_34;
    }

uint64_t specialized Rope.Builder._insertAfterTip(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  uint64_t v6 = v3;
  uint64_t v7 = result;
  uint64_t v8 = v3[8];
  if (v8)
  {
    uint64_t v9 = v3[7];
    uint64_t v11 = v3[9];
    uint64_t v10 = (void *)v3[10];
    unint64_t v12 = v10[2];
    if (v12)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      }
      if (v12 <= v10[2])
      {
        specialized Rope.prepend(_:)(v9, v8, v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t result = swift_bridgeObjectRelease_n();
LABEL_13:
        v6[10] = v10;
        goto LABEL_14;
      }

      __break(1u);
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
      uint64_t v13 = swift_allocObject();
      *(_WORD *)(v13 + 16) = 0;
      *(_BYTE *)(v13 + 18) = 0;
      v20[0] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope._Node._appendItem(_:)(v9, v8, v11);
      uint64_t v18 = 0LL;
      uint64_t v19 = v20[0];
      uint64_t v17 = 0LL;
      memset(v20, 0, sizeof(v20));
      MEMORY[0x186E20E78](v20, 8LL);
      uint64_t v9 = v20[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_10:
        unint64_t v15 = v10[2];
        unint64_t v14 = v10[3];
        if (v15 >= v14 >> 1) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v14 > 1),  v15 + 1,  1,  v10);
        }
        v10[2] = v15 + 1;
        uint64_t v16 = &v10[4 * v15];
        v16[4] = v19;
        v16[5] = v18;
        v16[6] = v17;
        v16[7] = v9;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_13;
      }
    }

    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v10[2] + 1LL,  1,  v10);
    goto LABEL_10;
  }

uint64_t specialized Rope.builder<A>(splittingAt:in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = result;
  ++*(void *)(v2 + 24);
  uint64_t v5 = MEMORY[0x18961AFE8];
  uint64_t v31 = MEMORY[0x18961AFE8];
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  uint64_t v36 = 0LL;
  uint64_t v37 = MEMORY[0x18961AFE8];
  uint64_t v6 = *(void *)v2;
  if (!*(void *)v2 || !*(_WORD *)(v6 + 16))
  {
    if (result) {
      goto LABEL_39;
    }
    *(void *)a2 = MEMORY[0x18961AFE8];
    *(_OWORD *)(a2 + 8) = 0uLL;
    *(_OWORD *)(a2 + 24) = 0uLL;
    *(_OWORD *)(a2 + 40) = 0uLL;
    *(_OWORD *)(a2 + 56) = 0uLL;
    *(void *)(a2 + 72) = 0LL;
    *(void *)(a2 + 80) = v5;
    return result;
  }

  __int128 v7 = *(_OWORD *)(v2 + 8);
  uint64_t v30 = result;
  uint64_t v28 = v6;
  __int128 v29 = v7;
  *(void *)(v2 + 8) = 0LL;
  *(void *)(v2 + 16) = 0LL;
  *(void *)uint64_t v2 = 0LL;
  if (!*(_BYTE *)(v6 + 18))
  {
LABEL_26:
    uint64_t v15 = specialized closure #2 in Rope.builder<A>(splittingAt:in:)(v6 + 16, (void *)(v6 + 24), &v30);
    uint64_t v17 = v16;
    swift_unknownObjectRetain();
    uint64_t result = specialized Rope._Node._leafSplit(at:into:)(v15, (uint64_t)&v31, v6, (void *)v29, *((uint64_t *)&v29 + 1));
    if (v17 < 0) {
      goto LABEL_40;
    }
    uint64_t v20 = result - v17;
    if (result < v17) {
      goto LABEL_40;
    }
    uint64_t v21 = v18;
    uint64_t v22 = v19;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Rope.Builder._insertAfterTip(_:)(v20, v21, v22);
    if (v17)
    {
      uint64_t v23 = *((void *)&v33 + 1);
      __int128 v24 = v34;
      *((void *)&v33 + 1) = 0LL;
      __int128 v34 = 0uLL;
      if ((void)v24)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Rope.Builder._appendNow(_:)(v23, v24, *((uint64_t *)&v24 + 1));
        outlined consume of Rope<AttributedString._InternalRun>._Item?(*((uint64_t *)&v33 + 1), v34);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t result = swift_bridgeObjectRelease_n();
      }

      else
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }
    }

    else
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t result = swift_bridgeObjectRelease_n();
      uint64_t v17 = *((void *)&v33 + 1);
      uint64_t v22 = *((void *)&v34 + 1);
      uint64_t v21 = v34;
    }

    uint64_t v25 = v33;
    uint64_t v26 = v36;
    uint64_t v27 = v37;
    *(void *)a2 = v31;
    *(_OWORD *)(a2 + 8) = v32;
    *(void *)(a2 + 24) = v25;
    *(void *)(a2 + 32) = v17;
    *(void *)(a2 + 40) = v21;
    *(void *)(a2 + 48) = v22;
    *(_OWORD *)(a2 + 56) = v35;
    *(void *)(a2 + 72) = v26;
    *(void *)(a2 + 80) = v27;
    return result;
  }

  while (1)
  {
    uint64_t v8 = *(unsigned __int16 *)(v6 + 16);
    if (!*(_WORD *)(v6 + 16))
    {
      if (v3) {
        goto LABEL_41;
      }
      uint64_t result = -1LL;
      goto LABEL_6;
    }

    uint64_t v9 = *(void *)(v6 + 40);
    BOOL v10 = __OFSUB__(v3, v9);
    uint64_t v11 = v3 - v9;
    if (v10) {
      goto LABEL_37;
    }
    if (v11 > 0) {
      break;
    }
    uint64_t result = 0LL;
LABEL_6:
    uint64_t result = specialized Rope._Node._innerSplit(at:into:)(result, (uint64_t)&v31);
    uint64_t v6 = v28;
    if (!*(_BYTE *)(v28 + 18))
    {
      uint64_t v30 = v3;
      goto LABEL_26;
    }
  }

  if ((_DWORD)v8 == 1) {
    goto LABEL_41;
  }
  uint64_t v12 = *(void *)(v6 + 64);
  uint64_t v3 = v11 - v12;
  if (__OFSUB__(v11, v12)) {
    goto LABEL_38;
  }
  if (v3 < 1)
  {
    uint64_t result = 1LL;
    uint64_t v3 = v11;
    goto LABEL_6;
  }

  if ((_DWORD)v8 == 2) {
    goto LABEL_41;
  }
  uint64_t v13 = (void *)(v6 + 88);
  uint64_t result = 2LL;
  while (v8 != result)
  {
    uint64_t v14 = v3 - *v13;
    if (__OFSUB__(v3, *v13)) {
      goto LABEL_36;
    }
    if (v14 < 1) {
      goto LABEL_6;
    }
    ++result;
    v13 += 3;
    uint64_t v3 = v14;
    if (v8 == result) {
      goto LABEL_41;
    }
  }

  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Rope.Builder.insertBeforeTip(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = v3[4];
    uint64_t v8 = v3[5];
    uint64_t v9 = v3[6];
    v3[5] = 0LL;
    v3[6] = 0LL;
    v3[4] = 0LL;
    if (v8)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope.Builder._appendNow(_:)(v7, v8, v9);
      outlined consume of Rope<AttributedString._InternalRun>._Item?(v3[4], v3[5]);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }

    v3[4] = v6;
    v3[5] = a2;
    v3[6] = a3;
  }

  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t specialized Rope._Node._removeNode(at:)(uint64_t a1)
{
  char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  uint64_t v4 = *v1;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    uint64_t v4 = specialized Rope._Node.copy()(*v1);
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    swift_unknownObjectRelease();
    uint64_t *v1 = v4;
    v1[1] = v6;
    v1[2] = v8;
  }

  swift_unknownObjectRetain();
  uint64_t v9 = specialized Rope._UnsafeHandle._removeChild(at:)(a1, (_WORD *)(v4 + 16), v4 + 24);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v15 = v1[1];
  BOOL v16 = __OFSUB__(v15, v11);
  uint64_t v17 = v15 - v11;
  if (v16)
  {
    __break(1u);
  }

  else
  {
    v1[1] = v17;
    uint64_t v18 = v1[2];
    BOOL v16 = __OFSUB__(v18, v13);
    uint64_t v19 = v18 - v13;
    if (!v16)
    {
      v1[2] = v19;
      return v9;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized Rope.Builder._insertBeforeTip(slots:in:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 1) {
      return swift_unknownObjectRelease();
    }
    if (v4 != 1)
    {
      specialized Rope._Node.copy(slots:)(result, a2, a3);
      uint64_t v8 = v7;
      uint64_t v10 = v9;
      uint64_t v11 = swift_unknownObjectRetain();
LABEL_7:
      specialized Rope.Builder._insertBeforeTip(_:)(v11, v8, v10);
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }

    uint64_t v5 = a3 + 24;
    if (*(_BYTE *)(a3 + 18))
    {
      uint64_t v6 = v5 + 24 * result;
      uint64_t v8 = *(void *)(v6 + 8);
      uint64_t v10 = *(void *)(v6 + 16);
      uint64_t v11 = swift_unknownObjectRetain_n();
      goto LABEL_7;
    }

    uint64_t v12 = (uint64_t *)(v5 + 24 * result);
    uint64_t v13 = *v12;
    if (!*v12) {
      return swift_unknownObjectRelease();
    }
    uint64_t v15 = v12[1];
    uint64_t v14 = v12[2];
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    uint64_t v18 = v3[6];
    v3[5] = 0LL;
    v3[6] = 0LL;
    v3[4] = 0LL;
    if (v17)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      specialized Rope.Builder._appendNow(_:)(v16, v17, v18);
      outlined consume of Rope<AttributedString._InternalRun>._Item?(v3[4], v3[5]);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    uint64_t result = swift_unknownObjectRelease();
    v3[4] = v13;
    v3[5] = v15;
    v3[6] = v14;
  }

  return result;
}

uint64_t specialized Rope.Builder._insertAfterTip(slots:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_18;
  }

  if (v9 < 1) {
    return swift_unknownObjectRelease();
  }
  if (v9 != 1)
  {
    uint64_t v4 = specialized Rope._Node.copy(slots:)(a1, a2, a3);
    uint64_t v5 = v22;
    uint64_t v6 = v23;
    uint64_t v37 = 0LL;
    swift_unknownObjectRetain();
    MEMORY[0x186E20E78](&v37, 8LL);
    uint64_t v8 = v37;
    uint64_t v7 = *(void **)(v3 + 80);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
LABEL_12:
      unint64_t v26 = v7[2];
      unint64_t v25 = v7[3];
      unint64_t v27 = v26 + 1;
      if (v26 >= v25 >> 1)
      {
        __int128 v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v25 > 1),  v26 + 1,  1,  v7);
        unint64_t v27 = v26 + 1;
        uint64_t v7 = v33;
      }

      v7[2] = v27;
      uint64_t v28 = &v7[4 * v26];
      v28[4] = v4;
      v28[5] = v5;
      v28[6] = v6;
      v28[7] = v8;
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v3 + 80) = v7;
      return result;
    }

_WORD *specialized Rope.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = v4[3];
  unint64_t v11 = swift_unknownObjectRetain();
  unint64_t v12 = specialized Rope._endPath.getter(v11);
  uint64_t result = (_WORD *)swift_unknownObjectRelease();
  if (v12 == a4) {
    return specialized Rope.append(_:)(a1, a2, a3);
  }
  if (!v9) {
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = (_WORD *)specialized Rope._Node.insert(_:at:)(a1, a2, a3, a4);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t result = (_WORD *)swift_bridgeObjectRelease();
    goto LABEL_10;
  }

  uint64_t v16 = *v4;
  unsigned int v17 = *(unsigned __int8 *)(*v4 + 18) + 1;
  if (((v17 >> 8) & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v18 = (uint64_t)result;
    uint64_t v26 = v15;
    uint64_t v20 = v4[1];
    uint64_t v19 = v4[2];
    uint64_t v21 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = v21;
    uint64_t v24 = v22;
    *(_WORD *)(v22 + 16) = 0;
    uint64_t result = (_WORD *)(v22 + 16);
    *(_BYTE *)(v24 + 18) = v17;
    uint64_t v25 = v20 + v23;
    if (!__OFADD__(v20, v23))
    {
      if (!__OFADD__(v19, v26))
      {
        specialized closure #1 in static Rope._Node.createInner(children:_:)( result,  v24 + 24,  v16,  v20,  v19,  v18,  v23,  v26);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (_WORD *)swift_bridgeObjectRelease();
        uint64_t *v4 = v24;
        v4[1] = v25;
        v4[2] = v19 + v26;
LABEL_10:
        v4[3] = v10 + 1;
        return result;
      }

      goto LABEL_13;
    }
  }

  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

_WORD *specialized Rope._Node.copy(slots:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(_BYTE *)(a3 + 18);
  unint64_t v7 = a2 - a1;
  BOOL v8 = __OFSUB__(a2, a1);
  if (*(_BYTE *)(a3 + 18))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
    uint64_t v9 = swift_allocObject();
    *(_WORD *)(v9 + 16) = 0;
    uint64_t result = (_WORD *)(v9 + 16);
    *(_BYTE *)(v9 + 18) = v6;
    if (v8)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }

    uint64_t result = (_WORD *)specialized closure #1 in Rope._UnsafeHandle.copy(slots:)(result, v9 + 24, v7, a3 + 24, a1, a2);
    if (*(_WORD *)(v9 + 16))
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
      while (1)
      {
        uint64_t v14 = *(void *)(v9 + v11 + 32);
        BOOL v15 = __OFADD__(v13, v14);
        v13 += v14;
        if (v15) {
          break;
        }
        uint64_t v16 = *(void *)(v9 + v11 + 40);
        BOOL v15 = __OFADD__(v12, v16);
        v12 += v16;
        if (v15) {
          goto LABEL_19;
        }
        v11 += 24LL;
      }

      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }

    return (_WORD *)v9;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
  uint64_t v9 = swift_allocObject();
  *(_WORD *)(v9 + 16) = 0;
  uint64_t result = (_WORD *)(v9 + 16);
  *(_BYTE *)(v9 + 18) = 0;
  if (!v8)
  {
    uint64_t result = (_WORD *)specialized closure #1 in Rope._UnsafeHandle.copy(slots:)(result, v9 + 24, v7, a3 + 24, a1, a2);
    if (*(_WORD *)(v9 + 16))
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      while (1)
      {
        uint64_t v19 = *(void *)(v9 + v17 + 24);
        BOOL v15 = __OFADD__(v18, v19);
        v18 += v19;
        if (v15) {
          break;
        }
        v17 += 24LL;
      }

      goto LABEL_20;
    }

    return (_WORD *)v9;
  }

uint64_t specialized Rope._Node._leafRemoveSuffix(returning:into:)( uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a1 == 1)
  {
    uint64_t v9 = a3[3];
    uint64_t v10 = a3[5];
    uint64_t v8 = a3[6];
    if (v9)
    {
      uint64_t v11 = a3[4];
      uint64_t v13 = a2[4];
      uint64_t v12 = a2[5];
      uint64_t v14 = a2[6];
      a2[5] = 0LL;
      a2[6] = 0LL;
      a2[4] = 0LL;
      if (v12)
      {
        uint64_t v34 = v14;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Rope.Builder._appendNow(_:)(v13, v12, v34);
        outlined consume of Rope<AttributedString._InternalRun>._Item?(a2[4], a2[5]);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      a2[4] = v9;
      a2[5] = v11;
      a2[6] = v10;
      return v8;
    }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_21:
    swift_unknownObjectRelease();
    return v8;
  }

  if (!a1)
  {
    uint64_t v8 = a3[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }

  swift_unknownObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if ((result & 1) != 0)
  {
    uint64_t v18 = (uint64_t)a3;
  }

  else
  {
    uint64_t v18 = specialized Rope._Node.copy()((uint64_t)a3);
    a4 = v19;
    a5 = v20;
    uint64_t result = swift_unknownObjectRelease();
  }

  uint64_t v21 = *(unsigned __int16 *)(v18 + 16);
  if (v21 - 1 <= a1) {
    goto LABEL_15;
  }
  BOOL v22 = __OFSUB__(v21, a1);
  uint64_t v23 = v21 - a1;
  if (v22)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v24 = v23 - 1;
  if (__OFSUB__(v23, 1LL))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  swift_unknownObjectRetain();
  uint64_t v25 = specialized Rope._UnsafeHandle._removeSuffix(_:)(v24, (_WORD *)(v18 + 16), v18 + 24);
  uint64_t v27 = v26;
  uint64_t result = swift_unknownObjectRelease();
  BOOL v22 = __OFSUB__(a4, v25);
  a4 -= v25;
  if (v22)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  BOOL v22 = __OFSUB__(a5, v27);
  a5 -= v27;
  if (!v22)
  {
LABEL_15:
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v28 = specialized Rope._Node.copy()(v18);
      a4 = v29;
      a5 = v30;
      swift_unknownObjectRelease();
      uint64_t v18 = v28;
    }

    swift_unknownObjectRetain();
    uint64_t v8 = specialized Rope._UnsafeHandle._removeChild(at:)(a1, (_WORD *)(v18 + 16), v18 + 24);
    uint64_t result = swift_unknownObjectRelease();
    BOOL v22 = __OFSUB__(a4, 1LL);
    uint64_t v31 = a4 - 1;
    if (v22)
    {
      __break(1u);
    }

    else
    {
      BOOL v22 = __OFSUB__(a5, v8);
      uint64_t v32 = a5 - v8;
      if (!v22)
      {
        uint64_t v33 = swift_unknownObjectRetain();
        specialized Rope.Builder._insertBeforeTip(_:)(v33, v31, v32);
        swift_unknownObjectRelease();
        goto LABEL_21;
      }
    }

    __break(1u);
    goto LABEL_27;
  }

uint64_t specialized Rope._Node._innerRemovePrefix(descending:into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(unsigned __int16 *)(*v2 + 16);
  if (v6 - 1 == a1)
  {
    unint64_t v7 = (void *)(v5 + 24 * a1);
    uint64_t v8 = v7[3];
    uint64_t v9 = v7[4];
    uint64_t v10 = v7[5];
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
    uint64_t *v2 = v8;
    v2[1] = v9;
    v2[2] = v10;
    return result;
  }

  if (v6 - 2 == a1)
  {
    uint64_t v13 = (uint64_t *)(v5 + 24 + 24 * a1);
    uint64_t v14 = *v13;
    uint64_t v42 = v13[1];
    uint64_t v15 = v13[2];
    uint64_t v16 = (uint64_t *)(v5 + 24 + 24LL * ((int)v6 - 1));
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v44 = 0LL;
    swift_unknownObjectRetain();
    MEMORY[0x186E20E78](&v44, 8LL);
    uint64_t v20 = v44;
    uint64_t v21 = *(void **)(a2 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v21[2] + 1LL,  1,  v21);
    }
    unint64_t v23 = v21[2];
    unint64_t v22 = v21[3];
    unint64_t v24 = v23 + 1;
    if (v23 >= v22 >> 1)
    {
      uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v22 > 1),  v23 + 1,  1,  v21);
      unint64_t v24 = v23 + 1;
      uint64_t v21 = v41;
    }

    v21[2] = v24;
    uint64_t v25 = &v21[4 * v23];
    v25[4] = v17;
    v25[5] = v18;
    v25[6] = v19;
    v25[7] = v20;
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(a2 + 80) = v21;
    uint64_t *v2 = v14;
    v2[1] = v42;
    v2[2] = v15;
    return result;
  }

  char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  uint64_t v27 = *v2;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    uint64_t v27 = specialized Rope._Node.copy()(*v2);
    uint64_t v5 = v28;
    uint64_t v30 = v29;
    swift_unknownObjectRelease();
    uint64_t *v2 = v27;
    v2[1] = v5;
    v2[2] = v30;
  }

  uint64_t v31 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v3 = v27 + 24;
  uint64_t v32 = v27 + 24 + 24 * v4;
  uint64_t v5 = *(void *)v32;
  __int128 v43 = *(_OWORD *)(v32 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v33 = specialized Rope._UnsafeHandle._removePrefix(_:)(v4 + 1, (_WORD *)(v27 + 16), (char *)(v27 + 24));
  uint64_t v4 = v34;
  swift_unknownObjectRelease();
  uint64_t v35 = v2[1];
  BOOL v36 = __OFSUB__(v35, v33);
  uint64_t v31 = v35 - v33;
  if (v36)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v37 = v2[2];
  uint64_t v3 = v37 - v4;
  if (__OFSUB__(v37, v4))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v4 = *v2;
  uint64_t *v2 = v5;
  *(_OWORD *)(v2 + 1) = v43;
  uint64_t v44 = 0LL;
  swift_unknownObjectRetain();
  MEMORY[0x186E20E78](&v44, 8LL);
  uint64_t v5 = v44;
  uint64_t v2 = *(uint64_t **)(a2 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_21:
  }
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v2[2] + 1,  1,  v2);
  unint64_t v39 = v2[2];
  unint64_t v38 = v2[3];
  if (v39 >= v38 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v38 > 1),  v39 + 1,  1,  v2);
  }
  v2[2] = v39 + 1;
  uint64_t v40 = &v2[4 * v39];
  v40[4] = v4;
  v40[5] = v31;
  v40[6] = v3;
  v40[7] = v5;
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(a2 + 80) = v2;
  return result;
}

uint64_t specialized Rope._Node._leafRemovePrefix(returning:into:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(unsigned __int16 *)(a3 + 16);
  if (v8 - 1 == a1)
  {
    uint64_t v7 = *(void *)(a3 + 24 * a1 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }

  if (v8 - 2 == a1)
  {
    uint64_t v7 = *(void *)(a3 + 24 + 24 * a1);
    uint64_t v10 = (uint64_t *)(a3 + 24 + 24LL * ((int)v8 - 1));
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    uint64_t v13 = v10[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Rope.Builder._insertAfterTip(_:)(v11, v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }

  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull() & 1) != 0)
  {
    uint64_t v16 = a3;
  }

  else
  {
    uint64_t v16 = specialized Rope._Node.copy()(a3);
    a4 = v17;
    a5 = v18;
    swift_unknownObjectRelease();
  }

  uint64_t v19 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v28 = a2;
  uint64_t v5 = v16 + 24;
  uint64_t v7 = *(void *)(v16 + 24 + 24 * v7);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = specialized Rope._UnsafeHandle._removePrefix(_:)(v19, (_WORD *)(v16 + 16), (char *)(v16 + 24));
  uint64_t v19 = v21;
  swift_unknownObjectRelease();
  if (__OFSUB__(a4, v20))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  BOOL v22 = __OFSUB__(a5, v19);
  uint64_t v19 = (uint64_t)a5 - v19;
  if (v22)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v27 = a4 - v20;
  uint64_t v29 = 0LL;
  swift_unknownObjectRetain_n();
  MEMORY[0x186E20E78](&v29, 8LL);
  uint64_t v5 = v29;
  a5 = *(void **)(v28 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
  }
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a5[2] + 1LL,  1,  a5);
  unint64_t v24 = a5[2];
  unint64_t v23 = a5[3];
  if (v24 >= v23 >> 1) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v23 > 1),  v24 + 1,  1,  a5);
  }
  a5[2] = v24 + 1;
  uint64_t v25 = &a5[4 * v24];
  v25[4] = v16;
  v25[5] = v27;
  v25[6] = v19;
  v25[7] = v5;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(void *)(v28 + 80) = a5;
LABEL_15:
  swift_unknownObjectRelease();
  return v7;
}

uint64_t specialized Rope._UnsafeHandle._removePrefix(_:)(uint64_t result, _WORD *a2, char *__dst)
{
  if (result < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = result;
  if (result)
  {
    uint64_t v8 = (uint64_t *)(__dst + 16);
    uint64_t v9 = result;
    while (1)
    {
      uint64_t v10 = *(v8 - 1);
      uint64_t v11 = *v8;
      uint64_t result = swift_unknownObjectRelease();
      BOOL v12 = __OFADD__(v6, v10);
      v6 += v10;
      if (v12) {
        break;
      }
      BOOL v12 = __OFADD__(v5, v11);
      v5 += v11;
      if (v12) {
        goto LABEL_13;
      }
      v8 += 3;
      if (!--v9) {
        goto LABEL_7;
      }
    }

    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char *v12;
  if (result < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v5 = 0LL;
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = __dst + 16;
    uint64_t v8 = result;
    while (1)
    {
      uint64_t v9 = *((void *)v7 - 2);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v10 = __OFADD__(v5, v9);
      v5 += v9;
      if (v10) {
        break;
      }
      v7 += 24;
      if (!--v8) {
        goto LABEL_6;
      }
    }

    __break(1u);
    goto LABEL_12;
  }

uint64_t specialized Rope._UnsafeHandle._removeSuffix(_:)(uint64_t result, _WORD *a2, uint64_t a3)
{
  uint64_t v3 = (unsigned __int16)*a2;
  int64_t v4 = v3 - result;
  BOOL v5 = __OFSUB__(v3, result);
  if (__OFSUB__(v3, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v4 > v3)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (v4 == v3)
  {
    uint64_t v7 = 0LL;
    goto LABEL_16;
  }

  if (v4 < v3)
  {
    uint64_t v7 = result;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v10 = 24LL * (unsigned __int16)*a2 - 24 * result + a3 + 16;
    do
    {
      uint64_t v11 = *(void *)(v10 - 16);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (__OFADD__(v8, 1LL))
      {
        __break(1u);
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }

      BOOL v12 = __OFADD__(v9, v11);
      v9 += v11;
      if (v12) {
        goto LABEL_21;
      }
      v10 += 24LL;
      ++v8;
    }

    while (v7 != v8);
    uint64_t v13 = (unsigned __int16)*a2;
    BOOL v12 = __OFSUB__(v13, v7);
    int64_t v4 = v13 - v7;
    BOOL v5 = v12;
LABEL_16:
    if (!v5)
    {
      if ((v4 & 0x8000000000000000LL) == 0)
      {
        if (!((unint64_t)v4 >> 16))
        {
          *a2 = v4;
          return v7;
        }

        goto LABEL_26;
      }

uint64_t specialized closure #1 in Rope._Node.insert(_:at:)@<X0>( uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = specialized Rope._Node.insert(_:at:)(v5, v6, v7, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  return result;
}

uint64_t specialized Rope._Node._insertNode(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if ((_DWORD)result)
  {
    uint64_t v9 = v4[1];
  }

  else
  {
    uint64_t v10 = specialized Rope._Node.copy()(*v4);
    uint64_t v9 = v11;
    uint64_t v13 = v12;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t *v4 = v10;
    v4[1] = v9;
    v4[2] = v13;
  }

  if (__OFADD__(v9, a2))
  {
    __break(1u);
  }

  else
  {
    v4[1] = v9 + a2;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, a3);
    uint64_t v16 = v14 + a3;
    if (!v15)
    {
      v4[2] = v16;
      uint64_t v17 = *v4;
      swift_unknownObjectRetain();
      uint64_t v18 = swift_unknownObjectRetain();
      specialized Rope._UnsafeHandle._insertChild(_:at:)(v18, a2, a3, a4, (_WORD *)(v17 + 16), v17 + 24);
      return swift_unknownObjectRelease();
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._insertItem(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if ((_DWORD)result)
  {
    uint64_t v10 = v4[1];
  }

  else
  {
    uint64_t v11 = specialized Rope._Node.copy()(*v4);
    uint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t *v4 = v11;
    v4[1] = v10;
    v4[2] = v14;
  }

  if (__OFADD__(v10, 1LL))
  {
    __break(1u);
  }

  else
  {
    v4[1] = v10 + 1;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, a1);
    uint64_t v17 = v15 + a1;
    if (!v16)
    {
      v4[2] = v17;
      uint64_t v18 = *v4;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope._UnsafeHandle._insertChild(_:at:)(a1, a2, a3, a4, (_WORD *)(v18 + 16), v18 + 24);
      return swift_unknownObjectRelease();
    }
  }

  __break(1u);
  return result;
}

_WORD *specialized Rope.prepend(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*v3)
  {
    unint64_t v7 = *(unsigned __int8 *)(*v3 + 18LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v7 = 0LL;
  }

  return specialized Rope.insert(_:at:)(a1, a2, a3, v7);
}

uint64_t specialized Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)( uint64_t result, uint64_t a2, uint64_t a3, char a4, unsigned __int16 *a5, uint64_t a6)
{
  BOOL v6 = __OFADD__(a2, a3);
  uint64_t v7 = a2 + a3;
  if (v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v8 = *a5;
  if (v8 > result)
  {
    BOOL v9 = (a4 & 1) == 0;
    if (__OFADD__(v7, v9))
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }

    uint64_t v10 = *(void *)(a6 + 24 * result);
    if (v10 < v7 + v9)
    {
      BOOL v6 = __OFSUB__(v7, v10);
      uint64_t v11 = v7 - v10;
      if (v6)
      {
LABEL_19:
        __break(1u);
        return result;
      }

      uint64_t v12 = result + 1;
      if (result + 1 >= v8) {
        return v12;
      }
      uint64_t v13 = (uint64_t *)(a6 + 24 * result + 24);
      while (!__OFADD__(v11, v9))
      {
        uint64_t v15 = *v13;
        v13 += 3;
        uint64_t v14 = v15;
        if (v15 >= v11 + v9) {
          return v12;
        }
        BOOL v6 = __OFSUB__(v11, v14);
        v11 -= v14;
        if (v6) {
          goto LABEL_16;
        }
        if (v8 == ++v12) {
          return *a5;
        }
      }

      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }

  return result;
}

{
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v6 = __OFADD__(a2, a3);
  uint64_t v7 = a2 + a3;
  if (v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v8 = *a5;
  if (v8 > result)
  {
    BOOL v9 = (a4 & 1) == 0;
    if (__OFADD__(v7, v9))
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }

    uint64_t v10 = *(void *)(a6 + 24 * result + 16);
    if (v10 < v7 + v9)
    {
      BOOL v6 = __OFSUB__(v7, v10);
      uint64_t v11 = v7 - v10;
      if (v6)
      {
LABEL_19:
        __break(1u);
        return result;
      }

      uint64_t v12 = result + 1;
      if (result + 1 >= v8) {
        return v12;
      }
      uint64_t v13 = (uint64_t *)(a6 + 24 * result + 40);
      while (!__OFADD__(v11, v9))
      {
        uint64_t v15 = *v13;
        v13 += 3;
        uint64_t v14 = v15;
        if (v15 >= v11 + v9) {
          return v12;
        }
        BOOL v6 = __OFSUB__(v11, v14);
        v11 -= v14;
        if (v6) {
          goto LABEL_16;
        }
        if (v8 == ++v12) {
          return *a5;
        }
      }

      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }

  return result;
}

unsigned __int16 *specialized closure #2 in Rope.builder<A>(removing:in:)( unsigned __int16 *result, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a3;
  uint64_t v6 = *result;
  if (*result)
  {
    uint64_t v7 = v5 - *a2;
    if (__OFSUB__(v5, *a2))
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }

    if (__OFADD__(v7, 1LL))
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    if (v7 + 1 < 1)
    {
      uint64_t v6 = 0LL;
      uint64_t v8 = a5 - a4;
      if (!__OFSUB__(a5, a4)) {
        goto LABEL_17;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }

    if ((_DWORD)v6 != 1)
    {
      BOOL v9 = a2 + 3;
      uint64_t v10 = 1LL;
      while (1)
      {
        uint64_t v11 = *v9;
        v9 += 3;
        uint64_t v5 = v7 - v11;
        if (__OFSUB__(v7, v11)) {
          goto LABEL_21;
        }
        if (__OFADD__(v5, 1LL)) {
          goto LABEL_22;
        }
        if (v5 + 1 < 1)
        {
          uint64_t v6 = v10;
          uint64_t v5 = v7;
          uint64_t v8 = a5 - a4;
          if (__OFSUB__(a5, a4)) {
            goto LABEL_20;
          }
          goto LABEL_17;
        }

        ++v10;
        uint64_t v7 = v5;
        if (v6 == v10) {
          goto LABEL_15;
        }
      }
    }

    v5 -= *a2;
  }

uint64_t specialized closure #1 in Rope._UnsafeHandle.copy(slots:)( _WORD *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a3 & 0x8000000000000000LL) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (a3 >> 16)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  *a1 = a3;
  uint64_t v7 = a6 - a5;
  if (!__OFSUB__(a6, a5))
  {
    if (v7 < 0) {
      goto LABEL_19;
    }
    uint64_t v8 = (void *)a2;
    unint64_t v9 = a4 + 24 * a5;
    if (v9 < a2 + 24 * v7 && v9 + 24 * v7 > a2) {
      goto LABEL_19;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Item);
    swift_arrayInitWithCopy();
    uint64_t v11 = 0LL;
    if (!a3) {
      return 0LL;
    }
    uint64_t result = ((a3 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v13 = 24 * a3;
    while (1)
    {
      BOOL v14 = __OFADD__(v11, *v8);
      v11 += *v8;
      if (v14) {
        break;
      }
      v8 += 3;
      v13 -= 24LL;
      if (!v13) {
        return result;
      }
    }

    __break(1u);
    goto LABEL_16;
  }

{
  uint64_t v7;
  unint64_t v9;
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  if ((a3 & 0x8000000000000000LL) != 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (a3 >> 16)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  *a1 = a3;
  uint64_t v7 = a6 - a5;
  if (__OFSUB__(a6, a5))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  if (v7 < 0) {
    goto LABEL_20;
  }
  unint64_t v9 = a4 + 24 * a5;
  if (v9 < a2 + 24 * v7 && v9 + 24 * v7 > a2) {
    goto LABEL_20;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Node);
  swift_arrayInitWithCopy();
  uint64_t v11 = 0LL;
  uint64_t result = 0LL;
  if (a3)
  {
    uint64_t v13 = (void *)(a2 + 16);
    BOOL v14 = 24 * a3;
    while (1)
    {
      uint64_t v15 = *(v13 - 1);
      BOOL v16 = __OFADD__(result, v15);
      result += v15;
      if (v16) {
        break;
      }
      BOOL v16 = __OFADD__(v11, *v13);
      v11 += *v13;
      if (v16) {
        goto LABEL_16;
      }
      v13 += 3;
      v14 -= 24LL;
      if (!v14) {
        return result;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  return result;
}

uint64_t specialized closure #2 in Rope._Node.removeSuffix<A>(from:in:into:)( unsigned __int16 *a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t result = *a1;
  if ((_DWORD)result)
  {
    uint64_t v6 = v4 - *a2;
    if (!__OFSUB__(v4, *a2))
    {
      if (__OFADD__(v6, 1LL))
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }

      if (v6 + 1 < 1) {
        return 0LL;
      }
      if ((_DWORD)result == 1)
      {
        v4 -= *a2;
        goto LABEL_13;
      }

      uint64_t v7 = a2 + 3;
      uint64_t v8 = 1LL;
      while (1)
      {
        uint64_t v9 = *v7;
        v7 += 3;
        uint64_t v4 = v6 - v9;
        if (__OFSUB__(v6, v9)) {
          break;
        }
        if (__OFADD__(v4, 1LL)) {
          goto LABEL_17;
        }
        if (v4 + 1 < 1) {
          return v8;
        }
        ++v8;
        uint64_t v6 = v4;
        if (result == v8) {
          goto LABEL_13;
        }
      }

      __break(1u);
LABEL_17:
      __break(1u);
    }

    __break(1u);
    goto LABEL_19;
  }

uint64_t specialized Rope._Node.removeSuffix<A>(from:in:into:)( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3;
  uint64_t v67 = a1;
  if (a1 < 1) {
    return swift_unknownObjectRelease();
  }
  uint64_t v6 = a5;
  uint64_t v9 = a1;
  if (a1 >= a5)
  {
    swift_unknownObjectRetain();
LABEL_52:
    uint64_t v61 = swift_unknownObjectRetain();
    specialized Rope.Builder._insertBeforeTip(_:)(v61, a4, v6);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }

  int v10 = *(unsigned __int8 *)(a3 + 18);
  swift_unknownObjectRetain();
  uint64_t v66 = a2;
  if (v10)
  {
    while (1)
    {
      uint64_t v11 = *(unsigned __int16 *)(v5 + 16);
      if (!*(_WORD *)(v5 + 16)) {
        goto LABEL_72;
      }
      uint64_t v12 = *(void *)(v5 + 40);
      uint64_t v13 = v9 - v12;
      if (__OFSUB__(v9, v12)) {
        break;
      }
      if (v13 <= 0)
      {
        uint64_t v30 = *(void *)(v5 + 24);
        a4 = *(void *)(v5 + 32);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        goto LABEL_42;
      }

      if ((_DWORD)v11 == 1) {
        goto LABEL_72;
      }
      uint64_t v14 = v6;
      uint64_t v6 = *(void *)(v5 + 64);
      uint64_t v9 = v13 - v6;
      if (__OFSUB__(v13, v6)) {
        goto LABEL_61;
      }
      if (v9 < 1)
      {
        uint64_t v67 = v13;
        uint64_t v31 = *(void *)(v5 + 24);
        uint64_t v32 = *(void *)(v5 + 32);
        uint64_t v34 = *(void *)(v5 + 48);
        uint64_t v33 = *(void *)(v5 + 56);
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        uint64_t v35 = v31;
        a4 = v33;
        a2 = v66;
        specialized Rope.Builder._insertBeforeTip(_:)(v35, v32, v12);
        uint64_t v5 = v34;
        uint64_t v9 = v13;
        goto LABEL_43;
      }

      if ((_DWORD)v11 == 2) {
        goto LABEL_72;
      }
      uint64_t v15 = v14;
      uint64_t v16 = 0LL;
      uint64_t v17 = 2 - v11;
      uint64_t v18 = 112LL;
      uint64_t v19 = 3LL;
      while (1)
      {
        if (v17 + v19 == 3)
        {
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }

        uint64_t v20 = *(void *)(v5 + 88 + v16);
        BOOL v21 = __OFSUB__(v9, v20);
        uint64_t v22 = v9 - v20;
        if (v21) {
          goto LABEL_57;
        }
        if (v22 < 1) {
          break;
        }
        ++v19;
        v16 += 24LL;
        v18 += 24LL;
        uint64_t v9 = v22;
        if (v17 + v19 == 3) {
          goto LABEL_72;
        }
      }

      uint64_t v67 = v9;
      if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
      {
        uint64_t v23 = specialized Rope._Node.copy()(v5);
        a4 = v24;
        uint64_t v15 = v25;
        swift_unknownObjectRelease();
        uint64_t v5 = v23;
      }

      uint64_t v26 = *(unsigned __int16 *)(v5 + 16);
      if (v19 - 1 >= v26 - 1) {
        goto LABEL_35;
      }
      if (v19 > v26) {
        goto LABEL_65;
      }
      uint64_t v65 = v15;
      if (v26 != v19)
      {
        uint64_t v64 = a4;
        if (v19 >= v26) {
          goto LABEL_70;
        }
        swift_unknownObjectRetain();
        uint64_t v27 = 0LL;
        uint64_t v28 = 0LL;
        BOOL v36 = (uint64_t *)(v5 + v18);
        uint64_t v63 = v26;
        while (1)
        {
          uint64_t v37 = *(v36 - 1);
          uint64_t v38 = *v36;
          swift_unknownObjectRelease();
          BOOL v21 = __OFADD__(v28, v37);
          v28 += v37;
          if (v21) {
            goto LABEL_58;
          }
          BOOL v21 = __OFADD__(v27, v38);
          v27 += v38;
          if (v21) {
            goto LABEL_59;
          }
          v36 += 3;
          if (v19 == --v26)
          {
            uint64_t v29 = *(unsigned __int16 *)(v5 + 16);
            a2 = v66;
            uint64_t v26 = v63;
            a4 = v64;
            goto LABEL_31;
          }
        }
      }

      swift_unknownObjectRetain();
      uint64_t v27 = 0LL;
      uint64_t v28 = 0LL;
      uint64_t v29 = v26;
LABEL_31:
      uint64_t v39 = v29 - v26 + v19;
      if (v39 < 0) {
        goto LABEL_66;
      }
      *(_WORD *)(v5 + 16) = v39;
      swift_unknownObjectRelease();
      BOOL v21 = __OFSUB__(a4, v28);
      a4 -= v28;
      if (v21) {
        goto LABEL_68;
      }
      uint64_t v15 = v65 - v27;
      if (__OFSUB__(v65, v27)) {
        goto LABEL_69;
      }
LABEL_35:
      if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
      {
        uint64_t v40 = specialized Rope._Node.copy()(v5);
        a4 = v41;
        uint64_t v15 = v42;
        swift_unknownObjectRelease();
        uint64_t v5 = v40;
      }

      uint64_t v43 = *(unsigned __int16 *)(v5 + 16) - v19;
      if (v43 < 0) {
        goto LABEL_73;
      }
      uint64_t v44 = v15;
      uint64_t v45 = a4;
      unint64_t v46 = (void *)(v5 + v16);
      uint64_t v47 = (const void *)(v5 + v16 + 96);
      uint64_t v30 = *(void *)(v5 + v16 + 72);
      uint64_t v48 = v46[10];
      v46 += 9;
      uint64_t v12 = v46[2];
      memmove(v46, v47, 24 * v43);
      int v49 = *(unsigned __int16 *)(v5 + 16);
      swift_unknownObjectRetain();
      if (!v49) {
        goto LABEL_62;
      }
      *(_WORD *)(v5 + 16) = v49 - 1;
      swift_unknownObjectRelease();
      if (__OFSUB__(v45, v48)) {
        goto LABEL_63;
      }
      if (__OFSUB__(v44, v12)) {
        goto LABEL_64;
      }
      specialized Rope.Builder._insertBeforeTip(_:)(v5, v45 - v48, v44 - v12);
      a4 = v48;
LABEL_42:
      uint64_t v6 = v12;
      uint64_t v5 = v30;
LABEL_43:
      if (v9 >= v6) {
        goto LABEL_52;
      }
      if (!*(_BYTE *)(v5 + 18)) {
        goto LABEL_45;
      }
    }

uint64_t specialized closure #2 in Rope.builder<A>(splittingAt:in:)(uint64_t result, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(unsigned __int16 *)result;
  if (!*(_WORD *)result) {
    goto LABEL_10;
  }
  uint64_t v6 = v4 - *a2;
  if (__OFSUB__(v4, *a2))
  {
LABEL_15:
    __break(1u);
    return result;
  }

  if (v6 < 1) {
    return 0LL;
  }
  if ((_DWORD)v5 != 1)
  {
    uint64_t v7 = a2 + 3;
    uint64_t result = 1LL;
    uint64_t v4 = v6;
    while (1)
    {
      uint64_t v8 = *v7;
      v7 += 3;
      uint64_t v9 = v4 - v8;
      if (__OFSUB__(v4, v8)) {
        break;
      }
      if (v9 < 1) {
        return result;
      }
      ++result;
      uint64_t v4 = v9;
      if (v5 == result) {
        goto LABEL_9;
      }
    }

    __break(1u);
    goto LABEL_15;
  }

  do
  {
LABEL_9:
    __break(1u);
LABEL_10:
    ;
  }

  while (v4);
  return -1LL;
}

uint64_t specialized Rope._Node.removePrefix<A>(upTo:in:into:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = a5;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  BOOL v36 = a5;
  uint64_t v33 = a1;
  if (a1 >= 1)
  {
    uint64_t v9 = a1;
    if (a1 < (uint64_t)a5)
    {
      int v10 = *(unsigned __int8 *)(a3 + 18);
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v12 = a3;
      if (v10)
      {
        uint64_t v12 = a3;
        while (1)
        {
          uint64_t v13 = *(unsigned __int16 *)(v12 + 16);
          if (!*(_WORD *)(v12 + 16)) {
            goto LABEL_38;
          }
          uint64_t v14 = *(void *)(v12 + 40);
          BOOL v15 = __OFSUB__(v9, v14);
          uint64_t v16 = v9 - v14;
          if (v15) {
            goto LABEL_34;
          }
          if (v16 <= 0)
          {
            uint64_t result = 0LL;
          }

          else
          {
            if ((_DWORD)v13 == 1) {
              goto LABEL_38;
            }
            uint64_t v17 = *(void *)(v12 + 64);
            uint64_t v9 = v16 - v17;
            if (__OFSUB__(v16, v17)) {
              goto LABEL_35;
            }
            if (v9 >= 1)
            {
              if ((_DWORD)v13 == 2) {
                goto LABEL_38;
              }
              uint64_t v18 = (void *)(v12 + 88);
              uint64_t result = 2LL;
              while (v13 != result)
              {
                uint64_t v19 = v9 - *v18;
                if (__OFSUB__(v9, *v18)) {
                  goto LABEL_33;
                }
                if (v19 < 1) {
                  goto LABEL_20;
                }
                ++result;
                v18 += 3;
                uint64_t v9 = v19;
                if (v13 == result) {
                  goto LABEL_38;
                }
              }

              __break(1u);
LABEL_33:
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
              goto LABEL_36;
            }

            uint64_t result = 1LL;
            uint64_t v9 = v16;
          }

uint64_t specialized Rope._Node._removeSubrange<A>(from:to:in:into:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (result < 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v11 = result;
  swift_unknownObjectRetain();
  uint64_t result = specialized Rope.Builder._insertBeforeTip(slots:in:)(0LL, v11, a6);
  uint64_t v12 = *(unsigned __int16 *)(a6 + 16);
  if (v12 > a3)
  {
    swift_unknownObjectRetain();
    uint64_t result = specialized Rope.Builder._insertAfterTip(slots:in:)(a3 + 1, v12, a6);
  }

  uint64_t v13 = a6 + 24;
  if (*(_BYTE *)(a6 + 18))
  {
    uint64_t v14 = (uint64_t *)(v13 + 24 * v11);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = (uint64_t *)(v13 + 24 * a3);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = (void *)v18[2];
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    specialized Rope._Node.removeSuffix<A>(from:in:into:)(a2, a5, v15, v16, v17);
    swift_unknownObjectRetain();
    specialized Rope._Node.removePrefix<A>(upTo:in:into:)(a4, (uint64_t)a5, v19, v20, v21);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }

  if ((a4 | a2) < 0) {
    goto LABEL_21;
  }
  uint64_t v22 = (uint64_t *)(v13 + 24 * v11);
  uint64_t v23 = (uint64_t *)(v13 + 24 * a3);
  uint64_t v24 = *v23;
  if (*v22 < a2 || v24 < a4) {
    goto LABEL_21;
  }
  uint64_t v26 = v22[1];
  uint64_t v27 = v22[2];
  uint64_t v28 = v23[1];
  uint64_t v29 = v23[2];
  if (a2)
  {
    uint64_t v30 = a5[4];
    uint64_t v31 = a5[5];
    uint64_t v32 = a5[6];
    a5[5] = 0LL;
    a5[6] = 0LL;
    a5[4] = 0LL;
    if (v31)
    {
      uint64_t v35 = v32;
      uint64_t v36 = v30;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope.Builder._appendNow(_:)(v36, v31, v35);
      uint64_t result = outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
      a5[4] = a2;
      a5[5] = v26;
      a5[6] = v27;
      goto LABEL_17;
    }

    a5[4] = a2;
    a5[5] = v26;
    a5[6] = v27;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
LABEL_17:
  BOOL v33 = __OFSUB__(v24, a4);
  uint64_t v34 = v24 - a4;
  if (!v33)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Rope.Builder._insertAfterTip(_:)(v34, v28, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }

void specialized AttributedString.CharacterView.subscript.setter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  unint64_t v5 = (unint64_t)*a3 >> 10;
  if (v5 < v3[1] >> 10)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v5 >= v3[5] >> 10)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v6 = a3[1];
  uint64_t v7 = a3[2];
  uint64_t v8 = a3[3];
  uint64_t v9 = (_OWORD *)*v3;
  __int128 v10 = *(_OWORD *)(*v3 + 16LL);
  __int128 v11 = *(_OWORD *)(*v3 + 48LL);
  v32[1] = *(_OWORD *)(*v3 + 32LL);
  v32[2] = v11;
  v32[0] = v10;
  __int128 v12 = v9[1];
  v33[1] = v9[2];
  v33[2] = v11;
  v33[0] = v12;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v33, (uint64_t)v34);
  outlined retain of Locale((uint64_t)v34);
  unint64_t v13 = MEMORY[0x186E1AE90](v4, v6, v7, v8);
  unint64_t v15 = v14;
  unint64_t v17 = v16;
  unint64_t v19 = v18;
  outlined release of Locale((uint64_t)v32);
  __int128 v20 = v9[1];
  __int128 v21 = v9[3];
  v31[1] = v9[2];
  uint64_t v31[2] = v21;
  v31[0] = v20;
  __int128 v22 = v9[1];
  v35[1] = v9[2];
  v35[2] = v21;
  v35[0] = v22;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v35, (uint64_t)v36);
  outlined retain of Locale((uint64_t)v36);
  unint64_t v23 = BigString.index(after:)();
  unint64_t v25 = v24;
  unint64_t v27 = v26;
  unint64_t v29 = v28;
  outlined release of Locale((uint64_t)v31);
  if (v23 >> 10 >= v13 >> 10)
  {
    v30[0] = v13;
    v30[1] = v15;
    v30[2] = v17;
    v30[3] = v19;
    v30[4] = v23;
    v30[5] = v25;
    v30[6] = v27;
    v30[7] = v29;
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v30);
    return;
  }

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<AttributedString.CharacterView>,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView,  MEMORY[0x189617A18]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type Slice<AttributedString.CharacterView> and conformance <> Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString.CharacterView>,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView,  MEMORY[0x18961A5C8]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<AttributedString.CharacterView>,  MEMORY[0x189617A28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Slice<AttributedString.CharacterView> and conformance Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString.CharacterView>,  MEMORY[0x18961A5E8]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IndexingIterator<AttributedString.CharacterView> and conformance IndexingIterator<A>,  &demangling cache variable for type metadata for IndexingIterator<AttributedString.CharacterView>,  MEMORY[0x189619678]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RangeReplaceableCollection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type Slice<AttributedString.CharacterView> and conformance <> Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString.CharacterView>,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView,  MEMORY[0x18961A5F0]);
}

uint64_t sub_18339ED3C()
{
  return 0LL;
}

uint64_t sub_18339ED54()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for AttributedString.CharacterView()
{
  return &type metadata for AttributedString.CharacterView;
}

uint64_t partial apply for specialized closure #1 in Rope._Node.insert(_:at:)@<X0>(uint64_t *a1@<X8>)
{
  return specialized closure #1 in Rope._Node.insert(_:at:)(*(uint64_t **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t outlined destroy of (key: String, value: AttributedString._AttributeValue)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t partial apply for specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)( uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)( a1,  a2,  *(_BYTE **)(v2 + 16));
}

void partial apply for closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)( uint64_t a1, uint64_t a2)
{
}

unint64_t lazy protocol witness table accessor for type BigSubstring and conformance BigSubstring()
{
  unint64_t result = lazy protocol witness table cache variable for type BigSubstring and conformance BigSubstring;
  if (!lazy protocol witness table cache variable for type BigSubstring and conformance BigSubstring)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18960D800], MEMORY[0x18960D7F8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type BigSubstring and conformance BigSubstring);
  }

  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IndexingIterator<AttributedString._InternalRunsSlice> and conformance IndexingIterator<A>,  &demangling cache variable for type metadata for IndexingIterator<AttributedString._InternalRunsSlice>,  MEMORY[0x189619678]);
}

void *specialized AttributedString._InternalRunsSlice.updateEach(with:)( void *a1, uint64_t a2, void *a3)
{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)( a1,  a2,  a3,  &one-time initialization token for name,  (unint64_t *)&static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name,  (unint64_t *)&qword_18C5D2C08);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)( a1,  a2,  a3,  &one-time initialization token for name,  (unint64_t *)&static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name,  (unint64_t *)&qword_18C5D2C38);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)( a1,  a2,  a3,  &one-time initialization token for name,  (unint64_t *)&static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name,  (unint64_t *)&qword_18C5D2BD8);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)( a1,  a2,  a3,  &one-time initialization token for name,  (unint64_t *)&static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name,  (unint64_t *)&qword_18C5D2BA8);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)( a1,  a2,  a3,  &one-time initialization token for name,  (unint64_t *)&static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name,  (unint64_t *)&qword_18C5D2BB8);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)( a1,  a2,  a3,  &one-time initialization token for name,  (unint64_t *)&static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name,  (unint64_t *)&qword_18C5D2B98);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)( a1,  a2,  a3,  &one-time initialization token for name,  (unint64_t *)&static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name,  (unint64_t *)&qword_18C5D2BF8);
}

void *specialized AttributedString._InternalRunsSlice.updateEach(with:)( void *a1, uint64_t a2, uint64_t a3)
{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)( a1,  a2,  a3,  0xD000000000000012LL,  0x80000001839C8020LL);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)( a1,  a2,  a3,  0xD000000000000021LL,  0x80000001839CDE70LL);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)( a1,  a2,  a3,  0xD00000000000001FLL,  0x80000001839CC230LL);
}

void *specialized AttributedString._InternalRunsSlice.updateEach(with:)( void *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v6 = result + 8;
  uint64_t v5 = result[8];
  if (v5) {
    uint64_t v7 = result[10];
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (a2 < 0) {
    goto LABEL_391;
  }
  uint64_t v8 = a2;
  if (v7 < a2) {
    goto LABEL_391;
  }
  uint64_t v9 = a3;
  __int128 v10 = result;
  uint64_t v11 = result[9];
  uint64_t v12 = result[11];
  v181 = result;
  v170 = result + 8;
  if (v5)
  {
    if (*(_WORD *)(v5 + 16) && result[10] > a2)
    {
      uint64_t v22 = *(unsigned __int8 *)(v5 + 18);
      if (!*(_BYTE *)(v5 + 18))
      {
        unint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v19 = v8;
        unint64_t v18 = (void *)v5;
LABEL_35:
        uint64_t v31 = *((unsigned __int16 *)v18 + 8);
        if (*((_WORD *)v18 + 8))
        {
          uint64_t v32 = v18[3];
          BOOL v20 = __OFSUB__(v19, v32);
          uint64_t v33 = v19 - v32;
          uint64_t v9 = a3;
          uint64_t v6 = v170;
          if (v20) {
            goto LABEL_409;
          }
          if (__OFADD__(v33, 1LL)) {
            goto LABEL_410;
          }
          if (v33 + 1 <= 0)
          {
            uint64_t v15 = v11;
            uint64_t v31 = 0LL;
            goto LABEL_50;
          }

          if ((_DWORD)v31 != 1)
          {
            uint64_t v34 = v18 + 6;
            uint64_t v35 = 1LL;
            while (1)
            {
              uint64_t v36 = *v34;
              v34 += 3;
              uint64_t v19 = v33 - v36;
              if (__OFSUB__(v33, v36)) {
                goto LABEL_397;
              }
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_399;
              }
              if (v19 + 1 < 1) {
                goto LABEL_334;
              }
              ++v35;
              uint64_t v33 = v19;
              if (v31 == v35) {
                goto LABEL_48;
              }
            }
          }

          uint64_t v19 = v33;
        }

        else
        {
          uint64_t v9 = a3;
          uint64_t v6 = v170;
        }

{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  void *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  char v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  unint64_t v121;
  void *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  int v143;
  char v144;
  char v145;
  unint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  char v164;
  void *v165;
  uint64_t v166;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v174;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  void v181[2];
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  _OWORD v198[3];
  _OWORD v199[3];
  uint64_t v200;
  uint64_t v201;
  _OWORD v202[2];
  uint64_t v6 = result + 8;
  uint64_t v5 = result[8];
  if (v5) {
    uint64_t v7 = result[10];
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (a2 < 0) {
    goto LABEL_391;
  }
  uint64_t v8 = a2;
  if (v7 < a2) {
    goto LABEL_391;
  }
  uint64_t v9 = a3;
  __int128 v10 = result;
  uint64_t v11 = result[9];
  uint64_t v12 = result[11];
  uint64_t v180 = result;
  v169 = result + 8;
  if (v5)
  {
    if (*(_WORD *)(v5 + 16) && result[10] > a2)
    {
      uint64_t v22 = *(unsigned __int8 *)(v5 + 18);
      if (!*(_BYTE *)(v5 + 18))
      {
        unint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v19 = v8;
        unint64_t v18 = (void *)v5;
LABEL_35:
        uint64_t v31 = *((unsigned __int16 *)v18 + 8);
        if (*((_WORD *)v18 + 8))
        {
          uint64_t v32 = v18[3];
          BOOL v20 = __OFSUB__(v19, v32);
          uint64_t v33 = v19 - v32;
          uint64_t v9 = a3;
          uint64_t v6 = v169;
          if (v20) {
            goto LABEL_409;
          }
          if (__OFADD__(v33, 1LL)) {
            goto LABEL_410;
          }
          if (v33 + 1 <= 0)
          {
            uint64_t v15 = v11;
            uint64_t v31 = 0LL;
            goto LABEL_50;
          }

          if ((_DWORD)v31 != 1)
          {
            uint64_t v34 = v18 + 6;
            uint64_t v35 = 1LL;
            while (1)
            {
              uint64_t v36 = *v34;
              v34 += 3;
              uint64_t v19 = v33 - v36;
              if (__OFSUB__(v33, v36)) {
                goto LABEL_397;
              }
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_399;
              }
              if (v19 + 1 < 1) {
                goto LABEL_334;
              }
              ++v35;
              uint64_t v33 = v19;
              if (v31 == v35) {
                goto LABEL_48;
              }
            }
          }

          uint64_t v19 = v33;
        }

        else
        {
          uint64_t v9 = a3;
          uint64_t v6 = v169;
        }

LABEL_341:
                      __break(1u);
LABEL_342:
                      __break(1u);
LABEL_343:
                      __break(1u);
LABEL_344:
                      __break(1u);
                      goto LABEL_345;
                    }

                    uint64_t v37 = v157;
                    goto LABEL_263;
                  }

                  uint64_t v153 = 1LL;
                  uint64_t v37 = v155;
                }

                      __break(1u);
LABEL_342:
                      __break(1u);
LABEL_343:
                      __break(1u);
LABEL_344:
                      __break(1u);
                      goto LABEL_345;
                    }

                    uint64_t v37 = v156;
                    goto LABEL_263;
                  }

                  char v152 = 1LL;
                  uint64_t v37 = v154;
                }

void *specialized AttributedString._InternalRunsSlice.updateEach(with:)( void *result, uint64_t a2, void *a3, void *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v6 = result[8];
  if (v6) {
    uint64_t v7 = result[10];
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (a2 < 0 || (uint64_t v8 = a2, v7 < a2))
  {
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
    goto LABEL_408;
  }

  uint64_t v9 = a3;
  __int128 v10 = (void *)result[9];
  v176 = result + 8;
  uint64_t v11 = result[11];
  uint64_t v180 = result;
  if (!v6 || (*(_WORD *)(v6 + 16) ? (BOOL v12 = result[10] <= a2) : (BOOL v12 = 1), v12))
  {
    unint64_t v13 = swift_unknownObjectRetain_n();
    unint64_t v14 = specialized Rope._endPath.getter(v13);
    unint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    if (!v6) {
      goto LABEL_48;
    }
    goto LABEL_13;
  }

  uint64_t v17 = result[11];
  uint64_t v11 = *(unsigned __int8 *)(v6 + 18);
  if (*(_BYTE *)(v6 + 18))
  {
    unint64_t result = (void *)swift_unknownObjectRetain_n();
    uint64_t v16 = v8;
    uint64_t v18 = v6;
    while (1)
    {
      uint64_t v20 = *(unsigned __int16 *)(v18 + 16);
      if (!*(_WORD *)(v18 + 16)) {
        break;
      }
      uint64_t v21 = *(void *)(v18 + 40);
      BOOL v22 = __OFSUB__(v16, v21);
      uint64_t v23 = v16 - v21;
      if (v22) {
        goto LABEL_375;
      }
      if (__OFADD__(v23, 1LL)) {
        goto LABEL_376;
      }
      if (v23 + 1 <= 0)
      {
        uint64_t v20 = 0LL;
        goto LABEL_18;
      }

      if ((_DWORD)v20 == 1)
      {
        uint64_t v16 = v23;
        break;
      }

      char v24 = (uint64_t *)(v18 + 64);
      uint64_t v25 = 1LL;
      while (1)
      {
        uint64_t v26 = *v24;
        v24 += 3;
        uint64_t v16 = v23 - v26;
        if (__OFSUB__(v23, v26)) {
          goto LABEL_343;
        }
        if (__OFADD__(v16, 1LL))
        {
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
          goto LABEL_369;
        }

        if (v16 + 1 < 1) {
          break;
        }
        ++v25;
        uint64_t v23 = v16;
        if (v20 == v25) {
          goto LABEL_17;
        }
      }

      uint64_t v20 = v25;
      uint64_t v16 = v23;
LABEL_18:
      char v19 = (4 * *(_BYTE *)(v18 + 18) + 8) & 0x3C;
      uint64_t v11 = ((-15LL << v19) - 1) & v11 | (v20 << v19);
      uint64_t v15 = *(void *)(v18 + 24 + 24 * v20);
      swift_unknownObjectRetain();
      unint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v18 = v15;
      if (!*(_BYTE *)(v15 + 18)) {
        goto LABEL_33;
      }
    }

uint64_t AttributedString._InternalRunsSlice.updateEach(with:)( uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v172 = (uint64_t (*)(__int128 *, uint64_t, uint64_t, char *))result;
  uint64_t v5 = a3[8];
  if (v5) {
    uint64_t v6 = a3[10];
  }
  else {
    uint64_t v6 = 0LL;
  }
  if (a4 < 0 || v6 < a4)
  {
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
LABEL_408:
    __break(1u);
LABEL_409:
    __break(1u);
LABEL_410:
    __break(1u);
LABEL_411:
    __break(1u);
    goto LABEL_412;
  }

  uint64_t v9 = a3;
  uint64_t v10 = a3[9];
  uint64_t v11 = a3[11];
  uint64_t v179 = a3 + 8;
  if (!v5 || (*(_WORD *)(v5 + 16) ? (BOOL v12 = a3[10] <= a4) : (BOOL v12 = 1), v12))
  {
    unint64_t v13 = swift_unknownObjectRetain_n();
    unint64_t v14 = specialized Rope._endPath.getter(v13);
    unint64_t result = swift_unknownObjectRelease();
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    if (!v5) {
      goto LABEL_48;
    }
    goto LABEL_13;
  }

  uint64_t v17 = *(unsigned __int8 *)(v5 + 18);
  if (*(_BYTE *)(v5 + 18))
  {
    unint64_t result = swift_unknownObjectRetain_n();
    uint64_t v16 = a4;
    uint64_t v18 = (void *)v5;
    while (1)
    {
      uint64_t v20 = *((unsigned __int16 *)v18 + 8);
      if (!*((_WORD *)v18 + 8)) {
        break;
      }
      uint64_t v21 = v18[5];
      BOOL v22 = __OFSUB__(v16, v21);
      uint64_t v23 = v16 - v21;
      if (v22) {
        goto LABEL_375;
      }
      if (__OFADD__(v23, 1LL)) {
        goto LABEL_376;
      }
      if (v23 + 1 < 1)
      {
        uint64_t v20 = 0LL;
        goto LABEL_18;
      }

      if ((_DWORD)v20 == 1)
      {
        uint64_t v16 = v23;
        break;
      }

      char v24 = v18 + 8;
      uint64_t v25 = 1LL;
      while (1)
      {
        uint64_t v26 = *v24;
        v24 += 3;
        uint64_t v16 = v23 - v26;
        if (__OFSUB__(v23, v26)) {
          goto LABEL_343;
        }
        if (__OFADD__(v16, 1LL))
        {
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
LABEL_369:
          __break(1u);
LABEL_370:
          __break(1u);
LABEL_371:
          __break(1u);
          goto LABEL_372;
        }

        if (v16 + 1 < 1) {
          break;
        }
        ++v25;
        uint64_t v23 = v16;
        if (v20 == v25) {
          goto LABEL_17;
        }
      }

      uint64_t v20 = v25;
      uint64_t v16 = v23;
LABEL_18:
      char v19 = (4 * *((_BYTE *)v18 + 18) + 8) & 0x3C;
      uint64_t v17 = ((-15LL << v19) - 1) & v17 | (v20 << v19);
      uint64_t v15 = (void *)v18[3 * v20 + 3];
      swift_unknownObjectRetain();
      unint64_t result = swift_unknownObjectRelease();
      uint64_t v18 = v15;
      if (!*((_BYTE *)v15 + 18)) {
        goto LABEL_33;
      }
    }

LABEL_268:
                    char v154 = (4 * *((_BYTE *)v153 + 18) + 8) & 0x3C;
                    uint64_t v152 = ((-15LL << v154) - 1) & v152 | (v155 << v154);
                    uint64_t v15 = (void *)v153[3 * v155 + 3];
                    swift_unknownObjectRetain();
                    unint64_t result = swift_unknownObjectRelease();
                    uint64_t v153 = v15;
                    if (!*((_BYTE *)v15 + 18)) {
                      goto LABEL_294;
                    }
                  }
                }

                unint64_t result = swift_unknownObjectRetain_n();
                uint64_t v152 = 0LL;
                uint64_t v15 = (void *)v149;
LABEL_294:
                uint64_t v162 = *((unsigned __int16 *)v15 + 8);
                if (*((_WORD *)v15 + 8))
                {
                  uint64_t v163 = v15[3];
                  BOOL v22 = __OFSUB__(v34, v163);
                  uint64_t v164 = v34 - v163;
                  if (v22) {
                    goto LABEL_397;
                  }
                  if (__OFADD__(v164, 1LL)) {
                    goto LABEL_398;
                  }
                  if (v164 + 1 <= 0)
                  {
                    uint64_t v162 = 0LL;
                    goto LABEL_330;
                  }

                  if ((_DWORD)v162 != 1)
                  {
                    uint64_t v165 = v15[6];
                    uint64_t v34 = v164 - v165;
                    if (__OFSUB__(v164, v165)) {
                      goto LABEL_410;
                    }
                    if (__OFADD__(v34, 1LL)) {
                      goto LABEL_411;
                    }
                    if (v34 + 1 >= 1)
                    {
                      if ((_DWORD)v162 != 2)
                      {
                        v168 = v15 + 9;
                        uint64_t v169 = 2LL;
                        while (v162 != v169)
                        {
                          uint64_t v164 = v34 - *v168;
                          if (__OFSUB__(v34, *v168)) {
                            goto LABEL_388;
                          }
                          if (__OFADD__(v164, 1LL)) {
                            goto LABEL_389;
                          }
                          if (v164 + 1 < 1)
                          {
                            uint64_t v162 = v169;
                            goto LABEL_330;
                          }

                          ++v169;
                          v168 += 3;
                          uint64_t v34 = v164;
                          if (v162 == v169) {
                            goto LABEL_304;
                          }
                        }

                        goto LABEL_387;
                      }

                      goto LABEL_303;
                    }

                    uint64_t v162 = 1LL;
                    uint64_t v34 = v164;
LABEL_330:
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    unint64_t v36 = v152 & 0xFFFFFFFFFFFFF0FFLL | (v162 << 8);
LABEL_52:
                    swift_unknownObjectRetain();
                    uint64_t v35 = v151;
                    uint64_t v180 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v151, v36, (uint64_t)v15, v149, v11);
                    unint64_t result = swift_unknownObjectRelease_n();
                    uint64_t v33 = v178;
                    goto LABEL_53;
                  }
                }

                else
                {
LABEL_303:
                  uint64_t v164 = v34;
                }

                    uint64_t v155 = (4 * *((_BYTE *)v154 + 18) + 8) & 0x3C;
                    uint64_t v153 = ((-15LL << v155) - 1) & v153 | (v156 << v155);
                    unint64_t v13 = (void *)v154[3 * v156 + 3];
                    swift_unknownObjectRetain();
                    unint64_t result = swift_unknownObjectRelease();
                    char v154 = v13;
                    if (!*((_BYTE *)v13 + 18)) {
                      goto LABEL_294;
                    }
                  }
                }

                unint64_t result = swift_unknownObjectRetain_n();
                uint64_t v153 = 0LL;
                uint64_t v34 = a2;
                unint64_t v13 = (void *)v150;
LABEL_294:
                uint64_t v163 = *((unsigned __int16 *)v13 + 8);
                if (!*((_WORD *)v13 + 8))
                {
                  uint64_t v165 = v34;
                  uint64_t v7 = a3;
                  goto LABEL_305;
                }

                uint64_t v164 = v13[3];
                uint64_t v20 = __OFSUB__(v34, v164);
                uint64_t v165 = v34 - v164;
                uint64_t v7 = a3;
                if (v20) {
                  goto LABEL_399;
                }
                if (__OFADD__(v165, 1LL)) {
                  goto LABEL_400;
                }
                if (v165 + 1 <= 0)
                {
                  uint64_t v163 = 0LL;
                }

                else
                {
                  if ((_DWORD)v163 == 1) {
                    goto LABEL_305;
                  }
                  char v166 = v13[6];
                  uint64_t v34 = v165 - v166;
                  if (__OFSUB__(v165, v166)) {
                    goto LABEL_412;
                  }
                  if (__OFADD__(v34, 1LL)) {
                    goto LABEL_413;
                  }
                  if (v34 + 1 < 1)
                  {
                    uint64_t v163 = 1LL;
                    uint64_t v34 = v165;
                  }

                  else
                  {
                    if ((_DWORD)v163 != 2)
                    {
                      uint64_t v169 = v13 + 9;
                      uint64_t v170 = 2LL;
                      while (v163 != v170)
                      {
                        uint64_t v165 = v34 - *v169;
                        if (__OFSUB__(v34, *v169)) {
                          goto LABEL_390;
                        }
                        if (__OFADD__(v165, 1LL)) {
                          goto LABEL_391;
                        }
                        if (v165 + 1 < 1)
                        {
                          uint64_t v163 = v170;
                          goto LABEL_332;
                        }

                        ++v170;
                        v169 += 3;
                        uint64_t v34 = v165;
                        if (v163 == v170) {
                          goto LABEL_305;
                        }
                      }

                      goto LABEL_389;
                    }

                    v165 -= v166;
LABEL_305:
                    if (v165) {
                      goto LABEL_396;
                    }
                    uint64_t v34 = 0LL;
                  }
                }

                __break(1u);
                goto LABEL_269;
              }

              goto LABEL_265;
            }

        __break(1u);
        goto LABEL_269;
      }
    }

        __break(1u);
        goto LABEL_269;
      }
    }

        __break(1u);
        goto LABEL_269;
      }
    }

    __break(1u);
    goto LABEL_269;
  }

  uint64_t v18 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  uint64_t v20 = (unsigned __int8 *)v18;
  uint64_t v21 = v19;
  BOOL v22 = (unint64_t)&v18[v19];
  if ((v15 & 1) == 0)
  {
    if (v19 <= 0)
    {
      uint64_t v48 = (unsigned __int8 *)v18;
      goto LABEL_95;
    }

    uint64_t v46 = 0LL;
    uint64_t v47 = v19;
    while (1)
    {
      if (v46 < 0 || (uint64_t v32 = v47 < 1, --v47, v32))
      {
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
        goto LABEL_253;
      }

      uint64_t v48 = (unsigned __int8 *)&v18[++v46];
    }

                            __break(1u);
                            goto LABEL_269;
                          }
                        }
                      }
                    }
                  }

                  uint64_t v10 = v68;
                }

      if (v125)
      {
        if (v163 != v158) {
          uint64_t v116 = (void *)(*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
        }
        if ([v125 isEqual:v116])
        {
          uint64_t v133 = (os_log_s *)_NSInflectionLog_log;
          if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_INFO)) {
            goto LABEL_282;
          }
          v259.location = a3;
          v259.length = v163;
          uint64_t v134 = NSStringFromRange(v259);
          *(_DWORD *)buf = 138543362;
          *(void *)&buf[4] = v134;
          uint64_t v135 = "Useful inflection but no replacement in range %{public}@";
        }

        else
        {
          (*(void (**)(void))(*(void *)(a1 + 120) + 16LL))();
          uint64_t v133 = (os_log_s *)_NSInflectionLog_log;
          if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_INFO)) {
            goto LABEL_282;
          }
          v260.location = a3;
          v260.length = v163;
          uint64_t v136 = NSStringFromRange(v260);
          *(_DWORD *)buf = 138543362;
          *(void *)&buf[4] = v136;
          uint64_t v135 = "Useful inflection with new replacement in range %{public}@";
        }

        _os_log_impl(&dword_182EB1000, v133, OS_LOG_TYPE_INFO, v135, buf, 0xCu);
LABEL_282:
        uint64_t v123 = 1;
        unint64_t v121 = [v125 length];
LABEL_283:

        if (v123) {
          objc_msgSend( *(id *)(a1 + 48),  "addObject:",  +[NSValue valueWithRange:](NSValue, "valueWithRange:", a3, v121));
        }
        goto LABEL_285;
      }

LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
  return result;
}

char *specialized BidirectionalCollection.index(_:offsetBy:)@<X0>( char **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    uint64_t v8 = (char **)a1[3];
    uint64_t v9 = (char **)a1[4];
    unint64_t result = a1[1];
    uint64_t v11 = v6[2];
    BOOL v12 = *v6;
    if (!a2) {
      goto LABEL_39;
    }
    while (1)
    {
      if (__OFADD__(v12++, 1LL))
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        return result;
      }

      if (v12 == v11)
      {
        uint64_t v6 = (char **)((char *)v8 + 1);
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_41;
        }
        BOOL v12 = v11;
        if (v6 != v9)
        {
          char v14 = *(_BYTE *)(a3 + 24);
          unint64_t result = (char *)objc_msgSend(*(id *)(a3 + 16), sel_rangeAtIndex_, v6);
          uint64_t v11 = &result[v15];
          BOOL v16 = __OFADD__(result, v15);
          if ((v14 & 1) != 0)
          {
            if (v16) {
              goto LABEL_49;
            }
            uint64_t v8 = v6;
            BOOL v12 = result;
          }

          else
          {
            if (v16) {
              goto LABEL_51;
            }
            uint64_t v8 = v6;
            BOOL v12 = result;
            if ((uint64_t)v11 < (uint64_t)result)
            {
              __break(1u);
              break;
            }
          }
        }
      }

      if (!--v5) {
        goto LABEL_39;
      }
    }
  }

  uint64_t v17 = 0LL;
  uint64_t v11 = v6[2];
  uint64_t v8 = (char **)v6[3];
  BOOL v12 = *v6;
  unint64_t result = v6[1];
  uint64_t v18 = v8;
  char v19 = *v6;
  do
  {
    if (v19 != result)
    {
      BOOL v12 = v19 - 1;
      if (__OFSUB__(v19, 1LL)) {
        goto LABEL_42;
      }
LABEL_21:
      char v19 = v12;
      goto LABEL_22;
    }

    if (v18)
    {
      uint64_t v8 = (char **)((char *)v18 - 1);
      if (__OFSUB__(v18, 1LL)) {
        goto LABEL_43;
      }
      char v20 = *(_BYTE *)(a3 + 24);
      unint64_t result = (char *)objc_msgSend(*(id *)(a3 + 16), sel_rangeAtIndex_, (char *)v18 - 1);
      uint64_t v11 = &result[v21];
      BOOL v22 = __OFADD__(result, v21);
      if ((v20 & 1) != 0)
      {
        if (v22) {
          goto LABEL_45;
        }
      }

      else
      {
        if (v22) {
          goto LABEL_47;
        }
      }

      BOOL v12 = v11 - 1;
      if (__OFSUB__(v11, 1LL)) {
        goto LABEL_44;
      }
      uint64_t v18 = v8;
      goto LABEL_21;
    }

    char v19 = result;
LABEL_22:
    --v17;
  }

  while (v17 > v5);
  uint64_t v9 = (char **)v6[4];
LABEL_39:
  *a4 = v12;
  a4[1] = result;
  a4[2] = v11;
  a4[3] = (char *)v8;
  a4[4] = (char *)v9;
  return result;
}

unint64_t specialized BidirectionalCollection.index(_:offsetBy:)@<X0>( unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v7 = a5;
  if ((a5 & 0x8000000000000000LL) == 0)
  {
    *(void *)&__int128 v210 = result;
    *((void *)&v210 + 1) = a2;
    *(void *)&__int128 v211 = a3;
    *((void *)&v211 + 1) = a4;
    if (a5)
    {
      uint64_t v8 = a6;
      do
      {
        specialized Collection.formIndex(after:)((unint64_t *)&v210);
        --v7;
      }

      while (v7);
      a2 = *((void *)&v210 + 1);
      unint64_t result = v210;
      a4 = *((void *)&v211 + 1);
      a3 = v211;
      a6 = v8;
    }

uint64_t *specialized BidirectionalCollection.index(_:offsetBy:)@<X0>( uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7 = *result;
  unint64_t v8 = result[1];
  uint64_t v9 = result[2];
  uint64_t v10 = result[3];
  uint64_t v11 = result[4];
  char v84 = a3;
  if (a2 < 0)
  {
    uint64_t v44 = a5;
    uint64_t v45 = 0LL;
    while (1)
    {
      uint64_t v47 = a3[8];
      if (v47)
      {
        if (v11 != a3[10]) {
          goto LABEL_124;
        }
      }

      else if (v11)
      {
LABEL_124:
        uint64_t v60 = a3[11];
        uint64_t v86 = v7;
        unint64_t v87 = v8;
        uint64_t v88 = v9;
        BOOL v15 = __OFSUB__(v10--, 1LL);
        if (v15) {
          goto LABEL_179;
        }
        if (v7 != v60) {
          goto LABEL_180;
        }
        uint64_t v80 = v7;
        if (v47)
        {
          unint64_t v61 = *(unsigned __int8 *)(v47 + 18);
          unint64_t result = (uint64_t *)swift_unknownObjectRetain();
          if (v8 <= v61) {
            goto LABEL_181;
          }
        }

        else if (!v8)
        {
          goto LABEL_181;
        }

        if (v9)
        {
          char v62 = (4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C;
          if (((v8 >> v62) & 0xF) != 0)
          {
            unint64_t v8 = ((((v8 >> v62) & 0xF) - 1) << v62) | ((-15LL << v62) - 1) & v8;
            unint64_t v87 = v8;
            uint64_t v44 = a5;
            goto LABEL_137;
          }
        }

        int v63 = *(unsigned __int8 *)(v47 + 18);
        char v64 = (4 * v63 + 8) & 0x3C;
        uint64_t v65 = (v8 >> v64) & 0xF;
        uint64_t v85 = v65;
        if (v63)
        {
          uint64_t v6 = v47 + 16;
          swift_unknownObjectRetain();
          char v66 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v47 + 16, v47 + 24, &v85, (uint64_t)&v86, v63);
          unint64_t result = (uint64_t *)swift_unknownObjectRelease();
          if ((v66 & 1) == 0) {
            goto LABEL_190;
          }
          if (v86 != v7) {
            goto LABEL_182;
          }
          unint64_t v8 = v87;
          uint64_t v9 = v88;
          uint64_t v44 = a5;
          if (v88)
          {
LABEL_137:
            unint64_t v67 = v9 + 24 * ((v8 >> ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C)) & 0xF);
            unint64_t v68 = *(void *)(v67 + 24);
            uint64_t v6 = *(void *)(v67 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_141:
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
            BOOL v15 = __OFSUB__(v11, v68);
            v11 -= v68;
            if (v15) {
              goto LABEL_183;
            }
            uint64_t v46 = a2;
            a3 = v84;
            goto LABEL_95;
          }
        }

        else
        {
          if (!v65) {
            goto LABEL_190;
          }
          unint64_t v8 = ((v65 - 1) << v64) | ((-15LL << v64) - 1) & v8;
          unint64_t v87 = v8;
          uint64_t v9 = v47;
          uint64_t v44 = a5;
          if (v47) {
            goto LABEL_137;
          }
        }

        swift_unknownObjectRetain();
        unint64_t v68 = specialized Rope._Node.subscript.getter(v8, v47);
        uint64_t v6 = v69;
        swift_unknownObjectRelease();
        goto LABEL_141;
      }

      if (v47) {
        uint64_t v48 = a3[10];
      }
      else {
        uint64_t v48 = 0LL;
      }
      if (v44 < 0 || v48 < v44) {
        goto LABEL_188;
      }
      uint64_t v80 = a3[11];
      if (v47)
      {
        uint64_t v49 = a3[9];
        uint64_t v50 = *(unsigned __int8 *)(v47 + 18);
        if (*(_WORD *)(v47 + 16))
        {
          if (*(_BYTE *)(v47 + 18))
          {
            unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
            uint64_t v6 = a5;
            uint64_t v51 = v47;
            while (1)
            {
              uint64_t v54 = *(unsigned __int16 *)(v51 + 16);
              if (!*(_WORD *)(v51 + 16)) {
                goto LABEL_201;
              }
              uint64_t v55 = *(void *)(v51 + 40);
              BOOL v15 = __OFSUB__(v6, v55);
              uint64_t v56 = v6 - v55;
              if (v15) {
                goto LABEL_168;
              }
              if (v56 <= 0)
              {
                uint64_t v52 = 0LL;
              }

              else
              {
                if ((_DWORD)v54 == 1) {
                  goto LABEL_203;
                }
                uint64_t v57 = *(void *)(v51 + 64);
                uint64_t v6 = v56 - v57;
                if (__OFSUB__(v56, v57)) {
                  goto LABEL_178;
                }
                if (v6 < 1)
                {
                  uint64_t v6 = v56;
                  uint64_t v52 = 1LL;
                }

                else
                {
                  if ((_DWORD)v54 == 2) {
                    goto LABEL_203;
                  }
                  uint64_t v58 = (void *)(v51 + 88);
                  uint64_t v52 = 2LL;
                  while (1)
                  {
                    if (v54 == v52)
                    {
                      __break(1u);
LABEL_164:
                      __break(1u);
                      goto LABEL_165;
                    }

                    uint64_t v59 = v6 - *v58;
                    if (__OFSUB__(v6, *v58)) {
                      goto LABEL_164;
                    }
                    if (v59 < 1) {
                      break;
                    }
                    ++v52;
                    v58 += 3;
                    uint64_t v6 = v59;
                    if (v54 == v52) {
                      goto LABEL_203;
                    }
                  }
                }
              }

              char v53 = (4 * *(_BYTE *)(v51 + 18) + 8) & 0x3C;
              uint64_t v50 = ((-15LL << v53) - 1) & v50 | (v52 << v53);
              uint64_t v9 = *(void *)(v51 + 24 + 24 * v52);
              swift_unknownObjectRetain();
              unint64_t result = (uint64_t *)swift_unknownObjectRelease();
              uint64_t v51 = v9;
              if (!*(_BYTE *)(v9 + 18)) {
                goto LABEL_145;
              }
            }
          }

          unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
          uint64_t v50 = 0LL;
          uint64_t v6 = a5;
          uint64_t v9 = v47;
LABEL_145:
          uint64_t v70 = *(unsigned __int16 *)(v9 + 16);
          if (!*(_WORD *)(v9 + 16)) {
            goto LABEL_204;
          }
          uint64_t v71 = *(void *)(v9 + 24);
          BOOL v15 = __OFSUB__(v6, v71);
          uint64_t v72 = v6 - v71;
          if (v15) {
            goto LABEL_191;
          }
          if (v72 <= 0)
          {
            uint64_t v75 = 0LL;
          }

          else
          {
            if ((_DWORD)v70 == 1) {
              goto LABEL_206;
            }
            uint64_t v73 = *(void *)(v9 + 48);
            uint64_t v6 = v72 - v73;
            if (__OFSUB__(v72, v73)) {
              goto LABEL_196;
            }
            if (v6 >= 1)
            {
              if ((_DWORD)v70 == 2) {
                goto LABEL_206;
              }
              char v74 = (void *)(v9 + 72);
              uint64_t v75 = 2LL;
              while (v70 != v75)
              {
                uint64_t v76 = v6 - *v74;
                if (__OFSUB__(v6, *v74)) {
                  goto LABEL_175;
                }
                if (v76 < 1) {
                  goto LABEL_160;
                }
                ++v75;
                v74 += 3;
                uint64_t v6 = v76;
                if (v70 == v75) {
                  goto LABEL_206;
                }
              }

              goto LABEL_174;
            }

            uint64_t v6 = v72;
            uint64_t v75 = 1LL;
          }

LABEL_165:
                  __break(1u);
LABEL_166:
                  __break(1u);
LABEL_167:
                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
                  goto LABEL_170;
                }

                uint64_t v6 = v35;
                goto LABEL_40;
              }

              uint64_t v31 = 1LL;
              uint64_t v6 = v33;
            }

                          swift_bridgeObjectRelease();
LABEL_166:
                          v274 = (unsigned __int8 *)v337._nsError._reserved;
                          v275 = v337._nsError._code;
                          if (*(_BYTE *)v337._nsError._reserved != 32) {
                            goto LABEL_201;
                          }
                          v276 = ~(uint64_t)v337._nsError._reserved + v337._nsError._code;
                          while (v276)
                          {
                            v277 = *++v274;
                            --v276;
                            if (v277 != 32) {
                              goto LABEL_201;
                            }
                          }

char *specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)@<X0>( char **a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a2;
  if (a2 < 0)
  {
    uint64_t v20 = 0LL;
    char v21 = a1[2];
    uint64_t v22 = a1[3];
    uint64_t v23 = *a1;
    unint64_t result = a1[1];
    int v24 = (char *)*a3;
    uint64_t v25 = a1[3];
    uint64_t v26 = *a1;
    while (1)
    {
      if (v26 == v24) {
        goto LABEL_41;
      }
      if (v26 == result)
      {
        if (!v22)
        {
          uint64_t v26 = result;
          goto LABEL_24;
        }

        BOOL v15 = __OFSUB__(v22--, 1LL);
        if (v15) {
          goto LABEL_47;
        }
        char v27 = *(_BYTE *)(a4 + 24);
        unint64_t result = (char *)objc_msgSend(*(id *)(a4 + 16), sel_rangeAtIndex_, v22);
        char v21 = &result[v28];
        BOOL v29 = __OFADD__(result, v28);
        if ((v27 & 1) != 0)
        {
          if (v29) {
            goto LABEL_49;
          }
        }

        else
        {
          if (v29) {
            goto LABEL_51;
          }
        }

        uint64_t v23 = v21 - 1;
        if (__OFSUB__(v21, 1LL)) {
          goto LABEL_48;
        }
        uint64_t v25 = v22;
      }

      else
      {
        uint64_t v23 = v26 - 1;
        if (__OFSUB__(v26, 1LL))
        {
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
          return result;
        }
      }

      uint64_t v26 = v23;
LABEL_24:
      if (--v20 <= v6)
      {
        char v30 = a1[4];
        *(void *)a5 = v23;
        *(void *)(a5 + 8) = result;
        *(void *)(a5 + 16) = v21;
        *(void *)(a5 + 24) = v25;
        *(void *)(a5 + 32) = v30;
        goto LABEL_43;
      }
    }
  }

  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  unint64_t result = a1[1];
  uint64_t v12 = a1[2];
  uint64_t v13 = *a1;
  if (a2)
  {
    uint64_t v14 = (char *)*a3;
    while (v13 != v14)
    {
      BOOL v15 = __OFADD__(v13++, 1LL);
      if (v15)
      {
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }

      if (v13 == v12)
      {
        unint64_t v16 = v9 + 1;
        if (__OFADD__(v9, 1LL)) {
          goto LABEL_45;
        }
        uint64_t v13 = v12;
        if (v16 != v10)
        {
          char v17 = *(_BYTE *)(a4 + 24);
          unint64_t result = (char *)objc_msgSend(*(id *)(a4 + 16), sel_rangeAtIndex_, v9 + 1);
          uint64_t v12 = &result[v18];
          BOOL v19 = __OFADD__(result, v18);
          if ((v17 & 1) != 0)
          {
            if (v19) {
              goto LABEL_53;
            }
            uint64_t v9 = v16;
            uint64_t v13 = result;
          }

          else
          {
            if (v19) {
              goto LABEL_55;
            }
            uint64_t v9 = v16;
            uint64_t v13 = result;
            if ((uint64_t)v12 < (uint64_t)result)
            {
              __break(1u);
              goto LABEL_20;
            }
          }
        }
      }

      if (!--v6) {
        goto LABEL_20;
      }
    }

unint64_t specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)@<X0>( unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  unint64_t v8 = v7;
  uint64_t v10 = a5;
  if ((a5 & 0x8000000000000000LL) == 0)
  {
    *(void *)&__int128 v206 = result;
    *((void *)&v206 + 1) = a2;
    *(void *)&__int128 v207 = a3;
    *((void *)&v207 + 1) = a4;
    if (!a5) {
      goto LABEL_196;
    }
    uint64_t v11 = a7;
    while (((unint64_t)v206 ^ a6) >= 0x400)
    {
      unint64_t result = (unint64_t)specialized Collection.formIndex(after:)((unint64_t *)&v206);
      if (!--v10)
      {
        a2 = *((void *)&v206 + 1);
        unint64_t result = v206;
        a4 = *((void *)&v207 + 1);
        a3 = v207;
        a7 = v11;
        goto LABEL_196;
      }
    }

    *uint64_t v11 = 0LL;
    v11[1] = 0LL;
    v11[2] = 0LL;
    v11[3] = 2LL;
    return result;
  }

  unint64_t v136 = a7;
  uint64_t v12 = 0LL;
  uint64_t v141 = a5;
  unint64_t v142 = a6 >> 10;
  unint64_t v137 = (uint64_t *)&v189;
  uint64_t v160 = (__int128 *)&v181;
  unint64_t v161 = &v192;
  uint64_t v139 = v7;
  do
  {
    unint64_t v13 = result >> 10;
    if (result >> 10 == v142)
    {
      unint64_t v134 = v136;
      *unint64_t v136 = 0LL;
      v134[1] = 0LL;
      v134[2] = 0LL;
      v134[3] = 2LL;
      return result;
    }

    __int128 v14 = v8[11];
    __int128 v216 = v8[10];
    __int128 v217 = v14;
    uint64_t v15 = *((void *)v8 + 25);
    uint64_t v218 = *((void *)v8 + 24);
    __int128 v16 = v8[7];
    __int128 v212 = v8[6];
    __int128 v213 = v16;
    __int128 v17 = v8[9];
    __int128 v214 = v8[8];
    __int128 v215 = v17;
    __int128 v18 = v8[3];
    __int128 v208 = v8[2];
    __int128 v209 = v18;
    __int128 v19 = v8[5];
    __int128 v210 = v8[4];
    __int128 v211 = v19;
    __int128 v20 = v8[1];
    __int128 v206 = *v8;
    __int128 v207 = v20;
    uint64_t v162 = v15;
    uint64_t v205 = v15;
    if (*((void *)&v214 + 1) >> 10 >= v13 || *((void *)&v216 + 1) >> 10 < v13) {
      goto LABEL_206;
    }
    uint64_t v171 = *(void *)(v162 + 16);
    if (!v171) {
      goto LABEL_207;
    }
    uint64_t v21 = v206;
    uint64_t v22 = *(void *)(v206 + 64);
    int64_t v23 = *(void *)(v206 + 80);
    if (v22) {
      uint64_t v24 = *(void *)(v206 + 80);
    }
    else {
      uint64_t v24 = 0LL;
    }
    if (result < 0x800) {
      goto LABEL_208;
    }
    uint64_t v25 = (result >> 11) - 1;
    if (v24 < v25) {
      goto LABEL_208;
    }
    uint64_t v168 = *(void *)(v206 + 88);
    uint64_t v165 = v206;
    unint64_t v155 = a4;
    unint64_t v156 = result;
    unint64_t v153 = a2;
    unint64_t v154 = a3;
    uint64_t v149 = v12;
    unint64_t v150 = *((void *)&v214 + 1);
    unint64_t v151 = *((void *)&v214 + 1) >> 10;
    unint64_t v152 = result >> 10;
    unint64_t v147 = *((void *)&v215 + 1);
    unint64_t v148 = v215;
    unint64_t v146 = v216;
    unint64_t v157 = result >> 11;
    if (!v22)
    {
      outlined retain of AttributedString.Runs((uint64_t)&v206);
      uint64_t v27 = 0LL;
      uint64_t v39 = 0LL;
      unint64_t v166 = 0LL;
      uint64_t v40 = 0LL;
      goto LABEL_72;
    }

    uint64_t v173 = *(void *)(v206 + 72);
    uint64_t v26 = *(unsigned __int8 *)(v22 + 18);
    if ((uint64_t)(result >> 11) <= v23 && *(_WORD *)(v22 + 16))
    {
      if (*(_BYTE *)(v22 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v206);
        uint64_t v27 = v25;
        uint64_t v28 = v22;
        while (1)
        {
          uint64_t v31 = *(unsigned __int16 *)(v28 + 16);
          if (!*(_WORD *)(v28 + 16)) {
            goto LABEL_23;
          }
          uint64_t v32 = *(void *)(v28 + 40);
          uint64_t v33 = v27 - v32;
          if (__OFSUB__(v27, v32)) {
            goto LABEL_202;
          }
          if (__OFADD__(v33, 1LL)) {
            goto LABEL_203;
          }
          if (v33 + 1 <= 0)
          {
            uint64_t v31 = 0LL;
            goto LABEL_24;
          }

          if ((_DWORD)v31 == 1) {
            break;
          }
          uint64_t v34 = *(void *)(v28 + 64);
          BOOL v35 = __OFSUB__(v33, v34);
          uint64_t v36 = v33 - v34;
          if (v35) {
            goto LABEL_204;
          }
          if (__OFADD__(v36, 1LL)) {
            goto LABEL_205;
          }
          if (v36 + 1 < 1)
          {
            uint64_t v31 = 1LL;
            uint64_t v27 = v33;
            goto LABEL_24;
          }

          if ((_DWORD)v31 == 2)
          {
            uint64_t v27 = v36;
            goto LABEL_23;
          }

          uint64_t v37 = (void *)(v28 + 88);
          uint64_t v38 = 2LL;
          while (1)
          {
            if (v31 == v38)
            {
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
LABEL_200:
              __break(1u);
              goto LABEL_201;
            }

            uint64_t v27 = v36 - *v37;
            if (__OFSUB__(v36, *v37)) {
              goto LABEL_199;
            }
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_200;
            }
            if (v27 + 1 < 1) {
              break;
            }
            ++v38;
            v37 += 3;
            uint64_t v36 = v27;
            if (v31 == v38) {
              goto LABEL_23;
            }
          }

          uint64_t v31 = v38;
          uint64_t v27 = v36;
LABEL_24:
          char v29 = (4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C;
          uint64_t v26 = ((-15LL << v29) - 1) & v26 | (v31 << v29);
          uint64_t v30 = *(void *)(v28 + 24 + 24 * v31);
          swift_unknownObjectRetain();
          unint64_t result = swift_unknownObjectRelease();
          uint64_t v28 = v30;
          if (!*(_BYTE *)(v30 + 18)) {
            goto LABEL_48;
          }
        }

        v27 -= v32;
LABEL_23:
        if (!v27) {
          goto LABEL_24;
        }
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        unint64_t result = swift_unknownObjectRelease();
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
        return result;
      }

      swift_unknownObjectRetain_n();
      unint64_t result = outlined retain of AttributedString.Runs((uint64_t)&v206);
      uint64_t v26 = 0LL;
      uint64_t v27 = v25;
      uint64_t v30 = v22;
LABEL_48:
      uint64_t v44 = *(unsigned __int16 *)(v30 + 16);
      uint64_t v167 = v30;
      if (!(_DWORD)v44) {
        goto LABEL_57;
      }
      uint64_t v45 = *(void *)(v30 + 24);
      BOOL v35 = __OFSUB__(v27, v45);
      uint64_t v46 = v27 - v45;
      if (v35) {
        goto LABEL_224;
      }
      if (__OFADD__(v46, 1LL)) {
        goto LABEL_225;
      }
      if (v46 + 1 <= 0)
      {
        uint64_t v44 = 0LL;
      }

      else
      {
        if ((_DWORD)v44 == 1)
        {
LABEL_58:
          if (v46) {
            goto LABEL_221;
          }
          uint64_t v27 = 0LL;
          goto LABEL_70;
        }

        uint64_t v47 = *(void *)(v167 + 48);
        uint64_t v27 = v46 - v47;
        if (__OFSUB__(v46, v47)) {
          goto LABEL_227;
        }
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_228;
        }
        if (v27 + 1 < 1)
        {
          uint64_t v44 = 1LL;
          uint64_t v27 = v46;
        }

        else
        {
          if ((_DWORD)v44 == 2)
          {
LABEL_57:
            uint64_t v46 = v27;
            goto LABEL_58;
          }

          uint64_t v48 = (void *)(v167 + 72);
          uint64_t v49 = 2LL;
          while (1)
          {
            if (v44 == v49) {
              goto LABEL_218;
            }
            uint64_t v46 = v27 - *v48;
            if (__OFSUB__(v27, *v48)) {
              goto LABEL_219;
            }
            if (__OFADD__(v46, 1LL)) {
              goto LABEL_220;
            }
            if (v46 + 1 < 1) {
              break;
            }
            ++v49;
            v48 += 3;
            uint64_t v27 = v46;
            if (v44 == v49) {
              goto LABEL_58;
            }
          }

          uint64_t v44 = v49;
        }
      }

uint64_t *specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)@<X0>( uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  unint64_t v85 = a4;
  uint64_t v7 = *result;
  unint64_t v8 = result[1];
  uint64_t v9 = result[2];
  uint64_t v10 = result[3];
  uint64_t v11 = result[4];
  uint64_t v84 = a2;
  if (a2 < 0)
  {
LABEL_94:
    uint64_t v49 = a6;
    uint64_t v50 = 0LL;
    while (1)
    {
      if (v11 == *(void *)(a3 + 32)) {
        goto LABEL_165;
      }
      uint64_t v51 = a4[8];
      if (v51)
      {
        if (v11 != a4[10]) {
          goto LABEL_127;
        }
      }

      else if (v11)
      {
LABEL_127:
        uint64_t v64 = a4[11];
        uint64_t v91 = v7;
        unint64_t v92 = v8;
        uint64_t v93 = v9;
        BOOL v15 = __OFSUB__(v10--, 1LL);
        if (v15) {
          goto LABEL_183;
        }
        if (v7 != v64) {
          goto LABEL_184;
        }
        if (v51)
        {
          unint64_t v65 = *(unsigned __int8 *)(v51 + 18);
          unint64_t result = (uint64_t *)swift_unknownObjectRetain();
          if (v8 <= v65) {
            goto LABEL_185;
          }
        }

        else if (!v8)
        {
          goto LABEL_185;
        }

        uint64_t v89 = v7;
        if (v9)
        {
          char v66 = (4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C;
          if (((v8 >> v66) & 0xF) != 0)
          {
            unint64_t v8 = ((((v8 >> v66) & 0xF) - 1) << v66) | ((-15LL << v66) - 1) & v8;
            unint64_t v92 = v8;
            goto LABEL_140;
          }
        }

        int v67 = *(unsigned __int8 *)(v51 + 18);
        char v68 = (4 * v67 + 8) & 0x3C;
        uint64_t v69 = (v8 >> v68) & 0xF;
        uint64_t v90 = v69;
        if (v67)
        {
          uint64_t v7 = v51 + 16;
          swift_unknownObjectRetain();
          char v70 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v51 + 16, v51 + 24, &v90, (uint64_t)&v91, v67);
          unint64_t result = (uint64_t *)swift_unknownObjectRelease();
          if ((v70 & 1) == 0) {
            goto LABEL_193;
          }
          if (v91 != v89) {
            goto LABEL_186;
          }
          unint64_t v8 = v92;
          uint64_t v9 = v93;
          if (v93)
          {
LABEL_140:
            unint64_t v71 = v9 + 24 * ((v8 >> ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C)) & 0xF);
            unint64_t v72 = *(void *)(v71 + 24);
            uint64_t v7 = *(void *)(v71 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_144:
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
            BOOL v15 = __OFSUB__(v11, v72);
            v11 -= v72;
            if (v15) {
              goto LABEL_187;
            }
            uint64_t v49 = a6;
            a2 = v84;
            a4 = v85;
            goto LABEL_97;
          }
        }

        else
        {
          if (!v69) {
            goto LABEL_193;
          }
          unint64_t v8 = ((v69 - 1) << v68) | ((-15LL << v68) - 1) & v8;
          unint64_t v92 = v8;
          uint64_t v9 = v51;
          if (v51) {
            goto LABEL_140;
          }
        }

        swift_unknownObjectRetain();
        unint64_t v72 = specialized Rope._Node.subscript.getter(v8, v51);
        uint64_t v7 = v73;
        swift_unknownObjectRelease();
        goto LABEL_144;
      }

      if (v51) {
        uint64_t v52 = a4[10];
      }
      else {
        uint64_t v52 = 0LL;
      }
      if (v49 < 0 || v52 < v49) {
        goto LABEL_188;
      }
      uint64_t v89 = a4[11];
      if (v51)
      {
        uint64_t v53 = a4[9];
        uint64_t v54 = *(unsigned __int8 *)(v51 + 18);
        if (*(_WORD *)(v51 + 16))
        {
          if (*(_BYTE *)(v51 + 18))
          {
            unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
            uint64_t v7 = v49;
            uint64_t v55 = v51;
            while (1)
            {
              uint64_t v58 = *(unsigned __int16 *)(v55 + 16);
              if (!*(_WORD *)(v55 + 16)) {
                goto LABEL_204;
              }
              uint64_t v59 = *(void *)(v55 + 40);
              BOOL v15 = __OFSUB__(v7, v59);
              uint64_t v60 = v7 - v59;
              if (v15) {
                goto LABEL_169;
              }
              if (v60 <= 0)
              {
                uint64_t v56 = 0LL;
              }

              else
              {
                if ((_DWORD)v58 == 1) {
                  goto LABEL_206;
                }
                uint64_t v61 = *(void *)(v55 + 64);
                uint64_t v7 = v60 - v61;
                if (__OFSUB__(v60, v61)) {
                  goto LABEL_175;
                }
                if (v7 >= 1)
                {
                  if ((_DWORD)v58 == 2) {
                    goto LABEL_206;
                  }
                  uint64_t v62 = (void *)(v55 + 88);
                  uint64_t v56 = 2LL;
                  while (v58 != v56)
                  {
                    uint64_t v63 = v7 - *v62;
                    if (__OFSUB__(v7, *v62)) {
                      goto LABEL_168;
                    }
                    if (v63 < 1) {
                      goto LABEL_111;
                    }
                    ++v56;
                    v62 += 3;
                    uint64_t v7 = v63;
                    if (v58 == v56) {
                      goto LABEL_206;
                    }
                  }

                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
                  goto LABEL_170;
                }

                uint64_t v7 = v60;
                uint64_t v56 = 1LL;
              }

uint64_t AttributedString._InternalRunsSlice.updateEach(when:with:)( uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, void (*a3)(uint64_t *, uint64_t, uint64_t), uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a6;
  uint64_t v9 = a5;
  AttributedString._InternalRunsSlice.startIndex.getter(a5, a6, (unint64_t *)&v73);
  uint64_t v10 = v75;
  __int128 v70 = v73;
  __int128 v71 = v74;
  uint64_t v72 = v75;
  uint64_t result = (uint64_t)AttributedString._InternalRunsSlice.endIndex.getter(v9, v8, a7, v76);
  if (v10 >= v76[4]) {
    return result;
  }
  unint64_t v12 = *((void *)&v73 + 1);
  uint64_t v13 = v73;
  uint64_t v14 = v74;
  uint64_t v64 = a7;
  uint64_t v65 = v8;
  char v66 = v9;
  while (1)
  {
    if (v13 != v9[11]) {
      goto LABEL_101;
    }
    if (v14)
    {
      unint64_t v18 = v14 + 24 * ((v12 >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v20 = *(void *)(v18 + 32);
      uint64_t v19 = *(void *)(v18 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v21 = v9[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v12, v21);
      uint64_t v20 = v22;
      uint64_t v19 = v23;
      swift_unknownObjectRelease();
    }

    char v24 = a1(v20, v19);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v24 & 1) != 0) {
      uint64_t result = (uint64_t)specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v70, v8, a7, v9, a3);
    }
    unint64_t v25 = *((void *)&v70 + 1);
    uint64_t v13 = v70;
    uint64_t v14 = v71;
    uint64_t v26 = v72;
    uint64_t v27 = v9[8];
    uint64_t v28 = v9[11];
    __int128 v68 = v70;
    uint64_t v69 = v71;
    uint64_t v15 = *((void *)&v71 + 1) + 1LL;
    if (__OFADD__(*((void *)&v71 + 1), 1LL)) {
      break;
    }
    if ((void)v70 != v28) {
      goto LABEL_103;
    }
    if ((void)v71)
    {
      unint64_t v29 = *(void *)(v71 + 24 * ((*((void *)&v70 + 1) >> ((4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      unint64_t v29 = specialized Rope._Node.subscript.getter(v25, v27);
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v30 = __OFADD__(v26, v29);
    uint64_t v16 = v26 + v29;
    if (v30) {
      goto LABEL_104;
    }
    if (!v27) {
      goto LABEL_119;
    }
    unint64_t v31 = ((-15LL << ((4 * *(_BYTE *)(v27 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v27 + 18) | ((unint64_t)*(unsigned __int16 *)(v27 + 16) << ((4 * *(_BYTE *)(v27 + 18) + 8) & 0x3C));
    uint64_t result = swift_unknownObjectRetain();
    if (v25 >= v31) {
      goto LABEL_119;
    }
    if (v14)
    {
      char v32 = (4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C;
      unint64_t v33 = ((v25 >> v32) & 0xF) + 1;
      if (v33 < *(unsigned __int16 *)(v14 + 16))
      {
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v12 = (v33 << v32) | ((-15LL << v32) - 1) & v25;
        goto LABEL_32;
      }
    }

    int v34 = *(unsigned __int8 *)(v27 + 18);
    char v35 = (4 * v34 + 8) & 0x3C;
    uint64_t v36 = (v25 >> v35) & 0xF;
    uint64_t v67 = v36;
    if (v34)
    {
      swift_unknownObjectRetain();
      char v37 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v27 + 24, &v67, (uint64_t)&v68, v27, v34);
      swift_unknownObjectRelease();
      if ((v37 & 1) != 0)
      {
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v12 = *((void *)&v68 + 1);
        uint64_t v13 = v68;
        uint64_t v14 = v69;
        goto LABEL_32;
      }

      int v39 = *(unsigned __int8 *)(v27 + 18);
    }

    else
    {
      uint64_t v38 = v36 + 1;
      if (v36 + 1 < (unint64_t)*(unsigned __int16 *)(v27 + 16))
      {
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v12 = (v38 << v35) | ((-15LL << v35) - 1) & v25;
        uint64_t v14 = v27;
        goto LABEL_32;
      }

      int v39 = 0;
    }

    uint64_t v40 = *(unsigned __int16 *)(v27 + 16);
    char v41 = *(_BYTE *)(v27 + 18);
    uint64_t result = swift_unknownObjectRelease_n();
    uint64_t v14 = 0LL;
    unint64_t v12 = ((-15LL << ((4 * v41 + 8) & 0x3C)) - 1) & v39 | (unint64_t)(v40 << ((4 * v41 + 8) & 0x3C));
    *(void *)&__int128 v68 = v13;
LABEL_32:
    a7 = v64;
    uint64_t v8 = v65;
    if (v16 < v64) {
      goto LABEL_5;
    }
    uint64_t v42 = v66[8];
    if (v65 != v64)
    {
      uint64_t v13 = v66[11];
      if (v42)
      {
        uint64_t v14 = 0LL;
        uint64_t v15 = v66[9];
        uint64_t v16 = v66[10];
        unint64_t v12 = ((-15LL << ((4 * *(_BYTE *)(v42 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v42 + 18) | ((unint64_t)*(unsigned __int16 *)(v42 + 16) << ((4 * *(_BYTE *)(v42 + 18) + 8) & 0x3C));
      }

      else
      {
        unint64_t v12 = 0LL;
        uint64_t v14 = 0LL;
        uint64_t v15 = 0LL;
        uint64_t v16 = 0LL;
      }

      goto LABEL_5;
    }

    if (v42) {
      uint64_t v43 = v66[10];
    }
    else {
      uint64_t v43 = 0LL;
    }
    if (v65 < 0 || v43 < v65) {
      goto LABEL_110;
    }
    uint64_t v13 = v66[11];
    if (!v42)
    {
      uint64_t v14 = 0LL;
      unint64_t v12 = 0LL;
      uint64_t v15 = 0LL;
      uint64_t v16 = v65;
      goto LABEL_5;
    }

    uint64_t v44 = v66[9];
    uint64_t v45 = *(unsigned __int8 *)(v42 + 18);
    if (!*(_WORD *)(v42 + 16) || v66[10] <= v65)
    {
      unint64_t v12 = ((-15LL << ((4 * v45 + 8) & 0x3C)) - 1) & v45 | ((unint64_t)*(unsigned __int16 *)(v42 + 16) << ((4 * v45 + 8) & 0x3C));
      swift_unknownObjectRetain();
      uint64_t v46 = 0LL;
      uint64_t v14 = 0LL;
      goto LABEL_94;
    }

    if (*(_BYTE *)(v42 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v46 = v65;
      uint64_t v47 = v42;
      while (1)
      {
        uint64_t v49 = *(unsigned __int16 *)(v47 + 16);
        if (!*(_WORD *)(v47 + 16)) {
          goto LABEL_45;
        }
        uint64_t v50 = *(void *)(v47 + 40);
        uint64_t v51 = v46 - v50;
        if (__OFSUB__(v46, v50)) {
          goto LABEL_106;
        }
        if (__OFADD__(v51, 1LL)) {
          goto LABEL_107;
        }
        if (v51 + 1 <= 0)
        {
          uint64_t v49 = 0LL;
        }

        else
        {
          if ((_DWORD)v49 == 1)
          {
            v46 -= v50;
LABEL_45:
            if (v46) {
              goto LABEL_105;
            }
            goto LABEL_46;
          }

          uint64_t v52 = *(void *)(v47 + 64);
          BOOL v30 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          if (v30) {
            goto LABEL_108;
          }
          if (__OFADD__(v53, 1LL)) {
            goto LABEL_109;
          }
          if (v53 + 1 >= 1)
          {
            if ((_DWORD)v49 != 2)
            {
              uint64_t v54 = (void *)(v47 + 88);
              uint64_t v55 = 2LL;
              while (v49 != v55)
              {
                uint64_t v46 = v53 - *v54;
                if (__OFSUB__(v53, *v54)) {
                  goto LABEL_99;
                }
                if (__OFADD__(v46, 1LL)) {
                  goto LABEL_100;
                }
                if (v46 + 1 < 1)
                {
                  uint64_t v49 = v55;
                  uint64_t v46 = v53;
                  goto LABEL_46;
                }

                ++v55;
                v54 += 3;
                uint64_t v53 = v46;
                if (v49 == v55) {
                  goto LABEL_45;
                }
              }

              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
              goto LABEL_102;
            }

            uint64_t v46 = v53;
            goto LABEL_45;
          }

          uint64_t v49 = 1LL;
          uint64_t v46 = v51;
        }

void *AttributedString._InternalRunsSlice.startIndex.getter@<X0>( void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = result[8];
  if (v4) {
    uint64_t v5 = result[10];
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 < 0 || v5 < a2)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  uint64_t v7 = result[9];
  unint64_t v8 = result[11];
  if (!v4 || (result[10] > a2 ? (BOOL v9 = *(unsigned __int16 *)(v4 + 16) == 0) : (BOOL v9 = 1), v9))
  {
    unint64_t v10 = swift_unknownObjectRetain_n();
    unint64_t v11 = specialized Rope._endPath.getter(v10);
    uint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v13 = 0LL;
    unint64_t v14 = 0LL;
    if (!v4) {
      goto LABEL_49;
    }
    goto LABEL_13;
  }

  uint64_t v30 = result[9];
  unint64_t v31 = result[11];
  uint64_t v17 = *(unsigned __int8 *)(v4 + 18);
  if (!*(_BYTE *)(v4 + 18))
  {
    uint64_t result = (void *)swift_unknownObjectRetain_n();
    unint64_t v8 = 0LL;
    unint64_t v14 = a2;
    uint64_t v13 = v4;
    uint64_t v26 = *(unsigned __int16 *)(v4 + 16);
    if (!*(_WORD *)(v4 + 16)) {
      goto LABEL_47;
    }
LABEL_36:
    uint64_t v27 = *(void *)(v13 + 24);
    BOOL v21 = __OFSUB__(v14, v27);
    unint64_t v16 = v14 - v27;
    if (v21) {
      goto LABEL_61;
    }
    if (__OFADD__(v16, 1LL))
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }

    if ((uint64_t)(v16 + 1) < 1)
    {
      uint64_t v26 = 0LL;
      goto LABEL_48;
    }

    if ((_DWORD)v26 == 1)
    {
      unint64_t v14 = v16;
      goto LABEL_47;
    }

    uint64_t v28 = (uint64_t *)(v13 + 48);
    uint64_t v12 = 1LL;
    while (1)
    {
      uint64_t v29 = *v28;
      v28 += 3;
      unint64_t v14 = v16 - v29;
      if (__OFSUB__(v16, v29)) {
        break;
      }
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_60;
      }
      ++v12;
      unint64_t v16 = v14;
      if (v26 == v12) {
        goto LABEL_47;
      }
    }

void *AttributedString._InternalRunsSlice.endIndex.getter@<X0>( void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = result[8];
  uint64_t v5 = result[9];
  uint64_t v8 = result[10];
  uint64_t v7 = result[11];
  if (a2 != a3)
  {
    unint64_t v22 = swift_unknownObjectRetain();
    uint64_t result = (void *)specialized Rope._endPath.getter(v22);
    unint64_t v23 = (unint64_t)result;
    if (v6)
    {
      uint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v13 = 0LL;
    }

    else
    {
      uint64_t v13 = 0LL;
      uint64_t v5 = 0LL;
      uint64_t v8 = 0LL;
    }

    goto LABEL_52;
  }

  if (v6) {
    uint64_t v10 = result[10];
  }
  else {
    uint64_t v10 = 0LL;
  }
  if (a2 < 0 || v10 < a2)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }

  if (v6 && v8 > a2 && *(_WORD *)(v6 + 16))
  {
    uint64_t v32 = result[9];
    uint64_t v33 = result[11];
    uint64_t v11 = *(unsigned __int8 *)(v6 + 18);
    if (*(_BYTE *)(v6 + 18))
    {
      uint64_t result = (void *)swift_unknownObjectRetain_n();
      uint64_t v12 = a2;
      uint64_t v13 = v6;
      while (1)
      {
        uint64_t v15 = *(unsigned __int16 *)(v13 + 16);
        if (!*(_WORD *)(v13 + 16)) {
          goto LABEL_13;
        }
        uint64_t v16 = *(void *)(v13 + 40);
        BOOL v17 = __OFSUB__(v12, v16);
        uint64_t v18 = v12 - v16;
        if (v17) {
          goto LABEL_57;
        }
        if (__OFADD__(v18, 1LL)) {
          goto LABEL_58;
        }
        if (v18 + 1 >= 1) {
          break;
        }
        uint64_t v15 = 0LL;
LABEL_14:
        char v14 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
        uint64_t v11 = ((-15LL << v14) - 1) & v11 | (v15 << v14);
        uint64_t v13 = *(void *)(v13 + 24 + 24 * v15);
        swift_unknownObjectRetain();
        uint64_t result = (void *)swift_unknownObjectRelease();
        if (!*(_BYTE *)(v13 + 18))
        {
          unint64_t v25 = v11 & 0xFFFFFFFFFFFFF0FFLL;
          uint64_t v26 = *(unsigned __int16 *)(v13 + 16);
          if (*(_WORD *)(v13 + 16)) {
            goto LABEL_38;
          }
LABEL_49:
          if (!v12)
          {
LABEL_50:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v23 = v25 | (v26 << 8);
            uint64_t v5 = v32;
            uint64_t v7 = v33;
LABEL_31:
            swift_unknownObjectRetain();
            uint64_t v5 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v7, v23, v13, v6, v5);
            uint64_t result = (void *)swift_unknownObjectRelease_n();
            uint64_t v8 = a2 - v12;
            if (!__OFSUB__(a2, v12)) {
              goto LABEL_52;
            }
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }

          goto LABEL_65;
        }
      }

      if ((_DWORD)v15 != 1)
      {
        uint64_t v19 = (uint64_t *)(v13 + 64);
        uint64_t v20 = 1LL;
        while (1)
        {
          uint64_t v21 = *v19;
          v19 += 3;
          uint64_t v12 = v18 - v21;
          if (__OFSUB__(v18, v21)) {
            break;
          }
          if (__OFADD__(v12, 1LL)) {
            goto LABEL_55;
          }
          if (v12 + 1 < 1)
          {
            uint64_t v15 = v20;
            uint64_t v12 = v18;
            goto LABEL_14;
          }

          ++v20;
          uint64_t v18 = v12;
          if (v15 == v20) {
            goto LABEL_13;
          }
        }

        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }

      uint64_t v12 = v18;
LABEL_13:
      if (v12) {
        goto LABEL_56;
      }
      goto LABEL_14;
    }

    uint64_t result = (void *)swift_unknownObjectRetain_n();
    unint64_t v25 = 0LL;
    uint64_t v12 = a2;
    uint64_t v13 = v6;
    uint64_t v26 = *(unsigned __int16 *)(v6 + 16);
    if (!*(_WORD *)(v6 + 16)) {
      goto LABEL_49;
    }
LABEL_38:
    uint64_t v27 = *(void *)(v13 + 24);
    BOOL v17 = __OFSUB__(v12, v27);
    uint64_t v28 = v12 - v27;
    if (v17) {
      goto LABEL_63;
    }
    if (!__OFADD__(v28, 1LL))
    {
      if (v28 + 1 < 1)
      {
        uint64_t v26 = 0LL;
        goto LABEL_50;
      }

      if ((_DWORD)v26 == 1)
      {
        uint64_t v12 = v28;
        goto LABEL_49;
      }

      uint64_t v29 = (uint64_t *)(v13 + 48);
      uint64_t v30 = 1LL;
      while (1)
      {
        uint64_t v31 = *v29;
        v29 += 3;
        uint64_t v12 = v28 - v31;
        if (__OFSUB__(v28, v31)) {
          goto LABEL_61;
        }
        if (__OFADD__(v12, 1LL)) {
          goto LABEL_62;
        }
        if (v12 + 1 < 1)
        {
          uint64_t v26 = v30;
          uint64_t v12 = v28;
          goto LABEL_50;
        }

        ++v30;
        uint64_t v28 = v12;
        if (v26 == v30) {
          goto LABEL_49;
        }
      }
    }

uint64_t AttributedString._InternalRunsSlice.subscript.getter( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 88);
  __int128 v18 = *(_OWORD *)result;
  uint64_t v19 = *(void *)(result + 16);
  if ((void)v18 != v5)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v9 = result;
  outlined init with take of LocalePreferences?( (uint64_t)&v19,  (uint64_t)v20,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  outlined init with take of LocalePreferences?( (uint64_t)v20,  (uint64_t)&v22,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v22)
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(*((unint64_t *)&v18 + 1), v4);
    uint64_t result = swift_unknownObjectRelease();
  }

  if (v5 != *(void *)(a2 + 88)) {
    goto LABEL_26;
  }
  uint64_t v10 = *(void *)(a2 + 64);
  outlined init with take of LocalePreferences?( (uint64_t)v20,  (uint64_t)&v21,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v21)
  {
    unint64_t v11 = *(void *)(v21 + 24 * ((*((void *)&v18 + 1) >> ((4 * *(_BYTE *)(v21 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    unint64_t v11 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v18 + 1), v10);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v9 + 32);
  uint64_t v13 = v12 + v11;
  if (__OFADD__(v12, v11)) {
    goto LABEL_27;
  }
  if (v12 >= a4) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = *(void *)(v9 + 32);
  }
  if (v12 >= a3) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = a3;
  }
  if (v13 <= a3) {
    uint64_t v16 = a3;
  }
  else {
    uint64_t v16 = v13;
  }
  if (v13 <= a4) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = a4;
  }
  if (v15 == v17) {
    goto LABEL_28;
  }
  uint64_t result = v17 - v15;
  if (__OFSUB__(v17, v15)) {
LABEL_29:
  }
    __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRunsSlice@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v30 = a1[3];
  uint64_t v31 = *a1;
  uint64_t v6 = a1[4];
  uint64_t v7 = (void *)*v2;
  uint64_t v8 = v2[2];
  uint64_t v9 = v7[8];
  uint64_t v10 = v7[10];
  unint64_t v11 = swift_unknownObjectRetain();
  specialized Rope._endPath.getter(v11);
  if (v9)
  {
    swift_unknownObjectRelease();
    if (v6 == v10) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v26 = v7[8];
    uint64_t v27 = v7[9];
    uint64_t v28 = v7[10];
    unint64_t v29 = v7[11];
    uint64_t v32 = v31;
    unint64_t v33 = v4;
    uint64_t v34 = v5;
    uint64_t v35 = v30;
    uint64_t v36 = v6;
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.formIndex(before:)(&v32, v26, v27, v28, v29);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v14 = v32;
    unint64_t v18 = v33;
    uint64_t v20 = v34;
    uint64_t v24 = v35;
    uint64_t v25 = v36;
    goto LABEL_11;
  }

  if (v6) {
    goto LABEL_9;
  }
LABEL_3:
  unint64_t v12 = v7[8];
  uint64_t v13 = v7[9];
  uint64_t v15 = v7[10];
  uint64_t v14 = v7[11];
  swift_unknownObjectRetain_n();
  uint64_t v16 = specialized Rope.find<A>(at:in:preferEnd:)(v8, 1, v12, v13, v15, v14);
  unint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t result = swift_unknownObjectRelease();
  if (v16 != v14)
  {
    __break(1u);
    goto LABEL_13;
  }

  if (!v12)
  {
    uint64_t v24 = 0LL;
    uint64_t v25 = v8 - v22;
    if (__OFSUB__(v8, v22)) {
      goto LABEL_13;
    }
LABEL_11:
    *a2 = v14;
    a2[1] = v18;
    a2[2] = v20;
    a2[3] = v24;
    a2[4] = v25;
    return result;
  }

  swift_unknownObjectRetain();
  uint64_t v24 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v14, v18, v20, v12, v13);
  uint64_t result = swift_unknownObjectRelease_n();
  uint64_t v25 = v8 - v22;
  if (!__OFSUB__(v8, v22)) {
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString._InternalRunsSlice( void *a1)
{
  uint64_t v3 = *(void **)v1;
  unint64_t v4 = a1[1];
  int64_t v39 = *(void *)(v1 + 16);
  uint64_t v40 = (void *)*a1;
  uint64_t v6 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v7 = a1[4];
  unint64_t v8 = v3[8];
  uint64_t v9 = v3[10];
  unint64_t v10 = swift_unknownObjectRetain();
  unint64_t result = specialized Rope._endPath.getter(v10);
  if (!v8) {
    goto LABEL_23;
  }
  unint64_t result = swift_unknownObjectRelease();
  if (v7 == v9) {
    goto LABEL_3;
  }
LABEL_24:
  uint64_t v12 = v3[8];
  unint64_t v14 = v3[9];
  unint64_t v8 = v3[10];
  uint64_t v24 = (void *)v3[11];
  uint64_t v3 = v40;
  char v41 = v40;
  unint64_t v42 = v4;
  uint64_t v43 = v6;
  if (__OFSUB__(v5--, 1LL))
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }

  if (v40 != v24)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  if (!v12)
  {
    unint64_t v26 = 0LL;
    if (v4) {
      goto LABEL_28;
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  unint64_t v26 = *(unsigned __int8 *)(v12 + 18);
  swift_unknownObjectRetain();
  if (v26 >= v4) {
    goto LABEL_40;
  }
LABEL_28:
  if (v6)
  {
    char v27 = (4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C;
    if (((v4 >> v27) & 0xF) != 0)
    {
      unint64_t v26 = ((((v4 >> v27) & 0xF) - 1) << v27) | ((-15LL << v27) - 1) & v4;
LABEL_34:
      uint64_t v28 = (void *)(v6 + 24 * ((v26 >> ((4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v14 = v28[3];
      uint64_t v3 = (void *)v28[4];
      unint64_t v4 = v28[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_42;
    }
  }

  swift_unknownObjectRetain();
  uint64_t v6 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v41, v12);
  unint64_t result = swift_unknownObjectRelease();
  if ((v6 & 1) != 0)
  {
    if (v41 == v40)
    {
      unint64_t v26 = v42;
      uint64_t v6 = v43;
      if (v43) {
        goto LABEL_34;
      }
LABEL_41:
      swift_unknownObjectRetain();
      unint64_t v14 = specialized Rope._Node.subscript.getter(v26, v12);
      uint64_t v3 = v31;
      unint64_t v4 = v32;
      swift_unknownObjectRelease();
LABEL_42:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v30 = v7 - v14;
      if (!__OFSUB__(v7, v14))
      {
        uint64_t v3 = v40;
        goto LABEL_58;
      }

      goto LABEL_65;
    }

uint64_t protocol witness for Collection.startIndex.getter in conformance AttributedString._InternalRunsSlice@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[1];
  unint64_t v4 = *(void *)(*v1 + 64LL);
  uint64_t v5 = *(void *)(*v1 + 72LL);
  uint64_t v7 = *(void *)(*v1 + 80LL);
  uint64_t v6 = *(void *)(*v1 + 88LL);
  swift_unknownObjectRetain_n();
  uint64_t v8 = specialized Rope.find<A>(at:in:preferEnd:)(v3, 0, v4, v5, v7, v6);
  unint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t result = swift_unknownObjectRelease();
  if (v8 == v6)
  {
    if (v4)
    {
      swift_unknownObjectRetain();
      uint64_t v16 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v6, v10, v12, v4, v5);
      uint64_t result = swift_unknownObjectRelease_n();
      uint64_t v17 = v3 - v14;
      if (!__OFSUB__(v3, v14))
      {
LABEL_4:
        *a1 = v6;
        a1[1] = v10;
        a1[2] = v12;
        a1[3] = v16;
        a1[4] = v17;
        return result;
      }
    }

    else
    {
      uint64_t v16 = 0LL;
      uint64_t v17 = v3 - v14;
      if (!__OFSUB__(v3, v14)) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t protocol witness for Collection.endIndex.getter in conformance AttributedString._InternalRunsSlice@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  unint64_t v6 = *(void *)(*v1 + 64LL);
  uint64_t v5 = *(void *)(*v1 + 72LL);
  uint64_t v8 = *(void *)(*v1 + 80LL);
  uint64_t v7 = *(void *)(*v1 + 88LL);
  unint64_t v9 = swift_unknownObjectRetain();
  if (v3 != v4)
  {
    unint64_t result = specialized Rope._endPath.getter(v9);
    unint64_t v12 = result;
    if (v6)
    {
      unint64_t result = swift_unknownObjectRelease();
      uint64_t v14 = 0LL;
    }

    else
    {
      uint64_t v14 = 0LL;
      uint64_t v5 = 0LL;
      uint64_t v8 = 0LL;
    }

    goto LABEL_11;
  }

  swift_unknownObjectRetain();
  uint64_t v10 = specialized Rope.find<A>(at:in:preferEnd:)(v3, 0, v6, v5, v8, v7);
  unint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  unint64_t result = swift_unknownObjectRelease();
  if (v10 == v7)
  {
    if (v6)
    {
      swift_unknownObjectRetain();
      uint64_t v5 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v7, v12, v14, v6, v5);
      unint64_t result = swift_unknownObjectRelease_n();
      uint64_t v8 = v3 - v16;
      if (!__OFSUB__(v3, v16)) {
        goto LABEL_11;
      }
    }

    else
    {
      uint64_t v5 = 0LL;
      uint64_t v8 = v3 - v16;
      if (!__OFSUB__(v3, v16))
      {
LABEL_11:
        *a1 = v7;
        a1[1] = v12;
        a1[2] = v14;
        a1[3] = v5;
        a1[4] = v8;
        return result;
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString._InternalRunsSlice( void *a1, uint64_t a2))(void **a1)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  uint64_t v6 = AttributedString._InternalRunsSlice.subscript.getter(a2, *v2, v2[1], v2[2]);
  v5[3] = v7;
  v5[4] = v8;
  *uint64_t v5 = v6;
  v5[1] = v7;
  v5[2] = v8;
  return protocol witness for Collection.subscript.read in conformance AttributedString._InternalRunsSlice;
}

void protocol witness for Collection.subscript.read in conformance AttributedString._InternalRunsSlice( void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AttributedString._InternalRunsSlice@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3 = a1[3];
  v6[2] = a1[2];
  v6[3] = v3;
  v6[4] = a1[4];
  __int128 v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  return specialized Collection<>.subscript.getter( (uint64_t)v6,  *(void **)v2,  *(void *)(v2 + 8),  *(void *)(v2 + 16),  a2);
}

void *protocol witness for Collection.indices.getter in conformance AttributedString._InternalRunsSlice@<X0>( void *a1@<X8>)
{
  return specialized Collection<>.indices.getter(*(void **)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), a1);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AttributedString._InternalRunsSlice()
{
  return *(void *)(v0 + 8) == *(void *)(v0 + 16);
}

double protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance AttributedString._InternalRunsSlice@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v5;
  uint64_t v11 = *(void *)(a1 + 32);
  specialized BidirectionalCollection.index(_:offsetBy:)( (uint64_t *)v10,  a2,  *(void **)v3,  *(void *)(v3 + 8),  *(void *)(v3 + 16),  (uint64_t *)v8);
  double result = *(double *)v8;
  __int128 v7 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v7;
  *(void *)(a3 + 32) = v9;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance AttributedString._InternalRunsSlice@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v6 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v6;
  uint64_t v11 = *(void *)(a1 + 32);
  __int128 v7 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v7;
  uint64_t v13 = *(void *)(a3 + 32);
  specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)( (uint64_t *)v10,  a2,  (uint64_t)v12,  *(void **)v4,  *(void *)(v4 + 8),  *(void *)(v4 + 16),  v9);
  return outlined init with take of LocalePreferences?( (uint64_t)v9,  a4,  &demangling cache variable for type metadata for AttributedString._InternalRuns.Index?);
}

uint64_t *protocol witness for BidirectionalCollection.distance(from:to:) in conformance AttributedString._InternalRunsSlice( uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v3;
  uint64_t v7 = *(void *)(a1 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v4;
  uint64_t v9 = *(void *)(a2 + 32);
  return specialized BidirectionalCollection._distance(from:to:)( (uint64_t *)v6,  (uint64_t)v8,  *(void **)v2,  *(void *)(v2 + 8),  *(void *)(v2 + 16));
}

unint64_t protocol witness for Collection.index(after:) in conformance AttributedString._InternalRunsSlice@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v4 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v4;
  uint64_t v27 = *(void *)(a1 + 32);
  __int128 v6 = (void *)*v2;
  uint64_t v5 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v9 = *(void *)(*v2 + 64LL);
  uint64_t v8 = *(void *)(*v2 + 72LL);
  uint64_t v10 = v6[10];
  uint64_t v11 = v6[11];
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(after:)((uint64_t)v26, v9, v8, v10, v11, (uint64_t)v25);
  uint64_t v12 = v25[0];
  unint64_t v13 = v25[1];
  uint64_t v15 = v25[2];
  uint64_t v14 = v25[3];
  uint64_t v16 = v25[4];
  unint64_t result = swift_unknownObjectRelease();
  if (v16 < v7) {
    goto LABEL_12;
  }
  unint64_t v18 = v6[8];
  uint64_t v14 = v6[9];
  uint64_t v16 = v6[10];
  uint64_t v12 = v6[11];
  unint64_t v19 = swift_unknownObjectRetain();
  if (v5 != v7)
  {
    unint64_t result = specialized Rope._endPath.getter(v19);
    unint64_t v13 = result;
    if (v18)
    {
      unint64_t result = swift_unknownObjectRelease();
      uint64_t v15 = 0LL;
    }

    else
    {
      uint64_t v15 = 0LL;
      uint64_t v14 = 0LL;
      uint64_t v16 = 0LL;
    }

    goto LABEL_12;
  }

  swift_unknownObjectRetain();
  uint64_t v20 = specialized Rope.find<A>(at:in:preferEnd:)(v5, 0, v18, v14, v16, v12);
  unint64_t v13 = v21;
  uint64_t v15 = v22;
  uint64_t v24 = v23;
  unint64_t result = swift_unknownObjectRelease();
  if (v20 == v12)
  {
    if (v18)
    {
      swift_unknownObjectRetain();
      uint64_t v14 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v13, v15, v18, v14);
      unint64_t result = swift_unknownObjectRelease_n();
      uint64_t v16 = v5 - v24;
      if (!__OFSUB__(v5, v24)) {
        goto LABEL_12;
      }
    }

    else
    {
      uint64_t v14 = 0LL;
      uint64_t v16 = v5 - v24;
      if (!__OFSUB__(v5, v24))
      {
LABEL_12:
        *a2 = v12;
        a2[1] = v13;
        a2[2] = v15;
        a2[3] = v14;
        a2[4] = v16;
        return result;
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance AttributedString._InternalRunsSlice( uint64_t *result)
{
  uint64_t v2 = (void *)*v1;
  int64_t v43 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v5 = *result;
  unint64_t v4 = result[1];
  uint64_t v6 = result[2];
  uint64_t v7 = result[3];
  uint64_t v8 = result[4];
  uint64_t v9 = v2[8];
  uint64_t v10 = v2[9];
  uint64_t v12 = v2[10];
  uint64_t v11 = v2[11];
  uint64_t v47 = *result;
  unint64_t v48 = v4;
  uint64_t v49 = v6;
  BOOL v13 = __OFADD__(v7, 1LL);
  uint64_t v14 = v7 + 1;
  if (v13) {
    goto LABEL_64;
  }
  if (v5 != v11)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }

  uint64_t v15 = result;
  uint64_t v44 = v14;
  int64_t v46 = v3;
  if (v6)
  {
    unint64_t v16 = *(void *)(v6 + 24 * ((v4 >> ((4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    unint64_t v16 = specialized Rope._Node.subscript.getter(v4, v9);
  }

  swift_bridgeObjectRelease();
  unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  BOOL v13 = __OFADD__(v8, v16);
  int64_t v17 = v8 + v16;
  if (v13)
  {
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  swift_unknownObjectRetain();
  specialized Rope.formIndex(after:)(&v47, v9, v10, v12, v5);
  unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
  if (v17 < v46)
  {
    uint64_t v18 = v47;
    unint64_t v19 = v48;
    uint64_t v20 = v49;
    uint64_t v21 = v44;
LABEL_60:
    *uint64_t v15 = v18;
    v15[1] = v19;
    v15[2] = v20;
    v15[3] = v21;
    v15[4] = v17;
    return result;
  }

  uint64_t v22 = v2[8];
  uint64_t v21 = v2[9];
  int64_t v17 = v2[10];
  uint64_t v18 = v2[11];
  uint64_t v23 = v43;
  if (v43 != v46)
  {
    unint64_t v34 = swift_unknownObjectRetain();
    unint64_t result = (uint64_t *)specialized Rope._endPath.getter(v34);
    unint64_t v19 = (unint64_t)result;
    if (v22)
    {
      unint64_t result = (uint64_t *)swift_unknownObjectRelease();
      uint64_t v20 = 0LL;
    }

    else
    {
      uint64_t v20 = 0LL;
      uint64_t v21 = 0LL;
      int64_t v17 = 0LL;
    }

    goto LABEL_60;
  }

  if (v22) {
    int64_t v24 = v17;
  }
  else {
    int64_t v24 = 0LL;
  }
  if (v43 < 0 || v24 < v43) {
    goto LABEL_70;
  }
  if (!v22 || !*(_WORD *)(v22 + 16) || v43 >= v17)
  {
    unint64_t v35 = swift_unknownObjectRetain_n();
    unint64_t v19 = specialized Rope._endPath.getter(v35);
    unint64_t result = (uint64_t *)swift_unknownObjectRelease();
    uint64_t v20 = 0LL;
    uint64_t v26 = 0LL;
    if (!v22)
    {
      uint64_t v21 = 0LL;
      int64_t v17 = v43;
      goto LABEL_60;
    }

    goto LABEL_39;
  }

  uint64_t v45 = v21;
  uint64_t v25 = *(unsigned __int8 *)(v22 + 18);
  if (*(_BYTE *)(v22 + 18))
  {
    unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v26 = v43;
    uint64_t v20 = v22;
    while (1)
    {
      uint64_t v28 = *(unsigned __int16 *)(v20 + 16);
      if (!*(_WORD *)(v20 + 16)) {
        goto LABEL_21;
      }
      uint64_t v29 = *(void *)(v20 + 40);
      BOOL v13 = __OFSUB__(v26, v29);
      uint64_t v30 = v26 - v29;
      if (v13) {
        goto LABEL_68;
      }
      if (__OFADD__(v30, 1LL)) {
        goto LABEL_69;
      }
      if (v30 + 1 > 0) {
        break;
      }
      uint64_t v28 = 0LL;
LABEL_22:
      char v27 = (4 * *(_BYTE *)(v20 + 18) + 8) & 0x3C;
      uint64_t v25 = ((-15LL << v27) - 1) & v25 | (v28 << v27);
      uint64_t v20 = *(void *)(v20 + 24 + 24 * v28);
      swift_unknownObjectRetain();
      unint64_t result = (uint64_t *)swift_unknownObjectRelease();
      if (!*(_BYTE *)(v20 + 18))
      {
        unint64_t v36 = v25 & 0xFFFFFFFFFFFFF0FFLL;
        uint64_t v23 = v43;
        goto LABEL_45;
      }
    }

    if ((_DWORD)v28 != 1)
    {
      uint64_t v31 = (uint64_t *)(v20 + 64);
      uint64_t v32 = 1LL;
      while (1)
      {
        uint64_t v33 = *v31;
        v31 += 3;
        uint64_t v26 = v30 - v33;
        if (__OFSUB__(v30, v33)) {
          break;
        }
        if (__OFADD__(v26, 1LL)) {
          goto LABEL_63;
        }
        if (v26 + 1 < 1)
        {
          uint64_t v28 = v32;
          uint64_t v26 = v30;
          goto LABEL_22;
        }

        ++v32;
        uint64_t v30 = v26;
        if (v28 == v32) {
          goto LABEL_21;
        }
      }

      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }

    uint64_t v26 = v30;
LABEL_21:
    if (v26) {
      goto LABEL_67;
    }
    goto LABEL_22;
  }

  unint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  unint64_t v36 = 0LL;
  uint64_t v26 = v43;
  uint64_t v20 = v22;
LABEL_45:
  uint64_t v37 = *(unsigned __int16 *)(v20 + 16);
  uint64_t v21 = v45;
  if (*(_WORD *)(v20 + 16))
  {
    uint64_t v38 = *(void *)(v20 + 24);
    BOOL v13 = __OFSUB__(v26, v38);
    uint64_t v39 = v26 - v38;
    if (v13)
    {
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }

    if (__OFADD__(v39, 1LL))
    {
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }

    if (v39 + 1 <= 0)
    {
      uint64_t v37 = 0LL;
LABEL_58:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v19 = v36 | (v37 << 8);
LABEL_39:
      swift_unknownObjectRetain();
      uint64_t v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v18, v19, v20, v22, v21);
      unint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
      int64_t v17 = v23 - v26;
      if (!__OFSUB__(v23, v26)) {
        goto LABEL_60;
      }
      goto LABEL_71;
    }

    if ((_DWORD)v37 != 1)
    {
      uint64_t v40 = (uint64_t *)(v20 + 48);
      uint64_t v41 = 1LL;
      while (1)
      {
        uint64_t v42 = *v40;
        v40 += 3;
        uint64_t v26 = v39 - v42;
        if (__OFSUB__(v39, v42)) {
          goto LABEL_72;
        }
        if (__OFADD__(v26, 1LL)) {
          goto LABEL_73;
        }
        if (v26 + 1 < 1)
        {
          uint64_t v37 = v41;
          uint64_t v26 = v39;
          goto LABEL_58;
        }

        ++v41;
        uint64_t v39 = v26;
        if (v37 == v41) {
          goto LABEL_57;
        }
      }
    }

    uint64_t v26 = v39;
  }

void protocol witness for Sequence.makeIterator() in conformance AttributedString._InternalRunsSlice( uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  __int128 v4 = *(_OWORD *)(v1 + 1);
  unint64_t v5 = *(void *)(*v1 + 64);
  uint64_t v6 = *(void *)(*v1 + 80);
  if (v5) {
    uint64_t v7 = *(void *)(*v1 + 80);
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v8 = v1[1];
  uint64_t v9 = *(void *)(v3 + 72);
  uint64_t v10 = *(void *)(v3 + 88);
  __int128 v34 = v4;
  if (v5)
  {
    if ((uint64_t)v4 < v6 && *(_WORD *)(v5 + 16) != 0)
    {
      uint64_t v32 = *(void *)(v3 + 88);
      uint64_t v33 = *(void *)(v3 + 72);
      uint64_t v16 = *(unsigned __int8 *)(v5 + 18);
      if (*(_BYTE *)(v5 + 18))
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        uint64_t v14 = v8;
        uint64_t v13 = v5;
        while (1)
        {
          uint64_t v18 = *(unsigned __int16 *)(v13 + 16);
          if (*(_WORD *)(v13 + 16))
          {
            uint64_t v19 = *(void *)(v13 + 40);
            BOOL v20 = __OFSUB__(v14, v19);
            uint64_t v21 = v14 - v19;
            if (v20) {
              goto LABEL_55;
            }
            if (__OFADD__(v21, 1LL)) {
              goto LABEL_56;
            }
            if (v21 + 1 <= 0)
            {
              uint64_t v18 = 0LL;
              goto LABEL_18;
            }

            if ((_DWORD)v18 != 1)
            {
              uint64_t v22 = (uint64_t *)(v13 + 64);
              uint64_t v23 = 1LL;
              while (1)
              {
                uint64_t v24 = *v22;
                v22 += 3;
                uint64_t v14 = v21 - v24;
                if (__OFSUB__(v21, v24)) {
                  break;
                }
                if (__OFADD__(v14, 1LL)) {
                  goto LABEL_53;
                }
                if (v14 + 1 < 1)
                {
                  uint64_t v18 = v23;
                  uint64_t v14 = v21;
                  goto LABEL_18;
                }

                ++v23;
                uint64_t v21 = v14;
                if (v18 == v23) {
                  goto LABEL_17;
                }
              }

              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
LABEL_59:
              __break(1u);
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
              goto LABEL_62;
            }

            uint64_t v14 = v21;
          }

uint64_t *protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString._InternalRunsSlice()
{
  return specialized Collection.count.getter(*(uint64_t **)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString._InternalRunsSlice()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*(uint64_t **)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString._InternalRunsSlice( uint64_t a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)( a1,  a2,  a3,  *(void **)v3,  *(void *)(v3 + 8),  *(void *)(v3 + 16));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString._InternalRunsSlice@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K9RunsSliceVABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._InternalRunsSlice,  &type metadata for AttributedString._InternalRunsSlice);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._InternalRunsSlice,  &type metadata for AttributedString._InternalRunsSlice);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._InternalRunsSlice,  &type metadata for AttributedString._InternalRunsSlice);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<AttributedString._InternalRunsSlice>,  MEMORY[0x189617A28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Slice<AttributedString._InternalRunsSlice> and conformance Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString._InternalRunsSlice>,  MEMORY[0x18961A5E8]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance <> DefaultIndices<A>( &lazy protocol witness table cache variable for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance <> DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<AttributedString._InternalRunsSlice>,  MEMORY[0x189617A18]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance <> DefaultIndices<A>( &lazy protocol witness table cache variable for type Slice<AttributedString._InternalRunsSlice> and conformance <> Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString._InternalRunsSlice>,  MEMORY[0x18961A5C8]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance <> DefaultIndices<A>( unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    unint64_t v7 = lazy protocol witness table accessor for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice();
    uint64_t result = MEMORY[0x186E20D4C](a3, v6, &v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t specialized closure #1 in Rope._Node.descendToLastItem(under:)( uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(result + 24 * a2);
  uint64_t v4 = *(unsigned __int16 *)(v3 + 16);
  if (*(_WORD *)(v3 + 16))
  {
    uint64_t v6 = v4 - 1;
    int v7 = *(unsigned __int8 *)(v3 + 18);
    *a3 = ((-15LL << ((4 * v7 + 8) & 0x3C)) - 1) & *a3 | ((v4 - 1) << ((4 * v7 + 8) & 0x3C));
    if (v7)
    {
      swift_unknownObjectRetain();
      uint64_t v8 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v3 + 24, v6, a3);
      swift_unknownObjectRelease();
      return v8;
    }

    else
    {
      return v3;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)( uint64_t result, int a2, _WORD *a3, uint64_t *a4)
{
  uint64_t v4 = result;
  uint64_t v5 = (unsigned __int16)*a3;
  if (*a3)
  {
    uint64_t result = 0LL;
    uint64_t v6 = ~a2 & 1LL;
    while (1)
    {
      uint64_t v7 = *a4;
      a4 += 3;
      uint64_t v8 = v4 - v7;
      if (__OFSUB__(v4, v7)) {
        break;
      }
      if (__OFADD__(v8, v6)) {
        goto LABEL_12;
      }
      if (v8 + v6 < 1) {
        return result;
      }
      ++result;
      uint64_t v4 = v8;
      if (v5 == result)
      {
        uint64_t v4 = v8;
        goto LABEL_8;
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
  }

  else
  {
LABEL_8:
    if (!v4) {
      return v5 - (a2 & 1);
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized Rope.find<A>(at:in:preferEnd:)( uint64_t result, char a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3) {
    uint64_t v6 = a5;
  }
  else {
    uint64_t v6 = 0LL;
  }
  if ((result & 0x8000000000000000LL) == 0)
  {
    uint64_t v7 = result;
    if (v6 >= result)
    {
      unint64_t v9 = a3;
      if (a3 && *(_WORD *)(a3 + 16) && (a5 > result) | a2 & 1)
      {
        uint64_t v11 = *(unsigned __int8 *)(a3 + 18);
        if (*(_BYTE *)(a3 + 18))
        {
          BOOL v12 = (a2 & 1) == 0;
          uint64_t result = swift_unknownObjectRetain();
          while (1)
          {
            uint64_t v14 = *(unsigned __int16 *)(v9 + 16);
            if (*(_WORD *)(v9 + 16)) {
              break;
            }
            uint64_t v17 = 0LL;
LABEL_21:
            if (v7) {
              goto LABEL_35;
            }
            if ((a2 & 1) != 0)
            {
              if (!*(_WORD *)(v9 + 16)) {
                goto LABEL_34;
              }
              --v14;
              uint64_t v7 = v17;
            }

            else
            {
              uint64_t v7 = 0LL;
            }

BOOL specialized closure #1 in Rope.formIndex(before:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  char v3 = (4 * *(_BYTE *)(a1 + 2) + 8) & 0x3C;
  uint64_t v4 = (v2 >> v3) & 0xF;
  if (v4) {
    *(void *)(a2 + 8) = ((v4 - 1) << v3) | ((-15LL << v3) - 1) & v2;
  }
  return v4 != 0;
}

uint64_t specialized BidirectionalCollection.index(_:offsetBy:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t v4 = 0LL;
    while ((result ^ 0x8000000000000000LL) > ~a2)
    {
      if (--v4 <= a2)
      {
        result += v4;
        return result;
      }
    }

    goto LABEL_12;
  }

  if (a2)
  {
    unint64_t v2 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v3 = a2 - 1;
    while (v2 > v3)
    {
      ++result;
      if (!--a2) {
        return result;
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
  }

  return result;
}

uint64_t specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)( uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t v7 = 0LL;
    while (result - a3 + v7)
    {
      uint64_t v8 = result + v7 - 1;
      if (__OFSUB__(result + v7, 1LL))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return result;
      }

      if (--v7 <= a2) {
        return v8;
      }
    }

    return 0LL;
  }

  if (a2)
  {
    unint64_t v3 = a3 - result;
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL)) {
      unint64_t v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v4 = v3 + 1;
    if (v4 >= 5)
    {
      uint64_t v9 = v4 & 3;
      if ((v4 & 3) == 0) {
        uint64_t v9 = 4LL;
      }
      unint64_t v5 = v4 - v9;
      int64x2_t v10 = 0uLL;
      int64x2_t v11 = (int64x2_t)(unint64_t)result;
      int64x2_t v12 = vdupq_n_s64(1uLL);
      unint64_t v13 = v5;
      do
      {
        int64x2_t v11 = vaddq_s64(v11, v12);
        int64x2_t v10 = vaddq_s64(v10, v12);
        v13 -= 4LL;
      }

      while (v13);
      uint64_t v6 = vaddvq_s64(vaddq_s64(v10, v11));
    }

    else
    {
      unint64_t v5 = 0LL;
      uint64_t v6 = result;
    }

    uint64_t v14 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v15 = v5 + result - a3;
    unint64_t v16 = a2 - v5;
    uint64_t result = v6;
    while (v15)
    {
      if (!v14) {
        goto LABEL_27;
      }
      ++result;
      ++v14;
      ++v15;
      if (!--v16) {
        return result;
      }
    }

    return 0LL;
  }

  return result;
}

void *specialized AttributedString._InternalRunsSlice.updateEach(with:)( void *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (uint64_t)(result + 8);
  uint64_t v5 = result[8];
  if (v5) {
    uint64_t v7 = result[10];
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (a2 < 0 || v7 < a2)
  {
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
    goto LABEL_402;
  }

  LOBYTE(v8) = a5;
  uint64_t v9 = a3;
  uint64_t v184 = result;
  uint64_t v10 = result[9];
  uint64_t v11 = result[11];
  uint64_t v176 = result + 8;
  if (!v5 || (*(_WORD *)(v5 + 16) ? (BOOL v12 = result[10] <= a2) : (BOOL v12 = 1), v12))
  {
    unint64_t v13 = swift_unknownObjectRetain_n();
    unint64_t v14 = specialized Rope._endPath.getter(v13);
    uint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    if (!v5) {
      goto LABEL_48;
    }
    goto LABEL_13;
  }

  uint64_t v6 = *(unsigned __int8 *)(v5 + 18);
  if (*(_BYTE *)(v5 + 18))
  {
    uint64_t result = (void *)swift_unknownObjectRetain_n();
    uint64_t v16 = a2;
    uint64_t v17 = v5;
    while (1)
    {
      uint64_t v19 = *(unsigned __int16 *)(v17 + 16);
      if (!*(_WORD *)(v17 + 16)) {
        break;
      }
      uint64_t v20 = *(void *)(v17 + 40);
      BOOL v21 = __OFSUB__(v16, v20);
      uint64_t v22 = v16 - v20;
      if (v21) {
        goto LABEL_369;
      }
      if (__OFADD__(v22, 1LL)) {
        goto LABEL_370;
      }
      if (v22 + 1 <= 0)
      {
        uint64_t v19 = 0LL;
        goto LABEL_18;
      }

      if ((_DWORD)v19 == 1)
      {
        uint64_t v16 = v22;
        break;
      }

      uint64_t v23 = (uint64_t *)(v17 + 64);
      uint64_t v24 = 1LL;
      while (1)
      {
        uint64_t v25 = *v23;
        v23 += 3;
        uint64_t v16 = v22 - v25;
        if (__OFSUB__(v22, v25)) {
          goto LABEL_337;
        }
        if (__OFADD__(v16, 1LL))
        {
LABEL_338:
          __break(1u);
LABEL_339:
          __break(1u);
LABEL_340:
          __break(1u);
LABEL_341:
          __break(1u);
LABEL_342:
          __break(1u);
LABEL_343:
          __break(1u);
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
          goto LABEL_363;
        }

        if (v16 + 1 < 1) {
          break;
        }
        ++v24;
        uint64_t v22 = v16;
        if (v19 == v24) {
          goto LABEL_17;
        }
      }

      uint64_t v19 = v24;
      uint64_t v16 = v22;
LABEL_18:
      char v18 = (4 * *(_BYTE *)(v17 + 18) + 8) & 0x3C;
      uint64_t v6 = ((-15LL << v18) - 1) & v6 | (v19 << v18);
      uint64_t v15 = *(void *)(v17 + 24 + 24 * v19);
      swift_unknownObjectRetain();
      uint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v17 = v15;
      if (!*(_BYTE *)(v15 + 18)) {
        goto LABEL_33;
      }
    }

LABEL_404:
  __break(1u);
LABEL_405:
  __break(1u);
LABEL_406:
  __break(1u);
LABEL_407:
  __break(1u);
LABEL_408:
  __break(1u);
LABEL_409:
  __break(1u);
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString._InternalRunsSlice.updateEach(with:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t *)(result + 64);
  uint64_t v4 = *(void *)(result + 64);
  if (v4) {
    uint64_t v6 = *(void *)(result + 80);
  }
  else {
    uint64_t v6 = 0LL;
  }
  if (a2 < 0 || v6 < a2)
  {
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
LABEL_408:
    __break(1u);
LABEL_409:
    __break(1u);
LABEL_410:
    __break(1u);
LABEL_411:
    __break(1u);
LABEL_412:
    __break(1u);
LABEL_413:
    __break(1u);
    goto LABEL_414;
  }

  uint64_t v7 = a3;
  uint64_t v8 = (void *)result;
  uint64_t v9 = *(void *)(result + 72);
  uint64_t v180 = (void *)result;
  uint64_t v181 = *(void *)(result + 88);
  char v171 = (uint64_t *)(result + 64);
  if (!v4 || (*(_WORD *)(v4 + 16) ? (BOOL v10 = *(void *)(result + 80) <= a2) : (BOOL v10 = 1), v10))
  {
    unint64_t v11 = swift_unknownObjectRetain_n();
    unint64_t v12 = specialized Rope._endPath.getter(v11);
    uint64_t result = swift_unknownObjectRelease();
    unint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    if (!v4) {
      goto LABEL_48;
    }
    goto LABEL_13;
  }

  uint64_t v15 = *(unsigned __int8 *)(v4 + 18);
  if (*(_BYTE *)(v4 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v14 = a2;
    uint64_t v16 = (void *)v4;
    while (1)
    {
      uint64_t v18 = *((unsigned __int16 *)v16 + 8);
      if (!*((_WORD *)v16 + 8)) {
        break;
      }
      uint64_t v19 = v16[5];
      BOOL v20 = __OFSUB__(v14, v19);
      uint64_t v21 = v14 - v19;
      if (v20) {
        goto LABEL_377;
      }
      if (__OFADD__(v21, 1LL)) {
        goto LABEL_378;
      }
      if (v21 + 1 <= 0)
      {
        uint64_t v18 = 0LL;
        goto LABEL_18;
      }

      if ((_DWORD)v18 == 1)
      {
        uint64_t v14 = v21;
        break;
      }

      uint64_t v22 = v16 + 8;
      uint64_t v23 = 1LL;
      while (1)
      {
        uint64_t v24 = *v22;
        v22 += 3;
        uint64_t v14 = v21 - v24;
        if (__OFSUB__(v21, v24)) {
          goto LABEL_345;
        }
        if (__OFADD__(v14, 1LL))
        {
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
LABEL_369:
          __break(1u);
LABEL_370:
          __break(1u);
LABEL_371:
          __break(1u);
LABEL_372:
          __break(1u);
LABEL_373:
          __break(1u);
          goto LABEL_374;
        }

        if (v14 + 1 < 1) {
          break;
        }
        ++v23;
        uint64_t v21 = v14;
        if (v18 == v23) {
          goto LABEL_17;
        }
      }

      uint64_t v18 = v23;
      uint64_t v14 = v21;
LABEL_18:
      char v17 = (4 * *((_BYTE *)v16 + 18) + 8) & 0x3C;
      uint64_t v15 = ((-15LL << v17) - 1) & v15 | (v18 << v17);
      unint64_t v13 = (void *)v16[3 * v18 + 3];
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v16 = v13;
      if (!*((_BYTE *)v13 + 18)) {
        goto LABEL_33;
      }
    }

LABEL_342:
                          __break(1u);
LABEL_343:
                          __break(1u);
LABEL_344:
                          __break(1u);
LABEL_345:
                          __break(1u);
                          goto LABEL_346;
                        }

                        uint64_t v34 = v160;
                        goto LABEL_267;
                      }

                      uint64_t v156 = 1LL;
                      uint64_t v34 = v158;
                    }

void *specialized AttributedString._InternalRunsSlice.updateEach(with:)( void *result, uint64_t a2, int64_t a3, uint64_t a4)
{
  uint64_t v5 = result[8];
  __int128 v201 = result + 8;
  if (v5) {
    uint64_t v6 = result[10];
  }
  else {
    uint64_t v6 = 0LL;
  }
  if (a2 < 0) {
    goto LABEL_445;
  }
  uint64_t i = a2;
  if (v6 < a2) {
    goto LABEL_445;
  }
  uint64_t v9 = result[9];
  unint64_t v10 = result[11];
  __int128 v196 = result;
  if (v5)
  {
    if (*(_WORD *)(v5 + 16) && result[10] > a2)
    {
      uint64_t v207 = result[9];
      unint64_t v13 = *(unsigned __int8 *)(v5 + 18);
      if (!*(_BYTE *)(v5 + 18))
      {
        uint64_t result = (void *)swift_unknownObjectRetain_n();
        int64_t v17 = i;
        uint64_t v4 = v5;
LABEL_368:
        int64_t v18 = *(unsigned __int16 *)(v4 + 16);
        if (!*(_WORD *)(v4 + 16))
        {
          uint64_t i = a2;
          goto LABEL_385;
        }

        uint64_t v189 = *(void *)(v4 + 24);
        BOOL v23 = __OFSUB__(v17, v189);
        int64_t v14 = v17 - v189;
        uint64_t i = a2;
        if (v23) {
          goto LABEL_470;
        }
        if (!__OFADD__(v14, 1LL))
        {
          if (v14 + 1 <= 0)
          {
            int64_t v18 = 0LL;
            goto LABEL_386;
          }

          if ((_DWORD)v18 == 1)
          {
            int64_t v17 = v14;
            goto LABEL_385;
          }

          goto LABEL_380;
        }

        goto LABEL_471;
      }

      uint64_t result = (void *)swift_unknownObjectRetain_n();
      int64_t v17 = i;
      uint64_t v181 = v5;
      while (1)
      {
        uint64_t v183 = *(unsigned __int16 *)(v181 + 16);
        if (!*(_WORD *)(v181 + 16)) {
          goto LABEL_352;
        }
        uint64_t v184 = *(void *)(v181 + 40);
        BOOL v23 = __OFSUB__(v17, v184);
        int64_t v185 = v17 - v184;
        if (v23) {
          goto LABEL_425;
        }
        if (__OFADD__(v185, 1LL)) {
          goto LABEL_426;
        }
        if (v185 + 1 > 0) {
          break;
        }
        uint64_t v183 = 0LL;
LABEL_353:
        char v182 = (4 * *(_BYTE *)(v181 + 18) + 8) & 0x3C;
        unint64_t v13 = ((-15LL << v182) - 1) & v13 | (v183 << v182);
        uint64_t v4 = *(void *)(v181 + 24 + 24 * v183);
        swift_unknownObjectRetain();
        uint64_t result = (void *)swift_unknownObjectRelease();
        uint64_t v181 = v4;
        if (!*(_BYTE *)(v4 + 18)) {
          goto LABEL_368;
        }
      }

      if ((_DWORD)v183 != 1)
      {
        __int128 v186 = (uint64_t *)(v181 + 64);
        uint64_t v187 = 1LL;
        while (1)
        {
          uint64_t v188 = *v186;
          v186 += 3;
          int64_t v17 = v185 - v188;
          if (__OFSUB__(v185, v188)) {
            break;
          }
          if (__OFADD__(v17, 1LL)) {
            goto LABEL_400;
          }
          if (v17 + 1 < 1)
          {
            uint64_t v183 = v187;
            int64_t v17 = v185;
            goto LABEL_353;
          }

          ++v187;
          int64_t v185 = v17;
          if (v183 == v187) {
            goto LABEL_352;
          }
        }

LABEL_399:
        __break(1u);
LABEL_400:
        __break(1u);
LABEL_401:
        __break(1u);
LABEL_402:
        __break(1u);
        goto LABEL_403;
      }

      int64_t v17 = v185;
LABEL_352:
      if (v17) {
        goto LABEL_424;
      }
      goto LABEL_353;
    }
  }

  unint64_t v12 = swift_unknownObjectRetain_n();
  unint64_t v13 = specialized Rope._endPath.getter(v12);
  uint64_t result = (void *)swift_unknownObjectRelease();
  uint64_t v16 = 0LL;
  int64_t v17 = 0LL;
  if (!v5) {
    goto LABEL_387;
  }
  while (1)
  {
    swift_unknownObjectRetain();
    uint64_t v200 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v13, v16, v5, v9);
    uint64_t result = (void *)swift_unknownObjectRelease_n();
    int64_t v18 = i - v17;
    if (!__OFSUB__(i, v17)) {
      break;
    }
    while (1)
    {
      __break(1u);
LABEL_390:
      __break(1u);
LABEL_391:
      __break(1u);
LABEL_392:
      int64_t v18 = v15;
      int64_t v17 = v14;
LABEL_386:
      swift_unknownObjectRelease();
      uint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v16 = v4;
      int64_t v14 = v13 & 0xFFFFFFFFFFFFF0FFLL;
      unint64_t v13 = v13 & 0xFFFFFFFFFFFFF0FFLL | (v18 << 8);
      uint64_t v9 = v207;
      if (v5) {
        break;
      }
LABEL_387:
      uint64_t v200 = 0LL;
      int64_t v18 = i - v17;
      if (!__OFSUB__(i, v17)) {
        goto LABEL_14;
      }
    }
  }

LABEL_247:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v206 = v13 & 0xFFFFFFFFFFFFF0FFLL | (v136 << 8);
      uint64_t v78 = v204;
      goto LABEL_248;
    }

    if (v207 != v19[11]) {
      goto LABEL_417;
    }
    uint64_t v5 = (uint64_t)v201;
    if (!*v201) {
      goto LABEL_472;
    }
    specialized Rope._Node._prepareModify(at:)(v206, (uint64_t)&v219);
    v234[0] = v220;
    __int128 v213 = v219;
    __int128 v214 = v220;
    __int128 v215 = v221;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)v234);
    uint64_t result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v234 + 8);
    __int128 v214 = MEMORY[0x18961AFF0];
    uint64_t v203 = v207 + 1;
    v19[11] = v207 + 1;
    if (!v19[8]) {
      goto LABEL_473;
    }
    specialized Rope._Node._finalizeModify(_:)(&v210, &v213);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v55 = v43 + 64;
    uint64_t v56 = 1LL << *(_BYTE *)(v43 + 32);
    if (v56 < 64) {
      uint64_t v57 = ~(-1LL << v56);
    }
    else {
      uint64_t v57 = -1LL;
    }
    unint64_t v13 = v57 & *(void *)(v43 + 64);
    int64_t v58 = (unint64_t)(v56 + 63) >> 6;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    uint64_t v4 = 0LL;
    for (i = 0LL; v13; uint64_t result = (void *)swift_bridgeObjectRelease())
    {
      while (1)
      {
        unint64_t v59 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v60 = v59 | (v4 << 6);
LABEL_115:
        uint64_t v63 = (unint64_t *)(*(void *)(v43 + 48) + 16 * v60);
        unint64_t v10 = *v63;
        int64_t v18 = v63[1];
        uint64_t v64 = *(void *)(a4 + 16);
        swift_bridgeObjectRetain();
        if (v64)
        {
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v10, v18);
          uint64_t v5 = v65;
          swift_bridgeObjectRelease();
          if ((v5 & 1) != 0) {
            break;
          }
        }

        uint64_t v217 = 0LL;
        __int128 v215 = 0u;
        __int128 v216 = 0u;
        __int128 v213 = 0u;
        __int128 v214 = 0u;
        uint64_t v5 = (uint64_t)&v218;
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v213, v10, v18);
        uint64_t result = (void *)swift_bridgeObjectRelease();
        uint64_t i = 1LL;
        if (!v13) {
          goto LABEL_99;
        }
      }
    }

            __break(1u);
LABEL_248:
            swift_unknownObjectRetain_n();
            uint64_t result = swift_retain();
            uint64_t v116 = a2;
            unint64_t v26 = v49;
LABEL_249:
            uint64_t v9 = v43;
            uint64_t v127 = *(unsigned __int16 *)(v26 + 16);
            if (!*(_WORD *)(v26 + 16))
            {
LABEL_261:
              if (!v116) {
                goto LABEL_262;
              }
              goto LABEL_387;
            }

            uint64_t v128 = *(void *)(v26 + 24);
            uint64_t v32 = __OFSUB__(v116, v128);
            unint64_t v59 = v116 - v128;
            if (v32)
            {
LABEL_388:
              __break(1u);
              goto LABEL_389;
            }

            if (__OFADD__(v59, 1LL))
            {
LABEL_389:
              __break(1u);
LABEL_390:
              __break(1u);
              goto LABEL_391;
            }

            if (v59 + 1 >= 1)
            {
              if ((_DWORD)v127 == 1)
              {
                uint64_t v116 = v59;
                goto LABEL_261;
              }

              uint64_t v129 = (uint64_t *)(v26 + 48);
              uint64_t v56 = 1LL;
              while (1)
              {
                char v130 = *v129;
                v129 += 3;
                uint64_t v116 = v59 - v130;
                if (__OFSUB__(v59, v130)) {
                  break;
                }
                if (__OFADD__(v116, 1LL)) {
                  goto LABEL_380;
                }
                if (v116 + 1 < 1) {
                  goto LABEL_326;
                }
                ++v56;
                unint64_t v59 = v116;
                if (v127 == v56) {
                  goto LABEL_261;
                }
              }

                            swift_bridgeObjectRelease();
                            uint64_t v0 = &unk_18C5D1000;
                            unint64_t v154 = v200;
                            if ((v203 & 1) != 0)
                            {
LABEL_205:
                              char v165 = (uint64_t *)(*(void *)(v89 + 56) + 16 * v159);
                              *char v165 = v21;
                              v165[1] = v153;
                              goto LABEL_210;
                            }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_285:
              char v165 = (4 * *(_BYTE *)(v164 + 18) + 8) & 0x3C;
              uint64_t v163 = ((-15LL << v165) - 1) & v163 | (v166 << v165);
              uint64_t v22 = *(void *)(v164 + 24 + 24 * v166);
              swift_unknownObjectRetain();
              uint64_t result = (void *)swift_unknownObjectRelease();
              uint64_t v164 = v22;
              if (!*(_BYTE *)(v22 + 18)) {
                goto LABEL_311;
              }
            }
          }

          uint64_t result = (void *)swift_unknownObjectRetain_n();
          uint64_t v163 = 0LL;
          uint64_t v21 = i;
          uint64_t v22 = v161;
LABEL_311:
          uint64_t v173 = *(unsigned __int16 *)(v22 + 16);
          if (!*(_WORD *)(v22 + 16)) {
            goto LABEL_320;
          }
          uint64_t v174 = *(void *)(v22 + 24);
          BOOL v23 = __OFSUB__(v21, v174);
          uint64_t v175 = v21 - v174;
          if (v23) {
            goto LABEL_454;
          }
          if (__OFADD__(v175, 1LL)) {
            goto LABEL_455;
          }
          if (v175 + 1 <= 0)
          {
            uint64_t v173 = 0LL;
          }

          else
          {
            if ((_DWORD)v173 == 1)
            {
LABEL_321:
              if (v175) {
                goto LABEL_451;
              }
              uint64_t v21 = 0LL;
              goto LABEL_347;
            }

            uint64_t v176 = *(void *)(v22 + 48);
            uint64_t v21 = v175 - v176;
            if (__OFSUB__(v175, v176)) {
              goto LABEL_467;
            }
            if (__OFADD__(v21, 1LL)) {
              goto LABEL_468;
            }
            if (v21 + 1 < 1)
            {
              uint64_t v173 = 1LL;
              uint64_t v21 = v175;
            }

            else
            {
              if ((_DWORD)v173 == 2)
              {
LABEL_320:
                uint64_t v175 = v21;
                goto LABEL_321;
              }

              uint64_t v179 = (void *)(v22 + 72);
              uint64_t v180 = 2LL;
              while (1)
              {
                if (v173 == v180) {
                  goto LABEL_446;
                }
                uint64_t v175 = v21 - *v179;
                if (__OFSUB__(v21, *v179)) {
                  goto LABEL_447;
                }
                if (__OFADD__(v175, 1LL)) {
                  goto LABEL_448;
                }
                if (v175 + 1 < 1) {
                  break;
                }
                ++v180;
                v179 += 3;
                uint64_t v21 = v175;
                if (v173 == v180) {
                  goto LABEL_321;
                }
              }

              uint64_t v173 = v180;
            }
          }

        int64_t v14 = v15;
        goto LABEL_296;
      }

LABEL_347:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v13 = v163 & 0xFFFFFFFFFFFFF0FFLL | (v173 << 8);
          goto LABEL_16;
        }

        if (i > 0) {
          goto LABEL_444;
        }
        uint64_t v21 = 0LL;
        uint64_t v4 = 0LL;
        unint64_t v13 = 0LL;
        uint64_t v200 = 0LL;
LABEL_17:
        BOOL v23 = __OFSUB__(i, v21);
        int64_t v18 = i - v21;
        int64_t v20 = a3;
        if (v23) {
          goto LABEL_432;
        }
      }

      else
      {
        int64_t v18 = 0LL;
        uint64_t v200 = 0LL;
        uint64_t v4 = 0LL;
        unint64_t v13 = 0LL;
        unint64_t v10 = v19[11];
        if (v161)
        {
          uint64_t v4 = 0LL;
          int64_t v18 = v19[10];
          uint64_t v200 = v19[9];
          unint64_t v13 = ((-15LL << ((4 * *(_BYTE *)(v161 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v161 + 18) | ((unint64_t)*(unsigned __int16 *)(v161 + 16) << ((4 * *(_BYTE *)(v161 + 18) + 8) & 0x3C));
        }
      }
    }
  }

uint64_t initializeBufferWithCopyOfBuffer for AttributedString._InternalRunsSlice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

void *assignWithCopy for AttributedString._InternalRunsSlice(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for AttributedString._InternalRunsSlice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for AttributedString._InternalRunsSlice()
{
  return &type metadata for AttributedString._InternalRunsSlice;
}

uint64_t dispatch thunk of ParseStrategy.parse(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

void one-time initialization function for compatibility1()
{
  uint64_t v0 = (void *)objc_opt_self();
  id v1 = objc_msgSend(v0, sel_mainBundle);
  id v2 = objc_msgSend(v1, sel_bundleIdentifier);

  if (!v2) {
    goto LABEL_34;
  }
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  if (v3 == (id)0xD000000000000016LL && v5 == 0x80000001839D23D0LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    Swift::Bool v7 = 0;
    if ((v6 & 1) == 0)
    {
LABEL_35:
      static Calendar.compatibility1 = v7;
      return;
    }
  }

  id v8 = objc_msgSend(v0, sel_mainBundle);
  id v9 = objc_msgSend(v8, sel_infoDictionary);

  if (!v9)
  {
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    goto LABEL_33;
  }

  swift_unknownObjectRetain();
  uint64_t v10 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v10)
  {
    unint64_t v11 = (void *)v10;
    goto LABEL_25;
  }

  id v12 = objc_msgSend(v9, sel_count);
  if (!v12)
  {

    unint64_t v11 = (void *)MEMORY[0x18961AFF0];
    if (!*(void *)(MEMORY[0x18961AFF0] + 16LL)) {
      goto LABEL_29;
    }
LABEL_26:
    unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x80000001839D23F0LL);
    if ((v42 & 1) != 0)
    {
      outlined init with copy of Any(v11[7] + 32 * v41, (uint64_t)&v45);
      goto LABEL_30;
    }

uint64_t one-time initialization function for compatibility1()
{
  uint64_t result = closure #1 in variable initialization expression of static JSONEncoder.compatibility1();
  static JSONEncoder.compatibility1 = result & 1;
  return result;
}

{
  uint64_t result;
  uint64_t result = _NSLinkedOnOrAfterCrystalglow();
  static String.compatibility1 = result ^ 1;
  return result;
}

{
  uint64_t result;
  uint64_t result = _NSLinkedOnOrAfterCrystalglow();
  static NSDecimal.compatibility1 = result ^ 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of static JSONEncoder.compatibility1()
{
  id v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1) {
    return 0LL;
  }
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  if (v2 == (id)0xD000000000000012LL && v4 == 0x80000001839D2410LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == (id)0xD000000000000017LL && v4 == 0x80000001839D2430LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == (id)0xD000000000000017LL && v4 == 0x80000001839D2450LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }

uint64_t _NSLinkedOnOrAfterCrystalglow()
{
  return dyld_program_sdk_at_least();
}

void *specialized Dictionary.subscript.setter(uint64_t a1, char a2, unint64_t a3)
{
  uint64_t v4 = v3;
  if ((a2 & 1) != 0)
  {
LABEL_6:
    uint64_t result = (void *)specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v19 & 1) == 0) {
      return result;
    }
    a3 = (unint64_t)result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a1 = *v4;
    uint64_t *v4 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v21 = a1;
LABEL_9:
      specialized _NativeDictionary._delete(at:)(a3, v21);
      uint64_t *v4 = v21;
      return (void *)swift_bridgeObjectRelease();
    }

{
  uint64_t *v3;
  uint64_t *v4;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *result;
  char v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v4 = v3;
  if ((a2 & 1) != 0)
  {
LABEL_6:
    uint64_t result = (void *)specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v19 & 1) == 0) {
      return result;
    }
    a3 = (unint64_t)result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a1 = *v4;
    uint64_t *v4 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v21 = a1;
LABEL_9:
      specialized _NativeDictionary._delete(at:)(a3, v21);
      uint64_t *v4 = v21;
      return (void *)swift_bridgeObjectRelease();
    }

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*(void *)(a1 + 24))
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    char v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v22 = *v3;
      uint64_t *v3 = 0x8000000000000000LL;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v23 = v22;
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        uint64_t v43 = static _DictionaryStorage.copy(original:)();
        uint64_t v23 = v43;
        if (*(void *)(v22 + 16))
        {
          int64_t v44 = (char *)(v43 + 64);
          __srca = (char *)(v22 + 64);
          unint64_t v45 = (unint64_t)((1LL << *(_BYTE *)(v23 + 32)) + 63) >> 6;
          if (v23 != v22 || v44 >= &__srca[8 * v45]) {
            memmove(v44, __srca, 8 * v45);
          }
          int64_t v68 = 0LL;
          *(void *)(v23 + 16) = *(void *)(v22 + 16);
          uint64_t v46 = 1LL << *(_BYTE *)(v22 + 32);
          uint64_t v47 = -1LL;
          if (v46 < 64) {
            uint64_t v47 = ~(-1LL << v46);
          }
          unint64_t v48 = v47 & *(void *)(v22 + 64);
          int64_t v64 = (unint64_t)(v46 + 63) >> 6;
          while (1)
          {
            if (v48)
            {
              unint64_t v49 = __clz(__rbit64(v48));
              v48 &= v48 - 1;
              unint64_t v50 = v49 | (v68 << 6);
            }

            else
            {
              int64_t v57 = v68 + 1;
              if (__OFADD__(v68, 1LL))
              {
LABEL_81:
                __break(1u);
                goto LABEL_82;
              }

              if (v57 >= v64) {
                break;
              }
              unint64_t v58 = *(void *)&__srca[8 * v57];
              int64_t v59 = v68 + 1;
              if (!v58)
              {
                int64_t v59 = v68 + 2;
                if (v68 + 2 >= v64) {
                  break;
                }
                unint64_t v58 = *(void *)&__srca[8 * v59];
                if (!v58)
                {
                  int64_t v59 = v68 + 3;
                  if (v68 + 3 >= v64) {
                    break;
                  }
                  unint64_t v58 = *(void *)&__srca[8 * v59];
                  if (!v58)
                  {
                    if (v68 + 4 >= v64) {
                      break;
                    }
                    int64_t v59 = v68 + 4;
                    unint64_t v58 = *(void *)&__srca[8 * v68 + 32];
                    if (!v58)
                    {
                      if (v68 + 5 >= v64) {
                        break;
                      }
                      int64_t v59 = v68 + 5;
                      unint64_t v58 = *(void *)&__srca[8 * v68 + 40];
                      if (!v58)
                      {
                        int64_t v60 = v68 + 6;
                        if (v68 + 6 >= v64) {
                          break;
                        }
                        unint64_t v58 = *(void *)&__srca[8 * v60];
                        if (!v58)
                        {
                          while (1)
                          {
                            int64_t v59 = v60 + 1;
                            if (__OFADD__(v60, 1LL)) {
                              break;
                            }
                            if (v59 >= v64) {
                              goto LABEL_79;
                            }
                            unint64_t v58 = *(void *)&__srca[8 * v59];
                            ++v60;
                            if (v58) {
                              goto LABEL_78;
                            }
                          }

{
  uint64_t *v3;
  char v4;
  uint64_t *v5;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  char v20;
  unint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  int64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v5 = v3;
  if (!a2)
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v20 & 1) == 0) {
      return result;
    }
    uint64_t v21 = result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      unint64_t v24 = v23;
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
      unint64_t v45 = static _DictionaryStorage.copy(original:)();
      unint64_t v24 = v45;
      if (*(void *)(v23 + 16))
      {
        uint64_t v46 = (void *)(v45 + 64);
        uint64_t v47 = v23 + 64;
        unint64_t v48 = (unint64_t)((1LL << *(_BYTE *)(v24 + 32)) + 63) >> 6;
        unint64_t v49 = 0LL;
        *(void *)(v24 + 16) = *(void *)(v23 + 16);
        unint64_t v50 = 1LL << *(_BYTE *)(v23 + 32);
        uint64_t v51 = -1LL;
        if (v50 < 64) {
          uint64_t v51 = ~(-1LL << v50);
        }
        uint64_t v52 = v51 & *(void *)(v23 + 64);
        uint64_t v53 = (unint64_t)(v50 + 63) >> 6;
        while (1)
        {
          if (v52)
          {
            uint64_t v54 = __clz(__rbit64(v52));
            v52 &= v52 - 1;
            uint64_t v55 = v54 | (v49 << 6);
          }

          else
          {
            uint64_t v63 = v49 + 1;
            if (__OFADD__(v49, 1LL))
            {
LABEL_79:
              __break(1u);
              goto LABEL_80;
            }

            if (v63 >= v53) {
              break;
            }
            int64_t v64 = *(void *)(v47 + 8 * v63);
            ++v49;
            if (!v64)
            {
              unint64_t v49 = v63 + 1;
              if (v63 + 1 >= v53) {
                break;
              }
              int64_t v64 = *(void *)(v47 + 8 * v49);
              if (!v64)
              {
                unint64_t v49 = v63 + 2;
                if (v63 + 2 >= v53) {
                  break;
                }
                int64_t v64 = *(void *)(v47 + 8 * v49);
                if (!v64)
                {
                  unint64_t v49 = v63 + 3;
                  if (v63 + 3 >= v53) {
                    break;
                  }
                  int64_t v64 = *(void *)(v47 + 8 * v49);
                  if (!v64)
                  {
                    unint64_t v49 = v63 + 4;
                    if (v63 + 4 >= v53) {
                      break;
                    }
                    int64_t v64 = *(void *)(v47 + 8 * v49);
                    if (!v64)
                    {
                      uint64_t v65 = v63 + 5;
                      if (v65 >= v53) {
                        break;
                      }
                      int64_t v64 = *(void *)(v47 + 8 * v65);
                      if (!v64)
                      {
                        while (1)
                        {
                          unint64_t v49 = v65 + 1;
                          if (__OFADD__(v65, 1LL)) {
                            break;
                          }
                          if (v49 >= v53) {
                            goto LABEL_77;
                          }
                          int64_t v64 = *(void *)(v47 + 8 * v49);
                          ++v65;
                          if (v64) {
                            goto LABEL_76;
                          }
                        }

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, void *a2)
{
  char v4 = v2;
  if (!*(void *)(a1 + 24))
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    char v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v20 = *v2;
      uint64_t *v2 = 0x8000000000000000LL;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v21 = v20;
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
        uint64_t v42 = static _DictionaryStorage.copy(original:)();
        uint64_t v21 = v42;
        if (*(void *)(v20 + 16))
        {
          uint64_t v43 = (char *)(v42 + 64);
          __srca = (char *)(v20 + 64);
          unint64_t v44 = (unint64_t)((1LL << *(_BYTE *)(v21 + 32)) + 63) >> 6;
          if (v21 != v20 || v43 >= &__srca[8 * v44]) {
            memmove(v43, __srca, 8 * v44);
          }
          int64_t v45 = 0LL;
          *(void *)(v21 + 16) = *(void *)(v20 + 16);
          uint64_t v46 = 1LL << *(_BYTE *)(v20 + 32);
          uint64_t v47 = -1LL;
          if (v46 < 64) {
            uint64_t v47 = ~(-1LL << v46);
          }
          unint64_t v48 = v47 & *(void *)(v20 + 64);
          int64_t v60 = (unint64_t)(v46 + 63) >> 6;
          while (1)
          {
            if (v48)
            {
              unint64_t v49 = __clz(__rbit64(v48));
              v48 &= v48 - 1;
              unint64_t v50 = v49 | (v45 << 6);
            }

            else
            {
              int64_t v55 = v45 + 1;
              if (__OFADD__(v45, 1LL))
              {
LABEL_81:
                __break(1u);
                goto LABEL_82;
              }

              if (v55 >= v60) {
                break;
              }
              unint64_t v56 = *(void *)&__srca[8 * v55];
              ++v45;
              if (!v56)
              {
                int64_t v45 = v55 + 1;
                if (v55 + 1 >= v60) {
                  break;
                }
                unint64_t v56 = *(void *)&__srca[8 * v45];
                if (!v56)
                {
                  int64_t v45 = v55 + 2;
                  if (v55 + 2 >= v60) {
                    break;
                  }
                  unint64_t v56 = *(void *)&__srca[8 * v45];
                  if (!v56)
                  {
                    int64_t v45 = v55 + 3;
                    if (v55 + 3 >= v60) {
                      break;
                    }
                    unint64_t v56 = *(void *)&__srca[8 * v45];
                    if (!v56)
                    {
                      int64_t v45 = v55 + 4;
                      if (v55 + 4 >= v60) {
                        break;
                      }
                      unint64_t v56 = *(void *)&__srca[8 * v45];
                      if (!v56)
                      {
                        int64_t v57 = v55 + 5;
                        if (v57 >= v60) {
                          break;
                        }
                        unint64_t v56 = *(void *)&__srca[8 * v57];
                        if (!v56)
                        {
                          while (1)
                          {
                            int64_t v45 = v57 + 1;
                            if (__OFADD__(v57, 1LL)) {
                              break;
                            }
                            if (v45 >= v60) {
                              goto LABEL_79;
                            }
                            unint64_t v56 = *(void *)&__srca[8 * v45];
                            ++v57;
                            if (v56) {
                              goto LABEL_78;
                            }
                          }

{
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t result;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  char *v40;
  id v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  int64_t v60;
  char *__src;
  char *__srca;
  _OWORD v63[2];
  uint64_t v64;
  _OWORD v65[2];
  char v4 = v2;
  if (!*(void *)(a1 + 24))
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    char v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v20 = *v2;
      uint64_t *v2 = 0x8000000000000000LL;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v21 = v20;
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
        uint64_t v42 = static _DictionaryStorage.copy(original:)();
        uint64_t v21 = v42;
        if (*(void *)(v20 + 16))
        {
          uint64_t v43 = (char *)(v42 + 64);
          __srca = (char *)(v20 + 64);
          unint64_t v44 = (unint64_t)((1LL << *(_BYTE *)(v21 + 32)) + 63) >> 6;
          if (v21 != v20 || v43 >= &__srca[8 * v44]) {
            memmove(v43, __srca, 8 * v44);
          }
          int64_t v45 = 0LL;
          *(void *)(v21 + 16) = *(void *)(v20 + 16);
          uint64_t v46 = 1LL << *(_BYTE *)(v20 + 32);
          uint64_t v47 = -1LL;
          if (v46 < 64) {
            uint64_t v47 = ~(-1LL << v46);
          }
          unint64_t v48 = v47 & *(void *)(v20 + 64);
          int64_t v60 = (unint64_t)(v46 + 63) >> 6;
          while (1)
          {
            if (v48)
            {
              unint64_t v49 = __clz(__rbit64(v48));
              v48 &= v48 - 1;
              unint64_t v50 = v49 | (v45 << 6);
            }

            else
            {
              int64_t v55 = v45 + 1;
              if (__OFADD__(v45, 1LL))
              {
LABEL_81:
                __break(1u);
                goto LABEL_82;
              }

              if (v55 >= v60) {
                break;
              }
              unint64_t v56 = *(void *)&__srca[8 * v55];
              ++v45;
              if (!v56)
              {
                int64_t v45 = v55 + 1;
                if (v55 + 1 >= v60) {
                  break;
                }
                unint64_t v56 = *(void *)&__srca[8 * v45];
                if (!v56)
                {
                  int64_t v45 = v55 + 2;
                  if (v55 + 2 >= v60) {
                    break;
                  }
                  unint64_t v56 = *(void *)&__srca[8 * v45];
                  if (!v56)
                  {
                    int64_t v45 = v55 + 3;
                    if (v55 + 3 >= v60) {
                      break;
                    }
                    unint64_t v56 = *(void *)&__srca[8 * v45];
                    if (!v56)
                    {
                      int64_t v45 = v55 + 4;
                      if (v55 + 4 >= v60) {
                        break;
                      }
                      unint64_t v56 = *(void *)&__srca[8 * v45];
                      if (!v56)
                      {
                        int64_t v57 = v55 + 5;
                        if (v57 >= v60) {
                          break;
                        }
                        unint64_t v56 = *(void *)&__srca[8 * v57];
                        if (!v56)
                        {
                          while (1)
                          {
                            int64_t v45 = v57 + 1;
                            if (__OFADD__(v57, 1LL)) {
                              break;
                            }
                            if (v45 >= v60) {
                              goto LABEL_79;
                            }
                            unint64_t v56 = *(void *)&__srca[8 * v45];
                            ++v57;
                            if (v56) {
                              goto LABEL_78;
                            }
                          }

{
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t result;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  char *v40;
  id v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  int64_t v60;
  char *__src;
  char *__srca;
  _OWORD v63[2];
  uint64_t v64;
  _OWORD v65[2];
  char v4 = v2;
  if (!*(void *)(a1 + 24))
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    char v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v20 = *v2;
      uint64_t *v2 = 0x8000000000000000LL;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v21 = v20;
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSURLResourceKey, Any>);
        uint64_t v42 = static _DictionaryStorage.copy(original:)();
        uint64_t v21 = v42;
        if (*(void *)(v20 + 16))
        {
          uint64_t v43 = (char *)(v42 + 64);
          __srca = (char *)(v20 + 64);
          unint64_t v44 = (unint64_t)((1LL << *(_BYTE *)(v21 + 32)) + 63) >> 6;
          if (v21 != v20 || v43 >= &__srca[8 * v44]) {
            memmove(v43, __srca, 8 * v44);
          }
          int64_t v45 = 0LL;
          *(void *)(v21 + 16) = *(void *)(v20 + 16);
          uint64_t v46 = 1LL << *(_BYTE *)(v20 + 32);
          uint64_t v47 = -1LL;
          if (v46 < 64) {
            uint64_t v47 = ~(-1LL << v46);
          }
          unint64_t v48 = v47 & *(void *)(v20 + 64);
          int64_t v60 = (unint64_t)(v46 + 63) >> 6;
          while (1)
          {
            if (v48)
            {
              unint64_t v49 = __clz(__rbit64(v48));
              v48 &= v48 - 1;
              unint64_t v50 = v49 | (v45 << 6);
            }

            else
            {
              int64_t v55 = v45 + 1;
              if (__OFADD__(v45, 1LL))
              {
LABEL_81:
                __break(1u);
                goto LABEL_82;
              }

              if (v55 >= v60) {
                break;
              }
              unint64_t v56 = *(void *)&__srca[8 * v55];
              ++v45;
              if (!v56)
              {
                int64_t v45 = v55 + 1;
                if (v55 + 1 >= v60) {
                  break;
                }
                unint64_t v56 = *(void *)&__srca[8 * v45];
                if (!v56)
                {
                  int64_t v45 = v55 + 2;
                  if (v55 + 2 >= v60) {
                    break;
                  }
                  unint64_t v56 = *(void *)&__srca[8 * v45];
                  if (!v56)
                  {
                    int64_t v45 = v55 + 3;
                    if (v55 + 3 >= v60) {
                      break;
                    }
                    unint64_t v56 = *(void *)&__srca[8 * v45];
                    if (!v56)
                    {
                      int64_t v45 = v55 + 4;
                      if (v55 + 4 >= v60) {
                        break;
                      }
                      unint64_t v56 = *(void *)&__srca[8 * v45];
                      if (!v56)
                      {
                        int64_t v57 = v55 + 5;
                        if (v57 >= v60) {
                          break;
                        }
                        unint64_t v56 = *(void *)&__srca[8 * v57];
                        if (!v56)
                        {
                          while (1)
                          {
                            int64_t v45 = v57 + 1;
                            if (__OFADD__(v57, 1LL)) {
                              break;
                            }
                            if (v45 >= v60) {
                              goto LABEL_79;
                            }
                            unint64_t v56 = *(void *)&__srca[8 * v45];
                            ++v57;
                            if (v56) {
                              goto LABEL_78;
                            }
                          }

char *specialized Dictionary.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (a2 >> 60 == 15)
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    char v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = *v4;
      uint64_t *v4 = 0x8000000000000000LL;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v13 = v12;
LABEL_5:
        swift_bridgeObjectRelease();
        uint64_t v14 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v8);
        uint64_t v15 = *v14;
        unint64_t v16 = v14[1];
        specialized _NativeDictionary._delete(at:)(v8, v13);
        *uint64_t v5 = v13;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (char *)outlined consume of Data._Representation(v15, v16);
      }

char *specialized Dictionary.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v4 = v3;
  outlined init with take of Morphology._CustomPronoun?(a1, (uint64_t)v100);
  uint64_t v8 = v100[1];
  uint64_t v10 = v100[2];
  uint64_t v9 = v100[3];
  uint64_t v11 = v100[4];
  uint64_t v12 = v100[5];
  uint64_t v13 = v100[6];
  uint64_t v95 = v100[7];
  uint64_t v97 = v100[0];
  uint64_t v91 = v100[9];
  __src = (void *)v100[8];
  outlined init with take of Morphology._CustomPronoun?(a1, (uint64_t)v101);
  if (v102 == 1)
  {
    swift_bridgeObjectRetain();
    a2 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      return (char *)swift_bridgeObjectRelease();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v4;
    uint64_t *v4 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v17 = v9;
LABEL_5:
      swift_bridgeObjectRelease();
      specialized _NativeDictionary._delete(at:)(a2, v17);
      uint64_t *v4 = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (char *)swift_bridgeObjectRelease();
    }

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6 = v4;
  if (!a2)
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0) {
      return swift_bridgeObjectRelease();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *v4;
    uint64_t *v4 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v26 = v25;
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
      uint64_t v50 = static _DictionaryStorage.copy(original:)();
      uint64_t v26 = v50;
      if (*(void *)(v25 + 16))
      {
        __int128 v51 = (void *)(v50 + 64);
        uint64_t v52 = v25 + 64;
        unint64_t v53 = (unint64_t)((1LL << *(_BYTE *)(v26 + 32)) + 63) >> 6;
        int64_t v54 = 0LL;
        *(void *)(v26 + 16) = *(void *)(v25 + 16);
        uint64_t v55 = 1LL << *(_BYTE *)(v25 + 32);
        uint64_t v56 = -1LL;
        if (v55 < 64) {
          uint64_t v56 = ~(-1LL << v55);
        }
        unint64_t v57 = v56 & *(void *)(v25 + 64);
        int64_t v58 = (unint64_t)(v55 + 63) >> 6;
        while (1)
        {
          if (v57)
          {
            unint64_t v59 = __clz(__rbit64(v57));
            v57 &= v57 - 1;
            unint64_t v60 = v59 | (v54 << 6);
          }

          else
          {
            int64_t v70 = v54 + 1;
            if (__OFADD__(v54, 1LL))
            {
LABEL_81:
              __break(1u);
              goto LABEL_82;
            }

            if (v70 >= v58) {
              break;
            }
            unint64_t v71 = *(void *)(v52 + 8 * v70);
            ++v54;
            if (!v71)
            {
              int64_t v54 = v70 + 1;
              if (v70 + 1 >= v58) {
                break;
              }
              unint64_t v71 = *(void *)(v52 + 8 * v54);
              if (!v71)
              {
                int64_t v54 = v70 + 2;
                if (v70 + 2 >= v58) {
                  break;
                }
                unint64_t v71 = *(void *)(v52 + 8 * v54);
                if (!v71)
                {
                  int64_t v54 = v70 + 3;
                  if (v70 + 3 >= v58) {
                    break;
                  }
                  unint64_t v71 = *(void *)(v52 + 8 * v54);
                  if (!v71)
                  {
                    int64_t v54 = v70 + 4;
                    if (v70 + 4 >= v58) {
                      break;
                    }
                    unint64_t v71 = *(void *)(v52 + 8 * v54);
                    if (!v71)
                    {
                      int64_t v72 = v70 + 5;
                      if (v72 >= v58) {
                        break;
                      }
                      unint64_t v71 = *(void *)(v52 + 8 * v72);
                      if (!v71)
                      {
                        while (1)
                        {
                          int64_t v54 = v72 + 1;
                          if (__OFADD__(v72, 1LL)) {
                            break;
                          }
                          if (v54 >= v58) {
                            goto LABEL_79;
                          }
                          unint64_t v71 = *(void *)(v52 + 8 * v54);
                          ++v72;
                          if (v71) {
                            goto LABEL_78;
                          }
                        }

{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  int64_t v70;
  unint64_t v71;
  int64_t v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  char v6 = v4;
  if (!a2)
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    char v23 = v22;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v23 & 1) == 0) {
      return result;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v26 = *v4;
    uint64_t *v4 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v27 = v26;
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
      uint64_t v50 = static _DictionaryStorage.copy(original:)();
      uint64_t v27 = v50;
      if (*(void *)(v26 + 16))
      {
        __int128 v51 = (void *)(v50 + 64);
        uint64_t v52 = v26 + 64;
        unint64_t v53 = (unint64_t)((1LL << *(_BYTE *)(v27 + 32)) + 63) >> 6;
        int64_t v54 = 0LL;
        *(void *)(v27 + 16) = *(void *)(v26 + 16);
        uint64_t v55 = 1LL << *(_BYTE *)(v26 + 32);
        uint64_t v56 = -1LL;
        if (v55 < 64) {
          uint64_t v56 = ~(-1LL << v55);
        }
        unint64_t v57 = v56 & *(void *)(v26 + 64);
        int64_t v58 = (unint64_t)(v55 + 63) >> 6;
        while (1)
        {
          if (v57)
          {
            unint64_t v59 = __clz(__rbit64(v57));
            v57 &= v57 - 1;
            unint64_t v60 = v59 | (v54 << 6);
          }

          else
          {
            int64_t v70 = v54 + 1;
            if (__OFADD__(v54, 1LL))
            {
LABEL_79:
              __break(1u);
              goto LABEL_80;
            }

            if (v70 >= v58) {
              break;
            }
            unint64_t v71 = *(void *)(v52 + 8 * v70);
            ++v54;
            if (!v71)
            {
              int64_t v54 = v70 + 1;
              if (v70 + 1 >= v58) {
                break;
              }
              unint64_t v71 = *(void *)(v52 + 8 * v54);
              if (!v71)
              {
                int64_t v54 = v70 + 2;
                if (v70 + 2 >= v58) {
                  break;
                }
                unint64_t v71 = *(void *)(v52 + 8 * v54);
                if (!v71)
                {
                  int64_t v54 = v70 + 3;
                  if (v70 + 3 >= v58) {
                    break;
                  }
                  unint64_t v71 = *(void *)(v52 + 8 * v54);
                  if (!v71)
                  {
                    int64_t v54 = v70 + 4;
                    if (v70 + 4 >= v58) {
                      break;
                    }
                    unint64_t v71 = *(void *)(v52 + 8 * v54);
                    if (!v71)
                    {
                      int64_t v72 = v70 + 5;
                      if (v72 >= v58) {
                        break;
                      }
                      unint64_t v71 = *(void *)(v52 + 8 * v72);
                      if (!v71)
                      {
                        while (1)
                        {
                          int64_t v54 = v72 + 1;
                          if (__OFADD__(v72, 1LL)) {
                            break;
                          }
                          if (v54 >= v58) {
                            goto LABEL_77;
                          }
                          unint64_t v71 = *(void *)(v52 + 8 * v54);
                          ++v72;
                          if (v71) {
                            goto LABEL_76;
                          }
                        }

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  char v4 = v2;
  if (!a1)
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == 0) {
      return result;
    }
    unint64_t v19 = result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    uint64_t *v2 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v22 = v21;
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
      uint64_t v41 = static _DictionaryStorage.copy(original:)();
      uint64_t v22 = v41;
      if (*(void *)(v21 + 16))
      {
        uint64_t v42 = (void *)(v41 + 64);
        uint64_t v43 = v21 + 64;
        unint64_t v44 = (unint64_t)((1LL << *(_BYTE *)(v22 + 32)) + 63) >> 6;
        int64_t v45 = 0LL;
        *(void *)(v22 + 16) = *(void *)(v21 + 16);
        uint64_t v46 = 1LL << *(_BYTE *)(v21 + 32);
        uint64_t v47 = -1LL;
        if (v46 < 64) {
          uint64_t v47 = ~(-1LL << v46);
        }
        unint64_t v48 = v47 & *(void *)(v21 + 64);
        int64_t v49 = (unint64_t)(v46 + 63) >> 6;
        while (1)
        {
          if (v48)
          {
            unint64_t v50 = __clz(__rbit64(v48));
            v48 &= v48 - 1;
            unint64_t v51 = v50 | (v45 << 6);
          }

          else
          {
            int64_t v55 = v45 + 1;
            if (__OFADD__(v45, 1LL))
            {
LABEL_79:
              __break(1u);
              goto LABEL_80;
            }

            if (v55 >= v49) {
              break;
            }
            unint64_t v56 = *(void *)(v43 + 8 * v55);
            ++v45;
            if (!v56)
            {
              int64_t v45 = v55 + 1;
              if (v55 + 1 >= v49) {
                break;
              }
              unint64_t v56 = *(void *)(v43 + 8 * v45);
              if (!v56)
              {
                int64_t v45 = v55 + 2;
                if (v55 + 2 >= v49) {
                  break;
                }
                unint64_t v56 = *(void *)(v43 + 8 * v45);
                if (!v56)
                {
                  int64_t v45 = v55 + 3;
                  if (v55 + 3 >= v49) {
                    break;
                  }
                  unint64_t v56 = *(void *)(v43 + 8 * v45);
                  if (!v56)
                  {
                    int64_t v45 = v55 + 4;
                    if (v55 + 4 >= v49) {
                      break;
                    }
                    unint64_t v56 = *(void *)(v43 + 8 * v45);
                    if (!v56)
                    {
                      int64_t v57 = v55 + 5;
                      if (v57 >= v49) {
                        break;
                      }
                      unint64_t v56 = *(void *)(v43 + 8 * v57);
                      if (!v56)
                      {
                        while (1)
                        {
                          int64_t v45 = v57 + 1;
                          if (__OFADD__(v57, 1LL)) {
                            break;
                          }
                          if (v45 >= v49) {
                            goto LABEL_77;
                          }
                          unint64_t v56 = *(void *)(v43 + 8 * v45);
                          ++v57;
                          if (v56) {
                            goto LABEL_76;
                          }
                        }

{
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  char v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(unint64_t, uint64_t);
  _OWORD *v28;
  uint64_t result;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  _OWORD v66[2];
  char v4 = v2;
  char v7 = type metadata accessor for CodingUserInfoKey();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  unint64_t v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!*(void *)(a1 + 24))
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) != 0)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v25 = *v4;
      uint64_t *v4 = 0x8000000000000000LL;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v26 = v25;
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
        unint64_t v44 = static _DictionaryStorage.copy(original:)();
        uint64_t v26 = v44;
        if (*(void *)(v25 + 16))
        {
          int64_t v45 = (char *)(v44 + 64);
          uint64_t v46 = 1LL << *(_BYTE *)(v26 + 32);
          uint64_t v61 = v25 + 64;
          uint64_t v47 = (unint64_t)(v46 + 63) >> 6;
          *(void *)(v26 + 16) = *(void *)(v25 + 16);
          unint64_t v48 = 1LL << *(_BYTE *)(v25 + 32);
          int64_t v49 = -1LL;
          if (v48 < 64) {
            int64_t v49 = ~(-1LL << v48);
          }
          unint64_t v50 = v49 & *(void *)(v25 + 64);
          uint64_t v62 = 0LL;
          uint64_t v63 = v50;
          unint64_t v60 = (unint64_t)(v48 + 63) >> 6;
          while (1)
          {
            if (v63)
            {
              unint64_t v51 = __clz(__rbit64(v63));
              v63 &= v63 - 1;
              uint64_t v52 = v51 | (v62 << 6);
            }

            else
            {
              int64_t v55 = v62 + 1;
              if (__OFADD__(v62, 1LL))
              {
LABEL_80:
                __break(1u);
                goto LABEL_81;
              }

              if (v55 >= v60) {
                break;
              }
              unint64_t v56 = *(void *)(v61 + 8 * v55);
              int64_t v57 = v62 + 1;
              if (!v56)
              {
                int64_t v57 = v62 + 2;
                if (v62 + 2 >= v60) {
                  break;
                }
                unint64_t v56 = *(void *)(v61 + 8 * v57);
                if (!v56)
                {
                  int64_t v57 = v62 + 3;
                  if (v62 + 3 >= v60) {
                    break;
                  }
                  unint64_t v56 = *(void *)(v61 + 8 * v57);
                  if (!v56)
                  {
                    if (v62 + 4 >= v60) {
                      break;
                    }
                    int64_t v57 = v62 + 4;
                    unint64_t v56 = *(void *)(v61 + 8 * (v62 + 4));
                    if (!v56)
                    {
                      if (v62 + 5 >= v60) {
                        break;
                      }
                      int64_t v57 = v62 + 5;
                      unint64_t v56 = *(void *)(v61 + 8 * (v62 + 5));
                      if (!v56)
                      {
                        uint64_t v58 = v62 + 6;
                        if (v62 + 6 >= v60) {
                          break;
                        }
                        unint64_t v56 = *(void *)(v61 + 8 * v58);
                        if (!v56)
                        {
                          while (1)
                          {
                            int64_t v57 = v58 + 1;
                            if (__OFADD__(v58, 1LL)) {
                              break;
                            }
                            if (v57 >= v60) {
                              goto LABEL_78;
                            }
                            unint64_t v56 = *(void *)(v61 + 8 * v57);
                            ++v58;
                            if (v56) {
                              goto LABEL_77;
                            }
                          }

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  MEMORY[0x1895F8858](v10);
  BOOL v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v86 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  char v18 = (char *)&v74 - v17;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(a1, 1LL, v13) == 1)
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
    swift_bridgeObjectRetain();
    a2 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 1);
    char v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1LL, 1LL, v13);
      goto LABEL_12;
    }

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a4 = *v5;
    *char v5 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v22 = a4;
LABEL_5:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, unint64_t, uint64_t))(v14 + 32))( v12,  *(void *)(v22 + 56) + *(void *)(v14 + 72) * a2,  v13);
      specialized _NativeDictionary._delete(at:)(a2, v22);
      *char v5 = v22;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v12, 0LL, 1LL, v13);
LABEL_12:
      swift_bridgeObjectRelease();
      return outlined destroy of Any?( (uint64_t)v12,  &demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
    }

unint64_t static CocoaError.error(_:userInfo:url:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  char v5 = *(void **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 16);
  if (!a2)
  {
    *(void *)&v46[0] = MEMORY[0x18961AFF0];
    if (v5) {
      goto LABEL_40;
    }
    goto LABEL_41;
  }

  uint64_t v36 = *(void *)(a3 + 8);
  uint64_t v37 = *a1;
  uint64_t v35 = *(void *)(a3 + 16);
  if (*(void *)(a2 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v8 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }

  else
  {
    uint64_t v8 = (void *)MEMORY[0x18961AFF0];
  }

  uint64_t v39 = a2 + 64;
  uint64_t v9 = -1LL;
  uint64_t v10 = -1LL << *(_BYTE *)(a2 + 32);
  if (-v10 < 64) {
    uint64_t v9 = ~(-1LL << -(char)v10);
  }
  unint64_t v11 = v9 & *(void *)(a2 + 64);
  int64_t v38 = (unint64_t)(63 - v10) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v11)
    {
      uint64_t v16 = (v11 - 1) & v11;
      unint64_t v17 = __clz(__rbit64(v11)) | (v13 << 6);
      int64_t v18 = v13;
      goto LABEL_32;
    }

    int64_t v19 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_44;
    }
    if (v19 >= v38) {
      break;
    }
    unint64_t v20 = *(void *)(v39 + 8 * v19);
    int64_t v18 = v13 + 1;
    if (!v20)
    {
      int64_t v18 = v13 + 2;
      if (v13 + 2 >= v38) {
        break;
      }
      unint64_t v20 = *(void *)(v39 + 8 * v18);
      if (!v20)
      {
        int64_t v18 = v13 + 3;
        if (v13 + 3 >= v38) {
          break;
        }
        unint64_t v20 = *(void *)(v39 + 8 * v18);
        if (!v20)
        {
          int64_t v18 = v13 + 4;
          if (v13 + 4 >= v38) {
            break;
          }
          unint64_t v20 = *(void *)(v39 + 8 * v18);
          if (!v20)
          {
            int64_t v18 = v13 + 5;
            if (v13 + 5 >= v38) {
              break;
            }
            unint64_t v20 = *(void *)(v39 + 8 * v18);
            if (!v20)
            {
              int64_t v21 = v13 + 6;
              if (v13 + 6 >= v38) {
                break;
              }
              unint64_t v20 = *(void *)(v39 + 8 * v21);
              if (!v20)
              {
                while (1)
                {
                  int64_t v18 = v21 + 1;
                  if (__OFADD__(v21, 1LL)) {
                    goto LABEL_45;
                  }
                  if (v18 >= v38) {
                    goto LABEL_38;
                  }
                  unint64_t v20 = *(void *)(v39 + 8 * v18);
                  ++v21;
                  if (v20) {
                    goto LABEL_31;
                  }
                }
              }

              int64_t v18 = v13 + 6;
            }
          }
        }
      }
    }

uint64_t Error<>._domain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t Error<>._code.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

Foundation::CocoaError::Code __swiftcall CocoaError.Code.init(rawValue:)(Foundation::CocoaError::Code rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t LocalizedError.errorDescription.getter()
{
  return 0LL;
}

uint64_t LocalizedError.failureReason.getter()
{
  return 0LL;
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return 0LL;
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return 0LL;
}

id CocoaError._nsError.getter()
{
  return *v0;
}

void __swiftcall CocoaError.init(_nsError:)(Foundation::CocoaError *__return_ptr retstr, NSError *_nsError)
{
  uint64_t v4 = -[NSError domain](_nsError, sel_domain);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v7 == v8) {
    goto LABEL_7;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_bridgeObjectRelease_n();
  }

  retstr->_nsError.super.isa = (Class)_nsError;
}

id static CocoaError.errorDomain.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
}

uint64_t CocoaError.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

id protocol witness for static CustomNSError.errorDomain.getter in conformance CocoaError()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
}

uint64_t static _ErrorCodeProtocol.~= infix(_:_:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  v23[1] = a1;
  uint64_t v24 = v5;
  MEMORY[0x1895F8858](a1);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  BOOL v12 = (char *)v23 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)v23 - v15;
  uint64_t v25 = a2;
  id v17 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  int v18 = swift_dynamicCast();
  int64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (v18)
  {
    v19(v12, 0LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, AssociatedTypeWitness);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    _BridgedStoredNSError.code.getter(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v7);
    char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, a3);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
  }

  else
  {
    v19(v12, 1LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    char v21 = 0;
  }

  return v21 & 1;
}

uint64_t CocoaError.Code.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t CocoaError.filePath.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  id v62 = v1;
  id v3 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v3)
  {
LABEL_22:
    uint64_t v5 = MEMORY[0x18961AFF0];
    if (*(void *)(MEMORY[0x18961AFF0] + 16LL)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v35 = MEMORY[0x18961AFF0];
    goto LABEL_24;
  }

  swift_unknownObjectRetain();
  uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4)
  {
    uint64_t v5 = v4;
    goto LABEL_19;
  }

  id v6 = objc_msgSend(v3, sel_count);
  if (!v6)
  {

    goto LABEL_22;
  }

  uint64_t v7 = (uint64_t)v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = *(void **)(v5 + 48);
  uint64_t v9 = *(void *)(v5 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v8, v9, v3, v7);
  if (result < 0 || v7 < result) {
    goto LABEL_70;
  }
  *(void *)(v5 + 16) = result;
  if (result)
  {
    uint64_t v11 = result - 1;
    uint64_t v12 = v5 + 64;
    do
    {
      while (1)
      {
        id v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        swift_bridgeObjectRetain();
        unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        char v22 = v21;
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v23 = *(void *)(v5 + 16);
        BOOL v24 = __OFSUB__(v23, 1LL);
        uint64_t v25 = v23 - 1;
        if (v24)
        {
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
          return result;
        }

        *(void *)(v5 + 16) = v25;
LABEL_10:
        if (--v11 < 0) {
          goto LABEL_18;
        }
      }

      *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      if (v11 < (uint64_t)v20)
      {
        *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20) = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v13 = *(void *)(v5 + 56);
        uint64_t v14 = (_OWORD *)(v13 + 32 * v11);
        __int128 v15 = v14[1];
        uint64_t v16 = (_OWORD *)(v13 + 32 * v20);
        *uint64_t v16 = *v14;
        v16[1] = v15;
        goto LABEL_10;
      }

      if (v20 == v11) {
        goto LABEL_10;
      }
      uint64_t v26 = *(void *)(v5 + 48);
      uint64_t v27 = (uint64_t *)(v26 + 16 * v20);
      id v28 = (uint64_t *)(v26 + 16 * v11);
      uint64_t v29 = *v27;
      uint64_t v30 = v27[1];
      uint64_t v31 = v28[1];
      *uint64_t v27 = *v28;
      v27[1] = v31;
      *id v28 = v29;
      v28[1] = v30;
      uint64_t v32 = *(void *)(v5 + 56);
      uint64_t v33 = (_OWORD *)(v32 + 32 * v20);
      id v34 = (_OWORD *)(v32 + 32 * v11);
      outlined init with take of Any(v33, &v69);
      outlined init with take of Any(v34, v33);
      outlined init with take of Any(&v69, v34);
    }

    while ((v11 & 0x8000000000000000LL) == 0);
  }

void CocoaError.stringEncoding.getter(uint64_t a1@<X8>)
{
  id v2 = *v1;
  id v3 = *v1;
  id v65 = v2;
  id v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v4)
  {
LABEL_22:
    uint64_t v6 = MEMORY[0x18961AFF0];
    if (*(void *)(MEMORY[0x18961AFF0] + 16LL)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v36 = MEMORY[0x18961AFF0];
    goto LABEL_24;
  }

  swift_unknownObjectRetain();
  uint64_t v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v5)
  {
    uint64_t v6 = v5;
    goto LABEL_19;
  }

  id v7 = objc_msgSend(v4, sel_count);
  if (!v7)
  {

    goto LABEL_22;
  }

  uint64_t v8 = (uint64_t)v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = *(void **)(v6 + 48);
  uint64_t v10 = *(void *)(v6 + 56);
  swift_retain();
  uint64_t v11 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v4, v8);
  if (v11 < 0 || v8 < v11) {
    goto LABEL_69;
  }
  *(void *)(v6 + 16) = v11;
  if (v11)
  {
    int64_t v12 = v11 - 1;
    uint64_t v13 = v6 + 64;
    do
    {
      while (1)
      {
        uint64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v19 = *v18;
        uint64_t v20 = v18[1];
        swift_bridgeObjectRetain();
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v24 = *(void *)(v6 + 16);
        BOOL v25 = __OFSUB__(v24, 1LL);
        uint64_t v26 = v24 - 1;
        if (v25)
        {
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
          return;
        }

        *(void *)(v6 + 16) = v26;
LABEL_10:
        if (--v12 < 0) {
          goto LABEL_18;
        }
      }

      *(void *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
      if (v12 < (uint64_t)v21)
      {
        *(_OWORD *)(*(void *)(v6 + 48) + 16 * v21) = *(_OWORD *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v14 = *(void *)(v6 + 56);
        __int128 v15 = (_OWORD *)(v14 + 32 * v12);
        __int128 v16 = v15[1];
        id v17 = (_OWORD *)(v14 + 32 * v21);
        *id v17 = *v15;
        v17[1] = v16;
        goto LABEL_10;
      }

      if (v21 == v12) {
        goto LABEL_10;
      }
      uint64_t v27 = *(void *)(v6 + 48);
      id v28 = (uint64_t *)(v27 + 16 * v21);
      uint64_t v29 = (uint64_t *)(v27 + 16 * v12);
      uint64_t v30 = *v28;
      uint64_t v31 = v28[1];
      uint64_t v32 = v29[1];
      *id v28 = *v29;
      v28[1] = v32;
      *uint64_t v29 = v30;
      v29[1] = v31;
      uint64_t v33 = *(void *)(v6 + 56);
      id v34 = (_OWORD *)(v33 + 32 * v21);
      uint64_t v35 = (_OWORD *)(v33 + 32 * v12);
      outlined init with take of Any(v34, &v72);
      outlined init with take of Any(v35, v34);
      outlined init with take of Any(&v72, v35);
    }

    while ((v12 & 0x8000000000000000LL) == 0);
  }

uint64_t CocoaError.underlying.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  id v62 = v1;
  id v3 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v3)
  {
LABEL_22:
    uint64_t v5 = MEMORY[0x18961AFF0];
    if (*(void *)(MEMORY[0x18961AFF0] + 16LL)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v35 = MEMORY[0x18961AFF0];
    goto LABEL_24;
  }

  swift_unknownObjectRetain();
  uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4)
  {
    uint64_t v5 = v4;
    goto LABEL_19;
  }

  id v6 = objc_msgSend(v3, sel_count);
  if (!v6)
  {

    goto LABEL_22;
  }

  uint64_t v7 = (uint64_t)v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = *(void **)(v5 + 48);
  uint64_t v9 = *(void *)(v5 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v8, v9, v3, v7);
  if (result < 0 || v7 < result) {
    goto LABEL_70;
  }
  *(void *)(v5 + 16) = result;
  if (result)
  {
    uint64_t v11 = result - 1;
    uint64_t v12 = v5 + 64;
    do
    {
      while (1)
      {
        id v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        swift_bridgeObjectRetain();
        unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        char v22 = v21;
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v23 = *(void *)(v5 + 16);
        BOOL v24 = __OFSUB__(v23, 1LL);
        uint64_t v25 = v23 - 1;
        if (v24)
        {
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
          return result;
        }

        *(void *)(v5 + 16) = v25;
LABEL_10:
        if (--v11 < 0) {
          goto LABEL_18;
        }
      }

      *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      if (v11 < (uint64_t)v20)
      {
        *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20) = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v13 = *(void *)(v5 + 56);
        uint64_t v14 = (_OWORD *)(v13 + 32 * v11);
        __int128 v15 = v14[1];
        __int128 v16 = (_OWORD *)(v13 + 32 * v20);
        *__int128 v16 = *v14;
        v16[1] = v15;
        goto LABEL_10;
      }

      if (v20 == v11) {
        goto LABEL_10;
      }
      uint64_t v26 = *(void *)(v5 + 48);
      uint64_t v27 = (uint64_t *)(v26 + 16 * v20);
      id v28 = (uint64_t *)(v26 + 16 * v11);
      uint64_t v29 = *v27;
      uint64_t v30 = v27[1];
      uint64_t v31 = v28[1];
      *uint64_t v27 = *v28;
      v27[1] = v31;
      *id v28 = v29;
      v28[1] = v30;
      uint64_t v32 = *(void *)(v5 + 56);
      uint64_t v33 = (_OWORD *)(v32 + 32 * v20);
      id v34 = (_OWORD *)(v32 + 32 * v11);
      outlined init with take of Any(v33, &v69);
      outlined init with take of Any(v34, v33);
      outlined init with take of Any(&v69, v34);
    }

    while ((v11 & 0x8000000000000000LL) == 0);
  }

uint64_t CocoaError.underlyingErrors.getter()
{
  id v1 = *v0;
  unint64_t v199 = MEMORY[0x18961AFE8];
  id v2 = v1;
  id v3 = v1;
  id v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  id v175 = v3;
  if (!v4)
  {
LABEL_22:
    id v6 = (_OWORD *)MEMORY[0x18961AFF0];
    unint64_t v21 = *(void *)(MEMORY[0x18961AFF0] + 16LL);
    if (v21) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v36 = MEMORY[0x18961AFF0];
    goto LABEL_24;
  }

  swift_unknownObjectRetain();
  uint64_t v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v5)
  {
    id v6 = (_OWORD *)v5;
    goto LABEL_19;
  }

  id v7 = objc_msgSend(v4, sel_count);
  if (!v7)
  {

    goto LABEL_22;
  }

  uint64_t v8 = (uint64_t)v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  id v6 = (_OWORD *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = (void *)*((void *)v6 + 6);
  uint64_t v10 = *((void *)v6 + 7);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v4, v8);
  if (result < 0 || v8 < result)
  {
    __break(1u);
    goto LABEL_210;
  }

  *((void *)v6 + 2) = result;
  if (result)
  {
    int64_t v12 = result - 1;
    uint64_t v13 = v6 + 4;
    while (1)
    {
      uint64_t v18 = (uint64_t *)(*((void *)v6 + 6) + 16 * v12);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      swift_bridgeObjectRetain();
      unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
      char v23 = v22;
      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v24 = *((void *)v6 + 2);
        BOOL v25 = __OFSUB__(v24, 1LL);
        uint64_t v26 = v24 - 1;
        if (v25) {
          goto LABEL_205;
        }
        *((void *)v6 + 2) = v26;
        goto LABEL_10;
      }

      *(void *)((char *)v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
      if (v12 < (uint64_t)v21)
      {
        *(_OWORD *)(*((void *)v6 + 6) + 16 * v21) = *(_OWORD *)(*((void *)v6 + 6) + 16 * v12);
        uint64_t v14 = *((void *)v6 + 7);
        __int128 v15 = (_OWORD *)(v14 + 32 * v12);
        __int128 v16 = v15[1];
        id v17 = (_OWORD *)(v14 + 32 * v21);
        *id v17 = *v15;
        v17[1] = v16;
LABEL_10:
        if (--v12 < 0) {
          break;
        }
      }

      else
      {
        if (v21 == v12) {
          goto LABEL_10;
        }
        uint64_t v27 = *((void *)v6 + 6);
        id v28 = (uint64_t *)(v27 + 16 * v21);
        uint64_t v29 = (uint64_t *)(v27 + 16 * v12);
        uint64_t v30 = *v28;
        uint64_t v31 = v28[1];
        uint64_t v32 = v29[1];
        *id v28 = *v29;
        v28[1] = v32;
        *uint64_t v29 = v30;
        v29[1] = v31;
        uint64_t v33 = *((void *)v6 + 7);
        id v34 = (_OWORD *)(v33 + 32 * v21);
        uint64_t v35 = (_OWORD *)(v33 + 32 * v12);
        outlined init with take of Any(v34, &v186);
        outlined init with take of Any(v35, v34);
        outlined init with take of Any(&v186, v35);
        if (v12 < 0) {
          break;
        }
      }
    }
  }

  swift_release();
LABEL_19:

  unint64_t v21 = *((void *)v6 + 2);
  if (!v21) {
    goto LABEL_23;
  }
LABEL_20:
  unint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v36 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  uint64_t v179 = v6 + 4;
  uint64_t v37 = -1LL << *((_BYTE *)v6 + 32);
  if (-v37 < 64) {
    uint64_t v38 = ~(-1LL << -(char)v37);
  }
  else {
    uint64_t v38 = -1LL;
  }
  unint64_t v39 = v38 & v6[4];
  int64_t v176 = (unint64_t)(63 - v37) >> 6;
  uint64_t v40 = v36 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v20 = 0LL;
  while (v39)
  {
    unint64_t v43 = __clz(__rbit64(v39));
    v39 &= v39 - 1;
    unint64_t v44 = v43 | (v20 << 6);
LABEL_48:
    int64_t v49 = (uint64_t *)(*((void *)v6 + 6) + 16 * v44);
    uint64_t v51 = *v49;
    uint64_t v50 = v49[1];
    outlined init with copy of Any(*((void *)v6 + 7) + 32 * v44, (uint64_t)&v195);
    *(void *)&__int128 v194 = v51;
    *((void *)&v194 + 1) = v50;
    __int128 v191 = v194;
    __int128 v192 = v195;
    __int128 v193 = v196;
    *(void *)&v190[0] = v51;
    *((void *)&v190[0] + 1) = v50;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(&v192, v185);
    __int128 v186 = *(_OWORD *)v182;
    __int128 v187 = v183;
    uint64_t v188 = v184;
    outlined init with take of Any(v185, v189);
    *(_OWORD *)char v182 = v186;
    __int128 v183 = v187;
    uint64_t v184 = v188;
    outlined init with take of Any(v189, v190);
    outlined init with take of Any(v190, &v186);
    unint64_t v21 = (unint64_t)v182;
    Swift::Int v52 = AnyHashable._rawHashValue(seed:)(*(void *)(v36 + 40));
    uint64_t v53 = -1LL << *(_BYTE *)(v36 + 32);
    unint64_t v54 = v52 & ~v53;
    unint64_t v55 = v54 >> 6;
    if (((-1LL << v54) & ~*(void *)(v40 + 8 * (v54 >> 6))) != 0)
    {
      unint64_t v41 = __clz(__rbit64((-1LL << v54) & ~*(void *)(v40 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0LL;
      goto LABEL_29;
    }

    char v56 = 0;
    unint64_t v57 = (unint64_t)(63 - v53) >> 6;
    do
    {
      if (++v55 == v57 && (v56 & 1) != 0)
      {
        __break(1u);
        goto LABEL_88;
      }

      BOOL v58 = v55 == v57;
      if (v55 == v57) {
        unint64_t v55 = 0LL;
      }
      v56 |= v58;
      uint64_t v59 = *(void *)(v40 + 8 * v55);
    }

    while (v59 == -1);
    unint64_t v41 = __clz(__rbit64(~v59)) + (v55 << 6);
LABEL_29:
    *(void *)(v40 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v41;
    uint64_t v42 = *(void *)(v36 + 48) + 40 * v41;
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v182;
    *(_OWORD *)(v42 + 16) = v183;
    *(void *)(v42 + 32) = v184;
    outlined init with take of Any(&v186, (_OWORD *)(*(void *)(v36 + 56) + 32 * v41));
    ++*(void *)(v36 + 16);
  }

  int64_t v45 = v20 + 1;
  if (__OFADD__(v20, 1LL)) {
    goto LABEL_199;
  }
  if (v45 < v176)
  {
    unint64_t v46 = *((void *)v179 + v45);
    int64_t v47 = v20 + 1;
    if (!v46)
    {
      int64_t v47 = v20 + 2;
      if (v20 + 2 >= v176) {
        goto LABEL_57;
      }
      unint64_t v46 = *((void *)v179 + v47);
      if (!v46)
      {
        int64_t v47 = v20 + 3;
        if (v20 + 3 >= v176) {
          goto LABEL_57;
        }
        unint64_t v46 = *((void *)v179 + v47);
        if (!v46)
        {
          int64_t v47 = v20 + 4;
          if (v20 + 4 >= v176) {
            goto LABEL_57;
          }
          unint64_t v46 = *((void *)v179 + v47);
          if (!v46)
          {
            uint64_t v48 = v20 + 5;
            if (v20 + 5 >= v176) {
              goto LABEL_57;
            }
            unint64_t v46 = *((void *)v179 + v48);
            if (!v46)
            {
              while (1)
              {
                int64_t v47 = v48 + 1;
                if (__OFADD__(v48, 1LL)) {
                  goto LABEL_202;
                }
                if (v47 >= v176) {
                  goto LABEL_57;
                }
                unint64_t v46 = *((void *)v179 + v47);
                ++v48;
                if (v46) {
                  goto LABEL_47;
                }
              }
            }

            int64_t v47 = v20 + 5;
          }
        }
      }
    }

uint64_t CocoaError.url.getter@<X0>(void *a1@<X8>)
{
  id v2 = *v1;
  id v3 = *v1;
  id v64 = v2;
  id v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v4)
  {
LABEL_22:
    uint64_t v6 = MEMORY[0x18961AFF0];
    if (*(void *)(MEMORY[0x18961AFF0] + 16LL)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v36 = MEMORY[0x18961AFF0];
    goto LABEL_24;
  }

  swift_unknownObjectRetain();
  uint64_t v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v5)
  {
    uint64_t v6 = v5;
    goto LABEL_19;
  }

  id v7 = objc_msgSend(v4, sel_count);
  if (!v7)
  {

    goto LABEL_22;
  }

  uint64_t v8 = (uint64_t)v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = *(void **)(v6 + 48);
  uint64_t v10 = *(void *)(v6 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v4, v8);
  if (result < 0 || v8 < result) {
    goto LABEL_69;
  }
  *(void *)(v6 + 16) = result;
  if (result)
  {
    uint64_t v12 = result - 1;
    uint64_t v13 = v6 + 64;
    do
    {
      while (1)
      {
        uint64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v19 = *v18;
        uint64_t v20 = v18[1];
        swift_bridgeObjectRetain();
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v24 = *(void *)(v6 + 16);
        BOOL v25 = __OFSUB__(v24, 1LL);
        uint64_t v26 = v24 - 1;
        if (v25)
        {
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
          return result;
        }

        *(void *)(v6 + 16) = v26;
LABEL_10:
        if (--v12 < 0) {
          goto LABEL_18;
        }
      }

      *(void *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
      if (v12 < (uint64_t)v21)
      {
        *(_OWORD *)(*(void *)(v6 + 48) + 16 * v21) = *(_OWORD *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v14 = *(void *)(v6 + 56);
        __int128 v15 = (_OWORD *)(v14 + 32 * v12);
        __int128 v16 = v15[1];
        id v17 = (_OWORD *)(v14 + 32 * v21);
        *id v17 = *v15;
        v17[1] = v16;
        goto LABEL_10;
      }

      if (v21 == v12) {
        goto LABEL_10;
      }
      uint64_t v27 = *(void *)(v6 + 48);
      id v28 = (uint64_t *)(v27 + 16 * v21);
      uint64_t v29 = (uint64_t *)(v27 + 16 * v12);
      uint64_t v30 = *v28;
      uint64_t v31 = v28[1];
      uint64_t v32 = v29[1];
      *id v28 = *v29;
      v28[1] = v32;
      *uint64_t v29 = v30;
      v29[1] = v31;
      uint64_t v33 = *(void *)(v6 + 56);
      id v34 = (_OWORD *)(v33 + 32 * v21);
      uint64_t v35 = (_OWORD *)(v33 + 32 * v12);
      outlined init with take of Any(v34, &v71);
      outlined init with take of Any(v35, v34);
      outlined init with take of Any(&v71, v35);
    }

    while ((v12 & 0x8000000000000000LL) == 0);
  }

uint64_t static CustomNSError.errorDomain.getter()
{
  return String.init<A>(reflecting:)();
}

uint64_t CustomNSError.errorCode.getter()
{
  return _swift_stdlib_getDefaultErrorCode();
}

uint64_t CustomNSError.errorUserInfo.getter()
{
  return MEMORY[0x18961AFF0];
}

{
  return MEMORY[0x18961AFF0];
}

id Error.localizedDescription.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __n128 v3 = MEMORY[0x1895F8858](a1);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v2 + 16))(v5, v6, a1, v3);
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  }

  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v7, v5, a1);
  }

  id v8 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_localizedDescription);
  swift_unknownObjectRelease();
  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return v9;
}

unint64_t lazy protocol witness table accessor for type CocoaError.Code and conformance CocoaError.Code()
{
  unint64_t result = lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code;
  if (!lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CocoaError.Code,  &type metadata for CocoaError.Code);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code;
  if (!lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CocoaError.Code,  &type metadata for CocoaError.Code);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code;
  if (!lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CocoaError.Code,  &type metadata for CocoaError.Code);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for CocoaError(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  a1[2] = lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  unint64_t result = lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  a1[3] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for CocoaError(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for CocoaError.Code(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CocoaError.Code and conformance CocoaError.Code();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for CocoaError()
{
  return &type metadata for CocoaError;
}

ValueMetadata *type metadata accessor for CocoaError.Code()
{
  return &type metadata for CocoaError.Code;
}

uint64_t dispatch thunk of LocalizedError.errorDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LocalizedError.failureReason.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of LocalizedError.recoverySuggestion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LocalizedError.helpAnchor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static CustomNSError.errorDomain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CustomNSError.errorCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CustomNSError.errorUserInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t outlined init with take of Morphology._CustomPronoun?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Morphology._CustomPronoun?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Morphology._CustomPronoun(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL StringProtocol.localizedStandardContains<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  v14[0] = LocaleCache.current.getter();
  v14[1] = v10;
  StringProtocol.range<A>(of:options:range:locale:)(a1, 0x81uLL, 0LL, 0LL, 1, (uint64_t)v14, a2, a3, a4, a5);
  BOOL v12 = (v11 & 1) == 0;
  swift_unknownObjectRelease();
  return v12;
}

id StringProtocol.localizedCompare<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return StringProtocol.localizedCompare<A>(_:)(a1, a2, a3, a4, a5, (SEL *)&selRef_localizedCompare_);
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, void *a10)
{
  uint64_t v118 = a1;
  LODWORD(v120) = a5;
  unint64_t v111 = a4;
  unint64_t v112 = a3;
  id v119 = a10;
  unint64_t v115 = a2;
  unint64_t v116 = a9;
  uint64_t v114 = *(void *)(a7 - 8);
  MEMORY[0x1895F8858](a1);
  char v113 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  __int128 v15 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  id v17 = (char *)&v94 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  char v22 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v24 = (char *)&v94 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  MEMORY[0x1895F8858](v25);
  uint64_t v27 = (char *)&v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v29 = MEMORY[0x1895F8858](v28);
  uint64_t v30 = MEMORY[0x1895F8858](v29);
  uint64_t v37 = (char *)&v94 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = *(void **)v35;
  if (*(void *)v35)
  {
    uint64_t v110 = *(uint64_t **)(v35 + 8);
    StringProtocol._ephemeralString.getter();
    unint64_t v40 = v116;
    uint64_t v39 = v117;
    StringProtocol._ephemeralString.getter();
    id v119 = (id)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v41 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v42 = v113;
    unint64_t v43 = v114;
    LOBYTE(v44) = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v113, v39, a7);
    if ((v120 & 1) != 0)
    {
      unint64_t v45 = v40;
      uint64_t v37 = *(char **)(*(void *)(v40 + 8) + 8LL);
      dispatch thunk of Collection.startIndex.getter();
      unint64_t v51 = v121;
      dispatch thunk of Collection.endIndex.getter();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v42, a7);
      if (v125 >> 14 < v51 >> 14)
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
    }

    else
    {
      unint64_t v45 = v40;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v42, a7);
    }

    unint64_t v40 = v45;
    uint64_t v52 = StringProtocol._toUTF16Offsets(_:)();
    uint64_t v37 = (char *)(v53 - v52);
    if (__OFSUB__(v53, v52))
    {
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }

    uint64_t v54 = v52;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v38 = (void *)((uint64_t (*)(uint64_t))v110[61])(ObjectType);
    id v56 = objc_msgSend(v119, sel_rangeOfString_options_range_locale_, v41, v115, v54, v37, v38);
    unint64_t v43 = v57;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

LABEL_28:
    if (v56 == (id)0x7FFFFFFFFFFFFFFFLL) {
      return 0LL;
    }
    if (!__OFADD__(v56, v43)) {
      return StringProtocol._toUTF16Indices(_:)();
    }
    goto LABEL_46;
  }

  uint64_t v110 = v31;
  uint64_t v108 = v27;
  uint64_t v99 = v24;
  char v113 = v34;
  unint64_t v100 = v22;
  unint64_t v101 = v17;
  int64_t v102 = v15;
  uint64_t v105 = v33;
  uint64_t v106 = v30;
  uint64_t v107 = v32;
  uint64_t v104 = v19;
  uint64_t v103 = v18;
  uint64_t v114 = a7;
  char v46 = v117;
  if ((v120 & 1) != 0)
  {
    unint64_t v40 = v116;
    uint64_t v38 = *(void **)(*(void *)(v116 + 8) + 8LL);
    dispatch thunk of Collection.startIndex.getter();
    unint64_t v43 = v121;
    dispatch thunk of Collection.endIndex.getter();
    uint64_t v48 = v125;
    LOBYTE(v44) = (_BYTE)v119;
    if (v125 >> 14 < v43 >> 14)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }

    uint64_t v49 = v118;
  }

  else
  {
    unint64_t v40 = v116;
    unint64_t v43 = BidirectionalCollection<>._checkRange(_:)(v112, v111);
    uint64_t v48 = v47;
    uint64_t v49 = v118;
    if ((v50 & 1) != 0) {
      return v43;
    }
  }

  uint64_t v58 = StringProtocol._asContiguousUTF8Substring(from:)(v43, v48, v114);
  uint64_t v109 = v61;
  if (v61)
  {
    unint64_t v62 = v58;
    unint64_t v97 = v60;
    unint64_t v98 = v59;
    ((void (*)(char *, uint64_t, char *))v110[2])(v37, v49, v113);
    unint64_t v63 = Substring.init<A>(_:)();
    uint64_t v37 = (char *)v63;
    unint64_t v40 = v64;
    unint64_t v43 = v65;
    uint64_t v38 = (void *)v66;
    __int16 v44 = v115;
    if ((v115 & 0x400) == 0)
    {
      unint64_t v67 = v98;
      if ((v62 ^ v98) >= 0x4000 && (v63 ^ v64) >> 14)
      {
        if ((v115 & 2) != 0)
        {
          unint64_t v88 = v109;
          uint64_t v120 = (v115 >> 3) & 1;
          LODWORD(v119) = v115 & 1;
          swift_bridgeObjectRetain();
          unint64_t v43 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( (unint64_t)v37,  v40,  v43,  (unint64_t)v38,  HIBYTE(v44) & 1,  (v44 & 0x80) != 0LL,  (char)v119,  v120,  (v44 & 4) != 0,  v62,  v67,  v97,  v88);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
        }

        else
        {
          unint64_t v43 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v63,  v64,  v65,  v66,  (v115 >> 8) & 1,  (v115 >> 7) & 1,  v115 & 1,  (v115 >> 3) & 1,  (v115 & 4) != 0,  v62,  v98,  v97,  v109);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        return v43;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0LL;
    }

    unint64_t v95 = v62;
    if (one-time initialization token for cache == -1)
    {
LABEL_18:
      uint64_t v68 = static RegexPatternCache.cache;
      swift_retain();
      uint64_t v69 = MEMORY[0x186E1B610](v37, v40, v43, v38);
      __int128 v71 = v70;
      uint64_t v96 = v38;
      uint64_t v110 = &v94;
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v68 + 24));
      __int128 v72 = v108;
      closure #1 in RegexPatternCache.regex(for:caseInsensitive:)( (uint64_t *)(v68 + 16),  v69,  (uint64_t)v71,  v44 & 1,  v69,  v71,  v44 & 1,  v108);
      os_unfair_lock_unlock((os_unfair_lock_t)(v68 + 24));
      swift_bridgeObjectRelease();
      swift_release_n();
      uint64_t v80 = v106;
      uint64_t v79 = v107;
      int v81 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v107 + 48))(v72, 1LL, v106);
      if (v81 == 1)
      {
        char v82 = &demangling cache variable for type metadata for Regex<AnyRegexOutput>?;
        uint64_t v83 = (uint64_t)v72;
LABEL_41:
        outlined destroy of Any?(v83, v82);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0LL;
      }

      uint64_t v84 = v105;
      (*(void (**)(uint64_t, char *, uint64_t))(v79 + 32))(v105, v72, v80);
      if ((v44 & 8) != 0)
      {
        unint64_t v121 = v95;
        unint64_t v122 = v98;
        unint64_t v123 = v97;
        uint64_t v124 = v109;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
        uint64_t v89 = (uint64_t)v101;
        BidirectionalCollection<>.prefixMatch<A>(of:)();
        uint64_t v90 = v104;
        uint64_t v91 = v103;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v89, 1LL, v103) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v84, v80);
          char v82 = &demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?;
          uint64_t v83 = v89;
          goto LABEL_41;
        }

        uint64_t v93 = v99;
        (*(void (**)(char *, uint64_t, uint64_t))(v90 + 32))(v99, v89, v91);
        unint64_t v43 = Regex.Match.range.getter();
        (*(void (**)(char *, uint64_t))(v90 + 8))(v93, v91);
      }

      else
      {
        unint64_t v121 = v95;
        unint64_t v122 = v98;
        unint64_t v123 = v97;
        uint64_t v124 = v109;
        type metadata accessor for AnyRegexOutput();
        lazy protocol witness table accessor for type Substring and conformance Substring();
        lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
        uint64_t v85 = (uint64_t)v102;
        BidirectionalCollection<>.firstMatch<A, B>(of:)();
        uint64_t v86 = v104;
        uint64_t v87 = v103;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v85, 1LL, v103) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v84, v80);
          char v82 = &demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?;
          uint64_t v83 = v85;
          goto LABEL_41;
        }

        int64_t v92 = v100;
        (*(void (**)(char *, uint64_t, uint64_t))(v86 + 32))(v100, v85, v87);
        unint64_t v43 = Regex.Match.range.getter();
        (*(void (**)(char *, uint64_t))(v86 + 8))(v92, v87);
      }

      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v84, v80);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v43;
    }

char *String.init(format:locale:_:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = specialized withVaList<A>(_:_:)(a4, a1, a2, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

uint64_t StringProtocol.compare<A>(_:options:range:locale:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  int v58 = a5;
  uint64_t v55 = a4;
  uint64_t v56 = a3;
  unint64_t v57 = a2;
  uint64_t v12 = *(void *)(a8 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v25 = MEMORY[0x1895F8858](v20);
  if (!*v22)
  {
    uint64_t v27 = v24;
    id v54 = v21;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))((char *)&v53 - v23, v9, a7, v25);
    unint64_t v28 = Substring.init<A>(_:)();
    unint64_t v30 = v29;
    unint64_t v32 = v31;
    unint64_t v34 = v33;
    if ((v58 & 1) == 0)
    {
      unint64_t v28 = Substring.subscript.getter();
      unint64_t v30 = v35;
      unint64_t v32 = v36;
      unint64_t v38 = v37;
      swift_bridgeObjectRelease();
      unint64_t v34 = v38;
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v27, a8);
    unint64_t v39 = Substring.init<A>(_:)();
    id v43 = (id)Substring._unlocalizedCompare(other:options:)(v39, v40, v41, v42, v57, v28, v30, v32, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v43;
  }

  uint64_t v53 = v22[1];
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  id v54 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v26 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v9, a7);
  if ((v58 & 1) != 0)
  {
    dispatch thunk of Collection.startIndex.getter();
    unint64_t v44 = v60;
    dispatch thunk of Collection.endIndex.getter();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, a7);
    if (v59 >> 14 < v44 >> 14) {
      goto LABEL_12;
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, a7);
  }

  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v47 = v46 - result;
  if (!__OFSUB__(v46, result))
  {
    uint64_t v48 = result;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v50 = v53;
    unint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 488);
    swift_unknownObjectRetain();
    uint64_t v52 = (void *)v51(ObjectType, v50);
    swift_unknownObjectRelease();
    id v43 = objc_msgSend(v54, sel_compare_options_range_locale_, v26, v57, v48, v47, v52);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    return (uint64_t)v43;
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

id String.init(utf8String:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x186E1B634]();
  if (v3) {
    return (id)v2;
  }
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithUTF8String_, a1);
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = v5;
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  return v4;
}

uint64_t specialized BidirectionalCollection<>._trimmingCharacters(in:)( uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v49 = a1;
  if ((a3 & 0x2000000000000000LL) != 0) {
    unint64_t v5 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
  }
  int v6 = (a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0;
  unint64_t v7 = 4 * v5;
  int v45 = v6;
  unint64_t v8 = 0LL;
  if (v5)
  {
    uint64_t v9 = 4LL << v6;
    uint64_t v46 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v47 = a3 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v10 = 15LL;
    while (1)
    {
      unint64_t v11 = v10 & 0xC;
      BOOL v12 = (v10 & 1) == 0 || v11 == v9;
      int v13 = v12;
      if (v12)
      {
        unint64_t v14 = v10;
        if (v11 == v9) {
          unint64_t v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v4, a3);
        }
        if (v14 >> 16 >= v5)
        {
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }

        if ((v14 & 1) == 0) {
          _StringGuts.scalarAlignSlow(_:)(v14, v4, a3);
        }
      }

      else if (v10 >> 16 >= v5)
      {
        goto LABEL_125;
      }

      if ((a3 & 0x1000000000000000LL) != 0)
      {
        UTF32Char v15 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        swift_bridgeObjectRetain();
      }

      else if ((a3 & 0x2000000000000000LL) != 0)
      {
        unint64_t v50 = v4;
        uint64_t v51 = v47;
        swift_bridgeObjectRetain();
        UTF32Char v15 = _decodeScalar(_:startingAt:)();
      }

      else
      {
        if ((v4 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        swift_bridgeObjectRetain();
        UTF32Char v15 = _decodeScalar(_:startingAt:)();
        unint64_t v4 = a2;
        unint64_t v7 = 4 * v5;
      }

      int IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(v49 + 16), v15);
      swift_bridgeObjectRelease();
      if (IsLongCharacterMember)
      {
        if (v13)
        {
          if (v11 == v9)
          {
            unint64_t v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v4, a3);
            if (v5 <= v10 >> 16) {
              goto LABEL_127;
            }
          }

          else if (v5 <= v10 >> 16)
          {
            goto LABEL_127;
          }

          if ((v10 & 1) == 0) {
            unint64_t v10 = v10 & 0xC | _StringGuts.scalarAlignSlow(_:)(v10, v4, a3) & 0xFFFFFFFFFFFFFFF3LL | 1;
          }
        }

        else if (v5 <= v10 >> 16)
        {
          goto LABEL_126;
        }

        if ((a3 & 0x1000000000000000LL) != 0)
        {
          unint64_t v10 = String.UnicodeScalarView._foreignIndex(after:)();
        }

        else
        {
          unint64_t v17 = v10 >> 16;
          if ((a3 & 0x2000000000000000LL) != 0)
          {
            unint64_t v50 = v4;
            uint64_t v51 = v47;
            int v19 = *((unsigned __int8 *)&v50 + v17);
          }

          else
          {
            uint64_t v18 = v46;
            if ((v4 & 0x1000000000000000LL) == 0) {
              uint64_t v18 = _StringObject.sharedUTF8.getter();
            }
            int v19 = *(unsigned __int8 *)(v18 + v17);
          }

          int v20 = (char)v19;
          unsigned int v21 = __clz(v19 ^ 0xFF) - 24;
          if (v20 >= 0) {
            LOBYTE(v21) = 1;
          }
          unint64_t v10 = ((v17 + v21) << 16) | 5;
        }

        unint64_t v8 = v10 >> 14;
        if (v10 >> 14 < v7) {
          continue;
        }
      }

      break;
    }
  }

  LOBYTE(v9) = v45;
  uint64_t v22 = 11LL;
  if (v45) {
    uint64_t v22 = 7LL;
  }
  if (v8 == v7) {
    return String.UnicodeScalarView.subscript.getter();
  }
  unint64_t v23 = _StringGuts.validateInclusiveScalarIndex(_:)(v22 | (v5 << 16), v4, a3);
  if (v23 < 0x4000) {
    goto LABEL_132;
  }
  unint64_t v24 = v23;
  if ((a3 & 0x1000000000000000LL) != 0)
  {
LABEL_133:
    unint64_t v31 = String.UnicodeScalarView._foreignIndex(before:)();
    if (v8 < v31 >> 14) {
      goto LABEL_68;
    }
    goto LABEL_134;
  }

  unint64_t v25 = v23 >> 16;
  if ((a3 & 0x2000000000000000LL) != 0)
  {
    unint64_t v50 = v4;
    uint64_t v51 = a3 & 0xFFFFFFFFFFFFFFLL;
    if ((*((_BYTE *)&v50 + v25 - 1) & 0xC0) == 0x80)
    {
      uint64_t v27 = 0LL;
      do
        int v29 = *((_BYTE *)&v50 + v25 + v27-- - 2) & 0xC0;
      while (v29 == 128);
      goto LABEL_65;
    }
  }

  else
  {
    if ((v4 & 0x1000000000000000LL) != 0) {
      uint64_t v26 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v26 = _StringObject.sharedUTF8.getter();
    }
    if ((*(_BYTE *)(v25 + v26 - 1) & 0xC0) == 0x80)
    {
      uint64_t v27 = 0LL;
      do
        int v28 = *(_BYTE *)(v25 + v26 - 2 + v27--) & 0xC0;
      while (v28 == 128);
LABEL_65:
      uint64_t v30 = 1 - v27;
      goto LABEL_67;
    }
  }

  uint64_t v30 = 1LL;
LABEL_67:
  unint64_t v31 = (v24 - (v30 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
  if (v8 < v31 >> 14)
  {
LABEL_68:
    uint64_t v32 = 4LL << v9;
    while (1)
    {
      unint64_t v33 = v31 & 0xC;
      BOOL v34 = (v31 & 1) == 0 || v33 == v32;
      LODWORD(v9) = v34;
      if (v34)
      {
        unint64_t v35 = v31;
        if (v33 == v32) {
          unint64_t v35 = _StringGuts._slowEnsureMatchingEncoding(_:)(v31, v4, a3);
        }
        unint64_t v4 = v35 >> 16;
        if (v35 >> 16 >= v5) {
          goto LABEL_128;
        }
        if ((v35 & 1) == 0) {
          _StringGuts.scalarAlignSlow(_:)(v35, a2, a3);
        }
      }

      else
      {
        unint64_t v4 = v31 >> 16;
        if (v31 >> 16 >= v5) {
          goto LABEL_129;
        }
      }

      if ((a3 & 0x1000000000000000LL) != 0)
      {
        unint64_t v4 = a2;
        UTF32Char v37 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a3 & 0x2000000000000000LL) == 0)
        {
          if ((a2 & 0x1000000000000000LL) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          UTF32Char v36 = _decodeScalar(_:startingAt:)();
          unint64_t v4 = a2;
          goto LABEL_92;
        }

        unint64_t v50 = a2;
        uint64_t v51 = a3 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v4 = a2;
        UTF32Char v37 = _decodeScalar(_:startingAt:)();
      }

      UTF32Char v36 = v37;
LABEL_92:
      if (!CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(v49 + 16), v36))
      {
        if (v8 > v31 >> 14) {
          goto LABEL_138;
        }
        _StringGuts.validateScalarIndex(_:)(v31, v4, a3);
        if ((a3 & 0x1000000000000000LL) != 0)
        {
          String.UnicodeScalarView._foreignIndex(after:)();
        }

        else if ((a3 & 0x2000000000000000LL) != 0)
        {
          unint64_t v50 = v4;
          uint64_t v51 = a3 & 0xFFFFFFFFFFFFFFLL;
        }

        else if ((v4 & 0x1000000000000000LL) == 0)
        {
          goto LABEL_139;
        }

        return String.UnicodeScalarView.subscript.getter();
      }

      if ((_DWORD)v9)
      {
        if (v33 == v32)
        {
          unint64_t v31 = _StringGuts._slowEnsureMatchingEncoding(_:)(v31, v4, a3);
          if (v5 < v31 >> 16) {
            goto LABEL_131;
          }
        }

        else if (v5 < v31 >> 16)
        {
          goto LABEL_131;
        }

        if ((v31 & 1) == 0) {
          unint64_t v31 = v31 & 0xC | _StringGuts.scalarAlignSlow(_:)(v31, v4, a3) & 0xFFFFFFFFFFFFFFF3LL | 1;
        }
      }

      else if (v5 < v31 >> 16)
      {
        goto LABEL_130;
      }

      if (v31 < 0x4000)
      {
        __break(1u);
        goto LABEL_124;
      }

      if ((a3 & 0x1000000000000000LL) != 0)
      {
        unint64_t v31 = String.UnicodeScalarView._foreignIndex(before:)();
      }

      else
      {
        unint64_t v38 = v31 >> 16;
        if ((a3 & 0x2000000000000000LL) != 0)
        {
          unint64_t v50 = v4;
          uint64_t v51 = a3 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v50 + v38 - 1) & 0xC0) == 0x80)
          {
            uint64_t v40 = 0LL;
            do
              int v42 = *((_BYTE *)&v49 + v38 + v40-- + 6) & 0xC0;
            while (v42 == 128);
            goto LABEL_111;
          }
        }

        else
        {
          uint64_t v39 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v4 & 0x1000000000000000LL) == 0) {
            uint64_t v39 = _StringObject.sharedUTF8.getter();
          }
          if ((*(_BYTE *)(v38 + v39 - 1) & 0xC0) == 0x80)
          {
            uint64_t v40 = 0LL;
            do
              int v41 = *(_BYTE *)(v39 + v38 - 2 + v40--) & 0xC0;
            while (v41 == 128);
LABEL_111:
            uint64_t v43 = 1 - v40;
            goto LABEL_113;
          }
        }

        uint64_t v43 = 1LL;
LABEL_113:
        unint64_t v31 = (v31 - (v43 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
      }
    }
  }

id NSString.__allocating_init(format:locale:arguments:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[3];
  if (v7)
  {
    unint64_t v8 = __swift_project_boxed_opaque_existential_1(a3, a3[3]);
    uint64_t v9 = *(void *)(v7 - 8);
    MEMORY[0x1895F8858](v8);
    unint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v9 + 16))(v11);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  id v13 = objc_msgSend( objc_allocWithZone((Class)swift_getObjCClassFromMetadata()),  sel_initWithFormat_locale_arguments_,  v6,  v12,  a4);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v13;
}

char *specialized withVaList<A>(_:_:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v3 = (void *)swift_allocObject();
  v3[2] = 8LL;
  v3[3] = 0LL;
  unint64_t v4 = v3 + 3;
  v3[4] = 0LL;
  v3[5] = 0LL;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_25:
    uint64_t v23 = __VaListBuilder.va_list()();
    a2(&v25, v23);
    swift_release();
    return (char *)v25;
  }

  uint64_t v6 = 0LL;
  uint64_t v7 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( v7 + 40 * v6,  (uint64_t)&v25);
    uint64_t v8 = v26;
    uint64_t v9 = v27;
    __swift_project_boxed_opaque_existential_1(&v25, v26);
    uint64_t result = (char *)MEMORY[0x186E1CF6C](v8, v9);
    uint64_t v11 = *v4;
    uint64_t v12 = *((void *)result + 2);
    BOOL v13 = __OFADD__(*v4, v12);
    uint64_t v14 = *v4 + v12;
    if (v13) {
      break;
    }
    uint64_t v15 = result;
    uint64_t v16 = v3[4];
    if (v16 >= v14) {
      goto LABEL_18;
    }
    if (v16 + 0x4000000000000000LL < 0) {
      goto LABEL_28;
    }
    unint64_t v17 = (char *)v3[5];
    if (2 * v16 > v14) {
      uint64_t v14 = 2 * v16;
    }
    v3[4] = v14;
    uint64_t result = (char *)swift_slowAlloc();
    v3[5] = result;
    if (v17)
    {
      if (result != v17 || result >= &v17[8 * v11]) {
        memmove(result, v17, 8 * v11);
      }
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      uint64_t result = (char *)v3[5];
    }

    if (!result) {
      goto LABEL_30;
    }
    uint64_t v19 = *((void *)v15 + 2);
    if (v19)
    {
      int v20 = (uint64_t *)(v15 + 32);
      uint64_t v21 = *v4;
      while (1)
      {
        uint64_t v22 = *v20++;
        *(void *)&result[8 * v21] = v22;
        uint64_t v21 = *v4 + 1;
        if (__OFADD__(*v4, 1LL)) {
          break;
        }
        uint64_t *v4 = v21;
        if (!--v19) {
          goto LABEL_3;
        }
      }

      __break(1u);
      break;
    }

uint64_t StringProtocol._toRelativeNSRange(_:)()
{
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v1, result)) {
    __break(1u);
  }
  return result;
}

uint64_t StringProtocol.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v32[1] = a5;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch thunk of Collection.startIndex.getter();
  unint64_t v11 = v34;
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  if (v33 >> 14 < v11 >> 14)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }

  uint64_t v13 = StringProtocol._asContiguousUTF8Substring(from:)(v11, v33, a2);
  if (v16)
  {
    unint64_t v17 = v13;
    unint64_t v18 = v14;
    uint64_t v19 = v16;
    uint64_t v20 = v15;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
    unint64_t v21 = Substring.init<A>(_:)();
    if ((v17 ^ v18) < 0x4000 || (v21 ^ v22) < 0x4000)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v21,  v22,  v23,  v24,  0,  0,  0,  0,  0,  v17,  v18,  v20,  v19);
      char v26 = v25;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        return 1LL;
      }
    }

    return 0LL;
  }

  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  uint64_t v27 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v28 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v29 = objc_msgSend(v27, sel_rangeOfString_, v28);
  uint64_t v31 = v30;
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  if (v29 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    if (!__OFADD__(v29, v31))
    {
      StringProtocol._toUTF16Indices(_:)();
      return 1LL;
    }

    goto LABEL_14;
  }

  return 0LL;
}

id String.init(utf16CodeUnits:count:)(uint64_t a1, uint64_t a2)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithCharacters_length_, a1, a2);
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v31 = a6;
  v26[1] = a5;
  _OWORD v26[2] = a4;
  uint64_t v30 = a3;
  uint64_t v28 = *(void *)(a7 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v27 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  uint64_t v29 = a10;
  uint64_t v13 = v10;
  StringProtocol._ephemeralString.getter();
  unint64_t v14 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v15 = String._bridgeToObjectiveCImpl()();
  uint64_t v16 = v30;
  swift_bridgeObjectRelease();
  uint64_t v17 = String._bridgeToObjectiveCImpl()();
  char v18 = v31;
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0 && !v16)
  {
    id v19 = objc_msgSend(v14, sel_stringByReplacingOccurrencesOfString_withString_, v15, v17);
LABEL_10:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

    return (uint64_t)v25;
  }

  v26[0] = v14;
  uint64_t v20 = v27;
  uint64_t v21 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v27, v13, a7);
  if ((v18 & 1) != 0)
  {
    dispatch thunk of Collection.startIndex.getter();
    unint64_t v22 = v33;
    dispatch thunk of Collection.endIndex.getter();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v20, a7);
    if (v32 >> 14 >= v22 >> 14) {
      goto LABEL_8;
    }
    __break(1u);
  }

  (*(void (**)(char *, uint64_t))(v21 + 8))(v20, a7);
LABEL_8:
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (!__OFSUB__(v24, result))
  {
    id v19 =  objc_msgSend( v26[0],  sel_stringByReplacingOccurrencesOfString_withString_options_range_,  v15,  v17,  v16,  result,  v24 - result);
    goto LABEL_10;
  }

  __break(1u);
  return result;
}

uint64_t String.init(cString:encoding:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2 != 4 && v3 != 1) {
    goto LABEL_10;
  }
  uint64_t v5 = MEMORY[0x186E1B634](a1);
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = v5;
  if (v3 != 4 && (_StringGuts._isContiguousASCII.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    id v8 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithCString_encoding_, a1, v3);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v7 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    }

    else
    {
      return 0LL;
    }
  }

  return v7;
}

void *static String.availableStringEncodings.getter()
{
  uint64_t v0 = objc_msgSend((id)objc_opt_self(), sel_availableStringEncodings);
  uint64_t v1 = *v0;
  if (!*v0) {
    return (void *)MEMORY[0x18961AFE8];
  }
  id v2 = v0;
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
  unint64_t v4 = v3[2];
  uint64_t v5 = v2 + 1;
  do
  {
    unint64_t v6 = v3[3];
    if (v4 >= v6 >> 1) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v6 > 1),  v4 + 1,  1,  v3);
    }
    v3[2] = v4 + 1;
    v3[v4 + 4] = v1;
    uint64_t v7 = *v5++;
    uint64_t v1 = v7;
    ++v4;
  }

  while (v7);
  return v3;
}

id static String.defaultCStringEncoding.getter@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend((id)objc_opt_self(), sel_defaultCStringEncoding);
  *a1 = result;
  return result;
}

id static String.localizedName(of:)(void *a1)
{
  id v1 = objc_msgSend((id)objc_opt_self(), sel_localizedNameOfStringEncoding_, *a1);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

char *static String.localizedStringWithFormat(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v4 = LocaleCache.current.getter();
  MEMORY[0x1895F8858](v4);
  uint64_t v5 = specialized withVaList<A>(_:_:)( a3,  (void (*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in String.init(format:locale:arguments:));
  swift_unknownObjectRelease();
  return v5;
}

char *String.init(format:locale:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized withVaList<A>(_:_:)(a4, a1, a2, v7, v8);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

id String.init(bytesNoCopy:length:encoding:freeWhenDone:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  id v4 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytesNoCopy_length_encoding_freeWhenDone_,  a1,  a2,  *a3,  a4 & 1);
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v6;
}

id String.init(utf16CodeUnitsNoCopy:count:freeWhenDone:)(uint64_t a1, uint64_t a2, char a3)
{
  id v3 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithCharactersNoCopy_length_freeWhenDone_,  a1,  a2,  a3 & 1);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

id String.init(contentsOfFile:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSString);
  swift_bridgeObjectRetain();
  id result = @nonobjc NSString.init(contentsOfFile:usedEncoding:)(a1, a2, 0LL);
  if (!v2)
  {
    uint64_t v7 = result;
    id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return v8;
  }

  return result;
}

id String.init(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  id v3 = *(void **)(a1 + 16);
  v8[0] = *(void **)a1;
  v8[1] = v2;
  _OWORD v8[2] = v3;
  objc_allocWithZone((Class)&OBJC_CLASS___NSString);
  swift_retain();
  id v4 = v8[0];
  swift_retain();
  id result = @nonobjc NSString.init(contentsOf:usedEncoding:)(v8, 0LL);
  if (!v1)
  {
    id v6 = result;
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return v7;
  }

  return result;
}

char *String.init(format:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = specialized withVaList<A>(_:_:)(a3, a1, a2, 0LL, 0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

char *String.init(format:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = specialized withVaList<A>(_:_:)(a3, a1, a2, 0LL, 0LL);
  swift_bridgeObjectRelease();
  return v6;
}

void closure #1 in String.init(format:locale:arguments:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  if (a4)
  {
    *((void *)&v15 + 1) = &type metadata for Locale;
    *(void *)&__int128 v14 = a4;
    *((void *)&v14 + 1) = a5;
  }

  else
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
  }

  type metadata accessor for NSString();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = NSString.__allocating_init(format:locale:arguments:)(a2, a3, &v14, a1);
  id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  *a6 = v11;
  a6[1] = v13;
}

uint64_t StringProtocol._asContiguousUTF8Substring(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v7 != MEMORY[0x189617FA8])
  {
    id v8 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    if (a3 == MEMORY[0x189618C50])
    {
      v8((char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL), v4, MEMORY[0x189618C50]);
      swift_dynamicCast();
      if ((v13[3] & 0x1000000000000000LL) == 0)
      {
LABEL_8:
        uint64_t v10 = Substring.subscript.getter();
        goto LABEL_9;
      }
    }

    else
    {
      v8((char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL), v4, a3);
      Substring.init<A>(_:)();
      if ((v9 & 0x1000000000000000LL) == 0) {
        goto LABEL_8;
      }
    }

id StringProtocol.canBeConverted(to:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  StringProtocol._ephemeralString.getter();
  uint64_t v2 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v2, sel_canBeConvertedToEncoding_, v1);
  swift_unknownObjectRelease();
  return v3;
}

id StringProtocol.caseInsensitiveCompare<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return StringProtocol.localizedCompare<A>(_:)(a1, a2, a3, a4, a5, (SEL *)&selRef_caseInsensitiveCompare_);
}

id StringProtocol.commonPrefix<A>(with:options:)(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  StringProtocol._ephemeralString.getter();
  uint64_t v4 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_commonPrefixWithString_options_, v4, a2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  return v6;
}

id StringProtocol.completePath(into:caseSensitive:matchesInto:filterTypes:)( id *a1, char a2, uint64_t *a3, void *a4)
{
  v28[1] = *(id *)MEMORY[0x1895F89C0];
  if (a1)
  {
    v28[0] = 0LL;
    if (!a3)
    {
      StringProtocol._ephemeralString.getter();
      uint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      if (a4)
      {
        swift_bridgeObjectRetain();
        a4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
      }

      id v9 = objc_msgSend( v20,  sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_,  v28,  a2 & 1,  0,  a4);
      swift_unknownObjectRelease();

      id v19 = v28[0];
      id v21 = v28[0];
      id v11 = 0LL;
      if (!v19) {
        goto LABEL_24;
      }
      uint64_t v12 = v21;
LABEL_23:
      *a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      a1[1] = v22;

      swift_bridgeObjectRelease();
      return v9;
    }

    id v27 = 0LL;
    StringProtocol._ephemeralString.getter();
    id v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (a4)
    {
      swift_bridgeObjectRetain();
      a4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
    }

    id v9 = objc_msgSend(v8, sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_, v28, a2 & 1, &v27, a4);
    swift_unknownObjectRelease();

    id v10 = v28[0];
    id v11 = v27;
    uint64_t v12 = v10;
    id v13 = v10;
    if (!v11) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  if (a3)
  {
    v28[0] = 0LL;
    StringProtocol._ephemeralString.getter();
    __int128 v14 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (a4)
    {
      swift_bridgeObjectRetain();
      a4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
    }

    id v9 = objc_msgSend(v14, sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_, 0, a2 & 1, v28, a4);
    swift_unknownObjectRelease();

    uint64_t v12 = 0LL;
    id v11 = v28[0];
    id v15 = v28[0];
    if (!v11)
    {
LABEL_6:
      if (!v12)
      {
LABEL_24:

        return v9;
      }

      goto LABEL_17;
    }

uint64_t StringProtocol.components(separatedBy:)(uint64_t a1, uint64_t a2)
{
  __n128 v4 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = *v6;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))( (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v2,  a2,  v4);
  unint64_t v9 = Substring.init<A>(_:)();
  uint64_t v14 = v7;
  uint64_t v11 = Substring._components(separatedBy:)((uint64_t)&v14, v9, v10);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t StringProtocol.cString(using:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  StringProtocol._ephemeralString.getter();
  uint64_t v2 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v3 = (const char *)objc_msgSend(v2, sel_cStringUsingEncoding_, v1);
  if (!v3)
  {
    uint64_t v7 = 0LL;
    goto LABEL_14;
  }

  __n128 v4 = v3;
  size_t v5 = _swift_stdlib_strlen(v3);
  size_t v6 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
  }

  else if ((v6 & 0x8000000000000000LL) == 0)
  {
    if (v5 == -1LL)
    {
      uint64_t v7 = MEMORY[0x18961AFE8];
    }

    else
    {
      uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v7 + 16) = v6;
    }

    uint64_t v8 = (char *)(v7 + 32);
    memcpy(v8, v4, v6);
    *(void *)(v7 + 16) = v6;
LABEL_14:
    swift_unknownObjectRelease();
    return v7;
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_17:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id StringProtocol.decomposedStringWithCanonicalMapping.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.decomposedStringWithCanonicalMapping.getter( a1,  a2,  (SEL *)&selRef_decomposedStringWithCanonicalMapping);
}

id StringProtocol.decomposedStringWithCompatibilityMapping.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.decomposedStringWithCanonicalMapping.getter( a1,  a2,  (SEL *)&selRef_decomposedStringWithCompatibilityMapping);
}

uint64_t StringProtocol.enumerateLines(invoking:)(uint64_t a1, uint64_t a2)
{
  __n128 v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v8[4] = partial apply for closure #1 in StringProtocol.enumerateLines(invoking:);
  v8[5] = v5;
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 1107296256LL;
  _OWORD v8[2] = thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v8[3] = &block_descriptor_19;
  size_t v6 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_enumerateLinesUsingBlock_, v6);
  _Block_release(v6);
  return swift_unknownObjectRelease();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( uint64_t a1, void *a2, uint64_t a3)
{
  __n128 v4 = *(void (**)(id, uint64_t, uint64_t))(a1 + 32);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v7 = v6;
  swift_retain();
  v4(v5, v7, a3);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t StringProtocol.fastestEncoding.getter@<X0>(void *a1@<X8>)
{
  return StringProtocol.fastestEncoding.getter((SEL *)&selRef_fastestEncoding, a1);
}

id StringProtocol.getCString(_:maxLength:encoding:)(char **a1, int64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  StringProtocol._ephemeralString.getter();
  uint64_t v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v7 = *a1;
  int64_t v8 = *((void *)*a1 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v8, 0, v7);
  }
  if (v8 < a2) {
    a2 = v8;
  }
  *a1 = v7;
  swift_bridgeObjectRetain();
  id v9 = objc_msgSend(v6, sel_getCString_maxLength_encoding_, v7 + 32, a2, v5);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

id StringProtocol.hash.getter()
{
  uint64_t v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(v0, sel_hash);
  swift_unknownObjectRelease();
  return v1;
}

id StringProtocol.lengthOfBytes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.lengthOfBytes(using:)(a1, a2, a3, (SEL *)&selRef_lengthOfBytesUsingEncoding_);
}

id StringProtocol.localizedCaseInsensitiveCompare<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return StringProtocol.localizedCompare<A>(_:)(a1, a2, a3, a4, a5, (SEL *)&selRef_localizedCaseInsensitiveCompare_);
}

id StringProtocol.localizedStandardCompare<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return StringProtocol.localizedCompare<A>(_:)(a1, a2, a3, a4, a5, (SEL *)&selRef_localizedStandardCompare_);
}

id StringProtocol.localizedCompare<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v7 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  StringProtocol._ephemeralString.getter();
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v7, *a6, v8);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

id StringProtocol.maximumLengthOfBytes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.lengthOfBytes(using:)(a1, a2, a3, (SEL *)&selRef_maximumLengthOfBytesUsingEncoding_);
}

id StringProtocol.lengthOfBytes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5 = *a1;
  StringProtocol._ephemeralString.getter();
  uint64_t v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v6, *a4, v5);
  swift_unknownObjectRelease();
  return v7;
}

id StringProtocol.precomposedStringWithCanonicalMapping.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.decomposedStringWithCanonicalMapping.getter( a1,  a2,  (SEL *)&selRef_precomposedStringWithCanonicalMapping);
}

id StringProtocol.precomposedStringWithCompatibilityMapping.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.decomposedStringWithCanonicalMapping.getter( a1,  a2,  (SEL *)&selRef_precomposedStringWithCompatibilityMapping);
}

id StringProtocol.decomposedStringWithCanonicalMapping.getter(uint64_t a1, uint64_t a2, SEL *a3)
{
  __n128 v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v5 = [v4 *a3];
  swift_unknownObjectRelease();
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  return v6;
}

uint64_t StringProtocol.propertyList()()
{
  uint64_t v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(v0, sel_propertyList);
  swift_unknownObjectRelease();
  _bridgeAnyObjectToAny(_:)();
  return swift_unknownObjectRelease();
}

unint64_t StringProtocol.propertyListFromStringsFileFormat()()
{
  uint64_t v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(v0, sel_propertyListFromStringsFileFormat);
  swift_unknownObjectRelease();
  if (!v1) {
    return MEMORY[0x18961AFF0];
  }
  uint64_t v2 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1);

  if (*(void *)(v2 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    id v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }

  else
  {
    id v3 = (void *)MEMORY[0x18961AFF0];
  }

  uint64_t v32 = v2 + 64;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v2 + 64);
  id v7 = (char *)v47 + 8;
  uint64_t v8 = (_OWORD *)((char *)v43 + 8);
  int64_t v31 = (unint64_t)(63 - v5) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v33 = 0LL;
  if (v6) {
    goto LABEL_11;
  }
LABEL_12:
  int64_t v17 = v33 + 1;
  if (__OFADD__(v33, 1LL)) {
    goto LABEL_39;
  }
  if (v17 >= v31) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v17);
  int64_t v19 = v33 + 1;
  if (v18) {
    goto LABEL_29;
  }
  int64_t v19 = v33 + 2;
  if (v33 + 2 >= v31) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v19);
  if (v18) {
    goto LABEL_29;
  }
  int64_t v19 = v33 + 3;
  if (v33 + 3 >= v31) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v19);
  if (v18) {
    goto LABEL_29;
  }
  int64_t v19 = v33 + 4;
  if (v33 + 4 >= v31) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v19);
  if (v18) {
    goto LABEL_29;
  }
  int64_t v19 = v33 + 5;
  if (v33 + 5 >= v31)
  {
LABEL_35:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  unint64_t v18 = *(void *)(v32 + 8 * v19);
  if (!v18)
  {
    int64_t v20 = v33 + 6;
    if (v33 + 6 < v31)
    {
      unint64_t v18 = *(void *)(v32 + 8 * v20);
      if (v18)
      {
        int64_t v19 = v33 + 6;
        goto LABEL_29;
      }

      while (1)
      {
        int64_t v19 = v20 + 1;
        if (__OFADD__(v20, 1LL)) {
          goto LABEL_40;
        }
        if (v19 >= v31) {
          break;
        }
        unint64_t v18 = *(void *)(v32 + 8 * v19);
        ++v20;
        if (v18) {
          goto LABEL_29;
        }
      }
    }

    goto LABEL_35;
  }

uint64_t StringProtocol.smallestEncoding.getter@<X0>(void *a1@<X8>)
{
  return StringProtocol.fastestEncoding.getter((SEL *)&selRef_smallestEncoding, a1);
}

uint64_t StringProtocol.fastestEncoding.getter@<X0>(SEL *a1@<X2>, void *a2@<X8>)
{
  uint64_t v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v5 = [v4 *a1];
  uint64_t result = swift_unknownObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t StringProtocol.addingPercentEncoding(withAllowedCharacters:)(uint64_t a1)
{
  id v1 = *(id *)(*(void *)a1 + 16LL);
  closure #1 in StringProtocol.addingPercentEncoding(withAllowedCharacters:)((uint64_t)v1, &v3);

  return v3;
}

void closure #1 in StringProtocol.addingPercentEncoding(withAllowedCharacters:)( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v4, sel__stringByAddingPercentEncodingWithAllowedCharacters_, a1);
  swift_unknownObjectRelease();
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  *a2 = v6;
  a2[1] = v8;
}

id StringProtocol.appendingFormat<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v4 = StringProtocol._ephemeralString.getter();
  specialized withVaList<A>(_:_:)(a2, v4, v5, 0LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v3, sel_stringByAppendingString_, v6);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

uint64_t StringProtocol.appending<A>(_:)(uint64_t a1, uint64_t a2)
{
  __n128 v4 = MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))( (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v2,  a2,  v4);
  v9[0] = String.init<A>(_:)();
  v9[1] = v7;
  String.append<A>(contentsOf:)();
  return v9[0];
}

id StringProtocol.folding(options:locale:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  StringProtocol._ephemeralString.getter();
  uint64_t v5 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  if (v4)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 488))(ObjectType, v3);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  id v8 = objc_msgSend(v5, sel_stringByFoldingWithOptions_locale_, a1, v7);
  swift_unknownObjectRelease();

  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  return v9;
}

id StringProtocol.padding<A>(toLength:withPad:startingAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  StringProtocol._ephemeralString.getter();
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v5, sel_stringByPaddingToLength_withString_startingAtIndex_, a1, v6, a3);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

id StringProtocol.removingPercentEncoding.getter()
{
  uint64_t v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(v0, sel_stringByRemovingPercentEncoding);
  swift_unknownObjectRelease();
  if (!v1) {
    return 0LL;
  }
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

uint64_t StringProtocol.replacingCharacters<A, B>(in:with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  unint64_t v56 = a5;
  uint64_t v57 = a8;
  uint64_t v54 = a7;
  uint64_t v58 = a2;
  uint64_t v13 = *(void *)(*(void *)(a6 + 8) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  __int128 v46 = (char *)&v44 - v14;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(v15 - 8);
  uint64_t v52 = v15;
  MEMORY[0x1895F8858](v15);
  uint64_t v49 = a6;
  unint64_t v50 = (char *)&v44 - v16;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  int64_t v19 = (char *)&v44 - v18;
  uint64_t v53 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v24);
  id v26 = (char *)&v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = 0LL;
  unint64_t v64 = 0xE000000000000000LL;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  unint64_t v55 = v62;
  unint64_t v56 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v8, a3);
  uint64_t v57 = v13;
  Substring.init<A>(_:)();
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  if ((v28 & 0x1000000000000000LL) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v22, v58, a4);
    Substring.init<A>(_:)();
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    if ((v30 & 0x1000000000000000LL) == 0)
    {
      dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
      uint64_t v53 = a4;
      dispatch thunk of Collection.startIndex.getter();
      unint64_t v59 = v56;
      unint64_t v60 = v61;
      swift_getAssociatedConformanceWitness();
      uint64_t v44 = dispatch thunk of Collection.distance(from:to:)();
      int64_t v31 = *(void (**)(char *, uint64_t))(v48 + 8);
      v31(v19, v17);
      dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
      unint64_t v61 = v55;
      uint64_t v49 = v9;
      dispatch thunk of Collection.endIndex.getter();
      unint64_t v59 = v60;
      uint64_t v32 = dispatch thunk of Collection.distance(from:to:)();
      v31(v19, v17);
      int64_t v33 = v50;
      dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
      uint64_t v34 = v52;
      swift_getAssociatedConformanceWitness();
      uint64_t v35 = dispatch thunk of Collection.count.getter();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v33, v34);
      uint64_t v37 = v44 + v35;
      if (__OFADD__(v44, v35))
      {
        __break(1u);
      }

      else
      {
        uint64_t result = v37 + v32;
        if (!__OFADD__(v37, v32))
        {
          MEMORY[0x186E1B64C](result);
          goto LABEL_6;
        }
      }

      __break(1u);
      goto LABEL_11;
    }
  }

id StringProtocol.replacingPercentEscapes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.replacingPercentEscapes(using:)( a1,  a2,  a3,  (SEL *)&selRef_stringByReplacingPercentEscapesUsingEncoding_);
}

uint64_t StringProtocol.trimmingCharacters(in:)(uint64_t a1, uint64_t a2)
{
  __n128 v4 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = *v6;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))( (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v2,  a2,  v4);
  uint64_t v9 = String.init<A>(_:)();
  specialized BidirectionalCollection<>._trimmingCharacters(in:)(v7, v9, v10);
  swift_bridgeObjectRelease();
  return String.init(_:)();
}

Swift::String_optional __swiftcall StringProtocol.applyingTransform(_:reverse:)( NSStringTransform _, Swift::Bool reverse)
{
  __n128 v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v4, sel_stringByApplyingTransform_reverse_, _, reverse);
  swift_unknownObjectRelease();
  if (v5)
  {
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v8 = v7;
  }

  else
  {
    id v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  uint64_t v9 = (uint64_t)v6;
  unint64_t v10 = v8;
  result.value._object = v10;
  result.value._countAndFlagsBits = v9;
  return result;
}

uint64_t StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  uint64_t v32 = a8;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v30 = a2;
  uint64_t v15 = *(void *)(a7 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x1895F8858](a1);
  uint64_t v31 = v17;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  StringProtocol._ephemeralString.getter();
  id v35 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v19, result))
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v28 = a12;
  uint64_t v29 = result;
  uint64_t v20 = v32;
  uint64_t v30 = v19 - result;
  StringProtocol._ephemeralString.getter();
  uint64_t v21 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))( (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v13,  a7);
  unint64_t v22 = (*(unsigned __int8 *)(v15 + 80) + 80LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v23 = (char *)swift_allocObject();
  *((void *)v23 + 2) = a7;
  *((void *)v23 + 3) = v20;
  *((void *)v23 + 4) = v31;
  *((void *)v23 + 5) = a10;
  uint64_t v24 = v28;
  *((void *)v23 + 6) = a11;
  *((void *)v23 + 7) = v24;
  uint64_t v25 = v34;
  *((void *)v23 + 8) = v33;
  *((void *)v23 + 9) = v25;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))( &v23[v22],  (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a7);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for closure #1 in StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:);
  *(void *)(v26 + 24) = v23;
  aBlock[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSLinguisticTag?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_9_0;
  uint64_t v27 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend( v35,  sel_enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock_,  v29,  v30,  v21,  v36,  v37,  v27);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  _Block_release(v27);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((v21 & 1) != 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void *closure #1 in StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:)( void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, void (*a7)(void *, uint64_t, void *, uint64_t, uint64_t, uint64_t, char *))
{
  char v22 = 0;
  if (!result) {
    goto LABEL_13;
  }
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  if (a2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v14 = v13;
  if (__OFADD__(a2, a3))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v15 = result;
  uint64_t v21 = a7;
  uint64_t result = (void *)StringProtocol._toUTF16Indices(_:)();
  if (a4 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v17 = v16;
  if (__OFADD__(a4, a5))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }

  uint64_t v18 = result;
  uint64_t v19 = StringProtocol._toUTF16Indices(_:)();
  v21(v15, v14, v18, v17, v19, v20, &v22);
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (v22 == 1) {
    *a6 = v22;
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSLinguisticTag?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  id v14 = a2;
  v13(a2, a3, a4, a5, a6, a7);
}

uint64_t StringProtocol.enumerateSubstrings<A>(in:options:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v29 = a4;
  uint64_t v30 = a2;
  uint64_t v27 = a3;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1895F8858](a1);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  StringProtocol._ephemeralString.getter();
  id v28 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v19 = v18 - result;
  if (__OFSUB__(v18, result))
  {
    __break(1u);
  }

  else
  {
    uint64_t v20 = result;
    uint64_t v21 = v9;
    uint64_t v22 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))( (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v21,  a5);
    unint64_t v23 = (*(unsigned __int8 *)(v14 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v24 = (char *)swift_allocObject();
    *((void *)v24 + 2) = a5;
    *((void *)v24 + 3) = a6;
    *((void *)v24 + 4) = a7;
    *((void *)v24 + 5) = a8;
    uint64_t v25 = v29;
    *((void *)v24 + 6) = v27;
    *((void *)v24 + 7) = v25;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v24[v23], v16, a5);
    aBlock[4] = partial apply for closure #1 in StringProtocol.enumerateSubstrings<A>(in:options:_:);
    aBlock[5] = v24;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[3] = &block_descriptor_15_0;
    uint64_t v26 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v28, sel_enumerateSubstringsInRange_options_usingBlock_, v20, v22, v30, v26);
    _Block_release(v26);
    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t closure #1 in StringProtocol.enumerateSubstrings<A>(in:options:_:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))
{
  char v19 = 0;
  if (a3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (__OFADD__(a3, a4))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v12 = result;
  uint64_t result = StringProtocol._toUTF16Indices(_:)();
  if (a5 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v14 = v13;
  if (__OFADD__(a5, a6))
  {
LABEL_11:
    __break(1u);
    return result;
  }

  uint64_t v15 = result;
  uint64_t v16 = StringProtocol._toUTF16Indices(_:)();
  uint64_t result = a8(v12, a2, v15, v14, v16, v17, &v19);
  if (v19 == 1) {
    *a7 = v19;
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    uint64_t v15 = v14;
  }

  else
  {
    id v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  swift_retain();
  v12(v13, v15, a3, a4, a5, a6, a7);
  swift_release();
  return swift_bridgeObjectRelease();
}

id StringProtocol.getBytes<A>(_:maxLength:usedLength:encoding:options:range:remaining:)( char **a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v19 = *a4;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  StringProtocol._ephemeralString.getter();
  uint64_t v18 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v9 = *a1;
  if (*((void *)*a1 + 2) < a2) {
    a2 = *((void *)*a1 + 2);
  }
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v10 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v12 = v11 - v10;
  if (__OFSUB__(v11, v10))
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }

  uint64_t v13 = v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v9 + 2),  0,  v9);
  }
  *a1 = v9;
  swift_bridgeObjectRetain();
  id v14 = objc_msgSend( v18,  sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_,  v9 + 32,  a2,  a3,  v19,  a5,  v13,  v12,  &v22);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (v22 == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_10;
  }
  if (__OFADD__(v22, v23)) {
    goto LABEL_11;
  }
  *a7 = StringProtocol._toUTF16Indices(_:)();
  a7[1] = v15;
  return v14;
}

uint64_t StringProtocol.getLineStart<A>(_:end:contentsEnd:for:)( uint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return StringProtocol.getLineStart<A>(_:end:contentsEnd:for:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))StringProtocol._lineBounds<A>(around:));
}

uint64_t StringProtocol.getParagraphStart<A>(_:end:contentsEnd:for:)( uint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return StringProtocol.getLineStart<A>(_:end:contentsEnd:for:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))StringProtocol._paragraphBounds<A>(around:));
}

uint64_t StringProtocol.getLineStart<A>(_:end:contentsEnd:for:)( uint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a9(a4, a5, a6, a7, a8);
  *a1 = result;
  *a2 = v13;
  *a3 = v14;
  return result;
}

uint64_t StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = v11;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  v43[3] = *MEMORY[0x1895F89C0];
  if (a5)
  {
    uint64_t v37 = a5;
    uint64_t v39 = a10;
    id v40 = a7;
    v43[0] = 0LL;
    StringProtocol._ephemeralString.getter();
    uint64_t v15 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v38 = a8;
    dispatch thunk of RangeExpression.relative<A>(to:)();
    uint64_t v16 = StringProtocol._toUTF16Offsets(_:)();
    uint64_t v18 = v17 - v16;
    if (!__OFSUB__(v17, v16))
    {
      uint64_t v19 = v16;
      StringProtocol._ephemeralString.getter();
      uint64_t v20 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v21 =  objc_msgSend( v15,  sel_linguisticTagsInRange_scheme_options_orthography_tokenRanges_,  v19,  v18,  v20,  v41,  v42,  v43);
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      if (v21)
      {
        uint64_t v23 = (void *)v43[0];
        if (v43[0])
        {
          type metadata accessor for __SwiftDeferredNSArray();
          swift_unknownObjectRetain();
          if (swift_dynamicCastClass())
          {
            swift_retain();
          }

          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v24 = swift_dynamicCastClass();
          unint64_t v25 = v24;
          if (!v24)
          {
            swift_unknownObjectRelease();
            objc_msgSend(v23, sel_copy);
            unint64_t v25 = _bridgeCocoaArray<A>(_:)();
            uint64_t v24 = swift_unknownObjectRelease();
          }

          MEMORY[0x1895F8858](v24);
          v36[2] = a6;
          uint64_t v36[3] = v40;
          v36[4] = v38;
          v36[5] = a9;
          v36[6] = v39;
          v36[7] = a11;
          v36[8] = v12;
          id v26 = v23;
          uint64_t v27 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayyXlG_SnySS5IndexVGs5NeverOTg5( (void (*)(__int128 *__return_ptr, uint64_t *))partial apply for closure #2 in StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:),  (uint64_t)v36,  v25);
          swift_bridgeObjectRelease();
          *uint64_t v37 = v27;

          swift_bridgeObjectRelease();
        }

        goto LABEL_12;
      }

      __break(1u);
LABEL_21:
      __break(1u);
      return result;
    }

    __break(1u);
LABEL_19:
    __break(1u);
  }

  StringProtocol._ephemeralString.getter();
  id v40 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v28 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v30 = v29 - v28;
  if (__OFSUB__(v29, v28)) {
    goto LABEL_19;
  }
  uint64_t v31 = v28;
  StringProtocol._ephemeralString.getter();
  uint64_t v32 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v21 =  objc_msgSend( v40,  sel_linguisticTagsInRange_scheme_options_orthography_tokenRanges_,  v31,  v30,  v32,  v41,  v42,  0);
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  if (!v21) {
    goto LABEL_21;
  }
LABEL_12:
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v33 = swift_dynamicCastClass();
  if (v33)
  {
    uint64_t v34 = v33;
  }

  else
  {
    swift_unknownObjectRelease();
    objc_msgSend(v21, sel_copy);
    unint64_t v35 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v34 = specialized _arrayForceCast<A, B>(_:)(v35);

    swift_bridgeObjectRelease();
  }

  return v34;
}

uint64_t closure #2 in StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:)@<X0>( id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  uint64_t result = (uint64_t)objc_msgSend(*a1, sel_respondsToSelector_, sel_rangeValue);
  if ((result & 1) != 0)
  {
    uint64_t result = (uint64_t)objc_msgSend(v3, sel_rangeValue);
    if (result == 0x7FFFFFFFFFFFFFFFLL)
    {
      __break(1u);
    }

    else if (!__OFADD__(result, v5))
    {
      uint64_t result = StringProtocol._toUTF16Indices(_:)();
      *a2 = result;
      a2[1] = v6;
      return result;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t StringProtocol.rangeOfComposedCharacterSequence(at:)()
{
  uint64_t v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(v0, sel_rangeOfComposedCharacterSequenceAtIndex_, StringProtocol._toUTF16Offset(_:)());
  uint64_t v3 = v2;
  uint64_t result = swift_unknownObjectRelease();
  if (v1 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    __break(1u);
  }

  else if (!__OFADD__(v1, v3))
  {
    return StringProtocol._toUTF16Indices(_:)();
  }

  __break(1u);
  return result;
}

uint64_t StringProtocol.rangeOfComposedCharacterSequences<A>(for:)()
{
  uint64_t v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v2, result))
  {
    __break(1u);
    goto LABEL_6;
  }

  id v3 = objc_msgSend(v0, sel_rangeOfComposedCharacterSequencesForRange_, result, v2 - result);
  uint64_t v5 = v4;
  uint64_t result = swift_unknownObjectRelease();
  if (v3 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (!__OFADD__(v3, v5)) {
    return StringProtocol._toUTF16Indices(_:)();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t StringProtocol.localizedStandardRange<A>(of:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  v13[0] = LocaleCache.current.getter();
  v13[1] = v10;
  uint64_t v11 = StringProtocol.range<A>(of:options:range:locale:)(a1, 0x81uLL, 0LL, 0LL, 1, (uint64_t)v13, a2, a3, a4, a5);
  swift_unknownObjectRelease();
  return v11;
}

id StringProtocol.addingPercentEscapes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.replacingPercentEscapes(using:)( a1,  a2,  a3,  (SEL *)&selRef_stringByAddingPercentEscapesUsingEncoding_);
}

id StringProtocol.replacingPercentEscapes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5 = *a1;
  StringProtocol._ephemeralString.getter();
  uint64_t v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v6, *a4, v5);
  swift_unknownObjectRelease();
  if (!v7) {
    return 0LL;
  }
  id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

BOOL StringProtocol.localizedCaseInsensitiveContains<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  v14[0] = LocaleCache.current.getter();
  v14[1] = v10;
  StringProtocol.range<A>(of:options:range:locale:)(a1, 1uLL, 0LL, 0LL, 1, (uint64_t)v14, a2, a3, a4, a5);
  char v12 = v11;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return (v12 & 1) == 0;
}

id StringProtocol.substring(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.substring(from:)(a1, a2, a3, (SEL *)&selRef_substringFromIndex_);
}

id StringProtocol.substring(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.substring(from:)(a1, a2, a3, (SEL *)&selRef_substringToIndex_);
}

id StringProtocol.substring(from:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v5, *a4, StringProtocol._toUTF16Offset(_:)());
  swift_unknownObjectRelease();
  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v7;
}

uint64_t StringProtocol.substring(with:)()
{
  uint64_t v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v2, result))
  {
    __break(1u);
  }

  else
  {
    id v3 = objc_msgSend(v0, sel_substringWithRange_, result, v2 - result);
    swift_unknownObjectRelease();
    id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

    return (uint64_t)v4;
  }

  return result;
}

id @nonobjc NSString.init(contentsOfFile:usedEncoding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[1] = *(id *)MEMORY[0x1895F89C0];
  uint64_t v5 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v10[0] = 0LL;
  id v6 = objc_msgSend(v3, sel_initWithContentsOfFile_usedEncoding_error_, v5, a3, v10);
  swift_unknownObjectRelease();
  if (v6)
  {
    id v7 = v10[0];
  }

  else
  {
    if (v10[0])
    {
      v10[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v8 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

  return v6;
}

id @nonobjc NSString.init(contentsOf:usedEncoding:)(void **a1, uint64_t a2)
{
  id v3 = v2;
  v9[1] = *(id *)MEMORY[0x1895F89C0];
  id v4 = *a1;
  v9[0] = 0LL;
  id v5 = objc_msgSend(v3, sel_initWithContentsOfURL_usedEncoding_error_, v4, a2, v9);
  if (v5)
  {
    id v6 = v9[0];
  }

  else
  {
    if (v9[0])
    {
      v9[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v7 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

  swift_release();
  swift_release();
  return v5;
}

uint64_t sub_1833C04A4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in StringProtocol.enumerateLines(invoking:)( uint64_t a1, uint64_t a2, _BYTE *a3)
{
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, char *))(v3 + 16);
  char v7 = 0;
  uint64_t result = v5(a1, a2, &v7);
  if (v7 == 1) {
    *a3 = v7;
  }
  return result;
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t sub_1833C0524()
{
  return swift_deallocObject();
}

void *partial apply for closure #1 in StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  return closure #1 in StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:)( a1,  a2,  a3,  a4,  a5,  a6,  *(void (**)(void *, uint64_t, void *, uint64_t, uint64_t, uint64_t, char *))(v6 + 64));
}

uint64_t sub_1833C05CC()
{
  return swift_deallocObject();
}

uint64_t sub_1833C05DC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in StringProtocol.enumerateSubstrings<A>(in:options:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  return closure #1 in StringProtocol.enumerateSubstrings<A>(in:options:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v7 + 48));
}

uint64_t partial apply for closure #2 in StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:)@<X0>( id *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:)(a1, a2);
}

ValueMetadata *type metadata accessor for _BPlistDecodingFormat()
{
  return &type metadata for _BPlistDecodingFormat;
}

_UNKNOWN **associated type witness table accessor for PlistDecodingFormat.Map : PlistDecodingMap in _BPlistDecodingFormat()
{
  return &protocol witness table for BPlistMap;
}

uint64_t specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)( a1,  a2,  (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter,  a3);
}

{
  return specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)( a1,  a2,  (uint64_t (*)(uint64_t))XMLPlistMap.Value.debugDataTypeDescription.getter,  a3);
}

uint64_t specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t)@<X3>, void *a4@<X8>)
{
  v8._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x756F662074756220LL;
  v9._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = a3(a2);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x64616574736E6920LL;
  v11._object = (void *)0xE90000000000002ELL;
  String.append(_:)(v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a4 = a1;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v12 = *MEMORY[0x189619358];
  uint64_t v13 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104LL))(a4, v12, v13);
}

uint64_t static _BPlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:)( uint64_t a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a3;
  if (a2 >> 60 != 3)
  {
    if (a2 >> 60 == 9 && (a2 == 0x9000000000000008LL || a2 == 0x9000000000000010LL))
    {
      uint64_t v9 = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v11 = v10;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *Swift::String v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      unint64_t v12 = v7[5];
      swift_retain();
      _CodingPathNode.path.getter(v12);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v9 - 8) + 104LL))( v11,  *MEMORY[0x189619368],  v9);
      return swift_willThrow();
    }

    else
    {
      unint64_t v14 = a3[5];
      swift_retain();
      _CodingPathNode.path.getter(v14);
      swift_release();
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)( v15,  a2,  (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter,  v16);
      swift_bridgeObjectRelease();
      return swift_willThrow();
    }
  }

  uint64_t v17 = *(void *)(a2 + 16);
  uint64_t v66 = v17 + 64;
  uint64_t v18 = -1LL << *(_BYTE *)(v17 + 32);
  if (-v18 < 64) {
    uint64_t v19 = ~(-1LL << -(char)v18);
  }
  else {
    uint64_t v19 = -1LL;
  }
  unint64_t v20 = v19 & *(void *)(v17 + 64);
  unint64_t v21 = *(void *)(v17 + 16);
  id v76 = (void *)MEMORY[0x18961AFF0];
  Swift::Int v22 = v21 >> 1;
  swift_retain();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
  Dictionary.reserveCapacity(_:)(v22);
  uint64_t v23 = v76;
  unint64_t v24 = 63 - v18;
  uint64_t v25 = v6;
  int64_t v65 = v24 >> 6;
  swift_retain();
  uint64_t v26 = 0LL;
  uint64_t v67 = v17;
  for (i = v7; ; uint64_t v7 = i)
  {
    if (v20)
    {
      uint64_t v71 = (v20 - 1) & v20;
      unint64_t v27 = __clz(__rbit64(v20)) | (v26 << 6);
      int64_t v28 = v26;
    }

    else
    {
      int64_t v28 = v26 + 1;
      if (__OFADD__(v26, 1LL)) {
        goto LABEL_62;
      }
      if (v28 >= v65)
      {
LABEL_58:
        outlined consume of Set<A1>.Iterator._Variant<A><A1>();
        swift_release();
        swift_bridgeObjectRelease();
        id v76 = v7;
        unint64_t v77 = v23;
        unint64_t v78 = a4;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        *(void *)&__int128 v73 = a5;
        *((void *)&v73 + 1) = &type metadata for _BPlistDecodingFormat;
        uint64_t v74 = a6;
        uint64_t v75 = &protocol witness table for _BPlistDecodingFormat;
        type metadata accessor for _PlistKeyedDecodingContainer();
      }

      unint64_t v29 = *(void *)(v66 + 8 * v28);
      if (!v29)
      {
        uint64_t v30 = v26 + 2;
        if (v26 + 2 >= v65) {
          goto LABEL_58;
        }
        unint64_t v29 = *(void *)(v66 + 8 * v30);
        if (!v29)
        {
          uint64_t v30 = v26 + 3;
          if (v26 + 3 >= v65) {
            goto LABEL_58;
          }
          unint64_t v29 = *(void *)(v66 + 8 * v30);
          if (!v29)
          {
            uint64_t v30 = v26 + 4;
            if (v26 + 4 >= v65) {
              goto LABEL_58;
            }
            unint64_t v29 = *(void *)(v66 + 8 * v30);
            if (!v29)
            {
              uint64_t v30 = v26 + 5;
              if (v26 + 5 >= v65) {
                goto LABEL_58;
              }
              unint64_t v29 = *(void *)(v66 + 8 * v30);
              if (!v29)
              {
                uint64_t v30 = v26 + 6;
                if (v26 + 6 >= v65) {
                  goto LABEL_58;
                }
                unint64_t v29 = *(void *)(v66 + 8 * v30);
                if (!v29)
                {
                  uint64_t v30 = v26 + 7;
                  if (v26 + 7 >= v65) {
                    goto LABEL_58;
                  }
                  unint64_t v29 = *(void *)(v66 + 8 * v30);
                  if (!v29)
                  {
                    while (1)
                    {
                      int64_t v28 = v30 + 1;
                      if (__OFADD__(v30, 1LL)) {
                        goto LABEL_63;
                      }
                      if (v28 >= v65) {
                        goto LABEL_58;
                      }
                      unint64_t v29 = *(void *)(v66 + 8 * v28);
                      ++v30;
                      if (v29) {
                        goto LABEL_31;
                      }
                    }
                  }
                }
              }
            }
          }
        }

        int64_t v28 = v30;
      }

uint64_t static _BPlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:)@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 >> 60 == 1)
  {
    uint64_t v16 = *(void *)(a1 + 16);
    uint64_t v17 = *(void *)(v16 + 16);
    a4[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat>);
    a4[4] = lazy protocol witness table accessor for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>();
    uint64_t v18 = swift_allocObject();
    *a4 = v18;
    *(_OWORD *)(v18 + 32) = xmmword_183826FF0;
    *(void *)(v18 + 16) = a2;
    *(void *)(v18 + 24) = v16;
    *(void *)(v18 + 64) = 0LL;
    *(void *)(v18 + 72) = a3;
    *(void *)(v18 + 48) = v17;
    *(_BYTE *)(v18 + 56) = 0;
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }

  else
  {
    if (a1 >> 60 == 9 && (a1 == 0x9000000000000008LL || a1 == 0x9000000000000010LL))
    {
      uint64_t v7 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v9 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      unint64_t v10 = *(void *)(a2 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v10);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  *MEMORY[0x189619368],  v7);
    }

    else
    {
      unint64_t v11 = *(void *)(a2 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v11);
      swift_release();
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)( v12,  a1,  (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter,  v13);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

uint64_t static _BPlistDecodingFormat.unwrapBool<A>(from:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a5;
  unint64_t v31 = a2;
  uint64_t v33 = *MEMORY[0x1895F89C0];
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v17 = MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v29 - v15;
  if (v16 >> 60 == 6)
  {
    char v19 = *(_BYTE *)(v16 + 16);
  }

  else
  {
    unint64_t v29 = v16;
    unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
    v20((char *)&v29 - v15, a3, v10, v17);
    ((void (*)(char *, char *, uint64_t))v20)(v13, v18, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1LL, a4) == 1)
    {
      unint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
      v21(v13, v10);
      _CodingPathNode.path.getter(v31);
      v21(v18, v10);
    }

    else
    {
      Swift::Int v22 = v9;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, a4);
      uint64_t v23 = _CodingPathNode.path.getter(v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183720D90;
      uint64_t v25 = v30;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v25;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(boxed_opaque_existential_1, v22, a4);
      uint64_t v32 = v23;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v22, a4);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)( MEMORY[0x1896184C8],  v29,  (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter,  v27);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  return v19 & 1;
}

void static _BPlistDecodingFormat.unwrapDate<A>(from:in:for:_:)( uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
}

uint64_t static _BPlistDecodingFormat.unwrapData<A>(from:in:for:_:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return BPlistMap.Value.dataValue<A>(in:for:_:)(a2, a3, a4, a1, a5, a6);
}

uint64_t static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:)( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v73 = a2;
  uint64_t v72 = a6;
  uint64_t v77 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v71 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v69 = (char *)&v65 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v14);
  unint64_t v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  char v19 = (char *)&v65 - v18;
  MEMORY[0x1895F8858](v20);
  Swift::Int v22 = (char *)&v65 - v21;
  __n128 v26 = MEMORY[0x1895F8858](v23);
  uint64_t v70 = (char *)&v65 - v27;
  uint64_t v75 = a3;
  if (a1 >> 60)
  {
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16);
    uint64_t v37 = a4;
    uint64_t v38 = v25;
    v36(v19, v37, v14, v26);
    ((void (*)(char *, char *, uint64_t))v36)(v16, v19, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1LL, a5) == 1)
    {
      uint64_t v39 = *(void (**)(char *, uint64_t))(v38 + 8);
      v39(v16, v14);
      _CodingPathNode.path.getter(v75);
      v39(v19, v14);
    }

    else
    {
      id v40 = v71;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v71, v16, a5);
      uint64_t v41 = v10;
      uint64_t v42 = _CodingPathNode.path.getter(v75);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183720D90;
      uint64_t v44 = v72;
      *(void *)(inited + 56) = a5;
      *(void *)(inited + 64) = v44;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v41 + 16))(boxed_opaque_existential_1, v40, a5);
      *(void *)&__int128 v76 = v42;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v14);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v40, a5);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)( MEMORY[0x189617FA8],  a1,  (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter,  v46);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  uint64_t v68 = a5;
  uint64_t v65 = v10;
  uint64_t v66 = v25;
  uint64_t v71 = (char *)v14;
  uint64_t v28 = *(void *)(a1 + 16);
  uint64_t v29 = *(void *)(a1 + 24);
  MEMORY[0x1895F8858](v24);
  uint64_t v67 = &v65;
  *((_BYTE *)&v65 - 16) = v30;
  uint64_t v31 = *(void *)(v73 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v31 + 40));
  uint64_t v32 = v74;
  specialized closure #1 in BPlistMap.withBuffer<A>(for:perform:)( (void *)(v31 + 16),  (void *(*)(__int128 *__return_ptr, uint64_t, uint64_t))partial apply for closure #1 in static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:),  v28,  v29,  &v76);
  if (v32)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v31 + 40));
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v31 + 40));
  swift_release();
  uint64_t v33 = v71;
  uint64_t v34 = v68;
  if (*((void *)&v76 + 1)) {
    return v76;
  }
  uint64_t v47 = v66;
  char v48 = *(void (**)(char *, uint64_t, char *))(v66 + 16);
  uint64_t v49 = v70;
  v48(v70, a4, v71);
  v48(v22, (uint64_t)v49, v33);
  uint64_t v50 = v65;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v22, 1LL, v34) != 1)
  {
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
    uint64_t v54 = v69;
    v53(v69, v22, v34);
    uint64_t v55 = (uint64_t *)swift_allocObject();
    uint64_t v56 = v72;
    v55[5] = v34;
    v55[6] = v56;
    unint64_t v57 = __swift_allocate_boxed_opaque_existential_1(v55 + 2);
    v53((char *)v57, v54, v34);
    (*(void (**)(char *, char *))(v47 + 8))(v49, v33);
    unint64_t v58 = v75;
    v55[7] = v75;
    if (v58 >> 62)
    {
      if (v58 >> 62 != 1)
      {
        uint64_t v61 = 1LL;
LABEL_16:
        v55[8] = v61;
        unint64_t v52 = (unint64_t)v55;
        goto LABEL_17;
      }

      unint64_t v59 = (uint64_t *)((v58 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      unint64_t v59 = (uint64_t *)(v58 + 64);
    }

    uint64_t v60 = *v59;
    swift_retain();
    uint64_t v61 = v60 + 1;
    if (__OFADD__(v60, 1LL)) {
      __break(1u);
    }
    goto LABEL_16;
  }

  BOOL v51 = *(void (**)(char *, char *))(v47 + 8);
  v51(v49, v33);
  v51(v22, v33);
  unint64_t v52 = v75;
  swift_retain();
LABEL_17:
  uint64_t v62 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v64 = v63;
  _CodingPathNode.path.getter(v52);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v62 - 8) + 104LL))( v64,  *MEMORY[0x189619360],  v62);
  swift_release();
  return swift_willThrow();
}

uint64_t static _BPlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:)@<X0>( unint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v89 = a6;
  uint64_t v91 = a5;
  unint64_t v92 = a1;
  uint64_t v93 = a2;
  uint64_t v90 = a7;
  uint64_t v99 = *MEMORY[0x1895F89C0];
  uint64_t v95 = a3;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v87 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v16);
  unint64_t v88 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v94 = a4;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1895F8858](v18);
  uint64_t v21 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v25 = MEMORY[0x1895F8858](v22);
  __n128 v26 = (char *)&v87 - v23;
  if (v24 >> 60 != 7)
  {
    if (v24 >> 60 != 8)
    {
      uint64_t v66 = v24;
      uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16);
      v67((char *)&v87 - v23, v93, v18, v25);
      ((void (*)(char *, char *, uint64_t))v67)(v21, v26, v18);
      uint64_t v68 = v94;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v21, 1LL, v94) == 1)
      {
        uint64_t v69 = *(void (**)(char *, uint64_t))(v19 + 8);
        v69(v21, v18);
        _CodingPathNode.path.getter(v92);
        v69(v26, v18);
      }

      else
      {
        uint64_t v72 = v88;
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v88, v21, v68);
        uint64_t v73 = _CodingPathNode.path.getter(v92);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_183720D90;
        uint64_t v75 = v89;
        *(void *)(inited + 56) = v68;
        *(void *)(inited + 64) = v75;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 16))(boxed_opaque_existential_1, v72, v68);
        unint64_t v97 = v73;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v18);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v72, v68);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)( v95,  v66,  (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter,  v77);
      goto LABEL_27;
    }

    uint64_t v27 = *(void *)(v24 + 16);
    uint64_t v28 = v94;
    if (*(_BYTE *)(v24 + 24) != 1 || (v27 & 0x8000000000000000LL) == 0)
    {
      unint64_t v97 = *(void *)(v24 + 16);
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      return dispatch thunk of FloatingPoint.init<A>(_:)();
    }

    uint64_t v29 = v24 & 0xFFFFFFFFFFFFFFFLL;
    unint64_t v97 = 0LL;
    unint64_t v98 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(52LL);
    v30._countAndFlagsBits = 0xD00000000000001DLL;
    v30._object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v30);
    uint64_t v96 = v27;
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._object = (void *)0x80000001839D1400LL;
    v32._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v32);
    v33._countAndFlagsBits = 0x3436746E4955LL;
    v33._object = (void *)0xE600000000000000LL;
    String.append(_:)(v33);
    v34._countAndFlagsBits = 46LL;
    v34._object = (void *)0xE100000000000000LL;
    String.append(_:)(v34);
    uint64_t v35 = v97;
    uint64_t v36 = v98;
    type metadata accessor for DecodingError();
    uint64_t v37 = (void *)swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(v35, v36, v92, v93, v28, v89, v38);
    swift_bridgeObjectRelease();
    swift_willThrow();

    uint64_t v39 = *(void *)(v29 + 16);
    if ((*(_BYTE *)(v29 + 24) & 1) != 0 || (v39 & 0x8000000000000000LL) == 0)
    {
      unint64_t v97 = *(void *)(v29 + 16);
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      return dispatch thunk of FloatingPoint.init<A>(_:)();
    }

    unint64_t v97 = 0LL;
    unint64_t v98 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(52LL);
    v40._countAndFlagsBits = 0xD00000000000001DLL;
    v40._object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v40);
    uint64_t v96 = v39;
    v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._object = (void *)0x80000001839D1400LL;
    v42._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v42);
    v43._countAndFlagsBits = 0x3436746E49LL;
    v43._object = (void *)0xE500000000000000LL;
    String.append(_:)(v43);
    v44._countAndFlagsBits = 46LL;
    v44._object = (void *)0xE100000000000000LL;
    String.append(_:)(v44);
    unint64_t v45 = v97;
    unint64_t v46 = v98;
    swift_allocError();
    uint64_t v48 = v47;
    uint64_t v49 = v45;
    uint64_t v50 = v46;
    unint64_t v51 = v92;
    uint64_t v52 = v93;
    uint64_t v53 = v28;
LABEL_26:
    static DecodingError._dataCorrupted<A>(_:for:_:)(v49, v50, v51, v52, v53, v89, v48);
LABEL_27:
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  unint64_t v54 = *(void *)(v24 + 16);
  uint64_t v55 = *(void *)(v24 + 24);
  if (v55 != 4)
  {
    uint64_t v71 = v95;
    if (v55 == 8)
    {
      if ((~v54 & 0x7FF0000000000000LL) != 0 || (v54 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        unint64_t v97 = *(void *)(v24 + 16);
        lazy protocol witness table accessor for type Double and conformance Double();
        dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
        uint64_t v78 = *(void *)(v71 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v11, 1LL, v71) == 1)
        {
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
          unint64_t v97 = 0LL;
          unint64_t v98 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(45LL);
          v79._countAndFlagsBits = 0xD000000000000016LL;
          v79._object = (void *)0x80000001839D2560LL;
          String.append(_:)(v79);
          Double.write<A>(to:)();
          v80._object = (void *)0x80000001839D1400LL;
          v80._countAndFlagsBits = 0xD000000000000012LL;
          String.append(_:)(v80);
          v81._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v81);
          swift_bridgeObjectRelease();
          v82._countAndFlagsBits = 46LL;
          v82._object = (void *)0xE100000000000000LL;
          String.append(_:)(v82);
          unint64_t v83 = v97;
          unint64_t v84 = v98;
          type metadata accessor for DecodingError();
          swift_allocError();
          uint64_t v48 = v85;
          uint64_t v49 = v83;
          uint64_t v50 = v84;
          unint64_t v51 = v92;
          uint64_t v52 = v93;
          uint64_t v53 = v94;
          goto LABEL_26;
        }

        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v78 + 32))(v90, v11, v71);
      }

      return dispatch thunk of static FloatingPoint.nan.getter();
    }

uint64_t static _BPlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v66 = a6;
  unint64_t v67 = a2;
  uint64_t v68 = a3;
  uint64_t v64 = a7;
  uint64_t v74 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v63 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = v10;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)&v63 - v16;
  uint64_t v70 = a4;
  uint64_t v18 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)&v63 - v22;
  __n128 v28 = MEMORY[0x1895F8858](v24);
  Swift::String v30 = (char *)&v63 - v29;
  if (v26 >> 60 == 8)
  {
    uint64_t v38 = v27;
    uint64_t v39 = v25;
    uint64_t v40 = *(void *)(v26 + 16);
    if ((*(_BYTE *)(v26 + 24) & 1) != 0)
    {
      unint64_t v72 = *(void *)(v26 + 16);
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v33 = v70;
      dispatch thunk of Numeric.init<A>(exactly:)();
      uint64_t v41 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v23, 1LL, v33) == 1)
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v23, v39);
        unint64_t v72 = 0LL;
        unint64_t v73 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(52LL);
        v42._countAndFlagsBits = 0xD00000000000001DLL;
        v42._object = (void *)0x80000001839D13E0LL;
        String.append(_:)(v42);
        uint64_t v71 = v40;
LABEL_24:
        v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }

      uint64_t v20 = v23;
    }

    else
    {
      unint64_t v72 = *(void *)(v26 + 16);
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      uint64_t v33 = v70;
      dispatch thunk of Numeric.init<A>(exactly:)();
      uint64_t v41 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v20, 1LL, v33) == 1)
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v39);
        unint64_t v72 = 0LL;
        unint64_t v73 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(52LL);
        v47._countAndFlagsBits = 0xD00000000000001DLL;
        v47._object = (void *)0x80000001839D13E0LL;
        String.append(_:)(v47);
        uint64_t v71 = v40;
        goto LABEL_24;
      }
    }

    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v64, v20, v33);
  }

  if (v26 >> 60 != 7)
  {
    unint64_t v65 = v26;
    Swift::String v43 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16);
    v43(v17, v68, v11, v28);
    ((void (*)(char *, char *, uint64_t))v43)(v14, v17, v11);
    uint64_t v44 = v69;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1LL, v69) == 1)
    {
      unint64_t v45 = *(void (**)(char *, uint64_t))(v12 + 8);
      v45(v14, v11);
      _CodingPathNode.path.getter(v67);
      v45(v17, v11);
    }

    else
    {
      uint64_t v55 = v63;
      (*(void (**)(void))(v8 + 32))();
      uint64_t v56 = _CodingPathNode.path.getter(v67);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183720D90;
      uint64_t v58 = v66;
      *(void *)(inited + 56) = v44;
      *(void *)(inited + 64) = v58;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 16))(boxed_opaque_existential_1, v55, v44);
      unint64_t v72 = v56;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v55, v44);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)( v70,  v65,  (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter,  v60);
    goto LABEL_29;
  }

  unint64_t v31 = *(void *)(v26 + 16);
  uint64_t v32 = *(void *)(v26 + 24);
  if (v32 == 4)
  {
    uint64_t v33 = v70;
    if (!HIDWORD(v31))
    {
      uint64_t v34 = v27;
      uint64_t v35 = v25;
      if ((v31 & 0x7FFFFF) != 0 && (~(_DWORD)v31 & 0x7F800000) == 0LL) {
        double v37 = NAN;
      }
      else {
        double v37 = *(float *)&v31;
      }
LABEL_20:
      unint64_t v72 = *(void *)&v37;
      lazy protocol witness table accessor for type Double and conformance Double();
      dispatch thunk of FloatingPoint.init<A>(_:)();
      uint64_t v41 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v30, 1LL, v33) == 1)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v35);
        unint64_t v72 = 0LL;
        unint64_t v73 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(45LL);
        v46._countAndFlagsBits = 0xD000000000000016LL;
        v46._object = (void *)0x80000001839D2560LL;
        String.append(_:)(v46);
        Double.write<A>(to:)();
LABEL_25:
        v49._object = (void *)0x80000001839D1400LL;
        v49._countAndFlagsBits = 0xD000000000000012LL;
        String.append(_:)(v49);
        v50._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v50);
        swift_bridgeObjectRelease();
        v51._countAndFlagsBits = 46LL;
        v51._object = (void *)0xE100000000000000LL;
        String.append(_:)(v51);
        uint64_t v52 = v72;
        uint64_t v53 = v73;
        type metadata accessor for DecodingError();
        swift_allocError();
        static DecodingError._dataCorrupted<A>(_:for:_:)(v52, v53, v67, v68, v69, v66, v54);
LABEL_29:
        swift_bridgeObjectRelease();
        return swift_willThrow();
      }

      uint64_t v20 = v30;
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v64, v20, v33);
    }

    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    uint64_t v33 = v70;
    if (v32 == 8)
    {
      uint64_t v34 = v27;
      uint64_t v35 = v25;
      double v37 = *(double *)(v26 + 16);
      if ((~v31 & 0x7FF0000000000000LL) == 0 && (v31 & 0xFFFFFFFFFFFFFLL) != 0) {
        double v37 = NAN;
      }
      goto LABEL_20;
    }
  }

  unint64_t v72 = 0LL;
  unint64_t v73 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(37LL);
  swift_bridgeObjectRelease();
  unint64_t v72 = 0xD000000000000023LL;
  unint64_t v73 = 0x80000001839D2530LL;
  uint64_t v71 = v32;
  v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for static PlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:) in conformance _BPlistDecodingFormat( uint64_t a1, unint64_t *a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _BPlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:)(a1, *a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static PlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:) in conformance _BPlistDecodingFormat@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return static _BPlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:)(*a1, a2, a3, a4);
}

BOOL protocol witness for static PlistDecodingFormat.valueIsNull(_:) in conformance _BPlistDecodingFormat( void *a1)
{
  return ((*a1 + 0x6FFFFFFFFFFFFFF8LL) & 0xFFFFFFFFFFFFFFF7LL) == 0 && *a1 >> 60 == 9LL;
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapBool<A>(from:for:_:) in conformance _BPlistDecodingFormat( uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static _BPlistDecodingFormat.unwrapBool<A>(from:for:_:)(*a1, a2, a3, a4, a5) & 1;
}

void protocol witness for static PlistDecodingFormat.unwrapDate<A>(from:in:for:_:) in conformance _BPlistDecodingFormat( uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapData<A>(from:in:for:_:) in conformance _BPlistDecodingFormat( uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _BPlistDecodingFormat.unwrapData<A>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapString<A>(from:in:for:_:) in conformance _BPlistDecodingFormat( unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:) in conformance _BPlistDecodingFormat@<X0>( unint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  return static _BPlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:) in conformance _BPlistDecodingFormat@<X0>( uint64_t *a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  return static _BPlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6, a7);
}

id partial apply for closure #1 in static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>( char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return partial apply for closure #1 in static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v5;
  id result;
  uint64_t v7;
  if (*(_BYTE *)(v3 + 16)) {
    id v5 = 1LL;
  }
  else {
    id v5 = 2415919360LL;
  }
  uint64_t result = specialized String.init<A>(bytes:encoding:)(a1, a2, v5);
  *a3 = result;
  a3[1] = v7;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v23 >= v13) {
      goto LABEL_28;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24)
      {
        int64_t v9 = v23 + 2;
        if (v23 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v24 = *(void *)(v6 + 8 * v9);
        if (!v24) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, XMLPlistMap.Value>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_28;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }

void *specialized closure #1 in BPlistMap.withBuffer<A>(for:perform:)@<X0>( void *result@<X0>, void *(*a2)(__int128 *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }

  else
  {
    uint64_t result = a2(&v10, *result + a3, a4);
    if (!v5) {
      *a5 = v10;
    }
  }

  return result;
}

uint64_t sub_1833C3264()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>;
  if (!lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat>);
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistUnkeyedDecodingContainer<A>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>);
  }

  return result;
}

uint64_t sub_1833C32E0()
{
  unint64_t v1 = *(void *)(v0 + 40);
  if ((~v1 & 0xF000000000000007LL) != 0) {
    outlined consume of BPlistMap.Value(v1);
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t _TimeZoneProtocol.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRelease();
}

NSTimeZone __swiftcall _TimeZoneProtocol.bridgeToNSTimeZone()()
{
  uint64_t v2 = v0;
  uint64_t v3 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  uint64_t v4 = (char *)objc_allocWithZone(v3);
  uint64_t v5 = &v4[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *(void *)uint64_t v5 = v1;
  *((void *)v5 + 1) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 32) = 0;
  *(_OWORD *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_1837ADD10;
  *(void *)&v4[OBJC_IVAR____NSSwiftTimeZone_lock] = v6;
  v8.receiver = v4;
  v8.super_class = v3;
  swift_unknownObjectRetain();
  return (NSTimeZone)objc_msgSendSuper2(&v8, sel_init);
}

uint64_t dispatch thunk of _TimeZoneProtocol.init(identifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.abbreviation(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.isDaylightSavingTime(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.daylightSavingTimeOffset(for:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.nextDaylightSavingTimeTransition(after:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t protocol witness for _TimeZoneProtocol.hash(into:) in conformance _TimeZoneICU()
{
  return swift_bridgeObjectRelease();
}

id protocol witness for _TimeZoneProtocol.bridgeToNSTimeZone() in conformance _TimeZoneICU( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  uint64_t v6 = &v5[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *(void *)uint64_t v6 = v2;
  *((void *)v6 + 1) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 32) = 0;
  *(_OWORD *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_1837ADD10;
  *(void *)&v5[OBJC_IVAR____NSSwiftTimeZone_lock] = v7;
  v9.receiver = v5;
  v9.super_class = v4;
  swift_retain();
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t dispatch thunk of _TimeZoneProtocol.bridgeToNSTimeZone()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

Swift::Int_optional __swiftcall NSIndexSetIterator.next()()
{
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    id v1 = objc_msgSend(*(id *)v0, sel_firstIndex);
    *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
    *(_BYTE *)(v0 + 24) = 0;
    *(_BYTE *)(v0 + 8) = 0;
  }

  else
  {
    id v1 = *(id *)(v0 + 16);
    if ((*(_BYTE *)(v0 + 24) & 1) != 0)
    {
      Swift::Bool v2 = 1;
      goto LABEL_9;
    }

    id v1 = objc_msgSend(*(id *)v0, sel_indexGreaterThanIndex_, v1);
    *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
    *(_BYTE *)(v0 + 24) = 0;
  }

  if (v1 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v1 = 0LL;
    *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
    Swift::Bool v2 = 1;
    *(_BYTE *)(v0 + 24) = 1;
  }

  else
  {
    Swift::Bool v2 = 0;
  }

Swift::Int protocol witness for IteratorProtocol.next() in conformance NSIndexSetIterator@<X0>( uint64_t a1@<X8>)
{
  Swift::Int_optional v3 = NSIndexSetIterator.next()();
  *(void *)a1 = v3.value;
  *(_BYTE *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

id NSIndexSet.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = 1;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  return v1;
}

unint64_t lazy protocol witness table accessor for type NSIndexSetIterator and conformance NSIndexSetIterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSIndexSetIterator and conformance NSIndexSetIterator;
  if (!lazy protocol witness table cache variable for type NSIndexSetIterator and conformance NSIndexSetIterator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSIndexSetIterator,  &type metadata for NSIndexSetIterator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSIndexSetIterator and conformance NSIndexSetIterator);
  }

  return result;
}

void protocol witness for Sequence.makeIterator() in conformance NSIndexSet(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(_BYTE *)(a1 + 8) = 1;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSIndexSet()
{
  id v1 = *v0;
  specialized _copySequenceToContiguousArray<A>(_:)(*v0);
  uint64_t v3 = v2;

  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance NSIndexSet( uint64_t a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance NSIndexSet@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

uint64_t initializeWithCopy for NSIndexSetIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for NSIndexSetIterator(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  return a1;
}

uint64_t assignWithTake for NSIndexSetIterator(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSIndexSetIterator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSIndexSetIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NSIndexSetIterator()
{
  return &type metadata for NSIndexSetIterator;
}

uint64_t type metadata completion function for _PlistDecoder()
{
  return swift_initClassMetadata2();
}

uint64_t _PlistDecoder.codingPath.getter()
{
  unint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  uint64_t v2 = _CodingPathNode.path.getter(v1);
  swift_release();
  return v2;
}

void *_PlistDecoder.init(referencing:options:codingPathNode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v6 = *(void *)(*v3 + 80LL);
  uint64_t v5 = *(void *)(*v3 + 88LL);
  swift_getAssociatedTypeWitness();
  uint64_t v21 = v6;
  uint64_t v22 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v21 - v10;
  _swift_isClassOrObjCExistentialType();
  v3[2] = MEMORY[0x18961AFE8];
  v3[3] = a1;
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  swift_unknownObjectRetain();
  uint64_t v13 = swift_checkMetadataState();
  uint64_t v14 = v23;
  v12(v13, AssociatedConformanceWitness);
  if (v14)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    type metadata accessor for _PlistDecoder(0LL, v21, v22, v17);
    swift_deallocPartialClassInstance();
  }

  else
  {
    uint64_t v18 = type metadata accessor for _PlistDecodingStorage(0LL, AssociatedTypeWitness, v15, v16);
    specialized _PlistDecodingStorage.push(container:)((uint64_t)v11, v18);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    uint64_t v19 = v25;
    v3[4] = v24;
    v3[5] = v19;
  }

  return v3;
}

uint64_t _PlistDecoder.container<A>(keyedBy:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v31 = a2;
  uint64_t v27 = a4;
  uint64_t v28 = a1;
  uint64_t v6 = *(void *)(*v4 + 80LL);
  uint64_t v5 = *(void *)(*v4 + 88LL);
  swift_getAssociatedTypeWitness();
  uint64_t v32 = v5;
  uint64_t v29 = v6;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v26 - 8);
  MEMORY[0x1895F8858](v26);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)&v25 - v16;
  Swift::String v30 = v4;
  uint64_t v18 = v4[2];
  swift_bridgeObjectRetain_n();
  uint64_t v19 = MEMORY[0x186E1BB2C](v18, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v19)
  {
    uint64_t v34 = v18;
    uint64_t v20 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618458], v20);
    BidirectionalCollection.last.getter();
    uint64_t v19 = v26;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1LL, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v10, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v19);
      swift_bridgeObjectRelease();
      uint64_t v21 = v30;
      uint64_t v22 = v30[5];
      uint64_t v23 = *(void (**)(uint64_t, char *, void *, uint64_t, uint64_t, uint64_t))(v32 + 24);
      swift_retain();
      v23(v28, v17, v21, v22, v31, v33);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
      return swift_release();
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v19);
  __break(1u);
  return result;
}

uint64_t _PlistDecoder.unkeyedContainer()@<X0>(uint64_t a1@<X8>)
{
  v22[1] = a1;
  uint64_t v3 = *(void *)(*v1 + 80LL);
  uint64_t v2 = *(void *)(*v1 + 88LL);
  swift_getAssociatedTypeWitness();
  uint64_t v24 = v3;
  uint64_t v25 = v2;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22[0] = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v22[0] - 8LL);
  MEMORY[0x1895F8858](v22[0]);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)v22 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)v22 - v13;
  uint64_t v23 = v1;
  uint64_t v15 = v1[2];
  swift_bridgeObjectRetain_n();
  uint64_t v16 = MEMORY[0x186E1BB2C](v15, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v16)
  {
    uint64_t v26 = v15;
    uint64_t v17 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618458], v17);
    BidirectionalCollection.last.getter();
    uint64_t v16 = v22[0];
    (*(void (**)(char *, char *, void))(v5 + 16))(v7, v10, v22[0]);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1LL, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v7, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v16);
      swift_bridgeObjectRelease();
      uint64_t v18 = v23;
      uint64_t v19 = v23[5];
      uint64_t v20 = *(void (**)(char *, void *, uint64_t))(v25 + 32);
      swift_retain();
      v20(v14, v18, v19);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
      return swift_release();
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v16);
  __break(1u);
  return result;
}

uint64_t _PlistDecoder.singleValueContainer()@<X0>(uint64_t a1@<X3>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for _PlistDecoder( 0LL,  *(void *)(*(void *)v2 + 80LL),  *(void *)(*(void *)v2 + 88LL),  a1);
  a2[3] = v4;
  a2[4] = MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistDecoder<A>, v4);
  *a2 = v2;
  return swift_retain();
}

uint64_t _PlistDecoder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _PlistDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PlistDecoder);
}

uint64_t protocol witness for Decoder.codingPath.getter in conformance _PlistDecoder<A>()
{
  return _PlistDecoder.codingPath.getter();
}

uint64_t protocol witness for Decoder.userInfo.getter in conformance _PlistDecoder<A>()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Decoder.container<A>(keyedBy:) in conformance _PlistDecoder<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _PlistDecoder.container<A>(keyedBy:)(a1, a2, a3, a4);
}

uint64_t protocol witness for Decoder.unkeyedContainer() in conformance _PlistDecoder<A>@<X0>( uint64_t a1@<X8>)
{
  return _PlistDecoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Decoder.singleValueContainer() in conformance _PlistDecoder<A>@<X0>( uint64_t a1@<X3>, void *a2@<X8>)
{
  return _PlistDecoder.singleValueContainer()(a1, a2);
}

uint64_t protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:) in conformance _PlistDecoder<A>@<X0>( ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _PlistDecoder.decode<A>(_:)(a1, a2, a3, a4);
}

uint64_t _PlistDecoder.decode<A>(_:)@<X0>( ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v22 - 8);
  MEMORY[0x1895F8858](v22);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v21 - v14;
  uint64_t v27 = v4;
  uint64_t v16 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v17 = MEMORY[0x186E1BB2C](v16, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v17)
  {
    uint64_t v28 = v16;
    uint64_t v18 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618458], v18);
    BidirectionalCollection.last.getter();
    uint64_t v17 = v22;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1LL, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v8, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v17);
      swift_bridgeObjectRelease();
      unint64_t v19 = *(void *)(v27 + 40);
      swift_retain();
      specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)( (uint64_t)v15,  v25,  v19,  0LL,  0LL,  0LL,  255,  v26,  v24,  v23);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v17);
  __break(1u);
  return result;
}

uint64_t protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:configuration:) in conformance _PlistDecoder<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return _PlistDecoder.decode<A>(_:configuration:)(a1, a2, a3, a4, a5);
}

uint64_t _PlistDecoder.decode<A>(_:configuration:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v24 = a4;
  uint64_t v25 = a3;
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v26 = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v29 = v5;
  uint64_t v17 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v18 = MEMORY[0x186E1BB2C](v17, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v18)
  {
    uint64_t v30 = v17;
    uint64_t v19 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618458], v19);
    BidirectionalCollection.last.getter();
    uint64_t v18 = v23;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v12, v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1LL, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v9, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v18);
      swift_bridgeObjectRelease();
      unint64_t v20 = *(void *)(v29 + 40);
      swift_retain();
      specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:configuration:for:_:)( (uint64_t)v16,  v27,  v28,  v20,  0LL,  0LL,  0LL,  255,  v26,  v25,  v24);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  __break(1u);
  return result;
}

uint64_t specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)@<X0>( uint64_t a1@<X0>, ValueMetadata *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v56 = a8;
  LODWORD(v64) = a7;
  uint64_t v58 = a5;
  uint64_t v59 = a6;
  uint64_t v55 = a9;
  uint64_t v16 = *(void *)(*(void *)v10 + 80LL);
  uint64_t v15 = *(void *)(*(void *)v10 + 88LL);
  swift_getAssociatedTypeWitness();
  uint64_t v54 = v15;
  uint64_t v17 = v16;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  if (a2 == &type metadata for Date)
  {
    uint64_t result = specialized _PlistDecoder.unwrapDate<A>(from:for:_:)(a1, a3, a4, v58, v59, v64);
    if (v57) {
      return result;
    }
    return swift_dynamicCast();
  }

  uint64_t v52 = v19;
  uint64_t v53 = a1;
  uint64_t v22 = a4;
  uint64_t v23 = v58;
  uint64_t v24 = v10;
  char v25 = v64;
  if (a2 == &type metadata for Data)
  {
    uint64_t result = (uint64_t)specialized _PlistDecoder.unwrapData<A>(from:for:_:)(v53, a3, v22, v58, v59, v64);
    if (v57) {
      return result;
    }
    uint64_t v60 = result;
    uint64_t v61 = v30;
    return swift_dynamicCast();
  }

  Swift::String v50 = (char *)&v49 - v20;
  uint64_t v51 = v21;
  uint64_t v26 = v59;
  if ((_BYTE)v64 == 0xFF)
  {
    uint64_t v31 = v59;
    uint64_t v32 = a3 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    uint64_t v33 = v22;
    uint64_t v34 = v52;
    goto LABEL_18;
  }

  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 40) = &type metadata for _CodingKey;
  *(void *)(v27 + 48) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = result;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v22;
  *(void *)(result + 24) = v23;
  *(void *)(result + 32) = v26;
  *(_BYTE *)(result + 40) = v25;
  *(void *)(v27 + 56) = a3;
  if (a3 >> 62)
  {
    if (a3 >> 62 != 1)
    {
      uint64_t v33 = v22;
      uint64_t v35 = 0LL;
      goto LABEL_16;
    }

    uint64_t v29 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    uint64_t v29 = (uint64_t *)(a3 + 64);
  }

  uint64_t v35 = *v29;
  uint64_t result = swift_retain();
  uint64_t v33 = v22;
LABEL_16:
  uint64_t v36 = v35 + 1;
  uint64_t v34 = v52;
  if (__OFADD__(v35, 1LL))
  {
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v31 = v26;
  *(void *)(v27 + 64) = v36;
  uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFFLL;
  a3 = v27;
LABEL_18:
  uint64_t v59 = a10;
  uint64_t v37 = *(void *)(v24 + 40);
  *(void *)(v24 + 40) = a3;
  outlined copy of _CodingKey?(v33, v23, v31, v25);
  uint64_t v40 = type metadata accessor for _PlistDecodingStorage(0LL, v34, v38, v39);
  uint64_t v64 = v32;
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v53, v40);
  uint64_t v62 = type metadata accessor for _PlistDecoder(0LL, v17, v54, v41);
  uint64_t v63 = MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistDecoder<A>, v62);
  uint64_t v60 = v24;
  swift_retain();
  uint64_t v42 = v57;
  dispatch thunk of Decodable.init(from:)();
  if (!v42) {
    goto LABEL_21;
  }
  *(void *)(v24 + 40) = v37;
  swift_retain();
  swift_release();
  uint64_t v43 = swift_bridgeObjectRetain();
  uint64_t v44 = MEMORY[0x186E1BB2C](v43, v34);
  swift_bridgeObjectRelease();
  if (!v44)
  {
    __break(1u);
LABEL_21:
    *(void *)(v24 + 40) = v37;
    swift_retain();
    swift_release();
    uint64_t v45 = swift_bridgeObjectRetain();
    uint64_t v46 = MEMORY[0x186E1BB2C](v45, v34);
    uint64_t result = swift_bridgeObjectRelease();
    if (v46) {
      goto LABEL_22;
    }
LABEL_25:
    __break(1u);
    return result;
  }

uint64_t _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v71 = a3;
  uint64_t v9 = v8;
  uint64_t v72 = a7;
  uint64_t v65 = a6;
  uint64_t v68 = a4;
  uint64_t v69 = a1;
  uint64_t v76 = a2;
  uint64_t v67 = a8;
  uint64_t v12 = *(void *)(*(void *)v8 + 80LL);
  uint64_t v11 = *(void *)(*(void *)v8 + 88LL);
  swift_getAssociatedTypeWitness();
  uint64_t v63 = v12;
  uint64_t v64 = v11;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v62 = (char *)&v58 - v14;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v26 = MEMORY[0x1895F8858](v23);
  uint64_t v27 = (char *)&v58 - v24;
  if (v25 == &type metadata for Date)
  {
    uint64_t v38 = v70;
    uint64_t result = _PlistDecoder.unwrapDate<A>(from:for:_:)(v69, v76, v71, a5, v72, (uint64_t)v73);
    if (v38) {
      return result;
    }
    return swift_dynamicCast();
  }

  uint64_t v61 = v9;
  if (v25 == &type metadata for Data)
  {
    uint64_t v40 = v70;
    uint64_t result = (uint64_t)_PlistDecoder.unwrapData<A>(from:for:_:)(v69, v76, v71, a5, v72);
    if (v40) {
      return result;
    }
    v73[0] = result;
    v73[1] = v41;
    return swift_dynamicCast();
  }

  uint64_t v59 = v13;
  uint64_t v60 = v25;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16);
  v28((char *)&v58 - v24, v71, v19, v26);
  ((void (*)(char *, char *, uint64_t))v28)(v22, v27, v19);
  int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v22, 1LL, a5);
  uint64_t v30 = v72;
  if (v29 == 1)
  {
    uint64_t v31 = *(void (**)(char *, uint64_t))(v20 + 8);
    v31(v27, v19);
    v31(v22, v19);
    unint64_t v32 = v76;
    swift_retain();
    uint64_t v35 = AssociatedTypeWitness;
    uint64_t v36 = v69;
    uint64_t v37 = v70;
    goto LABEL_16;
  }

  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v42(v18, v22, a5);
  uint64_t v43 = (uint64_t *)swift_allocObject();
  v43[5] = a5;
  v43[6] = v30;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v43 + 2);
  v42((char *)boxed_opaque_existential_1, v18, a5);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v27, v19);
  unint64_t v45 = v76;
  v43[7] = v76;
  if (!(v45 >> 62))
  {
    uint64_t v46 = (uint64_t *)(v45 + 64);
    uint64_t v35 = AssociatedTypeWitness;
    uint64_t v36 = v69;
    uint64_t v37 = v70;
LABEL_14:
    uint64_t v47 = *v46;
    uint64_t result = swift_retain();
    uint64_t v48 = v47 + 1;
    if (__OFADD__(v47, 1LL))
    {
      __break(1u);
      goto LABEL_24;
    }

    goto LABEL_15;
  }

  uint64_t v36 = v69;
  uint64_t v37 = v70;
  if (v45 >> 62 == 1)
  {
    uint64_t v46 = (uint64_t *)((v45 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    uint64_t v35 = AssociatedTypeWitness;
    goto LABEL_14;
  }

  uint64_t v35 = AssociatedTypeWitness;
  uint64_t v48 = 1LL;
LABEL_15:
  v43[8] = v48;
  unint64_t v32 = (unint64_t)v43;
LABEL_16:
  uint64_t v49 = v61;
  uint64_t v50 = *(void *)(v61 + 40);
  *(void *)(v61 + 40) = v32;
  uint64_t v51 = type metadata accessor for _PlistDecodingStorage(0LL, v35, v33, v34);
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v36, v51);
  uint64_t v74 = type metadata accessor for _PlistDecoder(0LL, v63, v64, v52);
  uint64_t v75 = MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistDecoder<A>, v74);
  v73[0] = v49;
  swift_retain();
  dispatch thunk of Decodable.init(from:)();
  if (!v37) {
    goto LABEL_19;
  }
  *(void *)(v49 + 40) = v50;
  v50 &= 0x3FFFFFFFFFFFFFFFuLL;
  swift_retain();
  swift_release();
  uint64_t v53 = swift_bridgeObjectRetain();
  uint64_t v49 = MEMORY[0x186E1BB2C](v53, v35);
  swift_bridgeObjectRelease();
  if (!v49)
  {
    __break(1u);
LABEL_19:
    *(void *)(v49 + 40) = v50;
    swift_retain();
    swift_release();
    uint64_t v54 = swift_bridgeObjectRetain();
    uint64_t v55 = MEMORY[0x186E1BB2C](v54, v35);
    uint64_t result = swift_bridgeObjectRelease();
    if (v55) {
      goto LABEL_20;
    }
LABEL_24:
    __break(1u);
    return result;
  }

uint64_t specialized _PlistDecoder.unwrapDate<A>(from:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v7 = v6;
  uint64_t v30 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v6;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  unsigned __int8 v29 = a6;
  uint64_t v11 = *(void *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12) & 1) != 0)
  {
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    *uint64_t v14 = &type metadata for Date;
    char v16 = v29;
    if (v29 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v18 = v27;
      uint64_t v17 = v28;
      uint64_t v19 = v26;
      outlined copy of _CodingKey(v26, v27, v28, v29);
      outlined copy of _CodingKey(v26, v27, v28, v29);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v21 = swift_allocObject();
      *(void *)(inited + 32) = v21;
      *(void *)(v21 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v19;
      *(void *)(v21 + 24) = v18;
      *(void *)(v21 + 32) = v17;
      *(_BYTE *)(v21 + 40) = v16;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104LL))( v15,  *MEMORY[0x189619368],  v13);
    return swift_willThrow();
  }

  else
  {
    uint64_t v22 = v7[3];
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v12 + 56);
    unint64_t v24 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v23(a1, v22, a2, &v26, &type metadata for _CodingKey, v24, v11, v12);
    return swift_unknownObjectRelease();
  }

uint64_t _PlistDecoder.unwrapDate<A>(from:for:_:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v39[1] = a6;
  uint64_t v7 = v6;
  uint64_t v43 = a5;
  uint64_t v45 = a3;
  uint64_t v48 = *MEMORY[0x1895F89C0];
  uint64_t v11 = *v6;
  uint64_t v44 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v42 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v41 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v17 = MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)v39 - v18;
  uint64_t v20 = *(void *)(v11 + 80);
  uint64_t v21 = *(void *)(v11 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v21 + 40))(a1, v20, v21, v17) & 1) != 0)
  {
    unint64_t v22 = a2;
    uint64_t v23 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v24;
    *unint64_t v24 = &type metadata for Date;
    uint64_t v25 = v41;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
    v26(v19, v45, v13);
    v26(v15, (uint64_t)v19, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v15, 1LL, a4) == 1)
    {
      uint64_t v27 = *(void (**)(char *, uint64_t))(v25 + 8);
      v27(v15, v13);
      _CodingPathNode.path.getter(v22);
      v27(v19, v13);
    }

    else
    {
      uint64_t v45 = v23;
      uint64_t v31 = v44;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v42, v15, a4);
      uint64_t v32 = _CodingPathNode.path.getter(v22);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v34 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v42;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v42, a4);
      uint64_t v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v19, v13);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v23 = v45;
      v37(v36, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v38 = v40;
    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v23);
    return swift_willThrow();
  }

  else
  {
    uint64_t v28 = v7[3];
    unsigned __int8 v29 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
    swift_unknownObjectRetain();
    v29(a1, v28, a2, v45, a4, v43, v20, v21);
    return swift_unknownObjectRelease();
  }

void *specialized _PlistDecoder.unwrapData<A>(from:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v7 = v6;
  uint64_t v33 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v6;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  unsigned __int8 v32 = a6;
  uint64_t v11 = *(void *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12) & 1) != 0)
  {
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    *uint64_t v14 = &type metadata for Data;
    char v16 = v32;
    if (v32 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v18 = v30;
      uint64_t v17 = v31;
      uint64_t v19 = v29;
      outlined copy of _CodingKey(v29, v30, v31, v32);
      outlined copy of _CodingKey(v29, v30, v31, v32);
      uint64_t v20 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v22 = swift_allocObject();
      *(void *)(inited + 32) = v22;
      *(void *)(v22 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v19;
      *(void *)(v22 + 24) = v18;
      *(void *)(v22 + 32) = v17;
      *(_BYTE *)(v22 + 40) = v16;
      v28[0] = v20;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v28[0] = 0LL;
    v28[1] = 0xE000000000000000LL;
    uint64_t v26 = v28;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104LL))( v15,  *MEMORY[0x189619368],  v13);
    swift_willThrow();
  }

  else
  {
    uint64_t v23 = v7[3];
    unint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v12 + 64);
    unint64_t v25 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    uint64_t v26 = (void *)v24(a1, v23, a2, &v29, &type metadata for _CodingKey, v25, v11, v12);
    swift_unknownObjectRelease();
  }

  return v26;
}

void *_PlistDecoder.unwrapData<A>(from:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  v46[11] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v5;
  uint64_t v42 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v40 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v38 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    unint64_t v39 = a2;
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v41 = v22;
    *uint64_t v22 = &type metadata for Data;
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    uint64_t v24 = v42;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1LL, a4) == 1)
    {
      unint64_t v25 = *(void (**)(char *, uint64_t))(v45 + 8);
      v25(v14, v12);
      _CodingPathNode.path.getter(v39);
      v25(v18, v12);
    }

    else
    {
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
      uint64_t v44 = v21;
      uint64_t v30 = v40;
      v29(v40, v14, a4);
      uint64_t v31 = _CodingPathNode.path.getter(v39);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v33 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v33;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 16))(boxed_opaque_existential_1, v30, a4);
      v46[0] = v31;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      uint64_t v35 = v30;
      uint64_t v21 = v44;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v35, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v36 = v41;
    v46[0] = 0LL;
    v46[1] = 0xE000000000000000LL;
    uint64_t v28 = v46;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v36,  *MEMORY[0x189619368],  v21);
    swift_willThrow();
  }

  else
  {
    uint64_t v26 = v6[3];
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 64);
    swift_unknownObjectRetain();
    uint64_t v28 = (void *)v27(a1, v26, a2, v44, a4, v43, v19, v20);
    swift_unknownObjectRelease();
  }

  return v28;
}

uint64_t specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:configuration:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v59 = a2;
  uint64_t v12 = v11;
  uint64_t v67 = a7;
  uint64_t v62 = a5;
  uint64_t v63 = a6;
  uint64_t v54 = a1;
  uint64_t v55 = a3;
  uint64_t v57 = a9;
  LODWORD(v61) = ~a8;
  uint64_t v16 = *(void *)(*(void *)v11 + 80LL);
  uint64_t v15 = *(void *)(*(void *)v11 + 88LL);
  swift_getAssociatedTypeWitness();
  uint64_t v52 = v16;
  uint64_t v53 = v15;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v50 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v49 = (char *)&v48 - v18;
  uint64_t v58 = a11;
  uint64_t v56 = a10;
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v21 = (char *)&v48 - v20;
  if ((_DWORD)v61)
  {
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 40) = &type metadata for _CodingKey;
    *(void *)(v22 + 48) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v23 = swift_allocObject();
    *(void *)(v22 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v23;
    uint64_t v25 = v62;
    uint64_t v24 = v63;
    *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v62;
    *(void *)(v23 + 24) = v24;
    uint64_t v26 = v67;
    *(void *)(v23 + 32) = v67;
    *(_BYTE *)(v23 + 40) = a8;
    *(void *)(v22 + 56) = a4;
    uint64_t result = v25;
    if (a4 >> 62)
    {
      if (a4 >> 62 != 1)
      {
        uint64_t v34 = 1LL;
LABEL_8:
        *(void *)(v22 + 64) = v34;
        uint64_t v32 = v22 & 0x3FFFFFFFFFFFFFFFLL;
        a4 = v22;
        goto LABEL_9;
      }

      uint64_t v61 = AssociatedTypeWitness;
      uint64_t v28 = v19;
      uint64_t v29 = v25;
      uint64_t v30 = v24;
      uint64_t v31 = (uint64_t *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v61 = AssociatedTypeWitness;
      uint64_t v28 = v19;
      uint64_t v29 = v25;
      uint64_t v30 = v24;
      uint64_t v31 = (uint64_t *)(a4 + 64);
    }

    uint64_t v33 = *v31;
    swift_retain();
    uint64_t v24 = v30;
    uint64_t result = v29;
    uint64_t v19 = v28;
    uint64_t AssociatedTypeWitness = v61;
    uint64_t v34 = v33 + 1;
    if (__OFADD__(v33, 1LL))
    {
      __break(1u);
      goto LABEL_16;
    }

    goto LABEL_8;
  }

  uint64_t v32 = a4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  uint64_t v26 = v67;
  uint64_t result = v62;
  uint64_t v24 = v63;
LABEL_9:
  uint64_t v35 = *(void *)(v12 + 40);
  *(void *)(v12 + 40) = a4;
  outlined copy of _CodingKey?(result, v24, v26, a8);
  uint64_t v38 = type metadata accessor for _PlistDecodingStorage(0LL, AssociatedTypeWitness, v36, v37);
  uint64_t v67 = v32;
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v54, v38);
  uint64_t v65 = type metadata accessor for _PlistDecoder(0LL, v52, v53, v39);
  uint64_t v66 = MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistDecoder<A>, v65);
  v64[0] = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v21, v55, v19);
  uint64_t v40 = v58;
  uint64_t v41 = *(void (**)(uint64_t *, char *, uint64_t, uint64_t))(v58 + 16);
  swift_retain();
  uint64_t v42 = v60;
  v41(v64, v21, v56, v40);
  if (v42)
  {
    *(void *)(v12 + 40) = v35;
    swift_retain();
    swift_release();
    uint64_t v43 = swift_bridgeObjectRetain();
    uint64_t v12 = MEMORY[0x186E1BB2C](v43, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    if (v12)
    {
LABEL_13:
      uint64_t v46 = type metadata accessor for Array();
      MEMORY[0x186E20D4C](MEMORY[0x189618458], v46);
      MEMORY[0x186E20D4C](MEMORY[0x189618490], v46);
      unint64_t v47 = v49;
      RangeReplaceableCollection<>.removeLast()();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v47, AssociatedTypeWitness);
      swift_release();
      return swift_release();
    }

    __break(1u);
  }

  *(void *)(v12 + 40) = v35;
  swift_retain();
  swift_release();
  uint64_t v44 = swift_bridgeObjectRetain();
  uint64_t v45 = MEMORY[0x186E1BB2C](v44, AssociatedTypeWitness);
  uint64_t result = swift_bridgeObjectRelease();
  if (v45) {
    goto LABEL_13;
  }
LABEL_16:
  __break(1u);
  return result;
}

void *specialized _PlistDecoder.unwrapString<A>(from:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v7 = v6;
  uint64_t v33 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v6;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  unsigned __int8 v32 = a6;
  uint64_t v11 = *(void *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12) & 1) != 0)
  {
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    *uint64_t v14 = MEMORY[0x189617FA8];
    char v16 = v32;
    if (v32 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v18 = v30;
      uint64_t v17 = v31;
      uint64_t v19 = v29;
      outlined copy of _CodingKey(v29, v30, v31, v32);
      outlined copy of _CodingKey(v29, v30, v31, v32);
      uint64_t v20 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v22 = swift_allocObject();
      *(void *)(inited + 32) = v22;
      *(void *)(v22 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v19;
      *(void *)(v22 + 24) = v18;
      *(void *)(v22 + 32) = v17;
      *(_BYTE *)(v22 + 40) = v16;
      v28[0] = v20;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v28[0] = 0LL;
    v28[1] = 0xE000000000000000LL;
    uint64_t v26 = v28;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104LL))( v15,  *MEMORY[0x189619368],  v13);
    swift_willThrow();
  }

  else
  {
    uint64_t v23 = v7[3];
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v12 + 72);
    unint64_t v25 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    uint64_t v26 = (void *)v24(a1, v23, a2, &v29, &type metadata for _CodingKey, v25, v11, v12);
    swift_unknownObjectRelease();
  }

  return v26;
}

void *_PlistDecoder.unwrapString<A>(from:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  v46[11] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v5;
  uint64_t v42 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v40 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v38 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    unint64_t v39 = a2;
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v41 = v22;
    *uint64_t v22 = MEMORY[0x189617FA8];
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    uint64_t v24 = v42;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1LL, a4) == 1)
    {
      unint64_t v25 = *(void (**)(char *, uint64_t))(v45 + 8);
      v25(v14, v12);
      _CodingPathNode.path.getter(v39);
      v25(v18, v12);
    }

    else
    {
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
      uint64_t v44 = v21;
      uint64_t v30 = v40;
      v29(v40, v14, a4);
      uint64_t v31 = _CodingPathNode.path.getter(v39);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v33 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v33;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 16))(boxed_opaque_existential_1, v30, a4);
      v46[0] = v31;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      uint64_t v35 = v30;
      uint64_t v21 = v44;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v35, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v36 = v41;
    v46[0] = 0LL;
    v46[1] = 0xE000000000000000LL;
    uint64_t v28 = v46;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v36,  *MEMORY[0x189619368],  v21);
    swift_willThrow();
  }

  else
  {
    uint64_t v26 = v6[3];
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 72);
    swift_unknownObjectRetain();
    uint64_t v28 = (void *)v27(a1, v26, a2, v44, a4, v43, v19, v20);
    swift_unknownObjectRelease();
  }

  return v28;
}

uint64_t specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  void (*v23)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v7 = v6;
  unsigned __int8 v32 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v6;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v11 = *(void *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12) & 1) != 0)
  {
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    *uint64_t v14 = MEMORY[0x189618560];
    char v16 = v31;
    if (v31 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v18 = v29;
      uint64_t v17 = v30;
      uint64_t v19 = v28;
      outlined copy of _CodingKey(v28, v29, v30, v31);
      outlined copy of _CodingKey(v28, v29, v30, v31);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v21 = swift_allocObject();
      *(void *)(inited + 32) = v21;
      *(void *)(v21 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v19;
      *(void *)(v21 + 24) = v18;
      *(void *)(v21 + 32) = v17;
      *(_BYTE *)(v21 + 40) = v16;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104LL))( v15,  *MEMORY[0x189619368],  v13);
    return swift_willThrow();
  }

  else
  {
    uint64_t v22 = v7[3];
    uint64_t v23 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v12 + 80);
    uint64_t v24 = lazy protocol witness table accessor for type Double and conformance Double();
    unint64_t v25 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v23(&v27, a1, v22, a2, &v28, MEMORY[0x189618560], &type metadata for _CodingKey, v24, v25, v11, v12);
    return swift_unknownObjectRelease();
  }

{
  void *v6;
  void *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v7 = v6;
  unsigned __int8 v32 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v6;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v11 = *(void *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12) & 1) != 0)
  {
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    *uint64_t v14 = MEMORY[0x189618620];
    char v16 = v31;
    if (v31 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v18 = v29;
      uint64_t v17 = v30;
      uint64_t v19 = v28;
      outlined copy of _CodingKey(v28, v29, v30, v31);
      outlined copy of _CodingKey(v28, v29, v30, v31);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v21 = swift_allocObject();
      *(void *)(inited + 32) = v21;
      *(void *)(v21 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v19;
      *(void *)(v21 + 24) = v18;
      *(void *)(v21 + 32) = v17;
      *(_BYTE *)(v21 + 40) = v16;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104LL))( v15,  *MEMORY[0x189619368],  v13);
    return swift_willThrow();
  }

  else
  {
    uint64_t v22 = v7[3];
    uint64_t v23 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v12 + 80);
    uint64_t v24 = lazy protocol witness table accessor for type Float and conformance Float();
    unint64_t v25 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v23(&v27, a1, v22, a2, &v28, MEMORY[0x189618620], &type metadata for _CodingKey, v24, v25, v11, v12);
    return swift_unknownObjectRelease();
  }

float specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v26)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void *v29;
  float result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD v48[21];
  uint64_t v6 = v5;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  *(void *)&v48[19] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v5;
  uint64_t v42 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v22;
    *uint64_t v22 = MEMORY[0x189618620];
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }

    else
    {
      uint64_t v44 = v21;
      uint64_t v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      unsigned __int8 v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v34 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      uint64_t v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v21 = v44;
      v37(v36, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v38 = v40;
    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v21);
    swift_willThrow();
  }

  else
  {
    uint64_t v25 = v6[3];
    uint64_t v26 = *(void (**)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 80);
    uint64_t v27 = lazy protocol witness table accessor for type Float and conformance Float();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x189618620], a4, v28, v43, v19, v20);
    swift_unknownObjectRelease();
    if (!v29) {
      return *(float *)v48;
    }
  }

  return result;
}

double specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v26)(void *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void *v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void v48[11];
  uint64_t v6 = v5;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  v48[10] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v5;
  uint64_t v42 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v22;
    *uint64_t v22 = MEMORY[0x189618560];
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }

    else
    {
      uint64_t v44 = v21;
      uint64_t v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      unsigned __int8 v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v34 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      uint64_t v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v21 = v44;
      v37(v36, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v38 = v40;
    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v21);
    swift_willThrow();
  }

  else
  {
    uint64_t v25 = v6[3];
    uint64_t v26 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 80);
    uint64_t v27 = lazy protocol witness table accessor for type Double and conformance Double();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x189618560], a4, v28, v43, v19, v20);
    swift_unknownObjectRelease();
    if (!v29) {
      return *(double *)v48;
    }
  }

  return result;
}

uint64_t specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  unsigned __int8 v32 = a5;
  uint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *__n128 v16 = MEMORY[0x189618740];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x189619368],  v15);
    return swift_willThrow();
  }

  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    uint64_t v26 = lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x189618740], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }

  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  unsigned __int8 v32 = a5;
  uint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *__n128 v16 = MEMORY[0x18961A610];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x189619368],  v15);
    return swift_willThrow();
  }

  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    uint64_t v26 = lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x18961A610], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }

  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  unsigned __int8 v32 = a5;
  uint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *__n128 v16 = MEMORY[0x18961A800];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x189619368],  v15);
    return swift_willThrow();
  }

  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    uint64_t v26 = lazy protocol witness table accessor for type UInt16 and conformance UInt16();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x18961A800], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return (unsigned __int16)v29;
    }
  }

  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  unsigned __int8 v32 = a5;
  uint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *__n128 v16 = MEMORY[0x18961A350];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x189619368],  v15);
    return swift_willThrow();
  }

  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    uint64_t v26 = lazy protocol witness table accessor for type Int8 and conformance Int8();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x18961A350], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }

  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  unsigned __int8 v32 = a5;
  uint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *__n128 v16 = MEMORY[0x18961A408];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x189619368],  v15);
    return swift_willThrow();
  }

  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    uint64_t v26 = lazy protocol witness table accessor for type Int16 and conformance Int16();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x18961A408], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return (unsigned __int16)v29;
    }
  }

  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  unsigned __int8 v32 = a5;
  uint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *__n128 v16 = MEMORY[0x18961A458];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x189619368],  v15);
    return swift_willThrow();
  }

  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    uint64_t v26 = lazy protocol witness table accessor for type Int32 and conformance Int32();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x18961A458], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }

  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  unsigned __int8 v32 = a5;
  uint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *__n128 v16 = MEMORY[0x18961A4C0];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x189619368],  v15);
    return swift_willThrow();
  }

  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    uint64_t v26 = lazy protocol witness table accessor for type Int64 and conformance Int64();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x18961A4C0], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }

  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  unsigned __int8 v32 = a5;
  uint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *__n128 v16 = MEMORY[0x189618CD8];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x189619368],  v15);
    return swift_willThrow();
  }

  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    uint64_t v26 = lazy protocol witness table accessor for type UInt and conformance UInt();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x189618CD8], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }

  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  unsigned __int8 v32 = a5;
  uint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *__n128 v16 = MEMORY[0x18961A860];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x189619368],  v15);
    return swift_willThrow();
  }

  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    uint64_t v26 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x18961A860], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }

  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  unsigned __int8 v32 = a5;
  uint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *__n128 v16 = MEMORY[0x18961A8C8];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x189619368],  v15);
    return swift_willThrow();
  }

  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    uint64_t v26 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x18961A8C8], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }

  return result;
}

uint64_t specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v26)(void *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void v48[11];
  uint64_t v6 = v5;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  v48[10] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v5;
  uint64_t v42 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  char v18 = (char *)&v39 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v22;
    *uint64_t v22 = MEMORY[0x189618740];
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }

    else
    {
      uint64_t v44 = v21;
      uint64_t v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      unsigned __int8 v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v34 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      uint64_t v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v21 = v44;
      v37(v36, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v38 = v40;
    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v21);
    return swift_willThrow();
  }

  else
  {
    uint64_t v25 = v6[3];
    uint64_t v26 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type Int and conformance Int();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x189618740], a4, v28, v43, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v48[0];
    }
  }

  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_BYTE *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE v48[81];
  uint64_t v6 = v5;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  *(void *)&v48[73] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v5;
  uint64_t v42 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  char v18 = (char *)&v39 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v22;
    *uint64_t v22 = MEMORY[0x18961A350];
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }

    else
    {
      uint64_t v44 = v21;
      uint64_t v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      unsigned __int8 v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v34 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      uint64_t v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v21 = v44;
      v37(v36, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v38 = v40;
    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v21);
    return swift_willThrow();
  }

  else
  {
    uint64_t v25 = v6[3];
    uint64_t v26 = *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type Int8 and conformance Int8();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x18961A350], a4, v28, v43, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v48[0];
    }
  }

  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_WORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _WORD v48[41];
  uint64_t v6 = v5;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  *(void *)&v48[37] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v5;
  uint64_t v42 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  char v18 = (char *)&v39 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v22;
    *uint64_t v22 = MEMORY[0x18961A408];
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }

    else
    {
      uint64_t v44 = v21;
      uint64_t v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      unsigned __int8 v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v34 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      uint64_t v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v21 = v44;
      v37(v36, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v38 = v40;
    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v21);
    return swift_willThrow();
  }

  else
  {
    uint64_t v25 = v6[3];
    uint64_t v26 = *(void (**)(_WORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type Int16 and conformance Int16();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x18961A408], a4, v28, v43, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v48[0];
    }
  }

  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD v48[21];
  uint64_t v6 = v5;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  *(void *)&v48[19] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v5;
  uint64_t v42 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  char v18 = (char *)&v39 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v22;
    *uint64_t v22 = MEMORY[0x18961A458];
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }

    else
    {
      uint64_t v44 = v21;
      uint64_t v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      unsigned __int8 v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v34 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      uint64_t v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v21 = v44;
      v37(v36, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v38 = v40;
    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v21);
    return swift_willThrow();
  }

  else
  {
    uint64_t v25 = v6[3];
    uint64_t v26 = *(void (**)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type Int32 and conformance Int32();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x18961A458], a4, v28, v43, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v48[0];
    }
  }

  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(void *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void v48[11];
  uint64_t v6 = v5;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  v48[10] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v5;
  uint64_t v42 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  char v18 = (char *)&v39 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v22;
    *uint64_t v22 = MEMORY[0x18961A4C0];
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }

    else
    {
      uint64_t v44 = v21;
      uint64_t v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      unsigned __int8 v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v34 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      uint64_t v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v21 = v44;
      v37(v36, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v38 = v40;
    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v21);
    return swift_willThrow();
  }

  else
  {
    uint64_t v25 = v6[3];
    uint64_t v26 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type Int64 and conformance Int64();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x18961A4C0], a4, v28, v43, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v48[0];
    }
  }

  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(void *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void v48[11];
  uint64_t v6 = v5;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  v48[10] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v5;
  uint64_t v42 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  char v18 = (char *)&v39 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v22;
    *uint64_t v22 = MEMORY[0x189618CD8];
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }

    else
    {
      uint64_t v44 = v21;
      uint64_t v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      unsigned __int8 v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v34 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      uint64_t v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v21 = v44;
      v37(v36, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v38 = v40;
    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v21);
    return swift_willThrow();
  }

  else
  {
    uint64_t v25 = v6[3];
    uint64_t v26 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type UInt and conformance UInt();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x189618CD8], a4, v28, v43, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v48[0];
    }
  }

  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_BYTE *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE v48[81];
  uint64_t v6 = v5;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  *(void *)&v48[73] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v5;
  uint64_t v42 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  char v18 = (char *)&v39 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v22;
    *uint64_t v22 = MEMORY[0x18961A610];
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }

    else
    {
      uint64_t v44 = v21;
      uint64_t v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      unsigned __int8 v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v34 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      uint64_t v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v21 = v44;
      v37(v36, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v38 = v40;
    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v21);
    return swift_willThrow();
  }

  else
  {
    uint64_t v25 = v6[3];
    uint64_t v26 = *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x18961A610], a4, v28, v43, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v48[0];
    }
  }

  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_WORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _WORD v48[41];
  uint64_t v6 = v5;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  *(void *)&v48[37] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v5;
  uint64_t v42 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  char v18 = (char *)&v39 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v22;
    *uint64_t v22 = MEMORY[0x18961A800];
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }

    else
    {
      uint64_t v44 = v21;
      uint64_t v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      unsigned __int8 v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v34 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      uint64_t v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v21 = v44;
      v37(v36, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v38 = v40;
    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v21);
    return swift_willThrow();
  }

  else
  {
    uint64_t v25 = v6[3];
    uint64_t v26 = *(void (**)(_WORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type UInt16 and conformance UInt16();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x18961A800], a4, v28, v43, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v48[0];
    }
  }

  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD v48[21];
  uint64_t v6 = v5;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  *(void *)&v48[19] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v5;
  uint64_t v42 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  char v18 = (char *)&v39 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v22;
    *uint64_t v22 = MEMORY[0x18961A860];
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }

    else
    {
      uint64_t v44 = v21;
      uint64_t v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      unsigned __int8 v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v34 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      uint64_t v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v21 = v44;
      v37(v36, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v38 = v40;
    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v21);
    return swift_willThrow();
  }

  else
  {
    uint64_t v25 = v6[3];
    uint64_t v26 = *(void (**)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x18961A860], a4, v28, v43, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v48[0];
    }
  }

  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(void *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void v48[11];
  uint64_t v6 = v5;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  v48[10] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v5;
  uint64_t v42 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  char v18 = (char *)&v39 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v22;
    *uint64_t v22 = MEMORY[0x18961A8C8];
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1LL, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }

    else
    {
      uint64_t v44 = v21;
      uint64_t v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      unsigned __int8 v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v34 = v43;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      uint64_t v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v21 = v44;
      v37(v36, a4);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v38 = v40;
    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v38,  *MEMORY[0x189619368],  v21);
    return swift_willThrow();
  }

  else
  {
    uint64_t v25 = v6[3];
    uint64_t v26 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x18961A8C8], a4, v28, v43, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v48[0];
    }
  }

  return result;
}

Swift::Bool __swiftcall _PlistDecoder.decodeNil()()
{
  uint64_t v1 = *(void *)(*v0 + 80LL);
  uint64_t v2 = *(void *)(*v0 + 88LL);
  swift_getAssociatedTypeWitness();
  uint64_t v22 = v1;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v20 - v13;
  uint64_t v15 = v0[2];
  swift_bridgeObjectRetain_n();
  uint64_t v16 = MEMORY[0x186E1BB2C](v15, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v16)
  {
    uint64_t v21 = v2;
    uint64_t v23 = v15;
    uint64_t v17 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618458], v17);
    BidirectionalCollection.last.getter();
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1LL, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v7, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      swift_bridgeObjectRelease();
      char v18 = (*(uint64_t (**)(char *))(v21 + 40))(v14);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
      return v18 & 1;
    }
  }

  else
  {
    __break(1u);
  }

  Swift::Bool result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  __break(1u);
  return result;
}

uint64_t _PlistDecoder.decode(_:)()
{
  uint64_t v2 = *(void *)(*v0 + 80LL);
  uint64_t v1 = *(void *)(*v0 + 88LL);
  swift_getAssociatedTypeWitness();
  uint64_t v23 = v2;
  uint64_t v24 = v1;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v21 - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v22 = v0;
  uint64_t v14 = v0[2];
  swift_bridgeObjectRetain_n();
  uint64_t v15 = MEMORY[0x186E1BB2C](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v25 = v14;
    uint64_t v16 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618458], v16);
    BidirectionalCollection.last.getter();
    uint64_t v15 = v21;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1LL, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v6, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v15);
      swift_bridgeObjectRelease();
      unint64_t v17 = v22[5];
      swift_retain();
      char v18 = specialized _PlistDecoder.unwrapBool<A>(from:for:_:)((uint64_t)v13, v17, 0LL, 0LL, 0LL, 0xFFu, v23, v24);
      swift_release();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
      return v18 & 1;
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v15);
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v2 = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v20 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v19 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v19 - v12;
  uint64_t v21 = v0;
  uint64_t v14 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = MEMORY[0x186E1BB2C](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v19 = v1;
    uint64_t v22 = v14;
    uint64_t v16 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618458], v16);
    BidirectionalCollection.last.getter();
    uint64_t v2 = v20;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1LL, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v6, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v2);
      swift_bridgeObjectRelease();
      unint64_t v17 = *(void *)(v21 + 40);
      swift_retain();
      specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)((uint64_t)v13, v17, 0LL, 0LL, 0LL, 0xFFu);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v2 = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v20 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v19 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v19 - v12;
  uint64_t v21 = v0;
  uint64_t v14 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = MEMORY[0x186E1BB2C](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v19 = v1;
    uint64_t v22 = v14;
    uint64_t v16 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618458], v16);
    BidirectionalCollection.last.getter();
    uint64_t v2 = v20;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1LL, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v6, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v2);
      swift_bridgeObjectRelease();
      unint64_t v17 = *(void *)(v21 + 40);
      swift_retain();
      specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)((uint64_t)v13, v17, 0LL, 0LL, 0LL, 0xFFu);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v19 = v0;
  uint64_t v12 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = MEMORY[0x186E1BB2C](v12, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v13)
  {
    uint64_t v21 = v12;
    uint64_t v14 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618458], v14);
    BidirectionalCollection.last.getter();
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v5, 1LL, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v11, v5, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      swift_bridgeObjectRelease();
      uint64_t v15 = *(void *)(v19 + 40);
      swift_retain();
      uint64_t v16 = specialized _PlistDecoder.unwrapString<A>(from:for:_:)((uint64_t)v11, v15, 0LL, 0LL, 0LL, 0xFFu);
      swift_release();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v11, AssociatedTypeWitness);
      return (uint64_t)v16;
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __break(1u);
  return result;
}

uint64_t _PlistDecoder.decode(_:)(uint64_t (*a1)(char *, uint64_t, void, void, void, uint64_t))
{
  uint64_t v21 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v20 = v1;
  uint64_t v13 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v14 = MEMORY[0x186E1BB2C](v13, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v14)
  {
    uint64_t v22 = v13;
    uint64_t v15 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618458], v15);
    BidirectionalCollection.last.getter();
    uint64_t v14 = v19;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1LL, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v5, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v14);
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(v20 + 40);
      swift_retain();
      uint64_t v17 = v21(v12, v16, 0LL, 0LL, 0LL, 255LL);
      swift_release();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
      return v17;
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v14);
  __break(1u);
  return result;
}

BOOL protocol witness for SingleValueDecodingContainer.decodeNil() in conformance _PlistDecoder<A>()
{
  return _PlistDecoder.decodeNil()();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance _PlistDecoder<A>()
{
  return _PlistDecoder.decode(_:)() & 1;
}

{
  return _PlistDecoder.decode(_:)();
}

{
  return _PlistDecoder.decode(_:)();
}

{
  return _PlistDecoder.decode(_:)();
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, void, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

uint64_t _PlistKeyedDecodingContainer.allKeys.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v50 = *(void *)(v9 - 8);
  uint64_t v51 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v47 - v10;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v48 = (char *)&v47 - v17;
  swift_bridgeObjectRetain();
  _swift_isClassOrObjCExistentialType();
  uint64_t v56 = MEMORY[0x18961AFE8];
  uint64_t v18 = *(void *)(a2 + 64);
  uint64_t v54 = a2 + 64;
  uint64_t v19 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v55 = (unint64_t)(v19 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v23 = 0LL;
  uint64_t v52 = a6;
  uint64_t v53 = a2;
  uint64_t v49 = v15;
  if (v21) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v26 = v23 + 1;
  if (!__OFADD__(v23, 1LL))
  {
    if (v26 < v55)
    {
      unint64_t v27 = *(void *)(v54 + 8 * v26);
      ++v23;
      if (v27) {
        goto LABEL_22;
      }
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v55) {
        goto LABEL_55;
      }
      unint64_t v27 = *(void *)(v54 + 8 * v23);
      if (v27) {
        goto LABEL_22;
      }
      int64_t v23 = v26 + 2;
      if (v26 + 2 >= v55) {
        goto LABEL_55;
      }
      unint64_t v27 = *(void *)(v54 + 8 * v23);
      if (v27) {
        goto LABEL_22;
      }
      int64_t v23 = v26 + 3;
      if (v26 + 3 >= v55) {
        goto LABEL_55;
      }
      unint64_t v27 = *(void *)(v54 + 8 * v23);
      if (v27)
      {
LABEL_22:
        unint64_t v21 = (v27 - 1) & v27;
        for (unint64_t i = __clz(__rbit64(v27)) + (v23 << 6); ; unint64_t i = v24 | (v23 << 6))
        {
          uint64_t v29 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
          uint64_t v30 = *v29;
          uint64_t v31 = v29[1];
          swift_bridgeObjectRetain();
          MEMORY[0x186E1D188](v30, v31, a4, a6);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1LL, a4) == 1)
          {
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v11, v51);
            if (!v21) {
              goto LABEL_7;
            }
            goto LABEL_6;
          }

          unsigned __int8 v32 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
          uint64_t v33 = v48;
          v32(v48, v11, a4);
          v32(v15, v33, a4);
          char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
          uint64_t v35 = v56;
          if ((isClassOrObjCExistentialType & 1) != 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_bridgeObject() & 1) != 0
              && ((_swift_isClassOrObjCExistentialType() & 1) == 0
               || (v35 & 0x8000000000000000LL) == 0 && (v35 & 0x4000000000000000LL) == 0))
            {
              goto LABEL_38;
            }
          }

          else if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            goto LABEL_38;
          }

          if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v35 < 0 || (v35 & 0x4000000000000000LL) != 0))
          {
            specialized _ArrayBuffer._nonNative.getter(v35);
            swift_unknownObjectRetain();
            uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
            swift_unknownObjectRelease();
          }

          else
          {
            char v36 = _swift_isClassOrObjCExistentialType();
            uint64_t v37 = v35 & 0xFFFFFFFFFFFFF8LL;
            if ((v36 & 1) == 0) {
              uint64_t v37 = v35;
            }
            uint64_t v38 = *(void *)(v37 + 16);
          }

          uint64_t v35 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38 + 1, 1, v35, a4);
          uint64_t v56 = v35;
LABEL_38:
          if ((_swift_isClassOrObjCExistentialType() & 1) != 0) {
            uint64_t v39 = v35 & 0xFFFFFFFFFFFFFF8LL;
          }
          else {
            uint64_t v39 = v35;
          }
          uint64_t v40 = *(void *)(v39 + 16);
          if ((_swift_isClassOrObjCExistentialType() & 1) != 0) {
            uint64_t v41 = v35 & 0xFFFFFFFFFFFFFF8LL;
          }
          else {
            uint64_t v41 = v35;
          }
          unint64_t v42 = *(void *)(v41 + 24);
          uint64_t v43 = v40 + 1;
          if (v40 + 1 > (uint64_t)(v42 >> 1))
          {
            Swift::Bool v46 = v42 > 1;
            type metadata accessor for Array();
            Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46, v40 + 1, 1);
            uint64_t v35 = v56;
          }

          if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
          {
            uint64_t v44 = v35 & 0xFFFFFFFFFFFFFF8LL;
            *(void *)((v35 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v43;
          }

          else
          {
            *(void *)(v35 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v43;
            uint64_t v44 = v35 & 0xFFFFFFFFFFFFFF8LL;
          }

          if ((_swift_isClassOrObjCExistentialType() & 1) != 0) {
            uint64_t v45 = v44;
          }
          else {
            uint64_t v45 = v35;
          }
          uint64_t v15 = v49;
          uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v32)( v45 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
                   + *(void *)(v12 + 72) * v40,
                     v49,
                     a4);
          uint64_t v56 = v35;
          a6 = v52;
          a2 = v53;
          if (!v21) {
            goto LABEL_7;
          }
LABEL_6:
          unint64_t v24 = __clz(__rbit64(v21));
          v21 &= v21 - 1;
        }
      }

      int64_t v28 = v26 + 4;
      if (v28 < v55)
      {
        unint64_t v27 = *(void *)(v54 + 8 * v28);
        if (v27)
        {
          int64_t v23 = v28;
          goto LABEL_22;
        }

        while (1)
        {
          int64_t v23 = v28 + 1;
          if (__OFADD__(v28, 1LL)) {
            goto LABEL_57;
          }
          if (v23 >= v55) {
            break;
          }
          unint64_t v27 = *(void *)(v54 + 8 * v23);
          ++v28;
          if (v27) {
            goto LABEL_22;
          }
        }
      }
    }

BOOL _PlistKeyedDecodingContainer.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a3 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10), (v12 & 1) != 0))
  {
    uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))( v8,  *(void *)(a3 + 56) + *(void *)(v13 + 72) * v11,  AssociatedTypeWitness);
    uint64_t v14 = 0LL;
  }

  else
  {
    uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v14 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v8, v14, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  BOOL v15 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1LL, AssociatedTypeWitness) != 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v15;
}

uint64_t specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X7>, uint64_t *a5@<X8>, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a7);
  uint64_t v29 = v13;
  __swift_instantiateConcreteTypeFromMangledName(a8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainerProtocol);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
    unint64_t v27 = 0LL;
    unint64_t v28 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(64LL);
    unint64_t v14 = 0xD00000000000003DLL;
    BOOL v15 = "Cannot get nested keyed container -- no value found for key ";
  }

  else
  {
    uint64_t v29 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    if ((swift_dynamicCast() & 1) == 0)
    {
      _StringGuts.grow(_:)(39LL);
      swift_bridgeObjectRelease();
      unint64_t v27 = 0xD00000000000001DLL;
      unint64_t v28 = 0x80000001839D1B70LL;
      v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = 2238496LL;
      v21._object = (void *)0xE300000000000000LL;
      String.append(_:)(v21);
      v22._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      uint64_t v18 = 3025186LL;
      unint64_t v19 = 0xE300000000000000LL;
      goto LABEL_7;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
    unint64_t v27 = 0LL;
    unint64_t v28 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(66LL);
    unint64_t v14 = 0xD00000000000003FLL;
    BOOL v15 = "Cannot get nested unkeyed container -- no value found for key ";
  }

  unint64_t v16 = (unint64_t)(v15 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&v14);
  v17._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = 34LL;
  unint64_t v19 = 0xE100000000000000LL;
LABEL_7:
  String.append(_:)(*(Swift::String *)&v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
  a5[3] = a3;
  a5[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))(boxed_opaque_existential_1, a1, a3);
  _CodingPathNode.path.getter(a2);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v24 = *MEMORY[0x189619350];
  uint64_t v25 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104LL))(a5, v24, v25);
}

uint64_t _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X7>, uint64_t *a5@<X8>, uint64_t a6)
{
  uint64_t v26 = a4;
  swift_getMetatypeMetadata();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainerProtocol);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    unint64_t v24 = 0LL;
    unint64_t v25 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(64LL);
    unint64_t v11 = 0xD00000000000003DLL;
    char v12 = "Cannot get nested keyed container -- no value found for key ";
  }

  else
  {
    uint64_t v26 = a4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    if (!swift_dynamicCast())
    {
      _StringGuts.grow(_:)(39LL);
      swift_bridgeObjectRelease();
      unint64_t v24 = 0xD00000000000001DLL;
      unint64_t v25 = 0x80000001839D1B70LL;
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 2238496LL;
      v18._object = (void *)0xE300000000000000LL;
      String.append(_:)(v18);
      v19._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      uint64_t v15 = 3025186LL;
      unint64_t v16 = 0xE300000000000000LL;
      goto LABEL_7;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    unint64_t v24 = 0LL;
    unint64_t v25 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(66LL);
    unint64_t v11 = 0xD00000000000003FLL;
    char v12 = "Cannot get nested unkeyed container -- no value found for key ";
  }

  unint64_t v13 = (unint64_t)(v12 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&v11);
  v14._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = 34LL;
  unint64_t v16 = 0xE100000000000000LL;
LABEL_7:
  String.append(_:)(*(Swift::String *)&v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
  a5[3] = a3;
  a5[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))(boxed_opaque_existential_1, a1, a3);
  _CodingPathNode.path.getter(a2);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v21 = *MEMORY[0x189619350];
  uint64_t v22 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104LL))(a5, v21, v22);
}

uint64_t _PlistKeyedDecodingContainer.decodeNil(forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v49 = a4;
  uint64_t v55 = a3;
  uint64_t v54 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v52 = a8;
  uint64_t v53 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v42 = *(void *)(v15 - 8);
  uint64_t v43 = v15;
  MEMORY[0x1895F8858](v15);
  Swift::String v17 = (char *)&v39 - v16;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v45 = (char *)&v39 - v20;
  uint64_t v46 = AssociatedConformanceWitness;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(v21 - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v44 = (char *)&v39 - v22;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v47 = a1;
  uint64_t v50 = a5;
  uint64_t v51 = a7;
  uint64_t v23 = v55;
  uint64_t v24 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25), (v27 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))( v17,  *(void *)(v23 + 56) + *(void *)(v18 + 72) * v26,  AssociatedTypeWitness);
    uint64_t v28 = 0LL;
  }

  else
  {
    uint64_t v28 = 1LL;
  }

  uint64_t v29 = v54;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, v28, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v17, v43);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v47,  v49,  v50,  v51,  v30,  v52,  &demangling cache variable for type metadata for Any?.Type,  &demangling cache variable for type metadata for Any?.Type.Type);
    swift_willThrow();
  }

  else
  {
    uint64_t v31 = v21;
    unsigned __int8 v32 = v45;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v45, v17, AssociatedTypeWitness);
    uint64_t v29 = *(void *)(v29 + 24);
    uint64_t v33 = v46;
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 80);
    swift_unknownObjectRetain();
    uint64_t v35 = swift_checkMetadataState();
    char v36 = v44;
    uint64_t v37 = v48;
    v34(v32, v35, v33);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v32, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v37)
    {
      LOBYTE(v29) = (*(uint64_t (**)(char *))(v52 + 40))(v36);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v31);
    }
  }

  return v29 & 1;
}

uint64_t _PlistKeyedDecodingContainer.decode(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v60 = a7;
  unint64_t v54 = a4;
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v12 - 8);
  uint64_t v47 = v12;
  MEMORY[0x1895F8858](v12);
  uint64_t v45 = (char *)&v42 - v13;
  swift_getAssociatedTypeWitness();
  uint64_t v55 = a8;
  uint64_t v57 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v16 - 8);
  uint64_t v49 = v16;
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v42 - v17;
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)&v42 - v21;
  uint64_t v50 = AssociatedConformanceWitness;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(v23 - 8);
  uint64_t v44 = v23;
  MEMORY[0x1895F8858](v23);
  uint64_t v51 = (char *)&v42 - v24;
  uint64_t v53 = a1;
  uint64_t v56 = a5;
  uint64_t v25 = v59;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  LOBYTE(v28) = v27;
  if (*(void *)(v25 + 16) && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v30 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))( v18,  *(void *)(v25 + 56) + *(void *)(v19 + 72) * v29,  AssociatedTypeWitness);
    uint64_t v31 = 0LL;
  }

  else
  {
    uint64_t v31 = 1LL;
  }

  unsigned __int8 v32 = v22;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v18, v31, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v49);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v53,  v54,  v56,  v60,  v33,  v55,  &demangling cache variable for type metadata for Bool.Type,  &demangling cache variable for type metadata for Bool.Type.Type);
    swift_willThrow();
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v18, AssociatedTypeWitness);
    uint64_t v28 = *(void *)(v58 + 24);
    uint64_t v34 = v50;
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 80);
    swift_unknownObjectRetain();
    uint64_t v36 = swift_checkMetadataState();
    uint64_t v38 = (uint64_t)v51;
    uint64_t v37 = v52;
    v35(v32, v36, v34);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v32, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v37)
    {
      uint64_t v39 = v56;
      uint64_t v28 = *(void *)(v56 - 8);
      uint64_t v40 = (uint64_t)v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v45, v53, v56);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v40, 0LL, 1LL, v39);
      LOBYTE(v28) = specialized _PlistDecoder.unwrapBool<A>(from:for:_:)(v38, v54, v40, v57, v39, v55, v60);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v40, v47);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v38, v44);
    }
  }

  return v28 & 1;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v55 = a4;
  uint64_t v59 = a3;
  uint64_t v58 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t v52 = a8;
  uint64_t v53 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v17 - 8);
  uint64_t v48 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v49 = (char *)&v41 - v22;
  uint64_t v23 = v59;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v24 - 8);
  uint64_t v43 = v24;
  MEMORY[0x1895F8858](v24);
  uint64_t v50 = (char *)&v41 - v25;
  unint64_t v54 = a1;
  uint64_t v56 = a5;
  uint64_t v57 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))( v19,  *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28,  AssociatedTypeWitness);
    char v30 = 0LL;
  }

  else
  {
    char v30 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v54,  v55,  v56,  v57,  v31,  v52,  &demangling cache variable for type metadata for Int.Type,  &demangling cache variable for type metadata for Int.Type.Type);
    swift_willThrow();
  }

  else
  {
    unsigned __int8 v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    uint64_t v23 = *(void *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = v32;
    uint64_t v34 = swift_checkMetadataState();
    uint64_t v36 = (uint64_t)v50;
    uint64_t v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      uint64_t v37 = v56;
      uint64_t v38 = *(void *)(v56 - 8);
      uint64_t v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, v37);
      uint64_t v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }

  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v55 = a4;
  uint64_t v59 = a3;
  uint64_t v58 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t v52 = a8;
  uint64_t v53 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v17 - 8);
  uint64_t v48 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v49 = (char *)&v41 - v22;
  uint64_t v23 = v59;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v24 - 8);
  uint64_t v43 = v24;
  MEMORY[0x1895F8858](v24);
  uint64_t v50 = (char *)&v41 - v25;
  unint64_t v54 = a1;
  uint64_t v56 = a5;
  uint64_t v57 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))( v19,  *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28,  AssociatedTypeWitness);
    char v30 = 0LL;
  }

  else
  {
    char v30 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v54,  v55,  v56,  v57,  v31,  v52,  &demangling cache variable for type metadata for Int8.Type,  &demangling cache variable for type metadata for Int8.Type.Type);
    swift_willThrow();
  }

  else
  {
    unsigned __int8 v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    uint64_t v23 = *(void *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = v32;
    uint64_t v34 = swift_checkMetadataState();
    uint64_t v36 = (uint64_t)v50;
    uint64_t v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      uint64_t v37 = v56;
      uint64_t v38 = *(void *)(v56 - 8);
      uint64_t v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, v37);
      uint64_t v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }

  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v55 = a4;
  uint64_t v59 = a3;
  uint64_t v58 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t v52 = a8;
  uint64_t v53 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v17 - 8);
  uint64_t v48 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v49 = (char *)&v41 - v22;
  uint64_t v23 = v59;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v24 - 8);
  uint64_t v43 = v24;
  MEMORY[0x1895F8858](v24);
  uint64_t v50 = (char *)&v41 - v25;
  unint64_t v54 = a1;
  uint64_t v56 = a5;
  uint64_t v57 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))( v19,  *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28,  AssociatedTypeWitness);
    char v30 = 0LL;
  }

  else
  {
    char v30 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v54,  v55,  v56,  v57,  v31,  v52,  &demangling cache variable for type metadata for Int16.Type,  &demangling cache variable for type metadata for Int16.Type.Type);
    swift_willThrow();
  }

  else
  {
    unsigned __int8 v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    uint64_t v23 = *(void *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = v32;
    uint64_t v34 = swift_checkMetadataState();
    uint64_t v36 = (uint64_t)v50;
    uint64_t v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      uint64_t v37 = v56;
      uint64_t v38 = *(void *)(v56 - 8);
      uint64_t v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, v37);
      uint64_t v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }

  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v55 = a4;
  uint64_t v59 = a3;
  uint64_t v58 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t v52 = a8;
  uint64_t v53 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v17 - 8);
  uint64_t v48 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v49 = (char *)&v41 - v22;
  uint64_t v23 = v59;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v24 - 8);
  uint64_t v43 = v24;
  MEMORY[0x1895F8858](v24);
  uint64_t v50 = (char *)&v41 - v25;
  unint64_t v54 = a1;
  uint64_t v56 = a5;
  uint64_t v57 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))( v19,  *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28,  AssociatedTypeWitness);
    char v30 = 0LL;
  }

  else
  {
    char v30 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v54,  v55,  v56,  v57,  v31,  v52,  &demangling cache variable for type metadata for Int32.Type,  &demangling cache variable for type metadata for Int32.Type.Type);
    swift_willThrow();
  }

  else
  {
    unsigned __int8 v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    uint64_t v23 = *(void *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = v32;
    uint64_t v34 = swift_checkMetadataState();
    uint64_t v36 = (uint64_t)v50;
    uint64_t v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      uint64_t v37 = v56;
      uint64_t v38 = *(void *)(v56 - 8);
      uint64_t v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, v37);
      uint64_t v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }

  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v55 = a4;
  uint64_t v59 = a3;
  uint64_t v58 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t v52 = a8;
  uint64_t v53 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v17 - 8);
  uint64_t v48 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v49 = (char *)&v41 - v22;
  uint64_t v23 = v59;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v24 - 8);
  uint64_t v43 = v24;
  MEMORY[0x1895F8858](v24);
  uint64_t v50 = (char *)&v41 - v25;
  unint64_t v54 = a1;
  uint64_t v56 = a5;
  uint64_t v57 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))( v19,  *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28,  AssociatedTypeWitness);
    char v30 = 0LL;
  }

  else
  {
    char v30 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v54,  v55,  v56,  v57,  v31,  v52,  &demangling cache variable for type metadata for Int64.Type,  &demangling cache variable for type metadata for Int64.Type.Type);
    swift_willThrow();
  }

  else
  {
    unsigned __int8 v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    uint64_t v23 = *(void *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = v32;
    uint64_t v34 = swift_checkMetadataState();
    uint64_t v36 = (uint64_t)v50;
    uint64_t v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      uint64_t v37 = v56;
      uint64_t v38 = *(void *)(v56 - 8);
      uint64_t v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, v37);
      uint64_t v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }

  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v55 = a4;
  uint64_t v59 = a3;
  uint64_t v58 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t v52 = a8;
  uint64_t v53 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v17 - 8);
  uint64_t v48 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v49 = (char *)&v41 - v22;
  uint64_t v23 = v59;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v24 - 8);
  uint64_t v43 = v24;
  MEMORY[0x1895F8858](v24);
  uint64_t v50 = (char *)&v41 - v25;
  unint64_t v54 = a1;
  uint64_t v56 = a5;
  uint64_t v57 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))( v19,  *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28,  AssociatedTypeWitness);
    char v30 = 0LL;
  }

  else
  {
    char v30 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v54,  v55,  v56,  v57,  v31,  v52,  &demangling cache variable for type metadata for UInt.Type,  &demangling cache variable for type metadata for UInt.Type.Type);
    swift_willThrow();
  }

  else
  {
    unsigned __int8 v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    uint64_t v23 = *(void *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = v32;
    uint64_t v34 = swift_checkMetadataState();
    uint64_t v36 = (uint64_t)v50;
    uint64_t v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      uint64_t v37 = v56;
      uint64_t v38 = *(void *)(v56 - 8);
      uint64_t v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, v37);
      uint64_t v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }

  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v55 = a4;
  uint64_t v59 = a3;
  uint64_t v58 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t v52 = a8;
  uint64_t v53 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v17 - 8);
  uint64_t v48 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v49 = (char *)&v41 - v22;
  uint64_t v23 = v59;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v24 - 8);
  uint64_t v43 = v24;
  MEMORY[0x1895F8858](v24);
  uint64_t v50 = (char *)&v41 - v25;
  unint64_t v54 = a1;
  uint64_t v56 = a5;
  uint64_t v57 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))( v19,  *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28,  AssociatedTypeWitness);
    char v30 = 0LL;
  }

  else
  {
    char v30 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v54,  v55,  v56,  v57,  v31,  v52,  &demangling cache variable for type metadata for UInt8.Type,  &demangling cache variable for type metadata for UInt8.Type.Type);
    swift_willThrow();
  }

  else
  {
    unsigned __int8 v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    uint64_t v23 = *(void *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = v32;
    uint64_t v34 = swift_checkMetadataState();
    uint64_t v36 = (uint64_t)v50;
    uint64_t v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      uint64_t v37 = v56;
      uint64_t v38 = *(void *)(v56 - 8);
      uint64_t v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, v37);
      uint64_t v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }

  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v55 = a4;
  uint64_t v59 = a3;
  uint64_t v58 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t v52 = a8;
  uint64_t v53 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v17 - 8);
  uint64_t v48 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v49 = (char *)&v41 - v22;
  uint64_t v23 = v59;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v24 - 8);
  uint64_t v43 = v24;
  MEMORY[0x1895F8858](v24);
  uint64_t v50 = (char *)&v41 - v25;
  unint64_t v54 = a1;
  uint64_t v56 = a5;
  uint64_t v57 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))( v19,  *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28,  AssociatedTypeWitness);
    char v30 = 0LL;
  }

  else
  {
    char v30 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v54,  v55,  v56,  v57,  v31,  v52,  &demangling cache variable for type metadata for UInt16.Type,  &demangling cache variable for type metadata for UInt16.Type.Type);
    swift_willThrow();
  }

  else
  {
    unsigned __int8 v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    uint64_t v23 = *(void *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = v32;
    uint64_t v34 = swift_checkMetadataState();
    uint64_t v36 = (uint64_t)v50;
    uint64_t v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      uint64_t v37 = v56;
      uint64_t v38 = *(void *)(v56 - 8);
      uint64_t v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, v37);
      uint64_t v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }

  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v55 = a4;
  uint64_t v59 = a3;
  uint64_t v58 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t v52 = a8;
  uint64_t v53 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v17 - 8);
  uint64_t v48 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v49 = (char *)&v41 - v22;
  uint64_t v23 = v59;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v24 - 8);
  uint64_t v43 = v24;
  MEMORY[0x1895F8858](v24);
  uint64_t v50 = (char *)&v41 - v25;
  unint64_t v54 = a1;
  uint64_t v56 = a5;
  uint64_t v57 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))( v19,  *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28,  AssociatedTypeWitness);
    char v30 = 0LL;
  }

  else
  {
    char v30 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v54,  v55,  v56,  v57,  v31,  v52,  &demangling cache variable for type metadata for UInt32.Type,  &demangling cache variable for type metadata for UInt32.Type.Type);
    swift_willThrow();
  }

  else
  {
    unsigned __int8 v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    uint64_t v23 = *(void *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = v32;
    uint64_t v34 = swift_checkMetadataState();
    uint64_t v36 = (uint64_t)v50;
    uint64_t v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      uint64_t v37 = v56;
      uint64_t v38 = *(void *)(v56 - 8);
      uint64_t v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, v37);
      uint64_t v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }

  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v55 = a4;
  uint64_t v59 = a3;
  uint64_t v58 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t v52 = a8;
  uint64_t v53 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v17 - 8);
  uint64_t v48 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v49 = (char *)&v41 - v22;
  uint64_t v23 = v59;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v24 - 8);
  uint64_t v43 = v24;
  MEMORY[0x1895F8858](v24);
  uint64_t v50 = (char *)&v41 - v25;
  unint64_t v54 = a1;
  uint64_t v56 = a5;
  uint64_t v57 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v23 + 16) && (uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))( v19,  *(void *)(v23 + 56) + *(void *)(v20 + 72) * v28,  AssociatedTypeWitness);
    char v30 = 0LL;
  }

  else
  {
    char v30 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v54,  v55,  v56,  v57,  v31,  v52,  &demangling cache variable for type metadata for UInt64.Type,  &demangling cache variable for type metadata for UInt64.Type.Type);
    swift_willThrow();
  }

  else
  {
    unsigned __int8 v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    uint64_t v23 = *(void *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = v32;
    uint64_t v34 = swift_checkMetadataState();
    uint64_t v36 = (uint64_t)v50;
    uint64_t v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      uint64_t v37 = v56;
      uint64_t v38 = *(void *)(v56 - 8);
      uint64_t v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, v37);
      uint64_t v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }

  return v23;
}

float _PlistKeyedDecodingContainer.decode(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v56 = a4;
  uint64_t v59 = a2;
  uint64_t v60 = a3;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v14 - 8);
  uint64_t v47 = v14;
  MEMORY[0x1895F8858](v14);
  uint64_t v45 = (char *)&v43 - v15;
  swift_getAssociatedTypeWitness();
  uint64_t v53 = a8;
  uint64_t v54 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v18 - 8);
  uint64_t v49 = v18;
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v43 - v19;
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v22);
  uint64_t v50 = (char *)&v43 - v23;
  uint64_t v24 = v60;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(v25 - 8);
  uint64_t v44 = v25;
  MEMORY[0x1895F8858](v25);
  uint64_t v51 = (char *)&v43 - v26;
  uint64_t v55 = a1;
  uint64_t v57 = a5;
  uint64_t v58 = a7;
  uint64_t v27 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v24 + 16) && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28), (v30 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))( v20,  *(void *)(v24 + 56) + *(void *)(v21 + 72) * v29,  AssociatedTypeWitness);
    uint64_t v31 = 0LL;
  }

  else
  {
    uint64_t v31 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v20, v31, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v49);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v55,  v56,  v57,  v58,  v32,  v53,  &demangling cache variable for type metadata for Float.Type,  &demangling cache variable for type metadata for Float.Type.Type);
    swift_willThrow();
  }

  else
  {
    uint64_t v33 = v50;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v50, v20, AssociatedTypeWitness);
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v35 = v33;
    uint64_t v36 = swift_checkMetadataState();
    uint64_t v38 = (uint64_t)v51;
    uint64_t v37 = v52;
    v34(v35, v36, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v35, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v37)
    {
      uint64_t v39 = v57;
      uint64_t v40 = *(void *)(v57 - 8);
      uint64_t v41 = (uint64_t)v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v45, v55, v57);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v41, 0LL, 1LL, v39);
      float v8 = specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(v38, v56, v41, v39, v58);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v41, v47);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v38, v44);
    }
  }

  return v8;
}

double _PlistKeyedDecodingContainer.decode(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v56 = a4;
  uint64_t v59 = a2;
  uint64_t v60 = a3;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v14 - 8);
  uint64_t v47 = v14;
  MEMORY[0x1895F8858](v14);
  uint64_t v45 = (char *)&v43 - v15;
  swift_getAssociatedTypeWitness();
  uint64_t v53 = a8;
  uint64_t v54 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v18 - 8);
  uint64_t v49 = v18;
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v43 - v19;
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v22);
  uint64_t v50 = (char *)&v43 - v23;
  uint64_t v24 = v60;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(v25 - 8);
  uint64_t v44 = v25;
  MEMORY[0x1895F8858](v25);
  uint64_t v51 = (char *)&v43 - v26;
  uint64_t v55 = a1;
  uint64_t v57 = a5;
  uint64_t v58 = a7;
  uint64_t v27 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v24 + 16) && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28), (v30 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))( v20,  *(void *)(v24 + 56) + *(void *)(v21 + 72) * v29,  AssociatedTypeWitness);
    uint64_t v31 = 0LL;
  }

  else
  {
    uint64_t v31 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v20, v31, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v49);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v55,  v56,  v57,  v58,  v32,  v53,  &demangling cache variable for type metadata for Double.Type,  &demangling cache variable for type metadata for Double.Type.Type);
    swift_willThrow();
  }

  else
  {
    uint64_t v33 = v50;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v50, v20, AssociatedTypeWitness);
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v35 = v33;
    uint64_t v36 = swift_checkMetadataState();
    uint64_t v38 = (uint64_t)v51;
    uint64_t v37 = v52;
    v34(v35, v36, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v35, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v37)
    {
      uint64_t v39 = v57;
      uint64_t v40 = *(void *)(v57 - 8);
      uint64_t v41 = (uint64_t)v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v45, v55, v57);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v41, 0LL, 1LL, v39);
      double v8 = specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(v38, v56, v41, v39, v58);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v41, v47);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v38, v44);
    }
  }

  return v8;
}

void (*_PlistKeyedDecodingContainer.decode(_:forKey:)( uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t), unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(char *, uint64_t, uint64_t)
{
  unint64_t v55 = a4;
  uint64_t v59 = a3;
  uint64_t v58 = a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t v52 = a8;
  uint64_t v53 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v17 - 8);
  uint64_t v48 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v49 = (char *)&v41 - v22;
  uint64_t v23 = v59;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v24 - 8);
  uint64_t v43 = v24;
  MEMORY[0x1895F8858](v24);
  uint64_t v50 = (char *)&v41 - v25;
  uint64_t v54 = a1;
  uint64_t v56 = a5;
  uint64_t v57 = a7;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*((void *)v23 + 2) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))( v19,  *((void *)v23 + 7) + *(void *)(v20 + 72) * v28,  AssociatedTypeWitness);
    uint64_t v30 = 0LL;
  }

  else
  {
    uint64_t v30 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v54,  v55,  v56,  v57,  v31,  v52,  &demangling cache variable for type metadata for String.Type,  (uint64_t *)&demangling cache variable for type metadata for String.Type.Type);
    swift_willThrow();
  }

  else
  {
    unsigned __int8 v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v33 = v32;
    uint64_t v34 = swift_checkMetadataState();
    uint64_t v36 = (uint64_t)v50;
    uint64_t v35 = v51;
    v23(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      uint64_t v37 = v56;
      uint64_t v38 = *(void *)(v56 - 8);
      uint64_t v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, v37);
      uint64_t v23 = (void (*)(char *, uint64_t, uint64_t))_PlistDecoder.unwrapString<A>(from:for:_:)( v36,  v55,  v39,  v37,  v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }

  return v23;
}

uint64_t _PlistKeyedDecodingContainer.decode<A>(_:forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v56 = a3;
  uint64_t v59 = a7;
  unint64_t v60 = a5;
  uint64_t v62 = a4;
  uint64_t v46 = a8;
  uint64_t v47 = a1;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v49 = *(void *)(v13 - 8);
  uint64_t v50 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v48 = (char *)&v43 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v51 = *(void *)(v17 - 8);
  uint64_t v52 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v43 - v18;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v53 = (char *)&v43 - v22;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v44 = *(void *)(v23 - 8);
  uint64_t v45 = v23;
  MEMORY[0x1895F8858](v23);
  uint64_t v54 = (char *)&v43 - v24;
  uint64_t v57 = a2;
  uint64_t v58 = a9;
  uint64_t v25 = v62;
  uint64_t v61 = a6;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v25 + 16) && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))( v19,  *(void *)(v25 + 56) + *(void *)(v20 + 72) * v28,  AssociatedTypeWitness);
    uint64_t v30 = 0LL;
  }

  else
  {
    uint64_t v30 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v52);
    type metadata accessor for DecodingError();
    swift_allocError();
    unsigned __int8 v32 = v31;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v57, v60, v61, MetatypeMetadata, v32, v58);
    return swift_willThrow();
  }

  else
  {
    uint64_t v35 = v53;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v53, v19, AssociatedTypeWitness);
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v37 = swift_checkMetadataState();
    uint64_t v39 = (uint64_t)v54;
    uint64_t v38 = v55;
    v36(v35, v37, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v35, AssociatedTypeWitness);
    if (v38)
    {
      return swift_unknownObjectRelease();
    }

    else
    {
      swift_unknownObjectRelease();
      uint64_t v40 = v61;
      uint64_t v41 = *(void *)(v61 - 8);
      uint64_t v42 = (uint64_t)v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v48, v57, v61);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v42, 0LL, 1LL, v40);
      _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)(v39, v60, v42, v59, v40, a11, v58, v46);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v42, v50);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v39, v45);
    }
  }

void _PlistKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  v25[6] = a8;
  uint64_t v36 = a5;
  uint64_t v37 = a3;
  uint64_t v45 = a4;
  uint64_t v40 = a2;
  void v25[5] = a1;
  v25[4] = a9;
  uint64_t v39 = a10;
  uint64_t v28 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  v25[1] = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v30 = *(void *)(v14 - 8);
  uint64_t v31 = v14;
  MEMORY[0x1895F8858](v14);
  uint64_t v27 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  char v29 = (char *)v25 - v17;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v32 = *(void *)(v19 - 8);
  uint64_t v33 = v19;
  MEMORY[0x1895F8858](v19);
  MEMORY[0x1895F8858](v20);
  uint64_t v34 = AssociatedConformanceWitness;
  uint64_t v35 = (char *)v25 - v21;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  _OWORD v25[3] = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  v25[2] = (char *)v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v23);
  uint64_t v38 = (char *)v25 - v24;
  uint64_t v41 = a6;
  uint64_t v42 = a7;
  uint64_t v43 = v39;
  uint64_t v44 = a11;
  type metadata accessor for _PlistKeyedDecodingContainer();
}

uint64_t sub_1833D0F3C(uint64_t a1)
{
  *(void *)(v6 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
  uint64_t v7 = *(void *)(v6 - 128);
  *(void *)(v6 - 152) = v5;
  uint64_t v8 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v10 = *(void *)(v6 - 72);
  if (*(void *)(v10 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9), (v12 & 1) != 0))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16))( v4,  *(void *)(v10 + 56) + *(void *)(v3 + 72) * v11,  v2);
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v13 = 1LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v4, v13, 1LL, v2);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1LL, v2) == 1)
  {
    (*(void (**)(uint64_t, void))(*(void *)(v6 - 208) + 8LL))(v4, *(void *)(v6 - 200));
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v7,  *(void *)(v6 - 168),  *(void *)(v6 - 152),  MetatypeMetadata,  v15,  v1);
    return swift_willThrow();
  }

  uint64_t v18 = *(void *)(v6 - 184);
  (*(void (**)(void))(v3 + 32))();
  uint64_t v19 = *(void *)(v6 - 192);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 80);
  swift_unknownObjectRetain();
  uint64_t v21 = swift_checkMetadataState();
  uint64_t v22 = *(void *)(v6 - 176);
  v20(v18, v21, v19);
  if (v22)
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v18, v2);
    return swift_unknownObjectRelease();
  }

  uint64_t v23 = v18;
  uint64_t v24 = v1;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v23, v2);
  swift_unknownObjectRelease();
  uint64_t v25 = *(void *)(v6 - 248);
  uint64_t v26 = *(void *)(v6 - 240);
  uint64_t v27 = *(void *)(v6 - 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v26, v7, v27);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v26, 0LL, 1LL, v27);
  uint64_t v29 = *(void *)(v6 - 232);
  uint64_t v28 = *(void *)(v6 - 224);
  uint64_t v30 = *(void *)(v6 - 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v30, v26, v28);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v30, 1LL, v27) == 1)
  {
    uint64_t v31 = *(void *)(v6 - 296);
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v32(v26, v28);
    v32(v30, v28);
    uint64_t v33 = *(uint64_t **)(v6 - 168);
    swift_retain();
    uint64_t v36 = *(void *)(v6 - 264);
    uint64_t v37 = *(void *)(v6 - 160);
    goto LABEL_17;
  }

  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32);
  uint64_t v39 = *(void *)(v6 - 312);
  v38(v39, v30, v27);
  uint64_t v40 = v26;
  uint64_t v33 = (uint64_t *)swift_allocObject();
  v33[5] = v27;
  v33[6] = v24;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33 + 2);
  v38((uint64_t)boxed_opaque_existential_1, v39, v27);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v40, v28);
  unint64_t v42 = *(void *)(v6 - 168);
  uint64_t v37 = *(void *)(v6 - 160);
  v33[7] = v42;
  uint64_t v36 = *(void *)(v6 - 264);
  if (!(v42 >> 62))
  {
    uint64_t v43 = (uint64_t *)(v42 + 64);
LABEL_15:
    uint64_t v44 = *v43;
    uint64_t result = swift_retain();
    uint64_t v45 = v44 + 1;
    if (__OFADD__(v44, 1LL))
    {
      __break(1u);
      goto LABEL_21;
    }

    goto LABEL_16;
  }

  if (v42 >> 62 == 1)
  {
    uint64_t v43 = (uint64_t *)((v42 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_15;
  }

  uint64_t v45 = 1LL;
LABEL_16:
  uint64_t v31 = *(void *)(v6 - 296);
  v33[8] = v45;
LABEL_17:
  uint64_t v46 = *(void *)(v6 + 32);
  uint64_t v47 = *(void *)(v37 + 40);
  *(void *)(v37 + 40) = v33;
  uint64_t v48 = type metadata accessor for _PlistDecodingStorage(0LL, v36, v34, v35);
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(*(void *)(v6 - 144), v48);
  _PlistDecoder.container<A>(keyedBy:)(*(void *)(v6 - 280), *(void *)(v6 - 272), v46, *(void *)(v6 - 288));
  *(void *)(v37 + 40) = v47;
  swift_retain();
  swift_release();
  uint64_t v49 = swift_bridgeObjectRetain();
  uint64_t v50 = MEMORY[0x186E1BB2C](v49, v36);
  uint64_t result = swift_bridgeObjectRelease();
  if (v50)
  {
    uint64_t v51 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618458], v51);
    MEMORY[0x186E20D4C](MEMORY[0x189618490], v51);
    uint64_t v52 = *(void *)(v6 - 304);
    RangeReplaceableCollection<>.removeLast()();
    uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v53(v52, v36);
    swift_release();
    v53(*(void *)(v6 - 144), v36);
    return swift_release();
  }

uint64_t _PlistKeyedDecodingContainer.nestedUnkeyedContainer(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v90 = a2;
  uint64_t v95 = a3;
  uint64_t v96 = a7;
  uint64_t v91 = (uint64_t *)a4;
  uint64_t v97 = a1;
  uint64_t v79 = a9;
  uint64_t v82 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v77 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v84 = *(void *)(v13 - 8);
  uint64_t v85 = v13;
  MEMORY[0x1895F8858](v13);
  Swift::String v81 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  unint64_t v83 = (char *)&v76 - v16;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v87 = *(void *)(v19 - 8);
  uint64_t v88 = v19;
  MEMORY[0x1895F8858](v19);
  uint64_t v21 = (char *)&v76 - v20;
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v94 = (char *)&v76 - v24;
  uint64_t v80 = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(v80 - 8);
  MEMORY[0x1895F8858](v80);
  uint64_t v78 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v27);
  uint64_t v93 = (char *)&v76 - v28;
  uint64_t v86 = type metadata accessor for _PlistUnkeyedDecodingContainer(0LL, a6, a8, v29);
  uint64_t v92 = a5;
  uint64_t v30 = v96;
  uint64_t v31 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v33 = v95;
  if (*(void *)(v95 + 16) && (unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32), (v35 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v22 + 16))( v21,  *(void *)(v33 + 56) + *(void *)(v22 + 72) * v34,  AssociatedTypeWitness);
    uint64_t v36 = 0LL;
  }

  else
  {
    uint64_t v36 = 1LL;
  }

  uint64_t v37 = v94;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v21, v36, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v87 + 8))(v21, v88);
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v39 = v38;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)( v97,  (unint64_t)v91,  v92,  MetatypeMetadata,  v39,  v30);
    return swift_willThrow();
  }

  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v37, v21, AssociatedTypeWitness);
  unint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
  swift_unknownObjectRetain();
  uint64_t v43 = swift_checkMetadataState();
  uint64_t v44 = v89;
  v42(v37, v43, AssociatedConformanceWitness);
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v37, AssociatedTypeWitness);
    return swift_unknownObjectRelease();
  }

  uint64_t v95 = v25;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v37, AssociatedTypeWitness);
  swift_unknownObjectRelease();
  uint64_t v46 = v82;
  uint64_t v45 = v83;
  uint64_t v47 = v92;
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v83, v97, v92);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v45, 0LL, 1LL, v47);
  uint64_t v48 = v84;
  uint64_t v49 = v85;
  uint64_t v50 = v81;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v81, v45, v85);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v50, 1LL, v47) == 1)
  {
    uint64_t v51 = *(void (**)(char *, uint64_t))(v48 + 8);
    v51(v45, v49);
    v51(v50, v49);
    uint64_t v52 = v91;
    swift_retain();
    uint64_t v55 = v80;
    uint64_t v56 = (uint64_t)v93;
    uint64_t v57 = v90;
    goto LABEL_17;
  }

  uint64_t v58 = v50;
  uint64_t v59 = v48;
  unint64_t v60 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  uint64_t v61 = v77;
  v60(v77, v58, v47);
  uint64_t v62 = v45;
  uint64_t v52 = (uint64_t *)swift_allocObject();
  uint64_t v63 = v96;
  v52[5] = v47;
  v52[6] = v63;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52 + 2);
  v60((char *)boxed_opaque_existential_1, v61, v47);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v62, v49);
  unint64_t v65 = (unint64_t)v91;
  v52[7] = (uint64_t)v91;
  uint64_t v55 = v80;
  uint64_t v56 = (uint64_t)v93;
  if (!(v65 >> 62))
  {
    uint64_t v66 = (uint64_t *)(v65 + 64);
    uint64_t v57 = v90;
LABEL_15:
    uint64_t v67 = *v66;
    uint64_t result = swift_retain();
    uint64_t v68 = v67 + 1;
    if (__OFADD__(v67, 1LL))
    {
      __break(1u);
      goto LABEL_21;
    }

    goto LABEL_16;
  }

  uint64_t v57 = v90;
  if (v65 >> 62 == 1)
  {
    uint64_t v66 = (uint64_t *)((v65 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_15;
  }

  uint64_t v68 = 1LL;
LABEL_16:
  v52[8] = v68;
LABEL_17:
  uint64_t v69 = *(void *)(v57 + 40);
  *(void *)(v57 + 40) = v52;
  uint64_t v70 = type metadata accessor for _PlistDecodingStorage(0LL, v55, v53, v54);
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v56, v70);
  _PlistDecoder.unkeyedContainer()(v79);
  *(void *)(v57 + 40) = v69;
  swift_retain();
  swift_release();
  uint64_t v71 = swift_bridgeObjectRetain();
  uint64_t v72 = MEMORY[0x186E1BB2C](v71, v55);
  uint64_t result = swift_bridgeObjectRelease();
  if (v72)
  {
    uint64_t v73 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618458], v73);
    MEMORY[0x186E20D4C](MEMORY[0x189618490], v73);
    uint64_t v74 = v78;
    RangeReplaceableCollection<>.removeLast()();
    uint64_t v75 = *(void (**)(char *, uint64_t))(v95 + 8);
    v75(v74, v55);
    swift_release();
    v75(v93, v55);
    return swift_release();
  }

uint64_t _PlistKeyedDecodingContainer._superDecoder(forKey:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t *a7@<X8>)
{
  uint64_t v79 = a4;
  uint64_t v83 = a2;
  uint64_t v73 = a7;
  swift_getAssociatedTypeWitness();
  uint64_t v77 = a5;
  uint64_t v78 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v74 = *(__int128 **)(v13 - 8);
  uint64_t v75 = (__int128 *)v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v72 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v82 = (char *)&v72 - v18;
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v80 = *(void *)(v19 - 8);
  uint64_t v81 = v19;
  MEMORY[0x1895F8858](v19);
  uint64_t v76 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  uint64_t v84 = (uint64_t)&v72 - v22;
  uint64_t v23 = a1[3];
  uint64_t v86 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v23);
  uint64_t v24 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a3 + 16) && (unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25), (v27 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))( v15,  *(void *)(a3 + 56) + *(void *)(v16 + 72) * v26,  AssociatedTypeWitness);
    uint64_t v28 = 0LL;
  }

  else
  {
    uint64_t v28 = 1LL;
  }

  uint64_t v30 = v82;
  uint64_t v29 = v83;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v15, v28, 1LL, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1LL, AssociatedTypeWitness) == 1)
  {
    (*((void (**)(char *, __int128 *))v74 + 1))(v15, v75);
    swift_checkMetadataState();
    (*(void (**)(void))(AssociatedConformanceWitness + 56))();
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v30, v15, AssociatedTypeWitness);
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v32 = swift_checkMetadataState();
    uint64_t v33 = v76;
    uint64_t v34 = v85;
    v31(v30, v32, AssociatedConformanceWitness);
    if (v34)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v30, AssociatedTypeWitness);
      swift_unknownObjectRelease();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
    }

    uint64_t v85 = 0LL;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v30, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v84, v33, v81);
  }

  uint64_t v35 = *(void *)(v29 + 24);
  uint64_t v82 = *(char **)(v29 + 32);
  uint64_t v83 = v35;
  __int128 v72 = *(_OWORD *)(v86 + 3);
  uint64_t v36 = v72;
  uint64_t v37 = __swift_project_boxed_opaque_existential_1(v86, v72);
  uint64_t v38 = type metadata accessor for Optional();
  uint64_t v74 = &v72;
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(void *)(v39 + 64);
  __n128 v41 = MEMORY[0x1895F8858](v38);
  unint64_t v42 = (v40 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v43 = *(void *)(v36 - 8);
  (*(void (**)(char *, void *, uint64_t, __n128))(v43 + 16))((char *)&v72 - v42, v37, v36, v41);
  uint64_t v44 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v43 + 56))((char *)&v72 - v42, 0LL, 1LL, v36);
  uint64_t v76 = (char *)&v72;
  MEMORY[0x1895F8858](v44);
  uint64_t v46 = (char *)&v72 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v75 = &v72;
  __n128 v48 = MEMORY[0x1895F8858](v47);
  (*(void (**)(char *, char *, uint64_t, __n128))(v39 + 16))((char *)&v72 - v42, (char *)&v72 - v42, v38, v48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))((char *)&v72 - v42, 1LL, v36) == 1)
  {
    uint64_t v49 = *(void (**)(char *, uint64_t))(v39 + 8);
    uint64_t v50 = v83;
    swift_unknownObjectRetain();
    uint64_t v51 = (uint64_t)v82;
    swift_bridgeObjectRetain();
    v49((char *)&v72 - v42, v38);
    v49((char *)&v72 - v42, v38);
    uint64_t v52 = v79;
    swift_retain();
    uint64_t v54 = v85;
    uint64_t v55 = v50;
    goto LABEL_18;
  }

  uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v56(v46, (char *)&v72 - v42, v36);
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 40) = v72;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v52 + 16));
  v56((char *)boxed_opaque_existential_1, v46, v36);
  uint64_t v58 = *(void (**)(char *, uint64_t))(v39 + 8);
  uint64_t v55 = v83;
  swift_unknownObjectRetain();
  uint64_t v51 = (uint64_t)v82;
  swift_bridgeObjectRetain();
  v58((char *)&v72 - v42, v38);
  unint64_t v59 = v79;
  *(void *)(v52 + 56) = v79;
  uint64_t v54 = v85;
  if (v59 >> 62)
  {
    if (v59 >> 62 != 1)
    {
      uint64_t v63 = 1LL;
      goto LABEL_17;
    }

    unint64_t v60 = (uint64_t *)((v59 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unint64_t v60 = (uint64_t *)(v59 + 64);
  }

  uint64_t v61 = *v60;
  uint64_t result = swift_retain();
  uint64_t v63 = v61 + 1;
  if (!__OFADD__(v61, 1LL))
  {
LABEL_17:
    *(void *)(v52 + 64) = v63;
LABEL_18:
    uint64_t v64 = type metadata accessor for _PlistDecoder(0LL, v77, v78, v53);
    uint64_t v65 = swift_allocObject();
    _PlistDecoder.init(referencing:options:codingPathNode:)(v55, v51, v52);
    if (v54)
    {
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v84, v81);
    }

    else
    {
      uint64_t v68 = v81;
      uint64_t v69 = type metadata accessor for _PlistDecodingStorage(0LL, v81, v66, v67);
      uint64_t v70 = v84;
      specialized _PlistDecodingStorage.push(container:)(v84, v69);
      uint64_t v71 = v73;
      void v73[3] = v64;
      v71[4] = MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistDecoder<A>, v64);
      *uint64_t v71 = v65;
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v70, v68);
    }

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
  }

  __break(1u);
  return result;
}

uint64_t _PlistKeyedDecodingContainer.superDecoder()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t *a6@<X8>)
{
  v14[3] = &type metadata for _CodingKey;
  v14[4] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v12 = swift_allocObject();
  v14[0] = v12;
  *(_OWORD *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_18372EE40;
  *(void *)(v12 + 32) = 0LL;
  *(_BYTE *)(v12 + 40) = 0;
  return _PlistKeyedDecodingContainer._superDecoder(forKey:)(v14, a1, a2, a3, a4, a5, a6);
}

uint64_t _PlistKeyedDecodingContainer.superDecoder(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  v19[3] = a5;
  v19[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))(boxed_opaque_existential_1, a1, a5);
  return _PlistKeyedDecodingContainer._superDecoder(forKey:)(v19, a2, a3, a4, a6, a8, a9);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, uint64_t a2)
{
  return _JSONKeyedEncodingContainer.codingPath.getter(a1, a2, *(void *)(v2 + 16));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.allKeys.getter in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _PlistKeyedDecodingContainer.allKeys.getter( a1,  *(void *)(v5 + 8),  a3,  *(void *)(a1 + 16),  a5,  *(void *)(a1 + 32));
}

BOOL protocol witness for KeyedDecodingContainerProtocol.contains(_:) in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, uint64_t a2)
{
  return _PlistKeyedDecodingContainer.contains(_:)(a1, a2, *(void *)(v2 + 8));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  _PlistKeyedDecodingContainer.decodeNil(forKey:)) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  _PlistKeyedDecodingContainer.decode(_:forKey:)) & 1;
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  _PlistKeyedDecodingContainer.decode(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], a2[2], a2[3], a2[4], a2[5]) & 1;
}

void (*protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, uint64_t *a2))(char *, uint64_t, uint64_t)
{
  return _PlistKeyedDecodingContainer.decode(_:forKey:)( a1,  *(void *)v2,  *(void (**)(char *, uint64_t, uint64_t))(v2 + 8),  *(void *)(v2 + 16),  a2[2],  a2[3],  a2[4],  a2[5]);
}

double protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, uint64_t *a2)
{
  return _PlistKeyedDecodingContainer.decode(_:forKey:)( a1,  *(void *)v2,  *(void *)(v2 + 8),  *(void *)(v2 + 16),  a2[2],  a2[3],  a2[4],  a2[5]);
}

float protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, uint64_t *a2)
{
  return _PlistKeyedDecodingContainer.decode(_:forKey:)( a1,  *(void *)v2,  *(void *)(v2 + 8),  *(void *)(v2 + 16),  a2[2],  a2[3],  a2[4],  a2[5]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], a2[2], a2[3], a2[4], a2[5]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, uint64_t, void, void, uint64_t))_PlistKeyedDecodingContainer.decode<A>(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, uint64_t, void, void, uint64_t))_PlistKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void, void, void, void, void, uint64_t, void, void, uint64_t))
{
  return a7(a1, a2, *v7, v7[1], v7[2], a5[2], a5[3], a3, a5[4], a5[5], a4);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))_PlistKeyedDecodingContainer.nestedUnkeyedContainer(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance _PlistKeyedDecodingContainer<A, B>@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _PlistKeyedDecodingContainer.superDecoder()(*v2, v2[1], v2[2], *(void *)(a1 + 24), *(void *)(a1 + 40), a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))_PlistKeyedDecodingContainer.superDecoder(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], a2[2], a2[3], a2[4], a2[5]);
}

BOOL _PlistUnkeyedDecodingContainer.isAtEnd.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 48)) >= *(void *)(v1 + *(int *)(a1 + 44));
}

uint64_t specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  uint64_t v17 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer.Protocol);
  if (v5 == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder)) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

uint64_t specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = MEMORY[0x189617FA8];
  uint64_t v17 = MEMORY[0x189617FA8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v5 = MEMORY[0x189618740];
  uint64_t v17 = MEMORY[0x189618740];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v5 = MEMORY[0x18961A610];
  uint64_t v17 = MEMORY[0x18961A610];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt8.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v5 = MEMORY[0x18961A800];
  uint64_t v17 = MEMORY[0x18961A800];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt16.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v5 = MEMORY[0x18961A520];
  uint64_t v17 = MEMORY[0x18961A520];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Never.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v5 = MEMORY[0x1896184C8];
  uint64_t v17 = MEMORY[0x1896184C8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v5 = MEMORY[0x189618560];
  uint64_t v17 = MEMORY[0x189618560];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v5 = MEMORY[0x189618620];
  uint64_t v17 = MEMORY[0x189618620];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v5 = MEMORY[0x18961A350];
  uint64_t v17 = MEMORY[0x18961A350];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int8.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v5 = MEMORY[0x18961A408];
  uint64_t v17 = MEMORY[0x18961A408];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int16.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v5 = MEMORY[0x18961A458];
  uint64_t v17 = MEMORY[0x18961A458];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v5 = MEMORY[0x18961A4C0];
  uint64_t v17 = MEMORY[0x18961A4C0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int64.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v5 = MEMORY[0x189618CD8];
  uint64_t v17 = MEMORY[0x189618CD8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v5 = MEMORY[0x18961A860];
  uint64_t v17 = MEMORY[0x18961A860];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v5 = MEMORY[0x18961A8C8];
  uint64_t v17 = MEMORY[0x18961A8C8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt64.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5) {
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + *(int *)(a1 + 52)));
  uint64_t v7 = *(void *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v8 > 1),  v9 + 1,  1,  v6);
  }
  uint64_t v15 = &type metadata for _CodingKey;
  unint64_t v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&__int128 v14 = v10;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = 0LL;
  *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x189619368];
  uint64_t v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(a2, v11, v12);
}

uint64_t _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v20 = a3;
  swift_getMetatypeMetadata();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if ((swift_dynamicCast() & 1) != 0) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  }
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == a3) {
    swift_bridgeObjectRelease();
  }
  unint64_t v9 = (void *)_CodingPathNode.path.getter(*(void *)(v4 + *(int *)(a2 + 52)));
  uint64_t v10 = *(void *)(v4 + *(int *)(a2 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
  }
  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1) {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
  }
  uint64_t v18 = &type metadata for _CodingKey;
  unint64_t v19 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v13 = swift_allocObject();
  *(void *)&__int128 v17 = v13;
  *(void *)(v13 + 24) = 0LL;
  *(void *)(v13 + 32) = 0LL;
  *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
  *(_BYTE *)(v13 + 40) = 2;
  id v9[2] = v12 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v17, (uint64_t)&v9[5 * v12 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a4 = a1;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v14 = *MEMORY[0x189619368];
  uint64_t v15 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104LL))(a4, v14, v15);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _PlistUnkeyedDecodingContainer.decodeNil()()
{
  uint64_t v2 = v0;
  uint64_t v65 = *(void *)(v0 - 8);
  ((void (*)())MEMORY[0x1895F8858])();
  uint64_t v64 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v5 = *(void *)(v4 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v73 = v6;
  uint64_t v74 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v62 = *(void *)(v10 - 8);
  uint64_t v63 = v10;
  MEMORY[0x1895F8858](v10);
  uint64_t v76 = (char *)&v57 - v11;
  uint64_t v68 = *(void *)(v9 - 8);
  uint64_t v69 = v9;
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v57 - v13;
  uint64_t v75 = AssociatedConformanceWitness;
  uint64_t v67 = AssociatedTypeWitness;
  uint64_t v15 = v1;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v57 - v19;
  uint64_t v21 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v22);
  uint64_t v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v26 = MEMORY[0x1895F8858](v25);
  uint64_t v71 = (char *)&v57 - v27;
  uint64_t v28 = *(void (**)(char *, __n128))(v18 + 16);
  uint64_t v66 = &v15[*(int *)(v2 + 40)];
  v28(v20, v26);
  uint64_t v70 = v21;
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v30 = v16;
  int v31 = v29(v20, 1LL, v16);
  uint64_t v72 = v18;
  if (v31 == 1)
  {
    unint64_t v60 = v14;
    uint64_t v61 = v24;
    uint64_t v58 = *(void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v59 = v17;
    v58(v20, v17);
    uint64_t v32 = v15;
    swift_getAssociatedTypeWitness();
    uint64_t v33 = v2;
    uint64_t v34 = swift_getAssociatedConformanceWitness();
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v34 + 16);
    uint64_t v36 = swift_checkMetadataState();
    uint64_t v37 = v76;
    v35(v36, v34);
    uint64_t v39 = v68;
    uint64_t v38 = v69;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v37, 1LL, v69) == 1)
    {
      (*(void (**)(char *, uint64_t))(v62 + 8))(v76, v63);
      uint64_t v40 = v64;
      uint64_t v41 = v65;
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v64, v32, v33);
      type metadata accessor for DecodingError();
      uint64_t v42 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v33, v43);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v33);
      uint64_t v77 = v42;
      swift_willThrow();
      return v40 & 1;
    }

    uint64_t v49 = v16;
    uint64_t v50 = v60;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v60, v76, v38);
    uint64_t v76 = v32;
    uint64_t v40 = *(char **)(*(void *)v32 + 24LL);
    uint64_t v51 = v75;
    uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 80);
    swift_unknownObjectRetain();
    uint64_t v53 = swift_checkMetadataState();
    uint64_t v44 = v61;
    uint64_t v54 = v77;
    v52(v50, v53, v51);
    uint64_t v77 = v54;
    if (v54)
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v50, v38);
      swift_unknownObjectRelease();
      return v40 & 1;
    }

    (*(void (**)(char *, uint64_t))(v39 + 8))(v50, v38);
    swift_unknownObjectRelease();
    uint64_t v56 = v66;
    uint64_t v17 = v59;
    v58(v66, v59);
    uint64_t v45 = v70;
    uint64_t v30 = v49;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v56, v44, v49);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v56, 0LL, 1LL, v49);
    uint64_t v2 = v33;
    uint64_t v15 = v76;
  }

  else
  {
    uint64_t v44 = v20;
    uint64_t v45 = v70;
  }

  uint64_t v46 = v71;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v71, v44, v30);
  LOBYTE(v40) = (*(uint64_t (**)(char *))(v74 + 40))(v46);
  uint64_t v47 = v72;
  if ((v40 & 1) != 0)
  {
    ++*(void *)&v15[*(int *)(v2 + 48)];
    __n128 v48 = v66;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v66, v17);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v48, 1LL, 1LL, v30);
  }

  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v30);
  return v40 & 1;
}

uint64_t _PlistUnkeyedDecodingContainer.decode(_:)(uint64_t a1)
{
  uint64_t v70 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v69 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v5 = *(void *)(v4 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v78 = v5;
  uint64_t v81 = v6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  MEMORY[0x1895F8858](v10);
  uint64_t v72 = (char *)&v62 - v11;
  uint64_t v74 = *(void *)(v9 - 8);
  uint64_t v75 = v9;
  MEMORY[0x1895F8858](v12);
  uint64_t v68 = (char *)&v62 - v13;
  uint64_t v73 = AssociatedConformanceWitness;
  uint64_t v82 = AssociatedTypeWitness;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v62 - v17;
  uint64_t v19 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v24 = MEMORY[0x1895F8858](v23);
  uint64_t v79 = (char *)&v62 - v25;
  uint64_t v26 = a1;
  uint64_t v27 = *(int *)(a1 + 40);
  uint64_t v28 = v1;
  uint64_t v29 = (char *)(v1 + v27);
  uint64_t v30 = *(void (**)(char *, __n128))(v16 + 16);
  uint64_t v71 = v29;
  v30(v18, v24);
  uint64_t v76 = v14;
  uint64_t v77 = v19;
  int v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1LL, v14);
  uint64_t v80 = v16;
  if (v31 == 1)
  {
    uint64_t v64 = v15;
    uint64_t v65 = v22;
    uint64_t v63 = *(void (**)(char *, uint64_t))(v16 + 8);
    v63(v18, v15);
    uint64_t v32 = v73;
    swift_getAssociatedTypeWitness();
    uint64_t v33 = swift_getAssociatedConformanceWitness();
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v33 + 16);
    uint64_t v35 = swift_checkMetadataState();
    uint64_t v36 = v72;
    v34(v35, v33);
    uint64_t v38 = v74;
    uint64_t v37 = v75;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v36, 1LL, v75) == 1)
    {
      (*(void (**)(char *, uint64_t))(v66 + 8))(v36, v67);
      uint64_t v39 = v69;
      uint64_t v32 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v28, v26);
      type metadata accessor for DecodingError();
      uint64_t v40 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v26, v41);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v26);
      uint64_t v83 = v40;
      swift_willThrow();
      return v32 & 1;
    }

    uint64_t v53 = v68;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v68, v36, v37);
    uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 80);
    swift_unknownObjectRetain();
    uint64_t v55 = swift_checkMetadataState();
    uint64_t v56 = v65;
    uint64_t v57 = v83;
    v54(v53, v55, v32);
    uint64_t v83 = v57;
    if (v57)
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v53, v37);
      swift_unknownObjectRelease();
      return v32 & 1;
    }

    uint64_t v43 = v1;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v53, v37);
    swift_unknownObjectRelease();
    unint64_t v60 = v71;
    uint64_t v15 = v64;
    v63(v71, v64);
    uint64_t v61 = v56;
    uint64_t v44 = v76;
    uint64_t v45 = v77;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v60, v61, v76);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v60, 0LL, 1LL, v44);
    uint64_t v32 = v78;
    uint64_t v42 = v61;
  }

  else
  {
    uint64_t v42 = v18;
    uint64_t v43 = v1;
    uint64_t v44 = v76;
    uint64_t v45 = v77;
    uint64_t v32 = v78;
  }

  uint64_t v46 = (uint64_t)v79;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v79, v42, v44);
  uint64_t v48 = v26 + 48;
  uint64_t v47 = *(int *)(v26 + 48);
  uint64_t v49 = *(void *)(v43 + v47);
  uint64_t v50 = v83;
  char v51 = specialized _PlistDecoder.unwrapBool<A>(from:for:_:)( v46,  *(void *)(v43 + *(int *)(v48 + 4)),  v49,  0LL,  0LL,  2u,  v81,  v32);
  uint64_t v83 = v50;
  uint64_t v52 = v80;
  if (!v50)
  {
    LOBYTE(v32) = v51;
    *(void *)(v43 + v47) = v49 + 1;
    uint64_t v58 = v71;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v71, v15);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v58, 1LL, 1LL, v44);
  }

  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v44);
  return v32 & 1;
}

void *_PlistUnkeyedDecodingContainer.decode(_:)(uint64_t a1)
{
  uint64_t v63 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v62 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v66 = (char *)&v56 - v8;
  uint64_t v67 = *(void *)(v6 - 8);
  uint64_t v68 = v6;
  MEMORY[0x1895F8858](v9);
  uint64_t v59 = (char *)&v56 - v10;
  uint64_t v72 = AssociatedTypeWitness;
  uint64_t v73 = AssociatedConformanceWitness;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v56 - v14;
  uint64_t v16 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v21 = MEMORY[0x1895F8858](v20);
  uint64_t v70 = (char *)&v56 - v22;
  uint64_t v23 = (void *)a1;
  uint64_t v24 = *(int *)(a1 + 40);
  uint64_t v25 = v1;
  uint64_t v26 = (void *)(v1 + v24);
  uint64_t v27 = *(void (**)(char *, __n128))(v13 + 16);
  uint64_t v64 = v26;
  v27(v15, v21);
  uint64_t v69 = v16;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1LL, v11);
  uint64_t v65 = v12;
  uint64_t v71 = v13;
  if (v28 == 1)
  {
    uint64_t v57 = *(void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v58 = v19;
    v57(v15, v12);
    swift_getAssociatedTypeWitness();
    uint64_t v29 = swift_getAssociatedConformanceWitness();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v29 + 16);
    uint64_t v31 = swift_checkMetadataState();
    uint64_t v32 = v66;
    v30(v31, v29);
    uint64_t v34 = v67;
    uint64_t v33 = v68;
    uint64_t v35 = (uint64_t)v23;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v32, 1LL, v68) == 1)
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v32, v61);
      uint64_t v36 = v62;
      uint64_t v23 = (void *)v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v25, v35);
      type metadata accessor for DecodingError();
      uint64_t v37 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v35, v38);
      ((void (*)(char *, uint64_t))v23[1])(v36, v35);
      uint64_t v74 = v37;
      swift_willThrow();
      return v23;
    }

    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    uint64_t v56 = v1;
    uint64_t v49 = v59;
    v48(v59, v32, v33);
    uint64_t v23 = (void *)v73;
    uint64_t v50 = *(void (**)(char *, uint64_t, void *))(v73 + 80);
    swift_unknownObjectRetain();
    uint64_t v51 = swift_checkMetadataState();
    uint64_t v52 = v74;
    v50(v49, v51, v23);
    uint64_t v25 = v56;
    uint64_t v74 = v52;
    if (v52)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v49, v33);
      swift_unknownObjectRelease();
      return v23;
    }

    (*(void (**)(char *, uint64_t))(v34 + 8))(v49, v33);
    swift_unknownObjectRelease();
    uint64_t v23 = v64;
    v57((char *)v64, v65);
    uint64_t v40 = v69;
    uint64_t v55 = v58;
    (*(void (**)(void *, char *, uint64_t))(v69 + 16))(v23, v58, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v23, 0LL, 1LL, v11);
    uint64_t v39 = v55;
  }

  else
  {
    uint64_t v39 = v15;
    uint64_t v40 = v69;
    uint64_t v35 = (uint64_t)v23;
  }

  uint64_t v41 = (uint64_t)v70;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v70, v39, v11);
  uint64_t v42 = *(int *)(v35 + 48);
  unint64_t v43 = *(void *)(v25 + *(int *)(v35 + 52));
  uint64_t v44 = *(void *)(v25 + v42);
  uint64_t v45 = v74;
  uint64_t v46 = specialized _PlistDecoder.unwrapString<A>(from:for:_:)(v41, v43, v44, 0LL, 0LL, 2u);
  uint64_t v74 = v45;
  uint64_t v47 = v71;
  if (!v45)
  {
    uint64_t v23 = v46;
    *(void *)(v25 + v42) = v44 + 1;
    uint64_t v53 = v64;
    (*(void (**)(void *, uint64_t))(v47 + 8))(v64, v65);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v53, 1LL, 1LL, v11);
  }

  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v11);
  return v23;
}

double _PlistUnkeyedDecodingContainer.decode(_:)(uint64_t a1)
{
  uint64_t v70 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v69 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v67 = *(void *)(v8 - 8);
  uint64_t v68 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v73 = (char *)&v64 - v9;
  uint64_t v74 = *(void *)(v7 - 8);
  uint64_t v75 = v7;
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v64 - v11;
  uint64_t v79 = AssociatedTypeWitness;
  uint64_t v80 = AssociatedConformanceWitness;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v64 - v16;
  uint64_t v18 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v19);
  __n128 v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v23 = MEMORY[0x1895F8858](v22);
  uint64_t v77 = (char *)&v64 - v24;
  uint64_t v25 = a1;
  uint64_t v26 = *(int *)(a1 + 40);
  uint64_t v27 = v1;
  int v28 = (char *)(v1 + v26);
  uint64_t v30 = v29;
  uint64_t v31 = *(void (**)(char *, __n128))(v15 + 16);
  uint64_t v71 = v28;
  v31(v17, v23);
  uint64_t v76 = v18;
  int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1LL, v13);
  uint64_t v72 = v30;
  uint64_t v78 = v15;
  if (v32 == 1)
  {
    uint64_t v65 = *(void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v66 = v21;
    v65(v17, v30);
    uint64_t v33 = v25;
    swift_getAssociatedTypeWitness();
    uint64_t v34 = swift_getAssociatedConformanceWitness();
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v34 + 16);
    uint64_t v36 = swift_checkMetadataState();
    uint64_t v37 = v73;
    v35(v36, v34);
    uint64_t v39 = v74;
    uint64_t v38 = v75;
    uint64_t v40 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v37, 1LL, v75) == 1)
    {
      (*(void (**)(char *, uint64_t))(v67 + 8))(v37, v68);
      uint64_t v42 = v69;
      uint64_t v41 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v27, v33);
      type metadata accessor for DecodingError();
      uint64_t v43 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v33, v44);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v33);
      uint64_t v81 = v43;
      swift_willThrow();
      return v2;
    }

    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    uint64_t v64 = v27;
    uint64_t v55 = v12;
    v54(v12, v37, v38);
    uint64_t v56 = v80;
    uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 80);
    swift_unknownObjectRetain();
    uint64_t v58 = swift_checkMetadataState();
    uint64_t v59 = v81;
    v57(v55, v58, v56);
    uint64_t v27 = v64;
    uint64_t v81 = v59;
    if (v59)
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v55, v38);
      swift_unknownObjectRelease();
      return v2;
    }

    (*(void (**)(char *, uint64_t))(v39 + 8))(v55, v38);
    swift_unknownObjectRelease();
    uint64_t v62 = v71;
    v65(v71, v72);
    uint64_t v46 = v76;
    uint64_t v63 = v66;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v62, v66, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v62, 0LL, 1LL, v13);
    uint64_t v45 = v63;
  }

  else
  {
    uint64_t v45 = v17;
    uint64_t v46 = v76;
    uint64_t v40 = v25;
  }

  uint64_t v47 = (uint64_t)v77;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v77, v45, v13);
  uint64_t v49 = v40 + 48;
  uint64_t v48 = *(int *)(v40 + 48);
  uint64_t v50 = *(void *)(v27 + v48);
  uint64_t v51 = v81;
  specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)( v47,  *(void *)(v27 + *(int *)(v49 + 4)),  v50,  0LL,  0LL,  2u);
  uint64_t v81 = v51;
  uint64_t v53 = v78;
  if (!v51)
  {
    double v2 = v52;
    *(void *)(v27 + v48) = v50 + 1;
    uint64_t v60 = v71;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v71, v72);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v60, 1LL, 1LL, v13);
  }

  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v13);
  return v2;
}

float _PlistUnkeyedDecodingContainer.decode(_:)(uint64_t a1)
{
  uint64_t v70 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v69 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v67 = *(void *)(v8 - 8);
  uint64_t v68 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v73 = (char *)&v64 - v9;
  uint64_t v74 = *(void *)(v7 - 8);
  uint64_t v75 = v7;
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v64 - v11;
  uint64_t v79 = AssociatedTypeWitness;
  uint64_t v80 = AssociatedConformanceWitness;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v64 - v16;
  uint64_t v18 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v19);
  __n128 v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v23 = MEMORY[0x1895F8858](v22);
  uint64_t v77 = (char *)&v64 - v24;
  uint64_t v25 = a1;
  uint64_t v26 = *(int *)(a1 + 40);
  uint64_t v27 = v1;
  int v28 = (char *)(v1 + v26);
  uint64_t v30 = v29;
  uint64_t v31 = *(void (**)(char *, __n128))(v15 + 16);
  uint64_t v71 = v28;
  v31(v17, v23);
  uint64_t v76 = v18;
  int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1LL, v13);
  uint64_t v72 = v30;
  uint64_t v78 = v15;
  if (v32 == 1)
  {
    uint64_t v65 = *(void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v66 = v21;
    v65(v17, v30);
    uint64_t v33 = v25;
    swift_getAssociatedTypeWitness();
    uint64_t v34 = swift_getAssociatedConformanceWitness();
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v34 + 16);
    uint64_t v36 = swift_checkMetadataState();
    uint64_t v37 = v73;
    v35(v36, v34);
    uint64_t v39 = v74;
    uint64_t v38 = v75;
    uint64_t v40 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v37, 1LL, v75) == 1)
    {
      (*(void (**)(char *, uint64_t))(v67 + 8))(v37, v68);
      uint64_t v42 = v69;
      uint64_t v41 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v27, v33);
      type metadata accessor for DecodingError();
      uint64_t v43 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v33, v44);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v33);
      uint64_t v81 = v43;
      swift_willThrow();
      return v2;
    }

    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    uint64_t v64 = v27;
    uint64_t v55 = v12;
    v54(v12, v37, v38);
    uint64_t v56 = v80;
    uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 80);
    swift_unknownObjectRetain();
    uint64_t v58 = swift_checkMetadataState();
    uint64_t v59 = v81;
    v57(v55, v58, v56);
    uint64_t v27 = v64;
    uint64_t v81 = v59;
    if (v59)
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v55, v38);
      swift_unknownObjectRelease();
      return v2;
    }

    (*(void (**)(char *, uint64_t))(v39 + 8))(v55, v38);
    swift_unknownObjectRelease();
    uint64_t v62 = v71;
    v65(v71, v72);
    uint64_t v46 = v76;
    uint64_t v63 = v66;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v62, v66, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v62, 0LL, 1LL, v13);
    uint64_t v45 = v63;
  }

  else
  {
    uint64_t v45 = v17;
    uint64_t v46 = v76;
    uint64_t v40 = v25;
  }

  uint64_t v47 = (uint64_t)v77;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v77, v45, v13);
  uint64_t v49 = v40 + 48;
  uint64_t v48 = *(int *)(v40 + 48);
  uint64_t v50 = *(void *)(v27 + v48);
  uint64_t v51 = v81;
  specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)( v47,  *(void *)(v27 + *(int *)(v49 + 4)),  v50,  0LL,  0LL,  2u);
  uint64_t v81 = v51;
  uint64_t v53 = v78;
  if (!v51)
  {
    float v2 = v52;
    *(void *)(v27 + v48) = v50 + 1;
    uint64_t v60 = v71;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v71, v72);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v60, 1LL, 1LL, v13);
  }

  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v13);
  return v2;
}

uint64_t _PlistUnkeyedDecodingContainer.decode(_:)( uint64_t a1, uint64_t (*a2)(char *, void, uint64_t, void, void, uint64_t), uint64_t a3)
{
  uint64_t v63 = a3;
  uint64_t v73 = a2;
  uint64_t v60 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v59 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v57 = *(void *)(v8 - 8);
  uint64_t v58 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v64 = (char *)&v54 - v9;
  uint64_t v67 = *(void *)(v7 - 8);
  uint64_t v68 = v7;
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v54 - v11;
  uint64_t v65 = AssociatedTypeWitness;
  uint64_t v66 = AssociatedConformanceWitness;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v54 - v16;
  uint64_t v18 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v19);
  __n128 v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v23 = MEMORY[0x1895F8858](v22);
  uint64_t v71 = (char *)&v54 - v24;
  uint64_t v25 = v74;
  uint64_t v26 = *(void (**)(char *, __n128))(v15 + 16);
  uint64_t v61 = v74 + *(int *)(a1 + 40);
  v26(v17, v23);
  uint64_t v69 = v13;
  uint64_t v70 = v18;
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1LL, v13);
  uint64_t v62 = v14;
  uint64_t v72 = v15;
  if (v27 == 1)
  {
    uint64_t v55 = v12;
    uint64_t v56 = v21;
    uint64_t v54 = *(void (**)(char *, uint64_t))(v15 + 8);
    v54(v17, v14);
    uint64_t v28 = v25;
    uint64_t v13 = v66;
    swift_getAssociatedTypeWitness();
    uint64_t v29 = swift_getAssociatedConformanceWitness();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v29 + 16);
    uint64_t v31 = swift_checkMetadataState();
    int v32 = v64;
    v30(v31, v29);
    uint64_t v34 = v67;
    uint64_t v33 = v68;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v32, 1LL, v68) == 1)
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))(v32, v58);
      uint64_t v35 = v59;
      uint64_t v13 = v60;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v25, a1);
      type metadata accessor for DecodingError();
      uint64_t v36 = swift_allocError();
      ((void (*)(uint64_t))v63)(a1);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v35, a1);
      uint64_t v75 = v36;
      swift_willThrow();
      return v13;
    }

    uint64_t v63 = a1;
    uint64_t v47 = v55;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v55, v32, v33);
    uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 80);
    swift_unknownObjectRetain();
    uint64_t v49 = swift_checkMetadataState();
    uint64_t v50 = v56;
    uint64_t v51 = v75;
    v48(v47, v49, v13);
    uint64_t v75 = v51;
    if (v51)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v47, v33);
      swift_unknownObjectRelease();
      return v13;
    }

    uint64_t v40 = v28;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v47, v33);
    swift_unknownObjectRelease();
    uint64_t v13 = v61;
    v54((char *)v61, v62);
    uint64_t v38 = v69;
    uint64_t v39 = v70;
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 16))(v13, v50, v69);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v13, 0LL, 1LL, v38);
    uint64_t v37 = v50;
  }

  else
  {
    uint64_t v63 = a1;
    uint64_t v37 = v17;
    uint64_t v38 = v69;
    uint64_t v39 = v70;
    uint64_t v40 = v25;
  }

  uint64_t v41 = v71;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v71, v37, v38);
  uint64_t v42 = *(int *)(v63 + 48);
  uint64_t v43 = *(void *)(v40 + v42);
  uint64_t v44 = v75;
  uint64_t v45 = v73(v41, *(void *)(v40 + *(int *)(v63 + 52)), v43, 0LL, 0LL, 2LL);
  uint64_t v75 = v44;
  uint64_t v46 = v72;
  if (!v44)
  {
    uint64_t v13 = v45;
    *(void *)(v40 + v42) = v43 + 1;
    uint64_t v52 = v61;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v61, v62);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v52, 1LL, 1LL, v38);
  }

  (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
  return v13;
}

uint64_t _PlistUnkeyedDecodingContainer.decode<A>(_:)@<X0>( ValueMetadata *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v78 = a4;
  uint64_t v79 = a1;
  uint64_t v80 = a3;
  uint64_t v77 = a5;
  uint64_t v66 = *((void *)a2 - 1);
  MEMORY[0x1895F8858](a1);
  uint64_t v65 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v63 = *(void *)(v12 - 8);
  uint64_t v64 = v12;
  MEMORY[0x1895F8858](v12);
  uint64_t v68 = (char *)&v58 - v13;
  uint64_t v71 = *(void *)(v11 - 8);
  uint64_t v72 = v11;
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v58 - v15;
  uint64_t v69 = AssociatedTypeWitness;
  uint64_t v70 = AssociatedConformanceWitness;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1895F8858](v18);
  __n128 v21 = (char *)&v58 - v20;
  uint64_t v22 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v27 = MEMORY[0x1895F8858](v26);
  uint64_t v75 = (char *)&v58 - v28;
  uint64_t v29 = *(void (**)(char *, __n128))(v19 + 16);
  uint64_t v67 = (char *)(v9 + a2[10]);
  v29(v21, v27);
  uint64_t v73 = v17;
  uint64_t v74 = v22;
  int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1LL, v17);
  uint64_t v76 = v19;
  if (v30 == 1)
  {
    uint64_t v60 = v18;
    uint64_t v61 = v25;
    uint64_t v59 = *(void (**)(char *, uint64_t))(v19 + 8);
    v59(v21, v18);
    uint64_t v62 = v9;
    uint64_t v31 = v70;
    swift_getAssociatedTypeWitness();
    uint64_t v32 = swift_getAssociatedConformanceWitness();
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v32 + 16);
    uint64_t v34 = swift_checkMetadataState();
    uint64_t v35 = v68;
    v33(v34, v32);
    uint64_t v37 = v71;
    uint64_t v36 = v72;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v35, 1LL, v72) == 1)
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v35, v64);
      uint64_t v39 = v65;
      uint64_t v38 = v66;
      (*(void (**)(char *, uint64_t, int *))(v66 + 16))(v65, v62, a2);
      type metadata accessor for DecodingError();
      uint64_t v40 = swift_allocError();
      _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)((uint64_t)v79, (uint64_t)a2, v80, v41);
      (*(void (**)(char *, int *))(v38 + 8))(v39, a2);
      uint64_t v81 = v40;
      return swift_willThrow();
    }

    uint64_t v52 = v16;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v16, v35, v36);
    uint64_t v53 = v62;
    uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 80);
    swift_unknownObjectRetain();
    uint64_t v55 = swift_checkMetadataState();
    uint64_t v56 = v81;
    v54(v52, v55, v31);
    uint64_t v81 = v56;
    if (v56)
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v52, v36);
      return swift_unknownObjectRelease();
    }

    uint64_t v43 = v53;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v52, v36);
    swift_unknownObjectRelease();
    uint64_t v57 = v67;
    uint64_t v18 = v60;
    v59(v67, v60);
    uint64_t v45 = v73;
    uint64_t v44 = v74;
    __n128 v21 = v61;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v57, v61, v73);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v57, 0LL, 1LL, v45);
  }

  else
  {
    uint64_t v43 = v9;
    uint64_t v45 = v73;
    uint64_t v44 = v74;
  }

  uint64_t v46 = (uint64_t)v75;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v75, v21, v45);
  uint64_t v47 = a2[12];
  uint64_t v48 = *(void *)(v43 + v47);
  uint64_t v49 = v81;
  specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)( v46,  v79,  *(void *)(v43 + a2[13]),  v48,  0LL,  0LL,  2,  v80,  v77,  v78);
  uint64_t v81 = v49;
  uint64_t v50 = v76;
  if (!v49)
  {
    *(void *)(v43 + v47) = v48 + 1;
    uint64_t v51 = v67;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v67, v18);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v51, 1LL, 1LL, v45);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v46, v45);
}

uint64_t _PlistUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)@<X0>( uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v121 = a5;
  uint64_t v122 = a1;
  uint64_t v108 = *((void *)a2 - 1);
  MEMORY[0x1895F8858](a1);
  uint64_t v107 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(v9 + 16);
  uint64_t v10 = *(void *)(v9 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v119 = v11;
  uint64_t v120 = v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v105 = type metadata accessor for Optional();
  uint64_t v104 = *(void *)(v105 - 8);
  MEMORY[0x1895F8858](v105);
  uint64_t v129 = (char *)&v102 - v14;
  uint64_t v113 = AssociatedTypeWitness;
  uint64_t v111 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v106 = (char *)&v102 - v16;
  uint64_t v112 = AssociatedConformanceWitness;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1895F8858](v18);
  unint64_t v125 = (char *)&v102 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  uint64_t v117 = (char *)&v102 - v22;
  MEMORY[0x1895F8858](v23);
  uint64_t v25 = (char *)&v102 - v24;
  MEMORY[0x1895F8858](v26);
  uint64_t v114 = (char *)&v102 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v28);
  uint64_t v126 = (char *)&v102 - v29;
  MEMORY[0x1895F8858](v30);
  uint64_t v110 = (char *)&v102 - v31;
  MEMORY[0x1895F8858](v32);
  uint64_t v34 = (char *)&v102 - v33;
  uint64_t v123 = a3;
  uint64_t v124 = a4;
  uint64_t v36 = v35;
  uint64_t v103 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v37 = v130;
  uint64_t v38 = *(void (**)(void))(v19 + 16);
  uint64_t v109 = (char *)v130 + a2[10];
  unint64_t v116 = (void (*)(void (*)(void, void), char *, uint64_t))v38;
  v38(v25);
  uint64_t v39 = *(unsigned int (**)(void (*)(void, void), uint64_t, uint64_t))(v36 + 48);
  uint64_t v132 = v17;
  unint64_t v115 = v39;
  unsigned int v40 = v39((void (*)(void, void))v25, 1LL, v17);
  int64_t v127 = v34;
  uint64_t v128 = v18;
  uint64_t v118 = v19;
  if (v40 == 1)
  {
    int64_t v102 = *(void (**)(char *, uint64_t))(v19 + 8);
    v102(v25, v18);
    uint64_t v41 = v112;
    swift_getAssociatedTypeWitness();
    uint64_t v42 = swift_getAssociatedConformanceWitness();
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v42 + 16);
    uint64_t v44 = swift_checkMetadataState();
    uint64_t v45 = v129;
    v43(v44, v42);
    uint64_t v46 = v111;
    uint64_t v47 = v113;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v45, 1LL, v113) == 1)
    {
      (*(void (**)(char *, uint64_t))(v104 + 8))(v129, v105);
      uint64_t v48 = v108;
      uint64_t v49 = v107;
      (*(void (**)(char *, uint64_t *, int *))(v108 + 16))(v107, v130, a2);
      type metadata accessor for DecodingError();
      swift_allocError();
      _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v103, (uint64_t)a2, v103, v50);
      (*(void (**)(char *, int *))(v48 + 8))(v49, a2);
      return swift_willThrow();
    }

    uint64_t v65 = v106;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v106, v129, v47);
    uint64_t v54 = v130;
    uint64_t v129 = *(char **)(v41 + 80);
    swift_unknownObjectRetain();
    uint64_t v66 = swift_checkMetadataState();
    uint64_t v67 = v131;
    ((void (*)(char *, uint64_t, uint64_t))v129)(v65, v66, v41);
    uint64_t v53 = v67;
    if (v67)
    {
      (*(void (**)(char *, uint64_t))(v46 + 8))(v65, v47);
      return swift_unknownObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v46 + 8))(v65, v47);
    swift_unknownObjectRelease();
    uint64_t v99 = v109;
    v102(v109, v128);
    unint64_t v100 = v110;
    uint64_t v101 = v132;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v99, v110, v132);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v99, 0LL, 1LL, v101);
    uint64_t v113 = v36;
    uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
    uint64_t v34 = v127;
    v55(v127, v100, v101);
  }

  else
  {
    uint64_t v113 = v36;
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
    v52(v34, v25, v132);
    uint64_t v53 = v131;
    uint64_t v54 = v37;
    uint64_t v55 = v52;
  }

  uint64_t v56 = *v54;
  unint64_t v57 = *(uint64_t *)((char *)v54 + a2[13]);
  uint64_t v110 = (char *)a2[12];
  uint64_t v58 = *(void *)&v110[(void)v54];
  uint64_t v59 = (char *)swift_allocObject();
  *((void *)v59 + 5) = &type metadata for _CodingKey;
  *((void *)v59 + 6) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v60 = swift_allocObject();
  *((void *)v59 + 2) = v60;
  *(void *)(v60 + 24) = 0LL;
  *(void *)(v60 + 32) = 0LL;
  *(void *)(v60 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v58;
  *(_BYTE *)(v60 + 40) = 2;
  uint64_t v129 = v59;
  *((void *)v59 + 7) = v57;
  uint64_t v61 = v126;
  if (v57 >> 62)
  {
    uint64_t v62 = 0LL;
    uint64_t v63 = v125;
    if (v57 >> 62 != 1) {
      goto LABEL_12;
    }
    uint64_t v64 = (uint64_t *)((v57 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    uint64_t v64 = (uint64_t *)(v57 + 64);
    uint64_t v63 = v125;
  }

  uint64_t v62 = *v64;
  swift_retain_n();
LABEL_12:
  if (__OFADD__(v62, 1LL))
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v68 = v129;
  *((void *)v129 + 8) = v62 + 1;
  swift_retain();
  swift_release();
  unint64_t v125 = *(char **)(v56 + 40);
  *(void *)(v56 + 40) = v68;
  uint64_t v58 = v56 + 16;
  uint64_t v69 = v132;
  uint64_t v72 = type metadata accessor for _PlistDecodingStorage(0LL, v132, v70, v71);
  swift_retain();
  uint64_t v112 = v56 + 16;
  specialized _PlistDecodingStorage.push(container:)((uint64_t)v34, v72);
  uint64_t v73 = *(void *)(v56 + 16);
  swift_bridgeObjectRetain_n();
  swift_retain();
  uint64_t v74 = MEMORY[0x186E1BB2C](v73, v69);
  swift_bridgeObjectRelease();
  if (!v74)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v131 = v53;
  uint64_t v133 = v73;
  uint64_t v75 = v132;
  uint64_t v76 = type metadata accessor for Array();
  uint64_t v77 = MEMORY[0x186E20D4C](MEMORY[0x189618458], v76);
  uint64_t v78 = v117;
  uint64_t v111 = v77;
  BidirectionalCollection.last.getter();
  uint64_t v58 = v128;
  v116((void (*)(void, void))v63, v78, v128);
  if (v115((void (*)(void, void))v63, 1LL, v75) != 1)
  {
    uint64_t v79 = (void (*)(void, uint64_t))v61;
    v55(v61, v63, v132);
    uint64_t v80 = *(void (**)(char *, uint64_t))(v118 + 8);
    v80(v78, v58);
    swift_bridgeObjectRelease();
    uint64_t v81 = *(void *)(v56 + 40);
    uint64_t v63 = (char *)v79;
    uint64_t v82 = *(void (**)(uint64_t, void (*)(void, void), uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 24);
    swift_retain();
    uint64_t v83 = v81;
    uint64_t v84 = v131;
    v82(v122, (char *)v79, v56, v83, v123, v124);
    uint64_t v131 = v84;
    if (!v84)
    {
      uint64_t v91 = v113;
      uint64_t v92 = v79;
      uint64_t v63 = *(char **)(v113 + 8);
      uint64_t v93 = v132;
      ((void (*)(void, uint64_t))v63)(v92, v132);
      swift_release();
      swift_release();
      *(void *)(v56 + 40) = v125;
      swift_retain();
      swift_release();
      uint64_t v58 = *(void *)(v56 + 16);
      uint64_t v94 = swift_bridgeObjectRetain();
      uint64_t v95 = MEMORY[0x186E1BB2C](v94, v93);
      swift_bridgeObjectRelease();
      if (v95)
      {
        MEMORY[0x186E20D4C](MEMORY[0x189618490], v76);
        uint64_t v96 = v114;
        RangeReplaceableCollection<>.removeLast()();
        uint64_t v97 = v132;
        ((void (*)(char *, uint64_t))v63)(v96, v132);
        swift_release();
        swift_release();
        swift_release();
        ++*(void *)&v110[(void)v130];
        unint64_t v98 = v109;
        v80(v109, v128);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56))(v98, 1LL, 1LL, v97);
        return ((uint64_t (*)(char *, uint64_t))v63)(v127, v97);
      }

      goto LABEL_24;
    }

    uint64_t v85 = *(void (**)(void, uint64_t))(v113 + 8);
    uint64_t v86 = v132;
    v85(v63, v132);
    swift_release();
    swift_release();
    *(void *)(v56 + 40) = v125;
    swift_retain();
    swift_release();
    uint64_t v58 = *(void *)(v56 + 16);
    uint64_t v87 = swift_bridgeObjectRetain();
    uint64_t v88 = MEMORY[0x186E1BB2C](v87, v86);
    swift_bridgeObjectRelease();
    if (v88)
    {
      MEMORY[0x186E20D4C](MEMORY[0x189618490], v76);
      uint64_t v89 = v114;
      RangeReplaceableCollection<>.removeLast()();
      uint64_t v90 = v132;
      v85(v89, v132);
      swift_release();
      v85(v127, v90);
      swift_release();
      return swift_release();
    }

uint64_t _PlistUnkeyedDecodingContainer.nestedUnkeyedContainer()@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v92 = a2;
  uint64_t v85 = *((void *)a1 - 1);
  MEMORY[0x1895F8858](a1);
  uint64_t v84 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v80 = *(void *)(v7 - 8);
  uint64_t v81 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v88 = (char *)&v75 - v8;
  uint64_t v89 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v90 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](v9);
  uint64_t v83 = (char *)&v75 - v10;
  uint64_t v87 = AssociatedConformanceWitness;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v75 - v14;
  uint64_t v16 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v91 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  uint64_t v82 = (char *)&v75 - v20;
  __n128 v22 = MEMORY[0x1895F8858](v21);
  uint64_t v93 = (char *)&v75 - v23;
  uint64_t v24 = v2;
  uint64_t v25 = *(void (**)(char *, __n128))(v13 + 16);
  uint64_t v86 = (char *)v2 + a1[10];
  v25(v15, v22);
  uint64_t v94 = v16;
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1LL, v11);
  uint64_t v79 = v13;
  if (v26 == 1)
  {
    uint64_t v77 = v11;
    uint64_t v78 = v12;
    uint64_t v76 = *(void (**)(char *, uint64_t))(v13 + 8);
    v76(v15, v12);
    uint64_t v27 = v87;
    swift_getAssociatedTypeWitness();
    uint64_t v28 = swift_getAssociatedConformanceWitness();
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v28 + 16);
    uint64_t v30 = swift_checkMetadataState();
    uint64_t v31 = v88;
    v29(v30, v28);
    uint64_t v33 = v89;
    uint64_t v32 = v90;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v31, 1LL, v90) == 1)
    {
      (*(void (**)(char *, uint64_t))(v80 + 8))(v31, v81);
      uint64_t v34 = v84;
      uint64_t v35 = v85;
      (*(void (**)(char *, void *, int *))(v85 + 16))(v84, v24, a1);
      type metadata accessor for DecodingError();
      uint64_t v36 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)((uint64_t)a1, v37);
      (*(void (**)(char *, int *))(v35 + 8))(v34, a1);
      uint64_t v95 = v36;
      return swift_willThrow();
    }

    uint64_t v49 = v83;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v83, v31, v32);
    uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 80);
    swift_unknownObjectRetain();
    uint64_t v51 = v49;
    uint64_t v52 = swift_checkMetadataState();
    uint64_t v39 = v82;
    uint64_t v53 = v95;
    v50(v51, v52, v27);
    uint64_t v95 = v53;
    if (v53)
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v51, v32);
      return swift_unknownObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v33 + 8))(v51, v32);
    swift_unknownObjectRelease();
    uint64_t v73 = v86;
    uint64_t v12 = v78;
    v76(v86, v78);
    uint64_t v74 = v94;
    uint64_t v11 = v77;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v73, v39, v77);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v73, 0LL, 1LL, v11);
  }

  else
  {
    uint64_t v39 = v15;
  }

  unsigned int v40 = v24;
  uint64_t v41 = (uint64_t)v93;
  (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v93, v39, v11);
  uint64_t v42 = *v24;
  uint64_t v43 = a1[12];
  unint64_t v44 = *(void *)((char *)v40 + a1[13]);
  uint64_t v90 = (uint64_t)v40;
  uint64_t v45 = *(void *)((char *)v40 + v43);
  uint64_t v46 = (void *)swift_allocObject();
  v46[5] = &type metadata for _CodingKey;
  v46[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  _OWORD v46[2] = result;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v45;
  *(_BYTE *)(result + 40) = 2;
  v46[7] = v44;
  if (v44 >> 62)
  {
    uint64_t v47 = 0LL;
    if (v44 >> 62 != 1) {
      goto LABEL_12;
    }
    uint64_t v48 = (uint64_t *)((v44 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    uint64_t v48 = (uint64_t *)(v44 + 64);
  }

  uint64_t v47 = *v48;
  uint64_t result = swift_retain_n();
LABEL_12:
  if (__OFADD__(v47, 1LL))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v89 = v43;
  v46[8] = v47 + 1;
  swift_retain();
  swift_release();
  uint64_t v54 = *(void *)(v42 + 40);
  *(void *)(v42 + 40) = v46;
  uint64_t v57 = type metadata accessor for _PlistDecodingStorage(0LL, v11, v55, v56);
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v41, v57);
  swift_retain();
  uint64_t v58 = v95;
  _PlistDecoder.unkeyedContainer()(v92);
  uint64_t v95 = v58;
  if (v58)
  {
    swift_release();
    *(void *)(v42 + 40) = v54;
    swift_retain();
    swift_release();
    uint64_t v59 = swift_bridgeObjectRetain();
    uint64_t v60 = v11;
    uint64_t v61 = MEMORY[0x186E1BB2C](v59, v11);
    uint64_t result = swift_bridgeObjectRelease();
    if (v61)
    {
      uint64_t v62 = type metadata accessor for Array();
      MEMORY[0x186E20D4C](MEMORY[0x189618458], v62);
      MEMORY[0x186E20D4C](MEMORY[0x189618490], v62);
      uint64_t v63 = v91;
      RangeReplaceableCollection<>.removeLast()();
      uint64_t v64 = *(void (**)(char *, uint64_t))(v94 + 8);
      v64(v63, v60);
      swift_release();
      v64((char *)v41, v60);
      swift_release();
      return swift_release();
    }

    goto LABEL_21;
  }

  uint64_t v78 = v12;
  swift_release();
  *(void *)(v42 + 40) = v54;
  swift_retain();
  swift_release();
  uint64_t v65 = swift_bridgeObjectRetain();
  uint64_t v66 = v11;
  uint64_t v67 = MEMORY[0x186E1BB2C](v65, v11);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v67)
  {
LABEL_22:
    __break(1u);
    return result;
  }

  uint64_t v68 = type metadata accessor for Array();
  MEMORY[0x186E20D4C](MEMORY[0x189618458], v68);
  MEMORY[0x186E20D4C](MEMORY[0x189618490], v68);
  uint64_t v69 = v91;
  RangeReplaceableCollection<>.removeLast()();
  uint64_t v70 = v94;
  uint64_t v71 = *(void (**)(char *, uint64_t))(v94 + 8);
  v71(v69, v66);
  swift_release();
  swift_release();
  swift_release();
  ++*(void *)(v90 + v89);
  uint64_t v72 = v86;
  (*(void (**)(char *, uint64_t))(v79 + 8))(v86, v78);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56))(v72, 1LL, 1LL, v66);
  return ((uint64_t (*)(uint64_t, uint64_t))v71)(v41, v66);
}

uint64_t _PlistUnkeyedDecodingContainer.superDecoder()@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v69 = a2;
  uint64_t v75 = *((void *)a1 - 1);
  MEMORY[0x1895F8858](a1);
  uint64_t v74 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v5 = *(void *)(v4 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v80 = v6;
  uint64_t v81 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v70 = *(void *)(v9 - 8);
  uint64_t v71 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v77 = (char *)&v65 - v10;
  uint64_t v78 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v79 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](v11);
  uint64_t v73 = (char *)&v65 - v12;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v65 - v16;
  uint64_t v18 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v72 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v22 = MEMORY[0x1895F8858](v21);
  uint64_t v83 = (uint64_t)&v65 - v23;
  uint64_t v24 = v84;
  uint64_t v25 = *(void (**)(char *, __n128))(v15 + 16);
  uint64_t v76 = (char *)(v84 + a1[10]);
  v25(v17, v22);
  uint64_t v85 = v18;
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1LL, v13);
  uint64_t v82 = v13;
  uint64_t v68 = v15;
  if (v26 != 1)
  {
    uint64_t v38 = v17;
    uint64_t v39 = v14;
    goto LABEL_5;
  }

  uint64_t v66 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v67 = v14;
  v66(v17, v14);
  uint64_t v27 = v24;
  swift_getAssociatedTypeWitness();
  uint64_t v28 = swift_getAssociatedConformanceWitness();
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v28 + 16);
  uint64_t v30 = swift_checkMetadataState();
  uint64_t v31 = v77;
  v29(v30, v28);
  uint64_t v32 = v78;
  uint64_t v15 = v79;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v31, 1LL, v79) == 1)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v31, v71);
    uint64_t v33 = v74;
    uint64_t v34 = v75;
    (*(void (**)(char *, uint64_t, int *))(v75 + 16))(v74, v27, a1);
    type metadata accessor for DecodingError();
    uint64_t v35 = swift_allocError();
    specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)((uint64_t)a1, v36);
    (*(void (**)(char *, int *))(v34 + 8))(v33, a1);
    uint64_t v86 = v35;
    return swift_willThrow();
  }

  uint64_t v39 = v27;
  uint64_t v43 = v73;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v73, v31, v15);
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
  swift_unknownObjectRetain();
  uint64_t v48 = swift_checkMetadataState();
  uint64_t v38 = v72;
  uint64_t v49 = v86;
  v47(v43, v48, AssociatedConformanceWitness);
  uint64_t v86 = v49;
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v43, v15);
    return swift_unknownObjectRelease();
  }

  while (1)
  {
    uint64_t v24 = v39;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v43, v15);
    swift_unknownObjectRelease();
    uint64_t v63 = v76;
    uint64_t v39 = v67;
    v66(v76, v67);
    uint64_t v64 = v85;
    uint64_t v13 = v82;
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v63, v38, v82);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v63, 0LL, 1LL, v13);
LABEL_5:
    (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v83, v38, v13);
    uint64_t v40 = *(void *)(*(void *)v24 + 24LL);
    uint64_t v41 = *(void *)(*(void *)v24 + 32LL);
    uint64_t v32 = a1[12];
    unint64_t v42 = *(void *)(v24 + a1[13]);
    uint64_t v43 = *(char **)(v24 + v32);
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v43;
    *(void *)(v45 + 24) = v42;
    if (v42 >> 62) {
      break;
    }
    uint64_t v46 = (char **)(v42 + 64);
LABEL_11:
    uint64_t v38 = *v46;
    swift_retain();
    uint64_t v50 = (uint64_t)(v38 + 1);
    if (!__OFADD__(v38, 1LL)) {
      goto LABEL_12;
    }
    __break(1u);
  }

  if (v42 >> 62 == 1)
  {
    uint64_t v46 = (char **)((v42 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_11;
  }

  uint64_t v50 = 1LL;
LABEL_12:
  *(void *)(v45 + 32) = v50;
  uint64_t v51 = type metadata accessor for _PlistDecoder(0LL, v80, v81, v44);
  uint64_t v52 = swift_allocObject();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v53 = v45 | 0x4000000000000000LL;
  uint64_t v54 = v86;
  _PlistDecoder.init(referencing:options:codingPathNode:)(v40, v41, v53);
  uint64_t v86 = v54;
  if (v54) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 8))(v83, v82);
  }
  uint64_t v57 = v82;
  uint64_t v58 = type metadata accessor for _PlistDecodingStorage(0LL, v82, v55, v56);
  uint64_t v59 = v83;
  specialized _PlistDecodingStorage.push(container:)(v83, v58);
  *(void *)(v84 + v32) = v43 + 1;
  uint64_t v60 = v76;
  (*(void (**)(char *, uint64_t))(v68 + 8))(v76, v39);
  uint64_t v61 = v85;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56))(v60, 1LL, 1LL, v57);
  uint64_t v62 = v69;
  v69[3] = v51;
  v62[4] = MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistDecoder<A>, v51);
  *uint64_t v62 = v52;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8))(v59, v57);
}

uint64_t protocol witness for UnkeyedDecodingContainer.codingPath.getter in conformance _PlistUnkeyedDecodingContainer<A>( uint64_t a1)
{
  return _CodingPathNode.path.getter(*(void *)(v1 + *(int *)(a1 + 52)));
}

uint64_t protocol witness for UnkeyedDecodingContainer.count.getter in conformance _PlistUnkeyedDecodingContainer<A>( uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 44));
}

uint64_t protocol witness for UnkeyedDecodingContainer.currentIndex.getter in conformance _PlistUnkeyedDecodingContainer<A>( uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 48));
}

BOOL protocol witness for UnkeyedDecodingContainer.decodeNil() in conformance _PlistUnkeyedDecodingContainer<A>()
{
  return _PlistUnkeyedDecodingContainer.decodeNil()();
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistUnkeyedDecodingContainer<A>( uint64_t a1)
{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1) & 1;
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)( a1,  (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:),  (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)( a1,  (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:),  (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)( a1,  (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:),  (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)( a1,  (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:),  (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)( a1,  (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:),  (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)( a1,  (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:),  (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)( a1,  (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:),  (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)( a1,  (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:),  (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)( a1,  (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:),  (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)( a1,  (uint64_t (*)(char *, void, uint64_t, void, void, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:),  (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

void *protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistUnkeyedDecodingContainer<A>( uint64_t a1)
{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1);
}

double protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistUnkeyedDecodingContainer<A>( uint64_t a1)
{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1);
}

float protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistUnkeyedDecodingContainer<A>( uint64_t a1)
{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode<A>(_:) in conformance _PlistUnkeyedDecodingContainer<A>@<X0>( ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  return _PlistUnkeyedDecodingContainer.decode<A>(_:)(a1, a4, a2, a3, a5);
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:) in conformance _PlistUnkeyedDecodingContainer<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  return _PlistUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)(a1, a4, a2, a3, a5);
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedUnkeyedContainer() in conformance _PlistUnkeyedDecodingContainer<A>@<X0>( int *a1@<X0>, uint64_t a2@<X8>)
{
  return _PlistUnkeyedDecodingContainer.nestedUnkeyedContainer()(a1, a2);
}

uint64_t protocol witness for UnkeyedDecodingContainer.superDecoder() in conformance _PlistUnkeyedDecodingContainer<A>@<X0>( int *a1@<X0>, uint64_t *a2@<X8>)
{
  return _PlistUnkeyedDecodingContainer.superDecoder()(a1, a2);
}

uint64_t specialized _PlistDecoder.unwrapBool<A>(from:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  unsigned __int8 v28 = a6;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a8 + 40))(a1, a7, a8) & 1) != 0)
  {
    uint64_t v12 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v14 = v13;
    *uint64_t v13 = MEMORY[0x1896184C8];
    char v15 = v28;
    if (v28 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }

    else
    {
      uint64_t v17 = v26;
      uint64_t v16 = v27;
      uint64_t v18 = v25;
      outlined copy of _CodingKey(v25, v26, v27, v28);
      outlined copy of _CodingKey(v25, v26, v27, v28);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v20 = swift_allocObject();
      *(void *)(inited + 32) = v20;
      *(void *)(v20 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v18;
      *(void *)(v20 + 24) = v17;
      *(void *)(v20 + 32) = v16;
      *(_BYTE *)(v20 + 40) = v15;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v18, v17, v16, v15);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104LL))( v14,  *MEMORY[0x189619368],  v12);
    char v23 = swift_willThrow();
  }

  else
  {
    uint64_t v21 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a8 + 48);
    unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    char v23 = v21(a1, a2, &v25, &type metadata for _CodingKey, v22, a7, a8);
  }

  return v23 & 1;
}

uint64_t sub_1833D8910()
{
  return swift_deallocObject();
}

uint64_t sub_1833D8940()
{
  return swift_deallocObject();
}

uint64_t outlined consume of _CodingKey?(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1) {
    return outlined consume of _CodingKey(a1, a2, a3, a4);
  }
  return a1;
}

uint64_t destroy for _PlistKeyedDecodingContainer()
{
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for _PlistKeyedDecodingContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for _PlistKeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _PlistKeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

void type metadata accessor for _PlistKeyedDecodingContainer()
{
}

uint64_t type metadata completion function for _PlistUnkeyedDecodingContainer()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _PlistUnkeyedDecodingContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = a2;
  uint64_t v10 = v8;
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v7 + v12;
  if (*(_DWORD *)(v11 + 84)) {
    size_t v14 = *(void *)(v11 + 64);
  }
  else {
    size_t v14 = *(void *)(v11 + 64) + 1LL;
  }
  int v15 = (*(_DWORD *)(v11 + 80) | v5) & 0x100000;
  uint64_t v16 = *v9;
  *a1 = *v9;
  if ((v12 | (unint64_t)v5) > 7
    || v15 != 0
    || ((((((v13 + ((v5 + 8LL) & ~(unint64_t)v5)) & ~v12) + v14 + 23) & 0xFFFFFFFFFFFFFFF8LL)
       + 15) & 0xFFFFFFFFFFFFFFF8LL)
     + 8 > 0x18)
  {
    uint64_t v19 = (uint64_t *)(v16
                    + (((v12 | v5) & 0xF8 ^ 0x1F8) & ((v12 | v5) + 16)));
  }

  else
  {
    uint64_t v20 = ~v12;
    uint64_t v21 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v22 = ((unint64_t)v9 + v6 + 8) & ~v6;
    char v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    swift_retain();
    v23(v21, v22, AssociatedTypeWitness);
    uint64_t v24 = (void *)((v21 + v13) & v20);
    uint64_t v25 = (v22 + v13) & v20;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))((v22 + v13) & v20, 1LL, v10))
    {
      memcpy(v24, (const void *)((v22 + v13) & v20), v14);
    }

    else
    {
      (*(void (**)(void *, uint64_t, uint64_t))(v11 + 16))(v24, (v22 + v13) & v20, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
    }

    unint64_t v26 = ((unint64_t)v24 + v14 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v27 = (v25 + v14 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v28 = *(void *)v27;
    *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
    *(void *)unint64_t v26 = v28;
    uint64_t v29 = (void *)(((unint64_t)v24 + v14 + 23) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v30 = (void *)((v25 + v14 + 23) & 0xFFFFFFFFFFFFF8LL);
    *uint64_t v29 = *v30;
    *(void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v19 = a1;
  }

  swift_retain();
  return v19;
}

uint64_t destroy for _PlistUnkeyedDecodingContainer(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = (v4 + v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return swift_release();
}

void *initializeWithCopy for _PlistUnkeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  v9(v7, v8, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = v10 + v13;
  int v15 = (char *)((v10 + v13 + v7) & ~v13);
  uint64_t v16 = (char *)((v14 + v8) & ~v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v16, 1LL, v11))
  {
    int v17 = *(_DWORD *)(v12 + 84);
    size_t v18 = *(void *)(v12 + 64);
    if (v17) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v18 + 1;
    }
    memcpy(v15, v16, v19);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v16, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0LL, 1LL, v11);
    int v17 = *(_DWORD *)(v12 + 84);
    size_t v18 = *(void *)(v12 + 64);
  }

  if (v17) {
    size_t v20 = v18;
  }
  else {
    size_t v20 = v18 + 1;
  }
  uint64_t v21 = &v15[v20];
  uint64_t v22 = &v16[v20];
  unint64_t v23 = (unint64_t)(v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v24 = (unint64_t)(v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v25 = *(void *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(void *)unint64_t v23 = v25;
  unint64_t v26 = (void *)((unint64_t)(v21 + 23) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v27 = (void *)((unint64_t)(v22 + 23) & 0xFFFFFFFFFFFFF8LL);
  *unint64_t v26 = *v27;
  *(void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  return a1;
}

void *assignWithCopy for _PlistUnkeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v7, v8, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (char *)((v9 + v12 + v7) & ~v12);
  uint64_t v14 = (char *)((v9 + v12 + v8) & ~v12);
  int v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v7) = v15(v13, 1LL, v10);
  int v16 = v15(v14, 1LL, v10);
  if ((_DWORD)v7)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v14, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0LL, 1LL, v10);
      goto LABEL_10;
    }
  }

  else
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v13, v14, v10);
      goto LABEL_10;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  if (*(_DWORD *)(v11 + 84)) {
    size_t v17 = *(void *)(v11 + 64);
  }
  else {
    size_t v17 = *(void *)(v11 + 64) + 1LL;
  }
  memcpy(v13, v14, v17);
LABEL_10:
  if (*(_DWORD *)(v11 + 84)) {
    uint64_t v18 = *(void *)(v11 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v11 + 64) + 1LL;
  }
  size_t v19 = &v13[v18];
  size_t v20 = &v14[v18];
  unint64_t v21 = (unint64_t)(v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v22 = (unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  char v23 = *(_BYTE *)(v22 + 8);
  *(void *)unint64_t v21 = *(void *)v22;
  *(_BYTE *)(v21 + 8) = v23;
  unint64_t v24 = (void *)((unint64_t)(v19 + 23) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v25 = (void *)((unint64_t)(v20 + 23) & 0xFFFFFFFFFFFFF8LL);
  *unint64_t v24 = *v25;
  *(void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for _PlistUnkeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7, v8, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = v9 + v12;
  uint64_t v14 = (char *)((v9 + v12 + v7) & ~v12);
  int v15 = (char *)((v13 + v8) & ~v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v15, 1LL, v10))
  {
    int v16 = *(_DWORD *)(v11 + 84);
    uint64_t v17 = *(void *)(v11 + 64);
    if (v16) {
      size_t v18 = *(void *)(v11 + 64);
    }
    else {
      size_t v18 = v17 + 1;
    }
    memcpy(v14, v15, v18);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0LL, 1LL, v10);
    int v16 = *(_DWORD *)(v11 + 84);
    uint64_t v17 = *(void *)(v11 + 64);
  }

  if (v16) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  size_t v20 = &v14[v19];
  unint64_t v21 = &v15[v19];
  unint64_t v22 = (unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v23 = (unint64_t)(v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = *(void *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(void *)unint64_t v22 = v24;
  uint64_t v25 = (void *)((unint64_t)(v20 + 23) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v26 = (void *)((unint64_t)(v21 + 23) & 0xFFFFFFFFFFFFF8LL);
  *uint64_t v25 = *v26;
  *(void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

void *assignWithTake for _PlistUnkeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v7, v8, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (char *)((v9 + v12 + v7) & ~v12);
  uint64_t v14 = (char *)((v9 + v12 + v8) & ~v12);
  int v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v7) = v15(v13, 1LL, v10);
  int v16 = v15(v14, 1LL, v10);
  if ((_DWORD)v7)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v14, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0LL, 1LL, v10);
      goto LABEL_10;
    }
  }

  else
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v13, v14, v10);
      goto LABEL_10;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  if (*(_DWORD *)(v11 + 84)) {
    size_t v17 = *(void *)(v11 + 64);
  }
  else {
    size_t v17 = *(void *)(v11 + 64) + 1LL;
  }
  memcpy(v13, v14, v17);
LABEL_10:
  if (*(_DWORD *)(v11 + 84)) {
    uint64_t v18 = *(void *)(v11 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v11 + 64) + 1LL;
  }
  uint64_t v19 = &v13[v18];
  size_t v20 = &v14[v18];
  unint64_t v21 = (unint64_t)(v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v22 = (unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  char v23 = *(_BYTE *)(v22 + 8);
  *(void *)unint64_t v21 = *(void *)v22;
  *(_BYTE *)(v21 + 8) = v23;
  uint64_t v24 = (void *)((unint64_t)(v19 + 23) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v25 = (void *)((unint64_t)(v20 + 23) & 0xFFFFFFFFFFFFF8LL);
  *uint64_t v24 = *v25;
  *(void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _PlistUnkeyedDecodingContainer(uint64_t *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v10 = v6;
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v10;
  }
  if (v8) {
    uint64_t v12 = 23LL;
  }
  else {
    uint64_t v12 = 24LL;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v13 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = *(void *)(v5 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v7 + 80);
  if (v11 < a2)
  {
    if (((((((v12 + *(void *)(v7 + 64) + ((v14 + v15 + ((v13 + 8) & ~v13)) & ~v15)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
         + 8) & 0xFFFFFFF8) != 0)
      unsigned int v16 = 2;
    else {
      unsigned int v16 = a2 - v11 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0LL;
    }
    __asm { BR              X0 }
  }

  if ((v10 & 0x80000000) != 0)
  {
    uint64_t v21 = ((unint64_t)a1 + v13 + 8) & ~v13;
    if ((_DWORD)v6 == v11) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v21, v6, AssociatedTypeWitness);
    }
    if (v8 >= 2)
    {
      unsigned int v22 = (*(uint64_t (**)(uint64_t))(v7 + 48))((v21 + v14 + v15) & ~v15);
      if (v22 >= 2) {
        return v22 - 1;
      }
      else {
        return 0LL;
      }
    }

    return 0LL;
  }

  uint64_t v19 = *a1;
  return (v19 + 1);
}

void storeEnumTagSinglePayload for _PlistUnkeyedDecodingContainer( unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  int v8 = 0u;
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v10 = *(_DWORD *)(v9 + 84);
  unsigned int v11 = v10 - 1;
  if (!v10) {
    unsigned int v11 = 0;
  }
  if (v7 <= v11) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = v7;
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  uint64_t v14 = 23LL;
  if (!v10) {
    uint64_t v14 = 24LL;
  }
  if (v13 < a3)
  {
    if ((((((_DWORD)v14
           + *(_DWORD *)(v9 + 64)
           + ((*(_DWORD *)(v6 + 64)
             + *(unsigned __int8 *)(v9 + 80)
             + ((*(unsigned __int8 *)(v6 + 80) + 8) & ~*(unsigned __int8 *)(v6 + 80))) & ~*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v15 = a3 - v13 + 1;
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v8 = v16;
    }
    else {
      int v8 = 0;
    }
  }

  if (a2 > v13)
  {
    if ((((((_DWORD)v14
           + *(_DWORD *)(v9 + 64)
           + ((*(_DWORD *)(v6 + 64)
             + *(unsigned __int8 *)(v9 + 80)
             + ((*(unsigned __int8 *)(v6 + 80) + 8) & ~*(unsigned __int8 *)(v6 + 80))) & ~*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v17 = ~v13 + a2;
      bzero( a1,  ((((v14 + *(void *)(v9 + 64)
          + ((*(void *)(v6 + 64)
            + *(unsigned __int8 *)(v9 + 80)
            + ((*(unsigned __int8 *)(v6 + 80) + 8LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFFFFFFFFFF8LL)
        + 15) & 0xFFFFFFFFFFFFFFF8LL)
      + 8);
      *a1 = v17;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X0 }

void sub_1833D9CC4(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  *((_BYTE *)v10 + v14) = 0;
  if ((_DWORD)v11)
  {
    if (v6 < 0)
    {
      uint64_t v17 = ((unint64_t)v10 + v7 + 8) & v9;
      if ((_DWORD)v13 == v3)
      {
        uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
        uint64_t v19 = v11;
        a1 = v13;
        a2 = v12;
      }

      else
      {
        uint64_t v17 = (v17 + v5 + v4) & v8;
        uint64_t v19 = (v11 + 1);
        uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
      }

      v18(v17, v19, a1, a2);
      return;
    }

    if ((v11 & 0x80000000) != 0) {
      uint64_t v16 = v11 ^ 0x80000000;
    }
    else {
      uint64_t v16 = (v11 - 1);
    }
    *int v10 = v16;
  }

uint64_t type metadata accessor for _PlistUnkeyedDecodingContainer( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _PlistUnkeyedDecodingContainer);
}

uint64_t associated type witness table accessor for KeyedDecodingContainerProtocol.Key : CodingKey in _PlistKeyedDecodingContainer<A, B>( uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t sub_1833D9DA0()
{
  return swift_deallocObject();
}

uint64_t specialized _PlistDecoder.unwrapBool<A>(from:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v43 = a3;
  uint64_t v46 = *MEMORY[0x1895F89C0];
  uint64_t v42 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v41 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v40 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v18 = MEMORY[0x1895F8858](v17);
  size_t v20 = (char *)&v36 - v19;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(a6 + 40))(a1, a4, a6, v18) & 1) != 0)
  {
    uint64_t v37 = a7;
    unint64_t v38 = a2;
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v39 = v22;
    *unsigned int v22 = MEMORY[0x1896184C8];
    uint64_t v23 = v40;
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
    v24(v20, v43, v14);
    v24(v16, (uint64_t)v20, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v16, 1LL, a5) == 1)
    {
      uint64_t v25 = *(void (**)(char *, uint64_t))(v23 + 8);
      v25(v16, v14);
      _CodingPathNode.path.getter(v38);
      v25(v20, v14);
    }

    else
    {
      uint64_t v43 = v21;
      uint64_t v27 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v16, a5);
      uint64_t v28 = _CodingPathNode.path.getter(v38);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v30 = v37;
      *(void *)(inited + 56) = a5;
      *(void *)(inited + 64) = v30;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v32 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v27 + 16))(boxed_opaque_existential_1, v41, a5);
      uint64_t v44 = v28;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v14);
      uint64_t v33 = *(void (**)(char *, uint64_t))(v27 + 8);
      uint64_t v21 = v43;
      v33(v32, a5);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v34 = v39;
    uint64_t v44 = 0LL;
    unint64_t v45 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v34,  *MEMORY[0x189619368],  v21);
    char v26 = swift_willThrow();
  }

  else
  {
    char v26 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 48))( a1,  a2,  v43,  a5,  a7,  a4,  a6);
  }

  return v26 & 1;
}

uint64_t protocol witness for SingleValueDecodingContainer.decode<A>(_:) in conformance _PlistDecoder<A>@<X0>( ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:) in conformance _PlistDecoder<A>( a1,  a2,  a3,  a4);
}

uint64_t Date.FormatString.hash(into:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t static Date.FormatString.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int Date.FormatString.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatString()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatString()
{
  return Hasher._finalize()();
}

void *Date.FormatString.init(stringInterpolation:)@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t Date.FormatString.init(stringLiteral:)@<X0>( uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v4 = result;
  uint64_t v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    Swift::String_optional v8 = String.Iterator.next()();
    uint64_t countAndFlagsBits = v8.value._countAndFlagsBits;
    if (v8.value._object)
    {
      object = v8.value._object;
      do
      {
        if (countAndFlagsBits == 39 && object == (void *)0xE100000000000000LL)
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v10 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type String and conformance String();
            lazy protocol witness table accessor for type String and conformance String();
            RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
            String.append(_:)(v15);
            swift_bridgeObjectRelease();
            v14._uint64_t countAndFlagsBits = 39LL;
            v14._object = (void *)0xE100000000000000LL;
            String.append(_:)(v14);
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v4 = 39LL;
            unint64_t v3 = 0xE100000000000000LL;
            goto LABEL_14;
          }
        }

        Swift::String_optional v11 = String.Iterator.next()();
        uint64_t countAndFlagsBits = v11.value._countAndFlagsBits;
        object = v11.value._object;
      }

      while (v11.value._object);
    }

    swift_bridgeObjectRelease();
    uint64_t result = String.count.getter();
    if (result + 0x4000000000000000LL >= 0)
    {
      uint64_t v4 = MEMORY[0x186E1B904](39LL, 0xE100000000000000LL, 2 * result);
      unint64_t v13 = v12;
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v3 = v13;
      goto LABEL_14;
    }

    __break(1u);
  }

  else
  {
LABEL_14:
    *a3 = v4;
    a3[1] = v3;
  }

  return result;
}

void Date.FormatString.StringInterpolation.init(literalCapacity:interpolationCount:)(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
}

Swift::Void __swiftcall Date.FormatString.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v3 = HIBYTE(a1._object) & 0xF;
  if (!v3)
  {
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }

  swift_bridgeObjectRetain();
  Swift::String_optional v5 = String.Iterator.next()();
  uint64_t v4 = v5.value._countAndFlagsBits;
  if (!v5.value._object)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v9 = String.count.getter();
    if (v9 + 0x4000000000000000LL >= 0)
    {
      uint64_t countAndFlagsBits = MEMORY[0x186E1B904](39LL, 0xE100000000000000LL, 2 * v9);
      object = v10;
      goto LABEL_15;
    }

    __break(1u);
    return;
  }

  uint64_t v6 = v5.value._object;
  while (1)
  {
    if (v4 == 39 && v6 == (void *)0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }

    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0) {
      break;
    }
LABEL_7:
    Swift::String_optional v8 = String.Iterator.next()();
    uint64_t v4 = v8.value._countAndFlagsBits;
    uint64_t v6 = v8.value._object;
    if (!v8.value._object) {
      goto LABEL_11;
    }
  }

  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type String and conformance String();
  RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 39LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  uint64_t countAndFlagsBits = 39LL;
  object = (void *)0xE100000000000000LL;
LABEL_15:
  v12._uint64_t countAndFlagsBits = countAndFlagsBits;
  v12._object = object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
}

void Date.FormatString.StringInterpolation.appendInterpolation(era:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1833DA668()
{
  v0._uint64_t countAndFlagsBits = 1195853639LL;
  v0._object = (void *)0xE400000000000000LL;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

  ;
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(year:)(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  switch(*(_BYTE *)(result + 8))
  {
    case 0:
      if (v1 >= 10) {
        uint64_t v1 = 10LL;
      }
      if (v1 <= 1) {
        uint64_t v2 = 1LL;
      }
      else {
        uint64_t v2 = v1;
      }
      uint64_t v3 = 121LL;
      goto LABEL_20;
    case 1:
      if (v1 >= 10) {
        uint64_t v1 = 10LL;
      }
      if (v1 <= 1) {
        uint64_t v2 = 1LL;
      }
      else {
        uint64_t v2 = v1;
      }
      uint64_t v3 = 114LL;
      goto LABEL_20;
    case 2:
      if (v1 >= 10) {
        uint64_t v1 = 10LL;
      }
      if (v1 <= 1) {
        uint64_t v2 = 1LL;
      }
      else {
        uint64_t v2 = v1;
      }
      uint64_t v3 = 117LL;
LABEL_20:
      uint64_t v4 = MEMORY[0x186E1B904](v3, 0xE100000000000000LL, v2);
      unint64_t v6 = v5;
      goto LABEL_27;
    case 3:
      if (v1) {
        uint64_t v4 = 31097LL;
      }
      else {
        uint64_t v4 = 121LL;
      }
      if (v1) {
        unint64_t v6 = 0xE200000000000000LL;
      }
      else {
        unint64_t v6 = 0xE100000000000000LL;
      }
LABEL_27:
      unint64_t v7 = v6;
      String.append(_:)(*(Swift::String *)&v4);
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }

  return result;
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(yearForWeekOfYear:)(uint64_t result)
{
  if ((*(_BYTE *)(result + 9) & 1) == 0)
  {
    uint64_t v1 = *(void *)result;
    if ((*(_BYTE *)(result + 8) & 1) != 0)
    {
      if (v1) {
        uint64_t v3 = 22873LL;
      }
      else {
        uint64_t v3 = 89LL;
      }
      if (v1) {
        unint64_t v5 = 0xE200000000000000LL;
      }
      else {
        unint64_t v5 = 0xE100000000000000LL;
      }
    }

    else
    {
      if (v1 >= 10) {
        uint64_t v1 = 10LL;
      }
      if (v1 <= 1) {
        uint64_t v2 = 1LL;
      }
      else {
        uint64_t v2 = v1;
      }
      uint64_t v3 = MEMORY[0x186E1B904](89LL, 0xE100000000000000LL, v2);
      unint64_t v5 = v4;
    }

    unint64_t v6 = v5;
    String.append(_:)(*(Swift::String *)&v3);
    return swift_bridgeObjectRelease();
  }

  return result;
}

void Date.FormatString.StringInterpolation.appendInterpolation(cyclicYear:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1833DA838()
{
  v0._uint64_t countAndFlagsBits = 1431655765LL;
  v0._object = (void *)0xE400000000000000LL;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

  ;
}

void Date.FormatString.StringInterpolation.appendInterpolation(quarter:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1833DA8A4()
{
  v0._uint64_t countAndFlagsBits = 20817LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

  ;
}

void Date.FormatString.StringInterpolation.appendInterpolation(standaloneQuarter:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1833DA934()
{
  v0._uint64_t countAndFlagsBits = 29041LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

void Date.FormatString.StringInterpolation.appendInterpolation(month:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1833DA9B8()
{
  v0._uint64_t countAndFlagsBits = 19789LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

  ;
}

void Date.FormatString.StringInterpolation.appendInterpolation(standaloneMonth:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1833DAA48()
{
  v0._uint64_t countAndFlagsBits = 19532LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

void Date.FormatString.StringInterpolation.appendInterpolation(week:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1833DAACC()
{
  v0._uint64_t countAndFlagsBits = 30583LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

  ;
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(day:)(uint64_t result)
{
  if ((*(_BYTE *)(result + 9) & 1) == 0)
  {
    uint64_t v1 = *(void *)result;
    if ((*(_BYTE *)(result + 8) & 1) != 0)
    {
      unint64_t v6 = 0xE200000000000000LL;
      uint64_t v7 = 25700LL;
      if (v1 != 1)
      {
        uint64_t v7 = 70LL;
        unint64_t v6 = 0xE100000000000000LL;
      }

      if (v1) {
        uint64_t v3 = v7;
      }
      else {
        uint64_t v3 = 100LL;
      }
      if (v1) {
        unint64_t v5 = v6;
      }
      else {
        unint64_t v5 = 0xE100000000000000LL;
      }
    }

    else
    {
      if (v1 >= 10) {
        uint64_t v1 = 10LL;
      }
      if (v1 <= 1) {
        uint64_t v2 = 1LL;
      }
      else {
        uint64_t v2 = v1;
      }
      uint64_t v3 = MEMORY[0x186E1B904](103LL, 0xE100000000000000LL, v2);
      unint64_t v5 = v4;
    }

    unint64_t v8 = v5;
    String.append(_:)(*(Swift::String *)&v3);
    return swift_bridgeObjectRelease();
  }

  return result;
}

void Date.FormatString.StringInterpolation.appendInterpolation(dayOfYear:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1833DABCC()
{
  v0._uint64_t countAndFlagsBits = 17476LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

  ;
}

void Date.FormatString.StringInterpolation.appendInterpolation(weekday:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1833DAC3C()
{
  v0._uint64_t countAndFlagsBits = 1162167621LL;
  v0._object = (void *)0xE400000000000000LL;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

  ;
}

void Date.FormatString.StringInterpolation.appendInterpolation(standaloneWeekday:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1833DACDC()
{
  v0._uint64_t countAndFlagsBits = 6513507LL;
  v0._object = (void *)0xE300000000000000LL;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

void Date.FormatString.StringInterpolation.appendInterpolation(dayPeriod:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1833DAD68()
{
  v0._uint64_t countAndFlagsBits = 1633771873LL;
  v0._object = (void *)0xE400000000000000LL;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

  ;
}

void Date.FormatString.StringInterpolation.appendInterpolation(hour:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1833DAE34()
{
  v0._uint64_t countAndFlagsBits = 26728LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

unsigned __int8 *Date.FormatString.StringInterpolation.appendInterpolation(minute:)(unsigned __int8 *result)
{
  int v1 = *result;
  if (v1 != 2)
  {
    if ((v1 & 1) != 0) {
      uint64_t v2 = 28013LL;
    }
    else {
      uint64_t v2 = 109LL;
    }
    if ((v1 & 1) != 0) {
      unint64_t v3 = 0xE200000000000000LL;
    }
    else {
      unint64_t v3 = 0xE100000000000000LL;
    }
    unint64_t v4 = v3;
    String.append(_:)(*(Swift::String *)&v2);
    return (unsigned __int8 *)swift_bridgeObjectRelease();
  }

  return result;
}

unsigned __int8 *Date.FormatString.StringInterpolation.appendInterpolation(second:)(unsigned __int8 *result)
{
  int v1 = *result;
  if (v1 != 2)
  {
    if ((v1 & 1) != 0) {
      uint64_t v2 = 29555LL;
    }
    else {
      uint64_t v2 = 115LL;
    }
    if ((v1 & 1) != 0) {
      unint64_t v3 = 0xE200000000000000LL;
    }
    else {
      unint64_t v3 = 0xE100000000000000LL;
    }
    unint64_t v4 = v3;
    String.append(_:)(*(Swift::String *)&v2);
    return (unsigned __int8 *)swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(secondFraction:)(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 8);
  if (v1 != 255)
  {
    v2._uint64_t countAndFlagsBits = Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.rawValue.getter( *(void *)result,  v1 & 1);
    String.append(_:)(v2);
    return swift_bridgeObjectRelease();
  }

  return result;
}

void Date.FormatString.StringInterpolation.appendInterpolation(timeZone:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1833DAFB8()
{
  v0._uint64_t countAndFlagsBits = 2054847098LL;
  v0._object = (void *)0xE400000000000000LL;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

  ;
}

unint64_t lazy protocol witness table accessor for type Date.FormatString and conformance Date.FormatString()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString;
  if (!lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatString,  &type metadata for Date.FormatString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString;
  if (!lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatString,  &type metadata for Date.FormatString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString;
  if (!lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatString,  &type metadata for Date.FormatString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString;
  if (!lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatString,  &type metadata for Date.FormatString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString);
  }

  return result;
}

void protocol witness for StringInterpolationProtocol.init(literalCapacity:interpolationCount:) in conformance Date.FormatString.StringInterpolation( void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
}

void protocol witness for StringInterpolationProtocol.appendLiteral(_:) in conformance Date.FormatString.StringInterpolation( Swift::String *a1)
{
}

unint64_t lazy protocol witness table accessor for type Date.FormatString.StringInterpolation and conformance Date.FormatString.StringInterpolation()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatString.StringInterpolation and conformance Date.FormatString.StringInterpolation;
  if (!lazy protocol witness table cache variable for type Date.FormatString.StringInterpolation and conformance Date.FormatString.StringInterpolation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatString.StringInterpolation,  &type metadata for Date.FormatString.StringInterpolation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString.StringInterpolation and conformance Date.FormatString.StringInterpolation);
  }

  return result;
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Date.FormatString@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatString.init(stringLiteral:)(*(void *)a1, *(void *)(a1 + 8), a2);
}

ValueMetadata *type metadata accessor for Date.FormatString()
{
  return &type metadata for Date.FormatString;
}

ValueMetadata *type metadata accessor for Date.FormatString.StringInterpolation()
{
  return &type metadata for Date.FormatString.StringInterpolation;
}

void base witness table accessor for Equatable in BufferViewIndex<A>()
{
}

void BufferViewIndex.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int BufferViewIndex.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BufferViewIndex<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Strideable.== infix(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BufferViewIndex<A>()
{
  return BufferViewIndex.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance BufferViewIndex<A>(int a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BufferViewIndex<A>()
{
  return Hasher._finalize()();
}

void *protocol witness for Strideable.distance(to:) in conformance BufferViewIndex<A>@<X0>( void *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 72LL);
  if (v4)
  {
    uint64_t v5 = *result - *v3;
    if (v5 != 0x8000000000000000LL || v4 != -1)
    {
      *a3 = v5 / v4;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *protocol witness for Strideable.advanced(by:) in conformance BufferViewIndex<A>@<X0>( void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = *v3 + *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 72LL) * *result;
  return result;
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance BufferViewIndex<A>()
{
  return static Strideable._step(after:from:by:)();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance BufferViewIndex<A>( void *a1, void *a2)
{
  return *a1 < *a2;
}

void base witness table accessor for Comparable in BufferViewIndex<A>()
{
}

uint64_t type metadata accessor for BufferViewIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BufferViewIndex);
}

uint64_t NSGrammaticalPartOfSpeech.morphunValue()(unint64_t a1)
{
  if (a1 < 0xF) {
    return qword_183827AC8[a1];
  }
  if (a1 == 15) {
    return 0x6F4E7265706F7270LL;
  }
  return 0LL;
}

uint64_t NSGrammaticalCase.morphunValue()(unint64_t a1)
{
  if (a1 < 0xF) {
    return qword_183827BB8[a1];
  }
  if (a1 == 15) {
    return 0x656D757274736E69LL;
  }
  if (a1 == 16) {
    return 0x69746174696D6F63LL;
  }
  return 0LL;
}

uint64_t NSMorphology.morphunConstraints()()
{
  char v1 = (char)v0;
  uint64_t v68 = MEMORY[0x18961AFF0];
  id v2 = objc_msgSend(v0, sel_grammaticalGender);
  uint64_t v3 = 0xE800000000000000LL;
  uint64_t v4 = 0x656E696E696D6566LL;
  switch((unint64_t)v2)
  {
    case 0uLL:
      goto LABEL_7;
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      uint64_t v4 = 0x6E696C756373616DLL;
      uint64_t v3 = 0xE900000000000065LL;
      goto LABEL_6;
    case 3uLL:
      uint64_t v3 = 0xE600000000000000LL;
      uint64_t v4 = 0x72657475656ELL;
      goto LABEL_6;
    default:
      if (v2 != (id)4) {
        goto LABEL_7;
      }
      uint64_t v3 = 0xE600000000000000LL;
      uint64_t v4 = 0x6E6F6D6D6F63LL;
LABEL_6:
      objc_msgSend(v0, sel_grammaticalGender);
      specialized Dictionary.subscript.setter(v4, v3, 0x7265646E6567LL, 0xE600000000000000LL);
LABEL_7:
      unint64_t v5 = (unint64_t)objc_msgSend(v0, sel_number) - 1;
      if (v5 <= 5 && ((0x3Du >> v5) & 1) != 0)
      {
        uint64_t v6 = 8 * v5;
        uint64_t v7 = *(void *)&aSingularplural[v6];
        uint64_t v8 = *(void *)((char *)&unk_183827CD8 + v6);
        objc_msgSend(v0, sel_number);
        specialized Dictionary.subscript.setter(v7, v8, 0x746E756F63LL, 0xE500000000000000LL);
      }

      uint64_t v9 = NSGrammaticalPartOfSpeech.morphunValue()((unint64_t)objc_msgSend(v0, sel_partOfSpeech));
      if (v10)
      {
        uint64_t v11 = v9;
        uint64_t v12 = v10;
        objc_msgSend(v0, sel_partOfSpeech);
        specialized Dictionary.subscript.setter(v11, v12, 7565168LL, 0xE300000000000000LL);
      }

      uint64_t v13 = NSGrammaticalCase.morphunValue()((unint64_t)objc_msgSend(v0, sel_grammaticalCase));
      if (v14)
      {
        uint64_t v15 = v13;
        uint64_t v16 = v14;
        objc_msgSend(v0, sel_grammaticalCase);
        specialized Dictionary.subscript.setter(v15, v16, 1702060387LL, 0xE400000000000000LL);
      }

      id v17 = objc_msgSend(v0, sel_determination);
      if (v17 == (id)1)
      {
        uint64_t v18 = 0xEB00000000746E65LL;
        uint64_t v19 = 0x646E657065646E69LL;
      }

      else
      {
        if (v17 != (id)2) {
          goto LABEL_19;
        }
        uint64_t v18 = 0xE900000000000074LL;
        uint64_t v19 = 0x6E65646E65706564LL;
      }

      objc_msgSend(v0, sel_determination);
      specialized Dictionary.subscript.setter(v19, v18, 0x6E696D7265746564LL, 0xED00006E6F697461LL);
LABEL_19:
      id v20 = objc_msgSend(v0, sel_definiteness);
      if (!v20) {
        goto LABEL_25;
      }
      uint64_t v21 = 0x6574696E69666564LL;
      if (v20 == (id)2)
      {
        uint64_t v22 = 0xE800000000000000LL;
      }

      else
      {
        if (v20 != (id)1) {
          goto LABEL_82;
        }
        uint64_t v22 = 0xEA00000000006574LL;
        uint64_t v21 = 0x696E696665646E69LL;
      }

      objc_msgSend(v0, sel_definiteness);
      specialized Dictionary.subscript.setter(v21, v22, 0x6574696E69666564LL, 0xEC0000007373656ELL);
LABEL_25:
      unint64_t v23 = (unint64_t)objc_msgSend(v0, sel_grammaticalPerson) - 1;
      if (v23 <= 2)
      {
        uint64_t v24 = 8 * v23;
        uint64_t v25 = *(void *)&aFirst_5[v24];
        uint64_t v26 = *(void *)((char *)&unk_183827D20 + v24);
        objc_msgSend(v0, sel_grammaticalPerson);
        specialized Dictionary.subscript.setter(v25, v26, 0x6E6F73726570LL, 0xE600000000000000LL);
      }

      unint64_t v27 = (unint64_t)objc_msgSend(v0, sel_pronounType) - 1;
      if (v27 <= 2)
      {
        uint64_t v28 = 8 * v27;
        uint64_t v29 = *(void *)&aPersonalreflex[v28];
        uint64_t v30 = *(void *)&aPersonalreflex[v28 + 24];
        objc_msgSend(v0, sel_pronounType);
        specialized Dictionary.subscript.setter(v29, v30, 0x546E756F6E6F7270LL, 0xEB00000000657079LL);
      }

      uint64_t v31 = 0x766973756C636E69LL;
      id v32 = objc_msgSend(v0, sel__clusivity);
      if (v32 == (id)1) {
        goto LABEL_32;
      }
      if (v32 == (id)2)
      {
        uint64_t v31 = 0x766973756C637865LL;
LABEL_32:
        objc_msgSend(v0, sel__clusivity);
        specialized Dictionary.subscript.setter(v31, 0xE900000000000065LL, 0x7469766973756C63LL, 0xE900000000000079LL);
      }

      if (objc_msgSend(v0, sel__adjectival) != (id)1) {
        return v68;
      }
      objc_msgSend(v0, sel__adjectival);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(0x76697463656A6461LL, 0xEA00000000006C61LL);
      uint64_t v36 = *(void *)(v68 + 16);
      BOOL v37 = (v35 & 1) == 0;
      BOOL v38 = __OFADD__(v36, v37);
      uint64_t v39 = v36 + v37;
      if (v38)
      {
        __break(1u);
        goto LABEL_44;
      }

      char v1 = v35;
      if (*(void *)(v68 + 24) >= v39)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          uint64_t v40 = v68;
LABEL_41:
          if ((v1 & 1) != 0)
          {
LABEL_42:
            uint64_t v42 = (void *)(*(void *)(v40 + 56) + 16 * v34);
            swift_bridgeObjectRelease();
            *uint64_t v42 = 0x7461636964657270LL;
            v42[1] = 0xEB00000000657669LL;
LABEL_78:
            swift_bridgeObjectRelease();
            return v40;
          }

uint64_t NSMorphologyPronoun.morphunConstraints()()
{
  char v1 = v0;
  id v2 = objc_msgSend(v0, sel_morphology);
  uint64_t v3 = &selRef__clearContext;
  id v4 = objc_msgSend(v2, sel__morphunConstraints);

  uint64_t v5 = MEMORY[0x18961AFC0];
  uint64_t v6 = MEMORY[0x189617FA8];
  if (MEMORY[0x18961AFC0] + 8LL != MEMORY[0x189617FA8])
  {
    swift_unknownObjectRetain();
    uint64_t v7 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v7) {
      goto LABEL_39;
    }
    id v17 = objc_msgSend(v4, sel_count);
    if (!v17) {
      goto LABEL_38;
    }
    uint64_t v18 = (uint64_t)v17;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    uint64_t v19 = static _DictionaryStorage.allocate(capacity:)();
    id v20 = *(char **)(v19 + 48);
    uint64_t v21 = *(void *)(v19 + 56);
    uint64_t v22 = (void *)v19;
    swift_retain();
    uint64_t v23 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v20, v21, v4, v18);
    if (v23 < 0 || v18 < v23)
    {
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }

    uint64_t v7 = (uint64_t)v22;
    void v22[2] = v23;
    if (!v23)
    {
LABEL_37:
      swift_release();
      uint64_t v5 = MEMORY[0x18961AFC0];
      uint64_t v3 = &selRef__clearContext;
      uint64_t v6 = MEMORY[0x189617FA8];
      goto LABEL_39;
    }

    uint64_t v24 = v23 - 1;
    uint64_t v25 = v22 + 8;
    while (1)
    {
      while (1)
      {
        uint64_t v49 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v24);
        uint64_t v50 = v7;
        uint64_t v51 = *v49;
        uint64_t v52 = v49[1];
        swift_bridgeObjectRetain();
        unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v52);
        char v55 = v54;
        swift_bridgeObjectRelease();
        if ((v55 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v56 = *(void *)(v50 + 16);
        BOOL v36 = __OFSUB__(v56, 1LL);
        uint64_t v57 = v56 - 1;
        if (v36) {
          goto LABEL_151;
        }
        uint64_t v7 = v50;
        *(void *)(v50 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v57;
LABEL_27:
        if (--v24 < 0) {
          goto LABEL_37;
        }
      }

      *(void *)((char *)v25 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v53;
      if (v24 < (uint64_t)v53)
      {
        uint64_t v48 = 16 * v53;
        uint64_t v7 = (uint64_t)v22;
        *(_OWORD *)(v22[6] + v48) = *(_OWORD *)(v22[6] + 16 * v24);
        *(_OWORD *)(v22[7] + v48) = *(_OWORD *)(v22[7] + 16 * v24);
        goto LABEL_27;
      }

      if (v53 == v24)
      {
        --v24;
        uint64_t v7 = (uint64_t)v22;
        if (v24 < 0) {
          goto LABEL_37;
        }
      }

      else
      {
        uint64_t v58 = v22[6];
        uint64_t v59 = 16 * v53;
        uint64_t v7 = (uint64_t)v22;
        uint64_t v60 = (uint64_t *)(v58 + v59);
        uint64_t v61 = (uint64_t *)(v58 + 16 * v24);
        uint64_t v62 = *v60;
        uint64_t v63 = v60[1];
        uint64_t v64 = v61[1];
        *uint64_t v60 = *v61;
        v60[1] = v64;
        *uint64_t v61 = v62;
        v61[1] = v63;
        uint64_t v65 = v22[7];
        uint64_t v66 = (uint64_t *)(v65 + v59);
        unint64_t v67 = (uint64_t *)(v65 + 16 * v24);
        uint64_t v68 = *v66;
        uint64_t v69 = v66[1];
        uint64_t v70 = v67[1];
        *uint64_t v66 = *v67;
        v66[1] = v70;
        *unint64_t v67 = v68;
        v67[1] = v69;
        if (v24 < 0) {
          goto LABEL_37;
        }
      }
    }
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  uint64_t v7 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v7) {
    goto LABEL_39;
  }
  id v8 = objc_msgSend(v4, sel_count);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v11 = *(void **)(v10 + 48);
    uint64_t v12 = *(void *)(v10 + 56);
    uint64_t v13 = (void *)v10;
    swift_retain();
    uint64_t v14 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v11, v12, v4, v9);
    if (v14 < 0 || v9 < v14)
    {
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }

    uint64_t v7 = (uint64_t)v13;
    void v13[2] = v14;
    if (v14)
    {
      int64_t v15 = v14 - 1;
      uint64_t v16 = v13 + 8;
      while (1)
      {
        while (1)
        {
          uint64_t v30 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v15);
          uint64_t v32 = *v30;
          uint64_t v31 = v30[1];
          swift_bridgeObjectRetain();
          unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
          LOBYTE(v32) = v34;
          swift_bridgeObjectRelease();
          if ((v32 & 1) == 0) {
            break;
          }
          swift_arrayDestroy();
          swift_arrayDestroy();
          uint64_t v35 = *(void *)(v7 + 16);
          BOOL v36 = __OFSUB__(v35, 1LL);
          uint64_t v37 = v35 - 1;
          if (v36) {
            goto LABEL_150;
          }
          *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v37;
LABEL_15:
          if (--v15 < 0) {
            goto LABEL_37;
          }
        }

        *(void *)((char *)v16 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v33;
        if (v15 < (uint64_t)v33)
        {
          uint64_t v7 = (uint64_t)v13;
          *(_OWORD *)(v13[6] + 16 * v33) = *(_OWORD *)(v13[6] + 16 * v15);
          uint64_t v26 = v13[7];
          unint64_t v27 = (_OWORD *)(v26 + 32 * v15);
          __int128 v28 = v27[1];
          uint64_t v29 = (_OWORD *)(v26 + 32 * v33);
          *uint64_t v29 = *v27;
          v29[1] = v28;
          goto LABEL_15;
        }

        if (v33 == v15)
        {
          --v15;
          uint64_t v7 = (uint64_t)v13;
          if (v15 < 0) {
            goto LABEL_37;
          }
        }

        else
        {
          uint64_t v38 = v13[6];
          uint64_t v39 = (uint64_t *)(v38 + 16 * v33);
          uint64_t v40 = (uint64_t *)(v38 + 16 * v15);
          uint64_t v41 = *v39;
          uint64_t v42 = v39[1];
          uint64_t v43 = v40[1];
          *uint64_t v39 = *v40;
          v39[1] = v43;
          *uint64_t v40 = v41;
          v40[1] = v42;
          uint64_t v44 = v13[7];
          uint64_t v45 = (_OWORD *)(v44 + 32 * v33);
          unint64_t v46 = (_OWORD *)(v44 + 32 * v15);
          outlined init with take of Any(v45, v195);
          int64_t v47 = v45;
          uint64_t v7 = (uint64_t)v13;
          outlined init with take of Any(v46, v47);
          outlined init with take of Any(v195, v46);
          if (v15 < 0) {
            goto LABEL_37;
          }
        }
      }
    }

    goto LABEL_37;
  }

id @objc NSMorphology.morphunConstraints()(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  return (id)_NativeDictionary.bridged()();
}

uint64_t PredicateExpressions.Conjunction.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.Conjunction.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 52));
}

void PredicateExpressions.Conjunction.init(lhs:rhs:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_1833DCB9C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 52),  v2,  v1);
}

void type metadata accessor for PredicateExpressions.Conjunction()
{
}

uint64_t PredicateExpressions.Conjunction.evaluate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = (uint64_t *)MEMORY[0x1895F8858](a1);
  id v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v6;
  uint64_t v15 = *v6;
  (*(void (**)(char *__return_ptr, uint64_t *, void))(*(void *)(v10 + 32) + 16LL))( (char *)&v16 + 1,  &v15,  *(void *)(v10 + 16));
  if (!v3)
  {
    int v12 = BYTE1(v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a2);
    if (v12 == 1)
    {
      uint64_t v15 = v9;
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, void))(*(void *)(a2 + 40) + 16LL))( &v16,  &v15,  *(void *)(a2 + 24));
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a2);
      char v11 = v16;
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a2);
      char v11 = 0;
    }
  }

  return v11 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Conjunction<A, B>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.Conjunction.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

void static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_1833DCD78(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v3 + *(int *)(a1 + 52),  v2,  v1);
}

uint64_t PredicateExpressions.Conjunction.description.getter()
{
  v0._object = (void *)0x80000001839D2A40LL;
  v0._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x203A736872202CLL;
  v1._object = (void *)0xE700000000000000LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

uint64_t PredicateExpressions.Conjunction<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.Conjunction<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  v12[5] = a5;
  v12[6] = a4;
  v12[9] = a3;
  v12[4] = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  v12[7] = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  v12[8] = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v12[10] = v8;
  v12[11] = v8;
  v12[12] = v9;
  v12[13] = v10;
  v12[14] = v11;
  type metadata accessor for PredicateExpressions.Conjunction();
}

uint64_t sub_1833DD038(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 200) = v6;
  *(void *)(v4 - 192) = a1;
  *(void *)(v4 - 72) = v3;
  *(void *)(v4 - 184) = v8;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  uint64_t v10 = *(void *)(v4 - 144);
  uint64_t v11 = *(void *)(v4 - 128);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v12 = *(void *)(v4 - 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v12, v10, v11);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  uint64_t v13 = *(void *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v14 = *(void *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 176) + 32LL))(v12 + *(int *)(v14 + 52), v13, v2);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  uint64_t v15 = *(void *)(v4 - 200);
  (*(void (**)(void, uint64_t, uint64_t))(v15 + 16))(*(void *)(v4 - 168), v12, v14);
  __swift_destroy_boxed_opaque_existential_1(*(void *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Conjunction<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Conjunction<A, B>( void *a1)
{
  return PredicateExpressions.Conjunction<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Conjunction( uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_1833DD390 + 4 * byte_183827D68[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Conjunction( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t BufferViewIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(_BYTE *)(v6 + 82) & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, *v2, v5);
  }
  else {
    UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, *v2, v5, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a2, 0LL, 1LL, v5);
  uint64_t *v2 = v4 + *(void *)(v6 + 72);
  return result;
}

uint64_t type metadata accessor for BufferViewIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BufferViewIterator);
}

ValueMetadata *type metadata accessor for _XMLPlistDecodingFormat()
{
  return &type metadata for _XMLPlistDecodingFormat;
}

_UNKNOWN **associated type witness table accessor for PlistDecodingFormat.Map : PlistDecodingMap in _XMLPlistDecodingFormat()
{
  return &protocol witness table for XMLPlistMap;
}

double specialized XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  v50[10] = *MEMORY[0x1895F89C0];
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  unsigned int v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  unsigned int v15 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v20 = MEMORY[0x1895F8858](v16);
  uint64_t v21 = (char *)v45 - v18;
  if (v19 >> 60 == 6)
  {
    uint64_t v33 = *(void *)(v19 + 16);
    uint64_t v34 = *(void *)(v19 + 24);
    MEMORY[0x1895F8858](v17);
    v45[-4] = a5;
    v45[-3] = a6;
    v45[-2] = v49;
    v45[-1] = a3;
    uint64_t v35 = *(void *)(v48 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v35 + 40));
    BOOL v36 = v47;
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v35 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:),  v33,  v34,  v50);
    os_unfair_lock_unlock((os_unfair_lock_t)(v35 + 40));
    swift_release();
    if (!v36) {
      return *(double *)v50;
    }
  }

  else
  {
    uint64_t v46 = a6;
    if (v19 >> 60 == 7)
    {
      _OWORD v45[2] = (uint64_t)v45;
      uint64_t v22 = *(void *)(v19 + 24);
      v45[0] = *(void *)(v19 + 16);
      MEMORY[0x1895F8858](v17);
      v45[1] = (uint64_t)v45;
      v45[-6] = a5;
      v45[-5] = a6;
      uint64_t v23 = v49;
      v45[-4] = v24;
      v45[-3] = v23;
      v45[-2] = a3;
      uint64_t v25 = *(void *)(v48 + 24);
      uint64_t v26 = v24;
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v25 + 40));
      unint64_t v27 = v47;
      specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v25 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))_s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TA_0,  v45[0],  v22,  v50);
      os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 40));
      swift_release();
      if (v27)
      {

        uint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        uint64_t v29 = *(void *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        MEMORY[0x1895F8858](v30);
        uint64_t v31 = v46;
        v45[-6] = a5;
        v45[-5] = v31;
        v45[-4] = v26;
        v45[-3] = v23;
        v45[-2] = a3;
        uint64_t v32 = *(void *)(v48 + 24);
        swift_retain();
        os_unfair_lock_lock((os_unfair_lock_t)(v32 + 40));
        specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v32 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))_s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs5Int64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TA_0,  v28,  v29,  v50);
        os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 40));
        swift_release();
        return (double)v50[0];
      }

      else
      {
        return (double)v50[0];
      }
    }

    else
    {
      uint64_t v48 = v19;
      uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
      v37((char *)v45 - v18, a3, v12, v20);
      ((void (*)(char *, char *, uint64_t))v37)(v15, v21, v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1LL, a5) == 1)
      {
        uint64_t v38 = *(void (**)(char *, uint64_t))(v13 + 8);
        v38(v15, v12);
        _CodingPathNode.path.getter(v49);
        v38(v21, v12);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, a5);
        uint64_t v39 = _CodingPathNode.path.getter(v49);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v41 = v46;
        *(void *)(inited + 56) = a5;
        *(void *)(inited + 64) = v41;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v11, a5);
        v50[0] = v39;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a5);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x189618560], v48, v43);
      swift_bridgeObjectRelease();
      swift_willThrow();
    }
  }

  return result;
}

uint64_t static _XMLPlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = a3;
  if (a2 >> 60 != 2)
  {
    if (a2 >> 60 == 8 && a2 == 0x8000000000000000LL)
    {
      uint64_t v7 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v9 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      unint64_t v10 = *(void *)(v5 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v10);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  *MEMORY[0x189619368],  v7);
      return swift_willThrow();
    }

    else
    {
      unint64_t v12 = *(void *)(a3 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v12);
      swift_release();
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v13, a2, v14);
      swift_bridgeObjectRelease();
      return swift_willThrow();
    }
  }

  unint64_t v17 = *(void *)(a2 + 16);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v61 = (void *)MEMORY[0x18961AFF0];
  Swift::Int v18 = v16 / 2;
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : XMLPlistMap.Value]);
  Dictionary.reserveCapacity(_:)(v18);
  uint64_t v56 = v61;
  swift_retain();
  XMLPlistMap.loadValue(at:)(v17);
  if ((~v19 & 0xF000000000000007LL) == 0)
  {
LABEL_7:
    swift_release();
    swift_release_n();
    uint64_t v58 = v5;
    uint64_t v59 = v56;
    unint64_t v60 = a4;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    type metadata accessor for _PlistKeyedDecodingContainer();
  }

  unint64_t v20 = v19;
  uint64_t v52 = v5;
  unint64_t v51 = a4;
  while (1)
  {
    Swift::Int v25 = XMLPlistMap.offset(after:)(v17);
    XMLPlistMap.loadValue(at:)(v25);
    if ((~v26 & 0xF000000000000007LL) == 0) {
      goto LABEL_32;
    }
    unint64_t v57 = v26;
    Swift::Int v27 = XMLPlistMap.offset(after:)(v25);
    unint64_t v28 = v20 >> 60;
    if (v20 == 0x8000000000000000LL && (_DWORD)v28 == 8)
    {
      uint64_t v61 = v56;
      uint64_t v46 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v48 = v47;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v48 = MEMORY[0x189617FA8];
      _CodingPathNode.path.getter(a4);
      _StringGuts.grow(_:)(50LL);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v46 - 8) + 104LL))( v48,  *MEMORY[0x189619368],  v46);
      swift_willThrow();
      unint64_t v49 = v57;
LABEL_27:
      outlined consume of XMLPlistMap.Value(v49);
      swift_release();
LABEL_29:
      swift_release_n();
      swift_release();
      swift_release_n();
      return swift_bridgeObjectRelease();
    }

    uint64_t v29 = *(void *)(v5 + 24);
    if ((_DWORD)v28)
    {
      uint64_t v61 = v56;
      outlined copy of XMLPlistMap.Value(v20);
      swift_retain();
      _CodingPathNode.path.getter(a4);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x189617FA8], v20, v50);
      swift_bridgeObjectRelease();
      swift_willThrow();
      swift_release();
      outlined consume of XMLPlistMap.Value(v20);
      outlined consume of XMLPlistMap.Value(v57);
      unint64_t v49 = v20;
      goto LABEL_27;
    }

    uint64_t v55 = *(void *)(v20 + 16);
    unint64_t v53 = v27;
    uint64_t v54 = *(void *)(v20 + 24);
    MEMORY[0x1895F8858](v27);
    uint64_t v30 = *(void *)(v29 + 24);
    outlined copy of XMLPlistMap.Value(v20);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v30 + 16),  (void *(*)(void *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:),  v55,  v54,  &v58);
    if (v4)
    {
      uint64_t v61 = v56;
      os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
      swift_release();
      swift_release();
      outlined consume of XMLPlistMap.Value(v20);
      outlined consume of XMLPlistMap.Value(v57);
      outlined consume of XMLPlistMap.Value(v20);
      swift_release();
      goto LABEL_29;
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    swift_release();
    uint64_t v32 = v58;
    uint64_t v31 = (uint64_t)v59;
    outlined copy of XMLPlistMap.Value(v57);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
    uint64_t v36 = v56[2];
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    char v39 = v34;
    if (v56[3] >= v38)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }

    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v38,  isUniquelyReferenced_nonNull_native);
      unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_33;
      }
      unint64_t v35 = v40;
    }

    if ((v39 & 1) != 0)
    {
      uint64_t v21 = v56[7];
      uint64_t v22 = 8 * v35;
      outlined consume of XMLPlistMap.Value(*(void *)(v21 + 8 * v35));
      unint64_t v23 = v57;
      *(void *)(v21 + v22) = v57;
    }

    else
    {
      v56[(v35 >> 6) + 8] |= 1LL << v35;
      uint64_t v42 = (uint64_t *)(v56[6] + 16 * v35);
      *uint64_t v42 = v32;
      v42[1] = v31;
      *(void *)(v56[7] + 8 * v35) = v57;
      uint64_t v43 = v56[2];
      BOOL v44 = __OFADD__(v43, 1LL);
      uint64_t v45 = v43 + 1;
      if (v44) {
        goto LABEL_31;
      }
      unint64_t v23 = v57;
      v56[2] = v45;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of XMLPlistMap.Value(v20);
    outlined consume of XMLPlistMap.Value(v23);
    outlined consume of XMLPlistMap.Value(v20);
    unint64_t v17 = v53;
    XMLPlistMap.loadValue(at:)(v53);
    unint64_t v20 = v24;
    a4 = v51;
    uint64_t v5 = v52;
    if ((~v24 & 0xF000000000000007LL) == 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static _XMLPlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:)@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 >> 60 == 1)
  {
    uint64_t v16 = *(void *)(a1 + 16);
    uint64_t v17 = *(void *)(a1 + 24);
    uint64_t v18 = *(void *)(a2 + 24);
    a4[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat>);
    a4[4] = lazy protocol witness table accessor for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>();
    uint64_t v19 = swift_allocObject();
    *a4 = v19;
    *(void *)(v19 + 32) = v18;
    *(void *)(v19 + 40) = 0xF000000000000007LL;
    *(void *)(v19 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a2;
    *(void *)(v19 + 24) = v16;
    *(void *)(v19 + 64) = 0LL;
    *(void *)(v19 + 72) = a3;
    *(void *)(v19 + 48) = v17;
    *(_BYTE *)(v19 + 56) = 0;
    swift_retain();
    swift_retain();
    return swift_retain();
  }

  else
  {
    if (a1 >> 60 == 8 && a1 == 0x8000000000000000LL)
    {
      uint64_t v7 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v9 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      unint64_t v10 = *(void *)(a2 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v10);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  *MEMORY[0x189619368],  v7);
    }

    else
    {
      unint64_t v11 = *(void *)(a2 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v11);
      swift_release();
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v12, a1, v13);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

uint64_t static _XMLPlistDecodingFormat.unwrapBool<A>(from:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a5;
  unint64_t v31 = a2;
  uint64_t v33 = *MEMORY[0x1895F89C0];
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v17 = MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v29 - v15;
  if (v16 >> 60 == 5)
  {
    char v19 = *(_BYTE *)(v16 + 16);
  }

  else
  {
    unint64_t v29 = v16;
    unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
    v20((char *)&v29 - v15, a3, v10, v17);
    ((void (*)(char *, char *, uint64_t))v20)(v13, v18, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1LL, a4) == 1)
    {
      uint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
      v21(v13, v10);
      _CodingPathNode.path.getter(v31);
      v21(v18, v10);
    }

    else
    {
      uint64_t v22 = v9;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, a4);
      uint64_t v23 = _CodingPathNode.path.getter(v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v25 = v30;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v25;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(boxed_opaque_existential_1, v22, a4);
      uint64_t v32 = v23;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v22, a4);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1896184C8], v29, v27);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  return v19 & 1;
}

uint64_t static _XMLPlistDecodingFormat.unwrapDate<A>(from:in:for:_:)@<X0>( uint64_t a1@<X1>, os_unfair_lock_s *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return XMLPlistMap.Value.dateValue<A>(in:for:_:)(a1, a2, a3, a4, a5, a6);
}

uint64_t static _XMLPlistDecodingFormat.unwrapData<A>(from:in:for:_:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return XMLPlistMap.Value.dataValue<A>(in:for:_:)(a2, a3, a4, a1, a5, a6);
}

uint64_t static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)( uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v38 = a2;
  v40[11] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  BOOL v37 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v20 = MEMORY[0x1895F8858](v16);
  uint64_t v21 = (char *)&v36 - v18;
  if (v19 >> 60)
  {
    unint64_t v38 = a3;
    unint64_t v39 = v19;
    uint64_t v36 = a6;
    unint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
    v28((char *)&v36 - v18, a4, v12, v20);
    ((void (*)(char *, char *, uint64_t))v28)(v15, v21, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1LL, a5) == 1)
    {
      unint64_t v29 = *(void (**)(char *, uint64_t))(v13 + 8);
      v29(v15, v12);
      _CodingPathNode.path.getter(v38);
      v29(v21, v12);
    }

    else
    {
      uint64_t v30 = v37;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v37, v15, a5);
      uint64_t v31 = _CodingPathNode.path.getter(v38);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v33 = v36;
      *(void *)(inited + 56) = a5;
      *(void *)(inited + 64) = v33;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v30, a5);
      v40[0] = v31;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v30, a5);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x189617FA8], v39, v35);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  else
  {
    uint64_t v22 = *(void *)(v19 + 16);
    uint64_t v23 = *(void *)(v19 + 24);
    MEMORY[0x1895F8858](v17);
    *(&v36 - 6) = a5;
    *(&v36 - 5) = a6;
    *((_BYTE *)&v36 - 32) = v24;
    *(&v36 - 3) = a3;
    *(&v36 - 2) = a4;
    uint64_t v25 = *(void *)(v38 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v25 + 40));
    uint64_t v26 = v39;
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v25 + 16),  (void *(*)(void *__return_ptr, uint64_t, uint64_t))partial apply for closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:),  v22,  v23,  v40);
    os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 40));
    uint64_t result = swift_release();
    if (!v26) {
      return v40[0];
    }
  }

  return result;
}

uint64_t specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  if ((a5 & 1) != 0)
  {
    uint64_t v14 = static String._tryFromUTF8(_:)();
    if (v15) {
      return v14;
    }
    uint64_t v22 = a10;
    uint64_t v16 = a9;
    *(void *)&__int128 v77 = 0LL;
    *((void *)&v77 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(55LL);
    v49._uint64_t countAndFlagsBits = 0xD000000000000035LL;
    v49._object = (void *)0x80000001839D2A60LL;
    String.append(_:)(v49);
    v50._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    unint64_t v74 = 0xE000000000000000LL;
    if (a10 == 0xFF)
    {
      char v55 = -1;
      swift_retain();
LABEL_133:
      uint64_t v61 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v63 = v62;
      outlined copy of _CodingKey?(a7, a8, a9, v55);
      _CodingPathNode.path.getter(a6);
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v61 - 8) + 104LL))( v63,  *MEMORY[0x189619360],  v61);
      swift_bridgeObjectRelease();
      swift_release();
      swift_willThrow();
      return v16;
    }

    unint64_t v51 = (void *)swift_allocObject();
    v51[5] = &type metadata for _CodingKey;
    v51[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v52 = swift_allocObject();
    _OWORD v51[2] = v52;
    *(void *)(v52 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a7;
    *(void *)(v52 + 24) = a8;
    *(void *)(v52 + 32) = a9;
    *(_BYTE *)(v52 + 40) = a10;
    v51[7] = a6;
    if (a6 >> 62)
    {
      if (a6 >> 62 != 1)
      {
        unint64_t v21 = 1LL;
LABEL_132:
        char v55 = a10;
        v51[8] = v21;
        a6 = (unint64_t)v51;
        goto LABEL_133;
      }

      unint64_t v53 = (uint64_t *)((a6 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      unint64_t v53 = (uint64_t *)(a6 + 64);
    }

    uint64_t v60 = *v53;
    swift_retain();
    unint64_t v21 = v60 + 1;
    if (__OFADD__(v60, 1LL))
    {
      __break(1u);
      goto LABEL_136;
    }

    goto LABEL_132;
  }

  uint64_t v16 = a3;
  unint64_t v74 = v10;
  unint64_t v17 = a1 + a2;
  *(void *)&__int128 v77 = a3;
  *((void *)&v77 + 1) = a4;
  *(void *)&__int128 v78 = a1;
  *((void *)&v78 + 1) = a1;
  unint64_t v79 = a1 + a2;
  if (a2 >= 5)
  {
    if (a3 + a4 < a1)
    {
LABEL_188:
      __break(1u);
      goto LABEL_189;
    }

    if ((uint64_t)(a1 - a3) < 0)
    {
LABEL_189:
      __break(1u);
      goto LABEL_190;
    }

    if ((uint64_t)(a3 + a4 - a1) < 0)
    {
LABEL_190:
      __break(1u);
      goto LABEL_191;
    }

    if (*(_DWORD *)a1 == 1819635236 && *(_BYTE *)(a1 + 4) == 108) {
      return 0LL;
    }
    uint64_t v75 = 0LL;
    uint64_t v76 = 0LL;
  }

  else
  {
    uint64_t v75 = 0LL;
    uint64_t v76 = 0LL;
    if (a2 < 1)
    {
      a6 = a1;
      goto LABEL_7;
    }
  }

  a6 = a1;
  unint64_t v73 = a1;
LABEL_23:
  if (v17 < a6) {
    goto LABEL_181;
  }
  uint64_t v22 = v17 - a6;
  unint64_t v23 = v16 + a4;
  int v24 = *(unsigned __int8 *)a6;
  if (v24 == 38)
  {
    if (v76)
    {
      if (a6 < a1)
      {
LABEL_191:
        __break(1u);
        goto LABEL_192;
      }

      if ((uint64_t)(a1 - v16) < 0)
      {
LABEL_192:
        __break(1u);
        goto LABEL_193;
      }

      if ((uint64_t)(a6 - a1) < 0)
      {
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
        goto LABEL_199;
      }

      uint64_t v22 = a4;
      uint64_t v28 = static String._tryFromUTF8(_:)();
      if (!v29) {
        goto LABEL_129;
      }
      String.append(_:)(*(Swift::String *)&v28);
      swift_bridgeObjectRelease();
    }

    else
    {
      if (a6 < a1)
      {
LABEL_199:
        __break(1u);
        goto LABEL_200;
      }

      if ((uint64_t)(a1 - v16) < 0)
      {
LABEL_200:
        __break(1u);
        goto LABEL_201;
      }

      if ((uint64_t)(a6 - a1) < 0)
      {
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
        goto LABEL_207;
      }

      uint64_t v22 = a4;
      uint64_t v30 = static String._tryFromUTF8(_:)();
      uint64_t v32 = v31;
      swift_bridgeObjectRelease();
      uint64_t v75 = v30;
      uint64_t v76 = v32;
      if (!v32) {
        goto LABEL_129;
      }
    }

    unint64_t v21 = a6 + 1;
    *((void *)&v78 + 1) = a6 + 1;
    unint64_t v33 = v17 - (a6 + 1);
    if ((uint64_t)v33 < 1)
    {
LABEL_118:
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(_OWORD *)uint64_t v54 = 0u;
      *(_OWORD *)(v54 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
      *(_BYTE *)(v54 + 32) = 0;
      goto LABEL_175;
    }

    char v34 = (_DWORD *)(a6 + 2);
    if (v17 < a6 + 2)
    {
LABEL_138:
      uint64_t v88 = v16;
      uint64_t v89 = v22;
      uint64_t v90 = v78;
      unint64_t v91 = v21;
      unint64_t v92 = v17;
      goto LABEL_172;
    }

    if ((uint64_t)(v21 - v16) >= 0)
    {
      switch(*(_BYTE *)v21)
      {
        case 'a':
          if (v33 < 4) {
            goto LABEL_118;
          }
          unint64_t v47 = v74;
          if (*(_WORD *)v34 == 28781 && *(_BYTE *)(a6 + 4) == 59)
          {
            unint64_t v35 = a6 + 5;
          }

          else
          {
            if (v33 < 5 || *v34 != 997420912)
            {
              __int128 v80 = v77;
              __int128 v81 = v78;
              unint64_t v82 = v79;
              goto LABEL_172;
            }

            unint64_t v35 = a6 + 6;
          }

uint64_t closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  unint64_t v68 = a6;
  uint64_t v18 = *(void *)(a8 - 8);
  uint64_t v55 = a7;
  uint64_t v56 = v18;
  MEMORY[0x1895F8858](a1);
  uint64_t v54 = (char *)v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v23);
  if ((a5 & 1) != 0)
  {
    uint64_t v52 = (char *)v51 - v25;
    uint64_t v53 = v24;
    uint64_t v27 = v26;
    uint64_t result = static String._tryFromUTF8(_:)();
    if (v29)
    {
      *a9 = result;
      a9[1] = v29;
      return result;
    }

    uint64_t v63 = a3;
    unint64_t v64 = a4;
    uint64_t v65 = a1;
    uint64_t v66 = a1;
    uint64_t v67 = a1 + a2;
    uint64_t v58 = 0LL;
    unint64_t v59 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(55LL);
    v31._object = (void *)0x80000001839D2A60LL;
    v31._uint64_t countAndFlagsBits = 0xD000000000000035LL;
    String.append(_:)(v31);
    v57[0] = BufferReader.lineNumber.getter();
    v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    _OWORD v51[2] = v58;
    v51[1] = v59;
    uint64_t v33 = v27;
    char v34 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    unint64_t v35 = v52;
    uint64_t v36 = v53;
    v34(v52, v55, v53);
    v34(v22, (uint64_t)v35, v36);
    uint64_t v37 = v56;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v22, 1LL, a8) == 1)
    {
      uint64_t v38 = *(void (**)(char *, uint64_t))(v33 + 8);
      v38(v35, v36);
      v38(v22, v36);
      unint64_t v39 = v68;
      swift_retain();
LABEL_14:
      uint64_t v48 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v50 = v49;
      _CodingPathNode.path.getter(v39);
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v48 - 8) + 104LL))( v50,  *MEMORY[0x189619360],  v48);
      swift_bridgeObjectRelease();
      swift_release();
      return swift_willThrow();
    }

    unint64_t v40 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    unint64_t v41 = v54;
    v40(v54, v22, a8);
    uint64_t v42 = (uint64_t *)swift_allocObject();
    v42[5] = a8;
    v42[6] = a10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v42 + 2);
    v40((char *)boxed_opaque_existential_1, v41, a8);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v36);
    unint64_t v44 = v68;
    v42[7] = v68;
    if (v44 >> 62)
    {
      if (v44 >> 62 != 1)
      {
        uint64_t v47 = 1LL;
LABEL_13:
        v42[8] = v47;
        unint64_t v39 = (unint64_t)v42;
        goto LABEL_14;
      }

      uint64_t v45 = (uint64_t *)((v44 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v45 = (uint64_t *)(v44 + 64);
    }

    uint64_t v46 = *v45;
    uint64_t result = swift_retain();
    uint64_t v47 = v46 + 1;
    if (__OFADD__(v46, 1LL))
    {
      __break(1u);
      return result;
    }

    goto LABEL_13;
  }

  uint64_t v58 = a3;
  unint64_t v59 = a4;
  uint64_t v60 = a1;
  uint64_t v61 = a1;
  uint64_t v62 = a1 + a2;
  uint64_t result = (uint64_t)specialized static XMLPlistScanner.parseString(with:generate:)(&v58, 1, (uint64_t)v57);
  if (!v10)
  {
    uint64_t v30 = v57[3];
    *a9 = v57[2];
    a9[1] = v30;
  }

  return result;
}

uint64_t static _XMLPlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:)@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(a2, a5, a3, a4, a1, a5, a6, a7, a9, a8);
}

void static _XMLPlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v65 = a8;
  uint64_t v66 = (char *)a4;
  uint64_t v60 = a9;
  uint64_t v61 = a7;
  unint64_t v67 = a3;
  uint64_t v71 = *MEMORY[0x1895F89C0];
  uint64_t v59 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v58 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v58 - v17;
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&v58 - v21;
  unint64_t v64 = (char *)a5;
  uint64_t v23 = *(void *)(a5 - 8);
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v26 >> 60 == 7)
  {
    uint64_t v40 = *(void *)(v26 + 16);
    uint64_t v41 = *(void *)(v26 + 24);
    MEMORY[0x1895F8858](v25);
    uint64_t v42 = v68;
    *(&v58 - 8) = v64;
    *(&v58 - 7) = (char *)v42;
    uint64_t v43 = v65;
    *(&v58 - 6) = v61;
    *(&v58 - 5) = (char *)v43;
    unint64_t v44 = v67;
    *(&v58 - 4) = v45;
    *(&v58 - 3) = (char *)v44;
    *(&v58 - 2) = v66;
    uint64_t v46 = *(void *)(v62 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v46 + 40));
    closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v46 + 16),  (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:),  (uint64_t)(&v58 - 10),  v40,  v41);
    os_unfair_lock_unlock((os_unfair_lock_t)(v46 + 40));
    swift_release();
    return;
  }

  if (v26 >> 60 == 6)
  {
    uint64_t v30 = v63;
    double v31 = specialized XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(v62, v67, (uint64_t)v66, v26, v68, v65);
    if (v30) {
      return;
    }
    double v69 = v31;
    lazy protocol witness table accessor for type Double and conformance Double();
    uint64_t v32 = (uint64_t)v64;
    dispatch thunk of FloatingPoint.init<A>(_:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1LL, v32) != 1)
    {
      uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
      v57(v29, v22, v32);
      v57(v60, v29, v32);
      return;
    }

    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    double v69 = 0.0;
    unint64_t v70 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(52LL);
    v33._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v33._object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v33);
    Double.write<A>(to:)();
    v34._object = (void *)0x80000001839D1400LL;
    v34._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v34);
    v35._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 46LL;
    v36._object = (void *)0xE100000000000000LL;
    String.append(_:)(v36);
    uint64_t v37 = *(void *)&v69;
    uint64_t v38 = v70;
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(v37, v38, v67, (uint64_t)v66, v68, v65, v39);
  }

  else
  {
    unint64_t v63 = v26;
    uint64_t v47 = *(void (**)(char *, char *, uint64_t, __n128))(v13 + 16);
    v47(v18, v66, v12, v27);
    ((void (*)(char *, char *, uint64_t))v47)(v15, v18, v12);
    uint64_t v48 = v59;
    uint64_t v49 = v68;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v15, 1LL, v68) == 1)
    {
      uint64_t v50 = *(void (**)(char *, uint64_t))(v13 + 8);
      v50(v15, v12);
      _CodingPathNode.path.getter(v67);
      v50(v18, v12);
    }

    else
    {
      unint64_t v51 = v58;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v58, v15, v49);
      uint64_t v52 = _CodingPathNode.path.getter(v67);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v54 = v65;
      *(void *)(inited + 56) = v49;
      *(void *)(inited + 64) = v54;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v48 + 16))(boxed_opaque_existential_1, v51, v49);
      double v69 = *(double *)&v52;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v49);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)((uint64_t)v64, v63, v56);
  }

  swift_bridgeObjectRelease();
  swift_willThrow();
}

uint64_t protocol witness for static PlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:) in conformance _XMLPlistDecodingFormat( uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  return static _XMLPlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:)(a1, *a2, a3, a4);
}

uint64_t protocol witness for static PlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:) in conformance _XMLPlistDecodingFormat@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return static _XMLPlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:)(*a1, a2, a3, a4);
}

BOOL protocol witness for static PlistDecodingFormat.valueIsNull(_:) in conformance _XMLPlistDecodingFormat( void *a1)
{
  return *a1 == 0x8000000000000000LL;
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapBool<A>(from:for:_:) in conformance _XMLPlistDecodingFormat( uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static _XMLPlistDecodingFormat.unwrapBool<A>(from:for:_:)(*a1, a2, a3, a4, a5) & 1;
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapDate<A>(from:in:for:_:) in conformance _XMLPlistDecodingFormat@<X0>( uint64_t a1@<X1>, os_unfair_lock_s *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return static _XMLPlistDecodingFormat.unwrapDate<A>(from:in:for:_:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapData<A>(from:in:for:_:) in conformance _XMLPlistDecodingFormat( uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _XMLPlistDecodingFormat.unwrapData<A>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapString<A>(from:in:for:_:) in conformance _XMLPlistDecodingFormat( uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:) in conformance _XMLPlistDecodingFormat@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static _XMLPlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void protocol witness for static PlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:) in conformance _XMLPlistDecodingFormat( uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
}

uint64_t partial apply for closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)( a1,  a2,  a3,  a4,  *(void *)(v5 + 56),  *(void *)(v5 + 64),  *(void *)(v5 + 16),  a5,  *(void *)(v5 + 24),  *(void *)(v5 + 32),  *(void *)(v5 + 40));
}

void *specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)@<X0>( void *result@<X0>, void *(*a2)(void *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }

  else
  {
    uint64_t result = a2(v11, *result + a3, a4);
    if (!v5)
    {
      uint64_t v10 = v11[1];
      *a5 = v11[0];
      a5[1] = v10;
    }
  }

  return result;
}

uint64_t specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t result = specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)( a1,  a2,  a3,  a4,  a5,  a6,  *(void *)a7,  *(void *)(a7 + 8),  *(void *)(a7 + 16),  *(_BYTE *)(a7 + 24));
  if (!v8)
  {
    *a8 = result;
    a8[1] = v11;
  }

  return result;
}

unint64_t specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unint64_t *a8@<X8>, uint64_t a9)
{
  unint64_t result = specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a9,  (uint64_t (*)(unint64_t, unint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  specialized _parseIntegerDigits<A>(_:isNegative:));
  if (!v9) {
    *a8 = result;
  }
  return result;
}

{
  uint64_t v9;
  unint64_t result;
  unint64_t result = specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a9,  (uint64_t (*)(unint64_t, unint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(void))specialized _parseIntegerDigits<A>(_:isNegative:));
  if (!v9) {
    *a8 = result;
  }
  return result;
}

void *specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)@<X0>( void *a1@<X0>, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  return specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(a1, a2, a3, a4, a5);
}

void partial apply for specialized closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)( const char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!v4) {
    *a3 = v6;
  }
}

void *specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)@<X0>( void *result@<X0>, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = a2(&v10, *result + a3, a4);
    if (!v5) {
      *a5 = v10;
    }
  }

  return result;
}

{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = a2(&v10, *result + a3, a4);
    if (!v5) {
      *a5 = v10;
    }
  }

  return result;
}

unint64_t _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TA_0@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  return _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TATm_0( a1,  a2,  a3,  a4,  (uint64_t (*)(unint64_t, unint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(void))specialized _parseIntegerDigits<A>(_:isNegative:),  a5);
}

unint64_t _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs5Int64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TA_0@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  return _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TATm_0( a1,  a2,  a3,  a4,  (uint64_t (*)(unint64_t, unint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  specialized _parseIntegerDigits<A>(_:isNegative:),  a5);
}

unint64_t _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TATm_0@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unint64_t, unint64_t, uint64_t)@<X4>, uint64_t (*a6)(void)@<X5>, unint64_t *a7@<X8>)
{
  unint64_t result = specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)( a1,  a2,  a3,  a4,  *(void *)(v7 + 40),  *(void *)(v7 + 48),  *(void *)(v7 + 16),  *(void *)(v7 + 24),  a5,  a6);
  if (!v8) {
    *a7 = result;
  }
  return result;
}

unint64_t specialized XMLPlistMap.Value._parseXMLPlistInteger<A>(_:)( unint64_t result, uint64_t (*a2)(unint64_t, unint64_t, uint64_t), uint64_t (*a3)(void))
{
  uint64_t v3 = *(unsigned __int8 **)(result + 24);
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v7 = result;
  uint64_t v8 = *(void *)result;
  uint64_t v9 = *(void *)(result + 8);
  uint64_t v10 = v3 + 1;
  if (v4 < (unint64_t)(v3 + 1))
  {
    uint64_t v11 = 0LL;
    goto LABEL_11;
  }

  if ((uint64_t)&v3[-v8] < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  if (((v4 - (void)v3) & 0x8000000000000000LL) != 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  if ((uint64_t)(v8 + v9 - v4) >= 0)
  {
    uint64_t v11 = 0LL;
    int v12 = *v3;
    if (v12 != 43)
    {
      if (v12 != 45) {
        goto LABEL_11;
      }
      uint64_t v11 = 1LL;
    }

    *(void *)(result + 24) = v10;
    specialized XMLPlistMap.Value._skipIntegerWhitespace(_:)((void *)result);
LABEL_11:
    unint64_t result = *(void *)(v7 + 24);
    if (v4 < result)
    {
      __break(1u);
    }

    else if ((uint64_t)(result - v8) >= 0)
    {
      if ((uint64_t)(v4 - result) >= 0)
      {
        if ((uint64_t)(v8 + v9 - v4) >= 0)
        {
          unint64_t v13 = result + 2;
          unint64_t v14 = v4 - (result + 2);
          *(void *)(v7 + 24) = v13;
          if ((((v13 - v8) | v14) & 0x8000000000000000LL) == 0) {
            return a2(result + 2, v14, v11);
          }
          goto LABEL_29;
        }

        goto LABEL_25;
      }

unint64_t specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)( unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(unint64_t, unint64_t, uint64_t), uint64_t (*a10)(void))
{
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  unint64_t v35 = a5;
  uint64_t v36 = a6;
  uint64_t v14 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v18 = (unint64_t)&a1[a2];
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v43 = a1;
  unint64_t v44 = (unint64_t)a1;
  uint64_t v45 = &a1[a2];
  if (a2 >= 1)
  {
    while (v18 >= (unint64_t)a1)
    {
      unsigned int v19 = *a1;
      if (v19 < 0x21 || (v19 - 127) <= 0x21u)
      {
        ++a1;
      }

      else
      {
        if ((v19 & 0xC0) == 0x80) {
          goto LABEL_28;
        }
        if ((v19 & 0x80) != 0)
        {
          unint64_t v22 = (__clz(v19 ^ 0xFF) - 24);
          switch(v22)
          {
            case 1uLL:
              goto LABEL_28;
            case 2uLL:
              if ((a1[1] & 0xC0) != 0x80) {
                goto LABEL_28;
              }
              uint64_t v20 = 2LL;
              break;
            case 3uLL:
              if ((a1[1] & 0xC0) != 0x80 || (a1[2] & 0xC0) != 0x80) {
                goto LABEL_28;
              }
              uint64_t v20 = 3LL;
              break;
            case 4uLL:
              if ((a1[1] & 0xC0) != 0x80 || (a1[2] & 0xC0) != 0x80 || (a1[3] & 0xC0) != 0x80) {
                goto LABEL_28;
              }
              uint64_t v20 = 4LL;
              break;
            default:
              goto LABEL_72;
          }
        }

        else
        {
          uint64_t v20 = 1LL;
        }

        Unicode.Scalar.properties.getter();
        char v21 = Unicode.Scalar.Properties.isWhitespace.getter();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
        a1 = (unsigned __int8 *)v44;
        unint64_t v18 = (unint64_t)v45;
        if ((v21 & 1) == 0) {
          goto LABEL_28;
        }
        a1 = (unsigned __int8 *)(v44 + v20);
        a3 = v41;
        a4 = v42;
      }

      unint64_t v44 = (unint64_t)a1;
    }

    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1833E0A60LL);
  }

uint64_t specialized closure #1 in static XMLPlistMap.Value.parseSpecialRealValue<A, B>(_:fullSource:for:_:)( const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2)
  {
    _StringGuts.grow(_:)(40LL);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(0xD000000000000026LL, 0x80000001839CA140LL, a3, a4, a5, a6, v14);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  int v6 = *(unsigned __int8 *)a1;
  unsigned int v7 = v6 & 0xFFFFFFDF;
  if (a2 == 3 && v7 == 78)
  {
    return 0LL;
  }

  if (a2 != 9 || v6 != 43)
  {
    if (a2 == 4 && v6 == 43)
    {
      if ((*((unsigned __int8 *)a1 + 1) | 0x20) == 0x69
        && (*((unsigned __int8 *)a1 + 2) | 0x20) == 0x6E
        && (*((unsigned __int8 *)a1 + 3) | 0x20) == 0x66)
      {
        return 0x7FF0000000000000LL;
      }

      return 0LL;
    }

    if (a2 == 9 && v6 == 45)
    {
      if (_stringshims_strncasecmp_l(a1, "-infinity", 9uLL, 0LL)) {
        return 0LL;
      }
    }

    else
    {
      if (a2 != 4 || v6 != 45)
      {
        if (a2 != 8 || v7 != 73) {
          return 0LL;
        }
        uint64_t v15 = "infinity";
        size_t v16 = 8LL;
        goto LABEL_11;
      }

      if ((*((unsigned __int8 *)a1 + 1) | 0x20) != 0x69
        || (*((unsigned __int8 *)a1 + 2) | 0x20) != 0x6E
        || (*((unsigned __int8 *)a1 + 3) | 0x20) != 0x66)
      {
        return 0LL;
      }
    }

    return 0xFFF0000000000000LL;
  }

  uint64_t v15 = "+infinity";
  size_t v16 = 9LL;
LABEL_11:
  if (!_stringshims_strncasecmp_l(a1, v15, v16, 0LL)) {
    return 0x7FF0000000000000LL;
  }
  return 0LL;
}

double specialized closure #1 in closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)( const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v17[1] = *(char **)MEMORY[0x1895F89C0];
  v17[0] = 0LL;
  double v12 = _stringshims_strtod_l(a1, v17, 0LL);
  if (!v17[0]) {
    __break(1u);
  }
  double v13 = v12;
  if (&a1[a2] != v17[0])
  {
    _StringGuts.grow(_:)(40LL);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(0xD000000000000026LL, 0x80000001839CA140LL, a3, a4, a5, a6, v15);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  return v13;
}

void specialized closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)( const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!v6 && (v13 & 1) != 0)
  {
    if (a2 < 1)
    {
LABEL_7:
      specialized closure #1 in closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, a5, a6);
    }

    else
    {
      Swift::String v14 = a1;
      while (2)
      {
        switch(*v14)
        {
          case 9:
          case 0xA:
          case 0xD:
          case 0x20:
          case 0x2B:
          case 0x2D:
          case 0x30:
            if (++v14 >= &a1[a2]) {
              goto LABEL_7;
            }
            continue;
          case 0xB:
          case 0xC:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2C:
          case 0x2E:
          case 0x2F:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x4F:
          case 0x50:
          case 0x51:
          case 0x52:
          case 0x53:
          case 0x54:
          case 0x55:
          case 0x56:
          case 0x57:
            goto LABEL_7;
          case 0x58:
            goto LABEL_10;
          default:
            if (*v14 != 120) {
              goto LABEL_7;
            }
            break;
        }

        break;
      }

uint64_t partial apply for closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)( a1,  a2,  a3,  a4,  *(_BYTE *)(v5 + 32),  *(void *)(v5 + 40),  *(void *)(v5 + 48),  *(void *)(v5 + 16),  a5,  *(void *)(v5 + 24));
}

uint64_t sub_1833E1034()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>;
  if (!lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat>);
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistUnkeyedDecodingContainer<A>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>);
  }

  return result;
}

uint64_t sub_1833E10B0()
{
  unint64_t v1 = *(void *)(v0 + 40);
  if ((~v1 & 0xF000000000000007LL) != 0) {
    outlined consume of XMLPlistMap.Value(v1);
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)( a1,  a2,  a3,  a4,  *(_BYTE *)(v5 + 16),  *(void *)(v5 + 24),  *(void *)(v5 + 32),  a5);
}

uint64_t sub_1833E1118()
{
  return swift_deallocObject();
}

uint64_t AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)@<X0>( uint64_t result@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6 = *a2;
  char v7 = *a3;
  *(_BYTE *)a6 = result;
  *(_BYTE *)(a6 + 1) = v6;
  *(_BYTE *)(a6 + 2) = v7;
  *(void *)(a6 + 8) = a4;
  *(void *)(a6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
  *(_BYTE *)(a6 + 24) = 0;
  return result;
}

id NSAttributedStringMarkdownParsingOptions.init(_:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = a1[24];
  id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v6, sel_setAllowsExtendedAttributes_, v1);
  objc_msgSend(v6, sel_setInterpretedSyntax_, v2);
  objc_msgSend(v6, sel_setFailurePolicy_, v3);
  if (v4) {
    char v7 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    char v7 = 0LL;
  }
  objc_msgSend(v6, sel_setLanguageCode_, v7);

  objc_msgSend(v6, sel_setAppliesSourcePositionAttributes_, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)( void *a1, uint64_t a2, unint64_t a3, int a4, NSError *a5, NSError *a6, int a7, void *a8)
{
  uint64_t v9 = v8;
  swift_bridgeObjectRetain();
  int v29 = a7;
  if ((a3 & 0x1000000000000000LL) != 0)
  {
    a2 = static String._copying(_:)();
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    a3 = v25;
  }

  if ((a3 & 0x2000000000000000LL) != 0)
  {
    v26[0] = a2;
    v26[1] = a3 & 0xFFFFFFFFFFFFFFLL;
    char v22 = specialized static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)( &v27,  (uint64_t)v26,  (uint64_t)v26 + (HIBYTE(a3) & 0xF),  a4 & 0x1FF01,  a5,  a6,  v29 & 1,  a8);
    if (!v9)
    {
      char v28 = v22 & 1;
      swift_bridgeObjectRelease();
      LOBYTE(v9) = v28;
      goto LABEL_14;
    }
  }

  else
  {
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      uint64_t v18 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v19 = a2 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v18 = _StringObject.sharedUTF8.getter();
    }

    if (v18) {
      uint64_t v20 = v18 + v19;
    }
    else {
      uint64_t v20 = 0LL;
    }
    char v21 = specialized static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)( &v27,  v18,  v20,  a4 & 0x1FF01,  a5,  a6,  v29 & 1,  a8);
    if (!v9)
    {
      LOBYTE(v9) = v21;
      swift_bridgeObjectRelease();
LABEL_14:
      *a1 = v27;
      return v9 & 1;
    }
  }

  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)( void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  char v11 = *a5;
  char v12 = a5[1];
  char v13 = a5[2];
  uint64_t v15 = *((void *)a5 + 1);
  uint64_t v14 = *((void *)a5 + 2);
  char v16 = a5[24];
  uint64_t v17 = *(void **)a6;
  uint64_t v27 = *(void *)(a6 + 8);
  uint64_t v28 = *(void *)(a6 + 16);
  swift_bridgeObjectRetain();
  if ((a3 & 0x1000000000000000LL) != 0)
  {
    a2 = static String._copying(_:)();
    unint64_t v25 = v22;
    swift_bridgeObjectRelease();
    a3 = v25;
    if ((v25 & 0x2000000000000000LL) == 0)
    {
LABEL_3:
      if ((a2 & 0x1000000000000000LL) != 0)
      {
        uint64_t v18 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v19 = a2 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v18 = _StringObject.sharedUTF8.getter();
      }

      char v34 = v11;
      if (v18) {
        uint64_t v20 = v18 + v19;
      }
      else {
        uint64_t v20 = 0LL;
      }
      char v35 = v12;
      char v36 = v13;
      uint64_t v37 = v15;
      uint64_t v38 = v14;
      char v39 = v16;
      uint64_t v31 = v17;
      uint64_t v32 = v27;
      uint64_t v33 = v28;
      char v21 = static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)( &v41,  v18,  v20,  a4,  (uint64_t)&v34,  &v31,  a7,  v43);
      if (!v8)
      {
        LOBYTE(v14) = v21;
        swift_bridgeObjectRelease();
LABEL_14:
        *a1 = v41;
        return v14 & 1;
      }

      goto LABEL_12;
    }
  }

  else if ((a3 & 0x2000000000000000LL) == 0)
  {
    goto LABEL_3;
  }

  v40[0] = a2;
  v40[1] = a3 & 0xFFFFFFFFFFFFFFLL;
  char v34 = v11;
  char v35 = v12;
  char v36 = v13;
  uint64_t v37 = v15;
  uint64_t v38 = v14;
  char v39 = v16;
  uint64_t v31 = v17;
  uint64_t v32 = v27;
  uint64_t v33 = v28;
  char v23 = static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)( &v41,  (uint64_t)v40,  (uint64_t)v40 + (HIBYTE(a3) & 0xF),  a4,  (uint64_t)&v34,  &v31,  a7,  v43);
  if (!v8)
  {
    char v42 = v23 & 1;
    swift_bridgeObjectRelease();
    LOBYTE(v14) = v42;
    goto LABEL_14;
  }

uint64_t AttributedString.init(markdown:options:baseURL:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  char v7 = *a4;
  if (a3[2]) {
    int v8 = 0x10000;
  }
  else {
    int v8 = 0;
  }
  specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)( &v10,  a1,  a2,  *a3 | (a3[1] << 8) | v8,  *((NSError **)a3 + 1),  *((NSError **)a3 + 2),  a3[24],  v7);
  swift_bridgeObjectRelease();
  outlined consume of URL?(v7);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v5) {
    *a5 = v10;
  }
  return result;
}

uint64_t specialized _AttributedStringFromMarkdownCreatorConcrete.init(scope:options:)(char a1)
{
  v1[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes] = 0;
  uint64_t v3 = v1;
  BigString.init()();
  uint64_t v11 = 0LL;
  MEMORY[0x186E20E78](&v11, 8LL);
  uint64_t v4 = v11;
  type metadata accessor for AttributedString.Guts();
  uint64_t v5 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    __int128 v7 = v13;
    *(_OWORD *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v12;
    *(_OWORD *)(v5 + 32) = v7;
    *(_OWORD *)(v5 + 48) = v14;
    *(void *)(v5 + 64) = 0LL;
    *(void *)(v5 + 72) = 0LL;
    *(void *)(v5 + 80) = 0LL;
    *(void *)(v5 + 88) = v4;
    *(void *)&v3[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str] = v5;
    swift_bridgeObjectRelease();
    if ((a1 & 1) != 0)
    {
      specialized static AttributeScope.scopeDescription.getter();
      uint64_t v8 = v9;
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v8 = MEMORY[0x18961AFF0];
    }

    *(void *)&v3[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.attributeTable] = v8;

    v10.receiver = v3;
    v10.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _AttributedStringFromMarkdownCreatorConcrete<AttributeScopes.FoundationAttributes>);
    return (uint64_t)objc_msgSendSuper2(&v10, sel_init);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.init(scope:options:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *MEMORY[0x18961B398];
  int v5 = *a2;
  *((_BYTE *)v2 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes) = 0;
  id v6 = v2;
  BigString.init()();
  uint64_t v16 = 0LL;
  MEMORY[0x186E20E78](&v16, 8LL);
  uint64_t v7 = v16;
  type metadata accessor for AttributedString.Guts();
  uint64_t v8 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    uint64_t v10 = v4 & v3;
    __int128 v11 = v18;
    *(_OWORD *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v17;
    *(_OWORD *)(v8 + 32) = v11;
    *(_OWORD *)(v8 + 48) = v19;
    *(void *)(v8 + 64) = 0LL;
    *(void *)(v8 + 72) = 0LL;
    *(void *)(v8 + 80) = 0LL;
    *(void *)(v8 + 88) = v7;
    *(void *)((char *)v6 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str) = v8;
    swift_bridgeObjectRelease();
    if (v5)
    {
      __int128 v12 = static AttributeScope.scopeDescription.getter(*(void *)(v10 + 80), *(void *)(v10 + 88));
      swift_bridgeObjectRelease();
    }

    else
    {
      __int128 v12 = (void *)MEMORY[0x18961AFF0];
    }

    *(void *)((char *)v6 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.attributeTable) = v12;

    __int128 v14 = (objc_class *)type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete( 0LL,  *(void *)(v10 + 80),  *(void *)(v10 + 88),  v13);
    v15.receiver = v6;
    v15.super_class = v14;
    return (uint64_t)objc_msgSendSuper2(&v15, sel_init);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.append(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    __int128 v4 = *(_OWORD *)(v3 + 16);
    __int128 v5 = *(_OWORD *)(v3 + 48);
    v62[1] = *(_OWORD *)(v3 + 32);
    v62[2] = v5;
    v62[0] = v4;
    uint64_t v6 = *(void *)(v3 + 64);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v3 + 80);
    uint64_t v9 = *(void *)(v3 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v62);
    swift_unknownObjectRetain();
    *(void *)(v1 + v2) = AttributedString.Guts.init(string:runs:)(v62, v6, v7, v8, v9);
    swift_release();
  }

  uint64_t v45 = v2;
  uint64_t v10 = *(_OWORD **)(v1 + v2);
  __int128 v11 = v10[2];
  v61[3] = v10[1];
  v61[4] = v11;
  v61[5] = v10[3];
  uint64_t v49 = v10;
  unint64_t v50 = BigString.startIndex.getter();
  unint64_t v51 = BigString.endIndex.getter();
  uint64_t v52 = v12;
  uint64_t v53 = v13;
  uint64_t v54 = v14;
  uint64_t v15 = one-time initialization token for currentIdentity;
  swift_retain();
  if (v15 != -1) {
LABEL_14:
  }
    swift_once();
  uint64_t v16 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  __int128 v17 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v17);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v16, v59);
  os_unfair_lock_unlock(v17);
  swift_release();
  uint64_t v44 = v59[0];
  uint64_t v55 = v59[0];
  BigString.init()();
  v59[0] = 0LL;
  MEMORY[0x186E20E78](v59, 8LL);
  uint64_t v18 = v59[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v19 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    *(_OWORD *)(v19 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v56;
    *(_OWORD *)(v19 + 32) = v57;
    *(_OWORD *)(v19 + 48) = v58;
    *(void *)(v19 + 64) = 0LL;
    *(void *)(v19 + 72) = 0LL;
    *(void *)(v19 + 80) = 0LL;
    *(void *)(v19 + 88) = v18;
    uint64_t v21 = v45;
    *(void *)(v1 + v45) = v19;
    swift_release();
    Swift::String_optional v23 = String.Iterator.next()();
    uint64_t countAndFlagsBits = v23.value._countAndFlagsBits;
    if (v23.value._object)
    {
      object = v23.value._object;
      uint64_t v43 = v1;
      do
      {
        if (v51 >> 10 < v50 >> 10)
        {
          __break(1u);
          goto LABEL_14;
        }

        __int128 v25 = v49[1];
        __int128 v26 = v49[3];
        v61[1] = v49[2];
        v61[2] = v26;
        v61[0] = v25;
        __int128 v27 = v49[1];
        v63[1] = v49[2];
        _OWORD v63[2] = v26;
        v63[0] = v27;
        uint64_t v48 = countAndFlagsBits;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v63, (uint64_t)v64);
        outlined retain of Locale((uint64_t)v64);
        uint64_t v28 = MEMORY[0x186E1AE90](v51, v52, v53, v54);
        uint64_t v1 = v29;
        uint64_t v46 = v31;
        uint64_t v47 = v30;
        outlined release of Locale((uint64_t)v61);
        __int128 v32 = v49[1];
        __int128 v33 = v49[3];
        v60[1] = v49[2];
        v60[2] = v33;
        v60[0] = v32;
        __int128 v34 = v49[1];
        v65[1] = v49[2];
        _OWORD v65[2] = v33;
        v65[0] = v34;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v65, (uint64_t)v66);
        outlined retain of Locale((uint64_t)v66);
        uint64_t v35 = MEMORY[0x186E1AE90](v51, v52, v53, v54);
        uint64_t v37 = v36;
        uint64_t v39 = v38;
        uint64_t v41 = v40;
        outlined release of Locale((uint64_t)v60);
        v59[0] = v28;
        v59[1] = v1;
        v59[2] = v47;
        v59[3] = v46;
        v59[4] = v35;
        v59[5] = v37;
        v59[6] = v39;
        v59[7] = v41;
        specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)( (unint64_t *)v59,  v48,  (uint64_t)object);
        swift_bridgeObjectRelease();
        Swift::String_optional v42 = String.Iterator.next()();
        uint64_t countAndFlagsBits = v42.value._countAndFlagsBits;
        object = v42.value._object;
      }

      while (v42.value._object);
      swift_bridgeObjectRelease();
      uint64_t v1 = v43;
      uint64_t v21 = v45;
      if (v55 == v44) {
        goto LABEL_12;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }

    swift_bridgeObjectRelease();
LABEL_12:
    *(void *)(v1 + v21) = v49;
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.append(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  _AttributedStringFromMarkdownCreatorConcrete.append(_:)();

  return swift_bridgeObjectRelease();
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.append(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5 = v14;
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v13, v5, *((uint64_t *)&v5 + 1), (uint64_t *)v21);
  uint64_t v6 = *(void *)&v21[0];
  uint64_t v7 = *(_OWORD **)(v3 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str);
  __int128 v8 = v7[2];
  v21[0] = v7[1];
  v21[1] = v8;
  v21[2] = v7[3];
  *(void *)&__int128 v14 = BigString.endIndex.getter();
  *((void *)&v14 + 1) = v9;
  uint64_t v15 = v10;
  uint64_t v16 = v11;
  uint64_t v17 = v14;
  uint64_t v18 = v9;
  uint64_t v19 = v10;
  uint64_t v20 = v11;
  specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v14, v6);
  return swift_release();
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.append(_:with:)( void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v8 = v7;
  uint64_t v9 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4);
  id v10 = a1;
  _AttributedStringFromMarkdownCreatorConcrete.append(_:with:)((uint64_t)v6, v8, v9);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.lastCharacter()()
{
  uint64_t v1 = *(_OWORD **)(v0 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str);
  __int128 v2 = v1[2];
  v6[3] = v1[1];
  v6[4] = v2;
  _OWORD v6[5] = v1[3];
  BigString.utf16.getter();
  uint64_t v3 = BigString.UTF16View.startIndex.getter();
  if ((BigString.UTF16View.endIndex.getter() ^ (unint64_t)v3) >= 0x400)
  {
    BigString.UTF16View.index(before:)();
    uint64_t v4 = BigString.UTF16View.subscript.getter();
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  outlined release of Locale((uint64_t)v6);
  return v4;
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.lastCharacter()(void *a1)
{
  id v1 = a1;
  unsigned __int16 v2 = _AttributedStringFromMarkdownCreatorConcrete.lastCharacter()();

  return v2;
}

double _AttributedStringFromMarkdownCreatorConcrete.processAttributes(_:)@<D0>( uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v43 = *MEMORY[0x18961B398] & *v2;
  __int128 v65 = MEMORY[0x18961AFF0];
  uint64_t v41 = a1 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  uint64_t v7 = direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes;
  int64_t v42 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v44 = direct field offset for _AttributedStringFromMarkdownCreatorConcrete.attributeTable;
  swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      uint64_t v46 = (v6 - 1) & v6;
      int64_t v47 = v8;
      unint64_t v9 = __clz(__rbit64(v6)) | (v8 << 6);
      goto LABEL_18;
    }

    BOOL v10 = __OFADD__(v8, 1LL);
    int64_t v11 = v8 + 1;
    if (v10)
    {
      __break(1u);
      JUMPOUT(0x1833E309CLL);
    }

    if (v11 >= v42) {
      goto LABEL_67;
    }
    unint64_t v12 = *(void *)(v41 + 8 * v11);
    if (!v12) {
      break;
    }
LABEL_17:
    uint64_t v46 = (v12 - 1) & v12;
    int64_t v47 = v11;
    unint64_t v9 = __clz(__rbit64(v12)) + (v11 << 6);
LABEL_18:
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v16 = v15[1];
    uint64_t v62 = *v15;
    uint64_t v17 = v62;
    uint64_t v63 = v16;
    outlined init with copy of Any(v14 + 32 * v9, (uint64_t)v64);
    v60[0] = v17;
    v60[1] = v16;
    outlined init with take of Any(v64, v61);
    if ((*((_BYTE *)v3 + v7) & 1) != 0)
    {
      swift_bridgeObjectRetain_n();
    }

    else
    {
      uint64_t v18 = one-time initialization token for name;
      swift_bridgeObjectRetain_n();
      if (v18 != -1) {
        swift_once();
      }
      uint64_t v19 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
      uint64_t v20 = qword_18C5D2BD8;
      v51[8] = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
      v51[9] = qword_18C5D2BD8;
      uint64_t v21 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v21 != -1) {
        swift_once();
      }
      uint64_t v22 = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
      uint64_t v23 = qword_18C5D2C08;
      v51[10] = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
      v51[11] = qword_18C5D2C08;
      uint64_t v24 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v24 != -1) {
        swift_once();
      }
      uint64_t v52 = static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name;
      uint64_t v53 = qword_18C5D2BA8;
      uint64_t v25 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v25 != -1) {
        swift_once();
      }
      uint64_t v54 = static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name;
      uint64_t v55 = qword_18C5D2BB8;
      uint64_t v26 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v26 != -1) {
        swift_once();
      }
      uint64_t v56 = static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name;
      uint64_t v57 = qword_18C5D2B98;
      uint64_t v27 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v27 != -1) {
        swift_once();
      }
      uint64_t v58 = static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name;
      uint64_t v59 = qword_18C5D2BF8;
      if (v19 == v17 && v20 == v16
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v22 == v17 && v23 == v16
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v52 == v17 && v53 == v16
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v54 == v17 && v55 == v16
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v56 == v17 && v57 == v16
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v58 == v17 && v59 == v16
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_arrayDestroy();
        *((_BYTE *)v3 + v7) = 1;
      }

      else
      {
        swift_bridgeObjectRetain();
        swift_arrayDestroy();
      }
    }

    uint64_t v28 = *(void *)((char *)v3 + v44);
    v50[4] = v17;
    v50[5] = v16;
    outlined init with copy of Any((uint64_t)v61, (uint64_t)v51);
    if (*(void *)(v28 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
      if ((v30 & 1) != 0)
      {
        uint64_t v31 = (uint64_t *)(*(void *)(v28 + 56) + 16 * v29);
        uint64_t v33 = *v31;
        uint64_t v32 = v31[1];
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }

      swift_bridgeObjectRelease();
    }

    uint64_t v33 = 0LL;
    uint64_t v32 = 0LL;
LABEL_56:
    v49[0] = v17;
    v49[1] = v16;
    outlined init with copy of Any((uint64_t)v61, (uint64_t)v50);
    if (v33)
    {
      outlined destroy of (key: String, value: Any)((uint64_t)v49);
      goto LABEL_58;
    }

    swift_bridgeObjectRetain();
    specialized static AttributeScope.scopeDescription.getter();
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)v50, (uint64_t)v48);
    if (*(void *)(v35 + 16))
    {
      unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
      if ((v37 & 1) != 0)
      {
        uint64_t v38 = *(void *)(*(void *)(v35 + 56) + 16 * v36 + 8);
        swift_bridgeObjectRelease();
        uint64_t v32 = v38;
        swift_bridgeObjectRelease();
        outlined destroy of (key: String, value: Any)((uint64_t)v49);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
LABEL_58:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
        v48[0] = *(void *)(v43 + 88);
        v48[1] = v32;
        type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox();
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (key: String, value: Any)((uint64_t)v49);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    unint64_t v6 = v46;
    int64_t v8 = v47;
    outlined destroy of (key: String, value: Any)((uint64_t)v60);
  }

  int64_t v13 = v11 + 1;
  if (v11 + 1 >= v42) {
    goto LABEL_67;
  }
  unint64_t v12 = *(void *)(v41 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v11 + 2;
  if (v11 + 2 >= v42) {
    goto LABEL_67;
  }
  unint64_t v12 = *(void *)(v41 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v11 + 3;
  if (v11 + 3 >= v42) {
    goto LABEL_67;
  }
  unint64_t v12 = *(void *)(v41 + 8 * v13);
  if (v12)
  {
LABEL_16:
    int64_t v11 = v13;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v11 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      JUMPOUT(0x1833E30A4LL);
    }

    if (v11 >= v42) {
      break;
    }
    unint64_t v12 = *(void *)(v41 + 8 * v11);
    ++v13;
    if (v12) {
      goto LABEL_17;
    }
  }

uint64_t _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey.init(intValue:)()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void protocol witness for CodingKey.init(stringValue:) in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey( uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey@<X0>( uint64_t a1@<X8>)
{
  uint64_t result = _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey.init(intValue:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.init(from:)( void *a1, Swift::UInt a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = (char *)type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey( 255LL,  a2,  a3,  a4);
  MEMORY[0x186E20D4C]( &protocol conformance descriptor for _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey,  v7);
  uint64_t v50 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v38 = *(void *)(v50 - 8);
  MEMORY[0x1895F8858](v50);
  unint64_t v9 = (char *)&v35 - v8;
  uint64_t v58 = (char *)MEMORY[0x18961AFF0];
  static AttributeScope.scopeDescription.getter(a2, a3);
  uint64_t v51 = v10;
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v11 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v52 = v11;
  if (v11) {
    goto LABEL_2;
  }
  uint64_t v12 = v38;
  Swift::UInt v39 = a2;
  unint64_t v40 = a3;
  uint64_t v13 = v50;
  uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
  uint64_t result = MEMORY[0x186E1BB2C](v14, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_14:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v13);
    uint64_t v7 = v58;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (uint64_t)v7;
  }

  uint64_t v16 = result;
  uint64_t v41 = v9;
  unint64_t v36 = a1;
  uint64_t v17 = 0LL;
  uint64_t v35 = v14;
  uint64_t v18 = (unsigned __int8 *)(v14 + 56);
  uint64_t v19 = v51;
  uint64_t v37 = result;
  while (1)
  {
    uint64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      return result;
    }

    if (*(void *)(v19 + 16)) {
      break;
    }
LABEL_6:
    v18 += 32;
    ++v17;
    if (v20 == v16)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v36;
      uint64_t v13 = v50;
      uint64_t v12 = v38;
      unint64_t v9 = v41;
      goto LABEL_14;
    }
  }

  uint64_t v21 = *((void *)v18 - 3);
  uint64_t v22 = *((void *)v18 - 2);
  uint64_t v23 = *((void *)v18 - 1);
  int v24 = *v18;
  swift_bridgeObjectRetain_n();
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22);
  if ((v26 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease_n();
    goto LABEL_6;
  }

  uint64_t v27 = (uint64_t *)(*(void *)(v19 + 56) + 16 * v25);
  uint64_t v49 = v23;
  int v48 = v24;
  uint64_t v28 = *v27;
  uint64_t v29 = v27[1];
  swift_bridgeObjectRelease();
  uint64_t v47 = v22;
  uint64_t v30 = *(void *)(v29 + 8);
  uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 24))(v28, v30);
  uint64_t v46 = v31;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = &v35;
  uint64_t v43 = AssociatedTypeWitness;
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v35 - v33;
  uint64_t v53 = v21;
  uint64_t v54 = v47;
  uint64_t v55 = v49;
  char v56 = v48;
  uint64_t v34 = v52;
  KeyedDecodingContainer.superDecoder(forKey:)();
  if (!v34)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(v29 + 16))(v57, v28, v29);
    uint64_t v52 = 0LL;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
    v57[0] = v39;
    v57[1] = v28;
    v57[2] = v40;
    v57[3] = v30;
    type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox();
  }

  uint64_t v52 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v41, v50);
  a1 = v36;
LABEL_2:
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (uint64_t)v7;
}

uint64_t protocol witness for Decodable.init(from:) in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result = _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.init(from:)( a1,  *(void *)(a2 + 16),  *(void *)(a2 + 24),  a3);
  if (!v4) {
    *a4 = result;
  }
  return result;
}

id @objc _AttributedStringFromMarkdownCreatorConcrete.parseExtendedAttributes(from:)( void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *MEMORY[0x18961B398] & *a1;
  id v5 = a3;
  unint64_t v6 = a1;
  id v7 = specialized Data.init(referencing:)(v5);
  unint64_t v9 = v8;

  specialized _AttributedStringFromMarkdownCreatorConcrete.parseExtendedAttributes(from:)( (uint64_t)v7,  v9,  *(void *)(v4 + 80),  *(void *)(v4 + 88));
  outlined consume of Data._Representation((uint64_t)v7, v9);
  return (id)_NativeDictionary.bridged()();
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.finalize(withLanguageIdentifier:)( uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v10 = MEMORY[0x18961AFF0];
    uint64_t v11 = MEMORY[0x18961AFF8];
    uint64_t v5 = MEMORY[0x189617FA8];
    uint64_t v6 = MEMORY[0x189617FB8];
    uint64_t v3 = result;
    uint64_t v4 = a2;
    __int128 v7 = xmmword_183723F60;
    char v8 = 1;
    uint64_t v9 = 0LL;
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter( (uint64_t)&v3,  0x6175676E614C534EuLL,  0xEA00000000006567LL);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    char v2 = 1;
    AttributedString.mergeAttributes(_:mergePolicy:)(&v3, &v2);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.finalize(withLanguageIdentifier:)( void *a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v6 = v5;
  }

  else
  {
    id v4 = 0LL;
    uint64_t v6 = 0LL;
  }

  id v7 = a1;
  _AttributedStringFromMarkdownCreatorConcrete.finalize(withLanguageIdentifier:)((uint64_t)v4, v6);

  return swift_bridgeObjectRelease();
}

void @objc _AttributedStringFromMarkdownCreatorConcrete.init()()
{
}

id _AttributedStringFromMarkdownCreatorConcrete.__deallocating_deinit( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (objc_class *)type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete( 0LL,  *(void *)((*MEMORY[0x18961B398] & *v4) + 0x50LL),  *(void *)((*MEMORY[0x18961B398] & *v4) + 0x58LL),  a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t AttributedString.MarkdownParsingOptions.FailurePolicy.init(rawValue:)@<X0>( uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t AttributedString.MarkdownParsingOptions.FailurePolicy.rawValue.getter()
{
  return *v0;
}

unint64_t AttributedString.MarkdownParsingOptions.InterpretedSyntax.init(rawValue:)@<X0>( unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 3;
  if (result < 3) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

uint64_t AttributedString.MarkdownParsingOptions.InterpretedSyntax.rawValue.getter()
{
  return *v0;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax@<X0>( unint64_t *a1@<X0>, char *a2@<X8>)
{
  return AttributedString.MarkdownParsingOptions.InterpretedSyntax.init(rawValue:)(*a1, a2);
}

uint64_t AttributedString.MarkdownParsingOptions.allowsExtendedAttributes.getter()
{
  return *v0;
}

uint64_t AttributedString.MarkdownParsingOptions.allowsExtendedAttributes.setter(uint64_t result)
{
  _BYTE *v1 = result;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.allowsExtendedAttributes.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void AttributedString.MarkdownParsingOptions.interpretedSyntax.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *AttributedString.MarkdownParsingOptions.interpretedSyntax.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.interpretedSyntax.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void AttributedString.MarkdownParsingOptions.failurePolicy.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *AttributedString.MarkdownParsingOptions.failurePolicy.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.failurePolicy.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.MarkdownParsingOptions.languageCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttributedString.MarkdownParsingOptions.languageCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a2;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.languageCode.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.MarkdownParsingOptions.appliesSourcePositionAttributes.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t AttributedString.MarkdownParsingOptions.appliesSourcePositionAttributes.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.appliesSourcePositionAttributes.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:appliesSourcePositionAttributes:)@<X0>( uint64_t result@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  char v7 = *a2;
  char v8 = *a3;
  *(_BYTE *)a7 = result;
  *(_BYTE *)(a7 + 1) = v7;
  *(_BYTE *)(a7 + 2) = v8;
  *(void *)(a7 + 8) = a4;
  *(void *)(a7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
  *(_BYTE *)(a7 + 24) = a6;
  return result;
}

double one-time initialization function for localizedAttributedString()
{
  id v0 = objc_msgSend((id)objc_opt_self(), sel__localizedAttributedStringParsingOptions);
  AttributedString.MarkdownParsingOptions.init(_:)(v0, (uint64_t)v2);

  static AttributedString.MarkdownParsingOptions.localizedAttributedString = v2[0];
  byte_18C5D63E1 = v2[1];
  byte_18C5D63E2 = v2[2];
  double result = *(double *)&v3;
  *(_OWORD *)&qword_18C5D63E8 = v3;
  byte_18C5D63F8 = v4;
  return result;
}

void static AttributedString.MarkdownParsingOptions._unconditionallyBridgeFromObjectiveC(_:)( void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    AttributedString.MarkdownParsingOptions.init(_:)(a1, a2);
  }

  else
  {
    *(_WORD *)a2 = 0;
    *(_BYTE *)(a2 + 2) = 0;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
    *(_BYTE *)(a2 + 24) = 0;
  }

uint64_t AttributedString.MarkdownSourcePosition.startLine.getter()
{
  return *(void *)v0;
}

uint64_t AttributedString.MarkdownSourcePosition.startColumn.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t AttributedString.MarkdownSourcePosition.endLine.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t AttributedString.MarkdownSourcePosition.endColumn.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t AttributedString.MarkdownSourcePosition.Offsets.encode(to:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a5;
  v12[1] = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.MarkdownSourcePosition.Offsets.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v13 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1833E3D30 + 4 * byte_183827FC0[*v0]))( 946238581LL,  0xE400000000000000LL);
}

uint64_t sub_1833E3D30()
{
  return 0x3631667475LL;
}

unint64_t sub_1833E3D44()
{
  return 0xD000000000000011LL;
}

unint64_t sub_1833E3D60()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized AttributedString.MarkdownSourcePosition.Offsets.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.MarkdownSourcePosition.Offsets()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString.MarkdownSourcePosition.Offsets()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Swift::UInt v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.MarkdownSourcePosition.Offsets()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributedString.MarkdownSourcePosition.Offsets@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized AttributedString.MarkdownSourcePosition.Offsets.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributedString.MarkdownSourcePosition.Offsets( void *a1)
{
  return AttributedString.MarkdownSourcePosition.Offsets.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.MarkdownSourcePosition.Offsets( void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

double AttributedString.MarkdownSourcePosition.init(startLine:startColumn:endLine:endColumn:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  double result = 0.0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_BYTE *)(a5 + 64) = 1;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_BYTE *)(a5 + 104) = 1;
  return result;
}

void AttributedString.MarkdownSourcePosition.hash(into:)()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(void *)(v0 + 16);
  Swift::UInt v3 = *(void *)(v0 + 24);
  Swift::UInt v5 = *(void *)(v0 + 32);
  Swift::UInt v4 = *(void *)(v0 + 40);
  Swift::UInt v7 = *(void *)(v0 + 48);
  Swift::UInt v6 = *(void *)(v0 + 56);
  int v8 = *(unsigned __int8 *)(v0 + 64);
  Swift::UInt v10 = *(void *)(v0 + 72);
  Swift::UInt v11 = *(void *)(v0 + 80);
  Swift::UInt v12 = *(void *)(v0 + 88);
  Swift::UInt v13 = *(void *)(v0 + 96);
  int v9 = *(unsigned __int8 *)(v0 + 104);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
    if (!v9)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      Hasher._combine(_:)(v13);
      return;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(v4);
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(v6);
    if (!v9) {
      goto LABEL_3;
    }
  }

  Hasher._combine(_:)(0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributedString.MarkdownSourcePosition.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1833E412C + 4 * byte_183827FC4[*v0]))( 0x6E694C7472617473LL,  0xE900000000000065LL);
}

uint64_t sub_1833E412C()
{
  return 0x6C6F437472617473LL;
}

uint64_t sub_1833E414C()
{
  return 0x656E694C646E65LL;
}

uint64_t sub_1833E4164()
{
  return 0x6D756C6F43646E65LL;
}

uint64_t sub_1833E417C()
{
  return 0x66664F7472617473LL;
}

uint64_t sub_1833E419C()
{
  return 0x657366664F646E65LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.MarkdownSourcePosition.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized AttributedString.MarkdownSourcePosition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.MarkdownSourcePosition.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.MarkdownSourcePosition.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t AttributedString.MarkdownSourcePosition.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.MarkdownSourcePosition.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  Swift::UInt v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v1 + 8);
  uint64_t v25 = *(void *)(v1 + 16);
  uint64_t v26 = v8;
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v23 = *(void *)(v1 + 32);
  uint64_t v24 = v9;
  uint64_t v10 = *(void *)(v1 + 48);
  uint64_t v20 = *(void *)(v1 + 40);
  uint64_t v21 = v10;
  uint64_t v22 = *(void *)(v1 + 56);
  int v32 = *(unsigned __int8 *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 80);
  uint64_t v15 = *(void *)(v1 + 72);
  uint64_t v16 = v11;
  uint64_t v17 = *(void *)(v1 + 88);
  uint64_t v19 = *(void *)(v1 + 96);
  int v18 = *(unsigned __int8 *)(v1 + 104);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v27) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v13 = v23;
    LOBYTE(v27) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v27) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v27) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v27 = v13;
    uint64_t v28 = v20;
    uint64_t v29 = v21;
    uint64_t v30 = v22;
    char v31 = v32;
    char v33 = 4;
    lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v27 = v15;
    uint64_t v28 = v16;
    uint64_t v29 = v17;
    uint64_t v30 = v19;
    char v31 = v18;
    char v33 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int AttributedString.MarkdownSourcePosition.hashValue.getter()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  Swift::UInt v4 = *(void *)(v0 + 24);
  Swift::UInt v6 = *(void *)(v0 + 32);
  Swift::UInt v5 = *(void *)(v0 + 40);
  Swift::UInt v7 = *(void *)(v0 + 48);
  int v8 = *(unsigned __int8 *)(v0 + 64);
  Swift::UInt v11 = *(void *)(v0 + 56);
  Swift::UInt v12 = *(void *)(v0 + 72);
  Swift::UInt v13 = *(void *)(v0 + 80);
  Swift::UInt v14 = *(void *)(v0 + 88);
  Swift::UInt v15 = *(void *)(v0 + 96);
  int v9 = *(unsigned __int8 *)(v0 + 104);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  if (v8 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(v11);
    if (!v9) {
      goto LABEL_3;
    }
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  Hasher._combine(_:)(0);
  if (v9) {
    goto LABEL_5;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  return Hasher._finalize()();
}

uint64_t AttributedString.MarkdownSourcePosition.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.MarkdownSourcePosition.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  int v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v26) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v26) = 1;
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v26) = 2;
    uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v26) = 3;
    uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
    char v30 = 4;
    unint64_t v24 = lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v21 = *((void *)&v26 + 1);
    uint64_t v22 = v26;
    uint64_t v19 = *((void *)&v27 + 1);
    uint64_t v20 = v27;
    int v29 = v28;
    char v30 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    unsigned __int8 v12 = v28;
    __int128 v13 = v26;
    __int128 v14 = v27;
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v10;
    uint64_t v15 = v23;
    *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
    *(void *)(a2 + 24) = v15;
    uint64_t v16 = v21;
    *(void *)(a2 + 32) = v22;
    *(void *)(a2 + 40) = v16;
    uint64_t v17 = v19;
    *(void *)(a2 + 48) = v20;
    *(void *)(a2 + 56) = v17;
    *(_BYTE *)(a2 + 64) = v29;
    *(_OWORD *)(a2 + 72) = v13;
    *(_OWORD *)(a2 + 88) = v14;
    *(_BYTE *)(a2 + 104) = v12;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.MarkdownSourcePosition()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  Swift::UInt v4 = *(void *)(v0 + 24);
  Swift::UInt v6 = *(void *)(v0 + 32);
  Swift::UInt v5 = *(void *)(v0 + 40);
  Swift::UInt v7 = *(void *)(v0 + 48);
  int v8 = *(unsigned __int8 *)(v0 + 64);
  Swift::UInt v11 = *(void *)(v0 + 56);
  Swift::UInt v12 = *(void *)(v0 + 72);
  Swift::UInt v13 = *(void *)(v0 + 80);
  Swift::UInt v14 = *(void *)(v0 + 88);
  Swift::UInt v15 = *(void *)(v0 + 96);
  int v9 = *(unsigned __int8 *)(v0 + 104);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  if (v8 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(v11);
    if (!v9) {
      goto LABEL_3;
    }
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  Hasher._combine(_:)(0);
  if (v9) {
    goto LABEL_5;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributedString.MarkdownSourcePosition@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return AttributedString.MarkdownSourcePosition.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributedString.MarkdownSourcePosition( void *a1)
{
  return AttributedString.MarkdownSourcePosition.encode(to:)(a1);
}

uint64_t AttributedString.init<A>(markdown:including:options:baseURL:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>)
{
  char v9 = *(_BYTE *)(a3 + 1);
  char v10 = *(_BYTE *)(a3 + 2);
  uint64_t v11 = *(void *)(a3 + 8);
  uint64_t v12 = *(void *)(a3 + 16);
  char v13 = *(_BYTE *)(a3 + 24);
  Swift::UInt v14 = *(void **)a4;
  uint64_t v15 = *(void *)(a4 + 8);
  uint64_t v16 = *(void *)(a4 + 16);
  v19[0] = 1;
  v19[1] = v9;
  v19[2] = v10;
  uint64_t v20 = v11;
  uint64_t v21 = v12;
  char v22 = v13;
  v18[0] = v14;
  v18[1] = v15;
  v18[2] = v16;
  static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(&v23, a1, a2, a5, v19, (uint64_t)v18, a5, a6);
  swift_bridgeObjectRelease();
  outlined consume of URL?(v14);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v7) {
    *a7 = v23;
  }
  return result;
}

uint64_t AttributedString.init<A>(markdown:including:options:baseURL:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  char v10 = *(_BYTE *)(a4 + 1);
  char v11 = *(_BYTE *)(a4 + 2);
  uint64_t v12 = *(void *)(a4 + 8);
  uint64_t v13 = *(void *)(a4 + 16);
  char v14 = *(_BYTE *)(a4 + 24);
  uint64_t v15 = *(void **)a5;
  uint64_t v16 = *(void *)(a5 + 8);
  uint64_t v17 = *(void *)(a5 + 16);
  v20[0] = 1;
  v20[1] = v10;
  v20[2] = v11;
  uint64_t v21 = v12;
  uint64_t v22 = v13;
  char v23 = v14;
  v19[0] = v15;
  v19[1] = v16;
  v19[2] = v17;
  static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(&v24, a1, a2, a3, v20, (uint64_t)v19, a6, a7);
  swift_bridgeObjectRelease();
  outlined consume of URL?(v15);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v8) {
    *a8 = v24;
  }
  return result;
}

uint64_t AttributedString.init<A>(markdown:including:options:baseURL:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = swift_release();
  if (!v3) {
    *a3 = v6;
  }
  return result;
}

void specialized AttributedString.init<A>(_markdownData:including:options:baseURL:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void *sub_1833E4CB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, NSError *a5)
{
  uint64_t v13 = v10;
  __int16 v14 = v9;
  char v15 = BYTE2(v9);
  char v16 = BYTE3(v9);
  char v17 = BYTE4(v9);
  char v18 = BYTE5(v9);
  specialized static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)( &v19,  (uint64_t)&v13,  (uint64_t)&v13 + BYTE6(v9),  a3 & 0x1FF01,  a5,  v8,  v11 & 1,  v7);
  outlined consume of Data._Representation(v10, v9);
  swift_bridgeObjectRelease();
  uint64_t result = outlined consume of URL?(v7);
  if (!v6) {
    *Swift::UInt v5 = v19;
  }
  return result;
}

void AttributedString.init<A>(_markdownData:including:options:baseURL:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X16 }

void *sub_1833E5028@<X0>(uint64_t a1@<X6>, uint64_t a2@<X7>, char a3@<W8>)
{
  uint64_t v17 = v15;
  __int16 v18 = v14;
  char v19 = BYTE2(v14);
  char v20 = BYTE3(v14);
  char v21 = BYTE4(v14);
  char v22 = BYTE5(v14);
  char v27 = v7;
  char v28 = v6;
  char v29 = v5;
  uint64_t v30 = v4;
  uint64_t v31 = v13;
  char v32 = a3;
  uint64_t v24 = v12;
  uint64_t v25 = v11;
  uint64_t v26 = v9;
  static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)( &v23,  (uint64_t)&v17,  (uint64_t)&v17 + BYTE6(v14),  v3,  (uint64_t)&v27,  &v24,  a1,  a2);
  outlined consume of Data._Representation(v15, v14);
  swift_bridgeObjectRelease();
  uint64_t result = outlined consume of URL?(v12);
  if (!v10) {
    void *v8 = v23;
  }
  return result;
}

void AttributedString.init(markdown:options:baseURL:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!v3) {
    *a3 = v5;
  }
}

void AttributedString.init<A>(markdown:including:options:baseURL:)( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!v3) {
    *a3 = v5;
  }
}

uint64_t specialized static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)( void *a1, uint64_t a2, uint64_t a3, unsigned int a4, NSError *a5, NSError *a6, char a7, void *a8)
{
  uint64_t v8 = a2;
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    unsigned int v14 = a4 >> 8;
    objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _AttributedStringFromMarkdownCreatorConcrete<AttributeScopes.FoundationAttributes>));
    swift_bridgeObjectRetain();
    char v15 = a7 & 1;
    char v16 = (void *)specialized _AttributedStringFromMarkdownCreatorConcrete.init(scope:options:)(a4 & 1);
    type metadata accessor for NSAttributedStringMarkdownParsingOptions();
    LOBYTE(v28[0]) = a4 & 1;
    BYTE1(v28[0]) = v14;
    BYTE2(v28[0]) = BYTE2(a4) & 1;
    v28[1] = a5;
    void v28[2] = a6;
    char v29 = v15;
    swift_bridgeObjectRetain();
    uint64_t v17 = v16;
    __int16 v18 = (NSAttributedStringMarkdownParsingOptions *)NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)v28);
    if (a8) {
      id v19 = a8;
    }
    else {
      id v19 = 0LL;
    }
    v28[0] = 0LL;
    char v20 = _NSAttributedStringFromMarkdownWithCreator(v17, v8, a3 - v8, v18, (uint64_t)v19, v28);

    char v21 = v28[0];
    if ((v20 & 1) != 0 || !v28[0])
    {
      *a1 = *(void *)&v17[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str];
      LOBYTE(v8) = v17[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes];
      uint64_t v23 = v21;
      swift_retain();
    }

    else
    {
      char v22 = v28[0];
      swift_willThrow();
    }
  }

  else
  {
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v30, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v28);
    *a1 = v28[0];
  }

  return v8 & 1;
}

uint64_t static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7, uint64_t a8)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    char v27 = *a6;
    char v11 = *(_BYTE *)(a5 + 24);
    uint64_t v12 = *(void *)(a5 + 8);
    uint64_t v13 = *(void *)(a5 + 16);
    char v14 = *(_BYTE *)(a5 + 2);
    char v15 = *(_BYTE *)(a5 + 1);
    LOBYTE(v29) = *(_BYTE *)a5;
    char v16 = (char)v29;
    BYTE1(v29) = v15;
    BYTE2(v29) = v14;
    uint64_t v30 = v12;
    uint64_t v31 = v13;
    char v32 = v11;
    objc_allocWithZone((Class)type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete(0LL, a7, a8, a4));
    swift_bridgeObjectRetain();
    uint64_t v17 = (void *)_AttributedStringFromMarkdownCreatorConcrete.init(scope:options:)(a4, (unsigned __int8 *)&v29);
    type metadata accessor for NSAttributedStringMarkdownParsingOptions();
    LOBYTE(v29) = v16;
    BYTE1(v29) = v15;
    BYTE2(v29) = v14;
    uint64_t v30 = v12;
    uint64_t v31 = v13;
    char v32 = v11;
    swift_bridgeObjectRetain();
    __int16 v18 = v17;
    id v19 = (NSAttributedStringMarkdownParsingOptions *)NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)&v29);
    if (v27) {
      id v20 = v27;
    }
    else {
      id v20 = 0LL;
    }
    char v29 = 0LL;
    char v21 = _NSAttributedStringFromMarkdownWithCreator(v18, a2, a3 - a2, v19, (uint64_t)v20, &v29);

    char v22 = v29;
    if ((v21 & 1) != 0 || !v29)
    {
      *a1 = *(void *)&v18[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str];
      char v15 = v18[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes];
      uint64_t v24 = v22;
      swift_retain();
    }

    else
    {
      uint64_t v23 = v29;
      swift_willThrow();
    }
  }

  else
  {
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v33, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)&v29);
    char v15 = 0;
    *a1 = v29;
  }

  return v15 & 1;
}

uint64_t AttributedString.init<A>(contentsOf:including:options:baseURL:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  char v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  char v19 = *(_BYTE *)(a2 + 2);
  char v20 = *(_BYTE *)(a2 + 1);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v18 = *(void *)(a2 + 8);
  char v17 = *(_BYTE *)(a2 + 24);
  uint64_t v10 = *a3;
  char v21 = *(void **)a1;
  uint64_t v22 = v7;
  uint64_t v23 = v8;
  id v11 = specialized Data.init(contentsOf:options:)((uint64_t)&v21, (void *)1);
  if (v4)
  {
    swift_bridgeObjectRelease();
    outlined consume of URL?(v10);
    swift_release();

    swift_release();
    return swift_release();
  }

  else
  {
    char v15 = a4;
    uint64_t v16 = v12;
    uint64_t v14 = (uint64_t)v11;

    swift_release();
    swift_release();
    LOBYTE(v21) = 1;
    BYTE1(v21) = v20;
    BYTE2(v21) = v19;
    uint64_t v22 = v18;
    uint64_t v23 = v9;
    char v24 = v17;
    AttributedString.init<A>(_markdownData:including:options:baseURL:)(v14, v16);
    uint64_t result = swift_release();
    *char v15 = v25;
  }

  return result;
}

void AttributedString.init<A>(contentsOf:including:options:baseURL:)( uint64_t a1@<X0>, uint64_t a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  char v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  char v18 = *(_BYTE *)(a2 + 2);
  char v19 = *(_BYTE *)(a2 + 1);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v17 = *(void *)(a2 + 8);
  char v16 = *(_BYTE *)(a2 + 24);
  uint64_t v10 = *a3;
  char v20 = *(void **)a1;
  uint64_t v21 = v7;
  uint64_t v22 = v8;
  id v11 = specialized Data.init(contentsOf:options:)((uint64_t)&v20, (void *)1);
  if (v4)
  {
    swift_bridgeObjectRelease();
    outlined consume of URL?(v10);

    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v14 = a4;
    uint64_t v15 = v12;
    uint64_t v13 = (uint64_t)v11;

    swift_release();
    swift_release();
    LOBYTE(v20) = 1;
    BYTE1(v20) = v19;
    BYTE2(v20) = v18;
    uint64_t v21 = v17;
    uint64_t v22 = v9;
    char v23 = v16;
    AttributedString.init<A>(_markdownData:including:options:baseURL:)(v13, v15);
    *uint64_t v14 = v24;
  }

void AttributedString.init(contentsOf:options:baseURL:)(uint64_t a1@<X0>, void **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v13 = *a2;
  v12[0] = v5;
  v12[1] = v6;
  void v12[2] = v7;
  id v8 = specialized Data.init(contentsOf:options:)((uint64_t)v12, (void *)1);
  if (v3)
  {
    swift_bridgeObjectRelease();
    outlined consume of URL?(v13);

    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v10 = (uint64_t)v8;
    uint64_t v11 = v9;

    swift_release();
    swift_release();
    specialized AttributedString.init<A>(_markdownData:including:options:baseURL:)(v10, v11);
    *a3 = v12[0];
  }

uint64_t protocol witness for Decodable.init(from:) in conformance NSInlinePresentationIntent()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSInlinePresentationIntent()
{
  return RawRepresentable<>.encode(to:)();
}

void AttributedString.MarkdownParsingOptions.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4 = objc_msgSend(a1, sel_allowsExtendedAttributes);
  id v5 = objc_msgSend(a1, sel_interpretedSyntax);
  char v6 = (char)v5;
  id v7 = objc_msgSend(a1, sel_failurePolicy);
  if ((unint64_t)v7 > 1)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return;
  }

  id v8 = v7;
  id v9 = objc_msgSend(a1, sel_languageCode);
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v13 = v12;
  }

  else
  {
    id v11 = 0LL;
    uint64_t v13 = 0LL;
  }

  BOOL v14 = v8 != 0LL;
  swift_bridgeObjectRetain();
  unsigned __int8 v15 = objc_msgSend(a1, sel_appliesSourcePositionAttributes);
  swift_bridgeObjectRelease();

  *(_BYTE *)a2 = v4;
  *(_BYTE *)(a2 + 1) = v6;
  *(_BYTE *)(a2 + 2) = v14;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v13;
  *(_BYTE *)(a2 + 24) = v15;
}

void __swiftcall AttributedString.MarkdownParsingOptions._bridgeToObjectiveC()( NSAttributedStringMarkdownParsingOptions *__return_ptr retstr)
{
  unsigned __int8 v2 = *(_BYTE *)v1;
  unsigned __int8 v3 = *(_BYTE *)(v1 + 1);
  unsigned __int8 v4 = *(_BYTE *)(v1 + 2);
  uint64_t v6 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  char v7 = *(_BYTE *)(v1 + 24);
  type metadata accessor for NSAttributedStringMarkdownParsingOptions();
  v8[0] = v2;
  v8[1] = v3;
  _OWORD v8[2] = v4;
  uint64_t v9 = v6;
  uint64_t v10 = v5;
  char v11 = v7;
  swift_bridgeObjectRetain();
  NSAttributedStringMarkdownParsingOptions.init(_:)(v8);
}

double static AttributedString.MarkdownParsingOptions._forceBridgeFromObjectiveC(_:result:)( void *a1, uint64_t a2)
{
  char v4 = v9;
  uint64_t v5 = 0x10000LL;
  if (!v7[2]) {
    uint64_t v5 = 0LL;
  }
  *(void *)a2 = v7[0] | ((unint64_t)v7[1] << 8) | v5;
  double result = *(double *)&v8;
  *(_OWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 24) = v4;
  return result;
}

uint64_t static AttributedString.MarkdownParsingOptions._conditionallyBridgeFromObjectiveC(_:result:)( void *a1, uint64_t a2)
{
  char v4 = v9;
  uint64_t v5 = 0x10000LL;
  if (!v7[2]) {
    uint64_t v5 = 0LL;
  }
  *(void *)a2 = v7[0] | ((unint64_t)v7[1] << 8) | v5;
  *(_OWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 24) = v4;
  return 1LL;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AttributedString.MarkdownParsingOptions()
{
  unsigned __int8 v1 = *(_BYTE *)v0;
  unsigned __int8 v2 = *(_BYTE *)(v0 + 1);
  unsigned __int8 v3 = *(_BYTE *)(v0 + 2);
  uint64_t v5 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  char v6 = *(_BYTE *)(v0 + 24);
  type metadata accessor for NSAttributedStringMarkdownParsingOptions();
  v8[0] = v1;
  v8[1] = v2;
  _OWORD v8[2] = v3;
  uint64_t v9 = v5;
  uint64_t v10 = v4;
  char v11 = v6;
  swift_bridgeObjectRetain();
  return NSAttributedStringMarkdownParsingOptions.init(_:)(v8);
}

double protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AttributedString.MarkdownParsingOptions( void *a1, uint64_t a2)
{
  char v4 = v9;
  uint64_t v5 = 0x10000LL;
  if (!v7[2]) {
    uint64_t v5 = 0LL;
  }
  *(void *)a2 = v7[0] | ((unint64_t)v7[1] << 8) | v5;
  double result = *(double *)&v8;
  *(_OWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 24) = v4;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AttributedString.MarkdownParsingOptions( void *a1, uint64_t a2)
{
  char v4 = v9;
  uint64_t v5 = 0x10000LL;
  if (!v7[2]) {
    uint64_t v5 = 0LL;
  }
  *(void *)a2 = v7[0] | ((unint64_t)v7[1] << 8) | v5;
  *(_OWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 24) = v4;
  return 1LL;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AttributedString.MarkdownParsingOptions( void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    AttributedString.MarkdownParsingOptions.init(_:)(a1, a2);
  }

  else
  {
    *(_WORD *)a2 = 0;
    *(_BYTE *)(a2 + 2) = 0;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
    *(_BYTE *)(a2 + 24) = 0;
  }

__n128 AttributedString.MarkdownSourcePosition.init(_:)@<Q0>(void *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v4 = 0LL;
  BOOL v5 = 1;
  if (v21 == 0x7FFFFFFFFFFFFFFFLL || v22 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
  }

  else
  {
    unint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
    if (v23 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v5 = v24 == 0x7FFFFFFFFFFFFFFFLL;
      if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v4 = 0LL;
      }
      else {
        unint64_t v4 = v21;
      }
      if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v6 = 0LL;
      }
      else {
        unint64_t v6 = v22;
      }
      if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v7 = 0LL;
      }
      else {
        unint64_t v7 = v23;
      }
      if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v8 = 0LL;
      }
      else {
        unint64_t v8 = v24;
      }
    }
  }

  BOOL v9 = v24 == 0x7FFFFFFFFFFFFFFFLL;
  if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = v21;
  }
  if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = v22;
  }
  if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v12 = 0LL;
  }
  else {
    unint64_t v12 = v23;
  }
  if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v13 = 0LL;
  }
  else {
    unint64_t v13 = v24;
  }
  if (v23 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v10 = 0LL;
    unint64_t v11 = 0LL;
    unint64_t v12 = 0LL;
    unint64_t v13 = 0LL;
    BOOL v9 = 1;
  }

  if (v22 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v10 = 0LL;
    unint64_t v11 = 0LL;
    unint64_t v12 = 0LL;
    unint64_t v13 = 0LL;
    char v14 = 1;
  }

  else
  {
    char v14 = v9;
  }

  if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v15 = 0LL;
  }
  else {
    unint64_t v15 = v10;
  }
  if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v16 = 0LL;
  }
  else {
    unint64_t v16 = v11;
  }
  if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v17 = 0LL;
  }
  else {
    unint64_t v17 = v12;
  }
  if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v18 = 0LL;
  }
  else {
    unint64_t v18 = v13;
  }
  if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
    char v19 = 1;
  }
  else {
    char v19 = v14;
  }
  *a2 = v25;
  __n128 result = v25;
  a2[1] = v25;
  a2[2].n128_u64[0] = v4;
  a2[2].n128_u64[1] = v6;
  a2[3].n128_u64[0] = v7;
  a2[3].n128_u64[1] = v8;
  a2[4].n128_u8[0] = v5;
  a2[4].n128_u64[1] = v15;
  a2[5].n128_u64[0] = v16;
  a2[5].n128_u64[1] = v17;
  a2[6].n128_u64[0] = v18;
  a2[6].n128_u8[8] = v19;
  return result;
}

void __swiftcall AttributedString.MarkdownSourcePosition._bridgeToObjectiveC()( NSAttributedStringMarkdownSourcePosition *__return_ptr retstr)
{
  if (*((_BYTE *)v1 + 64) == 1)
  {
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v2 = v1[6];
    uint64_t v12 = v1[5];
    uint64_t v13 = v1[4];
    uint64_t v3 = v1[7];
  }

  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  if (*((_BYTE *)v1 + 104))
  {
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = v1[9];
    uint64_t v9 = v1[10];
    uint64_t v10 = v1[11];
    uint64_t v11 = v1[12];
  }

  v15[0] = v13;
  v15[1] = v12;
  v15[2] = v2;
  v15[3] = v3;
  v15[4] = v4;
  v15[5] = v5;
  v14[0] = v8;
  v14[1] = v9;
  void v14[2] = v10;
  v14[3] = v11;
  v14[4] = v6;
  void v14[5] = v7;
  objc_msgSend( objc_allocWithZone((Class)NSAttributedStringMarkdownSourcePosition),  sel_initWithStart_end_,  v15,  v14);
}

double static AttributedString.MarkdownSourcePosition._unconditionallyBridgeFromObjectiveC(_:)@<D0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    *(void *)&double result = AttributedString.MarkdownSourcePosition.init(_:)(a1, (__n128 *)a2).n128_u64[0];
  }

  else
  {
    double result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
    *(_BYTE *)(a2 + 64) = 1;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_BYTE *)(a2 + 104) = 1;
  }

  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AttributedString.MarkdownSourcePosition()
{
  if (*((_BYTE *)v0 + 64) == 1)
  {
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v1 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v1 = v0[6];
    uint64_t v12 = v0[5];
    uint64_t v13 = v0[4];
    uint64_t v2 = v0[7];
  }

  uint64_t v3 = *v0;
  uint64_t v4 = v0[1];
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  if (*((_BYTE *)v0 + 104))
  {
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v7 = v0[9];
    uint64_t v8 = v0[10];
    uint64_t v9 = v0[11];
    uint64_t v10 = v0[12];
  }

  v15[0] = v13;
  v15[1] = v12;
  v15[2] = v1;
  v15[3] = v2;
  v15[4] = v3;
  v15[5] = v4;
  v14[0] = v7;
  v14[1] = v8;
  void v14[2] = v9;
  v14[3] = v10;
  v14[4] = v5;
  void v14[5] = v6;
  return objc_msgSend( objc_allocWithZone((Class)NSAttributedStringMarkdownSourcePosition),  sel_initWithStart_end_,  v15,  v14);
}

double protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AttributedString.MarkdownSourcePosition@<D0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    *(void *)&double result = AttributedString.MarkdownSourcePosition.init(_:)(a1, (__n128 *)a2).n128_u64[0];
  }

  else
  {
    double result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
    *(_BYTE *)(a2 + 64) = 1;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_BYTE *)(a2 + 104) = 1;
  }

  return result;
}

uint64_t AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v67 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v62 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v63 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v59 - v7;
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v61 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  char v14 = (char *)&v59 - v13;
  __n128 v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = *v3;
  uint64_t v68 = v3[1];
  uint64_t v65 = v3[2];
  uint64_t v66 = v18;
  uint64_t v64 = v3[3];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))( (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  a2,  v16);
  if (!swift_dynamicCast())
  {
    uint64_t v75 = MEMORY[0x18961AFE8];
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    uint64_t v37 = dispatch thunk of Collection.count.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    uint64_t v38 = v75;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v37 > *(void *)(v38 + 24) >> 1)
    {
      if (*(void *)(v38 + 16) <= v37) {
        int64_t v40 = v37;
      }
      else {
        int64_t v40 = *(void *)(v38 + 16);
      }
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v40,  0);
      uint64_t v38 = v75;
    }

    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    dispatch thunk of Sequence.makeIterator()();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((BYTE1(v73) & 1) == 0)
    {
      char v52 = v73;
      do
      {
        uint64_t v75 = v38;
        unint64_t v54 = *(void *)(v38 + 16);
        unint64_t v53 = *(void *)(v38 + 24);
        if (v54 >= v53 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v53 > 1,  v54 + 1,  1);
          uint64_t v38 = v75;
        }

        *(void *)(v38 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v54 + 1;
        *(_BYTE *)(v38 + v54 + 32) = v52;
        dispatch thunk of IteratorProtocol.next()();
        char v52 = v73;
      }

      while (BYTE1(v73) != 1);
    }

    (*(void (**)(char *, uint64_t))(v63 + 8))(v8, AssociatedTypeWitness);
    uint64_t v41 = v75;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v41 + 16) + 1LL,  1);
      uint64_t v41 = v75;
    }

    uint64_t v42 = v66;
    uint64_t v43 = v68;
    unint64_t v45 = *(void *)(v41 + 16);
    unint64_t v44 = *(void *)(v41 + 24);
    unint64_t v46 = v45 + 1;
    if (v45 >= v44 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
      uint64_t v41 = v75;
    }

    *(void *)(v41 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v46;
    *(_BYTE *)(v41 + 32 + v45) = 0;
    uint64_t v47 = (void *)objc_opt_self();
    swift_retain();
    __int128 v73 = 0u;
    *(_OWORD *)unint64_t v74 = 0u;
    *(int64x2_t *)&v74[16] = vdupq_n_s64(1uLL);
    objc_msgSend( v47,  sel_calculateOffsetsForLine_column_inString_size_withExistingOffsets_,  v42,  v43,  v41 + 32,  v45 + 1,  &v73);
    uint64_t v23 = 0LL;
    if ((void)v69 == 0x7FFFFFFFFFFFFFFFLL
      || (uint64_t v48 = *((void *)&v69 + 1), *((void *)&v69 + 1) == 0x7FFFFFFFFFFFFFFFLL))
    {
      uint64_t v68 = 1LL;
    }

    else
    {
      uint64_t v68 = 1LL;
      if (v70 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v49 = v47;
        unint64_t v50 = v46;
        uint64_t v51 = 0LL;
        uint64_t v31 = 0LL;
        uint64_t v32 = 0LL;
        uint64_t v33 = 0LL;
        uint64_t v34 = 0LL;
        uint64_t v35 = 0LL;
        uint64_t v36 = 0LL;
        if ((void)v71 != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v32 = v71;
          uint64_t v23 = v69;
          __int128 v73 = v69;
          uint64_t v31 = v70;
          *(void *)unint64_t v74 = v70;
          *(_OWORD *)&v74[8] = v71;
          *(void *)&v74[24] = v72;
          objc_msgSend(v49, (SEL)&selRef_containsIndexes_ + 6, v65, v64, v41 + 32, v50, &v73);
          uint64_t v33 = v69;
          if ((void)v69 == 0x7FFFFFFFFFFFFFFFLL
            || (uint64_t v34 = *((void *)&v69 + 1), *((void *)&v69 + 1) == 0x7FFFFFFFFFFFFFFFLL)
            || (uint64_t v35 = v70, v70 == 0x7FFFFFFFFFFFFFFFLL)
            || (uint64_t v36 = v71, (void)v71 == 0x7FFFFFFFFFFFFFFFLL))
          {
            uint64_t v23 = 0LL;
            uint64_t v51 = 0LL;
            uint64_t v31 = 0LL;
            uint64_t v32 = 0LL;
            uint64_t v33 = 0LL;
            uint64_t v34 = 0LL;
            uint64_t v35 = 0LL;
            uint64_t v36 = 0LL;
            uint64_t v68 = 1LL;
          }

          else
          {
            uint64_t v68 = 0LL;
            uint64_t v51 = v48;
          }
        }

        goto LABEL_42;
      }
    }

    uint64_t v51 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
LABEL_42:
    uint64_t v55 = v51;
    uint64_t result = swift_release_n();
    goto LABEL_43;
  }

  uint64_t v20 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v20 + 16);
  unint64_t v22 = (void *)objc_opt_self();
  __int128 v73 = 0u;
  *(_OWORD *)unint64_t v74 = 0u;
  *(int64x2_t *)&v74[16] = vdupq_n_s64(1uLL);
  objc_msgSend( v22,  sel_calculateOffsetsForLine_column_inString_size_withExistingOffsets_,  v66,  v68,  v20 + 32,  v21,  &v73);
  uint64_t v23 = 0LL;
  uint64_t v24 = v69;
  uint64_t v68 = 1LL;
  uint64_t v63 = v20;
  if ((void)v69 == 0x7FFFFFFFFFFFFFFFLL
    || (uint64_t v25 = *((void *)&v69 + 1), *((void *)&v69 + 1) == 0x7FFFFFFFFFFFFFFFLL)
    || (uint64_t v26 = v70, v70 == 0x7FFFFFFFFFFFFFFFLL))
  {
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
  }

  else
  {
    char v27 = v22;
    uint64_t v28 = v21;
    uint64_t v29 = v20 + 32;
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
    if ((void)v71 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v32 = v71;
      __int128 v73 = v69;
      *(void *)unint64_t v74 = v70;
      *(_OWORD *)&v74[8] = v71;
      *(void *)&v74[24] = v72;
      objc_msgSend(v27, (SEL)&selRef_containsIndexes_ + 6, v65, v64, v29, v28, &v73);
      uint64_t v33 = v69;
      if ((void)v69 == 0x7FFFFFFFFFFFFFFFLL
        || (uint64_t v34 = *((void *)&v69 + 1), *((void *)&v69 + 1) == 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t v35 = v70, v70 == 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t v36 = v71, (void)v71 == 0x7FFFFFFFFFFFFFFFLL))
      {
        uint64_t v23 = 0LL;
        uint64_t v30 = 0LL;
        uint64_t v31 = 0LL;
        uint64_t v32 = 0LL;
        uint64_t v33 = 0LL;
        uint64_t v34 = 0LL;
        uint64_t v35 = 0LL;
        uint64_t v36 = 0LL;
        uint64_t v68 = 1LL;
      }

      else
      {
        uint64_t v68 = 0LL;
        uint64_t v23 = v24;
        uint64_t v30 = v25;
        uint64_t v31 = v26;
      }
    }
  }

  uint64_t v55 = v30;
  uint64_t result = swift_release();
LABEL_43:
  uint64_t v57 = v67;
  char v58 = v68;
  *unint64_t v67 = v23;
  v57[1] = v55;
  v57[2] = v31;
  v57[3] = v32;
  v57[4] = v33;
  void v57[5] = v34;
  v57[6] = v35;
  v57[7] = v36;
  *((_BYTE *)v57 + 64) = v58;
  return result;
}

uint64_t specialized static AttributedString.MarkdownSourcePosition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((vminv_u16((uint16x4_t)vcltz_s16( vshl_n_s16( vmovn_s32( vuzp1q_s32( (int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2),  (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 16), *(int64x2_t *)(a2 + 16)))),  0xFuLL))) & 1) == 0) {
    return 0LL;
  }
  char v4 = *(_BYTE *)(a1 + 104);
  int64x2_t v5 = *(int64x2_t *)(a1 + 88);
  int64x2_t v6 = *(int64x2_t *)(a1 + 72);
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 64)) {
      return 0LL;
    }
    goto LABEL_9;
  }

  uint64_t result = 0LL;
  if ((*(_BYTE *)(a2 + 64) & 1) == 0
    && (~vaddv_s16((int16x4_t)vand_s8( (int8x8_t)vcltz_s16( vshl_n_s16( vmovn_s32( vuzp1q_s32( (int32x4_t)vceqq_s64( *(int64x2_t *)(a1 + 32),  *(int64x2_t *)(a2 + 32)),  (int32x4_t)vceqq_s64( *(int64x2_t *)(a1 + 48),  *(int64x2_t *)(a2 + 48)))),  0xFuLL)),  (int8x8_t)0x8000400020001LL)) & 0xF) == 0)
  {
LABEL_9:
    if ((v4 & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 104) & 1) != 0) {
        return 1LL;
      }
    }

    else if ((*(_BYTE *)(a2 + 104) & 1) == 0 {
           && (~vaddv_s16((int16x4_t)vand_s8( (int8x8_t)vcltz_s16( vshl_n_s16( vmovn_s32( vuzp1q_s32( (int32x4_t)vceqq_s64( v6,  *(int64x2_t *)(a2 + 72)),  (int32x4_t)vceqq_s64( v5,  *(int64x2_t *)(a2 + 88)))),  0xFuLL)),  (int8x8_t)0x8000400020001LL)) & 0xF) == 0)
    }
    {
      return 1LL;
    }

    return 0LL;
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownSourcePosition.CodingKeys,  &type metadata for AttributedString.MarkdownSourcePosition.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownSourcePosition.CodingKeys,  &type metadata for AttributedString.MarkdownSourcePosition.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownSourcePosition.CodingKeys,  &type metadata for AttributedString.MarkdownSourcePosition.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownSourcePosition.CodingKeys,  &type metadata for AttributedString.MarkdownSourcePosition.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownSourcePosition.Offsets,  &type metadata for AttributedString.MarkdownSourcePosition.Offsets);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownSourcePosition.Offsets,  &type metadata for AttributedString.MarkdownSourcePosition.Offsets);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownSourcePosition.Offsets,  &type metadata for AttributedString.MarkdownSourcePosition.Offsets);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets);
  }

  return result;
}

uint64_t specialized AttributedString.MarkdownSourcePosition.Offsets.init(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.MarkdownSourcePosition.Offsets.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  int64x2_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  char v12 = 0;
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  char v11 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  char v10 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  char v9 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v6;
}

uint64_t outlined consume of AttributedString.MarkdownParsingOptions?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AttributedString.MarkdownSourcePosition.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E694C7472617473LL && a2 == 0xE900000000000065LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6C6F437472617473LL && a2 == 0xEB000000006E6D75LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x656E694C646E65LL && a2 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x6D756C6F43646E65LL && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x66664F7472617473LL && a2 == 0xEC00000073746573LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0x657366664F646E65LL && a2 == 0xEA00000000007374LL)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t specialized AttributedString.MarkdownSourcePosition.Offsets.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 946238581 && a2 == 0xE400000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x3631667475LL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0xD000000000000011LL && a2 == 0x80000001839D2B40LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001839D2B60LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t specialized _AttributedStringFromMarkdownCreatorConcrete.parseExtendedAttributes(from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v12)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v9 = JSONDecoder.init()();
  (*(void (**)(uint64_t))(*(void *)v9 + 232LL))(1LL);
  (*(void (**)(uint64_t))(*(void *)v9 + 256LL))(1LL);
  uint64_t v11 = type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox(0LL, a3, a4, v10);
  char v12 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 320LL);
  uint64_t v13 = MEMORY[0x186E20D4C]( &protocol conformance descriptor for _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox,  v11);
  v12(&v15, v11, a1, a2, v11, v13);
  uint64_t result = swift_release();
  if (!v4) {
    return v15;
  }
  return result;
}

void specialized _AttributedStringFromMarkdownCreatorConcrete.init()()
{
}

__n128 specialized static AttributedString.MarkdownSourcePosition._forceBridgeFromObjectiveC(_:result:)( void *a1, __n128 *a2)
{
  id v3 = a1;
  objc_msgSend(v3, sel_startOffsets);
  objc_msgSend(v3, sel_endOffsets);

  unint64_t v4 = 0LL;
  BOOL v5 = 1LL;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
  }

  else
  {
    unint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
    if (v17 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v5 = v18 == 0x7FFFFFFFFFFFFFFFLL;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v4 = 0LL;
      }
      else {
        unint64_t v4 = v15;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v6 = 0LL;
      }
      else {
        unint64_t v6 = v16;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v7 = 0LL;
      }
      else {
        unint64_t v7 = v17;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v8 = 0LL;
      }
      else {
        unint64_t v8 = v18;
      }
    }
  }

  unint64_t v9 = 0LL;
  BOOL v10 = 1;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v11 = 0LL;
    unint64_t v12 = 0LL;
    unint64_t v13 = 0LL;
  }

  else
  {
    unint64_t v11 = 0LL;
    unint64_t v12 = 0LL;
    unint64_t v13 = 0LL;
    if (v17 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v10 = v18 == 0x7FFFFFFFFFFFFFFFLL;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v9 = 0LL;
      }
      else {
        unint64_t v9 = v15;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v11 = 0LL;
      }
      else {
        unint64_t v11 = v16;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v12 = 0LL;
      }
      else {
        unint64_t v12 = v17;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v13 = 0LL;
      }
      else {
        unint64_t v13 = v18;
      }
    }
  }

  *a2 = v19;
  __n128 result = v19;
  a2[1] = v19;
  a2[2].n128_u64[0] = v4;
  a2[2].n128_u64[1] = v6;
  a2[3].n128_u64[0] = v7;
  a2[3].n128_u64[1] = v8;
  a2[4].n128_u64[0] = v5;
  a2[4].n128_u64[1] = v9;
  a2[5].n128_u64[0] = v11;
  a2[5].n128_u64[1] = v12;
  a2[6].n128_u64[0] = v13;
  a2[6].n128_u8[8] = v10;
  a2[6].n128_u8[9] = 0;
  return result;
}

uint64_t specialized static AttributedString.MarkdownSourcePosition._conditionallyBridgeFromObjectiveC(_:result:)( void *a1, uint64_t a2)
{
  id v3 = a1;
  objc_msgSend(v3, sel_startOffsets);
  objc_msgSend(v3, sel_endOffsets);

  uint64_t v4 = 0LL;
  BOOL v5 = 1LL;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    if (v17 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v5 = v18 == 0x7FFFFFFFFFFFFFFFLL;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v4 = 0LL;
      }
      else {
        uint64_t v4 = v15;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v6 = 0LL;
      }
      else {
        uint64_t v6 = v16;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v7 = 0LL;
      }
      else {
        uint64_t v7 = v17;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v8 = 0LL;
      }
      else {
        uint64_t v8 = v18;
      }
    }
  }

  uint64_t v9 = 0LL;
  BOOL v10 = 1;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    if (v17 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v10 = v18 == 0x7FFFFFFFFFFFFFFFLL;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v9 = 0LL;
      }
      else {
        uint64_t v9 = v15;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v11 = 0LL;
      }
      else {
        uint64_t v11 = v16;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v12 = 0LL;
      }
      else {
        uint64_t v12 = v17;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v13 = 0LL;
      }
      else {
        uint64_t v13 = v18;
      }
    }
  }

  *(_OWORD *)a2 = v19;
  *(_OWORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v19;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v7;
  *(void *)(a2 + 56) = v8;
  *(void *)(a2 + 64) = v5;
  *(void *)(a2 + 72) = v9;
  *(void *)(a2 + 80) = v11;
  *(void *)(a2 + 88) = v12;
  *(void *)(a2 + 96) = v13;
  *(_BYTE *)(a2 + 104) = v10;
  *(_BYTE *)(a2 + 105) = 0;
  return 1LL;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownParsingOptions.FailurePolicy and conformance AttributedString.MarkdownParsingOptions.FailurePolicy()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.FailurePolicy and conformance AttributedString.MarkdownParsingOptions.FailurePolicy;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.FailurePolicy and conformance AttributedString.MarkdownParsingOptions.FailurePolicy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownParsingOptions.FailurePolicy,  &type metadata for AttributedString.MarkdownParsingOptions.FailurePolicy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.FailurePolicy and conformance AttributedString.MarkdownParsingOptions.FailurePolicy);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownParsingOptions.InterpretedSyntax and conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.InterpretedSyntax and conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.InterpretedSyntax and conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownParsingOptions.InterpretedSyntax,  &type metadata for AttributedString.MarkdownParsingOptions.InterpretedSyntax);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.InterpretedSyntax and conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownSourcePosition,  &type metadata for AttributedString.MarkdownSourcePosition);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownSourcePosition,  &type metadata for AttributedString.MarkdownSourcePosition);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition);
  }

  return result;
}

uint64_t type metadata completion function for _AttributedStringFromMarkdownCreatorConcrete()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _AttributedStringFromMarkdownCreatorConcrete);
}

uint64_t initializeWithCopy for AttributedString.MarkdownParsingOptions(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.MarkdownParsingOptions(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for AttributedString.MarkdownParsingOptions(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.MarkdownParsingOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.MarkdownParsingOptions( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownParsingOptions()
{
  return &type metadata for AttributedString.MarkdownParsingOptions;
}

uint64_t storeEnumTagSinglePayload for AttributedString.MarkdownParsingOptions.FailurePolicy( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1833E7B4C + 4 * byte_183827FCF[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1833E7B80 + 4 * byte_183827FCA[v4]))();
}

uint64_t sub_1833E7B80(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833E7B88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1833E7B90LL);
  }
  return result;
}

uint64_t sub_1833E7B9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1833E7BA4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1833E7BA8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833E7BB0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy()
{
  return &type metadata for AttributedString.MarkdownParsingOptions.FailurePolicy;
}

uint64_t storeEnumTagSinglePayload for AttributedString.MarkdownParsingOptions.InterpretedSyntax( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1833E7C18 + 4 * byte_183827FD9[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1833E7C4C + 4 * byte_183827FD4[v4]))();
}

uint64_t sub_1833E7C4C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833E7C54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1833E7C5CLL);
  }
  return result;
}

uint64_t sub_1833E7C68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1833E7C70LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1833E7C74(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833E7C7C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax()
{
  return &type metadata for AttributedString.MarkdownParsingOptions.InterpretedSyntax;
}

uint64_t getEnumTagSinglePayload for AttributedString.MarkdownSourcePosition(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 105)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AttributedString.MarkdownSourcePosition( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 105) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownSourcePosition()
{
  return &type metadata for AttributedString.MarkdownSourcePosition;
}

uint64_t storeEnumTagSinglePayload for AttributedString.MarkdownSourcePosition.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1833E7D5C + 4 * byte_183827FE3[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1833E7D90 + 4 * byte_183827FDE[v4]))();
}

uint64_t sub_1833E7D90(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833E7D98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1833E7DA0LL);
  }
  return result;
}

uint64_t sub_1833E7DAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1833E7DB4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1833E7DB8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833E7DC0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownSourcePosition.CodingKeys()
{
  return &type metadata for AttributedString.MarkdownSourcePosition.CodingKeys;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownSourcePosition.Offsets()
{
  return &type metadata for AttributedString.MarkdownSourcePosition.Offsets;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownSourcePosition.Offsets.CodingKeys,  &unk_189C8E9A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownSourcePosition.Offsets.CodingKeys,  &unk_189C8E9A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownSourcePosition.Offsets.CodingKeys,  &unk_189C8E9A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.MarkdownSourcePosition.Offsets.CodingKeys,  &unk_189C8E9A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys);
  }

  return result;
}

uint64_t outlined destroy of (key: String, value: Any)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox()
{
}

uint64_t type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox);
}

uint64_t lazy protocol witness table accessor for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSInlinePresentationIntent(255LL);
    uint64_t result = MEMORY[0x186E20D4C](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t type metadata completion function for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox( uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(void *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }

  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }

  return a1;
}

uint64_t destroy for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( a1,  AssociatedTypeWitness);
}

uint64_t initializeWithCopy for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox( uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox( uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox( uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox( uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox( uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if ((_DWORD)v7)
  {
    __asm { BR              X11 }
  }

  return (v6 + v11 + 1);
}

void storeEnumTagSinglePayload for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    unsigned int v9 = 0u;
  }

  else if (v8 <= 3)
  {
    unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      unsigned int v9 = 4u;
    }

    else if (v11 >= 0x100)
    {
      unsigned int v9 = 2;
    }

    else
    {
      unsigned int v9 = v11 > 1;
    }
  }

  else
  {
    unsigned int v9 = 1u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }

        else
        {
          *a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t storeEnumTagSinglePayload for AttributedString.MarkdownSourcePosition.Offsets.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1833E8628 + 4 * byte_183827FFB[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1833E865C + 4 * byte_183827FF6[v4]))();
}

uint64_t sub_1833E865C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833E8664(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1833E866CLL);
  }
  return result;
}

uint64_t sub_1833E8678(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1833E8680LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1833E8684(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833E868C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AttributedString.MarkdownSourcePosition.Offsets.CodingKeys()
{
  return &unk_189C8E9A0;
}

uint64_t type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey);
}

uint64_t initializeWithCopy for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey( uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  return a1;
}

uint64_t assignWithTake for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey( uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void base witness table accessor for CustomDebugStringConvertible in _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey()
{
}

void base witness table accessor for CustomStringConvertible in _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey()
{
}

void Date.ParseStrategy.consuming(_:startingAt:in:)( unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  if (a1 >> 14 >= a2 >> 14) {
    goto LABEL_13;
  }
  uint64_t v4 = Date.ParseStrategy.formatter.getter();
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = v4;
  uint64_t v6 = String.subscript.getter();
  if (!((v6 ^ v7) >> 14)
    || (*(_BYTE *)(v5 + 24) & 1) == 0
    && (Substring.subscript.getter(), char v8 = Character.isWhitespace.getter(), swift_bridgeObjectRelease(), (v8 & 1) != 0))
  {
    swift_release();
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    *(_BYTE *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    return;
  }

  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  uint64_t v9 = String.init<A>(_:)();
  unint64_t v11 = v10;
  udat_getCalendar();
  ucal_clone();
  swift_bridgeObjectRetain();
  uint64_t v17 = specialized _copyCollectionToContiguousArray<A>(_:)(v9, v11);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v12 = String.Index.utf16Offset<A>(in:)();
  if (v12 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v13 = v12;
  if (v12 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }

  int v18 = v12;
  if (v17[2] >> 31) {
    goto LABEL_17;
  }
  udat_parseCalendar();
  swift_release();
  if (v13 == v18)
  {
    ucal_close();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

  ucal_getMillis();
  double v15 = v14 / 1000.0 + -978307200.0;
  ucal_close();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v16 = String.Index.init<A>(utf16Offset:in:)();
  swift_release();
  *(void *)a3 = v16;
  *(double *)(a3 + 8) = v15;
  *(_BYTE *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
}

uint64_t Date.ParseStrategy.isLenient.getter()
{
  return *v0;
}

uint64_t Date.ParseStrategy.isLenient.setter(uint64_t result)
{
  _BYTE *v1 = result;
  return result;
}

uint64_t (*Date.ParseStrategy.isLenient.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double Date.ParseStrategy.twoDigitStartDate.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double Date.ParseStrategy.twoDigitStartDate.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*Date.ParseStrategy.twoDigitStartDate.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ParseStrategy.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

uint64_t Date.ParseStrategy.locale.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  return result;
}

uint64_t (*Date.ParseStrategy.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ParseStrategy.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 32);
  return swift_unknownObjectRetain();
}

__n128 Date.ParseStrategy.timeZone.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*Date.ParseStrategy.timeZone.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ParseStrategy.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 48);
  return swift_unknownObjectRetain();
}

__n128 Date.ParseStrategy.calendar.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[3] = *a1;
  return result;
}

uint64_t (*Date.ParseStrategy.calendar.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ParseStrategy.format.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 Date.ParseStrategy.init(format:locale:timeZone:calendar:isLenient:twoDigitStartDate:)@<Q0>( uint64_t *a1@<X0>, _OWORD *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = *a6;
  *(_BYTE *)a7 = a5;
  *(void *)(a7 + 8) = v9;
  __int128 v10 = *a3;
  *(_OWORD *)(a7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *a2;
  *(_OWORD *)(a7 + 32) = v10;
  __n128 result = *a4;
  *(__n128 *)(a7 + 48) = *a4;
  *(void *)(a7 + 64) = v7;
  *(void *)(a7 + 72) = v8;
  return result;
}

uint64_t Date.ParseStrategy.formatter.getter()
{
  void (*v17)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  void v27[4];
  void v28[3];
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v26 = *v0;
  uint64_t v1 = *((void *)v0 + 1);
  uint64_t v2 = *((void *)v0 + 5);
  uint64_t v3 = *((void *)v0 + 7);
  uint64_t v4 = *((void *)v0 + 9);
  uint64_t v25 = *((void *)v0 + 8);
  if (*((void *)v0 + 2))
  {
    uint64_t v5 = *((void *)v0 + 3);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
    swift_unknownObjectRetain();
    uint64_t v8 = v7(ObjectType, v5);
    unint64_t v10 = v9;
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v10 = 0LL;
  }

  uint64_t v11 = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 32);
  swift_unknownObjectRetain();
  uint64_t v13 = v12(v11, v2);
  uint64_t v15 = v14;
  swift_unknownObjectRelease();
  uint64_t v16 = swift_getObjectType();
  uint64_t v17 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 24);
  swift_unknownObjectRetain();
  v17(v28, v16, v3);
  swift_unknownObjectRelease();
  int v18 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56);
  swift_unknownObjectRetain();
  __int128 v19 = v18(v16, v3);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v16, v3);
  swift_unknownObjectRelease();
  if (v10) {
    uint64_t v21 = v8;
  }
  else {
    uint64_t v21 = 0LL;
  }
  if (v10) {
    unint64_t v22 = v10;
  }
  else {
    unint64_t v22 = 0xE000000000000000LL;
  }
  v27[0] = v21;
  v27[1] = v22;
  v27[2] = v13;
  v27[3] = v15;
  v28[1] = v19;
  void v28[2] = v20;
  uint64_t v29 = 0;
  uint64_t v30 = v25;
  uint64_t v31 = v4;
  uint64_t v32 = v26;
  uint64_t v33 = v1;
  swift_bridgeObjectRetain();
  uint64_t v23 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v23;
}

__n128 Date.ParseStrategy.init(formatStyle:lenient:twoDigitStartDate:)@<Q0>( __int128 *a1@<X0>, char a2@<W1>, unint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  __int128 v7 = a1[2];
  __int128 v6 = a1[3];
  __int128 v8 = a1[4];
  __int128 v9 = a1[6];
  *(_OWORD *)uint64_t v64 = a1[5];
  *(_OWORD *)&v64[16] = v9;
  *(_OWORD *)&v64[26] = *(__int128 *)((char *)a1 + 106);
  __int128 v10 = a1[1];
  __int128 v59 = *a1;
  __int128 v60 = v10;
  __int128 v61 = v7;
  __int128 v62 = v6;
  __int128 v63 = v8;
  unint64_t v11 = *a3;
  char v12 = v7;
  if ((v7 & 0xFF000000000000LL) == 0x3000000000000LL)
  {
    uint64_t v13 = 0LL;
    LOBYTE(v14) = 0;
    uint64_t v15 = 0LL;
    LOBYTE(v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    LOBYTE(v17) = 0;
    uint64_t v18 = 0LL;
    LOBYTE(v19) = 12;
    char v20 = -1;
    LOBYTE(v21) = 2;
    LOBYTE(v22) = 9;
    LOBYTE(v23) = 6;
    char v12 = 1;
    LOBYTE(v24) = 5;
    char v25 = 3;
    char v26 = 3;
    LOBYTE(v27) = 3;
    LOBYTE(v28) = 3;
    LOBYTE(v29) = 1;
  }

  else
  {
    uint64_t v13 = *((void *)&v59 + 1);
    char v26 = v60;
    unint64_t v24 = (unint64_t)v60 >> 8;
    uint64_t v18 = *((void *)&v61 + 1);
    uint64_t v15 = *((void *)&v60 + 1);
    char v25 = v59;
    unint64_t v14 = (unint64_t)v60 >> 16;
    unint64_t v27 = (unint64_t)v60 >> 24;
    unint64_t v16 = ((unint64_t)v7 >> 8) & 1;
    unint64_t v28 = (unint64_t)v7 >> 16;
    unint64_t v23 = (unint64_t)v7 >> 24;
    unint64_t v22 = DWORD1(v7);
    unint64_t v17 = (unint64_t)v7 >> 40;
    unint64_t v29 = WORD3(v7);
    unint64_t v21 = BYTE7(v7);
    char v20 = v62;
    int v19 = BYTE1(v62);
  }

  v41[0] = v25;
  uint64_t v42 = v13;
  char v43 = v26;
  char v44 = v24;
  char v45 = v14;
  char v46 = v27;
  uint64_t v47 = v15;
  char v48 = v12;
  char v49 = v16;
  char v50 = v28;
  char v51 = v23;
  char v52 = v22;
  char v53 = v17;
  char v54 = v29;
  char v55 = v21;
  uint64_t v56 = v18;
  char v57 = v20;
  char v58 = v19;
  unint64_t v30 = *((void *)&v63 + 1);
  unint64_t v31 = *(void *)v64;
  v40[0] = *((os_unfair_lock_s **)&v63 + 1);
  v40[1] = *(os_unfair_lock_s **)v64;
  unint64_t v32 = *(void *)&v64[24];
  unint64_t v33 = *(void *)&v64[32];
  v39[0] = *(void *)&v64[24];
  v39[1] = *(void *)&v64[32];
  uint64_t v34 = specialized static ICUPatternGenerator.localizedPattern(symbols:locale:calendar:)( (uint64_t)v41,  v40,  (uint64_t)v39);
  unint64_t v36 = v35;
  swift_unknownObjectRetain();
  __n128 v38 = *(__n128 *)&v64[8];
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  outlined release of Date.FormatStyle((uint64_t)&v59);
  a4->n128_u8[0] = a2 & 1;
  a4->n128_u64[1] = v11;
  a4[1].n128_u64[0] = v30;
  a4[1].n128_u64[1] = v31;
  __n128 result = v38;
  a4[2] = v38;
  a4[3].n128_u64[0] = v32;
  a4[3].n128_u64[1] = v33;
  a4[4].n128_u64[0] = v34;
  a4[4].n128_u64[1] = v36;
  return result;
}

uint64_t Date.ParseStrategy.hash(into:)(uint64_t a1)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  Swift::UInt v46;
  Swift::UInt v47;
  Swift::UInt8 v48;
  Swift::UInt8 v49;
  Swift::UInt8 v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[144];
  _BYTE v59[8];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  void v77[18];
  _BYTE v78[144];
  _BYTE v79[152];
  Swift::UInt64 v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v56 = *(void *)(v1 + 56);
  char v57 = *(void *)(v1 + 40);
  Hasher._combine(_:)(*(_BYTE *)v1);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v3;
  }
  else {
    Swift::UInt64 v6 = 0LL;
  }
  Hasher._combine(_:)(v6);
  if (!v4)
  {
    Hasher._combine(_:)(0);
LABEL_11:
    unint64_t v11 = v56;
    goto LABEL_12;
  }

  Hasher._combine(_:)(1u);
  uint64_t ObjectType = swift_getObjectType();
  __int128 v8 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain_n();
  if ((v8(ObjectType, v5) & 1) != 0)
  {
    Swift::UInt8 v9 = 1;
LABEL_10:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease_n();
    goto LABEL_11;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  __int128 v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v10(v77, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78);
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v79);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v79) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_10;
  }

  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v59);
  Hasher._combine(_:)(1u);
  if (v59[0] == 2)
  {
    unint64_t v17 = 0;
  }

  else
  {
    unint64_t v17 = v59[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v17);
  uint64_t v18 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    unint64_t v23 = v59;
    goto LABEL_27;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v18 + 16));
  int v19 = *(void *)(v18 + 16);
  if (!v19)
  {
    outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v58);
    unint64_t v23 = v58;
LABEL_27:
    outlined retain of LocalePreferences(v23);
    if (!v61) {
      goto LABEL_21;
    }
    goto LABEL_28;
  }

  outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v20 = v18 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v20 += 16LL;
    --v19;
  }

  while (v19);
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_21:
    Hasher._combine(_:)(0);
    if (!v62) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.ParseStrategy.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1833E9990 + 4 * byte_183828860[*v0]))( 0x6E65696E654C7369LL,  0xE900000000000074LL);
}

unint64_t sub_1833E9990()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1833E99AC()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_1833E99C0()
{
  return 0x656E6F5A656D6974LL;
}

uint64_t sub_1833E99D8()
{
  return 0x7261646E656C6163LL;
}

uint64_t sub_1833E99F0()
{
  return 0x74616D726F66LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.ParseStrategy.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Date.ParseStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ParseStrategy.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ParseStrategy.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

Swift::Int Date.ParseStrategy.hashValue.getter()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t);
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[144];
  _BYTE v61[8];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  char v78;
  void v79[18];
  _BYTE v80[144];
  _BYTE v81[144];
  _BYTE v82[80];
  Swift::UInt8 v1 = *(_BYTE *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 40);
  __int128 v59 = *(void *)(v0 + 56);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v2;
  }
  else {
    Swift::UInt64 v6 = 0LL;
  }
  Hasher._combine(_:)(v6);
  if (!v3)
  {
    Hasher._combine(_:)(0);
LABEL_11:
    unint64_t v11 = v59;
    goto LABEL_12;
  }

  Hasher._combine(_:)(1u);
  uint64_t ObjectType = swift_getObjectType();
  __int128 v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if ((v8(ObjectType, v4) & 1) != 0)
  {
    Swift::UInt8 v9 = 1;
LABEL_10:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease_n();
    goto LABEL_11;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  __int128 v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v79, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v80);
  outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)v81);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v81) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_10;
  }

  outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)v61);
  Hasher._combine(_:)(1u);
  if (v61[0] == 2)
  {
    unint64_t v17 = 0;
  }

  else
  {
    unint64_t v17 = v61[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v17);
  uint64_t v18 = v62;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    unint64_t v22 = v61;
    goto LABEL_26;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v18 + 16));
  int v19 = *(void *)(v18 + 16);
  if (!v19)
  {
    outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)v60);
    unint64_t v22 = v60;
LABEL_26:
    outlined retain of LocalePreferences(v22);
    if (!v63) {
      goto LABEL_21;
    }
    goto LABEL_27;
  }

  outlined retain of LocalePreferences?( (uint64_t)v80,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v20 = v18 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v20 += 16LL;
    --v19;
  }

  while (v19);
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_21:
    Hasher._combine(_:)(0);
    if (!v64) {
      goto LABEL_22;
    }
LABEL_28:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    unint64_t v21 = v65;
    if (!v65) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ParseStrategy()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t);
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  void v77[18];
  _BYTE v78[144];
  _BYTE v79[144];
  _BYTE v80[80];
  Swift::UInt8 v1 = *(_BYTE *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 40);
  char v58 = *(void *)(v0 + 56);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v2;
  }
  else {
    Swift::UInt64 v6 = 0LL;
  }
  Hasher._combine(_:)(v6);
  if (!v3)
  {
    Hasher._combine(_:)(0);
LABEL_11:
    unint64_t v11 = v58;
    goto LABEL_12;
  }

  Hasher._combine(_:)(1u);
  uint64_t ObjectType = swift_getObjectType();
  __int128 v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if ((v8(ObjectType, v4) & 1) != 0)
  {
    Swift::UInt8 v9 = 1;
LABEL_10:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease_n();
    goto LABEL_11;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  __int128 v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v77, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78);
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v79);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v79) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_10;
  }

  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)&v59);
  Hasher._combine(_:)(1u);
  if (v59 == 2)
  {
    unint64_t v17 = 0;
  }

  else
  {
    unint64_t v17 = v59 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v17);
  uint64_t v18 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
LABEL_25:
    outlined retain of LocalePreferences(&v59);
    if (!v61) {
      goto LABEL_21;
    }
    goto LABEL_26;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v18 + 16));
  int v19 = *(void *)(v18 + 16);
  if (!v19) {
    goto LABEL_25;
  }
  outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v20 = v18 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v20 += 16LL;
    --v19;
  }

  while (v19);
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_21:
    Hasher._combine(_:)(0);
    if (!v62) {
      goto LABEL_22;
    }
LABEL_27:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    unint64_t v21 = v63;
    if (!v63) {
      goto LABEL_23;
    }
    goto LABEL_28;
  }

Foundation::Date __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Date.ParseStrategy.parse(_:)( Swift::String a1)
{
  object = a1._object;
  __darwin_time_t countAndFlagsBits = a1._countAndFlagsBits;
  Swift::UInt64 v6 = v1;
  uint64_t v74 = *MEMORY[0x1895F89C0];
  uint64_t v7 = *(void *)(v2 + 8);
  uint64_t v8 = *(void *)(v2 + 64);
  uint64_t v9 = *(void *)(v2 + 72);
  LOBYTE(v70.tv_sec) = *(_BYTE *)v2;
  v70.uint64_t tv_nsec = v7;
  __int128 v10 = *(_OWORD *)(v2 + 32);
  v71[0] = *(_OWORD *)(v2 + 16);
  v71[1] = v10;
  _OWORD v71[2] = *(_OWORD *)(v2 + 48);
  uint64_t v72 = v8;
  uint64_t v73 = v9;
  if (Date.ParseStrategy.formatter.getter())
  {
    v70.__darwin_time_t tv_sec = countAndFlagsBits;
    v70.uint64_t tv_nsec = (uint64_t)object;
    udat_getCalendar();
    int v69 = 0;
    ucal_clone();
    swift_bridgeObjectRetain();
    unint64_t v11 = specialized _copyCollectionToContiguousArray<A>(_:)(countAndFlagsBits, (unint64_t)object);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v12 = String.Index.utf16Offset<A>(in:)();
    if (v12 < (uint64_t)0xFFFFFFFF80000000LL)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }

    uint64_t v13 = v12;
    if (v12 > 0x7FFFFFFF)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }

    int v68 = v12;
    if (v11[2] >> 31)
    {
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
    }

    udat_parseCalendar();
    swift_release();
    if (v13 != v68)
    {
      ucal_getMillis();
      double v65 = v64 / 1000.0 + -978307200.0;
      ucal_close();
      swift_release();
      *Swift::UInt64 v6 = v65;
      return result;
    }

    ucal_close();
    v70.__darwin_time_t tv_sec = 0LL;
    v70.uint64_t tv_nsec = 0LL;
    clock_gettime(_CLOCK_REALTIME, &v70);
    uint64_t v14 = swift_retain_n();
    MEMORY[0x1895F8858](v14);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v67, &v70.tv_sec);
    if (!v3)
    {
      __darwin_time_t tv_sec = v70.tv_sec;
      uint64_t tv_nsec = v70.tv_nsec;
      swift_release_n();
      v70.__darwin_time_t tv_sec = 0LL;
      v70.uint64_t tv_nsec = 0xE000000000000000LL;
      if (tv_nsec)
      {
        _StringGuts.grow(_:)(88LL);
        v17.___darwin_time_t countAndFlagsBits = 0x7020746F6E6E6143LL;
        v17._object = (void *)0xED00002065737261LL;
        String.append(_:)(v17);
        v18.___darwin_time_t countAndFlagsBits = countAndFlagsBits;
        v18._object = object;
        String.append(_:)(v18);
        v19.___darwin_time_t countAndFlagsBits = 0xD000000000000046LL;
        v19._object = (void *)0x80000001839CAB20LL;
        String.append(_:)(v19);
        __darwin_time_t v20 = tv_sec;
        uint64_t v21 = tv_nsec;
      }

      else
      {
        _StringGuts.grow(_:)(16LL);
        swift_bridgeObjectRelease();
        strcpy((char *)&v70, "Cannot parse ");
        HIWORD(v70.tv_nsec) = -4864;
        __darwin_time_t v20 = countAndFlagsBits;
        uint64_t v21 = (uint64_t)object;
      }

      String.append(_:)(*(Swift::String *)&v20);
      v41.___darwin_time_t countAndFlagsBits = 46LL;
      v41._object = (void *)0xE100000000000000LL;
      String.append(_:)(v41);
      __darwin_time_t v42 = v70.tv_sec;
      uint64_t v43 = v70.tv_nsec;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
      *(void *)(inited + 72) = MEMORY[0x189617FA8];
      *(void *)(inited + 40) = v45;
      *(void *)(inited + 48) = v42;
      *(void *)(inited + 56) = v43;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      char v46 = (void *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v70);
      __darwin_time_t v47 = v70.tv_sec;
      uint64_t v48 = v70.tv_nsec;
      swift_retain();
      unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v48);
      if ((v50 & 1) != 0)
      {
        __break(1u);
      }

      else
      {
        v46[(v49 >> 6) + 8] |= 1LL << v49;
        char v51 = (__darwin_time_t *)(v46[6] + 16 * v49);
        *char v51 = v47;
        v51[1] = v48;
        outlined init with take of Any(v71, (_OWORD *)(v46[7] + 32 * v49));
        uint64_t v52 = v46[2];
        BOOL v31 = __OFADD__(v52, 1LL);
        uint64_t v53 = v52 + 1;
        if (!v31)
        {
          _OWORD v46[2] = v53;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v54 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v55 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v56 = objc_msgSend(v54, sel_initWithDomain_code_userInfo_, v55, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v57 = objc_msgSend(v56, sel_domain);
          id v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
          uint64_t v60 = v59;

          if (v58 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v60 == v61)
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
LABEL_22:
            swift_willThrow();
            swift_release();
            return result;
          }

          char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v62 & 1) != 0) {
            goto LABEL_22;
          }
          goto LABEL_29;
        }
      }

      __break(1u);
      goto LABEL_27;
    }

    swift_release_n();
    swift_willThrow();
    __break(1u);
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v22 = swift_initStackObject();
    *(_OWORD *)(v22 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    *(void *)(v22 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(v22 + 72) = MEMORY[0x189617FA8];
    *(void *)(v22 + 40) = v23;
    *(void *)(v22 + 48) = 0xD000000000000021LL;
    *(void *)(v22 + 56) = 0x80000001839CE1D0LL;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    unint64_t v24 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(v22 + 32, (uint64_t)&v70);
    __darwin_time_t v25 = v70.tv_sec;
    uint64_t v26 = v70.tv_nsec;
    swift_retain();
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26);
    if ((v28 & 1) != 0)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }

    v24[(v27 >> 6) + 8] |= 1LL << v27;
    unint64_t v29 = (__darwin_time_t *)(v24[6] + 16 * v27);
    *unint64_t v29 = v25;
    v29[1] = v26;
    outlined init with take of Any(v71, (_OWORD *)(v24[7] + 32 * v27));
    uint64_t v30 = v24[2];
    BOOL v31 = __OFADD__(v30, 1LL);
    uint64_t v32 = v30 + 1;
    if (v31)
    {
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    v24[2] = v32;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v33 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v34 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v35 = objc_msgSend(v33, sel_initWithDomain_code_userInfo_, v34, 2048, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v36 = objc_msgSend(v35, sel_domain);
    id v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    uint64_t v39 = v38;

    if (v37 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v39 == v40)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v63 & 1) == 0) {
        goto LABEL_33;
      }
    }

    swift_willThrow();
  }

  return result;
}

uint64_t Date.ParseStrategy.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ParseStrategy.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v1 + 8);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v18 = *(void *)(v1 + 24);
  uint64_t v19 = v9;
  __int128 v10 = *(_OWORD *)(v1 + 32);
  __int128 v15 = *(_OWORD *)(v1 + 48);
  __int128 v16 = v10;
  uint64_t v17 = *(void *)(v1 + 64);
  v14[1] = *(void *)(v1 + 72);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v20) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = v18;
    uint64_t v12 = v19;
    *(void *)&__int128 v20 = v8;
    char v21 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&__int128 v20 = v12;
    *((void *)&v20 + 1) = v11;
    char v21 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    __int128 v20 = v16;
    char v21 = 3;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    __int128 v20 = v15;
    char v21 = 4;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v20) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Date.ParseStrategy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ParseStrategy.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  else
  {
    LOBYTE(v26) = 0;
    int v9 = KeyedDecodingContainer.decode(_:forKey:)();
    char v27 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v26;
    char v27 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v25 = *((void *)&v26 + 1);
    uint64_t v12 = v26;
    char v27 = 3;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    swift_unknownObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __int128 v24 = v26;
    char v27 = 4;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    uint64_t v23 = v24;
    swift_unknownObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v22 = v9;
    __int128 v13 = v26;
    LOBYTE(v26) = 5;
    __int128 v21 = v13;
    swift_unknownObjectRetain();
    uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v16 = v15;
    v22 &= 1u;
    uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v18 = v14;
    v17(v8, v5);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    *(_BYTE *)a2 = v22;
    *(void *)(a2 + 8) = v10;
    uint64_t v19 = v25;
    *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v12;
    *(void *)(a2 + 24) = v19;
    __int128 v20 = v21;
    *(_OWORD *)(a2 + 32) = v24;
    *(_OWORD *)(a2 + 48) = v20;
    *(void *)(a2 + 64) = v18;
    *(void *)(a2 + 72) = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

  return swift_unknownObjectRelease();
}

Foundation::Date protocol witness for ParseStrategy.parse(_:) in conformance Date.ParseStrategy( Swift::String *a1)
{
  return Date.ParseStrategy.parse(_:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ParseStrategy@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.ParseStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ParseStrategy(void *a1)
{
  return Date.ParseStrategy.encode(to:)(a1);
}

__n128 static ParseStrategy.fixed<>(format:timeZone:locale:)@<Q0>( uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  __int128 v13 = *a2;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  uint64_t v9 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v10 = static CalendarCache.cache + 16;
  uint64_t v11 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in CalendarCache.fixed(_:)(v10, 0LL, &v14);
  os_unfair_lock_unlock(v11);
  swift_release_n();
  __n128 result = v14;
  *(_BYTE *)a4 = 1;
  *(void *)(a4 + 8) = 0xC1CD27E440000000LL;
  *(void *)(a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(void *)(a4 + 24) = v8;
  *(_OWORD *)(a4 + 32) = v13;
  *(__n128 *)(a4 + 48) = result;
  *(void *)(a4 + 64) = v6;
  *(void *)(a4 + 72) = v5;
  return result;
}

void protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance Date.ParseStrategy( unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance Date.ParseStrategy()
{
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t static RegexComponent<>.date(format:locale:timeZone:calendar:twoDigitStartDate:)@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  void (*v16)(void *__return_ptr, uint64_t, uint64_t);
  __int128 v18;
  uint64_t v19[2];
  void v20[2];
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v18 = *a3;
  uint64_t v11 = *a4;
  uint64_t v12 = *a5;
  if (*a4)
  {
    uint64_t v13 = a4[1];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v14 = v11;
  }

  else
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v16 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 192);
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v16(v20, ObjectType, v9);
    v19[0] = v10;
    v19[1] = v9;
    Calendar.locale.setter(v19);
    uint64_t v14 = v20[0];
    uint64_t v13 = v20[1];
  }

  *(_BYTE *)a6 = 0;
  *(void *)(a6 + 8) = v12;
  *(void *)(a6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
  *(void *)(a6 + 24) = v9;
  *(_OWORD *)(a6 + 32) = v18;
  *(void *)(a6 + 48) = v14;
  *(void *)(a6 + 56) = v13;
  *(void *)(a6 + 64) = v8;
  *(void *)(a6 + 72) = v7;
  return swift_unknownObjectRetain();
}

double static RegexComponent<>.dateTime(date:time:locale:timeZone:calendar:)@<D0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __int128 *a4@<X3>, uint64_t *a5@<X4>, __n128 *a6@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  double result;
  __int128 v16;
  __int128 v17[7];
  char v18;
  __int128 v19;
  __int128 v20;
  void v21[2];
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v7 = *a2;
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  uint64_t v16 = *a4;
  uint64_t v10 = *a5;
  uint64_t v11 = a5[1];
  uint64_t v25 = *a1;
  __int128 v26 = 0;
  *((void *)&v22 + 1) = v9;
  uint64_t v23 = v7;
  __int128 v24 = 0;
  *(void *)&int v22 = v8;
  if (v10)
  {
    swift_unknownObjectRetain();
    uint64_t v12 = v10;
  }

  else
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 192);
    swift_unknownObjectRetain_n();
    v14(v21, ObjectType, v9);
    *(void *)&v17[0] = v8;
    *((void *)&v17[0] + 1) = v9;
    Calendar.locale.setter((uint64_t *)v17);
    uint64_t v12 = v21[0];
    uint64_t v11 = v21[1];
  }

  *(void *)&__int128 v20 = v12;
  *((void *)&v20 + 1) = v11;
  uint64_t v19 = v16;
  uint64_t v18 = 0;
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)( (uint64_t)&v25,  &v23,  &v22,  &v20,  &v19,  &v18,  (uint64_t)v17);
  *(void *)&__int128 v20 = 0xC1CD27E440000000LL;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  *(void *)&__n128 result = Date.ParseStrategy.init(formatStyle:lenient:twoDigitStartDate:)( v17,  0,  (unint64_t *)&v20,  a6).n128_u64[0];
  return result;
}

double static RegexComponent<>.date(_:locale:timeZone:calendar:)@<D0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X3>, __n128 *a5@<X8>)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  double result;
  __int128 v14;
  __int128 v15[7];
  char v16;
  __int128 v17;
  __int128 v18;
  void v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v14 = *a3;
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  uint64_t v23 = *a1;
  __int128 v24 = 0;
  *((void *)&v20 + 1) = v7;
  __int128 v21 = 0LL;
  int v22 = 1;
  *(void *)&__int128 v20 = v6;
  if (v8)
  {
    swift_unknownObjectRetain();
    uint64_t v10 = v8;
  }

  else
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 192);
    swift_unknownObjectRetain_n();
    v12(v19, ObjectType, v7);
    *(void *)&v15[0] = v6;
    *((void *)&v15[0] + 1) = v7;
    Calendar.locale.setter((uint64_t *)v15);
    uint64_t v10 = v19[0];
    uint64_t v9 = v19[1];
  }

  *(void *)&uint64_t v18 = v10;
  *((void *)&v18 + 1) = v9;
  uint64_t v17 = v14;
  uint64_t v16 = 0;
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)( (uint64_t)&v23,  &v21,  &v20,  &v18,  &v17,  &v16,  (uint64_t)v15);
  *(void *)&uint64_t v18 = 0xC1CD27E440000000LL;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  *(void *)&__n128 result = Date.ParseStrategy.init(formatStyle:lenient:twoDigitStartDate:)( v15,  0,  (unint64_t *)&v18,  a5).n128_u64[0];
  return result;
}

uint64_t specialized static Date.ParseStrategy.== infix(_:_:)(double *a1, double *a2)
{
  uint64_t result = 0LL;
  __int128 v4 = *((_OWORD *)a1 + 2);
  __int128 v5 = *((_OWORD *)a1 + 3);
  uint64_t v6 = *((void *)a1 + 8);
  uint64_t v7 = *((void *)a1 + 9);
  __int128 v8 = *((_OWORD *)a2 + 1);
  __int128 v9 = *((_OWORD *)a2 + 2);
  __int128 v10 = *((_OWORD *)a2 + 3);
  uint64_t v11 = *((void *)a2 + 8);
  uint64_t v12 = *((void *)a2 + 9);
  if (*((void *)a1 + 2))
  {
    __int128 v19 = *((_OWORD *)a1 + 1);
    if ((void)v8)
    {
      __int128 v16 = v10;
      __int128 v17 = v5;
      __int128 v18 = v8;
      __int128 v14 = v9;
      __int128 v15 = v4;
      swift_unknownObjectRetain_n();
      char v13 = specialized static Locale.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v18);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      __int128 v9 = v14;
      __int128 v4 = v15;
      if ((v13 & 1) != 0) {
        goto LABEL_8;
      }
      return 0LL;
    }

    swift_unknownObjectRetain();
LABEL_14:
    swift_unknownObjectRelease();
    return 0LL;
  }

  __int128 v16 = *((_OWORD *)a2 + 3);
  __int128 v17 = *((_OWORD *)a1 + 3);
  if ((void)v8) {
    goto LABEL_14;
  }
LABEL_8:
  __int128 v18 = v9;
  __int128 v19 = v4;
  __int128 v18 = v16;
  __int128 v19 = v17;
  if (v6 == v11 && v7 == v12) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

unint64_t lazy protocol witness table accessor for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date.ParseStrategy.CodingKeys, &unk_189C8EC38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date.ParseStrategy.CodingKeys, &unk_189C8EC38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date.ParseStrategy.CodingKeys, &unk_189C8EC38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Date.ParseStrategy.CodingKeys, &unk_189C8EC38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.ParseStrategy( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date.ParseStrategy and conformance Date.ParseStrategy();
  a1[2] = lazy protocol witness table accessor for type Date.ParseStrategy and conformance Date.ParseStrategy();
  unint64_t result = lazy protocol witness table accessor for type Date.ParseStrategy and conformance Date.ParseStrategy();
  a1[3] = result;
  return result;
}

uint64_t destroy for Date.ParseStrategy()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Date.ParseStrategy(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.ParseStrategy(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Date.ParseStrategy(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.ParseStrategy(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.ParseStrategy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Date.ParseStrategy()
{
  return &type metadata for Date.ParseStrategy;
}

uint64_t storeEnumTagSinglePayload for Date.ParseStrategy.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1833EC304 + 4 * byte_18382886B[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1833EC338 + 4 * byte_183828866[v4]))();
}

uint64_t sub_1833EC338(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833EC340(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1833EC348LL);
  }
  return result;
}

uint64_t sub_1833EC354(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1833EC35CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1833EC360(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1833EC368(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.ParseStrategy.CodingKeys()
{
  return &unk_189C8EC38;
}

uint64_t specialized Date.ParseStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E65696E654C7369LL && a2 == 0xE900000000000074LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0xD000000000000011LL && a2 == 0x80000001839D2B80LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x656E6F5A656D6974LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x7261646E656C6163LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0x74616D726F66LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    int v3 = v2;
    uint64_t v161 = result;
    uint64_t v153 = result;
    uint64_t v4 = AttributedString.Guts._characterInvalidatedAttributes(at:)(result);
    uint64_t v152 = v5;
    swift_bridgeObjectRetain();
    unint64_t result = Set.init(minimumCapacity:)();
    int64_t v6 = 0LL;
    *(void *)&__int128 v162 = result;
    uint64_t v7 = 1LL << *(_BYTE *)(v4 + 32);
    uint64_t v8 = -1LL;
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    uint64_t v9 = v4 + 64;
    unint64_t v10 = v8 & *(void *)(v4 + 64);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    while (1)
    {
      if (v10)
      {
        unint64_t v12 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v13 = v12 | (v6 << 6);
        goto LABEL_6;
      }

      int64_t v17 = v6 + 1;
      if (__OFADD__(v6, 1LL))
      {
LABEL_329:
        __break(1u);
        goto LABEL_330;
      }

      if (v17 >= v11) {
        break;
      }
      unint64_t v18 = *(void *)(v9 + 8 * v17);
      ++v6;
      if (!v18)
      {
        int64_t v6 = v17 + 1;
        if (v17 + 1 >= v11) {
          break;
        }
        unint64_t v18 = *(void *)(v9 + 8 * v6);
        if (!v18)
        {
          int64_t v6 = v17 + 2;
          if (v17 + 2 >= v11) {
            break;
          }
          unint64_t v18 = *(void *)(v9 + 8 * v6);
          if (!v18)
          {
            int64_t v6 = v17 + 3;
            if (v17 + 3 >= v11) {
              break;
            }
            unint64_t v18 = *(void *)(v9 + 8 * v6);
            if (!v18)
            {
              int64_t v6 = v17 + 4;
              if (v17 + 4 >= v11) {
                break;
              }
              unint64_t v18 = *(void *)(v9 + 8 * v6);
              if (!v18)
              {
                int64_t v19 = v17 + 5;
                if (v19 >= v11) {
                  break;
                }
                unint64_t v18 = *(void *)(v9 + 8 * v19);
                if (!v18)
                {
                  while (1)
                  {
                    int64_t v6 = v19 + 1;
                    if (__OFADD__(v19, 1LL)) {
                      break;
                    }
                    if (v6 >= v11) {
                      goto LABEL_26;
                    }
                    unint64_t v18 = *(void *)(v9 + 8 * v6);
                    ++v19;
                    if (v18) {
                      goto LABEL_25;
                    }
                  }

LABEL_385:
        __break(1u);
        goto LABEL_386;
      }
    }

    swift_unknownObjectRetain_n();
    swift_retain();
    unint64_t v25 = specialized Rope._endPath.getter(v21);
    unint64_t result = swift_unknownObjectRelease();
    uint64_t v26 = 0LL;
    uint64_t v9 = 0LL;
    if (v21) {
      goto LABEL_53;
    }
    uint64_t v20 = 0LL;
    uint64_t v24 = 0LL;
LABEL_74:
    *(void *)&__int128 v164 = v23;
    *((void *)&v164 + 1) = v25;
    *(void *)&__int128 v165 = v26;
    *((void *)&v165 + 1) = v20;
    uint64_t v43 = -15LL;
    uint64_t v44 = v24;
    *(void *)&__int128 v166 = v24;
    while (1)
    {
      int64_t v49 = v3[8];
      uint64_t v154 = v44;
      if (!v49)
      {
        uint64_t v9 = 0LL;
        goto LABEL_122;
      }

      uint64_t v50 = v3[10];
      if (v50 < 0) {
        goto LABEL_344;
      }
      uint64_t v51 = v3[9];
      uint64_t v52 = v3[11];
      uint64_t v53 = *(unsigned __int8 *)(v49 + 18);
      if (*(_WORD *)(v49 + 16) && v50 != 0) {
        break;
      }
      unint64_t v55 = ((-15LL << ((4 * v53 + 8) & 0x3C)) - 1) & v53 | ((unint64_t)*(unsigned __int16 *)(v49 + 16) << ((4 * v53 + 8) & 0x3C));
      swift_unknownObjectRetain();
      uint64_t v9 = 0LL;
      uint64_t v26 = 0LL;
LABEL_121:
      swift_unknownObjectRetain();
      specialized Rope._Node.distanceFromStart<A>(to:in:)(v52, v55, v26, v49, v51);
      unint64_t result = swift_unknownObjectRelease_n();
      uint64_t v44 = v154;
      int v3 = v156;
LABEL_122:
      if (__OFSUB__(0LL, v9)) {
        goto LABEL_339;
      }
      if (-v9 >= v44 || !*(void *)(v157[0] + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v160 = a2;
        unint64_t result = a2 - 1;
        if (!__OFSUB__(a2, 1LL))
        {
          uint64_t v57 = AttributedString.Guts._characterInvalidatedAttributes(at:)(result);
          uint64_t v100 = v99;
          swift_bridgeObjectRetain();
          unint64_t result = Set.init(minimumCapacity:)();
          int64_t v101 = 0LL;
          *(void *)&__int128 v162 = result;
          uint64_t v102 = 1LL << *(_BYTE *)(v57 + 32);
          uint64_t v103 = -1LL;
          if (v102 < 64) {
            uint64_t v103 = ~(-1LL << v102);
          }
          uint64_t v104 = v57 + 64;
          unint64_t v105 = v103 & *(void *)(v57 + 64);
          int64_t v106 = (unint64_t)(v102 + 63) >> 6;
          while (1)
          {
            if (v105)
            {
              unint64_t v107 = __clz(__rbit64(v105));
              v105 &= v105 - 1;
              unint64_t v108 = v107 | (v101 << 6);
            }

            else
            {
              int64_t v111 = v101 + 1;
              if (__OFADD__(v101, 1LL)) {
                goto LABEL_336;
              }
              if (v111 >= v106) {
                goto LABEL_215;
              }
              unint64_t v112 = *(void *)(v104 + 8 * v111);
              ++v101;
              if (!v112)
              {
                int64_t v101 = v111 + 1;
                if (v111 + 1 >= v106) {
                  goto LABEL_215;
                }
                unint64_t v112 = *(void *)(v104 + 8 * v101);
                if (!v112)
                {
                  int64_t v101 = v111 + 2;
                  if (v111 + 2 >= v106) {
                    goto LABEL_215;
                  }
                  unint64_t v112 = *(void *)(v104 + 8 * v101);
                  if (!v112)
                  {
                    int64_t v101 = v111 + 3;
                    if (v111 + 3 >= v106) {
                      goto LABEL_215;
                    }
                    unint64_t v112 = *(void *)(v104 + 8 * v101);
                    if (!v112)
                    {
                      int64_t v101 = v111 + 4;
                      if (v111 + 4 >= v106) {
                        goto LABEL_215;
                      }
                      unint64_t v112 = *(void *)(v104 + 8 * v101);
                      if (!v112)
                      {
                        int64_t v113 = v111 + 5;
                        if (v113 >= v106) {
                          goto LABEL_215;
                        }
                        unint64_t v112 = *(void *)(v104 + 8 * v113);
                        if (!v112)
                        {
                          while (1)
                          {
                            int64_t v101 = v113 + 1;
                            if (__OFADD__(v113, 1LL)) {
                              goto LABEL_383;
                            }
                            if (v101 >= v106) {
                              break;
                            }
                            unint64_t v112 = *(void *)(v104 + 8 * v101);
                            ++v113;
                            if (v112) {
                              goto LABEL_214;
                            }
                          }

LABEL_376:
                          __break(1u);
                          goto LABEL_377;
                        }

                        int64_t v101 = v113;
                      }
                    }
                  }
                }
              }

unint64_t AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 80);
  if (!*(void *)(v4 + 64))
  {
    unint64_t v32 = swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v32);
    return swift_unknownObjectRelease();
  }

  unint64_t v10 = swift_unknownObjectRetain_n();
  specialized Rope._endPath.getter(v10);
  unint64_t result = swift_unknownObjectRelease_n();
  if (v5 && ((a3 & 1) != 0 || a1 != a2))
  {
    char v114 = a3;
    __int128 v12 = *(_OWORD *)(v4 + 32);
    __int128 v163 = *(_OWORD *)(v4 + 16);
    __int128 v164 = v12;
    __int128 v165 = *(_OWORD *)(v4 + 48);
    BigString.utf8.getter();
    BigString.startIndex.getter();
    uint64_t v13 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    outlined release of Locale((uint64_t)v131);
    __int128 v20 = *(_OWORD *)(v4 + 32);
    __int128 v160 = *(_OWORD *)(v4 + 16);
    __int128 v161 = v20;
    __int128 v162 = *(_OWORD *)(v4 + 48);
    unint64_t result = BigString.utf8.getter();
    uint64_t v121 = a1;
    uint64_t v125 = a2;
    if (__OFSUB__(a2, a1))
    {
      __break(1u);
    }

    else
    {
      int64_t v117 = (__int128 *)(v4 + 16);
      uint64_t v21 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v22 = v13;
      uint64_t v24 = v23;
      uint64_t v26 = v25;
      uint64_t v28 = v27;
      unint64_t result = outlined release of Locale((uint64_t)v132);
      v159[0] = v22;
      v159[1] = v15;
      unint64_t v113 = v21;
      v159[2] = v17;
      v159[3] = v19;
      v159[4] = v21;
      v159[5] = v24;
      v159[6] = v26;
      v159[7] = v28;
      if ((v114 & 1) == 0 && a4)
      {
        uint64_t v29 = *(void *)(a4 + 16);
        if (!v29) {
          goto LABEL_17;
        }
        uint64_t v30 = (uint64_t *)(a4 + 40);
        while (1)
        {
          uint64_t v31 = *v30;
          v30 += 2;
          if (v31) {
            break;
          }
          if (!--v29) {
            goto LABEL_15;
          }
        }
      }

      unint64_t result = AttributedString.Guts.fixScalarConstrainedAttributes(in:)();
LABEL_15:
      uint64_t v34 = v121;
      uint64_t v33 = v125;
      unint64_t v35 = v22;
      if ((v114 & 1) != 0)
      {
LABEL_22:
        unint64_t v38 = v35 >> 10;
        if (v35 >> 10 == v113 >> 10)
        {
          __int128 v39 = v117[1];
          __int128 v174 = *v117;
          __int128 v175 = v39;
          __int128 v176 = v117[2];
          unint64_t result = BigString.startIndex.getter();
          if (v38 <= result >> 10) {
            return result;
          }
          unint64_t result = BigString.endIndex.getter();
          if (v38 >= result >> 10) {
            return result;
          }
          unint64_t result = v34 - 1;
          if (!__OFSUB__(v34, 1LL))
          {
            unint64_t result = AttributedString.Guts._needsParagraphFixing(from:to:)(result, v34);
            if ((result & 1) == 0) {
              return result;
            }
            __int128 v40 = v117[1];
            __int128 v170 = *v117;
            __int128 v171 = v40;
            __int128 v172 = v117[2];
            __int128 v179 = v170;
            __int128 v180 = v40;
            __int128 v181 = v172;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v179, (uint64_t)&v153);
            outlined retain of Locale((uint64_t)&v153);
            uint64_t v41 = BigString.index(before:)();
            uint64_t v43 = v42;
            uint64_t v45 = v44;
            uint64_t v47 = v46;
            outlined release of Locale((uint64_t)&v170);
            __int128 v48 = v117[1];
            __int128 v166 = *v117;
            __int128 v167 = v48;
            __int128 v168 = v117[2];
            BigString.utf8.getter();
            __int128 v135 = v166;
            __int128 v136 = v167;
            __int128 v137 = v168;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v135, (uint64_t)v156);
            outlined retain of Locale((uint64_t)v156);
            unint64_t v49 = v41;
            uint64_t v50 = v43;
            uint64_t v51 = v45;
            uint64_t v52 = v47;
            unint64_t v53 = BigString.index(after:)();
            uint64_t v55 = v54;
            uint64_t v57 = v56;
            uint64_t v59 = v58;
            unint64_t result = outlined release of Locale((uint64_t)&v166);
            unint64_t v60 = v49;
            unint64_t v61 = v49 >> 10;
            if (v61 <= v53 >> 10)
            {
              unint64_t v122 = v60;
              *(void *)&__int128 v148 = v60;
              *((void *)&v148 + 1) = v50;
              *(void *)&__int128 v149 = v51;
              *((void *)&v149 + 1) = v52;
              *(void *)&__int128 v150 = v53;
              *((void *)&v150 + 1) = v55;
              uint64_t v151 = v57;
              uint64_t v152 = v59;
              specialized BidirectionalCollection<>._getBlock(for:in:)(2, &v148, &v126);
              unint64_t result = outlined release of Locale((uint64_t)v158);
              if (v130 == 2)
              {
LABEL_82:
                __break(1u);
                return result;
              }

              if (v61 <= v129 >> 10)
              {
                LOBYTE(v62) = 0;
                int64_t v63 = 0LL;
                int64_t v64 = 0LL;
                int v65 = 0;
                int64_t v123 = v122 >> 11;
                int64_t v66 = v129 >> 11;
                goto LABEL_58;
              }

              goto LABEL_77;
            }

uint64_t AttributedString.Guts.fixScalarConstrainedAttributes(in:)()
{
  BOOL v2 = v0;
  __int128 v3 = v0[2];
  __int128 v182 = v0[1];
  __int128 v183 = v3;
  __int128 v184 = v0[3];
  BigString.unicodeScalars.getter();
  unint64_t v4 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v6 = v5;
  outlined release of Locale((uint64_t)v165);
  __int128 v7 = v0[2];
  __int128 v179 = v0[1];
  __int128 v180 = v7;
  __int128 v181 = v0[3];
  BigString.unicodeScalars.getter();
  unint64_t v8 = BigString.UnicodeScalarView.index(roundingUp:)();
  outlined release of Locale((uint64_t)v166);
  uint64_t v9 = v4 >> 11;
  unint64_t v10 = v8 >> 11;
  if (v10 < v4 >> 11) {
    goto LABEL_212;
  }
  unint64_t v11 = v2[8];
  if (v11) {
    uint64_t v12 = v2[10];
  }
  else {
    uint64_t v12 = 0LL;
  }
  if (v12 < v9)
  {
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
    goto LABEL_215;
  }

  uint64_t v13 = v2[9];
  uint64_t v147 = v2[11];
  unint64_t v143 = v4;
  uint64_t v130 = v6;
  if (v11 && v9 < v2[10] && *(_WORD *)(v11 + 16))
  {
    uint64_t v145 = v2[9];
    unint64_t v146 = v10;
    uint64_t v1 = *(unsigned __int8 *)(v11 + 18);
    if (*(_BYTE *)(v11 + 18))
    {
      swift_unknownObjectRetain_n();
      swift_retain_n();
      unint64_t v14 = v4 >> 11;
      unint64_t v15 = v11;
      while (1)
      {
        uint64_t v18 = *(unsigned __int16 *)(v15 + 16);
        if (!*(_WORD *)(v15 + 16)) {
          goto LABEL_12;
        }
        uint64_t v19 = *(void *)(v15 + 40);
        unint64_t v20 = v14 - v19;
        if (__OFSUB__(v14, v19)) {
          goto LABEL_205;
        }
        if (__OFADD__(v20, 1LL))
        {
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
          goto LABEL_208;
        }

        if ((uint64_t)(v20 + 1) <= 0)
        {
          uint64_t v18 = 0LL;
        }

        else
        {
          if ((_DWORD)v18 == 1)
          {
            v14 -= v19;
LABEL_12:
            if (v14) {
              goto LABEL_204;
            }
            goto LABEL_13;
          }

          uint64_t v21 = *(void *)(v15 + 64);
          BOOL v22 = __OFSUB__(v20, v21);
          unint64_t v23 = v20 - v21;
          if (v22) {
            goto LABEL_210;
          }
          if (__OFADD__(v23, 1LL)) {
            goto LABEL_211;
          }
          if ((uint64_t)(v23 + 1) >= 1)
          {
            if ((_DWORD)v18 != 2)
            {
              uint64_t v24 = (void *)(v15 + 88);
              uint64_t v25 = 2LL;
              while (1)
              {
                if (v18 == v25) {
                  goto LABEL_200;
                }
                unint64_t v14 = v23 - *v24;
                if (__OFSUB__(v23, *v24)) {
                  goto LABEL_201;
                }
                if (__OFADD__(v14, 1LL)) {
                  goto LABEL_202;
                }
                ++v25;
                v24 += 3;
                unint64_t v23 = v14;
                if (v18 == v25) {
                  goto LABEL_12;
                }
              }

              uint64_t v18 = v25;
              unint64_t v14 = v23;
              goto LABEL_13;
            }

            unint64_t v14 = v23;
            goto LABEL_12;
          }

          uint64_t v18 = 1LL;
          unint64_t v14 = v20;
        }

uint64_t Array<A>._extend(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void **)v2;
  uint64_t v6 = *(void *)(*(void *)v2 + 16LL);
  if (v6)
  {
    uint64_t v7 = v6 - 1;
    if (v5[2 * v6 + 3] == a1)
    {
      uint64_t v4 = v5[2 * v7 + 4];
      if (v4 > a2)
      {
        __break(1u);
      }

      else
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
LABEL_5:
          uint64_t v9 = &v5[2 * v7];
          goto LABEL_11;
        }
      }

      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      uint64_t v5 = (void *)result;
      goto LABEL_5;
    }
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6 + 1,  1,  v5);
    uint64_t v5 = (void *)result;
  }

  unint64_t v11 = v5[2];
  unint64_t v10 = v5[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v10 > 1),  v11 + 1,  1,  v5);
    uint64_t v5 = (void *)result;
  }

  v5[2] = v11 + 1;
  uint64_t v9 = &v5[2 * v11];
LABEL_11:
  v9[4] = v4;
  uint64_t v9[5] = a2;
  *(void *)uint64_t v2 = v5;
  return result;
}

void *specialized Rope.update<A>(at:by:)(void *result, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a2[3];
  if (*result != v4)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (!*a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  unint64_t v8 = result;
  uint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)v14);
  uint64_t v9 = *((void *)&v14[0] + 1);
  v13[0] = v14[0];
  v13[1] = v14[1];
  void v13[2] = v14[2];
  if (__OFSUB__(*a3, *((void *)&v14[0] + 1))) {
    goto LABEL_8;
  }
  *a3 -= *((void *)&v14[0] + 1);
  BOOL v10 = __OFADD__(v9, a4);
  uint64_t v11 = v9 + a4;
  if (v10)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  *((void *)&v13[0] + 1) = v11;
  a2[3] = v4 + 1;
  void *v8 = v4 + 1;
  if (*a2)
  {
    _OWORD v8[2] = specialized Rope._Node._finalizeModify(_:)(&v12, v13);
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }

uint64_t AttributedString.Guts._paragraphExtending(from:)@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v11 = v5[2];
  __int128 v29 = v5[1];
  __int128 v30 = v11;
  __int128 v31 = v5[3];
  BigString.utf8.getter();
  v32[0] = v29;
  v32[1] = v30;
  void v32[2] = v31;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v32, (uint64_t)v33);
  outlined retain of Locale((uint64_t)v33);
  unint64_t v12 = BigString.index(after:)();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t result = outlined release of Locale((uint64_t)&v29);
  if (a1 >> 10 > v12 >> 10)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  v28[0] = a1;
  v28[1] = a2;
  void v28[2] = a3;
  v28[3] = a4;
  v28[4] = v12;
  v28[5] = v14;
  v28[6] = v16;
  v28[7] = v18;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2, v28, v23);
  uint64_t result = outlined release of Locale((uint64_t)v27);
  uint64_t v20 = v26;
  if (v26 != 2)
  {
    __int128 v21 = v24;
    if (a1 >> 10 <= (unint64_t)v24 >> 10)
    {
      uint64_t v22 = v25;
      *(void *)a5 = a1;
      *(void *)(a5 + 8) = a2;
      *(void *)(a5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a3;
      *(void *)(a5 + 24) = a4;
      *(_OWORD *)(a5 + 32) = v21;
      *(void *)(a5 + 48) = v22;
      *(void *)(a5 + 56) = v20;
      return result;
    }

    goto LABEL_6;
  }

uint64_t AttributedString.Guts._constrainedAttributes(at:with:)(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = v2[8];
  if (v3) {
    uint64_t v4 = v2[10];
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (result < 0 || (uint64_t v5 = result, v4 < result))
  {
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }

  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = v2[9];
  uint64_t v9 = v2[11];
  if (!v3 || (v2[10] > result ? (BOOL v10 = *(unsigned __int16 *)(v3 + 16) == 0) : (BOOL v10 = 1), v10))
  {
    unint64_t v11 = swift_unknownObjectRetain_n();
    unint64_t v12 = specialized Rope._endPath.getter(v11);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v13 = 0LL;
    if (v3) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }

  uint64_t v32 = v2[9];
  uint64_t v33 = a2[1];
  uint64_t v17 = *(unsigned __int8 *)(v3 + 18);
  if (!*(_BYTE *)(v3 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v26 = 0LL;
    uint64_t v13 = v3;
    uint64_t v27 = *(unsigned __int16 *)(v3 + 16);
    if (!*(_WORD *)(v3 + 16)) {
      goto LABEL_49;
    }
LABEL_40:
    uint64_t v28 = *(void *)(v13 + 24);
    BOOL v21 = __OFSUB__(v5, v28);
    v5 -= v28;
    if (v21) {
      goto LABEL_63;
    }
    if (__OFADD__(v5, 1LL))
    {
LABEL_64:
      __break(1u);
      return result;
    }

    if (v5 + 1 < 1) {
      goto LABEL_51;
    }
    if ((_DWORD)v27 == 1) {
      goto LABEL_49;
    }
    __int128 v29 = (uint64_t *)(v13 + 48);
    uint64_t v30 = 1LL;
    while (1)
    {
      uint64_t v31 = *v29;
      v29 += 3;
      BOOL v21 = __OFSUB__(v5, v31);
      v5 -= v31;
      if (v21) {
        break;
      }
      if (__OFADD__(v5, 1LL)) {
        goto LABEL_62;
      }
      if (v5 + 1 < 1)
      {
        uint64_t v27 = v30;
        goto LABEL_53;
      }

      if (v27 == ++v30) {
        goto LABEL_49;
      }
    }

uint64_t AttributedString.Guts._characterInvalidatedAttributes(at:)(uint64_t result)
{
  uint64_t v2 = v1[8];
  if (v2) {
    uint64_t v3 = v1[10];
  }
  else {
    uint64_t v3 = 0LL;
  }
  if (result < 0 || (uint64_t v4 = result, v3 < result))
  {
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }

  uint64_t v5 = v1[9];
  uint64_t v6 = v1[11];
  if (!v2 || (v1[10] > result ? (BOOL v7 = *(unsigned __int16 *)(v2 + 16) == 0) : (BOOL v7 = 1), v7))
  {
    unint64_t v8 = swift_unknownObjectRetain_n();
    unint64_t v9 = specialized Rope._endPath.getter(v8);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v10 = 0LL;
    if (v2) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }

  uint64_t v29 = v1[9];
  uint64_t v14 = *(unsigned __int8 *)(v2 + 18);
  if (!*(_BYTE *)(v2 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v23 = 0LL;
    uint64_t v10 = v2;
    uint64_t v24 = *(unsigned __int16 *)(v2 + 16);
    if (!*(_WORD *)(v2 + 16)) {
      goto LABEL_49;
    }
LABEL_40:
    uint64_t v25 = *(void *)(v10 + 24);
    BOOL v18 = __OFSUB__(v4, v25);
    v4 -= v25;
    if (v18) {
      goto LABEL_63;
    }
    if (__OFADD__(v4, 1LL))
    {
LABEL_64:
      __break(1u);
      return result;
    }

    if (v4 + 1 < 1) {
      goto LABEL_51;
    }
    if ((_DWORD)v24 == 1) {
      goto LABEL_49;
    }
    unint64_t v26 = (uint64_t *)(v10 + 48);
    uint64_t v27 = 1LL;
    while (1)
    {
      uint64_t v28 = *v26;
      v26 += 3;
      BOOL v18 = __OFSUB__(v4, v28);
      v4 -= v28;
      if (v18) {
        break;
      }
      if (__OFADD__(v4, 1LL)) {
        goto LABEL_62;
      }
      if (v4 + 1 < 1)
      {
        uint64_t v24 = v27;
        goto LABEL_53;
      }

      if (v24 == ++v27) {
        goto LABEL_49;
      }
    }

uint64_t closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a1;
  v6[1] = a2;
  outlined init with copy of AttributedString._AttributeValue(a3, (uint64_t)v7);
  outlined init with copy of AttributedString._AttributeValue((uint64_t)v7, (uint64_t)v5);
  swift_bridgeObjectRetain();
  char v3 = AttributedString._AttributeValue.isInvalidatedOnTextChange.getter();
  outlined destroy of Any?( (uint64_t)v6,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
  outlined destroy of AttributedString._AttributeValue((uint64_t)v5);
  return v3 & 1;
}

uint64_t AttributedString.Guts._needsParagraphFixing(from:to:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2[8];
  int64_t v4 = v2[10];
  if (v3) {
    uint64_t v5 = v2[10];
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (result < 0 || (uint64_t v6 = result, v5 < result))
  {
LABEL_233:
    __break(1u);
LABEL_234:
    __break(1u);
    goto LABEL_235;
  }

  uint64_t v8 = v2[9];
  uint64_t v140 = v2[11];
  if (v3)
  {
    if (*(_WORD *)(v3 + 16) && v4 > result)
    {
      int64_t v138 = v8;
      unint64_t v139 = v4;
      uint64_t v17 = *(unsigned __int8 *)(v3 + 18);
      if (*(_BYTE *)(v3 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v43 = v3;
        while (1)
        {
          uint64_t v45 = *(unsigned __int16 *)(v43 + 16);
          if (!*(_WORD *)(v43 + 16)) {
            goto LABEL_59;
          }
          uint64_t v46 = *(void *)(v43 + 40);
          BOOL v23 = __OFSUB__(v6, v46);
          uint64_t v47 = v6 - v46;
          if (v23) {
            goto LABEL_227;
          }
          if (__OFADD__(v47, 1LL)) {
            goto LABEL_228;
          }
          if (v47 + 1 < 1)
          {
            uint64_t v45 = 0LL;
            goto LABEL_60;
          }

          if ((_DWORD)v45 == 1) {
            break;
          }
          uint64_t v48 = (uint64_t *)(v43 + 64);
          uint64_t v49 = 1LL;
          while (1)
          {
            uint64_t v50 = *v48;
            v48 += 3;
            uint64_t v6 = v47 - v50;
            if (__OFSUB__(v47, v50))
            {
              __break(1u);
LABEL_222:
              __break(1u);
LABEL_223:
              __break(1u);
LABEL_224:
              __break(1u);
              goto LABEL_225;
            }

            if (__OFADD__(v6, 1LL)) {
              goto LABEL_222;
            }
            if (v6 + 1 < 1) {
              break;
            }
            ++v49;
            uint64_t v47 = v6;
            if (v45 == v49) {
              goto LABEL_59;
            }
          }

          uint64_t v45 = v49;
          uint64_t v6 = v47;
LABEL_60:
          char v44 = (4 * *(_BYTE *)(v43 + 18) + 8) & 0x3C;
          uint64_t v17 = ((-15LL << v44) - 1) & v17 | (v45 << v44);
          uint64_t v12 = *(void *)(v43 + 24 + 24 * v45);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v43 = v12;
          if (!*(_BYTE *)(v12 + 18)) {
            goto LABEL_179;
          }
        }

        uint64_t v6 = v47;
LABEL_59:
        if (!v6) {
          goto LABEL_60;
        }
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
        goto LABEL_233;
      }

      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v12 = v3;
LABEL_179:
      uint64_t v114 = *(unsigned __int16 *)(v12 + 16);
      if (*(_WORD *)(v12 + 16))
      {
        uint64_t v115 = *(void *)(v12 + 24);
        BOOL v23 = __OFSUB__(v6, v115);
        v6 -= v115;
        if (v23)
        {
LABEL_241:
          __break(1u);
          goto LABEL_242;
        }

        if (__OFADD__(v6, 1LL))
        {
LABEL_242:
          __break(1u);
          goto LABEL_243;
        }

        if (v6 + 1 < 1)
        {
          uint64_t v114 = 0LL;
LABEL_215:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v11 = v17 & 0xFFFFFFFFFFFFF0FFLL | (v114 << 8);
          uint64_t v8 = v138;
          goto LABEL_13;
        }

        if ((_DWORD)v114 != 1)
        {
          unint64_t v116 = (uint64_t *)(v12 + 48);
          uint64_t v117 = 1LL;
          while (1)
          {
            uint64_t v118 = *v116;
            v116 += 3;
            BOOL v23 = __OFSUB__(v6, v118);
            v6 -= v118;
            if (v23) {
              goto LABEL_237;
            }
            if (__OFADD__(v6, 1LL)) {
              goto LABEL_238;
            }
            if (v6 + 1 < 1) {
              break;
            }
            if (v114 == ++v117) {
              goto LABEL_189;
            }
          }

          uint64_t v114 = v117;
          goto LABEL_215;
        }
      }

uint64_t AttributedString.Guts._applyStyle(type:from:to:)( uint64_t result, int64_t a2, uint64_t a3, int64_t a4)
{
  int64_t v5 = *(void *)(v4 + 64);
  int64_t v6 = *(void *)(v4 + 80);
  if (v5) {
    int64_t v7 = *(void *)(v4 + 80);
  }
  else {
    int64_t v7 = 0LL;
  }
  if (a2 < 0) {
    goto LABEL_481;
  }
  int64_t v8 = a2;
  if (v7 < a2) {
    goto LABEL_481;
  }
  uint64_t v9 = *(void *)(result + 8);
  uint64_t v268 = *(void *)result;
  uint64_t v10 = *(void *)(v4 + 72);
  unint64_t v11 = *(void *)(v4 + 88);
  v249 = (uint64_t *)v4;
  v248 = (void *)(v4 + 64);
  if (v5)
  {
    if (*(_WORD *)(v5 + 16) && v6 > a2)
    {
      unint64_t v266 = *(void *)(v4 + 88);
      uint64_t v267 = *(void *)(v4 + 72);
      int64_t v25 = *(unsigned __int8 *)(v5 + 18);
      if (!*(_BYTE *)(v5 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v15 = v5;
LABEL_61:
        uint64_t v44 = *(unsigned __int16 *)(v15 + 16);
        if (!*(_WORD *)(v15 + 16)) {
          goto LABEL_79;
        }
        uint64_t v45 = *(void *)(v15 + 24);
        BOOL v30 = __OFSUB__(v8, v45);
        v8 -= v45;
        if (v30) {
          goto LABEL_497;
        }
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_498;
        }
        if (v8 + 1 < 1)
        {
          uint64_t v44 = 0LL;
          goto LABEL_427;
        }

        if ((_DWORD)v44 == 1)
        {
LABEL_79:
          if (!v8) {
            goto LABEL_427;
          }
          __break(1u);
          goto LABEL_81;
        }

        uint64_t v46 = (uint64_t *)(v15 + 48);
        uint64_t v47 = 1LL;
        while (1)
        {
          uint64_t v48 = *v46;
          v46 += 3;
          BOOL v30 = __OFSUB__(v8, v48);
          v8 -= v48;
          if (v30) {
            goto LABEL_484;
          }
          if (__OFADD__(v8, 1LL)) {
            goto LABEL_485;
          }
          if (v8 + 1 < 1) {
            goto LABEL_426;
          }
          if (v44 == ++v47) {
            goto LABEL_79;
          }
        }
      }

      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v4 = 24LL;
      int64_t v36 = v5;
      while (1)
      {
        uint64_t v38 = *(unsigned __int16 *)(v36 + 16);
        if (!*(_WORD *)(v36 + 16)) {
          goto LABEL_45;
        }
        uint64_t v39 = *(void *)(v36 + 40);
        BOOL v30 = __OFSUB__(v8, v39);
        int64_t v40 = v8 - v39;
        if (v30) {
          goto LABEL_464;
        }
        if (__OFADD__(v40, 1LL)) {
          goto LABEL_465;
        }
        if (v40 + 1 < 1)
        {
          uint64_t v38 = 0LL;
        }

        else
        {
          if ((_DWORD)v38 == 1)
          {
            int64_t v8 = v40;
LABEL_45:
            if (v8) {
              goto LABEL_462;
            }
            goto LABEL_46;
          }

          int v41 = (uint64_t *)(v36 + 64);
          uint64_t v42 = 1LL;
          while (1)
          {
            uint64_t v43 = *v41;
            v41 += 3;
            int64_t v8 = v40 - v43;
            if (__OFSUB__(v40, v43)) {
              goto LABEL_435;
            }
            if (__OFADD__(v8, 1LL)) {
              goto LABEL_436;
            }
            if (v8 + 1 < 1) {
              break;
            }
            ++v42;
            int64_t v40 = v8;
            if (v38 == v42) {
              goto LABEL_45;
            }
          }

          uint64_t v38 = v42;
          int64_t v8 = v40;
        }

LABEL_425:
                  __break(1u);
LABEL_426:
                  uint64_t v44 = v47;
LABEL_427:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  unint64_t v14 = v25 & 0xFFFFFFFFFFFFF0FFLL | (v44 << 8);
                  uint64_t v4 = (uint64_t)v249;
                  unint64_t v11 = v266;
                  if (v5) {
                    goto LABEL_13;
                  }
                  goto LABEL_14;
                }

                int64_t v25 = v64;
              }

LABEL_460:
              __break(1u);
LABEL_461:
              __break(1u);
LABEL_462:
              __break(1u);
LABEL_463:
              __break(1u);
LABEL_464:
              __break(1u);
LABEL_465:
              __break(1u);
LABEL_466:
              __break(1u);
LABEL_467:
              __break(1u);
LABEL_468:
              __break(1u);
LABEL_469:
              __break(1u);
              goto LABEL_470;
            }

            int64_t v25 = v73;
          }

          else
          {
            int64_t v70 = v254;
          }

LABEL_488:
                                      __break(1u);
LABEL_489:
                                      __break(1u);
LABEL_490:
                                      __break(1u);
LABEL_491:
                                      __break(1u);
LABEL_492:
                                      __break(1u);
LABEL_493:
                                      __break(1u);
LABEL_494:
                                      __break(1u);
                                      goto LABEL_495;
                                    }

LABEL_471:
                                    __break(1u);
LABEL_472:
                                    __break(1u);
                                    goto LABEL_473;
                                  }

LABEL_470:
                                  __break(1u);
                                  goto LABEL_471;
                                }
                              }
                            }
                          }

                          int64_t v124 = v129;
                        }

LABEL_446:
                      __break(1u);
LABEL_447:
                      __break(1u);
                      goto LABEL_448;
                    }
                  }
                }
              }

              uint64_t v15 = v114;
            }

LABEL_448:
                  __break(1u);
LABEL_449:
                  __break(1u);
                  goto LABEL_450;
                }
              }
            }
          }

          uint64_t v15 = v101;
        }

LABEL_450:
          __break(1u);
LABEL_451:
          __break(1u);
LABEL_452:
          __break(1u);
LABEL_453:
          __break(1u);
LABEL_454:
          __break(1u);
LABEL_455:
          __break(1u);
          goto LABEL_456;
        }

LABEL_495:
          __break(1u);
LABEL_496:
          __break(1u);
LABEL_497:
          __break(1u);
LABEL_498:
          __break(1u);
LABEL_499:
          __break(1u);
          goto LABEL_500;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_341:
      int64_t v154 = v271;
      __int128 v283 = v272;
      v284 = v273;
LABEL_347:
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      __int128 v214 = v283;
      uint64_t v215 = v56[8];
      uint64_t v216 = v56[9];
      uint64_t v218 = v56[10];
      uint64_t v217 = v56[11];
      __int128 v276 = v283;
      *(void *)&__int128 v277 = v284;
      BOOL v30 = __OFADD__(v251++, 1LL);
      if (v30) {
        goto LABEL_444;
      }
      if ((void)v283 != v217) {
        goto LABEL_445;
      }
      if (v284)
      {
        unint64_t v219 = v284[3 * ((*((void *)&v283 + 1) >> ((4 * *((_BYTE *)v284 + 18) + 8) & 0x3C)) & 0xFLL) + 3];
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else
      {
        swift_unknownObjectRetain();
        unint64_t v219 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v214 + 1), v215);
      }

      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (__OFADD__(v154, v219)) {
        goto LABEL_447;
      }
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v276, v215, v216, v218, v214);
      uint64_t result = swift_unknownObjectRelease_n();
      int64_t v54 = a4;
      if ((uint64_t)(v154 + v219) < a4)
      {
        int64_t v254 = v154 + v219;
        unint64_t v55 = *((void *)&v276 + 1);
        unint64_t v24 = v276;
        uint64_t v4 = v277;
        goto LABEL_95;
      }

      unint64_t v221 = v56[8];
      uint64_t v220 = v56[9];
      uint64_t v223 = v56[10];
      uint64_t v222 = v56[11];
      if (a3 != a4)
      {
        unint64_t v235 = swift_unknownObjectRetain();
        int64_t v254 = v223;
        uint64_t result = specialized Rope._endPath.getter(v235);
        unint64_t v55 = result;
        unint64_t v24 = v222;
        if (v221)
        {
          uint64_t v251 = v220;
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v4 = 0LL;
        }

        else
        {
          uint64_t v4 = 0LL;
          uint64_t v251 = 0LL;
          int64_t v254 = 0LL;
        }

        int64_t v54 = a4;
        goto LABEL_95;
      }

      uint64_t v252 = v56[9];
      if (v221)
      {
        if (v223 < a3) {
          goto LABEL_476;
        }
        if (*(_WORD *)(v221 + 16) && v223 > a3)
        {
          uint64_t v224 = *(unsigned __int8 *)(v221 + 18);
          if (*(_BYTE *)(v221 + 18))
          {
            uint64_t result = swift_unknownObjectRetain_n();
            uint64_t v225 = a3;
            unint64_t v226 = v221;
            while (1)
            {
              uint64_t v228 = *(unsigned __int16 *)(v226 + 16);
              if (!*(_WORD *)(v226 + 16)) {
                goto LABEL_362;
              }
              uint64_t v229 = *(void *)(v226 + 40);
              uint64_t v230 = v225 - v229;
              if (__OFSUB__(v225, v229)) {
                goto LABEL_453;
              }
              if (__OFADD__(v230, 1LL)) {
                goto LABEL_454;
              }
              if (v230 + 1 <= 0)
              {
                uint64_t v228 = 0LL;
              }

              else
              {
                if ((_DWORD)v228 == 1)
                {
                  v225 -= v229;
LABEL_362:
                  if (v225) {
                    goto LABEL_451;
                  }
                  goto LABEL_363;
                }

                uint64_t v231 = *(void *)(v226 + 64);
                BOOL v30 = __OFSUB__(v230, v231);
                uint64_t v232 = v230 - v231;
                if (v30) {
                  goto LABEL_468;
                }
                if (__OFADD__(v232, 1LL)) {
                  goto LABEL_469;
                }
                if (v232 + 1 >= 1)
                {
                  if ((_DWORD)v228 != 2)
                  {
                    __int128 v233 = (void *)(v226 + 88);
                    uint64_t v234 = 2LL;
                    while (v228 != v234)
                    {
                      uint64_t v225 = v232 - *v233;
                      if (__OFSUB__(v232, *v233)) {
                        goto LABEL_440;
                      }
                      if (__OFADD__(v225, 1LL)) {
                        goto LABEL_441;
                      }
                      if (v225 + 1 < 1)
                      {
                        uint64_t v228 = v234;
                        uint64_t v225 = v232;
                        goto LABEL_363;
                      }

                      ++v234;
                      v233 += 3;
                      uint64_t v232 = v225;
                      if (v228 == v234) {
                        goto LABEL_362;
                      }
                    }

LABEL_439:
                    __break(1u);
LABEL_440:
                    __break(1u);
LABEL_441:
                    __break(1u);
LABEL_442:
                    __break(1u);
                    goto LABEL_443;
                  }

                  uint64_t v225 = v232;
                  goto LABEL_362;
                }

                uint64_t v228 = 1LL;
                uint64_t v225 = v230;
              }

LABEL_391:
      swift_unknownObjectRetain();
      uint64_t v251 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v222, v55, v4, v221, v252);
      uint64_t result = swift_unknownObjectRelease_n();
LABEL_416:
      int64_t v54 = a4;
      int64_t v254 = a3 - v225;
      if (__OFSUB__(a3, v225)) {
        goto LABEL_474;
      }
      unint64_t v24 = v222;
LABEL_95:
      *(void *)&__int128 v283 = v24;
      *((void *)&v283 + 1) = v55;
      v284 = (void *)v4;
    }
  }

  unint64_t v258 = *(void *)(v4 + 88);
  uint64_t v264 = *(void *)(v4 + 72);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 18);
  if (*(_BYTE *)(v6 + 18))
  {
    swift_unknownObjectRetain_n();
    uint64_t result = swift_retain();
    int64_t v25 = a3;
    int64_t v26 = v6;
    while (1)
    {
      uint64_t v28 = *(unsigned __int16 *)(v26 + 16);
      if (!*(_WORD *)(v26 + 16)) {
        goto LABEL_25;
      }
      uint64_t v29 = *(void *)(v26 + 40);
      BOOL v30 = __OFSUB__(v25, v29);
      int64_t v31 = v25 - v29;
      if (v30) {
        goto LABEL_466;
      }
      if (__OFADD__(v31, 1LL)) {
        goto LABEL_467;
      }
      if (v31 + 1 < 1)
      {
        uint64_t v28 = 0LL;
      }

      else
      {
        if ((_DWORD)v28 == 1)
        {
          int64_t v25 = v31;
LABEL_25:
          if (v25) {
            goto LABEL_463;
          }
          goto LABEL_26;
        }

        uint64_t v32 = (uint64_t *)(v26 + 64);
        uint64_t v33 = 1LL;
        while (1)
        {
          uint64_t v34 = *v32;
          v32 += 3;
          int64_t v25 = v31 - v34;
          if (__OFSUB__(v31, v34)) {
            goto LABEL_437;
          }
          if (__OFADD__(v25, 1LL)) {
            goto LABEL_438;
          }
          if (v25 + 1 < 1) {
            break;
          }
          ++v33;
          int64_t v31 = v25;
          if (v28 == v33) {
            goto LABEL_25;
          }
        }

        uint64_t v28 = v33;
        int64_t v25 = v31;
      }

              __break(1u);
              goto LABEL_392;
            }

            if (v365 != *(void *)(v22 + 88)) {
              goto LABEL_377;
            }
            v337 = v365;
            v322 = v9;
            v319 = v8;
            v320 = v203;
            if (v8)
            {
              __int128 v214 = v8 + 24 * ((v203 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
              int64_t v8 = *(void *)(v214 + 32);
              uint64_t v215 = *(void *)(v214 + 40);
              swift_bridgeObjectRetain();
              v325 = v215;
              swift_bridgeObjectRetain();
            }

            else
            {
              uint64_t v216 = *(void *)(v22 + 64);
              swift_unknownObjectRetain();
              specialized Rope._Node.subscript.getter(v203, v216);
              v325 = v217;
              int64_t v8 = v218;
              swift_unknownObjectRelease();
            }

            swift_bridgeObjectRetain();
            unint64_t v219 = 0LL;
            uint64_t v22 = v323;
            v353 = v8;
            while (1)
            {
              uint64_t v220 = v219 + 1;
              if (__OFADD__(v219, 1LL))
              {
                __break(1u);
LABEL_359:
                __break(1u);
LABEL_360:
                __break(1u);
                goto LABEL_361;
              }

              uint64_t v9 = *(void *)(v22 - 8);
              unint64_t v221 = *(void *)v22;
              if (v200[2])
              {
                swift_bridgeObjectRetain_n();
                uint64_t v222 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v221);
                if ((v223 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue(v200[7] + 72 * v222, (uint64_t)&v380);
                }

                else
                {
                  v384 = 0LL;
                  v382 = 0u;
                  v383 = 0u;
                  v380 = 0u;
                  v381 = 0u;
                }

                swift_bridgeObjectRelease();
                int64_t v8 = v353;
                if (!*(void *)(v353 + 16))
                {
LABEL_276:
                  v379 = 0LL;
                  v377 = 0u;
                  v378 = 0u;
                  v375 = 0u;
                  v376 = 0u;
                  goto LABEL_283;
                }
              }

              else
              {
                v384 = 0LL;
                v382 = 0u;
                v383 = 0u;
                v380 = 0u;
                v381 = 0u;
                swift_bridgeObjectRetain();
                if (!*(void *)(v8 + 16)) {
                  goto LABEL_276;
                }
              }

              swift_bridgeObjectRetain();
              uint64_t v224 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v221);
              if ((v225 & 1) != 0)
              {
                outlined init with copy of AttributedString._AttributeValue( *(void *)(v8 + 56) + 72 * v224,  (uint64_t)&v375);
              }

              else
              {
                v379 = 0LL;
                v377 = 0u;
                v378 = 0u;
                v375 = 0u;
                v376 = 0u;
              }

              swift_bridgeObjectRelease();
LABEL_283:
              swift_bridgeObjectRelease();
              int64_t v8 = (uint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
              outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v380,  (uint64_t)&v365,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v375,  v21,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if (!v368)
              {
                if (v374) {
                  goto LABEL_300;
                }
                outlined destroy of Any?( (uint64_t)&v365,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v375,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v380,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                goto LABEL_270;
              }

              outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v365,  (uint64_t)v359,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if (!v374) {
                goto LABEL_299;
              }
              unint64_t v226 = *(_OWORD *)(v21 + 48);
              v356 = *(_OWORD *)(v21 + 32);
              v357 = v226;
              v358 = *(void *)(v21 + 64);
              char v227 = *(_OWORD *)(v21 + 16);
              v354 = *(_OWORD *)v21;
              v355 = v227;
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v359,  (uint64_t)v424);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v354,  (uint64_t)v423);
              outlined init with copy of (Hashable & Sendable)?( (uint64_t)v424,  (uint64_t)&v391,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined init with copy of (Hashable & Sendable)?( (uint64_t)v423,  (uint64_t)v352,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
              if (*((void *)&v392 + 1))
              {
                if (!v395)
                {
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v391);
LABEL_268:
                  uint64_t v9 = 0LL;
                  goto LABEL_269;
                }

                outlined init with take of any PredicateExpression<Self.Output == B1>(&v391, (uint64_t)v396);
                outlined init with take of any PredicateExpression<Self.Output == B1>(v352, (uint64_t)v390);
                uint64_t v228 = v397;
                v344 = v398;
                v343 = __swift_project_boxed_opaque_existential_1(v396, v397);
                v351 = v304;
                uint64_t v229 = *(void *)(v228 - 8);
                MEMORY[0x1895F8858](v343);
                uint64_t v231 = (char *)v304 - ((v230 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v390,  (uint64_t)v389);
                uint64_t v232 = type metadata accessor for Optional();
                v350 = (__int128 *)v304;
                __int128 v233 = *(void *)(v232 - 8);
                MEMORY[0x1895F8858](v232);
                unint64_t v235 = (char *)v304 - v234;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                uint64_t v236 = swift_dynamicCast();
                uint64_t v237 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v229 + 56);
                if (v236)
                {
                  v237(v235, 0LL, 1LL, v228);
                  (*(void (**)(char *, char *, uint64_t))(v229 + 32))(v231, v235, v228);
                  uint64_t v9 = dispatch thunk of static Equatable.== infix(_:_:)();
                  (*(void (**)(char *, uint64_t))(v229 + 8))(v231, v228);
                }

                else
                {
                  v237(v235, 1LL, 1LL, v228);
                  (*(void (**)(char *, uint64_t))(v233 + 8))(v235, v232);
                  uint64_t v9 = 0LL;
                }

                unint64_t v200 = v346;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v390);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v396);
                uint64_t v10 = v349;
                uint64_t v21 = (unint64_t)v347;
              }

              else
              {
                if (v395)
                {
                  outlined destroy of Any?( (uint64_t)v352,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                  goto LABEL_268;
                }

                uint64_t v9 = 1LL;
              }

LABEL_500:
  __break(1u);
LABEL_501:
  __break(1u);
LABEL_502:
  __break(1u);
LABEL_503:
  __break(1u);
LABEL_504:
  __break(1u);
LABEL_505:
  __break(1u);
LABEL_506:
  __break(1u);
  return result;
}

void *$defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)( void *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  unint64_t v4 = a4[1];
  uint64_t v6 = a4[2];
  uint64_t v7 = a4[3];
  uint64_t v8 = a4[4];
  uint64_t v9 = result[8];
  uint64_t v10 = result[9];
  uint64_t v12 = result[10];
  uint64_t v11 = result[11];
  uint64_t v47 = *a4;
  unint64_t v48 = v4;
  uint64_t v49 = v6;
  uint64_t v45 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }

  if (v5 != v11)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }

  unint64_t v14 = result;
  if (v6)
  {
    unint64_t v15 = *(void *)(v6 + 24 * ((v4 >> ((4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    unint64_t v15 = specialized Rope._Node.subscript.getter(v4, v9);
  }

  swift_bridgeObjectRelease();
  uint64_t result = (void *)swift_bridgeObjectRelease();
  BOOL v16 = __OFADD__(v8, v15);
  uint64_t v17 = v8 + v15;
  if (v16) {
    goto LABEL_81;
  }
  swift_unknownObjectRetain();
  specialized Rope.formIndex(after:)(&v47, v9, v10, v12, v5);
  uint64_t result = (void *)swift_unknownObjectRelease_n();
  uint64_t v18 = a3;
  if (v17 < a3)
  {
    uint64_t v19 = v47;
    unint64_t v20 = v48;
    uint64_t v21 = v49;
    uint64_t v22 = v45;
    goto LABEL_74;
  }

  uint64_t v23 = v14[8];
  uint64_t v22 = v14[9];
  uint64_t v17 = v14[10];
  uint64_t v19 = v14[11];
  if (a2 != a3)
  {
    unint64_t v35 = swift_unknownObjectRetain();
    uint64_t result = (void *)specialized Rope._endPath.getter(v35);
    unint64_t v20 = (unint64_t)result;
    if (v23)
    {
      uint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v21 = 0LL;
    }

    else
    {
      uint64_t v21 = 0LL;
      uint64_t v22 = 0LL;
      uint64_t v17 = 0LL;
    }

    goto LABEL_74;
  }

  if (v23) {
    uint64_t v24 = v17;
  }
  else {
    uint64_t v24 = 0LL;
  }
  if (a3 < 0 || v24 < a3) {
    goto LABEL_87;
  }
  if (v23 && *(_WORD *)(v23 + 16) && v17 > a3)
  {
    uint64_t v25 = *(unsigned __int8 *)(v23 + 18);
    if (*(_BYTE *)(v23 + 18))
    {
      uint64_t result = (void *)swift_unknownObjectRetain_n();
      uint64_t v26 = a3;
      uint64_t v21 = v23;
      while (1)
      {
        uint64_t v28 = *(unsigned __int16 *)(v21 + 16);
        if (!*(_WORD *)(v21 + 16)) {
          goto LABEL_21;
        }
        uint64_t v29 = *(void *)(v21 + 40);
        uint64_t v30 = v26 - v29;
        if (__OFSUB__(v26, v29)) {
          goto LABEL_83;
        }
        if (__OFADD__(v30, 1LL)) {
          goto LABEL_84;
        }
        if (v30 + 1 <= 0)
        {
          uint64_t v28 = 0LL;
        }

        else
        {
          if ((_DWORD)v28 == 1)
          {
            v26 -= v29;
LABEL_21:
            if (v26) {
              goto LABEL_82;
            }
            goto LABEL_22;
          }

          uint64_t v31 = *(void *)(v21 + 64);
          BOOL v16 = __OFSUB__(v30, v31);
          uint64_t v32 = v30 - v31;
          if (v16) {
            goto LABEL_85;
          }
          if (__OFADD__(v32, 1LL)) {
            goto LABEL_86;
          }
          if (v32 + 1 >= 1)
          {
            if ((_DWORD)v28 != 2)
            {
              uint64_t v33 = (void *)(v21 + 88);
              uint64_t v34 = 2LL;
              while (v28 != v34)
              {
                uint64_t v26 = v32 - *v33;
                if (__OFSUB__(v32, *v33)) {
                  goto LABEL_77;
                }
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_78;
                }
                if (v26 + 1 < 1)
                {
                  uint64_t v28 = v34;
                  uint64_t v26 = v32;
                  goto LABEL_22;
                }

                ++v34;
                v33 += 3;
                uint64_t v32 = v26;
                if (v28 == v34) {
                  goto LABEL_21;
                }
              }

              __break(1u);
LABEL_77:
              __break(1u);
LABEL_78:
              __break(1u);
              goto LABEL_79;
            }

            uint64_t v26 = v32;
            goto LABEL_21;
          }

          uint64_t v28 = 1LL;
          uint64_t v26 = v30;
        }

void *$defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)( void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v111 = a3;
  uint64_t v108 = a2;
  uint64_t v3 = isStackAllocationSafe;
  uint64_t v123 = *MEMORY[0x1895F89C0];
  char v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  int64_t v104 = (unint64_t)((1LL << v4) + 63) >> 6;
  size_t v5 = 8 * v104;
  uint64_t v110 = isStackAllocationSafe;
  if ((v4 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      unint64_t v103 = (unint64_t *)swift_slowAlloc();
      bzero(v103, v5);
      __int128 v102 = 0LL;
      int64_t v29 = 0LL;
      uint64_t v30 = *(void *)(v3 + 64);
      uint64_t v105 = (char *)(v3 + 64);
      uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
      if (v31 < 64) {
        uint64_t v32 = ~(-1LL << v31);
      }
      else {
        uint64_t v32 = -1LL;
      }
      unint64_t v33 = v32 & v30;
      uint64_t v109 = &v118;
      int64_t v106 = (unint64_t)(v31 + 63) >> 6;
      char v107 = &v113;
      while (1)
      {
        if (v33)
        {
          unint64_t v36 = __clz(__rbit64(v33));
          v33 &= v33 - 1;
          unint64_t v37 = v36 | (v29 << 6);
          uint64_t v38 = v111;
        }

        else
        {
          int64_t v39 = v29 + 1;
          uint64_t v38 = v111;
          if (__OFADD__(v29, 1LL)) {
            goto LABEL_156;
          }
          if (v39 >= v106) {
            goto LABEL_86;
          }
          unint64_t v40 = *(void *)&v105[8 * v39];
          ++v29;
          if (!v40)
          {
            int64_t v29 = v39 + 1;
            if (v39 + 1 >= v106) {
              goto LABEL_86;
            }
            unint64_t v40 = *(void *)&v105[8 * v29];
            if (!v40)
            {
              int64_t v29 = v39 + 2;
              if (v39 + 2 >= v106) {
                goto LABEL_86;
              }
              unint64_t v40 = *(void *)&v105[8 * v29];
              if (!v40)
              {
                int64_t v41 = v39 + 3;
                if (v41 >= v106) {
                  goto LABEL_86;
                }
                unint64_t v40 = *(void *)&v105[8 * v41];
                if (!v40)
                {
                  while (1)
                  {
                    int64_t v29 = v41 + 1;
                    if (__OFADD__(v41, 1LL)) {
                      goto LABEL_159;
                    }
                    if (v29 >= v106) {
                      break;
                    }
                    unint64_t v40 = *(void *)&v105[8 * v29];
                    ++v41;
                    if (v40) {
                      goto LABEL_67;
                    }
                  }

uint64_t specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v8 = 0LL;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_5:
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v10, (uint64_t)v17);
    v15[2] = v17[2];
    v15[3] = v18;
    uint64_t v16 = v19;
    v15[0] = v17[0];
    v15[1] = v17[1];
    uint64_t v11 = v18;
    uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
    if (v11 != 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return 1LL;
    }
  }

  int64_t v12 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_28;
  }

  if (v12 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v12);
  ++v8;
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 1;
  if (v12 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 2;
  if (v12 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 3;
  if (v12 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 4;
  if (v12 + 4 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13)
  {
LABEL_24:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_5;
  }

  int64_t v14 = v12 + 5;
  if (v14 >= v6)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  unint64_t v13 = *(void *)(v2 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_24;
  }

  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_24;
    }
  }

uint64_t specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v8 = 0LL;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_5:
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v10, (uint64_t)v17);
    v15[2] = v17[2];
    v15[3] = v18;
    uint64_t v16 = v19;
    v15[0] = v17[0];
    v15[1] = v17[1];
    unint64_t v11 = v18;
    uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
    if (v11 >= 2)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return 1LL;
    }
  }

  int64_t v12 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v12 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v12);
  ++v8;
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 1;
  if (v12 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 2;
  if (v12 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 3;
  if (v12 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 4;
  if (v12 + 4 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13)
  {
LABEL_24:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_5;
  }

  int64_t v14 = v12 + 5;
  if (v14 >= v6)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  unint64_t v13 = *(void *)(v2 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_24;
  }

  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_24;
    }
  }

uint64_t specialized AttributedString._AttributeStorage.matchStyle(of:for:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *v2;
  uint64_t v49 = *v2 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(*v2 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(*v2 + 64);
  int64_t v50 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  char v48 = 0;
  int64_t v11 = 0LL;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v11 << 6);
LABEL_25:
    __int128 v18 = (unint64_t *)(*(void *)(v6 + 48) + 16 * v14);
    unint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    uint64_t v21 = *v52;
    if (*(void *)(*v52 + 16))
    {
      swift_bridgeObjectRetain_n();
      unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v19);
      if ((v23 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v21 + 56) + 72 * v22, (uint64_t)&v56);
      }

      else
      {
        uint64_t v60 = 0LL;
        __int128 v58 = 0u;
        __int128 v59 = 0u;
        __int128 v56 = 0u;
        __int128 v57 = 0u;
      }

      swift_bridgeObjectRelease();
      if (!*((void *)&v57 + 1))
      {
LABEL_4:
        outlined destroy of Any?( (uint64_t)&v56,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t v12 = 0LL;
LABEL_5:
        swift_bridgeObjectRetain();
        outlined consume of AttributedString.AttributeRunBoundaries?(v12, 1LL);
        outlined consume of AttributedString.AttributeRunBoundaries?(v4, v5);
        goto LABEL_6;
      }
    }

    else
    {
      uint64_t v60 = 0LL;
      __int128 v58 = 0u;
      __int128 v59 = 0u;
      __int128 v56 = 0u;
      __int128 v57 = 0u;
      swift_bridgeObjectRetain();
      if (!*((void *)&v57 + 1)) {
        goto LABEL_4;
      }
    }

    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v56, (uint64_t)v53);
    outlined destroy of Any?( (uint64_t)&v56,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v12 = v54;
    uint64_t v24 = v55;
    outlined copy of AttributedString.AttributeRunBoundaries?(v54, v55);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v53);
    if (v24)
    {
      if (v24 == 1) {
        goto LABEL_5;
      }
      if (!v5) {
        goto LABEL_39;
      }
      if (v12 == v4 && v24 == v5)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v25 & 1) == 0) {
          goto LABEL_6;
        }
      }

uint64_t specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v8 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_26;
    }

    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v11 >= v6) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_29;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_29;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_29;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v8);
          if (!v12)
          {
            int64_t v8 = v11 + 4;
            if (v11 + 4 >= v6) {
              goto LABEL_29;
            }
            unint64_t v12 = *(void *)(v2 + 8 * v8);
            if (!v12) {
              break;
            }
          }
        }
      }
    }

uint64_t specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)( unint64_t *a1, uint64_t *a2, uint64_t a3, _BYTE *a4, void *a5, uint64_t a6)
{
  return specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)( a1,  a2,  a3,  a4,  a5,  a6) & 1;
}

{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  _OWORD v20[4];
  uint64_t v21;
  _BYTE v22[72];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int64_t v11 = *a1;
  unint64_t v10 = a1[1];
  unint64_t v12 = *a2;
  if (*(void *)(*a2 + 16))
  {
    swift_bridgeObjectRetain();
    int64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
    if ((v14 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v12 + 56) + 72 * v13, (uint64_t)&v38);
    }

    else
    {
      unint64_t v42 = 0LL;
      unint64_t v40 = 0u;
      unint64_t v41 = 0u;
      int64_t v38 = 0u;
      int64_t v39 = 0u;
    }

    swift_bridgeObjectRelease();
    if (*(void *)(a3 + 16)) {
      goto LABEL_8;
    }
LABEL_5:
    unint64_t v37 = 0LL;
    uint64_t v35 = 0u;
    int64_t v36 = 0u;
    uint64_t v33 = 0u;
    unint64_t v34 = 0u;
    goto LABEL_12;
  }

  unint64_t v42 = 0LL;
  unint64_t v40 = 0u;
  unint64_t v41 = 0u;
  int64_t v38 = 0u;
  int64_t v39 = 0u;
  if (!*(void *)(a3 + 16)) {
    goto LABEL_5;
  }
LABEL_8:
  swift_bridgeObjectRetain();
  int64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
  if ((v16 & 1) != 0)
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a3 + 56) + 72 * v15, (uint64_t)&v33);
  }

  else
  {
    unint64_t v37 = 0LL;
    uint64_t v35 = 0u;
    int64_t v36 = 0u;
    uint64_t v33 = 0u;
    unint64_t v34 = 0u;
  }

  swift_bridgeObjectRelease();
LABEL_12:
  outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v38,  (uint64_t)&v23,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v33,  (uint64_t)&v28,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (!*((void *)&v24 + 1))
  {
    outlined destroy of Any?( (uint64_t)&v33,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?( (uint64_t)&v38,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!*((void *)&v29 + 1))
    {
      outlined destroy of Any?( (uint64_t)&v23,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_18;
    }

uint64_t specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v11 = a3 >> 11;
  uint64_t v12 = a4 >> 11;
  if (a4 >> 11 < a3 >> 11)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = a5;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v45 = *v7;
    uint64_t v10 = *v7;
    *uint64_t v7 = 0x8000000000000000LL;
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
    uint64_t v15 = *(void *)(v10 + 16);
    BOOL v16 = (v14 & 1) == 0;
    uint64_t v17 = v15 + v16;
    if (!__OFADD__(v15, v16))
    {
      char v9 = v14;
      if (*(void *)(v10 + 24) < v17)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v17,  isUniquelyReferenced_nonNull_native);
        uint64_t v18 = v45;
        unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
        if ((v9 & 1) != (v20 & 1)) {
          goto LABEL_44;
        }
        unint64_t v8 = v19;
        goto LABEL_8;
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v18 = v10;
LABEL_8:
        *uint64_t v7 = v18;
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0)
        {
          specialized _NativeDictionary._insert(at:key:value:)(v8, v6, v5, MEMORY[0x18961AFE8], (void *)*v7);
          swift_bridgeObjectRetain();
        }

        Array<A>._extend(with:)(v11, v12);
        return swift_bridgeObjectRelease();
      }

      goto LABEL_13;
    }
  }

  __break(1u);
LABEL_13:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Range<Int>]>);
  uint64_t v22 = static _DictionaryStorage.copy(original:)();
  uint64_t v18 = v22;
  if (!*(void *)(v10 + 16))
  {
LABEL_41:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  char v23 = (char *)(v22 + 64);
  uint64_t v24 = (char *)(v10 + 64);
  unint64_t v25 = (unint64_t)((1LL << *(_BYTE *)(v18 + 32)) + 63) >> 6;
  uint64_t v41 = v10 + 64;
  if (v18 != v10 || v23 >= &v24[8 * v25]) {
    memmove(v23, v24, 8 * v25);
  }
  int64_t v26 = 0LL;
  *(void *)(v18 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v10 + 16);
  uint64_t v27 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v28 = -1LL;
  if (v27 < 64) {
    uint64_t v28 = ~(-1LL << v27);
  }
  unint64_t v29 = v28 & *(void *)(v10 + 64);
  int64_t v42 = (unint64_t)(v27 + 63) >> 6;
  while (1)
  {
    if (v29)
    {
      uint64_t v43 = (v29 - 1) & v29;
      int64_t v44 = v26;
      unint64_t v30 = __clz(__rbit64(v29)) | (v26 << 6);
      goto LABEL_21;
    }

    int64_t v37 = v26 + 1;
    if (__OFADD__(v26, 1LL))
    {
      __break(1u);
      goto LABEL_43;
    }

    if (v37 >= v42) {
      goto LABEL_41;
    }
    unint64_t v38 = *(void *)(v41 + 8 * v37);
    int64_t v39 = v26 + 1;
    if (!v38)
    {
      int64_t v39 = v26 + 2;
      if (v26 + 2 >= v42) {
        goto LABEL_41;
      }
      unint64_t v38 = *(void *)(v41 + 8 * v39);
      if (!v38)
      {
        int64_t v39 = v26 + 3;
        if (v26 + 3 >= v42) {
          goto LABEL_41;
        }
        unint64_t v38 = *(void *)(v41 + 8 * v39);
        if (!v38)
        {
          int64_t v39 = v26 + 4;
          if (v26 + 4 >= v42) {
            goto LABEL_41;
          }
          unint64_t v38 = *(void *)(v41 + 8 * v39);
          if (!v38)
          {
            int64_t v39 = v26 + 5;
            if (v26 + 5 >= v42) {
              goto LABEL_41;
            }
            unint64_t v38 = *(void *)(v41 + 8 * v39);
            if (!v38) {
              break;
            }
          }
        }
      }
    }

ValueMetadata *type metadata accessor for AttributedString._AttributeStorage()
{
  return &type metadata for AttributedString._AttributeStorage;
}

uint64_t destroy for AttributedString._AttributeValue(uint64_t a1)
{
  if (*(void *)(a1 + 48) != 1LL) {
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttributedString._AttributeValue(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 40) = *v5;
  }

  else
  {
    *(void *)(a1 + 40) = *(void *)v5;
    *(void *)(a1 + 48) = v6;
    swift_bridgeObjectRetain();
  }

  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString._AttributeValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) != 1LL)
  {
    if (v4 != 1)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }

    outlined destroy of AttributedString.AttributeRunBoundaries(a1 + 40);
    goto LABEL_6;
  }

  if (v4 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_8;
  }

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
LABEL_8:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttributedString._AttributeValue(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = (void *)(a2 + 40);
  if (*(void *)(a1 + 48) != 1LL)
  {
    uint64_t v6 = *(void *)(a2 + 48);
    if (v6 != 1)
    {
      *(void *)(a1 + 40) = *v5;
      *(void *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }

    outlined destroy of AttributedString.AttributeRunBoundaries(a1 + 40);
  }

  *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
LABEL_6:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString._AttributeValue(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString._AttributeValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 72) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString._AttributeValue()
{
  return &type metadata for AttributedString._AttributeValue;
}

uint64_t AttributedString._AttributeStorage.subscript.getter@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16))
  {
    uint64_t v7 = result;
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, a2);
    if ((v9 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(a3 + 56) + 72 * v8, a4);
    }

    else
    {
      *(void *)(a4 + 64) = 0LL;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
    }

    return swift_bridgeObjectRelease();
  }

  else
  {
    *(void *)(a4 + 64) = 0LL;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  }

  return result;
}

uint64_t AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)( uint64_t (*a1)(uint64_t, uint64_t, __int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = specialized _NativeDictionary.filter(_:)(a3, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t AttributedString._AttributeStorage.subscript.getter@<X0>( uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  if (*(void *)(a1 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7), (v9 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v8, (uint64_t)&v14);
    swift_bridgeObjectRelease();
    if (*((void *)&v15 + 1))
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v14,  (uint64_t)v13);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      swift_dynamicCast();
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v14);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( a4,  0LL,  1LL,  AssociatedTypeWitness);
    }
  }

  else
  {
    uint64_t v18 = 0LL;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    swift_bridgeObjectRelease();
  }

  outlined destroy of Any?( (uint64_t)&v14,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))( a4,  1LL,  1LL,  v12);
}

uint64_t static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v27 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v10);
  __int128 v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v26 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v27, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1LL, AssociatedTypeWitness) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    *(void *)(a4 + 64) = 0LL;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v12, AssociatedTypeWitness);
    char v20 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v20(v16, v18, AssociatedTypeWitness);
    *((void *)&v30 + 1) = AssociatedTypeWitness;
    *(void *)uint64_t v31 = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v29);
    v20((char *)boxed_opaque_existential_1, v16, AssociatedTypeWitness);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a3 + 32))(&v28, a2, a3);
    *(_OWORD *)&v31[8] = v28;
    v31[24] = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3) & 1;
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
    char v23 = *(void (**)(char *, uint64_t))(v13 + 8);
    v23(v16, AssociatedTypeWitness);
    *(void *)(a4 + 64) = v22;
    __int128 v24 = *(_OWORD *)&v31[16];
    *(_OWORD *)(a4 + 32) = *(_OWORD *)v31;
    *(_OWORD *)(a4 + 48) = v24;
    __int128 v25 = v30;
    *(_OWORD *)a4 = v29;
    *(_OWORD *)(a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
    return ((uint64_t (*)(char *, uint64_t))v23)(v18, AssociatedTypeWitness);
  }

  return result;
}

uint64_t AttributedString._AttributeValue.isInvalidatedOnTextChange.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  if (!v1) {
    return 0LL;
  }
  if (!*(void *)(v1 + 16)) {
    return 0LL;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0LL);
  Swift::Int v2 = Hasher._finalize()();
  uint64_t v3 = -1LL << *(_BYTE *)(v1 + 32);
  unint64_t v4 = v2 & ~v3;
  if (((*(void *)(v1 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) == 0) {
    return 0LL;
  }
  uint64_t v5 = ~v3;
  while (*(void *)(*(void *)(v1 + 48) + 16 * v4 + 8))
  {
    unint64_t v4 = (v4 + 1) & v5;
    if (((*(void *)(v1 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) == 0) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease();
  return 1LL;
}

uint64_t AttributedString._AttributeValue.isInvalidatedOnAttributeChange.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1 + 56;
  uint64_t v3 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v8 = 0LL;
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    if (*(void *)(*(void *)(v1 + 48) + 16 * i + 8))
    {
      uint64_t v14 = 1LL;
LABEL_30:
      swift_release();
      swift_bridgeObjectRelease();
      return v14;
    }

    uint64_t result = swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v11 >= v6) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_29;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_29;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_29;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v8);
          if (!v12)
          {
            int64_t v8 = v11 + 4;
            if (v11 + 4 >= v6) {
              goto LABEL_29;
            }
            unint64_t v12 = *(void *)(v2 + 8 * v8);
            if (!v12) {
              break;
            }
          }
        }
      }
    }

uint64_t openEquatable #1 <A>(_:) in static AttributedString._AttributeValue.__equalAttributes(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  unint64_t v9 = &v18[-v8 - 8];
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v7);
  unint64_t v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a2, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  int v13 = swift_dynamicCast();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v13)
  {
    v14(v9, 0LL, 1LL, a3);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, a3);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a3);
  }

  else
  {
    v14(v9, 1LL, 1LL, a3);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    char v15 = 0;
  }

  return v15 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString._AttributeValue()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttributedString._AttributeValue()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString._AttributeValue()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString._AttributeValue()
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v0, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  return String.init<A>(describing:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString._AttributeValue( uint64_t a1, uint64_t a2)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v5);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a2, (uint64_t)v4);
  LOBYTE(a2) = specialized static AttributedString._AttributeValue.__equalAttributes(_:_:)((uint64_t)v5, (uint64_t)v4);
  outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  return a2 & 1;
}

unint64_t lazy protocol witness table accessor for type AttributedString._AttributeValue and conformance AttributedString._AttributeValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._AttributeValue and conformance AttributedString._AttributeValue;
  if (!lazy protocol witness table cache variable for type AttributedString._AttributeValue and conformance AttributedString._AttributeValue)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._AttributeValue,  &type metadata for AttributedString._AttributeValue);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._AttributeValue and conformance AttributedString._AttributeValue);
  }

  return result;
}

uint64_t Dictionary<>._attrStrDescription.getter(uint64_t a1)
{
  v30.___darwin_time_t countAndFlagsBits = 0LL;
  v30._object = (void *)0xE000000000000000LL;
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }

    int64_t v18 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v18 >= v6) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v2 + 8 * v18);
    ++v8;
    if (!v19)
    {
      int64_t v8 = v18 + 1;
      if (v18 + 1 >= v6) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v2 + 8 * v8);
      if (!v19)
      {
        int64_t v8 = v18 + 2;
        if (v18 + 2 >= v6) {
          goto LABEL_23;
        }
        unint64_t v19 = *(void *)(v2 + 8 * v8);
        if (!v19)
        {
          int64_t v8 = v18 + 3;
          if (v18 + 3 >= v6) {
            goto LABEL_23;
          }
          unint64_t v19 = *(void *)(v2 + 8 * v8);
          if (!v19) {
            break;
          }
        }
      }
    }

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString._AttributeStorage()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString._AttributeStorage(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  specialized Dictionary<>.hash(into:)(a1, v3);
  specialized Set.hash(into:)(a1, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString._AttributeStorage()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString._AttributeStorage( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0) {
    return specialized static Set.== infix(_:_:)(v2, v3);
  }
  else {
    return 0LL;
  }
}

unint64_t lazy protocol witness table accessor for type AttributedString._AttributeStorage and conformance AttributedString._AttributeStorage()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._AttributeStorage and conformance AttributedString._AttributeStorage;
  if (!lazy protocol witness table cache variable for type AttributedString._AttributeStorage and conformance AttributedString._AttributeStorage)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._AttributeStorage,  &type metadata for AttributedString._AttributeStorage);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._AttributeStorage and conformance AttributedString._AttributeStorage);
  }

  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString._AttributeStorage()
{
  return Dictionary<>._attrStrDescription.getter(*v0);
}

uint64_t AttributedString._AttributeStorage._attributeModified(_:old:new:)( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v6 = v4;
  uint64_t v7 = a4;
  uint64_t v8 = a3;
  uint64_t v10 = *(void *)(a3 + 24);
  outlined init with copy of (Hashable & Sendable)?( a4,  (uint64_t)v196,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  uint64_t v11 = v10 | v197;
  uint64_t result = outlined destroy of Any?( (uint64_t)v196,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (!v11) {
    return result;
  }
  outlined init with copy of (Hashable & Sendable)?( v7,  (uint64_t)&v186,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  uint64_t v164 = v4;
  if (*((void *)&v187 + 1))
  {
    char v13 = AttributedString._AttributeValue.isInvalidatedOnAttributeChange.getter();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v186);
    if ((v13 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((unint64_t *)&v186, a1, a2);
      goto LABEL_22;
    }
  }

  else
  {
    outlined destroy of Any?( (uint64_t)&v186,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  }

  uint64_t v5 = v6[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v16 = v14 & ~v15;
  if (((*(void *)(v5 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v17 = *(void *)(v5 + 48);
    int64_t v18 = (void *)(v17 + 16 * v16);
    BOOL v19 = *v18 == a1 && v18[1] == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v5 = v6[1];
      *(void *)&__int128 v186 = v5;
      v6[1] = 0x8000000000000000LL;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_180;
      }
      uint64_t v21 = v5;
LABEL_14:
      uint64_t v5 = *(void *)(*(void *)(v21 + 48) + 16 * v16 + 8);
      specialized _NativeSet._delete(at:)(v16);
      v6[1] = v186;
      swift_bridgeObjectRelease();
    }

    else
    {
      while (1)
      {
        unint64_t v16 = (v16 + 1) & ~v15;
        if (((*(void *)(v5 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
          break;
        }
        uint64_t v22 = (void *)(v17 + 16 * v16);
        BOOL v23 = *v22 == a1 && v22[1] == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_12;
        }
      }
    }
  }

uint64_t specialized _NativeDictionary.filter(_:)( uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, __int128 *))
{
  unint64_t v91 = a2;
  uint64_t v3 = isStackAllocationSafe;
  uint64_t v103 = *MEMORY[0x1895F89C0];
  char v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  int64_t v89 = (unint64_t)((1LL << v4) + 63) >> 6;
  size_t v5 = 8 * v89;
  uint64_t v92 = isStackAllocationSafe;
  if ((v4 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v88 = (unint64_t *)swift_slowAlloc();
      bzero(v88, v5);
      uint64_t v90 = 0LL;
      int64_t v21 = 0LL;
      uint64_t v22 = v3 + 64;
      uint64_t v23 = 1LL << *(_BYTE *)(v3 + 32);
      if (v23 < 64) {
        uint64_t v24 = ~(-1LL << v23);
      }
      else {
        uint64_t v24 = -1LL;
      }
      unint64_t v25 = v24 & *(void *)(v3 + 64);
      int64_t v26 = (unint64_t)(v23 + 63) >> 6;
      while (1)
      {
        if (v25)
        {
          unint64_t v27 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          unint64_t v28 = v27 | (v21 << 6);
        }

        else
        {
          BOOL v14 = __OFADD__(v21++, 1LL);
          if (v14) {
            goto LABEL_132;
          }
          if (v21 >= v26) {
            goto LABEL_60;
          }
          unint64_t v29 = *(void *)(v22 + 8 * v21);
          if (!v29)
          {
            int64_t v30 = v21 + 1;
            if (v21 + 1 >= v26) {
              goto LABEL_60;
            }
            unint64_t v29 = *(void *)(v22 + 8 * v30);
            if (!v29)
            {
              int64_t v30 = v21 + 2;
              if (v21 + 2 >= v26) {
                goto LABEL_60;
              }
              unint64_t v29 = *(void *)(v22 + 8 * v30);
              if (!v29)
              {
                int64_t v30 = v21 + 3;
                if (v21 + 3 >= v26) {
                  goto LABEL_60;
                }
                unint64_t v29 = *(void *)(v22 + 8 * v30);
                if (!v29)
                {
                  while (1)
                  {
                    int64_t v21 = v30 + 1;
                    if (__OFADD__(v30, 1LL)) {
                      goto LABEL_135;
                    }
                    if (v21 >= v26) {
                      break;
                    }
                    unint64_t v29 = *(void *)(v22 + 8 * v21);
                    ++v30;
                    if (v29) {
                      goto LABEL_48;
                    }
                  }

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }

        else if (v11 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          unint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          BOOL v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *unint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }

uint64_t specialized static AttributedString._AttributeValue.__equalAttributes(_:_:)(uint64_t a1, uint64_t a2)
{
  if (v11)
  {
    if (v13)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v10, (uint64_t)v8);
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v12, (uint64_t)v7);
      uint64_t v3 = v9;
      uint64_t v4 = __swift_project_boxed_opaque_existential_1(v8, v9);
      char v5 = openEquatable #1 <A>(_:) in static AttributedString._AttributeValue.__equalAttributes(_:_:)( (uint64_t)v4,  (uint64_t)v7,  v3);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    }

    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
      char v5 = 0;
    }
  }

  else if (v13)
  {
    outlined destroy of Any?((uint64_t)&v12, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    char v5 = 0;
  }

  else
  {
    char v5 = 1;
  }

  return v5 & 1;
}

uint64_t specialized AttributedString._AttributeStorage.isEqual(to:comparing:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3) {
    return 1LL;
  }
  uint64_t v35 = (__int128 *)&v43;
  swift_bridgeObjectRetain();
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  uint64_t v7 = (uint64_t *)(a2 + 40);
  uint64_t v29 = a3;
  while (1)
  {
    uint64_t v9 = *(v7 - 1);
    uint64_t v10 = *v7;
    if (*(void *)(a3 + 16))
    {
      swift_bridgeObjectRetain_n();
      unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
      if ((v12 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(a3 + 56) + 72 * v11, (uint64_t)&v61);
      }

      else
      {
        uint64_t v65 = 0LL;
        __int128 v63 = 0u;
        __int128 v64 = 0u;
        __int128 v61 = 0u;
        __int128 v62 = 0u;
      }

      swift_bridgeObjectRelease();
      if (!*(void *)(a1 + 16))
      {
LABEL_11:
        uint64_t v60 = 0LL;
        __int128 v58 = 0u;
        __int128 v59 = 0u;
        __int128 v56 = 0u;
        __int128 v57 = 0u;
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v65 = 0LL;
      __int128 v63 = 0u;
      __int128 v64 = 0u;
      __int128 v61 = 0u;
      __int128 v62 = 0u;
      swift_bridgeObjectRetain();
      if (!*(void *)(a1 + 16)) {
        goto LABEL_11;
      }
    }

    swift_bridgeObjectRetain();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
    if ((v14 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v13, (uint64_t)&v56);
    }

    else
    {
      uint64_t v60 = 0LL;
      __int128 v58 = 0u;
      __int128 v59 = 0u;
      __int128 v56 = 0u;
      __int128 v57 = 0u;
    }

    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v61,  (uint64_t)v50,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v56,  (uint64_t)&v51,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (v50[3]) {
      break;
    }
    outlined destroy of Any?( (uint64_t)&v56,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?( (uint64_t)&v61,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (*((void *)&v52 + 1)) {
      goto LABEL_34;
    }
    outlined destroy of Any?( (uint64_t)v50,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_6:
    v7 += 2;
    if (!--v3)
    {
      uint64_t v25 = 1LL;
      goto LABEL_36;
    }
  }

  outlined init with copy of (Hashable & Sendable)?( (uint64_t)v50,  (uint64_t)v49,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (*((void *)&v52 + 1))
  {
    _OWORD v47[2] = v53;
    v47[3] = v54;
    uint64_t v48 = v55;
    v47[0] = v51;
    v47[1] = v52;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v49,  (uint64_t)v46);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v47,  (uint64_t)v45);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v46,  (uint64_t)&v41,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?( (uint64_t)v45,  (uint64_t)v35,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (v42)
    {
      if (v44)
      {
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v41, (uint64_t)v38);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v35, (uint64_t)v37);
        uint64_t v15 = v39;
        uint64_t v32 = v40;
        int64_t v30 = __swift_project_boxed_opaque_existential_1(v38, v39);
        char v34 = &v27;
        uint64_t v16 = *(void *)(v15 - 8);
        MEMORY[0x1895F8858](v30);
        uint64_t v31 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v37,  (uint64_t)&v36);
        uint64_t v18 = type metadata accessor for Optional();
        uint64_t v33 = &v27;
        uint64_t v19 = *(void *)(v18 - 8);
        MEMORY[0x1895F8858](v18);
        int64_t v21 = (char *)&v27 - v20;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        int v22 = swift_dynamicCast();
        uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
        if (v22)
        {
          v23(v21, 0LL, 1LL, v15);
          uint64_t v24 = v31;
          (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v31, v21, v15);
          char v8 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v15);
        }

        else
        {
          v23(v21, 1LL, 1LL, v15);
          (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
          char v8 = 0;
        }

        a1 = v28;
        a3 = v29;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
LABEL_5:
        outlined destroy of Any?((uint64_t)v45, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of Any?((uint64_t)v46, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v47);
        outlined destroy of Any?( (uint64_t)&v56,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v61,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v49);
        outlined destroy of Any?( (uint64_t)v50,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if ((v8 & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_6;
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    }

    else
    {
      if (!v44)
      {
        char v8 = 1;
        goto LABEL_5;
      }

      outlined destroy of Any?((uint64_t)v35, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    }

    char v8 = 0;
    goto LABEL_5;
  }

  outlined destroy of Any?( (uint64_t)&v56,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?( (uint64_t)&v61,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v49);
LABEL_34:
  outlined destroy of Any?( (uint64_t)v50,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_35:
  uint64_t v25 = 0LL;
LABEL_36:
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t specialized static AttributedString._AttributeValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v15);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a2, (uint64_t)v14);
  outlined init with copy of (Hashable & Sendable)?( (uint64_t)v15,  (uint64_t)&v10,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined init with copy of (Hashable & Sendable)?( (uint64_t)v14,  (uint64_t)&v12,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
  if (!v11)
  {
    if (!v13)
    {
      char v5 = 1;
      goto LABEL_9;
    }

    outlined destroy of Any?((uint64_t)&v12, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    goto LABEL_7;
  }

  if (!v13)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
LABEL_7:
    char v5 = 0;
    goto LABEL_9;
  }

  outlined init with take of any PredicateExpression<Self.Output == B1>(&v10, (uint64_t)v8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v12, (uint64_t)v7);
  uint64_t v3 = v9;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v8, v9);
  char v5 = openEquatable #1 <A>(_:) in static AttributedString._AttributeValue.__equalAttributes(_:_:)( (uint64_t)v4,  (uint64_t)v7,  v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
LABEL_9:
  outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  return v5 & 1;
}

uint64_t specialized AttributedString._AttributeStorage.subscript.setter( uint64_t a1, unint64_t a2, unint64_t a3)
{
  char v5 = v3;
  outlined init with copy of (Hashable & Sendable)?( a1,  (uint64_t)&v93,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (!*((void *)&v94 + 1))
  {
    outlined destroy of Any?( (uint64_t)&v93,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    swift_bridgeObjectRetain();
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    char v21 = v20;
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v23 = *v3;
      uint64_t *v3 = 0x8000000000000000LL;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v24 = v23;
        goto LABEL_10;
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
      uint64_t v57 = static _DictionaryStorage.copy(original:)();
      uint64_t v24 = v57;
      if (!*(void *)(v23 + 16)) {
        goto LABEL_80;
      }
      __int128 v58 = (char *)(v57 + 64);
      __src = (char *)(v23 + 64);
      unint64_t v59 = (unint64_t)((1LL << *(_BYTE *)(v24 + 32)) + 63) >> 6;
      if (v24 != v23 || v58 >= &__src[8 * v59]) {
        memmove(v58, __src, 8 * v59);
      }
      int64_t v83 = 0LL;
      *(void *)(v24 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v23 + 16);
      uint64_t v60 = 1LL << *(_BYTE *)(v23 + 32);
      uint64_t v61 = -1LL;
      if (v60 < 64) {
        uint64_t v61 = ~(-1LL << v60);
      }
      unint64_t v87 = v61 & *(void *)(v23 + 64);
      int64_t v79 = (unint64_t)(v60 + 63) >> 6;
      while (1)
      {
        if (v87)
        {
          unint64_t v62 = __clz(__rbit64(v87));
          v87 &= v87 - 1;
          unint64_t v63 = v62 | (v83 << 6);
        }

        else
        {
          int64_t v73 = v83 + 1;
          if (__OFADD__(v83, 1LL))
          {
LABEL_82:
            __break(1u);
            goto LABEL_83;
          }

          if (v73 >= v79) {
            goto LABEL_80;
          }
          unint64_t v74 = *(void *)&__src[8 * v73];
          int64_t v75 = v83 + 1;
          if (!v74)
          {
            int64_t v75 = v83 + 2;
            if (v83 + 2 >= v79) {
              goto LABEL_80;
            }
            unint64_t v74 = *(void *)&__src[8 * v75];
            if (!v74)
            {
              int64_t v75 = v83 + 3;
              if (v83 + 3 >= v79) {
                goto LABEL_80;
              }
              unint64_t v74 = *(void *)&__src[8 * v75];
              if (!v74)
              {
                int64_t v75 = v83 + 4;
                if (v83 + 4 >= v79) {
                  goto LABEL_80;
                }
                unint64_t v74 = *(void *)&__src[8 * v75];
                if (!v74)
                {
                  int64_t v75 = v83 + 5;
                  if (v83 + 5 >= v79) {
                    goto LABEL_80;
                  }
                  unint64_t v74 = *(void *)&__src[8 * v75];
                  if (!v74)
                  {
                    int64_t v75 = v83 + 6;
                    if (v83 + 6 >= v79) {
                      goto LABEL_80;
                    }
                    unint64_t v74 = *(void *)&__src[8 * v75];
                    if (!v74)
                    {
                      int64_t v76 = v83 + 7;
                      if (v83 + 7 >= v79) {
                        goto LABEL_80;
                      }
                      unint64_t v74 = *(void *)&__src[8 * v76];
                      if (!v74)
                      {
                        while (1)
                        {
                          int64_t v75 = v76 + 1;
                          if (__OFADD__(v76, 1LL)) {
                            goto LABEL_84;
                          }
                          if (v75 >= v79) {
                            break;
                          }
                          unint64_t v74 = *(void *)&__src[8 * v75];
                          ++v76;
                          if (v74) {
                            goto LABEL_79;
                          }
                        }

uint64_t specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(uint64_t a1, char *a2)
{
  char v3 = *a2;
  uint64_t v23 = a1 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  char v9 = &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v8 << 6);
LABEL_7:
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = (void *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v14 = v13[1];
      *(void *)&__int128 v27 = *v13;
      *((void *)&v27 + 1) = v14;
      outlined init with copy of AttributedString._AttributeValue(v12 + 72 * v11, (uint64_t)&v28);
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }

    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_34;
    }

    if (v15 < v24)
    {
      unint64_t v16 = *(void *)(v23 + 8 * v15);
      if (v16) {
        goto LABEL_11;
      }
      int64_t v17 = v8 + 2;
      ++v8;
      if (v15 + 1 < v24)
      {
        unint64_t v16 = *(void *)(v23 + 8 * v17);
        if (v16) {
          goto LABEL_14;
        }
        int64_t v8 = v15 + 1;
        if (v15 + 2 < v24)
        {
          unint64_t v16 = *(void *)(v23 + 8 * (v15 + 2));
          if (v16)
          {
            v15 += 2LL;
            goto LABEL_11;
          }

          int64_t v17 = v15 + 3;
          int64_t v8 = v15 + 2;
          if (v15 + 3 < v24) {
            break;
          }
        }
      }
    }

uint64_t specialized AttributedString._AttributeStorage.matches(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v40 = a1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & v4;
  int64_t v8 = v65;
  uint64_t v49 = (uint64_t)&v66 + 8;
  int64_t v45 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v46 = (__int128 *)&v57;
  int64_t v36 = v45 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v48 = 0LL;
  uint64_t v38 = a2;
  uint64_t v39 = result;
  __int128 v37 = v65;
  if (!v7) {
    goto LABEL_11;
  }
LABEL_9:
  while (2)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v48 << 6);
LABEL_10:
    uint64_t v13 = *(void *)(v3 + 56);
    uint64_t v14 = (void *)(*(void *)(v3 + 48) + 16 * v12);
    uint64_t v15 = v14[1];
    *(void *)&__int128 v64 = *v14;
    *((void *)&v64 + 1) = v15;
    outlined init with copy of AttributedString._AttributeValue(v13 + 72 * v12, (uint64_t)v8);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with take of LocalePreferences?( (uint64_t)&v64,  (uint64_t)&v77,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
      uint64_t v19 = v78;
      if (!v78) {
        goto LABEL_52;
      }
      uint64_t v20 = v77;
      _OWORD v75[2] = v81;
      _OWORD v75[3] = v82;
      uint64_t v76 = v83;
      v75[0] = v79;
      v75[1] = v80;
      if (*(void *)(a2 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v19);
        if ((v22 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(a2 + 56) + 72 * v21, (uint64_t)&v70);
        }

        else
        {
          uint64_t v74 = 0LL;
          __int128 v72 = 0u;
          __int128 v73 = 0u;
          __int128 v70 = 0u;
          __int128 v71 = 0u;
        }

        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v74 = 0LL;
        __int128 v72 = 0u;
        __int128 v73 = 0u;
        __int128 v70 = 0u;
        __int128 v71 = 0u;
      }

      swift_bridgeObjectRelease();
      outlined init with copy of AttributedString._AttributeValue((uint64_t)v75, (uint64_t)v69);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v70,  (uint64_t)&v64,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v69,  v49,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (v65[1]) {
        break;
      }
      outlined destroy of Any?( (uint64_t)v69,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v70,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v75);
      if (v68) {
        goto LABEL_51;
      }
      uint64_t result = outlined destroy of Any?( (uint64_t)&v64,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (v7) {
        goto LABEL_9;
      }
LABEL_11:
      int64_t v16 = v48 + 1;
      if (__OFADD__(v48, 1LL))
      {
        __break(1u);
        goto LABEL_54;
      }

      if (v16 < v45)
      {
        unint64_t v17 = *(void *)(v40 + 8 * v16);
        if (v17) {
          goto LABEL_14;
        }
        int64_t v18 = v48 + 2;
        ++v48;
        if (v16 + 1 < v45)
        {
          unint64_t v17 = *(void *)(v40 + 8 * v18);
          if (v17) {
            goto LABEL_17;
          }
          int64_t v48 = v16 + 1;
          if (v16 + 2 < v45)
          {
            unint64_t v17 = *(void *)(v40 + 8 * (v16 + 2));
            if (v17)
            {
              v16 += 2LL;
              goto LABEL_14;
            }

            int64_t v18 = v16 + 3;
            int64_t v48 = v16 + 2;
            if (v16 + 3 < v45)
            {
              unint64_t v17 = *(void *)(v40 + 8 * v18);
              if (v17)
              {
LABEL_17:
                int64_t v16 = v18;
LABEL_14:
                unint64_t v7 = (v17 - 1) & v17;
                unint64_t v12 = __clz(__rbit64(v17)) + (v16 << 6);
                int64_t v48 = v16;
                goto LABEL_10;
              }

              while (1)
              {
                int64_t v16 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  break;
                }
                if (v16 >= v45)
                {
                  int64_t v48 = v36;
                  goto LABEL_28;
                }

                unint64_t v17 = *(void *)(v40 + 8 * v16);
                ++v18;
                if (v17) {
                  goto LABEL_14;
                }
              }

Swift::String __swiftcall Date.ISO8601FormatStyle.format(_:)(Foundation::Date a1)
{
  v28[36] = *MEMORY[0x1895F89C0];
  uint64_t v3 = *v1;
  __int128 v4 = v2[1];
  __int128 v26 = *v2;
  *(_OWORD *)uint64_t v27 = v4;
  *(void *)&v27[16] = *((void *)v2 + 4);
  int v5 = DWORD2(v26);
  if (*((void *)&v26 + 1))
  {
    if ((BYTE8(v26) & 5) != 1LL)
    {
      uint64_t v6 = 0LL;
      goto LABEL_6;
    }
  }

  else
  {
    int v5 = 59;
  }

  uint64_t v6 = 3LL;
LABEL_6:
  unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (((unint64_t)(v5 & 2) >> 1) & 1));
  if ((v5 & 4) == 0)
  {
    if ((v5 & 2) != 0) {
      uint64_t v8 = v7 | 8;
    }
    else {
      uint64_t v8 = v7 | 0x40000;
    }
    if ((v5 & 8) != 0) {
      unint64_t v7 = v8;
    }
    if ((v5 & 0x10) == 0) {
      goto LABEL_21;
    }
LABEL_17:
    uint64_t v10 = 112LL;
    if ((~v7 & 0x70) == 0) {
      uint64_t v10 = 0LL;
    }
    v7 |= v10;
    if ((BYTE1(v26) & ((v7 & 0x2000) == 0)) != 0) {
      v7 |= 0x2000uLL;
    }
    goto LABEL_21;
  }

  uint64_t v9 = 6144LL;
  if ((~v7 & 0x1800) == 0) {
    uint64_t v9 = 0LL;
  }
  v7 |= (16 * v5) & 0x80LL | v9;
  if ((v5 & 0x10) != 0) {
    goto LABEL_17;
  }
LABEL_21:
  v23[0] = v7;
  uint64_t v24 = v3;
  __int128 v25 = *(_OWORD *)(*(void *)v27 + 104LL);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(v23, (double *)&v24, (uint64_t *)&v25, v28);
  uint64_t v11 = swift_unknownObjectRelease();
  if ((v5 & 0x20) != 0)
  {
    __int128 v25 = *(_OWORD *)&v27[8];
    uint64_t v13 = *(void *)&v27[16];
    uint64_t ObjectType = swift_getObjectType();
    v23[0] = v3;
    uint64_t v15 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v13 + 40);
    outlined retain of Locale((uint64_t)&v25);
    uint64_t v12 = v15(v23, ObjectType, v13);
    uint64_t v11 = outlined release of Locale((uint64_t)&v25);
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  LOBYTE(v24) = 0;
  MEMORY[0x1895F8858](v11);
  closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( (uint64_t)&v22,  129LL,  (uint64_t)&v26,  (uint64_t)v28,  &v24,  v12,  v16,  v23);
  uint64_t v17 = v23[0];
  uint64_t v18 = v23[1];
  outlined release of DateComponents((uint64_t)v28);
  uint64_t v19 = v17;
  uint64_t v20 = (void *)v18;
  result._object = v20;
  result.___darwin_time_t countAndFlagsBits = v19;
  return result;
}

uint64_t specialized Substring.withUTF8<A>(_:)@<X0>( void *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = a1[3];
  if ((v10 & 0x1000000000000000LL) != 0)
  {
    Substring._slowMakeContiguousUTF8()();
    uint64_t v10 = a1[3];
  }

  unint64_t v12 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v13 = *a1 >> 16;
  unint64_t v14 = v12 >> 16;
  if ((v10 & 0x2000000000000000LL) != 0)
  {
    v18[0] = v11;
    v18[1] = v10 & 0xFFFFFFFFFFFFFFLL;
    char v16 = (char *)v18 + v13;
  }

  else
  {
    if ((v11 & 0x1000000000000000LL) != 0)
    {
      uint64_t v15 = (v10 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }

    else
    {
      uint64_t v15 = _StringObject.sharedUTF8.getter();
      if (!v15)
      {
        char v16 = 0LL;
        goto LABEL_8;
      }
    }

    char v16 = (char *)(v15 + v13);
  }

uint64_t specialized closure #1 in numericStringRepresentationForBinaryInteger<A>(words:isSigned:)( void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v71 = *MEMORY[0x1895F89C0];
  if (!a1 || !a2) {
    goto LABEL_84;
  }
  if (a2 < 0)
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }

  uint64_t v5 = v4;
  uint64_t v6 = a1;
  *a1 = a3;
  if ((a4 & 1) != 0 && (*a1 & 0x8000000000000000LL) != 0) {
    goto LABEL_40;
  }
  for (unsigned int i = 0; ; unsigned int i = 1)
  {
    double v8 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(64LL));
    if ((v9 & 1) != 0) {
      goto LABEL_86;
    }
    double v10 = v8 * 0.301029996;
    if ((~COERCE__INT64(v8 * 0.301029996) & 0x7FF0000000000000LL) == 0) {
      goto LABEL_72;
    }
    if (v10 <= -9.22337204e18) {
      goto LABEL_73;
    }
    if (v10 >= 9.22337204e18) {
      goto LABEL_74;
    }
    uint64_t v11 = (uint64_t)v10;
    uint64_t v12 = (uint64_t)v10 + 1;
    int64_t v13 = v12 + i;
    if (__OFADD__(v12, i)) {
      goto LABEL_76;
    }
    if (v13 < 0) {
      goto LABEL_79;
    }
    uint64_t v67 = v5;
    uint64_t v68 = v6;
    unsigned int v65 = i;
    uint64_t v66 = v12 + i;
    if (v13 < 1025)
    {
      MEMORY[0x1895F8858](*(void *)&v8);
      char v16 = (char *)&v62 - v17;
      if (!v13)
      {
        uint64_t v63 = v15;
        goto LABEL_42;
      }

      if (v13 >= 1)
      {
LABEL_19:
        uint64_t v63 = v15;
        memset(v16, 48, v13);
LABEL_42:
        __int128 v37 = v6 - 1;
        __int128 v64 = v6 - 2;
        uint64_t v38 = v11 + i + 20;
        uint64_t v39 = 1LL;
        int64_t v40 = v13;
        do
        {
          int64_t v69 = v40;
          uint64_t v70 = v38;
          uint64_t v41 = v39;
          do
          {
            if (v39 < v41)
            {
              __break(1u);
LABEL_62:
              __break(1u);
              goto LABEL_63;
            }

            uint64_t v42 = v41 - 1;
            uint64_t v43 = v41;
            uint64_t v44 = v37[v41];
            uint64_t v45 = __udivti3();
            unint64_t v46 = v44 - 0x8AC7230489E80000LL * v45;
            v37[v43] = v45;
            uint64_t v41 = v42;
          }

          while (v42);
          if (v68[v39 - 1])
          {
            uint64_t v47 = v39;
            uint64_t v49 = v69;
            uint64_t v48 = v70;
          }

          else
          {
            uint64_t v49 = v69;
            uint64_t v48 = v70;
            if (v39 == 1)
            {
LABEL_52:
              uint64_t v47 = 0LL;
            }

            else
            {
              uint64_t v50 = v39;
              while (!v64[v50])
              {
                if (--v50 == 1) {
                  goto LABEL_52;
                }
              }

              uint64_t v47 = v50 - 1;
            }
          }

          uint64_t v51 = v48;
          uint64_t v41 = v49;
          if (v39 < v47) {
            goto LABEL_77;
          }
          do
          {
            if (v51 - 19 < 1) {
              goto LABEL_62;
            }
            --v41;
            v16[v51-- - 20] = (v46 % 0xA) | 0x30;
            BOOL v34 = v46 > 9;
            v46 /= 0xAuLL;
          }

          while (v34);
          int64_t v40 = v49 - 19;
          uint64_t v38 = v48 - 19;
          uint64_t v39 = v47;
        }

        while (v47);
        if (v65)
        {
          uint64_t v52 = v66;
          if (v41)
          {
            uint64_t v53 = &v16[v41--];
            *(v53 - 1) = 45;
            goto LABEL_64;
          }

void Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)( char *a1@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  char v17 = *a1;
  char v8 = *a2;
  char v9 = *a3;
  char v10 = *a4;
  uint64_t v11 = *a6;
  uint64_t v12 = a6[1];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  unint64_t v13 = static TimeZoneCache.cache + 16;
  unint64_t v14 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v14);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v13, 0LL, &v23);
  os_unfair_lock_unlock(v14);
  swift_release_n();
  if ((void)v23)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)&__int128 v23 = v11;
    *((void *)&v23 + 1) = v12;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    type metadata accessor for _LocaleUnlocalized();
    swift_retain();
    uint64_t inited = swift_initStaticObject();
    swift_release();
    *(void *)&__int128 v21 = inited;
    *((void *)&v21 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
    uint64_t v19 = 0LL;
    char v20 = 1;
    type metadata accessor for _CalendarGregorian();
    swift_allocObject();
    _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( (uint64_t)v22,  (uint64_t *)&v23,  &v21,  2LL,  0,  4LL,  0,  (uint64_t)&v19);
    *(_BYTE *)a7 = v9;
    *(_BYTE *)(a7 + 1) = a5 & 1;
    *(_BYTE *)(a7 + 2) = v10;
    *(_BYTE *)(a7 + 3) = v17;
    *(_BYTE *)(a7 + 4) = v8;
    *(void *)(a7 + 8) = 0LL;
    *(void *)(a7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v16;
    *(void *)(a7 + 24) = v11;
    *(void *)(a7 + 32) = v12;
  }

  else
  {
    __break(1u);
  }

uint64_t Date.ISO8601Format(_:)()
{
  return Date.ISO8601FormatStyle.format(_:)(*(Foundation::Date *)&v0->_time)._countAndFlagsBits;
}

uint64_t Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)@<X0>( Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:);
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(a1, v2, a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator@<X0>( Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t Date.ISO8601FormatStyle.DateSeparator.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Date.ISO8601FormatStyle.DateSeparator.init(rawValue:);
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(a1, v2, a2);
}

uint64_t Date.ISO8601FormatStyle.DateSeparator.rawValue.getter()
{
  if (*v0) {
    return 0LL;
  }
  else {
    return 45LL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.ISO8601FormatStyle.DateSeparator( char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.DateSeparator@<X0>( Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Date.ISO8601FormatStyle.DateSeparator.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.ISO8601FormatStyle.DateSeparator( uint64_t *a1@<X8>)
{
  uint64_t v2 = 45LL;
  if (*v1) {
    uint64_t v2 = 0LL;
  }
  unint64_t v3 = 0xE100000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE000000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t Date.ISO8601FormatStyle.TimeSeparator.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Date.ISO8601FormatStyle.TimeSeparator.init(rawValue:);
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(a1, v2, a2);
}

uint64_t Date.ISO8601FormatStyle.TimeSeparator.rawValue.getter()
{
  if (*v0) {
    return 0LL;
  }
  else {
    return 58LL;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.TimeSeparator@<X0>( Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Date.ISO8601FormatStyle.TimeSeparator.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.ISO8601FormatStyle.TimeSeparator( uint64_t *a1@<X8>)
{
  uint64_t v2 = 58LL;
  if (*v1) {
    uint64_t v2 = 0LL;
  }
  unint64_t v3 = 0xE100000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE000000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.TimeSeparator()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle.TimeSeparator()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t Date.ISO8601FormatStyle.DateTimeSeparator.init(rawValue:)@<X0>( Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Date.ISO8601FormatStyle.DateTimeSeparator.init(rawValue:);
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(a1, v2, a2);
}

uint64_t Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)@<X0>( Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  object = string._object;
  v4.___darwin_time_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v7 == 1) {
    char v9 = 1;
  }
  else {
    char v9 = 2;
  }
  if (!v7) {
    char v9 = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t Date.ISO8601FormatStyle.DateTimeSeparator.rawValue.getter()
{
  if (*v0) {
    return 2577447LL;
  }
  else {
    return 32LL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator( char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator@<X0>( Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Date.ISO8601FormatStyle.DateTimeSeparator.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.ISO8601FormatStyle.DateTimeSeparator( uint64_t *a1@<X8>)
{
  uint64_t v2 = 32LL;
  if (*v1) {
    uint64_t v2 = 2577447LL;
  }
  unint64_t v3 = 0xE100000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE300000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t Date.ISO8601FormatStyle.Fields.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t Date.ISO8601FormatStyle.Fields.rawValue.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*Date.ISO8601FormatStyle.Fields.rawValue.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ISO8601FormatStyle.Fields.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static Date.ISO8601FormatStyle.Fields.year.getter(void *a1@<X8>)
{
  *a1 = 1LL;
}

void static Date.ISO8601FormatStyle.Fields.month.getter(void *a1@<X8>)
{
  *a1 = 2LL;
}

void static Date.ISO8601FormatStyle.Fields.weekOfYear.getter(void *a1@<X8>)
{
  *a1 = 4LL;
}

void static Date.ISO8601FormatStyle.Fields.day.getter(void *a1@<X8>)
{
  *a1 = 8LL;
}

void static Date.ISO8601FormatStyle.Fields.time.getter(void *a1@<X8>)
{
  *a1 = 16LL;
}

void static Date.ISO8601FormatStyle.Fields.timeZone.getter(void *a1@<X8>)
{
  *a1 = 32LL;
}

uint64_t Date.ISO8601FormatStyle.Fields.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Date.ISO8601FormatStyle.Fields.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.Fields@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void Date.ISO8601FormatStyle.timeSeparator.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t Date.ISO8601FormatStyle.includingFractionalSeconds.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

void Date.ISO8601FormatStyle.timeZoneSeparator.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 2);
}

void Date.ISO8601FormatStyle.dateSeparator.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 3);
}

void Date.ISO8601FormatStyle.dateTimeSeparator.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 4);
}

void Date.ISO8601FormatStyle.formatFields.getter(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2) {
    *a1 = v2;
  }
  else {
    *a1 = 59LL;
  }
}

uint64_t Date.ISO8601FormatStyle.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1833FB4D8 + 4 * byte_183828C40[a1]))( 0xD000000000000011LL,  0x80000001839C8690LL);
}

uint64_t sub_1833FB4D8()
{
  return 0x656E6F5A656D6974LL;
}

uint64_t sub_1833FB4F0()
{
  return 0x73646C656966LL;
}

  ;
}

uint64_t sub_1833FB528()
{
  return 0x6170655365746164LL;
}

uint64_t Date.ISO8601FormatStyle.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1833FB590 + 4 * byte_183828C47[a1]))( 0xD000000000000011LL,  0x80000001839C8690LL);
}

uint64_t sub_1833FB590()
{
  return 0x656E6F5A656D6974LL;
}

uint64_t sub_1833FB5A8()
{
  return 0x73646C656966LL;
}

  ;
}

uint64_t sub_1833FB5E0()
{
  return 0x6170655365746164LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.ISO8601FormatStyle.CodingKeys( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle.CodingKeys()
{
}

void protocol witness for Hashable.hash(into:) in conformance Date.ISO8601FormatStyle.CodingKeys(uint64_t a1)
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle.CodingKeys( uint64_t a1)
{
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.CodingKeys@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Date.ISO8601FormatStyle.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.ISO8601FormatStyle.CodingKeys@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = Date.ISO8601FormatStyle.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.ISO8601FormatStyle.CodingKeys()
{
  return Date.ISO8601FormatStyle.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.ISO8601FormatStyle.CodingKeys@<X0>( Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Date.ISO8601FormatStyle.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ISO8601FormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ISO8601FormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

void Date.ISO8601FormatStyle.init(from:)(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ISO8601FormatStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  Swift::Int v7 = (char *)&inited - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  char v8 = &inited;
  unint64_t v9 = static TimeZoneCache.cache + 16;
  char v10 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v9, 0LL, &v26);
  if (!v2)
  {
    os_unfair_lock_unlock(v10);
    swift_release_n();
    unint64_t v11 = v26;
    if ((void)v26)
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys();
      dispatch thunk of Decoder.container<A>(keyedBy:)();
      LOBYTE(v25) = 0;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      char v31 = v26;
      LOBYTE(v25) = 1;
      lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      swift_unknownObjectRelease();
      char v8 = (uint64_t *)*((void *)&v26 + 1);
      unint64_t v11 = v26;
      LOBYTE(v25) = 2;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      char v10 = (os_unfair_lock_s *)v26;
      LOBYTE(v25) = 3;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      char v29 = v26;
      LOBYTE(v26) = 4;
      char v32 = KeyedDecodingContainer.decode(_:forKey:)() & 1;
      LOBYTE(v25) = 5;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      char v30 = v26;
      LOBYTE(v25) = 6;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      char v27 = v26;
      char v28 = 0;
      unsigned __int128 v26 = __PAIR128__((unint64_t)v8, v11);
      uint64_t v12 = one-time initialization token for cache;
      swift_unknownObjectRetain();
      if (v12 == -1)
      {
LABEL_6:
        type metadata accessor for _LocaleUnlocalized();
        swift_retain();
        uint64_t inited = swift_initStaticObject();
        swift_release();
        unint64_t v13 = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
        *(void *)&__int128 v25 = inited;
        *((void *)&v25 + 1) = v13;
        uint64_t v23 = 0LL;
        char v24 = 1;
        type metadata accessor for _CalendarGregorian();
        swift_allocObject();
        _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( (uint64_t)&v28,  (uint64_t *)&v26,  &v25,  2LL,  0,  4LL,  0,  (uint64_t)&v23);
        uint64_t v15 = v14;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        char v16 = v32;
        char v17 = v31;
        char v18 = v30;
        char v19 = v29;
        char v20 = v22;
        *uint64_t v22 = v27;
        v20[1] = v16;
        v20[2] = v17;
        void v20[3] = v18;
        v20[4] = v19;
        *((void *)v20 + 1) = v10;
        *((void *)v20 + 2) = v15;
        *((void *)v20 + 3) = v11;
        *((void *)v20 + 4) = v8;
        swift_retain();
        swift_unknownObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
        swift_unknownObjectRelease();
        swift_release();
        return;
      }
    }

    else
    {
      __break(1u);
    }

    swift_once();
    goto LABEL_6;
  }

  os_unfair_lock_unlock(v10);
  __break(1u);
}

uint64_t Date.ISO8601FormatStyle.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ISO8601FormatStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  Swift::Int v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  HIDWORD(v14) = *v1;
  int v20 = v1[1];
  unsigned __int8 v8 = v1[2];
  int v9 = v1[3];
  int v17 = v1[4];
  int v18 = v9;
  uint64_t v15 = *((void *)v1 + 1);
  __int128 v16 = *(_OWORD *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19) = v8;
  char v21 = 0;
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = v15;
    char v11 = v17;
    char v12 = v18;
    __int128 v19 = v16;
    char v21 = 1;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&__int128 v19 = v10;
    char v21 = 2;
    lazy protocol witness table accessor for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v19) = v11;
    char v21 = 3;
    lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v19) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v19) = v12;
    char v21 = 5;
    lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v19) = BYTE4(v14);
    char v21 = 6;
    lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Date.ISO8601FormatStyle.hash(into:)(uint64_t a1)
{
  Swift::UInt8 v3 = *(_BYTE *)(v1 + 1);
  Swift::UInt v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 32);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t ObjectType = swift_getObjectType();
  Swift::Int v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 112);
  swift_unknownObjectRetain();
  v7(a1, ObjectType, v5);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t Date.ISO8601FormatStyle.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

uint64_t key path setter for Date.ISO8601FormatStyle.timeZone : Date.ISO8601FormatStyle( __int128 *a1, uint64_t a2)
{
  __int128 v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)(a2 + 24) = v4;
  return Date.ISO8601FormatStyle.timeZone.didset();
}

uint64_t Date.ISO8601FormatStyle.timeZone.setter(_OWORD *a1)
{
  *(_OWORD *)(v1 + 24) = *a1;
  return Date.ISO8601FormatStyle.timeZone.didset();
}

uint64_t Date.ISO8601FormatStyle.timeZone.didset()
{
  uint64_t v1 = v0;
  *(_OWORD *)uint64_t v10 = *(_OWORD *)(v0 + 24);
  uint64_t v2 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  swift_release();
  *(void *)&__int128 v9 = inited;
  *((void *)&v9 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  uint64_t v7 = 0LL;
  char v8 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( (uint64_t)&v11,  v10,  &v9,  2LL,  0,  4LL,  0,  (uint64_t)&v7);
  uint64_t v5 = v4;
  uint64_t result = swift_release();
  *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  return result;
}

uint64_t (*Date.ISO8601FormatStyle.timeZone.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return Date.ISO8601FormatStyle.timeZone.modify;
}

uint64_t Date.ISO8601FormatStyle.timeZone.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return Date.ISO8601FormatStyle.timeZone.didset();
  }
  return result;
}

void Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeZone:)( char *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v5 = *a1;
  char v6 = *a2;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  unint64_t v9 = static TimeZoneCache.cache + 16;
  uint64_t v10 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v9, 0LL, &v17);
  os_unfair_lock_unlock(v10);
  swift_release_n();
  if ((void)v17)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)&__int128 v17 = v7;
    *((void *)&v17 + 1) = v8;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    type metadata accessor for _LocaleUnlocalized();
    swift_retain();
    uint64_t inited = swift_initStaticObject();
    swift_release();
    *(void *)&__int128 v15 = inited;
    *((void *)&v15 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
    uint64_t v13 = 0LL;
    char v14 = 1;
    type metadata accessor for _CalendarGregorian();
    swift_allocObject();
    _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( (uint64_t)v16,  (uint64_t *)&v17,  &v15,  2LL,  0,  4LL,  0,  (uint64_t)&v13);
    *(_WORD *)a4 = 0;
    *(_BYTE *)(a4 + 2) = 1;
    *(_BYTE *)(a4 + 3) = v5;
    *(_BYTE *)(a4 + 4) = v6;
    *(void *)(a4 + 8) = 0LL;
    *(void *)(a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v12;
    *(void *)(a4 + 24) = v7;
    *(void *)(a4 + 32) = v8;
  }

  else
  {
    __break(1u);
  }

uint64_t Date.ISO8601FormatStyle.year()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 1);
  char v3 = *(_BYTE *)(v1 + 2);
  char v4 = *(_BYTE *)(v1 + 3);
  char v5 = *(_BYTE *)(v1 + 4);
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_BYTE *)(a1 + 3) = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  if ((v7 & 1) == 0) {
    *(void *)(a1 + 8) = v7 | 1;
  }
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.weekOfYear()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 1);
  char v3 = *(_BYTE *)(v1 + 2);
  char v4 = *(_BYTE *)(v1 + 3);
  char v5 = *(_BYTE *)(v1 + 4);
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_BYTE *)(a1 + 3) = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  if ((v7 & 4) == 0) {
    *(void *)(a1 + 8) = v7 | 4;
  }
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.month()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 1);
  char v3 = *(_BYTE *)(v1 + 2);
  char v4 = *(_BYTE *)(v1 + 3);
  char v5 = *(_BYTE *)(v1 + 4);
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_BYTE *)(a1 + 3) = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  if ((v7 & 2) == 0) {
    *(void *)(a1 + 8) = v7 | 2;
  }
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.day()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 1);
  char v3 = *(_BYTE *)(v1 + 2);
  char v4 = *(_BYTE *)(v1 + 3);
  char v5 = *(_BYTE *)(v1 + 4);
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_BYTE *)(a1 + 3) = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  if ((v7 & 8) == 0) {
    *(void *)(a1 + 8) = v7 | 8;
  }
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.time(includingFractionalSeconds:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  char v3 = *(_BYTE *)(v2 + 2);
  char v4 = *(_BYTE *)(v2 + 3);
  char v5 = *(_BYTE *)(v2 + 4);
  uint64_t v7 = *(void *)(v2 + 8);
  uint64_t v6 = *(void *)(v2 + 16);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_BYTE *)(a2 + 2) = v3;
  *(_BYTE *)(a2 + 3) = v4;
  *(_BYTE *)(a2 + 4) = v5;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  if ((v7 & 0x10) == 0) {
    *(void *)(a2 + 8) = v7 | 0x10;
  }
  *(_BYTE *)(a2 + 1) = a1 & 1;
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.timeZone(separator:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(_BYTE *)(v2 + 1);
  char v5 = *(_BYTE *)(v2 + 3);
  char v6 = *(_BYTE *)(v2 + 4);
  uint64_t v8 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(v2 + 16);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_BYTE *)(a2 + 1) = v4;
  *(_BYTE *)(a2 + 3) = v5;
  *(_BYTE *)(a2 + 4) = v6;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  if ((v8 & 0x20) == 0) {
    *(void *)(a2 + 8) = v8 | 0x20;
  }
  *(_BYTE *)(a2 + 2) = v3;
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.dateSeparator(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(_BYTE *)(v2 + 1);
  char v5 = *(_BYTE *)(v2 + 2);
  char v6 = *(_BYTE *)(v2 + 4);
  uint64_t v8 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(v2 + 16);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_BYTE *)(a2 + 1) = v4;
  *(_BYTE *)(a2 + 2) = v5;
  *(_BYTE *)(a2 + 3) = v3;
  *(_BYTE *)(a2 + 4) = v6;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.dateTimeSeparator(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(_BYTE *)(v2 + 1);
  char v5 = *(_BYTE *)(v2 + 2);
  char v6 = *(_BYTE *)(v2 + 3);
  uint64_t v8 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(v2 + 16);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_BYTE *)(a2 + 1) = v4;
  *(_BYTE *)(a2 + 2) = v5;
  *(_BYTE *)(a2 + 3) = v6;
  *(_BYTE *)(a2 + 4) = v3;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.timeSeparator(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(_BYTE *)(v2 + 1);
  char v5 = *(_BYTE *)(v2 + 2);
  char v6 = *(_BYTE *)(v2 + 3);
  char v7 = *(_BYTE *)(v2 + 4);
  uint64_t v9 = *(void *)(v2 + 8);
  uint64_t v8 = *(void *)(v2 + 16);
  *(_BYTE *)a2 = v3;
  *(_BYTE *)(a2 + 1) = v4;
  *(_BYTE *)(a2 + 2) = v5;
  *(_BYTE *)(a2 + 3) = v6;
  *(_BYTE *)(a2 + 4) = v7;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.timeZoneSeparator(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(_BYTE *)(v2 + 1);
  char v5 = *(_BYTE *)(v2 + 3);
  char v6 = *(_BYTE *)(v2 + 4);
  uint64_t v8 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(v2 + 16);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_BYTE *)(a2 + 1) = v4;
  *(_BYTE *)(a2 + 2) = v3;
  *(_BYTE *)(a2 + 3) = v5;
  *(_BYTE *)(a2 + 4) = v6;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v102 = a4;
  if (!result) {
    goto LABEL_141;
  }
  uint64_t v10 = (_BYTE *)a3;
  uint64_t v12 = (_BYTE *)result;
  uint64_t v69 = result;
  uint64_t v70 = a2;
  uint64_t v71 = 0LL;
  uint64_t v14 = *(void *)(a3 + 8);
  if (!v14) {
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)(a3 + 8);
  if ((v14 & 1) == 0) {
    goto LABEL_20;
  }
  if ((v14 & 4) != 0
    && (outlined init with take of Int?(v102 + 272, (uint64_t)v81),
        outlined init with take of Int?((uint64_t)v81, (uint64_t)&v82),
        (v83 & 1) == 0))
  {
    unint64_t v19 = v82;
  }

  else
  {
LABEL_8:
    uint64_t v16 = a6;
    char v17 = a7;
    uint64_t v18 = v102;
    outlined init with take of Int?(v102 + 48, (uint64_t)v80);
    uint64_t result = outlined init with take of Int?((uint64_t)v80, (uint64_t)&v84);
    if ((v85 & 1) != 0)
    {
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }

    unint64_t v19 = v84;
    outlined init with take of Int?(v18 + 32, (uint64_t)v79);
    uint64_t result = outlined init with take of Int?((uint64_t)v79, (uint64_t)&v86);
    if ((v87 & 1) == 0)
    {
      a7 = v17;
      a6 = v16;
      if (!v86)
      {
        BOOL v20 = __OFSUB__(1LL, v19);
        unint64_t v19 = 1 - v19;
        if (v20) {
          goto LABEL_129;
        }
      }

      if ((v19 & 0x8000000000000000LL) == 0) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }

    a7 = v17;
    a6 = v16;
    if ((v19 & 0x8000000000000000LL) != 0)
    {
LABEL_16:
      if (a2 < 1)
      {
LABEL_133:
        __break(1u);
        goto LABEL_134;
      }

      *uint64_t v12 = 45;
      uint64_t v71 = 1LL;
      BOOL v20 = __OFSUB__(0LL, v19);
      unint64_t v19 = -(uint64_t)v19;
      if (v20)
      {
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }
    }
  }

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.CodingKeys,  &type metadata for Date.ISO8601FormatStyle.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.CodingKeys,  &type metadata for Date.ISO8601FormatStyle.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.CodingKeys,  &type metadata for Date.ISO8601FormatStyle.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.CodingKeys,  &type metadata for Date.ISO8601FormatStyle.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.TimeZoneSeparator,  &type metadata for Date.ISO8601FormatStyle.TimeZoneSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.TimeZoneSeparator,  &type metadata for Date.ISO8601FormatStyle.TimeZoneSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.TimeZoneSeparator,  &type metadata for Date.ISO8601FormatStyle.TimeZoneSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.TimeZoneSeparator,  &type metadata for Date.ISO8601FormatStyle.TimeZoneSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.Fields,  &type metadata for Date.ISO8601FormatStyle.Fields);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.Fields,  &type metadata for Date.ISO8601FormatStyle.Fields);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.Fields,  &type metadata for Date.ISO8601FormatStyle.Fields);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.Fields,  &type metadata for Date.ISO8601FormatStyle.Fields);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.Fields,  &type metadata for Date.ISO8601FormatStyle.Fields);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.Fields,  &type metadata for Date.ISO8601FormatStyle.Fields);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.DateTimeSeparator,  &type metadata for Date.ISO8601FormatStyle.DateTimeSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.DateTimeSeparator,  &type metadata for Date.ISO8601FormatStyle.DateTimeSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.DateTimeSeparator,  &type metadata for Date.ISO8601FormatStyle.DateTimeSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.DateTimeSeparator,  &type metadata for Date.ISO8601FormatStyle.DateTimeSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.DateSeparator,  &type metadata for Date.ISO8601FormatStyle.DateSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.DateSeparator,  &type metadata for Date.ISO8601FormatStyle.DateSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.DateSeparator,  &type metadata for Date.ISO8601FormatStyle.DateSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.DateSeparator,  &type metadata for Date.ISO8601FormatStyle.DateSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.TimeSeparator,  &type metadata for Date.ISO8601FormatStyle.TimeSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.TimeSeparator,  &type metadata for Date.ISO8601FormatStyle.TimeSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.TimeSeparator,  &type metadata for Date.ISO8601FormatStyle.TimeSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ISO8601FormatStyle.TimeSeparator,  &type metadata for Date.ISO8601FormatStyle.TimeSeparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator);
  }

  return result;
}

unint64_t append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( unint64_t result, uint64_t a2, void *a3, char a4)
{
  uint64_t v94 = *MEMORY[0x1895F89C0];
  if ((uint64_t)result <= 9)
  {
    if (!__OFSUB__(a2, 1LL))
    {
      if (a2 - 1 < 1) {
        goto LABEL_39;
      }
      uint64_t v5 = a3[2];
      uint64_t v6 = *a3;
      if (v5 <= a3[1]) {
        uint64_t v7 = a3[1];
      }
      else {
        uint64_t v7 = a3[2];
      }
      uint64_t v8 = v7 - v5;
      unint64_t v9 = v8 + 1;
      if (v9 >= 0x21)
      {
        uint64_t v26 = v9 & 0x1F;
        if ((v9 & 0x1F) == 0) {
          uint64_t v26 = 32LL;
        }
        unint64_t v10 = v9 - v26;
        uint64_t v11 = v5 + v10;
        int8x16_t v27 = vdupq_n_s8(a4);
        uint64_t v28 = (int8x16_t *)(v5 + v6 + 16);
        unint64_t v29 = v10;
        do
        {
          v28[-1] = v27;
          *uint64_t v28 = v27;
          v28 += 2;
          v29 -= 32LL;
        }

        while (v29);
      }

      else
      {
        unint64_t v10 = 0LL;
        uint64_t v11 = a3[2];
      }

      uint64_t v30 = v10 + v5 - v7;
      uint64_t v31 = ~v10 + a2;
      while (v30)
      {
        *(_BYTE *)(v6 + v11++) = a4;
        ++v30;
        if (!--v31)
        {
          a3[2] = v11;
LABEL_39:
          if ((uint64_t)result >= -128)
          {
            int v32 = a4 + (char)result;
            if (v32 == (char)(a4 + result))
            {
              uint64_t v33 = a3[2];
              if (v33 < a3[1])
              {
                *(_BYTE *)(*a3 + v33) = v32;
                uint64_t v34 = v33 + 1;
                goto LABEL_99;
              }

char *closure #1 in append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( char *__src, int64_t __n, void *a3)
{
  if (__src)
  {
    if (__n)
    {
      uint64_t v5 = a3[2];
      if (a3[1] - v5 < __n)
      {
        __break(1u);
LABEL_13:
        __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return __src;
      }

      uint64_t v6 = __src;
      uint64_t v7 = (char *)(*a3 + v5);
      if (&v7[__n] > v6 && v7 < &v6[__n]) {
        goto LABEL_13;
      }
      __src = (char *)memcpy(v7, v6, __n);
    }

    a3[2] += __n;
  }

  return __src;
}

Swift::Int Date.ISO8601FormatStyle.hashValue.getter()
{
  char v1 = *(_BYTE *)(v0 + 1);
  char v2 = *(_BYTE *)(v0 + 2);
  char v3 = *(_BYTE *)(v0 + 3);
  char v4 = *(_BYTE *)(v0 + 4);
  uint64_t v5 = *(void *)(v0 + 8);
  uint64_t v6 = *(void *)(v0 + 32);
  v8[72] = *(_BYTE *)v0;
  v8[73] = v1;
  v8[74] = v2;
  v8[75] = v3;
  v8[76] = v4;
  uint64_t v9 = v5;
  __int128 v10 = *(_OWORD *)(v0 + 16);
  uint64_t v11 = v6;
  Hasher.init(_seed:)();
  Date.ISO8601FormatStyle.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.ISO8601FormatStyle@<X0>( Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  Swift::String v4 = Date.ISO8601FormatStyle.format(_:)(a2);
  uint64_t result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle( void *a1@<X0>, _BYTE *a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle(void *a1)
{
  return Date.ISO8601FormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle()
{
  char v1 = *(_BYTE *)(v0 + 1);
  char v2 = *(_BYTE *)(v0 + 2);
  char v3 = *(_BYTE *)(v0 + 3);
  char v4 = *(_BYTE *)(v0 + 4);
  uint64_t v5 = *(void *)(v0 + 8);
  uint64_t v6 = *(void *)(v0 + 32);
  v8[72] = *(_BYTE *)v0;
  v8[73] = v1;
  v8[74] = v2;
  v8[75] = v3;
  v8[76] = v4;
  uint64_t v9 = v5;
  __int128 v10 = *(_OWORD *)(v0 + 16);
  uint64_t v11 = v6;
  Hasher.init(_seed:)();
  Date.ISO8601FormatStyle.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle()
{
  char v1 = *(_BYTE *)(v0 + 1);
  char v2 = *(_BYTE *)(v0 + 2);
  char v3 = *(_BYTE *)(v0 + 3);
  char v4 = *(_BYTE *)(v0 + 4);
  uint64_t v5 = *(void *)(v0 + 8);
  uint64_t v6 = *(void *)(v0 + 32);
  v8[72] = *(_BYTE *)v0;
  v8[73] = v1;
  v8[74] = v2;
  v8[75] = v3;
  v8[76] = v4;
  uint64_t v9 = v5;
  __int128 v10 = *(_OWORD *)(v0 + 16);
  uint64_t v11 = v6;
  Hasher.init(_seed:)();
  Date.ISO8601FormatStyle.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

void *Date.ISO8601FormatStyle.components(from:in:)@<X0>( uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v7 = v6;
  __src[36] = *MEMORY[0x1895F89C0];
  __int128 v12 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)&v337._nsError._domain = *(_OWORD *)v5;
  __int128 v338 = v12;
  uint64_t v339 = *(void *)(v5 + 32);
  char userInfo = (char)v337._nsError._userInfo;
  if (!v337._nsError._userInfo)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date.ISO8601FormatStyle.Fields>);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = specialized static Array._adoptStorage(_:count:)(v14, 5LL);
    *(_OWORD *)uint64_t v16 = xmmword_183720D90;
    *(_OWORD *)(v16 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183729E00;
    *(void *)(v16 + 32) = 32LL;
    unint64_t v17 = (void *)destructiveProjectEnumData for PredicateCodableError(v15, v16);
    uint64_t v18 = v17[4];
    uint64_t v19 = v17[5];
    if ((v19 & ~v18) == 0) {
      uint64_t v19 = 0LL;
    }
    uint64_t v20 = v19 | v18;
    uint64_t v21 = v17[6];
    if ((v21 & ~v20) == 0) {
      uint64_t v21 = 0LL;
    }
    uint64_t v22 = v21 | v20;
    if ((v17[7] & ~v22) != 0) {
      uint64_t v23 = v17[7];
    }
    else {
      uint64_t v23 = 0LL;
    }
    uint64_t v24 = v23 | v22;
    uint64_t v25 = v17[8];
    outlined retain of Date.ISO8601FormatStyle((uint64_t)&v337._nsError._domain);
    swift_bridgeObjectRelease();
    if ((v25 & ~v24) != 0) {
      char v26 = v25;
    }
    else {
      char v26 = 0;
    }
    char userInfo = v26 | v24;
    outlined release of Date.ISO8601FormatStyle((uint64_t)&v337._nsError._domain);
  }

  unint64_t code = (unint64_t)&a3[a4];
  v337._nsError._reserved = a3;
  v337._nsError._unint64_t code = (int64_t)&a3[a4];
  __dst[0] = 0uLL;
  __tp.__darwin_time_t tv_sec = 0LL;
  __tp.uint64_t tv_nsec = 0LL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  &__tp.tv_sec,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__src,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  if ((userInfo & 1) == 0)
  {
    __src[6] = 1970LL;
    LOBYTE(__src[7]) = 0;
    if ((userInfo & 2) == 0)
    {
      uint64_t v28 = a3;
      if ((userInfo & 4) == 0)
      {
        __src[8] = 1LL;
        LOBYTE(__src[9]) = 0;
        if ((userInfo & 8) == 0)
        {
          unint64_t v29 = a3;
          if ((userInfo & 0x10) == 0) {
            goto LABEL_128;
          }
          goto LABEL_150;
        }

        goto LABEL_99;
      }

      goto LABEL_75;
    }

    goto LABEL_56;
  }

  char v30 = BYTE3(v337._nsError._domain);
  if (BYTE3(v337._nsError._domain) == 1)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0)
    {
      uint64_t v32 = 10LL;
      goto LABEL_24;
    }
  }

  uint64_t v32 = 4LL;
LABEL_24:
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  reserved = v337._nsError._reserved;
  uint64_t v36 = a3;
  while (1)
  {
    uint64_t v28 = &a3[v33];
    if ((unint64_t)&a3[v33] >= code || (*v28 - 58) < 0xF6u)
    {
      v337._nsError._reserved = reserved;
      if (v33)
      {
LABEL_32:
        if (v34 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v41 = 0LL;
        }
        else {
          uint64_t v41 = v34;
        }
        BOOL v42 = v34 == 0x7FFFFFFFFFFFFFFFLL;
        if ((userInfo & 4) != 0)
        {
          __src[34] = v41;
          LOBYTE(__src[35]) = v42;
          if ((userInfo & 2) == 0)
          {
            if ((v30 & 1) != 0)
            {
              char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v43 & 1) == 0) {
                goto LABEL_75;
              }
            }

            else
            {
              swift_bridgeObjectRelease();
            }

            char v100 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, (uint64_t)v28++);
            v337._nsError._reserved = v28;
            if (v100 != 45) {
              goto LABEL_90;
            }
LABEL_75:
            if ((unint64_t)v28 < code)
            {
              v337._nsError._reserved = v28 + 1;
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, (uint64_t)v28) == 87)
              {
                char v101 = specialized == infix<A>(_:_:)(SBYTE3(v337._nsError._domain), 1);
                uint64_t v102 = 2LL;
                if ((v101 & 1) == 0) {
                  uint64_t v102 = 0LL;
                }
                uint64_t v103 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)( v102,  (v101 & 1) == 0,  0,  (unint64_t *)&v337._nsError._reserved,  0x30u,  0x39u,  a1,  a2);
                if (v6) {
                  goto LABEL_217;
                }
                uint64_t v104 = v103;
                LOBYTE(__dst[0]) = 11;
                _CalendarGregorian.maximumRange(of:)((uint64_t)__dst);
                if ((v107 & 1) != 0) {
                  goto LABEL_286;
                }
                if (!specialized Range.contains(_:)(v104, v105, v106)) {
                  goto LABEL_215;
                }
                DateComponents.weekOfYear.setter(v104, 0);
                if ((userInfo & 8) == 0) {
                  goto LABEL_127;
                }
LABEL_70:
                if ((BYTE3(v337._nsError._domain) & 1) != 0)
                {
                  char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v99 & 1) == 0)
                  {
LABEL_99:
                    if ((userInfo & 4) == 0)
                    {
                      char v162 = specialized == infix<A>(_:_:)(SBYTE3(v337._nsError._domain), 1);
                      char v163 = (v162 & 1) == 0;
                      char v164 = v163;
                      if ((userInfo & 2) == 0)
                      {
                        if ((v162 & 1) != 0) {
                          uint64_t v165 = 3LL;
                        }
                        else {
                          uint64_t v165 = 0LL;
                        }
                        uint64_t v166 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)( v165,  v163,  0,  (unint64_t *)&v337._nsError._reserved,  0x30u,  0x39u,  a1,  a2);
                        if (v7) {
                          goto LABEL_217;
                        }
                        uint64_t v167 = v166;
                        LOBYTE(__dst[0]) = 17;
                        _CalendarGregorian.maximumRange(of:)((uint64_t)__dst);
                        if ((v170 & 1) == 0)
                        {
                          if (specialized Range.contains(_:)(v167, v168, v169))
                          {
                            DateComponents.dayOfYear.setter(v167, 0);
                            goto LABEL_127;
                          }

LABEL_274:
                          __break(1u);
LABEL_275:
                          __break(1u);
                          goto LABEL_276;
                        }
                      }

                      else
                      {
                        if ((specialized BufferViewIterator.next()() & 0x1FF) != 0x20)
                        {
                          __dst[0] = *(_OWORD *)&v337._nsError._domain;
                          __dst[1] = v338;
                          *(void *)&__dst[2] = v339;
                          __tp.__darwin_time_t tv_sec = 0LL;
                          __tp.uint64_t tv_nsec = 0LL;
                          clock_gettime(_CLOCK_REALTIME, &__tp);
                          *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec
                                                  + -978307200.0
                                                  + (double)__tp.tv_nsec * 0.000000001;
                          Swift::String v278 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                          *(void *)&__dst[0] = 0LL;
                          *((void *)&__dst[0] + 1) = 0xE000000000000000LL;
                          _StringGuts.grow(_:)(88LL);
                          v279.___darwin_time_t countAndFlagsBits = 0x7020746F6E6E6143LL;
                          v279._object = (void *)0xED00002065737261LL;
                          String.append(_:)(v279);
                          v280.___darwin_time_t countAndFlagsBits = a1;
                          v280._object = a2;
                          String.append(_:)(v280);
                          v281._object = (void *)0x80000001839CAB20LL;
                          v281.___darwin_time_t countAndFlagsBits = 0xD000000000000046LL;
                          String.append(_:)(v281);
                          String.append(_:)(v278);
                          v282.___darwin_time_t countAndFlagsBits = 46LL;
                          v282._object = (void *)0xE100000000000000LL;
                          String.append(_:)(v282);
                          __int128 v283 = __dst[0];
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                          uint64_t v284 = swift_allocObject();
                          uint64_t v285 = specialized static Array._adoptStorage(_:count:)(v284, 1LL);
                          __int128 v287 = v286;
                          *__int128 v286 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
                          v287[1] = v288;
                          v287[5] = (id)MEMORY[0x189617FA8];
                          *((_OWORD *)v287 + 1) = v283;
                          uint64_t v289 = destructiveProjectEnumData for PredicateCodableError(v285, v288);
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                          v290 = (void *)static _DictionaryStorage.allocate(capacity:)();
                          outlined init with copy of (String, Any)(v289 + 32, (uint64_t)__dst);
                          __int128 v291 = __dst[0];
                          swift_retain();
                          unint64_t v292 = specialized __RawDictionaryStorage.find<A>(_:)(v291, *((uint64_t *)&v291 + 1));
                          if ((v293 & 1) == 0)
                          {
                            v290[(v292 >> 6) + 8] |= 1LL << v292;
                            *(_OWORD *)(v290[6] + 16 * v292) = v291;
                            outlined init with take of Any(&__dst[1], (_OWORD *)(v290[7] + 32 * v292));
                            uint64_t v294 = v290[2];
                            BOOL v40 = __OFADD__(v294, 1LL);
                            uint64_t v295 = v294 + 1;
                            if (!v40)
                            {
                              v290[2] = v295;
                              swift_release();
                              swift_bridgeObjectRelease();
                              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                              id v296 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
                              uint64_t v297 = String._bridgeToObjectiveCImpl()();
                              swift_bridgeObjectRelease();
                              id v7 = objc_msgSend( v296,  sel_initWithDomain_code_userInfo_,  v297,  2048,  _NativeDictionary.bridged()());
                              swift_unknownObjectRelease();
                              swift_unknownObjectRelease();
                              a3 = (char *)objc_msgSend(v7, sel_domain);
                              id v298 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                              v300 = v299;

                              id v301 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                              a2 = v302;
                              if (v298 != v301 || v300 != v302)
                              {
                                a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                if ((a1 & 1) == 0)
                                {
                                  __break(1u);
                                  goto LABEL_200;
                                }

                                goto LABEL_216;
                              }

                              goto LABEL_176;
                            }

LABEL_217:
                        memcpy(__dst, __src, 0x11AuLL);
                        return (void *)outlined release of DateComponents((uint64_t)__dst);
                      }

                      unint64_t v248 = code - (void)v29;
                      if (code > (unint64_t)v29 && (*v29 - 58) >= 0xF6u)
                      {
                        uint64_t v303 = (*v29 - 48);
                        v304 = v29 + 1;
                        if (v248 != 1 && (*v304 - 58) >= 0xF6u)
                        {
                          uint64_t v303 = 10LL * (*v29 - 48) + (*v304 - 48);
                          v304 = v29 + 2;
                          if (v248 != 2 && (*v304 - 58) >= 0xF6u)
                          {
                            uint64_t v303 = 10LL * v303 + (*v304 - 48);
                            v304 = v29 + 3;
                            if (v248 != 3 && (*v304 - 58) >= 0xF6u)
                            {
                              uint64_t v303 = 10LL * v303 + (*v304 - 48);
                              v304 = v29 + 4;
                              if (v248 != 4 && (*v304 - 58) >= 0xF6u)
                              {
                                uint64_t v303 = 10LL * v303 + (*v304 - 48);
                                v304 = v29 + 5;
                                if (v248 != 5 && (*v304 - 58) >= 0xF6u)
                                {
                                  uint64_t v303 = 10LL * v303 + (*v304 - 48);
                                  v304 = v29 + 6;
                                  if (v248 != 6 && (*v304 - 58) >= 0xF6u)
                                  {
                                    uint64_t v303 = 10 * v303 + (*v304 - 48);
                                    v304 = v29 + 7;
                                    if (v248 != 7 && (*v304 - 58) >= 0xF6u)
                                    {
                                      uint64_t v303 = 10 * v303 + (*v304 - 48);
                                      v304 = v29 + 8;
                                      if (v248 != 8 && (*v304 - 58) >= 0xF6u)
                                      {
                                        uint64_t v303 = 10 * v303 + (*v304 - 48);
                                        v304 = v29 + 9;
                                        if (v248 != 9)
                                        {
                                          char v305 = *v304;
                                          if ((*v304 - 58) >= 0xF6u)
                                          {
                                            v304 = v29 + 10;
                                            uint64_t v303 = 10 * v303 + (v305 - 48);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }

                        v337._nsError._reserved = v304;
                        DateComponents.hour.setter(v303, 0);
                        expectCharacter #1 (_:_:) in Date.ISO8601FormatStyle.components(from:in:)( 58LL,  (unsigned __int8 **)&v337._nsError._reserved,  a1,  a2);
                        if (v7) {
                          goto LABEL_217;
                        }
                        uint64_t v306 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)( 0LL,  1,  0,  (unint64_t *)&v337._nsError._reserved,  0x30u,  0x39u,  a1,  a2);
                        id v7 = 0LL;
                        DateComponents.minute.setter(v306, 0);
                        expectCharacter #1 (_:_:) in Date.ISO8601FormatStyle.components(from:in:)( 58LL,  (unsigned __int8 **)&v337._nsError._reserved,  a1,  a2);
                        uint64_t v244 = 0LL;
                        char v245 = 1;
                        goto LABEL_153;
                      }

                      v337._nsError._reserved = v29;
                      __dst[0] = *(_OWORD *)&v337._nsError._domain;
                      __dst[1] = v338;
                      *(void *)&__dst[2] = v339;
                      __tp.__darwin_time_t tv_sec = 0LL;
                      __tp.uint64_t tv_nsec = 0LL;
                      clock_gettime(_CLOCK_REALTIME, &__tp);
                      *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
                      Swift::String v249 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                      *(void *)&__dst[0] = 0LL;
                      *((void *)&__dst[0] + 1) = 0xE000000000000000LL;
                      _StringGuts.grow(_:)(88LL);
                      v250.___darwin_time_t countAndFlagsBits = 0x7020746F6E6E6143LL;
                      v250._object = (void *)0xED00002065737261LL;
                      String.append(_:)(v250);
                      v251.___darwin_time_t countAndFlagsBits = a1;
                      v251._object = a2;
                      String.append(_:)(v251);
                      v252._object = (void *)0x80000001839CAB20LL;
                      v252.___darwin_time_t countAndFlagsBits = 0xD000000000000046LL;
                      String.append(_:)(v252);
                      String.append(_:)(v249);
                      v253.___darwin_time_t countAndFlagsBits = 46LL;
                      v253._object = (void *)0xE100000000000000LL;
                      String.append(_:)(v253);
                      __int128 v254 = __dst[0];
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                      uint64_t v255 = swift_allocObject();
                      uint64_t v256 = specialized static Array._adoptStorage(_:count:)(v255, 1LL);
                      unint64_t v258 = v257;
                      *uint64_t v257 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
                      v258[1] = v259;
                      v258[5] = (id)MEMORY[0x189617FA8];
                      *((_OWORD *)v258 + 1) = v254;
                      uint64_t v260 = destructiveProjectEnumData for PredicateCodableError(v256, v259);
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                      int64_t v261 = (void *)static _DictionaryStorage.allocate(capacity:)();
                      outlined init with copy of (String, Any)(v260 + 32, (uint64_t)__dst);
                      __int128 v262 = __dst[0];
                      swift_retain();
                      unint64_t v263 = specialized __RawDictionaryStorage.find<A>(_:)(v262, *((uint64_t *)&v262 + 1));
                      if ((v264 & 1) == 0)
                      {
                        v261[(v263 >> 6) + 8] |= 1LL << v263;
                        *(_OWORD *)(v261[6] + 16 * v263) = v262;
                        outlined init with take of Any(&__dst[1], (_OWORD *)(v261[7] + 32 * v263));
                        uint64_t v265 = v261[2];
                        BOOL v40 = __OFADD__(v265, 1LL);
                        uint64_t v266 = v265 + 1;
                        if (!v40)
                        {
                          v261[2] = v266;
                          swift_release();
                          swift_bridgeObjectRelease();
                          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                          id v267 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
                          uint64_t v268 = String._bridgeToObjectiveCImpl()();
                          swift_bridgeObjectRelease();
                          id v7 = objc_msgSend( v267,  sel_initWithDomain_code_userInfo_,  v268,  2048,  _NativeDictionary.bridged()());
                          swift_unknownObjectRelease();
                          swift_unknownObjectRelease();
                          a3 = (char *)objc_msgSend(v7, sel_domain);
                          id v269 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                          int64_t v271 = v270;

                          id v272 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
                          a2 = v273;
                          if (v269 != v272 || v271 != v273)
                          {
                            a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if ((a1 & 1) == 0)
                            {
                              __break(1u);
                              goto LABEL_165;
                            }

                            goto LABEL_216;
                          }

                          goto LABEL_176;
                        }

                        goto LABEL_273;
                      }

        __int128 v188 = *(void *)(v227 + 16);
        swift_bridgeObjectRelease();
        __int128 v189 = *(void *)(v220 + 16);
        if (v189 >= v188)
        {
          if (v188 == v189)
          {
LABEL_219:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v229) {
              MEMORY[0x186E20E60](v229, -1LL, -1LL);
            }
            return;
          }

          uint64_t v190 = (unint64_t *)(v220 + 16 * v188 + 40);
          while (v188 < v189)
          {
            __int128 v192 = *(v190 - 1);
            unint64_t v193 = *v190;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            char v194 = String._appendingPathComponent(_:)(v192, v193, v57, v46);
            uint64_t v196 = v195;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            id v197 = MEMORY[0x186E20F44](v224);
            if (!v197) {
              goto LABEL_248;
            }
            uint64_t v198 = (void *)v197;
            swift_bridgeObjectRetain();
            a3 = _NativeDictionary.bridged()();
            id v199 = v194;
            unint64_t v200 = v196;
            uint64_t v6 = String._bridgeToObjectiveCImpl()();
            char v227 = 0LL;
            uint64_t v201 = objc_msgSend(v198, sel_setAttributes_ofItemAtPath_error_, a3, v6, &v227);

            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t v54 = v227;
            if ((v201 & 1) != 0)
            {
              __int128 v191 = (id)v227;
            }

            else if (v227)
            {
              id v202 = (id)v227;
              swift_willThrow();
            }

            else
            {
              if (one-time initialization token for _nilObjCError != -1) {
                swift_once();
              }
              swift_willThrow();
            }

            int8x16_t v57 = v199;
            ++v188;
            v190 += 2;
            Swift::String v46 = v200;
            if (v189 == v188) {
              goto LABEL_219;
            }
          }

          __break(1u);
LABEL_234:
          __break(1u);
LABEL_235:
          __break(1u);
LABEL_236:
          __break(1u);
LABEL_237:
          __break(1u);
        }

        __break(1u);
LABEL_239:
        __break(1u);
LABEL_240:
        uint64_t v6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v6 + 16) + 1LL,  1,  (void *)v6);
      }
    }

  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  __break(1u);
  return result;
}

LABEL_271:
                    __break(1u);
                    goto LABEL_272;
                  }

uint64_t expectCharacter #1 (_:_:) in Date.ISO8601FormatStyle.components(from:in:)( uint64_t result, unsigned __int8 **a2, uint64_t a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v6 = *a2;
  if (*a2 >= a2[1] || (int v7 = *v6, *a2 = v6 + 1, v7 != result))
  {
    __tp.__darwin_time_t tv_sec = 0LL;
    __tp.uint64_t tv_nsec = 0LL;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
    Swift::String v8 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
    __tp.__darwin_time_t tv_sec = 0LL;
    __tp.uint64_t tv_nsec = 0xE000000000000000LL;
    _StringGuts.grow(_:)(88LL);
    v9.___darwin_time_t countAndFlagsBits = 0x7020746F6E6E6143LL;
    v9._object = (void *)0xED00002065737261LL;
    String.append(_:)(v9);
    v10.___darwin_time_t countAndFlagsBits = a3;
    v10._object = a4;
    String.append(_:)(v10);
    v11._object = (void *)0x80000001839CAB20LL;
    v11.___darwin_time_t countAndFlagsBits = 0xD000000000000046LL;
    String.append(_:)(v11);
    String.append(_:)(v8);
    v12.___darwin_time_t countAndFlagsBits = 46LL;
    v12._object = (void *)0xE100000000000000LL;
    String.append(_:)(v12);
    __darwin_time_t tv_sec = __tp.tv_sec;
    uint64_t tv_nsec = __tp.tv_nsec;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x189617FA8];
    *(void *)(inited + 40) = v16;
    *(void *)(inited + 48) = tv_sec;
    *(void *)(inited + 56) = tv_nsec;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    unint64_t v17 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&__tp);
    __darwin_time_t v18 = __tp.tv_sec;
    uint64_t v19 = __tp.tv_nsec;
    swift_retain();
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    if ((v21 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      v17[(v20 >> 6) + 8] |= 1LL << v20;
      uint64_t v22 = (__darwin_time_t *)(v17[6] + 16 * v20);
      *uint64_t v22 = v18;
      v22[1] = v19;
      outlined init with take of Any(&v36, (_OWORD *)(v17[7] + 32 * v20));
      uint64_t v23 = v17[2];
      BOOL v24 = __OFADD__(v23, 1LL);
      uint64_t v25 = v23 + 1;
      if (!v24)
      {
        _OWORD v17[2] = v25;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v26 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v27 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v28 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, 2048, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v29 = objc_msgSend(v28, sel_domain);
        id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        uint64_t v32 = v31;

        if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v32 == v33)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return swift_willThrow();
        }

        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v34 & 1) != 0) {
          return swift_willThrow();
        }
LABEL_13:
        __break(1u);
      }
    }

    __break(1u);
    goto LABEL_13;
  }

  return result;
}

uint64_t digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)( uint64_t a1, char a2, char a3, unint64_t *a4, unsigned __int8 a5, unsigned __int8 a6, uint64_t a7, void *a8)
{
  uint64_t v11 = 0LL;
  uint64_t result = 0LL;
  uint64_t v85 = *MEMORY[0x1895F89C0];
  if (a1 >= 10) {
    a1 = 10LL;
  }
  if (a1 <= 1) {
    uint64_t v13 = 1LL;
  }
  else {
    uint64_t v13 = a1;
  }
  unint64_t v15 = *a4;
  unint64_t v14 = a4[1];
  BOOL v16 = v14 >= *a4;
  uint64_t v17 = v14 - *a4;
  if (!v16) {
    uint64_t v17 = 0LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v13 = 10LL;
  }
  while (v17 != v11)
  {
    unsigned int v18 = *(unsigned __int8 *)(v15 + v11);
    uint64_t v19 = v18 - a5;
    if (v18 < a5 || v18 > a6)
    {
      uint64_t v17 = v11;
      break;
    }

    uint64_t v21 = 10 * result;
    uint64_t result = v21 + v19;
    if (__OFADD__(v21, v19)) {
      goto LABEL_54;
    }
    *a4 = v15 + v11++ + 1;
    if (v13 == v11) {
      goto LABEL_21;
    }
  }

  uint64_t v13 = v17;
  if (v17 < 1)
  {
LABEL_25:
    __tp.__darwin_time_t tv_sec = 0LL;
    __tp.uint64_t tv_nsec = 0LL;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
    Swift::String v23 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
    __tp.__darwin_time_t tv_sec = 0LL;
    __tp.uint64_t tv_nsec = 0xE000000000000000LL;
    _StringGuts.grow(_:)(88LL);
    v24.___darwin_time_t countAndFlagsBits = 0x7020746F6E6E6143LL;
    v24._object = (void *)0xED00002065737261LL;
    String.append(_:)(v24);
    v25.___darwin_time_t countAndFlagsBits = a7;
    v25._object = a8;
    String.append(_:)(v25);
    v26._object = (void *)0x80000001839CAB20LL;
    v26.___darwin_time_t countAndFlagsBits = 0xD000000000000046LL;
    String.append(_:)(v26);
    String.append(_:)(v23);
    v27.___darwin_time_t countAndFlagsBits = 46LL;
    v27._object = (void *)0xE100000000000000LL;
    String.append(_:)(v27);
    __darwin_time_t tv_sec = __tp.tv_sec;
    uint64_t tv_nsec = __tp.tv_nsec;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x189617FA8];
    *(void *)(inited + 40) = v31;
    *(void *)(inited + 48) = tv_sec;
    *(void *)(inited + 56) = tv_nsec;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v32 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&__tp);
    __darwin_time_t v33 = __tp.tv_sec;
    uint64_t v34 = __tp.tv_nsec;
    swift_retain();
    unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34);
    if ((v36 & 1) != 0)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }

    v32[(v35 >> 6) + 8] |= 1LL << v35;
    uint64_t v37 = (__darwin_time_t *)(v32[6] + 16 * v35);
    *uint64_t v37 = v33;
    v37[1] = v34;
    outlined init with take of Any(v84, (_OWORD *)(v32[7] + 32 * v35));
    uint64_t v38 = v32[2];
    BOOL v39 = __OFADD__(v38, 1LL);
    uint64_t v40 = v38 + 1;
    if (v39)
    {
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
    }

    void v32[2] = v40;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v41 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v42 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v43 = objc_msgSend(v41, sel_initWithDomain_code_userInfo_, v42, 2048, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v44 = objc_msgSend(v43, sel_domain);
    id v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    uint64_t v47 = v46;

    if (v45 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v47 == v48)
    {
LABEL_29:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }

    else
    {
      char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v49 & 1) == 0) {
        goto LABEL_57;
      }
    }

    return swift_willThrow();
  }

  else
  {
LABEL_21:
    if ((a3 & 1) != 0)
    {
      switch(v13)
      {
        case 1LL:
          uint64_t v22 = (unsigned __int128)(result * (__int128)100000000LL) >> 64;
          result *= 100000000LL;
          if (v22 == result >> 63) {
            return result;
          }
          __break(1u);
          goto LABEL_25;
        case 2LL:
          goto LABEL_39;
        case 3LL:
          goto LABEL_41;
        case 4LL:
          goto LABEL_43;
        case 5LL:
          goto LABEL_45;
        case 6LL:
          goto LABEL_47;
        case 7LL:
          goto LABEL_49;
        case 8LL:
          goto LABEL_51;
        case 9LL:
          return result;
        default:
          __tp.__darwin_time_t tv_sec = 0LL;
          __tp.uint64_t tv_nsec = 0LL;
          clock_gettime(_CLOCK_REALTIME, &__tp);
          *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
          Swift::String v50 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
          __tp.__darwin_time_t tv_sec = 0LL;
          __tp.uint64_t tv_nsec = 0xE000000000000000LL;
          _StringGuts.grow(_:)(88LL);
          v51.___darwin_time_t countAndFlagsBits = 0x7020746F6E6E6143LL;
          v51._object = (void *)0xED00002065737261LL;
          String.append(_:)(v51);
          v52.___darwin_time_t countAndFlagsBits = a7;
          v52._object = a8;
          String.append(_:)(v52);
          v53._object = (void *)0x80000001839CAB20LL;
          v53.___darwin_time_t countAndFlagsBits = 0xD000000000000046LL;
          String.append(_:)(v53);
          String.append(_:)(v50);
          v54.___darwin_time_t countAndFlagsBits = 46LL;
          v54._object = (void *)0xE100000000000000LL;
          String.append(_:)(v54);
          __darwin_time_t v55 = __tp.tv_sec;
          uint64_t v56 = __tp.tv_nsec;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
          uint64_t v57 = swift_initStackObject();
          *(_OWORD *)(v57 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
          *(void *)(v57 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
          *(void *)(v57 + 72) = MEMORY[0x189617FA8];
          *(void *)(v57 + 40) = v58;
          *(void *)(v57 + 48) = v55;
          *(void *)(v57 + 56) = v56;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          unint64_t v59 = (void *)static _DictionaryStorage.allocate(capacity:)();
          outlined init with copy of (String, Any)(v57 + 32, (uint64_t)&__tp);
          __darwin_time_t v60 = __tp.tv_sec;
          uint64_t v61 = __tp.tv_nsec;
          swift_retain();
          unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(v60, v61);
          if ((v63 & 1) != 0) {
            goto LABEL_58;
          }
          v59[(v62 >> 6) + 8] |= 1LL << v62;
          uint64_t v64 = (__darwin_time_t *)(v59[6] + 16 * v62);
          *uint64_t v64 = v60;
          v64[1] = v61;
          outlined init with take of Any(v84, (_OWORD *)(v59[7] + 32 * v62));
          uint64_t v65 = v59[2];
          BOOL v39 = __OFADD__(v65, 1LL);
          uint64_t v66 = v65 + 1;
          if (v39) {
            goto LABEL_59;
          }
          v59[2] = v66;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v67 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v68 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v69 = objc_msgSend(v67, sel_initWithDomain_code_userInfo_, v68, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v70 = objc_msgSend(v69, sel_domain);
          id v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
          uint64_t v73 = v72;

          if (v71 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v73 == v74) {
            goto LABEL_29;
          }
          char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v75 & 1) != 0) {
            return swift_willThrow();
          }
          __break(1u);
LABEL_39:
          uint64_t v76 = (unsigned __int128)(result * (__int128)10000000LL) >> 64;
          result *= 10000000LL;
          if (v76 == result >> 63) {
            return result;
          }
          __break(1u);
LABEL_41:
          uint64_t v77 = (unsigned __int128)(result * (__int128)1000000LL) >> 64;
          result *= 1000000LL;
          if (v77 == result >> 63) {
            return result;
          }
          __break(1u);
LABEL_43:
          uint64_t v78 = (unsigned __int128)(result * (__int128)100000LL) >> 64;
          result *= 100000LL;
          if (v78 == result >> 63) {
            return result;
          }
          __break(1u);
LABEL_45:
          uint64_t v79 = (unsigned __int128)(result * (__int128)10000LL) >> 64;
          result *= 10000LL;
          if (v79 == result >> 63) {
            return result;
          }
          __break(1u);
LABEL_47:
          uint64_t v80 = (unsigned __int128)(result * (__int128)1000LL) >> 64;
          result *= 1000LL;
          if (v80 == result >> 63) {
            return result;
          }
          __break(1u);
LABEL_49:
          uint64_t v81 = (unsigned __int128)(result * (__int128)100LL) >> 64;
          result *= 100LL;
          if (v81 == result >> 63) {
            return result;
          }
          __break(1u);
LABEL_51:
          uint64_t v82 = (unsigned __int128)(result * (__int128)10LL) >> 64;
          result *= 10LL;
          if (v82 == result >> 63) {
            return result;
          }
          __break(1u);
          break;
      }

Foundation::Date __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Date.ISO8601FormatStyle.parse(_:)( Swift::String a1)
{
  object = a1._object;
  uint64_t v38 = v1;
  uint64_t v48 = *MEMORY[0x1895F89C0];
  char v4 = *(_BYTE *)(v2 + 1);
  char v5 = *(_BYTE *)(v2 + 2);
  char v6 = *(_BYTE *)(v2 + 3);
  char v7 = *(_BYTE *)(v2 + 4);
  unint64_t v8 = *(void *)(v2 + 8);
  uint64_t v9 = *(void *)(v2 + 16);
  uint64_t v10 = *(void *)(v2 + 24);
  uint64_t v11 = *(void *)(v2 + 32);
  LOBYTE(v42) = *(_BYTE *)v2;
  BYTE1(v42) = v4;
  BYTE2(v42) = v5;
  BYTE3(v42) = v6;
  BYTE4(v42) = v7;
  unint64_t v43 = v8;
  *(void *)&__int128 v44 = v9;
  uint64_t v39 = v11;
  uint64_t v40 = v10;
  *((void *)&v44 + 1) = v10;
  uint64_t v45 = v11;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  Date.ISO8601FormatStyle.parse(_:in:)(a1._countAndFlagsBits, (unint64_t)a1._object, (uint64_t)&__tp);
  if ((v47 & 1) == 0)
  {
    *(Foundation::Date *)&result._time = (Foundation::Date)__tp.tv_nsec;
    uint64_t *v38 = __tp.tv_nsec;
    return result;
  }

  *(void *)&__int128 v44 = v9;
  *((void *)&v44 + 1) = v40;
  uint64_t v45 = v39;
  __tp.__darwin_time_t tv_sec = 0LL;
  __tp.uint64_t tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.__darwin_time_t tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  Swift::String v12 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
  uint64_t v42 = 0LL;
  unint64_t v43 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(88LL);
  v13._uint64_t countAndFlagsBits = 0x7020746F6E6E6143LL;
  v13._object = (void *)0xED00002065737261LL;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = countAndFlagsBits;
  v14._object = object;
  String.append(_:)(v14);
  v15._object = (void *)0x80000001839CAB20LL;
  v15._uint64_t countAndFlagsBits = 0xD000000000000046LL;
  String.append(_:)(v15);
  String.append(_:)(v12);
  v16._uint64_t countAndFlagsBits = 46LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 40) = v18;
  *(void *)(inited + 48) = 0LL;
  *(void *)(inited + 56) = 0xE000000000000000LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v19 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v42);
  uint64_t v20 = v42;
  uint64_t v21 = v43;
  swift_retain();
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  v19[(v22 >> 6) + 8] |= 1LL << v22;
  Swift::String v24 = (uint64_t *)(v19[6] + 16 * v22);
  *Swift::String v24 = v20;
  v24[1] = v21;
  outlined init with take of Any(&v44, (_OWORD *)(v19[7] + 32 * v22));
  uint64_t v25 = v19[2];
  BOOL v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  v19[2] = v27;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v28 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v29 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v30 = objc_msgSend(v28, sel_initWithDomain_code_userInfo_, v29, 2048, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v31 = objc_msgSend(v30, sel_domain);
  id v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  uint64_t v34 = v33;

  if (v32 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v34 != v35)
  {
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v37 & 1) != 0) {
      goto LABEL_9;
    }
LABEL_13:
    __break(1u);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_9:
  swift_willThrow();
  return result;
}

uint64_t Date.ISO8601FormatStyle.parse(_:in:)@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v7 = *(_OWORD *)(v3 + 16);
  v22[0] = *(_OWORD *)v3;
  v22[1] = v7;
  uint64_t v23 = *(void *)(v3 + 32);
  v21[0] = String.subscript.getter();
  v21[1] = v8;
  v21[2] = v9;
  _OWORD v21[3] = v10;
  if ((v21[0] ^ v8) < 0x4000
    || (swift_bridgeObjectRetain(),
        outlined retain of Date.ISO8601FormatStyle((uint64_t)v22),
        specialized Substring.withUTF8<A>(_:)(v21, v22, a1, (char *)a2, (uint64_t)v19),
        (v20 & 1) != 0))
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    *(_BYTE *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    return result;
  }

  uint64_t v12 = v19[0];
  uint64_t v13 = v19[1];
  unint64_t v14 = v21[0];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v15) = 1;
  }
  if ((v14 & 0xC) != 4LL << v15)
  {
    if ((a2 & 0x1000000000000000LL) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t v18 = MEMORY[0x186E1B838](v14, v12, a1, a2);
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_14;
  }

  unint64_t v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v16 = v12 + (v14 >> 16);
  if (__OFADD__(v12, v14 >> 16))
  {
    __break(1u);
    goto LABEL_18;
  }

  if ((v16 & 0x8000000000000000LL) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  unint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    unint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 >= v16)
  {
    uint64_t v18 = (v16 << 16) | 4;
LABEL_14:
    *(void *)a3 = v18;
    *(void *)(a3 + 8) = v13;
    *(_BYTE *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    return result;
  }

void closure #1 in Date.ISO8601FormatStyle.parse(_:in:)( char *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  if (!a1) {
    goto LABEL_12;
  }
  if (a2 < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }

  __int128 v8 = a3[1];
  __int128 v18 = *a3;
  __int128 v19 = v8;
  uint64_t v20 = *((void *)a3 + 4);
  Date.ISO8601FormatStyle.components(from:in:)(a4, a5, a1, a2, __src);
  if (v6)
  {

LABEL_5:
    *(void *)a6 = 0LL;
    *(void *)(a6 + 8) = 0LL;
    *(_BYTE *)(a6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    return;
  }

  memcpy(__dst, __src, 0x122uLL);
  if (__dst[3])
  {
    memcpy(v16, &__dst[1], 0x11AuLL);
    uint64_t v13 = __dst[3];
    uint64_t v14 = __dst[4];
    char v12 = 0;
    outlined retain of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    swift_unknownObjectRetain();
    _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF(v16);
    outlined release of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    swift_unknownObjectRelease();
    outlined release of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    uint64_t v9 = v15;
  }

  else
  {
    memcpy(v16, &__dst[1], 0x11AuLL);
    outlined retain of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    _CalendarGregorian.date(from:)(v16, (uint64_t)&v10);
    outlined release of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    outlined release of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    if ((v11 & 1) != 0) {
      goto LABEL_5;
    }
    uint64_t v9 = v10;
  }

  *(void *)a6 = __dst[0];
  *(void *)(a6 + 8) = v9;
  *(_BYTE *)(a6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
}

Foundation::Date protocol witness for ParseStrategy.parse(_:) in conformance Date.ISO8601FormatStyle( Swift::String *a1)
{
  return Date.ISO8601FormatStyle.parse(_:)(*a1);
}

uint64_t Date.ISO8601FormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 1);
  char v3 = *(_BYTE *)(v1 + 2);
  char v4 = *(_BYTE *)(v1 + 3);
  char v5 = *(_BYTE *)(v1 + 4);
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_BYTE *)(a1 + 3) = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  swift_retain();
  return swift_unknownObjectRetain();
}

double Date.ISO8601FormatStyle.consuming(_:startingAt:in:)@<D0>( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  if (a3 >> 14 >= a4 >> 14 || (Date.ISO8601FormatStyle.parse(_:in:)(a1, a2, (uint64_t)&v7), (v8 & 1) != 0))
  {
    *(void *)a5 = 0LL;
    *(void *)(a5 + 8) = 0LL;
    *(_BYTE *)(a5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
  }

  else
  {
    double result = *(double *)&v7;
    *(_OWORD *)a5 = v7;
    *(_BYTE *)(a5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
  }

  return result;
}

double protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance Date.ISO8601FormatStyle@<D0>( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return Date.ISO8601FormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance Date.ISO8601FormatStyle()
{
  return CustomConsumingRegexComponent.regex.getter();
}

void static FormatStyle<>.iso8601.getter(uint64_t a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  unint64_t v2 = static TimeZoneCache.cache + 16;
  char v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v2, 0LL, &v13);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v13;
  if (!(void)v13)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v5 = *((void *)&v13 + 1);
  uint64_t v6 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  swift_retain_n();
  os_unfair_lock_lock(v6 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)((unint64_t)&v6[4], 0LL, &v13);
  os_unfair_lock_unlock(v6 + 36);
  swift_release_n();
  if (!(void)v13)
  {
LABEL_9:
    __break(1u);
    return;
  }

  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)&__int128 v13 = v4;
  *((void *)&v13 + 1) = v5;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  swift_release();
  *(void *)&__int128 v11 = inited;
  *((void *)&v11 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  uint64_t v9 = 0LL;
  char v10 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( (uint64_t)v12,  (uint64_t *)&v13,  &v11,  2LL,  0,  4LL,  0,  (uint64_t)&v9);
  *(_DWORD *)a1 = 0x10000;
  *(_BYTE *)(a1 + 4) = 1;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v8;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
}

void static RegexComponent<>.iso8601WithTimeZone(includingFractionalSeconds:dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:)( char a1@<W0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v17 = *a2;
  char v16 = *a3;
  char v7 = *a4;
  char v8 = *a5;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  unint64_t v9 = static TimeZoneCache.cache + 16;
  char v10 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v9, 0LL, &v23);
  os_unfair_lock_unlock(v10);
  swift_release_n();
  uint64_t v11 = v23;
  if (!(void)v23)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v12 = *((void *)&v23 + 1);
  __int128 v13 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  swift_retain_n();
  os_unfair_lock_lock(v13 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)((unint64_t)&v13[4], 0LL, &v23);
  os_unfair_lock_unlock(v13 + 36);
  swift_release_n();
  if (!(void)v23)
  {
LABEL_9:
    __break(1u);
    return;
  }

  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)&__int128 v23 = v11;
  *((void *)&v23 + 1) = v12;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  swift_release();
  *(void *)&__int128 v21 = inited;
  *((void *)&v21 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  uint64_t v19 = 0LL;
  char v20 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( (uint64_t)v22,  (uint64_t *)&v23,  &v21,  2LL,  0,  4LL,  0,  (uint64_t)&v19);
  *(_BYTE *)a6 = v7;
  *(_BYTE *)(a6 + 1) = a1 & 1;
  *(_BYTE *)(a6 + 2) = v8;
  *(_BYTE *)(a6 + 3) = v17;
  *(_BYTE *)(a6 + 4) = v16;
  *(void *)(a6 + 8) = 0LL;
  *(void *)(a6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v15;
  *(void *)(a6 + 24) = v11;
  *(void *)(a6 + 32) = v12;
}

void static RegexComponent<>.iso8601(timeZone:includingFractionalSeconds:dateSeparator:dateTimeSeparator:timeSeparator:)( uint64_t *a1@<X0>, char a2@<W1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  char v9 = *a3;
  char v10 = *a4;
  char v11 = *a5;
  uint64_t v12 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  unint64_t v13 = static TimeZoneCache.cache + 16;
  uint64_t v14 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v14);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v13, 0LL, &v22);
  os_unfair_lock_unlock(v14);
  swift_release_n();
  if ((void)v22)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)&__int128 v22 = v7;
    *((void *)&v22 + 1) = v8;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    type metadata accessor for _LocaleUnlocalized();
    swift_retain();
    uint64_t inited = swift_initStaticObject();
    swift_release();
    *(void *)&__int128 v20 = inited;
    *((void *)&v20 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
    uint64_t v18 = 0LL;
    char v19 = 1;
    type metadata accessor for _CalendarGregorian();
    swift_allocObject();
    _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( (uint64_t)v21,  (uint64_t *)&v22,  &v20,  2LL,  0,  4LL,  0,  (uint64_t)&v18);
    *(_BYTE *)a6 = v11;
    *(_BYTE *)(a6 + 1) = a2 & 1;
    *(_BYTE *)(a6 + 2) = 1;
    *(_BYTE *)(a6 + 3) = v9;
    *(_BYTE *)(a6 + 4) = v10;
    *(void *)(a6 + 8) = 27LL;
    *(void *)(a6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v16;
    *(void *)(a6 + 24) = v7;
    *(void *)(a6 + 32) = v8;
  }

  else
  {
    __break(1u);
  }

void static RegexComponent<>.iso8601Date(timeZone:dateSeparator:)( uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  char v6 = *a2;
  uint64_t v7 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  unint64_t v8 = static TimeZoneCache.cache + 16;
  char v9 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v8, 0LL, &v16);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  if ((void)v16)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)&__int128 v16 = v4;
    *((void *)&v16 + 1) = v5;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    type metadata accessor for _LocaleUnlocalized();
    swift_retain();
    uint64_t inited = swift_initStaticObject();
    swift_release();
    *(void *)&__int128 v14 = inited;
    *((void *)&v14 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
    uint64_t v12 = 0LL;
    char v13 = 1;
    type metadata accessor for _CalendarGregorian();
    swift_allocObject();
    _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( (uint64_t)v15,  (uint64_t *)&v16,  &v14,  2LL,  0,  4LL,  0,  (uint64_t)&v12);
    *(_WORD *)a3 = 0;
    *(_BYTE *)(a3 + 2) = 1;
    *(_BYTE *)(a3 + 3) = v6;
    *(_BYTE *)(a3 + 4) = 1;
    *(void *)(a3 + 24) = v4;
    *(void *)(a3 + 32) = v5;
    *(void *)(a3 + 8) = 11LL;
    *(void *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v11;
  }

  else
  {
    __break(1u);
  }

unint64_t _StringGuts.validateInclusiveScalarIndex(_:)( unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4LL << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    double result = _StringGuts.validateInclusiveSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3LL | 1;
    }
  }

  return result;
}

unint64_t _StringGuts.validateInclusiveSubscalarIndex(_:)( unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4LL << v5) {
    double result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall Substring._slowMakeContiguousUTF8()()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  unint64_t v4 = _StringGuts.validateInclusiveScalarIndex(_:)(0xFuLL, v2, v3);
  unint64_t v5 = _StringGuts.validateInclusiveScalarIndex(_:)(v1, v2, v3) >> 14;
  if (v4 >> 14 < v5)
  {
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = v6 + 1;
      if (__OFADD__(v6, 1LL)) {
        break;
      }
      if ((v3 & 0x1000000000000000LL) != 0)
      {
        unint64_t v4 = String.UnicodeScalarView._foreignIndex(after:)();
      }

      else
      {
        unint64_t v8 = v4 >> 16;
        if ((v3 & 0x2000000000000000LL) != 0)
        {
          unint64_t v72 = v2;
          uint64_t v73 = v3 & 0xFFFFFFFFFFFFFFLL;
          int v10 = *((unsigned __int8 *)&v72 + v8);
        }

        else
        {
          uint64_t v9 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v2 & 0x1000000000000000LL) == 0) {
            uint64_t v9 = _StringObject.sharedUTF8.getter();
          }
          int v10 = *(unsigned __int8 *)(v9 + v8);
        }

        int v11 = (char)v10;
        unsigned int v12 = __clz(v10 ^ 0xFF) - 24;
        if (v11 >= 0) {
          LOBYTE(v12) = 1;
        }
        unint64_t v4 = ((v8 + v12) << 16) | 5;
      }

      ++v6;
      if (v5 <= v4 >> 14) {
        goto LABEL_35;
      }
    }

    __break(1u);
    goto LABEL_148;
  }

  if (v5 < v4 >> 14)
  {
    uint64_t v7 = 0LL;
    while (1)
    {
      BOOL v13 = __OFSUB__(v7--, 1LL);
      if (v13) {
        goto LABEL_153;
      }
      if ((v3 & 0x1000000000000000LL) == 0) {
        break;
      }
      unint64_t v4 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_18:
      if (v5 >= v4 >> 14) {
        goto LABEL_35;
      }
    }

    unint64_t v14 = v4 >> 16;
    if ((v3 & 0x2000000000000000LL) != 0)
    {
      unint64_t v72 = v2;
      uint64_t v73 = v3 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v72 + v14 - 1) & 0xC0) == 0x80)
      {
        uint64_t v16 = 0LL;
        do
          int v18 = *((_BYTE *)&v71 + v14 + v16-- + 6) & 0xC0;
        while (v18 == 128);
        goto LABEL_31;
      }
    }

    else
    {
      uint64_t v15 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v2 & 0x1000000000000000LL) == 0) {
        uint64_t v15 = _StringObject.sharedUTF8.getter();
      }
      if ((*(_BYTE *)(v14 + v15 - 1) & 0xC0) == 0x80)
      {
        uint64_t v16 = 0LL;
        do
          int v17 = *(_BYTE *)(v15 + v14 - 2 + v16--) & 0xC0;
        while (v17 == 128);
LABEL_31:
        uint64_t v19 = 1 - v16;
LABEL_33:
        unint64_t v4 = (v4 - (v19 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
        goto LABEL_18;
      }
    }

    uint64_t v19 = 1LL;
    goto LABEL_33;
  }

  uint64_t v7 = 0LL;
LABEL_35:
  unint64_t v20 = v71[1];
  unint64_t v21 = v71[2];
  unint64_t v22 = v71[3];
  unint64_t v23 = _StringGuts.validateInclusiveScalarIndex(_:)(*v71, v21, v22);
  unint64_t v24 = _StringGuts.validateInclusiveScalarIndex(_:)(v20, v21, v22) >> 14;
  if (v23 >> 14 < v24)
  {
    uint64_t v25 = 0LL;
    while (1)
    {
      uint64_t v26 = v25 + 1;
      if (__OFADD__(v25, 1LL)) {
        break;
      }
      if ((v22 & 0x1000000000000000LL) != 0)
      {
        unint64_t v23 = String.UnicodeScalarView._foreignIndex(after:)();
      }

      else
      {
        unint64_t v27 = v23 >> 16;
        if ((v22 & 0x2000000000000000LL) != 0)
        {
          unint64_t v72 = v21;
          uint64_t v73 = v22 & 0xFFFFFFFFFFFFFFLL;
          int v29 = *((unsigned __int8 *)&v72 + v27);
        }

        else
        {
          uint64_t v28 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v21 & 0x1000000000000000LL) == 0) {
            uint64_t v28 = _StringObject.sharedUTF8.getter();
          }
          int v29 = *(unsigned __int8 *)(v28 + v27);
        }

        int v30 = (char)v29;
        unsigned int v31 = __clz(v29 ^ 0xFF) - 24;
        if (v30 >= 0) {
          LOBYTE(v31) = 1;
        }
        unint64_t v23 = ((v27 + v31) << 16) | 5;
      }

      ++v25;
      if (v24 <= v23 >> 14) {
        goto LABEL_69;
      }
    }

uint64_t specialized static Date.ISO8601FormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = a1[1];
  int v3 = a1[3];
  int v4 = a1[4];
  uint64_t v5 = *((void *)a1 + 1);
  int v32 = *a1;
  int v33 = *a2;
  int v6 = a2[1];
  int v34 = a2[3];
  int v7 = a2[4];
  uint64_t v8 = *((void *)a2 + 1);
  __int128 v35 = *(_OWORD *)(a2 + 24);
  __int128 v36 = *(_OWORD *)(a1 + 24);
  BOOL v9 = a1[2] == 0;
  if (a1[2]) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = 58LL;
  }
  if (v9) {
    unint64_t v11 = 0xE100000000000000LL;
  }
  else {
    unint64_t v11 = 0xE000000000000000LL;
  }
  if (a2[2]) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = 58LL;
  }
  if (a2[2]) {
    unint64_t v13 = 0xE000000000000000LL;
  }
  else {
    unint64_t v13 = 0xE100000000000000LL;
  }
  if (v10 == v12 && v11 == v13)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v16 = 0;
    if ((v15 & 1) == 0) {
      return v16 & 1;
    }
  }

  __int128 v37 = v35;
  __int128 v38 = v36;
  char v16 = 0;
  if ((specialized static TimeZone.== infix(_:_:)((uint64_t)&v38, (uint64_t)&v37) & 1) != 0 && v5 == v8)
  {
    if (v4) {
      uint64_t v17 = 2577447LL;
    }
    else {
      uint64_t v17 = 32LL;
    }
    if (v4) {
      unint64_t v18 = 0xE300000000000000LL;
    }
    else {
      unint64_t v18 = 0xE100000000000000LL;
    }
    if (v7) {
      uint64_t v19 = 2577447LL;
    }
    else {
      uint64_t v19 = 32LL;
    }
    if (v7) {
      unint64_t v20 = 0xE300000000000000LL;
    }
    else {
      unint64_t v20 = 0xE100000000000000LL;
    }
    if (v17 == v19 && v18 == v20)
    {
      swift_bridgeObjectRelease_n();
      if (v2 != v6)
      {
        char v16 = 0;
        return v16 & 1;
      }
    }

    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v16 = 0;
      if ((v21 & 1) == 0 || ((v2 ^ v6) & 1) != 0) {
        return v16 & 1;
      }
    }

    if (v3) {
      uint64_t v22 = 0LL;
    }
    else {
      uint64_t v22 = 45LL;
    }
    if (v3) {
      unint64_t v23 = 0xE000000000000000LL;
    }
    else {
      unint64_t v23 = 0xE100000000000000LL;
    }
    if (v34) {
      uint64_t v24 = 0LL;
    }
    else {
      uint64_t v24 = 45LL;
    }
    if (v34) {
      unint64_t v25 = 0xE000000000000000LL;
    }
    else {
      unint64_t v25 = 0xE100000000000000LL;
    }
    if (v22 == v24 && v23 == v25)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v16 = 0;
      if ((v26 & 1) == 0) {
        return v16 & 1;
      }
    }

    if (v32) {
      uint64_t v27 = 0LL;
    }
    else {
      uint64_t v27 = 58LL;
    }
    if (v32) {
      unint64_t v28 = 0xE000000000000000LL;
    }
    else {
      unint64_t v28 = 0xE100000000000000LL;
    }
    if (v33) {
      uint64_t v29 = 0LL;
    }
    else {
      uint64_t v29 = 58LL;
    }
    if (v33) {
      unint64_t v30 = 0xE000000000000000LL;
    }
    else {
      unint64_t v30 = 0xE100000000000000LL;
    }
    if (v27 == v29 && v28 == v30) {
      char v16 = 1;
    }
    else {
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return v16 & 1;
}

uint64_t outlined retain of Date.ISO8601FormatStyle(uint64_t a1)
{
  return a1;
}

unint64_t instantiation function for generic protocol witness table for Date.ISO8601FormatStyle( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
  unint64_t result = lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
  a1[3] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.ISO8601FormatStyle( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_183403638@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 24);
  return swift_unknownObjectRetain();
}

uint64_t destroy for Date.ISO8601FormatStyle()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Date.ISO8601FormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.ISO8601FormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithTake for Date.ISO8601FormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.ISO8601FormatStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.ISO8601FormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle()
{
  return &type metadata for Date.ISO8601FormatStyle;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return &type metadata for Date.ISO8601FormatStyle.TimeZoneSeparator;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.DateSeparator()
{
  return &type metadata for Date.ISO8601FormatStyle.DateSeparator;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator()
{
  return &type metadata for Date.ISO8601FormatStyle.TimeSeparator;
}

uint64_t storeEnumTagSinglePayload for Date.ISO8601FormatStyle.TimeZoneSeparator( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_183403914 + 4 * byte_183828C53[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183403948 + 4 * byte_183828C4E[v4]))();
}

uint64_t sub_183403948(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183403950(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183403958LL);
  }
  return result;
}

uint64_t sub_183403964(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18340396CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_183403970(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183403978(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return &type metadata for Date.ISO8601FormatStyle.DateTimeSeparator;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.Fields()
{
  return &type metadata for Date.ISO8601FormatStyle.Fields;
}

uint64_t storeEnumTagSinglePayload for Date.ISO8601FormatStyle.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1834039F0 + 4 * byte_183828C5D[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_183403A24 + 4 * byte_183828C58[v4]))();
}

uint64_t sub_183403A24(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183403A2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183403A34LL);
  }
  return result;
}

uint64_t sub_183403A40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183403A48LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_183403A4C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183403A54(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.CodingKeys()
{
  return &type metadata for Date.ISO8601FormatStyle.CodingKeys;
}

unint64_t specialized Date.ISO8601FormatStyle.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Date.ISO8601FormatStyle.CodingKeys.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

uint64_t outlined retain of Date.ISO8601FormatStyle.ComponentsParseResult(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Date.ISO8601FormatStyle.ComponentsParseResult(uint64_t a1)
{
  return a1;
}

char *partial apply for closure #1 in append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( char *a1, int64_t a2)
{
  return closure #1 in append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( a1,  a2,  *(void **)(v2 + 16));
}

uint64_t closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)partial apply( char *a1, int64_t a2)
{
  return partial apply for closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)( a1,  a2);
}

unint64_t specialized _parseIntegerDigits<A>(_:isNegative:)(_BYTE *a1, uint64_t a2, char a3)
{
  if (a2)
  {
    if (a2 < 1) {
      return 0LL;
    }
    unint64_t result = 0LL;
    uint64_t v5 = &a1[a2];
    while (*a1 - 48 <= 9)
    {
      unint64_t v6 = (*a1 - 48);
      BOOL v7 = !is_mul_ok(result, 0xAuLL);
      unint64_t v8 = 10 * result;
      unint64_t v9 = 10 * result + v6;
      BOOL v10 = __CFADD__(10 * result, v6);
      BOOL v11 = v8 >= v6;
      unint64_t v12 = v8 - v6;
      char v13 = !v11;
      if ((a3 & 1) == 0) {
        char v13 = v10;
      }
      unint64_t result = 0LL;
      if (!v7 && (v13 & 1) == 0)
      {
        unint64_t result = (a3 & 1) != 0 ? v12 : v9;
        if (++a1 < v5) {
          continue;
        }
      }

      return result;
    }
  }

  return 0LL;
}

{
  unsigned int v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unsigned __int8 v12;
  if (a2)
  {
    if (a2 < 1)
    {
      unint64_t v3 = 0;
      unint64_t v12 = 0;
      return v3 | ((unint64_t)v12 << 32);
    }

    unint64_t v3 = 0;
    uint64_t v4 = &a1[a2];
    while (*a1 - 48 <= 9)
    {
      uint64_t v5 = (*a1 - 48);
      unint64_t v6 = 10LL * (int)v3;
      BOOL v7 = v6 != (int)v6;
      unint64_t v8 = v6 + v5;
      unint64_t v9 = __OFADD__((_DWORD)v6, v5);
      BOOL v10 = v6 - v5;
      BOOL v11 = __OFSUB__((_DWORD)v6, v5);
      if ((a3 & 1) != 0) {
        unint64_t v9 = v11;
      }
      unint64_t v12 = 1;
      unint64_t v3 = 0;
      if (!v7 && !v9)
      {
        unint64_t v12 = 0;
        unint64_t v3 = (a3 & 1) != 0 ? v10 : v8;
        if (++a1 < v4) {
          continue;
        }
      }

      return v3 | ((unint64_t)v12 << 32);
    }
  }

  unint64_t v3 = 0;
  unint64_t v12 = 1;
  return v3 | ((unint64_t)v12 << 32);
}

{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unsigned __int8 v12;
  if (a2)
  {
    if (a2 < 1)
    {
      unint64_t v3 = 0;
      unint64_t v12 = 0;
      return v3 | ((unint64_t)v12 << 32);
    }

    unint64_t v3 = 0;
    uint64_t v4 = &a1[a2];
    while (*a1 - 48 <= 9)
    {
      uint64_t v5 = (*a1 - 48);
      unint64_t v6 = 10LL * v3;
      BOOL v7 = (v6 & 0xFFFFFFFF00000000LL) != 0;
      unint64_t v8 = v6 + v5;
      unint64_t v9 = __CFADD__((_DWORD)v6, v5);
      BOOL v10 = v6 - v5;
      BOOL v11 = v6 < v5;
      if ((a3 & 1) != 0) {
        unint64_t v9 = v11;
      }
      unint64_t v12 = 1;
      unint64_t v3 = 0;
      if (!v7 && !v9)
      {
        unint64_t v12 = 0;
        unint64_t v3 = (a3 & 1) != 0 ? v10 : v8;
        if (++a1 < v4) {
          continue;
        }
      }

      return v3 | ((unint64_t)v12 << 32);
    }
  }

  unint64_t v3 = 0;
  unint64_t v12 = 1;
  return v3 | ((unint64_t)v12 << 32);
}

{
  unint64_t result;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unsigned __int128 v13;
  BOOL v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  char v19;
  if (!a2) {
    return 0LL;
  }
  if (a2 < 1) {
    return 0LL;
  }
  unint64_t result = 0LL;
  unint64_t v6 = 0LL;
  BOOL v7 = &a1[a2];
  while (*a1 - 48 < 0xA)
  {
    unint64_t v8 = (*a1 - 48);
    unint64_t v9 = !is_mul_ok(v6, 0xAuLL);
    BOOL v10 = (__PAIR128__(v6, result) * 0xA) >> 64;
    BOOL v11 = __CFADD__((result * (unsigned __int128)0xAuLL) >> 64, 10 * v6) || v9;
    unint64_t v12 = 10 * result;
    char v13 = __PAIR128__(v6, result) * 0xA + (*a1 - 48);
    unint64_t v14 = __CFADD__(__CFADD__(10 * result, v8), v10);
    char v15 = v12 >= v8;
    char v16 = v12 - v8;
    unint64_t v18 = v15;
    char v15 = v10 >= !v15;
    uint64_t v17 = v10 - !v18;
    uint64_t v19 = !v15;
    if ((a3 & 1) != 0) {
      unint64_t v14 = v19;
    }
    unint64_t result = 0LL;
    if ((v11 & 1) == 0 && !v14)
    {
      unint64_t v6 = (a3 & 1) != 0 ? v17 : *((void *)&v13 + 1);
      unint64_t result = (a3 & 1) != 0 ? v16 : v13;
      if (++a1 < v7) {
        continue;
      }
    }

    return result;
  }

  return 0LL;
}

uint64_t specialized _parseIntegerDigits<A>(_:isNegative:)(_BYTE *a1, uint64_t a2, char a3)
{
  if (a2)
  {
    if (a2 < 1) {
      return 0LL;
    }
    uint64_t result = 0LL;
    uint64_t v5 = &a1[a2];
    while (*a1 - 48 <= 9)
    {
      uint64_t v6 = (*a1 - 48);
      uint64_t v7 = 10 * result;
      BOOL v8 = (unsigned __int128)(result * (__int128)10LL) >> 64 != (10 * result) >> 63;
      uint64_t v9 = 10 * result + v6;
      BOOL v10 = __OFADD__(10 * result, v6);
      BOOL v11 = __OFSUB__(v7, v6);
      uint64_t v12 = v7 - v6;
      char v13 = v11;
      if ((a3 & 1) == 0) {
        char v13 = v10;
      }
      uint64_t result = 0LL;
      if (!v8 && (v13 & 1) == 0)
      {
        uint64_t result = (a3 & 1) != 0 ? v12 : v9;
        if (++a1 < v5) {
          continue;
        }
      }

      return result;
    }
  }

  return 0LL;
}

{
  unsigned int v3;
  _BYTE *v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  if (a2)
  {
    if (a2 < 1)
    {
      LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      BOOL v8 = 0;
    }

    else
    {
      LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      uint64_t v4 = &a1[a2];
      while (*a1 - 48 <= 9)
      {
        uint64_t v5 = (*a1 - 48);
        uint64_t v6 = 10 * (unsigned __int16)v3;
        uint64_t v7 = (v6 & 0xF0000) != 0;
        if ((a3 & 1) != 0)
        {
          unint64_t v3 = (unsigned __int16)v6 - v5;
          if (v7 || (v3 & 0xFFFF0000) != 0) {
            break;
          }
        }

        else
        {
          unint64_t v3 = v5 + (unsigned __int16)v6;
          if (((v7 | HIWORD(v3)) & 1) != 0) {
            break;
          }
        }

        BOOL v8 = 0;
        if (++a1 >= v4) {
          return (unsigned __int16)v3 | (v8 << 16);
        }
      }

      LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      BOOL v8 = 1;
    }
  }

  else
  {
    LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
    BOOL v8 = 1;
  }

  return (unsigned __int16)v3 | (v8 << 16);
}

{
  int v3;
  _BYTE *v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  if (a2)
  {
    if (a2 < 1)
    {
      LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      BOOL v8 = 0;
    }

    else
    {
      LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      uint64_t v4 = &a1[a2];
      while (*a1 - 48 <= 9)
      {
        uint64_t v5 = (*a1 - 48);
        uint64_t v6 = 10 * (__int16)v3;
        uint64_t v7 = v6 != (__int16)v6;
        unint64_t v3 = (a3 & 1) != 0 ? (__int16)v6 - v5 : v5 + (__int16)v6;
        BOOL v8 = 0;
        if (++a1 >= v4) {
          return (unsigned __int16)v3 | (v8 << 16);
        }
      }

      LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      BOOL v8 = 1;
    }
  }

  else
  {
    LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
    BOOL v8 = 1;
  }

  return (unsigned __int16)v3 | (v8 << 16);
}

uint64_t specialized _parseIntegerDigits<A>(_:isNegative:)(unsigned __int8 *a1, uint64_t a2, char a3)
{
  if (a2)
  {
    if (a2 < 1)
    {
      LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      int v8 = 0;
    }

    else
    {
      LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      uint64_t v4 = &a1[a2];
      while (1)
      {
        unsigned int v5 = *a1 - 48;
        if (v5 > 9) {
          break;
        }
        __int16 v6 = 10 * v3;
        BOOL v7 = (v6 & 0xF00) != 0;
        if ((a3 & 1) != 0)
        {
          unsigned int v3 = v6 - v5;
          if (v7 || (v3 & 0xFFFFFF00) != 0) {
            break;
          }
        }

        else
        {
          unsigned int v3 = v6 + v5;
          if (((v7 | (v3 >> 8)) & 1) != 0) {
            break;
          }
        }

        int v8 = 0;
        if (++a1 >= v4) {
          return v3 | (v8 << 8);
        }
      }

      LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      int v8 = 1;
    }
  }

  else
  {
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
    int v8 = 1;
  }

  return v3 | (v8 << 8);
}

{
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  int v8;
  if (a2)
  {
    if (a2 < 1)
    {
      LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      int v8 = 0;
    }

    else
    {
      LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      uint64_t v4 = &a1[a2];
      while (1)
      {
        unsigned int v5 = *a1 - 48;
        if (v5 > 9) {
          break;
        }
        __int16 v6 = 10 * (char)v3;
        BOOL v7 = v6 != (char)v6;
        unsigned int v3 = (a3 & 1) != 0 ? (char)v6 - (char)v5 : (char)v6 + (char)v5;
        int v8 = 0;
        if (++a1 >= v4) {
          return v3 | (v8 << 8);
        }
      }

      LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      int v8 = 1;
    }
  }

  else
  {
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
    int v8 = 1;
  }

  return v3 | (v8 << 8);
}

{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  if (!a2) {
    return 0LL;
  }
  if (a2 < 1) {
    return 0LL;
  }
  unsigned int v3 = 0LL;
  uint64_t v4 = 0LL;
  unsigned int v5 = &a1[a2];
  while (1)
  {
    __int16 v6 = *a1 - 48;
    if (v6 >= 0xA) {
      return 0LL;
    }
    if ((v4 & 0x8000000000000000LL) == 0)
    {
      BOOL v7 = !is_mul_ok(v4, 0xAuLL);
      int v8 = __CFADD__(((unint64_t)v3 * (unsigned __int128)0xAuLL) >> 64, 10 * v4);
      uint64_t v9 = (__PAIR128__(v4, v3) * 0xA) >> 64;
      if (v8) {
        BOOL v7 = 1;
      }
      BOOL v10 = 10 * v3;
      if (!v7)
      {
        BOOL v11 = v9 >> 63;
        if ((a3 & 1) != 0) {
          goto LABEL_17;
        }
        goto LABEL_11;
      }

uint64_t specialized Double.init<A>(exactly:)(uint64_t result)
{
  double v1 = (double)result;
  if ((double)result >= 9.22337204e18)
  {
    *(double *)&uint64_t result = 0.0;
    return result;
  }

  if ((~*(void *)&v1 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v1 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return result;
  }

  else {
    *(double *)&uint64_t result = 0.0;
  }
  return result;
}

unint64_t specialized Double.init<A>(exactly:)(unint64_t result)
{
  double v1 = (double)result;
  if ((double)result >= 1.84467441e19)
  {
    *(double *)&uint64_t result = 0.0;
  }

  else if ((~*(void *)&v1 & 0x7FF0000000000000LL) != 0)
  {
    else {
      *(double *)&uint64_t result = 0.0;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t *specialized String.withUTF8<A>(_:)(uint64_t *result, size_t __n, void *__s1)
{
  uint64_t v5 = *result;
  unint64_t v6 = result[1];
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    v14[0] = v5;
    v14[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(v6) & 0xF) == __n)
    {
      uint64_t v9 = v14;
      int v8 = __s1;
      return (uint64_t *)(memcmp(v8, v9, __n) == 0);
    }

    return 0LL;
  }

  BOOL v10 = result;
  uint64_t v5 = static String._copying(_:)();
  uint64_t v12 = v11;
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  *BOOL v10 = v5;
  v10[1] = v12;
  unint64_t v6 = v12;
  if ((v12 & 0x2000000000000000LL) != 0) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000LL) == 0)
  {
    uint64_t result = (uint64_t *)_StringObject.sharedUTF8.getter();
    BOOL v7 = result;
    if (v13 == __n) {
      goto LABEL_5;
    }
    return 0LL;
  }

  BOOL v7 = (uint64_t *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  if ((v5 & 0xFFFFFFFFFFFFLL) != __n) {
    return 0LL;
  }
LABEL_5:
  if (v7)
  {
    int v8 = __s1;
    uint64_t v9 = v7;
    return (uint64_t *)(memcmp(v8, v9, __n) == 0);
  }

  __break(1u);
  return result;
}

uint64_t specialized _parseJSON5Integer<A>(_:isHex:)( _BYTE *a1, uint64_t a2, char a3, uint64_t (*a4)(_BYTE *, uint64_t, uint64_t))
{
  if (!a2) {
    return 0LL;
  }
  int v5 = *a1;
  if (v5 == 43)
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    if (v5 != 45)
    {
      uint64_t v6 = 0LL;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
        goto LABEL_14;
      }

      return specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v6);
    }

    uint64_t v6 = 1LL;
  }

  if (a2 >= 1) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = a2;
  }
  a1 += v7;
  a2 -= v7;
  if ((a3 & 1) != 0)
  {
    if (a2 > 2)
    {
LABEL_11:
      uint64_t v8 = 2LL;
      return a4(&a1[v8], a2 - v8, v6);
    }

uint64_t specialized _parseJSON5Integer<A>(_:isHex:)( unsigned __int8 *a1, uint64_t a2, char a3, uint64_t (*a4)(unsigned __int8 *, uint64_t, uint64_t), uint64_t (*a5)(unsigned __int8 *, uint64_t, uint64_t))
{
  if (!a2) {
    return 0LL;
  }
  int v6 = *a1;
  if (v6 == 43)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    if (v6 != 45)
    {
      uint64_t v7 = 0LL;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
        goto LABEL_14;
      }

      return a5(a1, a2, v7);
    }

    uint64_t v7 = 1LL;
  }

  if (a2 >= 1) {
    uint64_t v8 = 1LL;
  }
  else {
    uint64_t v8 = a2;
  }
  a1 += v8;
  a2 -= v8;
  if ((a3 & 1) != 0)
  {
    if (a2 > 2)
    {
LABEL_11:
      uint64_t v9 = 2LL;
      return a4(&a1[v9], a2 - v9, v7);
    }

{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  if (!a2) {
    return 0LL;
  }
  int v6 = *a1;
  if (v6 == 43)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    if (v6 != 45)
    {
      uint64_t v7 = 0LL;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
        goto LABEL_14;
      }

      return a5(a1, a2, v7);
    }

    uint64_t v7 = 1LL;
  }

  if (a2 >= 1) {
    uint64_t v8 = 1LL;
  }
  else {
    uint64_t v8 = a2;
  }
  a1 += v8;
  a2 -= v8;
  if ((a3 & 1) != 0)
  {
    if (a2 >= 3)
    {
LABEL_11:
      uint64_t v9 = 2LL;
      return a4(&a1[v9], a2 - v9, v7);
    }

uint64_t specialized _parseJSON5Integer<A>(_:isHex:)(unsigned __int8 *a1, uint64_t a2, char a3)
{
  if (!a2)
  {
    LOBYTE(v8) = 0;
    int v9 = 1;
    return v8 | (v9 << 8);
  }

  int v4 = *a1;
  if (v4 == 43)
  {
    char v5 = 0;
  }

  else
  {
    if (v4 != 45)
    {
      char v5 = 0;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
LABEL_14:
        uint64_t v7 = a2;
        goto LABEL_15;
      }

{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  if (!a2)
  {
    LOBYTE(v8) = 0;
    int v9 = 1;
    return v8 | (v9 << 8);
  }

  int v4 = *a1;
  if (v4 == 43)
  {
    char v5 = 0;
  }

  else
  {
    if (v4 != 45)
    {
      char v5 = 0;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
LABEL_14:
        uint64_t v7 = a2;
        goto LABEL_15;
      }

uint64_t specialized _parseJSON5Integer<A>(_:isHex:)(_BYTE *a1, uint64_t a2, char a3)
{
  if (!a2)
  {
    LOWORD(v8) = 0;
    int v9 = 1;
    return (unsigned __int16)v8 | (v9 << 16);
  }

  int v4 = *a1;
  if (v4 == 43)
  {
    char v5 = 0;
  }

  else
  {
    if (v4 != 45)
    {
      char v5 = 0;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
LABEL_14:
        uint64_t v7 = a2;
        goto LABEL_15;
      }

{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  if (!a2)
  {
    LOWORD(v8) = 0;
    int v9 = 1;
    return (unsigned __int16)v8 | (v9 << 16);
  }

  int v4 = *a1;
  if (v4 == 43)
  {
    char v5 = 0;
  }

  else
  {
    if (v4 != 45)
    {
      char v5 = 0;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
LABEL_14:
        uint64_t v7 = a2;
        goto LABEL_15;
      }

unint64_t specialized _parseJSON5Integer<A>(_:isHex:)( unsigned __int8 *a1, uint64_t a2, char a3, uint64_t (*a4)(unsigned __int8 *, uint64_t, uint64_t), uint64_t (*a5)(unsigned __int8 *, uint64_t, uint64_t))
{
  if (!a2)
  {
    LODWORD(v10) = 0;
    LOBYTE(v11) = 1;
    return v10 | ((unint64_t)v11 << 32);
  }

  int v6 = *a1;
  if (v6 == 43)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    if (v6 != 45)
    {
      uint64_t v7 = 0LL;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2) {
          goto LABEL_11;
        }
LABEL_14:
        uint64_t v9 = a2;
        goto LABEL_15;
      }

uint64_t specialized _parseInteger<A>(_:)(unsigned __int8 *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a1;
    int v3 = *a1;
    if (v3 == 43)
    {
      if (a2 >= 2)
      {
        uint64_t v14 = 0LL;
        char v15 = &a1[a2];
        char v16 = a1 + 1;
        while (1)
        {
          unsigned int v17 = *v16 - 48;
          if (v17 > 9) {
            break;
          }
          uint64_t result = 0LL;
          uint64_t v18 = (unsigned __int128)(v14 * (__int128)10LL) >> 64;
          uint64_t v19 = 10 * v14;
          BOOL v20 = v18 != v19 >> 63;
          BOOL v12 = __OFADD__(v19, v17);
          uint64_t v14 = v19 + v17;
          char v21 = v12;
          if (!v20 && (v21 & 1) == 0)
          {
            ++v16;
            uint64_t result = v14;
            if (v16 < v15) {
              continue;
            }
          }

          return result;
        }
      }
    }

    else if (v3 == 45)
    {
      if (a2 >= 2)
      {
        uint64_t v4 = 0LL;
        char v5 = &a1[a2];
        int v6 = a1 + 1;
        while (1)
        {
          unsigned int v7 = *v6 - 48;
          if (v7 > 9) {
            break;
          }
          uint64_t result = 0LL;
          uint64_t v9 = (unsigned __int128)(v4 * (__int128)10LL) >> 64;
          uint64_t v10 = 10 * v4;
          BOOL v11 = v9 != v10 >> 63;
          BOOL v12 = __OFSUB__(v10, v7);
          uint64_t v4 = v10 - v7;
          char v13 = v12;
          if (!v11 && (v13 & 1) == 0)
          {
            ++v6;
            uint64_t result = v4;
            if (v6 < v5) {
              continue;
            }
          }

          return result;
        }
      }
    }

    else
    {
      if (a2 < 1) {
        return 0LL;
      }
      uint64_t v22 = 0LL;
      unint64_t v23 = &a1[a2];
      while (1)
      {
        unsigned int v24 = *v2 - 48;
        if (v24 > 9) {
          break;
        }
        uint64_t result = 0LL;
        uint64_t v25 = (unsigned __int128)(v22 * (__int128)10LL) >> 64;
        uint64_t v26 = 10 * v22;
        BOOL v27 = v25 != v26 >> 63;
        BOOL v12 = __OFADD__(v26, v24);
        uint64_t v22 = v26 + v24;
        char v28 = v12;
        if (!v27 && (v28 & 1) == 0)
        {
          ++v2;
          uint64_t result = v22;
          if (v2 < v23) {
            continue;
          }
        }

        return result;
      }
    }
  }

  return 0LL;
}

{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int8 v6;
  __int16 v7;
  int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  __int16 v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  __int16 v16;
  if (!a2)
  {
    int v6 = 0;
    uint64_t v8 = 1;
    return v6 | (v8 << 8);
  }

  uint64_t v2 = *a1;
  if (v2 == 43)
  {
    if (a2 >= 2)
    {
      LOBYTE(v9) = 0;
      uint64_t v10 = a1 + 1;
      while (1)
      {
        BOOL v11 = *v10 - 48;
        if (v11 > 9) {
          break;
        }
        int v6 = 0;
        BOOL v12 = 10 * v9;
        uint64_t v8 = 1;
        if ((v12 & 0xF00) == 0)
        {
          uint64_t v9 = (v12 & 0xFE) + v11;
          if (((v9 >> 8) & 1) == 0)
          {
            uint64_t v8 = 0;
            ++v10;
            int v6 = v9;
            if (v10 < &a1[a2]) {
              continue;
            }
          }
        }

        return v6 | (v8 << 8);
      }
    }
  }

  else if (v2 == 45)
  {
    if (a2 >= 2)
    {
      LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      uint64_t v4 = a1 + 1;
      while (1)
      {
        char v5 = *v4 - 48;
        if (v5 > 9) {
          break;
        }
        int v6 = 0;
        unsigned int v7 = 10 * v3;
        int v3 = (10 * v3) - v5;
        uint64_t v8 = 1;
        if ((v7 & 0xF00) == 0 && (v3 & 0xFFFFFF00) == 0)
        {
          uint64_t v8 = 0;
          ++v4;
          int v6 = v3;
          if (v4 < &a1[a2]) {
            continue;
          }
        }

        return v6 | (v8 << 8);
      }
    }
  }

  else
  {
    if (a2 < 1)
    {
      int v6 = 0;
      uint64_t v8 = 0;
      return v6 | (v8 << 8);
    }

    LOBYTE(v13) = 0;
    uint64_t v14 = &a1[a2];
    while (1)
    {
      char v15 = *a1 - 48;
      if (v15 > 9) {
        break;
      }
      int v6 = 0;
      char v16 = 10 * v13;
      uint64_t v8 = 1;
      if ((v16 & 0xF00) == 0)
      {
        char v13 = (v16 & 0xFE) + v15;
        if (((v13 >> 8) & 1) == 0)
        {
          uint64_t v8 = 0;
          ++a1;
          int v6 = v13;
          if (a1 < v14) {
            continue;
          }
        }
      }

      return v6 | (v8 << 8);
    }
  }

  int v6 = 0;
  uint64_t v8 = 1;
  return v6 | (v8 << 8);
}

{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int16 v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  if (!a2)
  {
    int v6 = 0;
    uint64_t v8 = 1;
    return v6 | (v8 << 16);
  }

  uint64_t v2 = *a1;
  if (v2 == 43)
  {
    if (a2 >= 2)
    {
      LOWORD(v9) = 0;
      uint64_t v10 = a1 + 1;
      while (1)
      {
        BOOL v11 = *v10 - 48;
        if (v11 > 9) {
          break;
        }
        int v6 = 0;
        BOOL v12 = 10 * (unsigned __int16)v9;
        uint64_t v8 = 1;
        if ((v12 & 0xF0000) == 0)
        {
          uint64_t v9 = (v12 & 0xFFFE) + v11;
          if ((v9 & 0x10000) == 0)
          {
            uint64_t v8 = 0;
            ++v10;
            int v6 = v9;
            if (v10 < &a1[a2]) {
              continue;
            }
          }
        }

        return v6 | (v8 << 16);
      }
    }
  }

  else if (v2 == 45)
  {
    if (a2 >= 2)
    {
      LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      uint64_t v4 = a1 + 1;
      while (1)
      {
        char v5 = *v4 - 48;
        if (v5 > 9) {
          break;
        }
        int v6 = 0;
        unsigned int v7 = 10 * (unsigned __int16)v3;
        int v3 = (unsigned __int16)(10 * v3) - v5;
        uint64_t v8 = 1;
        if ((v7 & 0xF0000) == 0 && (v3 & 0xFFFF0000) == 0)
        {
          uint64_t v8 = 0;
          ++v4;
          int v6 = v3;
          if (v4 < &a1[a2]) {
            continue;
          }
        }

        return v6 | (v8 << 16);
      }
    }
  }

  else
  {
    if (a2 < 1)
    {
      int v6 = 0;
      uint64_t v8 = 0;
      return v6 | (v8 << 16);
    }

    LOWORD(v13) = 0;
    uint64_t v14 = &a1[a2];
    while (1)
    {
      char v15 = *a1 - 48;
      if (v15 > 9) {
        break;
      }
      int v6 = 0;
      char v16 = 10 * (unsigned __int16)v13;
      uint64_t v8 = 1;
      if ((v16 & 0xF0000) == 0)
      {
        char v13 = (v16 & 0xFFFE) + v15;
        if ((v13 & 0x10000) == 0)
        {
          uint64_t v8 = 0;
          ++a1;
          int v6 = v13;
          if (a1 < v14) {
            continue;
          }
        }
      }

      return v6 | (v8 << 16);
    }
  }

  int v6 = 0;
  uint64_t v8 = 1;
  return v6 | (v8 << 16);
}

{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int8 v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  if (!a2)
  {
    int v6 = 0;
    uint64_t v10 = 1;
    return v6 | (v10 << 8);
  }

  uint64_t v2 = *a1;
  if (v2 == 43)
  {
    if (a2 >= 2)
    {
      LOBYTE(v11) = 0;
      BOOL v12 = a1 + 1;
      while (1)
      {
        char v13 = *v12 - 48;
        if (v13 > 9) {
          break;
        }
        int v6 = 0;
        uint64_t v14 = 10 * (char)v11;
        char v15 = (char)(10 * v11);
        BOOL v11 = v15 + (char)v13;
        char v16 = v11 != (char)(v15 + v13);
        uint64_t v10 = 1;
        if (v15 == v14 && !v16)
        {
          uint64_t v10 = 0;
          ++v12;
          int v6 = v11;
          if (v12 < &a1[a2]) {
            continue;
          }
        }

        return v6 | (v10 << 8);
      }
    }
  }

  else if (v2 == 45)
  {
    if (a2 >= 2)
    {
      LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      uint64_t v4 = a1 + 1;
      while (1)
      {
        char v5 = *v4 - 48;
        if (v5 > 9) {
          break;
        }
        int v6 = 0;
        unsigned int v7 = 10 * (char)v3;
        uint64_t v8 = (char)(10 * v3);
        int v3 = v8 - (char)v5;
        uint64_t v9 = v3 != (char)(v8 - v5);
        uint64_t v10 = 1;
        if (v8 == v7 && !v9)
        {
          uint64_t v10 = 0;
          ++v4;
          int v6 = v3;
          if (v4 < &a1[a2]) {
            continue;
          }
        }

        return v6 | (v10 << 8);
      }
    }
  }

  else
  {
    if (a2 < 1)
    {
      int v6 = 0;
      uint64_t v10 = 0;
      return v6 | (v10 << 8);
    }

    LOBYTE(v17) = 0;
    uint64_t v18 = &a1[a2];
    while (1)
    {
      uint64_t v19 = *a1 - 48;
      if (v19 > 9) {
        break;
      }
      int v6 = 0;
      BOOL v20 = 10 * (char)v17;
      char v21 = (char)(10 * v17);
      unsigned int v17 = v21 + (char)v19;
      uint64_t v22 = v17 != (char)(v21 + v19);
      uint64_t v10 = 1;
      if (v21 == v20 && !v22)
      {
        uint64_t v10 = 0;
        ++a1;
        int v6 = v17;
        if (a1 < v18) {
          continue;
        }
      }

      return v6 | (v10 << 8);
    }
  }

  int v6 = 0;
  uint64_t v10 = 1;
  return v6 | (v10 << 8);
}

{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int16 v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  if (!a2)
  {
    int v6 = 0;
    uint64_t v10 = 1;
    return v6 | (v10 << 16);
  }

  uint64_t v2 = *a1;
  if (v2 == 43)
  {
    if (a2 >= 2)
    {
      LOWORD(v11) = 0;
      BOOL v12 = a1 + 1;
      while (1)
      {
        char v13 = *v12 - 48;
        if (v13 > 9) {
          break;
        }
        int v6 = 0;
        uint64_t v14 = 10 * (__int16)v11;
        char v15 = (__int16)(10 * v11);
        BOOL v11 = v15 + v13;
        char v16 = v11 != (__int16)(v15 + v13);
        uint64_t v10 = 1;
        if (v15 == v14 && !v16)
        {
          uint64_t v10 = 0;
          ++v12;
          int v6 = v11;
          if (v12 < &a1[a2]) {
            continue;
          }
        }

        return v6 | (v10 << 16);
      }
    }
  }

  else if (v2 == 45)
  {
    if (a2 >= 2)
    {
      LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      uint64_t v4 = a1 + 1;
      while (1)
      {
        char v5 = *v4 - 48;
        if (v5 > 9) {
          break;
        }
        int v6 = 0;
        unsigned int v7 = 10 * (__int16)v3;
        uint64_t v8 = (__int16)(10 * v3);
        int v3 = v8 - v5;
        uint64_t v9 = v3 != (__int16)(v8 - v5);
        uint64_t v10 = 1;
        if (v8 == v7 && !v9)
        {
          uint64_t v10 = 0;
          ++v4;
          int v6 = v3;
          if (v4 < &a1[a2]) {
            continue;
          }
        }

        return v6 | (v10 << 16);
      }
    }
  }

  else
  {
    if (a2 < 1)
    {
      int v6 = 0;
      uint64_t v10 = 0;
      return v6 | (v10 << 16);
    }

    LOWORD(v17) = 0;
    uint64_t v18 = &a1[a2];
    while (1)
    {
      uint64_t v19 = *a1 - 48;
      if (v19 > 9) {
        break;
      }
      int v6 = 0;
      BOOL v20 = 10 * (__int16)v17;
      char v21 = (__int16)(10 * v17);
      unsigned int v17 = v21 + v19;
      uint64_t v22 = v17 != (__int16)(v21 + v19);
      uint64_t v10 = 1;
      if (v21 == v20 && !v22)
      {
        uint64_t v10 = 0;
        ++a1;
        int v6 = v17;
        if (a1 < v18) {
          continue;
        }
      }

      return v6 | (v10 << 16);
    }
  }

  int v6 = 0;
  uint64_t v10 = 1;
  return v6 | (v10 << 16);
}

{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  if (!a2) {
    return 0LL;
  }
  uint64_t v2 = a1;
  int v3 = *a1;
  if (v3 == 43)
  {
    if (a2 >= 2)
    {
      unint64_t v23 = 0LL;
      unsigned int v24 = 0LL;
      uint64_t v25 = &a1[a2];
      uint64_t v26 = a1 + 1;
      while (1)
      {
        BOOL v27 = *v26 - 48;
        if (v27 > 9) {
          break;
        }
        if ((v24 & 0x8000000000000000LL) != 0)
        {
          uint64_t v10 = v23 == 0;
          int v32 = -v23;
          int v33 = -(uint64_t)(v24 + !v10);
          int v34 = !is_mul_ok(v33, 0xAuLL);
          uint64_t v10 = __CFADD__(((unint64_t)v32 * (unsigned __int128)0xAuLL) >> 64, 10 * v33);
          __int128 v35 = (__PAIR128__(v33, v32) * 0xA) >> 64;
          if (v10) {
            int v34 = 1;
          }
          if (v34) {
            return 0LL;
          }
          __int128 v36 = 10 * v32;
          uint64_t v10 = v36 == 0;
          unint64_t v30 = -v36;
          uint64_t v29 = -(v35 + !v10);
          LOBYTE(v31) = v30 != 0;
        }

        else
        {
          char v28 = !is_mul_ok(v24, 0xAuLL);
          uint64_t v10 = __CFADD__(((unint64_t)v23 * (unsigned __int128)0xAuLL) >> 64, 10 * v24);
          uint64_t v29 = (__PAIR128__(v24, v23) * 0xA) >> 64;
          if (v10) {
            char v28 = 1;
          }
          if (v28) {
            return 0LL;
          }
          unint64_t v30 = 10 * v23;
          unsigned int v31 = v29 >> 63;
        }

        uint64_t result = 0LL;
        char v21 = __OFADD__(__CFADD__(v30, v27), v29);
        unsigned int v24 = (__PAIR128__(v29, v30) + v27) >> 64;
        unint64_t v23 = v30 + v27;
        __int128 v37 = v21;
        if ((v31 & 1) != 0 || (v37 & 1) != 0) {
          return result;
        }
        if (++v26 >= v25) {
          return v23;
        }
      }
    }
  }

  else if (v3 == 45)
  {
    if (a2 >= 2)
    {
      uint64_t v4 = 0LL;
      char v5 = 0LL;
      int v6 = &a1[a2];
      unsigned int v7 = a1 + 1;
      while (1)
      {
        uint64_t v8 = *v7 - 48;
        if (v8 > 9) {
          break;
        }
        if ((v5 & 0x8000000000000000LL) != 0)
        {
          uint64_t v10 = v4 == 0;
          uint64_t v14 = -v4;
          char v15 = -(uint64_t)(v5 + !v10);
          char v16 = !is_mul_ok(v15, 0xAuLL);
          uint64_t v10 = __CFADD__((v14 * (unsigned __int128)0xAuLL) >> 64, 10 * v15);
          unsigned int v17 = (__PAIR128__(v15, v14) * 0xA) >> 64;
          if (v10) {
            char v16 = 1;
          }
          if (v16) {
            return 0LL;
          }
          uint64_t v18 = 10 * v14;
          uint64_t v10 = v18 == 0;
          BOOL v12 = -v18;
          BOOL v11 = -(v17 + !v10);
          LOBYTE(v13) = v12 != 0;
        }

        else
        {
          uint64_t v9 = !is_mul_ok(v5, 0xAuLL);
          uint64_t v10 = __CFADD__(((unint64_t)v4 * (unsigned __int128)0xAuLL) >> 64, 10 * v5);
          BOOL v11 = (__PAIR128__(v5, v4) * 0xA) >> 64;
          if (v10) {
            uint64_t v9 = 1;
          }
          if (v9) {
            return 0LL;
          }
          BOOL v12 = 10 * v4;
          char v13 = v11 >> 63;
        }

        uint64_t result = 0LL;
        char v21 = __OFSUB__(__PAIR128__(v11, v12), v8);
        BOOL v20 = v12 - v8;
        char v5 = (__PAIR128__(v11, v12) - v8) >> 64;
        uint64_t v4 = v20;
        uint64_t v22 = v21;
        if ((v13 & 1) != 0 || (v22 & 1) != 0) {
          return result;
        }
        if (++v7 >= v6) {
          return v20;
        }
      }
    }
  }

  else
  {
    if (a2 < 1) {
      return 0LL;
    }
    unint64_t v23 = 0LL;
    __int128 v38 = 0LL;
    unint64_t v39 = &a1[a2];
    while (1)
    {
      unint64_t v40 = *v2 - 48;
      if (v40 > 9) {
        break;
      }
      if ((v38 & 0x8000000000000000LL) != 0)
      {
        uint64_t v10 = v23 == 0;
        int v45 = -v23;
        unsigned int v46 = -(uint64_t)(v38 + !v10);
        uint64_t v47 = !is_mul_ok(v46, 0xAuLL);
        uint64_t v10 = __CFADD__(((unint64_t)v45 * (unsigned __int128)0xAuLL) >> 64, 10 * v46);
        unint64_t v48 = (__PAIR128__(v46, v45) * 0xA) >> 64;
        if (v10) {
          uint64_t v47 = 1;
        }
        if (v47) {
          return 0LL;
        }
        uint64_t v49 = 10 * v45;
        uint64_t v10 = v49 == 0;
        uint64_t v43 = -v49;
        unint64_t v42 = -(v48 + !v10);
        LOBYTE(v44) = v43 != 0;
      }

      else
      {
        unint64_t v41 = !is_mul_ok(v38, 0xAuLL);
        uint64_t v10 = __CFADD__(((unint64_t)v23 * (unsigned __int128)0xAuLL) >> 64, 10 * v38);
        unint64_t v42 = (__PAIR128__(v38, v23) * 0xA) >> 64;
        if (v10) {
          unint64_t v41 = 1;
        }
        if (v41) {
          return 0LL;
        }
        uint64_t v43 = 10 * v23;
        int v44 = v42 >> 63;
      }

      uint64_t result = 0LL;
      char v21 = __OFADD__(__CFADD__(v43, v40), v42);
      __int128 v38 = (__PAIR128__(v42, v43) + v40) >> 64;
      unint64_t v23 = v43 + v40;
      uint64_t v50 = v21;
      if ((v44 & 1) != 0 || (v50 & 1) != 0) {
        return result;
      }
      if (++v2 >= v39) {
        return v23;
      }
    }
  }

  return 0LL;
}

{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t result;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  if (!a2) {
    return 0LL;
  }
  uint64_t v2 = a1;
  int v3 = *a1;
  if (v3 == 43)
  {
    if (a2 >= 2)
    {
      uint64_t v4 = 0LL;
      char v16 = 0LL;
      unsigned int v17 = &a1[a2];
      uint64_t v18 = a1 + 1;
      while (1)
      {
        uint64_t v19 = *v18 - 48;
        if (v19 > 9) {
          break;
        }
        uint64_t result = 0LL;
        BOOL v20 = !is_mul_ok(v16, 0xAuLL);
        BOOL v11 = __CFADD__(((unint64_t)v4 * (unsigned __int128)0xAuLL) >> 64, 10 * v16);
        char v21 = (__PAIR128__(v16, v4) * 0xA) >> 64;
        if (v11) {
          BOOL v20 = 1;
        }
        uint64_t v22 = 10 * v4;
        BOOL v11 = __CFADD__(v22, v19);
        uint64_t v4 = v22 + v19;
        unint64_t v23 = v11;
        BOOL v11 = __CFADD__(v11, v21);
        char v16 = v23 + v21;
        unsigned int v24 = v11;
        if (v20 || (v24 & 1) != 0) {
          return result;
        }
        if (++v18 >= v17) {
          return v4;
        }
      }
    }
  }

  else if (v3 == 45)
  {
    if (a2 >= 2)
    {
      uint64_t v4 = 0LL;
      char v5 = 0LL;
      int v6 = &a1[a2];
      unsigned int v7 = a1 + 1;
      while (1)
      {
        uint64_t v8 = *v7 - 48;
        if (v8 > 9) {
          break;
        }
        uint64_t result = 0LL;
        uint64_t v10 = !is_mul_ok(v5, 0xAuLL);
        BOOL v11 = __CFADD__(((unint64_t)v4 * (unsigned __int128)0xAuLL) >> 64, 10 * v5);
        BOOL v12 = (__PAIR128__(v5, v4) * 0xA) >> 64;
        if (v11) {
          uint64_t v10 = 1;
        }
        char v13 = 10 * v4;
        BOOL v11 = v13 >= v8;
        uint64_t v4 = v13 - v8;
        uint64_t v14 = v11;
        BOOL v11 = v12 >= !v11;
        char v5 = v12 - !v14;
        char v15 = !v11;
        if (v10 || (v15 & 1) != 0) {
          return result;
        }
        if (++v7 >= v6) {
          return v4;
        }
      }
    }
  }

  else
  {
    if (a2 < 1) {
      return 0LL;
    }
    uint64_t v4 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v26 = &a1[a2];
    while (1)
    {
      BOOL v27 = *v2 - 48;
      if (v27 > 9) {
        break;
      }
      uint64_t result = 0LL;
      char v28 = !is_mul_ok(v25, 0xAuLL);
      BOOL v11 = __CFADD__(((unint64_t)v4 * (unsigned __int128)0xAuLL) >> 64, 10 * v25);
      uint64_t v29 = (__PAIR128__(v25, v4) * 0xA) >> 64;
      if (v11) {
        char v28 = 1;
      }
      unint64_t v30 = 10 * v4;
      BOOL v11 = __CFADD__(v30, v27);
      uint64_t v4 = v30 + v27;
      unsigned int v31 = v11;
      BOOL v11 = __CFADD__(v11, v29);
      uint64_t v25 = v31 + v29;
      int v32 = v11;
      if (v28 || (v32 & 1) != 0) {
        return result;
      }
      if (++v2 >= v26) {
        return v4;
      }
    }
  }

  return 0LL;
}

unint64_t specialized _parseInteger<A>(_:)(unsigned __int8 *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a1;
    int v3 = *a1;
    if (v3 == 43)
    {
      if (a2 >= 2)
      {
        unint64_t v13 = 0LL;
        uint64_t v14 = &a1[a2];
        char v15 = a1 + 1;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            break;
          }
          unint64_t result = 0LL;
          BOOL v17 = !is_mul_ok(v13, 0xAuLL);
          uint64_t v18 = 10 * v13;
          BOOL v11 = __CFADD__(v18, v16);
          unint64_t v13 = v18 + v16;
          char v19 = v11;
          if (!v17 && (v19 & 1) == 0)
          {
            ++v15;
            unint64_t result = v13;
            if (v15 < v14) {
              continue;
            }
          }

          return result;
        }
      }
    }

    else if (v3 == 45)
    {
      if (a2 >= 2)
      {
        unint64_t v4 = 0LL;
        char v5 = &a1[a2];
        int v6 = a1 + 1;
        while (1)
        {
          unsigned int v7 = *v6 - 48;
          if (v7 > 9) {
            break;
          }
          unint64_t result = 0LL;
          BOOL v9 = !is_mul_ok(v4, 0xAuLL);
          unint64_t v10 = 10 * v4;
          BOOL v11 = v10 >= v7;
          unint64_t v4 = v10 - v7;
          char v12 = !v11;
          if (!v9 && (v12 & 1) == 0)
          {
            ++v6;
            unint64_t result = v4;
            if (v6 < v5) {
              continue;
            }
          }

          return result;
        }
      }
    }

    else
    {
      if (a2 < 1) {
        return 0LL;
      }
      unint64_t v20 = 0LL;
      char v21 = &a1[a2];
      while (1)
      {
        unsigned int v22 = *v2 - 48;
        if (v22 > 9) {
          break;
        }
        unint64_t result = 0LL;
        BOOL v23 = !is_mul_ok(v20, 0xAuLL);
        uint64_t v24 = 10 * v20;
        BOOL v11 = __CFADD__(v24, v22);
        unint64_t v20 = v24 + v22;
        char v25 = v11;
        if (!v23 && (v25 & 1) == 0)
        {
          ++v2;
          unint64_t result = v20;
          if (v2 < v21) {
            continue;
          }
        }

        return result;
      }
    }
  }

  return 0LL;
}

{
  int v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  char v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  if (a2)
  {
    uint64_t v2 = *a1;
    if (v2 == 43)
    {
      if (a2 >= 2)
      {
        char v12 = 0;
        unint64_t v13 = a1 + 1;
        while (1)
        {
          uint64_t v14 = *v13 - 48;
          if (v14 > 9) {
            break;
          }
          int v6 = 0;
          char v15 = 10LL * (int)v12;
          unsigned int v16 = v15 != (int)v15;
          BOOL v9 = __OFADD__((_DWORD)v15, v14);
          char v12 = v15 + v14;
          BOOL v17 = v9;
          BOOL v11 = 1;
          if (!v16 && (v17 & 1) == 0)
          {
            BOOL v11 = 0;
            ++v13;
            int v6 = v12;
            if (v13 < &a1[a2]) {
              continue;
            }
          }

          return v6 | ((unint64_t)v11 << 32);
        }
      }
    }

    else if (v2 == 45)
    {
      if (a2 >= 2)
      {
        int v3 = 0;
        unint64_t v4 = a1 + 1;
        while (1)
        {
          char v5 = *v4 - 48;
          if (v5 > 9) {
            break;
          }
          int v6 = 0;
          unsigned int v7 = 10LL * (int)v3;
          uint64_t v8 = v7 != (int)v7;
          BOOL v9 = __OFSUB__((_DWORD)v7, v5);
          int v3 = v7 - v5;
          unint64_t v10 = v9;
          BOOL v11 = 1;
          if (!v8 && (v10 & 1) == 0)
          {
            BOOL v11 = 0;
            ++v4;
            int v6 = v3;
            if (v4 < &a1[a2]) {
              continue;
            }
          }

          return v6 | ((unint64_t)v11 << 32);
        }
      }
    }

    else
    {
      if (a2 < 1)
      {
        int v6 = 0;
        BOOL v11 = 0;
        return v6 | ((unint64_t)v11 << 32);
      }

      uint64_t v18 = 0;
      char v19 = &a1[a2];
      while (1)
      {
        unint64_t v20 = *a1 - 48;
        if (v20 > 9) {
          break;
        }
        int v6 = 0;
        char v21 = 10LL * (int)v18;
        unsigned int v22 = v21 != (int)v21;
        BOOL v9 = __OFADD__((_DWORD)v21, v20);
        uint64_t v18 = v21 + v20;
        BOOL v23 = v9;
        BOOL v11 = 1;
        if (!v22 && (v23 & 1) == 0)
        {
          BOOL v11 = 0;
          ++a1;
          int v6 = v18;
          if (a1 < v19) {
            continue;
          }
        }

        return v6 | ((unint64_t)v11 << 32);
      }
    }
  }

  int v6 = 0;
  BOOL v11 = 1;
  return v6 | ((unint64_t)v11 << 32);
}

{
  int v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  char v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  if (a2)
  {
    uint64_t v2 = *a1;
    if (v2 == 43)
    {
      if (a2 >= 2)
      {
        char v12 = 0;
        unint64_t v13 = a1 + 1;
        while (1)
        {
          uint64_t v14 = *v13 - 48;
          if (v14 > 9) {
            break;
          }
          int v6 = 0;
          char v15 = 10LL * v12;
          unsigned int v16 = (v15 & 0xFFFFFFFF00000000LL) != 0;
          BOOL v9 = __CFADD__((_DWORD)v15, v14);
          char v12 = v15 + v14;
          BOOL v17 = v9;
          BOOL v11 = 1;
          if (!v16 && (v17 & 1) == 0)
          {
            BOOL v11 = 0;
            ++v13;
            int v6 = v12;
            if (v13 < &a1[a2]) {
              continue;
            }
          }

          return v6 | ((unint64_t)v11 << 32);
        }
      }
    }

    else if (v2 == 45)
    {
      if (a2 >= 2)
      {
        int v3 = 0;
        unint64_t v4 = a1 + 1;
        while (1)
        {
          char v5 = *v4 - 48;
          if (v5 > 9) {
            break;
          }
          int v6 = 0;
          unsigned int v7 = 10LL * v3;
          uint64_t v8 = (v7 & 0xFFFFFFFF00000000LL) != 0;
          BOOL v9 = v7 >= v5;
          int v3 = v7 - v5;
          unint64_t v10 = !v9;
          BOOL v11 = 1;
          if (!v8 && (v10 & 1) == 0)
          {
            BOOL v11 = 0;
            ++v4;
            int v6 = v3;
            if (v4 < &a1[a2]) {
              continue;
            }
          }

          return v6 | ((unint64_t)v11 << 32);
        }
      }
    }

    else
    {
      if (a2 < 1)
      {
        int v6 = 0;
        BOOL v11 = 0;
        return v6 | ((unint64_t)v11 << 32);
      }

      uint64_t v18 = 0;
      char v19 = &a1[a2];
      while (1)
      {
        unint64_t v20 = *a1 - 48;
        if (v20 > 9) {
          break;
        }
        int v6 = 0;
        char v21 = 10LL * v18;
        unsigned int v22 = (v21 & 0xFFFFFFFF00000000LL) != 0;
        BOOL v9 = __CFADD__((_DWORD)v21, v20);
        uint64_t v18 = v21 + v20;
        BOOL v23 = v9;
        BOOL v11 = 1;
        if (!v22 && (v23 & 1) == 0)
        {
          BOOL v11 = 0;
          ++a1;
          int v6 = v18;
          if (a1 < v19) {
            continue;
          }
        }

        return v6 | ((unint64_t)v11 << 32);
      }
    }
  }

  int v6 = 0;
  BOOL v11 = 1;
  return v6 | ((unint64_t)v11 << 32);
}

unint64_t specialized NSDecimal.init<A>(exactly:)(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      uint64_t v1 = 1LL;
      if (__ROR8__(0x3333333333333333LL * result, 1) <= 0x1999999999999999uLL)
      {
        unint64_t result = -(uint64_t)result;
        goto LABEL_9;
      }

      uint64_t v2 = 0LL;
      unint64_t result = -(uint64_t)result;
    }

    else
    {
      uint64_t v1 = 0LL;
      uint64_t v2 = 0LL;
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) < 0x199999999999999AuLL)
      {
LABEL_9:
        unsigned int v3 = 0;
        do
        {
          uint64_t v2 = v3 + 1;
          result /= 0xAuLL;
          if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) > 0x1999999999999999uLL) {
            break;
          }
        }

        while (v3++ < 0x7E);
      }
    }

    HIDWORD(v6) = result;
    unint64_t v5 = (79 - __clz(result)) >> 4;
    LOWORD(v7[0]) = WORD2(result);
    HIWORD(v7[0]) = HIWORD(result);
    *(void *)&v7[1] = 0LL;
    _So9NSDecimala__exponent_setter(v2, &v6);
    _So9NSDecimala__length_setter(v5, &v6);
    _So9NSDecimala__isNegative_setter(v1, &v6);
    _So9NSDecimala__isCompact_setter_0(1LL, &v6);
    _So9NSDecimala__reserved_setter(&v6);
    return v6;
  }

  return result;
}

{
  uint64_t v1;
  unsigned int v2;
  unint64_t v4;
  uint64_t v5;
  _DWORD v6[3];
  if (result)
  {
    if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) <= 0x1999999999999999uLL)
    {
      uint64_t v2 = 0;
      do
      {
        uint64_t v1 = v2 + 1;
        result /= 0xAuLL;
        if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) > 0x1999999999999999uLL) {
          break;
        }
      }

      while (v2++ < 0x7E);
    }

    else
    {
      uint64_t v1 = 0LL;
    }

    HIDWORD(v5) = result;
    unint64_t v4 = (79 - __clz(result)) >> 4;
    LOWORD(v6[0]) = WORD2(result);
    HIWORD(v6[0]) = HIWORD(result);
    *(void *)&v6[1] = 0LL;
    _So9NSDecimala__exponent_setter(v1, &v5);
    _So9NSDecimala__length_setter(v4, &v5);
    _So9NSDecimala__isNegative_setter(0LL, &v5);
    _So9NSDecimala__isCompact_setter_0(1LL, &v5);
    _So9NSDecimala__reserved_setter(&v5);
    return v5;
  }

  return result;
}

uint64_t JSONDecoder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  JSONDecoder.init()();
  return v0;
}

uint64_t JSONDecoder.dateDecodingStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  unsigned int v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  unint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
  uint64_t v6 = *(void *)(v4 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  char v7 = *(_BYTE *)(v4 + 16);
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  swift_retain();
  outlined copy of JSONEncoder.DateEncodingStrategy(v5, v6, v7);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void (*JSONDecoder.dateDecodingStrategy.modify(void *a1))(void ***a1)
{
  unsigned int v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  v3[3] = v1;
  v3[4] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v3[5] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  uint64_t v6 = v1 + v5;
  char v7 = *(void **)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  void *v3 = *(void *)v6;
  v3[1] = v8;
  char v9 = *(_BYTE *)(v6 + 16);
  *((_BYTE *)v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v9;
  outlined copy of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
  return JSONDecoder.dateDecodingStrategy.modify;
}

void JSONDecoder.dateDecodingStrategy.modify(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (os_unfair_lock_s *)(*a1)[4];
  unsigned int v3 = (char *)(*a1)[5] + (void)(*a1)[3];
  uint64_t v4 = **a1;
  uint64_t v5 = (uint64_t)v1[1];
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *((void *)v3 + 1);
  char v8 = *((_BYTE *)v1 + 16);
  *(void *)unsigned int v3 = v4;
  *((void *)v3 + 1) = v5;
  char v9 = v3[16];
  v3[16] = v8;
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v8);
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v9);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  outlined consume of JSONEncoder.DateEncodingStrategy(*v1, (uint64_t)v1[1], *((_BYTE *)v1 + 16));
  free(v1);
}

uint64_t JSONDecoder.dateDecodingStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((_BYTE *)a1 + 16);
  uint64_t v5 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  swift_release();
  uint64_t v6 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 8);
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = v3;
  char v9 = *(_BYTE *)(v6 + 16);
  *(_BYTE *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  outlined consume of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
  swift_retain();
  os_unfair_lock_unlock(v5 + 4);
  return swift_release();
}

uint64_t JSONDecoder.dataDecodingStrategy.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  unint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
  unint64_t v6 = *(void *)(v4 + 32);
  *a1 = v5;
  a1[1] = v6;
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void (*JSONDecoder.dataDecodingStrategy.modify(void *a1))(unint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  v3[2] = v1;
  v3[3] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v3[4] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  uint64_t v6 = v1 + v5;
  unint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(v6 + 32);
  void *v3 = v7;
  v3[1] = v8;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v7);
  return JSONDecoder.dataDecodingStrategy.modify;
}

void JSONDecoder.dataDecodingStrategy.modify(unint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (os_unfair_lock_s *)(*a1)[3];
  unint64_t v3 = (*a1)[1];
  unint64_t v4 = (*a1)[2] + (*a1)[4];
  unint64_t v5 = **a1;
  unint64_t v6 = *(void *)(v4 + 24);
  *(void *)(v4 + 24) = v5;
  *(void *)(v4 + 32) = v3;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  outlined consume of JSONEncoder.KeyEncodingStrategy(*v1);
  free(v1);
}

uint64_t JSONDecoder.dataDecodingStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  unint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
  *(void *)(v5 + 24) = v2;
  *(void *)(v5 + 32) = v3;
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  return swift_release();
}

uint64_t key path setter for JSONDecoder.nonConformingFloatDecodingStrategy : JSONDecoder( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = *a2;
  v10[0] = *a1;
  v10[1] = v2;
  id v10[2] = v3;
  uint64_t v10[3] = v4;
  _OWORD v10[4] = v5;
  v10[5] = v6;
  uint64_t v8 = *(uint64_t (**)(uint64_t *))(*(void *)v7 + 160LL);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v10[0], v2);
  return v8(v10);
}

uint64_t JSONDecoder.nonConformingFloatDecodingStrategy.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
  uint64_t v6 = v4[6];
  uint64_t v7 = v4[7];
  uint64_t v8 = v4[8];
  uint64_t v9 = v4[9];
  uint64_t v10 = v4[10];
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  swift_retain();
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v5, v6);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void (*JSONDecoder.nonConformingFloatDecodingStrategy.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  v3[6] = v1;
  v3[7] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v3[8] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  uint64_t v6 = (void *)(v1 + v5);
  uint64_t v7 = v6[5];
  uint64_t v8 = v6[6];
  uint64_t v9 = v6[7];
  uint64_t v10 = v6[8];
  uint64_t v11 = v6[9];
  uint64_t v12 = v6[10];
  void *v3 = v7;
  v3[1] = v8;
  v3[2] = v9;
  v3[3] = v10;
  v3[4] = v11;
  v3[5] = v12;
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v7, v8);
  return JSONDecoder.nonConformingFloatDecodingStrategy.modify;
}

void JSONDecoder.nonConformingFloatDecodingStrategy.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (os_unfair_lock_s *)(*a1)[7];
  uint64_t v3 = (*a1)[5];
  uint64_t v4 = (void *)((*a1)[6] + (*a1)[8]);
  uint64_t v5 = **a1;
  uint64_t v6 = v1[1];
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v4[5];
  uint64_t v11 = v4[6];
  v4[5] = v5;
  v4[6] = v6;
  v4[7] = v7;
  v4[8] = v8;
  v4[9] = v9;
  v4[10] = v3;
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v5, v6);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v10, v11);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(*v1, v1[1]);
  free(v1);
}

uint64_t JSONDecoder.nonConformingFloatDecodingStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v8 + 4);
  swift_release();
  uint64_t v9 = (void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 48);
  uint64_t v9[5] = v2;
  v9[6] = v3;
  v9[7] = v4;
  v9[8] = v5;
  v9[9] = v6;
  v9[10] = v7;
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v10, v11);
  swift_retain();
  os_unfair_lock_unlock(v8 + 4);
  return swift_release();
}

uint64_t JSONDecoder.keyDecodingStrategy.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  unint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
  unint64_t v6 = *(void *)(v4 + 96);
  *a1 = v5;
  a1[1] = v6;
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void (*JSONDecoder.keyDecodingStrategy.modify(void *a1))(unint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  v3[2] = v1;
  v3[3] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v3[4] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  uint64_t v6 = v1 + v5;
  unint64_t v7 = *(void *)(v6 + 88);
  uint64_t v8 = *(void *)(v6 + 96);
  void *v3 = v7;
  v3[1] = v8;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v7);
  return JSONDecoder.keyDecodingStrategy.modify;
}

void JSONDecoder.keyDecodingStrategy.modify(unint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (os_unfair_lock_s *)(*a1)[3];
  unint64_t v3 = (*a1)[1];
  unint64_t v4 = (*a1)[2] + (*a1)[4];
  unint64_t v5 = **a1;
  unint64_t v6 = *(void *)(v4 + 88);
  *(void *)(v4 + 88) = v5;
  *(void *)(v4 + 96) = v3;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  outlined consume of JSONEncoder.KeyEncodingStrategy(*v1);
  free(v1);
}

uint64_t JSONDecoder.keyDecodingStrategy.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  unint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
  *(void *)(v5 + 88) = v2;
  *(void *)(v5 + 96) = v3;
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  return swift_release();
}

uint64_t JSONDecoder.userInfo.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t (*JSONDecoder.userInfo.modify(void *a1))(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  a1[3] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  *a1 = *(void *)(v1 + v4 + 104);
  swift_bridgeObjectRetain();
  return JSONDecoder.userInfo.modify;
}

uint64_t JSONDecoder.userInfo.modify(void *a1)
{
  uint64_t v1 = (os_unfair_lock_s *)a1[2];
  *(void *)(a1[1] + a1[3] + 104LL) = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t JSONDecoder.userInfo.setter(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(void *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 104) = a1;
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

uint64_t JSONDecoder.allowsJSON5.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 112);
}

uint64_t JSONDecoder.allowsJSON5.setter(uint64_t result)
{
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 112) = result;
  return result;
}

uint64_t (*JSONDecoder.allowsJSON5.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v2 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_BYTE *)(v1 + v2 + 112);
  return JSONDecoder.allowsJSON5.modify;
}

uint64_t JSONDecoder.allowsJSON5.modify(uint64_t result)
{
  *(_BYTE *)(*(void *)result + *(void *)(result + 8) + 112LL) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t JSONDecoder.assumesTopLevelDictionary.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
  if (!*(void *)(v1 + 16)
    || (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey),
        (v3 & 1) == 0))
  {
    __int128 v6 = 0u;
    __int128 v7 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v2, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  if (!*((void *)&v7 + 1))
  {
LABEL_7:
    outlined destroy of Any?((uint64_t)&v6, &demangling cache variable for type metadata for Any?);
    return 0LL;
  }

  uint64_t result = swift_dynamicCast();
  if ((_DWORD)result) {
    return v5;
  }
  return result;
}

uint64_t JSONDecoder.assumesTopLevelDictionary.setter(char a1)
{
  uint64_t v3 = type metadata accessor for CodingUserInfoKey();
  __n128 v4 = MEMORY[0x1895F8858](v3);
  __int128 v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(_BYTE *, uint64_t, __n128))(v7 + 16))( v6,  v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey,  v4);
  uint64_t v12 = MEMORY[0x1896184C8];
  v11[0] = a1;
  uint64_t v8 = (uint64_t (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))(*(void *)v1 + 216LL))(v10);
  specialized Dictionary.subscript.setter((uint64_t)v11, (uint64_t)v6);
  return v8(v10, 0LL);
}

void (*JSONDecoder.assumesTopLevelDictionary.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[8] = v1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  v3[11] = malloc(*(void *)(v5 + 64));
  *((_BYTE *)v3 + 96) = JSONDecoder.assumesTopLevelDictionary.getter() & 1;
  return JSONDecoder.assumesTopLevelDictionary.modify;
}

void JSONDecoder.assumesTopLevelDictionary.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  char v4 = *(_BYTE *)(*(void *)a1 + 96LL);
  (*(void (**)(void, uint64_t, void))(*(void *)(*(void *)a1 + 80LL) + 16LL))( *(void *)(*(void *)a1 + 88LL),  v3[8] + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey,  v3[9]);
  uint64_t v5 = (void *)v3[11];
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = v3[8];
    uint64_t v11 = MEMORY[0x1896184C8];
    v10[0] = v4;
    uint64_t v7 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v6 + 216LL))(v3);
    specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)v5);
    v7(v3, 0LL);
  }

  else
  {
    uint64_t v8 = v3[8];
    uint64_t v11 = MEMORY[0x1896184C8];
    v10[0] = v4;
    uint64_t v9 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v8 + 216LL))(v3 + 4);
    specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)v5);
    v9(v3 + 4, 0LL);
  }

  free(v5);
  free(v3);
}

uint64_t JSONDecoder.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingUserInfoKey?);
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  CodingUserInfoKey.init(rawValue:)();
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey,  v3,  v4);
    uint64_t v7 = v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
    *(void *)uint64_t v7 = 0LL;
    *(void *)(v7 + 8) = 0LL;
    *(_BYTE *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 2;
    *(void *)(v7 + 24) = 1LL;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    uint64_t v8 = MEMORY[0x18961AFF0];
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(void *)(v7 + 96) = 0LL;
    *(void *)(v7 + 104) = v8;
    *(_BYTE *)(v7 + 112) = 0;
    uint64_t v9 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<()>._Buffer);
    uint64_t v10 = swift_allocObject();
    *(_DWORD *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    *(void *)(v0 + v9) = v10;
    return v0;
  }

  return result;
}

void JSONDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!v3) {
    return;
  }
  id v32 = v3;
  id v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
  {

    swift_willThrow();
    return;
  }

  outlined init with take of JSONError((uint64_t)v30, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 40) = v6;
  JSONError.debugDescription.getter();
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 56) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?( inited + 32,  (uint64_t)v27,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
  uint64_t v10 = v27[0];
  uint64_t v11 = v27[1];
  swift_retain();
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v13 & 1) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  v9[(v12 >> 6) + 8] |= 1LL << v12;
  uint64_t v14 = (uint64_t *)(v9[6] + 16 * v12);
  *uint64_t v14 = v10;
  v14[1] = v11;
  outlined init with take of Any(&v28, (_OWORD *)(v9[7] + 32 * v12));
  uint64_t v15 = v9[2];
  BOOL v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16)
  {
LABEL_11:
    __break(1u);
    return;
  }

  id v9[2] = v17;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v29 = v9;
  JSONError.sourceLocation.getter();
  if ((v19 & 1) == 0)
  {
    *((void *)&v28 + 1) = MEMORY[0x189618740];
    v27[0] = v18;
    specialized Dictionary.subscript.setter((uint64_t)v27, 0xD00000000000001DLL, 0x80000001839CB020LL);
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v20 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v21 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v22 = objc_msgSend(v20, sel_initWithDomain_code_userInfo_, v21, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  outlined release of JSONError((uint64_t)v31);
  uint64_t v23 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v25 = v24;
  id v26 = v22;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 104LL))( v25,  *MEMORY[0x189619360],  v23);
  swift_willThrow();
}

void specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)( unint64_t a1, uint64_t a2, unsigned __int8 a3, ValueMetadata *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v14 = (void *)a6;
  unint64_t v15 = a5;
  uint64_t v51 = a10;
  if (a4 == &type metadata for Date)
  {
    specialized JSONDecoderImpl.unwrapDate<A>(from:for:_:)(a1, a2, a3, a5, a6, a7, a8, a9, &v46);
    if (v11) {
      return;
    }
    goto LABEL_14;
  }

  if (a4 == &type metadata for Data)
  {
    uint64_t v21 = specialized JSONDecoderImpl.unwrapData<A>(from:for:_:)(a1, a2, a3, a5, a6, a7, a8, a9);
    if (v11) {
      return;
    }
    unsigned int v46 = v21;
    uint64_t v47 = v22;
    goto LABEL_14;
  }

  if (a4 == &type metadata for URL)
  {
    specialized JSONDecoderImpl.unwrapURL<A>(from:for:_:)(a1, a2, a3, a5, a6, a7, a8, a9, (uint64_t)&v46);
    if (v11) {
      return;
    }
    goto LABEL_14;
  }

  uint64_t v43 = v11;
  int v45 = v10;
  type metadata accessor for NSDecimal(0LL);
  if (v19 == a4)
  {
    uint64_t v23 = specialized JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)(a1, a2, a3, v15, (uint64_t)v14, a7, a8, a9);
    if (v11) {
      return;
    }
    unsigned int v46 = (void *)v23;
    uint64_t v47 = v24;
    int v48 = v25;
LABEL_14:
    swift_dynamicCast();
    return;
  }

  uint64_t v42 = a2;
  if (swift_conformsToProtocol2()) {
    uint64_t v20 = v51;
  }
  else {
    uint64_t v20 = 0LL;
  }
  if (v20)
  {
    specialized JSONDecoderImpl.unwrapDictionary<A, B>(from:as:for:_:)( a1,  a2,  a3,  (uint64_t)a4,  v15,  (uint64_t)v14,  a7,  a8,  a9);
    return;
  }

  if (a9 == -1)
  {
    swift_retain();
    uint64_t v29 = v10;
    goto LABEL_29;
  }

  id v26 = (void *)swift_allocObject();
  v26[5] = &type metadata for _CodingKey;
  v26[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v27 = swift_allocObject();
  void v26[2] = v27;
  *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v14;
  *(void *)(v27 + 24) = a7;
  *(void *)(v27 + 32) = a8;
  *(_BYTE *)(v27 + 40) = a9;
  v26[7] = v15;
  if (v15 >> 62)
  {
    if (v15 >> 62 != 1)
    {
      uint64_t v30 = 0LL;
      goto LABEL_27;
    }

    __int128 v28 = (uint64_t *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    __int128 v28 = (uint64_t *)(v15 + 64);
  }

  uint64_t v30 = *v28;
  swift_retain();
LABEL_27:
  if (__OFADD__(v30, 1LL))
  {
    __break(1u);
    goto LABEL_44;
  }

  v26[8] = v30 + 1;
  unint64_t v15 = (unint64_t)v26;
  uint64_t v29 = v45;
LABEL_29:
  uint64_t v42 = v29[20];
  v29[20] = v15;
  unsigned int v31 = (void *)v29[2];
  outlined copy of _CodingKey?((uint64_t)v14, a7, a8, a9);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  int v33 = v45;
  _OWORD v45[2] = v31;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v31[2] + 1LL,  1,  v31);
    int v33 = v45;
    unsigned int v31 = v40;
    _OWORD v45[2] = v40;
  }

  unsigned __int8 v34 = a3;
  unint64_t v36 = v31[2];
  unint64_t v35 = v31[3];
  if (v36 >= v35 >> 1)
  {
    unint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v35 > 1),  v36 + 1,  1,  v31);
    unsigned __int8 v34 = a3;
    int v33 = v45;
    unsigned int v31 = v41;
  }

  uint64_t v31[2] = v36 + 1;
  __int128 v37 = &v31[3 * v36];
  v37[4] = a1;
  v37[5] = a2;
  *((_BYTE *)v37 + 48) = v34;
  v33[2] = v31;
  uint64_t v14 = v33;
  uint64_t v49 = type metadata accessor for JSONDecoderImpl();
  uint64_t v50 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl,  (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl,  (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
  unsigned int v46 = v14;
  swift_retain();
  dispatch thunk of Decodable.init(from:)();
  if (!v43)
  {
LABEL_38:
    v14[20] = v42;
    swift_retain();
    swift_release();
    uint64_t v14 = (void *)v14[2];
    if (v14[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
        goto LABEL_40;
      }
    }

    else
    {
      __break(1u);
    }

    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
LABEL_40:
    uint64_t v38 = v14[2];
    unint64_t v39 = v45;
    if (!v38)
    {
      __break(1u);
      return;
    }

    goto LABEL_41;
  }

  v14[20] = v42;
  swift_retain();
  swift_release();
  uint64_t v14 = (void *)v14[2];
  if (v14[2])
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
      goto LABEL_36;
    }
    goto LABEL_45;
  }

void JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, ValueMetadata *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v78 = a9;
  uint64_t v79 = a7;
  uint64_t v72 = *(void *)(a8 - 8);
  MEMORY[0x1895F8858](a1);
  id v71 = (char *)v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v20);
  MEMORY[0x1895F8858](v21);
  if (a4 == &type metadata for Date)
  {
    uint64_t v35 = v85;
    JSONDecoderImpl.unwrapDate<A>(from:for:_:)(a1, a2, a3, a5, a6, a8, a11, &v80);
    if (v35) {
      return;
    }
    goto LABEL_15;
  }

  uint64_t v26 = a6;
  uint64_t v74 = a5;
  uint64_t v75 = a1;
  uint64_t v76 = a2;
  LODWORD(v77) = a3;
  uint64_t v73 = v11;
  if (a4 == &type metadata for Data)
  {
    uint64_t v36 = v85;
    __int128 v37 = JSONDecoderImpl.unwrapData<A>(from:for:_:)(v75, v76, v77, v74, a6, a8, a11);
    if (v36) {
      return;
    }
    unint64_t v80 = (unint64_t)v37;
    uint64_t v81 = v38;
    goto LABEL_15;
  }

  uint64_t v27 = (void *)a8;
  int64_t v28 = v26;
  if (a4 == &type metadata for URL)
  {
    uint64_t v39 = v85;
    JSONDecoderImpl.unwrapURL<A>(from:for:_:)(v75, v76, v77, v74, v26, a8, a11, &v80);
    if (v39) {
      return;
    }
    goto LABEL_15;
  }

  unint64_t v70 = v25;
  uint64_t v29 = (char *)v69 - v23;
  uint64_t v30 = v24;
  uint64_t v31 = v22;
  type metadata accessor for NSDecimal(0LL);
  if (v32 != a4)
  {
    uint64_t v33 = v79;
    if (swift_conformsToProtocol2()) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 0LL;
    }
    if (v34)
    {
      JSONDecoderImpl.unwrapDictionary<A, B>(from:as:for:_:)( v75,  v76,  v77,  (uint64_t)a4,  v74,  v28,  v33,  (uint64_t)v27,  v78,  a10,  a11);
      return;
    }

    v69[1] = a4;
    _OWORD v69[2] = a10;
    int v44 = *(void (**)(char *, int64_t, uint64_t))(v30 + 16);
    int64_t v45 = v28;
    uint64_t v46 = v31;
    v44(v29, v45, v31);
    uint64_t v47 = v70;
    v44(v70, (int64_t)v29, v31);
    uint64_t v48 = v72;
    if ((*(unsigned int (**)(char *, uint64_t, void *))(v72 + 48))(v47, 1LL, v27) == 1)
    {
      uint64_t v49 = *(void (**)(char *, uint64_t))(v30 + 8);
      v49(v29, v31);
      v49(v47, v31);
      unint64_t v50 = v74;
      unint64_t v51 = v74 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      char v52 = v77;
      uint64_t v53 = v75;
      uint64_t v54 = v76;
      goto LABEL_29;
    }

    unint64_t v55 = *(void (**)(char *, uint64_t, void *))(v48 + 32);
    unint64_t v56 = v71;
    v55(v71, (uint64_t)v47, v27);
    unint64_t v57 = swift_allocObject();
    *(void *)(v57 + 40) = v27;
    *(void *)(v57 + 48) = a11;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v57 + 16));
    v55((char *)boxed_opaque_existential_1, (uint64_t)v56, v27);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v46);
    unint64_t v59 = v74;
    *(void *)(v57 + 56) = v74;
    if (v59 >> 62)
    {
      char v52 = v77;
      uint64_t v53 = v75;
      uint64_t v54 = v76;
      if (v59 >> 62 != 1)
      {
        uint64_t v61 = 0LL;
        goto LABEL_27;
      }

      unsigned int v60 = (uint64_t *)((v59 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      unsigned int v60 = (uint64_t *)(v59 + 64);
      char v52 = v77;
      uint64_t v53 = v75;
      uint64_t v54 = v76;
    }

    uint64_t v61 = *v60;
    swift_retain();
LABEL_27:
    if (__OFADD__(v61, 1LL))
    {
      __break(1u);
      goto LABEL_46;
    }

    *(void *)(v57 + 64) = v61 + 1;
    unint64_t v51 = v57 & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v50 = v57;
LABEL_29:
    unint64_t v57 = (unint64_t)v73;
    uint64_t v27 = (void *)v73[20];
    v73[20] = v50;
    unint64_t v62 = *(void **)(v57 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v57 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v62;
    unint64_t v77 = v51;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v62[2] + 1LL,  1,  v62);
      *(void *)(v57 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v62;
    }

    unint64_t v65 = v62[2];
    unint64_t v64 = v62[3];
    if (v65 >= v64 >> 1) {
      unint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v64 > 1),  v65 + 1,  1,  v62);
    }
    v62[2] = v65 + 1;
    int v66 = &v62[3 * v65];
    v66[4] = v53;
    v66[5] = v54;
    *((_BYTE *)v66 + 48) = v52;
    *(void *)(v57 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v62;
    uint64_t v83 = type metadata accessor for JSONDecoderImpl();
    uint64_t v84 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl,  (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl,  (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
    unint64_t v80 = v57;
    swift_retain();
    uint64_t v67 = v85;
    dispatch thunk of Decodable.init(from:)();
    if (!v67)
    {
LABEL_38:
      *(void *)(v57 + 160) = v27;
      swift_retain();
      swift_release();
      uint64_t v27 = *(void **)(v57 + 16);
      if (v27[2])
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          uint64_t v68 = v27[2];
          if (v68) {
            goto LABEL_41;
          }
          goto LABEL_48;
        }

void JSONDecoder.decode<A>(_:from:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!v3) {
    return;
  }
  id v32 = v3;
  id v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
  {

    swift_willThrow();
    return;
  }

  outlined init with take of JSONError((uint64_t)v30, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 40) = v6;
  JSONError.debugDescription.getter();
  *(void *)(inited + 72) = MEMORY[0x189617FA8];
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 56) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?( inited + 32,  (uint64_t)v27,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
  uint64_t v10 = v27[0];
  uint64_t v11 = v27[1];
  swift_retain();
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v13 & 1) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  v9[(v12 >> 6) + 8] |= 1LL << v12;
  uint64_t v14 = (uint64_t *)(v9[6] + 16 * v12);
  *uint64_t v14 = v10;
  v14[1] = v11;
  outlined init with take of Any(&v28, (_OWORD *)(v9[7] + 32 * v12));
  uint64_t v15 = v9[2];
  BOOL v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16)
  {
LABEL_11:
    __break(1u);
    return;
  }

  id v9[2] = v17;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v29 = v9;
  JSONError.sourceLocation.getter();
  if ((v19 & 1) == 0)
  {
    *((void *)&v28 + 1) = MEMORY[0x189618740];
    v27[0] = v18;
    specialized Dictionary.subscript.setter((uint64_t)v27, 0xD00000000000001DLL, 0x80000001839CB020LL);
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v20 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v21 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v22 = objc_msgSend(v20, sel_initWithDomain_code_userInfo_, v21, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  outlined release of JSONError((uint64_t)v31);
  uint64_t v23 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v25 = v24;
  id v26 = v22;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 104LL))( v25,  *MEMORY[0x189619360],  v23);
  swift_willThrow();
}

uint64_t specialized JSONDecoderImpl.unwrap<A, B>(_:as:configuration:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15 = v13;
  uint64_t v45 = a5;
  uint64_t v46 = a9;
  uint64_t v49 = a4;
  int v43 = a3;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v47 = a12;
  uint64_t v48 = a13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v21 = (char *)&v39 - v20;
  uint64_t v51 = v14;
  uint64_t v44 = v22;
  if (a11 == 255)
  {
    swift_retain();
    uint64_t v25 = (uint64_t)a8;
    goto LABEL_9;
  }

  uint64_t v23 = (void *)swift_allocObject();
  v23[5] = &type metadata for _CodingKey;
  v23[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v24 = swift_allocObject();
  uint64_t v23[2] = v24;
  *(void *)(v24 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a7;
  *(void *)(v24 + 24) = a8;
  *(void *)(v24 + 32) = a10;
  *(_BYTE *)(v24 + 40) = a11;
  v23[7] = a6;
  uint64_t v25 = (uint64_t)a8;
  if (a6 >> 62)
  {
    if (a6 >> 62 != 1)
    {
      uint64_t v28 = 1LL;
      goto LABEL_8;
    }

    id v26 = (uint64_t *)((a6 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    id v26 = (uint64_t *)(a6 + 64);
  }

  uint64_t v27 = *v26;
  swift_retain();
  uint64_t v25 = (uint64_t)a8;
  uint64_t v28 = v27 + 1;
  if (!__OFADD__(v27, 1LL))
  {
LABEL_8:
    v23[8] = v28;
    a6 = (unint64_t)v23;
LABEL_9:
    a8 = *(void **)(v15 + 160);
    *(void *)(v15 + 160) = a6;
    uint64_t v23 = *(void **)(v15 + 16);
    outlined copy of _CodingKey?(a7, v25, a10, a11);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

  __break(1u);
LABEL_23:
  uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v23[2] + 1LL,  1,  v23);
  *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v23;
LABEL_10:
  unint64_t v31 = v23[2];
  unint64_t v30 = v23[3];
  if (v31 >= v30 >> 1) {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v30 > 1),  v31 + 1,  1,  v23);
  }
  uint64_t v23[2] = v31 + 1;
  id v32 = &v23[3 * v31];
  uint64_t v33 = v41;
  _OWORD v32[4] = v40;
  v32[5] = v33;
  *((_BYTE *)v32 + 48) = v43;
  *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v23;
  _OWORD v50[3] = type metadata accessor for JSONDecoderImpl();
  v50[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl,  (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl,  (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
  v50[0] = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v21, v45, v44);
  uint64_t v34 = v48;
  uint64_t v35 = *(void (**)(void *, char *, uint64_t, uint64_t))(v48 + 16);
  swift_retain();
  uint64_t v36 = v51;
  v35(v50, v21, v47, v34);
  if (v36)
  {
    *(void *)(v15 + 160) = a8;
    swift_retain();
    swift_release();
    a8 = *(void **)(v15 + 16);
    if (a8[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        uint64_t v37 = a8[2];
        if (v37)
        {
LABEL_20:
          a8[2] = v37 - 1;
          *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a8;
          swift_release();
          return swift_release();
        }

        goto LABEL_16;
      }
    }

    else
    {
      __break(1u);
    }

    a8 = specialized _ArrayBuffer._consumeAndCreateNew()(a8);
    uint64_t v37 = a8[2];
    if (v37) {
      goto LABEL_20;
    }
LABEL_16:
    __break(1u);
  }

  *(void *)(v15 + 160) = a8;
  swift_retain();
  swift_release();
  a8 = *(void **)(v15 + 16);
  if (!a8[2])
  {
    __break(1u);
LABEL_28:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a8);
    a8 = (void *)result;
    uint64_t v37 = *(void *)(result + 16);
    if (v37) {
      goto LABEL_20;
    }
    goto LABEL_29;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v37 = a8[2];
  if (v37) {
    goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t JSONDecoder.decode<A, B>(_:from:configuration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v21 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v16 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v18 = (char *)&v20 - v17;
  (*(void (**)(uint64_t, uint64_t, __n128))(a8 + 16))(a6, a8, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(void *)v9 + 328LL))( v21,  v22,  v23,  v18,  a5,  a7);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
}

uint64_t closure #1 in JSONDecoder._decode<A>(_:from:)( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (((*(uint64_t (**)(void))(*(void *)a3 + 224LL))() & 1) != 0)
  {
    (*(uint64_t (**)(void))(*(void *)a3 + 248LL))();
    uint64_t v7 = JSON5Scanner.scan()();
  }

  else
  {
    (*(uint64_t (**)(void))(*(void *)a3 + 248LL))();
    JSONScanner.scan()();
  }

  uint64_t v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    uint64_t v39 = a4;
    uint64_t result = JSONMap.loadValue(at:)(0LL);
    uint64_t v37 = v10;
    uint64_t v38 = result;
    unsigned __int8 v36 = v11;
    if (v11 > 0xFDu)
    {
      __break(1u);
    }

    else
    {
      uint64_t v12 = (*(uint64_t (**)(void))(*(void *)a3 + 200LL))();
      uint64_t v13 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 8);
      id v26 = *(void **)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
      uint64_t v27 = v12;
      unint64_t v14 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
      uint64_t v15 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 32);
      uint64_t v30 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 48);
      uint64_t v31 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
      uint64_t v16 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 72);
      uint64_t v28 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 64);
      uint64_t v29 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 56);
      uint64_t v17 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 80);
      uint64_t v32 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 96);
      unint64_t v33 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
      uint64_t v34 = *(void *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 104);
      char v35 = *(_BYTE *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 112);
      char v18 = *(_BYTE *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 16);
      type metadata accessor for JSONDecoderImpl();
      uint64_t v19 = swift_allocObject();
      uint64_t v20 = (void *)MEMORY[0x18961AFE8];
      *(void *)(v19 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFE8];
      *(void *)(v19 + 24) = v27;
      *(void *)(v19 + 160) = 0x8000000000000000LL;
      *(void *)(v19 + 32) = v8;
      *(void *)(v19 + 40) = v26;
      *(void *)(v19 + 48) = v13;
      *(_BYTE *)(v19 + 56) = v18;
      *(void *)(v19 + 64) = v14;
      *(void *)(v19 + 72) = v15;
      *(void *)(v19 + 80) = v31;
      *(void *)(v19 + 88) = v30;
      *(void *)(v19 + 96) = v29;
      *(void *)(v19 + 104) = v28;
      *(void *)(v19 + 112) = v16;
      *(void *)(v19 + 120) = v17;
      *(void *)(v19 + 128) = v33;
      *(void *)(v19 + 136) = v32;
      *(void *)(v19 + 144) = v34;
      *(_BYTE *)(v19 + 152) = v35;
      outlined copy of JSONEncoder.DateEncodingStrategy(v26, v13, v18);
      outlined copy of JSONEncoder.KeyEncodingStrategy(v14);
      outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v31, v30);
      outlined copy of JSONEncoder.KeyEncodingStrategy(v33);
      swift_bridgeObjectRetain();
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v19 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v20[2] + 1LL,  1,  v20);
        *(void *)(v19 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v20;
      }

      unint64_t v23 = v20[2];
      unint64_t v22 = v20[3];
      if (v23 >= v22 >> 1) {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v22 > 1),  v23 + 1,  1,  v20);
      }
      v20[2] = v23 + 1;
      uint64_t v24 = &v20[3 * v23];
      v24[4] = v38;
      v24[5] = v37;
      *((_BYTE *)v24 + 48) = v36;
      *(void *)(v19 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v20;
      v39(v19);
      swift_release();
      uint64_t v25 = swift_isUniquelyReferenced_nonNull_native();
      swift_retain();
      JSONDecoderImpl.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(v25);
      return swift_release_n();
    }
  }

  return result;
}

void static JSONDecoder.withUTF8Representation<A>(of:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1834088BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned __int8 *, uint64_t))
{
  *(void *)(v6 - 104) = v4;
  *(_WORD *)(v6 - 96) = v5;
  *(_BYTE *)(v6 - 94) = BYTE2(v5);
  *(_BYTE *)(v6 - 93) = BYTE3(v5);
  *(_BYTE *)(v6 - 92) = BYTE4(v5);
  *(_BYTE *)(v6 - 91) = BYTE5(v5);
  return closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)( (unsigned __int8 *)(v6 - 104),  BYTE6(v5),  BYTE6(v5),  a4);
}

uint64_t closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)( unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned __int8 *, uint64_t))
{
  if (a3 < 1)
  {
    uint64_t v11 = 0LL;
    goto LABEL_5;
  }

  int v6 = *a1;
  BOOL v7 = a3 == 1;
  if (a3 == 1)
  {
    int v8 = 0;
    int v9 = 0;
    int v10 = 0;
LABEL_13:
    int v14 = 0;
    int v15 = 0;
    goto LABEL_21;
  }

  int v10 = a1[1];
  if ((unint64_t)a3 < 3)
  {
    int v8 = 0;
    int v9 = 0;
    goto LABEL_13;
  }

  int v14 = a1[2];
  if (a3 == 3)
  {
    int v8 = 0;
    int v15 = 0;
    int v9 = 1;
  }

  else
  {
    int v8 = a1[3];
    int v9 = 1;
    int v15 = 1;
    if (!*a1 && !a1[1] && v14 == 254 && v8 == 255)
    {
      uint64_t v11 = 4LL;
LABEL_19:
      uint64_t v16 = 2550137088LL;
      goto LABEL_43;
    }
  }

uint64_t JSONDecoder.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  unint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 48);
  unint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
  outlined consume of JSONEncoder.DateEncodingStrategy( *(void **)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options),  *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 8),  *(_BYTE *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 16));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v3);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v4, v5);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t JSONDecoder.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  unint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 48);
  unint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
  outlined consume of JSONEncoder.DateEncodingStrategy( *(void **)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options),  *(void *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 8),  *(_BYTE *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 16));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v3);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v4, v5);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t JSONDecoderImpl.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(char a1)
{
  if ((a1 & 1) == 0 || (uint64_t result = swift_isUniquelyReferenced_nonNull_native(), (result & 1) == 0))
  {
    unint64_t v3 = *(os_unfair_lock_s **)(*(void *)(v1 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v3 + 10);
    closure #1 in XMLPlistMap.copyInBuffer()((uint64_t)&v3[4]);
    os_unfair_lock_unlock(v3 + 10);
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t JSONDecoderImpl.__deallocating_deinit()
{
  unint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  unint64_t v4 = *(void *)(v0 + 128);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + 40), *(void *)(v0 + 48), *(_BYTE *)(v0 + 56));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v1);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v2, v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v4);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

unint64_t JSONDecoderImpl.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3[2];
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
    __break(1u);
    goto LABEL_15;
  }

  BOOL v7 = v3;
  uint64_t v8 = v5 + 24 * v6;
  Swift::Int v10 = *(void *)(v8 + 8);
  uint64_t v9 = *(void *)(v8 + 16);
  unsigned int v11 = *(unsigned __int8 *)(v8 + 24);
  if (v11 >> 5 != 3)
  {
    BOOL v12 = v11 >> 5 == 5 && (v9 | v10) == 0;
    if (v12 && v11 == 160)
    {
      uint64_t v24 = type metadata accessor for DecodingError();
      swift_allocError();
      id v26 = v25;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *id v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      unint64_t v27 = v7[20];
      swift_retain();
      _CodingPathNode.path.getter(v27);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v24 - 8) + 104LL))( v26,  *MEMORY[0x189619368],  v24);
      return swift_willThrow();
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    *uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    unint64_t v14 = v7[20];
    swift_retain();
    _CodingPathNode.path.getter(v14);
    swift_release();
    _StringGuts.grow(_:)(43LL);
    swift_bridgeObjectRelease();
    uint64_t v31 = (void *)0xD000000000000035LL;
    unint64_t v32 = 0x80000001839D2CE0LL;
    uint64_t v15 = v7[2];
    if (*(void *)(v15 + 16)) {
      __asm { BR              X10 }
    }

uint64_t JSONDecoderImpl.unkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2[2];
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v6 = v4 + 24 * v5;
  uint64_t v8 = *(void *)(v6 + 8);
  uint64_t v7 = *(void *)(v6 + 16);
  unsigned int v9 = *(unsigned __int8 *)(v6 + 24);
  if (v9 >> 5 == 4)
  {
    uint64_t v15 = v2[20];
    uint64_t v16 = v2[4];
    a1[3] = (uint64_t)&unk_189C8F8C0;
    a1[4] = lazy protocol witness table accessor for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer();
    uint64_t v17 = swift_allocObject();
    *a1 = v17;
    *(void *)(v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v2;
    *(void *)(v17 + 24) = v8;
    *(void *)(v17 + 40) = 0LL;
    *(void *)(v17 + 48) = 0LL;
    *(void *)(v17 + 32) = v16;
    *(_BYTE *)(v17 + 56) = -2;
    *(void *)(v17 + 64) = v7;
    *(_BYTE *)(v17 + 72) = 0;
    *(void *)(v17 + 80) = 0LL;
    *(void *)(v17 + 88) = v15;
    swift_retain();
    swift_retain();
    return swift_retain();
  }

  BOOL v10 = v9 >> 5 == 5 && (v7 | v8) == 0;
  if (!v10 || v9 != 160)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    *unsigned int v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    unint64_t v12 = v2[20];
    swift_retain();
    _CodingPathNode.path.getter(v12);
    swift_release();
    _StringGuts.grow(_:)(43LL);
    swift_bridgeObjectRelease();
    uint64_t v13 = v2[2];
    if (*(void *)(v13 + 16)) {
      __asm { BR              X10 }
    }

void specialized JSONDecoderImpl.unwrapDate<A>(from:for:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>)
{
  uint64_t v12 = a7;
  uint64_t v14 = a1;
  uint64_t v77 = *MEMORY[0x1895F89C0];
  BOOL v15 = (a3 & 0xE0) == 0xA0 && (a2 | a1) == 0;
  if (!v15 || a3 != 160)
  {
    unint64_t v16 = *(void *)(v75 + 40);
    uint64_t v74 = *(void *)(v75 + 48);
    if (*(_BYTE *)(v75 + 56))
    {
      if (*(_BYTE *)(v75 + 56) != 1) {
        __asm { BR              X9 }
      }

      id v70 = *(id *)(v75 + 40);
      uint64_t v73 = v9;
      if (a8 == -1)
      {
        uint64_t v19 = (void *)a4;
        swift_retain();
        uint64_t v38 = a5;
        uint64_t v39 = a2;
        goto LABEL_25;
      }

      unint64_t v16 = a4;
      uint64_t v19 = (void *)swift_allocObject();
      uint64_t v19[5] = &type metadata for _CodingKey;
      v19[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v20 = swift_allocObject();
      void v19[2] = v20;
      *(void *)(v20 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
      *(void *)(v20 + 24) = a6;
      *(void *)(v20 + 32) = v12;
      *(_BYTE *)(v20 + 40) = a8;
      v19[7] = v16;
      if (v16 >> 62)
      {
        if (v16 >> 62 != 1)
        {
          uint64_t v38 = a5;
          uint64_t v48 = 1LL;
          goto LABEL_24;
        }

        unint64_t v21 = (uint64_t *)((v16 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }

      else
      {
        unint64_t v21 = (uint64_t *)(v16 + 64);
      }

      uint64_t v47 = *v21;
      swift_retain();
      uint64_t v38 = a5;
      uint64_t v48 = v47 + 1;
      if (!__OFADD__(v47, 1LL))
      {
LABEL_24:
        uint64_t v39 = a2;
        char v19[8] = v48;
LABEL_25:
        uint64_t v49 = *(void *)(v75 + 160);
        *(void *)(v75 + 160) = v19;
        unint64_t v50 = *(void **)(v75 + 16);
        outlined copy of _CodingKey?(v38, a6, v12, a8);
        outlined copy of JSONEncoder.DateEncodingStrategy(v70, v74, 1);
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v75 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v50;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v50[2] + 1LL,  1,  v50);
          *(void *)(v75 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v50;
        }

        unint64_t v53 = v50[2];
        unint64_t v52 = v50[3];
        if (v53 >= v52 >> 1) {
          unint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v52 > 1),  v53 + 1,  1,  v50);
        }
        v50[2] = v53 + 1;
        uint64_t v54 = &v50[3 * v53];
        v54[4] = a1;
        v54[5] = v39;
        *((_BYTE *)v54 + 48) = a3;
        *(void *)(v75 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v50;
        _OWORD v76[3] = type metadata accessor for JSONDecoderImpl();
        v76[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl,  (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl,  (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
        v76[0] = v75;
        swift_retain();
        ((void (*)(void *))v70)(v76);
        uint64_t v55 = (uint64_t)v76;
        if (!v73)
        {
LABEL_34:
          __swift_destroy_boxed_opaque_existential_1(v55);
          *(void *)(v75 + 160) = v49;
          swift_retain();
          swift_release();
          unint64_t v56 = *(void **)(v75 + 16);
          if (v56[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              uint64_t v57 = v56[2];
              if (v57) {
                goto LABEL_37;
              }
LABEL_50:
              __break(1u);
              JUMPOUT(0x18340AAE4LL);
            }
          }

          else
          {
            __break(1u);
          }

          unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew()(v56);
          uint64_t v57 = v56[2];
          if (v57) {
            goto LABEL_37;
          }
          goto LABEL_50;
        }

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
        *(void *)(v75 + 160) = v49;
        swift_retain();
        swift_release();
        unint64_t v56 = *(void **)(v75 + 16);
        if (v56[2])
        {
          uint64_t v55 = swift_isUniquelyReferenced_nonNull_native();
          if ((v55 & 1) != 0)
          {
            uint64_t v57 = v56[2];
            if (v57)
            {
LABEL_37:
              v56[2] = v57 - 1;
              *(void *)(v75 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v56;
              swift_release();
              swift_release();
              int v58 = v70;
              uint64_t v59 = v74;
              char v60 = 1;
LABEL_38:
              outlined consume of JSONEncoder.DateEncodingStrategy(v58, v59, v60);
              return;
            }

            goto LABEL_33;
          }
        }

        else
        {
          __break(1u);
        }

        uint64_t v55 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v56);
        unint64_t v56 = (void *)v55;
        uint64_t v57 = *(void *)(v55 + 16);
        if (v57) {
          goto LABEL_37;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }

      __break(1u);
    }

    else
    {
      id v71 = (id)v16;
      uint64_t v36 = v14;
      unsigned __int8 v37 = a3;
      uint64_t v12 = a7;
      uint64_t v10 = a6;
      LOBYTE(v14) = a8;
      specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v36, a2, v37, a4, a5, a6, v12, a8);
      if (v9)
      {
        outlined consume of JSONEncoder.DateEncodingStrategy((void *)v16, v74, 0);
        return;
      }

      unint64_t v75 = a4;
      uint64_t v73 = a5;
      uint64_t v40 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v41 = objc_msgSend(v71, sel_dateFromString_, v40);
      swift_unknownObjectRelease();
      if (v41)
      {
        objc_msgSend(v41, sel_timeIntervalSinceReferenceDate);
        uint64_t v43 = v42;
        outlined consume of JSONEncoder.DateEncodingStrategy((void *)v16, v74, 0);

        *a9 = v43;
        return;
      }
    }

    uint64_t v61 = type metadata accessor for DecodingError();
    swift_allocError();
    id v72 = v62;
    if ((_BYTE)v14 == 0xFF)
    {
      _CodingPathNode.path.getter(v75);
    }

    else
    {
      char v63 = v14;
      outlined copy of _CodingKey(v73, v10, v12, v14);
      uint64_t v64 = _CodingPathNode.path.getter(v75);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v66 = swift_allocObject();
      *(void *)(inited + 32) = v66;
      *(void *)(v66 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v73;
      *(void *)(v66 + 24) = v10;
      *(void *)(v66 + 32) = v12;
      *(_BYTE *)(v66 + 40) = v63;
      v76[0] = v64;
      specialized Array.append<A>(contentsOf:)(inited);
    }

    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(id, void, uint64_t))(*(void *)(v61 - 8) + 104LL))( v72,  *MEMORY[0x189619360],  v61);
    swift_willThrow();
    int v58 = (void *)v16;
    uint64_t v59 = v74;
    char v60 = 0;
    goto LABEL_38;
  }

  uint64_t v24 = type metadata accessor for DecodingError();
  swift_allocError();
  id v26 = v25;
  *uint64_t v25 = &type metadata for Date;
  if (a8 == -1)
  {
    _CodingPathNode.path.getter(a4);
  }

  else
  {
    outlined copy of _CodingKey(a5, a6, v12, a8);
    uint64_t v27 = a6;
    uint64_t v28 = _CodingPathNode.path.getter(a4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t v29 = swift_initStackObject();
    *(_OWORD *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    *(void *)(v29 + 56) = &type metadata for _CodingKey;
    *(void *)(v29 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v30 = swift_allocObject();
    *(void *)(v29 + 32) = v30;
    *(void *)(v30 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
    *(void *)(v30 + 24) = v27;
    *(void *)(v30 + 32) = v12;
    *(_BYTE *)(v30 + 40) = a8;
    v76[0] = v28;
    specialized Array.append<A>(contentsOf:)(v29);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  v76[0] = 0LL;
  v76[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(55LL);
  v44._object = (void *)0x80000001839D2D40LL;
  v44._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v44);
  v45._uint64_t countAndFlagsBits = 1702125892LL;
  v45._object = (void *)0xE400000000000000LL;
  String.append(_:)(v45);
  v46._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v46._object = (void *)0x80000001839D2D60LL;
  String.append(_:)(v46);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v24 - 8) + 104LL))( v26,  *MEMORY[0x189619368],  v24);
  swift_willThrow();
}

void JSONDecoderImpl.unwrapDate<A>(from:for:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  __int128 v120 = (uint64_t *)a5;
  uint64_t v115 = a7;
  uint64_t v119 = (char *)a4;
  *(void *)&__int128 v123 = a1;
  *((void *)&v123 + 1) = a2;
  Swift::String v112 = a8;
  uint64_t v125 = *MEMORY[0x1895F89C0];
  uint64_t v113 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  Swift::String v111 = (char *)&v107 - v12;
  MEMORY[0x1895F8858](v13);
  Swift::String v110 = (char *)&v107 - v14;
  MEMORY[0x1895F8858](v15);
  uint64_t v116 = (uint64_t)&v107 - v16;
  uint64_t v118 = v17;
  uint64_t v114 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v114);
  uint64_t v19 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  unint64_t v22 = (char *)&v107 - v21;
  MEMORY[0x1895F8858](v23);
  MEMORY[0x1895F8858](v24);
  MEMORY[0x1895F8858](v25);
  MEMORY[0x1895F8858](v26);
  MEMORY[0x1895F8858](v27);
  uint64_t v29 = (char *)&v107 - v28;
  __n128 v34 = MEMORY[0x1895F8858](v30);
  uint64_t v36 = (char *)&v107 - v35;
  LODWORD(v122) = a3;
  if ((a3 & 0xE0) != 0xA0 || v123 != 0 || v122 != 160)
  {
    uint64_t v45 = v121;
    Swift::String v46 = *(uint64_t **)(v121 + 40);
    uint64_t v116 = *(void *)(v121 + 48);
    if (*(_BYTE *)(v121 + 56))
    {
      if (*(_BYTE *)(v121 + 56) != 1) {
        __asm { BR              X9 }
      }

      uint64_t v47 = (void (*)(char *, uint64_t *, uint64_t, __n128))*((void *)v31 + 2);
      uint64_t v48 = (char *)v114;
      Swift::String v110 = v31;
      v47(v22, v120, v114, v34);
      ((void (*)(char *, char *, char *))v47)(v19, v22, v48);
      uint64_t v49 = v113;
      uint64_t v50 = v118;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v19, 1LL, v118) == 1)
      {
        uint64_t v51 = (void (*)(char *, char *))*((void *)v110 + 1);
        swift_retain();
        v51(v22, v48);
        v51(v19, v48);
        unint64_t v52 = (unint64_t)v119;
        swift_retain();
        goto LABEL_23;
      }

      __int128 v120 = v46;
      int v58 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
      v58(v10, v19, v50);
      Swift::String v46 = (uint64_t *)swift_allocObject();
      uint64_t v59 = v115;
      v46[5] = v50;
      v46[6] = v59;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v46 + 2);
      v58((char *)boxed_opaque_existential_1, v10, v50);
      uint64_t v61 = (void (*)(char *, char *))*((void *)v110 + 1);
      swift_retain();
      v61(v22, v48);
      unint64_t v62 = (unint64_t)v119;
      v46[7] = (uint64_t)v119;
      if (v62 >> 62)
      {
        if (v62 >> 62 != 1)
        {
          uint64_t v79 = 1LL;
          goto LABEL_22;
        }

        char v63 = (uint64_t *)((v62 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }

      else
      {
        char v63 = (uint64_t *)(v62 + 64);
      }

      uint64_t v78 = *v63;
      swift_retain();
      uint64_t v79 = v78 + 1;
      if (!__OFADD__(v78, 1LL))
      {
LABEL_22:
        v46[8] = v79;
        unint64_t v52 = (unint64_t)v46;
        Swift::String v46 = v120;
LABEL_23:
        uint64_t v80 = *(void *)(v45 + 160);
        *(void *)(v45 + 160) = v52;
        uint64_t v81 = *(void **)(v45 + 16);
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v45 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v81;
        uint64_t v83 = v46;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v81[2] + 1LL,  1,  v81);
          *(void *)(v45 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v81;
        }

        unint64_t v85 = v81[2];
        unint64_t v84 = v81[3];
        if (v85 >= v84 >> 1) {
          uint64_t v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v84 > 1),  v85 + 1,  1,  v81);
        }
        v81[2] = v85 + 1;
        unint64_t v86 = &v81[3 * v85];
        uint64_t v87 = *((void *)&v123 + 1);
        v86[4] = v123;
        v86[5] = v87;
        *((_BYTE *)v86 + 48) = (_BYTE)v122;
        uint64_t v88 = v121;
        *(void *)(v121 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v81;
        v124[3] = type metadata accessor for JSONDecoderImpl();
        v124[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl,  (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl,  (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
        v124[0] = v88;
        swift_retain();
        uint64_t v89 = v117;
        ((void (*)(void *))v83)(v124);
        uint64_t v90 = (uint64_t)v124;
        if (!v89)
        {
LABEL_32:
          __swift_destroy_boxed_opaque_existential_1(v90);
          *(void *)(v88 + 160) = v80;
          swift_retain();
          swift_release();
          uint64_t v91 = *(void **)(v88 + 16);
          if (v91[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              uint64_t v92 = v91[2];
              if (v92) {
                goto LABEL_35;
              }
LABEL_48:
              __break(1u);
              JUMPOUT(0x18340BF68LL);
            }
          }

          else
          {
            __break(1u);
          }

          uint64_t v91 = specialized _ArrayBuffer._consumeAndCreateNew()(v91);
          uint64_t v92 = v91[2];
          if (v92) {
            goto LABEL_35;
          }
          goto LABEL_48;
        }

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
        *(void *)(v88 + 160) = v80;
        swift_retain();
        swift_release();
        uint64_t v91 = *(void **)(v88 + 16);
        if (v91[2])
        {
          uint64_t v90 = swift_isUniquelyReferenced_nonNull_native();
          if ((v90 & 1) != 0)
          {
            uint64_t v92 = v91[2];
            if (v92)
            {
LABEL_35:
              v91[2] = v92 - 1;
              *(void *)(v88 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v91;
              swift_release();
              swift_release();
              uint64_t v55 = v83;
              uint64_t v56 = v116;
              char v57 = 1;
              goto LABEL_36;
            }

            goto LABEL_31;
          }
        }

        else
        {
          __break(1u);
        }

        uint64_t v90 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v91);
        uint64_t v91 = (void *)v90;
        uint64_t v92 = *(void *)(v90 + 16);
        if (v92) {
          goto LABEL_35;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }

      __break(1u);
    }

    else
    {
      uint64_t v108 = v33;
      Swift::String v109 = v32;
      uint64_t v48 = v31;
      unint64_t v53 = v46;
      unint64_t v22 = v119;
      uint64_t v54 = v117;
      uint64_t v50 = v118;
      JSONDecoderImpl.unwrapString<A>(from:for:_:)( v123,  *((uint64_t *)&v123 + 1),  v122,  (unint64_t)v119,  (uint64_t)v120,  v118,  v115);
      if (v54)
      {
LABEL_11:
        uint64_t v55 = v46;
        uint64_t v56 = v116;
        char v57 = 0;
LABEL_36:
        outlined consume of JSONEncoder.DateEncodingStrategy(v55, v56, v57);
        return;
      }

      uint64_t v74 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v75 = objc_msgSend(v53, sel_dateFromString_, v74);
      swift_unknownObjectRelease();
      if (v75)
      {
        objc_msgSend(v75, sel_timeIntervalSinceReferenceDate);
        uint64_t v77 = v76;
        outlined consume of JSONEncoder.DateEncodingStrategy(v46, v116, 0);

        void *v112 = v77;
        return;
      }
    }

    *(void *)&__int128 v123 = type metadata accessor for DecodingError();
    *((void *)&v123 + 1) = swift_allocError();
    unint64_t v122 = v93;
    Swift::String v110 = v48;
    uint64_t v94 = (void (*)(uint64_t, uint64_t *, uint64_t))*((void *)v48 + 2);
    id v95 = v109;
    uint64_t v96 = v114;
    v94((uint64_t)v109, v120, v114);
    uint64_t v97 = v108;
    v94(v108, v95, v96);
    uint64_t v98 = v113;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v97, 1LL, v50) == 1)
    {
      char v99 = (void (*)(uint64_t, uint64_t))*((void *)v110 + 1);
      v99(v97, v96);
      _CodingPathNode.path.getter((unint64_t)v22);
      v99((uint64_t)v95, v96);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v111, v97, v50);
      uint64_t v100 = _CodingPathNode.path.getter((unint64_t)v22);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v101 = v50;
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v103 = v115;
      *(void *)(inited + 56) = v101;
      *(void *)(inited + 64) = v103;
      uint64_t v104 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v105 = v111;
      (*(void (**)(uint64_t *, char *, uint64_t))(v98 + 16))(v104, v111, v101);
      v124[0] = v100;
      specialized Array.append<A>(contentsOf:)(inited);
      (*((void (**)(uint64_t *, uint64_t))v110 + 1))(v95, v96);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v105, v101);
    }

    uint64_t v106 = v122;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v123 - 8) + 104LL))(v106, *MEMORY[0x189619360]);
    swift_willThrow();
    goto LABEL_11;
  }

  unsigned __int8 v37 = v31;
  *(void *)&__int128 v123 = type metadata accessor for DecodingError();
  *((void *)&v123 + 1) = swift_allocError();
  uint64_t v39 = v38;
  void *v38 = &type metadata for Date;
  uint64_t v40 = (void (*)(char *, uint64_t *, uint64_t))*((void *)v37 + 2);
  uint64_t v41 = v114;
  v40(v36, v120, v114);
  v40(v29, (uint64_t *)v36, v41);
  uint64_t v42 = v113;
  uint64_t v43 = v118;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v29, 1LL, v118) == 1)
  {
    Swift::String v44 = (void (*)(char *, uint64_t))*((void *)v37 + 1);
    v44(v29, v41);
    _CodingPathNode.path.getter((unint64_t)v119);
    v44(v36, v41);
  }

  else
  {
    uint64_t v64 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 32);
    unint64_t v122 = v39;
    uint64_t v65 = v116;
    v64(v116, v29, v43);
    uint64_t v66 = _CodingPathNode.path.getter((unint64_t)v119);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t v67 = swift_initStackObject();
    *(_OWORD *)(v67 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    uint64_t v68 = v115;
    *(void *)(v67 + 56) = v43;
    *(void *)(v67 + 64) = v68;
    unint64_t v69 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v67 + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v42 + 16))(v69, v65, v43);
    v124[0] = v66;
    specialized Array.append<A>(contentsOf:)(v67);
    (*((void (**)(char *, uint64_t))v37 + 1))(v36, v41);
    uint64_t v70 = v65;
    uint64_t v39 = v122;
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v70, v43);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  v124[0] = 0LL;
  v124[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(55LL);
  v71._object = (void *)0x80000001839D2D40LL;
  v71._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v71);
  v72._uint64_t countAndFlagsBits = 1702125892LL;
  v72._object = (void *)0xE400000000000000LL;
  String.append(_:)(v72);
  v73._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v73._object = (void *)0x80000001839D2D60LL;
  String.append(_:)(v73);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void))(*(void *)(v123 - 8) + 104LL))(v39, *MEMORY[0x189619368]);
  swift_willThrow();
}

unint64_t *specialized JSONDecoderImpl.unwrapData<A>(from:for:_:)( uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v10 = v9;
  uint64_t v11 = v8;
  unint64_t v13 = a7;
  uint64_t v14 = a6;
  unint64_t v15 = a4;
  LOBYTE(v8) = a3;
  uint64_t v16 = a2;
  uint64_t v17 = a1;
  uint64_t v98 = *MEMORY[0x1895F89C0];
  BOOL v18 = (a3 & 0xE0) == 0xA0 && (a2 | a1) == 0;
  if (v18 && a3 == 160)
  {
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v28 = v27;
    *uint64_t v27 = &type metadata for Data;
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(v15);
    }

    else
    {
      outlined copy of _CodingKey(a5, v14, v13, a8);
      uint64_t v29 = _CodingPathNode.path.getter(v15);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v31 = swift_allocObject();
      *(void *)(inited + 32) = v31;
      *(void *)(v31 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
      *(void *)(v31 + 24) = v14;
      *(void *)(v31 + 32) = v13;
      *(_BYTE *)(v31 + 40) = a8;
      v95[0] = v29;
      specialized Array.append<A>(contentsOf:)(inited);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v95[0] = 0LL;
    v95[1] = 0xE000000000000000LL;
    uint64_t v21 = v95;
    _StringGuts.grow(_:)(55LL);
    v38._object = (void *)0x80000001839D2D40LL;
    v38._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v38);
    v39._uint64_t countAndFlagsBits = 1635017028LL;
    v39._object = (void *)0xE400000000000000LL;
    String.append(_:)(v39);
    v40._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v40._object = (void *)0x80000001839D2D60LL;
    String.append(_:)(v40);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    uint64_t v41 = (unsigned int *)MEMORY[0x189619368];
    goto LABEL_23;
  }

  unint64_t v19 = *((void *)v11 + 8);
  if (v19)
  {
    if (v19 == 1)
    {
      uint64_t v21 = (unint64_t *)v11;
      specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(a1, a2, a3, a4, a5, a6, a7, a8);
      if (v10) {
        return v21;
      }
      uint64_t v90 = a5;
      id v23 = objc_allocWithZone(MEMORY[0x189603F48]);
      uint64_t v21 = (unint64_t *)String._bridgeToObjectiveCImpl()();
      id v24 = objc_msgSend(v23, sel_initWithBase64EncodedString_options_, v21, 0);
      swift_unknownObjectRelease();
      if (v24)
      {
        uint64_t v21 = (unint64_t *)specialized Data.init(referencing:)(v24);
        swift_bridgeObjectRelease();

        return v21;
      }

      swift_bridgeObjectRelease();
      uint64_t v26 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v28 = v81;
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(v15);
      }

      else
      {
        outlined copy of _CodingKey(v90, a6, v13, a8);
        uint64_t v82 = _CodingPathNode.path.getter(v15);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v83 = swift_initStackObject();
        *(_OWORD *)(v83 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(v83 + 56) = &type metadata for _CodingKey;
        *(void *)(v83 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v84 = swift_allocObject();
        *(void *)(v83 + 32) = v84;
        *(void *)(v84 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v90;
        *(void *)(v84 + 24) = a6;
        *(void *)(v84 + 32) = v13;
        *(_BYTE *)(v84 + 40) = a8;
        v95[0] = v82;
        uint64_t v21 = v95;
        specialized Array.append<A>(contentsOf:)(v83);
      }

      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      uint64_t v41 = (unsigned int *)MEMORY[0x189619360];
LABEL_23:
      (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104LL))(v28, *v41, v26);
      swift_willThrow();
      return v21;
    }

    uint64_t v89 = v10;
    uint64_t v91 = a5;
    uint64_t v87 = a7;
    if (a8 == -1)
    {
      swift_retain();
      uint64_t v36 = v91;
      goto LABEL_55;
    }

    uint64_t v88 = a6;
    unint64_t v13 = swift_allocObject();
    *(void *)(v13 + 40) = &type metadata for _CodingKey;
    *(void *)(v13 + 48) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v35 = swift_allocObject();
    *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v35;
    uint64_t v36 = v91;
    *(void *)(v35 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v91;
    *(void *)(v35 + 24) = v88;
    *(void *)(v35 + 32) = v87;
    *(_BYTE *)(v35 + 40) = a8;
    *(void *)(v13 + 56) = v15;
    if (v15 >> 62)
    {
      if (v15 >> 62 != 1)
      {
        uint64_t v70 = 1LL;
        goto LABEL_54;
      }

      unsigned __int8 v37 = (uint64_t *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_53:
      uint64_t v69 = *v37;
      swift_retain();
      uint64_t v36 = v91;
      uint64_t v70 = v69 + 1;
      if (!__OFADD__(v69, 1LL))
      {
LABEL_54:
        *(void *)(v13 + 64) = v70;
        unint64_t v15 = v13;
        uint64_t v14 = v88;
LABEL_55:
        uint64_t v91 = *((void *)v11 + 20);
        *((void *)v11 + 20) = v15;
        unint64_t v13 = *((void *)v11 + 2);
        outlined copy of _CodingKey?(v36, v14, v87, a8);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v19);
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *((void *)v11 + 2) = v13;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
LABEL_56:
          unint64_t v73 = *(void *)(v13 + 16);
          unint64_t v72 = *(void *)(v13 + 24);
          if (v73 >= v72 >> 1) {
            unint64_t v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v72 > 1),  v73 + 1,  1,  (void *)v13);
          }
          *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v73 + 1;
          unint64_t v74 = v13 + 24 * v73;
          *(void *)(v74 + 32) = v17;
          *(void *)(v74 + 40) = v16;
          *(_BYTE *)(v74 + 48) = (_BYTE)v8;
          *((void *)v11 + 2) = v13;
          uint64_t v96 = (void *)type metadata accessor for JSONDecoderImpl();
          unint64_t v97 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl,  (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl,  (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
          v95[0] = v11;
          swift_retain();
          uint64_t v75 = ((uint64_t (*)(void *))v19)(v95);
          if (v89)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
            *((void *)v11 + 20) = v91;
            uint64_t v21 = (unint64_t *)(v91 & 0x3FFFFFFFFFFFFFFFLL);
            swift_retain();
            swift_release();
            uint64_t v76 = (void *)*((void *)v11 + 2);
            if (v76[2])
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                uint64_t v77 = v76[2];
                if (v77)
                {
LABEL_62:
                  _OWORD v76[2] = v77 - 1;
                  *((void *)v11 + 2) = v76;
                  swift_release();
                  outlined consume of JSONEncoder.KeyEncodingStrategy(v19);
LABEL_84:
                  swift_release();
                  return v21;
                }

char *JSONDecoderImpl.unwrapData<A>(from:for:_:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v154 = a7;
  uint64_t v158 = a5;
  uint64_t v160 = a4;
  *((void *)&v162 + 1) = a2;
  *(void *)&__int128 v162 = a1;
  uint64_t v169 = *MEMORY[0x1895F89C0];
  uint64_t v156 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v151 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  id v153 = (char *)&v151 - v11;
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v151 - v13;
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)&v151 - v16;
  int64_t v159 = (char *)v18;
  uint64_t v157 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v157);
  uint64_t v20 = (char *)&v151 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  id v23 = (char *)&v151 - v22;
  MEMORY[0x1895F8858](v24);
  MEMORY[0x1895F8858](v25);
  MEMORY[0x1895F8858](v26);
  uint64_t v28 = (char *)&v151 - v27;
  MEMORY[0x1895F8858](v29);
  uint64_t v31 = (char *)&v151 - v30;
  MEMORY[0x1895F8858](v32);
  __n128 v34 = (char *)&v151 - v33;
  __n128 v39 = MEMORY[0x1895F8858](v35);
  uint64_t v40 = a3;
  uint64_t v42 = (char *)&v151 - v41;
  if ((v40 & 0xE0) == 0xA0 && v162 == 0 && v40 == 160)
  {
    uint64_t v43 = v36;
    *((void *)&v162 + 1) = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v45 = v44;
    *uint64_t v44 = &type metadata for Data;
    char v46 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
    uint64_t v47 = v157;
    v46(v42, v158, v157);
    v46(v34, (uint64_t)v42, v47);
    uint64_t v48 = v156;
    uint64_t v20 = v159;
    if ((*(unsigned int (**)(char *, uint64_t, char *))(v156 + 48))(v34, 1LL, v159) == 1)
    {
      uint64_t v49 = *(void (**)(char *, uint64_t))(v43 + 8);
      v49(v34, v47);
      _CodingPathNode.path.getter(v160);
      v49(v42, v47);
    }

    else
    {
      (*(void (**)(char *, char *, char *))(v48 + 32))(v17, v34, v20);
      uint64_t v72 = v48;
      uint64_t v73 = _CodingPathNode.path.getter(v160);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v75 = v154;
      *(void *)(inited + 56) = v20;
      *(void *)(inited + 64) = v75;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, char *))(v72 + 16))(boxed_opaque_existential_1, v17, v20);
      v166[0] = v73;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v157);
      (*(void (**)(char *, char *))(v72 + 8))(v17, v20);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v166[0] = 0LL;
    v166[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(55LL);
    v77._object = (void *)0x80000001839D2D40LL;
    v77._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v77);
    v78._uint64_t countAndFlagsBits = 1635017028LL;
    v78._object = (void *)0xE400000000000000LL;
    String.append(_:)(v78);
    v79._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v79._object = (void *)0x80000001839D2D60LL;
    String.append(_:)(v79);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(*((void *)&v162 + 1) - 8LL) + 104LL))( v45,  *MEMORY[0x189619368]);
    goto LABEL_17;
  }

  uint64_t v50 = v161;
  uint64_t v51 = v161[8];
  if (v51)
  {
    if (v51 == 1)
    {
      unint64_t v151 = v38;
      unint64_t v152 = v37;
      uint64_t v52 = v36;
      uint64_t v53 = v158;
      uint64_t v54 = (uint64_t)v159;
      uint64_t v55 = v155;
      JSONDecoderImpl.unwrapString<A>(from:for:_:)(v162, *((uint64_t *)&v162 + 1), v40, v160, v158, (uint64_t)v159, v154);
      if (v55) {
        return v20;
      }
      id v56 = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F48]),  sel_initWithBase64EncodedString_options_,  String._bridgeToObjectiveCImpl()(),  0);
      swift_unknownObjectRelease();
      if (v56)
      {
        uint64_t v20 = (char *)specialized Data.init(referencing:)(v56);
        swift_bridgeObjectRelease();

        return v20;
      }

      swift_bridgeObjectRelease();
      *((void *)&v162 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      *(void *)&__int128 v162 = v133;
      uint64_t v134 = v52;
      Swift::String v135 = *(void (**)(unint64_t, uint64_t, uint64_t))(v52 + 16);
      unint64_t v136 = v152;
      uint64_t v137 = v157;
      v135(v152, v53, v157);
      unint64_t v138 = v151;
      v135(v151, v136, v137);
      uint64_t v139 = v156;
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v156 + 48))(v138, 1LL, v54) == 1)
      {
        __int128 v140 = *(void (**)(uint64_t, uint64_t))(v134 + 8);
        v140(v138, v137);
        uint64_t v20 = (char *)_CodingPathNode.path.getter(v160);
        v140(v136, v137);
      }

      else
      {
        char v144 = v153;
        (*(void (**)(char *, unint64_t, uint64_t))(v139 + 32))(v153, v138, v54);
        uint64_t v145 = _CodingPathNode.path.getter(v160);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v146 = swift_initStackObject();
        *(_OWORD *)(v146 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v147 = v154;
        *(void *)(v146 + 56) = v54;
        *(void *)(v146 + 64) = v147;
        __int128 v148 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v146 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v139 + 16))(v148, v144, v54);
        v166[0] = v145;
        specialized Array.append<A>(contentsOf:)(v146);
        uint64_t v20 = (char *)v166[0];
        (*(void (**)(unint64_t, uint64_t))(v134 + 8))(v136, v157);
        (*(void (**)(char *, uint64_t))(v139 + 8))(v144, v54);
      }

      uint64_t v149 = v162;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void))(*(void *)(*((void *)&v162 + 1) - 8LL) + 104LL))( v149,  *MEMORY[0x189619360]);
LABEL_17:
      swift_willThrow();
      return v20;
    }

    unint64_t v152 = v161[8];
    LODWORD(v153) = v40;
    uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v36 + 16);
    uint64_t v67 = v157;
    uint64_t v65 = v36;
    v66(v23, v158, v157, v39);
    ((void (*)(char *, char *, uint64_t))v66)(v20, v23, v67);
    uint64_t v68 = v156;
    uint64_t v69 = (uint64_t)v159;
    if ((*(unsigned int (**)(char *, uint64_t, char *))(v156 + 48))(v20, 1LL, v159) == 1)
    {
      uint64_t v70 = *(void (**)(char *, uint64_t))(v65 + 8);
      swift_retain();
      v70(v23, v67);
      v70(v20, v67);
      uint64_t v63 = v160;
      swift_retain();
      unint64_t v71 = v152;
      goto LABEL_52;
    }

    uint64_t v85 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
    v85(v9, v20, v69);
    uint64_t v63 = swift_allocObject();
    uint64_t v86 = v154;
    *(void *)(v63 + 40) = v69;
    *(void *)(v63 + 48) = v86;
    uint64_t v87 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v63 + 16));
    v85((char *)v87, v9, v69);
    uint64_t v88 = *(void (**)(char *, uint64_t))(v65 + 8);
    swift_retain();
    v88(v23, v67);
    unint64_t v89 = v160;
    *(void *)(v63 + 56) = v160;
    if (v89 >> 62)
    {
      unint64_t v71 = v152;
      if (v89 >> 62 != 1)
      {
        uint64_t v130 = 1LL;
LABEL_51:
        *(void *)(v63 + 64) = v130;
LABEL_52:
        unint64_t v95 = v50[20];
        v50[20] = v63;
        unint64_t v92 = v50[2];
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v50[2] = v92;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
LABEL_53:
          unint64_t v108 = *(void *)(v92 + 16);
          unint64_t v122 = *(void *)(v92 + 24);
          char v123 = (char)v153;
          if (v108 >= v122 >> 1)
          {
            char v150 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v122 > 1),  v108 + 1,  1,  (void *)v92);
            char v123 = (char)v153;
            unint64_t v92 = (unint64_t)v150;
          }

          *(void *)(v92 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v108 + 1;
          uint64_t v124 = (void *)(v92 + 24 * v108);
          uint64_t v125 = *((void *)&v162 + 1);
          v124[4] = v162;
          v124[5] = v125;
          *((_BYTE *)v124 + 48) = v123;
          v50[2] = v92;
          uint64_t v167 = (void *)type metadata accessor for JSONDecoderImpl();
          unint64_t v168 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl,  (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl,  (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
          v166[0] = v50;
          swift_retain();
          uint64_t v126 = v155;
          uint64_t v127 = ((uint64_t (*)(void *))v71)(v166);
          if (v126)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v166);
            v50[20] = v95;
            uint64_t v20 = (char *)(v95 & 0x3FFFFFFFFFFFFFFFLL);
            swift_retain();
            swift_release();
            uint64_t v106 = (void *)v50[2];
            if (v106[2])
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                uint64_t v128 = v106[2];
                if (v128)
                {
LABEL_59:
                  v106[2] = v128 - 1;
                  v50[2] = v106;
                  swift_release();
                  outlined consume of JSONEncoder.KeyEncodingStrategy(v71);
LABEL_80:
                  swift_release();
                  return v20;
                }

uint64_t specialized JSONDecoderImpl.unwrapURL<A>(from:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  BOOL v16 = (a3 & 0xE0) == 0xA0 && (a2 | a1) == 0;
  if (v16 && a3 == 160)
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v21;
    *uint64_t v21 = &type metadata for URL;
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }

    else
    {
      outlined copy of _CodingKey(a5, a6, a7, a8);
      uint64_t v23 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v25 = swift_allocObject();
      *(void *)(inited + 32) = v25;
      *(void *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
      *(void *)(v25 + 24) = a6;
      *(void *)(v25 + 32) = a7;
      *(_BYTE *)(v25 + 40) = a8;
      uint64_t v34 = v23;
      specialized Array.append<A>(contentsOf:)(inited);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v34 = 0LL;
    *(void *)&__int128 v35 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(55LL);
    v30._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    v30._object = (void *)0x80000001839D2D40LL;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = 5001813LL;
    v31._object = (void *)0xE300000000000000LL;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v32._object = (void *)0x80000001839D2D60LL;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    uint64_t v33 = (unsigned int *)MEMORY[0x189619368];
  }

  else
  {
    uint64_t result = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v9) {
      return result;
    }
    URL.init(string:)(result, v18, &v34);
    uint64_t result = swift_bridgeObjectRelease();
    if (v34)
    {
      __int128 v19 = v35;
      *(void *)a9 = v34;
      *(_OWORD *)(a9 + 8) = v19;
      return result;
    }

    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v26;
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }

    else
    {
      outlined copy of _CodingKey(a5, a6, a7, a8);
      uint64_t v27 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v28 = swift_initStackObject();
      *(_OWORD *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(v28 + 56) = &type metadata for _CodingKey;
      *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v29 = swift_allocObject();
      *(void *)(v28 + 32) = v29;
      *(void *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
      *(void *)(v29 + 24) = a6;
      *(void *)(v29 + 32) = a7;
      *(_BYTE *)(v29 + 40) = a8;
      uint64_t v34 = v27;
      specialized Array.append<A>(contentsOf:)(v28);
    }

    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    uint64_t v33 = (unsigned int *)MEMORY[0x189619360];
  }

  (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104LL))(v22, *v33, v20);
  return swift_willThrow();
}

uint64_t JSONDecoderImpl.unwrapURL<A>(from:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v71 = a7;
  unint64_t v72 = a4;
  uint64_t v66 = a8;
  uint64_t v75 = *MEMORY[0x1895F89C0];
  uint64_t v68 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v64 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v65 = (char *)&v64 - v14;
  uint64_t v16 = v15;
  uint64_t v69 = type metadata accessor for Optional();
  uint64_t v67 = *(void *)(v69 - 8);
  MEMORY[0x1895F8858](v69);
  unint64_t v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)&v64 - v21;
  MEMORY[0x1895F8858](v23);
  uint64_t v26 = (char *)&v64 - v25;
  if ((a3 & 0xE0) == 0xA0 && !(a2 | a1) && a3 == 160)
  {
    uint64_t v70 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v66 = v27;
    *uint64_t v27 = &type metadata for URL;
    uint64_t v28 = v67;
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
    uint64_t v30 = v69;
    v29(v26, a5, v69);
    v29(v22, (uint64_t)v26, v30);
    uint64_t v31 = v68;
    uint64_t v32 = v16;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v22, 1LL, v16) == 1)
    {
      uint64_t v33 = *(void (**)(char *, uint64_t))(v28 + 8);
      v33(v22, v30);
      _CodingPathNode.path.getter(v72);
      v33(v26, v30);
    }

    else
    {
      uint64_t v43 = v65;
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v65, v22, v16);
      uint64_t v44 = _CodingPathNode.path.getter(v72);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v46 = v71;
      *(void *)(inited + 56) = v32;
      *(void *)(inited + 64) = v46;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v43, v32);
      uint64_t v73 = v44;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v43, v32);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v48 = v66;
    uint64_t v73 = 0LL;
    *(void *)&__int128 v74 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(55LL);
    v49._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    v49._object = (void *)0x80000001839D2D40LL;
    String.append(_:)(v49);
    v50._uint64_t countAndFlagsBits = 5001813LL;
    v50._object = (void *)0xE300000000000000LL;
    String.append(_:)(v50);
    v51._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v51._object = (void *)0x80000001839D2D60LL;
    String.append(_:)(v51);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v70 - 8) + 104LL))(v48, *MEMORY[0x189619368]);
  }

  else
  {
    uint64_t v34 = v24;
    uint64_t v35 = a1;
    uint64_t v36 = v16;
    uint64_t v37 = v71;
    uint64_t v38 = v70;
    uint64_t result = JSONDecoderImpl.unwrapString<A>(from:for:_:)(v35, a2, a3, v72, a5, v16, v71);
    if (v38) {
      return result;
    }
    URL.init(string:)(result, v40, &v73);
    uint64_t result = swift_bridgeObjectRelease();
    if (v73)
    {
      __int128 v41 = v74;
      uint64_t v42 = v66;
      *uint64_t v66 = v73;
      *(_OWORD *)(v42 + 1) = v41;
      return result;
    }

    uint64_t v70 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v66 = v52;
    uint64_t v53 = v67;
    uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16);
    uint64_t v55 = v69;
    v54((uint64_t)v34, a5, v69);
    v54((uint64_t)v18, (uint64_t)v34, v55);
    uint64_t v56 = v68;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v18, 1LL, v36) == 1)
    {
      char v57 = *(void (**)(char *, uint64_t))(v53 + 8);
      v57(v18, v55);
      _CodingPathNode.path.getter(v72);
      v57(v34, v55);
    }

    else
    {
      uint64_t v58 = v36;
      uint64_t v59 = v64;
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v64, v18, v58);
      uint64_t v60 = _CodingPathNode.path.getter(v72);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v61 = swift_initStackObject();
      *(_OWORD *)(v61 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(v61 + 56) = v58;
      *(void *)(v61 + 64) = v37;
      char v62 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v61 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v56 + 16))(v62, v59, v58);
      uint64_t v73 = v60;
      specialized Array.append<A>(contentsOf:)(v61);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v69);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v59, v58);
    }

    uint64_t v63 = v66;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v70 - 8) + 104LL))(v63, *MEMORY[0x189619360]);
  }

  return swift_willThrow();
}

uint64_t specialized JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)( uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  v41[21] = *MEMORY[0x1895F89C0];
  int v15 = a3;
  type metadata accessor for NSDecimal(0LL);
  int v17 = a3 >> 5;
  if (v17 == 1)
  {
    char v29 = *(_BYTE *)(v8 + 152);
    uint64_t v30 = *(void *)(*(void *)(v8 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    uint64_t v31 = *(void *)(v30 + 24);
    BOOL v32 = v31 < a2 + a1 || v31 < a2;
    if (v32 || (a2 | a1) < 0 || v31 <= a1) {
      __break(1u);
    }
    closure #1 in JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)( (char *)(*(void *)(v30 + 16) + a1),  a2,  *(void *)(v30 + 16),  v31,  v29,  v15 & 1,  (uint64_t)v41);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v41[0];
    }
  }

  else
  {
    uint64_t v18 = v16;
    if (v17 == 5 && !(a2 | a1) && v15 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v21 = v20;
      *uint64_t v20 = v18;
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        uint64_t v22 = _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v24 = swift_allocObject();
        *(void *)(inited + 32) = v24;
        *(void *)(v24 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v24 + 24) = a6;
        *(void *)(v24 + 32) = a7;
        *(_BYTE *)(v24 + 40) = a8;
        v41[0] = v22;
        specialized Array.append<A>(contentsOf:)(inited);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v41[0] = 0LL;
      v41[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v35._object = (void *)0x80000001839D2D40LL;
      v35._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 0x616D69636544534ELL;
      v36._object = (void *)0xE90000000000006CLL;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      uint64_t v34 = (unsigned int *)MEMORY[0x189619368];
    }

    else
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v21 = v25;
      *uint64_t v25 = v18;
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        uint64_t v26 = _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v27 = swift_initStackObject();
        *(_OWORD *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(v27 + 56) = &type metadata for _CodingKey;
        *(void *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v28 = swift_allocObject();
        *(void *)(v27 + 32) = v28;
        *(void *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v28 + 24) = a6;
        *(void *)(v28 + 32) = a7;
        *(_BYTE *)(v28 + 40) = a8;
        v41[0] = v26;
        specialized Array.append<A>(contentsOf:)(v27);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      uint64_t v34 = (unsigned int *)MEMORY[0x189619358];
    }

    (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))(v21, *v34, v19);
    return swift_willThrow();
  }

  return result;
}

uint64_t JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)( uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v73 = a7;
  uint64_t v75 = a5;
  unint64_t v80 = a4;
  v81[21] = *MEMORY[0x1895F89C0];
  LODWORD(v74) = a3;
  uint64_t v78 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v71 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v70 = (char *)&v70 - v14;
  uint64_t v76 = v15;
  uint64_t v79 = type metadata accessor for Optional();
  uint64_t v77 = *(void *)(v79 - 8);
  MEMORY[0x1895F8858](v79);
  int v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v70 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)&v70 - v22;
  MEMORY[0x1895F8858](v24);
  uint64_t v26 = (char *)&v70 - v25;
  type metadata accessor for NSDecimal(0LL);
  int v28 = a3 >> 5;
  if (v28 == 1)
  {
    uint64_t v48 = v72;
    char v49 = *(_BYTE *)(v8 + 152);
    uint64_t v50 = *(void *)(*(void *)(v8 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v50 + 40));
    uint64_t v51 = *(void *)(v50 + 24);
    BOOL v52 = v51 < a2 + a1 || v51 < a2;
    if (v52 || (a2 | a1) < 0 || v51 <= a1) {
      __break(1u);
    }
    closure #1 in JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)( (char *)(*(void *)(v50 + 16) + a1),  a2,  *(void *)(v50 + 16),  v51,  v49,  v74 & 1,  (uint64_t)v81);
    os_unfair_lock_unlock((os_unfair_lock_t)(v50 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v48) {
      return v81[0];
    }
  }

  else
  {
    uint64_t v29 = v27;
    if (v28 == 5 && !(a2 | a1) && (_DWORD)v74 == 160)
    {
      uint64_t v72 = type metadata accessor for DecodingError();
      uint64_t v74 = swift_allocError();
      uint64_t v31 = v30;
      *uint64_t v30 = v29;
      uint64_t v32 = v77;
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
      unint64_t v34 = (unint64_t)v26;
      uint64_t v35 = v79;
      v33(v26, v75, v79);
      v33(v23, (uint64_t)v26, v35);
      uint64_t v36 = v78;
      uint64_t v37 = v76;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v23, 1LL, v76) == 1)
      {
        uint64_t v38 = *(void (**)(char *, uint64_t))(v32 + 8);
        v38(v23, v35);
        _CodingPathNode.path.getter(v80);
        v38((char *)v34, v35);
      }

      else
      {
        uint64_t v61 = v70;
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v70, v23, v37);
        uint64_t v62 = _CodingPathNode.path.getter(v80);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        unint64_t v80 = v34;
        uint64_t v64 = inited;
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v65 = v73;
        *(void *)(inited + 56) = v37;
        *(void *)(inited + 64) = v65;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(boxed_opaque_existential_1, v61, v37);
        v81[0] = v62;
        specialized Array.append<A>(contentsOf:)(v64);
        (*(void (**)(unint64_t, uint64_t))(v32 + 8))(v80, v35);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v61, v37);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v81[0] = 0LL;
      v81[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v67._object = (void *)0x80000001839D2D40LL;
      v67._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v67);
      v68._uint64_t countAndFlagsBits = 0x616D69636544534ELL;
      v68._object = (void *)0xE90000000000006CLL;
      String.append(_:)(v68);
      v69._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v69._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v69);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v72 - 8) + 104LL))( v31,  *MEMORY[0x189619368],  v72);
    }

    else
    {
      uint64_t v39 = type metadata accessor for DecodingError();
      uint64_t v74 = swift_allocError();
      __int128 v41 = v40;
      *unint64_t v40 = v29;
      uint64_t v42 = v77;
      uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
      uint64_t v44 = v79;
      v43(v20, v75, v79);
      v43(v17, (uint64_t)v20, v44);
      uint64_t v45 = v78;
      uint64_t v46 = v76;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v17, 1LL, v76) == 1)
      {
        uint64_t v47 = *(void (**)(char *, uint64_t))(v42 + 8);
        v47(v17, v44);
        _CodingPathNode.path.getter(v80);
        v47(v20, v44);
      }

      else
      {
        uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
        uint64_t v75 = v39;
        uint64_t v55 = v71;
        v54(v71, v17, v46);
        uint64_t v56 = _CodingPathNode.path.getter(v80);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v57 = swift_initStackObject();
        *(_OWORD *)(v57 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v58 = v73;
        *(void *)(v57 + 56) = v46;
        *(void *)(v57 + 64) = v58;
        uint64_t v59 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v57 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v45 + 16))(v59, v55, v46);
        v81[0] = v56;
        specialized Array.append<A>(contentsOf:)(v57);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v44);
        uint64_t v60 = v55;
        uint64_t v39 = v75;
        (*(void (**)(char *, uint64_t))(v45 + 8))(v60, v46);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v39 - 8) + 104LL))( v41,  *MEMORY[0x189619358],  v39);
    }

    return swift_willThrow();
  }

  return result;
}

uint64_t specialized JSONDecoderImpl.unwrapDictionary<A, B>(from:as:for:_:)( unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = v9;
  uint64_t v125 = *MEMORY[0x1895F89C0];
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  uint64_t v16 = a3 >> 5;
  if ((_DWORD)v16 != 5)
  {
    uint64_t v23 = dynamic_cast_existential_2_conditional(a4);
    uint64_t v106 = v24;
    if (!v23) {
      goto LABEL_85;
    }
    if ((_DWORD)v16 != 3) {
      goto LABEL_16;
    }
    uint64_t v114 = MEMORY[0x18961AFF0];
    if (a2 >= 0) {
      uint64_t v25 = a2;
    }
    else {
      uint64_t v25 = a2 + 1;
    }
    Dictionary.reserveCapacity(_:)(v25 >> 1);
    if (a9 == -1)
    {
      swift_retain();
      uint64_t v29 = a7;
      uint64_t v28 = a8;
LABEL_26:
      outlined copy of _CodingKey?(a6, v29, v28, a9);
      swift_retain();
      unint64_t v41 = a1;
      uint64_t v42 = JSONMap.loadValue(at:)(a1);
      if (v44 > 0xFDu)
      {
LABEL_27:
        swift_release();
        swift_release();
        uint64_t v121 = v114;
        return swift_dynamicCast();
      }

      uint64_t v45 = v42;
      uint64_t v46 = v43;
      unsigned __int8 v47 = v44;
      while (1)
      {
        uint64_t v50 = v10;
        Swift::Int v51 = JSONMap.offset(after:)(v41);
        uint64_t v52 = JSONMap.loadValue(at:)(v51);
        uint64_t v110 = v54;
        uint64_t v55 = v52;
        uint64_t v56 = v53;
        Swift::Int v108 = JSONMap.offset(after:)(v51);
        uint64_t v57 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v45, v46, v47, a5, 0LL, 0LL, 0LL, 255);
        if (v50) {
          goto LABEL_87;
        }
        uint64_t v59 = v57;
        uint64_t v60 = v58;
        uint64_t v61 = (*(uint64_t (**)(void))(v106 + 8))();
        uint64_t v63 = v62;
        uint64_t v123 = v61;
        uint64_t v124 = v62;
        __swift_allocate_boxed_opaque_existential_1(&v121);
        swift_bridgeObjectRetain();
        LOBYTE(v100) = 0;
        specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(v55, v110, v56, v61, a5, v59, v60, 0LL, v100, v61, v63);
        uint64_t v10 = 0LL;
        swift_bridgeObjectRelease();
        uint64_t v64 = v123;
        uint64_t v65 = __swift_project_boxed_opaque_existential_1(&v121, v123);
        v120[3] = v64;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v120);
        (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v64 - 8) + 16LL))( boxed_opaque_existential_1,  v65,  v64);
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v113 = (void *)v114;
        swift_bridgeObjectRetain();
        unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v60);
        uint64_t v70 = *(void *)(v114 + 16);
        BOOL v71 = (v68 & 1) == 0;
        uint64_t v72 = v70 + v71;
        if (__OFADD__(v70, v71)) {
          goto LABEL_81;
        }
        char v73 = v68;
        if (*(void *)(v114 + 24) >= v72)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            uint64_t v74 = v114;
          }

          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
            uint64_t v82 = static _DictionaryStorage.copy(original:)();
            uint64_t v74 = v82;
            if (*(void *)(v114 + 16))
            {
              unint64_t v83 = (char *)(v82 + 64);
              uint64_t v84 = (char *)(v114 + 64);
              unint64_t v85 = (unint64_t)((1LL << *(_BYTE *)(v74 + 32)) + 63) >> 6;
              uint64_t v101 = v114 + 64;
              if (v74 != v114 || v83 >= &v84[8 * v85]) {
                memmove(v83, v84, 8 * v85);
              }
              int64_t v86 = 0LL;
              *(void *)(v74 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v114 + 16);
              uint64_t v87 = 1LL << *(_BYTE *)(v114 + 32);
              if (v87 < 64) {
                uint64_t v88 = ~(-1LL << v87);
              }
              else {
                uint64_t v88 = -1LL;
              }
              unint64_t v89 = v88 & *(void *)(v114 + 64);
              int64_t v102 = (unint64_t)(v87 + 63) >> 6;
              while (1)
              {
                if (v89)
                {
                  uint64_t v104 = (v89 - 1) & v89;
                  int64_t v111 = v86;
                  unint64_t v90 = __clz(__rbit64(v89)) | (v86 << 6);
                }

                else
                {
                  int64_t v96 = v86 + 1;
                  if (__OFADD__(v86, 1LL)) {
                    goto LABEL_83;
                  }
                  if (v96 >= v102) {
                    break;
                  }
                  unint64_t v97 = *(void *)(v101 + 8 * v96);
                  int64_t v98 = v86 + 1;
                  if (!v97)
                  {
                    int64_t v98 = v86 + 2;
                    if (v86 + 2 >= v102) {
                      break;
                    }
                    unint64_t v97 = *(void *)(v101 + 8 * v98);
                    if (!v97)
                    {
                      int64_t v98 = v86 + 3;
                      if (v86 + 3 >= v102) {
                        break;
                      }
                      unint64_t v97 = *(void *)(v101 + 8 * v98);
                      if (!v97)
                      {
                        int64_t v98 = v86 + 4;
                        if (v86 + 4 >= v102) {
                          break;
                        }
                        unint64_t v97 = *(void *)(v101 + 8 * v98);
                        if (!v97)
                        {
                          uint64_t v99 = v86 + 5;
                          if (v86 + 5 >= v102) {
                            break;
                          }
                          unint64_t v97 = *(void *)(v101 + 8 * v99);
                          if (!v97)
                          {
                            while (1)
                            {
                              int64_t v98 = v99 + 1;
                              if (__OFADD__(v99, 1LL)) {
                                break;
                              }
                              if (v98 >= v102) {
                                goto LABEL_78;
                              }
                              unint64_t v97 = *(void *)(v101 + 8 * v98);
                              ++v99;
                              if (v97) {
                                goto LABEL_77;
                              }
                            }

uint64_t JSONDecoderImpl.unwrapDictionary<A, B>(from:as:for:_:)@<X0>( Swift::Int a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, int64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  unint64_t v177 = a2;
  uint64_t v162 = a9;
  uint64_t v163 = a7;
  int64_t v168 = a6;
  uint64_t v178 = a5;
  uint64_t v165 = a11;
  uint64_t v193 = *MEMORY[0x1895F89C0];
  uint64_t v170 = *(void *)(a8 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v164 = (char *)&v160 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  char v161 = (char *)&v160 - v16;
  MEMORY[0x1895F8858](v17);
  Swift::Int v179 = (Swift::Int)&v160 - v18;
  uint64_t v175 = v19;
  uint64_t v171 = type metadata accessor for Optional();
  uint64_t v169 = *(void *)(v171 - 8);
  MEMORY[0x1895F8858](v171);
  uint64_t v21 = (char *)&v160 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v22);
  uint64_t v166 = (char *)&v160 - v23;
  MEMORY[0x1895F8858](v24);
  uint64_t v26 = (char *)&v160 - v25;
  MEMORY[0x1895F8858](v27);
  uint64_t v29 = (char *)&v160 - v28;
  MEMORY[0x1895F8858](v30);
  uint64_t v32 = (char *)&v160 - v31;
  MEMORY[0x1895F8858](v33);
  Swift::String v35 = (char *)&v160 - v34;
  uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  unint64_t v167 = a3 >> 5;
  if ((_DWORD)v167 != 5)
  {
    uint64_t v44 = v177;
    Swift::Int v179 = a1;
    uint64_t v45 = dynamic_cast_existential_2_conditional(a4);
    uint64_t v173 = v46;
    uint64_t v174 = v45;
    if (!v45) {
      goto LABEL_84;
    }
    if ((_DWORD)v167 != 3) {
      goto LABEL_14;
    }
    unint64_t v182 = MEMORY[0x18961AFF0];
    if (v44 >= 0) {
      uint64_t v47 = v44;
    }
    else {
      uint64_t v47 = v44 + 1;
    }
    Dictionary.reserveCapacity(_:)(v47 >> 1);
    uint64_t v48 = v169;
    unsigned __int8 v49 = *(void (**)(char *, int64_t, uint64_t))(v169 + 16);
    uint64_t v50 = v171;
    v49(v29, v168, v171);
    v49(v26, (int64_t)v29, v50);
    uint64_t v51 = v170;
    uint64_t v52 = v175;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v26, 1LL, v175) == 1)
    {
      uint64_t v53 = *(void (**)(char *, uint64_t))(v48 + 8);
      v53(v29, v50);
      v53(v26, v50);
      swift_retain();
      unint64_t v54 = v179;
      unint64_t v55 = v180;
      uint64_t v56 = v176;
LABEL_26:
      uint64_t v94 = v56[4];
      swift_retain();
      uint64_t v175 = v94;
      uint64_t v95 = JSONMap.loadValue(at:)(v54);
      if (v97 > 0xFDu)
      {
LABEL_27:
        swift_release();
        swift_release();
        uint64_t v189 = v182;
        return swift_dynamicCast();
      }

      uint64_t v98 = v95;
      uint64_t v99 = v96;
      unsigned __int8 v100 = v97;
      unint64_t v101 = v55;
      while (1)
      {
        Swift::Int v104 = JSONMap.offset(after:)(v54);
        unint64_t v180 = JSONMap.loadValue(at:)(v104);
        unint64_t v177 = v106;
        if (v105 > 0xFDu) {
          goto LABEL_83;
        }
        unsigned __int8 v107 = v105;
        Swift::Int v179 = JSONMap.offset(after:)(v104);
        unsigned __int8 v108 = v100;
        unint64_t v109 = v178;
        uint64_t v110 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v98, v99, v108, v178, 0LL, 0LL, 0LL, 255);
        if (v101) {
          goto LABEL_86;
        }
        uint64_t v112 = v110;
        uint64_t v113 = v111;
        uint64_t v114 = (ValueMetadata *)(*(uint64_t (**)(void))(v173 + 8))();
        __int128 v191 = v114;
        uint64_t v192 = v115;
        __swift_allocate_boxed_opaque_existential_1(&v189);
        swift_bridgeObjectRetain();
        specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)( v180,  v177,  v107,  v114,  v109,  v112,  v113,  0LL,  0,  (uint64_t)v114);
        unint64_t v180 = 0LL;
        swift_bridgeObjectRelease();
        uint64_t v116 = (uint64_t)v191;
        __int128 v117 = __swift_project_boxed_opaque_existential_1(&v189, (uint64_t)v191);
        v188[3] = v116;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v188);
        (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v116 - 8) + 16LL))( boxed_opaque_existential_1,  v117,  v116);
        swift_bridgeObjectRetain();
        unint64_t v119 = v182;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        Swift::String v181 = (void *)v119;
        unint64_t v182 = 0x8000000000000000LL;
        swift_bridgeObjectRetain();
        uint64_t v121 = v113;
        unint64_t v123 = specialized __RawDictionaryStorage.find<A>(_:)(v112, v113);
        uint64_t v124 = *(void *)(v119 + 16);
        BOOL v125 = (v122 & 1) == 0;
        uint64_t v126 = v124 + v125;
        if (__OFADD__(v124, v125)) {
          goto LABEL_80;
        }
        char v127 = v122;
        uint64_t v128 = v112;
        if (*(void *)(v119 + 24) < v126) {
          break;
        }
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          uint64_t v131 = v121;
          uint64_t v129 = v119;
          goto LABEL_39;
        }

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        uint64_t v134 = static _DictionaryStorage.copy(original:)();
        uint64_t v129 = v134;
        if (*(void *)(v119 + 16))
        {
          Swift::String v135 = (char *)(v134 + 64);
          unint64_t v136 = (char *)(v119 + 64);
          unint64_t v137 = (unint64_t)((1LL << *(_BYTE *)(v129 + 32)) + 63) >> 6;
          unint64_t v167 = v119 + 64;
          if (v129 != v119 || v135 >= &v136[8 * v137]) {
            memmove(v135, v136, 8 * v137);
          }
          uint64_t v138 = 0LL;
          *(void *)(v129 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v119 + 16);
          uint64_t v139 = 1LL << *(_BYTE *)(v119 + 32);
          if (v139 < 64) {
            uint64_t v140 = ~(-1LL << v139);
          }
          else {
            uint64_t v140 = -1LL;
          }
          unint64_t v141 = v140 & *(void *)(v119 + 64);
          int64_t v168 = (unint64_t)(v139 + 63) >> 6;
          uint64_t v169 = v112;
          while (1)
          {
            if (v141)
            {
              unint64_t v177 = (v141 - 1) & v141;
              uint64_t v171 = v138;
              unint64_t v142 = __clz(__rbit64(v141)) | (v138 << 6);
            }

            else
            {
              int64_t v149 = v138 + 1;
              if (__OFADD__(v138, 1LL)) {
                goto LABEL_82;
              }
              if (v149 >= v168) {
                break;
              }
              unint64_t v150 = *(void *)(v167 + 8 * v149);
              int64_t v151 = v138 + 1;
              if (!v150)
              {
                int64_t v151 = v138 + 2;
                if (v138 + 2 >= v168) {
                  break;
                }
                unint64_t v150 = *(void *)(v167 + 8 * v151);
                if (!v150)
                {
                  int64_t v151 = v138 + 3;
                  if (v138 + 3 >= v168) {
                    break;
                  }
                  unint64_t v150 = *(void *)(v167 + 8 * v151);
                  if (!v150)
                  {
                    int64_t v151 = v138 + 4;
                    if (v138 + 4 >= v168) {
                      break;
                    }
                    unint64_t v150 = *(void *)(v167 + 8 * v151);
                    if (!v150)
                    {
                      uint64_t v152 = v138 + 5;
                      if (v138 + 5 >= v168) {
                        break;
                      }
                      unint64_t v150 = *(void *)(v167 + 8 * v152);
                      if (!v150)
                      {
                        while (1)
                        {
                          int64_t v151 = v152 + 1;
                          if (__OFADD__(v152, 1LL)) {
                            break;
                          }
                          if (v151 >= v168) {
                            goto LABEL_68;
                          }
                          unint64_t v150 = *(void *)(v167 + 8 * v151);
                          ++v152;
                          if (v150) {
                            goto LABEL_67;
                          }
                        }

uint64_t specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v10 = v8;
  uint64_t v62 = *MEMORY[0x1895F89C0];
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    LOBYTE(v50) = v39;
    BYTE1(v50) = v40;
    uint64_t v51 = v41;
    uint64_t v42 = a2;
    uint64_t v43 = *(void *)(*(void *)(v8 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v43 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v43 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:),  a1,  v42,  &v59);
    os_unfair_lock_unlock((os_unfair_lock_t)(v43 + 40));
    swift_release();
    return swift_release();
  }

  uint64_t v16 = a7;
  uint64_t v17 = a6;
  if (v14 == 5 && !(a2 | a1) && a3 == 160)
  {
    uint64_t v19 = a5;
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    *uint64_t v22 = MEMORY[0x189618560];
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }

    else
    {
      outlined copy of _CodingKey(v19, a6, v16, a8);
      uint64_t v24 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v26 = swift_allocObject();
      *(void *)(inited + 32) = v26;
      *(void *)(v26 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v19;
      *(void *)(v26 + 24) = a6;
      *(void *)(v26 + 32) = v16;
      *(_BYTE *)(v26 + 40) = a8;
      uint64_t v60 = v24;
      specialized Array.append<A>(contentsOf:)(inited);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v60 = 0LL;
    unint64_t v61 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(55LL);
    v45._object = (void *)0x80000001839D2D40LL;
    v45._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v45);
    v46._uint64_t countAndFlagsBits = 0x656C62756F44LL;
    v46._object = (void *)0xE600000000000000LL;
    String.append(_:)(v46);
    v47._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v47._object = (void *)0x80000001839D2D60LL;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v23,  *MEMORY[0x189619368],  v21);
    return swift_willThrow();
  }

  if ((a3 & 0xE1) != 1 || !*(void *)(v10 + 88))
  {
LABEL_12:
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }

    else
    {
      uint64_t v58 = a5;
      outlined copy of _CodingKey(a5, v17, v16, a8);
      uint64_t v35 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v36 = v17;
      uint64_t v37 = swift_initStackObject();
      *(_OWORD *)(v37 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(v37 + 56) = &type metadata for _CodingKey;
      *(void *)(v37 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v38 = swift_allocObject();
      *(void *)(v37 + 32) = v38;
      *(void *)(v38 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v58;
      *(void *)(v38 + 24) = v36;
      *(void *)(v38 + 32) = v16;
      *(_BYTE *)(v38 + 40) = a8;
      uint64_t v60 = v35;
      specialized Array.append<A>(contentsOf:)(v37);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x189618560], a3, v44);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  uint64_t v58 = a5;
  uint64_t v52 = a6;
  uint64_t v53 = a7;
  uint64_t v57 = &v52;
  __n128 v27 = MEMORY[0x1895F8858](a1);
  unint64_t v55 = v48;
  v48[2] = v29;
  v48[3] = v28;
  __n128 v49 = v27;
  uint64_t v50 = v31;
  uint64_t v51 = v30;
  uint64_t v32 = a2;
  uint64_t v33 = *(void *)(*(void *)(v10 + 32) + 24LL);
  unint64_t v54 = (void *)(v33 + 16);
  swift_retain();
  swift_retain();
  os_unfair_lock_t v56 = (os_unfair_lock_t)(v33 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v33 + 40));
  unint64_t v55 = (void *)v32;
  specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( v54,  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:),  a1,  v32,  (uint64_t)&v60);
  if (v9)
  {
    os_unfair_lock_unlock(v56);
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }

  else
  {
    os_unfair_lock_unlock(v56);
    swift_release();
    uint64_t result = swift_release();
    if ((v61 & 1) != 0)
    {
      uint64_t v16 = v53;
      uint64_t v17 = v52;
      a5 = v58;
      goto LABEL_12;
    }
  }

  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  void v48[4];
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  os_unfair_lock_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v10 = v8;
  uint64_t v62 = *MEMORY[0x1895F89C0];
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    LOBYTE(v50) = v39;
    BYTE1(v50) = v40;
    uint64_t v51 = v41;
    uint64_t v42 = a2;
    uint64_t v43 = *(void *)(*(void *)(v8 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v43 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v43 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:),  a1,  v42,  &v59);
    os_unfair_lock_unlock((os_unfair_lock_t)(v43 + 40));
    swift_release();
    return swift_release();
  }

  uint64_t v16 = a7;
  uint64_t v17 = a6;
  if (v14 == 5 && !(a2 | a1) && a3 == 160)
  {
    uint64_t v19 = a5;
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    *uint64_t v22 = MEMORY[0x189618560];
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }

    else
    {
      outlined copy of _CodingKey(v19, a6, v16, a8);
      uint64_t v24 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v26 = swift_allocObject();
      *(void *)(inited + 32) = v26;
      *(void *)(v26 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v19;
      *(void *)(v26 + 24) = a6;
      *(void *)(v26 + 32) = v16;
      *(_BYTE *)(v26 + 40) = a8;
      uint64_t v60 = v24;
      specialized Array.append<A>(contentsOf:)(inited);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v60 = 0LL;
    unint64_t v61 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(55LL);
    v45._object = (void *)0x80000001839D2D40LL;
    v45._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v45);
    v46._uint64_t countAndFlagsBits = 0x656C62756F44LL;
    v46._object = (void *)0xE600000000000000LL;
    String.append(_:)(v46);
    v47._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v47._object = (void *)0x80000001839D2D60LL;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v23,  *MEMORY[0x189619368],  v21);
    return swift_willThrow();
  }

  if ((a3 & 0xE1) != 1 || !*(void *)(v10 + 88))
  {
LABEL_12:
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }

    else
    {
      uint64_t v58 = a5;
      outlined copy of _CodingKey(a5, v17, v16, a8);
      uint64_t v35 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v36 = v17;
      uint64_t v37 = swift_initStackObject();
      *(_OWORD *)(v37 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(v37 + 56) = &type metadata for _CodingKey;
      *(void *)(v37 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v38 = swift_allocObject();
      *(void *)(v37 + 32) = v38;
      *(void *)(v38 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v58;
      *(void *)(v38 + 24) = v36;
      *(void *)(v38 + 32) = v16;
      *(_BYTE *)(v38 + 40) = a8;
      uint64_t v60 = v35;
      specialized Array.append<A>(contentsOf:)(v37);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x189618560], a3, v44);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  uint64_t v58 = a5;
  uint64_t v52 = a6;
  uint64_t v53 = a7;
  uint64_t v57 = &v52;
  __n128 v27 = MEMORY[0x1895F8858](a1);
  unint64_t v55 = v48;
  v48[2] = v29;
  v48[3] = v28;
  __n128 v49 = v27;
  uint64_t v50 = v31;
  uint64_t v51 = v30;
  uint64_t v32 = a2;
  uint64_t v33 = *(void *)(*(void *)(v10 + 32) + 24LL);
  unint64_t v54 = (void *)(v33 + 16);
  swift_retain();
  swift_retain();
  os_unfair_lock_t v56 = (os_unfair_lock_t)(v33 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v33 + 40));
  unint64_t v55 = (void *)v32;
  specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( v54,  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:),  a1,  v32,  (uint64_t)&v60);
  if (v9)
  {
    os_unfair_lock_unlock(v56);
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }

  else
  {
    os_unfair_lock_unlock(v56);
    swift_release();
    uint64_t result = swift_release();
    if ((v61 & 1) != 0)
    {
      uint64_t v16 = v53;
      uint64_t v17 = v52;
      a5 = v58;
      goto LABEL_12;
    }
  }

  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  void v48[4];
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  os_unfair_lock_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  void v60[22];
  uint64_t v10 = v8;
  v60[20] = *MEMORY[0x1895F89C0];
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    LOBYTE(v50) = v39;
    BYTE1(v50) = v40;
    uint64_t v51 = v41;
    uint64_t v42 = a2;
    uint64_t v43 = *(void *)(*(void *)(v8 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v43 + 40));
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( (void *)(v43 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:),  a1,  v42,  &v59);
    os_unfair_lock_unlock((os_unfair_lock_t)(v43 + 40));
    swift_release();
    return swift_release();
  }

  uint64_t v16 = a7;
  uint64_t v17 = a6;
  if (v14 == 5 && !(a2 | a1) && a3 == 160)
  {
    uint64_t v19 = a5;
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    *uint64_t v22 = MEMORY[0x189618620];
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }

    else
    {
      outlined copy of _CodingKey(v19, a6, v16, a8);
      uint64_t v24 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v26 = swift_allocObject();
      *(void *)(inited + 32) = v26;
      *(void *)(v26 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v19;
      *(void *)(v26 + 24) = a6;
      *(void *)(v26 + 32) = v16;
      *(_BYTE *)(v26 + 40) = a8;
      v60[0] = v24;
      specialized Array.append<A>(contentsOf:)(inited);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v60[0] = 0LL;
    v60[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(55LL);
    v45._object = (void *)0x80000001839D2D40LL;
    v45._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v45);
    v46._uint64_t countAndFlagsBits = 0x74616F6C46LL;
    v46._object = (void *)0xE500000000000000LL;
    String.append(_:)(v46);
    v47._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v47._object = (void *)0x80000001839D2D60LL;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v23,  *MEMORY[0x189619368],  v21);
    return swift_willThrow();
  }

  if ((a3 & 0xE1) != 1 || !*(void *)(v10 + 88))
  {
LABEL_12:
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }

    else
    {
      uint64_t v58 = a5;
      outlined copy of _CodingKey(a5, v17, v16, a8);
      uint64_t v35 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v36 = v17;
      uint64_t v37 = swift_initStackObject();
      *(_OWORD *)(v37 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      *(void *)(v37 + 56) = &type metadata for _CodingKey;
      *(void *)(v37 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v38 = swift_allocObject();
      *(void *)(v37 + 32) = v38;
      *(void *)(v38 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v58;
      *(void *)(v38 + 24) = v36;
      *(void *)(v38 + 32) = v16;
      *(_BYTE *)(v38 + 40) = a8;
      v60[0] = v35;
      specialized Array.append<A>(contentsOf:)(v37);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x189618620], a3, v44);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  uint64_t v58 = a5;
  uint64_t v52 = a6;
  uint64_t v53 = a7;
  uint64_t v57 = &v52;
  __n128 v27 = MEMORY[0x1895F8858](a1);
  unint64_t v55 = v48;
  v48[2] = v29;
  v48[3] = v28;
  __n128 v49 = v27;
  uint64_t v50 = v31;
  uint64_t v51 = v30;
  uint64_t v32 = a2;
  uint64_t v33 = *(void *)(*(void *)(v10 + 32) + 24LL);
  unint64_t v54 = (void *)(v33 + 16);
  swift_retain();
  swift_retain();
  os_unfair_lock_t v56 = (os_unfair_lock_t)(v33 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v33 + 40));
  unint64_t v55 = (void *)v32;
  specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( v54,  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:),  a1,  v32,  (uint64_t)v60);
  if (v9)
  {
    os_unfair_lock_unlock(v56);
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }

  else
  {
    os_unfair_lock_unlock(v56);
    swift_release();
    uint64_t result = swift_release();
    if ((v60[0] & 0x100000000LL) != 0)
    {
      uint64_t v16 = v53;
      uint64_t v17 = v52;
      a5 = v58;
      goto LABEL_12;
    }
  }

  return result;
}

uint64_t specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v77 = a7;
  uint64_t v73 = a5;
  unint64_t v76 = a4;
  *((void *)&v78 + 1) = a2;
  *(void *)&__int128 v78 = a1;
  uint64_t v82 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v7;
  uint64_t v75 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v71 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  int v14 = (char *)&v67 - v13;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v74 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v67 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)&v67 - v22;
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)&v67 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1895F8858](v25);
    uint64_t v49 = v77;
    *(&v67 - 4) = a6;
    *(&v67 - 3) = v49;
    *((_BYTE *)&v67 - __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v50;
    *((_BYTE *)&v67 - 15) = v51;
    *(&v67 - 1) = v10;
    uint64_t v52 = *(void *)(v8[4] + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v52 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v52 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:),  v78,  *((uint64_t *)&v78 + 1),  &v79);
    os_unfair_lock_unlock((os_unfair_lock_t)(v52 + 40));
    swift_release();
    return swift_release();
  }

  if (v30 == 5 && v78 == 0 && v26 == 160)
  {
    *(void *)&__int128 v78 = type metadata accessor for DecodingError();
    *((void *)&v78 + 1) = swift_allocError();
    uint64_t v72 = v31;
    *uint64_t v31 = MEMORY[0x189618560];
    uint64_t v32 = v74;
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
    v33(v29, v73, v15);
    v33(v23, (uint64_t)v29, v15);
    uint64_t v34 = v75;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v23, 1LL, a6) == 1)
    {
      uint64_t v35 = *(void (**)(char *, uint64_t))(v32 + 8);
      v35(v23, v15);
      _CodingPathNode.path.getter(v76);
      v35(v29, v15);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v14, v23, a6);
      uint64_t v59 = _CodingPathNode.path.getter(v76);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v61 = v77;
      *(void *)(inited + 56) = a6;
      *(void *)(inited + 64) = v61;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v14, a6);
      uint64_t v80 = v59;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v15);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v14, a6);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v63 = v72;
    uint64_t v80 = 0LL;
    unint64_t v81 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(55LL);
    v64._object = (void *)0x80000001839D2D40LL;
    v64._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v64);
    v65._uint64_t countAndFlagsBits = 0x656C62756F44LL;
    v65._object = (void *)0xE600000000000000LL;
    String.append(_:)(v65);
    v66._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v66._object = (void *)0x80000001839D2D60LL;
    String.append(_:)(v66);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v78 - 8) + 104LL))(v63, *MEMORY[0x189619368]);
    return swift_willThrow();
  }

  int v70 = v26;
  if ((v26 & 0xE1) != 1 || !v8[11])
  {
LABEL_11:
    uint64_t v45 = v74;
    Swift::String v46 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v74 + 16);
    v46(v20, v73, v15, v27);
    ((void (*)(char *, char *, uint64_t))v46)(v17, v20, v15);
    uint64_t v47 = v75;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v17, 1LL, a6) == 1)
    {
      uint64_t v48 = *(void (**)(char *, uint64_t))(v45 + 8);
      v48(v17, v15);
      _CodingPathNode.path.getter(v76);
      v48(v20, v15);
    }

    else
    {
      uint64_t v53 = v71;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v71, v17, a6);
      uint64_t v54 = _CodingPathNode.path.getter(v76);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v55 = swift_initStackObject();
      *(_OWORD *)(v55 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v56 = v77;
      *(void *)(v55 + 56) = a6;
      *(void *)(v55 + 64) = v56;
      uint64_t v57 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v55 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v47 + 16))(v57, v53, a6);
      uint64_t v80 = v54;
      specialized Array.append<A>(contentsOf:)(v55);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v20, v15);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v53, a6);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x189618560], v70, v58);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  uint64_t v69 = &v67;
  __n128 v36 = MEMORY[0x1895F8858](v25);
  uint64_t v37 = v77;
  *(&v67 - 8) = a6;
  *(&v67 - 7) = v37;
  *(&v67 - 6) = v39;
  *(&v67 - 5) = v38;
  *((__n128 *)&v67 - 2) = v36;
  *(&v67 - 2) = v41;
  *(&v67 - 1) = v40;
  uint64_t v42 = *(void *)(v8[4] + 24LL);
  char v68 = (void *)(v42 + 16);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v42 + 40));
  uint64_t v43 = v72;
  specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( v68,  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:),  v78,  *((uint64_t *)&v78 + 1),  (uint64_t)&v80);
  if (v43)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 40));
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }

  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 40));
    swift_release();
    uint64_t result = swift_release();
    if ((v81 & 1) != 0) {
      goto LABEL_11;
    }
  }

  return result;
}

{
  void *v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  void *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t result;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, __n128);
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  void *v58;
  uint64_t v59;
  uint64_t inited;
  uint64_t v61;
  uint64_t *boxed_opaque_existential_1;
  void *v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  uint64_t v67;
  void *v68;
  uint64_t *v69;
  int v70;
  char *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  void v80[21];
  uint64_t v8 = v7;
  uint64_t v77 = a7;
  uint64_t v73 = a5;
  unint64_t v76 = a4;
  *((void *)&v78 + 1) = a2;
  *(void *)&__int128 v78 = a1;
  v80[20] = *MEMORY[0x1895F89C0];
  uint64_t v10 = *v7;
  uint64_t v75 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v71 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  int v14 = (char *)&v67 - v13;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v74 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v67 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)&v67 - v22;
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)&v67 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1895F8858](v25);
    uint64_t v49 = v77;
    *(&v67 - 4) = a6;
    *(&v67 - 3) = v49;
    *((_BYTE *)&v67 - __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v50;
    *((_BYTE *)&v67 - 15) = v51;
    *(&v67 - 1) = v10;
    uint64_t v52 = *(void *)(v8[4] + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v52 + 40));
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( (void *)(v52 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:),  v78,  *((uint64_t *)&v78 + 1),  &v79);
    os_unfair_lock_unlock((os_unfair_lock_t)(v52 + 40));
    swift_release();
    return swift_release();
  }

  if (v30 == 5 && v78 == 0 && v26 == 160)
  {
    *(void *)&__int128 v78 = type metadata accessor for DecodingError();
    *((void *)&v78 + 1) = swift_allocError();
    uint64_t v72 = v31;
    *uint64_t v31 = MEMORY[0x189618620];
    uint64_t v32 = v74;
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
    v33(v29, v73, v15);
    v33(v23, (uint64_t)v29, v15);
    uint64_t v34 = v75;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v23, 1LL, a6) == 1)
    {
      uint64_t v35 = *(void (**)(char *, uint64_t))(v32 + 8);
      v35(v23, v15);
      _CodingPathNode.path.getter(v76);
      v35(v29, v15);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v14, v23, a6);
      uint64_t v59 = _CodingPathNode.path.getter(v76);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v61 = v77;
      *(void *)(inited + 56) = a6;
      *(void *)(inited + 64) = v61;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v14, a6);
      v80[0] = v59;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v15);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v14, a6);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v63 = v72;
    v80[0] = 0LL;
    v80[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(55LL);
    v64._object = (void *)0x80000001839D2D40LL;
    v64._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v64);
    v65._uint64_t countAndFlagsBits = 0x74616F6C46LL;
    v65._object = (void *)0xE500000000000000LL;
    String.append(_:)(v65);
    v66._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v66._object = (void *)0x80000001839D2D60LL;
    String.append(_:)(v66);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v78 - 8) + 104LL))(v63, *MEMORY[0x189619368]);
    return swift_willThrow();
  }

  int v70 = v26;
  if ((v26 & 0xE1) != 1 || !v8[11])
  {
LABEL_11:
    uint64_t v45 = v74;
    Swift::String v46 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v74 + 16);
    v46(v20, v73, v15, v27);
    ((void (*)(char *, char *, uint64_t))v46)(v17, v20, v15);
    uint64_t v47 = v75;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v17, 1LL, a6) == 1)
    {
      uint64_t v48 = *(void (**)(char *, uint64_t))(v45 + 8);
      v48(v17, v15);
      _CodingPathNode.path.getter(v76);
      v48(v20, v15);
    }

    else
    {
      uint64_t v53 = v71;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v71, v17, a6);
      uint64_t v54 = _CodingPathNode.path.getter(v76);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v55 = swift_initStackObject();
      *(_OWORD *)(v55 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
      uint64_t v56 = v77;
      *(void *)(v55 + 56) = a6;
      *(void *)(v55 + 64) = v56;
      uint64_t v57 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v55 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v47 + 16))(v57, v53, a6);
      v80[0] = v54;
      specialized Array.append<A>(contentsOf:)(v55);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v20, v15);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v53, a6);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x189618620], v70, v58);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  uint64_t v69 = &v67;
  __n128 v36 = MEMORY[0x1895F8858](v25);
  uint64_t v37 = v77;
  *(&v67 - 8) = a6;
  *(&v67 - 7) = v37;
  *(&v67 - 6) = v39;
  *(&v67 - 5) = v38;
  *((__n128 *)&v67 - 2) = v36;
  *(&v67 - 2) = v41;
  *(&v67 - 1) = v40;
  uint64_t v42 = *(void *)(v8[4] + 24LL);
  char v68 = (void *)(v42 + 16);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v42 + 40));
  uint64_t v43 = v72;
  specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( v68,  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:),  v78,  *((uint64_t *)&v78 + 1),  (uint64_t)v80);
  if (v43)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 40));
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }

  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 40));
    swift_release();
    uint64_t result = swift_release();
    if ((v80[0] & 0x100000000LL) != 0) {
      goto LABEL_11;
    }
  }

  return result;
}

uint64_t specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)( uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v10 = v8;
  v36[20] = *MEMORY[0x1895F89C0];
  if ((a3 & 0xE0) == 0xA0)
  {
    if (!(a2 | a1) && a3 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v21 = v20;
      *uint64_t v20 = MEMORY[0x189617FA8];
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        uint64_t v22 = _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v24 = swift_allocObject();
        *(void *)(inited + 32) = v24;
        *(void *)(v24 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v24 + 24) = a6;
        *(void *)(v24 + 32) = a7;
        *(_BYTE *)(v24 + 40) = a8;
        v36[0] = v22;
        specialized Array.append<A>(contentsOf:)(inited);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v36[0] = 0LL;
      v36[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v31._object = (void *)0x80000001839D2D40LL;
      v31._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v31);
      v32._uint64_t countAndFlagsBits = 0x676E69727453LL;
      v32._object = (void *)0xE600000000000000LL;
      String.append(_:)(v32);
      v33._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v33._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v33);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
      return swift_willThrow();
    }

uint64_t JSONDecoderImpl.unwrapString<A>(from:for:_:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v63 = a7;
  uint64_t v65 = a5;
  unint64_t v64 = a4;
  v69[20] = *MEMORY[0x1895F89C0];
  uint64_t v66 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v61 = (char *)&v61 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v61 - v18;
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)&v61 - v21;
  __n128 v27 = MEMORY[0x1895F8858](v23);
  uint64_t v29 = (char *)&v61 - v28;
  uint64_t v68 = a2;
  if ((v26 & 0xE0) == 0xA0)
  {
    if (!(a2 | a1) && v26 == 160)
    {
      uint64_t v30 = v25;
      uint64_t v68 = type metadata accessor for DecodingError();
      swift_allocError();
      Swift::String v32 = v31;
      *Swift::String v31 = MEMORY[0x189617FA8];
      Swift::String v33 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
      v33(v29, v65, v14);
      v33(v22, (uint64_t)v29, v14);
      uint64_t v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v22, 1LL, a6) == 1)
      {
        uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
        v35(v22, v14);
        _CodingPathNode.path.getter(v64);
        v35(v29, v14);
      }

      else
      {
        char v51 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
        uint64_t v67 = v32;
        uint64_t v52 = v61;
        v51(v61, v22, a6);
        uint64_t v53 = _CodingPathNode.path.getter(v64);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v55 = v63;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v55;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v52, a6);
        v69[0] = v53;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v14);
        uint64_t v57 = v52;
        Swift::String v32 = v67;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v57, a6);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v69[0] = 0LL;
      v69[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v58._object = (void *)0x80000001839D2D40LL;
      v58._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v58);
      v59._uint64_t countAndFlagsBits = 0x676E69727453LL;
      v59._object = (void *)0xE600000000000000LL;
      String.append(_:)(v59);
      v60._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v60._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v60);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(v68 - 8) + 104LL))(v32, *MEMORY[0x189619368]);
      return swift_willThrow();
    }

unint64_t closure #1 in JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)@<X0>( char *__s1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  if ((a5 & 1) != 0)
  {
    unint64_t result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (v7) {
      return result;
    }
    if ((v14 & 1) == 0)
    {
      if ((v14 & 0x100) != 0)
      {
        uint64_t v38 = 0LL;
        uint64_t v39 = 0LL;
        _So9NSDecimala__exponent_setter(0LL, &v37);
        _So9NSDecimala__length_setter(0LL, &v37);
        _So9NSDecimala__isNegative_setter(1LL, &v37);
        _So9NSDecimala__isCompact_setter_0(0LL, &v37);
        _So9NSDecimala__reserved_setter(&v37);
        unint64_t result = v37;
        LOWORD(v25) = v38;
        LOWORD(v26) = WORD1(v38);
        LOWORD(v23) = WORD2(v38);
        LOWORD(v27) = HIWORD(v38);
        LOWORD(v28) = v39;
        LOWORD(v29) = WORD1(v39);
        LOWORD(v24) = WORD2(v39);
        LOWORD(v30) = HIWORD(v39);
      }

      else
      {
        uint64_t v15 = (char *)result;
        specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)__s1,  a2,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v40);
        outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v40, (uint64_t)&v44);
        unint64_t result = v44;
        if (v48 == 1)
        {
          if (!(v46 | v47 | v44 | v45))
          {
            uint64_t v16 = &__s1[a2] - v15;
            if ((((v15 - __s1) | v16) & 0x8000000000000000LL) == 0)
            {
              specialized static JSON5Scanner.validateNumber(from:fullSource:)(v15, v16, a3, a4, (uint64_t)v41);
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              uint64_t v18 = v41;
LABEL_14:
              outlined init with take of JSONError((uint64_t)v18, v17);
              return swift_willThrow();
            }

            goto LABEL_30;
          }

void JSONDecoderImpl.createTypeMismatchError(type:for:value:)( uint64_t a1@<X0>, char a2@<W4>, void *a3@<X8>)
{
  *a3 = a1;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(43LL);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x756F662074756220LL;
  v5._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v5);
  __asm { BR              X10 }

uint64_t sub_1834141C4()
{
  v1._uint64_t countAndFlagsBits = 0x7265626D756ELL;
  v1._object = (void *)0xE600000000000000LL;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x64616574736E6920LL;
  v2._object = (void *)0xE90000000000002ELL;
  String.append(_:)(v2);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v3 = *MEMORY[0x189619358];
  uint64_t v4 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104LL))(v0, v3, v4);
}

uint64_t closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  if ((a5 & 1) != 0)
  {
    uint64_t result = static String._tryFromUTF8(_:)();
    if (!v13)
    {
      unint64_t v14 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a1, a3, a4);
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v19 = v14;
      *(void *)(v19 + 8) = v16;
      *(void *)(v19 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v18;
      *(void *)(v19 + 24) = 0LL;
      *(void *)(v19 + 32) = 0LL;
      *(void *)(v19 + 40) = 0LL;
      *(_BYTE *)(v19 + 48) = 0;
      return swift_willThrow();
    }
  }

  else if ((a6 & 1) != 0)
  {
    uint64_t result = static JSON5Scanner.stringValue(from:fullSource:)(a1, a2, a3, a4);
    if (v7) {
      return result;
    }
  }

  else
  {
    uint64_t result = static JSONScanner.stringValue(from:fullSource:)(a1, a2, a3, a4);
    if (v7) {
      return result;
    }
  }

  *a7 = result;
  a7[1] = v13;
  return result;
}

uint64_t specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v10 = v8;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  unsigned __int8 v42 = a8;
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v30 = *(void *)(*(void *)(v10 + 32) + 24LL);
    uint64_t v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v30 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a1,  v32,  &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v38;
    }
  }

  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v21 = v20;
      *uint64_t v20 = MEMORY[0x189618740];
      char v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        uint64_t v24 = v40;
        uint64_t v23 = v41;
        uint64_t v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v27 = swift_allocObject();
        *(void *)(inited + 32) = v27;
        *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
        *(void *)(v27 + 24) = v24;
        *(void *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55LL);
      v35._object = (void *)0x80000001839D2D40LL;
      v35._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 7630409LL;
      v36._object = (void *)0xE300000000000000LL;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
    }

    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v28 = swift_initStackObject();
        *(_OWORD *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(v28 + 56) = &type metadata for _CodingKey;
        *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v29 = swift_allocObject();
        *(void *)(v28 + 32) = v29;
        *(void *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v29 + 24) = a6;
        *(void *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x189618740], a3, v34);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v10 = v8;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  unsigned __int8 v42 = a8;
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v30 = *(void *)(*(void *)(v10 + 32) + 24LL);
    uint64_t v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v30 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a1,  v32,  &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v38;
    }
  }

  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v21 = v20;
      *uint64_t v20 = MEMORY[0x189618CD8];
      char v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        uint64_t v24 = v40;
        uint64_t v23 = v41;
        uint64_t v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v27 = swift_allocObject();
        *(void *)(inited + 32) = v27;
        *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
        *(void *)(v27 + 24) = v24;
        *(void *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55LL);
      v35._object = (void *)0x80000001839D2D40LL;
      v35._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 1953384789LL;
      v36._object = (void *)0xE400000000000000LL;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
    }

    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v28 = swift_initStackObject();
        *(_OWORD *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(v28 + 56) = &type metadata for _CodingKey;
        *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v29 = swift_allocObject();
        *(void *)(v28 + 32) = v29;
        *(void *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v29 + 24) = a6;
        *(void *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x189618CD8], a3, v34);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v10 = v8;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  unsigned __int8 v42 = a8;
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v30 = *(void *)(*(void *)(v10 + 32) + 24LL);
    uint64_t v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v30 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a1,  v32,  &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v38;
    }
  }

  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v21 = v20;
      *uint64_t v20 = MEMORY[0x18961A610];
      char v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        uint64_t v24 = v40;
        uint64_t v23 = v41;
        uint64_t v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v27 = swift_allocObject();
        *(void *)(inited + 32) = v27;
        *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
        *(void *)(v27 + 24) = v24;
        *(void *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55LL);
      v35._object = (void *)0x80000001839D2D40LL;
      v35._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 0x38746E4955LL;
      v36._object = (void *)0xE500000000000000LL;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
    }

    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v28 = swift_initStackObject();
        *(_OWORD *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(v28 + 56) = &type metadata for _CodingKey;
        *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v29 = swift_allocObject();
        *(void *)(v28 + 32) = v29;
        *(void *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v29 + 24) = a6;
        *(void *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A610], a3, v34);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unsigned __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v10 = v8;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  unsigned __int8 v42 = a8;
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v30 = *(void *)(*(void *)(v10 + 32) + 24LL);
    uint64_t v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( (void *)(v30 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a1,  v32,  &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v38;
    }
  }

  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v21 = v20;
      *uint64_t v20 = MEMORY[0x18961A800];
      char v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        uint64_t v24 = v40;
        uint64_t v23 = v41;
        uint64_t v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v27 = swift_allocObject();
        *(void *)(inited + 32) = v27;
        *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
        *(void *)(v27 + 24) = v24;
        *(void *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55LL);
      v35._object = (void *)0x80000001839D2D40LL;
      v35._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 0x3631746E4955LL;
      v36._object = (void *)0xE600000000000000LL;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
    }

    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v28 = swift_initStackObject();
        *(_OWORD *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(v28 + 56) = &type metadata for _CodingKey;
        *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v29 = swift_allocObject();
        *(void *)(v28 + 32) = v29;
        *(void *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v29 + 24) = a6;
        *(void *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A800], a3, v34);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v10 = v8;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  unsigned __int8 v42 = a8;
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v30 = *(void *)(*(void *)(v10 + 32) + 24LL);
    uint64_t v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v30 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a1,  v32,  &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v38;
    }
  }

  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v21 = v20;
      *uint64_t v20 = MEMORY[0x18961A350];
      char v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        uint64_t v24 = v40;
        uint64_t v23 = v41;
        uint64_t v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v27 = swift_allocObject();
        *(void *)(inited + 32) = v27;
        *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
        *(void *)(v27 + 24) = v24;
        *(void *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55LL);
      v35._object = (void *)0x80000001839D2D40LL;
      v35._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 947154505LL;
      v36._object = (void *)0xE400000000000000LL;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
    }

    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v28 = swift_initStackObject();
        *(_OWORD *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(v28 + 56) = &type metadata for _CodingKey;
        *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v29 = swift_allocObject();
        *(void *)(v28 + 32) = v29;
        *(void *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v29 + 24) = a6;
        *(void *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A350], a3, v34);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unsigned __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v10 = v8;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  unsigned __int8 v42 = a8;
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v30 = *(void *)(*(void *)(v10 + 32) + 24LL);
    uint64_t v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( (void *)(v30 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a1,  v32,  &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v38;
    }
  }

  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v21 = v20;
      *uint64_t v20 = MEMORY[0x18961A408];
      char v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        uint64_t v24 = v40;
        uint64_t v23 = v41;
        uint64_t v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v27 = swift_allocObject();
        *(void *)(inited + 32) = v27;
        *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
        *(void *)(v27 + 24) = v24;
        *(void *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55LL);
      v35._object = (void *)0x80000001839D2D40LL;
      v35._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 0x3631746E49LL;
      v36._object = (void *)0xE500000000000000LL;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
    }

    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v28 = swift_initStackObject();
        *(_OWORD *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(v28 + 56) = &type metadata for _CodingKey;
        *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v29 = swift_allocObject();
        *(void *)(v28 + 32) = v29;
        *(void *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v29 + 24) = a6;
        *(void *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A408], a3, v34);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v10 = v8;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  unsigned __int8 v42 = a8;
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v30 = *(void *)(*(void *)(v10 + 32) + 24LL);
    uint64_t v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( (void *)(v30 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a1,  v32,  &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v38;
    }
  }

  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v21 = v20;
      *uint64_t v20 = MEMORY[0x18961A458];
      char v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        uint64_t v24 = v40;
        uint64_t v23 = v41;
        uint64_t v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v27 = swift_allocObject();
        *(void *)(inited + 32) = v27;
        *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
        *(void *)(v27 + 24) = v24;
        *(void *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55LL);
      v35._object = (void *)0x80000001839D2D40LL;
      v35._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 0x3233746E49LL;
      v36._object = (void *)0xE500000000000000LL;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
    }

    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v28 = swift_initStackObject();
        *(_OWORD *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(v28 + 56) = &type metadata for _CodingKey;
        *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v29 = swift_allocObject();
        *(void *)(v28 + 32) = v29;
        *(void *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v29 + 24) = a6;
        *(void *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A458], a3, v34);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v10 = v8;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  unsigned __int8 v42 = a8;
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v30 = *(void *)(*(void *)(v10 + 32) + 24LL);
    uint64_t v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v30 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a1,  v32,  &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v38;
    }
  }

  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v21 = v20;
      *uint64_t v20 = MEMORY[0x18961A4C0];
      char v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        uint64_t v24 = v40;
        uint64_t v23 = v41;
        uint64_t v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v27 = swift_allocObject();
        *(void *)(inited + 32) = v27;
        *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
        *(void *)(v27 + 24) = v24;
        *(void *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55LL);
      v35._object = (void *)0x80000001839D2D40LL;
      v35._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 0x3436746E49LL;
      v36._object = (void *)0xE500000000000000LL;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
    }

    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v28 = swift_initStackObject();
        *(_OWORD *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(v28 + 56) = &type metadata for _CodingKey;
        *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v29 = swift_allocObject();
        *(void *)(v28 + 32) = v29;
        *(void *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v29 + 24) = a6;
        *(void *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A4C0], a3, v34);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v10 = v8;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  unsigned __int8 v42 = a8;
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v30 = *(void *)(*(void *)(v10 + 32) + 24LL);
    uint64_t v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v30 + 16),  (void *(*)(void *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a1,  v32,  &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v38;
    }
  }

  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v21 = v20;
      *uint64_t v20 = MEMORY[0x18961A6E0];
      char v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        uint64_t v24 = v40;
        uint64_t v23 = v41;
        uint64_t v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v27 = swift_allocObject();
        *(void *)(inited + 32) = v27;
        *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
        *(void *)(v27 + 24) = v24;
        *(void *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55LL);
      v35._object = (void *)0x80000001839D2D40LL;
      v35._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 0x383231746E49LL;
      v36._object = (void *)0xE600000000000000LL;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
    }

    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v28 = swift_initStackObject();
        *(_OWORD *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(v28 + 56) = &type metadata for _CodingKey;
        *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v29 = swift_allocObject();
        *(void *)(v28 + 32) = v29;
        *(void *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v29 + 24) = a6;
        *(void *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A6E0], a3, v34);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v10 = v8;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  unsigned __int8 v42 = a8;
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v30 = *(void *)(*(void *)(v10 + 32) + 24LL);
    uint64_t v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( (void *)(v30 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a1,  v32,  &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v38;
    }
  }

  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v21 = v20;
      *uint64_t v20 = MEMORY[0x18961A860];
      char v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        uint64_t v24 = v40;
        uint64_t v23 = v41;
        uint64_t v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v27 = swift_allocObject();
        *(void *)(inited + 32) = v27;
        *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
        *(void *)(v27 + 24) = v24;
        *(void *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55LL);
      v35._object = (void *)0x80000001839D2D40LL;
      v35._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 0x3233746E4955LL;
      v36._object = (void *)0xE600000000000000LL;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
    }

    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v28 = swift_initStackObject();
        *(_OWORD *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(v28 + 56) = &type metadata for _CodingKey;
        *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v29 = swift_allocObject();
        *(void *)(v28 + 32) = v29;
        *(void *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v29 + 24) = a6;
        *(void *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A860], a3, v34);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v10 = v8;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  unsigned __int8 v42 = a8;
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v30 = *(void *)(*(void *)(v10 + 32) + 24LL);
    uint64_t v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v30 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a1,  v32,  &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v38;
    }
  }

  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v21 = v20;
      *uint64_t v20 = MEMORY[0x18961A8C8];
      char v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        uint64_t v24 = v40;
        uint64_t v23 = v41;
        uint64_t v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v27 = swift_allocObject();
        *(void *)(inited + 32) = v27;
        *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
        *(void *)(v27 + 24) = v24;
        *(void *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55LL);
      v35._object = (void *)0x80000001839D2D40LL;
      v35._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 0x3436746E4955LL;
      v36._object = (void *)0xE600000000000000LL;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
    }

    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v28 = swift_initStackObject();
        *(_OWORD *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(v28 + 56) = &type metadata for _CodingKey;
        *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v29 = swift_allocObject();
        *(void *)(v28 + 32) = v29;
        *(void *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v29 + 24) = a6;
        *(void *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A8C8], a3, v34);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v10 = v8;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  unsigned __int8 v42 = a8;
  int v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v30 = *(void *)(*(void *)(v10 + 32) + 24LL);
    uint64_t v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v30 + 16),  (void *(*)(void *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a1,  v32,  &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v9) {
      return v38;
    }
  }

  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v21 = v20;
      *uint64_t v20 = MEMORY[0x18961A9B8];
      char v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        uint64_t v24 = v40;
        uint64_t v23 = v41;
        uint64_t v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v27 = swift_allocObject();
        *(void *)(inited + 32) = v27;
        *(void *)(v27 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
        *(void *)(v27 + 24) = v24;
        *(void *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55LL);
      v35._object = (void *)0x80000001839D2D40LL;
      v35._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 0x383231746E4955LL;
      v36._object = (void *)0xE700000000000000LL;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
    }

    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }

      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v28 = swift_initStackObject();
        *(_OWORD *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        *(void *)(v28 + 56) = &type metadata for _CodingKey;
        *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v29 = swift_allocObject();
        *(void *)(v28 + 32) = v29;
        *(void *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a5;
        *(void *)(v29 + 24) = a6;
        *(void *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A9B8], a3, v34);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

uint64_t specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v65 = a7;
  uint64_t v68 = a5;
  unint64_t v67 = a4;
  *((void *)&v69 + 1) = a2;
  *(void *)&__int128 v69 = a1;
  v72[19] = *MEMORY[0x1895F89C0];
  uint64_t v9 = *v7;
  uint64_t v66 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  v64[0] = (char *)v64 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)v64 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)v64 - v22;
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)v64 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1895F8858](v25);
    uint64_t v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    unint64_t v43 = v67;
    v64[-5] = MEMORY[0x189618740];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    uint64_t v45 = *(void *)(*(void *)(v44 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    uint64_t v46 = v64[1];
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v45 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  v69,  *((uint64_t *)&v69 + 1),  v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v46) {
      return v72[0];
    }
  }

  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      uint64_t v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((void *)&v69 + 1) = v32;
      *uint64_t v32 = MEMORY[0x189618740];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      uint64_t v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1LL, a6) == 1)
      {
        Swift::String v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }

      else
      {
        (*(void (**)(void, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        uint64_t v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(void *)&__int128 v69 = v31;
        uint64_t v55 = inited;
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v56 = v65;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        uint64_t v58 = v64[0];
        (*(void (**)(uint64_t *, void, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        uint64_t v70 = v53;
        uint64_t v59 = v55;
        uint64_t v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v60 = *((void *)&v69 + 1);
      uint64_t v70 = 0LL;
      unint64_t v71 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v61._object = (void *)0x80000001839D2D40LL;
      v61._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v61);
      v62._uint64_t countAndFlagsBits = 7630409LL;
      v62._object = (void *)0xE300000000000000LL;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v60,  *MEMORY[0x189619368],  v31);
    }

    else
    {
      char v36 = v26;
      Swift::String v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      uint64_t v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1LL, a6) == 1)
      {
        uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        uint64_t v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v49 = swift_initStackObject();
        *(_OWORD *)(v49 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v50 = v65;
        *(void *)(v49 + 56) = a6;
        *(void *)(v49 + 64) = v50;
        uint64_t v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        uint64_t v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x189618740], v36, v52);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  void v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v65 = a7;
  uint64_t v68 = a5;
  unint64_t v67 = a4;
  *((void *)&v69 + 1) = a2;
  *(void *)&__int128 v69 = a1;
  uint64_t v73 = *MEMORY[0x1895F89C0];
  uint64_t v9 = *v7;
  uint64_t v66 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  v64[0] = (char *)v64 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)v64 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)v64 - v22;
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)v64 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1895F8858](v25);
    uint64_t v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    unint64_t v43 = v67;
    v64[-5] = MEMORY[0x18961A350];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    uint64_t v45 = *(void *)(*(void *)(v44 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    uint64_t v46 = v64[1];
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v45 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  v69,  *((uint64_t *)&v69 + 1),  &v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v46) {
      return v72;
    }
  }

  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      uint64_t v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((void *)&v69 + 1) = v32;
      *uint64_t v32 = MEMORY[0x18961A350];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      uint64_t v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1LL, a6) == 1)
      {
        Swift::String v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }

      else
      {
        (*(void (**)(void, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        uint64_t v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(void *)&__int128 v69 = v31;
        uint64_t v55 = inited;
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v56 = v65;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        uint64_t v58 = v64[0];
        (*(void (**)(uint64_t *, void, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        uint64_t v70 = v53;
        uint64_t v59 = v55;
        uint64_t v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v60 = *((void *)&v69 + 1);
      uint64_t v70 = 0LL;
      unint64_t v71 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v61._object = (void *)0x80000001839D2D40LL;
      v61._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v61);
      v62._uint64_t countAndFlagsBits = 947154505LL;
      v62._object = (void *)0xE400000000000000LL;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v60,  *MEMORY[0x189619368],  v31);
    }

    else
    {
      char v36 = v26;
      Swift::String v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      uint64_t v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1LL, a6) == 1)
      {
        uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        uint64_t v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v49 = swift_initStackObject();
        *(_OWORD *)(v49 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v50 = v65;
        *(void *)(v49 + 56) = a6;
        *(void *)(v49 + 64) = v50;
        uint64_t v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        uint64_t v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A350], v36, v52);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  void v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int16 v72;
  uint64_t v73;
  uint64_t v65 = a7;
  uint64_t v68 = a5;
  unint64_t v67 = a4;
  *((void *)&v69 + 1) = a2;
  *(void *)&__int128 v69 = a1;
  uint64_t v73 = *MEMORY[0x1895F89C0];
  uint64_t v9 = *v7;
  uint64_t v66 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  v64[0] = (char *)v64 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)v64 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)v64 - v22;
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)v64 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1895F8858](v25);
    uint64_t v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    unint64_t v43 = v67;
    v64[-5] = MEMORY[0x18961A408];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    uint64_t v45 = *(void *)(*(void *)(v44 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    uint64_t v46 = v64[1];
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( (void *)(v45 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  v69,  *((uint64_t *)&v69 + 1),  &v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v46) {
      return v72;
    }
  }

  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      uint64_t v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((void *)&v69 + 1) = v32;
      *uint64_t v32 = MEMORY[0x18961A408];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      uint64_t v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1LL, a6) == 1)
      {
        Swift::String v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }

      else
      {
        (*(void (**)(void, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        uint64_t v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(void *)&__int128 v69 = v31;
        uint64_t v55 = inited;
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v56 = v65;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        uint64_t v58 = v64[0];
        (*(void (**)(uint64_t *, void, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        uint64_t v70 = v53;
        uint64_t v59 = v55;
        uint64_t v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v60 = *((void *)&v69 + 1);
      uint64_t v70 = 0LL;
      unint64_t v71 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v61._object = (void *)0x80000001839D2D40LL;
      v61._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v61);
      v62._uint64_t countAndFlagsBits = 0x3631746E49LL;
      v62._object = (void *)0xE500000000000000LL;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v60,  *MEMORY[0x189619368],  v31);
    }

    else
    {
      char v36 = v26;
      Swift::String v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      uint64_t v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1LL, a6) == 1)
      {
        uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        uint64_t v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v49 = swift_initStackObject();
        *(_OWORD *)(v49 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v50 = v65;
        *(void *)(v49 + 56) = a6;
        *(void *)(v49 + 64) = v50;
        uint64_t v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        uint64_t v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A408], v36, v52);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  void v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v65 = a7;
  uint64_t v68 = a5;
  unint64_t v67 = a4;
  *((void *)&v69 + 1) = a2;
  *(void *)&__int128 v69 = a1;
  uint64_t v73 = *MEMORY[0x1895F89C0];
  uint64_t v9 = *v7;
  uint64_t v66 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  v64[0] = (char *)v64 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)v64 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)v64 - v22;
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)v64 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1895F8858](v25);
    uint64_t v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    unint64_t v43 = v67;
    v64[-5] = MEMORY[0x18961A458];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    uint64_t v45 = *(void *)(*(void *)(v44 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    uint64_t v46 = v64[1];
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( (void *)(v45 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  v69,  *((uint64_t *)&v69 + 1),  &v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v46) {
      return v72;
    }
  }

  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      uint64_t v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((void *)&v69 + 1) = v32;
      *uint64_t v32 = MEMORY[0x18961A458];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      uint64_t v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1LL, a6) == 1)
      {
        Swift::String v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }

      else
      {
        (*(void (**)(void, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        uint64_t v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(void *)&__int128 v69 = v31;
        uint64_t v55 = inited;
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v56 = v65;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        uint64_t v58 = v64[0];
        (*(void (**)(uint64_t *, void, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        uint64_t v70 = v53;
        uint64_t v59 = v55;
        uint64_t v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v60 = *((void *)&v69 + 1);
      uint64_t v70 = 0LL;
      unint64_t v71 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v61._object = (void *)0x80000001839D2D40LL;
      v61._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v61);
      v62._uint64_t countAndFlagsBits = 0x3233746E49LL;
      v62._object = (void *)0xE500000000000000LL;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v60,  *MEMORY[0x189619368],  v31);
    }

    else
    {
      char v36 = v26;
      Swift::String v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      uint64_t v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1LL, a6) == 1)
      {
        uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        uint64_t v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v49 = swift_initStackObject();
        *(_OWORD *)(v49 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v50 = v65;
        *(void *)(v49 + 56) = a6;
        *(void *)(v49 + 64) = v50;
        uint64_t v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        uint64_t v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A458], v36, v52);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  void v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  void v72[21];
  uint64_t v65 = a7;
  uint64_t v68 = a5;
  unint64_t v67 = a4;
  *((void *)&v69 + 1) = a2;
  *(void *)&__int128 v69 = a1;
  v72[19] = *MEMORY[0x1895F89C0];
  uint64_t v9 = *v7;
  uint64_t v66 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  v64[0] = (char *)v64 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)v64 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)v64 - v22;
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)v64 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1895F8858](v25);
    uint64_t v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    unint64_t v43 = v67;
    v64[-5] = MEMORY[0x18961A4C0];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    uint64_t v45 = *(void *)(*(void *)(v44 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    uint64_t v46 = v64[1];
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v45 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  v69,  *((uint64_t *)&v69 + 1),  v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v46) {
      return v72[0];
    }
  }

  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      uint64_t v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((void *)&v69 + 1) = v32;
      *uint64_t v32 = MEMORY[0x18961A4C0];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      uint64_t v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1LL, a6) == 1)
      {
        Swift::String v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }

      else
      {
        (*(void (**)(void, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        uint64_t v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(void *)&__int128 v69 = v31;
        uint64_t v55 = inited;
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v56 = v65;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        uint64_t v58 = v64[0];
        (*(void (**)(uint64_t *, void, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        uint64_t v70 = v53;
        uint64_t v59 = v55;
        uint64_t v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v60 = *((void *)&v69 + 1);
      uint64_t v70 = 0LL;
      unint64_t v71 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v61._object = (void *)0x80000001839D2D40LL;
      v61._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v61);
      v62._uint64_t countAndFlagsBits = 0x3436746E49LL;
      v62._object = (void *)0xE500000000000000LL;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v60,  *MEMORY[0x189619368],  v31);
    }

    else
    {
      char v36 = v26;
      Swift::String v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      uint64_t v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1LL, a6) == 1)
      {
        uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        uint64_t v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v49 = swift_initStackObject();
        *(_OWORD *)(v49 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v50 = v65;
        *(void *)(v49 + 56) = a6;
        *(void *)(v49 + 64) = v50;
        uint64_t v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        uint64_t v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A4C0], v36, v52);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  void v74[21];
  unint64_t v67 = a7;
  uint64_t v70 = a5;
  __int128 v69 = a4;
  *((void *)&v71 + 1) = a2;
  *(void *)&unint64_t v71 = a1;
  v74[20] = *MEMORY[0x1895F89C0];
  uint64_t v9 = *v7;
  uint64_t v68 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v65 = (char *)&v64 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v64 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)&v64 - v22;
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)&v64 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1895F8858](v25);
    uint64_t v40 = v67;
    *(&v64 - 8) = a6;
    *(&v64 - 7) = v40;
    *((_BYTE *)&v64 - 48) = v41;
    *((_BYTE *)&v64 - 47) = v42;
    unint64_t v43 = v69;
    *(&v64 - 5) = MEMORY[0x18961A6E0];
    *(&v64 - 4) = v43;
    *(&v64 - 3) = v70;
    *(&v64 - 2) = v9;
    uint64_t v45 = *(void *)(*(void *)(v44 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    uint64_t v46 = v66;
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v45 + 16),  (void *(*)(void *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  v71,  *((uint64_t *)&v71 + 1),  v74);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v46) {
      return v74[0];
    }
  }

  else
  {
    if (v30 == 5 && v71 == 0 && v26 == 160)
    {
      uint64_t v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((void *)&v71 + 1) = v32;
      *uint64_t v32 = MEMORY[0x18961A6E0];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v70, v14);
      v33(v23, (uint64_t)v29, v14);
      uint64_t v34 = v68;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v23, 1LL, a6) == 1)
      {
        Swift::String v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v69);
        v35(v29, v14);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v65, v23, a6);
        uint64_t v53 = _CodingPathNode.path.getter(v69);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(void *)&unint64_t v71 = v31;
        uint64_t v55 = inited;
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v56 = v67;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        uint64_t v58 = v65;
        (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v65, a6);
        uint64_t v72 = v53;
        uint64_t v59 = v55;
        uint64_t v31 = v71;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v58, a6);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v60 = *((void *)&v71 + 1);
      uint64_t v72 = 0LL;
      uint64_t v73 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v61._object = (void *)0x80000001839D2D40LL;
      v61._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v61);
      v62._uint64_t countAndFlagsBits = 0x383231746E49LL;
      v62._object = (void *)0xE600000000000000LL;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v60,  *MEMORY[0x189619368],  v31);
    }

    else
    {
      char v36 = v26;
      Swift::String v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v70, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      uint64_t v38 = v68;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v17, 1LL, a6) == 1)
      {
        uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v69);
        v39(v20, v14);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        uint64_t v48 = _CodingPathNode.path.getter(v69);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v49 = swift_initStackObject();
        *(_OWORD *)(v49 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v50 = v67;
        *(void *)(v49 + 56) = a6;
        *(void *)(v49 + 64) = v50;
        uint64_t v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        uint64_t v72 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A6E0], v36, v52);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  void v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  void v72[21];
  uint64_t v65 = a7;
  uint64_t v68 = a5;
  unint64_t v67 = a4;
  *((void *)&v69 + 1) = a2;
  *(void *)&__int128 v69 = a1;
  v72[19] = *MEMORY[0x1895F89C0];
  uint64_t v9 = *v7;
  uint64_t v66 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  v64[0] = (char *)v64 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)v64 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)v64 - v22;
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)v64 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1895F8858](v25);
    uint64_t v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    unint64_t v43 = v67;
    v64[-5] = MEMORY[0x189618CD8];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    uint64_t v45 = *(void *)(*(void *)(v44 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    uint64_t v46 = v64[1];
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v45 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  v69,  *((uint64_t *)&v69 + 1),  v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v46) {
      return v72[0];
    }
  }

  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      uint64_t v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((void *)&v69 + 1) = v32;
      *uint64_t v32 = MEMORY[0x189618CD8];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      uint64_t v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1LL, a6) == 1)
      {
        Swift::String v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }

      else
      {
        (*(void (**)(void, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        uint64_t v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(void *)&__int128 v69 = v31;
        uint64_t v55 = inited;
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v56 = v65;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        uint64_t v58 = v64[0];
        (*(void (**)(uint64_t *, void, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        uint64_t v70 = v53;
        uint64_t v59 = v55;
        uint64_t v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v60 = *((void *)&v69 + 1);
      uint64_t v70 = 0LL;
      unint64_t v71 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v61._object = (void *)0x80000001839D2D40LL;
      v61._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v61);
      v62._uint64_t countAndFlagsBits = 1953384789LL;
      v62._object = (void *)0xE400000000000000LL;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v60,  *MEMORY[0x189619368],  v31);
    }

    else
    {
      char v36 = v26;
      Swift::String v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      uint64_t v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1LL, a6) == 1)
      {
        uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        uint64_t v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v49 = swift_initStackObject();
        *(_OWORD *)(v49 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v50 = v65;
        *(void *)(v49 + 56) = a6;
        *(void *)(v49 + 64) = v50;
        uint64_t v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        uint64_t v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x189618CD8], v36, v52);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  void v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v65 = a7;
  uint64_t v68 = a5;
  unint64_t v67 = a4;
  *((void *)&v69 + 1) = a2;
  *(void *)&__int128 v69 = a1;
  uint64_t v73 = *MEMORY[0x1895F89C0];
  uint64_t v9 = *v7;
  uint64_t v66 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  v64[0] = (char *)v64 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)v64 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)v64 - v22;
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)v64 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1895F8858](v25);
    uint64_t v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    unint64_t v43 = v67;
    v64[-5] = MEMORY[0x18961A610];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    uint64_t v45 = *(void *)(*(void *)(v44 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    uint64_t v46 = v64[1];
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v45 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  v69,  *((uint64_t *)&v69 + 1),  &v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v46) {
      return v72;
    }
  }

  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      uint64_t v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((void *)&v69 + 1) = v32;
      *uint64_t v32 = MEMORY[0x18961A610];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      uint64_t v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1LL, a6) == 1)
      {
        Swift::String v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }

      else
      {
        (*(void (**)(void, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        uint64_t v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(void *)&__int128 v69 = v31;
        uint64_t v55 = inited;
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v56 = v65;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        uint64_t v58 = v64[0];
        (*(void (**)(uint64_t *, void, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        uint64_t v70 = v53;
        uint64_t v59 = v55;
        uint64_t v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v60 = *((void *)&v69 + 1);
      uint64_t v70 = 0LL;
      unint64_t v71 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v61._object = (void *)0x80000001839D2D40LL;
      v61._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v61);
      v62._uint64_t countAndFlagsBits = 0x38746E4955LL;
      v62._object = (void *)0xE500000000000000LL;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v60,  *MEMORY[0x189619368],  v31);
    }

    else
    {
      char v36 = v26;
      Swift::String v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      uint64_t v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1LL, a6) == 1)
      {
        uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        uint64_t v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v49 = swift_initStackObject();
        *(_OWORD *)(v49 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v50 = v65;
        *(void *)(v49 + 56) = a6;
        *(void *)(v49 + 64) = v50;
        uint64_t v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        uint64_t v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A610], v36, v52);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  void v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int16 v72;
  uint64_t v73;
  uint64_t v65 = a7;
  uint64_t v68 = a5;
  unint64_t v67 = a4;
  *((void *)&v69 + 1) = a2;
  *(void *)&__int128 v69 = a1;
  uint64_t v73 = *MEMORY[0x1895F89C0];
  uint64_t v9 = *v7;
  uint64_t v66 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  v64[0] = (char *)v64 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)v64 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)v64 - v22;
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)v64 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1895F8858](v25);
    uint64_t v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    unint64_t v43 = v67;
    v64[-5] = MEMORY[0x18961A800];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    uint64_t v45 = *(void *)(*(void *)(v44 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    uint64_t v46 = v64[1];
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( (void *)(v45 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  v69,  *((uint64_t *)&v69 + 1),  &v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v46) {
      return v72;
    }
  }

  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      uint64_t v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((void *)&v69 + 1) = v32;
      *uint64_t v32 = MEMORY[0x18961A800];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      uint64_t v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1LL, a6) == 1)
      {
        Swift::String v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }

      else
      {
        (*(void (**)(void, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        uint64_t v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(void *)&__int128 v69 = v31;
        uint64_t v55 = inited;
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v56 = v65;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        uint64_t v58 = v64[0];
        (*(void (**)(uint64_t *, void, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        uint64_t v70 = v53;
        uint64_t v59 = v55;
        uint64_t v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v60 = *((void *)&v69 + 1);
      uint64_t v70 = 0LL;
      unint64_t v71 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v61._object = (void *)0x80000001839D2D40LL;
      v61._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v61);
      v62._uint64_t countAndFlagsBits = 0x3631746E4955LL;
      v62._object = (void *)0xE600000000000000LL;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v60,  *MEMORY[0x189619368],  v31);
    }

    else
    {
      char v36 = v26;
      Swift::String v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      uint64_t v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1LL, a6) == 1)
      {
        uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        uint64_t v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v49 = swift_initStackObject();
        *(_OWORD *)(v49 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v50 = v65;
        *(void *)(v49 + 56) = a6;
        *(void *)(v49 + 64) = v50;
        uint64_t v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        uint64_t v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A800], v36, v52);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  void v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v65 = a7;
  uint64_t v68 = a5;
  unint64_t v67 = a4;
  *((void *)&v69 + 1) = a2;
  *(void *)&__int128 v69 = a1;
  uint64_t v73 = *MEMORY[0x1895F89C0];
  uint64_t v9 = *v7;
  uint64_t v66 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  v64[0] = (char *)v64 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)v64 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)v64 - v22;
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)v64 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1895F8858](v25);
    uint64_t v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    unint64_t v43 = v67;
    v64[-5] = MEMORY[0x18961A860];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    uint64_t v45 = *(void *)(*(void *)(v44 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    uint64_t v46 = v64[1];
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)( (void *)(v45 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  v69,  *((uint64_t *)&v69 + 1),  &v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v46) {
      return v72;
    }
  }

  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      uint64_t v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((void *)&v69 + 1) = v32;
      *uint64_t v32 = MEMORY[0x18961A860];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      uint64_t v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1LL, a6) == 1)
      {
        Swift::String v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }

      else
      {
        (*(void (**)(void, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        uint64_t v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(void *)&__int128 v69 = v31;
        uint64_t v55 = inited;
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v56 = v65;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        uint64_t v58 = v64[0];
        (*(void (**)(uint64_t *, void, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        uint64_t v70 = v53;
        uint64_t v59 = v55;
        uint64_t v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v60 = *((void *)&v69 + 1);
      uint64_t v70 = 0LL;
      unint64_t v71 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v61._object = (void *)0x80000001839D2D40LL;
      v61._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v61);
      v62._uint64_t countAndFlagsBits = 0x3233746E4955LL;
      v62._object = (void *)0xE600000000000000LL;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v60,  *MEMORY[0x189619368],  v31);
    }

    else
    {
      char v36 = v26;
      Swift::String v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      uint64_t v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1LL, a6) == 1)
      {
        uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        uint64_t v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v49 = swift_initStackObject();
        *(_OWORD *)(v49 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v50 = v65;
        *(void *)(v49 + 56) = a6;
        *(void *)(v49 + 64) = v50;
        uint64_t v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        uint64_t v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A860], v36, v52);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  void v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  void v72[21];
  uint64_t v65 = a7;
  uint64_t v68 = a5;
  unint64_t v67 = a4;
  *((void *)&v69 + 1) = a2;
  *(void *)&__int128 v69 = a1;
  v72[19] = *MEMORY[0x1895F89C0];
  uint64_t v9 = *v7;
  uint64_t v66 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  v64[0] = (char *)v64 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)v64 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)v64 - v22;
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)v64 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1895F8858](v25);
    uint64_t v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    unint64_t v43 = v67;
    v64[-5] = MEMORY[0x18961A8C8];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    uint64_t v45 = *(void *)(*(void *)(v44 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    uint64_t v46 = v64[1];
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v45 + 16),  (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  v69,  *((uint64_t *)&v69 + 1),  v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v46) {
      return v72[0];
    }
  }

  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      uint64_t v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((void *)&v69 + 1) = v32;
      *uint64_t v32 = MEMORY[0x18961A8C8];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      uint64_t v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1LL, a6) == 1)
      {
        Swift::String v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }

      else
      {
        (*(void (**)(void, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        uint64_t v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(void *)&__int128 v69 = v31;
        uint64_t v55 = inited;
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v56 = v65;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        uint64_t v58 = v64[0];
        (*(void (**)(uint64_t *, void, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        uint64_t v70 = v53;
        uint64_t v59 = v55;
        uint64_t v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v60 = *((void *)&v69 + 1);
      uint64_t v70 = 0LL;
      unint64_t v71 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v61._object = (void *)0x80000001839D2D40LL;
      v61._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v61);
      v62._uint64_t countAndFlagsBits = 0x3436746E4955LL;
      v62._object = (void *)0xE600000000000000LL;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v60,  *MEMORY[0x189619368],  v31);
    }

    else
    {
      char v36 = v26;
      Swift::String v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      uint64_t v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1LL, a6) == 1)
      {
        uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        uint64_t v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v49 = swift_initStackObject();
        *(_OWORD *)(v49 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v50 = v65;
        *(void *)(v49 + 56) = a6;
        *(void *)(v49 + 64) = v50;
        uint64_t v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        uint64_t v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A8C8], v36, v52);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  void v74[21];
  unint64_t v67 = a7;
  uint64_t v70 = a5;
  __int128 v69 = a4;
  *((void *)&v71 + 1) = a2;
  *(void *)&unint64_t v71 = a1;
  v74[20] = *MEMORY[0x1895F89C0];
  uint64_t v9 = *v7;
  uint64_t v68 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v65 = (char *)&v64 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v64 - v19;
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)&v64 - v22;
  __n128 v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)&v64 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1895F8858](v25);
    uint64_t v40 = v67;
    *(&v64 - 8) = a6;
    *(&v64 - 7) = v40;
    *((_BYTE *)&v64 - 48) = v41;
    *((_BYTE *)&v64 - 47) = v42;
    unint64_t v43 = v69;
    *(&v64 - 5) = MEMORY[0x18961A9B8];
    *(&v64 - 4) = v43;
    *(&v64 - 3) = v70;
    *(&v64 - 2) = v9;
    uint64_t v45 = *(void *)(*(void *)(v44 + 32) + 24LL);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    uint64_t v46 = v66;
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v45 + 16),  (void *(*)(void *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  v71,  *((uint64_t *)&v71 + 1),  v74);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (!v46) {
      return v74[0];
    }
  }

  else
  {
    if (v30 == 5 && v71 == 0 && v26 == 160)
    {
      uint64_t v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((void *)&v71 + 1) = v32;
      *uint64_t v32 = MEMORY[0x18961A9B8];
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v70, v14);
      v33(v23, (uint64_t)v29, v14);
      uint64_t v34 = v68;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v23, 1LL, a6) == 1)
      {
        Swift::String v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v69);
        v35(v29, v14);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v65, v23, a6);
        uint64_t v53 = _CodingPathNode.path.getter(v69);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(void *)&unint64_t v71 = v31;
        uint64_t v55 = inited;
        *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v56 = v67;
        *(void *)(inited + 56) = a6;
        *(void *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        uint64_t v58 = v65;
        (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v65, a6);
        uint64_t v72 = v53;
        uint64_t v59 = v55;
        uint64_t v31 = v71;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v58, a6);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t v60 = *((void *)&v71 + 1);
      uint64_t v72 = 0LL;
      uint64_t v73 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v61._object = (void *)0x80000001839D2D40LL;
      v61._uint64_t countAndFlagsBits = 0xD000000000000019LL;
      String.append(_:)(v61);
      v62._uint64_t countAndFlagsBits = 0x383231746E4955LL;
      v62._object = (void *)0xE700000000000000LL;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x80000001839D2D60LL;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104LL))( v60,  *MEMORY[0x189619368],  v31);
    }

    else
    {
      char v36 = v26;
      Swift::String v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v70, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      uint64_t v38 = v68;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v17, 1LL, a6) == 1)
      {
        uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v69);
        v39(v20, v14);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        uint64_t v48 = _CodingPathNode.path.getter(v69);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v49 = swift_initStackObject();
        *(_OWORD *)(v49 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
        uint64_t v50 = v67;
        *(void *)(v49 + 56) = a6;
        *(void *)(v49 + 64) = v50;
        uint64_t v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        uint64_t v72 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }

      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x18961A9B8], v36, v52);
      swift_bridgeObjectRelease();
    }

    return swift_willThrow();
  }

  return result;
}

uint64_t specialized FixedWidthInteger.init(_:)(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned __int16 v3 = a3;
  int v5 = a1;
  v37[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  v37[1] = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unint64_t v11 = HIWORD(a3);
  unsigned int v38 = a3;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(v37);
  LODWORD(v37[0]) = v5;
  WORD2(v37[0]) = v6;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = a2;
  WORD1(v37[1]) = v8;
  WORD2(v37[1]) = v9;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  int v36 = isNegative_getter;
  unint64_t v13 = (unsigned __int16)a2;
  LODWORD(v37[0]) = v5;
  unint64_t v14 = WORD1(a2);
  WORD2(v37[0]) = v6;
  unint64_t v15 = WORD2(a2);
  unint64_t v16 = v3;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = v13;
  WORD1(v37[1]) = v14;
  WORD2(v37[1]) = v15;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  int v17 = _So9NSDecimala__length_getter(v37);
  if (!v17) {
    goto LABEL_50;
  }
  unint64_t v18 = 0LL;
  int v19 = v17 - 1;
  if (v17 != 1)
  {
    while (2)
    {
      unint64_t v20 = v7;
      switch(v19)
      {
        case 1:
          goto LABEL_15;
        case 2:
          unint64_t v20 = v13;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 3:
          unint64_t v20 = v14;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 4:
          unint64_t v20 = v15;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 5:
          unint64_t v20 = v10;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 6:
          unint64_t v20 = v16;
LABEL_15:
          if (!HIWORD(v18)) {
            goto LABEL_16;
          }
          goto LABEL_21;
        case 7:
          unint64_t v20 = v11;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
LABEL_16:
          unint64_t v18 = v20 | (v18 << 16);
          if (!--v19) {
            break;
          }
          continue;
        default:
          goto LABEL_53;
      }

      break;
    }
  }

  if (HIWORD(v18))
  {
LABEL_21:
    unsigned __int8 v21 = 0;
    int v22 = 1;
  }

  else
  {
    for (unint64_t i = (unsigned __int16)v6 | (v18 << 16); ; unint64_t i = 0LL)
    {
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      int v29 = _So9NSDecimala__exponent_getter((char *)v37);
      if (v29 > 0) {
        goto LABEL_52;
      }
      int v26 = v36;
      if (!v29) {
        goto LABEL_40;
      }
      unsigned int v30 = -v29 & ~(-v29 >> 31);
      unsigned int v31 = ~v29;
      while (v30 > v31)
      {
        i /= 0xAuLL;
        if (__CFADD__(v29++, 1)) {
          goto LABEL_40;
        }
      }

      __break(1u);
LABEL_50:
      ;
    }

    LODWORD(v37[0]) = v5;
    WORD2(v37[0]) = v6;
    HIWORD(v37[0]) = v7;
    LOWORD(v37[1]) = v13;
    WORD1(v37[1]) = v14;
    WORD2(v37[1]) = v15;
    HIWORD(v37[1]) = v10;
    LOWORD(v38) = v16;
    HIWORD(v38) = v11;
    int v25 = _So9NSDecimala__exponent_getter((char *)v37);
    if (v25 < 0)
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      v37[0] = 0LL;
      v37[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(30LL);
      swift_bridgeObjectRelease();
      strcpy((char *)v37, "Invalid index ");
      HIBYTE(v37[1]) = -18;
      v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
      v35._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v35);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x18341CF38LL);
    }

    int v26 = v36;
    if (v25)
    {
      if (!is_mul_ok(i, 0xAuLL)) {
        goto LABEL_21;
      }
      i *= 10LL;
      int v27 = v25 - 1;
      if (v25 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_21;
        }
        i *= 10LL;
        while (--v27)
        {
          unsigned __int8 v21 = 0;
          uint64_t v28 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10LL;
          int v22 = 1;
          if (v28) {
            return v21 | (v22 << 8);
          }
        }
      }
    }

{
  unsigned __int16 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int isNegative_getter;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unsigned __int16 v21;
  int v22;
  unint64_t i;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v33;
  Swift::String v34;
  Swift::String v35;
  int v36;
  void v37[2];
  unsigned int v38;
  unsigned __int16 v3 = a3;
  int v5 = a1;
  v37[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  v37[1] = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unint64_t v11 = HIWORD(a3);
  unsigned int v38 = a3;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(v37);
  LODWORD(v37[0]) = v5;
  WORD2(v37[0]) = v6;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = a2;
  WORD1(v37[1]) = v8;
  WORD2(v37[1]) = v9;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  int v36 = isNegative_getter;
  unint64_t v13 = (unsigned __int16)a2;
  LODWORD(v37[0]) = v5;
  unint64_t v14 = WORD1(a2);
  WORD2(v37[0]) = v6;
  unint64_t v15 = WORD2(a2);
  unint64_t v16 = v3;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = v13;
  WORD1(v37[1]) = v14;
  WORD2(v37[1]) = v15;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  int v17 = _So9NSDecimala__length_getter(v37);
  if (!v17) {
    goto LABEL_50;
  }
  unint64_t v18 = 0LL;
  int v19 = v17 - 1;
  if (v17 != 1)
  {
    while (2)
    {
      unint64_t v20 = v7;
      switch(v19)
      {
        case 1:
          goto LABEL_15;
        case 2:
          unint64_t v20 = v13;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 3:
          unint64_t v20 = v14;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 4:
          unint64_t v20 = v15;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 5:
          unint64_t v20 = v10;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 6:
          unint64_t v20 = v16;
LABEL_15:
          if (!HIWORD(v18)) {
            goto LABEL_16;
          }
          goto LABEL_21;
        case 7:
          unint64_t v20 = v11;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
LABEL_16:
          unint64_t v18 = v20 | (v18 << 16);
          if (!--v19) {
            break;
          }
          continue;
        default:
          goto LABEL_53;
      }

      break;
    }
  }

  if (HIWORD(v18))
  {
LABEL_21:
    unsigned __int8 v21 = 0;
    int v22 = 1;
  }

  else
  {
    for (unint64_t i = (unsigned __int16)v6 | (v18 << 16); ; unint64_t i = 0LL)
    {
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      int v29 = _So9NSDecimala__exponent_getter((char *)v37);
      if (v29 > 0) {
        goto LABEL_52;
      }
      int v26 = v36;
      if (!v29) {
        goto LABEL_40;
      }
      unsigned int v30 = -v29 & ~(-v29 >> 31);
      unsigned int v31 = ~v29;
      while (v30 > v31)
      {
        i /= 0xAuLL;
        if (__CFADD__(v29++, 1)) {
          goto LABEL_40;
        }
      }

      __break(1u);
LABEL_50:
      ;
    }

    LODWORD(v37[0]) = v5;
    WORD2(v37[0]) = v6;
    HIWORD(v37[0]) = v7;
    LOWORD(v37[1]) = v13;
    WORD1(v37[1]) = v14;
    WORD2(v37[1]) = v15;
    HIWORD(v37[1]) = v10;
    LOWORD(v38) = v16;
    HIWORD(v38) = v11;
    int v25 = _So9NSDecimala__exponent_getter((char *)v37);
    if (v25 < 0)
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      v37[0] = 0LL;
      v37[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(30LL);
      swift_bridgeObjectRelease();
      strcpy((char *)v37, "Invalid index ");
      HIBYTE(v37[1]) = -18;
      v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
      v35._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v35);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x18341D36CLL);
    }

    int v26 = v36;
    if (v25)
    {
      if (!is_mul_ok(i, 0xAuLL)) {
        goto LABEL_21;
      }
      i *= 10LL;
      int v27 = v25 - 1;
      if (v25 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_21;
        }
        i *= 10LL;
        while (--v27)
        {
          unsigned __int8 v21 = 0;
          uint64_t v28 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10LL;
          int v22 = 1;
          if (v28) {
            return v21 | (v22 << 16);
          }
        }
      }
    }

{
  unint64_t i;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  int v11;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  Swift::String v26;
  Swift::String v27;
  void v28[2];
  unsigned int v29;
  LOWORD(i) = a3;
  uint64_t v4 = a2;
  int v5 = a1;
  v28[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  v28[1] = a2;
  unint64_t v8 = HIWORD(a2);
  unint64_t v9 = HIWORD(a3);
  int v29 = a3;
  unint64_t v13 = (unsigned __int16)v4;
  LODWORD(v28[0]) = v5;
  unint64_t v14 = WORD1(v4);
  WORD2(v28[0]) = v6;
  HIWORD(v28[0]) = v7;
  LODWORD(v28[1]) = v4;
  WORD2(v28[1]) = WORD2(v4);
  HIWORD(v28[1]) = v8;
  LOWORD(v29) = i;
  HIWORD(v29) = v9;
  unint64_t v15 = _So9NSDecimala__length_getter(v28);
  if (!v15) {
    goto LABEL_37;
  }
  unint64_t v16 = 0LL;
  int v17 = v15 - 1;
  if (v15 != 1)
  {
    while (2)
    {
      unint64_t v18 = v7;
      switch(v17)
      {
        case 1:
          goto LABEL_13;
        case 2:
          unint64_t v18 = v13;
          goto LABEL_13;
        case 3:
          unint64_t v18 = v14;
          goto LABEL_13;
        case 4:
          unint64_t v18 = WORD2(v4);
          goto LABEL_13;
        case 5:
          unint64_t v18 = v8;
          goto LABEL_13;
        case 6:
          unint64_t v18 = (unsigned __int16)i;
          goto LABEL_13;
        case 7:
          unint64_t v18 = v9;
LABEL_13:
          if (HIWORD(v16)) {
            goto LABEL_2;
          }
          unint64_t v16 = v18 | (v16 << 16);
          if (!--v17) {
            break;
          }
          continue;
        default:
          goto LABEL_40;
      }

      break;
    }
  }

  if (HIWORD(v16))
  {
LABEL_2:
    unint64_t v10 = 0;
    unint64_t v11 = 1;
  }

  else
  {
    LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = i;
    for (unint64_t i = (unsigned __int16)v6 | (v16 << 16); ; unint64_t i = 0LL)
    {
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      int v22 = _So9NSDecimala__exponent_getter((char *)v28);
      if (v22 > 0) {
        goto LABEL_39;
      }
      if (!v22) {
        goto LABEL_33;
      }
      uint64_t v23 = -v22 & ~(-v22 >> 31);
      uint64_t v24 = ~v22;
      while (v23 > v24)
      {
        i /= 0xAuLL;
        if (__CFADD__(v22++, 1)) {
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_37:
      LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = i;
    }

    LODWORD(v28[0]) = v5;
    WORD2(v28[0]) = v6;
    HIWORD(v28[0]) = v7;
    LOWORD(v28[1]) = v13;
    WORD1(v28[1]) = v14;
    WORD2(v28[1]) = WORD2(v4);
    HIWORD(v28[1]) = v8;
    LOWORD(v29) = v4;
    HIWORD(v29) = v9;
    int v19 = _So9NSDecimala__exponent_getter((char *)v28);
    if (v19 < 0)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      v28[0] = 0LL;
      v28[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(30LL);
      swift_bridgeObjectRelease();
      strcpy((char *)v28, "Invalid index ");
      HIBYTE(v28[1]) = -18;
      v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
      v27._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v27);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x18341E378LL);
    }

    if (v19)
    {
      if (!is_mul_ok(i, 0xAuLL)) {
        goto LABEL_2;
      }
      i *= 10LL;
      unint64_t v20 = v19 - 1;
      if (v19 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_2;
        }
        i *= 10LL;
        while (--v20)
        {
          unint64_t v10 = 0;
          unsigned __int8 v21 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10LL;
          unint64_t v11 = 1;
          if (v21) {
            return v10 | (v11 << 8);
          }
        }
      }
    }

{
  unint64_t i;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  Swift::String v26;
  Swift::String v27;
  void v28[2];
  unsigned int v29;
  LOWORD(i) = a3;
  uint64_t v4 = a2;
  int v5 = a1;
  v28[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  v28[1] = a2;
  unint64_t v8 = HIWORD(a2);
  unint64_t v9 = HIWORD(a3);
  int v29 = a3;
  unint64_t v13 = (unsigned __int16)v4;
  LODWORD(v28[0]) = v5;
  unint64_t v14 = WORD1(v4);
  WORD2(v28[0]) = v6;
  HIWORD(v28[0]) = v7;
  LODWORD(v28[1]) = v4;
  WORD2(v28[1]) = WORD2(v4);
  HIWORD(v28[1]) = v8;
  LOWORD(v29) = i;
  HIWORD(v29) = v9;
  unint64_t v15 = _So9NSDecimala__length_getter(v28);
  if (!v15) {
    goto LABEL_37;
  }
  unint64_t v16 = 0LL;
  int v17 = v15 - 1;
  if (v15 != 1)
  {
    while (2)
    {
      unint64_t v18 = v7;
      switch(v17)
      {
        case 1:
          goto LABEL_13;
        case 2:
          unint64_t v18 = v13;
          goto LABEL_13;
        case 3:
          unint64_t v18 = v14;
          goto LABEL_13;
        case 4:
          unint64_t v18 = WORD2(v4);
          goto LABEL_13;
        case 5:
          unint64_t v18 = v8;
          goto LABEL_13;
        case 6:
          unint64_t v18 = (unsigned __int16)i;
          goto LABEL_13;
        case 7:
          unint64_t v18 = v9;
LABEL_13:
          if (HIWORD(v16)) {
            goto LABEL_2;
          }
          unint64_t v16 = v18 | (v16 << 16);
          if (!--v17) {
            break;
          }
          continue;
        default:
          goto LABEL_40;
      }

      break;
    }
  }

  if (HIWORD(v16))
  {
LABEL_2:
    unint64_t v10 = 0;
    unint64_t v11 = 1;
  }

  else
  {
    LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = i;
    for (unint64_t i = (unsigned __int16)v6 | (v16 << 16); ; unint64_t i = 0LL)
    {
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      int v22 = _So9NSDecimala__exponent_getter((char *)v28);
      if (v22 > 0) {
        goto LABEL_39;
      }
      if (!v22) {
        goto LABEL_33;
      }
      uint64_t v23 = -v22 & ~(-v22 >> 31);
      uint64_t v24 = ~v22;
      while (v23 > v24)
      {
        i /= 0xAuLL;
        if (__CFADD__(v22++, 1)) {
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_37:
      LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = i;
    }

    LODWORD(v28[0]) = v5;
    WORD2(v28[0]) = v6;
    HIWORD(v28[0]) = v7;
    LOWORD(v28[1]) = v13;
    WORD1(v28[1]) = v14;
    WORD2(v28[1]) = WORD2(v4);
    HIWORD(v28[1]) = v8;
    LOWORD(v29) = v4;
    HIWORD(v29) = v9;
    int v19 = _So9NSDecimala__exponent_getter((char *)v28);
    if (v19 < 0)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      v28[0] = 0LL;
      v28[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(30LL);
      swift_bridgeObjectRelease();
      strcpy((char *)v28, "Invalid index ");
      HIBYTE(v28[1]) = -18;
      v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
      v27._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v27);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x18341E728LL);
    }

    if (v19)
    {
      if (!is_mul_ok(i, 0xAuLL)) {
        goto LABEL_2;
      }
      i *= 10LL;
      unint64_t v20 = v19 - 1;
      if (v19 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_2;
        }
        i *= 10LL;
        while (--v20)
        {
          unint64_t v10 = 0;
          unsigned __int8 v21 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10LL;
          unint64_t v11 = 1;
          if (v21) {
            return v10 | (v11 << 16);
          }
        }
      }
    }

{
  unsigned __int16 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  Swift::String v28;
  Swift::String v29;
  void v30[2];
  unsigned int v31;
  unsigned __int16 v3 = a3;
  int v5 = a1;
  v30[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  v30[1] = a2;
  unint64_t v8 = HIWORD(a2);
  unint64_t v9 = HIWORD(a3);
  unsigned int v31 = a3;
  uint64_t v12 = (unsigned __int16)a2;
  LODWORD(v30[0]) = v5;
  unint64_t v13 = WORD1(a2);
  WORD2(v30[0]) = v6;
  unint64_t v14 = WORD2(a2);
  unint64_t v15 = v3;
  HIWORD(v30[0]) = v7;
  LOWORD(v30[1]) = v12;
  WORD1(v30[1]) = v13;
  WORD2(v30[1]) = v14;
  HIWORD(v30[1]) = v8;
  LOWORD(v31) = v3;
  HIWORD(v31) = v9;
  unint64_t v16 = _So9NSDecimala__length_getter(v30);
  if (!v16) {
    goto LABEL_37;
  }
  int v17 = 0LL;
  unint64_t v18 = v16 - 1;
  if (v16 != 1)
  {
    while (2)
    {
      int v19 = v7;
      switch(v18)
      {
        case 1:
          goto LABEL_13;
        case 2:
          int v19 = v12;
          goto LABEL_13;
        case 3:
          int v19 = v13;
          goto LABEL_13;
        case 4:
          int v19 = v14;
          goto LABEL_13;
        case 5:
          int v19 = v8;
          goto LABEL_13;
        case 6:
          int v19 = v15;
          goto LABEL_13;
        case 7:
          int v19 = v9;
LABEL_13:
          if (HIWORD(v17)) {
            return 0LL;
          }
          int v17 = v19 | (v17 << 16);
          if (!--v18) {
            break;
          }
          continue;
        default:
          goto LABEL_40;
      }

      break;
    }
  }

  if (HIWORD(v17)) {
    return 0LL;
  }
  for (unint64_t i = (unsigned __int16)v6 | (v17 << 16); ; unint64_t i = 0LL)
  {
    LODWORD(v30[0]) = v5;
    WORD2(v30[0]) = v6;
    HIWORD(v30[0]) = v7;
    LOWORD(v30[1]) = v12;
    WORD1(v30[1]) = v13;
    WORD2(v30[1]) = v14;
    HIWORD(v30[1]) = v8;
    LOWORD(v31) = v15;
    HIWORD(v31) = v9;
    LODWORD(v30[0]) = v5;
    WORD2(v30[0]) = v6;
    HIWORD(v30[0]) = v7;
    LOWORD(v30[1]) = v12;
    WORD1(v30[1]) = v13;
    WORD2(v30[1]) = v14;
    HIWORD(v30[1]) = v8;
    LOWORD(v31) = v15;
    HIWORD(v31) = v9;
    uint64_t v24 = _So9NSDecimala__exponent_getter((char *)v30);
    if (v24 > 0) {
      goto LABEL_39;
    }
    if (!v24) {
      return i;
    }
    int v25 = -v24 & ~(-v24 >> 31);
    int v26 = ~v24;
    while (v25 > v26)
    {
      i /= 0xAuLL;
      if (__CFADD__(v24++, 1)) {
        return i;
      }
    }

    __break(1u);
LABEL_37:
    ;
  }

  LODWORD(v30[0]) = v5;
  WORD2(v30[0]) = v6;
  HIWORD(v30[0]) = v7;
  LOWORD(v30[1]) = v12;
  WORD1(v30[1]) = v13;
  WORD2(v30[1]) = v14;
  HIWORD(v30[1]) = v8;
  LOWORD(v31) = v15;
  HIWORD(v31) = v9;
  unint64_t v20 = _So9NSDecimala__exponent_getter((char *)v30);
  if (v20 < 0)
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    v30[0] = 0LL;
    v30[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(30LL);
    swift_bridgeObjectRelease();
    strcpy((char *)v30, "Invalid index ");
    HIBYTE(v30[1]) = -18;
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
    v29._object = (void *)0xEE0061737369746ELL;
    String.append(_:)(v29);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x18341EE88LL);
  }

  if (v20)
  {
    if (is_mul_ok(i, 0xAuLL))
    {
      i *= 10LL;
      unsigned __int8 v21 = v20 - 1;
      if (v20 == 1) {
        return i;
      }
      if (is_mul_ok(i, 0xAuLL))
      {
        int v22 = 10 * i;
        while (--v21)
        {
          unint64_t i = 0LL;
          uint64_t v23 = ((unint64_t)v22 * (unsigned __int128)0xAuLL) >> 64;
          v22 *= 10LL;
          if (v23) {
            return i;
          }
        }

        return v22;
      }
    }

    return 0LL;
  }

  return i;
}

{
  unsigned __int16 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  Swift::String v28;
  Swift::String v29;
  void v30[2];
  unsigned int v31;
  unsigned __int16 v3 = a3;
  int v5 = a1;
  v30[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  v30[1] = a2;
  unint64_t v8 = HIWORD(a2);
  unint64_t v9 = HIWORD(a3);
  unsigned int v31 = a3;
  uint64_t v12 = (unsigned __int16)a2;
  LODWORD(v30[0]) = v5;
  unint64_t v13 = WORD1(a2);
  WORD2(v30[0]) = v6;
  unint64_t v14 = WORD2(a2);
  unint64_t v15 = v3;
  HIWORD(v30[0]) = v7;
  LOWORD(v30[1]) = v12;
  WORD1(v30[1]) = v13;
  WORD2(v30[1]) = v14;
  HIWORD(v30[1]) = v8;
  LOWORD(v31) = v3;
  HIWORD(v31) = v9;
  unint64_t v16 = _So9NSDecimala__length_getter(v30);
  if (!v16) {
    goto LABEL_37;
  }
  int v17 = 0LL;
  unint64_t v18 = v16 - 1;
  if (v16 != 1)
  {
    while (2)
    {
      int v19 = v7;
      switch(v18)
      {
        case 1:
          goto LABEL_13;
        case 2:
          int v19 = v12;
          goto LABEL_13;
        case 3:
          int v19 = v13;
          goto LABEL_13;
        case 4:
          int v19 = v14;
          goto LABEL_13;
        case 5:
          int v19 = v8;
          goto LABEL_13;
        case 6:
          int v19 = v15;
          goto LABEL_13;
        case 7:
          int v19 = v9;
LABEL_13:
          if (HIWORD(v17)) {
            return 0LL;
          }
          int v17 = v19 | (v17 << 16);
          if (!--v18) {
            break;
          }
          continue;
        default:
          goto LABEL_40;
      }

      break;
    }
  }

  if (HIWORD(v17)) {
    return 0LL;
  }
  for (unint64_t i = (unsigned __int16)v6 | (v17 << 16); ; unint64_t i = 0LL)
  {
    LODWORD(v30[0]) = v5;
    WORD2(v30[0]) = v6;
    HIWORD(v30[0]) = v7;
    LOWORD(v30[1]) = v12;
    WORD1(v30[1]) = v13;
    WORD2(v30[1]) = v14;
    HIWORD(v30[1]) = v8;
    LOWORD(v31) = v15;
    HIWORD(v31) = v9;
    LODWORD(v30[0]) = v5;
    WORD2(v30[0]) = v6;
    HIWORD(v30[0]) = v7;
    LOWORD(v30[1]) = v12;
    WORD1(v30[1]) = v13;
    WORD2(v30[1]) = v14;
    HIWORD(v30[1]) = v8;
    LOWORD(v31) = v15;
    HIWORD(v31) = v9;
    uint64_t v24 = _So9NSDecimala__exponent_getter((char *)v30);
    if (v24 > 0) {
      goto LABEL_39;
    }
    if (!v24) {
      return i;
    }
    int v25 = -v24 & ~(-v24 >> 31);
    int v26 = ~v24;
    while (v25 > v26)
    {
      i /= 0xAuLL;
      if (__CFADD__(v24++, 1)) {
        return i;
      }
    }

    __break(1u);
LABEL_37:
    ;
  }

  LODWORD(v30[0]) = v5;
  WORD2(v30[0]) = v6;
  HIWORD(v30[0]) = v7;
  LOWORD(v30[1]) = v12;
  WORD1(v30[1]) = v13;
  WORD2(v30[1]) = v14;
  HIWORD(v30[1]) = v8;
  LOWORD(v31) = v15;
  HIWORD(v31) = v9;
  unint64_t v20 = _So9NSDecimala__exponent_getter((char *)v30);
  if (v20 < 0)
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    v30[0] = 0LL;
    v30[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(30LL);
    swift_bridgeObjectRelease();
    strcpy((char *)v30, "Invalid index ");
    HIBYTE(v30[1]) = -18;
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
    v29._object = (void *)0xEE0061737369746ELL;
    String.append(_:)(v29);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x18341F234LL);
  }

  if (v20)
  {
    if (is_mul_ok(i, 0xAuLL))
    {
      i *= 10LL;
      unsigned __int8 v21 = v20 - 1;
      if (v20 == 1) {
        return i;
      }
      if (is_mul_ok(i, 0xAuLL))
      {
        int v22 = 10 * i;
        while (--v21)
        {
          unint64_t i = 0LL;
          uint64_t v23 = ((unint64_t)v22 * (unsigned __int128)0xAuLL) >> 64;
          v22 *= 10LL;
          if (v23) {
            return i;
          }
        }

        return v22;
      }
    }

    return 0LL;
  }

  return i;
}

unint64_t specialized FixedWidthInteger.init(_:)( unint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned __int16 v3 = a3;
  int v5 = a1;
  v37[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  v37[1] = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unint64_t v11 = HIWORD(a3);
  unsigned int v38 = a3;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(v37);
  LODWORD(v37[0]) = v5;
  WORD2(v37[0]) = v6;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = a2;
  WORD1(v37[1]) = v8;
  WORD2(v37[1]) = v9;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  int v36 = isNegative_getter;
  unint64_t v13 = (unsigned __int16)a2;
  LODWORD(v37[0]) = v5;
  unint64_t v14 = WORD1(a2);
  WORD2(v37[0]) = v6;
  unint64_t v15 = WORD2(a2);
  unint64_t v16 = v3;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = v13;
  WORD1(v37[1]) = v14;
  WORD2(v37[1]) = v15;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  int v17 = _So9NSDecimala__length_getter(v37);
  if (!v17) {
    goto LABEL_50;
  }
  unint64_t v18 = 0LL;
  int v19 = v17 - 1;
  if (v17 != 1)
  {
    while (2)
    {
      unint64_t v20 = v7;
      switch(v19)
      {
        case 1:
          goto LABEL_15;
        case 2:
          unint64_t v20 = v13;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 3:
          unint64_t v20 = v14;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 4:
          unint64_t v20 = v15;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 5:
          unint64_t v20 = v10;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 6:
          unint64_t v20 = v16;
LABEL_15:
          if (!HIWORD(v18)) {
            goto LABEL_16;
          }
          goto LABEL_21;
        case 7:
          unint64_t v20 = v11;
          if (HIWORD(v18)) {
            goto LABEL_21;
          }
LABEL_16:
          unint64_t v18 = v20 | (v18 << 16);
          if (!--v19) {
            break;
          }
          continue;
        default:
          goto LABEL_53;
      }

      break;
    }
  }

  if (HIWORD(v18))
  {
LABEL_21:
    LODWORD(v21) = 0;
    BOOL v22 = 1;
  }

  else
  {
    for (unint64_t i = (unsigned __int16)v6 | (v18 << 16); ; unint64_t i = 0LL)
    {
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      int v29 = _So9NSDecimala__exponent_getter((char *)v37);
      if (v29 > 0) {
        goto LABEL_52;
      }
      int v26 = v36;
      if (!v29) {
        goto LABEL_40;
      }
      unsigned int v30 = -v29 & ~(-v29 >> 31);
      unsigned int v31 = ~v29;
      while (v30 > v31)
      {
        i /= 0xAuLL;
        if (__CFADD__(v29++, 1)) {
          goto LABEL_40;
        }
      }

      __break(1u);
LABEL_50:
      ;
    }

    LODWORD(v37[0]) = v5;
    WORD2(v37[0]) = v6;
    HIWORD(v37[0]) = v7;
    LOWORD(v37[1]) = v13;
    WORD1(v37[1]) = v14;
    WORD2(v37[1]) = v15;
    HIWORD(v37[1]) = v10;
    LOWORD(v38) = v16;
    HIWORD(v38) = v11;
    int v25 = _So9NSDecimala__exponent_getter((char *)v37);
    if (v25 < 0)
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      v37[0] = 0LL;
      v37[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(30LL);
      swift_bridgeObjectRelease();
      strcpy((char *)v37, "Invalid index ");
      HIBYTE(v37[1]) = -18;
      v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
      v35._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v35);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x18341D798LL);
    }

    int v26 = v36;
    if (v25)
    {
      if (!is_mul_ok(i, 0xAuLL)) {
        goto LABEL_21;
      }
      i *= 10LL;
      int v27 = v25 - 1;
      if (v25 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_21;
        }
        i *= 10LL;
        while (--v27)
        {
          LODWORD(v21) = 0;
          uint64_t v28 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10LL;
          BOOL v22 = 1;
          if (v28) {
            goto LABEL_22;
          }
        }
      }
    }

{
  unint64_t i;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  Swift::String v26;
  Swift::String v27;
  int isNegative_getter;
  void v29[2];
  unsigned int v30;
  LOWORD(i) = a3;
  uint64_t v4 = a2;
  int v5 = a1;
  v29[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  v29[1] = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unint64_t v11 = HIWORD(a3);
  unsigned int v30 = a3;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(v29);
  LODWORD(v29[0]) = v5;
  WORD2(v29[0]) = v6;
  HIWORD(v29[0]) = v7;
  LOWORD(v29[1]) = v4;
  WORD1(v29[1]) = v8;
  WORD2(v29[1]) = v9;
  HIWORD(v29[1]) = v10;
  LOWORD(v30) = i;
  HIWORD(v30) = v11;
  if (_So9NSDecimala__length_getter(v29) || !isNegative_getter)
  {
    uint64_t v12 = (unsigned __int16)v4;
    LODWORD(v29[0]) = v5;
    unint64_t v13 = WORD1(v4);
    WORD2(v29[0]) = v6;
    HIWORD(v29[0]) = v7;
    LODWORD(v29[1]) = v4;
    WORD2(v29[1]) = WORD2(v4);
    HIWORD(v29[1]) = v10;
    LOWORD(v30) = i;
    HIWORD(v30) = v11;
    unint64_t v14 = _So9NSDecimala__length_getter(v29);
    if (!v14) {
      goto LABEL_46;
    }
    unint64_t v15 = 0LL;
    unint64_t v16 = v14 - 1;
    if (v14 != 1)
    {
      while (2)
      {
        int v17 = v7;
        switch(v16)
        {
          case 1:
            goto LABEL_15;
          case 2:
            int v17 = v12;
            if (HIWORD(v15)) {
              return 0LL;
            }
            goto LABEL_16;
          case 3:
            int v17 = v13;
            if (HIWORD(v15)) {
              return 0LL;
            }
            goto LABEL_16;
          case 4:
            int v17 = WORD2(v4);
            if (HIWORD(v15)) {
              return 0LL;
            }
            goto LABEL_16;
          case 5:
            int v17 = v10;
            if (HIWORD(v15)) {
              return 0LL;
            }
            goto LABEL_16;
          case 6:
            int v17 = (unsigned __int16)i;
LABEL_15:
            if (!HIWORD(v15)) {
              goto LABEL_16;
            }
            return 0LL;
          case 7:
            int v17 = v11;
            if (HIWORD(v15)) {
              return 0LL;
            }
LABEL_16:
            unint64_t v15 = v17 | (v15 << 16);
            if (!--v16) {
              break;
            }
            continue;
          default:
            goto LABEL_49;
        }

        break;
      }
    }

    if (!HIWORD(v15))
    {
      LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = i;
      for (unint64_t i = (unsigned __int16)v6 | (v15 << 16); ; unint64_t i = 0LL)
      {
        LODWORD(v29[0]) = v5;
        WORD2(v29[0]) = v6;
        HIWORD(v29[0]) = v7;
        LOWORD(v29[1]) = v12;
        WORD1(v29[1]) = v13;
        WORD2(v29[1]) = WORD2(v4);
        HIWORD(v29[1]) = v10;
        LOWORD(v30) = v4;
        HIWORD(v30) = v11;
        LODWORD(v29[0]) = v5;
        WORD2(v29[0]) = v6;
        HIWORD(v29[0]) = v7;
        LOWORD(v29[1]) = v12;
        WORD1(v29[1]) = v13;
        WORD2(v29[1]) = WORD2(v4);
        HIWORD(v29[1]) = v10;
        LOWORD(v30) = v4;
        HIWORD(v30) = v11;
        BOOL v22 = _So9NSDecimala__exponent_getter((char *)v29);
        if (v22 > 0) {
          goto LABEL_48;
        }
        if (!v22) {
          goto LABEL_40;
        }
        uint64_t v23 = -v22 & ~(-v22 >> 31);
        uint64_t v24 = ~v22;
        while (v23 > v24)
        {
          i /= 0xAuLL;
          if (__CFADD__(v22++, 1)) {
            goto LABEL_40;
          }
        }

        __break(1u);
LABEL_46:
        LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = i;
      }

      LODWORD(v29[0]) = v5;
      WORD2(v29[0]) = v6;
      HIWORD(v29[0]) = v7;
      LOWORD(v29[1]) = v12;
      WORD1(v29[1]) = v13;
      WORD2(v29[1]) = WORD2(v4);
      HIWORD(v29[1]) = v10;
      LOWORD(v30) = v4;
      HIWORD(v30) = v11;
      int v19 = _So9NSDecimala__exponent_getter((char *)v29);
      if (v19 < 0)
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        v29[0] = 0LL;
        v29[1] = 0xE000000000000000LL;
        _StringGuts.grow(_:)(30LL);
        swift_bridgeObjectRelease();
        strcpy((char *)v29, "Invalid index ");
        HIBYTE(v29[1]) = -18;
        v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
        v27._object = (void *)0xEE0061737369746ELL;
        String.append(_:)(v27);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x18341DBB0LL);
      }

      if (v19)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          return 0LL;
        }
        i *= 10LL;
        unint64_t v20 = v19 - 1;
        if (v19 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL)) {
            return 0LL;
          }
          i *= 10LL;
          while (--v20)
          {
            uint64_t v21 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10LL;
            if (v21) {
              return 0LL;
            }
          }
        }
      }

{
  unsigned __int16 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int isNegative_getter;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t result;
  unint64_t i;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  Swift::String v31;
  Swift::String v32;
  int v33;
  void v34[2];
  unsigned int v35;
  unsigned __int16 v3 = a3;
  int v5 = a1;
  v34[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  v34[1] = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unint64_t v11 = HIWORD(a3);
  Swift::String v35 = a3;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(v34);
  LODWORD(v34[0]) = v5;
  WORD2(v34[0]) = v6;
  HIWORD(v34[0]) = v7;
  LOWORD(v34[1]) = a2;
  WORD1(v34[1]) = v8;
  WORD2(v34[1]) = v9;
  HIWORD(v34[1]) = v10;
  LOWORD(v35) = v3;
  HIWORD(v35) = v11;
  int v33 = isNegative_getter;
  unint64_t v13 = (unsigned __int16)a2;
  LODWORD(v34[0]) = v5;
  unint64_t v14 = WORD1(a2);
  WORD2(v34[0]) = v6;
  unint64_t v15 = WORD2(a2);
  unint64_t v16 = v3;
  HIWORD(v34[0]) = v7;
  LOWORD(v34[1]) = v13;
  WORD1(v34[1]) = v14;
  WORD2(v34[1]) = v15;
  HIWORD(v34[1]) = v10;
  LOWORD(v35) = v3;
  HIWORD(v35) = v11;
  int v17 = _So9NSDecimala__length_getter(v34);
  if (!v17) {
    goto LABEL_43;
  }
  unint64_t v18 = 0LL;
  int v19 = v17 - 1;
  if (v17 != 1)
  {
    while (2)
    {
      unint64_t v20 = v7;
      switch(v19)
      {
        case 1:
          goto LABEL_15;
        case 2:
          unint64_t v20 = v13;
          if (HIWORD(v18)) {
            return 0LL;
          }
          goto LABEL_16;
        case 3:
          unint64_t v20 = v14;
          if (HIWORD(v18)) {
            return 0LL;
          }
          goto LABEL_16;
        case 4:
          unint64_t v20 = v15;
          if (HIWORD(v18)) {
            return 0LL;
          }
          goto LABEL_16;
        case 5:
          unint64_t v20 = v10;
          if (HIWORD(v18)) {
            return 0LL;
          }
          goto LABEL_16;
        case 6:
          unint64_t v20 = v16;
LABEL_15:
          if (!HIWORD(v18)) {
            goto LABEL_16;
          }
          return 0LL;
        case 7:
          unint64_t v20 = v11;
          if (HIWORD(v18)) {
            return 0LL;
          }
LABEL_16:
          unint64_t v18 = v20 | (v18 << 16);
          if (!--v19) {
            break;
          }
          continue;
        default:
          goto LABEL_46;
      }

      break;
    }
  }

  if (HIWORD(v18)) {
    return 0LL;
  }
  for (unint64_t i = (unsigned __int16)v6 | (v18 << 16); ; unint64_t i = 0LL)
  {
    LODWORD(v34[0]) = v5;
    WORD2(v34[0]) = v6;
    HIWORD(v34[0]) = v7;
    LOWORD(v34[1]) = v13;
    WORD1(v34[1]) = v14;
    WORD2(v34[1]) = v15;
    HIWORD(v34[1]) = v10;
    LOWORD(v35) = v16;
    HIWORD(v35) = v11;
    LODWORD(v34[0]) = v5;
    WORD2(v34[0]) = v6;
    HIWORD(v34[0]) = v7;
    LOWORD(v34[1]) = v13;
    WORD1(v34[1]) = v14;
    WORD2(v34[1]) = v15;
    HIWORD(v34[1]) = v10;
    LOWORD(v35) = v16;
    HIWORD(v35) = v11;
    int v27 = _So9NSDecimala__exponent_getter((char *)v34);
    if (v27 > 0) {
      goto LABEL_45;
    }
    uint64_t v24 = v33;
    if (!v27) {
      goto LABEL_39;
    }
    uint64_t v28 = -v27 & ~(-v27 >> 31);
    int v29 = ~v27;
    while (v28 > v29)
    {
      i /= 0xAuLL;
      if (__CFADD__(v27++, 1)) {
        goto LABEL_39;
      }
    }

    __break(1u);
LABEL_43:
    ;
  }

  LODWORD(v34[0]) = v5;
  WORD2(v34[0]) = v6;
  HIWORD(v34[0]) = v7;
  LOWORD(v34[1]) = v13;
  WORD1(v34[1]) = v14;
  WORD2(v34[1]) = v15;
  HIWORD(v34[1]) = v10;
  LOWORD(v35) = v16;
  HIWORD(v35) = v11;
  uint64_t v23 = _So9NSDecimala__exponent_getter((char *)v34);
  if (v23 < 0)
  {
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    v34[0] = 0LL;
    v34[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(30LL);
    swift_bridgeObjectRelease();
    strcpy((char *)v34, "Invalid index ");
    HIBYTE(v34[1]) = -18;
    v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
    v32._object = (void *)0xEE0061737369746ELL;
    String.append(_:)(v32);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x18341DFCCLL);
  }

  uint64_t v24 = v33;
  if (v23)
  {
    if (!is_mul_ok(i, 0xAuLL)) {
      return 0LL;
    }
    i *= 10LL;
    int v25 = v23 - 1;
    if (v23 != 1)
    {
      if (!is_mul_ok(i, 0xAuLL)) {
        return 0LL;
      }
      i *= 10LL;
      while (--v25)
      {
        uint64_t result = 0LL;
        int v26 = (i * (unsigned __int128)0xAuLL) >> 64;
        i *= 10LL;
        if (v26) {
          return result;
        }
      }
    }
  }

{
  unint64_t i;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  Swift::String v26;
  Swift::String v27;
  void v28[2];
  unsigned int v29;
  LOWORD(i) = a3;
  uint64_t v4 = a2;
  int v5 = a1;
  v28[0] = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  v28[1] = a2;
  unint64_t v8 = HIWORD(a2);
  unint64_t v9 = HIWORD(a3);
  int v29 = a3;
  unint64_t v13 = (unsigned __int16)v4;
  LODWORD(v28[0]) = v5;
  unint64_t v14 = WORD1(v4);
  WORD2(v28[0]) = v6;
  HIWORD(v28[0]) = v7;
  LODWORD(v28[1]) = v4;
  WORD2(v28[1]) = WORD2(v4);
  HIWORD(v28[1]) = v8;
  LOWORD(v29) = i;
  HIWORD(v29) = v9;
  unint64_t v15 = _So9NSDecimala__length_getter(v28);
  if (!v15) {
    goto LABEL_37;
  }
  unint64_t v16 = 0LL;
  int v17 = v15 - 1;
  if (v15 != 1)
  {
    while (2)
    {
      unint64_t v18 = v7;
      switch(v17)
      {
        case 1:
          goto LABEL_13;
        case 2:
          unint64_t v18 = v13;
          goto LABEL_13;
        case 3:
          unint64_t v18 = v14;
          goto LABEL_13;
        case 4:
          unint64_t v18 = WORD2(v4);
          goto LABEL_13;
        case 5:
          unint64_t v18 = v8;
          goto LABEL_13;
        case 6:
          unint64_t v18 = (unsigned __int16)i;
          goto LABEL_13;
        case 7:
          unint64_t v18 = v9;
LABEL_13:
          if (HIWORD(v16)) {
            goto LABEL_2;
          }
          unint64_t v16 = v18 | (v16 << 16);
          if (!--v17) {
            break;
          }
          continue;
        default:
          goto LABEL_40;
      }

      break;
    }
  }

  if (HIWORD(v16))
  {
LABEL_2:
    unint64_t v10 = 0LL;
    unint64_t v11 = 1;
  }

  else
  {
    LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = i;
    for (unint64_t i = (unsigned __int16)v6 | (v16 << 16); ; unint64_t i = 0LL)
    {
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      BOOL v22 = _So9NSDecimala__exponent_getter((char *)v28);
      if (v22 > 0) {
        goto LABEL_39;
      }
      if (!v22) {
        goto LABEL_33;
      }
      uint64_t v23 = -v22 & ~(-v22 >> 31);
      uint64_t v24 = ~v22;
      while (v23 > v24)
      {
        i /= 0xAuLL;
        if (__CFADD__(v22++, 1)) {
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_37:
      LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = i;
    }

    LODWORD(v28[0]) = v5;
    WORD2(v28[0]) = v6;
    HIWORD(v28[0]) = v7;
    LOWORD(v28[1]) = v13;
    WORD1(v28[1]) = v14;
    WORD2(v28[1]) = WORD2(v4);
    HIWORD(v28[1]) = v8;
    LOWORD(v29) = v4;
    HIWORD(v29) = v9;
    int v19 = _So9NSDecimala__exponent_getter((char *)v28);
    if (v19 < 0)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      v28[0] = 0LL;
      v28[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(30LL);
      swift_bridgeObjectRelease();
      strcpy((char *)v28, "Invalid index ");
      HIBYTE(v28[1]) = -18;
      v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
      v27._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v27);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x18341EAE0LL);
    }

    if (v19)
    {
      if (!is_mul_ok(i, 0xAuLL)) {
        goto LABEL_2;
      }
      i *= 10LL;
      unint64_t v20 = v19 - 1;
      if (v19 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_2;
        }
        i *= 10LL;
        while (--v20)
        {
          unint64_t v10 = 0LL;
          uint64_t v21 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10LL;
          unint64_t v11 = 1;
          if (v21) {
            goto LABEL_3;
          }
        }
      }
    }

unint64_t protocol witness for Decoder.container<A>(keyedBy:) in conformance JSONDecoderImpl( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JSONDecoderImpl.container<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for Decoder.unkeyedContainer() in conformance JSONDecoderImpl@<X0>( uint64_t *a1@<X8>)
{
  return JSONDecoderImpl.unkeyedContainer()(a1);
}

uint64_t protocol witness for Decoder.singleValueContainer() in conformance JSONDecoderImpl@<X0>( void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for JSONDecoderImpl();
  a1[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl,  (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl,  (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
  *a1 = v3;
  return swift_retain();
}

BOOL JSONDecoderImpl.decodeNil()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 24 * v2;
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 16);
    int v6 = *(unsigned __int8 *)(v3 + 24);
    return !(v5 | v4) && v6 == 160;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t JSONDecoderImpl.decode<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 24 * v4;
    unint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    unint64_t v8 = *(void *)(v2 + 160);
    unsigned __int8 v9 = *(_BYTE *)(v5 + 24);
    unint64_t v10 = (ValueMetadata *)result;
    swift_retain();
    specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(v6, v7, v9, v10, v8, 0LL, 0LL, 0LL, 255, a2);
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t protocol witness for Decoder.codingPath.getter in conformance JSONDecoderImpl()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 160LL);
  swift_retain();
  uint64_t v2 = _CodingPathNode.path.getter(v1);
  swift_release();
  return v2;
}

BOOL protocol witness for SingleValueDecodingContainer.decodeNil() in conformance JSONDecoderImpl()
{
  return JSONDecoderImpl.decodeNil()();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance JSONDecoderImpl()
{
  return v0 & 1;
}

{
  return specialized JSONDecoderImpl.decode(_:)();
}

{
  return specialized JSONDecoderImpl.decode(_:)();
}

void protocol witness for SingleValueDecodingContainer.decode(_:) in conformance JSONDecoderImpl()
{
}

uint64_t (*protocol witness for SingleValueDecodingContainer.decode(_:) in conformance JSONDecoderImpl())(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t)
{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

uint64_t protocol witness for SingleValueDecodingContainer.decode<A>(_:) in conformance JSONDecoderImpl( uint64_t a1, uint64_t a2)
{
  return JSONDecoderImpl.decode<A>(_:)(a1, a2);
}

uint64_t static JSONDecoderImpl.KeyedContainer.stringify(objectRegion:using:codingPathNode:keyDecodingStrategy:)( Swift::Int a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  void (*v278)(__int128 *__return_ptr, void *);
  uint64_t v279;
  uint64_t v280;
  void *v281;
  unint64_t v282;
  unint64_t v283;
  int64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  __int128 v292;
  uint64_t v293;
  ValueMetadata *v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v6 = v5;
  unint64_t v8 = *a5;
  id v296 = MEMORY[0x18961AFF0];
  if (a2 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a2 + 1;
  }
  Swift::Int v10 = v9 >> 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : JSONMap.Value]);
  Dictionary.reserveCapacity(_:)(v10);
  if (!v8)
  {
    Swift::String v279 = v5;
    unint64_t v14 = v296;
    swift_retain();
    uint64_t v15 = JSONMap.loadValue(at:)(a1);
    if (v17 > 0xFDu)
    {
      unint64_t v18 = v296;
LABEL_10:
      id v296 = v18;
      swift_release();
      return v296;
    }

    uint64_t v156 = v15;
    uint64_t v157 = v16;
    unsigned __int8 v158 = v17;
    while (1)
    {
      Swift::Int v161 = JSONMap.offset(after:)(a1);
      uint64_t v162 = JSONMap.loadValue(at:)(v161);
      if (v164 > 0xFDu) {
        goto LABEL_236;
      }
      unsigned __int8 v165 = v164;
      __int128 v286 = v163;
      uint64_t v289 = v162;
      Swift::Int v166 = JSONMap.offset(after:)(v161);
      uint64_t v167 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v156, v157, v158, a4, 0LL, 0LL, 0LL, 255);
      if (v279) {
        goto LABEL_245;
      }
      uint64_t v169 = v167;
      uint64_t v170 = v168;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&unint64_t v292 = v14;
      swift_bridgeObjectRetain();
      unint64_t v173 = specialized __RawDictionaryStorage.find<A>(_:)(v169, v170);
      uint64_t v174 = *(void *)(v14 + 16);
      BOOL v175 = (v172 & 1) == 0;
      uint64_t v176 = v174 + v175;
      if (__OFADD__(v174, v175))
      {
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
LABEL_235:
        __break(1u);
LABEL_236:
        __break(1u);
LABEL_237:
        __break(1u);
LABEL_238:
        __break(1u);
        goto LABEL_239;
      }

      char v177 = v172;
      if (*(void *)(v14 + 24) >= v176)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          unint64_t v18 = v14;
          if ((v172 & 1) != 0) {
            goto LABEL_134;
          }
        }

        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONMap.Value>);
          uint64_t v184 = static _DictionaryStorage.copy(original:)();
          unint64_t v18 = v184;
          if (*(void *)(v14 + 16))
          {
            __int128 v185 = (char *)(v184 + 64);
            uint64_t v186 = (char *)(v14 + 64);
            unint64_t v187 = (unint64_t)((1LL << *(_BYTE *)(v18 + 32)) + 63) >> 6;
            Swift::String v282 = v14 + 64;
            if (v18 != v14 || v185 >= &v186[8 * v187]) {
              memmove(v185, v186, 8 * v187);
            }
            int64_t v188 = 0LL;
            *(void *)(v18 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v14 + 16);
            uint64_t v189 = 1LL << *(_BYTE *)(v14 + 32);
            if (v189 < 64) {
              uint64_t v190 = ~(-1LL << v189);
            }
            else {
              uint64_t v190 = -1LL;
            }
            unint64_t v191 = v190 & *(void *)(v14 + 64);
            uint64_t v284 = (unint64_t)(v189 + 63) >> 6;
            while (1)
            {
              if (v191)
              {
                unint64_t v192 = __clz(__rbit64(v191));
                v191 &= v191 - 1;
                unint64_t v193 = v192 | (v188 << 6);
              }

              else
              {
                int64_t v204 = v188 + 1;
                if (__OFADD__(v188, 1LL)) {
                  goto LABEL_233;
                }
                if (v204 >= v284) {
                  break;
                }
                unint64_t v205 = *(void *)(v282 + 8 * v204);
                ++v188;
                if (!v205)
                {
                  int64_t v188 = v204 + 1;
                  if (v204 + 1 >= v284) {
                    break;
                  }
                  unint64_t v205 = *(void *)(v282 + 8 * v188);
                  if (!v205)
                  {
                    int64_t v188 = v204 + 2;
                    if (v204 + 2 >= v284) {
                      break;
                    }
                    unint64_t v205 = *(void *)(v282 + 8 * v188);
                    if (!v205)
                    {
                      int64_t v188 = v204 + 3;
                      if (v204 + 3 >= v284) {
                        break;
                      }
                      unint64_t v205 = *(void *)(v282 + 8 * v188);
                      if (!v205)
                      {
                        int64_t v206 = v204 + 4;
                        if (v206 >= v284) {
                          break;
                        }
                        unint64_t v205 = *(void *)(v282 + 8 * v206);
                        if (!v205)
                        {
                          while (1)
                          {
                            int64_t v188 = v206 + 1;
                            if (__OFADD__(v206, 1LL)) {
                              break;
                            }
                            if (v188 >= v284) {
                              goto LABEL_174;
                            }
                            unint64_t v205 = *(void *)(v282 + 8 * v188);
                            ++v206;
                            if (v205) {
                              goto LABEL_173;
                            }
                          }

LABEL_240:
                          __break(1u);
                          goto LABEL_241;
                        }

                        int64_t v247 = v265;
                      }
                    }
                  }
                }

LABEL_241:
  __break(1u);
LABEL_242:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_243:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_244:
  swift_unexpectedError();
  __break(1u);
LABEL_245:
  swift_unexpectedError();
  __break(1u);
LABEL_246:
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

    Swift::String v281 = 0u;
    Swift::String v282 = 0u;
    Swift::String v279 = 0u;
    Swift::String v280 = 0u;
    unint64_t v116 = [v90 countByEnumeratingWithState:&v279 objects:v278 count:16];
    char v117 = v257;
    if (v116)
    {
      char v118 = v116;
      unint64_t v119 = *(void *)v280;
      do
      {
        for (m = 0LL; m != v118; ++m)
        {
          if (*(void *)v280 != v119) {
            objc_enumerationMutation(v90);
          }
          objc_msgSend( v257,  "removeObjectForKey:",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(*((void *)&v279 + 1) + 8 * m) + 24)));
        }

        char v118 = [v90 countByEnumeratingWithState:&v279 objects:v278 count:16];
      }

      while (v118);
    }

    BOOL v121 = malloc(0x30uLL);
    iterations = 0LL;
    getAllDetectors((uint64_t)v121, &iterations, codeSchemeEncodings, 6LL, v257, v49, v259);
    uint64_t v122 = iterations;
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __113__NSString_NSStringEncodingDetection__stringEncodingForData_encodingOptions_convertedString_usedLossyConversion___block_invoke;
    block[3] = &__block_descriptor_56_e8_v16__0Q8l;
    block[4] = v121;
    block[5] = v59;
    block[6] = v254;
    dispatch_apply(iterations, 0LL, block);
    if (v122)
    {
      char v123 = 0LL;
      unint64_t v124 = 0LL;
      unint64_t v125 = 0.0;
      char v126 = -1LL;
      char v127 = 1LL;
      do
      {
        uint64_t v128 = (void *)v121[v124];
        [v128 confidence];
        if (v128[5])
        {
          BOOL v130 = v129;
          [v128 bytesRatio];
          if (v131 >= 0.85 && (v130 > v125 || v130 == v125 && v126 > v128[8]) && v128[15] >= v127)
          {
            char v126 = v128[8];
            unint64_t v125 = v130;
            char v127 = v128[15];
            char v123 = v128;
          }
        }

        ++v124;
      }

      while (v122 != v124);
      char v117 = v257;
      if (v123)
      {
        if (!v242)
        {
LABEL_262:
          if (v241) {
            void *v241 = v267;
          }
          free(v121);
          unint64_t v69 = v123;
          return [v69 nsEncoding];
        }

        uint64_t v132 = generateStringWithEncoding(v123, (uint64_t)v59, v254, 1, v249, v240, &v267);
        if (v132)
        {
          *uint64_t v242 = (NSString *)v132;
          goto LABEL_262;
        }

        uint64_t v122 = iterations;
      }

      if (v122)
      {
        unint64_t v134 = v121;
        do
        {
          unint64_t v135 = *v134++;
          objc_msgSend( v257,  "removeObjectForKey:",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v135 + 24)));
          --v122;
        }

        while (v122);
      }
    }

    free(v121);
    int64_t v136 = malloc(0xD0uLL);
    uint64_t v137 = malloc(0x70uLL);
    int64_t v263 = 0LL;
    __nel = 0LL;
    getAllDetectors((uint64_t)v136, &__nel, singleByteEncodings, 26LL, v117, v49, v259);
    getAllDetectors((uint64_t)v137, &v263, multiByteEncodings, 14LL, v117, v49, v259);
    if (v247)
    {
      for (n = 0LL; n != 14; ++n)
      {
        unint64_t v139 = objc_msgSend( v117,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  windowsEncodings[n]));
        if (v139) {
          *(double *)(v139 + 152) = *(double *)(v139 + 152) * 5.0;
        }
      }
    }

    unint64_t v237 = v137;
    char v238 = v136;
    if (v243)
    {
      if ([v243 hasPrefix:@"zh"])
      {
        for (iunint64_t i = 0LL; ii != 11; ++ii)
        {
          unint64_t v141 = objc_msgSend( v117,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  chineseEncodings[ii]));
          if (v141) {
            *(double *)(v141 + 152) = *(double *)(v141 + 152) * 5.0;
          }
        }
      }

      else if ([v243 hasPrefix:@"ja"])
      {
        for (jj = 0LL; jj != 6; ++jj)
        {
          uint64_t v143 = objc_msgSend( v117,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  japaneseEncodings[jj]));
          if (v143) {
            *(double *)(v143 + 152) = *(double *)(v143 + 152) * 5.0;
          }
        }
      }

      else if ([v243 hasPrefix:@"ko"])
      {
        for (kk = 0LL; kk != 3; ++kk)
        {
          uint64_t v145 = objc_msgSend( v117,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  koreanEncodings[kk]));
          if (v145) {
            *(double *)(v145 + 152) = *(double *)(v145 + 152) * 5.0;
          }
        }
      }

      else
      {
        uint64_t v146 = (void *)objc_msgSend( &unk_189D1F3B0,  "objectForKey:",  objc_msgSend(v243, "substringWithRange:", 0, 2));
        uint64_t v147 = [v146 count];
        if (v147)
        {
          uint64_t v148 = v147;
          char v149 = (unsigned int *)malloc(4 * v147);
          unint64_t v274 = 0u;
          int64_t v275 = 0u;
          int64_t v276 = 0u;
          int v277 = 0u;
          unint64_t v150 = [v146 countByEnumeratingWithState:&v274 objects:v273 count:16];
          if (v150)
          {
            __int128 v151 = v150;
            uint64_t v152 = 0LL;
            int64_t v153 = *(void *)v275;
            do
            {
              for (mm = 0LL; mm != v151; ++mm)
              {
                if (*(void *)v275 != v153) {
                  objc_enumerationMutation(v146);
                }
                v149[v152 + mm] = [*(id *)(*((void *)&v274 + 1) + 8 * mm) integerValue];
              }

              __int128 v151 = [v146 countByEnumeratingWithState:&v274 objects:v273 count:16];
              v152 += mm;
            }

            while (v151);
          }

          increaseWeightsOfEncodings((uint64_t)v257, v149, v148);
          free(v149);
          uint64_t v137 = v237;
          int64_t v136 = v238;
        }
      }
    }

    if (v256)
    {
      mergesort(v136, __nel, 8uLL, (int (__cdecl *)(const void *, const void *))compareTwoDetectors);
      int64_t v155 = v263;
      mergesort(v137, v263, 8uLL, (int (__cdecl *)(const void *, const void *))compareTwoDetectors);
    }

    else
    {
      int64_t v155 = v263;
    }

    v262[0] = MEMORY[0x1895F87A8];
    v262[1] = 3221225472LL;
    v262[2] = __113__NSString_NSStringEncodingDetection__stringEncodingForData_encodingOptions_convertedString_usedLossyConversion___block_invoke_2;
    v262[3] = &__block_descriptor_56_e8_v16__0Q8l;
    v262[4] = v137;
    v262[5] = v59;
    v262[6] = v254;
    dispatch_apply(v155, 0LL, v262);
    if (v155)
    {
      uint64_t v260 = 0LL;
      uint64_t v156 = 0LL;
      uint64_t v157 = 0.0;
      unsigned __int8 v158 = -1LL;
      uint64_t v159 = (id *)v137;
      unsigned __int8 v160 = -1LL;
      Swift::Int v161 = 0.0;
      while (1)
      {
        uint64_t v162 = *v159;
        [*v159 confidence];
        unsigned __int8 v164 = v163;
        unsigned __int8 v165 = v162[8];
        [v162 bytesRatio];
        uint64_t v167 = v166;
        if ((v164 > v161 || (v164 == v161 ? (uint64_t v168 = v160 >= v165) : (uint64_t v168 = 0), v168)) && v166 >= 0.85)
        {
          if (v162[8])
          {
            uint64_t v169 = v164;
            uint64_t v170 = v165;
            uint64_t v171 = v162;
          }

          else
          {
            uint64_t v176 =  -[NSString initWithBytes:length:encoding:]( [NSString alloc],  "initWithBytes:length:encoding:",  v59,  v254,  [v162 nsEncoding]);
            uint64_t v169 = v164;
            uint64_t v170 = v165;
            uint64_t v171 = v162;
            if (!v176)
            {
              uint64_t v169 = v161;
              uint64_t v170 = v160;
              uint64_t v171 = v156;
              goto LABEL_336;
            }
          }
        }

        else
        {
          uint64_t v169 = v161;
          uint64_t v170 = v160;
          uint64_t v171 = v156;
        }

        char v172 = v164 / *((double *)v162 + 19);
        if ((v172 > v157 || (v172 == v157 ? (unint64_t v173 = v158 >= v165) : (unint64_t v173 = 0), v173)) && v167 >= 0.85)
        {
          if (!v162[8])
          {
            uint64_t v174 = v170;
            BOOL v175 =  -[NSString initWithBytes:length:encoding:]( [NSString alloc],  "initWithBytes:length:encoding:",  v59,  v254,  [v162 nsEncoding]);
            uint64_t v170 = v174;
            if (!v175) {
              goto LABEL_336;
            }
          }
        }

        else
        {
          char v172 = v157;
          unsigned __int8 v165 = v158;
          uint64_t v162 = v260;
        }

        uint64_t v157 = v172;
        unsigned __int8 v158 = v165;
        uint64_t v260 = v162;
LABEL_336:
        ++v159;
        uint64_t v156 = v171;
        unsigned __int8 v160 = v170;
        Swift::Int v161 = v169;
        if (!--v155) {
          goto LABEL_341;
        }
      }
    }

    uint64_t v171 = 0LL;
    uint64_t v260 = 0LL;
    uint64_t v170 = -1LL;
    uint64_t v169 = 0.0;
LABEL_341:
    char v177 = v170;
    uint64_t v258 = v171;
    unint64_t v178 = __nel;
    v261[0] = MEMORY[0x1895F87A8];
    v261[1] = 3221225472LL;
    v261[2] = __113__NSString_NSStringEncodingDetection__stringEncodingForData_encodingOptions_convertedString_usedLossyConversion___block_invoke_3;
    v261[3] = &__block_descriptor_56_e8_v16__0Q8l;
    char v179 = (id *)v238;
    v261[4] = v238;
    v261[5] = v59;
    v261[6] = v254;
    dispatch_apply(__nel, 0LL, v261);
    unint64_t v180 = 0LL;
    if (v178)
    {
      uint64_t v248 = 1;
      uint64_t v181 = 0.0;
      uint64_t v182 = -1LL;
      while (1)
      {
        uint64_t v183 = *v179;
        [*v179 confidence];
        __int128 v185 = v184;
        uint64_t v186 = v183[8];
        [v183 bytesRatio];
        int64_t v188 = v187;
        if (v185 <= v169)
        {
          uint64_t v189 = v177;
          uint64_t v190 = v185 == v169 && v177 >= v186;
          if (!v190 || v187 < 0.85) {
            goto LABEL_358;
          }
        }

        else
        {
          uint64_t v189 = v177;
          if (v187 < 0.85) {
            goto LABEL_358;
          }
        }

        unint64_t v191 = v183[8];
        if (v191)
        {
          uint64_t v248 = 0;
          uint64_t v169 = v185;
          uint64_t v189 = v186;
          uint64_t v258 = v183;
        }

        else
        {
          if (! -[NSString initWithBytes:length:encoding:]( [NSString alloc],  "initWithBytes:length:encoding:",  v59,  v254,  [v183 nsEncoding]))
          {
            uint64_t v189 = v177;
            goto LABEL_372;
          }

          uint64_t v248 = 0;
          uint64_t v169 = v185;
          uint64_t v189 = v186;
          uint64_t v258 = v183;
        }

uint64_t JSONDecoderImpl.KeyedContainer.codingPath.getter(uint64_t a1, unint64_t a2)
{
  return _CodingPathNode.path.getter(a2);
}

uint64_t JSONDecoderImpl.KeyedContainer.allKeys.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9[2] = a4;
  v9[3] = a5;
  swift_bridgeObjectRetain();
  uint64_t v7 = _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5( (void (*)(void *))partial apply for closure #1 in _PlistDictionaryKeyedDecodingContainer.allKeys.getter,  (uint64_t)v9,  a3,  a4);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t JSONDecoderImpl.KeyedContainer.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    char v8 = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v8 = 0;
  }

  return v8 & 1;
}

uint64_t JSONDecoderImpl.KeyedContainer.decodeNil(forKey:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12), (v14 & 1) != 0))
  {
    uint64_t v15 = *(void *)(a4 + 56) + 24 * v13;
    uint64_t v16 = *(void *)v15;
    uint64_t v17 = *(void *)(v15 + 8);
    int v18 = *(unsigned __int8 *)(v15 + 16);
    swift_bridgeObjectRelease();
    if (v17 | v16) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v18 == 160;
    }
    char v20 = v19;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
    v23[3] = a5;
    unint64_t v23[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a5);
    _CodingPathNode.path.getter(a3);
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 2238496LL;
    v26._object = (void *)0xE300000000000000LL;
    String.append(_:)(v26);
    v27._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 3025186LL;
    v28._object = (void *)0xE300000000000000LL;
    String.append(_:)(v28);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v23,  *MEMORY[0x189619350],  v21);
    swift_willThrow();
  }

  return v20 & 1;
}

uint64_t JSONDecoderImpl.KeyedContainer.decode(_:forKey:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a4 + 16) || (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12), (v14 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
    _OWORD v21[3] = a5;
    void v21[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a5);
    _CodingPathNode.path.getter(a3);
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 2238496LL;
    v24._object = (void *)0xE300000000000000LL;
    String.append(_:)(v24);
    v25._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 3025186LL;
    v26._object = (void *)0xE300000000000000LL;
    String.append(_:)(v26);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619350],  v19);
LABEL_6:
    swift_willThrow();
    return v18 & 1;
  }

  uint64_t v15 = *(void *)(a4 + 56) + 24 * v13;
  uint64_t v16 = *(void *)v15;
  int v17 = *(unsigned __int8 *)(v15 + 16);
  swift_bridgeObjectRelease();
  if ((v17 & 0xE0) != 0x40)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.KeyedContainer.createTypeMismatchError(type:forKey:value:)( MEMORY[0x1896184C8],  a1,  v17,  a3,  v28,  a5,  a6);
    goto LABEL_6;
  }

  char v18 = v16 & 1;
  return v18 & 1;
}

void JSONDecoderImpl.KeyedContainer.createTypeMismatchError(type:forKey:value:)( unint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W4>, unint64_t a4@<X6>, unint64_t *a5@<X8>, uint64_t a6, uint64_t a7)
{
  v28[0] = a4;
  int v29 = a3;
  uint64_t v33 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v18 = MEMORY[0x1895F8858](v17);
  char v20 = (char *)v28 - v19;
  uint64_t v30 = a5;
  v28[1] = a1;
  *a5 = a1;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  v21((char *)v28 - v19, a2, a6, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v20, 0LL, 1LL, a6);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v20, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1LL, a6) == 1)
  {
    BOOL v22 = *(void (**)(char *, uint64_t))(v14 + 8);
    v22(v16, v13);
    _CodingPathNode.path.getter(v28[0]);
    v22(v20, v13);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, a6);
    uint64_t v23 = _CodingPathNode.path.getter(v28[0]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183720D90;
    *(void *)(inited + 56) = a6;
    *(void *)(inited + 64) = a7;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
    ((void (*)(uint64_t *, char *, uint64_t))v21)(boxed_opaque_existential_1, v12, a6);
    unint64_t v31 = v23;
    specialized Array.append<A>(contentsOf:)(inited);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a6);
  }

  unint64_t v31 = 0LL;
  unint64_t v32 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(43LL);
  swift_bridgeObjectRelease();
  unint64_t v31 = 0xD000000000000013LL;
  unint64_t v32 = 0x80000001839CD6C0LL;
  v26._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0x756F662074756220LL;
  v27._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v27);
  __asm { BR              X10 }

uint64_t sub_183421644()
{
  uint64_t v1 = *(void *)(v0 - 184);
  v2._uint64_t countAndFlagsBits = 0x7265626D756ELL;
  v2._object = (void *)0xE600000000000000LL;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x64616574736E6920LL;
  v3._object = (void *)0xE90000000000002ELL;
  String.append(_:)(v3);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v4 = *MEMORY[0x189619358];
  uint64_t v5 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104LL))(v1, v4, v5);
}

uint64_t JSONDecoderImpl.KeyedContainer.decode(_:forKey:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t object)
{
  uint64_t v35 = a2;
  unint64_t v39 = a3;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15), (v17 & 1) != 0))
  {
    uint64_t v18 = *(void *)(a4 + 56) + 24 * v16;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    unsigned int v34 = *(unsigned __int8 *)(v18 + 16);
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v13, a1, a5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v13, 0LL, 1LL, a5);
    BOOL v22 = v36;
    uint64_t v23 = JSONDecoderImpl.unwrapString<A>(from:for:_:)(v19, v20, v34, v39, (uint64_t)v13, a5, object);
    if (!v22) {
      object = v23;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v26 = v25;
    uint64_t v36 = (char *)v25
    id v26[3] = a5;
    v26[4] = object;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v26);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a5);
    _CodingPathNode.path.getter(v39);
    unint64_t v37 = 0LL;
    unint64_t v38 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    unint64_t v37 = 0xD00000000000001DLL;
    unint64_t v38 = 0x80000001839D1B70LL;
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 2238496LL;
    v29._object = (void *)0xE300000000000000LL;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    object = (uint64_t)v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 3025186LL;
    v31._object = (void *)0xE300000000000000LL;
    String.append(_:)(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v24 - 8) + 104LL))( v26,  *MEMORY[0x189619350],  v24);
    swift_willThrow();
  }

  return object;
}

double JSONDecoderImpl.KeyedContainer.decode(_:forKey:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v37 = a3;
  uint64_t v35 = a2;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(a4 + 56) + 24 * v17;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v14, 0LL, 1LL, a5);
    uint64_t v23 = v36;
    specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( v20,  v21,  HIDWORD(v34),  v37,  (uint64_t)v14,  a5,  a6);
    if (!v23) {
      double v6 = v24;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v27 = v26;
    uint64_t v36 = (char *)v26
    v27[3] = a5;
    v27[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a5);
    _CodingPathNode.path.getter(v37);
    unint64_t v38 = 0LL;
    unint64_t v39 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    unint64_t v38 = 0xD00000000000001DLL;
    unint64_t v39 = 0x80000001839D1B70LL;
    v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 2238496LL;
    v30._object = (void *)0xE300000000000000LL;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 3025186LL;
    v32._object = (void *)0xE300000000000000LL;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  *MEMORY[0x189619350],  v25);
    swift_willThrow();
  }

  return v6;
}

float JSONDecoderImpl.KeyedContainer.decode(_:forKey:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v37 = a3;
  uint64_t v35 = a2;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(a4 + 56) + 24 * v17;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v14, 0LL, 1LL, a5);
    uint64_t v23 = v36;
    specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( v20,  v21,  HIDWORD(v34),  v37,  (uint64_t)v14,  a5,  a6);
    if (!v23) {
      float v6 = v24;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v27 = v26;
    uint64_t v36 = (char *)v26
    v27[3] = a5;
    v27[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a5);
    _CodingPathNode.path.getter(v37);
    unint64_t v38 = 0LL;
    unint64_t v39 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    unint64_t v38 = 0xD00000000000001DLL;
    unint64_t v39 = 0x80000001839D1B70LL;
    v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 2238496LL;
    v30._object = (void *)0xE300000000000000LL;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 3025186LL;
    v32._object = (void *)0xE300000000000000LL;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  *MEMORY[0x189619350],  v25);
    swift_willThrow();
  }

  return v6;
}

uint64_t JSONDecoderImpl.KeyedContainer.decode(_:forKey:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t object, uint64_t *a7)
{
  unint64_t v37 = a7;
  unint64_t v40 = a3;
  uint64_t v35 = a2;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(a4 + 56) + 24 * v17;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v14, 0LL, 1LL, a5);
    uint64_t v23 = v36;
    uint64_t v24 = ((uint64_t (*)(uint64_t, uint64_t, void, unint64_t, char *, uint64_t, uint64_t))v37)( v20,  v21,  HIDWORD(v34),  v40,  v14,  a5,  object);
    if (!v23) {
      object = v24;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v27 = v26;
    unint64_t v37 = (uint64_t *)((char *)v26
    v27[3] = a5;
    v27[4] = object;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a5);
    _CodingPathNode.path.getter(v40);
    unint64_t v38 = 0LL;
    unint64_t v39 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    unint64_t v38 = 0xD00000000000001DLL;
    unint64_t v39 = 0x80000001839D1B70LL;
    v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 2238496LL;
    v30._object = (void *)0xE300000000000000LL;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    object = (uint64_t)v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 3025186LL;
    v32._object = (void *)0xE300000000000000LL;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  *MEMORY[0x189619350],  v25);
    swift_willThrow();
  }

  return object;
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v37 = a7;
  unint64_t v40 = a3;
  uint64_t v35 = a2;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(a4 + 56) + 24 * v17;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v14, 0LL, 1LL, a5);
    uint64_t v23 = v36;
    uint64_t v24 = ((uint64_t (*)(uint64_t, uint64_t, void, unint64_t, char *, uint64_t, uint64_t))v37)( v20,  v21,  HIDWORD(v34),  v40,  v14,  a5,  object);
    if (!v23) {
      object = v24;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v27 = v26;
    unint64_t v37 = (uint64_t *)((char *)v26
    v27[3] = a5;
    v27[4] = object;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a5);
    _CodingPathNode.path.getter(v40);
    unint64_t v38 = 0LL;
    unint64_t v39 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    unint64_t v38 = 0xD00000000000001DLL;
    unint64_t v39 = 0x80000001839D1B70LL;
    v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 2238496LL;
    v30._object = (void *)0xE300000000000000LL;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    object = (uint64_t)v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 3025186LL;
    v32._object = (void *)0xE300000000000000LL;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  *MEMORY[0x189619350],  v25);
    swift_willThrow();
  }

  return object;
}

uint64_t JSONDecoderImpl.KeyedContainer.decode<A>(_:forKey:)@<X0>( ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v41 = a7;
  unint64_t v45 = a4;
  unint64_t v39 = a1;
  uint64_t v40 = a3;
  uint64_t v38 = a9;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  unint64_t v17 = (char *)&v35 - v16;
  uint64_t v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a5 + 16) && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) != 0))
  {
    uint64_t v37 = a10;
    uint64_t v22 = *(void *)(a5 + 56) + 24 * v20;
    uint64_t v23 = *(void *)v22;
    uint64_t v24 = *(void *)(v22 + 8);
    int v36 = *(unsigned __int8 *)(v22 + 16);
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void *)(a6 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v17, a2, a6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v17, 0LL, 1LL, a6);
    JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(v23, v24, v36, v39, v45, (uint64_t)v17, v41, a6, v38, v37, a8);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v29 = v28;
    uint64_t v42 = (char *)v28
    v29[3] = a6;
    v29[4] = a8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16LL))( boxed_opaque_existential_1,  a2,  a6);
    _CodingPathNode.path.getter(v45);
    unint64_t v43 = 0LL;
    unint64_t v44 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    unint64_t v43 = 0xD00000000000001DLL;
    unint64_t v44 = 0x80000001839D1B70LL;
    v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 2238496LL;
    v32._object = (void *)0xE300000000000000LL;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 3025186LL;
    v34._object = (void *)0xE300000000000000LL;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v27 - 8) + 104LL))( v29,  *MEMORY[0x189619350],  v27);
    return swift_willThrow();
  }

uint64_t JSONDecoderImpl.KeyedContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t *a10)
{
  uint64_t v65 = a7;
  uint64_t v72 = a4;
  uint64_t v68 = a3;
  uint64_t v63 = a9;
  uint64_t v64 = a1;
  uint64_t v14 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  char v62 = &v59[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v67 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v67 - 8);
  MEMORY[0x1895F8858](v67);
  uint64_t v18 = &v59[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v19);
  char v21 = &v59[-v20];
  uint64_t v69 = a8;
  uint64_t v22 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a5 + 16) || (unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23), (v25 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = type metadata accessor for DecodingError();
    uint64_t v68 = swift_allocError();
    Swift::String v34 = v33;
    uint64_t v67 = (uint64_t)v33
    uint64_t v35 = v69;
    v34[3] = a6;
    v34[4] = v35;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(boxed_opaque_existential_1, a2, a6);
    _CodingPathNode.path.getter(v72);
    unint64_t v70 = 0LL;
    unint64_t v71 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    unint64_t v70 = 0xD00000000000001DLL;
    unint64_t v71 = 0x80000001839D1B70LL;
    v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 2238496LL;
    v38._object = (void *)0xE300000000000000LL;
    String.append(_:)(v38);
    v39._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._uint64_t countAndFlagsBits = 3025186LL;
    v40._object = (void *)0xE300000000000000LL;
    String.append(_:)(v40);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v32 - 8) + 104LL))( v34,  *MEMORY[0x189619350],  v32);
    return swift_willThrow();
  }

  uint64_t v26 = *(void *)(a5 + 56) + 24 * v24;
  uint64_t v27 = *(void *)v26;
  uint64_t v61 = *(void *)(v26 + 8);
  int v60 = *(unsigned __int8 *)(v26 + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(void *, uint64_t, uint64_t))(v14 + 16))(v21, a2, a6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v21, 0LL, 1LL, a6);
  uint64_t v28 = v67;
  (*(void (**)(_BYTE *, void *, uint64_t))(v16 + 16))(v18, v21, v67);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v18, 1LL, a6) == 1)
  {
    Swift::String v29 = *(void (**)(_BYTE *, uint64_t))(v16 + 8);
    v29(v21, v28);
    v29(v18, v28);
    unint64_t v30 = v72;
    swift_retain();
    uint64_t v31 = v68;
    goto LABEL_12;
  }

  uint64_t v42 = *(void (**)(uint64_t *, _BYTE *, uint64_t))(v14 + 32);
  unint64_t v43 = v62;
  v42((uint64_t *)v62, v18, a6);
  unint64_t v44 = (uint64_t *)swift_allocObject();
  uint64_t v45 = v69;
  v44[5] = a6;
  v44[6] = v45;
  char v46 = __swift_allocate_boxed_opaque_existential_1(v44 + 2);
  v42(v46, v43, a6);
  (*(void (**)(void *, uint64_t))(v16 + 8))(v21, v28);
  unint64_t v47 = v72;
  v44[7] = v72;
  if (v47 >> 62)
  {
    uint64_t v31 = v68;
    if (v47 >> 62 != 1)
    {
      uint64_t v50 = 1LL;
      goto LABEL_11;
    }

    char v48 = (uint64_t *)((v47 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    char v48 = (uint64_t *)(v47 + 64);
    uint64_t v31 = v68;
  }

  uint64_t v49 = *v48;
  swift_retain();
  uint64_t v50 = v49 + 1;
  if (!__OFADD__(v49, 1LL))
  {
LABEL_11:
    v44[8] = v50;
    unint64_t v30 = (unint64_t)v44;
LABEL_12:
    unint64_t v44 = a10;
    uint64_t v28 = *(void *)(v31 + 160);
    *(void *)(v31 + 160) = v30;
    char v21 = *(void **)(v31 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v31 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  __break(1u);
LABEL_26:
  char v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v21[2] + 1LL,  1,  v21);
  *(void *)(v31 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
LABEL_13:
  unint64_t v53 = v21[2];
  unint64_t v52 = v21[3];
  if (v53 >= v52 >> 1) {
    char v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v52 > 1),  v53 + 1,  1,  v21);
  }
  v21[2] = v53 + 1;
  unint64_t v54 = &v21[3 * v53];
  uint64_t v55 = v61;
  v54[4] = v27;
  v54[5] = v55;
  *((_BYTE *)v54 + 48) = v60;
  *(void *)(v31 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
  uint64_t v56 = v66;
  JSONDecoderImpl.container<A>(keyedBy:)(v64, v65, (uint64_t)v44);
  if (v56)
  {
    *(void *)(v31 + 160) = v28;
    swift_retain();
    swift_release();
    unint64_t v57 = *(void **)(v31 + 16);
    if (v57[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        uint64_t v58 = v57[2];
        if (v58)
        {
LABEL_23:
          v57[2] = v58 - 1;
          *(void *)(v31 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v57;
          swift_release();
          return swift_release();
        }

        goto LABEL_19;
      }
    }

    else
    {
      __break(1u);
    }

    unint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew()(v57);
    uint64_t v58 = v57[2];
    if (v58) {
      goto LABEL_23;
    }
LABEL_19:
    __break(1u);
  }

  *(void *)(v31 + 160) = v28;
  swift_retain();
  swift_release();
  unint64_t v57 = *(void **)(v31 + 16);
  if (!v57[2])
  {
    __break(1u);
LABEL_31:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v57);
    unint64_t v57 = (void *)result;
    uint64_t v58 = *(void *)(result + 16);
    if (v58) {
      goto LABEL_23;
    }
    goto LABEL_32;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_31;
  }
  uint64_t v58 = v57[2];
  if (v58) {
    goto LABEL_23;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t JSONDecoderImpl.KeyedContainer.nestedUnkeyedContainer(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v58 = a7;
  uint64_t v65 = (void *)a3;
  uint64_t v61 = a2;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v57 = &v54[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v60 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v60 - 8);
  MEMORY[0x1895F8858](v60);
  uint64_t v15 = &v54[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = &v54[-v17];
  uint64_t v62 = a6;
  uint64_t v19 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a4 + 16) || (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20), (v22 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = type metadata accessor for DecodingError();
    uint64_t v61 = swift_allocError();
    uint64_t v31 = v30;
    uint64_t v60 = (uint64_t)v30
    uint64_t v32 = v62;
    _OWORD v31[3] = a5;
    v31[4] = v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter((unint64_t)v65);
    unint64_t v63 = 0LL;
    unint64_t v64 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    unint64_t v63 = 0xD00000000000001DLL;
    unint64_t v64 = 0x80000001839D1B70LL;
    v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._uint64_t countAndFlagsBits = 2238496LL;
    v35._object = (void *)0xE300000000000000LL;
    String.append(_:)(v35);
    v36._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = 3025186LL;
    v37._object = (void *)0xE300000000000000LL;
    String.append(_:)(v37);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v29 - 8) + 104LL))( v31,  *MEMORY[0x189619350],  v29);
    return swift_willThrow();
  }

  uint64_t v23 = *(void *)(a4 + 56) + 24 * v21;
  uint64_t v24 = *(void *)v23;
  uint64_t v56 = *(void *)(v23 + 8);
  int v55 = *(unsigned __int8 *)(v23 + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v18, a1, a5);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0LL, 1LL, a5);
  char v25 = (void *)v60;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16))(v15, v18, v60);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v15, 1LL, a5) == 1)
  {
    uint64_t v26 = *(void (**)(_BYTE *, void *))(v13 + 8);
    v26(v18, v25);
    v26(v15, v25);
    uint64_t v27 = v65;
    swift_retain();
    uint64_t v28 = v61;
    goto LABEL_12;
  }

  Swift::String v39 = *(void (**)(uint64_t *, _BYTE *, uint64_t))(v11 + 32);
  Swift::String v40 = v57;
  v39((uint64_t *)v57, v15, a5);
  uint64_t v27 = (void *)swift_allocObject();
  uint64_t v41 = v62;
  v27[5] = a5;
  v27[6] = v41;
  uint64_t v42 = __swift_allocate_boxed_opaque_existential_1(v27 + 2);
  v39(v42, v40, a5);
  (*(void (**)(_BYTE *, void *))(v13 + 8))(v18, v25);
  unint64_t v43 = (unint64_t)v65;
  v27[7] = v65;
  if (v43 >> 62)
  {
    if (v43 >> 62 != 1)
    {
      uint64_t v28 = v61;
      uint64_t v46 = 1LL;
      goto LABEL_11;
    }

    unint64_t v44 = (uint64_t *)((v43 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unint64_t v44 = (uint64_t *)(v43 + 64);
  }

  uint64_t v28 = v61;
  uint64_t v45 = *v44;
  swift_retain();
  uint64_t v46 = v45 + 1;
  if (!__OFADD__(v45, 1LL))
  {
LABEL_11:
    v27[8] = v46;
LABEL_12:
    char v25 = *(void **)(v28 + 160);
    *(void *)(v28 + 160) = v27;
    uint64_t v27 = *(void **)(v28 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

  __break(1u);
LABEL_26:
  uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v27[2] + 1LL,  1,  v27);
  *(void *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v27;
LABEL_13:
  unint64_t v49 = v27[2];
  unint64_t v48 = v27[3];
  if (v49 >= v48 >> 1) {
    uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v48 > 1),  v49 + 1,  1,  v27);
  }
  void v27[2] = v49 + 1;
  uint64_t v50 = &v27[3 * v49];
  uint64_t v51 = v56;
  v50[4] = v24;
  void v50[5] = v51;
  *((_BYTE *)v50 + 48) = v55;
  *(void *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v27;
  uint64_t v52 = v59;
  JSONDecoderImpl.unkeyedContainer()(v58);
  if (v52)
  {
    *(void *)(v28 + 160) = v25;
    swift_retain();
    swift_release();
    char v25 = *(void **)(v28 + 16);
    if (v25[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        uint64_t v53 = v25[2];
        if (v53)
        {
LABEL_23:
          v25[2] = v53 - 1;
          *(void *)(v28 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
          swift_release();
          return swift_release();
        }

        goto LABEL_19;
      }
    }

    else
    {
      __break(1u);
    }

    char v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
    uint64_t v53 = v25[2];
    if (v53) {
      goto LABEL_23;
    }
LABEL_19:
    __break(1u);
  }

  *(void *)(v28 + 160) = v25;
  swift_retain();
  swift_release();
  char v25 = *(void **)(v28 + 16);
  if (!v25[2])
  {
    __break(1u);
LABEL_31:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
    char v25 = (void *)result;
    uint64_t v53 = *(void *)(result + 16);
    if (v53) {
      goto LABEL_23;
    }
    goto LABEL_32;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_31;
  }
  uint64_t v53 = v25[2];
  if (v53) {
    goto LABEL_23;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t JSONDecoderImpl.KeyedContainer.superDecoder()@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = specialized JSONDecoderImpl.KeyedContainer.decoderForKeyNoThrow<A>(_:)( 0x7265707573LL,  0xE500000000000000LL,  0LL,  0,  a1,  a2,  a3);
  a4[3] = type metadata accessor for JSONDecoderImpl();
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl,  (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl,  (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
  a4[4] = result;
  *a4 = v5;
  return result;
}

uint64_t specialized JSONDecoderImpl.KeyedContainer.decoderForKeyNoThrow<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  char v10 = a4;
  uint64_t v11 = a3;
  uint64_t v59 = a1;
  uint64_t v58 = a2;
  _CodingKey.stringValue.getter(a1, a2, a3, a4);
  if (*(void *)(a7 + 16) && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13), (v15 & 1) != 0))
  {
    uint64_t v16 = *(void *)(a7 + 56) + 24 * v14;
    uint64_t v18 = *(void *)v16;
    uint64_t v17 = *(void *)(v16 + 8);
    char v53 = *(_BYTE *)(v16 + 16);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = type metadata accessor for DecodingError();
    uint64_t v56 = (void *)swift_allocError();
    unint64_t v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
    _OWORD v21[3] = (uint64_t)&type metadata for _CodingKey;
    void v21[4] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v22 = swift_allocObject();
    *unint64_t v21 = v22;
    uint64_t v11 = a3;
    *(void *)(v22 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
    *(void *)(v22 + 24) = a2;
    *(void *)(v22 + 32) = a3;
    *(_BYTE *)(v22 + 40) = a4;
    outlined copy of _CodingKey(a1, a2, a3, a4);
    _CodingPathNode.path.getter(a6);
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 2238496LL;
    v24._object = (void *)0xE300000000000000LL;
    String.append(_:)(v24);
    uint64_t v59 = a1;
    uint64_t v58 = a2;
    _CodingKey.stringValue.getter(a1, a2, a3, a4);
    String.append(_:)(v25);
    char v10 = a4;
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 3025186LL;
    v26._object = (void *)0xE300000000000000LL;
    String.append(_:)(v26);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619350],  v19);
    swift_willThrow();

    uint64_t v18 = 0LL;
    uint64_t v17 = 0LL;
    char v53 = -96;
  }

  unint64_t v27 = *(void *)(a5 + 24);
  uint64_t v55 = *(void *)(a5 + 32);
  uint64_t v28 = (void *)swift_allocObject();
  v28[5] = &type metadata for _CodingKey;
  v28[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v29 = swift_allocObject();
  unint64_t v28[2] = v29;
  *(void *)(v29 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v59;
  *(void *)(v29 + 24) = v58;
  *(void *)(v29 + 32) = v11;
  *(_BYTE *)(v29 + 40) = v10;
  v28[7] = a6;
  uint64_t v54 = v17;
  if (a6 >> 62)
  {
    if (a6 >> 62 != 1)
    {
      unint64_t v33 = 1LL;
      goto LABEL_10;
    }

    unint64_t v30 = (int64_t *)((a6 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unint64_t v30 = (int64_t *)(a6 + 64);
  }

  int64_t v31 = *v30;
  swift_retain();
  unint64_t v33 = v31 + 1;
  if (__OFADD__(v31, 1LL))
  {
    __break(1u);
    goto LABEL_14;
  }

uint64_t JSONDecoderImpl.KeyedContainer.decoderForKeyNoThrow<A>(_:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v92 = a3;
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v85 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v90 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  unint64_t v89 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v82 - v18;
  uint64_t v91 = a8;
  uint64_t v20 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21), (v23 & 1) != 0))
  {
    uint64_t v24 = *(void *)(a4 + 56) + 24 * v22;
    unint64_t v25 = *(void *)v24;
    Swift::String v26 = *(char **)(v24 + 8);
    LODWORD(v86) = *(unsigned __int8 *)(v24 + 16);
    swift_bridgeObjectRelease();
    unint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = type metadata accessor for DecodingError();
    uint64_t v93 = swift_allocError();
    uint64_t v94 = v15;
    unint64_t v30 = v29;
    uint64_t v87 = (char *)v29
    uint64_t v31 = v91;
    __int128 v30[3] = a6;
    v30[4] = v31;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
    uint64_t v88 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16);
    v88(boxed_opaque_existential_1, a1, a6);
    uint64_t v86 = _CodingPathNode.path.getter(v92);
    unint64_t v95 = 0LL;
    unint64_t v96 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    unint64_t v95 = 0xD00000000000001DLL;
    unint64_t v96 = 0x80000001839D1B70LL;
    v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 2238496LL;
    v34._object = (void *)0xE300000000000000LL;
    String.append(_:)(v34);
    v35._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 3025186LL;
    v36._object = (void *)0xE300000000000000LL;
    String.append(_:)(v36);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    uint64_t v37 = v30;
    uint64_t v15 = v94;
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v28 - 8) + 104LL))( v37,  *MEMORY[0x189619350],  v28);
    unint64_t v38 = (void *)v93;
    swift_willThrow();

    unint64_t v27 = (void (*)(char *, uint64_t, uint64_t))v88;
    unint64_t v25 = 0LL;
    Swift::String v26 = 0LL;
    LODWORD(v86) = 160;
  }

  uint64_t v39 = *(void *)(a2 + 24);
  uint64_t v93 = *(void *)(a2 + 32);
  uint64_t v94 = v39;
  v27(v19, a1, a6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v19, 0LL, 1LL, a6);
  char v40 = v89;
  uint64_t v41 = v90;
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v89, v19, v15);
  int v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v40, 1LL, a6);
  uint64_t v87 = v26;
  uint64_t v88 = (void (*)(uint64_t *, uint64_t, uint64_t))v25;
  if (v42 == 1)
  {
    uint64_t v43 = *(void (**)(char *, uint64_t))(v41 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    v43(v19, v15);
    v43(v40, v15);
    unint64_t v44 = v92;
    swift_retain();
    goto LABEL_13;
  }

  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  uint64_t v46 = v85;
  v45(v85, v40, a6);
  uint64_t v47 = (uint64_t *)swift_allocObject();
  uint64_t v48 = v91;
  v47[5] = a6;
  v47[6] = v48;
  char v49 = __swift_allocate_boxed_opaque_existential_1(v47 + 2);
  v45((char *)v49, v46, a6);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v41 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  v50(v19, v15);
  unint64_t v51 = v92;
  v47[7] = v92;
  if (!(v51 >> 62))
  {
    uint64_t v52 = (int64_t *)(v51 + 64);
LABEL_11:
    int64_t v53 = *v52;
    swift_retain();
    unint64_t v55 = v53 + 1;
    if (__OFADD__(v53, 1LL))
    {
      __break(1u);
      goto LABEL_17;
    }

    goto LABEL_12;
  }

  if (v51 >> 62 == 1)
  {
    uint64_t v52 = (int64_t *)((v51 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_11;
  }

  unint64_t v55 = 1LL;
LABEL_12:
  void v47[8] = v55;
  unint64_t v44 = (unint64_t)v47;
LABEL_13:
  uint64_t v57 = *(void **)(a2 + 40);
  uint64_t v56 = *(void *)(a2 + 48);
  unint64_t v58 = *(void *)(a2 + 64);
  uint64_t v59 = *(void *)(a2 + 72);
  uint64_t v61 = *(void *)(a2 + 80);
  uint64_t v60 = *(char **)(a2 + 88);
  uint64_t v62 = *(void *)(a2 + 96);
  uint64_t v85 = *(char **)(a2 + 104);
  uint64_t v64 = *(void *)(a2 + 112);
  uint64_t v63 = *(void *)(a2 + 120);
  unint64_t v83 = v58;
  uint64_t v84 = v63;
  uint64_t v65 = *(void *)(a2 + 136);
  unint64_t v82 = *(void *)(a2 + 128);
  unint64_t v66 = v82;
  unint64_t v89 = v60;
  uint64_t v90 = v65;
  uint64_t v92 = *(void *)(a2 + 144);
  LODWORD(v91) = *(unsigned __int8 *)(a2 + 152);
  char v67 = *(_BYTE *)(a2 + 56);
  type metadata accessor for JSONDecoderImpl();
  a2 = swift_allocObject();
  *(void *)(a2 + 160) = v44;
  uint64_t v68 = v93;
  *(void *)(a2 + 24) = v94;
  *(void *)(a2 + 32) = v68;
  uint64_t v69 = v57;
  *(void *)(a2 + 40) = v57;
  *(void *)(a2 + 48) = v56;
  uint64_t v70 = v56;
  char v71 = v67;
  *(_BYTE *)(a2 + 56) = v67;
  unint64_t v73 = v83;
  uint64_t v72 = v84;
  *(void *)(a2 + 64) = v83;
  *(void *)(a2 + 72) = v59;
  uint64_t v74 = (uint64_t)v89;
  *(void *)(a2 + 80) = v61;
  *(void *)(a2 + 88) = v74;
  uint64_t v75 = v85;
  *(void *)(a2 + 96) = v62;
  *(void *)(a2 + 104) = v75;
  *(void *)(a2 + 112) = v64;
  *(void *)(a2 + 120) = v72;
  *(void *)(a2 + 128) = v66;
  unint64_t v76 = v92;
  *(void *)(a2 + 136) = v90;
  *(void *)(a2 + 144) = v76;
  *(_BYTE *)(a2 + 152) = v91;
  outlined copy of JSONEncoder.DateEncodingStrategy(v69, v70, v71);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v73);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v61, v74);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v82);
  swift_bridgeObjectRetain();
  uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
  unint64_t v25 = v54[2];
  unint64_t v55 = v54[3];
  int64_t v53 = v25 + 1;
  if (v25 >= v55 >> 1) {
LABEL_17:
  }
    uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v55 > 1),  v53,  1,  v54);
  unint64_t v78 = v87;
  unint64_t v77 = v88;
  char v79 = v86;
  v54[2] = v53;
  uint64_t v80 = &v54[3 * v25];
  v80[4] = v77;
  v80[5] = v78;
  *((_BYTE *)v80 + 48) = v79;
  *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v54;
  return a2;
}

uint64_t JSONDecoderImpl.KeyedContainer.superDecoder(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v8 = JSONDecoderImpl.KeyedContainer.decoderForKeyNoThrow<A>(_:)(a1, a2, a3, a4, a5, a5, a6, a6);
  a7[3] = type metadata accessor for JSONDecoderImpl();
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl,  (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl,  (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
  a7[4] = result;
  *a7 = v8;
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance JSONDecoderImpl.KeyedContainer<A>( uint64_t a1, uint64_t a2)
{
  return protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance JSONDecoderImpl.KeyedContainer<A>( a1,  a2,  (uint64_t (*)(void, void, void, void, void))JSONDecoderImpl.KeyedContainer.codingPath.getter);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.allKeys.getter in conformance JSONDecoderImpl.KeyedContainer<A>( uint64_t a1, uint64_t a2)
{
  return protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance JSONDecoderImpl.KeyedContainer<A>( a1,  a2,  JSONDecoderImpl.KeyedContainer.allKeys.getter);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance JSONDecoderImpl.KeyedContainer<A>( uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.contains(_:) in conformance JSONDecoderImpl.KeyedContainer<A>( uint64_t a1)
{
  return JSONDecoderImpl.KeyedContainer.contains(_:)(a1, *v1, v1[1], v1[2]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  JSONDecoderImpl.KeyedContainer.decodeNil(forKey:)) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  JSONDecoderImpl.KeyedContainer.decode(_:forKey:)) & 1;
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( a1,  a2,  a3,  (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( a1,  a2,  a3,  (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( a1,  a2,  a3,  (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( a1,  a2,  a3,  (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( a1,  a2,  a3,  (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( a1,  a2,  a3,  (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( a1,  a2,  a3,  (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( a1,  a2,  a3,  (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( a1,  a2,  a3,  (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( a1,  a2,  a3,  (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( a1,  a2,  a3,  (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( a1,  a2,  a3,  (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( uint64_t a1, uint64_t a2)
{
  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)( a1,  *(void *)v2,  *(void *)(v2 + 8),  *(void *)(v2 + 16),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

double protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( uint64_t a1, uint64_t a2)
{
  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)( a1,  *(void *)v2,  *(void *)(v2 + 8),  *(void *)(v2 + 16),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

float protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( uint64_t a1, uint64_t a2)
{
  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)( a1,  *(void *)v2,  *(void *)(v2 + 8),  *(void *)(v2 + 16),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)( a1,  *(void *)v4,  *(void *)(v4 + 8),  *(void *)(v4 + 16),  *(void *)(a2 + 16),  *(void *)(a2 + 24),  a4);
}

{
  uint64_t v4;
  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)( a1,  *(void *)v4,  *(void *)(v4 + 8),  *(void *)(v4 + 16),  *(void *)(a2 + 16),  *(void *)(a2 + 24),  a4);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))JSONDecoderImpl.KeyedContainer.decode<A>(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))JSONDecoderImpl.KeyedContainer.nestedContainer<A>(keyedBy:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void))JSONDecoderImpl.KeyedContainer.nestedUnkeyedContainer(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance JSONDecoderImpl.KeyedContainer<A>@<X0>( uint64_t *a1@<X8>)
{
  return JSONDecoderImpl.KeyedContainer.superDecoder()(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), a1);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void))JSONDecoderImpl.KeyedContainer.superDecoder(forKey:));
}

void JSONDecoderImpl.UnkeyedContainer.decodeNil()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  unsigned int v2 = *(unsigned __int8 *)(v0 + 40);
  if (v2 < 0xFE)
  {
    uint64_t v16 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v3 = *(void *)(v0 + 8);
    uint64_t v4 = JSONMap.loadValue(at:)(v3);
    if (v6 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v7 = MEMORY[0x18961A520];
      uint64_t v8 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v9 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v8[2] + 1LL,  1,  v8);
      }
      unint64_t v11 = v8[2];
      unint64_t v10 = v8[3];
      if (v11 >= v10 >> 1) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v10 > 1),  v11 + 1,  1,  v8);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v12 = swift_allocObject();
      *(void *)&__int128 v20 = v12;
      *(void *)(v12 + 24) = 0LL;
      *(void *)(v12 + 32) = 0LL;
      *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v9;
      *(_BYTE *)(v12 + 40) = 2;
      _OWORD v8[2] = v11 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v8[5 * v11 + 4]);
      uint64_t v13 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v15 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v15 = v7;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104LL))( v15,  *MEMORY[0x189619368],  v13);
      swift_willThrow();
      return;
    }

    uint64_t v1 = v4;
    uint64_t v16 = v5;
    LOBYTE(v2) = v6;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v3);
    *(void *)(v0 + 24) = v1;
    *(void *)(v0 + 32) = v16;
    *(_BYTE *)(v0 + 40) = v2;
  }

  if ((v2 & 0xE0) == 0xA0 && !(v16 | v1) && v2 == 160)
  {
    uint64_t v17 = *(void *)(v0 + 64);
    BOOL v18 = __OFADD__(v17, 1LL);
    uint64_t v19 = v17 + 1;
    if (v18)
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

void JSONDecoderImpl.UnkeyedContainer.decode<A>(_:)(ValueMetadata *a1, uint64_t a2)
{
  uint64_t v5 = a1;
  unint64_t v6 = *(void *)(v2 + 24);
  unsigned int v7 = *(unsigned __int8 *)(v2 + 40);
  if (v7 < 0xFE)
  {
    uint64_t v20 = *(void *)(v2 + 32);
  }

  else
  {
    unint64_t v25 = a1;
    unint64_t v8 = *(void *)(v2 + 8);
    uint64_t v9 = JSONMap.loadValue(at:)(v8);
    if (v11 > 0xFDu)
    {
      if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == a2) {
        swift_bridgeObjectRelease();
      }
      uint64_t v12 = (void *)_CodingPathNode.path.getter(*(void *)(v2 + 72));
      uint64_t v13 = *(void *)(v2 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
      }
      unint64_t v15 = v12[2];
      unint64_t v14 = v12[3];
      if (v15 >= v14 >> 1) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v14 > 1),  v15 + 1,  1,  v12);
      }
      char v23 = &type metadata for _CodingKey;
      unint64_t v24 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v16 = swift_allocObject();
      *(void *)&__int128 v22 = v16;
      *(void *)(v16 + 24) = 0LL;
      *(void *)(v16 + 32) = 0LL;
      *(void *)(v16 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v13;
      *(_BYTE *)(v16 + 40) = 2;
      void v12[2] = v15 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v22, (uint64_t)&v12[5 * v15 + 4]);
      uint64_t v17 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v19 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v19 = v25;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(ValueMetadata **, void, uint64_t))(*(void *)(v17 - 8) + 104LL))( v19,  *MEMORY[0x189619368],  v17);
      swift_willThrow();
      return;
    }

    unint64_t v6 = v9;
    uint64_t v20 = v10;
    LOBYTE(v7) = v11;
    *(void *)(v2 + 8) = JSONMap.offset(after:)(v8);
    *(void *)(v2 + 24) = v6;
    *(void *)(v2 + 32) = v20;
    *(_BYTE *)(v2 + 40) = v7;
    uint64_t v5 = v25;
  }

  uint64_t v21 = *(void *)(v2 + 64);
  specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(v6, v20, v7, v5, *(void *)(v2 + 72), v21, 0LL, 0LL, 2, a2);
  if (!v3)
  {
    if (__OFADD__(v21, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v2 + 64) = v21 + 1;
      *(void *)(v2 + 24) = 0LL;
      *(void *)(v2 + 32) = 0LL;
      *(_BYTE *)(v2 + 40) = -2;
    }
  }

uint64_t JSONDecoderImpl.UnkeyedContainer.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = type metadata accessor for KeyedDecodingContainer();
  unsigned int v7 = (void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 24);
  unsigned int v9 = *(unsigned __int8 *)(v3 + 40);
  if (v9 < 0xFE)
  {
    uint64_t v69 = *(void *)(v3 + 32);
    goto LABEL_9;
  }

  uint64_t v10 = (void *)v6;
  unint64_t v11 = *(void *)(v3 + 8);
  uint64_t v12 = JSONMap.loadValue(at:)(v11);
  if (v14 <= 0xFDu)
  {
    uint64_t v8 = v12;
    LOBYTE(v9) = v14;
    uint64_t v23 = v13;
    *(void *)(v3 + 8) = JSONMap.offset(after:)(v11);
    *(void *)(v3 + 24) = v8;
    *(void *)(v3 + 32) = v23;
    uint64_t v69 = v23;
    *(_BYTE *)(v3 + 40) = v9;
LABEL_9:
    uint64_t v10 = *(void **)v3;
    uint64_t v25 = *(void *)(v3 + 64);
    unint64_t v24 = *(void *)(v3 + 72);
    uint64_t v26 = swift_allocObject();
    uint64_t v59 = v25;
    *(void *)(v26 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
    *(void *)(v26 + 24) = v24;
    if (v24 >> 62)
    {
      if (v24 >> 62 != 1)
      {
        uint64_t v29 = 1LL;
        goto LABEL_14;
      }

      unint64_t v27 = (uint64_t *)((v24 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      unint64_t v27 = (uint64_t *)(v24 + 64);
    }

    uint64_t v28 = *v27;
    swift_retain_n();
    uint64_t v29 = v28 + 1;
    if (__OFADD__(v28, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

uint64_t JSONDecoderImpl.UnkeyedContainer.nestedUnkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  unsigned int v7 = v1 + 3;
  unsigned int v8 = *((unsigned __int8 *)v1 + 40);
  if (v8 < 0xFE)
  {
    uint64_t v45 = v1[3];
    uint64_t v41 = v1[4];
  }

  else
  {
    uint64_t v9 = v6;
    unint64_t v10 = v1[1];
    uint64_t v11 = JSONMap.loadValue(at:)(v10);
    if (v13 > 0xFDu)
    {
      if (v9 == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder)) {
        swift_bridgeObjectRelease();
      }
      unint64_t v14 = _CodingPathNode.path.getter(v1[9]);
      uint64_t v15 = v1[8];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
        goto LABEL_6;
      }
      goto LABEL_35;
    }

    uint64_t v23 = v11;
    LOBYTE(v8) = v13;
    uint64_t v24 = v12;
    v1[1] = JSONMap.offset(after:)(v10);
    uint64_t v45 = v23;
    v1[3] = v23;
    v1[4] = v24;
    uint64_t v41 = v24;
    *((_BYTE *)v1 + 40) = v8;
  }

  uint64_t v25 = *v1;
  uint64_t v27 = v4[8];
  unint64_t v26 = v4[9];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v27;
  *(void *)(v9 + 24) = v26;
  if (v26 >> 62)
  {
    if (v26 >> 62 != 1)
    {
      uint64_t v30 = 1LL;
LABEL_16:
      BOOL v39 = a1;
      uint64_t v40 = v3;
      *(void *)(v9 + 32) = v30;
      swift_retain();
      swift_release();
      uint64_t v3 = *(void *)(v25 + 160);
      *(void *)(v25 + 160) = v9 | 0x4000000000000000LL;
      a1 = *(uint64_t **)(v25 + 16);
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
      uint64_t v38 = v27;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
        goto LABEL_17;
      }
      goto LABEL_31;
    }

    uint64_t v28 = (uint64_t *)((v26 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    uint64_t v28 = (uint64_t *)(v26 + 64);
  }

  uint64_t v29 = *v28;
  swift_retain_n();
  uint64_t v30 = v29 + 1;
  if (!__OFADD__(v29, 1LL)) {
    goto LABEL_16;
  }
  __break(1u);
LABEL_31:
  a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a1[2] + 1,  1,  a1);
  *(void *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
LABEL_17:
  unint64_t v14 = a1[2];
  unint64_t v32 = a1[3];
  if (v14 >= v32 >> 1) {
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v32 > 1),  v14 + 1,  1,  a1);
  }
  a1[2] = v14 + 1;
  unint64_t v33 = &a1[3 * v14];
  v33[4] = v45;
  v33[5] = v41;
  *((_BYTE *)v33 + 48) = v8;
  *(void *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
  swift_retain();
  JSONDecoderImpl.unkeyedContainer()(v39);
  uint64_t v15 = v40;
  if (!v40)
  {
    swift_release();
    *(void *)(v25 + 160) = v3;
    swift_retain();
    swift_release();
    uint64_t v36 = *(void **)(v25 + 16);
    if (v36[2])
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        uint64_t v37 = v36[2];
        if (v37) {
          goto LABEL_27;
        }
        goto LABEL_38;
      }
    }

    else
    {
      __break(1u);
    }

    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v36);
    uint64_t v36 = (void *)result;
    uint64_t v37 = *(void *)(result + 16);
    if (v37)
    {
LABEL_27:
      v36[2] = v37 - 1;
      *(void *)(v25 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v36;
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      if (!__OFADD__(v38, 1LL))
      {
        v4[8] = v38 + 1;
        *unsigned int v7 = 0LL;
        v7[1] = 0LL;
        *((_BYTE *)v4 + 40) = -2;
        return result;
      }

      goto LABEL_39;
    }

uint64_t specialized JSONDecoderImpl.UnkeyedContainer.decoderForNextElement<A>(ofType:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v17 = *(void *)(v0 + 24);
    uint64_t v18 = *(void *)(v0 + 32);
    goto LABEL_10;
  }

  uint64_t v4 = v2;
  unint64_t v5 = *(void *)(v0 + 8);
  uint64_t v6 = JSONMap.loadValue(at:)(v5);
  if (v8 <= 0xFDu)
  {
    uint64_t v17 = v6;
    uint64_t v18 = v7;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v8;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v5);
    *(void *)(v0 + 24) = v17;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
LABEL_10:
    uint64_t v19 = *(void *)v0;
    uint64_t v46 = *(void *)(*(void *)v0 + 24LL);
    uint64_t v47 = *(void *)(*(void *)v0 + 32LL);
    unint64_t v21 = *(void *)(v0 + 64);
    unint64_t v20 = *(void *)(v1 + 72);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
    *(void *)(v22 + 24) = v20;
    if (v20 >> 62)
    {
      if (v20 >> 62 != 1)
      {
        unint64_t v26 = 1LL;
        goto LABEL_15;
      }

      uint64_t v23 = (int64_t *)((v20 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v23 = (int64_t *)(v20 + 64);
    }

    int64_t v24 = *v23;
    swift_retain();
    unint64_t v26 = v24 + 1;
    if (__OFADD__(v24, 1LL))
    {
      __break(1u);
      goto LABEL_20;
    }

uint64_t protocol witness for UnkeyedDecodingContainer.codingPath.getter in conformance JSONDecoderImpl.UnkeyedContainer()
{
  return _CodingPathNode.path.getter(*(void *)(v0 + 72));
}

uint64_t protocol witness for UnkeyedDecodingContainer.count.getter in conformance JSONDecoderImpl.UnkeyedContainer()
{
  return *(void *)(v0 + 48);
}

BOOL protocol witness for UnkeyedDecodingContainer.isAtEnd.getter in conformance JSONDecoderImpl.UnkeyedContainer()
{
  if ((*(_BYTE *)(v0 + 56) & 1) == 0) {
    return *(void *)(v0 + 64) >= *(void *)(v0 + 48);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.currentIndex.getter in conformance JSONDecoderImpl.UnkeyedContainer()
{
  return *(void *)(v0 + 64);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeNil() in conformance JSONDecoderImpl.UnkeyedContainer()
{
  return v0 & 1;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance JSONDecoderImpl.UnkeyedContainer()
{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)() & 1;
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

void protocol witness for UnkeyedDecodingContainer.decode<A>(_:) in conformance JSONDecoderImpl.UnkeyedContainer( ValueMetadata *a1, uint64_t a2)
{
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:) in conformance JSONDecoderImpl.UnkeyedContainer( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JSONDecoderImpl.UnkeyedContainer.nestedContainer<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedUnkeyedContainer() in conformance JSONDecoderImpl.UnkeyedContainer@<X0>( uint64_t *a1@<X8>)
{
  return JSONDecoderImpl.UnkeyedContainer.nestedUnkeyedContainer()(a1);
}

uint64_t protocol witness for UnkeyedDecodingContainer.superDecoder() in conformance JSONDecoderImpl.UnkeyedContainer@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = specialized JSONDecoderImpl.UnkeyedContainer.decoderForNextElement<A>(ofType:)();
  if (!v2)
  {
    uint64_t v5 = *(void *)(v1 + 64);
    BOOL v6 = __OFADD__(v5, 1LL);
    uint64_t v7 = v5 + 1;
    if (v6)
    {
      __break(1u);
    }

    else
    {
      uint64_t v8 = result;
      *(void *)(v1 + 64) = v7;
      *(void *)(v1 + 24) = 0LL;
      *(void *)(v1 + 32) = 0LL;
      *(_BYTE *)(v1 + 40) = -2;
      a1[3] = type metadata accessor for JSONDecoderImpl();
      uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl,  (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl,  (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
      a1[4] = result;
      *a1 = v8;
    }
  }

  return result;
}

unint64_t specialized Float.init<A>(exactly:)(unint64_t result)
{
  float v1 = (float)result;
  if ((float)result >= 1.8447e19)
  {
    uint64_t v2 = 0LL;
    BOOL v3 = 1;
    return v2 | ((unint64_t)v3 << 32);
  }

  uint64_t v2 = LODWORD(v1);
  if ((~LODWORD(v1) & 0x7F800000) != 0)
  {
    BOOL v3 = (unint64_t)v1 != result;
    return v2 | ((unint64_t)v3 << 32);
  }

  __break(1u);
  return result;
}

uint64_t specialized Float.init<A>(exactly:)(uint64_t result)
{
  float v1 = (float)result;
  if ((float)result >= 9.2234e18)
  {
    uint64_t v2 = 0LL;
    BOOL v3 = 1;
    return v2 | ((unint64_t)v3 << 32);
  }

  uint64_t v2 = LODWORD(v1);
  if ((~LODWORD(v1) & 0x7F800000) != 0)
  {
    if (v1 > -9.2234e18)
    {
      BOOL v3 = (uint64_t)v1 != result;
      return v2 | ((unint64_t)v3 << 32);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

BOOL specialized static FixedWidthInteger._convert<A>(from:)(uint64_t a1, double a2)
{
  uint64_t v4 = (*(void *)&a2 >> 52) & 0x7FFLL;
  unint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = v4 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    uint64_t v12 = 0LL;
    BOOL result = 1LL;
    goto LABEL_25;
  }

  if (v4 == 2047) {
    goto LABEL_28;
  }
  uint64_t v7 = Double.exponent.getter();
  if (v7 > 63) {
    goto LABEL_28;
  }
  uint64_t v8 = v7;
  uint64_t v9 = Double.significandWidth.getter();
  BOOL result = v8 >= v9;
  uint64_t v11 = v9 + __clz(__rbit64(v5));
  uint64_t v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
LABEL_27:
    if (a2 < 0.0)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      uint64_t v12 = 0x8000000000000000LL;
      goto LABEL_25;
    }

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v3 = (*(void *)&a2 >> 52) & 0x7FFLL;
  uint64_t v4 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  unint64_t v5 = v3 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (v5)
  {
    BOOL result = 0LL;
    unint64_t v5 = 0LL;
    uint64_t v7 = 1;
    if (v3 != 2047 && a2 > -1.0)
    {
      uint64_t v8 = Double.exponent.getter();
      if (v8 <= 63)
      {
        uint64_t v9 = v8;
        uint64_t v10 = Double.significandWidth.getter();
        uint64_t v11 = v10 + __clz(__rbit64(v4));
        uint64_t v12 = v9 - v11;
        if (__OFSUB__(v9, v11))
        {
          __break(1u);
        }

        else
        {
          if (v11 > 63)
          {
            if (v12 < -64 || v12 > 64) {
              goto LABEL_12;
            }
          }

          else if (v12 < -64 || v12 > 64)
          {
            goto LABEL_12;
          }

          if ((v12 & 0x8000000000000000LL) == 0)
          {
            if ((unint64_t)v12 < 0x40)
            {
              uint64_t v13 = v4 << v12;
              if (v9 < 0)
              {
LABEL_17:
                unint64_t v14 = 0LL;
                goto LABEL_24;
              }

{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  BOOL result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v3 = LODWORD(a2);
  uint64_t v4 = (*(void *)&a2 >> 52) & 0x7FFLL;
  unint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = v4 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    uint64_t v7 = 0;
    BOOL result = 1LL;
    goto LABEL_25;
  }

  LOWORD(v6) = 0;
  uint64_t v7 = 1;
  if (v4 == 2047)
  {
    BOOL result = 0LL;
  }

  else
  {
    BOOL result = 0LL;
    if (a2 > -1.0)
    {
      uint64_t v9 = Double.exponent.getter();
      if (v9 > 15)
      {
        LOWORD(v6) = 0;
        BOOL result = 0LL;
        uint64_t v7 = 1;
        goto LABEL_25;
      }

      uint64_t v10 = v9;
      uint64_t v11 = Double.significandWidth.getter();
      uint64_t v12 = v11 + __clz(__rbit64(v5));
      uint64_t v6 = v10 - v12;
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
      }

      else
      {
        if (v12 <= 15)
        {
          if (v6 < -16 || v6 > 16)
          {
LABEL_9:
            LOWORD(v6) = 0;
            LOWORD(v13) = 0;
            if ((v10 & 0x8000000000000000LL) == 0) {
              goto LABEL_23;
            }
            goto LABEL_24;
          }

          if (v6 < 0)
          {
            LODWORD(v6) = (unsigned __int16)v3 >> (v12 - v10);
          }

          else
          {
            LODWORD(v6) = v3 << v6;
          }

{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v4 = LODWORD(a2);
  unint64_t v5 = (*(void *)&a2 >> 52) & 0x7FFLL;
  uint64_t v6 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v7 = v5 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v7)
  {
    LOWORD(v15) = 0;
    BOOL result = 1LL;
    goto LABEL_29;
  }

  if (v5 == 2047 || (uint64_t v8 = Double.exponent.getter(), v8 > 15))
  {
LABEL_38:
    LOWORD(v15) = 0;
    BOOL result = 0LL;
    LOBYTE(v7) = 1;
    goto LABEL_29;
  }

  uint64_t v9 = v8;
  uint64_t v10 = Double.significandWidth.getter();
  BOOL result = v9 >= v10;
  uint64_t v12 = v10 + __clz(__rbit64(v6));
  uint64_t v13 = v9 - v12;
  if (__OFSUB__(v9, v12))
  {
    __break(1u);
    goto LABEL_31;
  }

  if (v12 > 15)
  {
    if ((unint64_t)(v13 - 65) >= 0xFFFFFFFFFFFFFF7FLL)
    {
      if (v13 < 0)
      {
        else {
          uint64_t v13 = v6 >> (v12 - v9);
        }
      }

      else if ((unint64_t)v13 >= 0x40)
      {
        LOWORD(v13) = 0;
      }

      else
      {
        uint64_t v13 = v6 << v13;
      }
    }

    else
    {
      LOWORD(v13) = 0;
    }

{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v4 = LODWORD(a2);
  unint64_t v5 = (*(void *)&a2 >> 52) & 0x7FFLL;
  uint64_t v6 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v7 = v5 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v7)
  {
    uint64_t v15 = 0;
    BOOL result = 1LL;
    goto LABEL_29;
  }

  if (v5 == 2047 || (uint64_t v8 = Double.exponent.getter(), v8 > 31))
  {
LABEL_38:
    uint64_t v15 = 0;
    BOOL result = 0LL;
    LOBYTE(v7) = 1;
    goto LABEL_29;
  }

  uint64_t v9 = v8;
  uint64_t v10 = Double.significandWidth.getter();
  BOOL result = v9 >= v10;
  uint64_t v12 = v10 + __clz(__rbit64(v6));
  uint64_t v13 = v9 - v12;
  if (__OFSUB__(v9, v12))
  {
    __break(1u);
    goto LABEL_31;
  }

  if (v12 > 31)
  {
    if ((unint64_t)(v13 - 65) >= 0xFFFFFFFFFFFFFF7FLL)
    {
      if (v13 < 0)
      {
        else {
          uint64_t v13 = v6 >> (v12 - v9);
        }
      }

      else if ((unint64_t)v13 >= 0x40)
      {
        LODWORD(v13) = 0;
      }

      else
      {
        uint64_t v13 = v6 << v13;
      }
    }

    else
    {
      LODWORD(v13) = 0;
    }

{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  BOOL result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v3 = LODWORD(a2);
  uint64_t v4 = (*(void *)&a2 >> 52) & 0x7FFLL;
  unint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = v4 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    uint64_t v7 = 0;
    BOOL result = 1LL;
    goto LABEL_25;
  }

  LODWORD(v6) = 0;
  uint64_t v7 = 1;
  if (v4 == 2047)
  {
    BOOL result = 0LL;
  }

  else
  {
    BOOL result = 0LL;
    if (a2 > -1.0)
    {
      uint64_t v9 = Double.exponent.getter();
      if (v9 > 31)
      {
        LODWORD(v6) = 0;
        BOOL result = 0LL;
        uint64_t v7 = 1;
        goto LABEL_25;
      }

      uint64_t v10 = v9;
      uint64_t v11 = Double.significandWidth.getter();
      uint64_t v12 = v11 + __clz(__rbit64(v5));
      uint64_t v6 = v10 - v12;
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
      }

      else
      {
        if (v12 <= 31)
        {
          if (v6 < -32 || v6 > 32)
          {
LABEL_9:
            LODWORD(v6) = 0;
            uint64_t v13 = 0;
            if ((v10 & 0x8000000000000000LL) == 0) {
              goto LABEL_23;
            }
            goto LABEL_24;
          }

          if (v6 < 0)
          {
            LODWORD(v6) = v3 >> (v12 - v10);
          }

          else
          {
            LODWORD(v6) = v3 << v6;
          }

BOOL specialized static FixedWidthInteger._convert<A>(from:)(_BYTE *a1, double a2)
{
  int v3 = LODWORD(a2);
  uint64_t v4 = (*(void *)&a2 >> 52) & 0x7FFLL;
  unint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = v4 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    char v7 = 0;
    BOOL result = 1LL;
    goto LABEL_25;
  }

  LOBYTE(v6) = 0;
  char v7 = 1;
  if (v4 == 2047)
  {
    BOOL result = 0LL;
  }

  else
  {
    BOOL result = 0LL;
    if (a2 > -1.0)
    {
      uint64_t v9 = Double.exponent.getter();
      if (v9 > 7)
      {
        LOBYTE(v6) = 0;
        BOOL result = 0LL;
        char v7 = 1;
        goto LABEL_25;
      }

      uint64_t v10 = v9;
      uint64_t v11 = Double.significandWidth.getter();
      uint64_t v12 = v11 + __clz(__rbit64(v5));
      uint64_t v6 = v10 - v12;
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
      }

      else
      {
        if (v12 <= 7)
        {
          if (v6 < -8 || v6 > 8)
          {
LABEL_9:
            LOBYTE(v6) = 0;
            LOBYTE(v13) = 0;
            if ((v10 & 0x8000000000000000LL) == 0) {
              goto LABEL_23;
            }
            goto LABEL_24;
          }

          if (v6 < 0)
          {
            LODWORD(v6) = v3 >> (v12 - v10);
          }

          else
          {
            LODWORD(v6) = v3 << v6;
          }

{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v4 = LODWORD(a2);
  unint64_t v5 = (*(void *)&a2 >> 52) & 0x7FFLL;
  uint64_t v6 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  char v7 = v5 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v7)
  {
    LOBYTE(v15) = 0;
    BOOL result = 1LL;
    goto LABEL_29;
  }

  if (v5 == 2047 || (uint64_t v8 = Double.exponent.getter(), v8 > 7))
  {
LABEL_38:
    LOBYTE(v15) = 0;
    BOOL result = 0LL;
    LOBYTE(v7) = 1;
    goto LABEL_29;
  }

  uint64_t v9 = v8;
  uint64_t v10 = Double.significandWidth.getter();
  BOOL result = v9 >= v10;
  uint64_t v12 = v10 + __clz(__rbit64(v6));
  int v13 = v9 - v12;
  if (__OFSUB__(v9, v12))
  {
    __break(1u);
    goto LABEL_31;
  }

  if (v12 > 7)
  {
    if ((unint64_t)(v13 - 65) >= 0xFFFFFFFFFFFFFF7FLL)
    {
      if (v13 < 0)
      {
        else {
          int v13 = v6 >> (v12 - v9);
        }
      }

      else if ((unint64_t)v13 >= 0x40)
      {
        LOBYTE(v13) = 0;
      }

      else
      {
        int v13 = v6 << v13;
      }
    }

    else
    {
      LOBYTE(v13) = 0;
    }

void partial apply for closure #1 in JSONDecoder.decode<A>(_:from:)( uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 a4)
{
}

uint64_t partial apply for closure #1 in JSONDecoder._decode<A>(_:from:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in JSONDecoder._decode<A>(_:from:)( a1,  a2,  *(void *)(v2 + 24),  *(void (**)(uint64_t))(v2 + 32));
}

uint64_t partial apply for closure #1 in JSONDecoder.decode<A>(_:from:configuration:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  return specialized JSONDecoderImpl.unwrap<A, B>(_:as:configuration:for:_:)( a1,  a2,  a3,  v4[4],  v4[5],  0x8000000000000000LL,  0LL,  0LL,  a4,  0LL,  0xFFu,  v4[2],  v6);
}

double sub_18342682C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(__int128 *__return_ptr))(**(void **)a1 + 104LL))(&v5);
  char v3 = v6;
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_BYTE *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  return result;
}

uint64_t sub_183426874(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *a2;
  char v4 = *(_BYTE *)(a1 + 16);
  v7[0] = *(id *)a1;
  v7[1] = v2;
  char v8 = v4;
  __int128 v5 = *(uint64_t (**)(id *))(*(void *)v3 + 112LL);
  outlined copy of JSONEncoder.DateEncodingStrategy(v7[0], (uint64_t)v2, v4);
  return v5(v7);
}

double sub_1834268C4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(__int128 *__return_ptr))(**(void **)a1 + 128LL))(&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_183426904(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a2;
  v6[0] = *a1;
  v6[1] = v2;
  __int128 v4 = *(uint64_t (**)(unint64_t *))(*(void *)v3 + 136LL);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v6[0]);
  return v4(v6);
}

double sub_18342694C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)a1 + 152LL))(v5);
  __int128 v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  double result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

double sub_183426998@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(__int128 *__return_ptr))(**(void **)a1 + 176LL))(&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_1834269D8(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a2;
  v6[0] = *a1;
  v6[1] = v2;
  __int128 v4 = *(uint64_t (**)(unint64_t *))(*(void *)v3 + 184LL);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v6[0]);
  return v4(v6);
}

uint64_t sub_183426A20@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200LL))();
  *a2 = result;
  return result;
}

uint64_t sub_183426A50(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 208LL);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_183426A80@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_183426AB4(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 232LL))(*a1);
}

uint64_t sub_183426AE0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_183426B14(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 256LL))(*a1);
}

uint64_t ObjC metadata update function for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t type metadata accessor for JSONDecoder()
{
  uint64_t result = type metadata singleton initialization cache for JSONDecoder;
  if (!type metadata singleton initialization cache for JSONDecoder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for JSONDecoder()
{
  uint64_t result = type metadata accessor for CodingUserInfoKey();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for JSONDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of JSONDecoder.dateDecodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of JSONDecoder.dateDecodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of JSONDecoder.dateDecodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of JSONDecoder.dataDecodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of JSONDecoder.dataDecodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of JSONDecoder.dataDecodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of JSONDecoder.nonConformingFloatDecodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of JSONDecoder.nonConformingFloatDecodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t dispatch thunk of JSONDecoder.nonConformingFloatDecodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t dispatch thunk of JSONDecoder.keyDecodingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t dispatch thunk of JSONDecoder.keyDecodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184LL))();
}

uint64_t dispatch thunk of JSONDecoder.keyDecodingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

uint64_t dispatch thunk of JSONDecoder.userInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t dispatch thunk of JSONDecoder.userInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t dispatch thunk of JSONDecoder.userInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t dispatch thunk of JSONDecoder.allowsJSON5.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

uint64_t dispatch thunk of JSONDecoder.allowsJSON5.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232LL))();
}

uint64_t dispatch thunk of JSONDecoder.allowsJSON5.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240LL))();
}

uint64_t dispatch thunk of JSONDecoder.assumesTopLevelDictionary.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248LL))();
}

uint64_t dispatch thunk of JSONDecoder.assumesTopLevelDictionary.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256LL))();
}

uint64_t dispatch thunk of JSONDecoder.assumesTopLevelDictionary.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264LL))();
}

uint64_t dispatch thunk of JSONDecoder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320LL))();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328LL))();
}

uint64_t dispatch thunk of JSONDecoder.decode<A, B>(_:from:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336LL))();
}

uint64_t initializeBufferWithCopyOfBuffer for JSONDecoder.DateDecodingStrategy(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of JSONEncoder.DateEncodingStrategy(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for JSONDecoder.DateDecodingStrategy(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of JSONEncoder.DateEncodingStrategy(*(id *)a2, v4, v5);
  __int128 v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for JSONDecoder.DateDecodingStrategy(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  outlined consume of JSONEncoder.DateEncodingStrategy(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for JSONDecoder.DateDecodingStrategy()
{
  return &type metadata for JSONDecoder.DateDecodingStrategy;
}

ValueMetadata *type metadata accessor for JSONDecoder.DataDecodingStrategy()
{
  return &type metadata for JSONDecoder.DataDecodingStrategy;
}

ValueMetadata *type metadata accessor for JSONDecoder.NonConformingFloatDecodingStrategy()
{
  return &type metadata for JSONDecoder.NonConformingFloatDecodingStrategy;
}

ValueMetadata *type metadata accessor for JSONDecoder.KeyDecodingStrategy()
{
  return &type metadata for JSONDecoder.KeyDecodingStrategy;
}

uint64_t type metadata accessor for JSONDecoderImpl()
{
  return objc_opt_self();
}

uint64_t destroy for JSONDecoder._Options(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 2uLL) {
    swift_release();
  }
  if (*(void *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (*(void *)(a1 + 88) >= 2uLL) {
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for JSONDecoder._Options(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(_BYTE *)(a2 + 16);
  outlined copy of JSONEncoder.DateEncodingStrategy(*(id *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  unint64_t v7 = *(void *)(a2 + 24);
  if (v7 >= 2)
  {
    uint64_t v11 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v11;
    swift_retain();
    uint64_t v8 = *(void *)(a2 + 48);
    if (v8) {
      goto LABEL_3;
    }
  }

  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    uint64_t v8 = *(void *)(a2 + 48);
    if (v8)
    {
LABEL_3:
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v8;
      uint64_t v9 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v9;
      uint64_t v10 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }

  __int128 v12 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v12;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_6:
  unint64_t v13 = *(void *)(a2 + 88);
  if (v13 >= 2)
  {
    uint64_t v14 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = v13;
    *(void *)(a1 + 96) = v14;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  }

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JSONDecoder._Options(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(_BYTE *)(a2 + 16);
  outlined copy of JSONEncoder.DateEncodingStrategy(*(id *)a2, v5, v6);
  unint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  char v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  outlined consume of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
  unint64_t v10 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) < 2uLL)
  {
    if (v10 >= 2)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 32) = v11;
      swift_retain();
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v10 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }

  uint64_t v12 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v12;
  swift_retain();
  swift_release();
LABEL_8:
  unint64_t v13 = (_OWORD *)(a1 + 40);
  uint64_t v14 = (_OWORD *)(a2 + 40);
  uint64_t v15 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v15)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Any?( a1 + 40,  &demangling cache variable for type metadata for (positiveInfinity: String, negativeInfinity: String, nan: String));
      __int128 v17 = *(_OWORD *)(a2 + 56);
      __int128 v16 = *(_OWORD *)(a2 + 72);
      *unint64_t v13 = *v14;
      *(_OWORD *)(a1 + 56) = v17;
      *(_OWORD *)(a1 + 72) = v16;
    }
  }

  else if (v15)
  {
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v18 = *v14;
    __int128 v19 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v19;
    *unint64_t v13 = v18;
  }

  unint64_t v20 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) >= 2uLL)
  {
    if (v20 >= 2)
    {
      uint64_t v22 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = v20;
      *(void *)(a1 + 96) = v22;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }

    swift_release();
    goto LABEL_20;
  }

  if (v20 < 2)
  {
LABEL_20:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    goto LABEL_22;
  }

  uint64_t v21 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v20;
  *(void *)(a1 + 96) = v21;
  swift_retain();
LABEL_22:
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for JSONDecoder._Options(uint64_t a1, uint64_t a2)
{
  char v4 = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  outlined consume of JSONEncoder.DateEncodingStrategy(v5, v6, v7);
  unint64_t v8 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) < 2uLL)
  {
    if (v8 >= 2)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = v9;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v8 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v10;
  swift_release();
LABEL_8:
  if (*(void *)(a1 + 48))
  {
    uint64_t v11 = *(void *)(a2 + 48);
    if (v11)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v12;
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v13;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }

    outlined destroy of Any?( a1 + 40,  &demangling cache variable for type metadata for (positiveInfinity: String, negativeInfinity: String, nan: String));
  }

  __int128 v14 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v14;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_13:
  unint64_t v15 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) >= 2uLL)
  {
    if (v15 >= 2)
    {
      uint64_t v17 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = v15;
      *(void *)(a1 + 96) = v17;
      swift_release();
      goto LABEL_20;
    }

    swift_release();
    goto LABEL_18;
  }

  if (v15 < 2)
  {
LABEL_18:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    goto LABEL_20;
  }

  uint64_t v16 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
LABEL_20:
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONDecoder._Options(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 113)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 104);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONDecoder._Options(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 113) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 104) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 113) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void *type metadata accessor for JSONDecoder._Options()
{
  return &unk_189C8F760;
}

unint64_t lazy protocol witness table accessor for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer;
  if (!lazy protocol witness table cache variable for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for JSONDecoderImpl.UnkeyedContainer, &unk_189C8F8C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer);
  }

  return result;
}

uint64_t sub_1834274F0()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for JSONDecoderImpl.KeyedContainer( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for JSONDecoderImpl.KeyedContainer);
}

uint64_t sub_183427534()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)( a1,  a2,  a3,  a4,  *(_BYTE *)(v5 + 16),  *(_BYTE *)(v5 + 17),  a5);
}

void *specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)@<X0>( void *result@<X0>, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = a2(&v11, *result + a3, a4);
    if (!v5)
    {
      char v10 = v12;
      *(void *)a5 = v11;
      *(_BYTE *)(a5 + 8) = v10;
    }
  }

  return result;
}

{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = a2(&v11, *result + a3, a4);
    if (!v5)
    {
      char v10 = BYTE4(v11);
      *(_DWORD *)a5 = v11;
      *(_BYTE *)(a5 + 4) = v10;
    }
  }

  return result;
}

void *specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)@<X0>( void *result@<X0>, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _DWORD *a5@<X8>)
{
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = a2(&v10, *result + a3, a4);
    if (!v5) {
      *a5 = v10;
    }
  }

  return result;
}

{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = a2(&v10, *result + a3, a4);
    if (!v5) {
      *a5 = v10;
    }
  }

  return result;
}

void *specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)@<X0>( void *result@<X0>, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _WORD *a5@<X8>)
{
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = a2(&v10, *result + a3, a4);
    if (!v5) {
      *a5 = v10;
    }
  }

  return result;
}

uint64_t specialized Int128.init<A>(exactly:)(double a1)
{
  double v2 = fabs(a1);
  if (v2 >= 1.84467441e19)
  {
    double v4 = floor(a1 * 5.42101086e-20);
    if (specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v5, v4)
      && v6 != 1
      && specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v5, a1 + v4 * -1.84467441e19)
      && v6 != 1)
    {
      return v5;
    }

    return 0LL;
  }

  if (a1 < 0.0) {
    return -v5;
  }
  else {
    return v5;
  }
}

uint64_t specialized UInt128.init<A>(exactly:)(double a1)
{
  double v2 = trunc(a1 * 5.42101086e-20);
  double v3 = v2 * 1.84467441e19;
  if (!v5) {
    double v3 = 0.0;
  }
  else {
    return 0LL;
  }
}

void specialized JSONDecoderImpl.decode(_:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 24 * v2;
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 16);
    unint64_t v6 = *(void *)(v0 + 160);
    unsigned __int8 v7 = *(_BYTE *)(v3 + 24);
    swift_retain();
    specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v4, v5, v7, v6, 0LL, 0LL, 0LL, 255);
    swift_release();
  }

  else
  {
    __break(1u);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    if ((*(_BYTE *)(v1 + 24 * v2 + 24) & 0xE0) == 0x40) {
      return;
    }
    uint64_t v3 = *(void *)(v0 + 160);
    swift_retain();
    _CodingPathNode.path.getter(v3);
    swift_release();
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      unint64_t v6 = *(_BYTE *)(v4 + 24 * v5 + 24);
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1896184C8], v6, v7);
      swift_bridgeObjectRelease();
      swift_willThrow();
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t specialized JSONDecoderImpl.decode(_:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 24 * v2;
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 16);
    unint64_t v6 = *(void *)(v0 + 160);
    unsigned __int8 v7 = *(_BYTE *)(v3 + 24);
    swift_retain();
    specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v4, v5, v7, v6, 0LL, 0LL, 0LL, 255);
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  uint64_t result;
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 24 * v2;
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 16);
    unint64_t v6 = *(void *)(v0 + 160);
    unsigned __int8 v7 = *(_BYTE *)(v3 + 24);
    swift_retain();
    specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v4, v5, v7, v6, 0LL, 0LL, 0LL, 255);
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x18961A610];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( v2,  v18,  v3,  *(void *)(v0 + 72),  v19,  0LL,  0LL,  2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x189617FA8];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v2, v18, v3, *(void *)(v0 + 72), v19, 0LL, 0LL, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x189618740];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( v2,  v18,  v3,  *(void *)(v0 + 72),  v19,  0LL,  0LL,  2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x18961A800];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( v2,  v18,  v3,  *(void *)(v0 + 72),  v19,  0LL,  0LL,  2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  void *v22;
  __int128 v24;
  ValueMetadata *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v2 = v0;
  uint64_t v27 = *MEMORY[0x1895F89C0];
  unsigned int v3 = *(void *)(v0 + 24);
  unint64_t v4 = *(unsigned __int8 *)(v0 + 40);
  if (v4 < 0xFE)
  {
    uint64_t v8 = *(void *)(v0 + 32);
  }

  else
  {
    uint64_t v1 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v1);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v1 = MEMORY[0x1896184C8];
      unint64_t v4 = _CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v8 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_4:
        uint64_t v10 = *(void *)(v4 + 16);
        BOOL v9 = *(void *)(v4 + 24);
        if (v10 >= v9 >> 1) {
          unint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v9 > 1),  v10 + 1,  1,  (void *)v4);
        }
        uint64_t v25 = &type metadata for _CodingKey;
        unint64_t v26 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        unint64_t v11 = swift_allocObject();
        *(void *)&int64_t v24 = v11;
        *(void *)(v11 + 24) = 0LL;
        *(void *)(v11 + 32) = 0LL;
        *(void *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v8;
        *(_BYTE *)(v11 + 40) = 2;
        *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10 + 1;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v24, v4 + 40 * v10 + 32);
        unint64_t v12 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v14 = v13;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v14 = v1;
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104LL))( v14,  *MEMORY[0x189619368],  v12);
        goto LABEL_13;
      }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x189618560];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( v2,  v18,  v3,  *(void *)(v0 + 72),  v19,  0LL,  0LL,  2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x189618620];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( v2,  v18,  v3,  *(void *)(v0 + 72),  v19,  0LL,  0LL,  2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x18961A350];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( v2,  v18,  v3,  *(void *)(v0 + 72),  v19,  0LL,  0LL,  2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x18961A408];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( v2,  v18,  v3,  *(void *)(v0 + 72),  v19,  0LL,  0LL,  2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x18961A458];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( v2,  v18,  v3,  *(void *)(v0 + 72),  v19,  0LL,  0LL,  2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x18961A4C0];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( v2,  v18,  v3,  *(void *)(v0 + 72),  v19,  0LL,  0LL,  2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x18961A6E0];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( v2,  v18,  v3,  *(void *)(v0 + 72),  v19,  0LL,  0LL,  2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x189618CD8];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( v2,  v18,  v3,  *(void *)(v0 + 72),  v19,  0LL,  0LL,  2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x18961A860];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( v2,  v18,  v3,  *(void *)(v0 + 72),  v19,  0LL,  0LL,  2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x18961A8C8];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( v2,  v18,  v3,  *(void *)(v0 + 72),  v19,  0LL,  0LL,  2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    uint64_t v18 = *(void *)(v0 + 32);
  }

  else
  {
    unint64_t v4 = *(void *)(v0 + 8);
    uint64_t v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      uint64_t v8 = MEMORY[0x18961A9B8];
      BOOL v9 = (void *)_CodingPathNode.path.getter(*(void *)(v0 + 72));
      uint64_t v10 = *(void *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1) {
        BOOL v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v9);
      }
      uint64_t v21 = &type metadata for _CodingKey;
      unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v13 = swift_allocObject();
      *(void *)&__int128 v20 = v13;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      id v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
      return swift_willThrow();
    }

    uint64_t v2 = v5;
    uint64_t v18 = v6;
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v7;
    *(void *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }

  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( v2,  v18,  v3,  *(void *)(v0 + 72),  v19,  0LL,  0LL,  2);
  if (!v1)
  {
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v0 + 64) = v19 + 1;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = 0LL;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }

  return result;
}

uint64_t sub_183428584()
{
  return swift_deallocObject();
}

unint64_t partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)@<X0>( void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  return partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( a1,  a2,  a3);
}

{
  uint64_t *v3;
  uint64_t v4;
  unint64_t result;
  char v7;
  uint64_t result = specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( a1,  a2,  v3[2],  v3[3],  v3[4],  v3[5],  v3[6],  v3[7]);
  if (!v4)
  {
    *(void *)a3 = result;
    *(_BYTE *)(a3 + 8) = v7 & 1;
  }

  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  unint64_t result;
  char v7;
  uint64_t result = specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( a1,  a2,  v3[4],  v3[5],  v3[6],  v3[7],  v3[8],  v3[9]);
  if (!v4)
  {
    *(void *)a3 = result;
    *(_BYTE *)(a3 + 8) = v7 & 1;
  }

  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  unint64_t result;
  uint64_t result = specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( a1,  a2,  v3[2],  v3[3],  v3[4],  v3[5],  v3[6],  v3[7]);
  if (!v4)
  {
    *(_DWORD *)a3 = result;
    *(_BYTE *)(a3 + 4) = BYTE4(result) & 1;
  }

  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:),  a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:),  a5);
}

BOOL specialized static JSONDecoderImpl.isTrueZero(_:)(unsigned __int8 *a1, uint64_t a2)
{
  if (a2 >= 4)
  {
    do
    {
      int v5 = *a1;
      if ((v5 | 0x20) == 0x65) {
        return 1LL;
      }
      int v6 = a1[1];
      if ((v6 | 0x20) == 0x65) {
        return 1LL;
      }
      int v7 = a1[2];
      if ((v7 | 0x20) == 0x65) {
        return 1LL;
      }
      int v8 = a1[3];
      if ((v8 | 0x20) == 0x65) {
        return 1LL;
      }
      a1 += 4;
      a2 -= 4LL;
    }

    while (a2 > 3);
  }

  if (a2 != 1)
  {
    if (a2 == 2) {
      goto LABEL_7;
    }
    if (a2 == 3)
    {
      int v2 = a1[2];
      if ((v2 | 0x20) != 0x65)
      {
LABEL_7:
        int v3 = a1[1];
        if ((v3 - 58) <= 0xFFFFFFF6)
        {
          if ((v3 | 0x20) == 0x65) {
            return 1LL;
          }
          return *a1 - 58 < 0xFFFFFFF7;
        }

        return 0LL;
      }
    }

    return 1LL;
  }

  return *a1 - 58 < 0xFFFFFFF7;
}

double specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  unint64_t v8 = v6;
  uint64_t v11 = a2;
  unint64_t v12 = a1;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_291:
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
      goto LABEL_300;
    }

    char v25 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
    unint64_t v222 = a3;
    if (v25 == 48)
    {
      if (v11 >= 1) {
        uint64_t v26 = 1LL;
      }
      else {
        uint64_t v26 = v11;
      }
      unint64_t v27 = v12 + v26;
      if (!specialized Collection.isEmpty.getter(v12 + v26, v11 - v26))
      {
        unsigned __int8 v28 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v27);
        unsigned int v29 = v28;
        BOOL v30 = v28 - 46 > 0x37 || ((1LL << (v28 - 46)) & 0x80000000800001LL) == 0;
        uint64_t v31 = v12;
        if (v30)
        {
          unsigned __int8 v32 = v28;
          __int16 v33 = _asciiNumbers.getter();
          unint64_t v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, v222, a4);
          uint64_t v36 = v35;
          uint64_t v38 = v37;
          if (v29 < v33 || HIBYTE(v33) < v32)
          {
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v39 = xmmword_1837301C0;
            *(void *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v32;
            *(void *)(v39 + 24) = v34;
            *(void *)(v39 + 32) = v36;
            *(void *)(v39 + 40) = v38;
            goto LABEL_247;
          }

          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v39 = v34;
          *(void *)(v39 + 8) = v36;
          *(void *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v38;
LABEL_110:
          *(void *)(v39 + 24) = 0LL;
          *(void *)(v39 + 32) = 0LL;
          *(void *)(v39 + 40) = 0LL;
          char v104 = 10;
          goto LABEL_248;
        }

        goto LABEL_46;
      }
    }

    else if ((v25 - 58) < 0xF7u)
    {
      if (v25 != 45)
      {
LABEL_300:
        __break(1u);
        goto LABEL_301;
      }

      if (v11 < 2)
      {
        unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        uint64_t v95 = v94;
        uint64_t v97 = v96;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v39 = 0xD000000000000010LL;
        *(void *)(v39 + 8) = 0x80000001839CB4F0LL;
        *(void *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 45LL;
        goto LABEL_246;
      }

      uint64_t v31 = v12 + 1;
      unsigned __int8 v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12 + 1);
      if (v46 == 48)
      {
        uint64_t v47 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v12, v11);
        specialized static JSONScanner.validateLeadingZero(in:fullSource:)(v47, v48, a3, a4);
        if (v6) {
          return v7;
        }
      }

      else
      {
        unsigned __int8 v109 = v46;
        if ((v46 - 49) >= 9u)
        {
          unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12 + 1, a3, a4);
          uint64_t v95 = v110;
          uint64_t v97 = v111;
          uint64_t v11 = v109;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          unint64_t v112 = 0xD000000000000013LL;
          uint64_t v113 = "after '-' in number";
LABEL_146:
          *(void *)uint64_t v39 = v112;
          *(void *)(v39 + 8) = (unint64_t)(v113 - 32) | 0x8000000000000000LL;
LABEL_238:
          *(void *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v11;
          goto LABEL_246;
        }
      }

      goto LABEL_46;
    }

    uint64_t v31 = v12;
LABEL_46:
    uint64_t v215 = a4;
    if ((a6 & 1) != 0 && v31 + 1 < v12 + v11)
    {
      uint64_t v49 = v31 - v12 + 1;
      uint64_t v50 = v31;
      while (1)
      {
        uint64_t v51 = v50 + 1;
        unint64_t v52 = v50 + 2;
        ++v49;
        ++v50;
        if (v52 >= v12 + v11) {
          goto LABEL_54;
        }
      }

      unsigned __int8 v53 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v50);
      __int16 v54 = _asciiNumbers.getter();
      if (v53 < v54 || HIBYTE(v54) < v53)
      {
        if (v49 < 0 || v11 - v49 < 1) {
          goto LABEL_313;
        }
        unsigned __int8 v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v51);
        unint64_t v106 = v51;
        unint64_t v107 = v222;
        uint64_t v108 = a4;
        goto LABEL_236;
      }
    }

{
  unint64_t v6;
  double v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  char v18;
  unsigned __int8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  unsigned __int8 v32;
  __int16 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  char v45;
  unsigned __int8 v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 v53;
  __int16 v54;
  uint64_t v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  __int16 v77;
  unsigned __int8 v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  BOOL v82;
  unsigned __int8 v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  unsigned __int8 v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  const char *v113;
  uint64_t v114;
  __int16 v115;
  unint64_t v116;
  unsigned __int8 v117;
  char v118;
  char v119;
  unsigned int v120;
  char v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  double v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  const char *v153;
  size_t v154;
  __int16 v155;
  unsigned __int8 v156;
  char v157;
  char v158;
  char v159;
  unsigned int v160;
  uint64_t v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  unsigned __int8 v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned __int8 v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int8 v182;
  unsigned __int8 v183;
  unsigned __int8 v184;
  unsigned __int8 v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  char v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  Swift::String v200;
  unsigned __int8 v201;
  unsigned int v202;
  Swift::String v203;
  Swift::String v204;
  double v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned __int8 v211;
  uint64_t v212;
  unsigned __int8 v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  unint64_t v217;
  char v218;
  char v219;
  uint64_t v220;
  char v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  double v226;
  unint64_t v227;
  unint64_t v8 = v6;
  uint64_t v11 = a2;
  unint64_t v12 = a1;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
LABEL_300:
      __break(1u);
      goto LABEL_301;
    }

    char v25 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
    unint64_t v222 = a3;
    if (v25 == 48)
    {
      if (v11 >= 1) {
        uint64_t v26 = 1LL;
      }
      else {
        uint64_t v26 = v11;
      }
      unint64_t v27 = v12 + v26;
      if (!specialized Collection.isEmpty.getter(v12 + v26, v11 - v26))
      {
        unsigned __int8 v28 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v27);
        unsigned int v29 = v28;
        BOOL v30 = v28 - 46 > 0x37 || ((1LL << (v28 - 46)) & 0x80000000800001LL) == 0;
        uint64_t v31 = v12;
        if (v30)
        {
          unsigned __int8 v32 = v28;
          __int16 v33 = _asciiNumbers.getter();
          unint64_t v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, v222, a4);
          uint64_t v36 = v35;
          uint64_t v38 = v37;
          if (v29 < v33 || HIBYTE(v33) < v32)
          {
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v39 = xmmword_1837301C0;
            *(void *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v32;
            *(void *)(v39 + 24) = v34;
            *(void *)(v39 + 32) = v36;
            *(void *)(v39 + 40) = v38;
            goto LABEL_247;
          }

          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v39 = v34;
          *(void *)(v39 + 8) = v36;
          *(void *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v38;
LABEL_110:
          *(void *)(v39 + 24) = 0LL;
          *(void *)(v39 + 32) = 0LL;
          *(void *)(v39 + 40) = 0LL;
          char v104 = 10;
          goto LABEL_248;
        }

        goto LABEL_46;
      }
    }

    else if ((v25 - 58) < 0xF7u)
    {
      if (v25 != 45)
      {
LABEL_301:
        __break(1u);
        goto LABEL_302;
      }

      if (v11 < 2)
      {
        unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        uint64_t v95 = v94;
        uint64_t v97 = v96;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v39 = 0xD000000000000010LL;
        *(void *)(v39 + 8) = 0x80000001839CB4F0LL;
        *(void *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 45LL;
        goto LABEL_246;
      }

      uint64_t v31 = v12 + 1;
      unsigned __int8 v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12 + 1);
      if (v46 == 48)
      {
        uint64_t v47 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v12, v11);
        specialized static JSONScanner.validateLeadingZero(in:fullSource:)(v47, v48, a3, a4);
        if (v6) {
          return v7;
        }
      }

      else
      {
        unsigned __int8 v109 = v46;
        if ((v46 - 49) >= 9u)
        {
          unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12 + 1, a3, a4);
          uint64_t v95 = v110;
          uint64_t v97 = v111;
          uint64_t v11 = v109;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          unint64_t v112 = 0xD000000000000013LL;
          uint64_t v113 = "after '-' in number";
LABEL_146:
          *(void *)uint64_t v39 = v112;
          *(void *)(v39 + 8) = (unint64_t)(v113 - 32) | 0x8000000000000000LL;
LABEL_238:
          *(void *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v11;
          goto LABEL_246;
        }
      }

      goto LABEL_46;
    }

    uint64_t v31 = v12;
LABEL_46:
    uint64_t v215 = a4;
    if ((a6 & 1) != 0 && v31 + 1 < v12 + v11)
    {
      uint64_t v49 = v31 - v12 + 1;
      uint64_t v50 = v31;
      while (1)
      {
        uint64_t v51 = v50 + 1;
        unint64_t v52 = v50 + 2;
        ++v49;
        ++v50;
        if (v52 >= v12 + v11) {
          goto LABEL_54;
        }
      }

      unsigned __int8 v53 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v50);
      __int16 v54 = _asciiNumbers.getter();
      if (v53 < v54 || HIBYTE(v54) < v53)
      {
        if (v49 < 0 || v11 - v49 < 1) {
          goto LABEL_314;
        }
        unsigned __int8 v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v51);
        unint64_t v106 = v51;
        unint64_t v107 = v222;
        uint64_t v108 = a4;
        goto LABEL_236;
      }
    }

{
  unint64_t v6;
  double v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  char v18;
  unsigned __int8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  unsigned __int8 v32;
  __int16 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  char v45;
  unsigned __int8 v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 v53;
  __int16 v54;
  uint64_t v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  double v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  __int16 v86;
  unsigned __int8 v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  BOOL v91;
  unsigned __int8 v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int16 v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  unsigned __int8 v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  const char *v115;
  uint64_t v116;
  __int16 v117;
  unint64_t v118;
  unsigned __int8 v119;
  char v120;
  char v121;
  unsigned int v122;
  char v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  double v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  const char *v155;
  size_t v156;
  __int16 v157;
  unsigned __int8 v158;
  char v159;
  char v160;
  char v161;
  unsigned int v162;
  uint64_t v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  unsigned __int8 v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned __int8 v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int8 v181;
  uint64_t v182;
  uint64_t v183;
  unsigned __int8 v184;
  unsigned __int8 v185;
  unsigned __int8 v186;
  unsigned __int8 v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  char v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned __int8 *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  Swift::String v202;
  unsigned __int8 v203;
  unsigned int v204;
  Swift::String v205;
  Swift::String v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 v213;
  uint64_t v214;
  unsigned __int8 v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  unint64_t v219;
  char v220;
  char v221;
  uint64_t v222;
  char v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v8 = v6;
  uint64_t v11 = a2;
  unint64_t v12 = a1;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_291:
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
      goto LABEL_300;
    }

    char v25 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
    unint64_t v224 = a3;
    if (v25 == 48)
    {
      if (v11 >= 1) {
        uint64_t v26 = 1LL;
      }
      else {
        uint64_t v26 = v11;
      }
      unint64_t v27 = v12 + v26;
      if (!specialized Collection.isEmpty.getter(v12 + v26, v11 - v26))
      {
        unsigned __int8 v28 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v27);
        unsigned int v29 = v28;
        BOOL v30 = v28 - 46 > 0x37 || ((1LL << (v28 - 46)) & 0x80000000800001LL) == 0;
        uint64_t v31 = v12;
        if (v30)
        {
          unsigned __int8 v32 = v28;
          __int16 v33 = _asciiNumbers.getter();
          unint64_t v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, v224, a4);
          uint64_t v36 = v35;
          uint64_t v38 = v37;
          if (v29 < v33 || HIBYTE(v33) < v32)
          {
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v39 = xmmword_1837301C0;
            *(void *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v32;
            *(void *)(v39 + 24) = v34;
            *(void *)(v39 + 32) = v36;
            *(void *)(v39 + 40) = v38;
            goto LABEL_247;
          }

          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v39 = v34;
          *(void *)(v39 + 8) = v36;
          *(void *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v38;
LABEL_110:
          *(void *)(v39 + 24) = 0LL;
          *(void *)(v39 + 32) = 0LL;
          *(void *)(v39 + 40) = 0LL;
          unint64_t v106 = 10;
          goto LABEL_248;
        }

        goto LABEL_46;
      }
    }

    else if ((v25 - 58) < 0xF7u)
    {
      if (v25 != 45)
      {
LABEL_300:
        __break(1u);
        goto LABEL_301;
      }

      if (v11 < 2)
      {
        uint64_t v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        uint64_t v97 = v96;
        unint64_t v99 = v98;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v39 = 0xD000000000000010LL;
        *(void *)(v39 + 8) = 0x80000001839CB4F0LL;
        *(void *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 45LL;
        goto LABEL_246;
      }

      uint64_t v31 = v12 + 1;
      unsigned __int8 v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12 + 1);
      if (v46 == 48)
      {
        uint64_t v47 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v12, v11);
        specialized static JSONScanner.validateLeadingZero(in:fullSource:)(v47, v48, a3, a4);
        if (v6) {
          return v7;
        }
      }

      else
      {
        uint64_t v111 = v46;
        if ((v46 - 49) >= 9u)
        {
          uint64_t v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12 + 1, a3, a4);
          uint64_t v97 = v112;
          unint64_t v99 = v113;
          uint64_t v11 = v111;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          uint64_t v114 = 0xD000000000000013LL;
          __int16 v115 = "after '-' in number";
LABEL_146:
          *(void *)uint64_t v39 = v114;
          *(void *)(v39 + 8) = (unint64_t)(v115 - 32) | 0x8000000000000000LL;
LABEL_238:
          *(void *)(v39 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v11;
          goto LABEL_246;
        }
      }

      goto LABEL_46;
    }

    uint64_t v31 = v12;
LABEL_46:
    unint64_t v217 = a4;
    if ((a6 & 1) != 0 && v31 + 1 < v12 + v11)
    {
      uint64_t v49 = v31 - v12 + 1;
      uint64_t v50 = v31;
      while (1)
      {
        uint64_t v51 = v50 + 1;
        unint64_t v52 = v50 + 2;
        ++v49;
        ++v50;
        if (v52 >= v12 + v11) {
          goto LABEL_54;
        }
      }

      unsigned __int8 v53 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v50);
      __int16 v54 = _asciiNumbers.getter();
      if (v53 < v54 || HIBYTE(v54) < v53)
      {
        if (v49 < 0 || v11 - v49 < 1) {
          goto LABEL_313;
        }
        unint64_t v107 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v51);
        uint64_t v108 = v51;
        unsigned __int8 v109 = v224;
        uint64_t v110 = a4;
        goto LABEL_236;
      }
    }

float specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  unint64_t v8 = v6;
  uint64_t v11 = a2;
  unint64_t v12 = a1;
  uint64_t v223 = *MEMORY[0x1895F89C0];
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
      goto LABEL_299;
    }

    char v24 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
    if (v24 == 48)
    {
      uint64_t v218 = a4;
      if (v11 >= 1) {
        uint64_t v25 = 1LL;
      }
      else {
        uint64_t v25 = v11;
      }
      unint64_t v26 = v12 + v25;
      if (!specialized Collection.isEmpty.getter(v12 + v25, v11 - v25))
      {
        unsigned __int8 v27 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v26);
        unsigned int v28 = v27;
        BOOL v29 = v27 - 46 > 0x37 || ((1LL << (v27 - 46)) & 0x80000000800001LL) == 0;
        uint64_t v30 = v12;
        if (v29)
        {
          unsigned __int8 v62 = v27;
          __int16 v63 = _asciiNumbers.getter();
          unint64_t v64 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v26, a3, v218);
          uint64_t v66 = v65;
          uint64_t v68 = v67;
          if (v28 < v63 || HIBYTE(v63) < v62)
          {
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v55 = xmmword_1837301C0;
            *(void *)(v55 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v62;
            *(void *)(v55 + 24) = v64;
            *(void *)(v55 + 32) = v66;
            *(void *)(v55 + 40) = v68;
            goto LABEL_260;
          }

          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v55 = v64;
          *(void *)(v55 + 8) = v66;
          *(void *)(v55 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v68;
LABEL_64:
          *(void *)(v55 + 24) = 0LL;
          *(void *)(v55 + 32) = 0LL;
          *(void *)(v55 + 40) = 0LL;
          char v69 = 10;
          goto LABEL_261;
        }

        unint64_t v213 = a3;
        if ((a6 & 1) == 0) {
          goto LABEL_67;
        }
        goto LABEL_45;
      }
    }

    else
    {
      if ((v24 - 58) < 0xF7u)
      {
        if (v24 != 45)
        {
LABEL_302:
          __break(1u);
          goto LABEL_303;
        }

        if (v11 < 2)
        {
          unint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
          uint64_t v52 = v51;
          uint64_t v54 = v53;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v55 = 0xD000000000000010LL;
          *(void *)(v55 + 8) = 0x80000001839CB4F0LL;
          *(void *)(v55 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 45LL;
          goto LABEL_259;
        }

        uint64_t v30 = v12 + 1;
        unsigned __int8 v37 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v12 + 1);
        if (v37 == 48)
        {
          uint64_t v38 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2LL, v12, v11);
          specialized static JSONScanner.validateLeadingZero(in:fullSource:)(v38, v39, a3, a4);
          if (v6) {
            return v7;
          }
        }

        else
        {
          unsigned __int8 v70 = v37;
          if ((v37 - 49) >= 9u)
          {
            unint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12 + 1, a3, a4);
            uint64_t v52 = v176;
            uint64_t v54 = v177;
            uint64_t v11 = v70;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            unint64_t v124 = 0xD000000000000013LL;
            uint64_t v125 = "after '-' in number";
LABEL_251:
            *(void *)uint64_t v55 = v124;
            *(void *)(v55 + 8) = (unint64_t)(v125 - 32) | 0x8000000000000000LL;
            goto LABEL_252;
          }
        }

        uint64_t v218 = a4;
        unint64_t v213 = a3;
        if ((a6 & 1) == 0) {
          goto LABEL_67;
        }
        goto LABEL_45;
      }

      uint64_t v218 = a4;
    }

    uint64_t v30 = v12;
    unint64_t v213 = a3;
    if ((a6 & 1) == 0)
    {
LABEL_67:
      uint64_t v71 = v12 + v11 - 1;
      unsigned __int8 v72 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v71);
      if ((v72 - 58) > 0xF5u)
      {
        char v221 = 0LL;
        float v88 = _stringshims_strtof_l((const char *)v12, &v221, 0LL);
        if (v221 && (char *)(v12 + v11) == v221)
        {
          float v7 = v88;
          if ((~LODWORD(v88) & 0x7F800000) == 0) {
            goto LABEL_180;
          }
          if (v88 != 0.0) {
            return v7;
          }
          uint64_t v89 = v11;
          uint64_t v90 = v12;
          if (v11 >= 4)
          {
            do
            {
              unsigned __int8 v91 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v90);
              if ((v91 | 0x20) == 0x65) {
                return v7;
              }
              unsigned __int8 v92 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v90 + 1);
              if ((v92 | 0x20) == 0x65) {
                return v7;
              }
              unsigned __int8 v93 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v90 + 2);
              if ((v93 | 0x20) == 0x65) {
                return v7;
              }
              unsigned __int8 v94 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v90 + 3);
              if ((v94 | 0x20) == 0x65) {
                return v7;
              }
              uint64_t v90 = specialized BufferView.dropFirst(_:)(4LL, v90, v89);
              uint64_t v89 = v95;
            }

            while (v95 >= 4);
          }

          goto LABEL_216;
        }

        uint64_t v96 = specialized BufferView.suffix(from:)(v30, v12, v11);
        uint64_t v11 = v96;
        uint64_t v98 = v97;
        unint64_t v99 = v96 + v97;
        if (v97 <= 0)
        {
          unint64_t v107 = v96;
        }

        else
        {
          __int16 v100 = _asciiNumbers.getter();
          unsigned __int8 v101 = v100;
          uint64_t v102 = 0LL;
          unsigned int v103 = HIBYTE(v100);
          uint64_t v104 = v98;
          while (1)
          {
            if (v102 < 0) {
              goto LABEL_291;
            }
            BOOL v105 = v104-- < 1;
            if (v105) {
              goto LABEL_291;
            }
            unsigned __int8 v106 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v11 + v102);
            ++v102;
            unint64_t v107 = v11 + v102;
            if (v11 + v102 >= v99) {
              goto LABEL_119;
            }
          }

          unint64_t v107 = v11 + v102;
        }

float specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if ((a5 & 1) != 0)
  {
    unint64_t v12 = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (v6) {
      return v7;
    }
    __int16 v14 = v13;
    if ((v13 & 1) != 0)
    {
      if (a2 && *__s1 == 45)
      {
        uint64_t v22 = specialized _parseJSON5Integer<A>(_:isHex:)( __s1,  a2,  1,  (uint64_t (*)(_BYTE *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v23 & 1) != 0) {
          goto LABEL_26;
        }
        unint64_t v24 = specialized Float.init<A>(exactly:)(v22);
        if ((v24 & 0x100000000LL) != 0) {
          goto LABEL_26;
        }
      }

      else
      {
        unint64_t v27 = specialized _parseJSON5Integer<A>(_:isHex:)( (unsigned __int8 *)__s1,  a2,  1,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
        if ((v28 & 1) != 0) {
          goto LABEL_26;
        }
        unint64_t v24 = specialized Float.init<A>(exactly:)(v27);
        if ((v24 & 0x100000000LL) != 0) {
          goto LABEL_26;
        }
      }

      return *(float *)&v24;
    }

    unint64_t v15 = (char *)v12;
    uint64_t v34 = 0LL;
    float v16 = _stringshims_strtof_l(__s1, &v34, 0LL);
    unsigned __int8 v17 = &__s1[a2];
    if (v34 && v17 == v34)
    {
      float v7 = v16;
      if ((~LODWORD(v16) & 0x7F800000) == 0)
      {
        if ((v14 & 0x100) != 0) {
          return v7;
        }
        goto LABEL_26;
      }

      goto LABEL_13;
    }

    if ((((v15 - __s1) | (v17 - v15)) & 0x8000000000000000LL) == 0)
    {
      specialized static JSON5Scanner.validateNumber(from:fullSource:)(v15, v17 - v15, a3, a4, (uint64_t)v35);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      unint64_t v26 = v35;
      goto LABEL_29;
    }

    goto LABEL_33;
  }

  char v18 = specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)( (unsigned __int8 *)__s1,  a2,  a6 & 1,  a3,  a4);
  if (v6) {
    return v7;
  }
  unsigned __int8 v19 = v18;
  uint64_t v34 = 0LL;
  float v20 = _stringshims_strtof_l(__s1, &v34, 0LL);
  char v21 = &__s1[a2];
  if (!v34 || v21 != v34)
  {
    if ((((v19 - (unsigned __int8 *)__s1) | (v21 - (char *)v19)) & 0x8000000000000000LL) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(v19, v21 - (char *)v19, a3, a4, (uint64_t)v36);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      unint64_t v26 = v36;
LABEL_29:
      outlined init with take of JSONError((uint64_t)v26, v25);
      goto LABEL_30;
    }

    __break(1u);
LABEL_33:
    __break(1u);
  }

  float v7 = v20;
  if ((~LODWORD(v20) & 0x7F800000) == 0)
  {
LABEL_26:
    uint64_t v29 = static String._fromUTF8Repairing(_:)();
    uint64_t v31 = v30;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v32 = v29;
    *(void *)(v32 + 8) = v31;
    *(_OWORD *)(v32 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_BYTE *)(v32 + 48) = 11;
LABEL_30:
    swift_willThrow();
    return v7;
  }

unint64_t specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( void *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v14[0] = a3;
  v14[1] = a4;
  v13[0] = a5;
  v13[1] = a6;
  v12[0] = a7;
  v12[1] = a8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized String.withUTF8<A>(_:)(v14, a2, a1) & 1) != 0)
  {
    unint64_t v10 = 0x7FF0000000000000LL;
  }

  else if ((specialized String.withUTF8<A>(_:)(v13, a2, a1) & 1) != 0)
  {
    unint64_t v10 = 0xFFF0000000000000LL;
  }

  else if ((specialized String.withUTF8<A>(_:)(v12, a2, a1) & 1) != 0)
  {
    unint64_t v10 = 0x7FF8000000000000LL;
  }

  else
  {
    unint64_t v10 = 0LL;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v14[2];
  uint64_t v15[2];
  uint64_t v16[2];
  v16[0] = a3;
  v16[1] = a4;
  v15[0] = a5;
  v15[1] = a6;
  v14[0] = a7;
  v14[1] = a8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized String.withUTF8<A>(_:)(v16, a2, a1) & 1) != 0)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 2139095040LL;
  }

  else if ((specialized String.withUTF8<A>(_:)(v15, a2, a1) & 1) != 0)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 4286578688LL;
  }

  else
  {
    unint64_t v12 = specialized String.withUTF8<A>(_:)(v14, a2, a1);
    unint64_t v10 = v12 ^ 1;
    if ((v12 & 1) != 0) {
      uint64_t v11 = 2143289344LL;
    }
    else {
      uint64_t v11 = 0LL;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 | ((unint64_t)(v10 & 1) << 32);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void)@<X4>, void *a6@<X8>)
{
  uint64_t result = a5(a1, a2, a3, a4, *(unsigned __int8 *)(v6 + 16), *(unsigned __int8 *)(v6 + 17));
  if (!v7) {
    *a6 = v10;
  }
  return result;
}

void partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  double v8 = specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  *(_BYTE *)(v5 + 32),  *(_BYTE *)(v5 + 33));
  if (!v6) {
    *a5 = v8;
  }
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

unint64_t specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( const void *a1, size_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  unint64_t result = swift_bridgeObjectRetain();
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    a3 = static String._copying(_:)();
    unint64_t v39 = v20;
    unint64_t result = swift_bridgeObjectRelease();
    a4 = v39;
    if ((v39 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v37 = a3;
    uint64_t v38 = a4 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(a4) & 0xF) != a2) {
      goto LABEL_11;
    }
    unsigned __int8 v19 = &v37;
    char v18 = a1;
    goto LABEL_10;
  }

  if ((a4 & 0x2000000000000000LL) != 0) {
    goto LABEL_8;
  }
LABEL_3:
  if ((a3 & 0x1000000000000000LL) != 0)
  {
    uint64_t v17 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if ((a3 & 0xFFFFFFFFFFFFLL) != a2) {
      goto LABEL_11;
    }
  }

  else
  {
    unint64_t result = _StringObject.sharedUTF8.getter();
    uint64_t v17 = result;
    if (v34 != a2) {
      goto LABEL_11;
    }
  }

  if (!v17)
  {
    __break(1u);
    goto LABEL_43;
  }

  char v18 = a1;
  unsigned __int8 v19 = (void *)v17;
LABEL_10:
  unint64_t result = memcmp(v18, v19, a2);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v24 = 0;
    uint64_t v25 = 2139095040LL;
    goto LABEL_41;
  }

char *specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unsigned __int8 *, uint64_t, uint64_t), unint64_t a8, uint64_t (*a9)(unint64_t, uint64_t))
{
  uint64_t v10 = v9;
  LOBYTE(v11) = a5;
  uint64_t v13 = a2;
  unint64_t v14 = a1;
  unint64_t v184 = a4;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }

    char v28 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
    if (v28 == 48)
    {
      if (v13 >= 1) {
        uint64_t v29 = 1LL;
      }
      else {
        uint64_t v29 = v13;
      }
      unint64_t v30 = v14;
      if (v13 < 2) {
        goto LABEL_175;
      }
      unint64_t v31 = v14 + v29;
      unsigned __int8 v32 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + v29);
      unsigned int v33 = v32;
    }

    else
    {
      unint64_t v30 = v14;
      if (v28 != 45)
      {
LABEL_275:
        __break(1u);
        goto LABEL_276;
      }

      if (v13 < 2)
      {
        unint64_t v63 = v14 - a3;
        if (v14 < a3 || a3 + v184 < v14) {
          goto LABEL_280;
        }
        if (a3 + v184 >= v14 + 1) {
          unint64_t v64 = v14 + 1;
        }
        else {
          unint64_t v64 = a3 + v184;
        }
        if (v64 <= a3)
        {
          uint64_t v73 = 0LL;
          uint64_t v67 = 1LL;
        }

        else
        {
          unint64_t v65 = v184 + a3;
          uint64_t v66 = -(uint64_t)a3;
          uint64_t v67 = 1LL;
          unint64_t v176 = v14 - a3;
          unint64_t v181 = v184 + a3;
          uint64_t v185 = -(uint64_t)a3;
          do
          {
            uint64_t v68 = 0LL;
            uint64_t v69 = 0LL;
            unint64_t v70 = v65 - a3;
            unint64_t v71 = v66 + a3;
            while (1)
            {
              int v72 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v69);
              if (v72 == 10)
              {
                BOOL v53 = __OFADD__(v67++, 1LL);
                uint64_t v66 = v185;
                if (v53) {
                  goto LABEL_284;
                }
                a3 += v69 + 1;
                goto LABEL_104;
              }

              if (v72 == 13) {
                break;
              }
              uint64_t v73 = v69 + 1;
              if (__OFADD__(v69, 1LL)) {
                goto LABEL_266;
              }
              ++v69;
              --v68;
              if (a3 + v69 >= v64) {
                goto LABEL_106;
              }
            }

            uint64_t v74 = a3 + v69;
            uint64_t v66 = v185;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v69 + 1, v14)) {
              goto LABEL_102;
            }
LABEL_102:
            BOOL v53 = __OFADD__(v67++, 1LL);
            if (v53) {
              goto LABEL_285;
            }
            a3 = v74 + 1;
LABEL_104:
            unint64_t v65 = v181;
          }

          while (a3 < v64);
          uint64_t v73 = 0LL;
LABEL_106:
          unint64_t v63 = v176;
        }

        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v92 = 0xD000000000000010LL;
        *(void *)(v92 + 8) = 0x80000001839CB4F0LL;
        *(void *)(v92 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 45LL;
        *(void *)(v92 + 24) = v67;
        *(void *)(v92 + 32) = v73;
        *(void *)(v92 + 40) = v63;
        *(_BYTE *)(v92 + 48) = 1;
        return (char *)swift_willThrow();
      }

      unint64_t v45 = v14 + 1;
      unsigned __int8 v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + 1);
      if (v46 != 48)
      {
        unsigned __int8 v78 = v46;
        if ((v46 - 58) < 0xF7u)
        {
          if (!specialized static Comparable.<= infix(_:_:)(a3, v14 + 1)) {
            goto LABEL_291;
          }
          if (!specialized static Comparable.<= infix(_:_:)(v14 + 1, a3 + v184))
          {
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
            goto LABEL_295;
          }

          unint64_t v79 = specialized min<A>(_:_:)(v14 + 2, a3 + v184);
          if (v79 <= a3)
          {
            uint64_t v90 = 0LL;
            uint64_t v83 = 1LL;
            goto LABEL_234;
          }

          unint64_t v80 = v79;
          unint64_t v81 = v184 + a3;
          uint64_t v82 = -(uint64_t)a3;
          uint64_t v83 = 1LL;
          unint64_t v84 = a3;
          unsigned __int8 v171 = v78;
          unint64_t v177 = v184 + a3;
          while (1)
          {
LABEL_117:
            uint64_t v186 = v83;
            uint64_t v85 = 0LL;
            uint64_t v86 = 0LL;
            unint64_t v87 = v81 - v84;
            unint64_t v88 = v82 + v84;
            while (1)
            {
              int v89 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v84 + v86);
              if (v89 == 10) {
                break;
              }
              if (v89 == 13)
              {
                uint64_t v91 = v84 + v86;
                if (specialized static Comparable.<= infix(_:_:)(v84 + v86 + 1, v45))
                {
                  if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  v84 + v86 + 1) == 10) {
                    uint64_t v91 = v84 + v86 + 1;
                  }
                }

                uint64_t v83 = v186 + 1;
                if (__OFADD__(v186, 1LL)) {
                  goto LABEL_297;
                }
                unint64_t v84 = v91 + 1;
                unint64_t v81 = v177;
                uint64_t v82 = -(uint64_t)a3;
                if (v91 + 1 >= v80) {
                  goto LABEL_135;
                }
                goto LABEL_117;
              }

              uint64_t v90 = v86 + 1;
              if (__OFADD__(v86, 1LL)) {
                goto LABEL_273;
              }
              ++v86;
              --v85;
              if (v84 + v86 >= v80)
              {
                unsigned __int8 v78 = v171;
                uint64_t v83 = v186;
LABEL_234:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v150 = 0xD000000000000013LL;
                *(void *)(v150 + 8) = 0x80000001839CB5E0LL;
                *(void *)(v150 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v78;
                *(void *)(v150 + 24) = v83;
                *(void *)(v150 + 32) = v90;
                *(void *)(v150 + 40) = v45 - a3;
                *(_BYTE *)(v150 + 48) = 1;
                return (char *)swift_willThrow();
              }
            }

            uint64_t v82 = -(uint64_t)a3;
            uint64_t v83 = v186 + 1;
            if (__OFADD__(v186, 1LL)) {
              goto LABEL_296;
            }
            v84 += v86 + 1;
            unint64_t v81 = v177;
            if (v84 >= v80)
            {
LABEL_135:
              uint64_t v90 = 0LL;
              unsigned __int8 v78 = v171;
              goto LABEL_234;
            }
          }
        }

        ++v14;
        goto LABEL_175;
      }

      ++v14;
      unint64_t v31 = v30 + 2;
      if (specialized Collection.isEmpty.getter(v30 + 2, v13 - 2)
        || (unsigned __int8 v32 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v31),
            unsigned int v33 = v32,
            v32 - 46 <= 0x37)
        && ((1LL << (v32 - 46)) & 0x80000000800001LL) != 0)
      {
LABEL_175:
        unint64_t v23 = v14;
        unint64_t v14 = v30;
        if ((a6 & 1) != 0 && v23 + 1 < v30 + v13)
        {
          uint64_t v117 = 0LL;
          while (1)
          {
            uint64_t v118 = v23 + v117;
            if (~v23 + v13 + v14 == ++v117) {
              goto LABEL_186;
            }
          }

          if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v23 + v117) - 58) <= 0xF5u)
          {
            unsigned __int8 v119 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v118 + 1);
            unint64_t v120 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v118 + 1, a3, v184);
            uint64_t v122 = v121;
            uint64_t v124 = v123;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v60 = xmmword_1837301C0;
            *(void *)(v60 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v119;
            *(void *)(v60 + 24) = v120;
            *(void *)(v60 + 32) = v122;
            goto LABEL_185;
          }
        }

unint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( __int16 a1, char *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  LODWORD(v8) = v6;
  LOWORD(v14) = a1;
  uint64_t v124 = *MEMORY[0x1895F89C0];
  v115[0] = 0LL;
  double v15 = _stringshims_strtod_l(a2, v115, 0LL);
  if (v115[0]) {
    BOOL v16 = &a2[a3] == v115[0];
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    double v28 = v15;
    if (!specialized static FixedWidthInteger._convert<A>(from:)(v115, v15) || (BYTE1(v115[0]) & 1) != 0) {
      goto LABEL_44;
    }
    if (fabs(v28) < 9.00719925e15) {
      return LOBYTE(v115[0]);
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v118);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v118, (uint64_t)&v119);
  if (v123 != 1) {
    goto LABEL_43;
  }
  uint64_t v17 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  uint64_t v19 = (unsigned __int8 *)v17;
  unint64_t v20 = v18;
  unint64_t v21 = (unint64_t)&v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      unint64_t v45 = (unint64_t)v17;
LABEL_84:
      if (v45 >= v21) {
        goto LABEL_259;
      }
      char v56 = 0;
      unint64_t v57 = v45 - (void)v19;
      char v58 = 1;
      char v59 = 1;
      while (2)
      {
        uint64_t v60 = 0LL;
        uint64_t v61 = (uint64_t)&v19[v20 - v45];
        while (1)
        {
          if ((uint64_t)(v45 - (void)v19 + v60) < 0 || (BOOL v31 = v61 < 1, --v61, v31))
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            unint64_t v80 = v45 + v60;
            if (v45 + v60 < a4) {
              goto LABEL_266;
            }
            unint64_t v81 = a4 + a5;
            if (a4 + a5 < v80) {
              goto LABEL_266;
            }
            if (v81 >= v45 + v60 + 1) {
              unint64_t v81 = v45 + v60 + 1;
            }
            if (v81 <= a4)
            {
              a3 = 0LL;
              a5 = 1LL;
            }

            else
            {
              unint64_t v82 = a5 + a4;
              a5 = 1LL;
              unint64_t v83 = a4;
              do
              {
                uint64_t v84 = 0LL;
                uint64_t v85 = 0LL;
                unint64_t v86 = v82 - v83;
                while (1)
                {
                  int v87 = *(unsigned __int8 *)(v83 + v85);
                  if (v87 == 10)
                  {
                    BOOL v74 = __OFADD__(a5++, 1LL);
                    if (v74) {
                      goto LABEL_271;
                    }
                    v83 += v85 + 1;
                    goto LABEL_171;
                  }

                  if (v87 == 13) {
                    break;
                  }
                  a3 = v85 + 1;
                  if (__OFADD__(v85, 1LL)) {
                    goto LABEL_251;
                  }
                  ++v85;
                  --v84;
                  if (v83 + v85 >= v81) {
                    goto LABEL_212;
                  }
                }

                uint64_t v88 = v83 + v85;
                if (v80 >= v83 + v85 + 1)
                {
                  if (*(_BYTE *)(v88 + 1) == 10) {
                    uint64_t v88 = v83 + v85 + 1;
                  }
                }

                BOOL v74 = __OFADD__(a5++, 1LL);
                if (v74) {
                  goto LABEL_272;
                }
                unint64_t v83 = v88 + 1;
LABEL_171:
                ;
              }

              while (v83 < v81);
              a3 = 0LL;
            }

{
  int v6;
  unint64_t v7;
  const char *v8;
  unint64_t v14;
  double v15;
  BOOL v16;
  const char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  size_t v23;
  char v24;
  char v25;
  const char *v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  __int16 v49;
  __int16 v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unint64_t v54;
  char v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  Swift::String v111;
  Swift::String v112;
  unint64_t v113;
  unint64_t v114;
  char *v115[2];
  __int16 v116;
  __int16 v117;
  _BYTE v118[40];
  char *v119;
  char *v120;
  unsigned __int16 v121;
  unsigned __int16 v122;
  char v123;
  uint64_t v124;
  LODWORD(v8) = v6;
  LOWORD(v14) = a1;
  uint64_t v124 = *MEMORY[0x1895F89C0];
  v115[0] = 0LL;
  double v15 = _stringshims_strtod_l(a2, v115, 0LL);
  if (v115[0]) {
    BOOL v16 = &a2[a3] == v115[0];
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    double v28 = v15;
    if (fabs(v28) < 9.00719925e15) {
      return LOWORD(v115[0]);
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v118);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v118, (uint64_t)&v119);
  if (v123 != 1) {
    goto LABEL_43;
  }
  uint64_t v17 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  uint64_t v19 = (unsigned __int8 *)v17;
  unint64_t v20 = v18;
  unint64_t v21 = (unint64_t)&v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      unint64_t v45 = (unint64_t)v17;
LABEL_84:
      if (v45 >= v21) {
        goto LABEL_259;
      }
      char v56 = 0;
      unint64_t v57 = v45 - (void)v19;
      char v58 = 1;
      char v59 = 1;
      while (2)
      {
        uint64_t v60 = 0LL;
        uint64_t v61 = (uint64_t)&v19[v20 - v45];
        while (1)
        {
          if ((uint64_t)(v45 - (void)v19 + v60) < 0 || (BOOL v31 = v61 < 1, --v61, v31))
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            unint64_t v80 = v45 + v60;
            if (v45 + v60 < a4) {
              goto LABEL_266;
            }
            unint64_t v81 = a4 + a5;
            if (a4 + a5 < v80) {
              goto LABEL_266;
            }
            if (v81 >= v45 + v60 + 1) {
              unint64_t v81 = v45 + v60 + 1;
            }
            if (v81 <= a4)
            {
              a3 = 0LL;
              a5 = 1LL;
            }

            else
            {
              unint64_t v82 = a5 + a4;
              a5 = 1LL;
              unint64_t v83 = a4;
              do
              {
                uint64_t v84 = 0LL;
                uint64_t v85 = 0LL;
                unint64_t v86 = v82 - v83;
                while (1)
                {
                  int v87 = *(unsigned __int8 *)(v83 + v85);
                  if (v87 == 10)
                  {
                    BOOL v74 = __OFADD__(a5++, 1LL);
                    if (v74) {
                      goto LABEL_271;
                    }
                    v83 += v85 + 1;
                    goto LABEL_171;
                  }

                  if (v87 == 13) {
                    break;
                  }
                  a3 = v85 + 1;
                  if (__OFADD__(v85, 1LL)) {
                    goto LABEL_251;
                  }
                  ++v85;
                  --v84;
                  if (v83 + v85 >= v81) {
                    goto LABEL_212;
                  }
                }

                uint64_t v88 = v83 + v85;
                if (v80 >= v83 + v85 + 1)
                {
                  if (*(_BYTE *)(v88 + 1) == 10) {
                    uint64_t v88 = v83 + v85 + 1;
                  }
                }

                BOOL v74 = __OFADD__(a5++, 1LL);
                if (v74) {
                  goto LABEL_272;
                }
                unint64_t v83 = v88 + 1;
LABEL_171:
                ;
              }

              while (v83 < v81);
              a3 = 0LL;
            }

{
  int v6;
  unint64_t v7;
  const char *v8;
  unint64_t v14;
  double v15;
  BOOL v16;
  const char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  size_t v23;
  char v24;
  char v25;
  const char *v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  __int16 v49;
  __int16 v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unint64_t v54;
  char v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  Swift::String v111;
  Swift::String v112;
  unint64_t v113;
  unint64_t v114;
  char *v115[2];
  __int16 v116;
  __int16 v117;
  _BYTE v118[40];
  char *v119;
  char *v120;
  unsigned __int16 v121;
  unsigned __int16 v122;
  char v123;
  uint64_t v124;
  LODWORD(v8) = v6;
  LOWORD(v14) = a1;
  uint64_t v124 = *MEMORY[0x1895F89C0];
  v115[0] = 0LL;
  double v15 = _stringshims_strtod_l(a2, v115, 0LL);
  if (v115[0]) {
    BOOL v16 = &a2[a3] == v115[0];
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    double v28 = v15;
    if (fabs(v28) < 9.00719925e15) {
      return LODWORD(v115[0]);
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v118);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v118, (uint64_t)&v119);
  if (v123 != 1) {
    goto LABEL_43;
  }
  uint64_t v17 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  uint64_t v19 = (unsigned __int8 *)v17;
  unint64_t v20 = v18;
  unint64_t v21 = (unint64_t)&v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      unint64_t v45 = (unint64_t)v17;
LABEL_84:
      if (v45 >= v21) {
        goto LABEL_259;
      }
      char v56 = 0;
      unint64_t v57 = v45 - (void)v19;
      char v58 = 1;
      char v59 = 1;
      while (2)
      {
        uint64_t v60 = 0LL;
        uint64_t v61 = (uint64_t)&v19[v20 - v45];
        while (1)
        {
          if ((uint64_t)(v45 - (void)v19 + v60) < 0 || (BOOL v31 = v61 < 1, --v61, v31))
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            unint64_t v80 = v45 + v60;
            if (v45 + v60 < a4) {
              goto LABEL_266;
            }
            unint64_t v81 = a4 + a5;
            if (a4 + a5 < v80) {
              goto LABEL_266;
            }
            if (v81 >= v45 + v60 + 1) {
              unint64_t v81 = v45 + v60 + 1;
            }
            if (v81 <= a4)
            {
              a3 = 0LL;
              a5 = 1LL;
            }

            else
            {
              unint64_t v82 = a5 + a4;
              a5 = 1LL;
              unint64_t v83 = a4;
              do
              {
                uint64_t v84 = 0LL;
                uint64_t v85 = 0LL;
                unint64_t v86 = v82 - v83;
                while (1)
                {
                  int v87 = *(unsigned __int8 *)(v83 + v85);
                  if (v87 == 10)
                  {
                    BOOL v74 = __OFADD__(a5++, 1LL);
                    if (v74) {
                      goto LABEL_271;
                    }
                    v83 += v85 + 1;
                    goto LABEL_171;
                  }

                  if (v87 == 13) {
                    break;
                  }
                  a3 = v85 + 1;
                  if (__OFADD__(v85, 1LL)) {
                    goto LABEL_251;
                  }
                  ++v85;
                  --v84;
                  if (v83 + v85 >= v81) {
                    goto LABEL_212;
                  }
                }

                uint64_t v88 = v83 + v85;
                if (v80 >= v83 + v85 + 1)
                {
                  if (*(_BYTE *)(v88 + 1) == 10) {
                    uint64_t v88 = v83 + v85 + 1;
                  }
                }

                BOOL v74 = __OFADD__(a5++, 1LL);
                if (v74) {
                  goto LABEL_272;
                }
                unint64_t v83 = v88 + 1;
LABEL_171:
                ;
              }

              while (v83 < v81);
              a3 = 0LL;
            }