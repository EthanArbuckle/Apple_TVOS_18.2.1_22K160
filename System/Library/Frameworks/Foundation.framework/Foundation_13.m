unint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( __int16 a1, char *a2, uint64_t a3, unint64_t a4, unint64_t i, uint64_t a6)
{
  int v6;
  const char *v7;
  unint64_t v13;
  double v14;
  BOOL v15;
  const char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  size_t v22;
  char v23;
  char v24;
  const char *v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  __int16 v47;
  __int16 v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v55;
  unsigned __int8 *v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  Swift::String v113;
  Swift::String v114;
  unint64_t v115;
  unint64_t v116;
  int isNegative_getter;
  char *v118[2];
  __int16 v119;
  __int16 v120;
  _BYTE v121[40];
  char *v122;
  char *v123;
  unsigned __int16 v124;
  unsigned __int16 v125;
  char v126;
  uint64_t v127;
  LODWORD(v7) = v6;
  LOWORD(v13) = a1;
  v127 = *MEMORY[0x1895F89C0];
  v118[0] = 0LL;
  v14 = _stringshims_strtod_l(a2, v118, 0LL);
  if (v118[0]) {
    v15 = &a2[a3] == v118[0];
  }
  else {
    v15 = 0;
  }
  if (v15)
  {
    v27 = v14;
    if (!specialized static FixedWidthInteger._convert<A>(from:)(v118, v14) || (BYTE1(v118[0]) & 1) != 0) {
      goto LABEL_186;
    }
    if (fabs(v27) < 9.00719925e15) {
      return LOBYTE(v118[0]);
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v121);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v121, (uint64_t)&v122);
  if (v126 != 1)
  {
LABEL_43:
    LODWORD(v20) = (_DWORD)v122;
    v19 = (unint64_t)v122 >> 48;
    a3 = (unsigned __int16)v123;
    v31 = (unint64_t)v122 >> 32;
    v32 = WORD1(v123);
    v33 = WORD2(v123);
    v34 = HIWORD(v123);
    v35 = v124;
    i = v125;
    v118[0] = v122;
    v118[1] = v123;
    v119 = v124;
    v120 = v125;
    isNegative_getter = _So9NSDecimala__isNegative_getter(v118);
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = a3;
    WORD1(v118[1]) = v32;
    WORD2(v118[1]) = v33;
    HIWORD(v118[1]) = v34;
    v119 = v35;
    v120 = i;
    v36 = _So9NSDecimala__length_getter(v118);
    v37 = v34;
    a4 = v33;
    v13 = v32;
    v7 = (const char *)a3;
    LOWORD(a3) = v31;
    if (!v36 && isNegative_getter) {
      goto LABEL_186;
    }
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    v116 = v37;
    HIWORD(v118[1]) = v37;
    v115 = v35;
    v119 = v35;
    v120 = i;
    v38 = _So9NSDecimala__length_getter(v118);
    if (!v38) {
      goto LABEL_260;
    }
    v39 = 0LL;
    v40 = v38 - 1;
    if (v38 != 1)
    {
      v41 = v115;
      v42 = v116;
      while (2)
      {
        v43 = v19;
        switch(v40)
        {
          case 1:
            goto LABEL_55;
          case 2:
            v43 = (unint64_t)v7;
            goto LABEL_55;
          case 3:
            v43 = v13;
            goto LABEL_55;
          case 4:
            v43 = a4;
            goto LABEL_55;
          case 5:
            v43 = v116;
            goto LABEL_55;
          case 6:
            v43 = v115;
            goto LABEL_55;
          case 7:
            v43 = i;
LABEL_55:
            if (HIWORD(v39)) {
              goto LABEL_186;
            }
            v39 = v43 | (v39 << 16);
            if (--v40) {
              continue;
            }
            if (HIWORD(v39)) {
              goto LABEL_186;
            }
            goto LABEL_70;
          default:
            goto LABEL_286;
        }
      }
    }

    v41 = v115;
    v42 = v116;
LABEL_70:
    v47 = i;
    for (i = (unsigned __int16)v31 | (v39 << 16); ; i = 0LL)
    {
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v42;
      v119 = v41;
      v120 = v47;
      v48 = v41;
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v116;
      v119 = v48;
      v120 = v47;
      v86 = _So9NSDecimala__exponent_getter((char *)v118);
      if (v86 > 0) {
        goto LABEL_271;
      }
      if (!v86) {
        goto LABEL_178;
      }
      v87 = -v86 & ~(-v86 >> 31);
      v88 = ~v86;
      while (v87 > v88)
      {
        i /= 0xAuLL;
        if (__CFADD__(v86++, 1)) {
          goto LABEL_178;
        }
      }

{
  int v6;
  const char *v7;
  unint64_t v13;
  double v14;
  BOOL v15;
  const char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  size_t v22;
  char v23;
  char v24;
  const char *v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  __int16 v47;
  __int16 v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v55;
  unsigned __int8 *v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  Swift::String v113;
  Swift::String v114;
  unint64_t v115;
  unint64_t v116;
  int isNegative_getter;
  char *v118[2];
  __int16 v119;
  __int16 v120;
  _BYTE v121[40];
  char *v122;
  char *v123;
  unsigned __int16 v124;
  unsigned __int16 v125;
  char v126;
  uint64_t v127;
  LODWORD(v7) = v6;
  LOWORD(v13) = a1;
  v127 = *MEMORY[0x1895F89C0];
  v118[0] = 0LL;
  v14 = _stringshims_strtod_l(a2, v118, 0LL);
  if (v118[0]) {
    v15 = &a2[a3] == v118[0];
  }
  else {
    v15 = 0;
  }
  if (v15)
  {
    v27 = v14;
    if (fabs(v27) < 9.00719925e15) {
      return LOWORD(v118[0]);
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v121);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v121, (uint64_t)&v122);
  if (v126 != 1)
  {
LABEL_43:
    LODWORD(v20) = (_DWORD)v122;
    v19 = (unint64_t)v122 >> 48;
    a3 = (unsigned __int16)v123;
    v31 = (unint64_t)v122 >> 32;
    v32 = WORD1(v123);
    v33 = WORD2(v123);
    v34 = HIWORD(v123);
    v35 = v124;
    i = v125;
    v118[0] = v122;
    v118[1] = v123;
    v119 = v124;
    v120 = v125;
    isNegative_getter = _So9NSDecimala__isNegative_getter(v118);
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = a3;
    WORD1(v118[1]) = v32;
    WORD2(v118[1]) = v33;
    HIWORD(v118[1]) = v34;
    v119 = v35;
    v120 = i;
    v36 = _So9NSDecimala__length_getter(v118);
    v37 = v34;
    a4 = v33;
    v13 = v32;
    v7 = (const char *)a3;
    LOWORD(a3) = v31;
    if (!v36 && isNegative_getter) {
      goto LABEL_186;
    }
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    v116 = v37;
    HIWORD(v118[1]) = v37;
    v115 = v35;
    v119 = v35;
    v120 = i;
    v38 = _So9NSDecimala__length_getter(v118);
    if (!v38) {
      goto LABEL_260;
    }
    v39 = 0LL;
    v40 = v38 - 1;
    if (v38 != 1)
    {
      v41 = v115;
      v42 = v116;
      while (2)
      {
        v43 = v19;
        switch(v40)
        {
          case 1:
            goto LABEL_55;
          case 2:
            v43 = (unint64_t)v7;
            goto LABEL_55;
          case 3:
            v43 = v13;
            goto LABEL_55;
          case 4:
            v43 = a4;
            goto LABEL_55;
          case 5:
            v43 = v116;
            goto LABEL_55;
          case 6:
            v43 = v115;
            goto LABEL_55;
          case 7:
            v43 = i;
LABEL_55:
            if (HIWORD(v39)) {
              goto LABEL_186;
            }
            v39 = v43 | (v39 << 16);
            if (--v40) {
              continue;
            }
            if (HIWORD(v39)) {
              goto LABEL_186;
            }
            goto LABEL_70;
          default:
            goto LABEL_286;
        }
      }
    }

    v41 = v115;
    v42 = v116;
LABEL_70:
    v47 = i;
    for (i = (unsigned __int16)v31 | (v39 << 16); ; i = 0LL)
    {
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v42;
      v119 = v41;
      v120 = v47;
      v48 = v41;
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v116;
      v119 = v48;
      v120 = v47;
      v86 = _So9NSDecimala__exponent_getter((char *)v118);
      if (v86 > 0) {
        goto LABEL_271;
      }
      if (!v86) {
        goto LABEL_178;
      }
      v87 = -v86 & ~(-v86 >> 31);
      v88 = ~v86;
      while (v87 > v88)
      {
        i /= 0xAuLL;
        if (__CFADD__(v86++, 1)) {
          goto LABEL_178;
        }
      }

{
  int v6;
  const char *v7;
  unint64_t v13;
  double v14;
  BOOL v15;
  const char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  size_t v22;
  char v23;
  char v24;
  const char *v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  __int16 v47;
  __int16 v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v55;
  unsigned __int8 *v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  Swift::String v113;
  Swift::String v114;
  unint64_t v115;
  unint64_t v116;
  int isNegative_getter;
  char *v118[2];
  __int16 v119;
  __int16 v120;
  _BYTE v121[40];
  char *v122;
  char *v123;
  unsigned __int16 v124;
  unsigned __int16 v125;
  char v126;
  uint64_t v127;
  LODWORD(v7) = v6;
  LOWORD(v13) = a1;
  v127 = *MEMORY[0x1895F89C0];
  v118[0] = 0LL;
  v14 = _stringshims_strtod_l(a2, v118, 0LL);
  if (v118[0]) {
    v15 = &a2[a3] == v118[0];
  }
  else {
    v15 = 0;
  }
  if (v15)
  {
    v27 = v14;
    if (fabs(v27) < 9.00719925e15) {
      return LODWORD(v118[0]);
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v121);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v121, (uint64_t)&v122);
  if (v126 != 1)
  {
LABEL_43:
    LODWORD(v20) = (_DWORD)v122;
    v19 = (unint64_t)v122 >> 48;
    a3 = (unsigned __int16)v123;
    v31 = (unint64_t)v122 >> 32;
    v32 = WORD1(v123);
    v33 = WORD2(v123);
    v34 = HIWORD(v123);
    v35 = v124;
    i = v125;
    v118[0] = v122;
    v118[1] = v123;
    v119 = v124;
    v120 = v125;
    isNegative_getter = _So9NSDecimala__isNegative_getter(v118);
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = a3;
    WORD1(v118[1]) = v32;
    WORD2(v118[1]) = v33;
    HIWORD(v118[1]) = v34;
    v119 = v35;
    v120 = i;
    v36 = _So9NSDecimala__length_getter(v118);
    v37 = v34;
    a4 = v33;
    v13 = v32;
    v7 = (const char *)a3;
    LOWORD(a3) = v31;
    if (!v36 && isNegative_getter) {
      goto LABEL_186;
    }
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    v116 = v37;
    HIWORD(v118[1]) = v37;
    v115 = v35;
    v119 = v35;
    v120 = i;
    v38 = _So9NSDecimala__length_getter(v118);
    if (!v38) {
      goto LABEL_260;
    }
    v39 = 0LL;
    v40 = v38 - 1;
    if (v38 != 1)
    {
      v41 = v115;
      v42 = v116;
      while (2)
      {
        v43 = v19;
        switch(v40)
        {
          case 1:
            goto LABEL_55;
          case 2:
            v43 = (unint64_t)v7;
            goto LABEL_55;
          case 3:
            v43 = v13;
            goto LABEL_55;
          case 4:
            v43 = a4;
            goto LABEL_55;
          case 5:
            v43 = v116;
            goto LABEL_55;
          case 6:
            v43 = v115;
            goto LABEL_55;
          case 7:
            v43 = i;
LABEL_55:
            if (HIWORD(v39)) {
              goto LABEL_186;
            }
            v39 = v43 | (v39 << 16);
            if (--v40) {
              continue;
            }
            if (HIWORD(v39)) {
              goto LABEL_186;
            }
            goto LABEL_70;
          default:
            goto LABEL_286;
        }
      }
    }

    v41 = v115;
    v42 = v116;
LABEL_70:
    v47 = i;
    for (i = (unsigned __int16)v31 | (v39 << 16); ; i = 0LL)
    {
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v42;
      v119 = v41;
      v120 = v47;
      v48 = v41;
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v116;
      v119 = v48;
      v120 = v47;
      v86 = _So9NSDecimala__exponent_getter((char *)v118);
      if (v86 > 0) {
        goto LABEL_271;
      }
      if (!v86) {
        goto LABEL_178;
      }
      v87 = -v86 & ~(-v86 >> 31);
      v88 = ~v86;
      while (v87 > v88)
      {
        i /= 0xAuLL;
        if (__CFADD__(v86++, 1)) {
          goto LABEL_178;
        }
      }

uint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unint64_t, uint64_t, uint64_t), uint64_t a8, uint64_t (*a9)(unint64_t, uint64_t))
{
  uint64_t v10 = v9;
  unint64_t v11 = a4;
  uint64_t v13 = a2;
  unint64_t v14 = a1;
  LOBYTE(v187) = a5;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
      goto LABEL_274;
    }

    char v27 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
    if (v27 == 48)
    {
      if (v13 >= 1) {
        uint64_t v28 = 1LL;
      }
      else {
        uint64_t v28 = v13;
      }
      uint64_t v21 = v14;
      if (v13 >= 2)
      {
        unint64_t v29 = v14 + v28;
        unsigned __int8 v30 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + v28);
        unsigned int v31 = v30;
        BOOL v32 = v30 - 46 > 0x37 || ((1LL << (v30 - 46)) & 0x80000000800001LL) == 0;
        uint64_t v21 = v14;
        if (v32)
        {
          unsigned __int8 v19 = v30;
          __int16 v33 = _asciiNumbers.getter();
          unint64_t v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v29, a3, a4);
          uint64_t v36 = v35;
          uint64_t v38 = v37;
          if (v31 >= v33)
          {
            unsigned int v39 = HIBYTE(v33);
            goto LABEL_112;
          }

{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  char v24;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 v30;
  unsigned int v31;
  BOOL v32;
  __int16 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unint64_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned __int8 v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 v117;
  unint64_t v118;
  unsigned __int8 v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int8 v143;
  char *v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 v157;
  int v158;
  __int16 v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int8 *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  Swift::String v166;
  unsigned __int8 v167;
  unsigned int v168;
  Swift::String v169;
  Swift::String v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t (*v177)(unint64_t, uint64_t, uint64_t);
  unint64_t v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v10 = v9;
  unint64_t v11 = a4;
  uint64_t v13 = a2;
  unint64_t v14 = a1;
  LOBYTE(v187) = a5;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
      goto LABEL_274;
    }

    char v27 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
    if (v27 == 48)
    {
      if (v13 >= 1) {
        uint64_t v28 = 1LL;
      }
      else {
        uint64_t v28 = v13;
      }
      uint64_t v21 = v14;
      if (v13 >= 2)
      {
        unint64_t v29 = v14 + v28;
        unsigned __int8 v30 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + v28);
        unsigned int v31 = v30;
        BOOL v32 = v30 - 46 > 0x37 || ((1LL << (v30 - 46)) & 0x80000000800001LL) == 0;
        uint64_t v21 = v14;
        if (v32)
        {
          unsigned __int8 v19 = v30;
          __int16 v33 = _asciiNumbers.getter();
          unint64_t v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v29, a3, a4);
          uint64_t v36 = v35;
          uint64_t v38 = v37;
          if (v31 >= v33)
          {
            unsigned int v39 = HIBYTE(v33);
            goto LABEL_112;
          }

LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
            goto LABEL_295;
          }
        }
      }
    }

    unint64_t v11 = a4;
    if ((a6 & 1) != 0 && v21 + 1 < v14 + v13)
    {
      uint64_t v95 = 0LL;
      while (1)
      {
        uint64_t v96 = v21 + v95;
        if (~v21 + v13 + v14 == ++v95) {
          goto LABEL_149;
        }
      }

      if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v21 + v95) - 58) <= 0xF5u)
      {
        unsigned __int8 v97 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v96 + 1);
        unint64_t v98 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v96 + 1, a3, a4);
        uint64_t v100 = v99;
        uint64_t v102 = v101;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)uint64_t v63 = xmmword_1837301C0;
        *(void *)(v63 + 16) = v97;
        *(void *)(v63 + 24) = v98;
        *(void *)(v63 + 32) = v100;
        goto LABEL_148;
      }
    }

            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
            goto LABEL_295;
          }
        }
      }
    }

    unint64_t v11 = a4;
    if ((a6 & 1) != 0 && v21 + 1 < v14 + v13)
    {
      uint64_t v95 = 0LL;
      while (1)
      {
        uint64_t v96 = v21 + v95;
        if (~v21 + v13 + v14 == ++v95) {
          goto LABEL_149;
        }
      }

      if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v21 + v95) - 58) <= 0xF5u)
      {
        unsigned __int8 v97 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v96 + 1);
        unint64_t v98 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v96 + 1, a3, a4);
        uint64_t v100 = v99;
        uint64_t v102 = v101;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)uint64_t v63 = xmmword_1837301C0;
        *(void *)(v63 + 16) = v97;
        *(void *)(v63 + 24) = v98;
        *(void *)(v63 + 32) = v100;
        goto LABEL_148;
      }
    }

            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
            goto LABEL_295;
          }
        }
      }
    }

    unint64_t v11 = a4;
    if ((a6 & 1) != 0 && v21 + 1 < v14 + v13)
    {
      uint64_t v96 = 0LL;
      while (1)
      {
        unsigned __int8 v97 = v21 + v96;
        if (~v21 + v13 + v14 == ++v96) {
          goto LABEL_149;
        }
      }

      if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v21 + v96) - 58) <= 0xF5u)
      {
        unint64_t v98 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v97 + 1);
        uint64_t v99 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v97 + 1, a3, a4);
        uint64_t v101 = v100;
        unint64_t v103 = v102;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)char v64 = xmmword_1837301C0;
        *(void *)(v64 + 16) = v98;
        *(void *)(v64 + 24) = v99;
        *(void *)(v64 + 32) = v101;
        goto LABEL_148;
      }
    }

char *specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( __int16 a1, char *a2, uint64_t a3, unint64_t a4, unint64_t i, uint64_t a6, uint64_t (*a7)(char **))
{
  LODWORD(v9) = v7;
  LOWORD(v15) = a1;
  uint64_t v129 = *MEMORY[0x1895F89C0];
  v120[0] = 0LL;
  double v16 = _stringshims_strtod_l(a2, v120, 0LL);
  if (v120[0]) {
    BOOL v17 = &a2[a3] == v120[0];
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    double v29 = v16;
    if (fabs(v29) < 9.00719925e15) {
      return v120[0];
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v123);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v123, (uint64_t)&v124);
  if (v128 != 1)
  {
LABEL_43:
    LODWORD(v22) = (_DWORD)v124;
    unint64_t v21 = (unint64_t)v124 >> 48;
    a3 = (unsigned __int16)v125;
    unint64_t v33 = (unint64_t)v124 >> 32;
    unint64_t v34 = WORD1(v125);
    unint64_t v35 = WORD2(v125);
    unint64_t v36 = HIWORD(v125);
    unint64_t v37 = v126;
    i = v127;
    v120[0] = v124;
    v120[1] = v125;
    __int16 v121 = v126;
    __int16 v122 = v127;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(v120);
    LODWORD(v120[0]) = v22;
    WORD2(v120[0]) = v33;
    HIWORD(v120[0]) = v21;
    LOWORD(v120[1]) = a3;
    WORD1(v120[1]) = v34;
    WORD2(v120[1]) = v35;
    HIWORD(v120[1]) = v36;
    __int16 v121 = v37;
    __int16 v122 = i;
    int v38 = _So9NSDecimala__length_getter(v120);
    unint64_t v39 = v36;
    a4 = v35;
    unint64_t v15 = v34;
    uint64_t v9 = (const char *)a3;
    LOWORD(a3) = v33;
    if (!v38 && isNegative_getter) {
      goto LABEL_186;
    }
    LODWORD(v120[0]) = v22;
    WORD2(v120[0]) = v33;
    HIWORD(v120[0]) = v21;
    LOWORD(v120[1]) = (_WORD)v9;
    WORD1(v120[1]) = v15;
    WORD2(v120[1]) = a4;
    unint64_t v117 = v37;
    unint64_t v118 = v39;
    HIWORD(v120[1]) = v39;
    __int16 v121 = v37;
    __int16 v122 = i;
    int v40 = _So9NSDecimala__length_getter(v120);
    if (!v40) {
      goto LABEL_259;
    }
    unint64_t v41 = 0LL;
    int v42 = v40 - 1;
    if (v40 != 1)
    {
      __int16 v43 = v117;
      __int16 v44 = v118;
      while (2)
      {
        unint64_t v45 = v21;
        switch(v42)
        {
          case 1:
            goto LABEL_55;
          case 2:
            unint64_t v45 = (unint64_t)v9;
            goto LABEL_55;
          case 3:
            unint64_t v45 = v15;
            goto LABEL_55;
          case 4:
            unint64_t v45 = a4;
            goto LABEL_55;
          case 5:
            unint64_t v45 = v118;
            goto LABEL_55;
          case 6:
            unint64_t v45 = v117;
            goto LABEL_55;
          case 7:
            unint64_t v45 = i;
LABEL_55:
            if (HIWORD(v41)) {
              goto LABEL_186;
            }
            unint64_t v41 = v45 | (v41 << 16);
            if (--v42) {
              continue;
            }
            if (HIWORD(v41)) {
              goto LABEL_186;
            }
            goto LABEL_70;
          default:
            goto LABEL_285;
        }
      }
    }

    __int16 v43 = v117;
    __int16 v44 = v118;
LABEL_70:
    __int16 v49 = i;
    for (i = (unsigned __int16)v33 | (v41 << 16); ; i = 0LL)
    {
      LODWORD(v120[0]) = v22;
      WORD2(v120[0]) = a3;
      HIWORD(v120[0]) = v21;
      LOWORD(v120[1]) = (_WORD)v9;
      WORD1(v120[1]) = v15;
      WORD2(v120[1]) = a4;
      HIWORD(v120[1]) = v44;
      __int16 v121 = v43;
      __int16 v122 = v49;
      __int16 v50 = v43;
      LODWORD(v120[0]) = v22;
      WORD2(v120[0]) = a3;
      HIWORD(v120[0]) = v21;
      LOWORD(v120[1]) = (_WORD)v9;
      WORD1(v120[1]) = v15;
      WORD2(v120[1]) = a4;
      HIWORD(v120[1]) = v118;
      __int16 v121 = v50;
      __int16 v122 = v49;
      int v88 = _So9NSDecimala__exponent_getter((char *)v120);
      if (v88 > 0) {
        goto LABEL_270;
      }
      if (!v88) {
        goto LABEL_178;
      }
      unsigned int v89 = -v88 & ~(-v88 >> 31);
      unsigned int v90 = ~v88;
      while (v89 > v90)
      {
        i /= 0xAuLL;
        if (__CFADD__(v88++, 1)) {
          goto LABEL_178;
        }
      }

LABEL_267:
        __break(1u);
        goto LABEL_268;
      }
    }

char *specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t), uint64_t a8, uint64_t (*a9)(unint64_t, uint64_t))
{
  uint64_t v10 = v9;
  unint64_t v11 = a4;
  uint64_t v13 = a2;
  unint64_t v14 = a1;
  LOBYTE(v187) = a5;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
      goto LABEL_274;
    }

    char v27 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
    if (v27 == 48)
    {
      if (v13 >= 1) {
        uint64_t v28 = 1LL;
      }
      else {
        uint64_t v28 = v13;
      }
      uint64_t v21 = v14;
      if (v13 >= 2)
      {
        unint64_t v29 = v14 + v28;
        unsigned __int8 v30 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + v28);
        unsigned int v31 = v30;
        BOOL v32 = v30 - 46 > 0x37 || ((1LL << (v30 - 46)) & 0x80000000800001LL) == 0;
        uint64_t v21 = v14;
        if (v32)
        {
          unsigned __int8 v19 = v30;
          __int16 v33 = _asciiNumbers.getter();
          unint64_t v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v29, a3, a4);
          uint64_t v36 = v35;
          uint64_t v38 = v37;
          if (v31 >= v33)
          {
            unsigned int v39 = HIBYTE(v33);
            goto LABEL_112;
          }

unint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( __int16 a1, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  LOWORD(v8) = v6;
  uint64_t v13 = a2;
  LOWORD(v14) = a1;
  uint64_t v129 = *MEMORY[0x1895F89C0];
  v120[0] = 0LL;
  double v15 = _stringshims_strtod_l(a2, v120, 0LL);
  if (v120[0]) {
    BOOL v16 = &v13[a3] == v120[0];
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    double v27 = v15;
    unint64_t result = specialized Int128.init<A>(exactly:)(v15);
    if ((v29 & 1) != 0) {
      goto LABEL_79;
    }
    if (fabs(v27) < 9.00719925e15) {
      return result;
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)v13,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v123);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v123, (uint64_t)&v124);
  if (v128 != 1)
  {
LABEL_43:
    __int16 v117 = (__int16)v8;
    LODWORD(a5) = (_DWORD)v124;
    a4 = (unint64_t)v124 >> 48;
    unint64_t v33 = (unsigned __int16)v125;
    uint64_t v13 = (char *)((unint64_t)v124 >> 32);
    a3 = WORD1(v125);
    unint64_t v34 = (unsigned __int8 *)WORD2(v125);
    uint64_t v35 = HIWORD(v125);
    unint64_t v36 = v126;
    unint64_t v37 = v127;
    v120[0] = v124;
    v120[1] = v125;
    __int16 v121 = v126;
    __int16 v122 = v127;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(v120);
    LODWORD(v120[0]) = a5;
    WORD2(v120[0]) = (_WORD)v13;
    HIWORD(v120[0]) = a4;
    LOWORD(v120[1]) = v33;
    WORD1(v120[1]) = a3;
    WORD2(v120[1]) = (_WORD)v34;
    HIWORD(v120[1]) = v35;
    __int16 v121 = v36;
    __int16 v122 = v37;
    int v38 = _So9NSDecimala__length_getter(v120);
    unint64_t v39 = v36;
    uint64_t v14 = v35;
    v8 = v34;
    unint64_t v7 = a3;
    LOWORD(a3) = v33;
    if (v38 || !isNegative_getter)
    {
      LODWORD(v120[0]) = a5;
      WORD2(v120[0]) = (_WORD)v13;
      HIWORD(v120[0]) = a4;
      LOWORD(v120[1]) = v33;
      WORD1(v120[1]) = v7;
      WORD2(v120[1]) = (_WORD)v8;
      HIWORD(v120[1]) = v14;
      unint64_t v118 = v39;
      __int16 v121 = v39;
      unint64_t v116 = v37;
      __int16 v122 = v37;
      int v40 = _So9NSDecimala__length_getter(v120);
      if (!v40) {
        goto LABEL_256;
      }
      unint64_t v41 = 0LL;
      int v42 = v40 - 1;
      if (v40 == 1)
      {
        __int16 v43 = v116;
        __int16 v44 = v118;
      }

      else
      {
        __int16 v43 = v116;
        __int16 v44 = v118;
        do
        {
          unint64_t v45 = a4;
          switch(v42)
          {
            case 1:
              break;
            case 2:
              unint64_t v45 = v33;
              break;
            case 3:
              unint64_t v45 = v7;
              break;
            case 4:
              unint64_t v45 = (unint64_t)v8;
              break;
            case 5:
              unint64_t v45 = v14;
              break;
            case 6:
              unint64_t v45 = v118;
              break;
            case 7:
              unint64_t v45 = v116;
              break;
            default:
              v120[0] = 0LL;
              v120[1] = (char *)0xE000000000000000LL;
              _StringGuts.grow(_:)(30LL);
              swift_bridgeObjectRelease();
              strcpy((char *)v120, "Invalid index ");
              HIBYTE(v120[1]) = -18;
              v114._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v114);
              swift_bridgeObjectRelease();
              v115._countAndFlagsBits = 0x616D5F20726F6620LL;
              v115._object = (void *)0xEE0061737369746ELL;
              String.append(_:)(v115);
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x18343ADB0LL);
          }

          if (HIWORD(v41)) {
            goto LABEL_79;
          }
          unint64_t v41 = v45 | (v41 << 16);
          --v42;
        }

        while (v42);
        if (HIWORD(v41)) {
          goto LABEL_79;
        }
      }

      for (unint64_t i = (unsigned __int16)v13 | (v41 << 16); ; unint64_t i = 0LL)
      {
        LODWORD(v120[0]) = a5;
        WORD2(v120[0]) = (_WORD)v13;
        HIWORD(v120[0]) = a4;
        LOWORD(v120[1]) = a3;
        WORD1(v120[1]) = v7;
        WORD2(v120[1]) = (_WORD)v8;
        HIWORD(v120[1]) = v14;
        __int16 v121 = v44;
        __int16 v122 = v43;
        __int16 v49 = v43;
        LODWORD(v120[0]) = a5;
        WORD2(v120[0]) = (_WORD)v13;
        HIWORD(v120[0]) = a4;
        LOWORD(v120[1]) = a3;
        WORD1(v120[1]) = v7;
        WORD2(v120[1]) = (_WORD)v8;
        HIWORD(v120[1]) = v14;
        __int16 v121 = v118;
        __int16 v122 = v49;
        int v92 = _So9NSDecimala__exponent_getter((char *)v120);
        if (v92 > 0) {
          goto LABEL_267;
        }
        LOWORD(v8) = v117;
        if (!v92) {
          goto LABEL_183;
        }
        unsigned int v93 = -v92 & ~(-v92 >> 31);
        unsigned int v94 = ~v92;
        while (v93 > v94)
        {
          i /= 0xAuLL;
          if (__CFADD__(v92++, 1)) {
            goto LABEL_183;
          }
        }

LABEL_266:
            __break(1u);
LABEL_267:
            __break(1u);
LABEL_268:
            __break(1u);
LABEL_269:
            __break(1u);
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
            goto LABEL_276;
          }

          LODWORD(a3) = v48[v65];
          if (__OFADD__(&v62[v65], 1LL)) {
            goto LABEL_144;
          }
          if (&v48[++v65] >= v8) {
            goto LABEL_145;
          }
        }

        uint64_t v67 = (uint64_t)&v62[v65];
        switch(v48[v65])
        {
          case '+':
          case '-':
            if (v67 != 0 || (v61 & 1) == 0) {
              goto LABEL_140;
            }
            uint64_t v62 = 0LL;
            char v61 = 0;
            char v63 = 0;
            char v64 = 0;
            v48 += v65 + 1;
            if (v48 >= v8) {
              goto LABEL_244;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v67 < 1 || (v64 & 1) == 0)
            {
              unint64_t v96 = (unint64_t)&v48[v65];
              unint64_t v97 = a4 + a5;
              if (a4 + a5 < v96) {
                goto LABEL_270;
              }
              if (v97 <= a4)
              {
                uint64_t v13 = 0LL;
                a5 = 1LL;
              }

              else
              {
                unint64_t v98 = a5 + a4;
                a5 = 1LL;
                unint64_t v99 = a4;
                do
                {
                  uint64_t v100 = 0LL;
                  uint64_t v101 = 0LL;
                  unint64_t v102 = v98 - v99;
                  while (1)
                  {
                    int v103 = *(unsigned __int8 *)(v99 + v101);
                    if (v103 == 10) {
                      break;
                    }
                    if (v103 == 13)
                    {
                      uint64_t v104 = v99 + v101;
                      if (v96 < v99 + v101 + 1) {
                        goto LABEL_205;
                      }
                      if (((v99 - a4 + v101 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v101 + v102) >= 1)
                      {
                        if (*(_BYTE *)(v104 + 1) == 10) {
                          uint64_t v104 = v99 + v101 + 1;
                        }
LABEL_205:
                        BOOL v76 = __OFADD__(a5++, 1LL);
                        if (!v76)
                        {
                          unint64_t v99 = v104 + 1;
                          goto LABEL_209;
                        }

uint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unsigned __int8 *, uint64_t, uint64_t), unint64_t a8, uint64_t (*a9)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t), uint64_t (*a10)(unint64_t, uint64_t))
{
  uint64_t v11 = v10;
  LOBYTE(v12) = a5;
  uint64_t v14 = a2;
  unint64_t v15 = a1;
  uint64_t v183 = a4;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }

    char v29 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
    if (v29 == 48)
    {
      if (v14 >= 1) {
        uint64_t v30 = 1LL;
      }
      else {
        uint64_t v30 = v14;
      }
      unint64_t v31 = v15;
      if (v14 < 2) {
        goto LABEL_175;
      }
      unint64_t v32 = v15 + v30;
      unsigned __int8 v33 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15 + v30);
      unsigned int v34 = v33;
    }

    else
    {
      unint64_t v31 = v15;
      if (v29 != 45)
      {
LABEL_275:
        __break(1u);
        goto LABEL_276;
      }

      if (v14 < 2)
      {
        unint64_t v63 = v15 - a3;
        if (v15 < a3 || a3 + v183 < v15) {
          goto LABEL_280;
        }
        if (a3 + v183 >= v15 + 1) {
          unint64_t v64 = v15 + 1;
        }
        else {
          unint64_t v64 = a3 + v183;
        }
        if (v64 <= a3)
        {
          uint64_t v73 = 0LL;
          uint64_t v67 = 1LL;
        }

        else
        {
          unint64_t v65 = v183 + a3;
          uint64_t v66 = -(uint64_t)a3;
          uint64_t v67 = 1LL;
          unint64_t v175 = v15 - a3;
          unint64_t v180 = v183 + a3;
          uint64_t v184 = -(uint64_t)a3;
          do
          {
            uint64_t v68 = 0LL;
            uint64_t v69 = 0LL;
            unint64_t v70 = v65 - a3;
            unint64_t v71 = v66 + a3;
            while (1)
            {
              int v72 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v69);
              if (v72 == 10)
              {
                BOOL v54 = __OFADD__(v67++, 1LL);
                uint64_t v66 = v184;
                if (v54) {
                  goto LABEL_284;
                }
                a3 += v69 + 1;
                goto LABEL_104;
              }

              if (v72 == 13) {
                break;
              }
              uint64_t v73 = v69 + 1;
              if (__OFADD__(v69, 1LL)) {
                goto LABEL_266;
              }
              ++v69;
              --v68;
              if (a3 + v69 >= v64) {
                goto LABEL_106;
              }
            }

            uint64_t v74 = a3 + v69;
            uint64_t v66 = v184;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v69 + 1, v15)) {
              goto LABEL_102;
            }
LABEL_102:
            BOOL v54 = __OFADD__(v67++, 1LL);
            if (v54) {
              goto LABEL_285;
            }
            a3 = v74 + 1;
LABEL_104:
            unint64_t v65 = v180;
          }

          while (a3 < v64);
          uint64_t v73 = 0LL;
LABEL_106:
          unint64_t v63 = v175;
        }

        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v92 = 0xD000000000000010LL;
        *(void *)(v92 + 8) = 0x80000001839CB4F0LL;
        *(void *)(v92 + 16) = 45LL;
        *(void *)(v92 + 24) = v67;
        *(void *)(v92 + 32) = v73;
        *(void *)(v92 + 40) = v63;
        *(_BYTE *)(v92 + 48) = 1;
        return swift_willThrow();
      }

      unint64_t v46 = v15 + 1;
      unsigned __int8 v47 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15 + 1);
      if (v47 != 48)
      {
        unsigned __int8 v78 = v47;
        if ((v47 - 58) < 0xF7u)
        {
          if (!specialized static Comparable.<= infix(_:_:)(a3, v15 + 1)) {
            goto LABEL_291;
          }
          if (!specialized static Comparable.<= infix(_:_:)(v15 + 1, a3 + v183))
          {
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
            goto LABEL_295;
          }

          unint64_t v79 = specialized min<A>(_:_:)(v15 + 2, a3 + v183);
          if (v79 <= a3)
          {
            uint64_t v90 = 0LL;
            uint64_t v83 = 1LL;
            goto LABEL_234;
          }

          unint64_t v80 = v79;
          unint64_t v81 = v183 + a3;
          uint64_t v82 = -(uint64_t)a3;
          uint64_t v83 = 1LL;
          unint64_t v84 = a3;
          unsigned __int8 v170 = v78;
          unint64_t v176 = v183 + a3;
          while (1)
          {
LABEL_117:
            uint64_t v185 = v83;
            uint64_t v85 = 0LL;
            uint64_t v86 = 0LL;
            unint64_t v87 = v81 - v84;
            unint64_t v88 = v82 + v84;
            while (1)
            {
              int v89 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v84 + v86);
              if (v89 == 10) {
                break;
              }
              if (v89 == 13)
              {
                uint64_t v91 = v84 + v86;
                if (specialized static Comparable.<= infix(_:_:)(v84 + v86 + 1, v46))
                {
                  if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  v84 + v86 + 1) == 10) {
                    uint64_t v91 = v84 + v86 + 1;
                  }
                }

                uint64_t v83 = v185 + 1;
                if (__OFADD__(v185, 1LL)) {
                  goto LABEL_297;
                }
                unint64_t v84 = v91 + 1;
                unint64_t v81 = v176;
                uint64_t v82 = -(uint64_t)a3;
                if (v91 + 1 >= v80) {
                  goto LABEL_135;
                }
                goto LABEL_117;
              }

              uint64_t v90 = v86 + 1;
              if (__OFADD__(v86, 1LL)) {
                goto LABEL_273;
              }
              ++v86;
              --v85;
              if (v84 + v86 >= v80)
              {
                unsigned __int8 v78 = v170;
                uint64_t v83 = v185;
LABEL_234:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v149 = 0xD000000000000013LL;
                *(void *)(v149 + 8) = 0x80000001839CB5E0LL;
                *(void *)(v149 + 16) = v78;
                *(void *)(v149 + 24) = v83;
                *(void *)(v149 + 32) = v90;
                *(void *)(v149 + 40) = v46 - a3;
                *(_BYTE *)(v149 + 48) = 1;
                return swift_willThrow();
              }
            }

            uint64_t v82 = -(uint64_t)a3;
            uint64_t v83 = v185 + 1;
            if (__OFADD__(v185, 1LL)) {
              goto LABEL_296;
            }
            v84 += v86 + 1;
            unint64_t v81 = v176;
            if (v84 >= v80)
            {
LABEL_135:
              uint64_t v90 = 0LL;
              unsigned __int8 v78 = v170;
              goto LABEL_234;
            }
          }
        }

        ++v15;
        goto LABEL_175;
      }

      ++v15;
      unint64_t v32 = v31 + 2;
      if (specialized Collection.isEmpty.getter(v31 + 2, v14 - 2)
        || (unsigned __int8 v33 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v32),
            unsigned int v34 = v33,
            v33 - 46 <= 0x37)
        && ((1LL << (v33 - 46)) & 0x80000000800001LL) != 0)
      {
LABEL_175:
        unint64_t v24 = v15;
        unint64_t v15 = v31;
        if ((a6 & 1) != 0 && v24 + 1 < v31 + v14)
        {
          uint64_t v117 = 0LL;
          while (1)
          {
            uint64_t v118 = v24 + v117;
            if (~v24 + v14 + v15 == ++v117) {
              goto LABEL_186;
            }
          }

          if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v24 + v117) - 58) <= 0xF5u)
          {
            unsigned __int8 v119 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v118 + 1);
            unint64_t v120 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v118 + 1, a3, v183);
            uint64_t v122 = v121;
            uint64_t v124 = v123;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v60 = xmmword_1837301C0;
            *(void *)(v60 + 16) = v119;
            *(void *)(v60 + 24) = v120;
            *(void *)(v60 + 32) = v122;
            goto LABEL_185;
          }
        }

{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  char v26;
  char v27;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 v33;
  unsigned int v34;
  unsigned __int8 v36;
  __int16 v37;
  unint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  unint64_t v46;
  unsigned __int8 v47;
  unint64_t v48;
  uint64_t (*v49)(unsigned __int8 *, uint64_t, uint64_t);
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  uint64_t result;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 v94;
  unint64_t v95;
  unsigned __int8 v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unsigned __int8 v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  unsigned __int8 v140;
  char *v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int8 v152;
  uint64_t v153;
  uint64_t v154;
  __int16 v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  Swift::String v162;
  unsigned __int8 v163;
  unsigned int v164;
  Swift::String v165;
  Swift::String v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (*v171)(unsigned __int8 *, uint64_t, uint64_t);
  unsigned __int8 v172;
  unsigned __int8 v173;
  unsigned __int8 v174;
  uint64_t (*v175)(unsigned __int8 *, uint64_t, uint64_t);
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unsigned __int8 v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v11 = v10;
  LOBYTE(v12) = a5;
  uint64_t v14 = a2;
  unint64_t v15 = a1;
  uint64_t v185 = a4;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }

    char v29 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
    if (v29 == 48)
    {
      if (v14 >= 1) {
        uint64_t v30 = 1LL;
      }
      else {
        uint64_t v30 = v14;
      }
      unint64_t v31 = v15;
      if (v14 < 2) {
        goto LABEL_175;
      }
      unint64_t v32 = v15 + v30;
      unsigned __int8 v33 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15 + v30);
      unsigned int v34 = v33;
    }

    else
    {
      unint64_t v31 = v15;
      if (v29 != 45)
      {
LABEL_275:
        __break(1u);
        goto LABEL_276;
      }

      if (v14 < 2)
      {
        unint64_t v64 = v15 - a3;
        if (v15 < a3 || a3 + v185 < v15) {
          goto LABEL_280;
        }
        if (a3 + v185 >= v15 + 1) {
          unint64_t v65 = v15 + 1;
        }
        else {
          unint64_t v65 = a3 + v185;
        }
        if (v65 <= a3)
        {
          uint64_t v74 = 0LL;
          uint64_t v68 = 1LL;
        }

        else
        {
          uint64_t v66 = v185 + a3;
          uint64_t v67 = -(uint64_t)a3;
          uint64_t v68 = 1LL;
          unint64_t v177 = v15 - a3;
          unint64_t v182 = v185 + a3;
          uint64_t v186 = -(uint64_t)a3;
          do
          {
            uint64_t v69 = 0LL;
            unint64_t v70 = 0LL;
            unint64_t v71 = v66 - a3;
            int v72 = v67 + a3;
            while (1)
            {
              uint64_t v73 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v70);
              if (v73 == 10)
              {
                BOOL v54 = __OFADD__(v68++, 1LL);
                uint64_t v67 = v186;
                if (v54) {
                  goto LABEL_284;
                }
                a3 += v70 + 1;
                goto LABEL_104;
              }

              if (v73 == 13) {
                break;
              }
              uint64_t v74 = v70 + 1;
              if (__OFADD__(v70, 1LL)) {
                goto LABEL_266;
              }
              ++v70;
              --v69;
              if (a3 + v70 >= v65) {
                goto LABEL_106;
              }
            }

            __int16 v75 = a3 + v70;
            uint64_t v67 = v186;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v70 + 1, v15)) {
              goto LABEL_102;
            }
LABEL_102:
            BOOL v54 = __OFADD__(v68++, 1LL);
            if (v54) {
              goto LABEL_285;
            }
            a3 = v75 + 1;
LABEL_104:
            uint64_t v66 = v182;
          }

          while (a3 < v65);
          uint64_t v74 = 0LL;
LABEL_106:
          unint64_t v64 = v177;
        }

        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)unsigned __int8 v93 = 0xD000000000000010LL;
        *(void *)(v93 + 8) = 0x80000001839CB4F0LL;
        *(void *)(v93 + 16) = 45LL;
        *(void *)(v93 + 24) = v68;
        *(void *)(v93 + 32) = v74;
        *(void *)(v93 + 40) = v64;
        *(_BYTE *)(v93 + 48) = 1;
        return swift_willThrow();
      }

      unint64_t v46 = v15 + 1;
      unsigned __int8 v47 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15 + 1);
      if (v47 != 48)
      {
        unint64_t v79 = v47;
        if ((v47 - 58) < 0xF7u)
        {
          if (!specialized static Comparable.<= infix(_:_:)(a3, v15 + 1)) {
            goto LABEL_291;
          }
          if (!specialized static Comparable.<= infix(_:_:)(v15 + 1, a3 + v185))
          {
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
            goto LABEL_295;
          }

          unint64_t v80 = specialized min<A>(_:_:)(v15 + 2, a3 + v185);
          if (v80 <= a3)
          {
            uint64_t v91 = 0LL;
            unint64_t v84 = 1LL;
            goto LABEL_234;
          }

          unint64_t v81 = v80;
          uint64_t v82 = v185 + a3;
          uint64_t v83 = -(uint64_t)a3;
          unint64_t v84 = 1LL;
          uint64_t v85 = a3;
          unsigned __int8 v172 = v79;
          unint64_t v178 = v185 + a3;
          while (1)
          {
LABEL_117:
            uint64_t v187 = v84;
            uint64_t v86 = 0LL;
            unint64_t v87 = 0LL;
            unint64_t v88 = v82 - v85;
            int v89 = v83 + v85;
            while (1)
            {
              uint64_t v90 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v85 + v87);
              if (v90 == 10) {
                break;
              }
              if (v90 == 13)
              {
                uint64_t v92 = v85 + v87;
                if (specialized static Comparable.<= infix(_:_:)(v85 + v87 + 1, v46))
                {
                  if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  v85 + v87 + 1) == 10) {
                    uint64_t v92 = v85 + v87 + 1;
                  }
                }

                unint64_t v84 = v187 + 1;
                if (__OFADD__(v187, 1LL)) {
                  goto LABEL_297;
                }
                uint64_t v85 = v92 + 1;
                uint64_t v82 = v178;
                uint64_t v83 = -(uint64_t)a3;
                if (v92 + 1 >= v81) {
                  goto LABEL_135;
                }
                goto LABEL_117;
              }

              uint64_t v91 = v87 + 1;
              if (__OFADD__(v87, 1LL)) {
                goto LABEL_273;
              }
              ++v87;
              --v86;
              if (v85 + v87 >= v81)
              {
                unint64_t v79 = v172;
                unint64_t v84 = v187;
LABEL_234:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v151 = 0xD000000000000013LL;
                *(void *)(v151 + 8) = 0x80000001839CB5E0LL;
                *(void *)(v151 + 16) = v79;
                *(void *)(v151 + 24) = v84;
                *(void *)(v151 + 32) = v91;
                *(void *)(v151 + 40) = v46 - a3;
                *(_BYTE *)(v151 + 48) = 1;
                return swift_willThrow();
              }
            }

            uint64_t v83 = -(uint64_t)a3;
            unint64_t v84 = v187 + 1;
            if (__OFADD__(v187, 1LL)) {
              goto LABEL_296;
            }
            v85 += v87 + 1;
            uint64_t v82 = v178;
            if (v85 >= v81)
            {
LABEL_135:
              uint64_t v91 = 0LL;
              unint64_t v79 = v172;
              goto LABEL_234;
            }
          }
        }

        ++v15;
        goto LABEL_175;
      }

      ++v15;
      unint64_t v32 = v31 + 2;
      if (specialized Collection.isEmpty.getter(v31 + 2, v14 - 2)
        || (unsigned __int8 v33 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v32),
            unsigned int v34 = v33,
            v33 - 46 <= 0x37)
        && ((1LL << (v33 - 46)) & 0x80000000800001LL) != 0)
      {
LABEL_175:
        unint64_t v24 = v15;
        unint64_t v15 = v31;
        if ((a6 & 1) != 0 && v24 + 1 < v31 + v14)
        {
          uint64_t v118 = 0LL;
          while (1)
          {
            unsigned __int8 v119 = v24 + v118;
            if (~v24 + v14 + v15 == ++v118) {
              goto LABEL_186;
            }
          }

          if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v24 + v118) - 58) <= 0xF5u)
          {
            unint64_t v120 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v119 + 1);
            uint64_t v121 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v119 + 1, a3, v185);
            uint64_t v123 = v122;
            unint64_t v125 = v124;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)char v61 = xmmword_1837301C0;
            *(void *)(v61 + 16) = v120;
            *(void *)(v61 + 24) = v121;
            *(void *)(v61 + 32) = v123;
            goto LABEL_185;
          }
        }

char *specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( __int16 a1, char *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  LODWORD(v8) = v6;
  LOWORD(v14) = a1;
  uint64_t v125 = *MEMORY[0x1895F89C0];
  v116[0] = 0LL;
  double v15 = _stringshims_strtod_l(a2, v116, 0LL);
  if (v116[0]) {
    BOOL v16 = &a2[a3] == v116[0];
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    double v28 = v15;
    if (fabs(v28) < 9.00719925e15) {
      return v116[0];
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v119);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v119, (uint64_t)&v120);
  if (v124 != 1) {
    goto LABEL_43;
  }
  uint64_t v17 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  char v19 = (unsigned __int8 *)v17;
  unint64_t v20 = v18;
  unint64_t v21 = (unint64_t)&v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      unint64_t v45 = (unint64_t)v17;
LABEL_84:
      if (v45 >= v21) {
        goto LABEL_259;
      }
      char v56 = 0;
      unint64_t v57 = v45 - (void)v19;
      char v58 = 1;
      char v59 = 1;
      while (2)
      {
        uint64_t v60 = 0LL;
        uint64_t v61 = (uint64_t)&v19[v20 - v45];
        while (1)
        {
          if ((uint64_t)(v45 - (void)v19 + v60) < 0 || (BOOL v31 = v61 < 1, --v61, v31))
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            unint64_t v80 = v45 + v60;
            if (v45 + v60 < a4) {
              goto LABEL_266;
            }
            unint64_t v81 = a4 + a5;
            if (a4 + a5 < v80) {
              goto LABEL_266;
            }
            if (v81 >= v45 + v60 + 1) {
              unint64_t v81 = v45 + v60 + 1;
            }
            if (v81 <= a4)
            {
              a3 = 0LL;
              a5 = 1LL;
            }

            else
            {
              unint64_t v82 = a5 + a4;
              a5 = 1LL;
              unint64_t v83 = a4;
              do
              {
                uint64_t v84 = 0LL;
                uint64_t v85 = 0LL;
                unint64_t v86 = v82 - v83;
                while (1)
                {
                  int v87 = *(unsigned __int8 *)(v83 + v85);
                  if (v87 == 10)
                  {
                    BOOL v74 = __OFADD__(a5++, 1LL);
                    if (v74) {
                      goto LABEL_271;
                    }
                    v83 += v85 + 1;
                    goto LABEL_171;
                  }

                  if (v87 == 13) {
                    break;
                  }
                  a3 = v85 + 1;
                  if (__OFADD__(v85, 1LL)) {
                    goto LABEL_251;
                  }
                  ++v85;
                  --v84;
                  if (v83 + v85 >= v81) {
                    goto LABEL_211;
                  }
                }

                uint64_t v88 = v83 + v85;
                if (v80 >= v83 + v85 + 1)
                {
                  if (*(_BYTE *)(v88 + 1) == 10) {
                    uint64_t v88 = v83 + v85 + 1;
                  }
                }

                BOOL v74 = __OFADD__(a5++, 1LL);
                if (v74) {
                  goto LABEL_272;
                }
                unint64_t v83 = v88 + 1;
LABEL_171:
                ;
              }

              while (v83 < v81);
              a3 = 0LL;
            }

uint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( int a1, char *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  LODWORD(v9) = v6;
  LODWORD(v15) = a1;
  uint64_t v127 = *MEMORY[0x1895F89C0];
  v118[0] = 0LL;
  double v16 = _stringshims_strtod_l(a2, v118, 0LL);
  if (v118[0]) {
    BOOL v17 = &a2[a3] == v118[0];
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    double v28 = v16;
    uint64_t v29 = specialized UInt128.init<A>(exactly:)(v16);
    if ((v30 & 1) != 0) {
      goto LABEL_44;
    }
    if (fabs(v28) < 9.00719925e15) {
      return v29;
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v121);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v121, (uint64_t)&v122);
  if (v126 != 1) {
    goto LABEL_43;
  }
  uint64_t v18 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  unint64_t v20 = (unsigned __int8 *)v18;
  unint64_t v7 = v19;
  unint64_t v21 = (unint64_t)&v18[v19];
  if ((v15 & 1) == 0)
  {
    if (v19 <= 0)
    {
      unint64_t v47 = (unint64_t)v18;
LABEL_82:
      if (v47 >= v21) {
        goto LABEL_257;
      }
      char v57 = 0;
      unint64_t v58 = v47 - (void)v20;
      char v59 = 1;
      char v60 = 1;
      while (2)
      {
        uint64_t v61 = 0LL;
        uint64_t v62 = (uint64_t)&v20[v7 - v47];
        while (1)
        {
          if ((uint64_t)(v47 - (void)v20 + v61) < 0 || (BOOL v33 = v62 < 1, --v62, v33))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            unint64_t v82 = v47 + v61;
            if (v47 + v61 < a4) {
              goto LABEL_264;
            }
            unint64_t v83 = a4 + a5;
            if (a4 + a5 < v82) {
              goto LABEL_264;
            }
            if (v83 >= v47 + v61 + 1) {
              unint64_t v83 = v47 + v61 + 1;
            }
            if (v83 <= a4)
            {
              a3 = 0LL;
              a5 = 1LL;
            }

            else
            {
              unint64_t v84 = a5 + a4;
              a5 = 1LL;
              unint64_t v85 = a4;
              do
              {
                uint64_t v86 = 0LL;
                uint64_t v87 = 0LL;
                unint64_t v88 = v84 - v85;
                while (1)
                {
                  int v89 = *(unsigned __int8 *)(v85 + v87);
                  if (v89 == 10)
                  {
                    BOOL v75 = __OFADD__(a5++, 1LL);
                    if (v75) {
                      goto LABEL_269;
                    }
                    v85 += v87 + 1;
                    goto LABEL_169;
                  }

                  if (v89 == 13) {
                    break;
                  }
                  a3 = v87 + 1;
                  if (__OFADD__(v87, 1LL)) {
                    goto LABEL_249;
                  }
                  ++v87;
                  --v86;
                  if (v85 + v87 >= v83) {
                    goto LABEL_209;
                  }
                }

                uint64_t v90 = v85 + v87;
                if (v82 >= v85 + v87 + 1)
                {
                  if (*(_BYTE *)(v90 + 1) == 10) {
                    uint64_t v90 = v85 + v87 + 1;
                  }
                }

                BOOL v75 = __OFADD__(a5++, 1LL);
                if (v75) {
                  goto LABEL_270;
                }
                unint64_t v85 = v90 + 1;
LABEL_169:
                ;
              }

              while (v85 < v83);
              a3 = 0LL;
            }

uint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  if ((a5 & 1) != 0)
  {
    uint64_t result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v6)
    {
      unint64_t v14 = (char *)result;
      __int16 v15 = v13;
      uint64_t result = specialized _parseJSON5Integer<A>(_:isHex:)( (unsigned __int8 *)__s1,  a2,  v13 & 1,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
      if ((result & 0x100000000LL) != 0)
      {
        if ((v15 & 0x100) != 0)
        {
          uint64_t v16 = static String._fromUTF8Repairing(_:)();
          uint64_t v18 = v17;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v19 = v16;
          *(void *)(v19 + 8) = v18;
          *(_OWORD *)(v19 + 16) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(_BYTE *)(v19 + 48) = 11;
          return swift_willThrow();
        }

        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v14,  (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:),  (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }

  else
  {
    uint64_t result = (uint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)( (unsigned __int8 *)__s1,  a2,  a6 & 1,  a3,  a4);
    if (!v6)
    {
      unint64_t v14 = (char *)result;
      uint64_t result = specialized _parseInteger<A>(_:)((unsigned __int8 *)__s1, a2);
      if ((result & 0x100000000LL) != 0) {
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v14,  (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:),  (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }

  return result;
}

{
  uint64_t v6;
  uint64_t result;
  __int16 v13;
  char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  if ((a5 & 1) != 0)
  {
    uint64_t result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v6)
    {
      unint64_t v14 = (char *)result;
      __int16 v15 = v13;
      uint64_t result = specialized _parseJSON5Integer<A>(_:isHex:)( (unsigned __int8 *)__s1,  a2,  v13 & 1,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
      if ((result & 0x100000000LL) != 0)
      {
        if ((v15 & 0x100) != 0)
        {
          uint64_t v16 = static String._fromUTF8Repairing(_:)();
          uint64_t v18 = v17;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v19 = v16;
          *(void *)(v19 + 8) = v18;
          *(_OWORD *)(v19 + 16) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(_BYTE *)(v19 + 48) = 11;
          return swift_willThrow();
        }

        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v14,  (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:),  (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }

  else
  {
    uint64_t result = (uint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)( (unsigned __int8 *)__s1,  a2,  a6 & 1,  a3,  a4);
    if (!v6)
    {
      unint64_t v14 = (char *)result;
      uint64_t result = specialized _parseInteger<A>(_:)((unsigned __int8 *)__s1, a2);
      if ((result & 0x100000000LL) != 0) {
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v14,  (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:),  (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }

  return result;
}

char *specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( char a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6, uint64_t (*a7)(char **))
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  double v28 = 0LL;
  double v14 = _stringshims_strtod_l(a2, &v28, 0LL);
  __int16 v15 = &a2[a3];
  if (v28) {
    BOOL v16 = v15 == v28;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    double v21 = v14;
    if ((a7(&v28) & 1) == 0 || (v29 & 1) != 0) {
      goto LABEL_14;
    }
    if (fabs(v21) < 9.00719925e15) {
      return v28;
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v30);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v30, (uint64_t)v33);
  if (v35 == 1)
  {
    uint64_t v17 = v15 - a6;
    int64_t v18 = (a6 - a2) | (v15 - a6);
    if ((a1 & 1) != 0)
    {
      if ((v18 & 0x8000000000000000LL) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v17, a4, a5, (uint64_t)v31);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        unint64_t v20 = v31;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v20, v19);
        return (char *)swift_willThrow();
      }

      __break(1u);
    }

    else if ((v18 & 0x8000000000000000LL) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v17, a4, a5, (uint64_t)v32);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      unint64_t v20 = v32;
      goto LABEL_17;
    }

    __break(1u);
  }

  uint64_t result = (char *)specialized FixedWidthInteger.init(_:)(v33[0], v33[1], v34);
  if ((v23 & 1) == 0) {
    return result;
  }
LABEL_14:
  uint64_t v24 = static String._fromUTF8Repairing(_:)();
  uint64_t v26 = v25;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v27 = v24;
  *(void *)(v27 + 8) = v26;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_BYTE *)(v27 + 48) = 11;
  return (char *)swift_willThrow();
}

char *specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t), uint64_t (*a8)(char *, uint64_t), uint64_t (*a9)(char **))
{
  if ((a5 & 1) != 0)
  {
    uint64_t result = (char *)specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v9)
    {
      int64_t v18 = result;
      __int16 v19 = v17;
      uint64_t result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)(__s1, a2, v17 & 1, a7);
      if ((v20 & 1) != 0)
      {
        if ((v19 & 0x100) != 0)
        {
          uint64_t v21 = static String._fromUTF8Repairing(_:)();
          uint64_t v23 = v22;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v24 = v21;
          *(void *)(v24 + 8) = v23;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_BYTE *)(v24 + 48) = 11;
          return (char *)swift_willThrow();
        }

        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v18,  a9);
      }
    }
  }

  else
  {
    uint64_t result = (char *)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)( (unsigned __int8 *)__s1,  a2,  a6 & 1,  a3,  a4);
    if (!v9)
    {
      int64_t v18 = result;
      uint64_t result = (char *)a8(__s1, a2);
      if ((v26 & 1) != 0) {
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v18,  a9);
      }
    }
  }

  return result;
}

char *specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  if ((a5 & 1) != 0)
  {
    uint64_t result = (char *)specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v6)
    {
      double v14 = result;
      __int16 v15 = v13;
      uint64_t result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)( (unsigned __int8 *)__s1,  a2,  v13 & 1,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
      if ((v16 & 1) != 0)
      {
        if ((v15 & 0x100) != 0)
        {
          uint64_t v17 = static String._fromUTF8Repairing(_:)();
          uint64_t v19 = v18;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v20 = v17;
          *(void *)(v20 + 8) = v19;
          *(_OWORD *)(v20 + 16) = 0u;
          *(_OWORD *)(v20 + 32) = 0u;
          *(_BYTE *)(v20 + 48) = 11;
          return (char *)swift_willThrow();
        }

        return (char *)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v14,  (uint64_t (*)(uint64_t))specialized Int128.init<A>(exactly:),  (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }

  else
  {
    uint64_t result = (char *)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)( (unsigned __int8 *)__s1,  a2,  a6 & 1,  a3,  a4);
    if (!v6)
    {
      double v14 = result;
      uint64_t result = (char *)specialized _parseInteger<A>(_:)((unsigned __int8 *)__s1, a2);
      if ((v21 & 1) != 0) {
        return (char *)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v14,  (uint64_t (*)(uint64_t))specialized Int128.init<A>(exactly:),  (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }

  return result;
}

{
  uint64_t v6;
  char *result;
  __int16 v13;
  char *v14;
  __int16 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  if ((a5 & 1) != 0)
  {
    uint64_t result = (char *)specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v6)
    {
      double v14 = result;
      __int16 v15 = v13;
      uint64_t result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)( (unsigned __int8 *)__s1,  a2,  v13 & 1,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
      if ((v16 & 1) != 0)
      {
        if ((v15 & 0x100) != 0)
        {
          uint64_t v17 = static String._fromUTF8Repairing(_:)();
          uint64_t v19 = v18;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v20 = v17;
          *(void *)(v20 + 8) = v19;
          *(_OWORD *)(v20 + 16) = 0u;
          *(_OWORD *)(v20 + 32) = 0u;
          *(_BYTE *)(v20 + 48) = 11;
          return (char *)swift_willThrow();
        }

        return (char *)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v14,  (uint64_t (*)(uint64_t))specialized UInt128.init<A>(exactly:),  (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }

  else
  {
    uint64_t result = (char *)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)( (unsigned __int8 *)__s1,  a2,  a6 & 1,  a3,  a4);
    if (!v6)
    {
      double v14 = result;
      uint64_t result = (char *)specialized _parseInteger<A>(_:)((unsigned __int8 *)__s1, a2);
      if ((v21 & 1) != 0) {
        return (char *)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v14,  (uint64_t (*)(uint64_t))specialized UInt128.init<A>(exactly:),  (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:));
      }
    }
  }

  return result;
}

char *specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( char a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  char v26 = 0LL;
  double v12 = _stringshims_strtod_l(a2, &v26, 0LL);
  __int16 v13 = &a2[a3];
  if (v26) {
    BOOL v14 = v13 == v26;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    double v19 = v12;
    if (fabs(v19) < 9.00719925e15) {
      return v26;
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v28);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v28, (uint64_t)v31);
  if (v33 == 1)
  {
    uint64_t v15 = v13 - a6;
    int64_t v16 = (a6 - a2) | (v13 - a6);
    if ((a1 & 1) != 0)
    {
      if ((v16 & 0x8000000000000000LL) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v15, a4, a5, (uint64_t)v29);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        uint64_t v18 = v29;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v18, v17);
        return (char *)swift_willThrow();
      }

      __break(1u);
    }

    else if ((v16 & 0x8000000000000000LL) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v15, a4, a5, (uint64_t)v30);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v18 = v30;
      goto LABEL_17;
    }

    __break(1u);
  }

  uint64_t result = (char *)specialized FixedWidthInteger.init(_:)(v31[0], v31[1], v32);
  if ((v21 & 1) == 0) {
    return result;
  }
LABEL_14:
  uint64_t v22 = static String._fromUTF8Repairing(_:)();
  uint64_t v24 = v23;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v25 = v22;
  *(void *)(v25 + 8) = v24;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_BYTE *)(v25 + 48) = 11;
  return (char *)swift_willThrow();
}

uint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( char a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6, uint64_t (*a7)(char **), uint64_t (*a8)(void, void, void))
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  char v29 = 0LL;
  double v15 = _stringshims_strtod_l(a2, &v29, 0LL);
  int64_t v16 = &a2[a3];
  if (v29) {
    BOOL v17 = v16 == v29;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    double v22 = v15;
    if ((a7(&v29) & 1) == 0 || (BYTE1(v29) & 1) != 0) {
      goto LABEL_14;
    }
    if (fabs(v22) < 9.00719925e15) {
      return v29;
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v30);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v30, (uint64_t)v33);
  if (v35 == 1)
  {
    uint64_t v18 = v16 - a6;
    int64_t v19 = (a6 - a2) | (v16 - a6);
    if ((a1 & 1) != 0)
    {
      if ((v19 & 0x8000000000000000LL) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v31);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        char v21 = v31;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v21, v20);
        return swift_willThrow();
      }

      __break(1u);
    }

    else if ((v19 & 0x8000000000000000LL) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v32);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      char v21 = v32;
      goto LABEL_17;
    }

    __break(1u);
  }

  uint64_t result = a8(v33[0], v33[1], v34);
  if ((result & 0x100) == 0) {
    return result;
  }
LABEL_14:
  uint64_t v24 = static String._fromUTF8Repairing(_:)();
  uint64_t v26 = v25;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v27 = v24;
  *(void *)(v27 + 8) = v26;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_BYTE *)(v27 + 48) = 11;
  return swift_willThrow();
}

{
  double v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  _BYTE *v21;
  double v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  _BYTE v30[40];
  _BYTE v31[56];
  _BYTE v32[56];
  void v33[2];
  unsigned int v34;
  char v35;
  uint64_t v36;
  uint64_t v36 = *MEMORY[0x1895F89C0];
  char v29 = 0LL;
  double v15 = _stringshims_strtod_l(a2, &v29, 0LL);
  int64_t v16 = &a2[a3];
  if (v29) {
    BOOL v17 = v16 == v29;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    double v22 = v15;
    if ((a7(&v29) & 1) == 0 || (BYTE2(v29) & 1) != 0) {
      goto LABEL_14;
    }
    if (fabs(v22) < 9.00719925e15) {
      return (unsigned __int16)v29;
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v30);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v30, (uint64_t)v33);
  if (v35 == 1)
  {
    uint64_t v18 = v16 - a6;
    int64_t v19 = (a6 - a2) | (v16 - a6);
    if ((a1 & 1) != 0)
    {
      if ((v19 & 0x8000000000000000LL) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v31);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        char v21 = v31;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v21, v20);
        return swift_willThrow();
      }

      __break(1u);
    }

    else if ((v19 & 0x8000000000000000LL) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v32);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      char v21 = v32;
      goto LABEL_17;
    }

    __break(1u);
  }

  uint64_t result = a8(v33[0], v33[1], v34);
  if ((result & 0x10000) == 0) {
    return result;
  }
LABEL_14:
  uint64_t v24 = static String._fromUTF8Repairing(_:)();
  uint64_t v26 = v25;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v27 = v24;
  *(void *)(v27 + 8) = v26;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_BYTE *)(v27 + 48) = 11;
  return swift_willThrow();
}

{
  double v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  _BYTE *v21;
  double v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  _BYTE v30[40];
  _BYTE v31[56];
  _BYTE v32[56];
  void v33[2];
  unsigned int v34;
  char v35;
  uint64_t v36;
  uint64_t v36 = *MEMORY[0x1895F89C0];
  char v29 = 0LL;
  double v15 = _stringshims_strtod_l(a2, &v29, 0LL);
  int64_t v16 = &a2[a3];
  if (v29) {
    BOOL v17 = v16 == v29;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    double v22 = v15;
    if ((a7(&v29) & 1) == 0 || (BYTE4(v29) & 1) != 0) {
      goto LABEL_14;
    }
    if (fabs(v22) < 9.00719925e15) {
      return v29;
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v30);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v30, (uint64_t)v33);
  if (v35 == 1)
  {
    uint64_t v18 = v16 - a6;
    int64_t v19 = (a6 - a2) | (v16 - a6);
    if ((a1 & 1) != 0)
    {
      if ((v19 & 0x8000000000000000LL) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v31);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        char v21 = v31;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v21, v20);
        return swift_willThrow();
      }

      __break(1u);
    }

    else if ((v19 & 0x8000000000000000LL) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v32);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      char v21 = v32;
      goto LABEL_17;
    }

    __break(1u);
  }

  uint64_t result = a8(v33[0], v33[1], v34);
  if ((result & 0x100000000LL) == 0) {
    return result;
  }
LABEL_14:
  uint64_t v24 = static String._fromUTF8Repairing(_:)();
  uint64_t v26 = v25;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v27 = v24;
  *(void *)(v27 + 8) = v26;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_BYTE *)(v27 + 48) = 11;
  return swift_willThrow();
}

uint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(char *, uint64_t, void), uint64_t (*a8)(char *, uint64_t), uint64_t (*a9)(char **), uint64_t (*a10)(void, void, void))
{
  if ((a5 & 1) != 0)
  {
    uint64_t result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v10)
    {
      int64_t v19 = (char *)result;
      __int16 v20 = v18;
      uint64_t result = a7(__s1, a2, v18 & 1);
      if ((result & 0x100) != 0)
      {
        if ((v20 & 0x100) != 0)
        {
          uint64_t v21 = static String._fromUTF8Repairing(_:)();
          uint64_t v23 = v22;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v24 = v21;
          *(void *)(v24 + 8) = v23;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_BYTE *)(v24 + 48) = 11;
          return swift_willThrow();
        }

        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v19,  a9,  a10);
      }
    }
  }

  else
  {
    uint64_t result = (uint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)( (unsigned __int8 *)__s1,  a2,  a6 & 1,  a3,  a4);
    if (!v10)
    {
      int64_t v19 = (char *)result;
      uint64_t result = a8(__s1, a2);
      if ((result & 0x100) != 0) {
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v19,  a9,  a10);
      }
    }
  }

  return result;
}

{
  uint64_t v10;
  uint64_t result;
  __int16 v18;
  char *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  if ((a5 & 1) != 0)
  {
    uint64_t result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v10)
    {
      int64_t v19 = (char *)result;
      __int16 v20 = v18;
      uint64_t result = a7(__s1, a2, v18 & 1);
      if ((result & 0x10000) != 0)
      {
        if ((v20 & 0x100) != 0)
        {
          uint64_t v21 = static String._fromUTF8Repairing(_:)();
          uint64_t v23 = v22;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v24 = v21;
          *(void *)(v24 + 8) = v23;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_BYTE *)(v24 + 48) = 11;
          return swift_willThrow();
        }

        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v19,  a9,  a10);
      }
    }
  }

  else
  {
    uint64_t result = (uint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)( (unsigned __int8 *)__s1,  a2,  a6 & 1,  a3,  a4);
    if (!v10)
    {
      int64_t v19 = (char *)result;
      uint64_t result = a8(__s1, a2);
      if ((result & 0x10000) != 0) {
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v19,  a9,  a10);
      }
    }
  }

  return result;
}

char *specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unsigned __int8 *, uint64_t, uint64_t), uint64_t (*a8)(unsigned __int8 *, uint64_t, uint64_t), uint64_t (*a9)(char *, uint64_t))
{
  if ((a5 & 1) != 0)
  {
    uint64_t result = (char *)specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v9)
    {
      __int16 v19 = v18;
      uint64_t v26 = result;
      uint64_t result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, v18 & 1, a7, a8);
      if ((v20 & 1) != 0)
      {
        if ((v19 & 0x100) != 0)
        {
          uint64_t v21 = static String._fromUTF8Repairing(_:)();
          uint64_t v23 = v22;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v24 = v21;
          *(void *)(v24 + 8) = v23;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_BYTE *)(v24 + 48) = 11;
          return (char *)swift_willThrow();
        }

        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v26);
      }
    }
  }

  else
  {
    uint64_t result = (char *)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)( (unsigned __int8 *)__s1,  a2,  a6 & 1,  a3,  a4);
    if (!v9)
    {
      uint64_t v26 = result;
      uint64_t result = (char *)a9(__s1, a2);
      if ((v25 & 1) != 0) {
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( a5 & 1,  __s1,  a2,  a3,  a4,  v26);
      }
    }
  }

  return result;
}

uint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( char a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6, uint64_t (*a7)(uint64_t), uint64_t (*a8)(void, void, void))
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  unsigned int v32 = 0LL;
  double v16 = _stringshims_strtod_l(a2, &v32, 0LL);
  BOOL v17 = &a2[a3];
  if (v32) {
    BOOL v18 = v17 == v32;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18)
  {
    double v19 = v16;
    uint64_t result = a7(v15);
    if ((v21 & 1) != 0) {
      goto LABEL_13;
    }
    if (fabs(v19) < 9.00719925e15) {
      return result;
    }
  }

  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( (uint64_t)a2,  a3,  0x2EuLL,  0xE100000000000000LL,  1,  (uint64_t)v33);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v33, (uint64_t)v36);
  if (v38 == 1)
  {
    uint64_t v22 = v17 - a6;
    int64_t v23 = (a6 - a2) | (v17 - a6);
    if ((a1 & 1) != 0)
    {
      if ((v23 & 0x8000000000000000LL) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v22, a4, a5, (uint64_t)v34);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        char v25 = v34;
LABEL_16:
        outlined init with take of JSONError((uint64_t)v25, v24);
        return swift_willThrow();
      }

      __break(1u);
    }

    else if ((v23 & 0x8000000000000000LL) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v22, a4, a5, (uint64_t)v35);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      char v25 = v35;
      goto LABEL_16;
    }

    __break(1u);
  }

  uint64_t result = a8(v36[0], v36[1], v37);
  if ((v26 & 1) == 0) {
    return result;
  }
LABEL_13:
  uint64_t v27 = static String._fromUTF8Repairing(_:)();
  uint64_t v29 = v28;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v30 = v27;
  *(void *)(v30 + 8) = v29;
  *(_OWORD *)(v30 + 16) = 0u;
  *(_OWORD *)(v30 + 32) = 0u;
  *(_BYTE *)(v30 + 48) = 11;
  return swift_willThrow();
}

uint64_t (*specialized JSONDecoderImpl.decode(_:)( uint64_t (*result)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t)))(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    v4 = result;
    uint64_t v5 = v2 + 24 * v3;
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v8 = *(void *)(v1 + 160);
    uint64_t v9 = *(unsigned __int8 *)(v5 + 24);
    swift_retain();
    uint64_t v10 = v4(v6, v7, v9, v8, 0LL, 0LL, 0LL, 255LL);
    swift_release();
    return (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))v10;
  }

  else
  {
    __break(1u);
  }

  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    v4 = result;
    uint64_t v5 = v2 + 24 * v3;
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v8 = *(void *)(v1 + 160);
    uint64_t v9 = *(unsigned __int8 *)(v5 + 24);
    swift_retain();
    uint64_t v10 = v4(v6, v7, v9, v8, 0LL, 0LL, 0LL, 255LL);
    swift_release();
    return (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))v10;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (unint64_t)specialized _parseIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:),  (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:),  a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (unint64_t)specialized _parseIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:),  (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:),  a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t)specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t)specialized _parseIntegerDigits<A>(_:isNegative:),  (uint64_t)specialized _parseInteger<A>(_:),  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t)specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t)specialized static FixedWidthInteger._convert<A>(from:),  (uint64_t)specialized _parseInteger<A>(_:),  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t)specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t)specialized _parseIntegerDigits<A>(_:isNegative:),  (uint64_t)specialized _parseInteger<A>(_:),  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t)specialized _parseHexIntegerDigits<A>(_:isNegative:),  (uint64_t)specialized _parseInteger<A>(_:),  (uint64_t)specialized static FixedWidthInteger._convert<A>(from:),  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (unint64_t)specialized _parseIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:),  (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:),  a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:),  (unint64_t)specialized _parseIntegerDigits<A>(_:isNegative:),  (uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:),  (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:),  a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _WORD *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(unint64_t, uint64_t, uint64_t))specialized _parseJSON5Integer<A>(_:isHex:),  (uint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:),  (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:),  a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(unint64_t, uint64_t, uint64_t))specialized _parseJSON5Integer<A>(_:isHex:),  (uint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:),  (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:),  a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(unint64_t, uint64_t, uint64_t))specialized _parseJSON5Integer<A>(_:isHex:),  (uint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:),  (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:),  a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(unint64_t, uint64_t, uint64_t))specialized _parseJSON5Integer<A>(_:isHex:),  (uint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:),  (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:),  a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t *a9@<X8>)
{
  uint64_t result = a8(a1, a2, a3, a4, *(unsigned __int8 *)(v9 + 16), *(unsigned __int8 *)(v9 + 17), a5, a6, a7);
  if (!v10) {
    *a9 = result;
  }
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t result = a8(a1, a2, a3, a4, *(unsigned __int8 *)(v9 + 32), *(unsigned __int8 *)(v9 + 33), a5, a6, a7);
  if (!v10) {
    *a9 = result;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unsigned __int8 *, uint64_t, uint64_t)@<X4>, unint64_t a6@<X5>, uint64_t (*a7)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t)@<X6>, uint64_t (*a8)(unint64_t, uint64_t)@<X7>, uint64_t *a9@<X8>)
{
  uint64_t result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  *(_BYTE *)(v9 + 16),  *(_BYTE *)(v9 + 17),  a5,  a6,  a7,  a8);
  if (!v10)
  {
    *a9 = result;
    a9[1] = v13;
  }

  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unsigned __int8 *, uint64_t, uint64_t)@<X4>, unint64_t a6@<X5>, uint64_t (*a7)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t)@<X6>, uint64_t (*a8)(unint64_t, uint64_t)@<X7>, _DWORD *a9@<X8>)
{
  uint64_t result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  *(_BYTE *)(v9 + 16),  *(_BYTE *)(v9 + 17),  a5,  a6,  a7,  a8);
  if (!v10) {
    *a9 = result;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(unint64_t, uint64_t)@<X6>, _WORD *a8@<X8>)
{
  uint64_t result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  *(_BYTE *)(v8 + 16),  *(_BYTE *)(v8 + 17),  a5,  a6,  a7);
  if (!v9) {
    *a8 = result;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(unint64_t, uint64_t)@<X6>, _BYTE *a8@<X8>)
{
  uint64_t result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  *(_BYTE *)(v8 + 16),  *(_BYTE *)(v8 + 17),  a5,  a6,  a7);
  if (!v9) {
    *a8 = result;
  }
  return result;
}

void partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, float *a5@<X8>)
{
  float v8 = specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  *(_BYTE *)(v5 + 16),  *(_BYTE *)(v5 + 17));
  if (!v6) {
    *a5 = v8;
  }
}

uint64_t partial apply for closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)( unsigned __int8 *a1, uint64_t a2)
{
  return closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)( a1,  a2,  *(void *)(v2 + 24),  *(uint64_t (**)(unsigned __int8 *, uint64_t))(v2 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)( uint64_t result, uint64_t a2)
{
  if (result)
  {
    if ((a2 & 0x8000000000000000LL) == 0) {
      return (*(uint64_t (**)(void))(v2 + 24))();
    }
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t destroy for JSONDecoderImpl.KeyedContainer()
{
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for JSONDecoderImpl.KeyedContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for JSONDecoderImpl.KeyedContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for JSONDecoderImpl.KeyedContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for JSONDecoderImpl.UnkeyedContainer()
{
  return swift_release();
}

uint64_t initializeWithCopy for JSONDecoderImpl.UnkeyedContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for JSONDecoderImpl.UnkeyedContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for JSONDecoderImpl.UnkeyedContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

void *type metadata accessor for JSONDecoderImpl.UnkeyedContainer()
{
  return &unk_189C8F8C0;
}

uint64_t sub_1834426AC()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:),  a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _WORD *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(char *, uint64_t, void))specialized _parseJSON5Integer<A>(_:isHex:),  (uint64_t (*)(char *, uint64_t))specialized _parseInteger<A>(_:),  (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:),  (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:),  a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(char *, uint64_t, void))specialized _parseJSON5Integer<A>(_:isHex:),  (uint64_t (*)(char *, uint64_t))specialized _parseInteger<A>(_:),  (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:),  (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:),  a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(char *, uint64_t, void))specialized _parseJSON5Integer<A>(_:isHex:),  (uint64_t (*)(char *, uint64_t))specialized _parseInteger<A>(_:),  (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:),  (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:),  a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  (uint64_t (*)(char *, uint64_t, void))specialized _parseJSON5Integer<A>(_:isHex:),  (uint64_t (*)(char *, uint64_t))specialized _parseInteger<A>(_:),  (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:),  (uint64_t (*)(void, void, void))specialized FixedWidthInteger.init(_:),  a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = a5(a1, a2, a3, a4, *(unsigned __int8 *)(v6 + 32), *(unsigned __int8 *)(v6 + 33));
  if (!v7)
  {
    *a6 = result;
    a6[1] = v10;
  }

  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void)@<X4>, _DWORD *a6@<X8>)
{
  uint64_t result = a5(a1, a2, a3, a4, *(unsigned __int8 *)(v6 + 32), *(unsigned __int8 *)(v6 + 33));
  if (!v7) {
    *a6 = result;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(char *, uint64_t, void)@<X4>, uint64_t (*a6)(char *, uint64_t)@<X5>, uint64_t (*a7)(char **)@<X6>, uint64_t (*a8)(void, void, void)@<X7>, _WORD *a9@<X8>)
{
  uint64_t result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  *(_BYTE *)(v9 + 32),  *(_BYTE *)(v9 + 33),  a5,  a6,  a7,  a8);
  if (!v10) {
    *a9 = result;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>( char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(char *, uint64_t, void)@<X4>, uint64_t (*a6)(char *, uint64_t)@<X5>, uint64_t (*a7)(char **)@<X6>, uint64_t (*a8)(void, void, void)@<X7>, _BYTE *a9@<X8>)
{
  uint64_t result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  *(_BYTE *)(v9 + 32),  *(_BYTE *)(v9 + 33),  a5,  a6,  a7,  a8);
  if (!v10) {
    *a9 = result;
  }
  return result;
}

unint64_t partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)@<X0>( const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( a1,  a2,  *(void *)(v3 + 32),  *(void *)(v3 + 40),  *(void *)(v3 + 48),  *(void *)(v3 + 56),  *(void *)(v3 + 64),  *(void *)(v3 + 72));
  if (!v4)
  {
    *(_DWORD *)a3 = result;
    *(_BYTE *)(a3 + 4) = BYTE4(result) & 1;
  }

  return result;
}

void partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, float *a5@<X8>)
{
  float v8 = specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)( a1,  a2,  a3,  a4,  *(_BYTE *)(v5 + 32),  *(_BYTE *)(v5 + 33));
  if (!v6) {
    *a5 = v8;
  }
}

uint64_t closure #1 in JSONDecoder._decode<A>(_:from:)partial apply(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in JSONDecoder._decode<A>(_:from:)(a1, a2);
}

uint64_t closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)partial apply@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return partial apply for closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)(a1, a2, a3, a4, a5);
}

id Date.description.getter()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
  id v2 = objc_msgSend(v1, sel_description);

  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

id Date.description(with:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, *v1);
  if (v3)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 488))(ObjectType, v2);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  id v7 = objc_msgSend(v4, sel_descriptionWithLocale_, v6);

  swift_unknownObjectRelease();
  id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

uint64_t Data.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v10 = (char *)v25 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v8);
  BOOL v14 = (char *)v25 - v13;
  uint64_t v15 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))( (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v29, (uint64_t)&v31);
    uint64_t v17 = v33;
    uint64_t v18 = v34;
    __swift_project_boxed_opaque_existential_1(&v31, v33);
    (*(void (**)(__int128 *__return_ptr, _BYTE *(*)@<X0>(_BYTE *@<X0>, _BYTE *@<X1>, void *@<X8>), void, ValueMetadata *, uint64_t, uint64_t))(v18 + 8))( &v28,  closure #1 in Data.init<A>(_:),  0LL,  &type metadata for Data._Representation,  v17,  v18);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, a2);
    v29[0] = v28;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
  }

  else
  {
    uint64_t v26 = v11;
    uint64_t v27 = v15;
    uint64_t v30 = 0LL;
    memset(v29, 0, sizeof(v29));
    outlined destroy of ContiguousBytes?((uint64_t)v29);
    dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
    uint64_t v20 = v31;
    unint64_t v19 = v32;
    if (v32 >> 60 == 15)
    {
      v25[2] = v31;
      v25[0] = v32;
      uint64_t v21 = dispatch thunk of Sequence.underestimatedCount.getter();
      *(void *)&v29[0] = specialized Data._Representation.init(count:)(v21);
      *((void *)&v29[0] + 1) = v22;
      MEMORY[0x1895F8858](*(void *)&v29[0]);
      v25[-4] = a2;
      v25[-3] = a3;
      v25[1] = v23;
      v25[-2] = v23;
      Data._Representation.withUnsafeMutableBytes<A>(_:)();
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v14, v10, AssociatedTypeWitness);
      __asm { BR              X12 }
    }

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(a1, a2);
    *(void *)&v29[0] = v20;
    *((void *)&v29[0] + 1) = v19;
  }

  return *(void *)&v29[0];
}

void specialized Collection.firstIndex(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X9 }

uint64_t sub_183444F48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))((char *)&loc_183444FBC + dword_183445184[v25]))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a23,  v23 >> 40,  HIDWORD(v23),  v23 >> 24,  v23 >> 16,  v23 >> 8,  HIBYTE(v24));
}

uint64_t sub_183444FD0()
{
  if (v3 == v29) {
    return 0LL;
  }
  if (v5)
  {
    if (v5 != 1)
    {
      if (v3 >= *(void *)(v2 + 16))
      {
        if (v3 >= *(void *)(v2 + 24))
        {
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }

        uint64_t v8 = *(void *)(v4 + 16);
        if (v8)
        {
          uint64_t v13 = *(void *)(v4 + 40);
          BOOL v10 = __OFSUB__(v3, v13);
          uint64_t v11 = v3 - v13;
          if (!v10)
          {
LABEL_16:
            char v12 = *(_BYTE *)(v8 + v11);
            goto LABEL_17;
          }

uint64_t specialized MutableCollection.swapAt(_:_:)(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    __asm { BR              X12 }
  }

  return result;
}

uint64_t Data.init()()
{
  return 0LL;
}

uint64_t Data.count.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_183445428 + dword_18344546C[a2 >> 62]))(0LL);
}

uint64_t sub_183445438(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

void Data.append(_:count:)(uint64_t a1, uint64_t a2)
{
  if (a2) {
    Data._Representation.append(contentsOf:)();
  }
}

void specialized RangeReplaceableCollection.append(_:)()
{
  __asm { BR              X12 }

uint64_t sub_1834454D8()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
  uint64_t v4 = &protocol witness table for <A> CollectionOfOne<A>;
  LOBYTE(v2[0]) = v0;
  __swift_project_boxed_opaque_existential_1(v2, v3);
  Data._Representation.replaceSubrange(_:with:count:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

id Data.init(contentsOf:options:)(uint64_t a1, void *a2)
{
  return specialized Data.init(contentsOf:options:)(a1, a2);
}

uint64_t Data.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  char v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18[0] = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v15 = (char *)v18 - v14;
  v18[4] = a4;
  v18[5] = a5;
  v18[6] = a2;
  v18[7] = a3;
  v18[1] = a3;
  dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
  if (v19 != 1) {
    return v18[10];
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  uint64_t v16 = dispatch thunk of Sequence._copyContents(initializing:)();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  (*(void (**)(char *, uint64_t))(v18[0] + 8LL))(v15, AssociatedTypeWitness);
  if (v19 != 1)
  {
    __break(1u);
    return v18[10];
  }

  return v16;
}

uint64_t specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)( uint64_t a1, unint64_t a2, char *__dst, int64_t a4)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    if (__dst)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _StringGuts.copyUTF8(into:)();
      if ((v12 & 1) == 0)
      {
        uint64_t v9 = v11;
        swift_bridgeObjectRelease();
        return v9;
      }

      goto LABEL_19;
    }

void specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_183445948()
{
  uint64_t v6 = specialized RandomAccessCollection<>.distance(from:to:)((int)v4, v5, v4, v2);
  size_t v7 = specialized RandomAccessCollection<>.distance(from:to:)(v5, v3, v4, v2);
  if (!v0)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (!v1)
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x1834459B0LL);
  }

  return memcpy(v0, (const void *)(v1 + v6), v7);
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x183445A24LL);
  }

  return ((uint64_t (*)(uint64_t))((char *)&loc_1834459DC + *((int *)qword_183445A28 + (a4 >> 62))))(v5);
}

void specialized RangeReplaceableCollection.remove(at:)()
{
  __asm { BR              X12 }

uint64_t sub_183445A78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!BYTE6(a2))
  {
    __break(1u);
    JUMPOUT(0x183445BACLL);
  }

  if (BYTE6(a2) <= a1)
  {
    __break(1u);
    JUMPOUT(0x183445BB8LL);
  }

  uint64_t v5 = v2;
  __int16 v6 = a2;
  char v7 = BYTE2(a2);
  char v8 = BYTE3(a2);
  char v9 = BYTE4(a2);
  char v10 = BYTE5(a2);
  uint64_t v3 = *((unsigned __int8 *)&v5 + a1);
  Data._Representation.replaceSubrange(_:with:count:)();
  return v3;
}

unint64_t specialized RangeReplaceableCollection.remove(at:)( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4[1] >> 10;
  unint64_t v6 = v4[5] >> 10;
  if (v5 == v6)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  unint64_t v7 = result;
  unint64_t v8 = result >> 10;
  if (result >> 10 < v5 || v8 >= v6) {
    goto LABEL_10;
  }
  uint64_t v13 = (_OWORD *)*v4;
  __int128 v14 = *(_OWORD *)(*v4 + 32LL);
  __int128 v33 = *(_OWORD *)(*v4 + 16LL);
  __int128 v34 = v14;
  __int128 v35 = v13[3];
  BigString.unicodeScalars.getter();
  unsigned int v24 = BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v27);
  __int128 v15 = v13[2];
  __int128 v30 = v13[1];
  __int128 v31 = v15;
  __int128 v32 = v13[3];
  BigString.unicodeScalars.getter();
  swift_retain();
  uint64_t v16 = a2;
  uint64_t v25 = a4;
  uint64_t v26 = a3;
  unint64_t v17 = BigString.UnicodeScalarView.index(after:)();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  outlined release of Locale((uint64_t)v28);
  uint64_t result = swift_release();
  if (v6 < v17 >> 10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (v17 >> 10 >= v8)
  {
    v29[0] = v7;
    v29[1] = v16;
    __int128 v29[2] = v26;
    v29[3] = v25;
    v29[4] = v17;
    v29[5] = v19;
    v29[6] = v21;
    v29[7] = v23;
    specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(v29);
    return v24;
  }

{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[8];
  _OWORD v31[3];
  _OWORD v32[3];
  __int128 v33[3];
  _BYTE v34[48];
  unint64_t v5 = v4[1] >> 10;
  unint64_t v6 = v4[5] >> 10;
  if (v5 == v6)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  unint64_t v7 = result;
  unint64_t v8 = result >> 10;
  if (result >> 10 < v5 || v8 >= v6) {
    goto LABEL_10;
  }
  uint64_t v13 = (_OWORD *)*v4;
  __int128 v14 = *(_OWORD *)(*v4 + 16LL);
  __int128 v15 = *(_OWORD *)(*v4 + 48LL);
  v32[1] = *(_OWORD *)(*v4 + 32LL);
  v32[2] = v15;
  v32[0] = v14;
  uint64_t v16 = v13[1];
  v33[1] = v13[2];
  void v33[2] = v15;
  v33[0] = v16;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v33, (uint64_t)v34);
  outlined retain of Locale((uint64_t)v34);
  uint64_t v28 = BigString.subscript.getter();
  outlined release of Locale((uint64_t)v32);
  unint64_t v17 = v13[1];
  uint64_t v18 = v13[3];
  v31[1] = v13[2];
  unint64_t v31[2] = v18;
  v31[0] = v17;
  swift_retain();
  outlined retain of Locale((uint64_t)v31);
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v29 = a4;
  uint64_t v21 = BigString.index(after:)();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  char v27 = v26;
  outlined release of Locale((uint64_t)v31);
  uint64_t result = swift_release();
  if (v6 < v21 >> 10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (v21 >> 10 >= v8)
  {
    v30[0] = v7;
    v30[1] = v19;
    v30[2] = v20;
    v30[3] = v29;
    v30[4] = v21;
    v30[5] = v23;
    v30[6] = v25;
    v30[7] = v27;
    specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)(v30);
    return v28;
  }

double specialized RangeReplaceableCollection.removeAll(keepingCapacity:)(char a1)
{
  if ((a1 & 1) != 0) {
    __asm { BR              X12 }
  }

  outlined consume of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  double result = 0.0;
  *(_OWORD *)uint64_t v1 = xmmword_18372EE30;
  return result;
}

void sub_183445F38(uint64_t a1@<X8>)
{
  if (a1 >> 32 < (int)a1)
  {
    __break(1u);
    JUMPOUT(0x183445F64LL);
  }

  JUMPOUT(0x183445F50LL);
}

void Data.withUnsafeMutableBytes<A>(_:)()
{
}

void specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2)
{
}

{
  uint64_t v2;
  __int16 v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  unint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t v2 = a1;
  uint64_t v3 = a2;
  BOOL v4 = BYTE2(a2);
  unint64_t v5 = BYTE3(a2);
  unint64_t v6 = BYTE4(a2);
  unint64_t v7 = BYTE5(a2);
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)&v2, BYTE6(a2));
}

uint64_t _s10Foundation4DataV06InlineB0V15withUnsafeBytesyxxSWKXEKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0J4ViewVys0O0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, void))
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v4 = a1;
  __int16 v5 = a2;
  char v6 = BYTE2(a2);
  char v7 = BYTE3(a2);
  char v8 = BYTE4(a2);
  char v9 = BYTE5(a2);
  return a3(&v4, BYTE6(a2));
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t value = a1;
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  char v10 = BYTE3(a2);
  size_t v4 = BYTE6(a2);
  char v11 = BYTE4(a2);
  char v12 = BYTE5(a2);
  uint64_t v5 = String.utf8CString.getter();
  fsetxattr(a3, (const char *)(v5 + 32), &value, v4, 0, 0);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t Data.InlineData.withUnsafeBytes<A>(_:)( uint64_t (*a1)(uint64_t *, char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a3;
  __int16 v6 = a4;
  char v7 = BYTE2(a4);
  char v8 = BYTE3(a4);
  char v9 = BYTE4(a4);
  char v10 = BYTE5(a4);
  return a1(&v5, (char *)&v5 + BYTE6(a4));
}

uint64_t Data.InlineSlice.range.getter(uint64_t result)
{
  uint64_t v1 = result;
  double result = (int)result;
  return result;
}

uint64_t Data.LargeSlice.range.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t __DataStorage._bytes.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t __DataStorage._offset.getter()
{
  return *(void *)(v0 + 40);
}

void Data.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_183446518()
{
  uint64_t v4 = v1;
  __int16 v5 = v2;
  char v6 = BYTE2(v2);
  char v7 = BYTE3(v2);
  char v8 = BYTE4(v2);
  char v9 = BYTE5(v2);
  return v0(&v4, (char *)&v4 + BYTE6(v2));
}

void Data.write(to:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((~(_BYTE)a2 & 3) != 0)
  {
    uint64_t v6 = v4;
    uint64_t v37 = a4;
    char v9 = *(void **)a1;
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(a1 + 16);
    swift_retain();
    id v11 = v9;
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      id v34 = v11;
      uint64_t v35 = v8;
      uint64_t v36 = v10;
      URL.scheme.getter();
      if (v12)
      {
        uint64_t v33 = v6;
        Swift::String v13 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v13._countAndFlagsBits == 1701603686 && v13._object == (void *)0xE400000000000000LL)
        {
          swift_release();
          swift_release();

          uint64_t v14 = swift_bridgeObjectRelease();
LABEL_11:
          MEMORY[0x1895F8858](v14);
          v28[2] = v11;
          v28[3] = v8;
          v28[4] = v10;
          char v29 = 1;
          uint64_t v30 = a2;
          uint64_t v31 = MEMORY[0x18961AFF0];
          LOBYTE(v32) = 1;
          id v17 = v11;
          swift_retain();
          swift_retain();
          specialized Data._Representation.withUnsafeBytes<A>(_:)( (uint64_t)partial apply for closure #1 in writeToFile(path:data:options:attributes:reportProgress:),  (uint64_t)v28,  a3,  v37);
          swift_release();
          swift_release();

          return;
        }

        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        uint64_t v14 = swift_bridgeObjectRelease();
        if ((v16 & 1) != 0) {
          goto LABEL_11;
        }
      }

      else
      {
        swift_release();
        swift_release();
      }
    }

    else
    {
      unsigned __int8 v15 = objc_msgSend(v11, sel_isFileURL);
      swift_release();
      swift_release();

      if ((v15 & 1) != 0) {
        goto LABEL_11;
      }
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v18 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v19 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v20 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, 518, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v21 = objc_msgSend(v20, sel_domain);
    id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;

    if (v22 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v24 != v25)
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
      {
LABEL_19:
        swift_willThrow();
        return;
      }

      __break(1u);
    }

    swift_bridgeObjectRelease_n();
    goto LABEL_19;
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Data.append<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a1
      && (unsigned __int128)(a2 * (__int128)*(uint64_t *)(*(void *)(a3 - 8) + 72LL)) >> 64 != (a2
                                                                                              * *(void *)(*(void *)(a3 - 8) + 72LL)) >> 63)
    {
      __break(1u);
    }

    else
    {
      Data._Representation.append(contentsOf:)();
    }
  }

void *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    double result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }

  double result = a1(&v6, 0LL, 0LL);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t Data.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  __n128 v12 = MEMORY[0x1895F8858](a1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v14 + 16))( &v28[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  v15,  v16,  v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v29, (uint64_t)&v31);
    uint64_t v17 = v33;
    id v18 = __swift_project_boxed_opaque_existential_1(&v31, *((uint64_t *)&v32 + 1));
    __n128 v19 = MEMORY[0x1895F8858](v18);
    *(void *)&v28[-32] = v6;
    *(void *)&v28[-24] = a1;
    uint64_t v27 = a2;
    (*(void (**)(void (*)(), __n128))(v17 + 8))( _s10Foundation4DataV15replaceSubrange_4withySnySiG_xtSlRzs5UInt8V7ElementRtzlFySWXEfU_TA_0,  v19);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
  }

  uint64_t v30 = 0LL;
  memset(v29, 0, sizeof(v29));
  uint64_t v21 = outlined destroy of ContiguousBytes?((uint64_t)v29);
  MEMORY[0x1895F8858](v21);
  *(void *)&v28[-32] = v6;
  *(void *)&v28[-24] = a1;
  uint64_t v27 = a2;
  uint64_t result = dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
  if (v31 == 1)
  {
    uint64_t v22 = dispatch thunk of Collection.count.getter();
    uint64_t v23 = v22;
    if (v22 < 1)
    {
      uint64_t v27 = a5;
      uint64_t v25 = 0LL;
      uint64_t v26 = 0LL;
    }

    else
    {
      if ((unint64_t)v22 > 0x20)
      {
        uint64_t v24 = swift_slowAlloc();
        uint64_t v27 = a5;
        closure #3 in Data.replaceSubrange<A>(_:with:)(v24, v23, a3, v6, a1, a2, v23, a4);
        return MEMORY[0x186E20E60](v24, -1LL, -1LL);
      }

      __int128 v31 = 0u;
      __int128 v32 = 0u;
      uint64_t v27 = a5;
      uint64_t v25 = &v31;
      uint64_t v26 = v23;
    }

    return closure #3 in Data.replaceSubrange<A>(_:with:)((uint64_t)v25, v26, a3, v6, a1, a2, v23, a4);
  }

  return result;
}

uint64_t Data.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  v22[5] = *MEMORY[0x1895F89C0];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v8);
  __n128 v10 = MEMORY[0x1895F8858](v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))( (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  a2,  v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v20, (uint64_t)v22);
    uint64_t v13 = v22[4];
    uint64_t v14 = __swift_project_boxed_opaque_existential_1(v22, v22[3]);
    __n128 v15 = MEMORY[0x1895F8858](v14);
    v19[-2] = v2;
    (*(void (**)(void (*)(), __n128))(v13 + 8))( partial apply for closure #1 in Data.append<A>(contentsOf:),  v15);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }

  else
  {
    v19[0] = TupleTypeMetadata2;
    v19[2] = v7;
    uint64_t v21 = 0LL;
    memset(v20, 0, sizeof(v20));
    uint64_t v17 = outlined destroy of ContiguousBytes?((uint64_t)v20);
    MEMORY[0x1895F8858](v17);
    v19[-2] = v2;
    uint64_t result = dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
    if (LOBYTE(v22[0]) == 1)
    {
      dispatch thunk of Sequence.underestimatedCount.getter();
      id v18 = (char *)&loc_183446FA8 + dword_1834472B4[*(void *)(v2 + 8) >> 62];
      v19[1] = 0LL;
      __asm { BR              X12 }
    }
  }

  return result;
}

void Data.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

void *Data.init(from:)(void *a1)
{
  return specialized Data.init(from:)(a1);
}

uint64_t __DataInvokeDeallocatorVirtualMemory(_:_:)(mach_vm_address_t a1, mach_vm_size_t a2)
{
  vm_map_t v4 = _platform_mach_task_self();
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_5;
  }

  uint64_t result = mach_vm_deallocate(v4, a1, a2);
  if ((_DWORD)result)
  {
LABEL_5:
    _StringGuts.grow(_:)(55LL);
    v6._object = (void *)0x80000001839D2F70LL;
    v6._countAndFlagsBits = 0xD000000000000029LL;
    String.append(_:)(v6);
    _print_unlocked<A, B>(_:_:)();
    v7._countAndFlagsBits = 8236LL;
    v7._object = (void *)0xE200000000000000LL;
    String.append(_:)(v7);
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 0x64656C6961662029LL;
    v9._object = (void *)0xE800000000000000LL;
    String.append(_:)(v9);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t _withStackOrHeapBuffer(capacity:_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (a1 < 1)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
  }

  else
  {
    if ((unint64_t)a1 > 0x20)
    {
      uint64_t v4 = swift_slowAlloc();
      a2(v4, a1);
      JUMPOUT(0x186E20E60LL);
    }

    memset(v8, 0, sizeof(v8));
    uint64_t v5 = v8;
    uint64_t v6 = a1;
  }

  return ((uint64_t (*)(_OWORD *, uint64_t))a2)(v5, v6);
}

uint64_t static __DataStorage.maxSize.getter()
{
  return 0x3FFFFFFFFFFFFFFFLL;
}

uint64_t one-time initialization function for vmOpsThreshold()
{
  if (one-time initialization token for _pageSize != -1) {
    uint64_t result = swift_once();
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t static __DataStorage.vmOpsThreshold.getter()
{
  if (one-time initialization token for vmOpsThreshold != -1) {
    swift_once();
  }
  return static __DataStorage.vmOpsThreshold;
}

BOOL static __DataStorage.shouldAllocateCleared(_:)(uint64_t a1)
{
  return a1 > 0x20000;
}

uint64_t __DataStorage._bytes.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*__DataStorage._bytes.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t __DataStorage._length.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t __DataStorage._length.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*__DataStorage._length.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t __DataStorage._capacity.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t __DataStorage._capacity.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*__DataStorage._capacity.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t __DataStorage._offset.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*__DataStorage._offset.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t key path getter for __DataStorage._deallocator : __DataStorage@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 48LL);
  uint64_t v4 = *(void *)(*(void *)a1 + 56LL);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ();
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = v5;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v3);
}

uint64_t key path setter for __DataStorage._deallocator : __DataStorage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UnsafeMutableRawPointer, @in_guaranteed Int) -> (@out ());
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  uint64_t v7 = *a2;
  uint64_t v8 = *(void *)(*a2 + 48);
  *(void *)(v7 + 48) = v6;
  *(void *)(v7 + 56) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v3);
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v8);
}

uint64_t __DataStorage._deallocator.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v1);
  return v1;
}

uint64_t __DataStorage._deallocator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v3);
}

uint64_t (*__DataStorage._deallocator.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t __DataStorage._needToZero.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t __DataStorage._needToZero.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 64) = result;
  return result;
}

uint64_t (*__DataStorage._needToZero.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16))
  {
    if (!__OFSUB__(a2, a1))
    {
LABEL_6:
      Data._Representation.replaceSubrange(_:with:count:)();
      return;
    }

    goto LABEL_7;
  }

  if (!__OFSUB__(a1, *(void *)(a3 + 40)))
  {
    if (!__OFSUB__(a2, a1)) {
      goto LABEL_6;
    }
LABEL_7:
    __break(1u);
  }

  __break(1u);
}

{
  if (!*(void *)(a3 + 16))
  {
    if (!__OFSUB__(a2, a1))
    {
LABEL_6:
      Data._Representation.append(contentsOf:)();
      return;
    }

    goto LABEL_7;
  }

  if (!__OFSUB__(a1, *(void *)(a3 + 40)))
  {
    if (!__OFSUB__(a2, a1)) {
      goto LABEL_6;
    }
LABEL_7:
    __break(1u);
  }

  __break(1u);
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a3 + 16))
  {
    if (!__OFSUB__(a2, result))
    {
LABEL_6:
      __swift_mutable_project_boxed_opaque_existential_1(a4, *(void *)(a4 + 24));
      return dispatch thunk of UnkeyedEncodingContainer.encode<A>(contentsOf:)();
    }

    goto LABEL_7;
  }

  if (!__OFSUB__(result, *(void *)(a3 + 40)))
  {
    if (!__OFSUB__(a2, result)) {
      goto LABEL_6;
    }
LABEL_7:
    __break(1u);
  }

  __break(1u);
  return result;
}

void specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, void *a3)
{
}

{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v3 = a3[2];
  if (!v3)
  {
    if (!__OFSUB__(a2, a1)) {
      return;
    }
    goto LABEL_10;
  }

  uint64_t v4 = a3[5];
  uint64_t v5 = __OFSUB__(a1, v4);
  uint64_t v6 = a1 - v4;
  if (v5)
  {
LABEL_11:
    __break(1u);
    return;
  }

  if (__OFSUB__(a2, a1))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a3[3] >= a2 - a1) {
    uint64_t v7 = a2 - a1;
  }
  else {
    uint64_t v7 = a3[3];
  }
  _BPlistEncodingFormat.Writer.write(_:)(v3 + v6, v7);
}

uint64_t _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0L4ViewVys0Q0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1nncn_n( uint64_t result, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4 = a3[2];
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = a3[5];
  BOOL v6 = __OFSUB__(result, v5);
  uint64_t v7 = result - v5;
  if (v6)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    if (!__OFSUB__(a2, result)) {
      __break(1u);
    }
    goto LABEL_13;
  }

  if (!__OFSUB__(a2, result))
  {
    if (a3[3] >= a2 - result) {
      a2 -= result;
    }
    else {
      a2 = a3[3];
    }
    if ((a2 & 0x8000000000000000LL) == 0) {
      return a4(v4 + v7);
    }
    goto LABEL_10;
  }

void specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = a3[2];
  if (!v5)
  {
    if (!__OFSUB__(a2, a1))
    {
      __n128 v10 = 0LL;
      uint64_t v12 = 0LL;
LABEL_9:
      closure #1 in NSFileHandle.write<A>(contentsOf:)(v10, v12, a4);

      return;
    }

    goto LABEL_10;
  }

  uint64_t v6 = a3[5];
  BOOL v7 = __OFSUB__(a1, v6);
  uint64_t v8 = a1 - v6;
  if (!v7)
  {
    uint64_t v9 = a2 - a1;
    if (!__OFSUB__(a2, a1))
    {
      __n128 v10 = (_BYTE *)(v5 + v8);
      uint64_t v11 = a3[3];
      if (v11 >= v9) {
        uint64_t v11 = v9;
      }
      uint64_t v12 = &v10[v11];
      goto LABEL_9;
    }

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)( uint64_t result, uint64_t a2, void *a3, int a4)
{
  uint64_t v4 = a3[2];
  if (!v4)
  {
LABEL_9:
    if (!__OFSUB__(a2, result)) {
      __break(1u);
    }
    goto LABEL_11;
  }

  uint64_t v5 = a3[5];
  BOOL v6 = __OFSUB__(result, v5);
  uint64_t v7 = result - v5;
  if (v6)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (__OFSUB__(a2, result))
  {
LABEL_11:
    __break(1u);
    return result;
  }

  uint64_t v9 = (const void *)(v4 + v7);
  if (a3[3] >= a2 - result) {
    size_t v10 = a2 - result;
  }
  else {
    size_t v10 = a3[3];
  }
  uint64_t v11 = String.utf8CString.getter();
  fsetxattr(a4, (const char *)(v11 + 32), v9, v10, 0, 0);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)( uint64_t result, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v4 = a3[2];
  if (!v4)
  {
    if (!__OFSUB__(a2, result))
    {
      uint64_t v9 = 0LL;
      uint64_t v11 = 0LL;
      return closure #1 in Data.customMirror.getter(v9, v11, a4);
    }

    goto LABEL_10;
  }

  uint64_t v5 = a3[5];
  BOOL v6 = __OFSUB__(result, v5);
  uint64_t v7 = result - v5;
  if (!v6)
  {
    uint64_t v8 = a2 - result;
    if (!__OFSUB__(a2, result))
    {
      uint64_t v9 = v4 + v7;
      uint64_t v10 = a3[3];
      if (v10 >= v8) {
        uint64_t v10 = v8;
      }
      uint64_t v11 = v9 + v10;
      return closure #1 in Data.customMirror.getter(v9, v11, a4);
    }

uint64_t __DataStorage.withUnsafeBytes<A>(in:apply:)( uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = v3[2];
  if (!v4)
  {
    if (!__OFSUB__(a2, result))
    {
      uint64_t v9 = 0LL;
      uint64_t v11 = 0LL;
      return a3(v9, v11);
    }

    goto LABEL_10;
  }

  uint64_t v5 = v3[5];
  BOOL v6 = __OFSUB__(result, v5);
  uint64_t v7 = result - v5;
  if (!v6)
  {
    uint64_t v8 = a2 - result;
    if (!__OFSUB__(a2, result))
    {
      uint64_t v9 = v4 + v7;
      uint64_t v10 = v3[3];
      if (v10 >= v8) {
        uint64_t v10 = v8;
      }
      uint64_t v11 = v9 + v10;
      return a3(v9, v11);
    }

uint64_t __DataStorage.withUnsafeMutableBytes<A>(in:apply:)( uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = v3[2];
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v5 = v3[5];
  BOOL v6 = __OFSUB__(result, v5);
  uint64_t v7 = result - v5;
  if (v6)
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }

  if (v3[3] < v8) {
    uint64_t v8 = v3[3];
  }
  return a3(v4 + v7, v4 + v7 + v8);
}

uint64_t __DataStorage.bytes.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(v0 + 40);
  BOOL v3 = __OFSUB__(0LL, v2);
  uint64_t v4 = -v2;
  if (!v3) {
    return v1 + v4;
  }
  __break(1u);
  return result;
}

uint64_t __DataStorage.capacity.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t __DataStorage.length.getter()
{
  return *(void *)(v0 + 24);
}

void __DataStorage.length.setter(Swift::Int growingTo)
{
  if (*(void *)(v1 + 32) < growingTo || (uint64_t v3 = *(void *)(v1 + 16)) == 0)
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(growingTo, 1);
    goto LABEL_8;
  }

  Swift::Int v4 = *(void *)(v1 + 24);
  if (v4 >= growingTo || *(_BYTE *)(v1 + 64) != 1)
  {
    if (v4 > growingTo) {
      *(_BYTE *)(v1 + 64) = 1;
    }
    goto LABEL_8;
  }

  if (!__OFSUB__(growingTo, v4))
  {
    bzero((void *)(v3 + v4), growingTo - v4);
LABEL_8:
    *(void *)(v1 + 24) = growingTo;
    return;
  }

  __break(1u);
}

Swift::Void __swiftcall __DataStorage.setLength(_:)(Swift::Int a1)
{
  if (*(void *)(v1 + 32) < a1 || (uint64_t v3 = *(void *)(v1 + 16)) == 0)
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(a1, 1);
    goto LABEL_8;
  }

  Swift::Int v4 = *(void *)(v1 + 24);
  if (v4 >= a1 || *(_BYTE *)(v1 + 64) != 1)
  {
    if (v4 > a1) {
      *(_BYTE *)(v1 + 64) = 1;
    }
    goto LABEL_8;
  }

  if (!__OFSUB__(a1, v4))
  {
    bzero((void *)(v3 + v4), a1 - v4);
LABEL_8:
    *(void *)(v1 + 24) = a1;
    return;
  }

  __break(1u);
}

void (*__DataStorage.length.modify(void *a1))(Swift::Int *a1, char a2)
{
  *a1 = *(void *)(v1 + 24);
  a1[1] = v1;
  return __DataStorage.length.modify;
}

void __DataStorage.length.modify(Swift::Int *a1, char a2)
{
  Swift::Int v2 = *a1;
  Swift::Int v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    __DataStorage.setLength(_:)(*a1);
    return;
  }

  if (*(void *)(v3 + 32) < v2 || (uint64_t v4 = *(void *)(v3 + 16)) == 0)
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(*a1, 1);
    goto LABEL_10;
  }

  Swift::Int v5 = *(void *)(v3 + 24);
  if (v5 >= v2 || *(_BYTE *)(v3 + 64) != 1)
  {
    if (v2 < v5) {
      *(_BYTE *)(v3 + 64) = 1;
    }
    goto LABEL_10;
  }

  if (!__OFSUB__(v2, v5))
  {
    bzero((void *)(v4 + v5), v2 - v5);
LABEL_10:
    *(void *)(v3 + 24) = v2;
    return;
  }

  __break(1u);
}

BOOL __DataStorage.isExternallyOwned.getter()
{
  return *(void *)(v0 + 32) == 0LL;
}

Swift::Void __swiftcall __DataStorage.ensureUniqueBufferReference(growingTo:clear:)( Swift::Int growingTo, Swift::Bool clear)
{
  object = v2;
  Swift::Int v4 = v2[4];
  if (v4) {
    BOOL v5 = v4 < growingTo;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    return;
  }
  if (growingTo)
  {
    if (!v4)
    {
      size_t v25 = malloc_good_size(growingTo);
      LODWORD(v62) = 0;
      _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
      if (clear) {
        uint64_t v26 = malloc_type_calloc(1uLL, v25, (unint64_t)WORD1(v62) << 48);
      }
      else {
        uint64_t v26 = malloc_type_malloc(v25, (unint64_t)WORD1(v62) << 48);
      }
      uint64_t v28 = v26;
      unint64_t v29 = object[2];
      if (v29)
      {
        if (!v26)
        {
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
          goto LABEL_104;
        }

        specialized static __DataStorage.move(_:_:_:)((vm_address_t)v26, v29, object[3]);
        uint64_t v30 = object[2];
        if (v30)
        {
          __int128 v31 = (void (*)(uint64_t, uint64_t))object[6];
          if (v31)
          {
            uint64_t v32 = object[3];
            swift_retain();
            v31(v30, v32);
            outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v31);
          }

          else
          {
            free((void *)object[2]);
          }
        }
      }

      uint64_t v51 = object[6];
      object[6] = 0LL;
      object[7] = 0LL;
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v51);
      object[3] = growingTo;
      object[4] = v25;
      object[2] = v28;
      BOOL v52 = 1;
LABEL_94:
      *((_BYTE *)object + 64) = v52;
      return;
    }

    if (one-time initialization token for vmOpsThreshold != -1) {
      swift_once();
    }
    char v8 = 1;
    if (static __DataStorage.vmOpsThreshold <= growingTo) {
      char v8 = 2;
    }
    Swift::Int v9 = growingTo >> v8;
    if (__OFSUB__(0x7FFFFFFFFFFFFFFFLL, v9))
    {
      __break(1u);
    }

    else
    {
      if (0x7FFFFFFFFFFFFFFFLL - v9 < growingTo) {
        Swift::Int v9 = 0LL;
      }
      BOOL v10 = __OFADD__(growingTo, v9);
      int64_t v11 = growingTo + v9;
      if (!v10)
      {
        if (v11 <= v4) {
          size_t v12 = v4;
        }
        else {
          size_t v12 = v11;
        }
        int64_t v13 = malloc_good_size(v12);
        BOOL v14 = clear && v13 > 0x20000;
        Swift::Int v15 = object[3];
        if (!object[2])
        {
          LODWORD(v62) = 0;
          _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
          if (clear && v13 > 0x20000)
          {
            uint64_t v27 = (char *)malloc_type_calloc(1uLL, v13, (unint64_t)WORD1(v62) << 48);
            if (v27) {
              goto LABEL_84;
            }
          }

          else
          {
            uint64_t v27 = (char *)malloc_type_malloc(v13, (unint64_t)WORD1(v62) << 48);
            if (v27) {
              goto LABEL_84;
            }
          }

          LODWORD(v62) = 0;
          _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
          if (clear && growingTo > 0x20000)
          {
            BOOL v14 = 1;
            uint64_t v27 = (char *)malloc_type_calloc(1uLL, growingTo, (unint64_t)WORD1(v62) << 48);
            goto LABEL_80;
          }

          __int16 v50 = (char *)malloc_type_malloc(growingTo, (unint64_t)WORD1(v62) << 48);
LABEL_79:
          uint64_t v27 = v50;
          BOOL v14 = 0;
LABEL_80:
          if (!v27)
          {
            unint64_t v62 = 0LL;
            unint64_t v63 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(41LL);
            swift_bridgeObjectRelease();
            unint64_t v62 = 0xD000000000000026LL;
            unint64_t v63 = 0x80000001839D2EB0LL;
            v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            object = v54._object;
            String.append(_:)(v54);
            swift_bridgeObjectRelease();
            uint64_t v35 = &v62;
            v55._countAndFlagsBits = 41LL;
            v55._object = (void *)0xE100000000000000LL;
            String.append(_:)(v55);
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            goto LABEL_82;
          }

Swift::Void __swiftcall __DataStorage._freeBytes()()
{
  uint64_t v1 = v0;
  Swift::Int v2 = (void *)v0[2];
  if (v2)
  {
    Swift::Int v3 = (void (*)(void *, uint64_t))v1[6];
    if (v3)
    {
      uint64_t v4 = v1[3];
      swift_retain();
      v3(v2, v4);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v3);
    }

    else
    {
      free(v2);
    }
  }

  uint64_t v5 = v1[6];
  v1[6] = 0LL;
  v1[7] = 0LL;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
}

uint64_t __DataStorage.enumerateBytes(in:_:)(uint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  if (!__OFSUB__(a2, result)) {
    return a3();
  }
  __break(1u);
  return result;
}

void __DataStorage.append(_:length:)(unint64_t __src, int64_t __len)
{
  if (__len < 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = v2[3];
  uint64_t v5 = v4 + __len;
  if (__OFADD__(v4, __len))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (v2[4] >= v5)
  {
    uint64_t v7 = v2[2];
    if (v7)
    {
      void v2[3] = v5;
LABEL_7:
      specialized static __DataStorage.move(_:_:_:)(v7 + v4, __src, __len);
      return;
    }
  }

  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v4 + __len, 0);
  uint64_t v7 = v2[2];
  void v2[3] = v5;
  if (v7) {
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
}

Swift::UInt8 __swiftcall __DataStorage.get(_:)(Swift::Int a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    goto LABEL_5;
  }
  uint64_t v3 = *(void *)(v1 + 40);
  BOOL v4 = __OFSUB__(a1, v3);
  Swift::Int v5 = a1 - v3;
  if (v4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
    return a1;
  }

  LOBYTE(a1) = *(_BYTE *)(v2 + v5);
  return a1;
}

Swift::Void __swiftcall __DataStorage.set(_:to:)(Swift::Int _, Swift::UInt8 to)
{
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v2 + 40);
    BOOL v7 = __OFSUB__(_, v6);
    Swift::Int v8 = _ - v6;
    if (!v7)
    {
      *(_BYTE *)(v5 + v8) = to;
      return;
    }

    __break(1u);
  }

  __break(1u);
}

uint64_t __DataStorage.copyBytes(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(v3 + 16))
  {
    if (!__OFSUB__(a3, a2)) {
      return UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    goto LABEL_7;
  }

  if (!__OFSUB__(a2, *(void *)(v3 + 40)))
  {
    if (!__OFSUB__(a3, a2)) {
      return UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
LABEL_7:
    __break(1u);
  }

  __break(1u);
  return result;
}

void __DataStorage.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[5];
  Swift::Int v4 = a1 - v3;
  if (__OFSUB__(a1, v3))
  {
    __break(1u);
    goto LABEL_15;
  }

  Swift::Int v5 = a2 - v3;
  if (__OFSUB__(a2, v3))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (v5 < v4)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (__OFSUB__(v5, v4))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return;
  }

  if (v5 != v4)
  {
    if (v2[3] >= v5)
    {
      __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0);
    }

    else
    {
      if (v5 >= v2[4]) {
        __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v5, 0);
      }
      void v2[3] = v5;
    }

    uint64_t v6 = v2[2];
    if (v6)
    {
      bzero((void *)(v6 + v4), v5 - v4);
      return;
    }

    goto LABEL_18;
  }

uint64_t __DataStorage.__allocating_init(length:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  __DataStorage.init(length:)(a1);
  return v2;
}

uint64_t __DataStorage.init(length:)(uint64_t result)
{
  *(void *)(v2 + 16) = 0LL;
  *(void *)(v2 + 48) = 0LL;
  *(void *)(v2 + 56) = 0LL;
  if (result > 0x3FFFFFFFFFFFFFFELL)
  {
    __break(1u);
LABEL_17:
    uint64_t result = swift_once();
    goto LABEL_5;
  }

  Swift::Int v1 = result;
  int64_t v3 = result;
  if (result <= 0x3FFFFFFF)
  {
    int64_t v3 = result + (result >> 2);
    if (__OFADD__(result, result >> 2))
    {
      __break(1u);
LABEL_19:
      uint64_t result = swift_once();
      goto LABEL_7;
    }
  }

  if (one-time initialization token for vmOpsThreshold != -1) {
    goto LABEL_17;
  }
LABEL_5:
  if (v3 < static __DataStorage.vmOpsThreshold) {
    goto LABEL_11;
  }
  if (one-time initialization token for _pageSize != -1) {
    goto LABEL_19;
  }
LABEL_7:
  Swift::Int v4 = _pageSize + v3;
  if (__OFADD__(_pageSize, v3))
  {
    __break(1u);
    goto LABEL_21;
  }

  BOOL v5 = __OFSUB__(v4, 1LL);
  Swift::Int v6 = v4 - 1;
  if (v5)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (__OFSUB__(_pageSize, 1LL))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  int64_t v3 = v6 & ~(_pageSize - 1);
LABEL_11:
  HIWORD(v7) = 0;
  _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v7 + 1);
  if (v1 > 0x20000) {
    uint64_t result = (uint64_t)malloc_type_calloc(1uLL, v3, (unint64_t)HIWORD(v7) << 48);
  }
  else {
    uint64_t result = (uint64_t)malloc_type_malloc(v3, (unint64_t)HIWORD(v7) << 48);
  }
  if (result)
  {
    *(_BYTE *)(v2 + 64) = v1 <= 0x20000;
    *(void *)(v2 + 16) = result;
    *(void *)(v2 + 24) = 0LL;
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0LL;
    __DataStorage.setLength(_:)(v1);
    return v2;
  }

uint64_t __DataStorage.__allocating_init(capacity:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  __DataStorage.init(capacity:)(a1);
  return v2;
}

uint64_t __DataStorage.init(capacity:)(uint64_t result)
{
  *(void *)(v2 + 16) = 0LL;
  *(void *)(v2 + 48) = 0LL;
  *(void *)(v2 + 56) = 0LL;
  if (result > 0x3FFFFFFFFFFFFFFELL)
  {
    __break(1u);
  }

  else
  {
    int64_t v1 = result;
    if (one-time initialization token for vmOpsThreshold == -1) {
      goto LABEL_3;
    }
  }

  uint64_t result = swift_once();
LABEL_3:
  if (static __DataStorage.vmOpsThreshold > v1) {
    goto LABEL_10;
  }
  if (one-time initialization token for _pageSize != -1) {
    uint64_t result = swift_once();
  }
  Swift::Int v3 = _pageSize + v1;
  if (__OFADD__(_pageSize, v1))
  {
    __break(1u);
    goto LABEL_15;
  }

  BOOL v4 = __OFSUB__(v3, 1LL);
  Swift::Int v5 = v3 - 1;
  if (v4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (__OFSUB__(_pageSize, 1LL))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  int64_t v1 = v5 & ~(_pageSize - 1);
LABEL_10:
  *(void *)(v2 + 24) = 0LL;
  unsigned int v6 = 0;
  _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v6 + 1);
  uint64_t result = (uint64_t)malloc_type_malloc(v1, (unint64_t)v6 << 32);
  if (result)
  {
    *(void *)(v2 + 16) = result;
    *(_BYTE *)(v2 + 64) = 1;
    *(void *)(v2 + 32) = v1;
    *(void *)(v2 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0LL;
    return v2;
  }

uint64_t __DataStorage.__allocating_init(bytes:length:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  __DataStorage.init(bytes:length:)(a1, a2);
  return v4;
}

void *__DataStorage.init(bytes:length:)(unint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = 0LL;
  Swift::Int v5 = (void *)(v3 + 16);
  *(void *)(v3 + 48) = 0LL;
  *(void *)(v3 + 56) = 0LL;
  if (a2 > 0x3FFFFFFFFFFFFFFELL)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_4;
  }

  uint64_t v2 = a2;
  *(void *)(v3 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0LL;
  if (!a2)
  {
    *(_BYTE *)(v3 + 64) = 0;
    *(void *)(v3 + 24) = 0LL;
    *(void *)(v3 + 32) = 0LL;
    *Swift::Int v5 = 0LL;
    return (void *)v3;
  }

  unint64_t v4 = a1;
  if (one-time initialization token for vmOpsThreshold != -1) {
    goto LABEL_13;
  }
LABEL_4:
  if (static __DataStorage.vmOpsThreshold <= v2)
  {
    *(void *)(v3 + 24) = v2;
    *(void *)(v3 + 32) = v2;
    *(_BYTE *)(v3 + 64) = 1;
    unsigned int v8 = 0;
    _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v8 + 1);
    uint64_t result = malloc_type_malloc(v2, (unint64_t)v8 << 32);
    if (result)
    {
      *Swift::Int v5 = result;
      goto LABEL_10;
    }
  }

  else
  {
    *(void *)(v3 + 24) = v2;
    unsigned int v7 = 0;
    _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v7 + 1);
    uint64_t result = malloc_type_malloc(v2, (unint64_t)v7 << 32);
    if (result)
    {
      *(void *)(v3 + 16) = result;
      *(void *)(v3 + 32) = v2;
      *(_BYTE *)(v3 + 64) = 1;
LABEL_10:
      specialized static __DataStorage.move(_:_:_:)((vm_address_t)result, v4, v2);
      return (void *)v3;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t __DataStorage.__allocating_init(bytes:length:copy:deallocator:offset:)( unint64_t a1, uint64_t a2, char a3, void (*a4)(unint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  __DataStorage.init(bytes:length:copy:deallocator:offset:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

vm_address_t __DataStorage.init(bytes:length:copy:deallocator:offset:)( unint64_t a1, uint64_t a2, char a3, void (*a4)(unint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = 0LL;
  BOOL v10 = (void *)(v6 + 16);
  *(void *)(v6 + 48) = 0LL;
  *(void *)(v6 + 56) = 0LL;
  if (a2 > 0x3FFFFFFFFFFFFFFELL)
  {
    __break(1u);
LABEL_21:
    swift_once();
    goto LABEL_5;
  }

  unsigned int v7 = a4;
  uint64_t v9 = a2;
  unint64_t v8 = a1;
  *(void *)(v6 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = a6;
  if (!a2) {
    goto LABEL_10;
  }
  if ((a3 & 1) == 0)
  {
    *(void *)(v6 + 24) = a2;
    *(void *)(v6 + 32) = a2;
    *(_BYTE *)(v6 + 64) = 0;
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 48) = a4;
    *(void *)(v6 + 56) = a5;
    return v6;
  }

  if (one-time initialization token for vmOpsThreshold != -1) {
    goto LABEL_21;
  }
LABEL_5:
  if (static __DataStorage.vmOpsThreshold > v9)
  {
    *(void *)(v6 + 24) = v9;
    unsigned int v14 = 0;
    _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v14 + 1);
    int64_t v11 = malloc_type_malloc(v9, (unint64_t)v14 << 32);
    if (v11)
    {
      *(void *)(v6 + 16) = v11;
      *(void *)(v6 + 32) = v9;
      *(_BYTE *)(v6 + 64) = 1;
      specialized static __DataStorage.move(_:_:_:)((vm_address_t)v11, v8, v9);
      if (!v7) {
        return v6;
      }
      if (!v8)
      {
        __break(1u);
LABEL_10:
        *(_BYTE *)(v6 + 64) = 0;
        *(void *)(v6 + 24) = 0LL;
        *(void *)(v6 + 32) = 0LL;
        *BOOL v10 = 0LL;
        if (v7)
        {
          if (v8) {
            v7(v8, 0LL);
          }
          goto LABEL_18;
        }

        return v6;
      }

uint64_t __DataStorage.__allocating_init(offset:bytes:capacity:needToZero:length:deallocator:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = a3;
  *(void *)(result + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = a1;
  *(_BYTE *)(result + 64) = a4;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a5;
  *(void *)(result + 48) = a6;
  *(void *)(result + 56) = a7;
  return result;
}

uint64_t __DataStorage.init(offset:bytes:capacity:needToZero:length:deallocator:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = a1;
  *(_BYTE *)(v7 + 64) = a4;
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a5;
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = a7;
  return v7;
}

void *__DataStorage.deinit()
{
  int64_t v1 = v0;
  uint64_t v2 = (void *)v0[2];
  if (v2)
  {
    uint64_t v3 = (void (*)(void *, uint64_t))v1[6];
    if (v3)
    {
      uint64_t v4 = v1[3];
      swift_retain();
      v3(v2, v4);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v3);
    }

    else
    {
      free(v2);
    }
  }

  uint64_t v5 = v1[6];
  v1[6] = 0LL;
  v1[7] = 0LL;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v1[6]);
  return v1;
}

uint64_t __DataStorage.__deallocating_deinit()
{
  int64_t v1 = v0;
  uint64_t v2 = (void *)v0[2];
  if (v2)
  {
    uint64_t v3 = (void (*)(void *, uint64_t))v1[6];
    if (v3)
    {
      uint64_t v4 = v1[3];
      swift_retain();
      v3(v2, v4);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v3);
    }

    else
    {
      free(v2);
    }
  }

  uint64_t v5 = v1[6];
  v1[6] = 0LL;
  v1[7] = 0LL;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v1[6]);
  return swift_deallocClassInstance();
}

uint64_t __DataStorage.mutableCopy(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = *v2;
  uint64_t v5 = v2[2];
  if (!v5)
  {
    unint64_t v9 = 0LL;
    uint64_t v10 = a2 - a1;
    if (!__OFSUB__(a2, a1)) {
      goto LABEL_4;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v6 = v2[5];
  BOOL v7 = __OFSUB__(a1, v6);
  uint64_t v8 = a1 - v6;
  if (!v7)
  {
    unint64_t v9 = v5 + v8;
    uint64_t v10 = a2 - a1;
    if (!__OFSUB__(a2, a1))
    {
LABEL_4:
      uint64_t v11 = swift_allocObject();
      __DataStorage.init(bytes:length:copy:deallocator:offset:)(v9, v10, 1, 0LL, 0LL, a1);
      return v11;
    }

    goto LABEL_7;
  }

uint64_t Data.InlineData.bytes.setter( uint64_t result, char a2, char a3, char a4, char a5, char a6, char a7, char a8, uint64_t a9)
{
  *(_BYTE *)uint64_t v9 = result;
  *(_BYTE *)(v9 + 1) = a2;
  *(_BYTE *)(v9 + 2) = a3;
  *(_BYTE *)(v9 + 3) = a4;
  *(_BYTE *)(v9 + 4) = a5;
  *(_BYTE *)(v9 + 5) = a6;
  *(_BYTE *)(v9 + 6) = a7;
  *(_BYTE *)(v9 + 7) = a8;
  *(_WORD *)(v9 + 8) = a9;
  *(_DWORD *)(v9 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_DWORD *)((char *)&a9 + 2);
  return result;
}

uint64_t (*Data.InlineData.bytes.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

unint64_t Data.InlineData.length.getter(uint64_t a1, unint64_t a2)
{
  return HIWORD(a2);
}

uint64_t Data.InlineData.length.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 14) = result;
  return result;
}

uint64_t (*Data.InlineData.length.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

BOOL static Data.InlineData.canStore(count:)(uint64_t a1)
{
  return a1 < 15;
}

uint64_t Data.InlineData.init(_:)(_BYTE *a1, _BYTE *a2)
{
  return specialized Data.InlineData.init(_:)(a1, a2);
}

uint64_t Data.InlineData.init(count:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) == 0 && a1 < 0x100) {
    return 0LL;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Data.InlineData.init(_:count:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = specialized Data.InlineData.init(_:count:)(a1, a2, a3);
  swift_release();
  return v3;
}

{
  uint64_t v3;
  uint64_t v3 = specialized Data.InlineData.init(_:count:)(a1, a2, a3);
  swift_release();
  swift_release();
  return v3;
}

uint64_t Data.InlineSlice.withUnsafeBytes<A>(_:)( uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t result = (int)a3;
  __break(1u);
  return result;
}

uint64_t _s10Foundation4DataV10LargeSliceV15withUnsafeBytesyxxSWKXEKlFAA23LocalizedStringResourceV_Tg5015_s10Foundation4b56V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_AA23hiJ5V_Tg5AA0N4ViewVys0S0VGxs5Error_pRi_zRi0_zlyAHIsgyrzo_Tf1ncn_n( uint64_t result, void *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *(void *)(result + 24);
  uint64_t v5 = a2[2];
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a2[5];
  BOOL v7 = __OFSUB__(v3, v6);
  uint64_t v8 = v3 - v6;
  if (v7)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    if (!__OFSUB__(v4, v3)) {
      __break(1u);
    }
    goto LABEL_13;
  }

  BOOL v7 = __OFSUB__(v4, v3);
  uint64_t v3 = v4 - v3;
  if (!v7)
  {
    uint64_t v4 = a2[3];
    if (v4 >= v3) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = a2[3];
    }
    if ((v9 & 0x8000000000000000LL) == 0) {
      return a3(v5 + v8);
    }
    goto LABEL_10;
  }

uint64_t Data.LargeSlice.withUnsafeBytes<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))result;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = a4[2];
  if (!v7)
  {
    if (!__OFSUB__(v6, v5))
    {
      uint64_t v12 = 0LL;
      uint64_t v14 = 0LL;
      return v4(v12, v14);
    }

    goto LABEL_10;
  }

  uint64_t v8 = a4[5];
  BOOL v9 = __OFSUB__(v5, v8);
  uint64_t v10 = v5 - v8;
  if (!v9)
  {
    BOOL v9 = __OFSUB__(v6, v5);
    uint64_t v11 = v6 - v5;
    if (!v9)
    {
      uint64_t v12 = v7 + v10;
      uint64_t v13 = a4[3];
      if (v13 >= v11) {
        uint64_t v13 = v11;
      }
      uint64_t v14 = v12 + v13;
      return v4(v12, v14);
    }

uint64_t Data.InlineData.capacity.getter()
{
  return 14LL;
}

uint64_t Data.InlineData.count.getter(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

void Data.InlineData.count.setter(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(v1 + 14);
  if (v3 >= a1)
  {
    if (a1 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }

    else
    {
      *(_BYTE *)(v1 + 14) = a1;
    }
  }

  else
  {
    Data.InlineData.resetBytes(in:)(v3, a1);
  }

void Data.InlineData.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(v2 + 14);
  if (v3 < a1)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v3 >= a2)
  {
LABEL_5:
    BOOL v4 = __OFSUB__(a2, a1);
    size_t v5 = a2 - a1;
    if (!v4)
    {
      bzero((void *)(v2 + a1), v5);
      return;
    }

    goto LABEL_8;
  }

  if (a2 < 256)
  {
    *(_BYTE *)(v2 + 14) = a2;
    goto LABEL_5;
  }

void (*Data.InlineData.count.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(unsigned __int8 *)(v1 + 14);
  a1[1] = v1;
  return Data.InlineData.count.modify;
}

void Data.InlineData.count.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    Data.InlineData.count.setter(*a1);
  }

  else
  {
    uint64_t v4 = *(unsigned __int8 *)(v3 + 14);
    if (v2 <= v4)
    {
      if (v2 < 0)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }

      else
      {
        *(_BYTE *)(v3 + 14) = v2;
      }
    }

    else
    {
      Data.InlineData.resetBytes(in:)(v4, v2);
    }
  }

uint64_t Data.InlineData.startIndex.getter()
{
  return 0LL;
}

uint64_t Data.InlineData.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

uint64_t Data.InlineData.withUnsafeMutableBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  return a1(v1, v1 + *(unsigned __int8 *)(v1 + 14));
}

Swift::Void __swiftcall Data.InlineData.append(byte:)(Swift::UInt8 byte)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + 14);
  if (v2 >= 0xE)
  {
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    *(_BYTE *)(v1 + v2) = byte;
    *(_BYTE *)(v1 + 14) = v2 + 1;
  }

_BYTE *Data.InlineData.append(contentsOf:)(_BYTE *__src, _BYTE *a2)
{
  if (__src)
  {
    int64_t v3 = a2 - __src;
    if (a2 != __src)
    {
      uint64_t v4 = *(unsigned __int8 *)(v2 + 14);
      __src = memmove((void *)(v2 + v4), __src, v3);
      if (v3 < 256)
      {
        unsigned int v5 = v4 + v3;
        if (((v5 >> 8) & 1) == 0)
        {
          *(_BYTE *)(v2 + 14) = v5;
          return __src;
        }

        __break(1u);
      }

      __src = (_BYTE *)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }

  return __src;
}

uint64_t Data.InlineData.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (a1 >= BYTE6(a3)) {
    __break(1u);
  }
  uint64_t v4 = a2;
  __int16 v5 = a3;
  char v6 = BYTE2(a3);
  char v7 = BYTE3(a3);
  char v8 = BYTE4(a3);
  char v9 = BYTE5(a3);
  return *((unsigned __int8 *)&v4 + a1);
}

double key path getter for Data.InlineData.subscript(_:) : Data.InlineData@<D0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *a2;
  __int16 v4 = *(_WORD *)(a1 + 12);
  double result = *(double *)a1;
  double v6 = *(double *)a1;
  int v7 = *(_DWORD *)(a1 + 8);
  __int16 v8 = v4;
  *a3 = *((_BYTE *)&v6 + v3);
  return result;
}

_BYTE *key path setter for Data.InlineData.subscript(_:) : Data.InlineData( _BYTE *result, uint64_t a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  if ((uint64_t)*a3 >= *(unsigned __int8 *)(a2 + 14))
  {
    __break(1u);
  }

  else if ((v3 & 0x8000000000000000LL) == 0 && v3 <= 0xD)
  {
    *(_BYTE *)(a2 + v3) = *result;
    return result;
  }

  double result = (_BYTE *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Data.InlineData.subscript.setter(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(v2 + 14) <= a2)
  {
    __break(1u);
  }

  else if ((a2 & 0x8000000000000000LL) == 0 && (unint64_t)a2 < 0xE)
  {
    *(_BYTE *)(v2 + a2) = result;
    return result;
  }

  double result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*Data.InlineData.subscript.modify(uint64_t a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  __int16 v3 = *((_WORD *)v2 + 6);
  uint64_t v5 = *v2;
  int v6 = *((_DWORD *)v2 + 2);
  __int16 v7 = v3;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)&v5 + a2);
  return Data.InlineData.subscript.modify;
}

uint64_t Data.InlineData.subscript.modify(uint64_t a1, char a2)
{
  unint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v6 = *(_BYTE *)(a1 + 16);
  uint64_t result = a1 + 16;
  char v5 = v6;
  int64_t v7 = *(unsigned __int8 *)(v2 + 14);
  if ((a2 & 1) == 0)
  {
    if ((v3 & 0x8000000000000000LL) != 0 || v3 >= 0xE) {
      goto LABEL_12;
    }
LABEL_10:
    *(_BYTE *)(v2 + v3) = v5;
    return result;
  }

  if ((uint64_t)v3 < v7)
  {
    if ((v3 & 0x8000000000000000LL) != 0 || v3 > 0xD) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }

  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Data.InlineData.replaceSubrange(_:with:count:)(uint64_t a1, uint64_t a2, void *__src, size_t __len)
{
  uint64_t v5 = *(unsigned __int8 *)(v4 + 14);
  if (v5 < a1 || v5 < a2)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  BOOL v8 = __OFSUB__(v5, v7);
  uint64_t v9 = v5 - v7;
  if (v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  unint64_t v10 = v9 + __len;
  if (__OFADD__(v9, __len))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (__OFSUB__(v10, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t result = (uint64_t)closure #1 in Data.InlineData.replaceSubrange(_:with:count:)( (char *)v4,  (int)v4 + 14,  a1,  a2,  v10 - v5,  __len,  v5,  __src);
  if ((v10 & 0x8000000000000000LL) == 0 && v10 < 0x100)
  {
    *(_BYTE *)(v4 + 14) = v10;
    return result;
  }

char *closure #1 in Data.InlineData.replaceSubrange(_:with:count:)( char *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t __len, uint64_t a7, void *__src)
{
  uint64_t v8 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v12 = result;
  if (!a5) {
    goto LABEL_9;
  }
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (__OFADD__(a3, __len)) {
    goto LABEL_15;
  }
  if (__OFADD__(a3, v8))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (__OFSUB__(a7, a3))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFSUB__(a7 - a3, v8))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t result = (char *)memmove(&result[a3 + __len], &result[a4], a7 - a4);
LABEL_9:
  if (__len)
  {
    if (v12)
    {
      if (__src) {
        return (char *)memmove(&v12[a3], __src, __len);
      }
      goto LABEL_21;
    }

void *Data.InlineData.copyBytes(to:from:)( void *result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (BYTE6(a5) < a2 || BYTE6(a5) < a3) {
    __break(1u);
  }
  uint64_t v7 = a4;
  __int16 v8 = a5;
  char v9 = BYTE2(a5);
  char v10 = BYTE3(a5);
  char v11 = BYTE4(a5);
  int64_t v6 = a3 - a2;
  char v12 = BYTE5(a5);
  if (v6 > 13)
  {
    int64_t v6 = 14LL;
    return memcpy(result, (char *)&v7 + a2, v6);
  }

  if (v6 >= 1) {
    return memcpy(result, (char *)&v7 + a2, v6);
  }
  return result;
}

uint64_t Data.InlineSlice.slice.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Data.InlineSlice.slice.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.InlineSlice.storage.getter()
{
  return swift_retain();
}

uint64_t (*Data.InlineSlice.storage.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

BOOL static Data.InlineSlice.canStore(count:)(uint64_t a1)
{
  return a1 < 0x7FFFFFFF;
}

uint64_t Data.InlineSlice.init(_:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if ((a2 & 0x80000000) == 0) {
    return a2 << 32;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t Data.InlineSlice.init(capacity:)(uint64_t a1)
{
  return 0LL;
}

uint64_t Data.InlineSlice.init(count:)(uint64_t a1)
{
  uint64_t result = __DataStorage.init(length:)(a1);
  if (a1 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (a1 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if ((a1 & 0x80000000) == 0) {
    return a1 << 32;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t Data.InlineSlice.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  unint64_t v2 = a2 >> 16;
  __int16 v6 = a2;
  char v7 = BYTE2(a2);
  char v8 = BYTE3(a2);
  uint64_t v3 = BYTE6(a2);
  char v9 = BYTE4(a2);
  char v10 = BYTE5(a2);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)((unint64_t)&v5, v3);
  return v2 & 0xFF00000000LL;
}

unint64_t Data.InlineSlice.init(_:range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Data.InlineSlice.init(_:range:)(a1, a2 & 0xFFFFFFFFFFFFFFLL, a3, a4);
}

{
  unsigned int v4;
  unsigned int v5;
  unint64_t result;
  if (a3 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = a3;
  uint64_t v5 = a4;
  if (a4 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((int)a4 >= (int)a3)
  {
    swift_release();
    return v4 | ((unint64_t)v5 << 32);
  }

unint64_t Data.InlineSlice.init(_:range:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

unint64_t Data.InlineSlice.init(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t result = swift_release();
  if (v1 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (v2 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
  uint64_t v1 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *v0;
    uint64_t v2 = v1[1];
    if ((int)v2 < (int)v3)
    {
      __break(1u);
    }

    else
    {
      uint64_t v4 = *((void *)v1 + 1);
      uint64_t v5 = *(void *)(v4 + 16);
      if (!v5)
      {
        unint64_t v9 = 0LL;
        goto LABEL_7;
      }

      uint64_t v6 = *(void *)(v4 + 40);
      BOOL v7 = __OFSUB__(v3, v6);
      uint64_t v8 = v3 - v6;
      if (!v7)
      {
        unint64_t v9 = v5 + v8;
LABEL_7:
        uint64_t v10 = v2 - v3;
        type metadata accessor for __DataStorage();
        uint64_t v11 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v9, v10, 1, 0LL, 0LL, v3);
        *((void *)v1 + 1) = v11;
        swift_release();
        return;
      }
    }

    __break(1u);
  }

uint64_t Data.InlineSlice.startIndex.getter(uint64_t result)
{
  return (int)result;
}

uint64_t Data.InlineSlice.endIndex.getter(uint64_t a1)
{
  return a1 >> 32;
}

uint64_t Data.InlineSlice.capacity.getter(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

Swift::Void __swiftcall Data.InlineSlice.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *v1;
    uint64_t v4 = v2[1];
    if ((int)v4 < (int)v5)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }

    uint64_t v6 = *((void *)v2 + 1);
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = *(void *)(v6 + 40);
      BOOL v9 = __OFSUB__(v5, v8);
      uint64_t v10 = v5 - v8;
      if (v9)
      {
LABEL_15:
        __break(1u);
        return;
      }

      unint64_t v11 = v7 + v10;
    }

    else
    {
      unint64_t v11 = 0LL;
    }

    uint64_t v12 = v4 - v5;
    type metadata accessor for __DataStorage();
    uint64_t v13 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v11, v12, 1, 0LL, 0LL, v5);
    *((void *)v2 + 1) = v13;
    swift_release();
  }

  int v14 = v2[1];
  int v15 = v14 - *v2;
  if (__OFSUB__(v14, *v2))
  {
    __break(1u);
    goto LABEL_14;
  }

  if (v15 <= a1) {
    Swift::Int v16 = a1;
  }
  else {
    Swift::Int v16 = v15;
  }
  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v16, 0);
}

uint64_t Data.InlineSlice.count.getter(uint64_t result)
{
  if (!__OFSUB__(HIDWORD(result), (_DWORD)result)) {
    return HIDWORD(result) - (int)result;
  }
  __break(1u);
  return result;
}

void Data.InlineSlice.count.setter(uint64_t a1)
{
  int v3 = *v1;
  uint64_t v4 = v1[1];
  int v5 = v4 - *v1;
  if (__OFSUB__((_DWORD)v4, *v1))
  {
    __break(1u);
    goto LABEL_15;
  }

  BOOL v6 = __OFSUB__(a1, v5);
  uint64_t v7 = a1 - v5;
  if (v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (v7 >= 1)
  {
    uint64_t v8 = v4 + v7;
    if (__OFADD__(v4, v7))
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }

    if (v8 < v4)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }

    __DataStorage.resetBytes(in:)(v4, v8);
LABEL_9:
    if (a1 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (a1 <= 0x7FFFFFFF)
      {
        int v10 = v3 + a1;
        if (!__OFADD__(v3, (_DWORD)a1))
        {
          if (v10 >= v3)
          {
            *uint64_t v1 = v3;
            v1[1] = v10;
            return;
          }

          goto LABEL_19;
        }

void (*Data.InlineSlice.count.modify(void (*result)(uint64_t *a1)))(uint64_t *a1)
{
  *((void *)result + 1) = v1;
  int v2 = v1[1];
  if (__OFSUB__(v2, *v1))
  {
    __break(1u);
  }

  else
  {
    *(void *)unint64_t result = v2 - *v1;
    return Data.InlineSlice.count.modify;
  }

  return result;
}

void Data.InlineSlice.count.modify(uint64_t *a1)
{
}

int64_t *key path setter for Data.InlineSlice.range : Data.InlineSlice( int64_t *result, _DWORD *a2)
{
  int64_t v2 = *result;
  if (*result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v3 = result[1];
  if (v3 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((int)v3 >= (int)v2)
  {
    *a2 = v2;
    a2[1] = v3;
    return result;
  }

uint64_t Data.InlineSlice.range.setter(uint64_t result, uint64_t a2)
{
  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (a2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((int)a2 >= (int)result)
  {
    *int64_t v2 = result;
    v2[1] = a2;
    return result;
  }

int64_t *(*Data.InlineSlice.range.modify( int64_t *(*result)(int64_t *result, char a2)))(int64_t *result, char a2)
{
  *((void *)result + 2) = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  if ((int)v3 < (int)v2)
  {
    __break(1u);
  }

  else
  {
    *(void *)unint64_t result = v2;
    *((void *)result + 1) = v3;
    return Data.InlineSlice.range.modify;
  }

  return result;
}

int64_t *Data.InlineSlice.range.modify(int64_t *result, char a2)
{
  int64_t v2 = *result;
  uint64_t v3 = result[1];
  BOOL v4 = *result <= 0x7FFFFFFF;
  if ((a2 & 1) != 0)
  {
    if (*result > 0x7FFFFFFF)
    {
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }

    if (v3 > 0x7FFFFFFF)
    {
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }

    BOOL v4 = (int)v3 <= (int)v2;
    if ((int)v3 >= (int)v2)
    {
LABEL_19:
      uint64_t v7 = (_DWORD *)result[2];
      *uint64_t v7 = v2;
      v7[1] = v3;
      return result;
    }

    __break(1u);
  }

  if (!v4) {
    goto LABEL_22;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

uint64_t specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, uint64_t a2)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v6 = *a1;
    uint64_t v5 = a1[1];
    if ((int)v5 < (int)v6)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }

    uint64_t v7 = *((void *)a1 + 1);
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(v7 + 40);
      BOOL v10 = __OFSUB__(v6, v9);
      uint64_t v11 = v6 - v9;
      if (v10)
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }

      unint64_t v12 = v8 + v11;
    }

    else
    {
      unint64_t v12 = 0LL;
    }

    uint64_t v13 = v5 - v6;
    type metadata accessor for __DataStorage();
    uint64_t v14 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v12, v13, 1, 0LL, 0LL, v6);
    *((void *)a1 + 1) = v14;
    uint64_t result = swift_release();
  }

  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  if ((int)v16 < (int)v15)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v17 = (void *)*((void *)a1 + 1);
  uint64_t v18 = v17[2];
  if (!v18)
  {
LABEL_18:
    __break(1u);
    return result;
  }

  uint64_t v19 = v17[5];
  BOOL v10 = __OFSUB__(v15, v19);
  uint64_t v20 = v15 - v19;
  if (v10) {
    goto LABEL_15;
  }
  uint64_t v21 = v16 - v15;
  if (v17[3] < v21) {
    uint64_t v21 = v17[3];
  }
  *(void *)(a2 + 8) = v18 + v20;
  *(void *)(a2 + 16) = v18 + v20 + v21;
  return result;
}

uint64_t Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  int64_t v2 = v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v6 = *v1;
    uint64_t v5 = v2[1];
    if ((int)v5 < (int)v6)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }

    uint64_t v7 = *((void *)v2 + 1);
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(v7 + 40);
      BOOL v10 = __OFSUB__(v6, v9);
      uint64_t v11 = v6 - v9;
      if (v10)
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }

      unint64_t v12 = v8 + v11;
    }

    else
    {
      unint64_t v12 = 0LL;
    }

    uint64_t v13 = v5 - v6;
    type metadata accessor for __DataStorage();
    uint64_t v14 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v12, v13, 1, 0LL, 0LL, v6);
    *((void *)v2 + 1) = v14;
    uint64_t result = swift_release();
  }

  uint64_t v15 = *v2;
  uint64_t v16 = v2[1];
  if ((int)v16 < (int)v15)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v17 = (void *)*((void *)v2 + 1);
  uint64_t v18 = v17[2];
  if (!v18)
  {
LABEL_18:
    __break(1u);
    return result;
  }

  uint64_t v19 = v17[5];
  BOOL v10 = __OFSUB__(v15, v19);
  uint64_t v20 = v15 - v19;
  if (v10) {
    goto LABEL_15;
  }
  uint64_t v21 = v16 - v15;
  if (v17[3] < v21) {
    uint64_t v21 = v17[3];
  }
  return a1(v18 + v20, v18 + v20 + v21);
}

void Data.InlineSlice.append(contentsOf:)(const void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)v2;
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v6 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(v6 + 40);
  uint64_t v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  int v10 = *v3;
  uint64_t v11 = v3[1];
  if (a1) {
    size_t v13 = a2 - (void)a1;
  }
  else {
    size_t v13 = 0LL;
  }
  __DataStorage.replaceBytes(in:with:length:)(v3[1], v9, a1, v13);
  uint64_t v14 = v11 + v13;
  if (__OFADD__(v11, v13)) {
    goto LABEL_16;
  }
  if (v14 < (uint64_t)0xFFFFFFFF80000000LL)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (v14 > 0x7FFFFFFF)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (v10 <= (int)v14)
  {
    *uint64_t v3 = v10;
    v3[1] = v14;
    return;
  }

uint64_t Data.InlineSlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >= a2 >> 32 || (int)a2 > result)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a3 + 40);
    BOOL v5 = __OFSUB__(result, v4);
    uint64_t v6 = result - v4;
    if (!v5) {
      return *(unsigned __int8 *)(v3 + v6);
    }
    goto LABEL_7;
  }

int *key path getter for Data.InlineSlice.subscript(_:) : Data.InlineSlice@<X0>( int *result@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3 = result[1];
  uint64_t v4 = *a2;
  if (*a2 >= *result)
  {
    BOOL v6 = __OFSUB__(v4, v3);
    BOOL v5 = v4 - v3 < 0;
  }

  else
  {
    BOOL v6 = 0;
    BOOL v5 = 0;
  }

  if (v5 == v6)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v7 = *((void *)result + 1);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)(v7 + 40);
    BOOL v6 = __OFSUB__(v4, v9);
    uint64_t v10 = v4 - v9;
    if (!v6)
    {
      *a3 = *(_BYTE *)(v8 + v10);
      return result;
    }

    goto LABEL_9;
  }

void Data.InlineSlice.subscript.setter(char a1, uint64_t a2)
{
  if (*v2 > a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (v2[1] <= a2)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v5 = *((void *)v2 + 1);
  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 40);
    BOOL v8 = __OFSUB__(a2, v7);
    uint64_t v9 = a2 - v7;
    if (!v8)
    {
      *(_BYTE *)(v6 + v9) = a1;
      return;
    }

    goto LABEL_8;
  }

void (*Data.InlineSlice.subscript.modify( void (*result)(uint64_t a1), uint64_t a2))(uint64_t a1)
{
  *(void *)uint64_t result = a2;
  *((void *)result + 1) = v2;
  if (*v2 > a2 || v2[1] <= a2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v4 = *((void *)v2 + 1);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v4 + 40);
    BOOL v7 = __OFSUB__(a2, v6);
    uint64_t v8 = a2 - v6;
    if (!v7)
    {
      *((_BYTE *)result + 16) = *(_BYTE *)(v5 + v8);
      return Data.InlineSlice.subscript.modify;
    }

    goto LABEL_9;
  }

void Data.InlineSlice.subscript.modify(uint64_t a1)
{
}

void Data.InlineSlice.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  if (v2[1] < a1)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
    goto LABEL_9;
  }
  uint64_t v7 = *v2;
  uint64_t v6 = v3[1];
  if ((int)v6 < (int)v7)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v8 = *((void *)v3 + 1);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 40);
    BOOL v11 = __OFSUB__(v7, v10);
    uint64_t v12 = v7 - v10;
    if (v11)
    {
LABEL_18:
      __break(1u);
      return;
    }

    unint64_t v13 = v9 + v12;
  }

  else
  {
    unint64_t v13 = 0LL;
  }

  uint64_t v14 = v6 - v7;
  type metadata accessor for __DataStorage();
  uint64_t v15 = swift_allocObject();
  __DataStorage.init(bytes:length:copy:deallocator:offset:)(v13, v14, 1, 0LL, 0LL, v7);
  *((void *)v3 + 1) = v15;
  swift_release();
LABEL_9:
  __DataStorage.resetBytes(in:)(a1, a2);
  if (v3[1] >= a2) {
    return;
  }
  if (a2 > 0x7FFFFFFF) {
    goto LABEL_16;
  }
  if (*v3 > (int)a2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  v3[1] = a2;
}

void Data.InlineSlice.replaceSubrange(_:with:count:)(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v5 = *v4;
  if (v5 > a1)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v6 = v4;
  uint64_t v9 = v4[1];
  if (v9 < a2 || v5 > a2 || v9 < a1) {
    goto LABEL_23;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
    goto LABEL_16;
  }
  uint64_t v15 = *v4;
  uint64_t v14 = v6[1];
  if ((int)v14 < (int)v15)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v16 = *((void *)v6 + 1);
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17)
  {
    unint64_t v21 = 0LL;
    goto LABEL_15;
  }

  uint64_t v18 = *(void *)(v16 + 40);
  BOOL v19 = __OFSUB__(v15, v18);
  uint64_t v20 = v15 - v18;
  if (!v19)
  {
    unint64_t v21 = v17 + v20;
LABEL_15:
    uint64_t v22 = v14 - v15;
    type metadata accessor for __DataStorage();
    uint64_t v23 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v21, v22, 1, 0LL, 0LL, v15);
    *((void *)v6 + 1) = v23;
    swift_release();
LABEL_16:
    int v24 = *v6;
    uint64_t v25 = v6[1];
    if ((int)v25 >= *v6)
    {
      __DataStorage.replaceBytes(in:with:length:)(a1, a2, a3, a4);
      uint64_t v26 = a1 - a2 + v25;
      BOOL v19 = __OFADD__(v26, a4);
      uint64_t v27 = v26 + a4;
      if (!v19)
      {
        if (v27 >= (uint64_t)0xFFFFFFFF80000000LL)
        {
          if (v27 <= 0x7FFFFFFF)
          {
            if (v24 <= (int)v27)
            {
              *uint64_t v6 = v24;
              v6[1] = v27;
              return;
            }

            goto LABEL_28;
          }

uint64_t Data.InlineSlice.copyBytes(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return result;
}

uint64_t Data.RangeReference.range.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Data.RangeReference.range.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 16) = result;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Data.RangeReference.range.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.RangeReference.count.getter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t result = v1 - v2;
  if (__OFSUB__(v1, v2)) {
    __break(1u);
  }
  return result;
}

uint64_t Data.RangeReference.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t Data.RangeReference.init(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t Data.RangeReference.deinit()
{
  return v0;
}

uint64_t Data.RangeReference.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Data.LargeSlice.slice.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*Data.LargeSlice.slice.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.LargeSlice.storage.getter()
{
  return swift_retain();
}

uint64_t Data.LargeSlice.storage.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Data.LargeSlice.storage.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.LargeSlice.init(_:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = a2;
  }

  return result;
}

uint64_t Data.LargeSlice.init(capacity:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  return result;
}

uint64_t Data.LargeSlice.init(count:)(uint64_t a1)
{
  uint64_t result = __DataStorage.init(length:)(a1);
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = a1;
  }

  return result;
}

uint64_t Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v4 = a1;
  __int16 v5 = a2;
  char v6 = BYTE2(a2);
  char v7 = BYTE3(a2);
  uint64_t v2 = BYTE6(a2);
  char v8 = BYTE4(a2);
  char v9 = BYTE5(a2);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)((unint64_t)&v4, v2);
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = v2;
  return result;
}

uint64_t Data.LargeSlice.init(_:)(uint64_t result)
{
  uint64_t v1 = (int)result;
  uint64_t v2 = result >> 32;
  if (result >> 32 < (int)result)
  {
    __break(1u);
  }

  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v1;
    *(void *)(result + 24) = v2;
  }

  return result;
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
  uint64_t v1 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
    goto LABEL_6;
  }
  uint64_t v2 = v0[1];
  uint64_t v4 = *(void *)(*v0 + 16);
  uint64_t v3 = *(void *)(*v1 + 24);
  uint64_t v5 = *(void *)(v2 + 16);
  if (!v5)
  {
    unint64_t v9 = 0LL;
    uint64_t v10 = v3 - v4;
    if (!__OFSUB__(v3, v4)) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

  uint64_t v6 = *(void *)(v2 + 40);
  BOOL v7 = __OFSUB__(v4, v6);
  uint64_t v8 = v4 - v6;
  if (v7)
  {
LABEL_11:
    __break(1u);
    return;
  }

  unint64_t v9 = v5 + v8;
  uint64_t v10 = v3 - v4;
  if (__OFSUB__(v3, v4))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

uint64_t Data.LargeSlice.startIndex.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t Data.LargeSlice.endIndex.getter(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t Data.LargeSlice.capacity.getter(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

Swift::Void __swiftcall Data.LargeSlice.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = v1[1];
    uint64_t v6 = *(void *)(*v1 + 16);
    uint64_t v5 = *(void *)(*v2 + 24);
    uint64_t v7 = *(void *)(v4 + 16);
    if (v7)
    {
      uint64_t v8 = *(void *)(v4 + 40);
      BOOL v9 = __OFSUB__(v6, v8);
      uint64_t v10 = v6 - v8;
      if (v9)
      {
LABEL_17:
        __break(1u);
        return;
      }

      unint64_t v11 = v7 + v10;
      uint64_t v12 = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        goto LABEL_5;
      }
    }

    else
    {
      unint64_t v11 = 0LL;
      uint64_t v12 = v5 - v6;
      if (!__OFSUB__(v5, v6))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        uint64_t v13 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v11, v12, 1, 0LL, 0LL, v6);
        v2[1] = v13;
        swift_release();
        goto LABEL_6;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

uint64_t Data.LargeSlice.count.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t result = v1 - v2;
  if (__OFSUB__(v1, v2)) {
    __break(1u);
  }
  return result;
}

void Data.LargeSlice.count.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v5 = *(void *)(*v1 + 16LL);
  uint64_t v4 = *(void *)(*v1 + 24LL);
  BOOL v6 = __OFSUB__(v4, v5);
  uint64_t v7 = v4 - v5;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  BOOL v6 = __OFSUB__(a1, v7);
  uint64_t v8 = a1 - v7;
  if (v6)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (v8 >= 1)
  {
    uint64_t v9 = v4 + v8;
    if (__OFADD__(v4, v8))
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }

    if (v9 < v4)
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }

    __DataStorage.resetBytes(in:)(v4, v9);
LABEL_9:
    uint64_t v11 = *(void *)(v3 + 16);
    uint64_t v12 = v11 + a1;
    if (!__OFADD__(v11, a1))
    {
      if (v12 >= v11)
      {
        *(void *)(v3 + 24) = v12;
        return;
      }

      goto LABEL_15;
    }

void (*Data.LargeSlice.count.modify(void (*result)(uint64_t *a1)))(uint64_t *a1)
{
  *((void *)result + 1) = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 16LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
  BOOL v4 = __OFSUB__(v3, v2);
  uint64_t v5 = v3 - v2;
  if (v4)
  {
    __break(1u);
  }

  else
  {
    *(void *)uint64_t result = v5;
    return Data.LargeSlice.count.modify;
  }

  return result;
}

void Data.LargeSlice.count.modify(uint64_t *a1)
{
}

uint64_t specialized Data.LargeSlice.withUnsafeMutableBytes<A>(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v5 = a1[1];
    uint64_t v7 = *(void *)(*a1 + 16);
    uint64_t v6 = *(void *)(*a1 + 24);
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(v5 + 40);
      BOOL v10 = __OFSUB__(v7, v9);
      uint64_t v11 = v7 - v9;
      if (v10)
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }

      unint64_t v12 = v8 + v11;
      uint64_t v13 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_5;
      }
    }

    else
    {
      unint64_t v12 = 0LL;
      uint64_t v13 = v6 - v7;
      if (!__OFSUB__(v6, v7))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        uint64_t v14 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v12, v13, 1, 0LL, 0LL, v7);
        a1[1] = v14;
        swift_release();
        goto LABEL_6;
      }
    }

    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

uint64_t Data.LargeSlice.withUnsafeMutableBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v5 = v1[1];
    uint64_t v7 = *(void *)(*v1 + 16);
    uint64_t v6 = *(void *)(*v2 + 24);
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(v5 + 40);
      BOOL v10 = __OFSUB__(v7, v9);
      uint64_t v11 = v7 - v9;
      if (v10)
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }

      unint64_t v12 = v8 + v11;
      uint64_t v13 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_5;
      }
    }

    else
    {
      unint64_t v12 = 0LL;
      uint64_t v13 = v6 - v7;
      if (!__OFSUB__(v6, v7))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        uint64_t v14 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v12, v13, 1, 0LL, 0LL, v7);
        v2[1] = v14;
        swift_release();
        goto LABEL_6;
      }
    }

    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

void Data.LargeSlice.append(contentsOf:)(const void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Data.LargeSlice.ensureUniqueReference()();
  uint64_t v6 = v2[1];
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(v6 + 40);
  uint64_t v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(v10 + 24);
  if (v9 < v11)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (a1) {
    size_t v12 = a2 - (void)a1;
  }
  else {
    size_t v12 = 0LL;
  }
  __DataStorage.replaceBytes(in:with:length:)(v11, v9, a1, v12);
  uint64_t v13 = *(void *)(v10 + 24);
  BOOL v14 = __OFADD__(v13, v12);
  uint64_t v15 = v13 + v12;
  if (v14) {
    goto LABEL_11;
  }
  if (v15 >= *(void *)(v10 + 16))
  {
    *(void *)(v10 + 24) = v15;
    return;
  }

uint64_t Data.LargeSlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 16) > result)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (*(void *)(a2 + 24) <= result)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a3 + 40);
    BOOL v5 = __OFSUB__(result, v4);
    uint64_t v6 = result - v4;
    if (!v5) {
      return *(unsigned __int8 *)(v3 + v6);
    }
    goto LABEL_8;
  }

void *key path getter for Data.LargeSlice.subscript(_:) : Data.LargeSlice@<X0>( void *result@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3 = *a2;
  if (*a2 < *(void *)(*result + 16LL))
  {
    __break(1u);
    goto LABEL_7;
  }

  if (v3 >= *(void *)(*result + 24LL))
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = result[1];
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v4 + 40);
    BOOL v7 = __OFSUB__(v3, v6);
    uint64_t v8 = v3 - v6;
    if (!v7)
    {
      *a3 = *(_BYTE *)(v5 + v8);
      return result;
    }

    goto LABEL_8;
  }

void Data.LargeSlice.subscript.setter(char a1, uint64_t a2)
{
  if (*(void *)(*v2 + 16LL) > a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (*(void *)(*v2 + 24LL) <= a2)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  Data.LargeSlice.ensureUniqueReference()();
  uint64_t v5 = v2[1];
  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 40);
    BOOL v8 = __OFSUB__(a2, v7);
    uint64_t v9 = a2 - v7;
    if (!v8)
    {
      *(_BYTE *)(v6 + v9) = a1;
      return;
    }

    goto LABEL_8;
  }

void (*Data.LargeSlice.subscript.modify( void (*result)(uint64_t a1), uint64_t a2))(uint64_t a1)
{
  *(void *)uint64_t result = a2;
  *((void *)result + 1) = v2;
  if (*(void *)(*v2 + 16LL) > a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (*(void *)(*v2 + 24LL) <= a2)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v3 = v2[1];
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 40);
    BOOL v6 = __OFSUB__(a2, v5);
    uint64_t v7 = a2 - v5;
    if (!v6)
    {
      *((_BYTE *)result + 16) = *(_BYTE *)(v4 + v7);
      return Data.LargeSlice.subscript.modify;
    }

    goto LABEL_8;
  }

void Data.LargeSlice.subscript.modify(uint64_t a1)
{
}

void Data.LargeSlice.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*v2 + 24) < a1) {
    goto LABEL_16;
  }
  uint64_t v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
    goto LABEL_7;
  }
  uint64_t v6 = v2[1];
  uint64_t v8 = *(void *)(*v2 + 16);
  uint64_t v7 = *(void *)(*v3 + 24);
  uint64_t v9 = *(void *)(v6 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(v6 + 40);
    BOOL v11 = __OFSUB__(v8, v10);
    uint64_t v12 = v8 - v10;
    if (v11)
    {
LABEL_18:
      __break(1u);
      return;
    }

    unint64_t v13 = v9 + v12;
    uint64_t v14 = v7 - v8;
    if (!__OFSUB__(v7, v8)) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  unint64_t v13 = 0LL;
  uint64_t v14 = v7 - v8;
  if (__OFSUB__(v7, v8))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

void Data.LargeSlice.replaceSubrange(_:with:count:)(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v5 = *(void *)(*v4 + 16);
  if (v5 > a1) {
    goto LABEL_24;
  }
  uint64_t v8 = *(void *)(*v4 + 24);
  if (v8 < a2 || v5 > a2 || v8 < a1) {
    goto LABEL_25;
  }
  BOOL v11 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v14 = v4[1];
  uint64_t v16 = *(void *)(*v4 + 16);
  uint64_t v15 = *(void *)(*v11 + 24);
  uint64_t v17 = *(void *)(v14 + 16);
  if (!v17)
  {
    unint64_t v21 = 0LL;
    uint64_t v22 = v15 - v16;
    if (!__OFSUB__(v15, v16)) {
      goto LABEL_13;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v18 = *(void *)(v14 + 40);
  BOOL v19 = __OFSUB__(v16, v18);
  uint64_t v20 = v16 - v18;
  if (!v19)
  {
    unint64_t v21 = v17 + v20;
    uint64_t v22 = v15 - v16;
    if (!__OFSUB__(v15, v16))
    {
LABEL_13:
      type metadata accessor for __DataStorage();
      uint64_t v23 = swift_allocObject();
      __DataStorage.init(bytes:length:copy:deallocator:offset:)(v21, v22, 1, 0LL, 0LL, v16);
      v11[1] = v23;
      swift_release();
LABEL_14:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v24 = *(void *)(*v11 + 16);
        uint64_t v25 = *(void *)(*v11 + 24);
        type metadata accessor for Data.RangeReference();
        uint64_t v26 = swift_allocObject();
        *(void *)(v26 + 16) = v24;
        *(void *)(v26 + 24) = v25;
        *BOOL v11 = v26;
        swift_release();
      }

      uint64_t v27 = *(void *)(*v11 + 24);
      __DataStorage.replaceBytes(in:with:length:)(a1, a2, a3, a4);
      uint64_t v28 = a2 - a1;
      if (!__OFSUB__(a2, a1))
      {
        BOOL v19 = __OFSUB__(v27, v28);
        uint64_t v29 = v27 - v28;
        if (!v19)
        {
          BOOL v19 = __OFADD__(v29, a4);
          uint64_t v30 = v29 + a4;
          if (!v19)
          {
            if (v30 >= *(void *)(*v11 + 16))
            {
              *(void *)(*v11 + 24) = v30;
              return;
            }

            goto LABEL_29;
          }

uint64_t Data.LargeSlice.copyBytes(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  if (v4 > a2)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = *(void *)(a4 + 24);
    if (v5 >= a3 && v4 <= a3 && v5 >= a2) {
      return __DataStorage.copyBytes(to:from:)(result, a2, a3);
    }
  }

  __break(1u);
  return result;
}

void *Data._Representation.init(_:owner:)(_BYTE *__src, _BYTE *a2, uint64_t a3)
{
  uint64_t v4 = __src;
  if (!__src)
  {
    swift_unknownObjectRelease();
    return v4;
  }

  uint64_t v5 = a2 - __src;
  if (a2 == __src)
  {
    swift_unknownObjectRelease();
    return 0LL;
  }

  if (v5 <= 14)
  {
    uint64_t v4 = (void *)specialized Data.InlineData.init(_:)(__src, a2);
    swift_unknownObjectRelease();
    return v4;
  }

  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  type metadata accessor for __DataStorage();
  uint64_t result = (void *)swift_allocObject();
  if ((unint64_t)v5 < 0x3FFFFFFFFFFFFFFFLL)
  {
    result[4] = v5;
    result[5] = 0LL;
    *((_BYTE *)result + 64) = 0;
    result[2] = v4;
    result[3] = v5;
    result[6] = destructiveProjectEnumData for PredicateCodableError;
    result[7] = v6;
    type metadata accessor for Data.RangeReference();
    uint64_t v4 = (void *)swift_allocObject();
    v4[2] = 0LL;
    v4[3] = v5;
    return v4;
  }

  __break(1u);
  return result;
}

uint64_t Data._Representation.init(capacity:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0LL;
    }

    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)(v1);
      if (v1 > 0x7FFFFFFE)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0LL;
        *(void *)(result + 24) = 0LL;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

Swift::Void __swiftcall Data._Representation.reserveCapacity(_:)(Swift::Int a1)
{
  if (a1 >= 1) {
    __asm { BR              X10 }
  }

uint64_t Data._Representation.count.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_18344C298 + dword_18344C2DC[a2 >> 62]))(0LL);
}

uint64_t sub_18344C2A8(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

void Data._Representation.count.setter()
{
  __asm { BR              X10 }

void sub_18344C340()
{
  uint64_t v10 = v1;
  LOWORD(v11) = v3;
  BYTE2(v11) = BYTE2(v3);
  unint64_t v4 = HIDWORD(v3);
  HIBYTE(v11) = BYTE3(v3);
  unint64_t v5 = v3 >> 40;
  char v12 = BYTE4(v3);
  char v13 = BYTE5(v3);
  if (v2)
  {
    if (v2 < 15)
    {
      if (v2 == BYTE6(v3)) {
        return;
      }
      if (v2 <= BYTE6(v3))
      {
        if (v2 < 0)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x18344C754LL);
        }
      }

      else
      {
        char v14 = v2;
        bzero((char *)&v10 + BYTE6(v3), v2 - BYTE6(v3));
        LOBYTE(v4) = v12;
        LOBYTE(v5) = v13;
        LOBYTE(v2) = v14;
      }

      uint64_t v7 = v10;
      unint64_t v8 = v11 | ((unint64_t)v4 << 32) | ((unint64_t)v5 << 40) | ((unint64_t)v2 << 48);
    }

    else
    {
      uint64_t v15 = v1;
      LOWORD(v16) = v3;
      BYTE2(v16) = BYTE2(v3);
      BYTE3(v16) = BYTE3(v3);
      BYTE4(v16) = BYTE4(v3);
      BYTE5(v16) = BYTE5(v3);
      type metadata accessor for __DataStorage();
      uint64_t v6 = swift_allocObject();
      __DataStorage.init(bytes:length:)((unint64_t)&v15, BYTE6(v3));
      if ((unint64_t)v2 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t v9 = swift_allocObject();
        *(void *)(v9 + 16) = 0LL;
        *(void *)(v9 + 24) = BYTE6(v3);
        uint64_t v15 = v9;
        uint64_t v16 = v6;
        Data.LargeSlice.count.setter(v2);
        uint64_t v7 = v15;
        unint64_t v8 = v16 | 0x8000000000000000LL;
      }

      else
      {
        LODWORD(v15) = 0;
        HIDWORD(v15) = BYTE6(v3);
        uint64_t v16 = v6;
        Data.InlineSlice.count.setter(v2);
        uint64_t v7 = v15;
        unint64_t v8 = v16 | 0x4000000000000000LL;
      }
    }
  }

  else
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = 0xC000000000000000LL;
  }

  uint64_t *v0 = v7;
  v0[1] = v8;
}

uint64_t Data._Representation.count.modify(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&loc_18344C780
                                                   + *((int *)qword_18344C7D0 + (*(void *)(v1 + 8) >> 62))))( a1,  a1);
}

void (*sub_18344C790(uint64_t a1, void *a2))()
{
  *a2 = BYTE6(v2);
  return Data._Representation.count.modify;
}

void Data._Representation.count.modify()
{
}

void specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  specialized Data._Representation.withUnsafeBytes<A>(_:)(a1, a2);
}

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

void sub_18344C868()
{
}

uint64_t sub_18344CA58()
{
  uint64_t v4 = v0;
  __int16 v5 = v2;
  char v6 = BYTE2(v2);
  char v7 = BYTE3(v2);
  char v8 = BYTE4(v2);
  char v9 = BYTE5(v2);
  uint64_t v10 = &v4;
  unsigned int v11 = (char *)&v4 + BYTE6(v2);
  __swift_mutable_project_boxed_opaque_existential_1(v1, *(void *)(v1 + 24));
  return dispatch thunk of UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

void sub_18344CC64()
{
}

void sub_18344CE80()
{
  uint64_t v2 = v0;
  __int16 v3 = v1;
  char v4 = BYTE2(v1);
  char v5 = BYTE3(v1);
  char v6 = BYTE4(v1);
  char v7 = BYTE5(v1);
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)&v2, BYTE6(v1));
}

void sub_18344D04C()
{
  uint64_t v3 = v1;
  __int16 v4 = v2;
  char v5 = BYTE2(v2);
  char v6 = BYTE3(v2);
  char v7 = BYTE4(v2);
  char v8 = BYTE5(v2);
  closure #1 in NSFileHandle.write<A>(contentsOf:)(&v3, (_BYTE *)&v3 + BYTE6(v2), v0);
}

uint64_t sub_18344D258( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t value, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  uint64_t v31 = v26;
  __int16 v32 = v27;
  char v33 = BYTE2(v27);
  char v34 = BYTE3(v27);
  char v35 = BYTE4(v27);
  size_t v28 = BYTE6(v27);
  char v36 = BYTE5(v27);
  uint64_t v29 = (const char *)(String.utf8CString.getter() + 32);
  swift_bridgeObjectRetain_n();
  fsetxattr(v25, v29, &v31, v28, 0, 0);
  swift_bridgeObjectRelease_n();
  return swift_release();
}

uint64_t sub_18344D4E0()
{
  uint64_t v4 = v1;
  __int16 v5 = v2;
  char v6 = BYTE2(v2);
  char v7 = BYTE3(v2);
  char v8 = BYTE4(v2);
  char v9 = BYTE5(v2);
  return closure #1 in Data.customMirror.getter((uint64_t)&v4, (uint64_t)&v4 + BYTE6(v2), v0);
}

uint64_t sub_18344D6B8()
{
  uint64_t v8 = v3;
  __int16 v9 = v4;
  char v10 = BYTE2(v4);
  char v11 = BYTE3(v4);
  char v12 = BYTE4(v4);
  char v13 = BYTE5(v4);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  outlined consume of Data._Representation(v1, v0);
  if (!v2) {
    char v5 = v7;
  }
  return v5 & 1;
}

void Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_18344D8DC()
{
  uint64_t v4 = v1;
  __int16 v5 = v2;
  char v6 = BYTE2(v2);
  char v7 = BYTE3(v2);
  char v8 = BYTE4(v2);
  char v9 = BYTE5(v2);
  return v0(&v4, (char *)&v4 + BYTE6(v2));
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t a1)
{
  __asm { BR              X12 }

{
  __asm { BR              X13 }

uint64_t sub_18344DAB4@<X0>( uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3, uint64_t __dst, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v30 = v18;
  LOWORD(v31) = a2;
  BYTE2(v31) = BYTE2(a2);
  HIBYTE(v31) = BYTE3(a2);
  unsigned __int8 v32 = BYTE4(a2);
  unsigned __int8 v33 = BYTE5(a2);
  uint64_t v22 = BYTE6(a2);
  unsigned __int8 v34 = BYTE6(a2);
  specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a1, v19, (char *)&v30, BYTE6(a2));
  if (v21 == 2) {
    char v23 = _allASCII(_:)((char *)&v30, v22);
  }
  else {
    char v23 = v21 & 1;
  }
  uint64_t v24 = v30;
  uint64_t v25 = v31;
  uint64_t v26 = v32;
  uint64_t v27 = v33;
  uint64_t v28 = v34;
  swift_bridgeObjectRelease();
  *uint64_t v20 = v24;
  v20[1] = v25 | (v26 << 32) | (v27 << 40) | (v28 << 48);
  return v23 & 1;
}

void sub_18344DD00(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = &v5[BYTE6(v3)];
  *uint64_t v4 = v2;
  v4[1] = v3;
}

void Data._Representation.withUnsafeMutableBytes<A>(_:)()
{
  __asm { BR              X15 }

uint64_t sub_18344DDF4()
{
  uint64_t v6 = v2;
  LOWORD(v7) = v1;
  BYTE2(v7) = BYTE2(v1);
  HIBYTE(v7) = BYTE3(v1);
  unsigned __int8 v8 = BYTE4(v1);
  unsigned __int8 v9 = BYTE5(v1);
  unsigned __int8 v10 = BYTE6(v1);
  uint64_t result = v0(&v6, (char *)&v6 + BYTE6(v1));
  unint64_t v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *uint64_t v3 = v6;
  v3[1] = v5;
  return result;
}

void Data._Representation.enumerateBytes(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_18344DFA0()
{
  uint64_t v5 = v1;
  __int16 v6 = v2;
  char v7 = BYTE2(v2);
  char v8 = BYTE3(v2);
  char v9 = BYTE4(v2);
  char v10 = BYTE5(v2);
  char v4 = 0;
  return v0(&v5, BYTE6(v2), 0LL, &v4);
}

void Data._Representation.append(contentsOf:)()
{
  __asm { BR              X12 }

void sub_18344E1CC( unint64_t a1@<X8>, char a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v34 = v17;
  LOWORD(v35) = a1;
  BYTE2(v35) = BYTE2(a1);
  uint64_t v21 = v20 - (void)v19;
  unint64_t v22 = HIDWORD(a1);
  HIBYTE(v35) = BYTE3(a1);
  unint64_t v23 = a1 >> 40;
  char v36 = BYTE4(a1);
  if (v19) {
    uint64_t v24 = v20 - (void)v19;
  }
  else {
    uint64_t v24 = 0LL;
  }
  uint64_t v25 = BYTE6(a1);
  char v37 = BYTE5(a1);
  BOOL v26 = __OFADD__(BYTE6(a1), v24);
  uint64_t v27 = BYTE6(a1) + v24;
  if (v26)
  {
    __break(1u);
    JUMPOUT(0x18344E500LL);
  }

  if (v27 <= 14)
  {
    unint64_t v31 = HIWORD(a1);
    if (v19 && (const void *)v20 != v19)
    {
      memcpy((char *)&v34 + BYTE6(a1), v19, v20 - (void)v19);
      if (v21 > 255)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x18344E558LL);
      }

      LODWORD(v31) = v31 + v21;
      LOBYTE(v22) = v36;
      LOBYTE(v23) = v37;
    }

    uint64_t v29 = v34;
    unint64_t v30 = v35 | ((unint64_t)v22 << 32) | ((unint64_t)v23 << 40) | ((unint64_t)v31 << 48);
  }

  else
  {
    uint64_t v38 = v17;
    LOWORD(v39) = a1;
    BYTE2(v39) = BYTE2(a1);
    BYTE3(v39) = BYTE3(a1);
    BYTE4(v39) = BYTE4(a1);
    BYTE5(v39) = BYTE5(a1);
    if ((unint64_t)v27 > 0x7FFFFFFE)
    {
      type metadata accessor for __DataStorage();
      uint64_t v32 = swift_allocObject();
      __DataStorage.init(bytes:length:)((unint64_t)&v38, v25);
      type metadata accessor for Data.RangeReference();
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = 0LL;
      *(void *)(v33 + 24) = v25;
      uint64_t v38 = v33;
      uint64_t v39 = v32;
      Data.LargeSlice.append(contentsOf:)(v19, v20);
      uint64_t v29 = v38;
      unint64_t v30 = v39 | 0x8000000000000000LL;
    }

    else
    {
      type metadata accessor for __DataStorage();
      uint64_t v28 = swift_allocObject();
      __DataStorage.init(bytes:length:)((unint64_t)&v38, v25);
      LODWORD(v38) = 0;
      HIDWORD(v38) = v25;
      uint64_t v39 = v28;
      Data.InlineSlice.append(contentsOf:)(v19, v20);
      uint64_t v29 = v38;
      unint64_t v30 = v39 | 0x4000000000000000LL;
    }
  }

  *uint64_t v18 = v29;
  v18[1] = v30;
}

void Data._Representation.resetBytes(in:)()
{
  __asm { BR              X12 }

void sub_18344E5BC(uint64_t a1@<X8>)
{
  uint64_t v10 = v1;
  LOWORD(v11) = a1;
  BYTE2(v11) = BYTE2(a1);
  HIBYTE(v11) = BYTE3(a1);
  unsigned __int8 v12 = BYTE4(a1);
  unsigned __int8 v14 = BYTE6(a1);
  uint64_t v5 = BYTE6(a1);
  unsigned __int8 v13 = BYTE5(a1);
  if (BYTE6(a1) >= v3)
  {
    if (BYTE6(a1) < v4)
    {
      __break(1u);
      JUMPOUT(0x18344E8E0LL);
    }

    if (__OFSUB__(v3, v4))
    {
      __break(1u);
      JUMPOUT(0x18344E8E8LL);
    }

    bzero((char *)&v10 + v4, v3 - v4);
    uint64_t v7 = v10;
    unint64_t v8 = v11 | ((unint64_t)v12 << 32) | ((unint64_t)v13 << 40) | ((unint64_t)v14 << 48);
  }

  else
  {
    uint64_t v15 = v1;
    LOWORD(v16) = a1;
    BYTE2(v16) = BYTE2(a1);
    BYTE3(v16) = BYTE3(a1);
    BYTE4(v16) = BYTE4(a1);
    BYTE5(v16) = BYTE5(a1);
    type metadata accessor for __DataStorage();
    uint64_t v6 = swift_allocObject();
    __DataStorage.init(bytes:length:)((unint64_t)&v15, v5);
    if (v3 > 2147483646)
    {
      type metadata accessor for Data.RangeReference();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = 0LL;
      *(void *)(v9 + 24) = v5;
      uint64_t v15 = v9;
      uint64_t v16 = v6;
      Data.LargeSlice.resetBytes(in:)(v4, v3);
      uint64_t v7 = v15;
      unint64_t v8 = v16 | 0x8000000000000000LL;
    }

    else
    {
      LODWORD(v15) = 0;
      HIDWORD(v15) = v5;
      uint64_t v16 = v6;
      Data.InlineSlice.resetBytes(in:)(v4, v3);
      uint64_t v7 = v15;
      unint64_t v8 = v16 | 0x4000000000000000LL;
    }
  }

  *uint64_t v2 = v7;
  v2[1] = v8;
}

uint64_t Data._Representation.endIndex.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_18344E974 + 4 * byte_183829B98[a2 >> 62]))(0LL);
}

uint64_t sub_18344E974(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

uint64_t sub_18344E97C@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_18344E984@<X0>(uint64_t a1@<X8>)
{
  return a1 >> 32;
}

uint64_t outlined destroy of ContiguousBytes?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t Data._Representation.startIndex.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)nullsub_12 + 4 * byte_183829B9C[a2 >> 62]))(0LL);
}

uint64_t sub_18344E9F4@<X0>(int a1@<W8>)
{
  return a1;
}

uint64_t sub_18344E9FC@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 + 16);
}

void Data._Representation.replaceSubrange(_:with:count:)()
{
  __asm { BR              X10 }

void sub_18344EA68( int a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t __dst, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  LOWORD(v46) = a2;
  BYTE2(v46) = BYTE2(a2);
  HIBYTE(v46) = BYTE3(a2);
  unsigned __int8 v47 = BYTE4(a2);
  unsigned __int8 v48 = BYTE5(a2);
  uint64_t v36 = BYTE6(a2);
  unsigned __int8 v49 = BYTE6(a2);
  size_t v37 = BYTE6(a2) + v34;
  if (__OFADD__(BYTE6(a2), v34))
  {
    __break(1u);
    JUMPOUT(0x18344EFE8LL);
  }

  uint64_t v38 = v31 - v32;
  if (__OFSUB__(v31, v32))
  {
    __break(1u);
    JUMPOUT(0x18344EFF8LL);
  }

  BOOL v39 = __OFSUB__(v37, v38);
  uint64_t v40 = v37 - v38;
  if (v39)
  {
    __break(1u);
    JUMPOUT(0x18344F004LL);
  }

  if (v40)
  {
    if (v40 <= 14)
    {
      Data.InlineData.replaceSubrange(_:with:count:)(v32, v31, v33, v34);
      uint64_t v42 = v35;
      unint64_t v43 = v46 | ((unint64_t)v47 << 32) | ((unint64_t)v48 << 40) | ((unint64_t)v49 << 48);
    }

    else
    {
      uint64_t v50 = v35;
      LOWORD(v51) = a2;
      BYTE2(v51) = BYTE2(a2);
      BYTE3(v51) = BYTE3(a2);
      BYTE4(v51) = BYTE4(a2);
      BYTE5(v51) = BYTE5(a2);
      if ((unint64_t)v40 > 0x7FFFFFFE)
      {
        type metadata accessor for __DataStorage();
        uint64_t v44 = swift_allocObject();
        __DataStorage.init(bytes:length:)((unint64_t)&v50, v36);
        type metadata accessor for Data.RangeReference();
        uint64_t v45 = swift_allocObject();
        *(void *)(v45 + 16) = 0LL;
        *(void *)(v45 + 24) = v36;
        uint64_t v50 = v45;
        uint64_t v51 = v44;
        Data.LargeSlice.replaceSubrange(_:with:count:)(v32, v31, v33, v34);
        uint64_t v42 = v50;
        unint64_t v43 = v51 | 0x8000000000000000LL;
      }

      else
      {
        type metadata accessor for __DataStorage();
        uint64_t v41 = swift_allocObject();
        __DataStorage.init(bytes:length:)((unint64_t)&v50, v36);
        LODWORD(v5__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0;
        HIDWORD(v5__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v36;
        uint64_t v51 = v41;
        Data.InlineSlice.replaceSubrange(_:with:count:)(v32, v31, v33, v34);
        uint64_t v42 = v50;
        unint64_t v43 = v51 | 0x4000000000000000LL;
      }
    }

    *unint64_t v30 = v42;
    v30[1] = v43;
  }

  else
  {
    *(_OWORD *)unint64_t v30 = xmmword_18372EE30;
  }

char *closure #1 in closure #1 in Data._Representation.replaceSubrange(_:with:count:)( char *__src, int a2, int64_t a3, uint64_t a4, char *__dst, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = __src;
  if (a3 >= 1 && __dst)
  {
    if (!__src) {
      goto LABEL_13;
    }
    __src = (char *)memmove(__dst, __src, a3);
  }

  if (a4 < a7 && __dst)
  {
    if (!v10)
    {
LABEL_14:
      __break(1u);
LABEL_15:
      __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return __src;
    }

    size_t v11 = a7 - a4;
    if (!__OFSUB__(a7, a4))
    {
      if ((v11 & 0x8000000000000000LL) == 0) {
        return (char *)memmove(&__dst[a4], &v10[a4], v11);
      }
      goto LABEL_15;
    }

    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  return __src;
}

void Data._Representation.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

void Data._Representation.subscript.setter()
{
  __asm { BR              X11 }

void sub_18344F38C(uint64_t a1@<X8>)
{
  uint64_t v6 = v4;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  unsigned __int8 v8 = BYTE4(a1);
  unsigned __int8 v9 = BYTE5(a1);
  unsigned __int8 v10 = BYTE6(a1);
  if (v3 >= BYTE6(a1))
  {
    __break(1u);
    JUMPOUT(0x18344F64CLL);
  }

  if (v3 < 0 || (unint64_t)v3 > 0xD)
  {
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x18344F6CCLL);
  }

  *((_BYTE *)&v6 + v3) = v2;
  unint64_t v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *uint64_t v1 = v6;
  v1[1] = v5;
}

void (*Data._Representation.subscript.modify(uint64_t a1, uint64_t a2))()
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  Data._Representation.subscript.getter(a2, *v2, v2[1]);
  *(_BYTE *)(a1 + 16) = v4;
  return Data._Representation.subscript.modify;
}

void Data._Representation.subscript.modify()
{
}

void Data._Representation.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void Data._Representation.copyBytes(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X10 }

uint64_t Data._representation.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t Data._representation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*Data._representation.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t (*Data.Deallocator._deallocator.getter())()
{
  unint64_t v1 = *v0;
  if (*v0 >= 4) {
    uint64_t v2 = (uint64_t (*)())*v0;
  }
  else {
    uint64_t v2 = off_189C90278[v1];
  }
  outlined copy of Data.Deallocator(v1);
  return v2;
}

unint64_t Data.init<A>(buffer:)(unint64_t __src, uint64_t a2, uint64_t a3)
{
  if (__src)
  {
    uint64_t v3 = *(void *)(*(void *)(a3 - 8) + 72LL);
    uint64_t v4 = a2 * v3;
    if ((unsigned __int128)(a2 * (__int128)v3) >> 64 == (a2 * v3) >> 63)
    {
      if (v4)
      {
        unint64_t v5 = __src;
        if (v4 <= 14)
        {
          return specialized Data.InlineData.init(_:)((_BYTE *)__src, (_BYTE *)(__src + v4));
        }

        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          __DataStorage.init(bytes:length:)(v5, v4);
          if ((unint64_t)v4 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            __src = swift_allocObject();
            *(void *)(__src + 16) = 0LL;
            *(void *)(__src + 24) = v4;
          }

          else
          {
            return v4 << 32;
          }
        }
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      __break(1u);
    }
  }

  return __src;
}

uint64_t Data.init(capacity:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      return 0LL;
    }

    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)(v1);
      if (v1 > 0x7FFFFFFE)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0LL;
        *(void *)(result + 24) = 0LL;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

_BYTE *closure #1 in Data.init<A>(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (_BYTE *)specialized Data.LargeSlice.init(_:)((unint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = specialized Data.InlineSlice.init(_:)((unint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

unint64_t closure #2 in Data.init<A>(_:)@<X0>( unint64_t __src@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  if (!__src) {
    goto LABEL_7;
  }
  if (!a2)
  {
    __src = 0LL;
LABEL_7:
    unint64_t v7 = 0xC000000000000000LL;
    goto LABEL_10;
  }

  unint64_t v5 = __src;
  if (a2 <= 14)
  {
    __src = specialized Data.InlineData.init(_:)((_BYTE *)__src, (_BYTE *)(__src + a2));
    unint64_t v7 = v8 & 0xFFFFFFFFFFFFFFLL;
  }

  else
  {
    type metadata accessor for __DataStorage();
    uint64_t v6 = swift_allocObject();
    __DataStorage.init(bytes:length:)(v5, a2);
    if ((unint64_t)a2 >= 0x7FFFFFFF)
    {
      type metadata accessor for Data.RangeReference();
      __src = swift_allocObject();
      *(void *)(__src + 16) = 0LL;
      *(void *)(__src + 24) = a2;
      unint64_t v7 = v6 | 0x8000000000000000LL;
    }

    else
    {
      __src = a2 << 32;
      unint64_t v7 = v6 | 0x4000000000000000LL;
    }
  }

uint64_t closure #3 in Data.init<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](a1);
  size_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v9) {
    v14[1] = v4;
  }
  swift_getAssociatedTypeWitness();
  uint64_t v12 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, a3);
  uint64_t result = dispatch thunk of Sequence._copyContents(initializing:)();
  *(void *)(a4 + v12) = result;
  return result;
}

uint64_t Data.init<A>(bytes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  __n128 v7 = MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v9, a1, a2, v7);
  uint64_t v10 = Data.init<A>(_:)((uint64_t)v9, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  return v10;
}

_BYTE *Data.init(bytes:)(uint64_t a1)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  uint64_t v9 = &protocol witness table for <A> [A];
  v7[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v7, v8);
  uint64_t v3 = (_BYTE *)(*v2 + 32LL);
  uint64_t v4 = &v3[*(void *)(*v2 + 16LL)];
  swift_bridgeObjectRetain();
  unint64_t v5 = specialized Data._Representation.init(_:)(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  swift_bridgeObjectRelease();
  return v5;
}

void *Data.init(bytes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = specialized Data.init<A>(_:)(a1, a2, a3, a4);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t key path getter for Data._Representation.count : Data._Representation(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)&loc_1834502C8 + *((int *)qword_183450318 + (*(void *)(a1 + 8) >> 62))))();
}

void sub_1834502D8(void *a1@<X8>)
{
  *a1 = BYTE6(v1);
}

void Data.count.setter(uint64_t a1)
{
  if (a1 < 0) {
    __break(1u);
  }
  else {
    Data._Representation.count.setter();
  }
}

uint64_t Data.count.modify(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&loc_183450350
                                                   + *((int *)qword_1834503A0 + (*(void *)(v1 + 8) >> 62))))( a1,  a1);
}

void (*sub_183450360(uint64_t a1, void *a2))(uint64_t *a1, char a2)
{
  *a2 = BYTE6(v2);
  return Data.count.modify;
}

void Data.count.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    if ((v2 & 0x8000000000000000LL) == 0)
    {
LABEL_5:
      Data._Representation.count.setter();
      return;
    }

    __break(1u);
  }

  if ((v2 & 0x8000000000000000LL) == 0) {
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t Data.regions.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

void Data.withUnsafeBytes<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_183450474()
{
  uint64_t v4 = v1;
  __int16 v5 = v2;
  char v6 = BYTE2(v2);
  char v7 = BYTE3(v2);
  char v8 = BYTE4(v2);
  char v9 = BYTE5(v2);
  return v0(&v4);
}

void specialized Data.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
}

{
  specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
}

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

uint64_t (*sub_183450660())()
{
  uint64_t v4 = v0;
  __int16 v5 = v1;
  char v6 = BYTE2(v1);
  char v7 = BYTE3(v1);
  char v8 = BYTE4(v1);
  char v9 = BYTE5(v1);
  uint64_t result = (uint64_t (*)())static String._tryFromUTF8(_:)();
  if (!v3) {
    return specialized String.init<A, B>(_validating:as:)((unsigned __int8 *)&v4, BYTE6(v1));
  }
  return result;
}

uint64_t sub_18345090C()
{
  uint64_t v3 = v0;
  __int16 v4 = v1;
  char v5 = BYTE2(v1);
  char v6 = BYTE3(v1);
  char v7 = BYTE4(v1);
  char v8 = BYTE5(v1);
  return specialized String.init<A, B>(_validating:as:)((char *)&v3, BYTE6(v1));
}

uint64_t sub_183450C00()
{
  *(void *)(v5 - 112) = v0;
  *(_WORD *)(v5 - 104) = v3;
  *(_BYTE *)(v5 - 102) = BYTE2(v3);
  *(_BYTE *)(v5 - 101) = BYTE3(v3);
  *(_BYTE *)(v5 - 10__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = BYTE4(v3);
  *(_BYTE *)(v5 - 99) = BYTE5(v3);
  uint64_t result = v4(v5 - 112, BYTE6(v3), v2);
  if (!v1) {
    return *(void *)(v5 - 96);
  }
  return result;
}

id sub_183450FA4()
{
  uint64_t v7 = v0;
  __int16 v8 = v2;
  char v9 = BYTE2(v2);
  char v10 = BYTE3(v2);
  char v11 = BYTE4(v2);
  char v12 = BYTE5(v2);
  id v3 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytes_length_encoding_,  &v7,  BYTE6(v2),  v1);
  if (!v3) {
    return 0LL;
  }
  __int16 v4 = v3;
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v5;
}

void Data.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_183451320()
{
  uint64_t v7 = v2;
  __int16 v8 = v5;
  char v9 = BYTE2(v5);
  char v10 = BYTE3(v5);
  char v11 = BYTE4(v5);
  char v12 = BYTE5(v5);
  uint64_t result = v3(&v7, BYTE6(v5));
  if (!v4) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v0 - 8) + 56LL))(v1, 0LL, 1LL, v0);
  }
  return result;
}

void Data.withUnsafeMutableBytes<A, B>(_:)()
{
}

uint64_t Data.copyBytes(to:count:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 < 0)
  {
    __break(1u);
    JUMPOUT(0x18345162CLL);
  }

  if (a2) {
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t, unint64_t))((char *)&loc_1834515EC
  }
                                                                                        + dword_183451634[a4 >> 62]))( result,  0LL,  a3,  a3,  a4);
  return result;
}

uint64_t Data.startIndex.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)nullsub_13 + 4 * byte_183829BA0[a2 >> 62]))(0LL);
}

uint64_t sub_18345166C@<X0>(int a1@<W8>)
{
  return a1;
}

uint64_t sub_183451674@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 + 16);
}

void Data._copyBytesHelper(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 != a3) {
    Data._Representation.copyBytes(to:from:)(a1, a2, a3, a4, a5);
  }
}

void Data.copyBytes(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 != a3) {
    Data._Representation.copyBytes(to:from:)(a1, a2, a3, a4, a5);
  }
}

void Data.copyBytes<A>(to:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __asm { BR              X11 }

uint64_t sub_1834516CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = BYTE6(a7);
  if (!BYTE6(a7)) {
    return 0LL;
  }
  if ((a5 & 1) != 0) {
    goto LABEL_11;
  }
  if (v9 != a4)
  {
    uint64_t v11 = *(void *)(*(void *)(a8 - 8) + 72LL);
    uint64_t v10 = a2 * v11;
    if ((unsigned __int128)(a2 * (__int128)v11) >> 64 != (a2 * v11) >> 63)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }

    uint64_t v8 = a4 - v9;
    if (__OFSUB__(a4, v9))
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }

    if (v8 < v10) {
      uint64_t v10 = a4 - v9;
    }
    uint64_t v12 = v9 + v10;
    if (__OFADD__(v9, v10)) {
      goto LABEL_32;
    }
    if (v12 >= v9) {
      goto LABEL_21;
    }
    __break(1u);
LABEL_11:
    if ((_DWORD)v8)
    {
      if ((_DWORD)v8 == 1) {
        uint64_t v9 = (int)a6;
      }
      else {
        uint64_t v9 = *(void *)(a6 + 16);
      }
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    uint64_t v13 = *(void *)(*(void *)(a8 - 8) + 72LL);
    if ((unsigned __int128)(a2 * (__int128)v13) >> 64 == (a2 * v13) >> 63)
    {
      if (v10 >= a2 * v13) {
        uint64_t v10 = a2 * v13;
      }
      uint64_t v12 = v9 + v10;
      if (!__OFADD__(v9, v10))
      {
        if (v12 >= v9)
        {
LABEL_21:
          if (v9 == v12) {
            return 0LL;
          }
          if (!a1)
          {
LABEL_33:
            __break(1u);
            JUMPOUT(0x1834517FCLL);
          }

          Data._Representation.copyBytes(to:from:)(a1, v9, v12, a6, a7);
          uint64_t v14 = v12 - v9;
          if (!__OFSUB__(v12, v9)) {
            return v14;
          }
          goto LABEL_29;
        }

void Data.enumerateBytes(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_183451860()
{
  uint64_t v5 = v1;
  __int16 v6 = v2;
  char v7 = BYTE2(v2);
  char v8 = BYTE3(v2);
  char v9 = BYTE4(v2);
  char v10 = BYTE5(v2);
  char v4 = 0;
  return v0(&v5, BYTE6(v2), 0LL, &v4);
}

void Data._append<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a1
      && (unsigned __int128)(a2 * (__int128)*(uint64_t *)(*(void *)(a3 - 8) + 72LL)) >> 64 != (a2
                                                                                              * *(void *)(*(void *)(a3 - 8) + 72LL)) >> 63)
    {
      __break(1u);
    }

    else
    {
      Data._Representation.append(contentsOf:)();
    }
  }

void Data.append(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

Swift::Void __swiftcall Data.append(contentsOf:)(Swift::OpaquePointer contentsOf)
{
  if (*((void *)contentsOf._rawValue + 2)) {
    Data._Representation.append(contentsOf:)();
  }
}

uint64_t Data.endIndex.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_183451CC0 + 4 * byte_183829BA4[a2 >> 62]))(0LL);
}

uint64_t sub_183451CC0(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

uint64_t sub_183451CC8@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_183451CD0@<X0>(uint64_t a1@<X8>)
{
  return a1 >> 32;
}

void Data.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  if ((a2 | a1) < 0) {
    __break(1u);
  }
  else {
    Data._Representation.resetBytes(in:)();
  }
}

void closure #3 in Data.append<A>(contentsOf:)( uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __n128 v13 = MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v9)
  {
    if (__OFSUB__(v10 - v9, v11))
    {
      __break(1u);
      return;
    }

    uint64_t v15 = v9 + v11;
    uint64_t v20 = v10;
  }

  else
  {
    uint64_t v20 = 0LL;
    uint64_t v15 = 0LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))( (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v12,  a2,  v13);
  unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  uint64_t v18 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(v17 + v16, v14, a2);
  MEMORY[0x1895F8858](v18);
  *(&v19 - 4) = a2;
  *(&v19 - 3) = a3;
  *(&v19 - 2) = (uint64_t)partial apply for implicit closure #3 in implicit closure #2 in closure #3 in Data.append<A>(contentsOf:);
  *(&v19 - 1) = v17;
  if (v15) {
    partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableBufferPointer<UInt8>) -> (@out A.Sequence.Iterator, @unowned Int)( v15,  v20 - v15,  a4);
  }
  else {
    partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableBufferPointer<UInt8>) -> (@out A.Sequence.Iterator, @unowned Int)( 0LL,  0LL,  a4);
  }
  swift_release();
}

uint64_t implicit closure #3 in implicit closure #2 in closure #3 in Data.append<A>(contentsOf:)(uint64_t a1)
{
  __n128 v1 = MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))( (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4,  v5,  v1);
  return dispatch thunk of Sequence._copyContents(initializing:)();
}

void Data.replaceSubrange(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void Data.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    if (a3)
    {
      if ((unsigned __int128)(a4 * (__int128)*(uint64_t *)(*(void *)(a5 - 8) + 72LL)) >> 64 == (a4
                                                                                                * *(void *)(*(void *)(a5 - 8) + 72LL)) >> 63)
      {
        Data._Representation.replaceSubrange(_:with:count:)();
        return;
      }

      __break(1u);
    }

    __break(1u);
  }

void closure #1 in Data.replaceSubrange<A>(_:with:)()
{
}

uint64_t closure #3 in Data.replaceSubrange<A>(_:with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v20[3] = a4;
  v20[4] = a7;
  v20[1] = a5;
  __int128 v20[2] = a6;
  uint64_t v11 = *(void *)(a8 - 8);
  MEMORY[0x1895F8858](a1);
  __n128 v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v16 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v18 = (char *)v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v13, a3, a8, v16);
  uint64_t result = dispatch thunk of Sequence._copyContents(initializing:)();
  if (result == a2)
  {
    swift_getAssociatedConformanceWitness();
    uint64_t result = dispatch thunk of IteratorProtocol.next()();
    if (v21 == 1)
    {
      Data._Representation.replaceSubrange(_:with:count:)();
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void Data.subdata(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void Data.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_1834523B4()
{
  return Hasher.combine(bytes:)();
}

void Data.advanced(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x1834526B0LL);
}

void Data.subscript.getter(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v72 = a2;
  uint64_t v61 = a6;
  uint64_t v62 = a1;
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a6 + 8) + 24LL) + 16LL);
  swift_getAssociatedTypeWitness();
  uint64_t v50 = v9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  v48[3] = (char *)v48 - v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  MEMORY[0x1895F8858](v11);
  uint64_t v63 = a4;
  uint64_t v64 = a5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v65 = type metadata accessor for Range();
  uint64_t v60 = *(void *)(v65 - 8);
  MEMORY[0x1895F8858](v65);
  char v57 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v59 = (char *)v48 - v14;
  MEMORY[0x1895F8858](v15);
  uint64_t v74 = (char *)v48 - v16;
  MEMORY[0x1895F8858](v17);
  MEMORY[0x1895F8858](v18);
  unint64_t v67 = (char *)v48 - v19;
  MEMORY[0x1895F8858](v20);
  MEMORY[0x1895F8858](v21);
  MEMORY[0x1895F8858](v22);
  MEMORY[0x1895F8858](v23);
  uint64_t v51 = (char *)v48 - v24;
  MEMORY[0x1895F8858](v25);
  MEMORY[0x1895F8858](v26);
  uint64_t v68 = (char *)v48 - v27;
  MEMORY[0x1895F8858](v28);
  uint64_t v53 = (char *)v48 - v29;
  MEMORY[0x1895F8858](v30);
  uint64_t v66 = (char *)v48 - v31;
  MEMORY[0x1895F8858](v32);
  Swift::String v54 = (char *)v48 - v33;
  MEMORY[0x1895F8858](v34);
  BOOL v52 = (char *)v48 - v35;
  MEMORY[0x1895F8858](v36);
  uint64_t v56 = (char *)v48 - v37;
  MEMORY[0x1895F8858](v38);
  int v73 = (char *)v48 - v39;
  MEMORY[0x1895F8858](v40);
  uint64_t v71 = (char *)v48 - v41;
  MEMORY[0x1895F8858](v42);
  v48[2] = v43;
  uint64_t v55 = v44;
  v48[1] = v45;
  unsigned int v46 = (char *)&loc_183452AF8 + *((int *)qword_1834538E0 + (a3 >> 62));
  uint64_t v70 = (char *)v48 - v47;
  __asm { BR              X9 }

uint64_t sub_183452B0C()
{
  *(void *)(v1 - 96) = 0LL;
  *(void *)(v1 - 176) = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v2 = dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  return ((uint64_t (*)(uint64_t))((char *)&loc_183452B4C + *((int *)qword_1834538F0 + v0)))(v2);
}

uint64_t sub_183452B60()
{
  *(void *)(v8 - 20__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v5;
  *(void *)(v8 - 96) = BYTE6(v7);
  uint64_t v9 = *(void *)(v8 - 152);
  uint64_t v10 = v0;
  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  uint64_t v11 = v3;
  uint64_t v12 = *(void *)(v8 - 160);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
  {
    __break(1u);
    goto LABEL_70;
  }

  *(void *)(v8 - 352) = v6;
  *(void *)(v8 - 312) = v7;
  uint64_t v13 = *(void *)(v8 - 272);
  uint64_t v14 = &v1[*(int *)(v13 + 48)];
  uint64_t v15 = v9;
  uint64_t v16 = (void (*)(char *, uint64_t, uint64_t))v4[2];
  v16(v1, v12, v0);
  v16(v14, v15, v0);
  uint64_t v17 = &v2[*(int *)(v13 + 48)];
  v16(v2, (uint64_t)v1, v0);
  v16(v17, (uint64_t)v14, v0);
  uint64_t v18 = (void (*)(uint64_t, uint64_t, uint64_t))v4[4];
  *(void *)(v8 - 304) = v11;
  uint64_t v19 = v1;
  uint64_t v20 = *(void *)(v8 - 280);
  v18(v20, (uint64_t)v2, v0);
  uint64_t v21 = (void (*)(uint64_t, uint64_t))v4[1];
  v21((uint64_t)v17, v0);
  uint64_t v22 = &v2[*(int *)(v13 + 48)];
  v18((uint64_t)v2, (uint64_t)v19, v0);
  v18((uint64_t)v22, (uint64_t)v14, v0);
  uint64_t v23 = *(void *)(v8 - 216);
  uint64_t v24 = v20 + *(int *)(v23 + 36);
  *(void *)(v8 - 272) = v18;
  v18(v24, (uint64_t)v22, v0);
  v21((uint64_t)v2, v0);
  uint64_t v25 = *(void *)(v8 - 256);
  uint64_t v26 = *(void *)(v8 - 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v26, v20, v23);
  uint64_t v27 = *(void *)(*(void *)(v8 - 304) + 32LL);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)(v8 - 112) = v27;
  *(void *)(v8 - 104) = AssociatedConformanceWitness;
  MEMORY[0x186E20D4C](MEMORY[0x189618A60], v23, v8 - 112);
  uint64_t v29 = *(void *)(v8 - 128);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  *(void *)(v8 - 224) = v30;
  v30(v26, v23);
  uint64_t v31 = *(char **)(v8 - 136);
  v16(v31, v29, v0);
  LOBYTE(v27) = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v32 = *(char **)(v8 - 288);
  v16(v32, (uint64_t)v31, v0);
  uint64_t v33 = v21;
  if ((v27 & 1) == 0)
  {
    v21((uint64_t)v32, v0);
    uint64_t v35 = *(char **)(v8 - 184);
    uint64_t v36 = *(void *)(v8 - 136);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v8 - 208);
    goto LABEL_8;
  }

  uint64_t v34 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v21((uint64_t)v32, v0);
  uint64_t v35 = *(char **)(v8 - 184);
  uint64_t v36 = *(void *)(v8 - 136);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v8 - 208);
  if (v34 <= 64) {
    goto LABEL_8;
  }
  uint64_t v1 = *(char **)(v8 - 336);
  v16(v1, *(void *)(v8 - 136), v0);
  *(void *)(v8 - 96) = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    char v75 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v76 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v75 & 1) == 0)
    {
      if (v76 >= 64)
      {
        v33(*(void *)(v8 - 336), v0);
        goto LABEL_8;
      }

      uint64_t v1 = *(char **)(v8 - 336);
      goto LABEL_53;
    }

    if (v76 <= 64)
    {
      uint64_t v90 = *(void *)(v8 - 368);
      uint64_t v91 = swift_getAssociatedConformanceWitness();
      MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v90, v91);
      uint64_t v92 = *(void *)(v8 - 320);
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      uint64_t v93 = *(void *)(v8 - 336);
      *(_DWORD *)(v8 - 232) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v94 = v92;
      uint64_t v1 = (char *)v33;
      v33(v94, v0);
      uint64_t v10 = *(void *)(v8 - 384);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 272))(v10, v93, v0);
      if ((*(_DWORD *)(v8 - 232) & 1) != 0)
      {
LABEL_71:
        ((void (*)(uint64_t, uint64_t))v1)(v10, v0);
        __break(1u);
        goto LABEL_72;
      }

      *(void *)(v8 - 232) = *(void *)(v8 - 96);
      uint64_t v95 = dispatch thunk of BinaryInteger._lowWord.getter();
      v33(v10, v0);
      BOOL v89 = v95 < *(void *)(v8 - 232);
      uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v8 - 208);
      if (v89) {
        goto LABEL_54;
      }
      goto LABEL_8;
    }

void (*Data.subscript.modify(uint64_t a1, uint64_t a2))()
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  Data.subscript.getter(a2, *v2, v2[1]);
  *(_BYTE *)(a1 + 16) = v4;
  return Data._Representation.subscript.modify;
}

uint64_t key path setter for Data.subscript(_:) : Data(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  outlined copy of Data._Representation(*a1, v2);
  specialized Data._Representation.withUnsafeBytes<A>(_:)(v1, v2);
  return outlined consume of Data._Representation(v1, v2);
}

uint64_t Data.subscript.setter(uint64_t a1, unint64_t a2)
{
  return outlined consume of Data._Representation(a1, a2);
}

void (*Data.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  Data._Representation.subscript.getter(a2, a3, *v3, v3[1]);
  *uint64_t v7 = v8;
  v7[1] = v9;
  return Data.subscript.modify;
}

void Data.subscript.modify(uint64_t **a1, char a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(v3, v4);
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v3, v4);
    outlined consume of Data._Representation(v3, v4);
    uint64_t v5 = *v2;
    unint64_t v6 = v2[1];
  }

  else
  {
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v3, v4);
    uint64_t v5 = v3;
    unint64_t v6 = v4;
  }

  outlined consume of Data._Representation(v5, v6);
  free(v2);
}

{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1];
  unint64_t v6 = (*a1)[6];
  uint64_t v5 = (void *)(*a1)[7];
  uint64_t v7 = (*a1)[4];
  uint64_t v8 = (*a1)[2];
  uint64_t v9 = (*a1)[3];
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(v3, v4);
    specialized Data.subscript.setter(v3, v4, (uint64_t)v5, v8, v9, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v8);
    outlined consume of Data._Representation(v3, v4);
    uint64_t v10 = *v2;
    uint64_t v11 = v2[1];
  }

  else
  {
    specialized Data.subscript.setter(v3, v4, (uint64_t)v5, v8, v9, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v8);
    uint64_t v10 = v3;
    uint64_t v11 = v4;
  }

  outlined consume of Data._Representation(v10, v11);
  free(v5);
  free(v2);
}

uint64_t key path setter for Data.subscript<A>(_:) : <A>DataA( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 24);
  uint64_t v6 = *(void *)(a4 + a3 - 16);
  uint64_t v7 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  outlined copy of Data._Representation(*a1, v9);
  specialized Data.subscript.setter(v8, v9, a3, v5, v6, v7);
  return outlined consume of Data._Representation(v8, v9);
}

uint64_t Data.subscript.setter( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return outlined consume of Data._Representation(a1, a2);
}

void (*Data.subscript.modify( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x40uLL);
  *a1 = v11;
  v11[4] = a5;
  v11[5] = v5;
  v11[2] = a3;
  v11[3] = a4;
  uint64_t v12 = *(void *)(a3 - 8);
  v11[6] = v12;
  v11[7] = malloc(*(void *)(v12 + 64));
  (*(void (**)(void))(v12 + 16))();
  Data.subscript.getter(a2, *(void *)v5, *(void *)(v5 + 8), a3, a4, a5);
  *uint64_t v11 = v13;
  v11[1] = v14;
  return Data.subscript.modify;
}

Swift::Int __swiftcall Data.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1LL);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall Data.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1LL);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t Data.indices.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void, void))((char *)&loc_183453D9C + dword_183453DDC[a2 >> 62]))(0LL, 0LL);
}

uint64_t sub_183453DB0()
{
  return 0LL;
}

uint64_t sub_183453DBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (int)a1;
  if (a1 >> 32 < (int)a1)
  {
    __break(1u);
    JUMPOUT(0x183453DDCLL);
  }

  return result;
}

void Data._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X11 }

void Data.makeIterator()(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_18345409C()
{
}

void Data.Iterator.init(_:at:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_183454144(uint64_t a1)
{
  uint64_t v7 = BYTE6(v2);
  *(void *)(v6 - 88) = BYTE6(v2);
  uint64_t v8 = v3 & 0x1F;
  if (v3 <= 0) {
    uint64_t v8 = -(-v3 & 0x1F);
  }
  BOOL v9 = __OFSUB__(v3, v8);
  uint64_t v10 = v3 - v8;
  if (v9)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (__OFSUB__(BYTE6(v2), v10))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (BYTE6(v2) - v10 >= 33)
  {
    uint64_t v7 = v10 + 32;
    if (__OFADD__(v10, 32LL)) {
LABEL_12:
    }
      __break(1u);
  }

  if (v7 < v10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  *(void *)(v6 - 16__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v4;
  *(void *)(v6 - 152) = v2;
  *(void *)(v6 - 176) = v10;
  *(void *)(v6 - 168) = v7;
  MEMORY[0x1895F8858](a1);
  void v14[2] = v6 - 160;
  v14[3] = v6 - 176;
  v14[4] = v5;
  v14[5] = 32LL;
  specialized Data._Representation.withUnsafeBytes<A>(_:)( (uint64_t)partial apply for specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:),  (uint64_t)v14,  v4,  v2);
  uint64_t result = outlined consume of Data._Representation(v4, v2);
  __int128 v12 = *(_OWORD *)(v6 - 128);
  *uint64_t v1 = *(_OWORD *)(v6 - 144);
  v1[1] = v12;
  __int128 v13 = *(_OWORD *)(v6 - 96);
  v1[2] = *(_OWORD *)(v6 - 112);
  v1[3] = v13;
  return result;
}

uint64_t Data.Iterator._data.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t Data.Iterator._buffer.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Data.Iterator._buffer.setter( uint64_t result, char a2, char a3, char a4, char a5, char a6, char a7, char a8, uint64_t a9, __int128 a10)
{
  *(_BYTE *)(v10 + 16) = result;
  *(_BYTE *)(v10 + 17) = a2;
  *(_BYTE *)(v10 + 18) = a3;
  *(_BYTE *)(v10 + 19) = a4;
  *(_BYTE *)(v10 + 2__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = a5;
  *(_BYTE *)(v10 + 21) = a6;
  *(_BYTE *)(v10 + 22) = a7;
  *(_BYTE *)(v10 + 23) = a8;
  *(void *)(v10 + 24) = a9;
  *(_OWORD *)(v10 + 32) = a10;
  return result;
}

uint64_t (*Data.Iterator._buffer.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.Iterator._idx.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t Data.Iterator._idx.setter(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t (*Data.Iterator._idx.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.Iterator._endIdx.getter()
{
  return *(void *)(v0 + 56);
}

Swift::UInt8_optional __swiftcall Data.Iterator.next()()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  if (v1 < v2)
  {
    *(void *)(v0 + 48) = v1 + 1;
    __asm { BR              X10 }
  }

  return (Swift::UInt8_optional)((v1 >= v2) << 8);
}

Swift::UInt8_optional protocol witness for IteratorProtocol.next() in conformance Data.Iterator@<W0>( Swift::UInt8 *a1@<X8>)
{
  Swift::UInt8_optional result = Data.Iterator.next()();
  *a1 = result.value;
  a1[1] = result.is_nil;
  return result;
}

void Data.range(of:options:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, unint64_t a8)
{
  unint64_t v8 = a8 >> 62;
  if ((a6 & 1) == 0) {
    __asm { BR              X11 }
  }

  __asm { BR              X10 }

uint64_t sub_1834545D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int16 a12, __int16 a13, char a14, char a15, char a16, char a17, char a18, char a19, __int16 a20, char a21, char a22, char a23, char a24)
{
  a13 = v24;
  a14 = BYTE2(v24);
  a15 = BYTE3(v24);
  a16 = BYTE4(v24);
  a17 = BYTE5(v24);
  a18 = BYTE6(v24);
  a19 = HIBYTE(v24);
  a20 = v26;
  a21 = BYTE2(v26);
  a22 = BYTE3(v26);
  a23 = BYTE4(v26);
  a24 = BYTE5(v26);
  id v27 = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F48]),  sel_initWithBytesNoCopy_length_freeWhenDone_,  &a13,  BYTE6(v26),  0);
  return ((uint64_t (*)(id, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_1834546B0
                                                                         + *((int *)qword_183455140 + (v25 >> 62))))( v27,  v28,  v29,  v30,  v31);
}

uint64_t sub_1834546C0()
{
  uint64_t v10 = v3;
  __int16 v11 = v4;
  char v12 = BYTE2(v4);
  char v13 = BYTE3(v4);
  char v14 = BYTE4(v4);
  char v15 = BYTE5(v4);
  id v7 = objc_msgSend(objc_allocWithZone(*(Class *)(v0 + 3912)), sel_initWithBytes_length_, &v10, BYTE6(v4));
  id v8 = objc_msgSend(v5, sel_rangeOfData_options_range_, v7, v6, v1, v2);

  if (v8 != (id)0x7FFFFFFFFFFFFFFFLL) {
    __asm { BR              X12 }
  }

  return 0LL;
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_1834551A4( const void *a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29)
{
  uint64_t v31 = a3;
  __int16 v32 = a4;
  char v33 = BYTE2(a4);
  char v34 = BYTE3(a4);
  char v35 = BYTE4(a4);
  char v36 = BYTE5(a4);
  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x1834552F0LL);
  }

  uint64_t result = memcmp(a1, &v31, BYTE6(a4));
  *uint64_t v29 = (_DWORD)result == 0;
  return result;
}

Swift::Int Data.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Data(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_1834553B0()
{
  return ((uint64_t (*)(void))((char *)&loc_1834553E4 + dword_1834554A4[v0 >> 62]))();
}

uint64_t sub_1834553F4@<X0>(uint64_t a1@<X8>)
{
  if (a1 == BYTE6(v4))
  {
    if (a1 <= 0)
    {
      char v5 = 1;
    }

    else
    {
      outlined copy of Data._Representation(v3, v4);
      specialized Data._Representation.withUnsafeBytes<A>(_:)(v1, v2);
    }
  }

  else
  {
    char v5 = 0;
  }

  return v5 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Data()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Data.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Data(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Data()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Data.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for MutableCollection.subscript.setter in conformance Data()
{
}

void (*protocol witness for MutableCollection.subscript.modify in conformance Data( uint64_t a1, uint64_t *a2))()
{
  uint64_t v4 = *a2;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  Data.subscript.getter(v4, *v2, v2[1]);
  *(_BYTE *)(a1 + 16) = v5;
  return protocol witness for MutableCollection.subscript.modify in conformance Data;
}

void protocol witness for MutableCollection.subscript.modify in conformance Data()
{
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance Data(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  specialized Data._Representation.withUnsafeBytes<A>(_:)(*a1, v2);
  return outlined consume of Data._Representation(v1, v2);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance Data( void *a1, uint64_t *a2))(uint64_t **a1, char a2)
{
  char v5 = malloc(0x28uLL);
  *a1 = v5;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  v5[2] = v2;
  v5[3] = v6;
  v5[4] = v7;
  Data._Representation.subscript.getter(v6, v7, *v2, v2[1]);
  *char v5 = v8;
  v5[1] = v9;
  return protocol witness for MutableCollection.subscript.modify in conformance Data;
}

void protocol witness for MutableCollection.subscript.modify in conformance Data(uint64_t **a1, char a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(v3, v4);
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v3, v4);
    outlined consume of Data._Representation(v3, v4);
    uint64_t v5 = *v2;
    unint64_t v6 = v2[1];
  }

  else
  {
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v3, v4);
    uint64_t v5 = v3;
    unint64_t v6 = v4;
  }

  outlined consume of Data._Representation(v5, v6);
  free(v2);
}

void protocol witness for MutableCollection.partition(by:) in conformance Data(void *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
}

uint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance Data(uint64_t *a1, uint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

double protocol witness for RangeReplaceableCollection.init() in conformance Data@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_18372EE30;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance Data( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
}

void protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance Data( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = v4;
  a3[1] = v5;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance Data@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = Data.init<A>(_:)(a1, a2, a3);
  *a4 = result;
  a4[1] = v6;
  return result;
}

void protocol witness for RangeReplaceableCollection.append(_:) in conformance Data()
{
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance Data( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance Data(char *a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  char v1 = *a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
  uint64_t v5 = &protocol witness table for <A> CollectionOfOne<A>;
  LOBYTE(v3[0]) = v1;
  __swift_project_boxed_opaque_existential_1(v3, v4);
  Data._Representation.replaceSubrange(_:with:count:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance Data( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
}

void protocol witness for RangeReplaceableCollection.remove(at:) in conformance Data(_BYTE *a1@<X8>)
{
  *a1 = v2;
}

void protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance Data()
{
}

void protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance Data(_BYTE *a1@<X8>)
{
  *a1 = v2;
  a1[1] = v3 & 1;
}

void specialized RangeReplaceableCollection<>._customRemoveLast()()
{
  uint64_t v1 = v0[1];
  specialized BidirectionalCollection.last.getter(*v0, v1);
  if ((v2 & 0x100) == 0) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x183455A80LL);
}

void specialized RangeReplaceableCollection<>._customRemoveLast(_:)()
{
  __asm { BR              X9 }

void protocol witness for RangeReplaceableCollection.removeFirst() in conformance Data(_BYTE *a1@<X8>)
{
  *a1 = v2;
}

void specialized RangeReplaceableCollection<>.removeFirst()()
{
  __asm { BR              X9 }

uint64_t sub_183455F60()
{
  if (!BYTE6(v2)) {
    goto LABEL_13;
  }
  specialized Collection.first.getter(v0, v2);
  if ((v4 & 0x100) != 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v5 = v4;
  if (!v3)
  {
    uint64_t v7 = BYTE6(v2);
    uint64_t v6 = 1LL;
    goto LABEL_9;
  }

  if (v3 == 1)
  {
    uint64_t v6 = (int)v0 + 1LL;
    uint64_t v7 = v0 >> 32;
    goto LABEL_9;
  }

  uint64_t v8 = *(void *)(v0 + 16);
  uint64_t v6 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v7 = *(void *)(v0 + 24);
LABEL_9:
  if (v7 < v6)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x183456024LL);
  }

  Data._Representation.subscript.getter(v6, v7, v0, v2);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  outlined consume of Data._Representation(v0, v2);
  *uint64_t v1 = v10;
  v1[1] = v12;
  return v5;
}

uint64_t specialized RangeReplaceableCollection<>.removeFirst(_:)(uint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000LL) == 0) {
      __asm { BR              X9 }
    }

    __break(1u);
    JUMPOUT(0x183456144LL);
  }

  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance Data( uint64_t a1, uint64_t a2)
{
  uint64_t result = specialized MutableCollection._halfStablePartition(isSuffixElement:)(a1, a2);
  if (!v3) {
    __asm { BR              X12 }
  }

  return result;
}

void protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance Data(uint64_t a1, uint64_t a2)
{
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Data@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, *(void *)v3, *(void *)(v3 + 8));
  *a3 = result;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Data@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *v4;
  unint64_t v9 = v4[1];
  uint64_t v10 = specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a3, *v4, v9);
  if (a2 < 1)
  {
    if (v10 <= 0 && v10 > a2) {
      goto LABEL_4;
    }
LABEL_10:
    uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v7, a2, v8, v9);
    char v12 = 0;
    goto LABEL_11;
  }

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance Data( uint64_t *a1, uint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2, *(void *)v2, *(void *)(v2 + 8));
}

uint64_t protocol witness for Collection.startIndex.getter in conformance Data()
{
  return ((uint64_t (*)(void))((char *)sub_18345630C + 4 * byte_183829BAC[*(void *)(v0 + 8) >> 62]))();
}

void sub_18345630C(void *a1@<X8>)
{
  *a1 = v1;
}

void sub_183456314(void *a1@<X8>)
{
  *a1 = v1;
}

void sub_183456320(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance Data()
{
  return ((uint64_t (*)(void))((char *)sub_183456350 + 4 * byte_183829BB0[*(void *)(v0 + 8) >> 62]))();
}

void sub_183456350(void *a1@<X8>)
{
  *a1 = BYTE6(v1);
}

void sub_18345635C(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 24);
}

void sub_183456368(uint64_t *a1@<X8>)
{
  *a1 = v1 >> 32;
}

void protocol witness for Collection.subscript.read in conformance Data()
{
  __asm { BR              X11 }

void protocol witness for Collection.subscript.getter in conformance Data(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = v4;
  a2[1] = v5;
}

uint64_t protocol witness for Collection.indices.getter in conformance Data()
{
  return ((uint64_t (*)(void))((char *)&loc_183456518 + *((int *)qword_183456560 + (*(void *)(v0 + 8) >> 62))))();
}

void sub_18345652C(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = BYTE6(v1);
}

void sub_18345653C(void *a1@<X8>)
{
  if (v1 >> 32 < (int)v1)
  {
    __break(1u);
    JUMPOUT(0x183456560LL);
  }

  *a1 = (int)v1;
  a1[1] = v1 >> 32;
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance Data()
{
  return ((uint64_t (*)(void))((char *)sub_183456598 + 4 * byte_183829BB4[*(void *)(v0 + 8) >> 62]))();
}

BOOL sub_183456598()
{
  return BYTE6(v0) == 0LL;
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance Data@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return outlined copy of Data._Representation(v2, v3);
}

void protocol witness for Sequence.makeIterator() in conformance Data()
{
  __asm { BR              X10 }

uint64_t sub_183456608()
{
  return outlined consume of Data._Representation(v0, v1);
}

uint64_t protocol witness for Collection.count.getter in conformance Data()
{
  return ((uint64_t (*)(void))((char *)&loc_183456660 + dword_1834566A4[*(void *)(v0 + 8) >> 62]))(0LL);
}

uint64_t sub_183456670()
{
  return BYTE6(v0);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Data()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  specialized _copyCollectionToContiguousArray<A>(_:)(v1, v2);
  uint64_t v4 = v3;
  outlined consume of Data._Representation(v1, v2);
  return v4;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Data( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  Data._copyContents(initializing:)(a1, a2, a3, v4, v5);
  uint64_t v7 = v6;
  outlined consume of Data._Representation(v4, v5);
  return v7;
}

void protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Data( uint64_t a1, uint64_t a2)
{
}

void Data.description.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_183456790()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x736574796220LL;
  v1._object = (void *)0xE600000000000000LL;
  String.append(_:)(v1);
  return v3;
}

void Data.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v4);
  __asm { BR              X9 }

uint64_t sub_1834568EC()
{
  *(void *)(v8 - 192) = v0;
  *(void *)(v8 - 96) = MEMORY[0x189618740];
  *(void *)(v8 - 12__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = BYTE6(v2);
  *(_OWORD *)(v8 - 176) = xmmword_18382A1C0;
  outlined init with take of Any((_OWORD *)(v8 - 120), (_OWORD *)(v8 - 160));
  unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v10 > 1),  v11 + 1,  1,  v9);
  }
  v9[2] = v11 + 1;
  char v12 = &v9[6 * v11];
  __int128 v13 = *(_OWORD *)(v8 - 176);
  __int128 v14 = *(_OWORD *)(v8 - 144);
  v12[3] = *(_OWORD *)(v8 - 160);
  v12[4] = v14;
  v12[2] = v13;
  *(void *)(v8 - 88) = v9;
  specialized Data._Representation.withUnsafeBytes<A>(_:)(v3, v2);
  if (BYTE6(v2) < 0x40uLL) {
    __asm { BR              X11 }
  }

  uint64_t v15 = *(void *)(v8 - 88);
  *(void *)(v8 - 176) = v3;
  *(void *)(v8 - 168) = v2;
  *(void *)(v8 - 12__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v15;
  uint64_t v16 = *MEMORY[0x18961A718];
  uint64_t v17 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 104))(v4, v16, v17);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v4, 0LL, 1LL, v17);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v1, *MEMORY[0x18961A748], v5);
  outlined copy of Data._Representation(v3, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A],  &demangling cache variable for type metadata for [(label: String?, value: Any)],  MEMORY[0x189618488]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t closure #1 in Data.customMirror.getter(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (result)
  {
    uint64_t v11 = MEMORY[0x1896181C0];
    *(void *)&__int128 v10 = result;
    outlined init with take of Any(&v10, v9);
    uint64_t v4 = (void *)*a3;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a3 = (uint64_t)v4;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v4[2] + 1LL,  1,  v4);
      uint64_t v4 = (void *)result;
      *a3 = result;
    }

    unint64_t v6 = v4[2];
    unint64_t v5 = v4[3];
    if (v6 >= v5 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v5 > 1),  v6 + 1,  1,  v4);
      uint64_t v4 = (void *)result;
      *a3 = result;
    }

    v4[2] = v6 + 1;
    uint64_t v7 = &v4[6 * v6];
    __int128 v8 = v9[1];
    void v7[3] = v9[0];
    v7[4] = v8;
    v7[2] = xmmword_18382A1E0;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void protocol witness for CustomStringConvertible.description.getter in conformance Data()
{
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Data()
{
}

void *protocol witness for Decodable.init(from:) in conformance Data@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized Data.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Data(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  specialized Data._Representation.withUnsafeBytes<A>(_:)(v2, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

id @nonobjc NSData.init(contentsOf:options:)(void **a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v9[1] = *(id *)MEMORY[0x1895F89C0];
  uint64_t v4 = *a1;
  v9[0] = 0LL;
  id v5 = objc_msgSend(v3, sel_initWithContentsOfURL_options_error_, v4, a2, v9);
  if (v5)
  {
    id v6 = v9[0];
  }

  else
  {
    if (v9[0])
    {
      v9[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v7 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

  swift_release();
  swift_release();
  return v5;
}

uint64_t specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)( char *__src, int64_t __n, char *__dst, int64_t a4)
{
  if (!__src) {
    return 0LL;
  }
  int64_t v4 = __n;
  if (!__n) {
    return v4;
  }
  if (a4 < __n)
  {
    __break(1u);
    goto LABEL_12;
  }

  if (!__dst) {
    return v4;
  }
  if ((__n & 0x8000000000000000LL) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
  {
    memcpy(__dst, __src, __n);
    return v4;
  }

void specialized MutableCollection<>._partitionImpl(by:)()
{
  __asm { BR              X9 }

{
  __asm { BR              X10 }

uint64_t sub_18345703C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_183457074 + 16))( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t sub_183457084()
{
  if (v1)
  {
    __break(1u);
    JUMPOUT(0x183457240LL);
  }

  v12[0] = v5;
  char v6 = v3(v12);
  if (!v0)
  {
    if ((v6 & 1) != 0)
    {
      if (v2 - 1 <= 0) {
        return v1;
      }
      while (1)
      {
        unint64_t v7 = v2 - 1;
        if (v4)
        {
          if (v4 == 1)
          {
            if (v7 > 1) {
              goto LABEL_25;
            }
            uint64_t v8 = v11;
            if (v2 == 1) {
              uint64_t v8 = v5;
            }
          }

          else
          {
            if ((v7 & 0x8000000000000000LL) != 0)
            {
              __break(1u);
LABEL_25:
              __break(1u);
LABEL_26:
              __break(1u);
LABEL_27:
              __break(1u);
              JUMPOUT(0x183457238LL);
            }

            if (v7 >= *(void *)(v5 + 16)) {
              goto LABEL_27;
            }
            uint64_t v8 = *(void *)(v5 + 24 + 8 * v2);
          }
        }

        else
        {
          uint64_t v8 = v5;
          if (v2 != 1) {
            goto LABEL_26;
          }
        }

        v12[0] = v8;
        if ((v3(v12) & 1) == 0) {
          break;
        }
        uint64_t v9 = v2 - 2;
        --v2;
        if (v9 <= 0) {
          return v1;
        }
      }

      if (v2 == 1) {
        return 1LL;
      }
      IndexPath.Storage.subscript.getter(0LL, v5, v11, v4);
      IndexPath.Storage.subscript.getter(v7, v5, v11, v4);
      IndexPath.Storage.subscript.setter();
      IndexPath.Storage.subscript.setter();
      --v2;
    }

    uint64_t v1 = 1LL;
    if (v2 > 1) {
      JUMPOUT(0x183457068LL);
    }
  }

  return v1;
}

void sub_183457244()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x80000001839CAB90LL;
  v1._countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x1834572FCLL);
}

uint64_t sub_183457380()
{
  if (BYTE6(v2)) {
    __asm { BR              X8 }
  }

  return 0LL;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  uint64_t v9 = *v2;
  unint64_t v8 = v2[1];
  outlined copy of Data._Representation(v9, v8);
  specialized Collection.firstIndex(where:)(a1, a2, v9, v8);
  if (!v3)
  {
    uint64_t v13 = v10;
    char v14 = v11;
    outlined consume of Data._Representation(v9, v8);
    if ((v14 & 1) == 0)
    {
      if (!__OFADD__(v13, 1LL)) {
        __asm { BR              X8 }
      }

      __break(1u);
      JUMPOUT(0x183457848LL);
    }

    __asm { BR              X10 }
  }

  outlined consume of Data._Representation(v9, v8);
  return v4;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)( uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a3[2];
  if (v6)
  {
    uint64_t v7 = a3[5];
    BOOL v8 = __OFSUB__(result, v7);
    uint64_t v9 = result - v7;
    if (v8)
    {
LABEL_13:
      __break(1u);
      return result;
    }

    uint64_t v10 = a2 - result;
    if (!__OFSUB__(a2, result))
    {
      uint64_t v11 = v6 + v9;
      uint64_t v12 = a3[3];
      if (v12 >= v10) {
        uint64_t v12 = v10;
      }
      uint64_t v13 = v11 + v12;
      goto LABEL_9;
    }

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_183457B48()
{
  return ((uint64_t (*)(void))((char *)&loc_183457B7C + dword_183457C3C[v0 >> 62]))();
}

uint64_t sub_183457B8C@<X0>(uint64_t a1@<X8>)
{
  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
    {
      char v5 = 1;
    }

    else
    {
      outlined copy of Data._Representation(v2, v1);
      specialized Data._Representation.withUnsafeBytes<A>(_:)(v4, v3);
    }
  }

  else
  {
    char v5 = 0;
  }

  return v5 & 1;
}

vm_address_t specialized static __DataStorage.move(_:_:_:)( vm_address_t __dst, unint64_t __src, int64_t __len)
{
  vm_address_t v5 = __dst;
  if (one-time initialization token for vmOpsThreshold != -1) {
    __dst = swift_once();
  }
  if (static __DataStorage.vmOpsThreshold > __len)
  {
LABEL_8:
    if (__len >= 1) {
      goto LABEL_9;
    }
    return __dst;
  }

  if (one-time initialization token for _pageSize != -1) {
    __dst = swift_once();
  }
  Swift::Int v6 = _pageSize - 1;
  if (__OFSUB__(_pageSize, 1LL))
  {
    __break(1u);
    goto LABEL_19;
  }

  if ((v6 & (v5 | __src)) != 0) {
    goto LABEL_8;
  }
  if (!__src)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  vm_size_t v7 = __len & ~v6;
  vm_map_t v8 = _platform_mach_task_self();
  if ((v7 & 0x8000000000000000LL) != 0)
  {
LABEL_22:
    __dst = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return __dst;
  }

  __dst = vm_copy(v8, __src, v7, v5);
  if ((_DWORD)__dst) {
    __dst = (vm_address_t)memmove((void *)v5, (const void *)__src, v7);
  }
  BOOL v9 = __OFSUB__(__len, v7);
  __len -= v7;
  if (v9)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  __src += v7;
  v5 += v7;
  if (__len >= 1)
  {
LABEL_9:
    if (__src) {
      return (vm_address_t)memmove((void *)v5, (const void *)__src, __len);
    }
    goto LABEL_20;
  }

  return __dst;
}

unint64_t specialized Data.InlineSlice.init(_:range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v8 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  uint64_t v6 = BYTE6(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)((unint64_t)&v8, v6);
  if (a3 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (a4 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }

  return a3 | ((unint64_t)a4 << 32);
}

uint64_t specialized Data.InlineData.init(_:count:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x8000000000000000LL) == 0 && a3 < 0x100)
  {
    if ((int)a1 > a1 >> 32)
    {
      __break(1u);
    }

    else if (!*(void *)(a2 + 16) || !__OFSUB__((int)a1, *(void *)(a2 + 40)))
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      return 0LL;
    }

    __break(1u);
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  if ((a3 & 0x8000000000000000LL) != 0 || a3 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    if (*(void *)(a2 + 16))
    {
      if (__OFSUB__(*(void *)(a1 + 16), *(void *)(a2 + 40))) {
        __break(1u);
      }
    }

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    return 0LL;
  }

  return result;
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  uint64_t v2 = __src;
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (!__src) {
    goto LABEL_4;
  }
  char v3 = (_BYTE)a2 - (_BYTE)__src;
  if (a2 - __src >= 256)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_4:
    char v3 = 0;
  }

  memset(__dst, 0, sizeof(__dst));
  char v6 = v3;
  if (v2 && a2 != v2) {
    memcpy(__dst, v2, a2 - v2);
  }
  return *(void *)__dst;
}

void *specialized Data.InlineSlice.init(_:)(unint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v3 & 0x80000000) == 0) {
    return (void *)(v3 << 32);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Data.LargeSlice.init(_:)(unint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = (uint64_t)__DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }

  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = v3;
  }

  return result;
}

uint64_t specialized Data._Representation.init(count:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0)
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)(v1);
      if (v1 > 0x7FFFFFFE)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0LL;
        *(void *)(result + 24) = v1;
      }

      else
      {
        return v1 << 32;
      }
    }
  }

  return result;
}

uint64_t partial apply for closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #3 in Data.init<A>(_:)(a1, *(void *)(v2 + 32), *(void *)(v2 + 16), a2);
}

uint64_t specialized Data._Representation.init(_:count:)(void *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    swift_release();
    return 0LL;
  }

  uint64_t v2 = a2;
  if (a2 > 14)
  {
    type metadata accessor for Data.RangeReference();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0LL;
    *(void *)(v3 + 24) = v2;
    return v3;
  }

  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v4 = a1[2];
  if (v4)
  {
    uint64_t v5 = a1[5];
    BOOL v6 = __OFSUB__(0LL, v5);
    uint64_t v7 = -v5;
    if (!v6)
    {
      uint64_t v8 = (char *)(v4 + v7);
      if (a1[3] < v2) {
        uint64_t v2 = a1[3];
      }
      __int16 v9 = &v8[v2];
      goto LABEL_14;
    }

uint64_t specialized Data.init(count:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0)
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0LL;
        *(void *)(result + 24) = v1;
      }

      else
      {
        return v1 << 32;
      }
    }
  }

  return result;
}

void *specialized Data.init(from:)(void *a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v3;
  }

  __swift_project_boxed_opaque_existential_1(v10, v11);
  uint64_t v4 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
  if ((v5 & 1) != 0)
  {
    __int128 v12 = xmmword_18372EE30;
  }

  else
  {
    uint64_t v6 = v4;
    *(void *)&__int128 v12 = specialized Data.init(count:)(v4);
    *((void *)&v12 + 1) = v7;
    if (v6 < 0) {
      goto LABEL_16;
    }
    if (v6)
    {
      uint64_t v8 = 0LL;
      while (v6 != v8)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
        dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        Data._Representation.subscript.setter();
        if (v6 == ++v8) {
          goto LABEL_11;
        }
      }

      __break(1u);
LABEL_16:
      __break(1u);
    }
  }

uint64_t specialized Data.init(bytesNoCopy:count:deallocator:)( unint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v5 = *a3;
  if (*a3 >= 4)
  {
    uint64_t v7 = (void (*)(unint64_t, uint64_t))*a3;
    uint64_t v6 = a3[1];
    if (a2) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = (void (*)(unint64_t, uint64_t))off_189C90278[v5];
    if (a2)
    {
LABEL_3:
      type metadata accessor for __DataStorage();
      uint64_t v8 = (void *)swift_allocObject();
      outlined copy of Data.Deallocator(v5);
      swift_retain();
      __DataStorage.init(bytes:length:copy:deallocator:offset:)(a1, a2, 0, v7, v6, 0LL);
      uint64_t v9 = specialized Data._Representation.init(_:count:)(v8, a2);
      swift_release();
      goto LABEL_9;
    }
  }

  if (v5 >= 4) {
    char v10 = (uint64_t (*)())*a3;
  }
  else {
    char v10 = off_189C90278[v5];
  }
  outlined copy of Data.Deallocator(*a3);
  outlined copy of Data.Deallocator(v5);
  ((void (*)(unint64_t, void))v10)(a1, 0LL);
  swift_release();
  swift_release();
  uint64_t v9 = 0LL;
LABEL_9:
  outlined consume of Data.Deallocator(v5);
  return v9;
}

_BYTE *specialized Data._Representation.init(_:)(_BYTE *result, _BYTE *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0LL;
    }

    else if (v2 <= 14)
    {
      return (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    }

    else if ((unint64_t)v2 > 0x7FFFFFFE)
    {
      return (_BYTE *)specialized Data.LargeSlice.init(_:)((unint64_t)result, (uint64_t)a2);
    }

    else
    {
      return specialized Data.InlineSlice.init(_:)((unint64_t)result, (uint64_t)a2);
    }
  }

  return result;
}

uint64_t specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)( int *a1, uint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v10 = *a1;
    uint64_t v9 = a1[1];
    if ((int)v9 < (int)v10)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }

    uint64_t v11 = *((void *)a1 + 1);
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v13 = *(void *)(v11 + 40);
      BOOL v14 = __OFSUB__(v10, v13);
      uint64_t v15 = v10 - v13;
      if (v14)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }

      unint64_t v16 = v12 + v15;
    }

    else
    {
      unint64_t v16 = 0LL;
    }

    uint64_t v17 = v9 - v10;
    type metadata accessor for __DataStorage();
    uint64_t v18 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v16, v17, 1, 0LL, 0LL, v10);
    *((void *)a1 + 1) = v18;
    uint64_t result = swift_release();
  }

  uint64_t v19 = *a1;
  uint64_t v20 = a1[1];
  if ((int)v20 < (int)v19)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v21 = (void *)*((void *)a1 + 1);
  uint64_t v22 = v21[2];
  if (!v22)
  {
LABEL_22:
    __break(1u);
    return result;
  }

  uint64_t v23 = v21[5];
  BOOL v14 = __OFSUB__(v19, v23);
  uint64_t v24 = v19 - v23;
  if (v14) {
    goto LABEL_19;
  }
  int v25 = a4;
  int64_t v26 = v20 - v19;
  if (v21[3] >= v26) {
    int64_t v27 = v26;
  }
  else {
    int64_t v27 = v21[3];
  }
  uint64_t v28 = (char *)(v22 + v24);
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a2, a3, v28, v27);
  if (v25 == 2) {
    char v29 = _allASCII(_:)(v28, v27);
  }
  else {
    char v29 = v25 & 1;
  }
  swift_bridgeObjectRelease();
  return v29 & 1;
}

uint64_t specialized Data.LargeSlice.withUnsafeMutableBytes<A>(_:)( uint64_t *a1, uint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v9 = a1[1];
    uint64_t v11 = *(void *)(*a1 + 16);
    uint64_t v10 = *(void *)(*a1 + 24);
    uint64_t v12 = *(void *)(v9 + 16);
    if (v12)
    {
      uint64_t v13 = *(void *)(v9 + 40);
      BOOL v14 = __OFSUB__(v11, v13);
      uint64_t v15 = v11 - v13;
      if (v14)
      {
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        return result;
      }

      unint64_t v16 = v12 + v15;
      uint64_t v17 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_5;
      }
    }

    else
    {
      unint64_t v16 = 0LL;
      uint64_t v17 = v10 - v11;
      if (!__OFSUB__(v10, v11))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        uint64_t v18 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v16, v17, 1, 0LL, 0LL, v11);
        a1[1] = v18;
        swift_release();
        goto LABEL_6;
      }
    }

    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

uint64_t specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:));
}

{
  return specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))AttributedString.CharacterView.replaceSubrange<A>(_:with:));
}

uint64_t specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void *, uint64_t, uint64_t, uint64_t))
{
  v9[0] = a2;
  v9[1] = a3;
  id v9[2] = a4;
  v9[3] = a5;
  v9[4] = a2;
  v9[5] = a3;
  v9[6] = a4;
  v9[7] = a5;
  return a8(v9, a1, a6, a7);
}

uint64_t specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Data.replaceSubrange<A>(_:with:)(a2, a2, a1, a3, a4);
}

uint64_t specialized Data.init(bytes:count:)(_BYTE *__src, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 <= 14) {
    return specialized Data.InlineData.init(_:)(__src, &__src[a2]);
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)((unint64_t)__src, a2);
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = a2;
  return result;
}

id specialized Data.init(contentsOf:options:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  unint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  swift_retain();
  id v8 = v5;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    *(void *)&__int128 v20 = v8;
    *((void *)&v20 + 1) = v6;
    uint64_t v21 = v7;
    URL.scheme.getter();
    if (v9)
    {
      Swift::String v10 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v10._countAndFlagsBits == 1701603686 && v10._object == (void *)0xE400000000000000LL)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        goto LABEL_10;
      }

      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      if ((v12 & 1) != 0)
      {
LABEL_10:
        uint64_t v23 = MEMORY[0x18961AFF0];
        *(void *)&__int128 v20 = v8;
        *((void *)&v20 + 1) = v6;
        uint64_t v21 = v7;
        char v22 = 1;
        id v13 = v8;
        swift_retain();
        swift_retain();
        id v14 = (id)readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)( &v20,  1,  0LL,  1,  a2,  MEMORY[0x18961AFE8],  &v23);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if (!v3) {
          return v14;
        }
        return v14;
      }
    }

    else
    {
      swift_release();
      swift_release();
    }
  }

  else
  {
    unsigned __int8 v11 = objc_msgSend(v8, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v11 & 1) != 0) {
      goto LABEL_10;
    }
  }

  *(void *)&__int128 v20 = v8;
  *((void *)&v20 + 1) = v6;
  uint64_t v21 = v7;
  id v14 = objc_allocWithZone(MEMORY[0x189603F48]);
  id v16 = v8;
  swift_retain();
  swift_retain();
  id v17 = @nonobjc NSData.init(contentsOf:options:)((void **)&v20, (uint64_t)a2);
  if (v3) {
    return v14;
  }
  uint64_t v18 = v17;
  id v19 = specialized Data.init(referencing:)(v17);

  return v19;
}

uint64_t type metadata accessor for __DataStorage()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return objc_opt_self();
}

void partial apply for closure #2 in Data.replaceSubrange<A>(_:with:)()
{
}

void _s10Foundation4DataV15replaceSubrange_4withySnySiG_xtSlRzs5UInt8V7ElementRtzlFySWXEfU_TA_0()
{
}

void partial apply for closure #2 in Data.append<A>(contentsOf:)()
{
}

void partial apply for closure #3 in Data.append<A>(contentsOf:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void partial apply for closure #1 in Data.append<A>(contentsOf:)()
{
}

_WORD *_So30malloc_type_layout_semantics_ta_generic_data_setter(_WORD *result)
{
  *result |= 0x100u;
  return result;
}

uint64_t sub_18345922C()
{
  return swift_deallocObject();
}

void specialized Data.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1834592A8( int a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, int a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  v28[0] = v25;
  memset(v28, v26, BYTE6(a2));
  return v28[0];
}

uint64_t partial apply for closure #1 in Data.withUnsafeMutableBytes<A, B>(_:)(uint64_t a1)
{
  if (!a1) {
    a1 = 47824LL;
  }
  return (*(uint64_t (**)(uint64_t))(v1 + 32))(a1);
}

void specialized Data.subscript.setter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v64 = a3;
  uint64_t v56 = a2;
  uint64_t v55 = a1;
  uint64_t v63 = a6;
  uint64_t v75 = *(void *)(a6 + 8);
  uint64_t v9 = *(void *)(*(void *)(v75 + 24) + 16LL);
  swift_getAssociatedTypeWitness();
  uint64_t v50 = v9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  v48[2] = (char *)v48 - v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  MEMORY[0x1895F8858](v11);
  uint64_t v69 = a5;
  uint64_t v65 = a4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v76 = type metadata accessor for Range();
  uint64_t v62 = *(void *)(v76 - 8);
  MEMORY[0x1895F8858](v76);
  MEMORY[0x1895F8858](v12);
  uint64_t v61 = (char *)v48 - v13;
  MEMORY[0x1895F8858](v14);
  uint64_t v72 = (char *)v48 - v15;
  MEMORY[0x1895F8858](v16);
  MEMORY[0x1895F8858](v17);
  uint64_t v70 = (char *)v48 - v18;
  MEMORY[0x1895F8858](v19);
  uint64_t v68 = (char *)v48 - v20;
  MEMORY[0x1895F8858](v21);
  uint64_t v51 = (char *)v48 - v22;
  MEMORY[0x1895F8858](v23);
  v48[1] = (char *)v48 - v24;
  MEMORY[0x1895F8858](v25);
  uint64_t v52 = (char *)v48 - v26;
  MEMORY[0x1895F8858](v27);
  MEMORY[0x1895F8858](v28);
  uint64_t v66 = (char *)v48 - v29;
  MEMORY[0x1895F8858](v30);
  uint64_t v71 = (char *)v48 - v31;
  MEMORY[0x1895F8858](v32);
  uint64_t v58 = (char *)v48 - v33;
  MEMORY[0x1895F8858](v34);
  Swift::String v54 = (char *)v48 - v35;
  MEMORY[0x1895F8858](v36);
  char v53 = (char *)v48 - v37;
  MEMORY[0x1895F8858](v38);
  char v59 = (char *)v48 - v39;
  MEMORY[0x1895F8858](v40);
  unint64_t v67 = (char *)v48 - v41;
  MEMORY[0x1895F8858](v42);
  uint64_t v74 = (char *)v48 - v43;
  MEMORY[0x1895F8858](v44);
  uint64_t v77 = (char *)v48 - v45;
  uint64_t v46 = *(void *)(v6 + 8);
  uint64_t v57 = v6;
  v48[0] = v47;
  __asm { BR              X9 }

uint64_t sub_1834599E0()
{
  *(void *)(v1 - 96) = 0LL;
  *(void *)(v1 - 176) = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v2 = dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  return ((uint64_t (*)(uint64_t))((char *)&loc_183459A20 + *((int *)qword_18345A7E0 + v0)))(v2);
}

uint64_t sub_183459A34()
{
  *(void *)(v7 - 96) = BYTE6(v4);
  id v8 = *(void (**)(uint64_t, uint64_t))(v7 - 160);
  uint64_t v9 = v1;
  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  uint64_t v10 = *(void *)(v7 - 136);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    v8(v9, v1);
    __break(1u);
LABEL_72:
    v8(v9, v1);
    __break(1u);
    JUMPOUT(0x18345A7D0LL);
  }

  *(void *)(v7 - 304) = v5;
  uint64_t v11 = v0;
  uint64_t v12 = *(void *)(v7 - 280);
  uint64_t v13 = v2 + *(int *)(v12 + 48);
  uint64_t v14 = v10;
  uint64_t v15 = (void (*)(uint64_t, uint64_t, uint64_t))v6[2];
  v15(v2, v14, v1);
  v15(v13, (uint64_t)v8, v1);
  uint64_t v16 = v3 + *(int *)(v12 + 48);
  v15(v3, v2, v1);
  v15(v16, v13, v1);
  uint64_t v17 = (void (*)(uint64_t, uint64_t, uint64_t))v6[4];
  v17(v11, v3, v1);
  uint64_t v18 = (void (*)(uint64_t, uint64_t))v6[1];
  v18(v16, v1);
  uint64_t v19 = v3 + *(int *)(v12 + 48);
  v17(v3, v2, v1);
  v17(v19, v13, v1);
  uint64_t v20 = *(void *)(v7 - 144);
  uint64_t v21 = v11 + *(int *)(v20 + 36);
  uint64_t v22 = v19;
  id v8 = v18;
  *(void *)(v7 - 28__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v17;
  v17(v21, v22, v1);
  v18(v3, v1);
  uint64_t v23 = *(void *)(v7 - 264);
  uint64_t v24 = *(void *)(v7 - 272);
  uint64_t v25 = v11;
  uint64_t v26 = *(void *)(v7 - 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v24, v25, v20);
  uint64_t v27 = *(void *)(v26 + 32);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)(v7 - 112) = v27;
  *(void *)(v7 - 104) = AssociatedConformanceWitness;
  MEMORY[0x186E20D4C](MEMORY[0x189618A60], v20, v7 - 112);
  uint64_t v29 = *(void *)(v7 - 184);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  *(void *)(v7 - 24__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v30;
  v30(v24, v20);
  uint64_t v31 = *(void *)(v7 - 224);
  v15(v31, v29, v1);
  LOBYTE(v27) = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v32 = *(void *)(v7 - 288);
  v15(v32, v31, v1);
  *(void *)(v7 - 208) = v8;
  if ((v27 & 1) != 0)
  {
    uint64_t v33 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v8(v32, v1);
    uint64_t v34 = *(void *)(v7 - 232);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v7 - 216);
    if (v33 > 64)
    {
      uint64_t v36 = *(void *)(v7 - 344);
      v15(v36, v31, v1);
      *(void *)(v7 - 96) = 0x8000000000000000LL;
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0) {
        goto LABEL_41;
      }
      if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
      {
        uint64_t v37 = dispatch thunk of BinaryInteger._lowWord.getter();
        uint64_t v38 = v36;
        uint64_t v39 = v37;
        uint64_t v40 = v38;
        goto LABEL_53;
      }

      uint64_t v83 = *(void *)(v7 - 336);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v84 = v36;
      uint64_t v39 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v85 = v83;
      id v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
      v8(v85, v1);
      v8(v84, v1);
      if ((v39 & 1) != 0) {
        goto LABEL_54;
      }
    }
  }

  else
  {
    v8(v32, v1);
    uint64_t v34 = *(void *)(v7 - 232);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v7 - 216);
  }

void partial apply for specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)( uint64_t a1, uint64_t a2)
{
}

{
  uint64_t v2;
  specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)( a1,  a2,  **(void **)(v2 + 16),  *(void *)(*(void *)(v2 + 16) + 8LL));
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in Data()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type CollectionOfOne<Data> and conformance CollectionOfOne<A>,  &demangling cache variable for type metadata for CollectionOfOne<Data>,  MEMORY[0x189619490]);
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in Data()
{
  return &protocol witness table for Data;
}

unint64_t instantiation function for generic protocol witness table for Data(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Data and conformance Data();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Data.Iterator and conformance Data.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator;
  if (!lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Data.Iterator, &type metadata for Data.Iterator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator);
  }

  return result;
}

uint64_t sub_18345AABC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 24LL);
  return result;
}

void sub_18345AACC(Swift::Int *a1)
{
}

uint64_t sub_18345AAF0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(unsigned __int8 *)(result + 14);
  return result;
}

void sub_18345AAFC(uint64_t *a1)
{
}

double sub_18345AB20@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  return key path getter for Data.InlineData.subscript(_:) : Data.InlineData(a1, a2, a3);
}

uint64_t sub_18345AB68()
{
  return 0LL;
}

_DWORD *sub_18345AB78@<X0>(_DWORD *result@<X0>, void *a2@<X8>)
{
  int v2 = result[1];
  if (__OFSUB__(v2, *result)) {
    __break(1u);
  }
  else {
    *a2 = v2 - *result;
  }
  return result;
}

void sub_18345AB94(uint64_t *a1)
{
}

int *sub_18345ABB8@<X0>(int *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if ((int)v3 < (int)v2)
  {
    __break(1u);
  }

  else
  {
    *a2 = v2;
    a2[1] = v3;
  }

  return result;
}

void sub_18345ABD8(char *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_18345AC00()
{
  return 0LL;
}

uint64_t sub_18345AC10@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)result + 16LL);
  uint64_t v3 = *(void *)(*(void *)result + 24LL);
  BOOL v4 = __OFSUB__(v3, v2);
  uint64_t v5 = v3 - v2;
  if (v4) {
    __break(1u);
  }
  else {
    *a2 = v5;
  }
  return result;
}

void sub_18345AC2C(uint64_t *a1)
{
}

void sub_18345AC54(char *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_18345AC7C()
{
  return 0LL;
}

uint64_t sub_18345AC8C(uint64_t a1)
{
  return key path getter for Data._Representation.count : Data._Representation(a1);
}

void sub_18345ACA0()
{
}

void sub_18345ACC4(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = v4;
}

void sub_18345ACF4()
{
}

uint64_t sub_18345AD1C()
{
  return 0LL;
}

uint64_t sub_18345AD2C(uint64_t a1)
{
  return key path getter for Data._Representation.count : Data._Representation(a1);
}

void sub_18345AD40(void *a1)
{
  if ((*a1 & 0x8000000000000000LL) != 0) {
    __break(1u);
  }
  else {
    Data._Representation.count.setter();
  }
}

void sub_18345AD6C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = v4;
}

void sub_18345AD9C()
{
}

uint64_t sub_18345ADC4()
{
  return 0LL;
}

void sub_18345ADD4(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = v4;
  a3[1] = v5;
}

uint64_t sub_18345AE04()
{
  return 0LL;
}

void sub_18345AE14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = v5;
  a4[1] = v6;
}

uint64_t sub_18345AE54()
{
  return 24LL;
}

__n128 sub_18345AE60(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t method lookup function for __DataStorage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(length:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(capacity:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(bytes:length:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(bytes:length:copy:deallocator:offset:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(offset:bytes:capacity:needToZero:length:deallocator:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

ValueMetadata *type metadata accessor for Data()
{
  return &type metadata for Data;
}

void *__swift_memcpy15_1(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 7) = *(uint64_t *)((char *)a2 + 7);
  *__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Data.InlineData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 15)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for Data.InlineData(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 14) = 0;
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 15) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Data.InlineData()
{
  return &type metadata for Data.InlineData;
}

uint64_t assignWithCopy for Data.InlineSlice(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for Data.InlineSlice(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Data.InlineSlice()
{
  return &type metadata for Data.InlineSlice;
}

uint64_t method lookup function for Data.RangeReference()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Data.RangeReference.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t destroy for Data.LargeSlice()
{
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for Data.LargeSlice(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for Data.LargeSlice(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for Data.LargeSlice(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Data.LargeSlice()
{
  return &type metadata for Data.LargeSlice;
}

uint64_t *initializeBufferWithCopyOfBuffer for Data._Representation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for Data._Representation(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for Data(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t *assignWithTake for Data._Representation(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Data(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Data(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

uint64_t getEnumTag for Data._Representation(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 62;
  if ((_DWORD)v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t destructiveProjectEnumData for Data._Representation(uint64_t result)
{
  *(void *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

void *destructiveInjectEnumTag for Data._Representation(void *result, uint64_t a2)
{
  if (a2 < 3)
  {
    result[1] = result[1] & 0xFFFFFFFFFFFFFFFLL | (a2 << 62);
  }

  else
  {
    *__n128 result = (a2 - 3);
    result[1] = 0xC000000000000000LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for Data._Representation()
{
  return &type metadata for Data._Representation;
}

uint64_t getEnumTagSinglePayload for Data.Deallocator(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFC && *((_BYTE *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for Data.Deallocator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)__n128 result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2 + 3;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Data.Deallocator()
{
  return &type metadata for Data.Deallocator;
}

uint64_t initializeWithCopy for Data.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for Data.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 2__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 23);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  *(_BYTE *)(a1 + 3__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_BYTE *)(a2 + 30);
  *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 31);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 39);
  *(_BYTE *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 46);
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 47);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for Data.Iterator(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v4, v5);
  __int128 v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for Data.Iterator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Data.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 64) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Data.Iterator()
{
  return &type metadata for Data.Iterator;
}

uint64_t sub_18345B624()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UnsafeMutableRawPointer, @in_guaranteed Int) -> (@out ())( uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  return v3(&v6, &v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ()( void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_18345B6A4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in closure #3 in Data.append<A>(contentsOf:)( uint64_t a1)
{
  return implicit closure #3 in implicit closure #2 in closure #3 in Data.append<A>(contentsOf:)(a1);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableBufferPointer<UInt8>) -> (@out A.Sequence.Iterator, @unowned Int)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t result = v7(a3, a1, a2);
  *(void *)(a3 + v8) = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)@<X0>( char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)( a1,  a2,  *(char **)(v3 + 32),  *(void *)(v3 + 40));
  if (!v4) {
    *a3 = result;
  }
  return result;
}

uint64_t specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)( char *__src, uint64_t a2, char *__dst, uint64_t a4)
{
  if (!__src) {
    return 0LL;
  }
  uint64_t v4 = a2;
  if (!a2) {
    return v4;
  }
  if (a4 < a2)
  {
    __break(1u);
    goto LABEL_12;
  }

  if (!__dst) {
    return v4;
  }
  if ((a2 & 0x8000000000000000LL) == 0 && (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst))
  {
    memcpy(__dst, __src, 8 * a2);
    return v4;
  }

uint64_t static NSTimer.publish(every:tolerance:on:in:options:)( double a1, uint64_t a2, uint64_t a3, void *a4, void *a5, char *a6)
{
  char v9 = *a6;
  type metadata accessor for NSTimer.TimerPublisher();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 64) = MEMORY[0x18961AFF0];
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = (_DWORD *)swift_slowAlloc();
  *uint64_t v13 = 0;
  *(void *)(v10 + 72) = v13;
  *(double *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = 0LL;
  *(_BYTE *)(v10 + 32) = 1;
  *(void *)(v10 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v11;
  *(void *)(v10 + 48) = v12;
  *(_BYTE *)(v10 + 56) = v9;
  return v10;
}

uint64_t NSTimer.TimerPublisher.__allocating_init(interval:tolerance:runLoop:mode:options:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, _BYTE *a5, double a6)
{
  uint64_t v12 = swift_allocObject();
  LOBYTE(a5) = *a5;
  *(void *)(v12 + 64) = MEMORY[0x18961AFF0];
  uint64_t v13 = (_DWORD *)swift_slowAlloc();
  *uint64_t v13 = 0;
  *(void *)(v12 + 72) = v13;
  *(double *)(v12 + 16) = a6;
  *(void *)(v12 + 24) = a1;
  *(_BYTE *)(v12 + 32) = a2 & 1;
  *(void *)(v12 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = a3;
  *(void *)(v12 + 48) = a4;
  *(_BYTE *)(v12 + 56) = (_BYTE)a5;
  return v12;
}

uint64_t type metadata accessor for NSTimer.TimerPublisher()
{
  return objc_opt_self();
}

double NSTimer.TimerPublisher.interval.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t NSTimer.TimerPublisher.tolerance.getter()
{
  return *(void *)(v0 + 24);
}

id NSTimer.TimerPublisher.runLoop.getter()
{
  return *(id *)(v0 + 40);
}

id NSTimer.TimerPublisher.mode.getter()
{
  return *(id *)(v0 + 48);
}

void NSTimer.TimerPublisher.options.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 56);
}

Swift::Void __swiftcall NSTimer.TimerPublisher.Inner.send(_:)(Foundation::Date a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 80);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)v27 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *v4;
  uint64_t v16 = *(os_unfair_lock_s **)((char *)v3 + *(void *)(v5 + 120));
  os_unfair_lock_lock(v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, (uint64_t)v3 + *(void *)(*v3 + 96), v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_12:
    os_unfair_lock_unlock(v16);
    return;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v10, v6);
  uint64_t v17 = *(void *)(*v3 + 104);
  unint64_t v18 = *(uint64_t *)((char *)v3 + v17);
  unint64_t v19 = static Subscribers.Demand.none.getter();
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0
    && (static Subscribers.Demand.unlimited.getter(), (static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    || (static Subscribers.Demand.unlimited.getter(), (static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
    && ((static Subscribers.Demand.unlimited.getter(), (static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
     || v19 >= v18))
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v6);
    goto LABEL_12;
  }

  uint64_t v20 = *(uint64_t *)((char *)v3 + v17);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    static Subscribers.Demand.unlimited.getter();
    if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    {
      uint64_t v21 = static Subscribers.Demand.unlimited.getter();
LABEL_16:
      *(uint64_t *)((char *)v3 + v17) = v21;
      goto LABEL_17;
    }

    if (v20 < 0)
    {
      __break(1u);
    }

    else if (v20)
    {
      uint64_t v21 = v20 - 1;
      goto LABEL_16;
    }

    __break(1u);
    goto LABEL_35;
  }

uint64_t NSTimer.TimerPublisher.init(interval:tolerance:runLoop:mode:options:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, char *a5, double a6)
{
  char v12 = *a5;
  *(void *)(v6 + 64) = MEMORY[0x18961AFF0];
  uint64_t v13 = (_DWORD *)swift_slowAlloc();
  *uint64_t v13 = 0;
  *(void *)(v6 + 72) = v13;
  *(double *)(v6 + 16) = a6;
  *(void *)(v6 + 24) = a1;
  *(_BYTE *)(v6 + 32) = a2 & 1;
  *(void *)(v6 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = a3;
  *(void *)(v6 + 48) = a4;
  *(_BYTE *)(v6 + 56) = v12;
  return v6;
}

uint64_t NSTimer.TimerPublisher.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NSTimer.TimerPublisher.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t NSTimer.TimerPublisher.connect()@<X0>(void *a1@<X8>)
{
  double v3 = *(double *)(v1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for implicit closure #2 in implicit closure #1 in NSTimer.TimerPublisher.connect();
  *(void *)(v4 + 24) = v1;
  v9[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v9[5] = v4;
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 1107296256LL;
  id v9[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  v9[3] = &block_descriptor_20;
  uint64_t v5 = _Block_copy(v9);
  uint64_t v6 = (void *)objc_opt_self();
  swift_retain_n();
  id v7 = objc_msgSend(v6, sel_timerWithTimeInterval_repeats_block_, 1, v5, v3);
  _Block_release(v5);
  swift_release();
  objc_msgSend(*(id *)(v1 + 40), sel_addTimer_forMode_, v7, *(void *)(v1 + 48));
  a1[3] = &unk_189C907D0;
  unint64_t result = lazy protocol witness table accessor for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect()();
  a1[4] = result;
  *a1 = v7;
  a1[1] = v1;
  return result;
}

uint64_t sub_18345BF8C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect()()
{
  unint64_t result = lazy protocol witness table cache variable for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect();
  if (!lazy protocol witness table cache variable for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect())
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for CancellableTimer #1 in NSTimer.TimerPublisher.connect(),  &unk_189C907D0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect());
  }

  return result;
}

uint64_t NSTimer.TimerPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = type metadata accessor for CombineIdentifier();
  uint64_t v68 = *(void *)(v9 - 8);
  uint64_t v69 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v64 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v57 - v12;
  __n128 v15 = MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16);
  uint64_t v66 = a1;
  v19(v17, a1, a2, v15);
  uint64_t v67 = a3;
  uint64_t v21 = type metadata accessor for NSTimer.TimerPublisher.Inner(0LL, a2, a3, v20);
  swift_allocObject();
  swift_retain();
  uint64_t v22 = specialized NSTimer.TimerPublisher.Inner.init(_:parent:)((uint64_t)v17);
  swift_release();
  os_unfair_lock_t v65 = *(os_unfair_lock_t *)(v5 + 72);
  os_unfair_lock_lock(v65);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for NSTimer.TimerPublisher.Inner<A>, v21);
  CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v70[0] = *(void *)(v5 + 64);
  uint64_t v24 = v70[0];
  *(void *)(v5 + 64) = 0x8000000000000000LL;
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
  uint64_t v27 = *(void *)(v24 + 16);
  BOOL v28 = (v25 & 1) == 0;
  uint64_t v29 = v27 + v28;
  if (__OFADD__(v27, v28))
  {
    __break(1u);
  }

  else
  {
    char v4 = v25;
    if (*(void *)(v24 + 24) < v29)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v29,  isUniquelyReferenced_nonNull_native);
      uint64_t v30 = v70[0];
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
      if ((v4 & 1) != (v32 & 1)) {
        goto LABEL_47;
      }
      unint64_t v26 = v31;
      if ((v4 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      uint64_t v33 = (void (**)(Foundation::Date *))(*(void *)(v30 + 56) + 16 * v26);
      swift_release();
      *uint64_t v33 = partial apply for implicit closure #2 in implicit closure #1 in NSTimer.TimerPublisher.Side.init<A>(_:);
      v33[1] = (void (*)(Foundation::Date *))v22;
      uint64_t v34 = v68;
      uint64_t v35 = v69;
LABEL_44:
      *(void *)(v5 + 64) = v30;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
      os_unfair_lock_unlock(v65);
      v70[3] = v21;
      v70[4] = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSTimer.TimerPublisher.Inner<A>, v21);
      v70[0] = v22;
      dispatch thunk of Subscriber.receive(subscription:)();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v30 = v24;
      if ((v25 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_43:
      uint64_t v34 = v68;
      uint64_t v35 = v69;
      uint64_t v55 = (uint64_t)v64;
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v64, v13, v69);
      specialized _NativeDictionary._insert(at:key:value:)( v26,  v55,  (uint64_t)partial apply for implicit closure #2 in implicit closure #1 in NSTimer.TimerPublisher.Side.init<A>(_:),  v22,  (void *)v30);
      goto LABEL_44;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CombineIdentifier, NSTimer.TimerPublisher.Side>);
  uint64_t v36 = static _DictionaryStorage.copy(original:)();
  uint64_t v30 = v36;
  if (!*(void *)(v24 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }

  uint64_t v37 = (char *)(v36 + 64);
  uint64_t v38 = (char *)(v24 + 64);
  unint64_t v39 = (unint64_t)((1LL << *(_BYTE *)(v30 + 32)) + 63) >> 6;
  uint64_t v58 = v24 + 64;
  if (v30 != v24 || v37 >= &v38[8 * v39]) {
    memmove(v37, v38, 8 * v39);
  }
  int64_t v40 = 0LL;
  *(void *)(v30 + 16) = *(void *)(v24 + 16);
  uint64_t v41 = 1LL << *(_BYTE *)(v24 + 32);
  uint64_t v42 = -1LL;
  if (v41 < 64) {
    uint64_t v42 = ~(-1LL << v41);
  }
  unint64_t v43 = v42 & *(void *)(v24 + 64);
  int64_t v59 = (unint64_t)(v41 + 63) >> 6;
  while (1)
  {
    if (v43)
    {
      uint64_t v62 = (v43 - 1) & v43;
      int64_t v63 = v40;
      unint64_t v44 = __clz(__rbit64(v43)) | (v40 << 6);
      goto LABEL_18;
    }

    int64_t v51 = v40 + 1;
    if (__OFADD__(v40, 1LL))
    {
      __break(1u);
      goto LABEL_46;
    }

    if (v51 >= v59) {
      goto LABEL_42;
    }
    unint64_t v52 = *(void *)(v58 + 8 * v51);
    int64_t v53 = v40 + 1;
    if (!v52)
    {
      int64_t v53 = v40 + 2;
      if (v40 + 2 >= v59) {
        goto LABEL_42;
      }
      unint64_t v52 = *(void *)(v58 + 8 * v53);
      if (!v52)
      {
        int64_t v53 = v40 + 3;
        if (v40 + 3 >= v59) {
          goto LABEL_42;
        }
        unint64_t v52 = *(void *)(v58 + 8 * v53);
        if (!v52)
        {
          int64_t v53 = v40 + 4;
          if (v40 + 4 >= v59) {
            goto LABEL_42;
          }
          unint64_t v52 = *(void *)(v58 + 8 * v53);
          if (!v52)
          {
            int64_t v53 = v40 + 5;
            if (v40 + 5 >= v59) {
              goto LABEL_42;
            }
            unint64_t v52 = *(void *)(v58 + 8 * v53);
            if (!v52)
            {
              int64_t v53 = v40 + 6;
              if (v40 + 6 >= v59) {
                goto LABEL_42;
              }
              unint64_t v52 = *(void *)(v58 + 8 * v53);
              if (!v52)
              {
                int64_t v53 = v40 + 7;
                if (v40 + 7 >= v59) {
                  goto LABEL_42;
                }
                unint64_t v52 = *(void *)(v58 + 8 * v53);
                if (!v52) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t type metadata accessor for NSTimer.TimerPublisher.Inner( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for NSTimer.TimerPublisher.Inner);
}

uint64_t NSTimer.TimerPublisher.Inner.__deallocating_deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96LL);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

void NSTimer.TimerPublisher.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v3 + 120));
  os_unfair_lock_lock(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, (uint64_t)v1 + *(void *)(*v1 + 96), v5);
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(v8, 1LL, v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((_DWORD)v4 == 1) {
    goto LABEL_11;
  }
  uint64_t v10 = *(void *)(*v1 + 104);
  uint64_t v11 = *(uint64_t *)((char *)v1 + v10);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0) {
    goto LABEL_11;
  }
  static Subscribers.Demand.unlimited.getter();
  char v12 = static Subscribers.Demand.== infix(_:_:)();
  uint64_t v13 = static Subscribers.Demand.unlimited.getter();
  if ((v12 & 1) != 0)
  {
LABEL_10:
    *(uint64_t *)((char *)v1 + v1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v13;
LABEL_11:
    os_unfair_lock_unlock(v9);
    return;
  }

  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0) {
    goto LABEL_8;
  }
  if ((v11 | a1) < 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v13 = v11 + a1;
  if (__OFADD__(v11, a1))
  {
LABEL_8:
    uint64_t v13 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_10;
  }

  if ((v13 & 0x8000000000000000LL) == 0) {
    goto LABEL_10;
  }
LABEL_13:
  __break(1u);
}

Swift::Void __swiftcall NSTimer.TimerPublisher.Inner.cancel()()
{
  unint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for CombineIdentifier();
  uint64_t v69 = *(void *)(v2 - 8);
  uint64_t v70 = v2;
  MEMORY[0x1895F8858](v2);
  uint64_t v67 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v71 = (char *)&v58 - v5;
  uint64_t v6 = *(void *)(v1 + 80);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v58 - v12;
  unint64_t v68 = v1;
  uint64_t v14 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(v1 + 120));
  os_unfair_lock_lock(v14);
  __n128 v15 = (char *)v0 + *(void *)(*v0 + 96);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v15, v7);
  uint64_t v16 = *(void *)(v6 - 8);
  LODWORD(Data.Iterator.init(_:at:)(v0, v1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1LL, v6);
  uint64_t v17 = v13;
  uint64_t v18 = v7;
  uint64_t v19 = v7;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v17, v19);
  if ((_DWORD)v1 == 1)
  {
    os_unfair_lock_unlock(v14);
    return;
  }

  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v15, v18);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v15, 1LL, 1LL, v6);
  os_unfair_lock_unlock(v14);
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v22 = v10;
  if (!Strong) {
    goto LABEL_9;
  }
  uint64_t v23 = Strong;
  uint64_t v24 = *(os_unfair_lock_s **)(Strong + 72);
  os_unfair_lock_lock(v24);
  uint64_t v25 = *(void *)(v23 + 64);
  swift_bridgeObjectRetain();
  MEMORY[0x186E20D4C](&protocol conformance descriptor for NSTimer.TimerPublisher.Inner<A>, v68);
  uint64_t v26 = (uint64_t)v71;
  CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
  swift_bridgeObjectRetain();
  unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
  LOBYTE(v26) = v28;
  swift_bridgeObjectRelease();
  uint64_t v65 = v25;
  uint64_t v66 = v18;
  if ((v26 & 1) == 0)
  {
    uint64_t v33 = 0LL;
    uint64_t v31 = v70;
    char v32 = *(void (**)(unint64_t, uint64_t))(v69 + 8);
    goto LABEL_8;
  }

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v30 = *(void *)(v23 + 64);
  *(void *)(v23 + 64) = 0x8000000000000000LL;
  uint64_t v31 = v70;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
LABEL_6:
    char v32 = *(void (**)(unint64_t, uint64_t))(v69 + 8);
    v32(*(void *)(v30 + 48) + *(void *)(v69 + 72) * v27, v31);
    uint64_t v33 = *(void *)(*(void *)(v30 + 56) + 16 * v27);
    specialized _NativeDictionary._delete(at:)(v27, v30);
    *(void *)(v23 + 64) = v30;
    swift_bridgeObjectRelease();
LABEL_8:
    v32((unint64_t)v71, v31);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v33);
    os_unfair_lock_unlock(v24);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v18 = v66;
LABEL_9:
    v20(v22, v18);
    return;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CombineIdentifier, NSTimer.TimerPublisher.Side>);
  uint64_t v34 = (void *)v30;
  uint64_t v35 = static _DictionaryStorage.copy(original:)();
  uint64_t v30 = v35;
  uint64_t v62 = v34;
  if (!v34[2])
  {
LABEL_43:
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }

  uint64_t v36 = (char *)(v35 + 64);
  uint64_t v37 = 1LL << *(_BYTE *)(v30 + 32);
  unint64_t v60 = (char *)(v62 + 8);
  __int128 v61 = v22;
  unint64_t v38 = (unint64_t)(v37 + 63) >> 6;
  if ((void *)v30 != v62 || v36 >= &v60[8 * v38]) {
    memmove(v36, v60, 8 * v38);
  }
  int64_t v63 = 0LL;
  unint64_t v39 = v62;
  *(void *)(v30 + 16) = v62[2];
  uint64_t v40 = 1LL << *((_BYTE *)v39 + 32);
  uint64_t v41 = v39[8];
  uint64_t v42 = -1LL;
  if (v40 < 64) {
    uint64_t v42 = ~(-1LL << v40);
  }
  unint64_t v68 = v42 & v41;
  int64_t v59 = (unint64_t)(v40 + 63) >> 6;
  uint64_t v44 = v69;
  uint64_t v43 = v70;
  uint64_t v45 = v67;
  while (1)
  {
    uint64_t v22 = v61;
    if (v68)
    {
      unint64_t v46 = __clz(__rbit64(v68));
      v68 &= v68 - 1;
      unint64_t v47 = v46 | (v63 << 6);
      goto LABEL_19;
    }

    int64_t v54 = v63 + 1;
    if (__OFADD__(v63, 1LL))
    {
      __break(1u);
      goto LABEL_45;
    }

    uint64_t v31 = v70;
    if (v54 >= v59) {
      goto LABEL_43;
    }
    unint64_t v55 = *(void *)&v60[8 * v54];
    int64_t v56 = v63 + 1;
    if (!v55)
    {
      int64_t v56 = v63 + 2;
      if (v63 + 2 >= v59) {
        goto LABEL_43;
      }
      unint64_t v55 = *(void *)&v60[8 * v56];
      if (!v55)
      {
        int64_t v56 = v63 + 3;
        if (v63 + 3 >= v59) {
          goto LABEL_43;
        }
        unint64_t v55 = *(void *)&v60[8 * v56];
        if (!v55)
        {
          int64_t v56 = v63 + 4;
          if (v63 + 4 >= v59) {
            goto LABEL_43;
          }
          unint64_t v55 = *(void *)&v60[8 * v56];
          if (!v55)
          {
            int64_t v56 = v63 + 5;
            if (v63 + 5 >= v59) {
              goto LABEL_43;
            }
            unint64_t v55 = *(void *)&v60[8 * v56];
            if (!v55)
            {
              int64_t v56 = v63 + 6;
              if (v63 + 6 >= v59) {
                goto LABEL_43;
              }
              unint64_t v55 = *(void *)&v60[8 * v56];
              if (!v55)
              {
                int64_t v56 = v63 + 7;
                if (v63 + 7 >= v59) {
                  goto LABEL_43;
                }
                unint64_t v55 = *(void *)&v60[8 * v56];
                if (!v55) {
                  break;
                }
              }
            }
          }
        }
      }
    }

void protocol witness for Subscription.request(_:) in conformance NSTimer.TimerPublisher.Inner<A>( uint64_t a1)
{
}

void protocol witness for Cancellable.cancel() in conformance NSTimer.TimerPublisher.Inner<A>()
{
}

unint64_t protocol witness for ConnectablePublisher.connect() in conformance NSTimer.TimerPublisher@<X0>( void *a1@<X8>)
{
  return NSTimer.TimerPublisher.connect()(a1);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance NSTimer.TimerPublisher( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NSTimer.TimerPublisher.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t protocol witness for Cancellable.cancel() in conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect()()
{
  unint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 72);
  os_unfair_lock_lock(v3);
  *(void *)(v2 + 64) = MEMORY[0x18961AFF0];
  os_unfair_lock_unlock(v3);
  objc_msgSend(v1, sel_invalidate);
  return swift_bridgeObjectRelease();
}

uint64_t specialized NSTimer.TimerPublisher.fire(_:)()
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  unint64_t v1 = *(os_unfair_lock_s **)(v0 + 72);
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1);
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double v3 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  uint64_t v4 = v2 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(v2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0LL;
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }

    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v13 >= v8) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v9;
    if (!v14)
    {
      int64_t v9 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v9);
      if (!v14)
      {
        int64_t v9 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v4 + 8 * v9);
        if (!v14)
        {
          int64_t v9 = v13 + 3;
          if (v13 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v4 + 8 * v9);
          if (!v14) {
            break;
          }
        }
      }
    }

uint64_t specialized NSTimer.TimerPublisher.Inner.init(_:parent:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v5(v1 + *(void *)(*(void *)v1 + 96LL), 1LL, 1LL, v3);
  uint64_t v6 = *(void *)(*(void *)v1 + 104LL);
  *(void *)(v1 + v6) = static Subscribers.Demand.none.getter();
  swift_weakInit();
  uint64_t v7 = *(void *)(*(void *)v1 + 120LL);
  int64_t v8 = (_DWORD *)swift_slowAlloc();
  _DWORD *v8 = 0;
  *(void *)(v1 + v7) = v8;
  uint64_t v9 = v1 + *(void *)(*(void *)v1 + 96LL);
  uint64_t v10 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9, a1, v3);
  v5(v9, 0LL, 1LL, v3);
  swift_weakAssign();
  return v1;
}

void partial apply for implicit closure #2 in implicit closure #1 in NSTimer.TimerPublisher.Side.init<A>(_:)( Foundation::Date *a1)
{
}

unint64_t lazy protocol witness table accessor for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher()
{
  unint64_t result = lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher;
  if (!lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher)
  {
    uint64_t v1 = type metadata accessor for NSTimer.TimerPublisher();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSTimer.TimerPublisher, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher);
  }

  return result;
}

uint64_t method lookup function for NSTimer.TimerPublisher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NSTimer.TimerPublisher.__allocating_init(interval:tolerance:runLoop:mode:options:)( uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 136))(a1, a2 & 1);
}

uint64_t type metadata completion function for NSTimer.TimerPublisher.Inner()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void *assignWithCopy for NSTimer.TimerPublisher.Side(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for NSTimer.TimerPublisher.Side(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for NSTimer.TimerPublisher.Side()
{
  return &type metadata for NSTimer.TimerPublisher.Side;
}

void *initializeBufferWithCopyOfBuffer for CancellableTimer #1 in NSTimer.TimerPublisher.connect()( void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CancellableTimer #1 in NSTimer.TimerPublisher.connect()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

id *assignWithTake for CancellableTimer #1 in NSTimer.TimerPublisher.connect()(id *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_release();
  return a1;
}

void *type metadata accessor for CancellableTimer #1 in NSTimer.TimerPublisher.connect()()
{
  return &unk_189C907D0;
}

void base witness table accessor for Cancellable in NSTimer.TimerPublisher.Inner<A>()
{
}

void base witness table accessor for CustomCombineIdentifierConvertible in NSTimer.TimerPublisher.Inner<A>()
{
}

void NSURL.customPlaygroundQuickLook.getter(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_absoluteString);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v7 = v6;

    char v8 = 17;
  }

  else
  {
    char v8 = 0;
    unint64_t v7 = 0xEB000000004C5255LL;
    uint64_t v5 = 0x206E776F6E6B6E55LL;
  }

  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 32) = v8;
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance NSURL( uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(*v1, sel_absoluteString);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v7 = v6;

    char v8 = 17;
  }

  else
  {
    char v8 = 0;
    unint64_t v7 = 0xEB000000004C5255LL;
    uint64_t v5 = 0x206E776F6E6B6E55LL;
  }

  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 32) = v8;
}

uint64_t PredicateExpressions.PredicateEvaluate.predicate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.PredicateEvaluate.input.getter@<X0>( uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = TupleTypeMetadata;
  unint64_t v5 = *(void *)(TupleTypeMetadata + 16);
  if (v5 == 1)
  {
    uint64_t v6 = *(void *)(*(void *)(TupleTypeMetadata + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](TupleTypeMetadata);
    char v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v5)
    {
      unint64_t v9 = 0LL;
      unint64_t v10 = *(void *)(v3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4) {
        goto LABEL_9;
      }
      unint64_t v9 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v11 = (__int128 *)(v10 + 16);
      uint64_t v12 = v8 + 16;
      unint64_t v13 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *uint64_t v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4LL;
      }

      while (v13);
      if (v5 != v9)
      {
LABEL_9:
        unint64_t v15 = v5 - v9;
        uint64_t v16 = 8 * v9;
        uint64_t v17 = &v8[8 * v9];
        uint64_t v18 = (uint64_t *)(v10 + v16);
        do
        {
          uint64_t v19 = *v18++;
          *(void *)uint64_t v17 = v19;
          v17 += 8;
          --v15;
        }

        while (v15);
      }
    }

    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }

  __n128 v20 = MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16))( v22,  v2 + *(int *)(v3 + 60),  v6,  v20);
  if (v5)
  {
    uint64_t v25 = (uint64_t *)(*(void *)(v3 + 32) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v26 = (int *)(v6 + 32);
    unint64_t v27 = v5;
    do
    {
      if (v5 == 1) {
        int v28 = 0;
      }
      else {
        int v28 = *v26;
      }
      uint64_t v30 = *v25++;
      uint64_t v29 = v30;
      uint64_t v31 = *a2++;
      uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)(v29 - 8) + 32LL))(v31, &v22[v28]);
      v26 += 4;
      --v27;
    }

    while (v27);
  }

  return result;
}

void PredicateExpressions.PredicateEvaluate.init(predicate:input:)( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  v27[5] = a8;
  v27[6] = a5 & 0xFFFFFFFFFFFFFFFELL;
  v27[7] = a2;
  if (a3 == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (a3)
    {
      unint64_t v17 = 0LL;
      if (a3 < 4) {
        goto LABEL_9;
      }
      unint64_t v17 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v18 = (__int128 *)(v14 + 16);
      uint64_t v19 = v16 + 16;
      unint64_t v20 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        *uint64_t v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4LL;
      }

      while (v20);
      if (v17 != a3)
      {
LABEL_9:
        unint64_t v22 = a3 - v17;
        uint64_t v23 = 8 * v17;
        uint64_t v24 = &v16[8 * v17];
        uint64_t v25 = (uint64_t *)(v14 + v23);
        do
        {
          uint64_t v26 = *v25++;
          *(void *)uint64_t v24 = v26;
          v24 += 8;
          --v22;
        }

        while (v22);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  v27[8] = TupleTypeMetadata;
  v27[1] = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1895F8858](TupleTypeMetadata);
  v27[9] = a3;
  v27[10] = a4;
  v27[11] = a5;
  v27[12] = a6;
  v27[13] = a7;
  type metadata accessor for PredicateExpressions.PredicateEvaluate();
}

void type metadata accessor for PredicateExpressions.PredicateEvaluate()
{
}

uint64_t PredicateExpressions.PredicateEvaluate.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = 8 * v3;
  unint64_t v78 = v3;
  uint64_t v73 = a1;
  if (v3 == 1)
  {
    uint64_t v67 = &v61;
    uint64_t v71 = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v66 = *(void *)(v71 - 8);
    MEMORY[0x1895F8858](a1);
    uint64_t v77 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    unint64_t v7 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    char v8 = (char *)&v61 - v7;
    if (v3)
    {
      unint64_t v9 = 0LL;
      unint64_t v10 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v3 < 4) {
        goto LABEL_9;
      }
      unint64_t v9 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v11 = (__int128 *)(v10 + 16);
      uint64_t v12 = v8 + 16;
      unint64_t v13 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *uint64_t v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4LL;
      }

      while (v13);
      if (v3 != v9)
      {
LABEL_9:
        unint64_t v15 = v3 - v9;
        uint64_t v16 = 8 * v9;
        unint64_t v17 = &v8[8 * v9];
        uint64_t v18 = (uint64_t *)(v10 + v16);
        do
        {
          uint64_t v19 = *v18++;
          *(void *)unint64_t v17 = v19;
          v17 += 8;
          --v15;
        }

        while (v15);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v67 = &v61;
    uint64_t v71 = TupleTypeMetadata;
    uint64_t v66 = *(void *)(TupleTypeMetadata - 8);
    MEMORY[0x1895F8858](TupleTypeMetadata);
    uint64_t v77 = (char *)&v61 - v21;
    char v76 = (char *)&v61;
    MEMORY[0x1895F8858](v22);
    if (v3)
    {
      unint64_t v23 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v24 = *(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v25 = (uint64_t *)((char *)&v61 - v7);
      uint64_t v26 = v78;
      do
      {
        v23 += 8LL;
        v24 += 8LL;
        *v25++ = swift_getAssociatedTypeWitness();
        --v26;
      }

      while (v26);
    }

    unint64_t v3 = v78;
    uint64_t AssociatedTypeWitness = swift_getTupleTypeMetadata();
  }

  uint64_t v69 = &v61;
  uint64_t v70 = AssociatedTypeWitness;
  uint64_t v65 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  char v76 = (char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v68 = &v61;
  MEMORY[0x1895F8858](v28);
  if (v3)
  {
    unint64_t v30 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v31 = *(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v32 = (uint64_t *)((char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v33 = v78;
    do
    {
      v30 += 8LL;
      v31 += 8LL;
      *v32++ = swift_getAssociatedTypeWitness();
      --v33;
    }

    while (v33);
  }

  uint64_t v34 = v78;
  uint64_t v35 = type metadata accessor for Predicate(0LL, v78, (uint64_t)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL), v29);
  uint64_t v36 = *(void *)(v35 - 8);
  __n128 v37 = MEMORY[0x1895F8858](v35);
  unint64_t v39 = (char *)&v61 - v38;
  unint64_t v40 = v74;
  uint64_t v41 = *v73;
  uint64_t v79 = *v73;
  uint64_t v42 = v75;
  uint64_t v43 = (*(uint64_t (**)(uint64_t *, void, __n128))(*(void *)(a2 + 40) + 16LL))( &v79,  *(void *)(a2 + 24),  v37);
  if (!v42)
  {
    __int128 v61 = v39;
    uint64_t v62 = v36;
    uint64_t v63 = v35;
    __int128 v64 = &v61;
    __n128 v44 = MEMORY[0x1895F8858](v43);
    uint64_t v75 = (uint64_t *)((char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v45 = (*(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v66 + 16))( v77,  v40 + *(int *)(a2 + 60),  v71,  v44);
    if (v34)
    {
      uint64_t v48 = 0LL;
      unint64_t v49 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v73 = (uint64_t *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      unint64_t v74 = v49;
      uint64_t v50 = 32LL;
      uint64_t v72 = v41;
      do
      {
        if (v34 == 1) {
          uint64_t v51 = (uint64_t)v76;
        }
        else {
          uint64_t v51 = (uint64_t)&v76[*(int *)(v70 + v50)];
        }
        uint64_t v52 = *(void *)(v74 + 8 * v48);
        uint64_t v53 = v73[v48];
        uint64_t v54 = *(void *)(v52 - 8);
        __n128 v55 = MEMORY[0x1895F8858](v45);
        int64_t v57 = (char *)&v61 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *, __n128))(v54 + 16))(v57, v55);
        uint64_t v79 = v72;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v53 + 16))(&v79, v52, v53);
        uint64_t v45 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v57, v52);
        v75[v48++] = v51;
        v50 += 16LL;
        uint64_t v34 = v78;
      }

      while (v78 != v48);
    }

    uint64_t v58 = v63;
    int64_t v59 = v61;
    LOBYTE(v34) = Predicate.evaluate(_:)(v75, v63, v46, v47);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v58);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v76, v70);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v77, v71);
  }

  return v34 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.PredicateEvaluate.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

void static PredicateExpressions.build_evaluate<A, B>(_:_:)( uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v48 = a6;
  uint64_t v49 = a7;
  uint64_t v11 = TupleTypeMetadata;
  uint64_t v45 = a8;
  uint64_t v47 = a5;
  uint64_t v12 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v13 = 8 * a3;
  if (a3 == 1)
  {
    uint64_t v14 = *v12;
  }

  else
  {
    MEMORY[0x1895F8858](TupleTypeMetadata);
    unint64_t v15 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (a3)
    {
      unint64_t v16 = 0LL;
      if (a3 < 4) {
        goto LABEL_9;
      }
      unint64_t v16 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v17 = (__int128 *)(v12 + 2);
      uint64_t v18 = v15 + 16;
      unint64_t v19 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *uint64_t v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 4LL;
      }

      while (v19);
      if (v16 != a3)
      {
LABEL_9:
        unint64_t v21 = a3 - v16;
        uint64_t v22 = v16;
        unint64_t v23 = &v15[8 * v16];
        unint64_t v24 = &v12[v22];
        do
        {
          uint64_t v25 = *v24++;
          *(void *)unint64_t v23 = v25;
          v23 += 8;
          --v21;
        }

        while (v21);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v14 = TupleTypeMetadata;
  }

  MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v27 = (char *)v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v44[2] = v44;
  __n128 v29 = MEMORY[0x1895F8858](v28);
  unint64_t v31 = (char *)v44 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v32 + 16);
  uint64_t v46 = a4;
  uint64_t v34 = v33(v31, v11, a4, v29);
  v44[1] = v44;
  MEMORY[0x1895F8858](v34);
  uint64_t v35 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a3)
  {
    uint64_t v36 = (int *)(v14 + 32);
    __n128 v37 = (char **)((char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    unint64_t v38 = a3;
    do
    {
      if (a3 == 1) {
        int v39 = 0;
      }
      else {
        int v39 = *v36;
      }
      uint64_t v41 = *v12++;
      uint64_t v40 = v41;
      uint64_t v42 = &v27[v39];
      uint64_t v43 = *a2++;
      (*(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 16LL))(v42, v43);
      *v37++ = v42;
      v36 += 4;
      --v38;
    }

    while (v38);
  }

  PredicateExpressions.PredicateEvaluate.init(predicate:input:)((uint64_t)v31, (uint64_t)v35, a3, v46, v47, v48, v49, v45);
}

  ;
}

uint64_t PredicateExpressions.PredicateEvaluate.description.getter(uint64_t a1)
{
  v21[0] = 0LL;
  v21[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(43LL);
  v2._object = (void *)0x80000001839D3010LL;
  v2._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x3A7475706E69202CLL;
  v3._object = (void *)0xE900000000000020LL;
  String.append(_:)(v3);
  if (*(void *)(a1 + 16) != 1LL)
  {
    MEMORY[0x1895F8858](v4);
    unint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v5)
    {
      unint64_t v8 = 0LL;
      unint64_t v9 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4) {
        goto LABEL_8;
      }
      unint64_t v8 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v10 = (__int128 *)(v9 + 16);
      uint64_t v11 = v7 + 16;
      unint64_t v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *uint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4LL;
      }

      while (v12);
      if (v5 != v8)
      {
LABEL_8:
        unint64_t v14 = v5 - v8;
        uint64_t v15 = 8 * v8;
        unint64_t v16 = &v7[8 * v8];
        unint64_t v17 = (uint64_t *)(v9 + v15);
        do
        {
          uint64_t v18 = *v17++;
          *(void *)unint64_t v16 = v18;
          v16 += 8;
          --v14;
        }

        while (v14);
      }
    }

    swift_getTupleTypeMetadata();
  }

  _print_unlocked<A, B>(_:_:)();
  v19._countAndFlagsBits = 41LL;
  v19._object = (void *)0xE100000000000000LL;
  String.append(_:)(v19);
  return v21[0];
}

uint64_t PredicateExpressions.PredicateEvaluate<>.encode(to:)( uint64_t TupleTypeMetadata, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = a4;
  unint64_t v7 = (void *)TupleTypeMetadata;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v44 = a6;
  uint64_t v45 = v8;
  if (v8 == 1)
  {
    uint64_t v9 = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](TupleTypeMetadata);
    unint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v10)
    {
      unint64_t v13 = 0LL;
      unint64_t v14 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v10 < 4) {
        goto LABEL_9;
      }
      unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v15 = (__int128 *)(v14 + 16);
      unint64_t v16 = v12 + 16;
      unint64_t v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *unint64_t v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 4LL;
      }

      while (v17);
      if (v10 != v13)
      {
LABEL_9:
        unint64_t v19 = v10 - v13;
        uint64_t v20 = 8 * v13;
        unint64_t v21 = &v12[8 * v13];
        uint64_t v22 = (uint64_t *)(v14 + v20);
        do
        {
          uint64_t v23 = *v22++;
          *(void *)unint64_t v21 = v23;
          v21 += 8;
          --v19;
        }

        while (v19);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v9 = TupleTypeMetadata;
  }

  uint64_t v24 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v26 = (char *)&v41 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v48, v49);
  uint64_t v27 = v46;
  uint64_t v28 = v50;
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (v28) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  }
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v27 + *(int *)(a2 + 60), v9);
  uint64_t v41 = (uint64_t)&v41;
  uint64_t v42 = v9;
  if (v45)
  {
    unint64_t v31 = (uint64_t *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v32 = v45;
    unint64_t v33 = v44 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v34 = 32LL;
    uint64_t v43 = v26;
    uint64_t v44 = v24;
    while (1)
    {
      uint64_t v46 = v32;
      uint64_t v50 = 0LL;
      uint64_t v47 = &v41;
      uint64_t v35 = *v31;
      uint64_t v36 = *(void *)(*v31 - 8);
      __n128 v37 = MEMORY[0x1895F8858](v30);
      int v39 = (char *)&v41 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *, __n128))(v36 + 16))(v39, v37);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v48, v49);
      uint64_t v40 = v50;
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v40) {
        break;
      }
      uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v39, v35);
      v34 += 16LL;
      v33 += 8LL;
      ++v31;
      uint64_t v32 = v46 - 1;
      uint64_t v26 = v43;
      uint64_t v24 = v44;
      if (v46 == 1) {
        goto LABEL_18;
      }
    }

    (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v42);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  }

void PredicateExpressions.PredicateEvaluate<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  v32[8] = a6;
  uint64_t v11 = a3;
  v32[4] = a8;
  v32[23] = a2;
  if (a2 == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    unint64_t v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v14)
    {
      unint64_t v18 = 0LL;
      if (v14 < 4) {
        goto LABEL_9;
      }
      unint64_t v18 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v19 = (__int128 *)(v15 + 16);
      uint64_t v20 = v17 + 16;
      unint64_t v21 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v22 = *v19;
        *(v20 - 1) = *(v19 - 1);
        *uint64_t v20 = v22;
        v19 += 2;
        v20 += 2;
        v21 -= 4LL;
      }

      while (v21);
      if (v18 != v14)
      {
LABEL_9:
        unint64_t v23 = v14 - v18;
        uint64_t v24 = 8 * v18;
        uint64_t v25 = &v17[8 * v18];
        uint64_t v26 = (uint64_t *)(v15 + v24);
        do
        {
          uint64_t v27 = *v26++;
          *(void *)uint64_t v25 = v27;
          v25 += 8;
          --v23;
        }

        while (v23);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v11 = a3;
  }

  v32[12] = v32;
  v32[5] = *(void *)(TupleTypeMetadata - 8);
  v32[6] = TupleTypeMetadata;
  MEMORY[0x1895F8858](TupleTypeMetadata);
  v32[15] = (char *)v32 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v32[11] = v32;
  MEMORY[0x1895F8858](v29);
  v32[7] = (char *)v32 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v32[16] = v31;
  v32[17] = v11;
  v32[18] = a4;
  v32[19] = a5;
  v32[20] = a7;
  type metadata accessor for PredicateExpressions.PredicateEvaluate();
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a3 + 16LL);
  uint64_t v6 = *(void *)(*(void *)a3 + 24LL);
  uint64_t v7 = MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v9)
  {
    uint64_t v12 = 0LL;
    unint64_t v13 = *(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(void *)&v11[8 * v12] = *(void *)(*(void *)(v13 + 8 * v12) + 16LL);
      ++v12;
    }

    while (v9 != v12);
    MEMORY[0x1895F8858](v7);
    unint64_t v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v18 = 0LL;
    do
    {
      *(void *)&v17[8 * v18] = *(void *)(*(void *)(v15 + 8 * v18) + 24LL);
      ++v18;
    }

    while (v14 != v18);
  }

  else
  {
    MEMORY[0x1895F8858](v7);
    unint64_t v17 = (char *)v21 - v19;
  }

  v22[0] = v5;
  v22[1] = v6;
  v22[2] = v11;
  v22[3] = v17;
  *(void *)(a1 + 16) = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>,  a2,  v22);
  v21[0] = v5;
  v21[1] = v6;
  void v21[2] = v11;
  v21[3] = v17;
  uint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for <> PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>,  a2,  v21);
  *(void *)(a1 + 24) = result;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PredicateExpressions.PredicateEvaluate<>.encode(to:)( a1,  a2,  a3,  *(uint64_t **)(a3 - 16),  a5,  *(void *)(a3 - 32));
}

uint64_t type metadata completion function for PredicateExpressions.PredicateEvaluate(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState();
  if (v3 <= 0x3F)
  {
    v20[0] = *(void *)(result - 8) + 64LL;
    if (*(void *)(a1 + 16) == 1LL)
    {
      uint64_t result = swift_checkMetadataState();
      if (v4 > 0x3F) {
        return result;
      }
LABEL_14:
      v20[1] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata();
      return 0LL;
    }

    MEMORY[0x1895F8858](result);
    uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v5)
    {
      unint64_t v8 = 0LL;
      unint64_t v9 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4) {
        goto LABEL_11;
      }
      unint64_t v8 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v10 = (__int128 *)(v9 + 16);
      uint64_t v11 = v7 + 16;
      unint64_t v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *uint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4LL;
      }

      while (v12);
      if (v5 != v8)
      {
LABEL_11:
        unint64_t v14 = v5 - v8;
        uint64_t v15 = 8 * v8;
        uint64_t v16 = &v7[8 * v8];
        unint64_t v17 = (uint64_t *)(v9 + v15);
        do
        {
          uint64_t v18 = *v17++;
          *(void *)uint64_t v16 = v18;
          v16 += 8;
          --v14;
        }

        while (v14);
      }
    }

    uint64_t result = swift_getTupleTypeMetadata();
    if (v19 <= 0x3F) {
      goto LABEL_14;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.PredicateEvaluate( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*(void *)(*(void *)(a3 + 24) - 8LL) + 16LL))(a1, a2);
    uint64_t v8 = *(int *)(a3 + 60);
    unint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (char *)a2 + v8;
    if (*(void *)(a3 + 16) == 1LL)
    {
      uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
    }

    else
    {
      MEMORY[0x1895F8858](v7);
      uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      if (v13)
      {
        unint64_t v16 = 0LL;
        unint64_t v17 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (v13 < 4) {
          goto LABEL_11;
        }
        unint64_t v16 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v18 = (__int128 *)(v17 + 16);
        unint64_t v19 = v15 + 16;
        unint64_t v20 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          __int128 v21 = *v18;
          *(v19 - 1) = *(v18 - 1);
          *unint64_t v19 = v21;
          v18 += 2;
          v19 += 2;
          v20 -= 4LL;
        }

        while (v20);
        if (v13 != v16)
        {
LABEL_11:
          unint64_t v22 = v13 - v16;
          uint64_t v23 = 8 * v16;
          uint64_t v24 = &v15[8 * v16];
          uint64_t v25 = (uint64_t *)(v17 + v23);
          do
          {
            uint64_t v26 = *v25++;
            *(void *)uint64_t v24 = v26;
            v24 += 8;
            --v22;
          }

          while (v22);
        }
      }

      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }

    (*(void (**)(char *, char *))(*(void *)(TupleTypeMetadata - 8) + 16LL))(v9, v10);
  }

  return v4;
}

uint64_t destroy for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) - 8LL) + 8LL))();
  uint64_t v5 = *(int *)(a2 + 60);
  if (*(void *)(a2 + 16) == 1LL)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](v4);
    unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v7)
    {
      unint64_t v10 = 0LL;
      unint64_t v11 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4) {
        goto LABEL_9;
      }
      unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v12 = (__int128 *)(v11 + 16);
      unint64_t v13 = v9 + 16;
      unint64_t v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *unint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4LL;
      }

      while (v14);
      if (v7 != v10)
      {
LABEL_9:
        unint64_t v16 = v7 - v10;
        uint64_t v17 = 8 * v10;
        uint64_t v18 = &v9[8 * v10];
        unint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }

        while (v16);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)(TupleTypeMetadata - 8) + 8LL))(a1 + v5);
}

uint64_t initializeWithCopy for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8LL) + 16LL))();
  uint64_t v7 = *(int *)(a3 + 60);
  if (*(void *)(a3 + 16) == 1LL)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v9)
    {
      unint64_t v12 = 0LL;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (__int128 *)(v13 + 16);
      __int128 v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *__int128 v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4LL;
      }

      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        __int128 v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }

        while (v18);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 16LL))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8LL) + 24LL))();
  uint64_t v7 = *(int *)(a3 + 60);
  if (*(void *)(a3 + 16) == 1LL)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v9)
    {
      unint64_t v12 = 0LL;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (__int128 *)(v13 + 16);
      __int128 v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *__int128 v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4LL;
      }

      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        __int128 v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }

        while (v18);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 24LL))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8LL) + 32LL))();
  uint64_t v7 = *(int *)(a3 + 60);
  if (*(void *)(a3 + 16) == 1LL)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v9)
    {
      unint64_t v12 = 0LL;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (__int128 *)(v13 + 16);
      __int128 v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *__int128 v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4LL;
      }

      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        __int128 v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }

        while (v18);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 32LL))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8LL) + 40LL))();
  uint64_t v7 = *(int *)(a3 + 60);
  if (*(void *)(a3 + 16) == 1LL)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v9)
    {
      unint64_t v12 = 0LL;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (__int128 *)(v13 + 16);
      __int128 v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *__int128 v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4LL;
      }

      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        __int128 v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }

        while (v18);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 40LL))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.PredicateEvaluate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18345F4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(a1, a2);
  }
  if (*(void *)(a3 + 16) == 1LL)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    unint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v9)
    {
      unint64_t v12 = 0LL;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_11;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (__int128 *)(v13 + 16);
      __int128 v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *__int128 v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4LL;
      }

      while (v16);
      if (v9 != v12)
      {
LABEL_11:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        __int128 v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }

        while (v18);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 48LL))( a1 + *(int *)(a3 + 60),  a2);
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.PredicateEvaluate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18345F650(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v7 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, a2, a2);
  }
  if (*(void *)(a4 + 16) == 1LL)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a4 + 32) & 0xFFFFFFFFFFFFFELL);
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (v10)
    {
      unint64_t v13 = 0LL;
      unint64_t v14 = *(void *)(a4 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v10 < 4) {
        goto LABEL_11;
      }
      unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      __int128 v15 = (__int128 *)(v14 + 16);
      unint64_t v16 = v12 + 16;
      unint64_t v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        __int128 v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *unint64_t v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 4LL;
      }

      while (v17);
      if (v10 != v13)
      {
LABEL_11:
        unint64_t v19 = v10 - v13;
        uint64_t v20 = 8 * v13;
        __int128 v21 = &v12[8 * v13];
        uint64_t v22 = (uint64_t *)(v14 + v20);
        do
        {
          uint64_t v23 = *v22++;
          *(void *)__int128 v21 = v23;
          v21 += 8;
          --v19;
        }

        while (v19);
      }
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56LL))( a1 + *(int *)(a4 + 60),  a2,  a2);
}

BOOL static AttributeContainer.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  return (specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0
      && (specialized static Set.== infix(_:_:)(v2, v3) & 1) != 0;
}

void AttributeContainer.init()(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x18961AFF8];
  *a1 = MEMORY[0x18961AFF0];
  a1[1] = v1;
}

uint64_t AttributeContainer.subscript.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

{
  void *v1;
  uint64_t v2;
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0LL;
  a1[3] = 0LL;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t AttributeContainer.Builder.callAsFunction(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v13 = MEMORY[0x1895F8858](v12);
  __int128 v15 = (char *)&v25 - v14;
  uint64_t v17 = *v3;
  uint64_t v16 = v3[1];
  uint64_t v27 = a3;
  *a3 = v17;
  a3[1] = v16;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))( (char *)&v25 - v14,  v26,  AssociatedTypeWitness,  v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v15, v8);
  unint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v20 = v19(v6, v5);
  unint64_t v22 = v21;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v11, v6, v5, (uint64_t)v28);
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v28, v20, v22);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v11, v8);
  return ((uint64_t (*)(char *, uint64_t))v23)(v15, v8);
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  uint64_t v2 = a2;
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v42 = 0LL;
  uint64_t v4 = *(void *)(result + 64);
  uint64_t v33 = result + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & v4;
  uint64_t v40 = v54;
  uint64_t v8 = (__int128 *)&v54[3];
  int64_t v34 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v35 = result;
  int64_t v32 = v34 - 1;
  uint64_t v36 = (__int128 *)&v54[3];
  uint64_t v37 = a2;
  if ((v6 & v4) == 0) {
    goto LABEL_12;
  }
LABEL_10:
  while (2)
  {
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v42 << 6);
LABEL_11:
    uint64_t v12 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v3 + 56) + 72 * v11, (uint64_t)v40);
    *(void *)&__int128 v53 = v13;
    *((void *)&v53 + 1) = v14;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v53, (uint64_t)&v57);
      if (!v58) {
        return 1LL;
      }
      v51[2] = v61;
      v51[3] = v62;
      uint64_t v52 = v63;
      v51[0] = v59;
      v51[1] = v60;
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v58);
      char v20 = v19;
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0) {
        goto LABEL_43;
      }
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v2 + 56) + 72 * v18, (uint64_t)v50);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v50,  (uint64_t)v49);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v51,  (uint64_t)v48);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v49, (uint64_t)&v53);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v48, (uint64_t)v8);
      if (v54[1]) {
        break;
      }
      if ((void)v55)
      {
        outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        goto LABEL_42;
      }

      outlined destroy of Any?((uint64_t)v48, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v49, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v50);
      uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)v51);
      if (v7) {
        goto LABEL_10;
      }
LABEL_12:
      int64_t v15 = v42 + 1;
      if (__OFADD__(v42, 1LL))
      {
        __break(1u);
        goto LABEL_46;
      }

      if (v15 < v34)
      {
        unint64_t v16 = *(void *)(v33 + 8 * v15);
        if (v16) {
          goto LABEL_15;
        }
        int64_t v17 = v42 + 2;
        ++v42;
        if (v15 + 1 < v34)
        {
          unint64_t v16 = *(void *)(v33 + 8 * v17);
          if (v16) {
            goto LABEL_18;
          }
          int64_t v42 = v15 + 1;
          if (v15 + 2 < v34)
          {
            unint64_t v16 = *(void *)(v33 + 8 * (v15 + 2));
            if (v16)
            {
              v15 += 2LL;
              goto LABEL_15;
            }

            int64_t v17 = v15 + 3;
            int64_t v42 = v15 + 2;
            if (v15 + 3 < v34)
            {
              unint64_t v16 = *(void *)(v33 + 8 * v17);
              if (v16)
              {
LABEL_18:
                int64_t v15 = v17;
LABEL_15:
                unint64_t v7 = (v16 - 1) & v16;
                unint64_t v11 = __clz(__rbit64(v16)) + (v15 << 6);
                int64_t v42 = v15;
                goto LABEL_11;
              }

              while (1)
              {
                int64_t v15 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  break;
                }
                if (v15 >= v34)
                {
                  int64_t v42 = v32;
                  goto LABEL_29;
                }

                unint64_t v16 = *(void *)(v33 + 8 * v15);
                ++v17;
                if (v16) {
                  goto LABEL_15;
                }
              }

{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v44;
  char v45;
  BOOL v46;
  char v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  if (result == a2) {
    return 1LL;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v51 = result;
  uint64_t v2 = 0LL;
  uint64_t v49 = result + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  uint64_t v5 = v4 & *(void *)(result + 64);
  uint64_t v50 = (unint64_t)(v3 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      uint64_t v56 = (v5 - 1) & v5;
      uint64_t v57 = v2;
      uint64_t v6 = __clz(__rbit64(v5)) | (v2 << 6);
      goto LABEL_24;
    }

    unint64_t v7 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
      goto LABEL_73;
    }

    if (v7 >= v50) {
      return 1LL;
    }
    uint64_t v8 = *(void *)(v49 + 8 * v7);
    char v9 = v2 + 1;
    if (!v8)
    {
      char v9 = v2 + 2;
      if (v2 + 2 >= v50) {
        return 1LL;
      }
      uint64_t v8 = *(void *)(v49 + 8 * v9);
      if (!v8)
      {
        char v9 = v2 + 3;
        if (v2 + 3 >= v50) {
          return 1LL;
        }
        uint64_t v8 = *(void *)(v49 + 8 * v9);
        if (!v8) {
          break;
        }
      }
    }

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  char v16;
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  unint64_t v7 = -1LL;
  if (v6 < 64) {
    unint64_t v7 = ~(-1LL << v6);
  }
  uint64_t v8 = v7 & *(void *)(result + 64);
  char v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }

    uint64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v12 >= v9) {
      return 1LL;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      uint64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1LL;
      }
      uint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        uint64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1LL;
        }
        uint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  unint64_t v7 = -1LL;
  if (v6 < 64) {
    unint64_t v7 = ~(-1LL << v6);
  }
  uint64_t v8 = v7 & *(void *)(result + 64);
  char v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }

    uint64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v12 >= v9) {
      return 1LL;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      uint64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1LL;
      }
      uint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        uint64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1LL;
        }
        uint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  unint64_t v7 = -1LL;
  if (v6 < 64) {
    unint64_t v7 = ~(-1LL << v6);
  }
  uint64_t v8 = v7 & *(void *)(result + 64);
  char v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }

    uint64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v12 >= v9) {
      return 1LL;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      uint64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1LL;
      }
      uint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        uint64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1LL;
        }
        uint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  void *v24;
  uint64_t v25;
  char v27;
  int64_t v28;
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  unint64_t v7 = -1LL;
  if (v6 < 64) {
    unint64_t v7 = ~(-1LL << v6);
  }
  uint64_t v8 = v7 & *(void *)(result + 64);
  uint64_t v28 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      char v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }

    unint64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    if (v11 >= v28) {
      return 1LL;
    }
    uint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      uint64_t v4 = v11 + 1;
      if (v11 + 1 >= v28) {
        return 1LL;
      }
      uint64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        uint64_t v4 = v11 + 2;
        if (v11 + 2 >= v28) {
          return 1LL;
        }
        uint64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12) {
          break;
        }
      }
    }

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  unint64_t v7 = -1LL;
  if (v6 < 64) {
    unint64_t v7 = ~(-1LL << v6);
  }
  uint64_t v8 = v7 & *(void *)(result + 64);
  char v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }

    uint64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v12 >= v9) {
      return 1LL;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      uint64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1LL;
      }
      uint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        uint64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1LL;
        }
        uint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  unint64_t v7 = -1LL;
  if (v6 < 64) {
    unint64_t v7 = ~(-1LL << v6);
  }
  uint64_t v8 = v7 & *(void *)(result + 64);
  char v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v4 << 6);
LABEL_23:
    int64_t v15 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v11);
    int64_t v17 = *v15;
    unint64_t v16 = v15[1];
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v3 + 48) + v11));
    if ((v18 & 1) == 0) {
      return 0LL;
    }
    char v19 = (uint64_t *)(*(void *)(a2 + 56) + 16 * result);
    char v20 = v19[1];
    if (v20)
    {
      if (!v16) {
        return 0LL;
      }
      uint64_t result = *v19;
      if (*v19 != v17 || v20 != v16)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          return 0LL;
        }
      }
    }

    else if (v16)
    {
      return 0LL;
    }
  }

  uint64_t v12 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
    goto LABEL_34;
  }

  if (v12 >= v9) {
    return 1LL;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v12);
  ++v4;
  if (v13) {
    goto LABEL_22;
  }
  uint64_t v4 = v12 + 1;
  if (v12 + 1 >= v9) {
    return 1LL;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13) {
    goto LABEL_22;
  }
  uint64_t v4 = v12 + 2;
  if (v12 + 2 >= v9) {
    return 1LL;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_22:
    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_23;
  }

  uint64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1LL;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return 1LL;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_22;
    }
  }

unint64_t specialized static Dictionary<>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }

    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v12 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1LL;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1LL;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }

uint64_t AttributeContainer.subscript.setter(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v3 = 0LL;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_24;
    }

    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_43;
    }

    if (v10 >= v30) {
      return 1LL;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1LL;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1LL;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }

Swift::Int specialized static Set.== infix(_:_:)(Swift::Int result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  Swift::Int v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  Swift::Int v5 = result + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_23;
    }

    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }

    if (v13 >= v9) {
      return 1LL;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (v14) {
      goto LABEL_22;
    }
    int64_t v4 = v13 + 1;
    if (v13 + 1 >= v9) {
      return 1LL;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_22;
    }
    int64_t v4 = v13 + 2;
    if (v13 + 2 >= v9) {
      return 1LL;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_22;
    }
    int64_t v15 = v13 + 3;
    if (v15 >= v9) {
      return 1LL;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v4 = v15 + 1;
        if (__OFADD__(v15, 1LL)) {
          goto LABEL_33;
        }
        if (v4 >= v9) {
          return 1LL;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        ++v15;
        if (v14) {
          goto LABEL_22;
        }
      }
    }

    int64_t v4 = v15;
LABEL_22:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_23:
    Swift::UInt v16 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v12);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    uint64_t result = Hasher._finalize()();
    uint64_t v17 = -1LL << *(_BYTE *)(a2 + 32);
    unint64_t v18 = result & ~v17;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) == 0) {
      return 0LL;
    }
    uint64_t v19 = *(void *)(a2 + 48);
  }

  while (*(unsigned __int8 *)(v19 + v18) == (_DWORD)v16);
  uint64_t v20 = ~v17;
  while (1)
  {
    unint64_t v18 = (v18 + 1) & v20;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) == 0) {
      return 0LL;
    }
  }

uint64_t AttributeContainer.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*MEMORY[0x18961A9A8] + *a1 + 8LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AttributedString._AttributeStorage.subscript.getter(v6, v7, a2, a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void static AttributeContainer.subscript.getter(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x18961AFF8];
  *a1 = MEMORY[0x18961AFF0];
  a1[1] = v1;
}

uint64_t AttributeContainer.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return AttributedString._AttributeStorage.subscript.getter(*v3, a1, a2, a3);
}

uint64_t AttributeContainer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = MEMORY[0x1895F8858](v7);
  unint64_t v11 = &v18[-v10 - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v8 + 16))(&v18[-v10 - 8], a1, v7, v9);
  unint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  unint64_t v14 = v13;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v11, a3, a4, (uint64_t)v18);
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v18, v12, v14);
  swift_bridgeObjectRelease();
  int64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v15((uint64_t)v11, v7);
  return v15(a1, v7);
}

void (*AttributeContainer.subscript.modify( void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v8 = malloc(0x40uLL);
  *a1 = v8;
  v8[1] = a4;
  _OWORD v8[2] = v4;
  void *v8 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  v8[3] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[4] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v8[5] = malloc(v11);
  v8[6] = malloc(v11);
  unint64_t v12 = malloc(v11);
  v8[7] = v12;
  AttributedString._AttributeStorage.subscript.getter(*v4, a3, a4, (uint64_t)v12);
  return AttributeContainer.subscript.modify;
}

void AttributeContainer.subscript.modify(uint64_t **a1, char a2)
{
  Swift::Int v3 = *a1;
  int64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[4] + 16);
  v4((*a1)[6], v3[7], v3[3]);
  Swift::Int v5 = (void *)v3[6];
  uint64_t v6 = (void *)v3[7];
  uint64_t v7 = (void *)v3[5];
  uint64_t v18 = v3[4];
  uint64_t v8 = v3[3];
  uint64_t v9 = *v3;
  uint64_t v10 = v3[1];
  if ((a2 & 1) != 0)
  {
    v4((uint64_t)v7, (uint64_t)v5, v3[3]);
    unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
    unint64_t v13 = v12;
    static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v7, v9, v10, (uint64_t)v19);
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v19, v11, v13);
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void *, uint64_t))(v18 + 8);
    v14(v7, v8);
  }

  else
  {
    unint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(*v3, v3[1]);
    unint64_t v17 = v16;
    static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v5, v9, v10, (uint64_t)v19);
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v19, v15, v17);
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void *, uint64_t))(v18 + 8);
  }

  v14(v5, v8);
  v14(v6, v8);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t key path getter for AttributeContainer.subscript<A>(dynamicMember:) : <A>AttributeContainerA@<X0>( void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)a1 + a2 - 8);
  Swift::Int v5 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AttributeContainer.subscript.getter(v5, v4, a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*AttributeContainer.subscript.modify( void *a1, void *a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v7 = malloc(0x50uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  uint64_t v8 = *(void *)(*MEMORY[0x18961A9A8] + *a2 + 8LL);
  void v7[3] = v8;
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  v7[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[5] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v7[6] = malloc(v11);
  v7[7] = malloc(v11);
  v7[8] = malloc(v11);
  unint64_t v12 = malloc(v11);
  v7[9] = v12;
  uint64_t v13 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AttributedString._AttributeStorage.subscript.getter(v13, v8, a3, (uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return AttributeContainer.subscript.modify;
}

void AttributeContainer.subscript.modify(uint64_t a1, char a2)
{
  Swift::Int v3 = *(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 64LL);
  Swift::Int v5 = *(void **)(*(void *)a1 + 56LL);
  uint64_t v6 = *(void *)(*(void *)a1 + 32LL);
  uint64_t v7 = *(void (**)(void *, void *, uint64_t))(*(void *)(*(void *)a1 + 40LL) + 16LL);
  v7(v4, *(void **)(*(void *)a1 + 72LL), v6);
  v7(v5, v4, v6);
  uint64_t v8 = (void *)v3[7];
  uint64_t v24 = (void *)v3[9];
  uint64_t v25 = (void *)v3[8];
  uint64_t v9 = (void *)v3[6];
  uint64_t v23 = v3[5];
  uint64_t v10 = v3[3];
  uint64_t v11 = v3[4];
  uint64_t v12 = v3[1];
  if ((a2 & 1) != 0)
  {
    v7(v9, v8, v3[4]);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
    swift_retain();
    unint64_t v14 = v13(v10, v12);
    unint64_t v16 = v15;
    static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v9, v10, v12, (uint64_t)v26);
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v26, v14, v16);
    swift_bridgeObjectRelease();
    unint64_t v17 = *(void (**)(void *, uint64_t))(v23 + 8);
    v17(v9, v11);
    v17(v8, v11);
    swift_release();
    uint64_t v18 = v25;
    v17(v25, v11);
  }

  else
  {
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
    swift_retain();
    unint64_t v20 = v19(v10, v12);
    unint64_t v22 = v21;
    static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v8, v10, v12, (uint64_t)v26);
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v26, v20, v22);
    swift_bridgeObjectRelease();
    unint64_t v17 = *(void (**)(void *, uint64_t))(v23 + 8);
    v17(v8, v11);
    uint64_t v18 = v25;
    v17(v25, v11);
    swift_release();
  }

  v17(v24, v11);
  free(v24);
  free(v18);
  free(v8);
  free(v9);
  free(v3);
}

double key path getter for AttributeContainer.subscript<A>(dynamicMember:) : <A>AttributeContainerA@<D0>( _OWORD *a1@<X8>)
{
  double result = *(double *)v4;
  __int128 v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t key path setter for AttributeContainer.subscript<A>(dynamicMember:) : <A>AttributeContainerA( uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = a1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::Int v5 = AttributeContainer.subscript.modify(v8);
  *uint64_t v6 = v1;
  v6[1] = v2;
  v6[2] = v4;
  v6[3] = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(void *, void))v5)(v8, 0LL);
}

void (*AttributeContainer.subscript.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = MEMORY[0x18961AFF8];
  *uint64_t v3 = MEMORY[0x18961AFF0];
  v3[1] = v4;
  v3[2] = 0LL;
  void v3[3] = 0LL;
  return AttributeContainer.subscript.modify;
}

void AttributeContainer.subscript.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (*a1)[3];
  if (v2)
  {
    unint64_t v3 = v1[2];
    uint64_t v6 = 0LL;
    memset(v5, 0, sizeof(v5));
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v5, v3, v2);
  }

  else
  {
    uint64_t v4 = *v1;
    LOBYTE(v5[0]) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v4, (char *)v5);
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t AttributeContainer.subscript.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v3 = a1[2];
  unint64_t v2 = a1[3];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = 0LL;
    memset(v5, 0, sizeof(v5));
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v5, v3, v2);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    LOBYTE(v5[0]) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v1, (char *)v5);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }

  return swift_bridgeObjectRelease_n();
}

uint64_t AttributeContainer.merge(_:mergePolicy:)(uint64_t *a1, char *a2)
{
  uint64_t v2 = *a1;
  char v4 = *a2;
  return specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v2, &v4);
}

uint64_t AttributeContainer.merging(_:mergePolicy:)@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  char v6 = *a2;
  uint64_t v7 = *v3;
  uint64_t v8 = v3[1];
  *a3 = v7;
  a3[1] = v8;
  char v10 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v5, &v10);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttributeContainer( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  return (specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0
      && (specialized static Set.== infix(_:_:)(v2, v3) & 1) != 0;
}

uint64_t AttributeContainer.hash(into:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v4);
  specialized Set.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Int AttributeContainer.hashValue.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributeContainer()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttributeContainer(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v4);
  specialized Set.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributeContainer()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t AttributeContainer.description.getter()
{
  uint64_t v1 = *v0;
  v30._countAndFlagsBits = 0LL;
  v30._object = (void *)0xE000000000000000LL;
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }

    int64_t v18 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v18 >= v6) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v2 + 8 * v18);
    ++v8;
    if (!v19)
    {
      int64_t v8 = v18 + 1;
      if (v18 + 1 >= v6) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v2 + 8 * v8);
      if (!v19)
      {
        int64_t v8 = v18 + 2;
        if (v18 + 2 >= v6) {
          goto LABEL_23;
        }
        unint64_t v19 = *(void *)(v2 + 8 * v8);
        if (!v19)
        {
          int64_t v8 = v18 + 3;
          if (v18 + 3 >= v6) {
            goto LABEL_23;
          }
          unint64_t v19 = *(void *)(v2 + 8 * v8);
          if (!v19) {
            break;
          }
        }
      }
    }

uint64_t specialized AttributeContainer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  unint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __n128 v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = &v21[-v12 - 8];
  Swift::String v14 = *(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v7 + 16);
  v14(&v21[-v12 - 8], a1, v6, v11);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v14)(v9, v13, v6);
  unint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  unint64_t v17 = v16;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v9, a2, a3, (uint64_t)v21);
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v21, v15, v17);
  swift_bridgeObjectRelease();
  int64_t v18 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v18(v9, v6);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v13, v6);
}

unint64_t lazy protocol witness table accessor for type AttributeContainer and conformance AttributeContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeContainer and conformance AttributeContainer;
  if (!lazy protocol witness table cache variable for type AttributeContainer and conformance AttributeContainer)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeContainer,  &type metadata for AttributeContainer);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeContainer and conformance AttributeContainer);
  }

  return result;
}

uint64_t sub_183462554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized AttributeContainer.subscript.setter(a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t sub_18346257C()
{
  return 16LL;
}

__n128 sub_183462588(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18346259C()
{
  return 16LL;
}

__n128 sub_1834625A8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeContainer()
{
  return &type metadata for AttributeContainer;
}

uint64_t type metadata accessor for AttributeContainer.Builder( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AttributeContainer.Builder);
}

uint64_t outlined init with copy of (Hashable & Sendable)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Hashable & Sendable)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t PredicateExpressions.Negation.wrapped.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.Negation.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t PredicateExpressions.Negation.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, void))(*(void *)(a2 + 24) + 16LL))( &var1,  &v5,  *(void *)(a2 + 16));
  if (!v2) {
    char v3 = var1 ^ 1;
  }
  return v3 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Negation<A>@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.Negation.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t static PredicateExpressions.build_Negation<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, a1);
}

uint64_t PredicateExpressions.Negation.description.getter()
{
  v0._object = (void *)0x80000001839D3030LL;
  v0._countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 41LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return 0LL;
}

uint64_t PredicateExpressions.Negation<>.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t PredicateExpressions.Negation<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v24 = *(void *)(a2 - 8);
  uint64_t v25 = a3;
  MEMORY[0x1895F8858](a1);
  Swift::String v27 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for PredicateExpressions.Negation(0LL, v8, v9, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  Swift::String v14 = (char *)&v19 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    int64_t v20 = v14;
    uint64_t v21 = v12;
    uint64_t v22 = v11;
    uint64_t v15 = v24;
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    unint64_t v16 = v27;
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    unint64_t v17 = v20;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v16, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v23, v17, v22);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for PredicateExpressions.Negation( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PredicateExpressions.Negation);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Negation<A>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.Negation<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Negation<A>( void *a1)
{
  return PredicateExpressions.Negation<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Negation(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183462B0C + 4 * byte_18382A6C0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Negation( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t AsyncUnicodeScalarSequence.AsyncIterator.next()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator.next()()
{
  uint64_t v1 = (char *)(v0[3] + *(int *)(v0[2] + 36LL));
  if ((v1[1] & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[5] = v2;
    *uint64_t v2 = v0;
    v2[1] = AsyncUnicodeScalarSequence.AsyncIterator.next();
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }

  else
  {
    char v4 = *v1;
    *(_WORD *)uint64_t v1 = 256;
    uint64_t v5 = swift_task_alloc();
    v0[4] = v5;
    *(void *)uint64_t v5 = v0;
    *(void *)(v5 + 8) = AsyncUnicodeScalarSequence.AsyncIterator.next();
    *(_OWORD *)(v5 + 16) = *((_OWORD *)v0 + 1);
    *(_BYTE *)(v5 + 86) = v4;
    return swift_task_switch();
  }

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 48LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  if ((*(_BYTE *)(v0 + 65) & 1) != 0)
  {
    uint64_t v1 = 0LL;
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v1 | ((unint64_t)*(unsigned __int8 *)(v0 + 65) << 32));
  }

  uint64_t v1 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v2 = v1;
  char v4 = swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  *(void *)char v4 = v0;
  *(void *)(v4 + 8) = AsyncUnicodeScalarSequence.AsyncIterator.next();
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v4 + 86) = v2;
  return swift_task_switch();
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator.next()(unint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else {
    return (*(uint64_t (**)(unint64_t))(v4 + 8))(a1 | ((HIDWORD(a1) & 1) << 32));
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else {
    return (*(uint64_t (**)(unint64_t))(v4 + 8))(a1 | ((HIDWORD(a1) & 1) << 32));
  }
}

uint64_t AsyncUnicodeScalarSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  __n128 v5 = MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, __n128))(v7 + 16))((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL), v5);
  uint64_t v8 = *(void *)(a1 + 24);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  uint64_t result = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator(0LL, v4, v8, v9);
  *(_WORD *)(a2 + *(int *)(result + 36)) = 256;
  return result;
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a1,  v1,  AssociatedTypeWitness);
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._base.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40LL))( v1,  a1,  AssociatedTypeWitness);
}

uint64_t (*AsyncUnicodeScalarSequence.AsyncIterator._base.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._leftover.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36)) | (*(unsigned __int8 *)(v1 + *(int *)(a1 + 36) + 1) << 8);
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._leftover.setter(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (_BYTE *)(v2 + *(int *)(a2 + 36));
  *uint64_t v3 = result;
  v3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t (*AsyncUnicodeScalarSequence.AsyncIterator._leftover.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Swift::Int_optional __swiftcall AsyncUnicodeScalarSequence.AsyncIterator._expectedContinuationCountForByte(_:)( Swift::UInt8 a1)
{
  int v1 = a1 & 0xE0;
  int v2 = a1 & 0xF0;
  BOOL v3 = (a1 & 0x80u) != 0;
  uint64_t v4 = 3LL;
  if ((a1 & 0xF8) == 0xF0) {
    BOOL v3 = 0;
  }
  else {
    uint64_t v4 = 0LL;
  }
  BOOL v5 = v2 == 224;
  if (v2 == 224) {
    uint64_t v6 = 2LL;
  }
  else {
    uint64_t v6 = v4;
  }
  if (v5) {
    BOOL v3 = 0;
  }
  if (v1 == 192) {
    Swift::Int v7 = 1LL;
  }
  else {
    Swift::Int v7 = v6;
  }
  Swift::Bool v8 = v1 != 192 && v3;
  result.uint64_t value = v7;
  result.is_nil = v8;
  return result;
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)(char a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = v2;
  *(_BYTE *)(v3 + 86) = a1;
  return swift_task_switch();
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)()
{
  char v1 = *(_BYTE *)(v0 + 86);
  if ((v1 & 0xE0) == 0xC0)
  {
    uint64_t v2 = 1LL;
LABEL_7:
    *(void *)(v0 + 32) = v2;
    uint64_t v3 = *(void *)(v0 + 16);
    *(_BYTE *)(v0 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v1;
    *(_WORD *)(v0 + 81) = 0;
    *(_BYTE *)(v0 + 83) = 0;
    *(void *)(v0 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(v3 + 24);
    *(void *)(v0 + 48) = *(void *)(v3 + 16);
    *(void *)(v0 + 56) = 0LL;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v4;
    *uint64_t v4 = v0;
    v4[1] = AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:);
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }

  if ((v1 & 0xF0) == 0xE0)
  {
    uint64_t v2 = 2LL;
    goto LABEL_7;
  }

  if ((v1 & 0xF8) == 0xF0)
  {
    uint64_t v2 = 3LL;
    goto LABEL_7;
  }

  if ((*(_BYTE *)(v0 + 86) & 0x80) != 0)
  {
    LOBYTE(v9) = 0;
    uint64_t v10 = 65533LL;
  }

  else
  {
    *(_BYTE *)(v0 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v1;
    *(_WORD *)(v0 + 81) = 0;
    *(_BYTE *)(v0 + 83) = 0;
    unint64_t v6 = static String._fromUTF8Repairing(_:)();
    unint64_t v8 = specialized Collection.first.getter(v6, v7);
    swift_bridgeObjectRelease();
    uint64_t v9 = HIDWORD(v8) & 1;
    uint64_t v10 = v8;
  }

  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v10 | ((unint64_t)v9 << 32));
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 72LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v1 = *(_BYTE *)(v0 + 84);
  if ((*(_BYTE *)(v0 + 85) & 1) == 0)
  {
    if ((v1 & 0xC0) == 0x80)
    {
      uint64_t v2 = *(void *)(v0 + 32);
      uint64_t v3 = *(void *)(v0 + 56) + 1LL;
      *(_BYTE *)(v0 + 80 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v1;
      if (v3 != v2)
      {
        *(void *)(v0 + 56) = v3;
        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        uint64_t v4 = (void *)swift_task_alloc();
        *(void *)(v0 + 64) = v4;
        *uint64_t v4 = v0;
        v4[1] = AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:);
        return dispatch thunk of AsyncIteratorProtocol.next()();
      }
    }

    else
    {
      unint64_t v6 = (_BYTE *)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 16) + 36LL));
      *unint64_t v6 = v1;
      v6[1] = 0;
    }
  }

  unint64_t v7 = static String._fromUTF8Repairing(_:)();
  uint64_t v9 = specialized Collection.first.getter(v7, v8);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v9 | ((HIDWORD(v9) & 1) << 32));
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AsyncUnicodeScalarSequence.AsyncIterator);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator( uint64_t a1, uint64_t a2)
{
  void v3[3] = v2;
  v3[4] = a2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator()
{
  char v1 = (__int8 *)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 32) + 36LL));
  if ((v1[1] & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v2;
    *uint64_t v2 = v0;
    v2[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator;
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }

  else
  {
    __int8 v4 = *v1;
    *(_WORD *)char v1 = 256;
    BOOL v5 = (int8x16_t *)swift_task_alloc();
    *(void *)(v0 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v5;
    v5->i64[0] = v0;
    v5->i64[1] = (uint64_t)protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator;
    v5[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
    v5[5].i8[6] = v4;
    return swift_task_switch();
  }

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  int v2;
  __int8 v3;
  uint64_t v4;
  int8x16_t *v6;
  char v1 = *(unsigned __int8 *)(v0 + 73);
  if (v1 == 1)
  {
    uint64_t v2 = 0;
LABEL_4:
    __int8 v4 = *(void *)(v0 + 16);
    *(_DWORD *)__int8 v4 = v2;
    *(_BYTE *)(v4 + 4) = v1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v2 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v3 = v2;
  unint64_t v6 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 64) = v6;
  v6->i64[0] = v0;
  v6->i64[1] = (uint64_t)protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator;
  v6[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v6[5].i8[6] = v3;
  return swift_task_switch();
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator( uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1)
  {
    uint64_t v6 = *(void *)(v4 + 16);
    *(_DWORD *)uint64_t v6 = a1;
    *(_BYTE *)(v6 + 4) = BYTE4(a1) & 1;
  }

  return (*(uint64_t (**)(void))(v5 + 8))();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1)
  {
    uint64_t v6 = *(void *)(v4 + 16);
    *(_DWORD *)uint64_t v6 = a1;
    *(_BYTE *)(v6 + 4) = BYTE4(a1) & 1;
  }

  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncUnicodeScalarSequence<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v2, a1);
}

uint64_t AsyncSequence<>.unicodeScalars.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncUnicodeScalarSequence<A>()
{
}

uint64_t getEnumTagSinglePayload for AsyncUnicodeScalarSequence(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183463B5C + 4 * byte_18382A7E0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AsyncUnicodeScalarSequence( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for AsyncUnicodeScalarSequence( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AsyncUnicodeScalarSequence);
}

uint64_t type metadata completion function for AsyncUnicodeScalarSequence.AsyncIterator()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncUnicodeScalarSequence.AsyncIterator( uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 2) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(_WORD *)((char *)a1 + v6) = *(_WORD *)((char *)a2 + v6);
  }

  else
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }

  return a1;
}

uint64_t destroy for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( a1,  AssociatedTypeWitness);
}

uint64_t initializeWithCopy for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  *(_WORD *)(*(void *)(v5 + 64) + a1) = *(_WORD *)(*(void *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithCopy for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  *(_WORD *)(*(void *)(v5 + 64) + a1) = *(_WORD *)(*(void *)(v5 + 64) + a2);
  return a1;
}

uint64_t initializeWithTake for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(_WORD *)(*(void *)(v5 + 64) + a1) = *(_WORD *)(*(void *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithTake for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  *(_WORD *)(*(void *)(v5 + 64) + a1) = *(_WORD *)(*(void *)(v5 + 64) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64) + 2LL;
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if ((_DWORD)v7)
  {
    __asm { BR              X11 }
  }

  return (v6 + v11 + 1);
}

void storeEnumTagSinglePayload for AsyncUnicodeScalarSequence.AsyncIterator( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64) + 2LL;
  if (a3 <= v7)
  {
    unsigned int v9 = 0u;
  }

  else if (v8 <= 3)
  {
    unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      unsigned int v9 = 4u;
    }

    else if (v11 >= 0x100)
    {
      unsigned int v9 = 2;
    }

    else
    {
      unsigned int v9 = v11 > 1;
    }
  }

  else
  {
    unsigned int v9 = 1u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) != -2)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }

        else
        {
          *a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

void specialized static AttributeScope.scopeDescription.getter()
{
  if (one-time initialization token for _loadedScopeCache != -1) {
LABEL_225:
  }
    swift_once();
  uint64_t v0 = &unk_18C5D1000;
  uint64_t v1 = _loadedScopeCache + 16;
  uint64_t v2 = (os_unfair_lock_s *)(_loadedScopeCache + 40);
  swift_retain();
  os_unfair_lock_lock(v2);
  uint64_t v3 = v1;
  uint64_t v4 = 0LL;
  uint64_t v5 = specialized closure #1 in static AttributeScope.scopeDescription.getter(v3);
  os_unfair_lock_unlock(v2);
  swift_release();
  if (v5) {
    return;
  }
  unint64_t v6 = 0LL;
  uint64_t v7 = MEMORY[0x18961AFF0];
  uint64_t v200 = MEMORY[0x18961AFF0];
LABEL_4:
  while (2)
  {
    unint64_t v8 = v6;
    swift_getKeyPath();
    uint64_t v9 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    swift_release();
    if (v8 == *(_DWORD *)(*(void *)((char *)&full type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes
                                     + v9
                                     + 16)
                         + 20LL))
    {
      uint64_t v183 = (os_unfair_lock_s *)*((void *)v0 + 199);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      os_unfair_lock_lock(v183 + 10);
      specialized closure #2 in static AttributeScope.scopeDescription.getter((uint64_t)&v183[4], v7, v200);
      os_unfair_lock_unlock(v183 + 10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }

    swift_getKeyPath();
    uint64_t v10 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    swift_release();
    if (v8 >= *(unsigned int *)(*(void *)((char *)&full type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes
                                           + v10
                                           + 16)
                               + 20LL))
    {
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
      goto LABEL_225;
    }

    if (static Metadata.Kind.tuple.getter() == 512)
    {
      MEMORY[0x186E1AB6C](&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes);
      TupleMetadata.Elements.subscript.getter();
      uint64_t v11 = TupleMetadata.Elements.Element.metadata.getter();
    }

    else
    {
      TypeMetadata.descriptor.getter();
      swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_getAtKeyPath();
      swift_release();
      FieldDescriptor.subscript.getter();
      swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_getAtKeyPath();
      swift_release();
      uint64_t v11 = MangledTypeReference.standardSubstitution.getter();
      if (!v11) {
        uint64_t v11 = TypeMetadata._resolve(_:)();
      }
    }

    uint64_t v12 = swift_conformsToProtocol2();
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0LL;
    }
    if (v12) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 0LL;
    }
    if (v14)
    {
      uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v14, v13);
      uint64_t v65 = v64;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v198 = v63;
      uint64_t v67 = v63;
      int64_t v39 = v7;
      unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(v67, v65);
      uint64_t v70 = *(void *)(v7 + 16);
      BOOL v71 = (v68 & 1) == 0;
      uint64_t v72 = v70 + v71;
      if (__OFADD__(v70, v71))
      {
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
        goto LABEL_233;
      }

      if (*(void *)(v7 + 24) < v72)
      {
        char v194 = v68;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v72,  isUniquelyReferenced_nonNull_native);
        uint64_t v73 = v198;
        int64_t v39 = v7;
        unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(v198, v65);
        if ((v194 & 1) != (v75 & 1)) {
          goto LABEL_236;
        }
        unint64_t v69 = v74;
        if ((v194 & 1) == 0) {
          goto LABEL_76;
        }
        goto LABEL_73;
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v73 = v198;
        if ((v68 & 1) == 0) {
          goto LABEL_76;
        }
LABEL_73:
        char v76 = (uint64_t *)(*(void *)(v7 + 56) + 16 * v69);
        *char v76 = v14;
        v76[1] = v13;
        goto LABEL_78;
      }

      char v196 = v68;
      uint64_t v189 = v4;
      unint64_t v193 = v8;
      int64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
      uint64_t v146 = static _DictionaryStorage.copy(original:)();
      uint64_t v147 = v146;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_178;
      }
      uint64_t v148 = (void *)(v146 + 64);
      uint64_t v149 = v7 + 64;
      unint64_t v150 = (unint64_t)((1LL << *(_BYTE *)(v147 + 32)) + 63) >> 6;
      int64_t v151 = 0LL;
      *(void *)(v147 + 16) = *(void *)(v7 + 16);
      uint64_t v152 = 1LL << *(_BYTE *)(v7 + 32);
      if (v152 < 64) {
        uint64_t v153 = ~(-1LL << v152);
      }
      else {
        uint64_t v153 = -1LL;
      }
      unint64_t v154 = v153 & *(void *)(v7 + 64);
      int64_t v39 = (unint64_t)(v152 + 63) >> 6;
      while (1)
      {
        if (v154)
        {
          unint64_t v155 = __clz(__rbit64(v154));
          v154 &= v154 - 1;
          unint64_t v156 = v155 | (v151 << 6);
        }

        else
        {
          BOOL v44 = __OFADD__(v151++, 1LL);
          if (v44) {
            goto LABEL_232;
          }
          if (v151 >= v39) {
            goto LABEL_178;
          }
          unint64_t v163 = *(void *)(v149 + 8 * v151);
          if (!v163)
          {
            int64_t v164 = v151 + 1;
            if (v151 + 1 >= v39) {
              goto LABEL_178;
            }
            unint64_t v163 = *(void *)(v149 + 8 * v164);
            if (!v163)
            {
              int64_t v164 = v151 + 2;
              if (v151 + 2 >= v39) {
                goto LABEL_178;
              }
              unint64_t v163 = *(void *)(v149 + 8 * v164);
              if (!v163)
              {
                int64_t v164 = v151 + 3;
                if (v151 + 3 >= v39) {
                  goto LABEL_178;
                }
                unint64_t v163 = *(void *)(v149 + 8 * v164);
                if (!v163)
                {
                  int64_t v164 = v151 + 4;
                  if (v151 + 4 >= v39) {
                    goto LABEL_178;
                  }
                  unint64_t v163 = *(void *)(v149 + 8 * v164);
                  if (!v163)
                  {
                    int64_t v164 = v151 + 5;
                    if (v151 + 5 >= v39) {
                      goto LABEL_178;
                    }
                    unint64_t v163 = *(void *)(v149 + 8 * v164);
                    if (!v163)
                    {
                      int64_t v164 = v151 + 6;
                      if (v151 + 6 >= v39) {
                        goto LABEL_178;
                      }
                      unint64_t v163 = *(void *)(v149 + 8 * v164);
                      if (!v163)
                      {
                        int64_t v164 = v151 + 7;
                        if (v151 + 7 >= v39) {
                          goto LABEL_178;
                        }
                        unint64_t v163 = *(void *)(v149 + 8 * v164);
                        if (!v163)
                        {
                          int64_t v164 = v151 + 8;
                          if (v151 + 8 >= v39) {
                            goto LABEL_178;
                          }
                          unint64_t v163 = *(void *)(v149 + 8 * v164);
                          if (!v163)
                          {
                            while (1)
                            {
                              int64_t v151 = v164 + 1;
                              if (__OFADD__(v164, 1LL)) {
                                goto LABEL_237;
                              }
                              if (v151 >= v39) {
                                break;
                              }
                              unint64_t v163 = *(void *)(v149 + 8 * v151);
                              ++v164;
                              if (v163) {
                                goto LABEL_173;
                              }
                            }

{
  void *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::UInt v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  char v38;
  int64_t v39;
  char v40;
  uint64_t *v41;
  void *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  void *v60;
  unint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  char v99;
  unint64_t v100;
  uint64_t v101;
  BOOL v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  void *v126;
  unint64_t v127;
  int64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  char v133;
  unint64_t v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  unint64_t v150;
  int64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  void *v162;
  unint64_t v163;
  int64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  unint64_t v168;
  int64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  void *v180;
  unint64_t v181;
  int64_t v182;
  os_unfair_lock_s *v183;
  uint64_t v184;
  void *v185;
  int64_t v186;
  int64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  char v195;
  char v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  int64_t v203;
  if (one-time initialization token for _loadedScopeCache != -1) {
LABEL_225:
  }
    swift_once();
  uint64_t v0 = &unk_18C5D1000;
  uint64_t v1 = _loadedScopeCache + 16;
  uint64_t v2 = (os_unfair_lock_s *)(_loadedScopeCache + 40);
  swift_retain();
  os_unfair_lock_lock(v2);
  uint64_t v3 = v1;
  uint64_t v4 = 0LL;
  uint64_t v5 = specialized closure #1 in static AttributeScope.scopeDescription.getter(v3);
  os_unfair_lock_unlock(v2);
  swift_release();
  if (v5) {
    return;
  }
  unint64_t v6 = 0LL;
  uint64_t v7 = MEMORY[0x18961AFF0];
  uint64_t v200 = MEMORY[0x18961AFF0];
LABEL_4:
  while (2)
  {
    unint64_t v8 = v6;
    swift_getKeyPath();
    uint64_t v9 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    swift_release();
    if (v8 == *(_DWORD *)(*(void *)((char *)&full type metadata for AttributeScopes.FoundationAttributes + v9 + 16)
                         + 20LL))
    {
      uint64_t v183 = (os_unfair_lock_s *)*((void *)v0 + 199);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      os_unfair_lock_lock(v183 + 10);
      specialized closure #2 in static AttributeScope.scopeDescription.getter((uint64_t)&v183[4], v7, v200);
      os_unfair_lock_unlock(v183 + 10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }

    swift_getKeyPath();
    uint64_t v10 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    swift_release();
    if (v8 >= *(unsigned int *)(*(void *)((char *)&full type metadata for AttributeScopes.FoundationAttributes
                                           + v10
                                           + 16)
                               + 20LL))
    {
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
      goto LABEL_225;
    }

    if (static Metadata.Kind.tuple.getter() == 512)
    {
      MEMORY[0x186E1AB6C](&type metadata for AttributeScopes.FoundationAttributes);
      TupleMetadata.Elements.subscript.getter();
      uint64_t v11 = TupleMetadata.Elements.Element.metadata.getter();
    }

    else
    {
      TypeMetadata.descriptor.getter();
      swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_getAtKeyPath();
      swift_release();
      FieldDescriptor.subscript.getter();
      swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_getAtKeyPath();
      swift_release();
      uint64_t v11 = MangledTypeReference.standardSubstitution.getter();
      if (!v11) {
        uint64_t v11 = TypeMetadata._resolve(_:)();
      }
    }

    uint64_t v12 = swift_conformsToProtocol2();
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0LL;
    }
    if (v12) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 0LL;
    }
    if (v14)
    {
      uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v14, v13);
      uint64_t v65 = v64;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v198 = v63;
      uint64_t v67 = v63;
      int64_t v39 = v7;
      unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(v67, v65);
      uint64_t v70 = *(void *)(v7 + 16);
      BOOL v71 = (v68 & 1) == 0;
      uint64_t v72 = v70 + v71;
      if (__OFADD__(v70, v71))
      {
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
        goto LABEL_233;
      }

      if (*(void *)(v7 + 24) < v72)
      {
        char v194 = v68;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v72,  isUniquelyReferenced_nonNull_native);
        uint64_t v73 = v198;
        int64_t v39 = v7;
        unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(v198, v65);
        if ((v194 & 1) != (v75 & 1)) {
          goto LABEL_236;
        }
        unint64_t v69 = v74;
        if ((v194 & 1) == 0) {
          goto LABEL_76;
        }
        goto LABEL_73;
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v73 = v198;
        if ((v68 & 1) == 0) {
          goto LABEL_76;
        }
LABEL_73:
        char v76 = (uint64_t *)(*(void *)(v7 + 56) + 16 * v69);
        *char v76 = v14;
        v76[1] = v13;
        goto LABEL_78;
      }

      char v196 = v68;
      uint64_t v189 = v4;
      unint64_t v193 = v8;
      int64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
      uint64_t v146 = static _DictionaryStorage.copy(original:)();
      uint64_t v147 = v146;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_178;
      }
      uint64_t v148 = (void *)(v146 + 64);
      uint64_t v149 = v7 + 64;
      unint64_t v150 = (unint64_t)((1LL << *(_BYTE *)(v147 + 32)) + 63) >> 6;
      int64_t v151 = 0LL;
      *(void *)(v147 + 16) = *(void *)(v7 + 16);
      uint64_t v152 = 1LL << *(_BYTE *)(v7 + 32);
      if (v152 < 64) {
        uint64_t v153 = ~(-1LL << v152);
      }
      else {
        uint64_t v153 = -1LL;
      }
      unint64_t v154 = v153 & *(void *)(v7 + 64);
      int64_t v39 = (unint64_t)(v152 + 63) >> 6;
      while (1)
      {
        if (v154)
        {
          unint64_t v155 = __clz(__rbit64(v154));
          v154 &= v154 - 1;
          unint64_t v156 = v155 | (v151 << 6);
        }

        else
        {
          BOOL v44 = __OFADD__(v151++, 1LL);
          if (v44) {
            goto LABEL_232;
          }
          if (v151 >= v39) {
            goto LABEL_178;
          }
          unint64_t v163 = *(void *)(v149 + 8 * v151);
          if (!v163)
          {
            int64_t v164 = v151 + 1;
            if (v151 + 1 >= v39) {
              goto LABEL_178;
            }
            unint64_t v163 = *(void *)(v149 + 8 * v164);
            if (!v163)
            {
              int64_t v164 = v151 + 2;
              if (v151 + 2 >= v39) {
                goto LABEL_178;
              }
              unint64_t v163 = *(void *)(v149 + 8 * v164);
              if (!v163)
              {
                int64_t v164 = v151 + 3;
                if (v151 + 3 >= v39) {
                  goto LABEL_178;
                }
                unint64_t v163 = *(void *)(v149 + 8 * v164);
                if (!v163)
                {
                  int64_t v164 = v151 + 4;
                  if (v151 + 4 >= v39) {
                    goto LABEL_178;
                  }
                  unint64_t v163 = *(void *)(v149 + 8 * v164);
                  if (!v163)
                  {
                    int64_t v164 = v151 + 5;
                    if (v151 + 5 >= v39) {
                      goto LABEL_178;
                    }
                    unint64_t v163 = *(void *)(v149 + 8 * v164);
                    if (!v163)
                    {
                      int64_t v164 = v151 + 6;
                      if (v151 + 6 >= v39) {
                        goto LABEL_178;
                      }
                      unint64_t v163 = *(void *)(v149 + 8 * v164);
                      if (!v163)
                      {
                        int64_t v164 = v151 + 7;
                        if (v151 + 7 >= v39) {
                          goto LABEL_178;
                        }
                        unint64_t v163 = *(void *)(v149 + 8 * v164);
                        if (!v163)
                        {
                          int64_t v164 = v151 + 8;
                          if (v151 + 8 >= v39) {
                            goto LABEL_178;
                          }
                          unint64_t v163 = *(void *)(v149 + 8 * v164);
                          if (!v163)
                          {
                            while (1)
                            {
                              int64_t v151 = v164 + 1;
                              if (__OFADD__(v164, 1LL)) {
                                goto LABEL_237;
                              }
                              if (v151 >= v39) {
                                break;
                              }
                              unint64_t v163 = *(void *)(v149 + 8 * v151);
                              ++v164;
                              if (v163) {
                                goto LABEL_173;
                              }
                            }

{
  void *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  unint64_t *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  Swift::UInt v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  char v45;
  char v46;
  uint64_t *v47;
  void *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  void *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  int v87;
  uint64_t *v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  BOOL v109;
  char v110;
  char v111;
  uint64_t *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  void *v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  int64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  void *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  char v158;
  unint64_t v159;
  uint64_t v160;
  BOOL v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  unint64_t v172;
  int64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  int64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  void *v185;
  unint64_t v186;
  int64_t v187;
  os_unfair_lock_s *v188;
  uint64_t v189;
  uint64_t v190;
  int64_t v191;
  unint64_t *v192;
  char *__src;
  char *__srca;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  char v203;
  uint64_t v204;
  int64_t v205;
  void *v206;
  uint64_t v207;
  if (one-time initialization token for _loadedScopeCache != -1) {
LABEL_256:
  }
    swift_once();
  uint64_t v0 = &unk_18C5D1000;
  uint64_t v1 = _loadedScopeCache + 16;
  uint64_t v2 = (os_unfair_lock_s *)(_loadedScopeCache + 40);
  swift_retain();
  os_unfair_lock_lock(v2);
  uint64_t v3 = specialized closure #1 in static AttributeScope.scopeDescription.getter(v1);
  os_unfair_lock_unlock(v2);
  swift_release();
  if (v3) {
    return;
  }
  uint64_t v4 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _FoundationPlusScope<AttributeScopes.FoundationAttributes>);
  uint64_t v5 = 0LL;
  unint64_t v6 = MEMORY[0x18961AFF0];
  v204 = MEMORY[0x18961AFF0];
LABEL_4:
  while (2)
  {
    uint64_t v7 = *v4;
    if (*v4 > 0x7FF) {
      goto LABEL_7;
    }
    if (v7 == 512)
    {
      swift_getKeyPath();
      unint64_t v69 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      uint64_t v9 = (unsigned int *)(*(unint64_t *)((char *)v4 + v69) + 20);
      goto LABEL_8;
    }

    if (!v7)
    {
LABEL_7:
      swift_getKeyPath();
      unint64_t v8 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      uint64_t v9 = (unsigned int *)(*(unint64_t *)((char *)v4 + v8) + 36);
LABEL_8:
      uint64_t v10 = *v9;
      goto LABEL_9;
    }

    uint64_t v70 = static Metadata.Kind.tuple.getter();
    if (v70 > 0x7FF || v70 != v7)
    {
      if (!v5)
      {
LABEL_249:
        uint64_t v188 = (os_unfair_lock_s *)*((void *)v0 + 199);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        os_unfair_lock_lock(v188 + 10);
        specialized closure #2 in static AttributeScope.scopeDescription.getter((uint64_t)&v188[4], v6, v204);
        os_unfair_lock_unlock(v188 + 10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }

      goto LABEL_10;
    }

    MEMORY[0x186E1AB6C](v4);
    uint64_t v10 = TupleMetadata.Elements.endIndex.getter();
    if (TupleMetadata.Elements.endIndex.getter() < 0)
    {
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      __break(1u);
LABEL_261:
      __break(1u);
LABEL_262:
      __break(1u);
LABEL_263:
      __break(1u);
LABEL_264:
      __break(1u);
LABEL_265:
      __break(1u);
LABEL_266:
      __break(1u);
LABEL_267:
      __break(1u);
      goto LABEL_268;
    }

    BOOL v71 = TupleMetadata.Elements.endIndex.getter();
    if (v10 < 0 || v71 < v10) {
      goto LABEL_258;
    }
LABEL_9:
LABEL_10:
    uint64_t v11 = *v4;
    if (*v4 > 0x7FF) {
      goto LABEL_13;
    }
    if (v11 == 512)
    {
      swift_getKeyPath();
      uint64_t v72 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      uint64_t v13 = (unsigned int *)(*(unint64_t *)((char *)v4 + v72) + 20);
      goto LABEL_14;
    }

    if (!v11)
    {
LABEL_13:
      swift_getKeyPath();
      uint64_t v12 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      uint64_t v13 = (unsigned int *)(*(unint64_t *)((char *)v4 + v12) + 36);
LABEL_14:
      uint64_t v10 = *v13;
      goto LABEL_15;
    }

    uint64_t v73 = static Metadata.Kind.tuple.getter();
    uint64_t v10 = 0LL;
    if (v73 <= 0x7FF && v73 == v11)
    {
      MEMORY[0x186E1AB6C](v4);
      uint64_t v10 = TupleMetadata.Elements.endIndex.getter();
      if (TupleMetadata.Elements.endIndex.getter() < 0) {
        goto LABEL_259;
      }
      unint64_t v74 = TupleMetadata.Elements.endIndex.getter();
      if (v10 < 0 || v74 < v10) {
        goto LABEL_260;
      }
    }

LABEL_233:
                            __break(1u);
                            goto LABEL_234;
                          }
                        }
                      }
                    }
                  }

                  int64_t v39 = v62;
                }

                            __break(1u);
                            goto LABEL_234;
                          }
                        }
                      }
                    }
                  }

                  int64_t v39 = v62;
                }

              swift_once();
              if (!*(void *)(v29 + 16)) {
                goto LABEL_234;
              }
              goto LABEL_178;
            }

              swift_once();
              if (!*(void *)(v29 + 16)) {
                goto LABEL_234;
              }
              goto LABEL_178;
            }

              swift_once();
              if (!*(void *)(v29 + 16)) {
                goto LABEL_234;
              }
              goto LABEL_178;
            }

uint64_t specialized closure #1 in static AttributeScope.scopeDescription.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!*(void *)(v1 + 16)) {
    return 0LL;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes);
  if ((v3 & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(v1 + 56) + 16 * v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v4;
}

{
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v1 = *(void *)(a1 + 16);
  if (!*(void *)(v1 + 16)) {
    return 0LL;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes);
  if ((v3 & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(v1 + 56) + 16 * v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v4;
}

{
  uint64_t v1;
  Swift::UInt v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v1 = *(void *)(a1 + 16);
  if (!*(void *)(v1 + 16)) {
    return 0LL;
  }
  unint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _FoundationPlusScope<AttributeScopes.FoundationAttributes>);
  char v3 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(*(void *)(v1 + 56) + 16 * v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t specialized closure #2 in static AttributeScope.scopeDescription.getter( uint64_t a1, uint64_t a2, uint64_t a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v37 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0x8000000000000000LL;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes);
  uint64_t v10 = *(void *)(v37 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    char v3 = v8;
    if (*(void *)(v37 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v12,  isUniquelyReferenced_nonNull_native);
      uint64_t v13 = v37;
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes);
      if ((v3 & 1) != (v15 & 1)) {
        goto LABEL_47;
      }
      unint64_t v9 = v14;
      if ((v3 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      unint64_t v16 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *unint64_t v16 = a2;
      v16[1] = a3;
LABEL_44:
      *(void *)(a1 + 16) = v13;
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v13 = v37;
      if ((v8 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)( v9,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes,  a2,  a3,  (void *)v13);
      goto LABEL_44;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  uint64_t v17 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v17;
  if (!*(void *)(v37 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }

  char v18 = (char *)(v17 + 64);
  uint64_t v19 = (char *)(v37 + 64);
  unint64_t v20 = (unint64_t)((1LL << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  if (v13 != v37 || v18 >= &v19[8 * v20])
  {
    memmove(v18, v19, 8 * v20);
    uint64_t v19 = (char *)(v37 + 64);
  }

  int64_t v21 = 0LL;
  *(void *)(v13 + 16) = *(void *)(v37 + 16);
  uint64_t v22 = 1LL << *(_BYTE *)(v37 + 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & *(void *)(v37 + 64);
  unint64_t v35 = v19;
  int64_t v36 = (unint64_t)(v22 + 63) >> 6;
  while (1)
  {
    if (v24)
    {
      unint64_t v25 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v26 = v25 | (v21 << 6);
      goto LABEL_18;
    }

    int64_t v31 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
      __break(1u);
      goto LABEL_46;
    }

    if (v31 >= v36) {
      goto LABEL_42;
    }
    unint64_t v32 = *(void *)&v35[8 * v31];
    ++v21;
    if (!v32)
    {
      int64_t v21 = v31 + 1;
      if (v31 + 1 >= v36) {
        goto LABEL_42;
      }
      unint64_t v32 = *(void *)&v35[8 * v21];
      if (!v32)
      {
        int64_t v21 = v31 + 2;
        if (v31 + 2 >= v36) {
          goto LABEL_42;
        }
        unint64_t v32 = *(void *)&v35[8 * v21];
        if (!v32)
        {
          int64_t v21 = v31 + 3;
          if (v31 + 3 >= v36) {
            goto LABEL_42;
          }
          unint64_t v32 = *(void *)&v35[8 * v21];
          if (!v32)
          {
            int64_t v21 = v31 + 4;
            if (v31 + 4 >= v36) {
              goto LABEL_42;
            }
            unint64_t v32 = *(void *)&v35[8 * v21];
            if (!v32)
            {
              int64_t v21 = v31 + 5;
              if (v31 + 5 >= v36) {
                goto LABEL_42;
              }
              unint64_t v32 = *(void *)&v35[8 * v21];
              if (!v32)
              {
                int64_t v21 = v31 + 6;
                if (v31 + 6 >= v36) {
                  goto LABEL_42;
                }
                unint64_t v32 = *(void *)&v35[8 * v21];
                if (!v32) {
                  break;
                }
              }
            }
          }
        }
      }
    }

{
  char v3;
  char isUniquelyReferenced_nonNull_native;
  char v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t result;
  char *v35;
  int64_t v36;
  uint64_t v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v37 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0x8000000000000000LL;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes);
  uint64_t v10 = *(void *)(v37 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    char v3 = v8;
    if (*(void *)(v37 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v12,  isUniquelyReferenced_nonNull_native);
      uint64_t v13 = v37;
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes);
      if ((v3 & 1) != (v15 & 1)) {
        goto LABEL_47;
      }
      unint64_t v9 = v14;
      if ((v3 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      unint64_t v16 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *unint64_t v16 = a2;
      v16[1] = a3;
LABEL_44:
      *(void *)(a1 + 16) = v13;
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v13 = v37;
      if ((v8 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)( v9,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes,  a2,  a3,  (void *)v13);
      goto LABEL_44;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  uint64_t v17 = static _DictionaryStorage.copy(original:)();
  uint64_t v13 = v17;
  if (!*(void *)(v37 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }

  char v18 = (char *)(v17 + 64);
  uint64_t v19 = (char *)(v37 + 64);
  unint64_t v20 = (unint64_t)((1LL << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  if (v13 != v37 || v18 >= &v19[8 * v20])
  {
    memmove(v18, v19, 8 * v20);
    uint64_t v19 = (char *)(v37 + 64);
  }

  int64_t v21 = 0LL;
  *(void *)(v13 + 16) = *(void *)(v37 + 16);
  uint64_t v22 = 1LL << *(_BYTE *)(v37 + 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & *(void *)(v37 + 64);
  unint64_t v35 = v19;
  int64_t v36 = (unint64_t)(v22 + 63) >> 6;
  while (1)
  {
    if (v24)
    {
      unint64_t v25 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v26 = v25 | (v21 << 6);
      goto LABEL_18;
    }

    int64_t v31 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
      __break(1u);
      goto LABEL_46;
    }

    if (v31 >= v36) {
      goto LABEL_42;
    }
    unint64_t v32 = *(void *)&v35[8 * v31];
    ++v21;
    if (!v32)
    {
      int64_t v21 = v31 + 1;
      if (v31 + 1 >= v36) {
        goto LABEL_42;
      }
      unint64_t v32 = *(void *)&v35[8 * v21];
      if (!v32)
      {
        int64_t v21 = v31 + 2;
        if (v31 + 2 >= v36) {
          goto LABEL_42;
        }
        unint64_t v32 = *(void *)&v35[8 * v21];
        if (!v32)
        {
          int64_t v21 = v31 + 3;
          if (v31 + 3 >= v36) {
            goto LABEL_42;
          }
          unint64_t v32 = *(void *)&v35[8 * v21];
          if (!v32)
          {
            int64_t v21 = v31 + 4;
            if (v31 + 4 >= v36) {
              goto LABEL_42;
            }
            unint64_t v32 = *(void *)&v35[8 * v21];
            if (!v32)
            {
              int64_t v21 = v31 + 5;
              if (v31 + 5 >= v36) {
                goto LABEL_42;
              }
              unint64_t v32 = *(void *)&v35[8 * v21];
              if (!v32)
              {
                int64_t v21 = v31 + 6;
                if (v31 + 6 >= v36) {
                  goto LABEL_42;
                }
                unint64_t v32 = *(void *)&v35[8 * v21];
                if (!v32) {
                  break;
                }
              }
            }
          }
        }
      }
    }

{
  char v3;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t result;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _FoundationPlusScope<AttributeScopes.FoundationAttributes>);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v38 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0x8000000000000000LL;
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  BOOL v11 = *(void *)(v38 + 16);
  uint64_t v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v3 = v9;
    if (*(void *)(v38 + 24) < v13)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v13,  isUniquelyReferenced_nonNull_native);
      unint64_t v14 = v38;
      char v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if ((v3 & 1) != (v16 & 1)) {
        goto LABEL_47;
      }
      uint64_t v10 = v15;
      if ((v3 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      uint64_t v17 = (uint64_t *)(*(void *)(v14 + 56) + 16 * v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v17 = a2;
      v17[1] = a3;
LABEL_44:
      *(void *)(a1 + 16) = v14;
      return swift_bridgeObjectRelease();
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      unint64_t v14 = v38;
      if ((v9 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v10, v7, a2, a3, (void *)v14);
      goto LABEL_44;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  char v18 = static _DictionaryStorage.copy(original:)();
  unint64_t v14 = v18;
  if (!*(void *)(v38 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }

  uint64_t v19 = (char *)(v18 + 64);
  unint64_t v20 = (char *)(v38 + 64);
  int64_t v21 = (unint64_t)((1LL << *(_BYTE *)(v14 + 32)) + 63) >> 6;
  int64_t v36 = v38 + 64;
  if (v14 != v38 || v19 >= &v20[8 * v21]) {
    memmove(v19, v20, 8 * v21);
  }
  uint64_t v22 = 0LL;
  *(void *)(v14 + 16) = *(void *)(v38 + 16);
  uint64_t v23 = 1LL << *(_BYTE *)(v38 + 32);
  unint64_t v24 = -1LL;
  if (v23 < 64) {
    unint64_t v24 = ~(-1LL << v23);
  }
  unint64_t v25 = v24 & *(void *)(v38 + 64);
  uint64_t v37 = (unint64_t)(v23 + 63) >> 6;
  while (1)
  {
    if (v25)
    {
      unint64_t v26 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      uint64_t v27 = v26 | (v22 << 6);
      goto LABEL_18;
    }

    unint64_t v32 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
      goto LABEL_46;
    }

    if (v32 >= v37) {
      goto LABEL_42;
    }
    int64_t v33 = *(void *)(v36 + 8 * v32);
    ++v22;
    if (!v33)
    {
      uint64_t v22 = v32 + 1;
      if (v32 + 1 >= v37) {
        goto LABEL_42;
      }
      int64_t v33 = *(void *)(v36 + 8 * v22);
      if (!v33)
      {
        uint64_t v22 = v32 + 2;
        if (v32 + 2 >= v37) {
          goto LABEL_42;
        }
        int64_t v33 = *(void *)(v36 + 8 * v22);
        if (!v33)
        {
          uint64_t v22 = v32 + 3;
          if (v32 + 3 >= v37) {
            goto LABEL_42;
          }
          int64_t v33 = *(void *)(v36 + 8 * v22);
          if (!v33)
          {
            uint64_t v22 = v32 + 4;
            if (v32 + 4 >= v37) {
              goto LABEL_42;
            }
            int64_t v33 = *(void *)(v36 + 8 * v22);
            if (!v33)
            {
              uint64_t v22 = v32 + 5;
              if (v32 + 5 >= v37) {
                goto LABEL_42;
              }
              int64_t v33 = *(void *)(v36 + 8 * v22);
              if (!v33)
              {
                uint64_t v22 = v32 + 6;
                if (v32 + 6 >= v37) {
                  goto LABEL_42;
                }
                int64_t v33 = *(void *)(v36 + 8 * v22);
                if (!v33) {
                  break;
                }
              }
            }
          }
        }
      }
    }

uint64_t static AttributeScopes.FoundationAttributes.LinkAttribute.name.getter()
{
  return 0x6B6E694C534ELL;
}

uint64_t static AttributeScopes.FoundationAttributes.LinkAttribute.name.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*static AttributeScopes.FoundationAttributes.LinkAttribute.name.modify(void *a1))()
{
  *a1 = 0x6B6E694C534ELL;
  a1[1] = 0xE600000000000000LL;
  return destroy for PropertyListEncoder._Options;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LinkAttribute()
{
  return 0x6B6E694C534ELL;
}

id one-time initialization function for name()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflectionReferentConcept");
  static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name = (uint64_t)result;
  qword_18C5D2B98 = v1;
  return result;
}

{
  id result;
  uint64_t v1;
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflectionAgreementConcept");
  static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name = (uint64_t)result;
  qword_18C5D2BA8 = v1;
  return result;
}

{
  id result;
  uint64_t v1;
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflectionAgreementArgument");
  static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name = (uint64_t)result;
  qword_18C5D2BB8 = v1;
  return result;
}

{
  id result;
  uint64_t v1;
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSMorphology");
  static AttributeScopes.FoundationAttributes.MorphologyAttribute.name = (uint64_t)result;
  *(void *)algn_18C5D2BC8 = v1;
  return result;
}

{
  id result;
  uint64_t v1;
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflect");
  static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name = (uint64_t)result;
  qword_18C5D2BD8 = v1;
  return result;
}

{
  id result;
  uint64_t v1;
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSAssumedFallbackInflection");
  static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name = (uint64_t)result;
  *(void *)algn_18C5D2BE8 = v1;
  return result;
}

{
  id result;
  uint64_t v1;
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedNumberFormat");
  static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name = (uint64_t)result;
  qword_18C5D2BF8 = v1;
  return result;
}

{
  id result;
  uint64_t v1;
  if (one-time initialization token for inflectionAlternative != -1) {
    swift_once();
  }
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSAttributedStringKey.inflectionAlternative);
  static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name = (uint64_t)result;
  qword_18C5D2C08 = v1;
  return result;
}

{
  id result;
  uint64_t v1;
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInlinePresentationIntent");
  static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name = (uint64_t)result;
  qword_18C5D2C18 = v1;
  return result;
}

{
  id result;
  uint64_t v1;
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPresentationIntent");
  static AttributeScopes.FoundationAttributes.PresentationIntentAttribute.name = (uint64_t)result;
  *(void *)algn_18C5D2C28 = v1;
  return result;
}

{
  id result;
  uint64_t v1;
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSMarkdownSourcePosition");
  static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name = (uint64_t)result;
  qword_18C5D2C38 = v1;
  return result;
}

uint64_t static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter( &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.markdownName.getter()
{
  return 0x746E657265666572LL;
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute()
{
  return 0x746E657265666572LL;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute( uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute( a1,  a2,  &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter( &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name);
}

unint64_t static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.markdownName.getter()
{
  return 0xD000000000000010LL;
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.AgreementConceptAttribute()
{
  return 0xD000000000000010LL;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.AgreementConceptAttribute( uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute( a1,  a2,  &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter( &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name);
}

unint64_t static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.markdownName.getter()
{
  return 0xD000000000000011LL;
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.AgreementArgumentAttribute()
{
  return 0xD000000000000011LL;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.AgreementArgumentAttribute( uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute( a1,  a2,  &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.MorphologyAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter( &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.MorphologyAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.MorphologyAttribute.markdownName.getter()
{
  return 0x6F6C6F6870726F6DLL;
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute()
{
  return 0x6F6C6F6870726F6DLL;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute( uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute( a1,  a2,  &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.MorphologyAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter( &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.markdownName.getter()
{
  return 0x7463656C666E69LL;
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute()
{
  return 0x7463656C666E69LL;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute( uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute( a1,  a2,  &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter( &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name);
}

unint64_t static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.markdownName.getter()
{
  return 0xD000000000000019LL;
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute()
{
  return 0xD000000000000019LL;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute( uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute( a1,  a2,  &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name);
}

uint64_t AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.init(from:)(void *a1)
{
  if (!v1)
  {
    __swift_project_boxed_opaque_existential_1(v5, v5[3]);
    char v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    if ((v3 & 1) == 0)
    {
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError.dataCorruptedError(in:debugDescription:)();
      swift_willThrow();
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.encode(to:)()
{
  return Bool.encode(to:)();
}

uint64_t static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.== infix(_:_:)()
{
  return 1LL;
}

void AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.hash(into:)()
{
}

Swift::Int AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value( void *a1)
{
  return AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value()
{
  return Bool.encode(to:)();
}

uint64_t static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter( &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.markdownName.getter()
{
  return 0x754E74616D726F66LL;
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute()
{
  return 0x754E74616D726F66LL;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute( uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute( a1,  a2,  &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute.name.getter()
{
  return 0x6175676E614C534ELL;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return 0x6175676E614C534ELL;
}

unint64_t static AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.name.getter()
{
  return 0xD000000000000018LL;
}

uint64_t AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.init(rawValue:)@<X0>( Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.init(rawValue:),  v3);
  uint64_t result = swift_bridgeObjectRelease();
  char v7 = 7;
  if (v5 < 7) {
    char v7 = v5;
  }
  *a2 = v7;
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.rawValue.getter()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_183468DA0 + 4 * byte_18382A910[*v0]))( 0x6D614E6E65766967LL,  0xE900000000000065LL);
}

uint64_t sub_183468DA0()
{
  return 0x614E796C696D6166LL;
}

uint64_t sub_183468DCC()
{
  return 0x66657250656D616ELL;
}

uint64_t sub_183468DFC()
{
  return 0x656D616E6B63696ELL;
}

uint64_t sub_183468E14()
{
  return 0x6574696D696C6564LL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
}

void protocol witness for Hashable.hash(into:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  __asm { BR              X10 }

uint64_t sub_183468E84()
{
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component( uint64_t a1)
{
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component@<X0>( Swift::String *a1@<X0>, char *a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  return ((uint64_t (*)(void))((char *)sub_183468F6C + 4 * byte_18382A91E[*v0]))();
}

void sub_183468F6C(void *a1@<X8>)
{
  *a1 = 0x614E796C696D6166LL;
  a1[1] = 0xEA0000000000656DLL;
}

void sub_183468F8C(void *a1@<X8>)
{
  *a1 = 0x614E656C6464696DLL;
  a1[1] = 0xEA0000000000656DLL;
}

void sub_183468FD8(void *a1@<X8>)
{
  *a1 = 0x656D616E6B63696ELL;
  a1[1] = 0xE800000000000000LL;
}

void sub_183468FF4(void *a1@<X8>)
{
  *a1 = 0x6574696D696C6564LL;
  a1[1] = v1 + 13;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute()
{
  return 0xD000000000000018LL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t static AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.name.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute()
{
  return 0xD00000000000001BLL;
}

unint64_t AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol.init(rawValue:)@<X0>( unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 5;
  if (result < 5) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol.rawValue.getter()
{
  return *v0;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol@<X0>( unint64_t *a1@<X0>, char *a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t static AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.name.getter()
{
  return 0xD00000000000001DLL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute()
{
  return 0xD00000000000001DLL;
}

uint64_t AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.rawValue.getter()
{
  return qword_18382D368[*v0];
}

unint64_t AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v31, v31[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v7 = v6;
    uint64_t v30 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributeScopes.FoundationAttributes.DateFieldAttribute.Field>);
    char v8 = (void *)static _DictionaryStorage.allocate(capacity:)();
    unint64_t v32 = (void *)v7;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0LL; i != 888; i += 24LL)
    {
      uint64_t v10 = *(void *)((char *)&outlined read-only object #0 of AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)
                      + i
                      + 32);
      uint64_t v11 = *(void *)((char *)&outlined read-only object #0 of AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)
                      + i
                      + 40);
      char v12 = *((_BYTE *)&outlined read-only object #0 of AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)
            + i
            + 48);
      swift_bridgeObjectRetain();
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
      if ((v14 & 1) != 0)
      {
        __break(1u);
LABEL_12:
        __break(1u);
        return result;
      }

      *(void *)((char *)v8 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      char v15 = (uint64_t *)(v8[6] + 16 * result);
      *char v15 = v10;
      v15[1] = v11;
      *(_BYTE *)(v8[7] + result) = v12;
      uint64_t v16 = v8[2];
      BOOL v17 = __OFADD__(v16, 1LL);
      uint64_t v18 = v16 + 1;
      if (v17) {
        goto LABEL_12;
      }
      _OWORD v8[2] = v18;
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, AttributeScopes.FoundationAttributes.DateFieldAttribute.Field));
    swift_arrayDestroy();
    uint64_t v19 = v32;
    if (v8[2])
    {
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v30, (uint64_t)v32);
      if ((v21 & 1) != 0)
      {
        char v22 = *(_BYTE *)(v8[7] + v20);
        swift_bridgeObjectRelease_n();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
        *a2 = v22;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
    }

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v23 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v25 = v24;
    uint64_t v26 = a1[3];
    uint64_t v27 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v26);
    MEMORY[0x186E1CF78](v26, v27);
    _StringGuts.grow(_:)(27LL);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = v30;
    v28._object = v19;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 11838LL;
    v29._object = (void *)0xE200000000000000LL;
    String.append(_:)(v29);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 104LL))( v25,  *MEMORY[0x189619360],  v23);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.encode(to:)(void *a1)
{
  char v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  char v6 = v2;
  AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.rawValue.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

unint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field( void *a1)
{
  char v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  char v6 = v2;
  AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.rawValue.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

unint64_t static AttributeScopes.FoundationAttributes.DateFieldAttribute.name.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute()
{
  return 0xD00000000000001ALL;
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter( &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name);
}

unint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.markdownName.getter()
{
  return 0xD000000000000015LL;
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.decodeMarkdown(from:)@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)( &v8,  v5,  v6,  512,  0LL,  0LL,  0,  0LL);
    swift_bridgeObjectRelease();
    *a2 = v8;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }

  return result;
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.objectiveCValue(for:)()
{
  uint64_t v0 = swift_retain();
  return specialized NSAttributedString.init<A>(_:including:)(v0);
}

unint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.value(for:)@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = swift_dynamicCastObjCClass();
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v11 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v12 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 4866, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v14 = objc_msgSend(v13, sel_domain);
    id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    if (v15 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v17 != v18)
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0) {
        return swift_willThrow();
      }
      __break(1u);
    }

    swift_bridgeObjectRelease_n();
    return swift_willThrow();
  }

  unint64_t v6 = (void *)v5;
  id v7 = a1;
  specialized static AttributeScope.scopeDescription.getter();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  unint64_t result = AttributedString.init(_:attributeTable:options:)(v6, v9, 0LL, &v21);
  if (!v2) {
    *a2 = v21;
  }
  return result;
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.decodeMarkdown(from:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.decodeMarkdown(from:)(a1, a2);
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute()
{
  return 0xD000000000000015LL;
}

uint64_t protocol witness for static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute()
{
  uint64_t v0 = swift_retain();
  return specialized NSAttributedString.init<A>(_:including:)(v0);
}

unint64_t protocol witness for static ObjectiveCConvertibleAttributedStringKey.value(for:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.value(for:)(a1, a2);
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute( uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute( a1,  a2,  &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter( &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name);
}

id static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.objectiveCValue(for:)( uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInteger_, a1);
}

id static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.value(for:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedIntegerValue);
}

id protocol witness for static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:) in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute( void *a1)
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInteger_, *a1);
}

id protocol witness for static ObjectiveCConvertibleAttributedStringKey.value(for:) in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(a1, sel_unsignedIntegerValue);
  *a2 = result;
  return result;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute( uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute( a1,  a2,  &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.PresentationIntentAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter( &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.PresentationIntentAttribute.name);
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute( uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute( a1,  a2,  &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.PresentationIntentAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter( &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter( void *a1, uint64_t *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute( uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute( a1,  a2,  &one-time initialization token for name,  &static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name);
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute( uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1LL) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

unint64_t static AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute.name.getter()
{
  return 0xD000000000000016LL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute()
{
  return 0xD000000000000016LL;
}

uint64_t static AttributeScopes.FoundationAttributes.ImageURLAttribute.name.getter()
{
  return 0x556567616D49534ELL;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ImageURLAttribute()
{
  return 0x556567616D49534ELL;
}

unint64_t static AttributeScopes.FoundationAttributes.ReplacementIndexAttribute.name.getter()
{
  return 0xD000000000000012LL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReplacementIndexAttribute()
{
  return 0xD000000000000012LL;
}

unint64_t static AttributeScopes.FoundationAttributes.MeasurementAttribute.name.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(rawValue:)@<X0>( uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.rawValue.getter()
{
  return *v0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute()
{
  return 0xD00000000000001FLL;
}

unint64_t static AttributeScopes.FoundationAttributes.ByteCountAttribute.name.getter()
{
  return 0xD00000000000001DLL;
}

void AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.hash(into:)()
{
  Swift::UInt v1 = *v0;
  else {
    Swift::UInt v1 = qword_18382D3F0[(char)(v1 - 9)];
  }
  Hasher._combine(_:)(v1);
}

BOOL static AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  switch(v2)
  {
    case 11:
      return v3 == 11;
    case 10:
      return v3 == 10;
    case 9:
      return v3 == 9;
  }

  return v2 == v3;
}

BOOL static AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18346A134 + 4 * byte_18382A925[*v0]))( 0x65756C6176LL,  0xE500000000000000LL);
}

uint64_t sub_18346A134()
{
  return 0x4F64656C6C657073LL;
}

uint64_t sub_18346A158()
{
  return 1953066613LL;
}

uint64_t sub_18346A168()
{
  return 0x79426C6175746361LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys.init(stringValue:)( a1,  a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.encode(to:)(void *a1)
{
  int v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys>);
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  MEMORY[0x1895F8858](v4);
  Swift::String v29 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys>);
  uint64_t v33 = *(void *)(v6 - 8);
  uint64_t v34 = v6;
  MEMORY[0x1895F8858](v6);
  unint64_t v32 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys>);
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v28 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  id v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys>);
  uint64_t v35 = *(void *)(v15 - 8);
  uint64_t v36 = v15;
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v18 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v18)
  {
    case 11:
      char v41 = 3;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys();
      char v20 = v29;
      uint64_t v19 = v36;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v19);
    case 10:
      char v38 = 1;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys();
      uint64_t v22 = v36;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v22);
    case 9:
      char v37 = 0;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys();
      uint64_t v19 = v36;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v19);
    default:
      char v40 = 2;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys();
      uint64_t v23 = v32;
      uint64_t v24 = v36;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v39 = v18;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit();
      uint64_t v25 = v34;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v24);
  }

Swift::Int AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  else {
    Swift::UInt v1 = qword_18382D3F0[(char)(v1 - 9)];
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys>);
  uint64_t v23 = *(void *)(v21 - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v25 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys>);
  uint64_t v24 = *(void *)(v22 - 8);
  MEMORY[0x1895F8858](v22);
  Swift::String v29 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys>);
  uint64_t v28 = *(void *)(v20 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v27 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();
  uint64_t v13 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    v19[0] = v7;
    v19[1] = v6;
    uint64_t v31 = v9;
    uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v14 + 16) == 1LL) {
      __asm { BR              X10 }
    }

    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v17 = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x189619358],  v15);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v8);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component( void *a1)
{
  return AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  else {
    Swift::UInt v1 = qword_18382D3F0[(char)(v1 - 9)];
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  Swift::UInt v1 = *v0;
  else {
    Swift::UInt v1 = qword_18382D3F0[(char)(v1 - 9)];
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  else {
    Swift::UInt v1 = qword_18382D3F0[(char)(v1 - 9)];
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component( unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  switch(v2)
  {
    case 11:
      return v3 == 11;
    case 10:
      return v3 == 10;
    case 9:
      return v3 == 9;
  }

  return v2 == v3;
}

void AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.hash(into:)()
{
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys.stringValue.getter( unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18346AE14 + 4 * byte_18382A92D[a1]))( 1702132066LL,  0xE400000000000000LL);
}

uint64_t sub_18346AE14()
{
  return 25195LL;
}

uint64_t sub_18346AE20()
{
  return 25197LL;
}

uint64_t sub_18346AE2C()
{
  return 25191LL;
}

uint64_t sub_18346AE38()
{
  return 25204LL;
}

uint64_t sub_18346AE44()
{
  return 25200LL;
}

uint64_t sub_18346AE50()
{
  return 25189LL;
}

uint64_t sub_18346AE5C()
{
  return 25210LL;
}

uint64_t sub_18346AE68()
{
  return 25209LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys()
{
  return AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys.init(stringValue:)( a1,  a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

void AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys>);
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  MEMORY[0x1895F8858](v3);
  char v39 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys>);
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  MEMORY[0x1895F8858](v5);
  uint64_t v36 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys>);
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v33 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys>);
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v32 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v30 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys>);
  uint64_t v28 = *(void *)(v11 - 8);
  uint64_t v29 = v11;
  MEMORY[0x1895F8858](v11);
  uint64_t v27 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys>);
  uint64_t v25 = *(void *)(v26 - 8);
  MEMORY[0x1895F8858](v26);
  uint64_t v24 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys>);
  uint64_t v22 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v21 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys>);
  v19[1] = *(void *)(v20 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys>);
  MEMORY[0x1895F8858](v15);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys>);
  uint64_t v42 = *(void *)(v44 - 8);
  MEMORY[0x1895F8858](v44);
  uint64_t v17 = (char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys();
  uint64_t v43 = v17;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }

uint64_t sub_18346B4E0()
{
  *(_BYTE *)(v3 - 89) = 0;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys();
  uint64_t v5 = *(void *)(v3 - 112);
  uint64_t v4 = *(void *)(v3 - 104);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 120) + 8LL))(v5, v4);
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys>);
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  MEMORY[0x1895F8858](v3);
  unint64_t v54 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys>);
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  MEMORY[0x1895F8858](v5);
  uint64_t v57 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys>);
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v56 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys>);
  uint64_t v40 = *(void *)(v43 - 8);
  MEMORY[0x1895F8858](v43);
  unint64_t v53 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys>);
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  MEMORY[0x1895F8858](v10);
  uint64_t v55 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys>);
  uint64_t v38 = *(void *)(v39 - 8);
  MEMORY[0x1895F8858](v39);
  unint64_t v52 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys>);
  uint64_t v36 = *(void *)(v37 - 8);
  MEMORY[0x1895F8858](v37);
  uint64_t v51 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys>);
  uint64_t v34 = *(void *)(v35 - 8);
  MEMORY[0x1895F8858](v35);
  uint64_t v50 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys>);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = a1[3];
  __int128 v59 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v23);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys();
  uint64_t v24 = v60;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v24)
  {
    v32[3] = v18;
    v32[1] = v16;
    v32[2] = v15;
    uint64_t v60 = v20;
    uint64_t v33 = v19;
    uint64_t v25 = v22;
    uint64_t v26 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v26 + 16) == 1LL) {
      __asm { BR              X9 }
    }

    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v29 = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
    uint64_t v30 = v33;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v27 - 8) + 104LL))( v29,  *MEMORY[0x189619358],  v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v25, v30);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit( void *a1)
{
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute()
{
  return 0xD00000000000001DLL;
}

unint64_t static AttributeScopes.FoundationAttributes.DurationFieldAttribute.name.getter()
{
  return 0xD000000000000021LL;
}

unint64_t AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field.init(rawValue:)@<X0>( unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 8;
  if (result < 8) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field@<X0>( unint64_t *a1@<X0>, char *a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute()
{
  return 0xD000000000000021LL;
}

unint64_t static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.name.getter()
{
  return 0xD00000000000002CLL;
}

void AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.hash(into:)()
{
  __asm { BR              X11 }

void sub_18346C1B0()
{
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18346C248 + 4 * byte_18382A956[*v0]))( 1953393013LL,  0xE400000000000000LL);
}

uint64_t sub_18346C248()
{
  return 7630441LL;
}

uint64_t sub_18346C258()
{
  return 0x656C62756F64LL;
}

uint64_t sub_18346C26C()
{
  return 0x6C616D69636564LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys.init(stringValue:)( a1,  a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

void AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.encode(to:)( void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys>);
  v12[9] = *(void *)(v3 - 8);
  v12[10] = v3;
  MEMORY[0x1895F8858](v3);
  v12[8] = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys>);
  v12[6] = *(void *)(v5 - 8);
  v12[7] = v5;
  MEMORY[0x1895F8858](v5);
  v12[5] = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys>);
  v12[3] = *(void *)(v7 - 8);
  v12[4] = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  v12[1] = v8;
  v12[2] = v9;
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys>);
  v12[12] = *(void *)(v10 - 8);
  v12[13] = v10;
  MEMORY[0x1895F8858](v10);
  v12[11] = *(void *)v1;
  uint64_t v11 = *(unsigned __int8 *)(v1 + 20);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }

uint64_t sub_18346C5FC()
{
  *(_BYTE *)(v2 - 10__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys();
  uint64_t v3 = *(void *)(v2 - 120);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v4 = *(void *)(v2 - 216);
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 208) + 8LL))(v1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 128) + 8LL))(v0, v3);
}

void AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.hashValue.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 20);
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_18346C8C0()
{
  return Hasher._finalize()();
}

uint64_t AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v35 = v3;
  uint64_t v36 = v4;
  MEMORY[0x1895F8858](v3);
  uint64_t v39 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  uint64_t v34 = v7;
  MEMORY[0x1895F8858](v6);
  uint64_t v38 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  uint64_t v32 = v10;
  MEMORY[0x1895F8858](v9);
  uint64_t v37 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = a1[3];
  uint64_t v41 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();
  uint64_t v21 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v21)
  {
    __int128 v29[2] = v12;
    v29[3] = v15;
    v29[1] = v13;
    uint64_t v42 = v17;
    uint64_t v30 = v16;
    uint64_t v22 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v22 + 16) == 1LL)
    {
      uint64_t v23 = (char *)&loc_18346CB4C + 4 * byte_18382A962[*(unsigned __int8 *)(v22 + 32)];
      v29[0] = *(unsigned __int8 *)(v22 + 32);
      __asm { BR              X9 }
    }

    uint64_t v24 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v26 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    uint64_t v27 = v30;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v24 - 8) + 104LL))( v26,  *MEMORY[0x189619358],  v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v19, v27);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
}

void sub_18346CCC8()
{
  *(_BYTE *)(v2 - 10__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 1;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys();
  uint64_t v3 = v0;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v1)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x18346CC94LL);
  }

  uint64_t v4 = *(void *)(v2 - 200);
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 192) + 8LL))(v3, v4);
  swift_bridgeObjectRelease();
  JUMPOUT(0x18346CE88LL);
}

void sub_18346CD18()
{
  *(_BYTE *)(v3 - 10__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 2;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys();
  uint64_t v4 = *(void *)(v3 - 208);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v0) {
    JUMPOUT(0x18346CD58LL);
  }
  uint64_t v5 = *(void *)(v3 - 184);
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v6 = *(void *)(v3 - 112);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 176) + 8LL))(v2, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  JUMPOUT(0x18346CF64LL);
}

void sub_18346CD74()
{
  *(void *)(v4 - 144) = v0;
  *(_BYTE *)(v4 - 10__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 3;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys();
  uint64_t v5 = *(void *)(v4 - 208);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v2)
  {
    type metadata accessor for NSDecimal(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal,  (uint64_t (*)(uint64_t))type metadata accessor for NSDecimal,  (uint64_t)&protocol conformance descriptor for NSDecimal);
    uint64_t v6 = *(void *)(v4 - 168);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 160) + 8LL))(v1, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 112) + 8LL))(v3, v5);
    JUMPOUT(0x18346CF60LL);
  }

  JUMPOUT(0x18346CE28LL);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 20);
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_18346CFC0()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.init(from:)( a1,  a2);
}

void protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value( void *a1)
{
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute()
{
  return 0xD00000000000002CLL;
}

unint64_t static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute.name.getter()
{
  return 0xD000000000000029LL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute()
{
  return 0xD000000000000029LL;
}

unint64_t static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute.name.getter()
{
  return 0xD000000000000031LL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute()
{
  return 0xD000000000000031LL;
}

unint64_t static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute.name.getter()
{
  return 0xD000000000000028LL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute()
{
  return 0xD000000000000028LL;
}

id static AttributeScopes.FoundationAttributes.LinkAttribute.objectiveCValue(for:)(id *a1)
{
  return *a1;
}

void static AttributeScopes.FoundationAttributes.LinkAttribute.value(for:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)swift_dynamicCastObjCClass();
  if (v4)
  {
    URL.init(reference:)(v4, &v22);
    uint64_t v5 = v22;
LABEL_3:
    __int128 v6 = v23;
    *(void *)a2 = v5;
    *(_OWORD *)(a2 + 8) = v6;
    return;
  }

  objc_opt_self();
  uint64_t v7 = (void *)swift_dynamicCastObjCClass();
  if (v7)
  {
    id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    unint64_t v10 = v9;
    id v11 = a1;
    URL.init(string:)((uint64_t)v8, v10, &v22);
    swift_bridgeObjectRelease();

    uint64_t v5 = v22;
    if (v22) {
      goto LABEL_3;
    }
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v12 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_domain);
  id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19) {
    goto LABEL_12;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_bridgeObjectRelease_n();
  }

  swift_willThrow();
}

id protocol witness for static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:) in conformance AttributeScopes.FoundationAttributes.LinkAttribute( id *a1)
{
  return *a1;
}

void protocol witness for static ObjectiveCConvertibleAttributedStringKey.value(for:) in conformance AttributeScopes.FoundationAttributes.LinkAttribute( void *a1@<X0>, uint64_t a2@<X8>)
{
}

unint64_t static AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute.markdownName.getter()
{
  return 0xD000000000000012LL;
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return 0xD000000000000012LL;
}

NSLocalizedNumberFormatRule __swiftcall AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value._bridgeToObjectiveC()()
{
  return (NSLocalizedNumberFormatRule)objc_msgSend((id)objc_opt_self(), sel_automatic);
}

void static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value._forceBridgeFromObjectiveC(_:result:)( uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value._conditionallyBridgeFromObjectiveC(_:result:)( uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
  return 1LL;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value()
{
  return objc_msgSend((id)objc_opt_self(), sel_automatic);
}

void protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value( uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value( uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
  return 1LL;
}

uint64_t specialized NSAttributedString.init<A>(_:including:)(uint64_t a1)
{
  __int16 v119 = v2;
  swift_bridgeObjectRelease();
  __int128 v3 = *(_OWORD *)(a1 + 32);
  v148[0] = *(_OWORD *)(a1 + 16);
  v148[1] = v3;
  __int128 v149 = *(_OWORD *)(a1 + 48);
  v150[0] = v148[0];
  v150[1] = v3;
  v150[2] = v149;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v150, (uint64_t)v151);
  outlined retain of Locale((uint64_t)v151);
  MEMORY[0x186E1B6D0](v148);
  id v4 = objc_allocWithZone((Class)&OBJC_CLASS___NSMutableAttributedString);
  uint64_t v5 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v108 = objc_msgSend(v4, sel_initWithString_, v5);
  swift_unknownObjectRelease();
  __int128 v6 = *(_OWORD *)(a1 + 32);
  v147[9] = *(_OWORD *)(a1 + 16);
  v147[10] = v6;
  v147[11] = *(_OWORD *)(a1 + 48);
  uint64_t v7 = BigString.startIndex.getter();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v106 = a1;
  uint64_t v15 = *(void *)(a1 + 80);
  id v14 = *(void **)(a1 + 88);
  int64_t v128 = v16;
  if (v12)
  {
    unint64_t v17 = *(unsigned __int8 *)(v12 + 18);
    swift_unknownObjectRetain();
  }

  else
  {
    unint64_t v17 = 0LL;
  }

  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v109 = (_OWORD *)(v106 + 16);
  uint64_t v137 = v12;
  uint64_t v138 = v13;
  uint64_t v139 = v15;
  char v140 = v14;
  unint64_t v107 = &v141;
  __int16 v141 = v14;
  unint64_t v142 = v17;
  uint64_t v144 = 0LL;
  unint64_t v145 = 0LL;
  uint64_t v143 = 0LL;
  v105[1] = MEMORY[0x18961AFC0] + 8LL;
  if (v12) {
    goto LABEL_5;
  }
LABEL_7:
  if (!v18)
  {
LABEL_87:
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    id v103 = objc_allocWithZone((Class)&OBJC_CLASS___NSAttributedString);
    id v104 = v108;
    id v102 = objc_msgSend(v103, sel_initWithAttributedString_, v108);

    return (uint64_t)v102;
  }

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys,  &unk_189C92040);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys,  &unk_189C92040);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys,  &unk_189C92040);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys,  &unk_189C92040);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys,  &unk_189C92160);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys,  &unk_189C92160);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys,  &unk_189C92160);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys,  &unk_189C92140);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys,  &unk_189C92140);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys,  &unk_189C92140);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys,  &unk_189C92120);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys,  &unk_189C92120);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys,  &unk_189C92120);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys,  &unk_189C92100);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys,  &unk_189C92100);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys,  &unk_189C92100);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys,  &unk_189C920E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys,  &unk_189C920E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys,  &unk_189C920E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys,  &unk_189C920C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys,  &unk_189C920C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys,  &unk_189C920C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys,  &unk_189C920A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys,  &unk_189C920A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys,  &unk_189C920A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys,  &unk_189C92080);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys,  &unk_189C92080);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys,  &unk_189C92080);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys,  &unk_189C92060);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys,  &unk_189C92060);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys,  &unk_189C92060);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys);
  }

  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t specialized static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.== infix(_:_:)( uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_18346E488 + 4 * byte_18382A96A[*(unsigned __int8 *)(a1 + 20)]))(*(void *)a1);
}

BOOL sub_18346E488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return !v4 && a1 == a4;
}

uint64_t sub_18346E4C0@<X0>( unint64_t a1@<X0>, unint64_t a2@<X3>, unint64_t a3@<X4>, unsigned int a4@<W5>, uint64_t a5@<X8>)
{
  if (v5 == 3) {
    return specialized static NSDecimal.== infix(_:_:)(a1, *(void *)(a5 + 8), *(_DWORD *)(a5 + 16), a2, a3, a4);
  }
  else {
    return 0LL;
  }
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LinkAttribute,  &type metadata for AttributeScopes.FoundationAttributes.LinkAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LinkAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in AttributeScopes.FoundationAttributes.ReferentConceptAttribute()
{
  return MEMORY[0x189618750];
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.MorphologyAttribute,  &type metadata for AttributeScopes.FoundationAttributes.MorphologyAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.MorphologyAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.InflectionRuleAttribute,  &type metadata for AttributeScopes.FoundationAttributes.InflectionRuleAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.InflectionRuleAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute,  &type metadata for AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return MEMORY[0x189617FB8];
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component,  &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component,  &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component,  &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component,  &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component,  &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute,  &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute,  &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute,  &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.DateFieldAttribute,  &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.DateFieldAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute,  &type metadata for AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute,  &type metadata for AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent,  (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent,  (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.PresentationIntentAttribute,  &type metadata for AttributeScopes.FoundationAttributes.PresentationIntentAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.PresentationIntentAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute,  &type metadata for AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ImageURLAttribute,  &type metadata for AttributeScopes.FoundationAttributes.ImageURLAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.ImageURLAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.MeasurementAttribute,  &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.MeasurementAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.ByteCountAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.DurationFieldAttribute,  &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.DurationFieldAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Range<Date> and conformance <> Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Date>);
    unint64_t v2 = lazy protocol witness table accessor for type Date and conformance Date();
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618A38], v1, &v2);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes()
{
  return &type metadata for AttributeScopes.FoundationAttributes;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LinkAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LinkAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ReferentConceptAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ReferentConceptAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.AgreementConceptAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.AgreementConceptAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.AgreementArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.AgreementArgumentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.MorphologyAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.MorphologyAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.InflectionRuleAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.InflectionRuleAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_18346F518 + 4 * byte_18382A973[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_18346F54C + 4 * byte_18382A96E[v4]))();
}

uint64_t sub_18346F54C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346F554(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18346F55CLL);
  }
  return result;
}

uint64_t sub_18346F568(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18346F570LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_18346F574(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346F57C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  return &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_18346F628 + 4 * byte_18382A97D[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_18346F65C + 4 * byte_18382A978[v4]))();
}

uint64_t sub_18346F65C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346F664(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18346F66CLL);
  }
  return result;
}

uint64_t sub_18346F678(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18346F680LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_18346F684(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346F68C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute;
}

uint64_t getEnumTagSinglePayload for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEF) {
    return ((uint64_t (*)(void))((char *)&loc_18346F794 + 4 * byte_18382A987[v4]))();
  }
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_18346F7C8 + 4 * byte_18382A982[v4]))();
}

uint64_t sub_18346F7C8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346F7D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18346F7D8LL);
  }
  return result;
}

uint64_t sub_18346F7E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18346F7ECLL);
  }
  *(_BYTE *)unint64_t result = a2 + 16;
  return result;
}

uint64_t sub_18346F7F0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346F7F8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field()
{
  return &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.PresentationIntentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.PresentationIntentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ImageURLAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ImageURLAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ReplacementIndexAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ReplacementIndexAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_18346F8E0 + 4 * byte_18382A991[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18346F914 + 4 * byte_18382A98C[v4]))();
}

uint64_t sub_18346F914(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346F91C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18346F924LL);
  }
  return result;
}

uint64_t sub_18346F930(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18346F938LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_18346F93C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346F944(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component()
{
  return &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute;
}

uint64_t getEnumTagSinglePayload for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF5)
  {
    unsigned int v6 = *a1;
    if (v6 >= 9) {
      unsigned int v7 = v6 - 8;
    }
    else {
      unsigned int v7 = 0;
    }
    if (v7 >= 4) {
      return v7 - 3;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    unsigned int v2 = a2 + 11;
    if (a2 + 11 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_18346F9C0 + 4 * byte_18382A996[v4]))();
  }

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 11;
  if (a3 + 11 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    LODWORD(v5) = v4;
  }
  else {
    LODWORD(v5) = 0;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_18346FA6C + 4 * byte_18382A9A0[v5]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_18346FAA0 + 4 * byte_18382A99B[v5]))();
}

uint64_t sub_18346FAA0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346FAA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18346FAB0LL);
  }
  return result;
}

uint64_t sub_18346FABC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18346FAC4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 11;
  return result;
}

uint64_t sub_18346FAC8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346FAD0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component( unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 9) {
    return v1 - 8;
  }
  else {
    return 0LL;
  }
}

_BYTE *destructiveInjectEnumTag for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component( _BYTE *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_18346FB84 + 4 * byte_18382A9AA[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_18346FBB8 + 4 * byte_18382A9A5[v4]))();
}

uint64_t sub_18346FBB8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346FBC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18346FBC8LL);
  }
  return result;
}

uint64_t sub_18346FBD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18346FBDCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_18346FBE0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346FBE8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field()
{
  return &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute;
}

uint64_t getEnumTagSinglePayload for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 20);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 2__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 21) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 21) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 2__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value( uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t destructiveInjectEnumTag for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value( uint64_t result, char a2)
{
  *(_BYTE *)(result + 2__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_18346FDB8 + 4 * byte_18382A9B4[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_18346FDEC + 4 * byte_18382A9AF[v4]))();
}

uint64_t sub_18346FDEC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346FDF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18346FDFCLL);
  }
  return result;
}

uint64_t sub_18346FE08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18346FE10LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_18346FE14(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346FE1C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys()
{
  return &unk_189C92040;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys()
{
  return &unk_189C92060;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys()
{
  return &unk_189C92080;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys()
{
  return &unk_189C920A0;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys()
{
  return &unk_189C920C0;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys()
{
  return &unk_189C920E0;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys()
{
  return &unk_189C92100;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys()
{
  return &unk_189C92120;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys()
{
  return &unk_189C92140;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys()
{
  return &unk_189C92160;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_18346FF14 + 4 * byte_18382A9BE[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18346FF48 + 4 * byte_18382A9B9[v4]))();
}

uint64_t sub_18346FF48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346FF50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18346FF58LL);
  }
  return result;
}

uint64_t sub_18346FF64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18346FF6CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_18346FF70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18346FF78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_18346FFF4 + 4 * byte_18382A9C3[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_183470014 + 4 * byte_18382A9C8[v4]))();
  }
}

_BYTE *sub_18346FFF4(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_183470014(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_18347001C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_183470024(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_18347002C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_183470034(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format,  &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format);
  }

  return result;
}

uint64_t specialized AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1953393013 && a2 == 0xE400000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 7630441 && a2 == 0xE300000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x656C62756F64LL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x6C616D69636564LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t specialized AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702132066 && a2 == 0xE400000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 25195 && a2 == 0xE200000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 25197 && a2 == 0xE200000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 25191 && a2 == 0xE200000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 25204 && a2 == 0xE200000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 25200 && a2 == 0xE200000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else if (a1 == 25189 && a2 == 0xE200000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6LL;
  }

  else if (a1 == 25210 && a2 == 0xE200000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7LL;
  }

  else if (a1 == 25209 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 8LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 8LL;
    }
    else {
      return 9LL;
    }
  }

uint64_t specialized AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176LL && a2 == 0xE500000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x4F64656C6C657073LL && a2 == 0xEF65756C61567475LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 1953066613 && a2 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x79426C6175746361LL && a2 == 0xEF746E756F436574LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t outlined destroy of AttributedString._AttributeValue?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t PredicateExpressions.SequenceMaximum.elements.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.SequenceMaximum.init(elements:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t PredicateExpressions.SequenceMaximum.evaluate(_:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.SequenceMaximum.evaluate(_:)(a1, a2, MEMORY[0x189618178], a3);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys()
{
  return 0x73746E656D656C65LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceMaximum<A>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.SequenceMaximum.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_max<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, a1);
}

uint64_t PredicateExpressions.SequenceMaximum.description.getter(uint64_t a1)
{
  return PredicateExpressions.SequenceMaximum.description.getter(a1, (void *)0x80000001839D3180LL);
}

uint64_t PredicateExpressions.SequenceMaximum<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceMaximum<>.encode(to:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, _OWORD *))type metadata accessor for PredicateExpressions.SequenceMaximum.CodingKeys,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceMaximum<A>.CodingKeys);
}

void type metadata accessor for PredicateExpressions.SequenceMaximum.CodingKeys()
{
}

uint64_t PredicateExpressions.SequenceMaximum<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return PredicateExpressions.SequenceMaximum<>.init(from:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceMaximum<A>.CodingKeys,  (uint64_t (*)(void, uint64_t *, __n128))type metadata accessor for PredicateExpressions.SequenceMaximum);
}

void type metadata accessor for PredicateExpressions.SequenceMaximum()
{
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMaximum<A>( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMaximum<A>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, uint64_t, void, void))PredicateExpressions.SequenceMaximum<>.init(from:),  a5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceMaximum<A>( void *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMaximum<>.encode(to:)(a1, a2, a3, *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceMinimum.evaluate(_:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.SequenceMaximum.evaluate(_:)(a1, a2, MEMORY[0x189618180], a3);
}

uint64_t PredicateExpressions.SequenceMaximum.evaluate(_:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, void (*a3)(uint64_t, void, void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v15 = a4;
  id v16 = a3;
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v11 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v15 - v12;
  uint64_t v17 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v8 + 16))(&v17, v7, v8, v11);
  if (!v4)
  {
    v16(AssociatedTypeWitness, a2[4], a2[5]);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  }

  return result;
}

uint64_t PredicateExpressions.SequenceMaximum.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x73746E656D656C65LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }

  return v4 & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.SequenceMaximum.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.SequenceMinimum<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.SequenceMinimum<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceMinimum<A>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.SequenceMinimum.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.SequenceMinimum.description.getter(uint64_t a1)
{
  return PredicateExpressions.SequenceMaximum.description.getter(a1, (void *)0x80000001839D31A0LL);
}

uint64_t PredicateExpressions.SequenceMaximum.description.getter(uint64_t a1, void *a2)
{
  v3._countAndFlagsBits = 0xD00000000000001ALL;
  v3._object = a2;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 41LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return 0LL;
}

uint64_t PredicateExpressions.SequenceMinimum<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceMaximum<>.encode(to:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, _OWORD *))type metadata accessor for PredicateExpressions.SequenceMinimum.CodingKeys,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceMinimum<A>.CodingKeys);
}

uint64_t PredicateExpressions.SequenceMaximum<>.encode(to:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _OWORD *), uint64_t a6)
{
  uint64_t v16 = a4;
  __int128 v8 = *(_OWORD *)(a2 + 32);
  __int128 v15 = *(_OWORD *)(a2 + 16);
  v17[0] = v15;
  v17[1] = v8;
  uint64_t v9 = a5(255LL, v17);
  MEMORY[0x186E20D4C](a6, v9);
  uint64_t v10 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v15 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void type metadata accessor for PredicateExpressions.SequenceMinimum.CodingKeys()
{
}

uint64_t PredicateExpressions.SequenceMinimum<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return PredicateExpressions.SequenceMaximum<>.init(from:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceMinimum<A>.CodingKeys,  (uint64_t (*)(void, uint64_t *, __n128))type metadata accessor for PredicateExpressions.SequenceMinimum);
}

uint64_t PredicateExpressions.SequenceMaximum<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8, uint64_t (*a9)(void, uint64_t *, __n128))
{
  uint64_t v38 = a7;
  uint64_t v42 = *(void *)(a2 - 8);
  uint64_t v43 = a4;
  __n128 v14 = MEMORY[0x1895F8858](a1);
  uint64_t v44 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = v16;
  uint64_t v48 = v17;
  uint64_t v49 = v18;
  uint64_t v50 = v19;
  uint64_t v21 = v20(255LL, &v47, v14);
  uint64_t v46 = MEMORY[0x186E20D4C](a8, v21);
  uint64_t v45 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v39 = *(void *)(v45 - 8);
  __n128 v22 = MEMORY[0x1895F8858](v45);
  unint64_t v24 = (char *)&v37 - v23;
  uint64_t v41 = a2;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  uint64_t v25 = a9(0LL, &v47, v22);
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1895F8858](v25);
  unint64_t v28 = (char *)&v37 - v27;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  unint64_t v40 = v24;
  uint64_t v29 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v29)
  {
    int v37 = v28;
    uint64_t v46 = v26;
    uint64_t v51 = v25;
    uint64_t v31 = v39;
    uint64_t v30 = v40;
    uint64_t v32 = v41;
    uint64_t v33 = v42;
    unint64_t v34 = v44;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v45);
    char v35 = v37;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v37, v34, v32);
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v38, v35, v51);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void type metadata accessor for PredicateExpressions.SequenceMinimum()
{
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceMaximum<A>( void *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceMaximum<A>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceMaximum<A>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceMaximum<A>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceMinimum<A>( void *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceMinimum<A>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceMinimum<A>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.SequenceMinimum<A>);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMinimum<A>( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMaximum<A>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, uint64_t, void, void))PredicateExpressions.SequenceMinimum<>.init(from:),  a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMaximum<A>( uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, uint64_t, void, void), uint64_t a5)
{
  return a4(a1, a2[2], a2[3], *(void *)(a3 - 8), a5, a2[4], a2[5]);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceMinimum<A>( void *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.encode(to:)(a1, a2, a3, *(void *)(a3 - 16));
}

uint64_t type metadata completion function for PredicateExpressions.SequenceMaximum()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.SequenceMaximum( uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_1834720AC + 4 * byte_18382D408[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.SequenceMaximum( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t storeEnumTagSinglePayload for PredicateExpressions.SequenceMinimum.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1834722F0 + 4 * byte_18382D416[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_183472310 + 4 * byte_18382D41B[v4]))();
  }
}

_BYTE *sub_1834722F0(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_183472310(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_183472318(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_183472320(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_183472328(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_183472330(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void base witness table accessor for Equatable in PredicateExpressions.SequenceMaximum<A>.CodingKeys()
{
}

void base witness table accessor for Equatable in PredicateExpressions.SequenceMinimum<A>.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in PredicateExpressions.SequenceMinimum<A>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in PredicateExpressions.SequenceMinimum<A>.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in PredicateExpressions.SequenceMaximum<A>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in PredicateExpressions.SequenceMaximum<A>.CodingKeys()
{
}

uint64_t AnySortComparator.order.getter()
{
  unint64_t v1 = (uint64_t (*)(uint64_t *))v0[9];
  uint64_t v2 = v0[3];
  int v3 = __swift_project_boxed_opaque_existential_1(v0, v2);
  void v7[3] = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16LL))( boxed_opaque_existential_1,  v3,  v2);
  uint64_t v5 = v1(v7) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v5;
}

uint64_t AnySortComparator.order.setter(char a1)
{
  void (*v4)(__int128 *__return_ptr, uint64_t, uint64_t);
  __int128 v6[2];
  uint64_t v2 = v1;
  uint64_t v3 = a1 & 1;
  uint64_t v4 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v2 + 56);
  swift_retain();
  v4(v6, v2, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v6, v2);
}

uint64_t AnySortComparator.init<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 8);
  a4[3] = a2;
  a4[4] = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(boxed_opaque_existential_1, a1, a2);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  a4[5] = (uint64_t)partial apply for closure #1 in AnySortComparator.init<A>(_:);
  a4[6] = v10;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for closure #2 in AnySortComparator.init<A>(_:);
  *(void *)(v12 + 24) = v11;
  a4[7] = (uint64_t)_sSH_s8Sendablep10Foundation9SortOrderOs11AnyHashableVIeghlyr_SH_sAApADSH_sAApIeghlyr_TRTA_0;
  a4[8] = v12;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  a4[9] = (uint64_t)partial apply for closure #3 in AnySortComparator.init<A>(_:);
  a4[10] = result;
  return result;
}

uint64_t ComparableComparator.init(order:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result & 1;
  return result;
}

uint64_t OptionalComparator.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t AnySortComparator.compare(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))v2[5];
  uint64_t v6 = v2[3];
  unsigned int v7 = __swift_project_boxed_opaque_existential_1(v2, v6);
  v11[3] = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))( boxed_opaque_existential_1,  v7,  v6);
  uint64_t v9 = v5(v11, a1, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v9;
}

BOOL static SortOrder.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

NSComparisonResult __swiftcall NSComparisonResult.withOrder(_:)(Foundation::SortOrder a1)
{
  NSComparisonResult v2 = NSOrderedDescending;
  if (v1 == NSOrderedDescending) {
    uint64_t v3 = -1LL;
  }
  else {
    uint64_t v3 = v1;
  }
  if (v1 != NSOrderedAscending) {
    NSComparisonResult v2 = v3;
  }
  if ((a1 & 1) != 0) {
    return v2;
  }
  else {
    return v1;
  }
}

uint64_t SortOrder.init(from:)(void *a1)
{
  return specialized SortOrder.init(from:)(a1) & 1;
}

uint64_t SortOrder.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void SortOrder.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int SortOrder.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SortOrder@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = specialized SortOrder.init(from:)(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SortOrder(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t closure #1 in AnySortComparator.init<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  unsigned int v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of Any(a1, (uint64_t)v27);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v26);
  swift_dynamicCast();
  outlined init with copy of Any(v24, (uint64_t)v25);
  swift_dynamicCast();
  uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a5 + 24))(v16, v13, a4, a5);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v13, AssociatedTypeWitness);
  v21(v16, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, a4);
  return v20;
}

uint64_t sub_1834729F4()
{
  return swift_deallocObject();
}

uint64_t closure #2 in AnySortComparator.init<A>(_:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2 & 1;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](a1);
  uint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = (__int128 *)MEMORY[0x1895F8858](v9);
  uint64_t v14 = &v19[-v13 - 8];
  outlined init with take of any PredicateExpression<Self.Output == B1>(v12, (uint64_t)v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  swift_dynamicCast();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(v7, a3, a4);
  a1[3] = a3;
  a1[4] = *(void *)(a4 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  uint64_t v16 = *(void (**)(uint64_t *, char *, uint64_t))(v8 + 16);
  v16(boxed_opaque_existential_1, v14, a3);
  v16((uint64_t *)v11, v14, a3);
  AnyHashable.init<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v14, a3);
}

uint64_t sub_183472B30()
{
  return swift_deallocObject();
}

uint64_t sub_183472B40()
{
  return swift_deallocObject();
}

uint64_t _sSH_s8Sendablep10Foundation9SortOrderOs11AnyHashableVIeghlyr_SH_sAApADSH_sAApIeghlyr_TRTA_0@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  return thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)( a1,  a2 & 1,  *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16),  a3);
}

uint64_t closure #3 in AnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  outlined init with copy of Any(v6, (uint64_t)v11);
  swift_dynamicCast();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3) & 1;
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, a2);
  return v9;
}

uint64_t sub_183472C1C()
{
  return swift_deallocObject();
}

uint64_t key path getter for AnySortComparator.order : AnySortComparator@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = (uint64_t (*)(uint64_t *))a1[9];
  uint64_t v4 = a1[3];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, v4);
  v9[3] = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16LL))( boxed_opaque_existential_1,  v5,  v4);
  char v7 = v3(v9) & 1;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  *a2 = v7;
  return result;
}

uint64_t key path setter for AnySortComparator.order : AnySortComparator(unsigned __int8 *a1, uint64_t a2)
{
  void (*v4)(__int128 *__return_ptr, uint64_t, uint64_t);
  __int128 v6[2];
  uint64_t v3 = *a1;
  uint64_t v4 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a2 + 56);
  swift_retain();
  v4(v6, a2, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a2);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v6, a2);
}

void (*AnySortComparator.order.modify(uint64_t **a1))(__int128 **a1)
{
  uint64_t v3 = (uint64_t *)malloc(0x38uLL);
  *a1 = v3;
  v3[5] = (uint64_t)v1;
  uint64_t v4 = (uint64_t (*)(uint64_t *))v1[9];
  uint64_t v5 = v1[3];
  uint64_t v6 = __swift_project_boxed_opaque_existential_1(v1, v5);
  void v3[3] = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v3);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v5 - 8) + 16LL))( boxed_opaque_existential_1,  v6,  v5);
  LOBYTE(v5) = v4(v3) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *((_BYTE *)v3 + 48) = v5;
  return AnySortComparator.order.modify;
}

void AnySortComparator.order.modify(__int128 **a1)
{
  NSComparisonResult v1 = *a1;
  uint64_t v2 = *((void *)*a1 + 5);
  uint64_t v3 = *((unsigned __int8 *)*a1 + 48);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v2 + 56);
  swift_retain();
  v4(v2, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v2);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v1, v2);
  free(v1);
}

uint64_t AnySortComparator.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t compare #1 <A, B>(_:_:) in static AnySortComparator.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v24[1] = a5;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)v24 - v11;
  uint64_t v13 = MEMORY[0x1895F8858](v10);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v15, a2, a4);
  int v20 = swift_dynamicCast();
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (v20)
  {
    v21(v12, 0LL, 1LL, a3);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v12, a3);
    char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a3);
  }

  else
  {
    v21(v12, 1LL, 1LL, a3);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    char v22 = 0;
  }

  return v22 & 1;
}

Swift::Int AnySortComparator.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for SortComparator.compare(_:_:) in conformance AnySortComparator( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))v2[5];
  uint64_t v6 = v2[3];
  char v7 = __swift_project_boxed_opaque_existential_1(v2, v6);
  v11[3] = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))( boxed_opaque_existential_1,  v7,  v6);
  uint64_t v9 = v5(v11, a1, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v9;
}

uint64_t protocol witness for SortComparator.order.getter in conformance AnySortComparator()
{
  NSComparisonResult v1 = (uint64_t (*)(uint64_t *))v0[9];
  uint64_t v2 = v0[3];
  uint64_t v3 = __swift_project_boxed_opaque_existential_1(v0, v2);
  void v7[3] = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16LL))( boxed_opaque_existential_1,  v3,  v2);
  uint64_t v5 = v1(v7) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v5;
}

uint64_t protocol witness for SortComparator.order.setter in conformance AnySortComparator(char a1)
{
  void (*v4)(__int128 *__return_ptr, uint64_t, uint64_t);
  __int128 v6[2];
  uint64_t v2 = v1;
  uint64_t v3 = a1 & 1;
  uint64_t v4 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v2 + 56);
  swift_retain();
  v4(v6, v2, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v6, v2);
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance AnySortComparator( uint64_t ***a1))()
{
  uint64_t v2 = (uint64_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t *)AnySortComparator.order.modify(v2);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnySortComparator( void *a1, void *a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v6 = a2[3];
  char v7 = __swift_project_boxed_opaque_existential_1(a2, v6);
  return compare #1 <A, B>(_:_:) in static AnySortComparator.== infix(_:_:)( (uint64_t)v5,  (uint64_t)v7,  v3,  v6,  *(void *)(v4 + 8));
}

uint64_t ComparableComparator.order.getter()
{
  return *v0;
}

uint64_t ComparableComparator.order.setter(uint64_t result)
{
  *uint64_t v1 = result & 1;
  return result;
}

uint64_t (*ComparableComparator.order.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ComparableComparator.compare(_:_:)()
{
  int v1 = *v0;
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
  {
    if (v1) {
      return 1LL;
    }
    else {
      return -1LL;
    }
  }

  else
  {
    uint64_t v3 = dispatch thunk of static Comparable.> infix(_:_:)();
    if (v1) {
      return v3 << 63 >> 63;
    }
    else {
      return v3 & 1;
    }
  }

void ComparableComparator.hash(into:)()
{
}

BOOL static ComparableComparator.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int ComparableComparator.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for SortComparator.order.setter in conformance ComparableComparator<A>(char a1)
{
  return ComparableComparator.order.setter(a1 & 1);
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance ComparableComparator<A>( void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ComparableComparator.order.modify();
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ComparableComparator<A>()
{
  return Hasher._finalize()();
}

uint64_t OptionalComparator.order.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32LL))(*(void *)(a1 + 16)) & 1;
}

uint64_t OptionalComparator.order.setter(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a2 + 24) + 40LL))(a1 & 1, *(void *)(a2 + 16));
}

uint64_t (*OptionalComparator.order.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 32);
  *(void *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v6() & 1;
  return OptionalComparator.order.modify;
}

uint64_t OptionalComparator.order.modify(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 8) + 40LL))( *(unsigned __int8 *)(a1 + 24),  *(void *)(a1 + 16));
}

uint64_t OptionalComparator.compare(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v5 = a3 + 16;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v33 = *(void *)(v5 + 8);
  uint64_t v32 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t v14 = *(void **)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v19 = MEMORY[0x1895F8858](v18);
  uint64_t v21 = (char *)&v32 - v20;
  char v22 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
  v22(v13, a1, v7, v19);
  uint64_t v23 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v14[6];
  if (v23((uint64_t)v13, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    if (v23(v34, 1LL, AssociatedTypeWitness) == 1) {
      return 0LL;
    }
    BOOL v28 = ((*(uint64_t (**)(uint64_t))(v33 + 32))(v32) & 1) == 0;
    uint64_t v29 = -1LL;
  }

  else
  {
    uint64_t v25 = v13;
    uint64_t v26 = (void (*)(char *, char *, uint64_t))v14[4];
    v26(v21, v25, AssociatedTypeWitness);
    ((void (*)(char *, uint64_t, uint64_t))v22)(v10, v34, v7);
    if (v23((uint64_t)v10, 1LL, AssociatedTypeWitness) != 1)
    {
      v26(v17, v10, AssociatedTypeWitness);
      uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 24))(v21, v17, v32);
      uint64_t v30 = (void (*)(char *, uint64_t))v14[1];
      v30(v17, AssociatedTypeWitness);
      v30(v21, AssociatedTypeWitness);
      return v24;
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    char v27 = (*(uint64_t (**)(uint64_t))(v33 + 32))(v32);
    ((void (*)(char *, uint64_t))v14[1])(v21, AssociatedTypeWitness);
    BOOL v28 = (v27 & 1) == 0;
    uint64_t v29 = 1LL;
  }

  if (v28) {
    return v29;
  }
  else {
    return -v29;
  }
}

uint64_t OptionalComparator.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static OptionalComparator.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int OptionalComparator.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for SortComparator.order.setter in conformance OptionalComparator<A>( char a1, uint64_t a2)
{
  return OptionalComparator.order.setter(a1 & 1, a2);
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance OptionalComparator<A>( void *a1, uint64_t a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = OptionalComparator.order.modify((uint64_t)v4, a2);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OptionalComparator<A>()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OptionalComparator<A>()
{
  return static OptionalComparator.== infix(_:_:)();
}

uint64_t Sequence.sorted<A>(using:)(uint64_t a1, uint64_t a2)
{
  __n128 v4 = MEMORY[0x1895F8858](a1);
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  uint64_t v18 = v9;
  uint64_t v19 = v10;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v11 + 16))( &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  v2,  a2,  v4);
  uint64_t v20 = dispatch thunk of Sequence._copyToContiguousArray()();
  swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for ContiguousArray();
  MEMORY[0x186E20D4C](MEMORY[0x189619570], v12);
  MEMORY[0x186E20D4C](MEMORY[0x189619588], v12);
  MutableCollection<>.sort(by:)();
  return v20;
}

uint64_t Sequence.sorted<A, B>(using:)(uint64_t a1, uint64_t a2)
{
  __n128 v4 = MEMORY[0x1895F8858](a1);
  uint64_t v17 = v6;
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  uint64_t v20 = v9;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  uint64_t v23 = v12;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v13 + 16))( &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  v2,  a2,  v4);
  uint64_t v24 = dispatch thunk of Sequence._copyToContiguousArray()();
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for ContiguousArray();
  MEMORY[0x186E20D4C](MEMORY[0x189619570], v14);
  MEMORY[0x186E20D4C](MEMORY[0x189619588], v14);
  MutableCollection<>.sort(by:)();
  return v24;
}

uint64_t Sequence.compare<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v25[1] = a5;
  uint64_t v29 = a2;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)v25 - v14;
  uint64_t v26 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v25[0] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v20 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v22 = (char *)v25 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v26 + 16))(v18, v27, a3, v20);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, a4);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 24))(a1, v29, a4, a6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a4);
    if (v23) {
      goto LABEL_6;
    }
  }

  uint64_t v23 = 0LL;
LABEL_6:
  (*(void (**)(char *, uint64_t))(v28 + 8))(v22, AssociatedTypeWitness);
  return v23;
}

uint64_t MutableCollection<>.sort<A>(using:)()
{
  return MutableCollection<>.sort(by:)();
}

uint64_t MutableCollection<>.sort<A, B>(using:)()
{
  return MutableCollection<>.sort(by:)();
}

uint64_t specialized static AnySortComparator.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v3 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  __n128 v4 = __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v9 = MEMORY[0x1895F8858](v8);
  (*(void (**)(char *, __n128))(v11 + 16))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v9);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v20 - v14;
  int v16 = swift_dynamicCast();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  if (v16)
  {
    v17(v15, 0LL, 1LL, v3);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v15, v3);
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
  }

  else
  {
    v17(v15, 1LL, 1LL, v3);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    char v18 = 0;
  }

  return v18 & 1;
}

uint64_t specialized SortOrder.init(from:)(void *a1)
{
  if (v1) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  char v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (v3 & 1) == 0;
}

BOOL partial apply for closure #1 in Sequence.sorted<A>(using:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v2 + 40) + 24LL))( a1,  a2,  *(void *)(v2 + 24)) == -1;
}

BOOL partial apply for closure #1 in Sequence.sorted<A, B>(using:)(uint64_t a1, uint64_t a2)
{
  return Sequence.compare<A>(_:_:)(a1, a2, v2[3], v2[4], v2[6], v2[7]) == -1;
}

BOOL partial apply for closure #1 in MutableCollection<>.sort<A>(using:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v2 + 48) + 24LL))( a1,  a2,  *(void *)(v2 + 24)) == -1;
}

BOOL partial apply for closure #1 in MutableCollection<>.sort<A, B>(using:)(uint64_t a1, uint64_t a2)
{
  return Sequence.compare<A>(_:_:)(a1, a2, v2[3], v2[4], v2[7], v2[8]) == -1;
}

unint64_t instantiation function for generic protocol witness table for AnySortComparator(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AnySortComparator and conformance AnySortComparator();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AnySortComparator and conformance AnySortComparator()
{
  unint64_t result = lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator;
  if (!lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AnySortComparator,  &type metadata for AnySortComparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator;
  if (!lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AnySortComparator,  &type metadata for AnySortComparator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for ComparableComparator<A>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for ComparableComparator<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in ComparableComparator<A>()
{
}

uint64_t instantiation function for generic protocol witness table for OptionalComparator<A>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for OptionalComparator<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in OptionalComparator<A>()
{
}

uint64_t sub_183474244@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v5 = type metadata accessor for OptionalComparator(0LL, *(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8), a3);
  uint64_t result = OptionalComparator.order.getter(v5);
  *a4 = result;
  return result;
}

uint64_t sub_18347427C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = *a1;
  uint64_t v5 = type metadata accessor for OptionalComparator(0LL, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8), a4);
  return OptionalComparator.order.setter(v4, v5);
}

uint64_t sub_1834742B8()
{
  return 16LL;
}

__n128 sub_1834742C4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of SortComparator.compare(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of SortComparator.order.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))() & 1;
}

uint64_t dispatch thunk of SortComparator.order.setter(char a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))(a1 & 1);
}

uint64_t dispatch thunk of SortComparator.order.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

ValueMetadata *type metadata accessor for SortOrder()
{
  return &type metadata for SortOrder;
}

uint64_t destroy for AnySortComparator(uint64_t a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for AnySortComparator(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(void *)(a1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for AnySortComparator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[8];
  a1[7] = a2[7];
  a1[8] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[10];
  a1[9] = a2[9];
  a1[10] = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AnySortComparator(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnySortComparator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(outlined consume of Data._Representation(v0, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnySortComparator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AnySortComparator()
{
  return &type metadata for AnySortComparator;
}

uint64_t storeEnumTagSinglePayload for SortOrder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1834745BC + 4 * byte_18382D895[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1834745F0 + 4 * byte_18382D890[v4]))();
}

uint64_t sub_1834745F0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834745F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183474600LL);
  }
  return result;
}

uint64_t sub_18347460C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183474614LL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_183474618(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183474620(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for ComparableComparator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ComparableComparator);
}

uint64_t getEnumTagSinglePayload for OptionalComparator(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_1834746E8 + 4 * byte_18382D89A[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for OptionalComparator( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for OptionalComparator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionalComparator);
}

void URL.init(fileURLWithPath:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v13 = 2;
    memset(v12, 0, sizeof(v12));
    swift_bridgeObjectRetain();
    URL.init(filePath:directoryHint:relativeTo:)(a1, a2, &v13, (uint64_t)v12, (uint64_t *)&v14);
    uint64_t v6 = v14;
    __int128 v7 = v15;
  }

  else
  {
    uint64_t v8 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000LL) == 0) {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v8) {
      swift_bridgeObjectRetain();
    }
    id v9 = objc_allocWithZone(MEMORY[0x189604030]);
    uint64_t v10 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v11 = objc_msgSend(v9, sel_initFileURLWithPath_, v10);
    swift_unknownObjectRelease();
    uint64_t v6 = static URL._converted(from:)(v11);

    __int128 v7 = 0uLL;
  }

  *(void *)a3 = v6;
  *(_OWORD *)(a3 + 8) = v7;
}

void URL.init(fileURLWithPath:isDirectory:)( uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    BOOL v15 = (a3 & 1) == 0;
    memset(v14, 0, sizeof(v14));
    swift_bridgeObjectRetain();
    URL.init(filePath:directoryHint:relativeTo:)(a1, a2, (unsigned __int8 *)&v15, (uint64_t)v14, (uint64_t *)&v16);
    uint64_t v8 = v16;
    __int128 v9 = v17;
  }

  else
  {
    uint64_t v10 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000LL) == 0) {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v10) {
      swift_bridgeObjectRetain();
    }
    id v11 = objc_allocWithZone(MEMORY[0x189604030]);
    uint64_t v12 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v11, sel_initFileURLWithPath_isDirectory_, v12, a3 & 1);
    swift_unknownObjectRelease();
    uint64_t v8 = static URL._converted(from:)(v13);

    __int128 v9 = 0uLL;
  }

  *(void *)a4 = v8;
  *(_OWORD *)(a4 + 8) = v9;
}

void *URL.init(filePath:directoryHint:relativeTo:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *a3;
  __int128 v9 = *(void **)a4;
  char v18 = *(void **)(a4 + 8);
  uint64_t v10 = *(void **)(a4 + 16);
  int v11 = _foundation_swift_url_feature_enabled();
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v12 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v11)
  {
    if (!v12) {
      swift_bridgeObjectRelease();
    }
    __asm { BR              X9 }
  }

  if (v12)
  {
    if ((specialized Collection.first.getter(a1, a2) & 0x1FF) != 0x2F
      && (specialized Collection.first.getter(a1, a2) & 0x1FF) != 0x7E
      && !v9)
    {
      static URL.currentDirectoryOrNil()(&v20);
    }

    __asm { BR              X9 }
  }

  id v13 = v18;
  outlined copy of URL?((uint64_t)v9);
  swift_bridgeObjectRelease();
  if (v9)
  {
    outlined consume of URL?(v9);
  }

  else
  {
    static URL.currentDirectoryOrNil()(&v20);
    __int128 v9 = v20;
    id v13 = v21;
    uint64_t v10 = v22;
  }

  v19[0] = v9;
  v19[1] = v13;
  void v19[2] = v10;
  outlined copy of URL?((uint64_t)v9);
  URL.init(string:relativeTo:)(0LL, 0xE000000000000000LL, v19, (uint64_t *)&v20);
  outlined consume of URL?(v9);
  uint64_t v14 = (uint64_t)v20;
  if (!v20)
  {
    __break(1u);
    JUMPOUT(0x1834756D0LL);
  }

  uint64_t v16 = (uint64_t)v21;
  uint64_t v15 = (uint64_t)v22;
  __n128 result = outlined consume of URL?(v9);
  *a5 = v14;
  a5[1] = v16;
  a5[2] = v15;
  return result;
}

uint64_t URL.isFileURL.getter()
{
  __int16 v1 = *v0;
  URL.scheme.getter();
  if (!v2) {
    return 0LL;
  }
  Swift::String v3 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v3._countAndFlagsBits == 1701603686 && v3._object == (void *)0xE400000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v5 & 1;
  }

uint64_t URL.path.getter()
{
  uint64_t v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v35 = (uint64_t)v2;
    uint64_t v36 = v1;
    uint64_t v37 = v3;
    swift_retain();
    id v4 = v2;
    swift_retain();
    Swift::String v5 = URL.path(percentEncoded:)(1);
    Swift::Int countAndFlagsBits = v5._countAndFlagsBits;
    Swift::String v34 = v5;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      unint64_t object = (unint64_t)v5._object;
    }

    else
    {
      unint64_t object = (unint64_t)v5._object;
      if ((specialized BidirectionalCollection.last.getter(v5._countAndFlagsBits, (unint64_t)v5._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        Swift::Int countAndFlagsBits = v34._countAndFlagsBits;
        unint64_t object = (unint64_t)v34._object;
      }
    }

    uint64_t v35 = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v33, 0x2FuLL);
    uint64_t v20 = v35;
    if ((object & 0x2000000000000000LL) != 0) {
      uint64_t v21 = HIBYTE(object) & 0xF;
    }
    else {
      uint64_t v21 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v21)
    {
      swift_bridgeObjectRelease();
      uint64_t v25 = 0LL;
LABEL_27:
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v25;
    }

    swift_bridgeObjectRetain();
    if ((object & 0x1000000000000000LL) != 0)
    {
      uint64_t v25 = 0LL;
      uint64_t v29 = 1LL;
    }

    else
    {
      if ((object & 0x2000000000000000LL) != 0)
      {
        uint64_t v35 = countAndFlagsBits;
        uint64_t v36 = object & 0xFFFFFFFFFFFFFFLL;
        uint64_t v22 = &v35;
        uint64_t v23 = HIBYTE(object) & 0xF;
      }

      else if ((countAndFlagsBits & 0x1000000000000000LL) != 0)
      {
        uint64_t v22 = (uint64_t *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v23 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v22 = (uint64_t *)_StringObject.sharedUTF8.getter();
      }

      uint64_t v25 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v22, v23, v20);
      uint64_t v29 = v28;
    }

    if (v29 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( countAndFlagsBits,  object,  v20);
      uint64_t v31 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      if (v31) {
        goto LABEL_27;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v29) {
        goto LABEL_27;
      }
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  id v8 = objc_msgSend(v2, sel__parameterString);
  if (v8)
  {
    __int128 v9 = v8;
    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v13 = objc_msgSend(v2, sel_path)) != 0)
    {
      uint64_t v14 = v13;
      id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v17 = v16;

      uint64_t v35 = (uint64_t)v15;
      uint64_t v36 = v17;
      swift_bridgeObjectRetain();
      v18._Swift::Int countAndFlagsBits = 59LL;
      v18._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v19._Swift::Int countAndFlagsBits = (uint64_t)v10;
      v19._unint64_t object = v12;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v35 = 59LL;
      uint64_t v36 = 0xE100000000000000LL;
      v24._Swift::Int countAndFlagsBits = (uint64_t)v10;
      v24._unint64_t object = v12;
      String.append(_:)(v24);
    }

    swift_bridgeObjectRelease();
    return v35;
  }

  else
  {
    id v26 = objc_msgSend(v2, sel_path);
    if (!v26) {
      return 0LL;
    }
    uint64_t v27 = v26;
    uint64_t v25 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  }

  return v25;
}

uint64_t specialized Collection.subscript.getter()
{
  return String.subscript.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  id v2 = *v1;
}

void static URL._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    URL.init(reference:)(a1, &v4);
    __int128 v3 = v5;
    *(void *)a2 = v4;
    *(_OWORD *)(a2 + 8) = v3;
  }

  else
  {
    __break(1u);
  }

uint64_t specialized static RFC3986Parser.validate<A>(_:component:)(uint64_t a1, uint64_t a2, char a3)
{
  if (a2) {
    __asm { BR              X10 }
  }

  return 1LL;
}

uint64_t specialized static RFC3986Parser.percentEncode<A>(_:component:)( uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3 = a1;
  if (a2)
  {
    if ((a2 & 0x2000000000000000LL) != 0) {
      uint64_t v4 = HIBYTE(a2) & 0xF;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v4) {
      __asm { BR              X10 }
    }

    return 0LL;
  }

  return v3;
}

void sub_183476B88()
{
}

unint64_t specialized Sequence<>.contains(_:)(char a1, unint64_t a2, unint64_t a3)
{
  char v5 = a1;
  _OWORD v4[2] = &v5;
  return specialized Sequence.contains(where:)( (uint64_t (*)(void *))_sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0,  (uint64_t)v4,  a2,  a3) & 1;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  if (*(_DWORD *)(a2 + 32) == (_DWORD)result) {
    return 1LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  for (uint64_t i = 9LL; ; ++i)
  {
    uint64_t v4 = i - 7;
    if (__OFADD__(i - 8, 1LL)) {
      break;
    }
    BOOL v6 = *(_DWORD *)(a2 + 4 * i) == (_DWORD)result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a5 + 16);
  if (!v5) {
    return 0LL;
  }
  for (uint64_t i = (void *)(a5 + 56); ; i += 4)
  {
    BOOL v9 = *(i - 1) == a3 && *i == a4;
    if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    if (!--v5) {
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  BOOL v9 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

BOOL specialized Sequence<>.contains(_:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return 0LL;
  }
  int v4 = a1;
  if (a2 + 1 == a3) {
    return 0LL;
  }
  uint64_t v6 = a3 - a2 - 2;
  __int128 v7 = (unsigned __int8 *)(a4 + a2 + 1);
  do
  {
    int v8 = *v7++;
    BOOL result = v8 == v4;
  }

  while (v8 != v4 && v6-- != 0);
  return result;
}

void specialized Collection.first.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }

uint64_t sub_183476FE4(unsigned __int8 a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) != 0) {
    unsigned __int8 v2 = a1;
  }
  else {
    unsigned __int8 v2 = 0;
  }
  return v2 | (((a2 & 0xFF000000000000LL) == 0) << 8);
}

uint64_t URL.absoluteString.getter()
{
  __int128 v7 = *(void **)v0;
  uint64_t v6 = *(void *)(v0 + 8);
  int v8 = *(_BYTE **)(v0 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    id v10 = objc_msgSend(v7, sel_absoluteString);
    if (!v10) {
      return 0LL;
    }
    id v11 = v10;
    uint64_t v12 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    goto LABEL_12;
  }

  if (!v8)
  {
    swift_retain();
    id v11 = v7;
    if (!_foundation_swift_url_feature_enabled())
    {
      id v14 = objc_msgSend(v11, sel_relativeString);
      uint64_t v12 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      swift_release();

      return v12;
    }

    if (!v6)
    {
      __break(1u);
LABEL_233:
      __break(1u);
      goto LABEL_234;
    }

    uint64_t v12 = *(void *)(v6 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_12:

    return v12;
  }

  if (!v6)
  {
    __break(1u);
    goto LABEL_227;
  }

  uint64_t v5 = &v211;
  char v9 = *(_BYTE *)(v6 + 218);
  unint64_t v4 = (unint64_t)&v208;
  char v207 = 1;
  *(void *)&__int128 v208 = v6;
  *((void *)&v208 + 1) = 0x101010101010101LL;
  v209[0] = 1;
  memset(&v209[8], 0, 72);
  v210[0] = 1;
  memset(&v210[8], 0, 48);
  v210[56] = v9;
  v210[57] = 0;
  if ((*(_BYTE *)(v6 + 48) & 1) == 0)
  {
    swift_retain();
    swift_retain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v6 + 168) & 1) != 0) {
      uint64_t v13 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      uint64_t v13 = String.subscript.getter();
    }
    unint64_t v27 = MEMORY[0x186E1B610](v13);
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    unint64_t v30 = String._removingDotSegments.getter(v27, v29);
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    BYTE8(v208) = 0;
    BYTE14(v208) = 0;
    if ((v32 & 0x1000000000000000LL) != 0)
    {
      *(void *)&__int128 v211 = v30;
      *((void *)&v211 + 1) = v32;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      __n128 v77 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v78 = (unsigned __int16 *)objc_msgSend(v77, sel__fastCharacterContents);
      id v79 = v77;
      if (v78)
      {
        *(void *)&__int128 v211 = v30;
        *((void *)&v211 + 1) = v32;
        StringProtocol._ephemeralString.getter();
        uint64_t v80 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v81 = objc_msgSend(v80, sel_length);
        swift_unknownObjectRelease();
        char v82 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v78,  (uint64_t)v81,  0x10u,  1);
      }

      else
      {
        char v82 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v30, v32, 0x10u, 1);
      }

      char v83 = v82;
      swift_bridgeObjectRelease_n();
      if ((v83 & 1) == 0) {
        goto LABEL_222;
      }
    }

    else if ((v32 & 0x2000000000000000LL) != 0)
    {
      *(void *)&__int128 v211 = v30;
      *((void *)&v211 + 1) = v32 & 0xFFFFFFFFFFFFFFLL;
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( (char *)&v211,  HIBYTE(v32) & 0xF,  0x10u,  1)) {
        goto LABEL_222;
      }
    }

    else
    {
      if ((v30 & 0x1000000000000000LL) != 0)
      {
        char v33 = (char *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v34 = v30 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        char v33 = (char *)_StringObject.sharedUTF8.getter();
      }

      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v33, v34, 0x10u, 1)) {
        goto LABEL_222;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v26 = v208;
    __int128 v203 = v208;
    LOBYTE(v204[0]) = v209[0];
    *(_OWORD *)((char *)v204 + 8) = *(_OWORD *)&v209[8];
    *(_OWORD *)((char *)&v204[1] + 8) = *(_OWORD *)&v209[24];
    *(_OWORD *)((char *)&v204[2] + 8) = *(_OWORD *)&v209[40];
    *(_OWORD *)((char *)&v204[3] + 8) = *(_OWORD *)&v209[56];
    *((void *)&v204[4] + 1) = *(void *)&v209[72];
    LOBYTE(v205) = v210[0];
    *((void *)&v205 + 1) = v30;
    *(void *)&v206[0] = v32;
    *(_OWORD *)((char *)v206 + 8) = *(_OWORD *)&v210[24];
    *(_OWORD *)((char *)&v206[1] + 8) = *(_OWORD *)&v210[40];
    WORD4(v206[2]) = *(_WORD *)&v210[56];
    __int128 v213 = v204[1];
    __int128 v214 = v204[2];
    __int128 v211 = v208;
    __int128 v212 = v204[0];
    *(_OWORD *)((char *)v219 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)((char *)&v206[1] + 10);
    __int128 v218 = v206[0];
    v219[0] = v206[1];
    __int128 v216 = v204[4];
    __int128 v217 = v205;
    __int128 v215 = v204[3];
    if ((BYTE8(v208) & 1) != 0)
    {
      if ((void)v208) {
        goto LABEL_41;
      }
    }

    else
    {
      outlined retain of URLComponents((uint64_t)&v203);
      uint64_t v12 = URLComponents._URLComponents.computedString.getter();
      uint64_t v36 = v35;
      outlined release of URLComponents((uint64_t)&v203);
      if (v36) {
        goto LABEL_46;
      }
    }

    id v37 = v7;
    swift_retain();
    swift_retain();
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
LABEL_48:
      uint64_t v12 = *(void *)(v6 + 16);
      swift_bridgeObjectRetain();
      swift_release();

      swift_release_n();
      goto LABEL_51;
    }

uint64_t URL.relativeString.getter()
{
  unint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    id v5 = objc_msgSend(v1, sel_relativeString);
    id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

    return (uint64_t)v4;
  }

  if (v2)
  {
    id v4 = *(id *)(v2 + 16);
    swift_bridgeObjectRetain();
    return (uint64_t)v4;
  }

  __break(1u);
  return result;
}

void URL.init(string:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!_foundation_swift_url_feature_enabled())
  {
    uint64_t v10 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000LL) == 0) {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      id v11 = objc_msgSend( objc_allocWithZone(MEMORY[0x189604030]),  sel_initWithString_,  String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease();
      if (v11)
      {
        uint64_t v9 = (uint64_t)static URL._converted(from:)(v11);

        Swift::Int v7 = 0LL;
        goto LABEL_9;
      }
    }

void URL.init(string:relativeTo:)(uint64_t a1@<X0>, unint64_t a2@<X1>, id *a3@<X2>, uint64_t *a4@<X8>)
{
  id v7 = *a3;
  if (_foundation_swift_url_feature_enabled())
  {
    Swift::Int v8 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(a1, a2, 1);
    if (v8)
    {
      uint64_t v9 = v8;
      if ((*(_BYTE *)(v8 + 48) & 1) != 0)
      {
        if (v7)
        {
          swift_retain_n();
          URL.absoluteURL.getter(v16);
          id v7 = v16[1];

          swift_release();
          if (v7)
          {
            uint64_t v10 = swift_retain();
            id v11 = (void *)specialized static URL._cfURL(from:baseURL:)(v10);
LABEL_18:
            uint64_t v15 = specialized static URL._cfURL(from:baseURL:)(v9);
            swift_release_n();

            swift_release();
            goto LABEL_19;
          }
        }

        else
        {
          swift_retain_n();
        }

        id v11 = 0LL;
        goto LABEL_18;
      }

      swift_retain_n();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      id v11 = 0LL;
      id v7 = 0LL;
      goto LABEL_18;
    }

uint64_t URL.description.getter()
{
  unint64_t v1 = *(void **)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    id v6 = objc_msgSend(v1, sel_description);
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

    return (uint64_t)v7;
  }

  unint64_t v46 = v1;
  unint64_t v47 = v2;
  uint64_t v48 = v3;
  URL.scheme.getter();
  if (!v4) {
    goto LABEL_16;
  }
  Swift::String v5 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v5._countAndFlagsBits == 1635017060 && v5._object == (void *)0xE400000000000000LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      goto LABEL_16;
    }
  }

  swift_retain();
  id v9 = v1;
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!v2)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }

    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
  }

  else
  {
    id v11 = objc_msgSend(v9, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    swift_release();
    swift_release();
  }

  uint64_t v12 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v12 < 129)
  {
LABEL_16:
    swift_retain();
    id v14 = v1;
    swift_retain();
    uint64_t result = _foundation_swift_url_feature_enabled();
    if (!(_DWORD)result)
    {
      id v16 = objc_msgSend(v14, sel_relativeString);
      id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      uint64_t v15 = v17;
      swift_release();
      swift_release();

      goto LABEL_26;
    }

    if (v2)
    {
      id v7 = *(id *)(v2 + 16);
      uint64_t v15 = *(void **)(v2 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();

      goto LABEL_26;
    }

    __break(1u);
    goto LABEL_30;
  }

  unint64_t v46 = 0LL;
  unint64_t v47 = 0xE000000000000000LL;
  id v13 = v9;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    id v18 = objc_msgSend(v13, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    swift_release();
    swift_release();

    goto LABEL_21;
  }

  if (!v2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  swift_bridgeObjectRetain();
  swift_release();
  swift_release();

LABEL_21:
  uint64_t v19 = specialized Collection.prefix(_:)(120LL);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  v26._Swift::Int countAndFlagsBits = MEMORY[0x186E1B610](v19, v21, v23, v25);
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27._Swift::Int countAndFlagsBits = 0x202E2E2E20LL;
  v27._unint64_t object = (void *)0xE500000000000000LL;
  String.append(_:)(v27);
  id v28 = v13;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    id v31 = objc_msgSend(v28, sel_relativeString);
    id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    unint64_t v29 = v32;
    swift_release();
    swift_release();

    goto LABEL_25;
  }

  if (v2)
  {
    id v30 = *(id *)(v2 + 16);
    unint64_t v29 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

LABEL_25:
    unint64_t v33 = specialized BidirectionalCollection.suffix(_:)(8uLL, (uint64_t)v30, v29);
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    v40._Swift::Int countAndFlagsBits = MEMORY[0x186E1B610](v33, v35, v37, v39);
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v7 = v46;
    uint64_t v15 = (void *)v47;
LABEL_26:
    URL.baseURL.getter((uint64_t *)&v46);
    id v41 = v46;
    if (v46)
    {
      unint64_t v43 = v47;
      uint64_t v42 = v48;
      unint64_t v46 = 0LL;
      unint64_t v47 = 0xE000000000000000LL;
      v44._Swift::Int countAndFlagsBits = (uint64_t)v7;
      v44._unint64_t object = v15;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._Swift::Int countAndFlagsBits = 539831584LL;
      v45._unint64_t object = (void *)0xE400000000000000LL;
      String.append(_:)(v45);
      specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v41, v43, v42);
      outlined consume of URL?(v41);
      return (uint64_t)v46;
    }

    return (uint64_t)v7;
  }

unint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2)
  {
    unsigned __int8 v13 = 0;
    return v13 | ((v2 == 0) << 8);
  }

  uint64_t v5 = (v2 << 16) | 0xB;
  unint64_t v6 = a1 & 0x800000000000000LL;
  if ((a1 & 0x800000000000000LL) != 0) {
    uint64_t v5 = (v2 << 16) | 7;
  }
  unint64_t v7 = v6 >> 59;
  uint64_t v8 = 4LL << (v6 >> 59);
  if ((a2 & 0x1000000000000000LL) != 0) {
    unint64_t result = v5;
  }
  else {
    unint64_t result = (v2 << 16) | 7;
  }
  uint64_t v10 = 8LL;
  if ((a2 & 0x1000000000000000LL) != 0) {
    uint64_t v10 = v8;
  }
  if ((result & 0xC) == v10 && (unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a1, a2), result < 0x4000))
  {
    __break(1u);
  }

  else if ((a2 & 0x1000000000000000LL) == 0)
  {
    unint64_t v11 = (result & 0xFFFFFFFFFFFF0000LL) - 65532;
    LOBYTE(v7) = 1;
    goto LABEL_15;
  }

  if (v2 >= result >> 16)
  {
    unint64_t v11 = String.UTF8View._foreignIndex(before:)();
LABEL_15:
    if ((v11 & 0xC) == 4LL << v7) {
      unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, a2);
    }
    unint64_t v12 = v11 >> 16;
    if (v11 >> 16 >= v2)
    {
      __break(1u);
    }

    else
    {
      if ((a2 & 0x1000000000000000LL) != 0)
      {
        unsigned __int8 v13 = String.UTF8View._foreignSubscript(position:)();
        return v13 | ((v2 == 0) << 8);
      }

      if ((a2 & 0x2000000000000000LL) != 0)
      {
        v14[0] = a1;
        v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        unsigned __int8 v13 = *((_BYTE *)v14 + v12);
        return v13 | ((v2 == 0) << 8);
      }

      if ((a1 & 0x1000000000000000LL) != 0)
      {
        unsigned __int8 v13 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v11 >> 16));
        return v13 | ((v2 == 0) << 8);
      }
    }

    unsigned __int8 v13 = *(_BYTE *)(_StringObject.sharedUTF8.getter() + v12);
    return v13 | ((v2 == 0) << 8);
  }

  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0LL;
  }
  String.index(before:)();
  return String.subscript.getter();
}

void specialized BidirectionalCollection.last.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return swift_retain();
  }
  else {
    return 0LL;
  }
}

void *specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = *(void **)(a1 + 8 * v1 + 24);
  id v3 = v2;
  return v2;
}

unint64_t specialized RangeReplaceableCollection<>.popLast()()
{
  if (!(*v0 >> 62))
  {
    if (*(void *)((*v0 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_3;
    }
    return 0LL;
  }

  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    return 0LL;
  }
LABEL_3:
  unint64_t result = specialized Array._customRemoveLast()();
  if (!result)
  {
    if (*v0 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t result = v4 - 1;
      if (!__OFSUB__(v4, 1LL)) {
        return specialized Array.remove(at:)(result);
      }
    }

    else
    {
      uint64_t v2 = *(void *)((*v0 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t result = v2 - 1;
      if (!__OFSUB__(v2, 1LL)) {
        return specialized Array.remove(at:)(result);
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t specialized RangeReplaceableCollection<>.popLast()()
{
  unint64_t v1 = v0[1];
  uint64_t v2 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0LL;
  }
  String.index(before:)();
  return String.remove(at:)();
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)( unint64_t result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000LL) != 0) {
    unint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0LL;
  }
  uint64_t v8 = (uint64_t (*)(void *))result;
  uint64_t v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LODWORD(v9) = 1;
  }
  uint64_t v10 = 11LL;
  if ((_DWORD)v9) {
    uint64_t v10 = 7LL;
  }
  unint64_t v11 = v10 | (v5 << 16);
  uint64_t v12 = 4LL << v9;
  uint64_t v18 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (1)
  {
    if ((v11 & 0xC) != v12)
    {
      if ((a4 & 0x1000000000000000LL) == 0) {
        goto LABEL_12;
      }
      goto LABEL_15;
    }

    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a3, a4);
    if (result < 0x4000) {
      break;
    }
    unint64_t v11 = result;
    if ((a4 & 0x1000000000000000LL) == 0)
    {
LABEL_12:
      unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000LL) - 65532;
      goto LABEL_17;
    }

unint64_t specialized BidirectionalCollection.lastIndex(where:)( uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0LL;
  }
  while (1)
  {
    unint64_t v7 = String.index(before:)();
    v12[0] = String.subscript.getter();
    v12[1] = v8;
    char v9 = a1(v12);
    if (v4) {
      break;
    }
    char v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0) {
      return v7;
    }
    if (v7 < 0x4000) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease();
  return v7;
}

unint64_t specialized Sequence.contains(where:)( uint64_t (*a1)(void *), uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v18 = a1;
  if ((a4 & 0x2000000000000000LL) != 0) {
    unint64_t v7 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  if (!v7)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    char v16 = 0;
    return v16 & 1;
  }

  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  unint64_t v10 = 15LL;
  while (1)
  {
    unint64_t v11 = v10 & 0xC;
    unint64_t result = v10;
    if (v11 == v9) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a3, a4);
    }
    unint64_t v13 = result >> 16;
    if (result >> 16 >= v7) {
      break;
    }
    if ((a4 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v14 = result;
      if (v11 != v9) {
        goto LABEL_18;
      }
    }

    else if ((a4 & 0x2000000000000000LL) != 0)
    {
      v17[0] = a3;
      v17[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      char v14 = *((_BYTE *)v17 + v13);
      if (v11 != v9) {
        goto LABEL_18;
      }
    }

    else
    {
      unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((a3 & 0x1000000000000000LL) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      char v14 = *(_BYTE *)(result + v13);
      if (v11 != v9)
      {
LABEL_18:
        if ((a4 & 0x1000000000000000LL) == 0) {
          goto LABEL_19;
        }
        goto LABEL_22;
      }
    }

    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a3, a4);
    unint64_t v10 = result;
    if ((a4 & 0x1000000000000000LL) == 0)
    {
LABEL_19:
      unint64_t v10 = (v10 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_24;
    }

unint64_t URL.lastPathComponent.getter()
{
  uint64_t v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v22 = (uint64_t)v2;
    uint64_t v23 = v1;
    uint64_t v24 = v3;
    swift_retain();
    id v4 = v2;
    swift_retain();
    Swift::String v5 = URL.path(percentEncoded:)(1);
    Swift::Int countAndFlagsBits = v5._countAndFlagsBits;
    Swift::String v21 = v5;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      unint64_t object = (unint64_t)v5._object;
    }

    else
    {
      unint64_t object = (unint64_t)v5._object;
      if ((specialized BidirectionalCollection.last.getter(v5._countAndFlagsBits, (unint64_t)v5._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        Swift::Int countAndFlagsBits = v21._countAndFlagsBits;
        unint64_t object = (unint64_t)v21._object;
      }
    }

    uint64_t v22 = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v20, 0x2FuLL);
    uint64_t v11 = v22;
    if ((object & 0x2000000000000000LL) != 0) {
      uint64_t v12 = HIBYTE(object) & 0xF;
    }
    else {
      uint64_t v12 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v12)
    {
      swift_bridgeObjectRetain();
      if ((object & 0x1000000000000000LL) != 0)
      {
        uint64_t v15 = 0LL;
        unint64_t v16 = 1LL;
      }

      else
      {
        if ((object & 0x2000000000000000LL) != 0)
        {
          uint64_t v22 = countAndFlagsBits;
          uint64_t v23 = object & 0xFFFFFFFFFFFFFFLL;
          unint64_t v13 = &v22;
          uint64_t v14 = HIBYTE(object) & 0xF;
        }

        else if ((countAndFlagsBits & 0x1000000000000000LL) != 0)
        {
          unint64_t v13 = (uint64_t *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v14 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          unint64_t v13 = (uint64_t *)_StringObject.sharedUTF8.getter();
        }

        uint64_t v15 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v13, v14, v11);
        unint64_t v16 = v17;
      }

      if (v16 == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( countAndFlagsBits,  object,  v11);
        unint64_t v16 = v18;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v16) {
          goto LABEL_22;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_22;
        }
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = 0LL;
      unint64_t v16 = 0xE000000000000000LL;
      goto LABEL_25;
    }

    swift_bridgeObjectRelease();
    uint64_t v15 = 0LL;
    unint64_t v16 = 0xE000000000000000LL;
LABEL_22:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_25:
    swift_bridgeObjectRetain();
    unint64_t Path = String._lastPathComponent.getter(v15, v16);
    swift_bridgeObjectRelease_n();
    return Path;
  }

  id v8 = objc_msgSend(v2, sel_lastPathComponent);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = v8;
  unint64_t Path = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return Path;
}

uint64_t URL.resourceValues(forKeys:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return URL.resourceValues(forKeys:)(a1, (SEL *)&selRef_resourceValuesForKeys_error_, a2);
}

uint64_t URLResourceValues.parentDirectory.getter@<X0>(void *a1@<X8>)
{
  return URLResourceValues.parentDirectory.getter(MEMORY[0x189603D08], a1);
}

uint64_t URLResourceValues.volumeSupportsCasePreservedNames.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603E60]);
}

uint64_t URLResourceValues.volumeSupportsCaseSensitiveNames.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603E68]);
}

uint64_t URL.withUnsafeFileSystemRepresentation<A>(_:)@<X0>( uint64_t (*a1)()@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v10 = *(void **)v4;
  uint64_t v11 = *(void *)(v4 + 8);
  uint64_t v12 = *(void *)(v4 + 16);
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v33 = (uint64_t)v10;
  uint64_t v34 = v11;
  uint64_t v35 = v12;
  swift_retain();
  id v29 = v10;
  swift_retain();
  Swift::String v13 = URL.path(percentEncoded:)(1);
  Swift::Int countAndFlagsBits = v13._countAndFlagsBits;
  Swift::String v32 = v13;
  swift_bridgeObjectRetain();
  uint64_t v30 = a2;
  id v31 = a1;
  if (String.count.getter() < 2)
  {
    unint64_t object = (unint64_t)v13._object;
  }

  else
  {
    unint64_t object = (unint64_t)v13._object;
    if ((specialized BidirectionalCollection.last.getter(v13._countAndFlagsBits, (unint64_t)v13._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
      Swift::Int countAndFlagsBits = v32._countAndFlagsBits;
      unint64_t object = (unint64_t)v32._object;
    }
  }

  uint64_t v33 = Set.init(minimumCapacity:)();
  specialized Set._Variant.insert(_:)(&v36, 0x2FuLL);
  uint64_t v17 = v33;
  unint64_t v18 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000LL) != 0) {
    uint64_t v19 = HIBYTE(object) & 0xF;
  }
  else {
    uint64_t v19 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v19)
  {
    v26[1] = v26;
    swift_bridgeObjectRetain();
    if ((object & 0x1000000000000000LL) != 0)
    {
      a1 = 0LL;
      unint64_t v18 = 1LL;
    }

    else
    {
      if ((object & 0x2000000000000000LL) != 0)
      {
        uint64_t v33 = countAndFlagsBits;
        uint64_t v34 = object & 0xFFFFFFFFFFFFFFLL;
        char v20 = &v33;
        uint64_t v21 = HIBYTE(object) & 0xF;
      }

      else if ((countAndFlagsBits & 0x1000000000000000LL) != 0)
      {
        char v20 = (uint64_t *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v21 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        char v20 = (uint64_t *)_StringObject.sharedUTF8.getter();
      }

      uint64_t v22 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v20, v21, v17);
      if (!v5)
      {
        a1 = (uint64_t (*)())v22;
        unint64_t v18 = v23;
      }
    }

    if (v18 == 1)
    {
      swift_bridgeObjectRetain();
      a1 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( countAndFlagsBits,  object,  v17);
      unint64_t v18 = v24;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      if (v18) {
        goto LABEL_21;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_21;
      }
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t v25 = swift_bridgeObjectRelease();
    a1 = 0LL;
    unint64_t v18 = 0xE000000000000000LL;
    goto LABEL_24;
  }

  swift_bridgeObjectRelease();
  a1 = 0LL;
  unint64_t v18 = 0xE000000000000000LL;
LABEL_21:
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v25 = swift_bridgeObjectRelease();
LABEL_24:
  MEMORY[0x1895F8858](v25);
  String.withFileSystemRepresentation<A>(_:)( (void (*)(char *))partial apply for closure #1 in URL.withUnsafeFileSystemRepresentation<A>(_:),  (uint64_t)a1,  v18,  v27,  v28);
  return swift_bridgeObjectRelease();
}

uint64_t URL.scheme.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    id v7 = objc_msgSend(v1, sel_scheme);
    if (v7)
    {
      id v8 = v7;
      id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

      return (uint64_t)v6;
    }

    return 0LL;
  }

  if (v2)
  {
    if (*(_BYTE *)(v2 + 48) != 1) {
      goto LABEL_6;
    }
    if (!v3) {
      return 0LL;
    }
    if ((*(_BYTE *)(v3 + 48) & 1) == 0)
    {
LABEL_6:
      uint64_t v5 = String.subscript.getter();
      id v6 = (id)MEMORY[0x186E1B610](v5);
      swift_bridgeObjectRelease();
      return (uint64_t)v6;
    }

    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t URL.user.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.user(percentEncoded:), (SEL *)&selRef_user);
}

uint64_t URL.password.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.password(percentEncoded:), (SEL *)&selRef_password);
}

uint64_t URL.host.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.host(percentEncoded:), (SEL *)&selRef_host);
}

uint64_t URL.port.getter()
{
  uint64_t v2 = *(void **)v0;
  uint64_t v1 = *(_BYTE **)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    id v5 = objc_msgSend(v2, sel_port);
    if (!v5) {
      return 0LL;
    }
    id v6 = v5;
    id v7 = objc_msgSend(v5, sel_integerValue);

    return (uint64_t)v7;
  }

  if (v1)
  {
    if (v1[72] == 1 && v1[96] == 1 && v1[120] == 1 && (v1[144] & 1) != 0 && !v3) {
      return 0LL;
    }
    return URLParseInfo.port.getter();
  }

  __break(1u);
  return result;
}

uint64_t URL.query.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.query(percentEncoded:), (SEL *)&selRef_query);
}

uint64_t URL.fragment.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.fragment(percentEncoded:), (SEL *)&selRef_fragment);
}

uint64_t URL.user.getter(uint64_t (*a1)(uint64_t), SEL *a2)
{
  id v5 = *v2;
  id v7 = [v5 *a2];
  if (!v7) {
    return 0LL;
  }
  id v8 = v7;
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return (uint64_t)v6;
}

uint64_t specialized static RFC3986Parser.percentEncodePath<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0LL;
  }
  unint64_t v7 = specialized Collection<>.firstIndex(of:)(0x2Fu, a1, a2);
  if ((v8 & 1) != 0)
  {
    unint64_t v69 = a1;
    unint64_t v70 = a2;
    swift_bridgeObjectRetain();
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t v65 = 0LL;
      unint64_t v66 = 0LL;
    }

    else
    {
      if ((a2 & 0x2000000000000000LL) != 0)
      {
        unint64_t v71 = a1;
        uint64_t v72 = a2 & 0xFFFFFFFFFFFFFFLL;
        Swift::String v13 = &v71;
        uint64_t v14 = v2;
      }

      else
      {
        if ((a1 & 0x1000000000000000LL) != 0)
        {
          Swift::String v13 = (void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }

        else
        {
          Swift::String v13 = (void *)_StringObject.sharedUTF8.getter();
          uint64_t v3 = v60;
        }

        uint64_t v14 = v3;
      }

      specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)( (uint64_t)v13,  v14,  32LL,  (uint64_t *)&v65);
    }

    uint64_t v12 = v65;
    unint64_t v50 = v66;
    swift_bridgeObjectRelease();
    if (!v50)
    {
      unint64_t v51 = v69;
      unint64_t v52 = v70;
      swift_bridgeObjectRetain();
      unint64_t v53 = v51;
      unint64_t v54 = v52;
      unsigned __int8 v55 = 32;
LABEL_35:
      uint64_t v12 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v53, v54, v55);
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    unint64_t v9 = v7;
    if (v7 >= 0x4000)
    {
      uint64_t v15 = String.subscript.getter();
      unint64_t v17 = v16;
      unint64_t v65 = v15;
      unint64_t v66 = v18;
      unint64_t v67 = v19;
      unint64_t v68 = v16;
      MEMORY[0x1895F8858](v15);
      unint64_t v63 = (uint64_t *)&v65;
      char v64 = 32;
      unint64_t v23 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v62,  v21,  v22,  v20,  v17);
      if (v24)
      {
        uint64_t v25 = (uint64_t)v23;
        unint64_t v26 = v24;
      }

      else
      {
        unint64_t v27 = v65;
        unint64_t v28 = v66;
        unint64_t v29 = v67;
        unint64_t v30 = v68;
        swift_bridgeObjectRetain();
        uint64_t v25 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v27, v28, v29, v30, 0x20u);
        unint64_t v26 = v31;
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      unint64_t v32 = specialized Collection.suffix(from:)(v9, a1, a2);
      unint64_t v34 = v33;
      unint64_t v65 = v32;
      unint64_t v66 = v35;
      unint64_t v67 = v36;
      unint64_t v68 = v33;
      MEMORY[0x1895F8858](v32);
      unint64_t v63 = (uint64_t *)&v65;
      char v64 = 16;
      Swift::String v40 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v62,  v38,  v39,  v37,  v34);
      if (v41)
      {
        uint64_t v42 = (uint64_t)v40;
        unint64_t v43 = v41;
      }

      else
      {
        unint64_t v44 = v65;
        unint64_t v45 = v66;
        unint64_t v46 = v67;
        unint64_t v47 = v68;
        swift_bridgeObjectRetain();
        uint64_t v42 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v44, v45, v46, v47, 0x10u);
        unint64_t v43 = v48;
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      unint64_t v65 = v25;
      unint64_t v66 = v26;
      swift_bridgeObjectRetain();
      v49._Swift::Int countAndFlagsBits = v42;
      v49._unint64_t object = v43;
      String.append(_:)(v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v65;
    }

    else
    {
      unint64_t v69 = a1;
      unint64_t v70 = a2;
      swift_bridgeObjectRetain();
      if ((a2 & 0x1000000000000000LL) != 0)
      {
        unint64_t v65 = 0LL;
        unint64_t v66 = 0LL;
      }

      else
      {
        if ((a2 & 0x2000000000000000LL) != 0)
        {
          unint64_t v71 = a1;
          uint64_t v72 = a2 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v10 = &v71;
          uint64_t v11 = v2;
        }

        else
        {
          if ((a1 & 0x1000000000000000LL) != 0)
          {
            unint64_t v10 = (void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }

          else
          {
            unint64_t v10 = (void *)_StringObject.sharedUTF8.getter();
            uint64_t v3 = v61;
          }

          uint64_t v11 = v3;
        }

        specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)( (uint64_t)v10,  v11,  16LL,  (uint64_t *)&v65);
      }

      uint64_t v12 = v65;
      unint64_t v56 = v66;
      swift_bridgeObjectRelease();
      if (!v56)
      {
        unint64_t v57 = v69;
        unint64_t v58 = v70;
        swift_bridgeObjectRetain();
        unint64_t v53 = v57;
        unint64_t v54 = v58;
        unsigned __int8 v55 = 16;
        goto LABEL_35;
      }
    }
  }

  return v12;
}

uint64_t specialized static RFC3986Parser.percentEncodePath<A>(_:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a1 >> 14;
  unint64_t v5 = a2 >> 14;
  if (a1 >> 14 == a2 >> 14) {
    return 0LL;
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized Collection<>.firstIndex(of:)(0x2Fu, a1, a2, a3, a4);
  char v13 = v12;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
    unint64_t v71 = a1;
    unint64_t v72 = a2;
    unint64_t v73 = a3;
    unint64_t v74 = a4;
    MEMORY[0x1895F8858](result);
    unint64_t v66 = &v71;
    char v67 = 32;
    swift_bridgeObjectRetain();
    uint64_t v6 = (uint64_t)_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v65,  a1,  a2,  a3,  a4);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    if (v27) {
      return v6;
    }
    unint64_t v28 = v71;
    unint64_t v29 = v72;
    unint64_t v30 = v73;
    unint64_t v31 = v74;
    swift_bridgeObjectRetain();
    unint64_t v21 = v28;
    unint64_t v22 = v29;
    unint64_t v23 = v30;
    unint64_t v24 = v31;
    unsigned __int8 v25 = 32;
    goto LABEL_9;
  }

  if (v11 >> 14 == v4)
  {
    unint64_t v71 = a1;
    unint64_t v72 = a2;
    unint64_t v73 = a3;
    unint64_t v74 = a4;
    MEMORY[0x1895F8858](result);
    unint64_t v66 = &v71;
    char v67 = 16;
    swift_bridgeObjectRetain();
    uint64_t v6 = (uint64_t)_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v65,  a1,  a2,  a3,  a4);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    if (v16) {
      return v6;
    }
    unint64_t v17 = v71;
    unint64_t v18 = v72;
    unint64_t v19 = v73;
    unint64_t v20 = v74;
    swift_bridgeObjectRetain();
    unint64_t v21 = v17;
    unint64_t v22 = v18;
    unint64_t v23 = v19;
    unint64_t v24 = v20;
    unsigned __int8 v25 = 16;
LABEL_9:
    uint64_t v6 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease();
    return v6;
  }

  if (v11 >> 14 >= v4)
  {
    uint64_t v32 = Substring.subscript.getter();
    unint64_t v34 = v33;
    unint64_t v71 = v32;
    unint64_t v72 = v35;
    unint64_t v73 = v36;
    unint64_t v74 = v33;
    MEMORY[0x1895F8858](v32);
    unint64_t v66 = &v71;
    char v67 = 32;
    Swift::String v40 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v65,  v38,  v39,  v37,  v34);
    if (v41)
    {
      unint64_t v42 = v41;
      unint64_t v70 = v40;
    }

    else
    {
      uint64_t v69 = 0LL;
      unint64_t v70 = (void *)v71;
      unint64_t v43 = v72;
      unint64_t v68 = v73;
      unint64_t v44 = v74;
      swift_bridgeObjectRetain();
      unint64_t v70 = (void *)specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)( (unint64_t)v70,  v43,  v68,  v44,  0x20u);
      unint64_t v46 = v45;
      swift_bridgeObjectRelease();
      unint64_t v42 = v46;
    }

    uint64_t result = swift_bridgeObjectRelease();
    if (v5 >= v11 >> 14)
    {
      uint64_t v47 = Substring.subscript.getter();
      unint64_t v49 = v48;
      unint64_t v71 = v47;
      unint64_t v72 = v50;
      unint64_t v73 = v51;
      unint64_t v74 = v48;
      MEMORY[0x1895F8858](v47);
      unint64_t v66 = &v71;
      char v67 = 16;
      unsigned __int8 v55 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5( (void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply,  (uint64_t)v65,  v53,  v54,  v52,  v49);
      if (v56)
      {
        uint64_t v57 = (uint64_t)v55;
        unint64_t v58 = v56;
      }

      else
      {
        unint64_t v59 = v71;
        unint64_t v60 = v72;
        unint64_t v61 = v73;
        unint64_t v62 = v74;
        swift_bridgeObjectRetain();
        uint64_t v57 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v59, v60, v61, v62, 0x10u);
        unint64_t v58 = v63;
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      unint64_t v71 = (unint64_t)v70;
      unint64_t v72 = v42;
      swift_bridgeObjectRetain();
      v64._Swift::Int countAndFlagsBits = v57;
      v64._unint64_t object = v58;
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v71;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

Swift::Int specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)( unint64_t a1, unint64_t a2)
{
  unint64_t v4 = specialized Collection.first.getter(a1, a2);
  if ((v4 & 0x1FF) != 0x5B) {
    return 0LL;
  }
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int result = String.UTF8View._foreignCount()();
    if (__OFSUB__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    uint64_t v6 = (a1 >> 59) & 1;
    unint64_t v4 = MEMORY[0x186E1B838](15LL, result - 1, a1, a2);
LABEL_7:
    if ((v4 & 0xC) != 4LL << v6) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  if (v5)
  {
    unint64_t v4 = (v5 << 16) - 65532;
    LOBYTE(v6) = 1;
    goto LABEL_7;
  }

  __break(1u);
LABEL_24:
  unint64_t v4 = _StringGuts._slowEnsureMatchingEncoding(_:)(v4, a1, a2);
LABEL_8:
  unint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v7 = HIBYTE(a2) & 0xF;
  }
  unint64_t v8 = v4 >> 16;
  if (v4 >> 16 >= v7)
  {
    __break(1u);
LABEL_26:
    uint64_t v9 = _StringObject.sharedUTF8.getter();
    goto LABEL_15;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    char v10 = String.UTF8View._foreignSubscript(position:)();
    return v10 == 93;
  }

  if ((a2 & 0x2000000000000000LL) != 0)
  {
    v12[0] = a1;
    v12[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    char v10 = *((_BYTE *)v12 + v8);
    return v10 == 93;
  }

  if ((a1 & 0x1000000000000000LL) == 0) {
    goto LABEL_26;
  }
  uint64_t v9 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_15:
  char v10 = *(_BYTE *)(v9 + v8);
  return v10 == 93;
}

BOOL specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( unsigned __int16 *a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  unsigned int v4 = a3;
  if ((a4 & 1) == 0)
  {
    if (!a1 || !a2) {
      return 1LL;
    }
    unsigned int v13 = *a1;
    if (v13 <= 0x7F)
    {
      uint64_t v14 = 2 * a2 - 2;
      uint64_t v15 = a1 + 1;
      while (2)
      {
        switch((char)v13)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_47:
            if ((a3 & 0xF6) == 0) {
              return 0LL;
            }
            goto LABEL_70;
          case '&':
LABEL_53:
            if ((a3 & 0x76) == 0) {
              return 0LL;
            }
            goto LABEL_70;
          case '+':
            if ((a3 & 0xF7) == 0) {
              return 0LL;
            }
            goto LABEL_70;
          case '-':
          case '.':
            goto LABEL_69;
          case '/':
LABEL_55:
            if (a3 < 0x10u) {
              return 0LL;
            }
            goto LABEL_70;
          default:
            break;
        }

        switch((char)v13)
        {
          case ':':
            if ((a3 & 0xD2) == 0) {
              return 0LL;
            }
            goto LABEL_70;
          case ';':
            goto LABEL_47;
          case '=':
            goto LABEL_53;
          case '?':
            if (a3 < 0x40u) {
              return 0LL;
            }
            goto LABEL_70;
          case '@':
            goto LABEL_55;
          default:
            if (v13 == 95)
            {
              if (a3 < 2u) {
                return 0LL;
              }
            }

            else if ((v13 - 123) > 0xE5u)
            {
LABEL_69:
              if (!a3) {
                return 0LL;
              }
            }

            else
            {
              BOOL result = 0LL;
            }

uint64_t specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( unint64_t a1, unint64_t a2, unsigned __int8 a3, char a4)
{
  if ((a4 & 1) != 0)
  {
    uint64_t v7 = 0LL;
    if ((a2 & 0x2000000000000000LL) != 0) {
      unint64_t v8 = HIBYTE(a2) & 0xF;
    }
    else {
      unint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v8)
    {
      uint64_t v9 = (a1 >> 59) & 1;
      if ((a2 & 0x1000000000000000LL) == 0) {
        LOBYTE(v9) = 1;
      }
      uint64_t v10 = 4LL << v9;
      uint64_t v25 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v26 = a2 & 0xFFFFFFFFFFFFFFLL;
      char v24 = a3 & 0xF6;
      char v22 = a3 & 0xF7;
      int v23 = a3 & 0x76;
      char v21 = a3 & 0xD2;
      unint64_t v11 = 15LL;
      while (1)
      {
        unint64_t v12 = v11 & 0xC;
        unint64_t v13 = v11;
        if (v12 == v10) {
          unint64_t v13 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, a2);
        }
        unint64_t v14 = v13 >> 16;
        if (v13 >> 16 >= v8)
        {
          __break(1u);
LABEL_63:
          __break(1u);
          JUMPOUT(0x18347B7A4LL);
        }

        if ((a2 & 0x1000000000000000LL) != 0)
        {
          unsigned __int8 v16 = String.UTF8View._foreignSubscript(position:)();
          if (v12 != v10) {
            goto LABEL_21;
          }
        }

        else if ((a2 & 0x2000000000000000LL) != 0)
        {
          v27[0] = a1;
          v27[1] = v26;
          unsigned __int8 v16 = *((_BYTE *)v27 + v14);
          if (v12 != v10) {
            goto LABEL_21;
          }
        }

        else
        {
          uint64_t v15 = v25;
          if ((a1 & 0x1000000000000000LL) == 0) {
            uint64_t v15 = _StringObject.sharedUTF8.getter();
          }
          unsigned __int8 v16 = *(_BYTE *)(v15 + v14);
          if (v12 != v10)
          {
LABEL_21:
            if ((a2 & 0x1000000000000000LL) == 0) {
              goto LABEL_22;
            }
            goto LABEL_26;
          }
        }

        unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, a2);
        if ((a2 & 0x1000000000000000LL) == 0)
        {
LABEL_22:
          unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000LL) + 65540;
          if ((v16 & 0x80) != 0) {
            goto LABEL_60;
          }
          goto LABEL_28;
        }

BOOL specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( char *a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  unsigned int v4 = a3;
  if ((a4 & 1) == 0)
  {
    if (!a1 || !a2) {
      return 1LL;
    }
    if ((*a1 & 0x80000000) == 0)
    {
      int v13 = *a1;
      uint64_t v14 = a2 - 1;
      uint64_t v15 = a1 + 1;
      while (2)
      {
        switch(v13)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_46:
            if ((a3 & 0xF6) == 0) {
              return 0LL;
            }
            goto LABEL_69;
          case '&':
LABEL_52:
            if ((a3 & 0x76) == 0) {
              return 0LL;
            }
            goto LABEL_69;
          case '+':
            if ((a3 & 0xF7) == 0) {
              return 0LL;
            }
            goto LABEL_69;
          case '-':
          case '.':
            goto LABEL_68;
          case '/':
LABEL_54:
            if (a3 < 0x10u) {
              return 0LL;
            }
            goto LABEL_69;
          default:
            break;
        }

        switch(v13)
        {
          case ':':
            if ((a3 & 0xD2) == 0) {
              return 0LL;
            }
            goto LABEL_69;
          case ';':
            goto LABEL_46;
          case '=':
            goto LABEL_52;
          case '?':
            if (a3 < 0x40u) {
              return 0LL;
            }
            goto LABEL_69;
          case '@':
            goto LABEL_54;
          default:
            if (v13 == 95)
            {
              if (a3 < 2u) {
                return 0LL;
              }
            }

            else if ((v13 - 123) > 0xFFFFFFE5)
            {
LABEL_68:
              if (!a3) {
                return 0LL;
              }
            }

            else
            {
              BOOL result = 0LL;
              if (v13 != 126 || a3 < 2u) {
                return result;
              }
            }

BOOL specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5, char a6)
{
  unint64_t v10 = a2 >> 14;
  if ((a6 & 1) == 0)
  {
    if (a1 >> 14 == a2 >> 14) {
      return 1LL;
    }
    uint64_t v21 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000LL) == 0) {
      LOBYTE(v21) = 1;
    }
    uint64_t v22 = 4LL << v21;
    if ((a4 & 0x2000000000000000LL) != 0) {
      unint64_t v23 = HIBYTE(a4) & 0xF;
    }
    else {
      unint64_t v23 = a3 & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain();
    unint64_t v24 = a1;
    while (1)
    {
      char v25 = Substring.UTF8View.subscript.getter();
      if ((v24 & 0xC) == v22)
      {
        unint64_t v24 = _StringGuts._slowEnsureMatchingEncoding(_:)(v24, a3, a4);
        if ((a4 & 0x1000000000000000LL) != 0)
        {
LABEL_62:
          if (v23 <= v24 >> 16)
          {
            __break(1u);
LABEL_70:
            __break(1u);
            JUMPOUT(0x18347BE68LL);
          }

          unint64_t v24 = String.UTF8View._foreignIndex(after:)();
          char v26 = v25;
          if (v25 < 0) {
            goto LABEL_50;
          }
          goto LABEL_64;
        }
      }

      else if ((a4 & 0x1000000000000000LL) != 0)
      {
        goto LABEL_62;
      }

      unint64_t v24 = (v24 & 0xFFFFFFFFFFFF0000LL) + 65540;
      char v26 = v25;
      if (v25 < 0) {
        goto LABEL_50;
      }
LABEL_64:
      if (v10 == v24 >> 14)
      {
        swift_bridgeObjectRelease();
        return 1LL;
      }
    }
  }

  if (a1 >> 14 != a2 >> 14)
  {
    uint64_t v13 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000LL) == 0) {
      LOBYTE(v13) = 1;
    }
    uint64_t v14 = 4LL << v13;
    uint64_t v15 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000LL) == 0) {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v31 = v15;
    char v30 = a5 & 0xF6;
    char v28 = a5 & 0xF7;
    int v29 = a5 & 0x76;
    char v27 = a5 & 0xD2;
    swift_bridgeObjectRetain();
    uint64_t v11 = 0LL;
    unint64_t v16 = a1;
    while (2)
    {
      unsigned __int8 v17 = Substring.UTF8View.subscript.getter();
      if ((v16 & 0xC) == v14)
      {
        unint64_t v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(v16, a3, a4);
        if ((a4 & 0x1000000000000000LL) == 0) {
          goto LABEL_15;
        }
      }

      else if ((a4 & 0x1000000000000000LL) == 0)
      {
LABEL_15:
        if ((v17 & 0x80) != 0) {
          goto LABEL_50;
        }
        unint64_t v16 = (v16 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_21:
        switch(v17)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_22:
            char v19 = v30;
            goto LABEL_23;
          case '%':
            if (v11) {
              goto LABEL_50;
            }
            uint64_t v11 = 2LL;
            if (v10 == v16 >> 14) {
              goto LABEL_67;
            }
            continue;
          case '&':
LABEL_28:
            if (!v29) {
              goto LABEL_50;
            }
            goto LABEL_43;
          case '+':
            char v19 = v28;
LABEL_23:
            if (!v19) {
              goto LABEL_50;
            }
            goto LABEL_43;
          case '-':
          case '.':
            goto LABEL_42;
          case '/':
LABEL_30:
            if (a5 <= 0xFu) {
              goto LABEL_50;
            }
            goto LABEL_43;
          default:
            if ((v17 - 58) <= 0xF5u)
            {
              switch(v17)
              {
                case ':':
                  char v19 = v27;
                  goto LABEL_23;
                case ';':
                  goto LABEL_22;
                case '=':
                  goto LABEL_28;
                case '?':
                  if (a5 <= 0x3Fu) {
                    goto LABEL_50;
                  }
                  goto LABEL_43;
                case '@':
                  goto LABEL_30;
                default:
                  if (v17 == 95) {
                    goto LABEL_40;
                  }
                  if (v17 != 126) {
                    goto LABEL_50;
                  }
LABEL_40:
                  if (a5 <= 1u) {
                    goto LABEL_50;
                  }
                  goto LABEL_43;
              }
            }

unint64_t specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)( unint64_t a1, unint64_t a2)
{
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100) != 0)
  {
LABEL_102:
    __break(1u);
  }

  else
  {
    if (result == 91)
    {
      uint64_t v2 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x1000000000000000LL) == 0)
      {
        uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
        if ((a2 & 0x2000000000000000LL) != 0) {
          uint64_t v12 = HIBYTE(a2) & 0xF;
        }
        if (!v12)
        {
          __break(1u);
LABEL_38:
          unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a1, a2);
LABEL_9:
          if ((a2 & 0x2000000000000000LL) != 0) {
            unint64_t v13 = v2;
          }
          else {
            unint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
          }
          unint64_t v14 = result >> 16;
          if (result >> 16 >= v13)
          {
            __break(1u);
          }

          else if ((a2 & 0x1000000000000000LL) != 0)
          {
            if (String.UTF8View._foreignSubscript(position:)() == 93)
            {
              unint64_t v14 = String.UTF8View._foreignIndex(after:)();
              Swift::Int v16 = String.UTF8View._foreignCount()();
              if (__OFSUB__(v16, 1LL))
              {
LABEL_42:
                __break(1u);
                goto LABEL_43;
              }

              unint64_t v3 = MEMORY[0x186E1B838](15LL, v16 - 1, a1, a2);
              goto LABEL_24;
            }
          }

          else
          {
            if ((a2 & 0x2000000000000000LL) == 0)
            {
              if ((a1 & 0x1000000000000000LL) != 0) {
                uint64_t v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
              }
              else {
                uint64_t v15 = _StringObject.sharedUTF8.getter();
              }
              if (*(_BYTE *)(v15 + v14) != 93) {
                goto LABEL_40;
              }
              goto LABEL_23;
            }

            unint64_t v68 = a1;
            uint64_t v69 = a2 & 0xFFFFFFFFFFFFFFLL;
            if (*((_BYTE *)&v68 + v14) == 93)
            {
LABEL_23:
              unint64_t v14 = 65540LL;
              unint64_t v3 = (v13 << 16) - 65532;
LABEL_24:
              if (v3 >> 14 >= v14 >> 14)
              {
                swift_bridgeObjectRetain();
                unint64_t v4 = String.subscript.getter();
                unint64_t v6 = v17;
                unint64_t v5 = v18;
                unint64_t v3 = v19;
                unint64_t v20 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2);
                if ((v21 & 1) != 0)
                {
                  char v22 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v4,  v6,  v5,  v3,  2u,  0);
                  if (v22 == 2)
                  {
                    unint64_t v68 = v4;
                    uint64_t v69 = v6;
                    unint64_t v70 = v5;
                    unint64_t v71 = v3;
                    lazy protocol witness table accessor for type Substring and conformance Substring();
                    StringProtocol._ephemeralString.getter();
                    unint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    unint64_t v24 = (unsigned __int16 *)objc_msgSend(v23, sel__fastCharacterContents);
                    id v25 = v23;
                    if (v24)
                    {
                      unint64_t v68 = v4;
                      uint64_t v69 = v6;
                      unint64_t v70 = v5;
                      unint64_t v71 = v3;
                      StringProtocol._ephemeralString.getter();
                      char v26 = (void *)String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      id v27 = objc_msgSend(v26, sel_length);
                      swift_unknownObjectRelease();
                      char v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v24,  (uint64_t)v27,  2u,  0);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }

                    else
                    {
                      swift_bridgeObjectRetain();
                      char v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v4,  v6,  v5,  v3,  2u,  0);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                    }
                  }

                  else
                  {
                    char v29 = v22;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    char v28 = v29 & 1;
                  }

                  return v28 & 1;
                }

                unint64_t v14 = v20;
                if ((v20 & 0xC) != v8)
                {
                  unint64_t v67 = v4;
                  if ((a2 & 0x1000000000000000LL) != 0)
                  {
LABEL_44:
                    if (v13 <= v20 >> 16)
                    {
                      __break(1u);
                      goto LABEL_65;
                    }

                    unint64_t v7 = String.UTF8View._foreignIndex(after:)();
LABEL_46:
                    unint64_t v4 = 4 * v13;
                    if (4 * v13 == v7 >> 14)
                    {
LABEL_61:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      char v28 = 0;
                      return v28 & 1;
                    }

                    unint64_t v3 = v6;
                    unint64_t v5 = v7 & 0xC;
                    unint64_t v30 = v7;
                    if (v5 != v8)
                    {
LABEL_49:
                      unint64_t v31 = v30 >> 16;
                      if (v30 >> 16 >= v13)
                      {
                        __break(1u);
                      }

                      else
                      {
                        if ((a2 & 0x1000000000000000LL) != 0)
                        {
                          char v32 = String.UTF8View._foreignSubscript(position:)();
                        }

                        else if ((a2 & 0x2000000000000000LL) != 0)
                        {
                          unint64_t v68 = a1;
                          uint64_t v69 = a2 & 0xFFFFFFFFFFFFFFLL;
                          char v32 = *((_BYTE *)&v68 + v31);
                        }

                        else if ((a1 & 0x1000000000000000LL) != 0)
                        {
                          char v32 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v30 >> 16));
                        }

                        else
                        {
                          char v32 = *(_BYTE *)(_StringObject.sharedUTF8.getter() + v31);
                        }

                        if (v32 != 50) {
                          goto LABEL_61;
                        }
                        unint64_t v31 = v3;
                        if (v5 != v8)
                        {
                          if ((a2 & 0x1000000000000000LL) == 0) {
                            goto LABEL_59;
                          }
                          goto LABEL_68;
                        }
                      }

                      unint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a1, a2);
                      if ((a2 & 0x1000000000000000LL) == 0)
                      {
LABEL_59:
                        unint64_t v7 = (v7 & 0xFFFFFFFFFFFF0000LL) + 65540;
                        if (v4 == v7 >> 14) {
                          goto LABEL_61;
                        }
                        goto LABEL_70;
                      }

uint64_t URLResourceValues.localizedName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x189603CE0]);
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  unint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)v6)
  {
    id v12 = objc_msgSend(v3, sel__cfurl);
    unint64_t v13 = (void *)_CFURLCopyPath();
    if (v13)
    {
      unint64_t v14 = v13;
      uint64_t countAndFlagsBits = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      unint64_t object = v15;

      goto LABEL_24;
    }

    goto LABEL_11;
  }

  if (!v5)
  {
    if (percentEncoded)
    {
      if (v4)
      {
        if ((*(_BYTE *)(v4 + 168) & 1) != 0) {
          uint64_t v16 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
        }
        else {
          uint64_t v16 = String.subscript.getter();
        }
        uint64_t countAndFlagsBits = MEMORY[0x186E1B610](v16);
        unint64_t object = v21;
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }

      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

    if (!v4) {
      goto LABEL_26;
    }
    if ((*(_BYTE *)(v4 + 168) & 1) != 0) {
      uint64_t v17 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      uint64_t v17 = String.subscript.getter();
    }
    unint64_t v22 = v17;
    unint64_t v23 = v18;
    unint64_t v24 = v19;
    unint64_t v25 = v20;
    unint64_t v35 = (void *)v17;
    unint64_t v36 = v18;
    unint64_t v37 = v19;
    unint64_t v38 = v20;
    if ((v17 ^ v18) >> 14)
    {
      MEMORY[0x1895F8858](v17);
      v34[2] = &v35;
      v34[3] = MEMORY[0x18961AFF8];
      swift_bridgeObjectRetain();
      char v26 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5( (void *(*)(void *__return_ptr, void, void))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v34,  v22,  v23,  v24,  v25);
      if (v27 == (void *)1)
      {
        unint64_t v28 = (unint64_t)v35;
        unint64_t v29 = v36;
        unint64_t v30 = v37;
        unint64_t v31 = v38;
        swift_bridgeObjectRetain();
        uint64_t countAndFlagsBits = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v28,  v29,  v30,  v31,  MEMORY[0x18961AFF8]);
        unint64_t object = v32;
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t countAndFlagsBits = (uint64_t)v26;
        unint64_t object = v27;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (object) {
        goto LABEL_24;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }

unint64_t URL.pathComponents.getter()
{
  uint64_t v124 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v123 = v2;
    Swift::String v3 = URL.path(percentEncoded:)(1);
    unint64_t object = v3._object;
    unint64_t v5 = 0xE100000000000000LL;
    uint64_t v121 = 47LL;
    uint64_t v122 = 0xE100000000000000LL;
    Swift::String v120 = v3;
    uint64_t countAndFlagsBits = v3._countAndFlagsBits;
    if (((uint64_t)v3._object & 0x1000000000000000LL) != 0)
    {
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      unint64_t v42 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      StringProtocol._ephemeralString.getter();
      uint64_t v43 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v44 = objc_msgSend(v42, sel_componentsSeparatedByString_, v43);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (!v44)
      {
        uint64_t v17 = (void *)MEMORY[0x18961AFE8];
        goto LABEL_47;
      }

      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v45 = swift_dynamicCastClass();
      if (v45)
      {
        uint64_t v17 = (void *)v45;

        goto LABEL_47;
      }

      swift_unknownObjectRelease();
      objc_msgSend(v44, sel_copy);
      unint64_t v47 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      uint64_t v17 = (void *)specialized _arrayForceCast<A, B>(_:)(v47);
    }

    else
    {
      swift_bridgeObjectRetain();
      __int16 v107 = v3._object;
      unint64_t v6 = String.subscript.getter();
      unint64_t v8 = v7;
      uint64_t v116 = v9;
      uint64_t v117 = v10;
      int v113 = _stringCompareInternal(_:_:_:_:expecting:)();
      uint64_t v118 = 47LL;
      unint64_t v119 = 0xE100000000000000LL;
      uint64_t v11 = Substring.init<A>(_:)();
      unint64_t v112 = v13;
      unint64_t v114 = v14;
      unint64_t v115 = v8;
      uint64_t v15 = (unint64_t *)(v8 >> 14);
      unint64_t v16 = v6 >> 14;
      if (v6 >> 14 >= v8 >> 14)
      {
        uint64_t v17 = (void *)MEMORY[0x18961AFE8];
        goto LABEL_41;
      }

      unint64_t v109 = v12;
      unint64_t v110 = v11;
      unint64_t v111 = v11 ^ v12;
      uint64_t v17 = (void *)MEMORY[0x18961AFE8];
      unint64_t v106 = v6 >> 14;
      unint64_t v18 = v6 >> 14;
      while (1)
      {
        swift_bridgeObjectRetain();
        unint64_t v19 = v6;
        unint64_t v5 = Substring.subscript.getter();
        unint64_t v21 = v20;
        unint64_t v23 = v22;
        unint64_t v25 = v24;
        swift_bridgeObjectRelease();
        if ((v5 ^ v21) < 0x4000 || v111 < 0x4000) {
          break;
        }
        if ((v113 & 1) != 0)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v5 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v110,  v109,  v112,  v114,  0,  0,  0,  0,  0,  v5,  v21,  v23,  v25);
          unint64_t v27 = v26;
          char v29 = v28;
          swift_bridgeObjectRelease_n();
        }

        else
        {
          unint64_t v5 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v110,  v109,  v112,  v114,  0,  0,  0,  0,  0,  v5,  v21,  v23,  v25);
          unint64_t v27 = v30;
          char v29 = v31;
        }

        swift_bridgeObjectRelease();
        if ((v29 & 1) != 0)
        {
          unint64_t v16 = v18;
          goto LABEL_41;
        }

        unint64_t v16 = v27 >> 14;
        if (v5 >> 14 == v27 >> 14)
        {
          unint64_t v16 = v18;
          goto LABEL_41;
        }

        if (v5 >> 14 < v18) {
          goto LABEL_126;
        }
        uint64_t v32 = Substring.subscript.getter();
        uint64_t v33 = MEMORY[0x186E1B610](v32);
        unint64_t v5 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v17[2] + 1LL,  1,  v17);
        }
        unint64_t v36 = v17[2];
        unint64_t v35 = v17[3];
        if (v36 >= v35 >> 1) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v35 > 1),  v36 + 1,  1,  v17);
        }
        void v17[2] = v36 + 1;
        unint64_t v37 = &v17[2 * v36];
        v37[4] = v33;
        v37[5] = v5;
        swift_bridgeObjectRelease();
        unint64_t v18 = v27 >> 14;
        unint64_t v6 = v19;
      }

      if ((v5 ^ v21) < 0x4000)
      {
        unint64_t v16 = v18;
      }

      else
      {
        uint64_t v17 = (void *)MEMORY[0x18961AFE8];
        unint64_t v16 = v106;
      }

      swift_bridgeObjectRelease();
LABEL_41:
      uint64_t v48 = Substring.subscript.getter();
      unint64_t v5 = MEMORY[0x186E1B610](v48);
      uint64_t v15 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_128:
      }
        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v17[2] + 1LL,  1,  v17);
      unint64_t object = v107;
      unint64_t v51 = v17[2];
      unint64_t v50 = v17[3];
      if (v51 >= v50 >> 1) {
        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v50 > 1),  v51 + 1,  1,  v17);
      }
      void v17[2] = v51 + 1;
      unint64_t v52 = &v17[2 * v51];
      v52[4] = v5;
      v52[5] = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
LABEL_47:
    uint64_t v53 = v17[2];
    unint64_t v54 = (unint64_t *)MEMORY[0x18961AFE8];
    if (v53)
    {
      unint64_t v55 = v17 + 5;
      uint64_t v56 = MEMORY[0x18961AFE8];
      do
      {
        uint64_t v61 = *(v55 - 1);
        uint64_t v60 = *v55;
        uint64_t v62 = HIBYTE(*v55) & 0xF;
        if ((*v55 & 0x2000000000000000LL) == 0) {
          uint64_t v62 = v61 & 0xFFFFFFFFFFFFLL;
        }
        if (v62)
        {
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v121 = v56;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v56 + 16) + 1LL,  1);
            uint64_t v56 = v121;
          }

          unint64_t v58 = *(void *)(v56 + 16);
          unint64_t v57 = *(void *)(v56 + 24);
          if (v58 >= v57 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v57 > 1,  v58 + 1,  1);
            uint64_t v56 = v121;
          }

          *(void *)(v56 + 16) = v58 + 1;
          unint64_t v59 = v56 + 16 * v58;
          *(void *)(v59 + 32) = v61;
          *(void *)(v59 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v60;
        }

        v55 += 2;
        --v53;
      }

      while (v53);
    }

    else
    {
      uint64_t v56 = MEMORY[0x18961AFE8];
    }

    swift_bridgeObjectRelease();
    uint64_t v121 = v56;
    swift_bridgeObjectRetain();
    uint64_t v64 = countAndFlagsBits;
    uint64_t v65 = specialized Collection.first.getter(countAndFlagsBits, (unint64_t)object);
    uint64_t v67 = v66;
    swift_bridgeObjectRelease();
    if (v67)
    {
      if (v65 == 47 && v67 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v68 & 1) == 0) {
          goto LABEL_65;
        }
      }

      specialized Array.replaceSubrange<A>(_:with:)(0LL, 0LL, 47LL, 0xE100000000000000LL);
    }

void URLResourceValues.init()(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x18961AFF8];
  *a1 = MEMORY[0x18961AFF0];
  a1[1] = v1;
}

uint64_t specialized URLResourceValues._get<A>(_:)(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    id v3 = a1;
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v4, (uint64_t)&v7);
    }

    else
    {
      __int128 v7 = 0u;
      __int128 v8 = 0u;
    }
  }

  else
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  else {
    return 0LL;
  }
}

{
  id v3;
  uint64_t v4;
  char v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  if (*(void *)(a2 + 16))
  {
    id v3 = a1;
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v4, (uint64_t)&v7);
    }

    else
    {
      __int128 v7 = 0u;
      __int128 v8 = 0u;
    }
  }

  else
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSFileSecurity);
  else {
    return 0LL;
  }
}

uint64_t URLResourceValues._get(_:)(void *a1)
{
  uint64_t v2 = *v1;
  if (!*(void *)(v2 + 16))
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    goto LABEL_8;
  }

  id v3 = a1;
  uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) == 0)
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;

    goto LABEL_8;
  }

  outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v4, (uint64_t)&v9);

  if (!*((void *)&v10 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v9);
    return 2LL;
  }

  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0) {
    return 2LL;
  }
  id v6 = objc_msgSend(v8, sel_BOOLValue);

  return (uint64_t)v6;
}

id URLResourceValues._get(_:)(void *a1)
{
  uint64_t v2 = *v1;
  if (!*(void *)(v2 + 16))
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    goto LABEL_8;
  }

  id v3 = a1;
  uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) == 0)
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;

    goto LABEL_8;
  }

  outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v4, (uint64_t)&v9);

  if (!*((void *)&v10 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v9);
    return 0LL;
  }

  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0LL;
  }
  id v6 = objc_msgSend(v8, sel_integerValue);

  return v6;
}

uint64_t URLResourceValues._set(_:newValue:)(void *a1, unsigned __int8 a2)
{
  int v2 = a2;
  id v3 = a1;
  specialized Set._Variant.insert(_:)(&v9, v3);

  if (v2 == 2)
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    id v4 = v3;
  }

  else
  {
    id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
    id v6 = v3;
    id v7 = objc_msgSend(v5, sel_initWithBool_, v2 & 1);
    *((void *)&v10 + 1) = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    *(void *)&__int128 v9 = v7;
    id v4 = v6;
  }

  return specialized Dictionary.subscript.setter((uint64_t)&v9, v4);
}

uint64_t URLResourceValues._set(_:newValue:)(void *a1, uint64_t a2, char a3)
{
  id v5 = a1;
  specialized Set._Variant.insert(_:)(&v11, v5);

  if ((a3 & 1) != 0)
  {
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    id v9 = v5;
  }

  else
  {
    id v6 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
    id v7 = v5;
    id v8 = objc_msgSend(v6, sel_initWithInteger_, a2);
    *((void *)&v12 + 1) = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    *(void *)&__int128 v11 = v8;
    id v9 = v7;
  }

  return specialized Dictionary.subscript.setter((uint64_t)&v11, v9);
}

uint64_t URLResourceValues.allValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t URLResourceValues.name.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x189603D00]);
}

uint64_t URLResourceValues.name.setter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease();
}

uint64_t (*URLResourceValues.name.modify(void *a1))()
{
  int v2 = v1;
  id v4 = malloc(0x50uLL);
  id v5 = v4;
  *a1 = v4;
  id v6 = v4 + 3;
  uint64_t v7 = *v2;
  id v8 = (void *)*MEMORY[0x189603D00];
  *((void *)v4 + 8) = v2;
  *((void *)v4 + 9) = v8;
  if (*(void *)(v7 + 16))
  {
    id v9 = v8;
    uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if ((v11 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v10, (uint64_t)v5);
    }

    else
    {
      *id v5 = 0u;
      v5[1] = 0u;
    }
  }

  else
  {
    *id v4 = 0u;
    v4[1] = 0u;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  int v12 = swift_dynamicCast();
  __int128 v13 = 0uLL;
  if (v12) {
    __int128 v13 = *v6;
  }
  v5[2] = v13;
  return URLResourceValues.name.modify;
}

uint64_t URLResourceValues.isRegularFile.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603C88]);
}

uint64_t URLResourceValues.isDirectory.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603C48]);
}

uint64_t URLResourceValues.isSymbolicLink.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603C98]);
}

uint64_t URLResourceValues.isVolume.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603CB8]);
}

uint64_t URLResourceValues.isPackage.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603C70]);
}

uint64_t URLResourceValues.isPackage.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x189603C70], a1);
}

uint64_t (*URLResourceValues.isPackage.modify(uint64_t a1))()
{
  id v3 = (void *)*MEMORY[0x189603C70];
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.isApplication.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603C40]);
}

uint64_t URLResourceValues.isSystemImmutable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603CA0]);
}

uint64_t URLResourceValues.isUserImmutable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603CB0]);
}

uint64_t URLResourceValues.isUserImmutable.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x189603CB0], a1);
}

uint64_t (*URLResourceValues.isUserImmutable.modify(uint64_t a1))()
{
  id v3 = (void *)*MEMORY[0x189603CB0];
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.isHidden.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603C60]);
}

uint64_t URLResourceValues.isHidden.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x189603C60], a1);
}

uint64_t (*URLResourceValues.isHidden.modify(uint64_t a1))()
{
  id v3 = (void *)*MEMORY[0x189603C60];
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.hasHiddenExtension.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603C30]);
}

uint64_t URLResourceValues.hasHiddenExtension.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x189603C30], a1);
}

uint64_t (*URLResourceValues.hasHiddenExtension.modify(uint64_t a1))()
{
  id v3 = (void *)*MEMORY[0x189603C30];
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.creationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x189603B88], a1);
}

uint64_t URLResourceValues.creationDate.setter(uint64_t a1)
{
  return URLResourceValues.creationDate.setter(a1, MEMORY[0x189603B88]);
}

uint64_t (*URLResourceValues.creationDate.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  URLResourceValues.creationDate.getter(a1);
  return URLResourceValues.creationDate.modify;
}

uint64_t URLResourceValues.creationDate.modify(uint64_t a1)
{
  double v1 = *(double *)a1;
  char v2 = *(_BYTE *)(a1 + 8);
  id v3 = (id)*MEMORY[0x189603B88];
  specialized Set._Variant.insert(_:)(&v6, v3);

  if ((v2 & 1) != 0)
  {
    __int128 v6 = 0u;
    __int128 v7 = 0u;
  }

  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
    *((void *)&v7 + 1) = type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSDate);
    *(void *)&__int128 v6 = v4;
  }

  return specialized Dictionary.subscript.setter((uint64_t)&v6, v3);
}

uint64_t URLResourceValues.contentAccessDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x189603B68], a1);
}

uint64_t URLResourceValues.contentAccessDate.setter(uint64_t a1)
{
  return URLResourceValues.creationDate.setter(a1, MEMORY[0x189603B68]);
}

uint64_t URLResourceValues.creationDate.setter(uint64_t a1, id *a2)
{
  double v2 = *(double *)a1;
  char v3 = *(_BYTE *)(a1 + 8);
  id v4 = *a2;
  specialized Set._Variant.insert(_:)(&v7, v4);

  if ((v3 & 1) != 0)
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
  }

  else
  {
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v2);
    *((void *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSDate);
    *(void *)&__int128 v7 = v5;
  }

  return specialized Dictionary.subscript.setter((uint64_t)&v7, v4);
}

uint64_t (*URLResourceValues.contentAccessDate.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  URLResourceValues.contentAccessDate.getter(a1);
  return URLResourceValues.contentAccessDate.modify;
}

uint64_t URLResourceValues.contentAccessDate.modify(uint64_t a1)
{
  double v1 = *(double *)a1;
  char v2 = *(_BYTE *)(a1 + 8);
  id v3 = (id)*MEMORY[0x189603B68];
  specialized Set._Variant.insert(_:)(&v6, v3);

  if ((v2 & 1) != 0)
  {
    __int128 v6 = 0u;
    __int128 v7 = 0u;
  }

  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
    *((void *)&v7 + 1) = type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSDate);
    *(void *)&__int128 v6 = v4;
  }

  return specialized Dictionary.subscript.setter((uint64_t)&v6, v3);
}

uint64_t URLResourceValues.contentModificationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x189603B70], a1);
}

uint64_t URLResourceValues.contentModificationDate.setter(uint64_t a1)
{
  return URLResourceValues.creationDate.setter(a1, MEMORY[0x189603B70]);
}

uint64_t (*URLResourceValues.contentModificationDate.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  URLResourceValues.contentModificationDate.getter(a1);
  return URLResourceValues.contentModificationDate.modify;
}

uint64_t URLResourceValues.contentModificationDate.modify(uint64_t a1)
{
  double v1 = *(double *)a1;
  char v2 = *(_BYTE *)(a1 + 8);
  id v3 = (id)*MEMORY[0x189603B70];
  specialized Set._Variant.insert(_:)(&v6, v3);

  if ((v2 & 1) != 0)
  {
    __int128 v6 = 0u;
    __int128 v7 = 0u;
  }

  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
    *((void *)&v7 + 1) = type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSDate);
    *(void *)&__int128 v6 = v4;
  }

  return specialized Dictionary.subscript.setter((uint64_t)&v6, v3);
}

uint64_t URLResourceValues.attributeModificationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x189603B58], a1);
}

id URLResourceValues.linkCount.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x189603CD0]);
}

uint64_t URLResourceValues.volume.getter@<X0>(void *a1@<X8>)
{
  return URLResourceValues.parentDirectory.getter(MEMORY[0x189603F00], a1);
}

uint64_t URLResourceValues.typeIdentifier.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x189603D30]);
}

uint64_t URLResourceValues.localizedTypeDescription.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x189603CE8]);
}

id URLResourceValues.labelNumber.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x189603CC8]);
}

uint64_t key path getter for URLResourceValues.labelNumber : URLResourceValues@<X0>(uint64_t a1@<X8>)
{
  char v2 = (void *)*MEMORY[0x189603CC8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = URLResourceValues._get(_:)(v2);
  LOBYTE(outlined consume of Data._Representation(v0, v2) = v4;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v2 & 1;
  return result;
}

uint64_t URLResourceValues.labelNumber.setter(uint64_t a1, char a2)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x189603CC8], a1, a2 & 1);
}

uint64_t (*URLResourceValues.labelNumber.modify(uint64_t a1))(uint64_t a1)
{
  id v3 = (void *)*MEMORY[0x189603CC8];
  *(void *)(a1 + 16) = v1;
  *(void *)(a1 + 24) = v3;
  *(void *)a1 = URLResourceValues._get(_:)(v3);
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return URLResourceValues.labelNumber.modify;
}

uint64_t URLResourceValues.labelNumber.modify(uint64_t a1)
{
  return URLResourceValues._set(_:newValue:)(*(void **)(a1 + 24), *(void *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t URLResourceValues.localizedLabel.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x189603CD8]);
}

uint64_t URLResourceValues.fileResourceIdentifier.getter()
{
  return URLResourceValues.fileResourceIdentifier.getter(MEMORY[0x189603BE0]);
}

uint64_t URLResourceValues.volumeIdentifier.getter()
{
  return URLResourceValues.fileResourceIdentifier.getter(MEMORY[0x189603DC0]);
}

uint64_t URLResourceValues.fileIdentifier.getter()
{
  return URLResourceValues.fileIdentifier.getter(MEMORY[0x189603BB0]);
}

uint64_t URLResourceValues.fileContentIdentifier.getter()
{
  return URLResourceValues.fileIdentifier.getter(MEMORY[0x189603BA8]);
}

uint64_t URLResourceValues.fileIdentifier.getter(id *a1)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    id v3 = *a1;
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v4, (uint64_t)&v9);
    }

    else
    {
      __int128 v9 = 0u;
      __int128 v10 = 0u;
    }
  }

  else
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  int v6 = swift_dynamicCast();
  uint64_t v7 = v11;
  if (!v6) {
    return 0LL;
  }
  return v7;
}

id URLResourceValues.preferredIOBlockSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x189603D18]);
}

uint64_t URLResourceValues.isReadable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603C80]);
}

uint64_t URLResourceValues.isWritable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603CC0]);
}

uint64_t URLResourceValues.isExecutable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603C58]);
}

uint64_t URLResourceValues.fileSecurity.getter()
{
  return URLResourceValues.fileSecurity.getter( MEMORY[0x189603C10],  &lazy cache variable for type metadata for NSFileSecurity);
}

uint64_t key path getter for URLResourceValues.fileSecurity : URLResourceValues@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void *)*MEMORY[0x189603C10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized URLResourceValues._get<A>(_:)(v4, v3);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

void URLResourceValues.fileSecurity.setter(void *a1)
{
}

void (*URLResourceValues.fileSecurity.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  v3[6] = v1;
  uint64_t v5 = *v1;
  if (*(void *)(v5 + 16))
  {
    id v6 = (id)*MEMORY[0x189603C10];
    uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if ((v8 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v7, v4);
    }

    else
    {
      *(_OWORD *)uint64_t v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
    }
  }

  else
  {
    *(_OWORD *)uint64_t v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSFileSecurity);
  int v9 = swift_dynamicCast();
  uint64_t v10 = *(void *)(v4 + 40);
  if (!v9) {
    uint64_t v10 = 0LL;
  }
  *(void *)(v4 + 32) = v10;
  return URLResourceValues.fileSecurity.modify;
}

void URLResourceValues.fileSecurity.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = (void **)(*(void *)a1 + 32LL);
  uint64_t v3 = *v4;
  if ((a2 & 1) != 0)
  {
    id v5 = v3;
    specialized URLResourceValues.fileSecurity.setter(v3);

    uint64_t v3 = *v4;
  }

  else
  {
    specialized URLResourceValues.fileSecurity.setter(*(void **)(*(void *)a1 + 32LL));
  }

  free(v2);
}

uint64_t URLResourceValues.isExcludedFromBackup.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603C50]);
}

uint64_t URLResourceValues.isExcludedFromBackup.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x189603C50], a1);
}

uint64_t (*URLResourceValues.isExcludedFromBackup.modify(uint64_t a1))()
{
  uint64_t v3 = (void *)*MEMORY[0x189603C50];
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.path.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x189603D10]);
}

uint64_t URLResourceValues.canonicalPath.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x189603B60]);
}

uint64_t URLResourceValues.isMountTrigger.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603C68]);
}

uint64_t URLResourceValues.generationIdentifier.getter()
{
  return URLResourceValues.fileResourceIdentifier.getter(MEMORY[0x189603C28]);
}

uint64_t URLResourceValues.fileResourceIdentifier.getter(id *a1)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    id v3 = *a1;
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v4, (uint64_t)&v7);
    }

    else
    {
      __int128 v7 = 0u;
      __int128 v8 = 0u;
    }
  }

  else
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSCopying & NSSecureCoding & NSObject);
  else {
    return 0LL;
  }
}

id URLResourceValues.documentIdentifier.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x189603B98]);
}

uint64_t URLResourceValues.addedToDirectoryDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x189603B50], a1);
}

uint64_t URLResourceValues.mayHaveExtendedAttributes.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603CF0]);
}

uint64_t URLResourceValues.isPurgeable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603C78]);
}

uint64_t URLResourceValues.isSparse.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603C90]);
}

uint64_t URLResourceValues.mayShareFileContent.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603CF8]);
}

uint64_t URLResourceValues.fileResourceType.getter()
{
  return URLResourceValues.fileProtection.getter(MEMORY[0x189603BF8], type metadata accessor for NSURLFileResourceType);
}

uint64_t URLResourceValues.fileProtection.getter(id *a1, void (*a2)(void))
{
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16))
  {
    id v5 = *a1;
    uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v7 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v9);
    }

    else
    {
      __int128 v9 = 0u;
      __int128 v10 = 0u;
    }
  }

  else
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  a2(0LL);
  else {
    return 0LL;
  }
}

id URLResourceValues.directoryEntryCount.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x189603B90]);
}

uint64_t URLResourceValues.volumeLocalizedFormatDescription.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x189603E18]);
}

id URLResourceValues.volumeTotalCapacity.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x189603EE8]);
}

id URLResourceValues.volumeAvailableCapacity.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x189603DB0]);
}

id URLResourceValues.volumeResourceCount.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x189603E40]);
}

uint64_t URLResourceValues.volumeSupportsPersistentIDs.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603EA8]);
}

uint64_t URLResourceValues.volumeSupportsSymbolicLinks.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603ED0]);
}

uint64_t URLResourceValues.volumeSupportsHardLinks.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603E90]);
}

uint64_t URLResourceValues.volumeSupportsJournaling.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603EA0]);
}

uint64_t URLResourceValues.volumeIsJournaling.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603DF0]);
}

uint64_t URLResourceValues.volumeSupportsSparseFiles.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603EC0]);
}

uint64_t URLResourceValues.volumeSupportsZeroRuns.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603EE0]);
}

uint64_t URLResourceValues.volumeSupportsRootDirectoryDates.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603EB8]);
}

uint64_t URLResourceValues.volumeSupportsVolumeSizes.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603ED8]);
}

uint64_t URLResourceValues.volumeSupportsRenaming.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603EB0]);
}

uint64_t URLResourceValues.volumeSupportsAdvisoryFileLocking.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603E58]);
}

uint64_t URLResourceValues.volumeSupportsExtendedSecurity.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603E80]);
}

uint64_t URLResourceValues.volumeIsBrowsable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603DD0]);
}

id URLResourceValues.volumeMaximumFileSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x189603E28]);
}

uint64_t URLResourceValues.volumeIsEjectable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603DD8]);
}

uint64_t URLResourceValues.volumeIsRemovable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603E08]);
}

uint64_t URLResourceValues.volumeIsInternal.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603DE8]);
}

uint64_t URLResourceValues.volumeIsAutomounted.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603DC8]);
}

uint64_t URLResourceValues.volumeIsLocal.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603DF8]);
}

uint64_t URLResourceValues.volumeIsReadOnly.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603E00]);
}

uint64_t URLResourceValues.volumeCreationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x189603DB8], a1);
}

uint64_t URLResourceValues.creationDate.getter@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16))
  {
    id v5 = *a1;
    uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v7 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v9);
    }

    else
    {
      __int128 v9 = 0u;
      __int128 v10 = 0u;
    }
  }

  else
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    *(void *)a2 = 0LL;
  }
  *(_BYTE *)(a2 + 8) = result ^ 1;
  return result;
}

uint64_t URLResourceValues.volumeURLForRemounting.getter@<X0>(void *a1@<X8>)
{
  return URLResourceValues.parentDirectory.getter(MEMORY[0x189603EF8], a1);
}

uint64_t URLResourceValues.parentDirectory.getter@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16))
  {
    id v5 = *a1;
    uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v7 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v9);
    }

    else
    {
      __int128 v9 = 0u;
      __int128 v10 = 0u;
    }
  }

  else
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  return result;
}

uint64_t URLResourceValues.volumeUUIDString.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x189603F08]);
}

uint64_t URLResourceValues.volumeName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x189603E38]);
}

uint64_t key path getter for URLResourceValues.name : URLResourceValues@<X0>( uint64_t *a1@<X0>, void **a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  id v5 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized URLResourceValues._get<A>(_:)(v5, v4);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v6;
  a3[1] = v8;
  return result;
}

uint64_t key path setter for URLResourceValues.name : URLResourceValues( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, id *a5)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  specialized URLResourceValues.name.setter(v6, v7, a5);
  return swift_bridgeObjectRelease();
}

uint64_t URLResourceValues.volumeName.setter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease();
}

uint64_t (*URLResourceValues.volumeName.modify(void *a1))()
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x50uLL);
  id v5 = v4;
  *a1 = v4;
  uint64_t v6 = v4 + 3;
  uint64_t v7 = *v2;
  uint64_t v8 = (void *)*MEMORY[0x189603E38];
  *((void *)v4 + 8) = v2;
  *((void *)v4 + 9) = v8;
  if (*(void *)(v7 + 16))
  {
    id v9 = v8;
    uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if ((v11 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v10, (uint64_t)v5);
    }

    else
    {
      *id v5 = 0u;
      v5[1] = 0u;
    }
  }

  else
  {
    *uint64_t v4 = 0u;
    v4[1] = 0u;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  int v12 = swift_dynamicCast();
  __int128 v13 = 0uLL;
  if (v12) {
    __int128 v13 = *v6;
  }
  v5[2] = v13;
  return URLResourceValues.name.modify;
}

void URLResourceValues.name.modify(id **a1, char a2)
{
  uint64_t v2 = *a1;
  id v3 = (*a1)[5];
  id v4 = (*a1)[9];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v7, v4);

    if (v3)
    {
      uint64_t v5 = String._bridgeToObjectiveCImpl()();
      *((void *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
      *(void *)&__int128 v7 = v5;
    }

    else
    {
      __int128 v7 = 0u;
      __int128 v8 = 0u;
    }

    specialized Dictionary.subscript.setter((uint64_t)&v7, v2[9]);
    swift_bridgeObjectRelease();
  }

  else
  {
    specialized Set._Variant.insert(_:)(&v7, v4);

    if (v3)
    {
      uint64_t v6 = String._bridgeToObjectiveCImpl()();
      *((void *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
      *(void *)&__int128 v7 = v6;
    }

    else
    {
      __int128 v7 = 0u;
      __int128 v8 = 0u;
    }

    specialized Dictionary.subscript.setter((uint64_t)&v7, v2[9]);
  }

  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t URLResourceValues.volumeLocalizedName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x189603E20]);
}

uint64_t URLResourceValues.volumeIsEncrypted.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603DE0]);
}

uint64_t URLResourceValues.volumeIsRootFileSystem.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603E10]);
}

uint64_t URLResourceValues.volumeSupportsCompression.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603E70]);
}

uint64_t URLResourceValues.volumeSupportsFileCloning.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603E88]);
}

uint64_t URLResourceValues.volumeSupportsSwapRenaming.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603EC8]);
}

uint64_t URLResourceValues.volumeSupportsExclusiveRenaming.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603E78]);
}

uint64_t URLResourceValues.volumeSupportsImmutableFiles.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603E98]);
}

uint64_t URLResourceValues.volumeSupportsAccessPermissions.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603E50]);
}

uint64_t URLResourceValues.volumeTypeName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x189603EF0]);
}

id URLResourceValues.volumeSubtype.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x189603E48]);
}

uint64_t URLResourceValues.volumeMountFromLocation.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x189603E30]);
}

uint64_t URLResourceValues.isUbiquitousItem.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603CA8]);
}

uint64_t URLResourceValues.ubiquitousItemHasUnresolvedConflicts.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603D58]);
}

uint64_t URLResourceValues.ubiquitousItemIsDownloading.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603D60]);
}

uint64_t URLResourceValues.ubiquitousItemIsUploaded.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603D78]);
}

uint64_t URLResourceValues.ubiquitousItemIsUploading.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603D80]);
}

uint64_t URLResourceValues.ubiquitousItemDownloadingStatus.getter()
{
  return URLResourceValues.fileProtection.getter( MEMORY[0x189603D50],  type metadata accessor for NSURLUbiquitousItemDownloadingStatus);
}

uint64_t URLResourceValues.ubiquitousItemDownloadingError.getter()
{
  return URLResourceValues.fileSecurity.getter( MEMORY[0x189603D48],  (unint64_t *)&lazy cache variable for type metadata for NSError);
}

uint64_t URLResourceValues.fileSecurity.getter(id *a1, unint64_t *a2)
{
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16))
  {
    id v5 = *a1;
    uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v7 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v9);
    }

    else
    {
      __int128 v9 = 0u;
      __int128 v10 = 0u;
    }
  }

  else
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  type metadata accessor for NSMorphologyPronoun(0LL, a2);
  else {
    return 0LL;
  }
}

uint64_t URLResourceValues.ubiquitousItemUploadingError.getter()
{
  return URLResourceValues.fileSecurity.getter( MEMORY[0x189603D88],  (unint64_t *)&lazy cache variable for type metadata for NSError);
}

uint64_t URLResourceValues.ubiquitousItemDownloadRequested.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603D40]);
}

uint64_t URLResourceValues.ubiquitousItemContainerDisplayName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x189603D38]);
}

uint64_t URLResourceValues.localizedName.getter(id *a1)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16))
  {
    id v3 = *a1;
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v4, (uint64_t)&v7);
    }

    else
    {
      __int128 v7 = 0u;
      __int128 v8 = 0u;
    }
  }

  else
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  else {
    return 0LL;
  }
}

uint64_t URLResourceValues.ubiquitousItemIsExcludedFromSync.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603D68]);
}

uint64_t key path getter for URLResourceValues.isPackage : URLResourceValues@<X0>( void **a1@<X3>, _BYTE *a2@<X8>)
{
  id v3 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v4 = URLResourceValues._get(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t URLResourceValues.ubiquitousItemIsExcludedFromSync.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x189603D68], a1);
}

uint64_t (*URLResourceValues.ubiquitousItemIsExcludedFromSync.modify(uint64_t a1))()
{
  id v3 = (void *)*MEMORY[0x189603D68];
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.isPackage.modify(uint64_t a1)
{
  return URLResourceValues._set(_:newValue:)(*(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t URLResourceValues.fileProtection.getter()
{
  return URLResourceValues.fileProtection.getter( MEMORY[0x189603BD0],  type metadata accessor for NSURLFileProtectionType);
}

id URLResourceValues.fileSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x189603C20]);
}

id URLResourceValues.fileAllocatedSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x189603BA0]);
}

id URLResourceValues.totalFileSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x189603D28]);
}

id URLResourceValues.totalFileAllocatedSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x189603D20]);
}

id URLResourceValues.linkCount.getter(void **a1)
{
  return URLResourceValues._get(_:)(*a1);
}

uint64_t URLResourceValues.isAliasFile.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x189603C38]);
}

void URL.absoluteURL.getter(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  id v13 = *(id *)v1;
  uint64_t v4 = *(void *)(v1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    if (v4)
    {
      id v14 = v13;
      *(void *)&__int128 v15 = v3;
      *((void *)&v15 + 1) = v4;
      uint64_t v5 = URL.absoluteString.getter();
      URL.init(string:)(v5, v6, (uint64_t *)&v14);
      swift_bridgeObjectRelease();
      id v7 = v14;
      if (v14)
      {
        uint64_t v4 = *((void *)&v15 + 1);
        uint64_t v3 = v15;
      }

      else
      {
        swift_retain();
        id v7 = v13;
        swift_retain();
      }

      *a1 = v7;
      a1[1] = v3;
      a1[2] = v4;
    }

    else
    {
      *a1 = v13;
      a1[1] = v3;
      a1[2] = 0LL;
      swift_retain();
      id v11 = v13;
    }
  }

  else
  {
    id v8 = objc_msgSend(v13, sel_absoluteURL);
    if (v8)
    {
      uint64_t v9 = v8;
      URL.init(reference:)(v8, &v14);

      __int128 v10 = v15;
      *a1 = v14;
      *(_OWORD *)(a1 + 1) = v10;
    }

    else
    {
      *a1 = v13;
      a1[1] = v3;
      a1[2] = v4;
      swift_retain();
      id v12 = v13;
      swift_retain();
    }
  }

void *static URL._converted(from:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_filePathURL);
  if (v1)
  {
    uint64_t v2 = v1;
    URL.init(reference:)(v1, &v6);

    uint64_t v3 = v6;
LABEL_6:
    swift_release();
    swift_release();
    return (void *)v3;
  }

  uint64_t result = URL.init(string:)(&v6, 0xD00000000000002ALL, 0x80000001839D3370LL);
  uint64_t v3 = v6;
  if (v6) {
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void URL.init(string:encodingInvalidCharacters:)( uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  if (!_foundation_swift_url_feature_enabled())
  {
    uint64_t v12 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000LL) == 0) {
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v12)
    {
      id v13 = objc_msgSend( objc_allocWithZone(MEMORY[0x189604030]),  sel_initWithString_encodingInvalidCharacters_,  String._bridgeToObjectiveCImpl()(),  a3 & 1);
      swift_unknownObjectRelease();
      if (v13)
      {
        uint64_t v11 = (uint64_t)static URL._converted(from:)(v13);

        Swift::Int v9 = 0LL;
        goto LABEL_9;
      }
    }

void URL.init(fileURLWithPath:isDirectory:relativeTo:)( uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  Swift::Int v9 = *(void **)a4;
  uint64_t v10 = *(void *)(a4 + 8);
  uint64_t v11 = *(void *)(a4 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    BOOL v18 = (a3 & 1) == 0;
    v17[0] = v9;
    v17[1] = v10;
    void v17[2] = v11;
    swift_bridgeObjectRetain();
    outlined copy of URL?((uint64_t)v9);
    URL.init(filePath:directoryHint:relativeTo:)(a1, a2, (unsigned __int8 *)&v18, (uint64_t)v17, (uint64_t *)&v19);
    uint64_t v12 = v19;
    __int128 v13 = v20;
  }

  else
  {
    uint64_t v14 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000LL) == 0) {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v14) {
      swift_bridgeObjectRetain();
    }
    uint64_t v15 = String._bridgeToObjectiveCImpl()();
    outlined copy of URL?((uint64_t)v9);
    swift_bridgeObjectRelease();
    if (v9)
    {
      swift_release();
      swift_release();
    }

    id v16 = objc_msgSend( objc_allocWithZone(MEMORY[0x189604030]),  sel_initFileURLWithPath_isDirectory_relativeToURL_,  v15,  a3 & 1,  v9);
    swift_unknownObjectRelease();

    uint64_t v12 = static URL._converted(from:)(v16);
    __int128 v13 = 0uLL;
  }

  *(void *)a5 = v12;
  *(_OWORD *)(a5 + 8) = v13;
}

void URL.init(fileURLWithPath:relativeTo:)( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v7 = *(void **)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v16 = 2;
    v15[0] = v7;
    v15[1] = v8;
    v15[2] = v9;
    swift_bridgeObjectRetain();
    outlined copy of URL?((uint64_t)v7);
    URL.init(filePath:directoryHint:relativeTo:)(a1, a2, &v16, (uint64_t)v15, (uint64_t *)&v17);
    uint64_t v10 = v17;
    __int128 v11 = v18;
  }

  else
  {
    uint64_t v12 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000LL) == 0) {
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v12) {
      swift_bridgeObjectRetain();
    }
    uint64_t v13 = String._bridgeToObjectiveCImpl()();
    outlined copy of URL?((uint64_t)v7);
    swift_bridgeObjectRelease();
    if (v7)
    {
      swift_release();
      swift_release();
    }

    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x189604030]), sel_initFileURLWithPath_relativeToURL_, v13, v7);
    swift_unknownObjectRelease();

    uint64_t v10 = static URL._converted(from:)(v14);
    __int128 v11 = 0uLL;
  }

  *(void *)a4 = v10;
  *(_OWORD *)(a4 + 8) = v11;
}

void URL.init(dataRepresentation:relativeTo:isAbsolute:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

void URL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, void *a6@<X8>)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  __int128 v11 = *(void **)a4;
  uint64_t v12 = *(void *)(a4 + 8);
  uint64_t v13 = *(void *)(a4 + 16);
  char v26 = 0;
  unint64_t v30 = v11;
  uint64_t v31 = v12;
  uint64_t v32 = v13;
  id v14 = objc_allocWithZone(MEMORY[0x189604030]);
  outlined copy of Data._Representation(a1, a2);
  outlined copy of URL?((uint64_t)v11);
  id v15 = specialized @nonobjc NSURL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)( a1,  a2,  a3,  &v30,  (uint64_t)&v26);
  outlined consume of Data._Representation(a1, a2);
  if (!v6)
  {
    unint64_t v24 = a6;
    unsigned __int8 v16 = static URL._converted(from:)(v15);

    *a5 = v26;
    uint64_t v17 = v16;
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      id v18 = objc_msgSend(v17, sel_relativeString);
      id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      unint64_t v21 = v20;

      Swift::Int v22 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)((uint64_t)v19, v21, 1);
      swift_bridgeObjectRelease();
      if (!v22)
      {

        *unint64_t v24 = 0LL;
        v24[1] = 0LL;
        void v24[2] = 0LL;
        return;
      }

      if ((*(_BYTE *)(v22 + 48) & 1) != 0)
      {
        if (v11)
        {
          unint64_t v27 = v11;
          uint64_t v28 = v12;
          uint64_t v29 = v13;
          URL.absoluteURL.getter(&v30);
          uint64_t v23 = v31;

          swift_release();
LABEL_11:
          *unint64_t v24 = v17;
          v24[1] = v22;
          void v24[2] = v23;
          swift_retain();
          swift_release();

          return;
        }
      }

      else
      {
        swift_retain();
        String.subscript.getter();
        swift_release();
        swift_bridgeObjectRelease();
      }

      uint64_t v23 = 0LL;
      goto LABEL_11;
    }

    uint64_t v23 = 0LL;
    Swift::Int v22 = 0LL;
    goto LABEL_11;
  }

{
  uint64_t v6;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  char v17;
  void *v18;
  id v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  Swift::Int v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v35 = *MEMORY[0x1895F89C0];
  __int128 v11 = *(void **)a4;
  uint64_t v12 = *(void *)(a4 + 8);
  uint64_t v13 = *(void *)(a4 + 16);
  uint64_t v28 = 0;
  uint64_t v32 = v11;
  uint64_t v33 = v12;
  unint64_t v34 = v13;
  id v14 = objc_allocWithZone(MEMORY[0x189604030]);
  outlined copy of Data._Representation(a1, a2);
  outlined copy of URL?((uint64_t)v11);
  id v15 = specialized @nonobjc NSURL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)( a1,  a2,  a3,  &v32,  (uint64_t)&v28);
  outlined consume of Data._Representation(a1, a2);
  if (!v6)
  {
    char v26 = a6;
    unsigned __int8 v16 = static URL._converted(from:)(v15);

    uint64_t v17 = v28;
    *a5 = v28;
    id v18 = v16;
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      *a5 = v17;
      id v19 = objc_msgSend(v18, sel_relativeString);

      unint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      Swift::Int v22 = v21;

      uint64_t v23 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)((uint64_t)v20, v22, 1);
      swift_bridgeObjectRelease();
      if (!v23)
      {
        __break(1u);
        return;
      }

      unint64_t v24 = v26;
      if ((*(_BYTE *)(v23 + 48) & 1) != 0)
      {
        if (v11)
        {
          uint64_t v29 = v11;
          unint64_t v30 = v12;
          uint64_t v31 = v13;
          URL.absoluteURL.getter(&v32);
          unint64_t v25 = v33;

          swift_release();
LABEL_10:
          *unint64_t v24 = v18;
          v24[1] = v23;
          void v24[2] = v25;
          return;
        }
      }

      else
      {
        swift_retain();
        String.subscript.getter();
        swift_release();
        swift_bridgeObjectRelease();
      }

      unint64_t v25 = 0LL;
      goto LABEL_10;
    }

    uint64_t v23 = 0LL;
    unint64_t v25 = 0LL;
    unint64_t v24 = v26;
    goto LABEL_10;
  }

__n128 URL.init(resolvingAliasFileAt:options:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v7 = *(void **)a1;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v8 = *(void **)(a1 + 16);
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSURL);
  v13[0] = v7;
  v13[1] = v6;
  v13[2] = v8;
  swift_retain();
  id v9 = v7;
  swift_retain();
  id v10 = @nonobjc NSURL.__allocating_init(resolvingAliasFileAt:options:)(v13, a2);
  if (!v3)
  {
    uint64_t v12 = v10;
    URL.init(reference:)(v10, &v14);

    __n128 result = v15;
    *(void *)a3 = v14;
    *(__n128 *)(a3 + 8) = result;
  }

  return result;
}

id @nonobjc NSURL.__allocating_init(resolvingAliasFileAt:options:)(void **a1, uint64_t a2)
{
  v7[1] = *(id *)MEMORY[0x1895F89C0];
  uint64_t v2 = *a1;
  v7[0] = 0LL;
  id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_URLByResolvingAliasFileAtURL_options_error_, v2, a2, v7);
  if (v3)
  {
    id v4 = v7[0];
  }

  else
  {
    if (v7[0])
    {
      v7[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v5 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

  swift_release();
  swift_release();
  return v3;
}

void URL.init(reference:)(void *a1@<X0>, void *a2@<X8>)
{
  id v4 = (void *)static URL._converted(from:)();
  objc_msgSend(v4, sel_copy);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSURL);
  swift_dynamicCast();
  id v5 = v14;
  if (!_foundation_swift_url_feature_enabled())
  {

    Swift::Int v10 = 0LL;
    goto LABEL_6;
  }

  id v6 = objc_msgSend(v5, sel_relativeString);

  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  unint64_t v9 = v8;

  Swift::Int v10 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)((uint64_t)v7, v9, 1);
  swift_bridgeObjectRelease();
  if (v10)
  {
    id v11 = objc_msgSend(a1, sel_baseURL);
    if (v11)
    {
      uint64_t v12 = v11;
      URL.init(reference:)(v15);

      id v13 = v15[1];
      swift_release();
LABEL_7:
      *a2 = v5;
      a2[1] = v10;
      a2[2] = v13;
      return;
    }

void URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v7 = *(void **)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v10 = String.init(cString:)();
    unint64_t v12 = v11;
    BOOL v17 = (a2 & 1) == 0;
    v16[0] = v7;
    v16[1] = v8;
    id v16[2] = v9;
    outlined copy of URL?((uint64_t)v7);
    URL.init(filePath:directoryHint:relativeTo:)(v10, v12, (unsigned __int8 *)&v17, (uint64_t)v16, (uint64_t *)&v18);
    id v13 = v18;
    __int128 v14 = v19;
  }

  else
  {
    if (v7)
    {
      outlined copy of URL?((uint64_t)v7);
      swift_release();
      swift_release();
    }

    id v15 = objc_msgSend( objc_allocWithZone(MEMORY[0x189604030]),  sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_,  a1,  a2 & 1,  v7);

    id v13 = static URL._converted(from:)(v15);
    __int128 v14 = 0uLL;
  }

  *(void *)a4 = v13;
  *(_OWORD *)(a4 + 8) = v14;
}

uint64_t URL.dataRepresentation.getter()
{
  id v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    id v7 = objc_msgSend(v1, sel_dataRepresentation);
    if (!v7) {
      return 0LL;
    }
    id v8 = v7;
    id v6 = specialized Data.init(referencing:)(v8);

    return (uint64_t)v6;
  }

  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 16);
    unint64_t v5 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    return specialized Data.init<A>(_:)(v4, v5);
  }

  __break(1u);
  return result;
}

void URL.baseURL.getter(uint64_t *a1@<X8>)
{
  id v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    if (v4)
    {
      if ((*(_BYTE *)(v4 + 48) & 1) != 0)
      {
        swift_retain_n();
      }

      else
      {
        swift_retain_n();
        String.subscript.getter();
        swift_bridgeObjectRelease();
      }

      uint64_t v9 = swift_retain();
      uint64_t v10 = specialized static URL._cfURL(from:baseURL:)(v9);
      swift_release_n();
      *a1 = v10;
      a1[1] = v4;
    }

    else
    {
      *a1 = 0LL;
      a1[1] = 0LL;
    }

    a1[2] = 0LL;
  }

  else
  {
    id v5 = objc_msgSend(v3, sel_baseURL);
    if (v5)
    {
      id v6 = v5;
      URL.init(reference:)(v5, &v11);

      uint64_t v7 = v11;
      __int128 v8 = v12;
    }

    else
    {
      uint64_t v7 = 0LL;
      __int128 v8 = 0uLL;
    }

    *a1 = v7;
    *(_OWORD *)(a1 + 1) = v8;
  }

void URL.encodedHost.getter()
{
  uint64_t v1 = *(_BYTE **)(v0 + 8);
  if (v1)
  {
    if ((v1[72] != 1 || v1[96] != 1 || v1[120] != 1 || (v1[144] & 1) == 0 || (uint64_t v1 = *(_BYTE **)(v0 + 16)) != 0LL)
      && (v1[120] & 1) == 0)
    {
      uint64_t v2 = String.subscript.getter();
      MEMORY[0x186E1B610](v2);
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    __break(1u);
  }

Swift::String_optional __swiftcall URL.host(percentEncoded:)(Swift::Bool percentEncoded)
{
  id v3 = *(void **)v1;
  uint64_t v4 = *(_BYTE **)(v1 + 8);
  id v5 = *(_BYTE **)(v1 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    id v16 = objc_msgSend(v3, sel__cfurl);
    BOOL v17 = (void *)_CFURLCopyHostName();
    if (v17)
    {
      id v18 = v17;
      unint64_t v8 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      unint64_t v9 = v19;
    }

    else
    {

LABEL_24:
      unint64_t v8 = 0LL;
      unint64_t v9 = 0LL;
    }

    goto LABEL_111;
  }

  unint64_t v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
  uint64_t v93 = (uint64_t)v4;
  unint64_t v94 = (unint64_t)v5;
  URL.encodedHost.getter();
  unint64_t v8 = v6;
  unint64_t v9 = v7;
  if (v7)
  {
    if (!v4)
    {
      __break(1u);
      goto LABEL_122;
    }

    if (v4[72] == 1 && v4[96] == 1 && v4[120] == 1 && v4[144] == 1)
    {
      if (!v5)
      {
        if (percentEncoded)
        {
LABEL_12:
          uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
          if ((v7 & 0x2000000000000000LL) != 0) {
            uint64_t v11 = HIBYTE(v7) & 0xF;
          }
          else {
            uint64_t v11 = v6 & 0xFFFFFFFFFFFFLL;
          }
          if (!v11)
          {
            swift_bridgeObjectRelease();
            unint64_t v13 = 0LL;
            unint64_t v15 = 0xE000000000000000LL;
            goto LABEL_64;
          }

          if ((v7 & 0x1000000000000000LL) != 0)
          {
            swift_bridgeObjectRetain_n();
          }

          else
          {
            if ((v7 & 0x2000000000000000LL) != 0)
            {
              unint64_t v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v6;
              uint64_t v93 = v7 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v98 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
              uint64_t v99 = 0LL;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain_n();
              closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v92,  HIBYTE(v9) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98,  0,  (unsigned __int8 *)&v92,  HIBYTE(v9) & 0xF,  (uint64_t *)&v96);
              unint64_t v13 = v96;
              unint64_t v15 = v97;
              swift_release();
            }

            else
            {
              if ((v6 & 0x1000000000000000LL) != 0)
              {
                __int128 v12 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
              }

              else
              {
                __int128 v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
                uint64_t v10 = v45;
              }

              unint64_t v92 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
              uint64_t v93 = 0LL;
              swift_bridgeObjectRetain_n();
              unint64_t v13 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v12,  v10,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v92,  0,  v12,  v10);
              unint64_t v15 = v14;
            }

            swift_bridgeObjectRelease();
            if (v15 != 1)
            {
              swift_bridgeObjectRelease_n();
              if (v15) {
                goto LABEL_63;
              }
              goto LABEL_111;
            }
          }

          unint64_t v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v8;
          uint64_t v93 = v9;
          lazy protocol witness table accessor for type String and conformance String();
          StringProtocol._ephemeralString.getter();
          unint64_t v25 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v26 = objc_msgSend(v25, sel__fastCharacterContents);
          id v27 = v25;
          if (v26)
          {
            unint64_t v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v8;
            uint64_t v93 = v9;
            StringProtocol._ephemeralString.getter();
            uint64_t v28 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v29 = objc_msgSend(v28, sel_length);
            uint64_t v30 = swift_unknownObjectRelease();
            uint64_t v31 = MEMORY[0x1895F8858](v30);
            LOBYTE(v9__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0;
            MEMORY[0x1895F8858](v31);
            v88[2] = v26;
            v88[3] = v29;
            unint64_t v13 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v26,  (uint64_t)v29,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  v32,  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)v88);
            unint64_t v15 = v33;
            swift_bridgeObjectRelease_n();
            if (v15) {
              goto LABEL_63;
            }
            goto LABEL_111;
          }

          unint64_t v92 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v8;
          uint64_t v93 = v9;
          swift_bridgeObjectRetain();
          uint64_t v39 = String.init<A>(_:)();
          unint64_t v40 = v38;
          if ((v38 & 0x1000000000000000LL) != 0)
          {
            uint64_t v39 = static String._copying(_:)();
            unint64_t v47 = v46;
            swift_bridgeObjectRelease();
            unint64_t v40 = v47;
            if ((v47 & 0x2000000000000000LL) == 0) {
              goto LABEL_51;
            }
          }

          else if ((v38 & 0x2000000000000000LL) == 0)
          {
LABEL_51:
            if ((v39 & 0x1000000000000000LL) == 0) {
              goto LABEL_120;
            }
            unint64_t v41 = (unsigned __int8 *)((v40 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v42 = v39 & 0xFFFFFFFFFFFFLL;
LABEL_53:
            unint64_t v92 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
            uint64_t v93 = 0LL;
            unint64_t v13 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v41,  v42,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v92,  0,  v41,  v42);
            unint64_t v15 = v43;
LABEL_62:
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            if (!v15) {
              goto LABEL_111;
            }
LABEL_63:
            swift_bridgeObjectRelease();
LABEL_64:
            unint64_t v9 = HIBYTE(v15) & 0xF;
            uint64_t v48 = v13 & 0xFFFFFFFFFFFFLL;
            if ((v15 & 0x2000000000000000LL) != 0) {
              unint64_t v49 = HIBYTE(v15) & 0xF;
            }
            else {
              unint64_t v49 = v13 & 0xFFFFFFFFFFFFLL;
            }
            if (v49)
            {
              if ((specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v13, v15) & 1) == 0)
              {
                unint64_t v96 = v13;
                unint64_t v97 = v15;
                swift_bridgeObjectRetain();
                if ((v15 & 0x1000000000000000LL) == 0)
                {
                  if ((v15 & 0x2000000000000000LL) != 0)
                  {
                    uint64_t v98 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v13;
                    uint64_t v99 = v15 & 0xFFFFFFFFFFFFFFLL;
                    unint64_t v54 = &v98;
                    uint64_t v55 = HIBYTE(v15) & 0xF;
                    goto LABEL_88;
                  }

                  if ((v13 & 0x1000000000000000LL) != 0)
                  {
                    unint64_t v54 = (int32_t (__cdecl **)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))((v15 & 0xFFFFFFFFFFFFFFFLL) + 32);
LABEL_86:
                    uint64_t v55 = v48;
LABEL_88:
                    specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)( (uint64_t)v54,  v55,  4LL,  (uint64_t *)&v92);
                    goto LABEL_107;
                  }

Swift::String_optional __swiftcall URL.user(percentEncoded:)(Swift::Bool percentEncoded)
{
  id v3 = *(void **)v1;
  uint64_t v4 = *(_BYTE **)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = _foundation_swift_url_feature_enabled();
  if ((_DWORD)v6)
  {
    if (!v4)
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v4[72] != 1
      || v4[96] == 1
      && v4[120] == 1
      && (v4[144] == 1 ? (BOOL v8 = v5 == 0) : (BOOL v8 = 1), !v8 && (*(_BYTE *)(v5 + 72) & 1) == 0))
    {
      uint64_t v9 = String.subscript.getter();
      unint64_t v13 = v9;
      unint64_t v14 = v10;
      unint64_t v15 = v11;
      unint64_t v16 = v12;
      if (percentEncoded)
      {
        id v17 = (id)MEMORY[0x186E1B610](v9, v10, v11, v12);
        unint64_t v19 = v18;
        swift_bridgeObjectRelease();
      }

      else
      {
        unint64_t v33 = v9;
        unint64_t v34 = v10;
        unint64_t v35 = v11;
        unint64_t v36 = v12;
        if ((v9 ^ v10) >> 14)
        {
          MEMORY[0x1895F8858](v9);
          v32[2] = &v33;
          v32[3] = MEMORY[0x18961AFF8];
          swift_bridgeObjectRetain();
          uint64_t v24 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5( (void *(*)(void *__return_ptr, void, void))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v32,  v13,  v14,  v15,  v16);
          if (v25 == 1)
          {
            unint64_t v26 = v33;
            unint64_t v27 = v34;
            unint64_t v28 = v35;
            unint64_t v29 = v36;
            swift_bridgeObjectRetain();
            id v17 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v26,  v27,  v28,  v29,  MEMORY[0x18961AFF8]);
            unint64_t v19 = v30;
            swift_bridgeObjectRelease();
          }

          else
          {
            id v17 = v24;
            unint64_t v19 = v25;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        else
        {
          swift_bridgeObjectRelease();
          id v17 = 0LL;
          unint64_t v19 = 0xE000000000000000LL;
        }
      }

      goto LABEL_17;
    }

    goto LABEL_16;
  }

  id v20 = objc_msgSend(v3, sel__cfurl);
  uint64_t v21 = (void *)_CFURLCopyUserName();
  if (!v21)
  {

LABEL_16:
    id v17 = 0LL;
    unint64_t v19 = 0LL;
    goto LABEL_17;
  }

  uint64_t v22 = v21;
  id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  unint64_t v19 = v23;

LABEL_17:
  uint64_t v6 = (uint64_t)v17;
  unint64_t v7 = (void *)v19;
LABEL_25:
  result.value._unint64_t object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall URL.password(percentEncoded:)(Swift::Bool percentEncoded)
{
  id v3 = *(void **)v1;
  uint64_t v4 = *(_BYTE **)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = _foundation_swift_url_feature_enabled();
  if ((_DWORD)v6)
  {
    if (!v4)
    {
      __break(1u);
      goto LABEL_26;
    }

    char v8 = v4[96];
    if (v4[72] == 1)
    {
      if (!v4[96]) {
        goto LABEL_12;
      }
      if (v4[120] != 1) {
        goto LABEL_17;
      }
      if (v4[144] != 1 || v5 == 0) {
        goto LABEL_17;
      }
      char v8 = *(_BYTE *)(v5 + 96);
    }

    if ((v8 & 1) == 0)
    {
LABEL_12:
      uint64_t v10 = String.subscript.getter();
      unint64_t v14 = v10;
      unint64_t v15 = v11;
      unint64_t v16 = v12;
      unint64_t v17 = v13;
      if (percentEncoded)
      {
        id v18 = (id)MEMORY[0x186E1B610](v10, v11, v12, v13);
        unint64_t v20 = v19;
        swift_bridgeObjectRelease();
      }

      else
      {
        unint64_t v34 = v10;
        unint64_t v35 = v11;
        unint64_t v36 = v12;
        unint64_t v37 = v13;
        if ((v10 ^ v11) >> 14)
        {
          MEMORY[0x1895F8858](v10);
          void v33[2] = &v34;
          v33[3] = MEMORY[0x18961AFF8];
          swift_bridgeObjectRetain();
          unint64_t v25 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5( (void *(*)(void *__return_ptr, void, void))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v33,  v14,  v15,  v16,  v17);
          if (v26 == 1)
          {
            unint64_t v27 = v34;
            unint64_t v28 = v35;
            unint64_t v29 = v36;
            unint64_t v30 = v37;
            swift_bridgeObjectRetain();
            id v18 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v27,  v28,  v29,  v30,  MEMORY[0x18961AFF8]);
            unint64_t v20 = v31;
            swift_bridgeObjectRelease();
          }

          else
          {
            id v18 = v25;
            unint64_t v20 = v26;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        else
        {
          swift_bridgeObjectRelease();
          id v18 = 0LL;
          unint64_t v20 = 0xE000000000000000LL;
        }
      }

      goto LABEL_18;
    }

uint64_t URL.relativePath.getter()
{
  uint64_t v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State())
    {
      id v5 = objc_msgSend(v2, sel__parameterString);
      if (v5)
      {
        uint64_t v6 = v5;
        id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
        uint64_t v9 = v8;

        id v10 = objc_msgSend(v2, sel_relativePath);
        if (v10)
        {
          unint64_t v11 = v10;
          id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          uint64_t v14 = v13;

          uint64_t v36 = (uint64_t)v12;
          uint64_t v37 = v14;
          swift_bridgeObjectRetain();
          v15._uint64_t countAndFlagsBits = 59LL;
          v15._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v16._uint64_t countAndFlagsBits = (uint64_t)v7;
          v16._unint64_t object = v9;
          String.append(_:)(v16);
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v36 = 59LL;
          uint64_t v37 = 0xE100000000000000LL;
          v32._uint64_t countAndFlagsBits = (uint64_t)v7;
          v32._unint64_t object = v9;
          String.append(_:)(v32);
        }

        swift_bridgeObjectRelease();
        return v36;
      }
    }

    id v17 = objc_msgSend(v2, sel_relativePath);
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v17);

      return v19;
    }

    return 0LL;
  }

  if (v1)
  {
    if ((*(_BYTE *)(v1 + 168) & 1) != 0) {
      uint64_t v4 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      uint64_t v4 = String.subscript.getter();
    }
    uint64_t v20 = MEMORY[0x186E1B610](v4);
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v34 = v20;
    unint64_t v35 = v22;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      unint64_t v23 = v22;
    }

    else
    {
      unint64_t v23 = v22;
      if ((specialized BidirectionalCollection.last.getter(v20, v22) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v20 = v34;
        unint64_t v23 = v35;
      }
    }

    uint64_t v36 = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v33, 0x2FuLL);
    uint64_t v24 = v36;
    if ((v23 & 0x2000000000000000LL) != 0) {
      uint64_t v25 = HIBYTE(v23) & 0xF;
    }
    else {
      uint64_t v25 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (!v25)
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = 0LL;
LABEL_29:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }

    swift_bridgeObjectRetain();
    if ((v23 & 0x1000000000000000LL) != 0)
    {
      uint64_t v19 = 0LL;
      uint64_t v29 = 1LL;
    }

    else
    {
      if ((v23 & 0x2000000000000000LL) != 0)
      {
        uint64_t v36 = v20;
        uint64_t v37 = v23 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v26 = &v36;
        uint64_t v27 = HIBYTE(v23) & 0xF;
      }

      else if ((v20 & 0x1000000000000000LL) != 0)
      {
        unint64_t v26 = (uint64_t *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v27 = v20 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        unint64_t v26 = (uint64_t *)_StringObject.sharedUTF8.getter();
      }

      uint64_t v19 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v26, v27, v24);
      uint64_t v29 = v28;
    }

    if (v29 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v20, v23, v24);
      uint64_t v31 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      if (v31) {
        goto LABEL_29;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v29) {
        goto LABEL_29;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  __break(1u);
  return result;
}

Swift::String_optional __swiftcall URL.query(percentEncoded:)(Swift::Bool percentEncoded)
{
  id v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = _foundation_swift_url_feature_enabled();
  if ((_DWORD)v6)
  {
    if (!v4)
    {
      __break(1u);
      goto LABEL_29;
    }

    if (*(_BYTE *)(v4 + 192) != 1) {
      goto LABEL_18;
    }
    if ((*(_BYTE *)(v4 + 168) & 1) != 0) {
      uint64_t v8 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      uint64_t v8 = String.subscript.getter();
    }
    uint64_t v15 = MEMORY[0x186E1B610](v8);
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000LL) == 0) {
      uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v19 = v18 || v5 == 0;
    if (!v19 && (*(_BYTE *)(v5 + 192) & 1) == 0)
    {
LABEL_18:
      uint64_t v20 = String.subscript.getter();
      unint64_t v24 = v20;
      unint64_t v25 = v21;
      unint64_t v26 = v22;
      unint64_t v27 = v23;
      if (percentEncoded)
      {
        id v12 = (id)MEMORY[0x186E1B610](v20, v21, v22, v23);
        unint64_t v14 = v28;
      }

      else
      {
        unint64_t v38 = v20;
        unint64_t v39 = v21;
        unint64_t v40 = v22;
        unint64_t v41 = v23;
        if (!((v20 ^ v21) >> 14))
        {
          swift_bridgeObjectRelease();
          id v12 = 0LL;
          unint64_t v14 = 0xE000000000000000LL;
          goto LABEL_27;
        }

        MEMORY[0x1895F8858](v20);
        v37[2] = &v38;
        v37[3] = MEMORY[0x18961AFF8];
        swift_bridgeObjectRetain();
        uint64_t v29 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5( (void *(*)(void *__return_ptr, void, void))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v37,  v24,  v25,  v26,  v27);
        if (v30 == 1)
        {
          unint64_t v31 = v38;
          unint64_t v32 = v39;
          unint64_t v33 = v40;
          unint64_t v34 = v41;
          swift_bridgeObjectRetain();
          id v12 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v31,  v32,  v33,  v34,  MEMORY[0x18961AFF8]);
          unint64_t v14 = v35;
          swift_bridgeObjectRelease();
        }

        else
        {
          id v12 = v29;
          unint64_t v14 = v30;
        }

        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      goto LABEL_27;
    }

    goto LABEL_17;
  }

  id v9 = objc_msgSend(v3, sel__cfurl);
  String = (void *)_CFURLCopyQueryString();
  if (!String)
  {

LABEL_17:
    id v12 = 0LL;
    unint64_t v14 = 0LL;
    goto LABEL_27;
  }

  unint64_t v11 = String;
  id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(String);
  unint64_t v14 = v13;

LABEL_27:
  uint64_t v6 = (uint64_t)v12;
  id v7 = (void *)v14;
LABEL_29:
  result.value._unint64_t object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall URL.fragment(percentEncoded:)(Swift::Bool percentEncoded)
{
  id v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = _foundation_swift_url_feature_enabled();
  if ((_DWORD)v5)
  {
    if (!v4)
    {
      __break(1u);
      goto LABEL_18;
    }

    if ((*(_BYTE *)(v4 + 216) & 1) == 0)
    {
      uint64_t v7 = String.subscript.getter();
      unint64_t v11 = v7;
      unint64_t v12 = v8;
      unint64_t v13 = v9;
      unint64_t v14 = v10;
      if (percentEncoded)
      {
        id v15 = (id)MEMORY[0x186E1B610](v7, v8, v9, v10);
        unint64_t v17 = v16;
        swift_bridgeObjectRelease();
      }

      else
      {
        unint64_t v31 = v7;
        unint64_t v32 = v8;
        unint64_t v33 = v9;
        unint64_t v34 = v10;
        if ((v7 ^ v8) >> 14)
        {
          MEMORY[0x1895F8858](v7);
          v30[2] = &v31;
          v30[3] = MEMORY[0x18961AFF8];
          swift_bridgeObjectRetain();
          unint64_t v22 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5( (void *(*)(void *__return_ptr, void, void))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v30,  v11,  v12,  v13,  v14);
          if (v23 == 1)
          {
            unint64_t v24 = v31;
            unint64_t v25 = v32;
            unint64_t v26 = v33;
            unint64_t v27 = v34;
            swift_bridgeObjectRetain();
            id v15 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v24,  v25,  v26,  v27,  MEMORY[0x18961AFF8]);
            unint64_t v17 = v28;
            swift_bridgeObjectRelease();
          }

          else
          {
            id v15 = v22;
            unint64_t v17 = v23;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        else
        {
          swift_bridgeObjectRelease();
          id v15 = 0LL;
          unint64_t v17 = 0xE000000000000000LL;
        }
      }

      goto LABEL_10;
    }

    goto LABEL_9;
  }

  id v18 = objc_msgSend(v3, sel__cfurl);
  BOOL v19 = (void *)_CFURLCopyFragment();
  if (!v19)
  {

LABEL_9:
    id v15 = 0LL;
    unint64_t v17 = 0LL;
    goto LABEL_10;
  }

  uint64_t v20 = v19;
  id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  unint64_t v17 = v21;

LABEL_10:
  uint64_t v5 = (uint64_t)v15;
  uint64_t v6 = (void *)v17;
LABEL_18:
  result.value._unint64_t object = v6;
  result.value._uint64_t countAndFlagsBits = v5;
  return result;
}

id URL.hasDirectoryPath.getter()
{
  uint64_t v1 = *v0;
  Swift::String v2 = URL.path(percentEncoded:)(1);
  __int16 v3 = specialized BidirectionalCollection.last.getter(v2._countAndFlagsBits, (unint64_t)v2._object);
  swift_bridgeObjectRelease();
  return (id)((v3 & 0x1FF) == 47);
}

uint64_t URL.pathExtension.getter()
{
  Swift::String v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v22 = (uint64_t)v2;
    uint64_t v23 = v1;
    uint64_t v24 = v3;
    swift_retain();
    id v4 = v2;
    swift_retain();
    Swift::String v5 = URL.path(percentEncoded:)(1);
    Swift::Int countAndFlagsBits = v5._countAndFlagsBits;
    Swift::String v21 = v5;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      unint64_t object = (unint64_t)v5._object;
    }

    else
    {
      unint64_t object = (unint64_t)v5._object;
      if ((specialized BidirectionalCollection.last.getter(v5._countAndFlagsBits, (unint64_t)v5._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        Swift::Int countAndFlagsBits = v21._countAndFlagsBits;
        unint64_t object = (unint64_t)v21._object;
      }
    }

    uint64_t v22 = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v20, 0x2FuLL);
    uint64_t v11 = v22;
    if ((object & 0x2000000000000000LL) != 0) {
      uint64_t v12 = HIBYTE(object) & 0xF;
    }
    else {
      uint64_t v12 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v12)
    {
      swift_bridgeObjectRetain();
      if ((object & 0x1000000000000000LL) != 0)
      {
        uint64_t v15 = 0LL;
        unint64_t v16 = 1LL;
      }

      else
      {
        if ((object & 0x2000000000000000LL) != 0)
        {
          uint64_t v22 = countAndFlagsBits;
          uint64_t v23 = object & 0xFFFFFFFFFFFFFFLL;
          unint64_t v13 = &v22;
          uint64_t v14 = HIBYTE(object) & 0xF;
        }

        else if ((countAndFlagsBits & 0x1000000000000000LL) != 0)
        {
          unint64_t v13 = (uint64_t *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v14 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          unint64_t v13 = (uint64_t *)_StringObject.sharedUTF8.getter();
        }

        uint64_t v15 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v13, v14, v11);
        unint64_t v16 = v17;
      }

      if (v16 == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( countAndFlagsBits,  object,  v11);
        unint64_t v16 = v18;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v16) {
          goto LABEL_22;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_22;
        }
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = 0LL;
      unint64_t v16 = 0xE000000000000000LL;
      goto LABEL_25;
    }

    swift_bridgeObjectRelease();
    uint64_t v15 = 0LL;
    unint64_t v16 = 0xE000000000000000LL;
LABEL_22:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_25:
    uint64_t v10 = String.pathExtension.getter(v15, v16);
    swift_bridgeObjectRelease();
    return v10;
  }

  id v8 = objc_msgSend(v2, sel_pathExtension);
  if (!v8) {
    return 0LL;
  }
  unint64_t v9 = v8;
  uint64_t v10 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return v10;
}

void URL.appendingPathComponent(_:isDirectory:)( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v10 = *(void **)v4;
  uint64_t v9 = *(void *)(v4 + 8);
  uint64_t v11 = *(void *)(v4 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    if (_foundation_swift_url_feature_enabled())
    {
      specialized URL.appending<A>(path:directoryHint:encodingSlashes:)(a1, a2, (a3 & 1) == 0, 0, (uint64_t)v10, v9);
      return;
    }

    v14._Swift::Int countAndFlagsBits = 47LL;
    v14._unint64_t object = (void *)0xE100000000000000LL;
    String.hasSuffix(_:)(v14);
    *(void *)uint64_t v98 = a1;
    *(void *)&v98[8] = a2;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    uint64_t v15 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v12 = objc_msgSend(v10, sel_URLByAppendingPathComponent_isDirectory_, v15, a3 & 1);
    swift_unknownObjectRelease();
    if (v12) {
      goto LABEL_5;
    }
    *(void *)uint64_t v98 = v10;
    *(void *)&v98[8] = v9;
    *(void *)&v98[16] = v11;
    uint64_t v18 = URL.absoluteString.getter();
    specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v18, v19, 1, (uint64_t)v88);
    outlined init with take of LocalePreferences?( (uint64_t)v88,  (uint64_t)v87,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined init with take of LocalePreferences?( (uint64_t)v88,  (uint64_t)&v89,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v89) == 1)
    {
LABEL_11:
      *a4 = v10;
      a4[1] = v9;
      a4[2] = v11;
      swift_retain();
      id v20 = v10;
      swift_retain();
      return;
    }

    __int128 v99 = v95;
    *(_OWORD *)uint64_t v100 = v96;
    *(_OWORD *)&v100[16] = v97[0];
    *(_OWORD *)&v100[26] = *(_OWORD *)((char *)v97 + 10);
    *(_OWORD *)&v98[32] = v91;
    *(_OWORD *)&v98[48] = v92;
    *(_OWORD *)&v98[64] = v93;
    *(_OWORD *)&v98[80] = v94;
    *(_OWORD *)uint64_t v98 = v89;
    *(_OWORD *)&v98[16] = v90;
    outlined init with take of LocalePreferences?( (uint64_t)v87,  (uint64_t)v86,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v86);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v88);
    unint64_t v30 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v75 = a1;
    unint64_t v76 = a2;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    uint64_t v31 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v32 = objc_msgSend(v30, sel_stringByAppendingPathComponent_, v31);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v33 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    unint64_t v35 = v34;

    if ((v35 & 0x2000000000000000LL) != 0) {
      uint64_t v36 = HIBYTE(v35) & 0xF;
    }
    else {
      uint64_t v36 = v33 & 0xFFFFFFFFFFFFLL;
    }
    outlined init with take of LocalePreferences?( (uint64_t)&v99 + 8,  (uint64_t)v101,  &demangling cache variable for type metadata for String?);
    if (v36)
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v33, v35);
      unint64_t v38 = v37;
      swift_bridgeObjectRelease();
    }

    else
    {
      unint64_t v38 = 0xE000000000000000LL;
    }

    outlined release of String((uint64_t)v101);
    if ((a3 & 1) != 0
      && (v51._Swift::Int countAndFlagsBits = 47LL, v51._object = (void *)0xE100000000000000LL, !String.hasSuffix(_:)(v51)))
    {
      unint64_t v75 = v33;
      unint64_t v76 = v35;
      swift_bridgeObjectRetain();
      v53._Swift::Int countAndFlagsBits = 47LL;
      v53._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      unint64_t v54 = HIBYTE(v35) & 0xF;
      if ((v35 & 0x2000000000000000LL) == 0) {
        unint64_t v54 = v75 & 0xFFFFFFFFFFFFLL;
      }
      if (v54)
      {
        uint64_t v36 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v75, v76);
        unint64_t v56 = v55;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v38 = v56;
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v36 = 0LL;
        unint64_t v38 = 0xE000000000000000LL;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    unint64_t v75 = *(void *)v98;
    LOBYTE(v76) = 0;
    *(_DWORD *)((char *)&v76 + 1) = *(_DWORD *)&v98[9];
    *(_WORD *)((char *)&v76 + 5) = v98[13];
    HIBYTE(v76) = v98[15];
    char v77 = v98[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v98[24];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v98[40];
    *(_OWORD *)&v78[32] = *(_OWORD *)&v98[56];
    *(_OWORD *)&v78[48] = *(_OWORD *)&v98[72];
    *(void *)&v78[64] = *(void *)&v98[88];
    char v79 = v99;
    uint64_t v80 = v36;
    unint64_t v81 = v38;
    __int128 v82 = *(_OWORD *)&v100[8];
    __int128 v83 = *(_OWORD *)&v100[24];
    char v84 = v100[40];
    char v85 = v100[41];
    URLComponents.url.getter((uint64_t *)&v72);
    outlined release of URLComponents((uint64_t)&v75);
    id v52 = v72;
    if (v72)
    {
      uint64_t v9 = v73;
      uint64_t v11 = v74;
    }

    else
    {
      swift_retain();
      id v52 = v10;
      swift_retain();
    }

    *a4 = v52;
    a4[1] = v9;
    a4[2] = v11;
  }

  else
  {
    uint64_t v71 = v11;
    id v12 = objc_msgSend(v10, sel_URLByAppendingPathComponent_isDirectory_, String._bridgeToObjectiveCImpl()(), a3 & 1);
    swift_unknownObjectRelease();
    if (v12)
    {
LABEL_5:
      URL.init(reference:)(v12, v98);

      __int128 v13 = *(_OWORD *)&v98[8];
      *a4 = *(void *)v98;
      *(_OWORD *)(a4 + 1) = v13;
      return;
    }

    *(void *)uint64_t v98 = v10;
    *(void *)&v98[8] = v9;
    *(void *)&v98[16] = v11;
    uint64_t v16 = URL.absoluteString.getter();
    specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v16, v17, 1, (uint64_t)v88);
    outlined init with take of LocalePreferences?( (uint64_t)v88,  (uint64_t)v87,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined init with take of LocalePreferences?( (uint64_t)v88,  (uint64_t)&v89,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    __int128 v99 = v95;
    *(_OWORD *)uint64_t v100 = v96;
    *(_OWORD *)&v100[16] = v97[0];
    *(_OWORD *)&v100[26] = *(_OWORD *)((char *)v97 + 10);
    *(_OWORD *)&v98[32] = v91;
    *(_OWORD *)&v98[48] = v92;
    *(_OWORD *)&v98[64] = v93;
    *(_OWORD *)&v98[80] = v94;
    *(_OWORD *)uint64_t v98 = v89;
    *(_OWORD *)&v98[16] = v90;
    outlined init with take of LocalePreferences?( (uint64_t)v87,  (uint64_t)v86,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v86);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v88);
    Swift::String v21 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v22 = objc_msgSend(v21, sel_stringByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v23 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    unint64_t v25 = v24;

    if ((a3 & 1) != 0)
    {
      unint64_t v75 = v23;
      unint64_t v76 = v25;
      swift_bridgeObjectRetain();
      v26._Swift::Int countAndFlagsBits = 47LL;
      v26._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
    }

    uint64_t v27 = HIBYTE(v25) & 0xF;
    if ((v25 & 0x2000000000000000LL) == 0) {
      uint64_t v27 = v23 & 0xFFFFFFFFFFFFLL;
    }
    char v57 = v10;
    if (v27)
    {
      uint64_t v28 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v23, v25);
      unint64_t v58 = v29;
      uint64_t v59 = v28;
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      unint64_t v58 = 0xE000000000000000LL;
      uint64_t v59 = 0LL;
    }

    char v69 = v100[40];
    char v70 = v100[41];
    uint64_t v67 = *(void *)&v100[32];
    uint64_t v68 = *(void *)&v100[24];
    uint64_t v65 = *(void *)&v100[16];
    uint64_t v66 = *(void *)&v100[8];
    char v64 = v99;
    __int128 v63 = *(_OWORD *)&v98[80];
    __int128 v62 = *(_OWORD *)&v98[64];
    __int128 v61 = *(_OWORD *)&v98[48];
    uint64_t v39 = *(void *)&v98[24];
    __int128 v60 = *(_OWORD *)&v98[32];
    char v40 = v98[16];
    char v41 = v98[15];
    unsigned __int8 v42 = v98[13];
    char v43 = v98[12];
    char v44 = v98[11];
    char v45 = v98[10];
    char v46 = v98[9];
    unint64_t v47 = *(void *)v98;
    outlined init with take of LocalePreferences?( (uint64_t)&v99 + 8,  (uint64_t)v101,  &demangling cache variable for type metadata for String?);
    outlined release of String((uint64_t)v101);
    unint64_t v75 = v47;
    LOBYTE(v76) = 0;
    BYTE1(v76) = v46;
    BYTE2(v76) = v45;
    BYTE3(v76) = v44;
    BYTE4(v76) = v43;
    *(_WORD *)((char *)&v76 + 5) = v42;
    HIBYTE(v76) = v41;
    char v77 = v40;
    *(void *)uint64_t v78 = v39;
    *(_OWORD *)&v78[8] = v60;
    *(_OWORD *)&v78[24] = v61;
    *(_OWORD *)&v78[40] = v62;
    *(_OWORD *)&v78[56] = v63;
    char v79 = v64;
    uint64_t v80 = v59;
    unint64_t v81 = v58;
    *(void *)&__int128 v82 = v66;
    *((void *)&v82 + 1) = v65;
    *(void *)&__int128 v83 = v68;
    *((void *)&v83 + 1) = v67;
    char v84 = v69;
    char v85 = v70;
    URLComponents.url.getter((uint64_t *)&v72);
    outlined release of URLComponents((uint64_t)&v75);
    id v48 = v72;
    if (v72)
    {
      uint64_t v49 = v73;
      uint64_t v50 = v74;
    }

    else
    {
      uint64_t v50 = v71;
      swift_retain();
      id v48 = v57;
      uint64_t v49 = swift_retain();
    }

    *a4 = v48;
    a4[1] = v49;
    a4[2] = v50;
  }

void URL.appending<A>(path:directoryHint:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v4;
  if (!_foundation_swift_url_feature_enabled())
  {
    dispatch thunk of StringProtocol.hasSuffix(_:)();
    __asm { BR              X10 }
  }

  URL.appending<A>(path:directoryHint:encodingSlashes:)(a1, 0, a2);
}

void URL.appendingPathComponent(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v8 = *(void **)v3;
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v9 = *(void *)(v3 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    if (_foundation_swift_url_feature_enabled())
    {
      specialized URL.appending<A>(path:directoryHint:encodingSlashes:)(a1, a2, 2, 0, (uint64_t)v8, v7);
      return;
    }

    v12._Swift::Int countAndFlagsBits = 47LL;
    v12._unint64_t object = (void *)0xE100000000000000LL;
    Swift::Bool v13 = String.hasSuffix(_:)(v12);
    swift_retain();
    id v14 = v8;
    swift_retain();
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      *(void *)unint64_t v105 = v14;
      *(void *)&v105[8] = v7;
      *(void *)&v105[16] = v9;
      URL.scheme.getter();
      if (v15)
      {
        Swift::String v16 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v16._countAndFlagsBits == 1701603686 && v16._object == (void *)0xE400000000000000LL)
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          goto LABEL_21;
        }

        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if ((v28 & 1) != 0)
        {
LABEL_21:
          *(void *)unint64_t v105 = a1;
          *(void *)&v105[8] = a2;
          swift_bridgeObjectRetain();
          String.init<A>(_:)();
          uint64_t v29 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v10 = objc_msgSend(v14, sel_URLByAppendingPathComponent_, v29);
          swift_unknownObjectRelease();
          if (!v10)
          {
            unint64_t v30 = v14;
            LODWORD(v31) = 2;
LABEL_25:
            *(void *)unint64_t v105 = v30;
            *(void *)&v105[8] = v7;
            *(void *)&v105[16] = v9;
            uint64_t v33 = URL.absoluteString.getter();
            specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v33, v34, 1, (uint64_t)v95);
            outlined init with take of LocalePreferences?( (uint64_t)v95,  (uint64_t)v94,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
            outlined init with take of LocalePreferences?( (uint64_t)v95,  (uint64_t)&v96,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
            if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v96) == 1)
            {
              *a3 = v30;
              a3[1] = v7;
              a3[2] = v9;
              id v35 = v30;
              swift_retain();
              goto LABEL_27;
            }

            uint64_t v78 = v30;
            __int128 v106 = v102;
            *(_OWORD *)__int16 v107 = v103;
            *(_OWORD *)&v107[16] = v104[0];
            *(_OWORD *)&v107[26] = *(_OWORD *)((char *)v104 + 10);
            *(_OWORD *)&v105[32] = v98;
            *(_OWORD *)&v105[48] = v99;
            *(_OWORD *)&v105[64] = v100;
            *(_OWORD *)&v105[80] = v101;
            *(_OWORD *)unint64_t v105 = v96;
            *(_OWORD *)&v105[16] = v97;
            outlined init with take of LocalePreferences?( (uint64_t)v94,  (uint64_t)v93,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
            outlined retain of URLComponents((uint64_t)v93);
            URLComponents._URLComponents.path.getter();
            outlined release of URLComponents?(v95);
            uint64_t v36 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            unint64_t v82 = a1;
            unint64_t v83 = a2;
            swift_bridgeObjectRetain();
            String.init<A>(_:)();
            uint64_t v37 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v38 = objc_msgSend(v36, sel_stringByAppendingPathComponent_, v37);
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v39 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
            unint64_t v41 = v40;

            if ((v41 & 0x2000000000000000LL) != 0) {
              uint64_t v42 = HIBYTE(v41) & 0xF;
            }
            else {
              uint64_t v42 = v39 & 0xFFFFFFFFFFFFLL;
            }
            outlined init with take of LocalePreferences?( (uint64_t)&v106 + 8,  (uint64_t)v108,  &demangling cache variable for type metadata for String?);
            if (v42)
            {
              swift_bridgeObjectRetain();
              uint64_t v42 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v39, v41);
              unint64_t v44 = v43;
              swift_bridgeObjectRelease();
            }

            else
            {
              unint64_t v44 = 0xE000000000000000LL;
            }

            outlined release of String((uint64_t)v108);
            if (!(_DWORD)v31
              || (_DWORD)v31 == 2
              || (v57._Swift::Int countAndFlagsBits = 47LL, v57._object = (void *)0xE100000000000000LL, String.hasSuffix(_:)(v57)))
            {
              swift_bridgeObjectRelease();
            }

            else
            {
              unint64_t v82 = v39;
              unint64_t v83 = v41;
              swift_bridgeObjectRetain();
              v59._Swift::Int countAndFlagsBits = 47LL;
              v59._unint64_t object = (void *)0xE100000000000000LL;
              String.append(_:)(v59);
              swift_bridgeObjectRelease();
              unint64_t v60 = HIBYTE(v41) & 0xF;
              if ((v41 & 0x2000000000000000LL) == 0) {
                unint64_t v60 = v82 & 0xFFFFFFFFFFFFLL;
              }
              if (v60)
              {
                uint64_t v42 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v82, v83);
                unint64_t v62 = v61;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t v44 = v62;
              }

              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v42 = 0LL;
                unint64_t v44 = 0xE000000000000000LL;
              }
            }

            unint64_t v82 = *(void *)v105;
            LOBYTE(v83) = 0;
            *(_DWORD *)((char *)&v83 + 1) = *(_DWORD *)&v105[9];
            *(_WORD *)((char *)&v83 + 5) = v105[13];
            HIBYTE(v83) = v105[15];
            char v84 = v105[16];
            *(_OWORD *)char v85 = *(_OWORD *)&v105[24];
            *(_OWORD *)&v85[16] = *(_OWORD *)&v105[40];
            *(_OWORD *)&v85[32] = *(_OWORD *)&v105[56];
            *(_OWORD *)&v85[48] = *(_OWORD *)&v105[72];
            *(void *)&v85[64] = *(void *)&v105[88];
            char v86 = v106;
            uint64_t v87 = v42;
            unint64_t v88 = v44;
            __int128 v89 = *(_OWORD *)&v107[8];
            __int128 v90 = *(_OWORD *)&v107[24];
            char v91 = v107[40];
            char v92 = v107[41];
            URLComponents.url.getter((uint64_t *)&v79);
            outlined release of URLComponents((uint64_t)&v82);
            id v58 = v79;
            if (v79)
            {
              uint64_t v7 = v80;
              uint64_t v9 = v81;
            }

            else
            {
              id v58 = v78;
              swift_retain();
              swift_retain();
            }

            *a3 = v58;
            a3[1] = v7;
            a3[2] = v9;
            return;
          }

          goto LABEL_5;
        }
      }

      else
      {
        swift_release();
        swift_release();
      }
    }

    else
    {
      unsigned __int8 v20 = objc_msgSend(v14, sel_isFileURL);
      swift_release();
      swift_release();

      if ((v20 & 1) != 0) {
        goto LABEL_21;
      }
    }

    uint64_t v31 = v13;
    *(void *)unint64_t v105 = a1;
    *(void *)&v105[8] = a2;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    uint64_t v32 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v10 = objc_msgSend(v14, sel_URLByAppendingPathComponent_isDirectory_, v32, v31);
    swift_unknownObjectRelease();
    if (!v10)
    {
      unint64_t v30 = v14;
      goto LABEL_25;
    }

uint64_t URL.deletingLastPathComponent()@<X0>(Swift::Int countAndFlagsBits@<X8>)
{
  unint64_t object = *v1;
  uint64_t v3 = v1[1];
  unint64_t v5 = v1[2];
  uint64_t result = _foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!v3)
    {
      __break(1u);
LABEL_73:
      __break(1u);
      return result;
    }

    if ((*(_BYTE *)(v3 + 168) & 1) != 0) {
      uint64_t v7 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      uint64_t v7 = String.subscript.getter();
    }
    uint64_t v23 = MEMORY[0x186E1B610](v7);
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v26 = HIBYTE(v25) & 0xF;
    if ((v25 & 0x2000000000000000LL) == 0) {
      uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
    }
    if (!v26)
    {
      *(void *)Swift::Int countAndFlagsBits = object;
      *(void *)(countAndFlagsBits + 8) = v3;
      *(void *)(countAndFlagsBits + 16) = v5;
      swift_retain();
      id v29 = (id)object;
      return swift_retain();
    }

    char v27 = *(_BYTE *)(v3 + 218);
    char v109 = 1;
    char v108 = 1;
    char v107 = 1;
    char v106 = 1;
    char v105 = 1;
    char v104 = 1;
    char v103 = 1;
    char v102 = 1;
    char v101 = 1;
    char v100 = 1;
    char v99 = 1;
    char v98 = v27;
    char v97 = 0;
    if ((*(_BYTE *)(v3 + 168) & 1) != 0)
    {
      swift_retain();
      uint64_t v28 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }

    else
    {
      swift_retain();
      uint64_t v28 = String.subscript.getter();
    }

    uint64_t v30 = MEMORY[0x186E1B610](v28);
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t Path = String._deletingLastPathComponent()(v30, v32);
    unint64_t v34 = v33;
    swift_bridgeObjectRelease_n();
    uint64_t v95 = Path;
    unint64_t v96 = v34;
    uint64_t v35 = HIBYTE(v34) & 0xF;
    if ((v34 & 0x2000000000000000LL) == 0) {
      uint64_t v35 = Path & 0xFFFFFFFFFFFFLL;
    }
    if (v35 && (specialized BidirectionalCollection.last.getter(Path, v34) & 0x1FF) != 0x2F)
    {
      v36._Swift::Int countAndFlagsBits = 47LL;
      v36._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v36);
      uint64_t Path = v95;
      unint64_t v34 = v96;
    }

    char v108 = 0;
    char v102 = 0;
    if ((v34 & 0x1000000000000000LL) != 0)
    {
      *(void *)uint64_t v87 = Path;
      *(void *)&v87[8] = v34;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      uint64_t v63 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      __int128 v64 = (unsigned __int16 *)objc_msgSend(v63, sel__fastCharacterContents);
      id v65 = v63;
      if (v64)
      {
        *(void *)uint64_t v87 = Path;
        *(void *)&v87[8] = v34;
        StringProtocol._ephemeralString.getter();
        __int128 v66 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v67 = objc_msgSend(v66, sel_length);
        swift_unknownObjectRelease();
        uint64_t v68 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v64,  (uint64_t)v67,  0x10u,  1);
      }

      else
      {
        uint64_t v68 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( Path,  v34,  0x10u,  1);
      }

      uint64_t v39 = v68;
      swift_bridgeObjectRelease_n();
      if ((v39 & 1) != 0)
      {
LABEL_32:
        swift_bridgeObjectRelease();
        v82._Swift::Int countAndFlagsBits = v3;
        LOBYTE(v82._object) = v108;
        BYTE1(v82._object) = v107;
        BYTE2(v82._object) = v106;
        BYTE3(v82._object) = v105;
        BYTE4(v82._object) = v104;
        BYTE5(v82._object) = v103;
        BYTE6(v82._object) = v102;
        HIBYTE(v82._object) = v101;
        v83[0] = v100;
        memset(&v83[8], 0, 64);
        uint64_t v84 = 0LL;
        LOBYTE(v85) = v99;
        *((void *)&v85 + 1) = Path;
        *(void *)char v86 = v34;
        memset(&v86[8], 0, 32);
        v86[40] = v98;
        v86[41] = v97;
        *(Swift::String *)uint64_t v87 = v82;
        *(_OWORD *)&v87[16] = *(_OWORD *)v83;
        __int128 v90 = *(_OWORD *)&v83[48];
        __int128 v91 = 0uLL;
        __int128 v88 = *(_OWORD *)&v83[16];
        __int128 v89 = *(_OWORD *)&v83[32];
        *(_OWORD *)((char *)v94 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)&v86[26];
        __int128 v93 = *(_OWORD *)v86;
        v94[0] = *(_OWORD *)&v86[16];
        __int128 v92 = v85;
        v77[6] = v85;
        v77[7] = *(_OWORD *)v86;
        v78[0] = *(_OWORD *)&v86[16];
        *(_OWORD *)((char *)v78 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)&v86[26];
        v77[2] = *(_OWORD *)&v83[16];
        v77[3] = *(_OWORD *)&v83[32];
        v77[4] = *(_OWORD *)&v83[48];
        v77[5] = 0uLL;
        v77[0] = v82;
        v77[1] = *(_OWORD *)v83;
        unint64_t v79 = object;
        uint64_t v80 = v3;
        unint64_t v81 = v5;
        outlined retain of URLComponents((uint64_t)v87);
        URL.baseURL.getter(v76);
        unint64_t v40 = (void *)v76[0];
        v75[0] = v76[0];
        v75[1] = v76[1];
        v75[2] = v76[2];
        URLComponents.url(relativeTo:)((uint64_t)v75, (uint64_t *)&v79);
        outlined consume of URL?(v40);
        uint64_t result = outlined release of URLComponents((uint64_t)&v82);
        uint64_t v41 = v79;
        if (v79)
        {
          uint64_t v43 = v80;
          unint64_t v42 = v81;
          swift_bridgeObjectRelease();
          uint64_t result = outlined release of URLComponents((uint64_t)&v82);
          *(void *)Swift::Int countAndFlagsBits = v41;
          *(void *)(countAndFlagsBits + 8) = v43;
          *(void *)(countAndFlagsBits + 16) = v42;
          return result;
        }

        goto LABEL_73;
      }
    }

    else
    {
      if ((v34 & 0x2000000000000000LL) != 0)
      {
        uint64_t v38 = HIBYTE(v34) & 0xF;
        *(void *)uint64_t v87 = Path;
        *(void *)&v87[8] = v34 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v37 = v87;
      }

      else if ((Path & 0x1000000000000000LL) != 0)
      {
        uint64_t v37 = (char *)((v34 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v38 = Path & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v37 = (char *)_StringObject.sharedUTF8.getter();
      }

      uint64_t v39 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v37, v38, 0x10u, 1);
      swift_bridgeObjectRetain();
      if ((v39 & 1) != 0) {
        goto LABEL_32;
      }
    }

    swift_bridgeObjectRelease();
    int v71 = 0;
    uint64_t v70 = 897LL;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_71;
  }

  swift_retain();
  uint64_t Path = (uint64_t)(id)object;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    Swift::Int v74 = countAndFlagsBits;
    *(void *)uint64_t v87 = Path;
    *(void *)&v87[8] = v3;
    *(void *)&v87[16] = v5;
    id v9 = (id)Path;
    swift_retain();
    swift_retain();
    Swift::String v10 = URL.path(percentEncoded:)(1);
    Swift::Int countAndFlagsBits = v10._countAndFlagsBits;
    Swift::String v82 = v10;
    swift_bridgeObjectRetain();
    id v73 = v9;
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v10._object;
    }

    else
    {
      unint64_t object = (unint64_t)v10._object;
      if ((specialized BidirectionalCollection.last.getter(v10._countAndFlagsBits, (unint64_t)v10._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        unint64_t object = (unint64_t)v82._object;
        Swift::Int countAndFlagsBits = v82._countAndFlagsBits;
      }
    }

    *(void *)uint64_t v87 = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(v77, 0x2FuLL);
    uint64_t v39 = *(void *)v87;
    uint64_t v44 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if ((object & 0x2000000000000000LL) != 0) {
      uint64_t v45 = HIBYTE(object) & 0xF;
    }
    else {
      uint64_t v45 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v45)
    {
      swift_bridgeObjectRelease();
      uint64_t v47 = 0LL;
      unint64_t v49 = 0xE000000000000000LL;
      id v54 = v73;
      Swift::Int countAndFlagsBits = v74;
LABEL_53:
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_56:
      swift_release();
      swift_release();

      goto LABEL_57;
    }

    uint64_t v72 = &v70;
    swift_bridgeObjectRetain();
    if ((object & 0x1000000000000000LL) != 0)
    {
      uint64_t v47 = 0LL;
      unint64_t v49 = 1LL;
    }

    else
    {
      if ((object & 0x2000000000000000LL) == 0)
      {
        if ((countAndFlagsBits & 0x1000000000000000LL) != 0)
        {
          uint64_t v46 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_43:
          uint64_t v47 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(v46, v44, v39);
          unint64_t v49 = v48;
          goto LABEL_51;
        }

void URL.appendingPathExtension(_:)(unint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  id v8 = *(void **)v3;
  uint64_t v7 = *(void *)(v3 + 8);
  unint64_t v9 = *(void *)(v3 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    swift_retain();
    id v11 = v8;
    swift_retain();
    uint64_t v70 = a2;
    if (!_foundation_swift_url_feature_enabled())
    {
      id v16 = objc_msgSend(v11, sel__parameterString);
      if (v16)
      {
        uint64_t v17 = v16;
        id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        uint64_t v20 = v19;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v21 = objc_msgSend(v11, sel_path)) != 0)
        {
          Swift::String v22 = v21;
          id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          uint64_t v25 = v24;

          uint64_t v94 = (uint64_t)v23;
          *(void *)&__int128 v95 = v25;
          swift_bridgeObjectRetain();
          v26._Swift::Int countAndFlagsBits = 59LL;
          v26._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v26);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v27._Swift::Int countAndFlagsBits = (uint64_t)v18;
          v27._unint64_t object = v20;
          String.append(_:)(v27);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v94 = 59LL;
          *(void *)&__int128 v95 = 0xE100000000000000LL;
          v55._Swift::Int countAndFlagsBits = (uint64_t)v18;
          v55._unint64_t object = v20;
          String.append(_:)(v55);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
        uint64_t v47 = v94;
        unint64_t v49 = v95;
      }

      else
      {
        id v56 = objc_msgSend(v11, sel_path);
        if (v56)
        {
          uint64_t v57 = v56;
          uint64_t v47 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
          unint64_t v49 = v58;
          swift_release();
          swift_release();
        }

        else
        {
          swift_release();
          swift_release();

          uint64_t v47 = 0LL;
          unint64_t v49 = 0xE000000000000000LL;
        }
      }

      goto LABEL_50;
    }

    unint64_t v69 = a1;
    int v71 = a3;
    uint64_t v94 = (uint64_t)v11;
    *(void *)&__int128 v95 = v7;
    *((void *)&v95 + 1) = v9;
    id v12 = v11;
    swift_retain();
    swift_retain();
    Swift::String v13 = URL.path(percentEncoded:)(1);
    Swift::Int countAndFlagsBits = v13._countAndFlagsBits;
    v91[0] = v13;
    swift_bridgeObjectRetain();
    id v68 = v12;
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v13._object;
    }

    else
    {
      unint64_t object = (unint64_t)v13._object;
      if ((specialized BidirectionalCollection.last.getter(v13._countAndFlagsBits, (unint64_t)v13._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        unint64_t object = *((void *)&v91[0] + 1);
        Swift::Int countAndFlagsBits = *(void *)&v91[0];
      }
    }

    uint64_t v94 = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v86, 0x2FuLL);
    uint64_t v43 = v94;
    uint64_t v44 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if ((object & 0x2000000000000000LL) != 0) {
      uint64_t v45 = HIBYTE(object) & 0xF;
    }
    else {
      uint64_t v45 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v45)
    {
      v67[1] = v67;
      swift_bridgeObjectRetain();
      if ((object & 0x1000000000000000LL) != 0)
      {
        uint64_t v47 = 0LL;
        unint64_t v49 = 1LL;
      }

      else if ((object & 0x2000000000000000LL) != 0)
      {
        uint64_t v94 = countAndFlagsBits;
        *(void *)&__int128 v95 = object & 0xFFFFFFFFFFFFFFLL;
        uint64_t v47 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)( (uint64_t)&v94,  HIBYTE(object) & 0xF,  v43);
        unint64_t v49 = v60;
      }

      else
      {
        if ((countAndFlagsBits & 0x1000000000000000LL) != 0)
        {
          uint64_t v46 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
        }

        else
        {
          uint64_t v46 = _StringObject.sharedUTF8.getter();
          uint64_t v44 = v66;
        }

        uint64_t v47 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(v46, v44, v43);
        unint64_t v49 = v48;
      }

      Swift::String v59 = v68;
      if (v49 == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v47 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( countAndFlagsBits,  object,  v43);
        unint64_t v49 = v61;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v49) {
          goto LABEL_46;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v49) {
          goto LABEL_46;
        }
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v47 = 0LL;
      unint64_t v49 = 0xE000000000000000LL;
      goto LABEL_49;
    }

    swift_bridgeObjectRelease();
    uint64_t v47 = 0LL;
    unint64_t v49 = 0xE000000000000000LL;
    Swift::String v59 = v68;
LABEL_46:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_49:
    swift_release();
    swift_release();

    a3 = v71;
LABEL_50:
    swift_bridgeObjectRelease();
    uint64_t v62 = HIBYTE(v49) & 0xF;
    if ((v49 & 0x2000000000000000LL) == 0) {
      uint64_t v62 = v47 & 0xFFFFFFFFFFFFLL;
    }
    if (v62
      && (id v63 = objc_msgSend(v11, sel_URLByAppendingPathExtension_, String._bridgeToObjectiveCImpl()()),
          swift_unknownObjectRelease(),
          v63))
    {
      URL.init(reference:)(v63, &v94);

      __int128 v64 = v95;
      *a3 = v94;
      *(_OWORD *)(a3 + 1) = v64;
    }

    else
    {
      *a3 = (uint64_t)v11;
      a3[1] = v7;
      a3[2] = v9;
      id v65 = v11;
      swift_retain();
      swift_retain();
    }

    return;
  }

  if (v7)
  {
    if ((*(_BYTE *)(v7 + 168) & 1) != 0) {
      uint64_t v10 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      uint64_t v10 = String.subscript.getter();
    }
    uint64_t v28 = MEMORY[0x186E1B610](v10);
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000LL) == 0) {
      uint64_t v31 = v28 & 0xFFFFFFFFFFFFLL;
    }
    if (!v31)
    {
      *a3 = (uint64_t)v8;
      a3[1] = v7;
      a3[2] = v9;
      swift_retain();
      id v42 = v8;
      swift_retain();
      return;
    }

    unint64_t v69 = v9;
    int v71 = a3;
    unsigned __int8 v32 = *(_BYTE *)(v7 + 218);
    char v93 = 1;
    uint64_t v94 = v7;
    *(void *)&__int128 v95 = 0x101010101010101LL;
    BYTE8(v95) = 1;
    __int128 v96 = 0u;
    __int128 v97 = 0u;
    __int128 v98 = 0u;
    __int128 v99 = 0u;
    uint64_t v100 = 0LL;
    char v101 = 1;
    __int128 v102 = 0u;
    __int128 v103 = 0u;
    __int128 v104 = 0u;
    __int16 v105 = v32;
    swift_retain();
    unint64_t v33 = (unint64_t)URLComponents._URLComponents.path.getter();
    unint64_t v35 = v34;
    if ((specialized String.validatePathExtension(_:)(a1, (unint64_t)a2) & 1) != 0)
    {
      *(void *)&v91[0] = 46LL;
      *((void *)&v91[0] + 1) = 0xE100000000000000LL;
      v36._Swift::Int countAndFlagsBits = a1;
      v36._unint64_t object = a2;
      String.append(_:)(v36);
      Swift::String v37 = (Swift::String)v91[0];
      *(void *)&v91[0] = v33;
      *((void *)&v91[0] + 1) = v35;
      swift_bridgeObjectRetain();
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    uint64_t v38 = HIBYTE(v35) & 0xF;
    if ((v35 & 0x2000000000000000LL) == 0) {
      uint64_t v38 = v33 & 0xFFFFFFFFFFFFLL;
    }
    if (v38)
    {
      uint64_t v39 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v33, v35);
      unint64_t v41 = v40;
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v39 = 0LL;
      unint64_t v41 = 0xE000000000000000LL;
    }

    *(void *)&__int128 v86 = v7;
    BYTE8(v86) = 0;
    *(_DWORD *)((char *)&v86 + 9) = 16843009;
    BYTE13(v86) = 1;
    HIWORD(v86) = 256;
    v87[0] = 1;
    memset(&v87[8], 0, 64);
    uint64_t v88 = 0LL;
    LOBYTE(v89) = 1;
    *((void *)&v89 + 1) = v39;
    *(void *)__int128 v90 = v41;
    memset(&v90[8], 0, 32);
    v90[40] = v32;
    v90[41] = 0;
    v91[6] = v89;
    v91[7] = *(_OWORD *)v90;
    v92[0] = *(_OWORD *)&v90[16];
    v91[2] = *(_OWORD *)&v87[16];
    v91[3] = *(_OWORD *)&v87[32];
    v91[4] = *(_OWORD *)&v87[48];
    v91[5] = 0uLL;
    v91[0] = v86;
    v91[1] = *(_OWORD *)v87;
    *(_OWORD *)((char *)v92 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)&v90[26];
    __int128 v80 = v89;
    __int128 v81 = *(_OWORD *)v90;
    v82[0] = *(_OWORD *)&v90[16];
    *(_OWORD *)((char *)v82 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)&v90[26];
    __int128 v76 = *(_OWORD *)&v87[16];
    __int128 v77 = *(_OWORD *)&v87[32];
    __int128 v78 = *(_OWORD *)&v87[48];
    __int128 v79 = 0uLL;
    __int128 v74 = v86;
    __int128 v75 = *(_OWORD *)v87;
    uint64_t v83 = (uint64_t)v8;
    uint64_t v84 = v7;
    unint64_t v85 = v69;
    outlined retain of URLComponents((uint64_t)v91);
    URL.baseURL.getter(v73);
    Swift::String v50 = (void *)v73[0];
    v72[0] = v73[0];
    v72[1] = v73[1];
    v72[2] = v73[2];
    URLComponents.url(relativeTo:)((uint64_t)v72, &v83);
    outlined consume of URL?(v50);
    outlined release of URLComponents((uint64_t)&v86);
    uint64_t v51 = v83;
    if (v83)
    {
      uint64_t v53 = v84;
      uint64_t v52 = v85;
      outlined release of URLComponents((uint64_t)&v86);
      id v54 = v71;
      *int v71 = v51;
      v54[1] = v53;
      v54[2] = v52;
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t URL.deletingPathExtension()@<X0>(unint64_t object@<X8>)
{
  uint64_t v3 = v103;
  unint64_t v5 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t result = _foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!v4)
    {
      __break(1u);
LABEL_74:
      __break(1u);
      return result;
    }

    if ((*(_BYTE *)(v4 + 168) & 1) != 0) {
      uint64_t v8 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      uint64_t v8 = String.subscript.getter();
    }
    uint64_t v26 = MEMORY[0x186E1B610](v8);
    unint64_t v28 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000LL) == 0) {
      uint64_t v29 = v26 & 0xFFFFFFFFFFFFLL;
    }
    if (!v29)
    {
      *(void *)unint64_t object = v5;
      *(void *)(object + 8) = v4;
      *(void *)(object + 16) = v6;
      swift_retain();
      id v33 = v5;
      return swift_retain();
    }

    char v30 = *(_BYTE *)(v4 + 218);
    char v117 = 1;
    char v116 = 1;
    char v115 = 1;
    char v114 = 1;
    char v113 = 1;
    char v112 = 1;
    char v111 = 1;
    char v110 = 1;
    char v109 = 1;
    char v108 = 1;
    char v107 = 1;
    char v106 = v30;
    char v105 = 0;
    char v31 = *(_BYTE *)(v4 + 168);
    uint64_t v90 = v6;
    if ((v31 & 1) != 0)
    {
      swift_retain();
      uint64_t v32 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }

    else
    {
      swift_retain();
      uint64_t v3 = v103;
      uint64_t v32 = String.subscript.getter();
    }

    uint64_t countAndFlagsBits = MEMORY[0x186E1B610](v32);
    unint64_t v9 = v34;
    swift_bridgeObjectRelease();
    uint64_t v35 = String.pathExtension.getter(countAndFlagsBits, v9);
    unint64_t v37 = v36;
    uint64_t v38 = swift_bridgeObjectRelease();
    uint64_t v39 = HIBYTE(v37) & 0xF;
    if ((v37 & 0x2000000000000000LL) == 0) {
      uint64_t v39 = v35 & 0xFFFFFFFFFFFFLL;
    }
    if (v39)
    {
      LOBYTE(v103[0]) = 46;
      MEMORY[0x1895F8858](v38);
      uint64_t v85 = (uint64_t)v103;
      swift_bridgeObjectRetain();
      specialized BidirectionalCollection.lastIndex(where:)( (unint64_t)_sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0,  (uint64_t)&v84,  countAndFlagsBits,  v9);
      char v41 = v40;
      swift_bridgeObjectRelease();
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v42 = String.subscript.getter();
        uint64_t v44 = v43;
        uint64_t v46 = v45;
        uint64_t v48 = v47;
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = MEMORY[0x186E1B610](v42, v44, v46, v48);
        unint64_t v50 = v49;
        swift_bridgeObjectRelease();
        uint64_t v3 = v103;
        swift_bridgeObjectRelease();
        unint64_t v9 = v50;
      }
    }

    char v116 = 0;
    char v110 = 0;
    if ((v9 & 0x1000000000000000LL) != 0)
    {
      *(void *)&v103[0] = countAndFlagsBits;
      *((void *)&v103[0] + 1) = v9;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      __int128 v76 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      __int128 v77 = (unsigned __int16 *)objc_msgSend(v76, sel__fastCharacterContents);
      id v78 = v76;
      if (v77)
      {
        *(void *)&v103[0] = countAndFlagsBits;
        *((void *)&v103[0] + 1) = v9;
        StringProtocol._ephemeralString.getter();
        __int128 v79 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v80 = objc_msgSend(v79, sel_length);
        swift_unknownObjectRelease();
        char v81 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v77,  (uint64_t)v80,  0x10u,  1);
      }

      else
      {
        char v81 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( countAndFlagsBits,  v9,  0x10u,  1);
      }

      char v82 = v81;
      swift_bridgeObjectRelease_n();
      uint64_t v3 = v103;
      if ((v82 & 1) != 0)
      {
LABEL_32:
        swift_bridgeObjectRelease();
        v98._uint64_t countAndFlagsBits = v4;
        LOBYTE(v98._object) = v116;
        BYTE1(v98._object) = v115;
        BYTE2(v98._object) = v114;
        BYTE3(v98._object) = v113;
        BYTE4(v98._object) = v112;
        BYTE5(v98._object) = v111;
        BYTE6(v98._object) = v110;
        HIBYTE(v98._object) = v109;
        v99[0] = v108;
        memset(&v99[8], 0, 64);
        uint64_t v100 = 0LL;
        LOBYTE(v101) = v107;
        *((void *)&v101 + 1) = countAndFlagsBits;
        *(void *)&v102[0] = v9;
        *(_OWORD *)((char *)v102 + 8) = 0u;
        *(_OWORD *)((char *)&v102[1] + 8) = 0u;
        BYTE8(v102[2]) = v106;
        BYTE9(v102[2]) = v105;
        v103[0] = v98;
        v103[1] = *(_OWORD *)v99;
        v103[4] = *(_OWORD *)&v99[48];
        v103[5] = 0uLL;
        v103[2] = *(_OWORD *)&v99[16];
        v103[3] = *(_OWORD *)&v99[32];
        *(_OWORD *)((char *)v104 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)((char *)&v102[1] + 10);
        v103[7] = v102[0];
        v104[0] = v102[1];
        v103[6] = v101;
        v93[6] = v101;
        v93[7] = v102[0];
        v94[0] = v102[1];
        *(_OWORD *)((char *)v94 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)((char *)&v102[1] + 10);
        v93[2] = *(_OWORD *)&v99[16];
        v93[3] = *(_OWORD *)&v99[32];
        v93[4] = *(_OWORD *)&v99[48];
        v93[5] = 0uLL;
        v93[0] = v98;
        v93[1] = *(_OWORD *)v99;
        uint64_t v95 = (uint64_t)v5;
        uint64_t v96 = v4;
        uint64_t v97 = v90;
        outlined retain of URLComponents((uint64_t)v103);
        URL.baseURL.getter(v92);
        uint64_t v53 = (void *)v92[0];
        v91[0] = v92[0];
        v91[1] = v92[1];
        v91[2] = v92[2];
        URLComponents.url(relativeTo:)((uint64_t)v91, &v95);
        outlined consume of URL?(v53);
        uint64_t result = outlined release of URLComponents((uint64_t)&v98);
        uint64_t v54 = v95;
        if (v95)
        {
          uint64_t v56 = v96;
          uint64_t v55 = v97;
          uint64_t result = outlined release of URLComponents((uint64_t)&v98);
          *(void *)unint64_t object = v54;
          *(void *)(object + 8) = v56;
          *(void *)(object + 16) = v55;
          return result;
        }

        goto LABEL_74;
      }
    }

    else
    {
      if ((v9 & 0x2000000000000000LL) != 0)
      {
        uint64_t v52 = HIBYTE(v9) & 0xF;
        *(void *)&v103[0] = countAndFlagsBits;
        *((void *)&v103[0] + 1) = v9 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v51 = (char *)v103;
      }

      else if ((countAndFlagsBits & 0x1000000000000000LL) != 0)
      {
        uint64_t v51 = (char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v52 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v51 = (char *)_StringObject.sharedUTF8.getter();
      }

      if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v51, v52, 0x10u, 1)) {
        goto LABEL_32;
      }
    }

    swift_bridgeObjectRelease();
    int v86 = 0;
    uint64_t v85 = 897LL;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_72;
  }

  swift_retain();
  unint64_t v9 = v5;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    unint64_t v89 = object;
    *(void *)&v103[0] = v9;
    *((void *)&v103[0] + 1) = v4;
    *(void *)&v103[1] = v6;
    id v10 = (id)v9;
    swift_retain();
    uint64_t v90 = v6;
    swift_retain();
    Swift::String v11 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v11._countAndFlagsBits;
    Swift::String v98 = v11;
    swift_bridgeObjectRetain();
    id v88 = v10;
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v11._object;
    }

    else
    {
      unint64_t object = (unint64_t)v11._object;
      if ((specialized BidirectionalCollection.last.getter(v11._countAndFlagsBits, (unint64_t)v11._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        unint64_t object = (unint64_t)v98._object;
        uint64_t countAndFlagsBits = v98._countAndFlagsBits;
      }
    }

    *(void *)&v103[0] = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(v93, 0x2FuLL);
    uint64_t v3 = *(_OWORD **)&v103[0];
    uint64_t v57 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if ((object & 0x2000000000000000LL) != 0) {
      uint64_t v58 = HIBYTE(object) & 0xF;
    }
    else {
      uint64_t v58 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v58)
    {
      swift_bridgeObjectRelease();
      uint64_t v60 = 0LL;
      unint64_t v62 = 0xE000000000000000LL;
      uint64_t v6 = v90;
      id v67 = v88;
      goto LABEL_55;
    }

    uint64_t v87 = (uint64_t)&v87;
    swift_bridgeObjectRetain();
    if ((object & 0x1000000000000000LL) != 0)
    {
      uint64_t v60 = 0LL;
      unint64_t v62 = 1LL;
    }

    else
    {
      if ((object & 0x2000000000000000LL) == 0)
      {
        if ((countAndFlagsBits & 0x1000000000000000LL) != 0)
        {
          uint64_t v59 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_43:
          uint64_t v60 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(v59, v57, (uint64_t)v3);
          unint64_t v62 = v61;
          goto LABEL_51;
        }

Swift::Void __swiftcall URL.appendPathComponent(_:isDirectory:)(Swift::String _, Swift::Bool isDirectory)
{
  uint64_t v3 = v2;
  unint64_t object = _._object;
  unint64_t countAndFlagsBits = _._countAndFlagsBits;
  uint64_t v8 = (void *)*v2;
  uint64_t v7 = v2[1];
  uint64_t v9 = v2[2];
  if (_foundation_swift_url_feature_enabled())
  {
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      specialized URL.appending<A>(path:directoryHint:encodingSlashes:)( countAndFlagsBits,  (uint64_t)object,  !isDirectory,  0,  (uint64_t)v8,  v7);

LABEL_14:
      swift_release();
      swift_release();
      uint64_t v7 = *((void *)&v89 + 1);
      uint64_t v8 = (void *)v89;
      uint64_t v9 = *(void *)v90;
      goto LABEL_15;
    }

    v22._unint64_t countAndFlagsBits = 47LL;
    v22._unint64_t object = (void *)0xE100000000000000LL;
    String.hasSuffix(_:)(v22);
    *(void *)&__int128 v89 = countAndFlagsBits;
    *((void *)&v89 + 1) = object;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    uint64_t v23 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v10 = objc_msgSend(v8, sel_URLByAppendingPathComponent_isDirectory_, v23, isDirectory);
    swift_unknownObjectRelease();
    if (v10)
    {
LABEL_13:
      URL.init(reference:)(v10, &v89);

      goto LABEL_14;
    }

    *(void *)&__int128 v89 = v8;
    *((void *)&v89 + 1) = v7;
    *(void *)uint64_t v90 = v9;
    uint64_t v24 = URL.absoluteString.getter();
    specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v24, v25, 1, (uint64_t)v79);
    outlined init with take of LocalePreferences?( (uint64_t)v79,  (uint64_t)v78,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined init with take of LocalePreferences?( (uint64_t)v79,  (uint64_t)&v80,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    __int128 v91 = v86;
    *(_OWORD *)__int128 v92 = v87;
    *(_OWORD *)&v92[16] = v88[0];
    *(_OWORD *)&v92[26] = *(_OWORD *)((char *)v88 + 10);
    *(_OWORD *)&v90[16] = v82;
    *(_OWORD *)&v90[32] = v83;
    *(_OWORD *)&v90[48] = v84;
    *(_OWORD *)&v90[64] = v85;
    __int128 v89 = v80;
    *(_OWORD *)uint64_t v90 = v81;
    outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)v77,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v77);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v79);
    uint64_t v26 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v66 = countAndFlagsBits;
    unint64_t v67 = (unint64_t)object;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    uint64_t v27 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v28 = objc_msgSend(v26, sel_stringByAppendingPathComponent_, v27);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v29 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    unint64_t v31 = v30;

    if ((v31 & 0x2000000000000000LL) != 0) {
      uint64_t v32 = HIBYTE(v31) & 0xF;
    }
    else {
      uint64_t v32 = v29 & 0xFFFFFFFFFFFFLL;
    }
    outlined init with take of LocalePreferences?( (uint64_t)&v91 + 8,  (uint64_t)v93,  &demangling cache variable for type metadata for String?);
    if (v32)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v29, v31);
      unint64_t v34 = v33;
      swift_bridgeObjectRelease();
    }

    else
    {
      unint64_t v34 = 0xE000000000000000LL;
    }

    outlined release of String((uint64_t)v93);
    if (isDirectory
      && (v41._unint64_t countAndFlagsBits = 47LL, v41._object = (void *)0xE100000000000000LL, !String.hasSuffix(_:)(v41)))
    {
      unint64_t v66 = v29;
      unint64_t v67 = v31;
      swift_bridgeObjectRetain();
      v45._unint64_t countAndFlagsBits = 47LL;
      v45._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      unint64_t v46 = HIBYTE(v31) & 0xF;
      if ((v31 & 0x2000000000000000LL) == 0) {
        unint64_t v46 = v66 & 0xFFFFFFFFFFFFLL;
      }
      if (v46)
      {
        uint64_t v32 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v66, v67);
        unint64_t v48 = v47;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v34 = v48;
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v32 = 0LL;
        unint64_t v34 = 0xE000000000000000LL;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    unint64_t v66 = v89;
    LOBYTE(v67) = 0;
    *(_DWORD *)((char *)&v67 + 1) = *(_DWORD *)((char *)&v89 + 9);
    *(_WORD *)((char *)&v67 + 5) = BYTE13(v89);
    HIBYTE(v67) = HIBYTE(v89);
    char v68 = v90[0];
    *(_OWORD *)unint64_t v69 = *(_OWORD *)&v90[8];
    *(_OWORD *)&v69[16] = *(_OWORD *)&v90[24];
    *(_OWORD *)&v69[32] = *(_OWORD *)&v90[40];
    *(_OWORD *)&v69[48] = *(_OWORD *)&v90[56];
    *(void *)&v69[64] = *(void *)&v90[72];
    char v70 = v91;
    uint64_t v71 = v32;
    unint64_t v72 = v34;
    __int128 v73 = *(_OWORD *)&v92[8];
    __int128 v74 = *(_OWORD *)&v92[24];
    char v75 = v92[40];
    char v76 = v92[41];
    goto LABEL_29;
  }

  id v10 =  objc_msgSend( v8,  sel_URLByAppendingPathComponent_isDirectory_,  String._bridgeToObjectiveCImpl()(),  isDirectory);
  swift_unknownObjectRelease();
  if (v10) {
    goto LABEL_13;
  }
  *(void *)&__int128 v89 = v8;
  *((void *)&v89 + 1) = v7;
  *(void *)uint64_t v90 = v9;
  uint64_t v11 = URL.absoluteString.getter();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v11, v12, 1, (uint64_t)v79);
  outlined init with take of LocalePreferences?( (uint64_t)v79,  (uint64_t)v78,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?( (uint64_t)v79,  (uint64_t)&v80,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v80) != 1)
  {
    __int128 v91 = v86;
    *(_OWORD *)__int128 v92 = v87;
    *(_OWORD *)&v92[16] = v88[0];
    *(_OWORD *)&v92[26] = *(_OWORD *)((char *)v88 + 10);
    *(_OWORD *)&v90[16] = v82;
    *(_OWORD *)&v90[32] = v83;
    *(_OWORD *)&v90[48] = v84;
    *(_OWORD *)&v90[64] = v85;
    __int128 v89 = v80;
    *(_OWORD *)uint64_t v90 = v81;
    outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)v77,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v77);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v79);
    id v13 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v13, sel_stringByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v15 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    unint64_t v17 = v16;

    if (isDirectory)
    {
      unint64_t v66 = v15;
      unint64_t v67 = v17;
      swift_bridgeObjectRetain();
      v18._unint64_t countAndFlagsBits = 47LL;
      v18._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
    }

    uint64_t v19 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000LL) == 0) {
      uint64_t v19 = v15 & 0xFFFFFFFFFFFFLL;
    }
    if (v19)
    {
      uint64_t v20 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v15, v17);
      unint64_t v49 = v21;
      uint64_t v50 = v20;
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      unint64_t v49 = 0xE000000000000000LL;
      uint64_t v50 = 0LL;
    }

    char v63 = v92[40];
    char v64 = v92[41];
    uint64_t v61 = *(void *)&v92[32];
    uint64_t v62 = *(void *)&v92[24];
    uint64_t v59 = *(void *)&v92[16];
    uint64_t v60 = *(void *)&v92[8];
    char v58 = v91;
    __int128 v57 = *(_OWORD *)&v90[64];
    __int128 v56 = *(_OWORD *)&v90[48];
    __int128 v55 = *(_OWORD *)&v90[32];
    uint64_t v54 = *(void *)&v90[8];
    __int128 v53 = *(_OWORD *)&v90[16];
    char v51 = HIBYTE(v89);
    char v52 = v90[0];
    unsigned __int8 v35 = BYTE13(v89);
    char v36 = BYTE12(v89);
    char v37 = BYTE11(v89);
    char v38 = BYTE10(v89);
    char v39 = BYTE9(v89);
    unint64_t v40 = v89;
    outlined init with take of LocalePreferences?( (uint64_t)&v91 + 8,  (uint64_t)v93,  &demangling cache variable for type metadata for String?);
    outlined release of String((uint64_t)v93);
    unint64_t v66 = v40;
    LOBYTE(v67) = 0;
    BYTE1(v67) = v39;
    BYTE2(v67) = v38;
    BYTE3(v67) = v37;
    BYTE4(v67) = v36;
    *(_WORD *)((char *)&v67 + 5) = v35;
    HIBYTE(v67) = v51;
    char v68 = v52;
    *(void *)unint64_t v69 = v54;
    *(_OWORD *)&v69[8] = v53;
    *(_OWORD *)&v69[24] = v55;
    *(_OWORD *)&v69[40] = v56;
    *(_OWORD *)&v69[56] = v57;
    char v70 = v58;
    uint64_t v71 = v50;
    unint64_t v72 = v49;
    *(void *)&__int128 v73 = v60;
    *((void *)&v73 + 1) = v59;
    *(void *)&__int128 v74 = v62;
    *((void *)&v74 + 1) = v61;
    char v75 = v63;
    char v76 = v64;
LABEL_29:
    URLComponents.url.getter(v65);
    outlined release of URLComponents((uint64_t)&v66);
    uint64_t v42 = v65[0];
    if (v65[0])
    {
      uint64_t v44 = v65[1];
      uint64_t v43 = v65[2];

      swift_release();
      swift_release();
      uint64_t v8 = (void *)v42;
      uint64_t v7 = v44;
      uint64_t v9 = v43;
    }
  }

Swift::Void __swiftcall URL.appendPathComponent(_:)(Swift::String a1)
{
  Swift::String v2 = v1;
  unint64_t object = a1._object;
  unint64_t countAndFlagsBits = a1._countAndFlagsBits;
  id v5 = (id)*v1;
  uint64_t v6 = v1[1];
  uint64_t v7 = v1[2];
  if (_foundation_swift_url_feature_enabled())
  {
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      specialized URL.appending<A>(path:directoryHint:encodingSlashes:)( countAndFlagsBits,  (uint64_t)object,  2,  0,  (uint64_t)v5,  v6);

LABEL_6:
      swift_release();
      swift_release();
LABEL_25:
      uint64_t v6 = *((void *)&v96 + 1);
      id v5 = (id)v96;
      uint64_t v7 = *(void *)v97;
      goto LABEL_26;
    }

    v9._unint64_t countAndFlagsBits = 47LL;
    v9._unint64_t object = (void *)0xE100000000000000LL;
    Swift::Bool v10 = String.hasSuffix(_:)(v9);
    swift_retain();
    id v5 = v5;
    swift_retain();
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      *(void *)&__int128 v96 = v5;
      *((void *)&v96 + 1) = v6;
      *(void *)uint64_t v97 = v7;
      URL.scheme.getter();
      if (v11)
      {
        Swift::String v12 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v12._countAndFlagsBits == 1701603686 && v12._object == (void *)0xE400000000000000LL)
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          goto LABEL_21;
        }

        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if ((v24 & 1) != 0)
        {
LABEL_21:
          *(void *)&__int128 v96 = countAndFlagsBits;
          *((void *)&v96 + 1) = object;
          swift_bridgeObjectRetain();
          String.init<A>(_:)();
          uint64_t v25 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v26 = objc_msgSend(v5, sel_URLByAppendingPathComponent_, v25);
          swift_unknownObjectRelease();
          if (!v26)
          {
            LODWORD(v27) = 2;
LABEL_27:
            *(void *)&__int128 v96 = v5;
            *((void *)&v96 + 1) = v6;
            *(void *)uint64_t v97 = v7;
            uint64_t v29 = URL.absoluteString.getter();
            specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v29, v30, 1, (uint64_t)v86);
            outlined init with take of LocalePreferences?( (uint64_t)v86,  (uint64_t)v85,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
            outlined init with take of LocalePreferences?( (uint64_t)v86,  (uint64_t)&v87,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
            if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v87) != 1)
            {
              __int128 v98 = v93;
              *(_OWORD *)__int128 v99 = v94;
              *(_OWORD *)&v99[16] = v95[0];
              *(_OWORD *)&v99[26] = *(_OWORD *)((char *)v95 + 10);
              *(_OWORD *)&v97[16] = v89;
              *(_OWORD *)&v97[32] = v90;
              *(_OWORD *)&v97[48] = v91;
              *(_OWORD *)&v97[64] = v92;
              __int128 v96 = v87;
              *(_OWORD *)uint64_t v97 = v88;
              outlined init with take of LocalePreferences?( (uint64_t)v85,  (uint64_t)v84,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
              outlined retain of URLComponents((uint64_t)v84);
              URLComponents._URLComponents.path.getter();
              outlined release of URLComponents?(v86);
              unint64_t v31 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              unint64_t v73 = countAndFlagsBits;
              unint64_t v74 = (unint64_t)object;
              swift_bridgeObjectRetain();
              String.init<A>(_:)();
              uint64_t v32 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v33 = objc_msgSend(v31, sel_stringByAppendingPathComponent_, v32);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              unint64_t v34 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
              unint64_t v36 = v35;

              uint64_t v37 = (v36 & 0x2000000000000000LL) != 0 ? HIBYTE(v36) & 0xF : v34 & 0xFFFFFFFFFFFFLL;
              outlined init with take of LocalePreferences?( (uint64_t)&v98 + 8,  (uint64_t)v100,  &demangling cache variable for type metadata for String?);
              if (v37)
              {
                swift_bridgeObjectRetain();
                uint64_t v37 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v34, v36);
                unint64_t v39 = v38;
                swift_bridgeObjectRelease();
              }

              else
              {
                unint64_t v39 = 0xE000000000000000LL;
              }

              outlined release of String((uint64_t)v100);
              if (!(_DWORD)v27
                || (_DWORD)v27 == 2
                || (v49._unint64_t countAndFlagsBits = 47LL, v49._object = (void *)0xE100000000000000LL, String.hasSuffix(_:)(v49)))
              {
                swift_bridgeObjectRelease();
              }

              else
              {
                unint64_t v73 = v34;
                unint64_t v74 = v36;
                swift_bridgeObjectRetain();
                v50._unint64_t countAndFlagsBits = 47LL;
                v50._unint64_t object = (void *)0xE100000000000000LL;
                String.append(_:)(v50);
                swift_bridgeObjectRelease();
                unint64_t v51 = HIBYTE(v36) & 0xF;
                if ((v36 & 0x2000000000000000LL) == 0) {
                  unint64_t v51 = v73 & 0xFFFFFFFFFFFFLL;
                }
                if (v51)
                {
                  uint64_t v37 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v73, v74);
                  unint64_t v53 = v52;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v39 = v53;
                }

                else
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v37 = 0LL;
                  unint64_t v39 = 0xE000000000000000LL;
                }
              }

              unint64_t v73 = v96;
              LOBYTE(v74) = 0;
              *(_DWORD *)((char *)&v74 + 1) = *(_DWORD *)((char *)&v96 + 9);
              *(_WORD *)((char *)&v74 + 5) = BYTE13(v96);
              HIBYTE(v74) = HIBYTE(v96);
              char v75 = v97[0];
              *(_OWORD *)char v76 = *(_OWORD *)&v97[8];
              *(_OWORD *)&v76[16] = *(_OWORD *)&v97[24];
              *(_OWORD *)&v76[32] = *(_OWORD *)&v97[40];
              *(_OWORD *)&v76[48] = *(_OWORD *)&v97[56];
              *(void *)&v76[64] = *(void *)&v97[72];
              char v77 = v98;
              uint64_t v78 = v37;
              unint64_t v79 = v39;
              __int128 v80 = *(_OWORD *)&v99[8];
              __int128 v81 = *(_OWORD *)&v99[24];
              char v82 = v99[40];
              char v83 = v99[41];
              URLComponents.url.getter(&v70);
              outlined release of URLComponents((uint64_t)&v73);
              uint64_t v46 = v70;
              if (v70)
              {
                uint64_t v48 = v71;
                uint64_t v47 = v72;
                swift_release();
                swift_release();

                goto LABEL_43;
              }
            }

            goto LABEL_26;
          }

Swift::Void __swiftcall URL.appendPathExtension(_:)(Swift::String a1)
{
  Swift::String v2 = v1;
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  id v5 = (id)*v1;
  uint64_t v6 = v1[1];
  uint64_t v7 = v1[2];
  if (!_foundation_swift_url_feature_enabled())
  {
    swift_retain();
    id v5 = v5;
    swift_retain();
    uint64_t v63 = countAndFlagsBits;
    if ((_foundation_swift_url_feature_enabled() & 1) == 0)
    {
      id v13 = objc_msgSend(v5, sel__parameterString);
      if (v13)
      {
        unint64_t v14 = v13;
        id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        unint64_t v17 = v16;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v18 = objc_msgSend(v5, sel_path)) != 0)
        {
          unint64_t v19 = v18;
          id v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
          uint64_t v22 = v21;

          uint64_t v86 = (uint64_t)v20;
          uint64_t v87 = v22;
          swift_bridgeObjectRetain();
          v23._uint64_t countAndFlagsBits = 59LL;
          v23._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v24._uint64_t countAndFlagsBits = (uint64_t)v15;
          v24._unint64_t object = v17;
          String.append(_:)(v24);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v86 = 59LL;
          uint64_t v87 = 0xE100000000000000LL;
          v49._uint64_t countAndFlagsBits = (uint64_t)v15;
          v49._unint64_t object = v17;
          String.append(_:)(v49);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
        uint64_t v42 = v86;
        unint64_t v44 = v87;
      }

      else
      {
        id v50 = objc_msgSend(v5, sel_path);
        if (v50)
        {
          unint64_t v51 = v50;
          uint64_t v42 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
          unint64_t v44 = v52;
          swift_release();
          swift_release();
        }

        else
        {
          swift_release();
          swift_release();

          uint64_t v42 = 0LL;
          unint64_t v44 = 0xE000000000000000LL;
        }
      }

      goto LABEL_49;
    }

    uint64_t v62 = object;
    uint64_t v86 = (uint64_t)v5;
    uint64_t v87 = v6;
    uint64_t v88 = v7;
    id v9 = v5;
    swift_retain();
    swift_retain();
    Swift::String v10 = URL.path(percentEncoded:)(1);
    Swift::Int v11 = v10._countAndFlagsBits;
    v83[0] = v10;
    swift_bridgeObjectRetain();
    id v61 = v9;
    if (String.count.getter() <= 1)
    {
      unint64_t v12 = (unint64_t)v10._object;
    }

    else
    {
      unint64_t v12 = (unint64_t)v10._object;
      if ((specialized BidirectionalCollection.last.getter(v10._countAndFlagsBits, (unint64_t)v10._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        unint64_t v12 = *((void *)&v83[0] + 1);
        Swift::Int v11 = *(void *)&v83[0];
      }
    }

    uint64_t v86 = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v78, 0x2FuLL);
    uint64_t v39 = v11 & 0xFFFFFFFFFFFFLL;
    if ((v12 & 0x2000000000000000LL) != 0) {
      uint64_t v40 = HIBYTE(v12) & 0xF;
    }
    else {
      uint64_t v40 = v11 & 0xFFFFFFFFFFFFLL;
    }
    if (v40)
    {
      v59[1] = v59;
      uint64_t v60 = v86;
      swift_bridgeObjectRetain();
      if ((v12 & 0x1000000000000000LL) != 0)
      {
        uint64_t v42 = 0LL;
        unint64_t v44 = 1LL;
      }

      else if ((v12 & 0x2000000000000000LL) != 0)
      {
        uint64_t v86 = v11;
        uint64_t v87 = v12 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v42 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)( (uint64_t)&v86,  HIBYTE(v12) & 0xF,  v60);
        unint64_t v44 = v54;
      }

      else
      {
        if ((v11 & 0x1000000000000000LL) != 0)
        {
          uint64_t v41 = (v12 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }

        else
        {
          uint64_t v41 = _StringObject.sharedUTF8.getter();
          uint64_t v39 = v58;
        }

        uint64_t v42 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(v41, v39, v60);
        unint64_t v44 = v43;
      }

      unint64_t v53 = v61;
      if (v44 == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v42 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v11, v12, v60);
        unint64_t v44 = v55;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v44) {
          goto LABEL_45;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v44) {
          goto LABEL_45;
        }
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v42 = 0LL;
      unint64_t v44 = 0xE000000000000000LL;
      goto LABEL_48;
    }

    swift_bridgeObjectRelease();
    uint64_t v42 = 0LL;
    unint64_t v44 = 0xE000000000000000LL;
    unint64_t v53 = v61;
LABEL_45:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_48:
    swift_release();
    swift_release();

LABEL_49:
    swift_bridgeObjectRelease();
    uint64_t v56 = HIBYTE(v44) & 0xF;
    if ((v44 & 0x2000000000000000LL) == 0) {
      uint64_t v56 = v42 & 0xFFFFFFFFFFFFLL;
    }
    if (v56)
    {
      id v57 = objc_msgSend(v5, sel_URLByAppendingPathExtension_, String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease();
      if (v57)
      {
        URL.init(reference:)(v57, &v86);
        swift_release();
        swift_release();

        id v5 = (id)v86;
        uint64_t v6 = v87;
        uint64_t v7 = v88;
      }
    }

    goto LABEL_54;
  }

  if (v6)
  {
    if ((*(_BYTE *)(v6 + 168) & 1) != 0) {
      uint64_t v8 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      uint64_t v8 = String.subscript.getter();
    }
    uint64_t v25 = MEMORY[0x186E1B610](v8);
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000LL) == 0) {
      uint64_t v28 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (!v28) {
      goto LABEL_54;
    }
    unsigned __int8 v29 = *(_BYTE *)(v6 + 218);
    char v85 = 1;
    uint64_t v86 = v6;
    uint64_t v87 = 0x101010101010101LL;
    LOBYTE(v88) = 1;
    __int128 v89 = 0u;
    __int128 v90 = 0u;
    __int128 v91 = 0u;
    __int128 v92 = 0u;
    uint64_t v93 = 0LL;
    char v94 = 1;
    __int128 v95 = 0u;
    __int128 v96 = 0u;
    __int128 v97 = 0u;
    __int16 v98 = v29;
    swift_retain();
    unint64_t v30 = (unint64_t)URLComponents._URLComponents.path.getter();
    unint64_t v32 = v31;
    if ((specialized String.validatePathExtension(_:)(countAndFlagsBits, (unint64_t)object) & 1) != 0)
    {
      *(void *)&v83[0] = 46LL;
      *((void *)&v83[0] + 1) = 0xE100000000000000LL;
      v33._uint64_t countAndFlagsBits = countAndFlagsBits;
      v33._unint64_t object = object;
      String.append(_:)(v33);
      Swift::String v34 = (Swift::String)v83[0];
      *(void *)&v83[0] = v30;
      *((void *)&v83[0] + 1) = v32;
      swift_bridgeObjectRetain();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    uint64_t v35 = HIBYTE(v32) & 0xF;
    if ((v32 & 0x2000000000000000LL) == 0) {
      uint64_t v35 = v30 & 0xFFFFFFFFFFFFLL;
    }
    if (v35)
    {
      uint64_t v36 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v30, v32);
      unint64_t v38 = v37;
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = 0LL;
      unint64_t v38 = 0xE000000000000000LL;
    }

    *(void *)&__int128 v78 = v6;
    BYTE8(v78) = 0;
    *(_DWORD *)((char *)&v78 + 9) = 16843009;
    BYTE13(v78) = 1;
    HIWORD(v78) = 256;
    v79[0] = 1;
    memset(&v79[8], 0, 64);
    uint64_t v80 = 0LL;
    LOBYTE(v81) = 1;
    *((void *)&v81 + 1) = v36;
    *(void *)char v82 = v38;
    memset(&v82[8], 0, 32);
    v82[40] = v29;
    v82[41] = 0;
    v83[6] = v81;
    v83[7] = *(_OWORD *)v82;
    v84[0] = *(_OWORD *)&v82[16];
    v83[2] = *(_OWORD *)&v79[16];
    v83[3] = *(_OWORD *)&v79[32];
    v83[4] = *(_OWORD *)&v79[48];
    v83[5] = 0uLL;
    v83[0] = v78;
    v83[1] = *(_OWORD *)v79;
    *(_OWORD *)((char *)v84 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)&v82[26];
    __int128 v72 = v81;
    __int128 v73 = *(_OWORD *)v82;
    v74[0] = *(_OWORD *)&v82[16];
    *(_OWORD *)((char *)v74 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)&v82[26];
    __int128 v68 = *(_OWORD *)&v79[16];
    __int128 v69 = *(_OWORD *)&v79[32];
    __int128 v70 = *(_OWORD *)&v79[48];
    __int128 v71 = 0uLL;
    __int128 v66 = v78;
    __int128 v67 = *(_OWORD *)v79;
    uint64_t v75 = (uint64_t)v5;
    uint64_t v76 = v6;
    uint64_t v77 = v7;
    outlined retain of URLComponents((uint64_t)v83);
    URL.baseURL.getter(v65);
    unint64_t v45 = (void *)v65[0];
    v64[0] = v65[0];
    v64[1] = v65[1];
    v64[2] = v65[2];
    URLComponents.url(relativeTo:)((uint64_t)v64, &v75);
    outlined consume of URL?(v45);
    outlined release of URLComponents((uint64_t)&v78);
    uint64_t v46 = v75;
    if (v75)
    {
      uint64_t v48 = v76;
      uint64_t v47 = v77;
      outlined release of URLComponents((uint64_t)&v78);
      swift_release();

      swift_release();
      id v5 = (id)v46;
      uint64_t v6 = v48;
      uint64_t v7 = v47;
LABEL_54:
      *Swift::String v2 = v5;
      v2[1] = v6;
      v2[2] = v7;
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

Swift::Void __swiftcall URL.deleteLastPathComponent()()
{
  URL.deleteLastPathComponent()((void (*)(uint64_t *__return_ptr))URL.deletingLastPathComponent());
}

Swift::Void __swiftcall URL.deletePathExtension()()
{
  URL.deleteLastPathComponent()((void (*)(uint64_t *__return_ptr))URL.deletingPathExtension());
}

uint64_t URL.standardized.getter@<X0>(uint64_t a1@<X8>)
{
  Swift::Int countAndFlagsBits = (Swift::Int)v81;
  id v5 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    id v10 = objc_msgSend(v5, sel_standardizedURL);
    if (v10)
    {
      Swift::Int v11 = v10;
      URL.init(reference:)(v10, v81);

      id v12 = *(id *)v81;
      URL.init(reference:)(v12, v81);

      swift_release();
      uint64_t result = swift_release();
      __int128 v14 = *(_OWORD *)&v81[8];
      *(void *)a1 = *(void *)v81;
      *(_OWORD *)(a1 + 8) = v14;
    }

    else
    {
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = v6;
      swift_retain();
      id v27 = v5;
      return swift_retain();
    }

    return result;
  }

  swift_retain();
  unint64_t object = v5;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    id v15 = objc_msgSend((id)object, sel__parameterString);
    if (v15)
    {
      id v16 = v15;
      id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      unint64_t v19 = v18;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v20 = objc_msgSend((id)object, sel_path)) != 0)
      {
        uint64_t v21 = v20;
        id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        uint64_t v24 = v23;

        *(void *)__int128 v81 = v22;
        *(void *)&v81[8] = v24;
        swift_bridgeObjectRetain();
        v25._Swift::Int countAndFlagsBits = 59LL;
        v25._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v26._Swift::Int countAndFlagsBits = (uint64_t)v17;
        v26._unint64_t object = v19;
        String.append(_:)(v26);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }

      else
      {
        *(void *)__int128 v81 = 59LL;
        *(void *)&v81[8] = 0xE100000000000000LL;
        v35._Swift::Int countAndFlagsBits = (uint64_t)v17;
        v35._unint64_t object = v19;
        String.append(_:)(v35);
        swift_release();
        swift_release();
      }

      swift_bridgeObjectRelease();
      uint64_t v32 = *(void *)v81;
      unint64_t v34 = *(void *)&v81[8];
    }

    else
    {
      id v36 = objc_msgSend((id)object, sel_path);
      if (v36)
      {
        unint64_t v37 = v36;
        uint64_t v32 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        unint64_t v34 = v38;
        swift_release();
        swift_release();
      }

      else
      {
        swift_release();
        swift_release();

        uint64_t v32 = 0LL;
        unint64_t v34 = 0xE000000000000000LL;
      }
    }

    goto LABEL_36;
  }

  *(void *)__int128 v81 = object;
  *(void *)&v81[8] = v4;
  *(void *)&v81[16] = v6;
  unint64_t v68 = object;
  id v8 = (id)object;
  swift_retain();
  swift_retain();
  Swift::String v9 = URL.path(percentEncoded:)(1);
  Swift::Int countAndFlagsBits = v9._countAndFlagsBits;
  Swift::String v76 = v9;
  swift_bridgeObjectRetain();
  id v67 = v8;
  if (String.count.getter() <= 1)
  {
    unint64_t object = (unint64_t)v9._object;
  }

  else
  {
    unint64_t object = (unint64_t)v9._object;
    if ((specialized BidirectionalCollection.last.getter(v9._countAndFlagsBits, (unint64_t)v9._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
      unint64_t object = (unint64_t)v76._object;
      Swift::Int countAndFlagsBits = v76._countAndFlagsBits;
    }
  }

  *(void *)__int128 v81 = Set.init(minimumCapacity:)();
  specialized Set._Variant.insert(_:)(v71, 0x2FuLL);
  uint64_t v28 = *(void **)v81;
  uint64_t v29 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if ((object & 0x2000000000000000LL) != 0) {
    uint64_t v30 = HIBYTE(object) & 0xF;
  }
  else {
    uint64_t v30 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v30)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = 0LL;
    unint64_t v34 = 0xE000000000000000LL;
    Swift::Int countAndFlagsBits = (Swift::Int)v81;
    uint64_t v39 = v67;
    goto LABEL_32;
  }

  __int128 v66 = &v64;
  swift_bridgeObjectRetain();
  if ((object & 0x1000000000000000LL) != 0)
  {
    uint64_t v32 = 0LL;
    unint64_t v34 = 1LL;
    goto LABEL_30;
  }

  if ((object & 0x2000000000000000LL) != 0)
  {
    *(void *)__int128 v81 = countAndFlagsBits;
    *(void *)&v81[8] = object & 0xFFFFFFFFFFFFFFLL;
    uint64_t v32 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)( (uint64_t)v81,  HIBYTE(object) & 0xF,  (uint64_t)v28);
    unint64_t v34 = v40;
    goto LABEL_30;
  }

  if ((countAndFlagsBits & 0x1000000000000000LL) == 0) {
    goto LABEL_60;
  }
  uint64_t v31 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (1)
  {
    uint64_t v32 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(v31, v29, (uint64_t)v28);
    unint64_t v34 = v33;
LABEL_30:
    uint64_t v39 = v67;
    if (v34 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( countAndFlagsBits,  object,  (uint64_t)v28);
      unint64_t v34 = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      Swift::Int countAndFlagsBits = (Swift::Int)v81;
      if (!v34) {
        goto LABEL_34;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::Int countAndFlagsBits = (Swift::Int)v81;
      if (!v34)
      {
LABEL_34:
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v32 = 0LL;
        unint64_t v34 = 0xE000000000000000LL;
        goto LABEL_35;
      }
    }

Swift::Void __swiftcall URL.standardize()()
{
  uint64_t v1 = *(void **)v0;
  URL.standardized.getter((uint64_t)&v2);

  swift_release();
  swift_release();
  *(void *)uint64_t v0 = v2;
  *(_OWORD *)(v0 + 8) = v3;
}

unint64_t URL.standardizedFileURL.getter@<X0>(void *a1@<X8>)
{
  __int128 v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    swift_retain();
    id v6 = v3;
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      id v80 = v6;
      *(void *)&__int128 v81 = v4;
      *((void *)&v81 + 1) = v5;
      URL.scheme.getter();
      if (!v7)
      {
        swift_release();
        swift_release();

        goto LABEL_48;
      }

      Swift::String v8 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v8._countAndFlagsBits == 1701603686 && v8._object == (void *)0xE400000000000000LL)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }

      else
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0) {
          goto LABEL_48;
        }
      }
    }

    else
    {
      unsigned __int8 v14 = objc_msgSend(v6, sel_isFileURL);
      swift_release();
      swift_release();

      if ((v14 & 1) == 0) {
        goto LABEL_48;
      }
    }

    __int128 v79 = a1;
    id v80 = v6;
    *(void *)&__int128 v81 = v4;
    *((void *)&v81 + 1) = v5;
    id v78 = v6;
    swift_retain();
    swift_retain();
    Swift::String v17 = URL.path(percentEncoded:)(1);
    Swift::Int countAndFlagsBits = v17._countAndFlagsBits;
    Swift::String v84 = v17;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      unint64_t object = (unint64_t)v17._object;
    }

    else
    {
      unint64_t object = (unint64_t)v17._object;
      if ((specialized BidirectionalCollection.last.getter(v17._countAndFlagsBits, (unint64_t)v17._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        Swift::Int countAndFlagsBits = v84._countAndFlagsBits;
        unint64_t object = (unint64_t)v84._object;
      }
    }

    id v80 = (id)Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v83, 0x2FuLL);
    uint64_t v20 = (uint64_t)v80;
    if ((object & 0x2000000000000000LL) != 0) {
      uint64_t v21 = HIBYTE(object) & 0xF;
    }
    else {
      uint64_t v21 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v21)
    {
      v77[1] = v77;
      swift_bridgeObjectRetain();
      if ((object & 0x1000000000000000LL) != 0)
      {
        uint64_t v24 = 0LL;
        unint64_t v25 = 1LL;
      }

      else
      {
        if ((object & 0x2000000000000000LL) != 0)
        {
          id v80 = (id)countAndFlagsBits;
          *(void *)&__int128 v81 = object & 0xFFFFFFFFFFFFFFLL;
          id v22 = &v80;
          uint64_t v23 = HIBYTE(object) & 0xF;
        }

        else if ((countAndFlagsBits & 0x1000000000000000LL) != 0)
        {
          id v22 = (id *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v23 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          id v22 = (id *)_StringObject.sharedUTF8.getter();
        }

        uint64_t v24 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v22, v23, v20);
        unint64_t v25 = v27;
      }

      if (v25 == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v24 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( countAndFlagsBits,  object,  v20);
        unint64_t v25 = v28;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        Swift::String v26 = v78;
        if (v25) {
          goto LABEL_31;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Swift::String v26 = v78;
        if (v25) {
          goto LABEL_31;
        }
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v24 = 0LL;
      unint64_t v25 = 0xE000000000000000LL;
LABEL_34:
      swift_bridgeObjectRelease();
      uint64_t v29 = HIBYTE(v25) & 0xF;
      if ((v25 & 0x2000000000000000LL) == 0) {
        uint64_t v29 = v24 & 0xFFFFFFFFFFFFLL;
      }
      a1 = v79;
      if (v29)
      {
        id v80 = v26;
        *(void *)&__int128 v81 = v4;
        *((void *)&v81 + 1) = v5;
        id v30 = v26;
        swift_retain();
        swift_retain();
        Swift::String v31 = URL.path(percentEncoded:)(1);
        Swift::String v84 = v31;
        swift_bridgeObjectRetain();
        if (String.count.getter() >= 2
          && (specialized BidirectionalCollection.last.getter(v31._countAndFlagsBits, (unint64_t)v31._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }

        id v80 = (id)Set.init(minimumCapacity:)();
        specialized Set._Variant.insert(_:)(&v83, 0x2FuLL);
        uint64_t v32 = (uint64_t)v80;
        Swift::Int v33 = v84._countAndFlagsBits;
        unint64_t v34 = (unint64_t)v84._object;
        unint64_t v35 = ((unint64_t)v84._object >> 56) & 0xF;
        uint64_t v36 = v84._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        else {
          unint64_t v37 = v84._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        if (v37)
        {
          id v78 = v30;
          swift_bridgeObjectRetain();
          if ((v34 & 0x1000000000000000LL) != 0)
          {
            uint64_t v41 = 0LL;
            unint64_t v42 = 1LL;
          }

          else
          {
            if ((v34 & 0x2000000000000000LL) != 0)
            {
              id v80 = (id)v33;
              *(void *)&__int128 v81 = v34 & 0xFFFFFFFFFFFFFFLL;
              unint64_t v38 = &v80;
              uint64_t v39 = v35;
            }

            else if ((v33 & 0x1000000000000000LL) != 0)
            {
              unint64_t v38 = (id *)((v34 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v39 = v36;
            }

            else
            {
              unint64_t v38 = (id *)_StringObject.sharedUTF8.getter();
            }

            uint64_t v41 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)( (uint64_t)v38,  v39,  v32);
            unint64_t v42 = v43;
          }

          if (v42 == 1)
          {
            swift_bridgeObjectRetain();
            uint64_t v41 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v33,  v34,  v32);
            unint64_t v42 = v44;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            id v30 = v78;
            if (v42) {
              goto LABEL_54;
            }
          }

          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v30 = v78;
            if (v42) {
              goto LABEL_54;
            }
          }

          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v41 = 0LL;
          unint64_t v42 = 0xE000000000000000LL;
LABEL_57:
          swift_bridgeObjectRetain();
          uint64_t v45 = specialized Collection.first.getter(v41, v42);
          if (v46)
          {
            if (v45 == 126 && v46 == 0xE100000000000000LL)
            {
              swift_bridgeObjectRelease();
LABEL_62:
              unint64_t v48 = specialized Collection<>.firstIndex(of:)(47LL, 0xE100000000000000LL, v41, v42);
              if ((v49 & 1) != 0)
              {
                uint64_t v52 = HIBYTE(v42) & 0xF;
                if ((v42 & 0x2000000000000000LL) == 0) {
                  uint64_t v52 = v41;
                }
                uint64_t v53 = v52 << 16;
                if ((v42 & 0x1000000000000000LL) == 0 || (v41 & 0x800000000000000LL) != 0) {
                  unint64_t v50 = v53 | 7;
                }
                else {
                  unint64_t v50 = v53 | 0xB;
                }
              }

              else
              {
                unint64_t v50 = v48;
              }

              unint64_t result = String.index(after:)();
              if (v50 >> 14 == result >> 14)
              {
                uint64_t v54 = 0LL;
                uint64_t v55 = 0LL;
              }

              else
              {
                if (v50 >> 14 < result >> 14)
                {
                  __break(1u);
                  return result;
                }

                uint64_t v56 = String.subscript.getter();
                uint64_t v54 = MEMORY[0x186E1B610](v56);
                uint64_t v55 = v57;
                swift_bridgeObjectRelease();
              }

              unint64_t v58 = static String.homeDirectoryPath(forUser:)(v54, v55);
              id v60 = v59;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              char v61 = (void *)specialized Collection.suffix(from:)(v50, v41, v42);
              uint64_t v63 = v62;
              uint64_t v65 = v64;
              uint64_t v67 = v66;
              swift_bridgeObjectRelease();
              v84._Swift::Int countAndFlagsBits = v58;
              v84._unint64_t object = v60;
              id v80 = v61;
              *(void *)&__int128 v81 = v63;
              *((void *)&v81 + 1) = v65;
              uint64_t v82 = v67;
              lazy protocol witness table accessor for type Substring and conformance Substring();
              swift_bridgeObjectRetain();
              String.append<A>(contentsOf:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v41 = v84._countAndFlagsBits;
              unint64_t v51 = (unint64_t)v84._object;
LABEL_77:
              uint64_t v68 = String._standardizingPath.getter(v41, v51);
              unint64_t v70 = v69;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v71 = v30;
              swift_retain();
              swift_retain();
              if ((_foundation_swift_url_feature_enabled() & 1) != 0)
              {
                id v80 = v71;
                *(void *)&__int128 v81 = v4;
                *((void *)&v81 + 1) = v5;
                Swift::String v72 = URL.path(percentEncoded:)(1);
                __int16 v73 = specialized BidirectionalCollection.last.getter( v72._countAndFlagsBits,  (unint64_t)v72._object);
                swift_release();
                swift_release();

                swift_bridgeObjectRelease();
                uint64_t v74 = v79;
                if ((v73 & 0x1FF) == 0x2F)
                {
LABEL_79:
                  char v75 = 0;
LABEL_82:
                  LOBYTE(v84._countAndFlagsBits) = v75;
                  id v80 = 0LL;
                  __int128 v81 = 0uLL;
                  return (unint64_t)URL.init(filePath:directoryHint:relativeTo:)( v68,  v70,  (unsigned __int8 *)&v84,  (uint64_t)&v80,  v74);
                }
              }

              else
              {
                unsigned __int8 v76 = objc_msgSend(v71, sel_hasDirectoryPath);
                swift_release();
                swift_release();

                uint64_t v74 = v79;
                if ((v76 & 1) != 0) {
                  goto LABEL_79;
                }
              }

              char v75 = 1;
              goto LABEL_82;
            }

            char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v47 & 1) != 0) {
              goto LABEL_62;
            }
          }

          unint64_t v51 = v42;
          goto LABEL_77;
        }

        swift_bridgeObjectRelease();
        uint64_t v41 = 0LL;
        unint64_t v42 = 0xE000000000000000LL;
LABEL_54:
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_57;
      }

unint64_t URL.resolvingSymlinksInPath()@<X0>(void *a1@<X8>)
{
  __int128 v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    swift_retain();
    id v6 = v3;
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      id v86 = v6;
      *(void *)&__int128 v87 = v4;
      *((void *)&v87 + 1) = v5;
      URL.scheme.getter();
      if (!v7)
      {
        swift_release();
        swift_release();

        goto LABEL_48;
      }

      Swift::String v8 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v8._countAndFlagsBits == 1701603686 && v8._object == (void *)0xE400000000000000LL)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }

      else
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0) {
          goto LABEL_48;
        }
      }
    }

    else
    {
      unsigned __int8 v14 = objc_msgSend(v6, sel_isFileURL);
      swift_release();
      swift_release();

      if ((v14 & 1) == 0) {
        goto LABEL_48;
      }
    }

    __int128 v85 = a1;
    id v86 = v6;
    *(void *)&__int128 v87 = v4;
    *((void *)&v87 + 1) = v5;
    id v84 = v6;
    swift_retain();
    swift_retain();
    Swift::String v17 = URL.path(percentEncoded:)(1);
    Swift::Int countAndFlagsBits = v17._countAndFlagsBits;
    Swift::String v90 = v17;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      unint64_t object = (unint64_t)v17._object;
    }

    else
    {
      unint64_t object = (unint64_t)v17._object;
      if ((specialized BidirectionalCollection.last.getter(v17._countAndFlagsBits, (unint64_t)v17._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        Swift::Int countAndFlagsBits = v90._countAndFlagsBits;
        unint64_t object = (unint64_t)v90._object;
      }
    }

    id v86 = (id)Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v89, 0x2FuLL);
    uint64_t v20 = (uint64_t)v86;
    if ((object & 0x2000000000000000LL) != 0) {
      uint64_t v21 = HIBYTE(object) & 0xF;
    }
    else {
      uint64_t v21 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v21)
    {
      v83[1] = v83;
      swift_bridgeObjectRetain();
      if ((object & 0x1000000000000000LL) != 0)
      {
        uint64_t v24 = 0LL;
        unint64_t v25 = 1LL;
      }

      else
      {
        if ((object & 0x2000000000000000LL) != 0)
        {
          id v86 = (id)countAndFlagsBits;
          *(void *)&__int128 v87 = object & 0xFFFFFFFFFFFFFFLL;
          id v22 = &v86;
          uint64_t v23 = HIBYTE(object) & 0xF;
        }

        else if ((countAndFlagsBits & 0x1000000000000000LL) != 0)
        {
          id v22 = (id *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v23 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          id v22 = (id *)_StringObject.sharedUTF8.getter();
        }

        uint64_t v24 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v22, v23, v20);
        unint64_t v25 = v27;
      }

      if (v25 == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v24 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( countAndFlagsBits,  object,  v20);
        unint64_t v25 = v28;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        Swift::String v26 = v84;
        if (v25) {
          goto LABEL_31;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Swift::String v26 = v84;
        if (v25) {
          goto LABEL_31;
        }
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v24 = 0LL;
      unint64_t v25 = 0xE000000000000000LL;
LABEL_34:
      swift_bridgeObjectRelease();
      uint64_t v29 = HIBYTE(v25) & 0xF;
      if ((v25 & 0x2000000000000000LL) == 0) {
        uint64_t v29 = v24 & 0xFFFFFFFFFFFFLL;
      }
      a1 = v85;
      if (v29)
      {
        id v86 = v26;
        *(void *)&__int128 v87 = v4;
        *((void *)&v87 + 1) = v5;
        id v30 = v26;
        swift_retain();
        swift_retain();
        Swift::String v31 = URL.path(percentEncoded:)(1);
        Swift::String v90 = v31;
        swift_bridgeObjectRetain();
        if (String.count.getter() >= 2
          && (specialized BidirectionalCollection.last.getter(v31._countAndFlagsBits, (unint64_t)v31._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }

        id v86 = (id)Set.init(minimumCapacity:)();
        specialized Set._Variant.insert(_:)(&v89, 0x2FuLL);
        uint64_t v32 = (uint64_t)v86;
        Swift::Int v33 = v90._countAndFlagsBits;
        unint64_t v34 = (unint64_t)v90._object;
        unint64_t v35 = ((unint64_t)v90._object >> 56) & 0xF;
        uint64_t v36 = v90._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        else {
          unint64_t v37 = v90._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        if (v37)
        {
          id v84 = v30;
          swift_bridgeObjectRetain();
          if ((v34 & 0x1000000000000000LL) != 0)
          {
            uint64_t v41 = 0LL;
            unint64_t v42 = 1LL;
          }

          else
          {
            if ((v34 & 0x2000000000000000LL) != 0)
            {
              id v86 = (id)v33;
              *(void *)&__int128 v87 = v34 & 0xFFFFFFFFFFFFFFLL;
              unint64_t v38 = &v86;
              uint64_t v39 = v35;
            }

            else if ((v33 & 0x1000000000000000LL) != 0)
            {
              unint64_t v38 = (id *)((v34 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v39 = v36;
            }

            else
            {
              unint64_t v38 = (id *)_StringObject.sharedUTF8.getter();
            }

            uint64_t v41 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)( (uint64_t)v38,  v39,  v32);
            unint64_t v42 = v43;
          }

          if (v42 == 1)
          {
            swift_bridgeObjectRetain();
            uint64_t v41 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v33,  v34,  v32);
            unint64_t v42 = v44;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            id v30 = v84;
            if (v42) {
              goto LABEL_54;
            }
          }

          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v30 = v84;
            if (v42) {
              goto LABEL_54;
            }
          }

          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v41 = 0LL;
          unint64_t v42 = 0xE000000000000000LL;
LABEL_57:
          swift_bridgeObjectRetain();
          uint64_t v45 = specialized Collection.first.getter(v41, v42);
          if (v46)
          {
            if (v45 == 126 && v46 == 0xE100000000000000LL)
            {
              swift_bridgeObjectRelease();
LABEL_62:
              unint64_t v48 = specialized Collection<>.firstIndex(of:)(47LL, 0xE100000000000000LL, v41, v42);
              if ((v49 & 1) != 0)
              {
                uint64_t v52 = HIBYTE(v42) & 0xF;
                if ((v42 & 0x2000000000000000LL) == 0) {
                  uint64_t v52 = v41;
                }
                uint64_t v53 = v52 << 16;
                if ((v42 & 0x1000000000000000LL) == 0 || (v41 & 0x800000000000000LL) != 0) {
                  unint64_t v50 = v53 | 7;
                }
                else {
                  unint64_t v50 = v53 | 0xB;
                }
              }

              else
              {
                unint64_t v50 = v48;
              }

              unint64_t result = String.index(after:)();
              id v84 = 0LL;
              if (v50 >> 14 == result >> 14)
              {
                id v54 = v30;
                uint64_t v55 = 0LL;
                uint64_t v56 = 0LL;
              }

              else
              {
                if (v50 >> 14 < result >> 14)
                {
                  __break(1u);
                  return result;
                }

                id v54 = v30;
                uint64_t v57 = String.subscript.getter();
                uint64_t v55 = MEMORY[0x186E1B610](v57);
                uint64_t v56 = v58;
                swift_bridgeObjectRelease();
              }

              unint64_t v59 = static String.homeDirectoryPath(forUser:)(v55, v56);
              char v61 = v60;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              uint64_t v62 = (void *)specialized Collection.suffix(from:)(v50, v41, v42);
              uint64_t v64 = v63;
              uint64_t v66 = v65;
              uint64_t v68 = v67;
              swift_bridgeObjectRelease();
              v90._Swift::Int countAndFlagsBits = v59;
              v90._unint64_t object = v61;
              id v86 = v62;
              *(void *)&__int128 v87 = v64;
              *((void *)&v87 + 1) = v66;
              uint64_t v88 = v68;
              lazy protocol witness table accessor for type Substring and conformance Substring();
              swift_bridgeObjectRetain();
              String.append<A>(contentsOf:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v41 = v90._countAndFlagsBits;
              unint64_t v51 = (unint64_t)v90._object;
              id v30 = v54;
LABEL_77:
              uint64_t v69 = HIBYTE(v51) & 0xF;
              if ((v51 & 0x2000000000000000LL) == 0) {
                uint64_t v69 = v41 & 0xFFFFFFFFFFFFLL;
              }
              if (v69)
              {
                swift_bridgeObjectRetain();
                uint64_t v70 = specialized String.withFileSystemRepresentation<A>(_:)(v41, v51, v41, v51);
                if (v71)
                {
                  uint64_t v72 = v70;
                  unint64_t v73 = v71;
                  swift_bridgeObjectRelease();
                  uint64_t v41 = v72;
                  unint64_t v51 = v73;
                }
              }

              uint64_t v74 = String._standardizingPath.getter(v41, v51);
              unint64_t v76 = v75;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v77 = v30;
              swift_retain();
              swift_retain();
              if ((_foundation_swift_url_feature_enabled() & 1) != 0)
              {
                id v86 = v77;
                *(void *)&__int128 v87 = v4;
                *((void *)&v87 + 1) = v5;
                Swift::String v78 = URL.path(percentEncoded:)(1);
                __int16 v79 = specialized BidirectionalCollection.last.getter( v78._countAndFlagsBits,  (unint64_t)v78._object);
                swift_release();
                swift_release();

                swift_bridgeObjectRelease();
                id v80 = v85;
                if ((v79 & 0x1FF) == 0x2F)
                {
LABEL_84:
                  char v81 = 0;
LABEL_87:
                  LOBYTE(v90._countAndFlagsBits) = v81;
                  id v86 = 0LL;
                  __int128 v87 = 0uLL;
                  return (unint64_t)URL.init(filePath:directoryHint:relativeTo:)( v74,  v76,  (unsigned __int8 *)&v90,  (uint64_t)&v86,  v80);
                }
              }

              else
              {
                unsigned __int8 v82 = objc_msgSend(v77, sel_hasDirectoryPath);
                swift_release();
                swift_release();

                id v80 = v85;
                if ((v82 & 1) != 0) {
                  goto LABEL_84;
                }
              }

              char v81 = 1;
              goto LABEL_87;
            }

            char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v47 & 1) != 0) {
              goto LABEL_62;
            }
          }

          unint64_t v51 = v42;
          goto LABEL_77;
        }

        swift_bridgeObjectRelease();
        uint64_t v41 = 0LL;
        unint64_t v42 = 0xE000000000000000LL;
LABEL_54:
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_57;
      }

Swift::Void __swiftcall URL.resolveSymlinksInPath()()
{
  URL.deleteLastPathComponent()((void (*)(uint64_t *__return_ptr))URL.resolvingSymlinksInPath());
}

double URL.deleteLastPathComponent()(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v2 = *(void **)v1;
  a1(&v4);

  swift_release();
  swift_release();
  *(void *)uint64_t v1 = v4;
  double result = *(double *)&v5;
  *(_OWORD *)(v1 + 8) = v5;
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.checkResourceIsReachable()()
{
  return URL.checkResourceIsReachable()((SEL *)&selRef_checkResourceIsReachableAndReturnError_) & 1;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.checkPromisedItemIsReachable()()
{
  return URL.checkResourceIsReachable()((SEL *)&selRef_checkPromisedItemIsReachableAndReturnError_) & 1;
}

id URL.checkResourceIsReachable()(SEL *a1)
{
  v5[1] = *(id *)MEMORY[0x1895F89C0];
  uint64_t v2 = *v1;
  v5[0] = 0LL;
  id v3 = objc_msgSend(v2, *a1, v5);
  if (v5[0])
  {
    v5[0];
    swift_willThrow();
  }

  return v3;
}

id URL.setResourceValues(_:)()
{
  v4[1] = *(id *)MEMORY[0x1895F89C0];
  uint64_t v1 = *v0;
  type metadata accessor for NSURLResourceKey(0LL);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey();
  swift_bridgeObjectRetain();
  v4[0] = 0LL;
  LODWORD(Data.Iterator.init(_:at:)(v0, v1) = objc_msgSend(v1, sel_setResourceValues_error_, _NativeDictionary.bridged()(), v4);
  swift_unknownObjectRelease();
  if ((_DWORD)v1) {
    return v4[0];
  }
  if (v4[0])
  {
    v4[0];
  }

  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    id v3 = (id)_nilObjCError;
  }

  return (id)swift_willThrow();
}

uint64_t URL.setTemporaryResourceValue(_:forKey:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  objc_msgSend(v4, sel_setTemporaryResourceValue_forKey_, _bridgeAnythingToObjectiveC<A>(_:)(), a2);
  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall URL.removeAllCachedResourceValues()()
{
}

Swift::Void __swiftcall URL.removeCachedResourceValue(forKey:)(NSURLResourceKey forKey)
{
}

uint64_t URL.promisedItemResourceValues(forKeys:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return URL.resourceValues(forKeys:)(a1, (SEL *)&selRef_promisedItemResourceValuesForKeys_error_, a2);
}

uint64_t URL.resourceValues(forKeys:)@<X0>(uint64_t a1@<X0>, SEL *a2@<X1>, uint64_t *a3@<X8>)
{
  v15[1] = *(id *)MEMORY[0x1895F89C0];
  uint64_t v7 = *v3;
  uint64_t v8 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v8);
  swift_bridgeObjectRelease();
  type metadata accessor for NSURLResourceKey(0LL);
  v15[0] = 0LL;
  id v9 = objc_msgSend(v7, *a2, _ContiguousArrayBuffer._asCocoaArray()(), v15);
  swift_unknownObjectRelease();
  id v10 = v15[0];
  if (v9)
  {
    uint64_t v11 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9);
    id v12 = v10;

    *a3 = v11;
    a3[1] = a1;
    return swift_bridgeObjectRetain();
  }

  else
  {
    if (v15[0])
    {
      v15[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v14 = (id)_nilObjCError;
    }

    return swift_willThrow();
  }

id URL.bookmarkData(options:includingResourceValuesForKeys:relativeTo:)(uint64_t a1, void *a2, id *a3)
{
  uint64_t v4 = a2;
  v14[1] = *(id *)MEMORY[0x1895F89C0];
  id v6 = *a3;
  uint64_t v7 = *v3;
  if (a2)
  {
    uint64_t v8 = swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)(v8);
    swift_bridgeObjectRelease();
    type metadata accessor for NSURLResourceKey(0LL);
    uint64_t v4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }

  if (v6) {
    id v6 = v6;
  }
  v14[0] = 0LL;
  id v9 =  objc_msgSend( v7,  sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_,  a1,  v4,  v6,  v14);

  if (v9)
  {
    id v10 = v14[0];
    id v11 = v9;
    id v9 = specialized Data.init(referencing:)(v11);
  }

  else
  {
    if (v14[0])
    {
      v14[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v12 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

  return v9;
}

void static URL.resourceValues(forKeys:fromBookmarkData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v4);
  swift_bridgeObjectRelease();
  type metadata accessor for NSURLResourceKey(0LL);
  _ContiguousArrayBuffer._asCocoaArray()();
  __asm { BR              X10 }

void sub_18348A190()
{
  uint64_t v8 = v3;
  __int16 v9 = v4;
  char v10 = BYTE2(v4);
  char v11 = BYTE3(v4);
  char v12 = BYTE4(v4);
  char v13 = BYTE5(v4);
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, &v8, BYTE6(v4));
  id v6 = objc_msgSend((id)objc_opt_self(), sel_resourceValuesForKeys_fromBookmarkData_, v2, v5);
  swift_unknownObjectRelease();

  if (v6)
  {
    uint64_t v7 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6);

    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v1 = 0LL;
  }

  uint64_t *v0 = v7;
  v0[1] = v1;
}

void static URL.writeBookmarkData(_:to:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

id sub_18348A3C0()
{
  id v8 = v1;
  __int16 v9 = v2;
  char v10 = BYTE2(v2);
  char v11 = BYTE3(v2);
  char v12 = BYTE4(v2);
  char v13 = BYTE5(v2);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, &v8, BYTE6(v2));
  uint64_t v4 = (void *)objc_opt_self();
  id v8 = 0LL;
  unsigned int v5 = objc_msgSend(v4, sel_writeBookmarkData_toURL_options_error_, v3, v0, 0, &v8);

  if (v5) {
    return v8;
  }
  if (v8)
  {
    v8;
  }

  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    id v7 = (id)_nilObjCError;
  }

  return (id)swift_willThrow();
}

id static URL.bookmarkData(withContentsOf:)(id *a1)
{
  v8[1] = *(id *)MEMORY[0x1895F89C0];
  id v1 = *a1;
  v8[0] = 0LL;
  id v2 = objc_msgSend((id)objc_opt_self(), sel_bookmarkDataWithContentsOfURL_error_, v1, v8);
  if (v2)
  {
    id v3 = v2;
    id v4 = v8[0];
    id v5 = v3;
    id v1 = specialized Data.init(referencing:)(v5);
  }

  else
  {
    if (v8[0])
    {
      v8[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v6 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

  return v1;
}

Swift::Bool __swiftcall URL.startAccessingSecurityScopedResource()()
{
  return objc_msgSend(*v0, sel_startAccessingSecurityScopedResource);
}

Swift::Void __swiftcall URL.stopAccessingSecurityScopedResource()()
{
}

void URL.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  id v3 = *(id *)v0;
  NSObject.hash(into:)();

  if (_foundation_swift_url_feature_enabled())
  {
    if (v1)
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v2)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }

      else
      {
        Hasher._combine(_:)(0);
      }
    }

    else
    {
      __break(1u);
    }
  }

uint64_t URL.hashValue.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  id v4 = v1;
  NSObject.hash(into:)();

  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result) {
    return Hasher._finalize()();
  }
  if (v2)
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v3)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }

    else
    {
      Hasher._combine(_:)(0);
    }

    return Hasher._finalize()();
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance URL()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  id v4 = v1;
  NSObject.hash(into:)();

  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result) {
    return Hasher._finalize()();
  }
  if (v2)
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v3)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }

    else
    {
      Hasher._combine(_:)(0);
    }

    return Hasher._finalize()();
  }

  __break(1u);
  return result;
}

void static URL.currentDirectoryOrNil()(void *a1@<X8>)
{
  id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  id v3 = objc_msgSend(v2, sel_currentDirectoryPath);

  uint64_t v4 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  unint64_t v6 = v5;

  if ((specialized Collection.first.getter(v4, v6) & 0x1FF) != 0x2F
    && (specialized Collection.first.getter(v4, v6) & 0x1FF) != 0x7E)
  {
    swift_bridgeObjectRelease();
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    return;
  }

  int v7 = _foundation_swift_url_feature_enabled();
  uint64_t v8 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000LL) != 0) {
    uint64_t v9 = HIBYTE(v6) & 0xF;
  }
  else {
    uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    if (!v9) {
      swift_bridgeObjectRelease();
    }
    id v24 = objc_allocWithZone(MEMORY[0x189604030]);
    uint64_t v25 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v26 = objc_msgSend(v24, sel_initFileURLWithPath_isDirectory_relativeToURL_, v25, 1, 0);
    swift_unknownObjectRelease();
    unint64_t v27 = static URL._converted(from:)(v26);

    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    goto LABEL_35;
  }

  if (v9)
  {
    unint64_t v69 = v4;
    unint64_t v70 = v6;
    if ((specialized Collection.first.getter(v4, v6) & 0x1FF) == 0x2F
      || (uint64_t v10 = specialized Collection.first.getter(v4, v6), (v10 & 0x1FF) == 0x7E))
    {
      char v11 = 0LL;
      uint64_t v12 = 0LL;
      uint64_t v36 = 0LL;
      int v13 = 1;
      if ((v6 & 0x2000000000000000LL) == 0) {
        goto LABEL_12;
      }
    }

    else
    {
      static URL.currentDirectoryOrNil()(&v56, v10);
      int v13 = 0;
      uint64_t v12 = *((void *)&v56 + 1);
      char v11 = (void *)v56;
      uint64_t v36 = v57;
      if ((v6 & 0x2000000000000000LL) == 0)
      {
LABEL_12:
        if (v8 && (specialized BidirectionalCollection.last.getter(v4, v6) & 0x1FF) != 0x2F)
        {
          v14._Swift::Int countAndFlagsBits = 47LL;
          v14._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v14);
        }

        char v15 = 0;
        char v68 = 1;
        char v63 = 1;
        __int128 v56 = 0uLL;
        LOBYTE(v57) = 0;
        __int128 v58 = 0u;
        __int128 v59 = 0u;
        __int128 v60 = 0u;
        __int128 v61 = 0u;
        uint64_t v62 = 0LL;
        __int128 v64 = 0u;
        __int128 v65 = 0u;
        __int128 v66 = 0u;
        __int16 v67 = 0;
        if (v13)
        {
          v16.value._Swift::Int countAndFlagsBits = 1701603686LL;
          v16.value._unint64_t object = (void *)0xE400000000000000LL;
          URLComponents._URLComponents.setScheme(_:)(v16);
          if (v17)
          {
LABEL_42:

            int v35 = 0;
            uint64_t v34 = 714LL;
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return;
          }

          BYTE8(v56) = 0;
          BYTE12(v56) = 0;
          HIBYTE(v67) = 0;
          uint64_t v18 = swift_bridgeObjectRelease();
          __int128 v61 = xmmword_183725730;
          LOBYTE(v52) = 37;
          MEMORY[0x1895F8858](v18);
          uint64_t v34 = (uint64_t)&v52;
          char v15 = specialized Sequence.contains(where:)( (uint64_t (*)(void *))_sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0,  (uint64_t)&v33,  0LL,  0xE000000000000000LL);
          LOBYTE(v67) = v15 & 1;
        }

        uint64_t v37 = v12;
        unint64_t v38 = v11;
        unint64_t v19 = v69;
        Swift::String v17 = (void *)v70;
        uint64_t v20 = HIBYTE(v70) & 0xF;
        if ((v70 & 0x2000000000000000LL) == 0) {
          uint64_t v20 = v69 & 0xFFFFFFFFFFFFLL;
        }
        if (v20)
        {
          swift_bridgeObjectRetain();
          uint64_t v21 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v19, (unint64_t)v17);
          unint64_t v23 = v22;
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v21 = 0LL;
          unint64_t v23 = 0xE000000000000000LL;
        }

        swift_bridgeObjectRelease();
        if ((v13 & 1) == 0)
        {
          *(void *)&__int128 v52 = v56;
          BYTE8(v52) = 0;
          *(_DWORD *)((char *)&v52 + 9) = *(_DWORD *)((char *)&v56 + 9);
          *(_WORD *)((char *)&v52 + 13) = BYTE13(v56);
          HIBYTE(v52) = HIBYTE(v56);
          LOBYTE(v53[0]) = v57;
          *(_OWORD *)((char *)v53 + 8) = v58;
          *(_OWORD *)((char *)&v53[1] + 8) = v59;
          *(_OWORD *)((char *)&v53[2] + 8) = v60;
          *(_OWORD *)((char *)&v53[3] + 8) = v61;
          *((void *)&v53[4] + 1) = v62;
          LOBYTE(v54) = v63;
          *((void *)&v54 + 1) = v21;
          *(void *)&v55[0] = v23;
          *(_OWORD *)((char *)v55 + 8) = v65;
          *(_OWORD *)((char *)&v55[1] + 8) = v66;
          BYTE8(v55[2]) = v15 & 1;
          BYTE9(v55[2]) = HIBYTE(v67);
          __int128 v46 = v54;
          __int128 v47 = v55[0];
          v48[0] = v55[1];
          *(_OWORD *)((char *)v48 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)((char *)&v55[1] + 10);
          __int128 v42 = v53[1];
          __int128 v43 = v53[2];
          __int128 v44 = v53[3];
          __int128 v45 = v53[4];
          __int128 v40 = v52;
          __int128 v41 = v53[0];
          uint64_t v32 = v38;
          v39[0] = v38;
          v39[1] = v37;
          v39[2] = v36;
          URLComponents.url(relativeTo:)((uint64_t)v39, (uint64_t *)&v49);
          unint64_t v27 = v49;
          if (v49)
          {
            uint64_t v28 = v50;
            uint64_t v29 = v51;
            outlined release of URLComponents((uint64_t)&v52);
            Swift::String v31 = v32;
            goto LABEL_34;
          }

          goto LABEL_41;
        }

        *(void *)&__int128 v52 = v56;
        BYTE8(v52) = 0;
        *(_DWORD *)((char *)&v52 + 9) = *(_DWORD *)((char *)&v56 + 9);
        *(_WORD *)((char *)&v52 + 13) = BYTE13(v56);
        HIBYTE(v52) = HIBYTE(v56);
        LOBYTE(v53[0]) = v57;
        *(_OWORD *)((char *)v53 + 8) = v58;
        *(_OWORD *)((char *)&v53[1] + 8) = v59;
        *(_OWORD *)((char *)&v53[2] + 8) = v60;
        *(_OWORD *)((char *)&v53[3] + 8) = v61;
        *((void *)&v53[4] + 1) = v62;
        LOBYTE(v54) = v63;
        *((void *)&v54 + 1) = v21;
        *(void *)&v55[0] = v23;
        *(_OWORD *)((char *)v55 + 8) = v65;
        *(_OWORD *)((char *)&v55[1] + 8) = v66;
        BYTE8(v55[2]) = v15 & 1;
        BYTE9(v55[2]) = HIBYTE(v67);
        __int128 v46 = v54;
        __int128 v47 = v55[0];
        v48[0] = v55[1];
        *(_OWORD *)((char *)v48 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)((char *)&v55[1] + 10);
        __int128 v42 = v53[1];
        __int128 v43 = v53[2];
        __int128 v44 = v53[3];
        __int128 v45 = v53[4];
        __int128 v40 = v52;
        __int128 v41 = v53[0];
        URLComponents.url.getter((uint64_t *)&v49);
        unint64_t v27 = v49;
        if (v49)
        {
          uint64_t v28 = v50;
          uint64_t v29 = v51;
          outlined release of URLComponents((uint64_t)&v52);
          Swift::String v31 = v38;
LABEL_34:
          outlined consume of URL?(v31);
          swift_bridgeObjectRelease();
          goto LABEL_35;
        }

void specialized URL.appending<A>(path:directoryHint:encodingSlashes:)( uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = String.init<A>(_:)();
  if (!a6)
  {
    __break(1u);
    JUMPOUT(0x18348C018LL);
  }

  unint64_t v11 = v9;
  unint64_t v12 = v10;
  char v31 = a3;
  if ((*(_BYTE *)(a6 + 168) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = String.subscript.getter();
  }

  uint64_t v14 = MEMORY[0x186E1B610](v13);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = v14 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 && (specialized Collection.first.getter(v11, v12) & 0x1FF) != 0x2F)
  {
    v22._Swift::Int countAndFlagsBits = v11;
    v22._unint64_t object = (void *)v12;
    String.append(_:)(v22);
    unint64_t v11 = 47LL;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    unint64_t v18 = 1LL;
    unint64_t v12 = 0xE100000000000000LL;
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v18 = 0LL;
    if ((v12 & 0x2000000000000000LL) == 0)
    {
      if ((v11 & 0xFFFFFFFFFFFFLL) != 0) {
        goto LABEL_11;
      }
      goto LABEL_15;
    }
  }

  if ((v12 & 0xF00000000000000LL) != 0)
  {
LABEL_11:
    swift_bridgeObjectRetain();
    uint64_t v19 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v11, v12);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    if ((a4 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_16;
  }

void URL.appending<A>(path:directoryHint:encodingSlashes:)(uint64_t a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v42 = a3;
  uint64_t v58 = *MEMORY[0x1895F89C0];
  __n128 v5 = MEMORY[0x1895F8858](a1);
  int v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v8;
  uint64_t v10 = v3[1];
  uint64_t v11 = v3[2];
  uint64_t v46 = *v3;
  uint64_t v47 = v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v7, v14, v13, v5);
  uint64_t v15 = v10;
  uint64_t v16 = String.init<A>(_:)();
  if (!v10)
  {
    __break(1u);
    JUMPOUT(0x18348D04CLL);
  }

  uint64_t v18 = v16;
  unint64_t v19 = v17;
  char v20 = *(_BYTE *)(v15 + 168);
  uint64_t v45 = v15;
  if ((v20 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = String.subscript.getter();
  }

  uint64_t v22 = MEMORY[0x186E1B610](v21);
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  uint64_t v49 = v22;
  unint64_t v50 = v24;
  uint64_t v25 = HIBYTE(v24) & 0xF;
  uint64_t v43 = v22;
  if ((v24 & 0x2000000000000000LL) == 0) {
    uint64_t v25 = v22 & 0xFFFFFFFFFFFFLL;
  }
  if (v25 && (specialized Collection.first.getter(v18, v19) & 0x1FF) != 0x2F)
  {
    uint64_t v54 = 47LL;
    uint64_t v55 = 0xE100000000000000LL;
    v35._Swift::Int countAndFlagsBits = v18;
    v35._unint64_t object = (void *)v19;
    String.append(_:)(v35);
    uint64_t v18 = v54;
    uint64_t v36 = v55;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    unint64_t v26 = 1LL;
    unint64_t v19 = v36;
    if ((v36 & 0x2000000000000000LL) == 0)
    {
LABEL_10:
      uint64_t v44 = v9;
      if ((v18 & 0xFFFFFFFFFFFFLL) != 0) {
        goto LABEL_11;
      }
      goto LABEL_19;
    }
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v26 = 0LL;
    if ((v19 & 0x2000000000000000LL) == 0) {
      goto LABEL_10;
    }
  }

  uint64_t v44 = v9;
  if ((v19 & 0xF00000000000000LL) != 0)
  {
LABEL_11:
    swift_bridgeObjectRetain();
    uint64_t v27 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v18, v19);
    Swift::String v29 = v28;
    swift_bridgeObjectRelease();
    unint64_t v41 = v19;
    if ((a2 & 1) != 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }

double URL.append<A>(path:directoryHint:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  return URL.append<A>(path:directoryHint:)( a1,  a2,  a3,  a4,  (void (*)(uint64_t *__return_ptr, uint64_t, char *))URL.appending<A>(path:directoryHint:));
}

void specialized URL.appending<A>(component:directoryHint:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (!_foundation_swift_url_feature_enabled())
  {
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    v10._Swift::Int countAndFlagsBits = 47LL;
    v10._unint64_t object = (void *)0xE100000000000000LL;
    String.hasSuffix(_:)(v10);
    __asm { BR              X10 }
  }

  specialized URL.appending<A>(path:directoryHint:encodingSlashes:)(a1, a2, a3, 1, a4, a5);
}

void URL.appending<A>(component:directoryHint:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v10;
  uint64_t v13 = *v3;
  uint64_t v12 = v3[1];
  uint64_t v14 = v3[2];
  if (!_foundation_swift_url_feature_enabled())
  {
    v18[7] = v14;
    v18[8] = v12;
    v18[9] = a3;
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v18[6] = a1;
    v15(v9, a1, a2);
    uint64_t v16 = String.init<A>(_:)();
    v17._Swift::Int countAndFlagsBits = 47LL;
    v17._unint64_t object = (void *)0xE100000000000000LL;
    v18[10] = v16;
    String.hasSuffix(_:)(v17);
    __asm { BR              X9 }
  }

  v18[13] = v13;
  v18[14] = v12;
  v18[15] = v14;
  LOBYTE(v19) = v11;
  URL.appending<A>(path:directoryHint:encodingSlashes:)(a1, 1, a3);
}

double URL.append<A>(component:directoryHint:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  return URL.append<A>(path:directoryHint:)( a1,  a2,  a3,  a4,  (void (*)(uint64_t *__return_ptr, uint64_t, char *))URL.appending<A>(component:directoryHint:));
}

double URL.append<A>(path:directoryHint:)( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t, char *))
{
  char v6 = *a2;
  uint64_t v7 = v5[1];
  uint64_t v9 = v5[2];
  uint64_t v12 = (void *)*v5;
  uint64_t v8 = v12;
  uint64_t v13 = v7;
  uint64_t v14 = v9;
  char v11 = v6;
  a5(&v15, a1, &v11);

  swift_release();
  swift_release();
  *__n128 v5 = v15;
  double result = *(double *)&v16;
  *(_OWORD *)(v5 + 1) = v16;
  return result;
}

uint64_t URL.appending(queryItems:)@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  *(void *)&__int128 v40 = *(void *)v1;
  *((void *)&v40 + 1) = v3;
  *(void *)&__int128 v41 = v5;
  uint64_t v6 = URL.absoluteString.getter();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v6, v7, 1, (uint64_t)v30);
  outlined init with take of LocalePreferences?( (uint64_t)v30,  (uint64_t)&v31,  &demangling cache variable for type metadata for URLComponents._URLComponents?);
  __int128 v46 = v37;
  __int128 v47 = v38;
  v48[0] = v39[0];
  *(_OWORD *)((char *)v48 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)((char *)v39 + 10);
  __int128 v42 = v33;
  __int128 v43 = v34;
  __int128 v44 = v35;
  __int128 v45 = v36;
  __int128 v40 = v31;
  __int128 v41 = v32;
  v19[6] = v37;
  v19[7] = v38;
  v20[0] = v39[0];
  *(_OWORD *)((char *)v20 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)((char *)v39 + 10);
  void v19[2] = v33;
  v19[3] = v34;
  void v19[4] = v35;
  v19[5] = v36;
  v19[0] = v31;
  v19[1] = v32;
  __int128 v27 = v37;
  __int128 v28 = v38;
  v29[0] = v39[0];
  *(_OWORD *)((char *)v29 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)((char *)v39 + 10);
  __int128 v23 = v33;
  __int128 v24 = v34;
  __int128 v25 = v35;
  __int128 v26 = v36;
  __int128 v21 = v31;
  __int128 v22 = v32;
  outlined retain of URLComponents((uint64_t)v19);
  unint64_t v8 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(0);
  outlined release of URLComponents?(v30);
  uint64_t v9 = (void *)MEMORY[0x18961AFE8];
  if (v8) {
    uint64_t v9 = (void *)v8;
  }
  uint64_t v18 = v9;
  uint64_t v10 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v10);
  v49.value._rawValue = v18;
  URLComponents._URLComponents.setQueryItems(_:)(v49);
  swift_bridgeObjectRelease();
  v16[6] = v27;
  v16[7] = v28;
  v17[0] = v29[0];
  *(_OWORD *)((char *)v17 + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)((char *)v29 + 10);
  id v16[2] = v23;
  void v16[3] = v24;
  v16[4] = v25;
  v16[5] = v26;
  v16[0] = v21;
  v16[1] = v22;
  URLComponents.url.getter(&v14);
  uint64_t result = outlined release of URLComponents((uint64_t)v16);
  if (!v14)
  {
LABEL_6:
    *a1 = v4;
    a1[1] = v3;
    a1[2] = v5;
    swift_retain();
    id v13 = v4;
    return swift_retain();
  }

  else
  {
    __int128 v12 = v15;
    *a1 = v14;
    *(_OWORD *)(a1 + 1) = v12;
  }

  return result;
}

Swift::Void __swiftcall URL.append(queryItems:)(Swift::OpaquePointer queryItems)
{
  id v2 = *(void **)v1;
  URL.appending(queryItems:)(&v3);

  swift_release();
  swift_release();
  *(void *)uint64_t v1 = v3;
  *(_OWORD *)(v1 + 8) = v4;
}

uint64_t URL.appending<A>(components:directoryHint:)@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return URL._appending<A>(components:directoryHint:)(a1, a2, a3, a4);
}

uint64_t URL._appending<A>(components:directoryHint:)@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v45 = a3;
  Swift::String v39 = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  __int128 v46 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  char v11 = (char *)&v37 - v10;
  uint64_t v37 = v12;
  MEMORY[0x1895F8858](v13);
  __int128 v40 = (char *)&v37 - v14;
  int v38 = *v15;
  __int128 v16 = *(void **)v4;
  uint64_t v17 = *(void *)(v4 + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  id v18 = v16;
  swift_retain();
  uint64_t v19 = _ArrayBuffer.requestNativeBuffer()();
  if (!v19)
  {
    __int128 v47 = a1;
    uint64_t v20 = type metadata accessor for Array();
    MEMORY[0x186E20D4C](MEMORY[0x189618488], v20);
    uint64_t v19 = _copyCollectionToContiguousArray<A>(_:)();
  }

  uint64_t v21 = v19;
  swift_bridgeObjectRelease();
  uint64_t v49 = v21;
  uint64_t v22 = type metadata accessor for Array();
  MEMORY[0x186E20D4C](MEMORY[0x189618458], v22);
  MEMORY[0x186E20D4C](MEMORY[0x189618490], v22);
  RangeReplaceableCollection<>.removeLast()();
  uint64_t v23 = v49;
  uint64_t result = MEMORY[0x186E1BB2C](v49, a2);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
LABEL_14:
    __int128 v31 = v40;
    v30(v46, v40, a2);
    id v32 = v18;
    swift_retain();
    swift_retain();
    uint64_t v33 = String.init<A>(_:)();
    specialized URL.appending<A>(component:directoryHint:)(v33, v34, v38, (uint64_t)v32, v17);
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release_n();

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v31, a2);
    __int128 v35 = v48;
    __int128 v36 = v39;
    *Swift::String v39 = v47;
    *(_OWORD *)(v36 + 1) = v35;
    return result;
  }

  if (result >= 1)
  {
    uint64_t v25 = 0LL;
    unint64_t v41 = v23 & 0xC000000000000001LL;
    uint64_t v43 = result;
    uint64_t v44 = v23;
    do
    {
      if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && v41)
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v37 != 8) {
          goto LABEL_16;
        }
        __int128 v47 = (void *)result;
        __int128 v42 = *(void (**)(char *, void **, uint64_t))(v7 + 16);
        v42(v11, &v47, a2);
        swift_unknownObjectRelease();
      }

      else
      {
        unint64_t v26 = v23
        __int128 v42 = *(void (**)(char *, void **, uint64_t))(v7 + 16);
        v42(v11, (void **)v26, a2);
      }

      ++v25;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v46, v11, a2);
      id v27 = v18;
      swift_retain();
      swift_retain();
      uint64_t v28 = String.init<A>(_:)();
      specialized URL.appending<A>(component:directoryHint:)(v28, v29, 0, (uint64_t)v27, v17);
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release_n();

      id v18 = v47;
      uint64_t v17 = v48;
      uint64_t v23 = v44;
    }

    while (v43 != v25);
    swift_bridgeObjectRelease();
    uint64_t v30 = (void (*)(char *, char *, uint64_t))v42;
    goto LABEL_14;
  }

  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

double URL.append<A>(components:directoryHint:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)v4;
  URL._appending<A>(components:directoryHint:)(a1, a3, a4, &v7);

  swift_release();
  swift_release();
  *(void *)uint64_t v4 = v7;
  double result = *(double *)&v8;
  *(_OWORD *)(v4 + 8) = v8;
  return result;
}

void *static URL.currentDirectory()@<X0>(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  id v3 = objc_msgSend(v2, sel_currentDirectoryPath);

  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  unint64_t v6 = v5;

  unsigned __int8 v9 = 0;
  memset(v8, 0, sizeof(v8));
  return URL.init(filePath:directoryHint:relativeTo:)((uint64_t)v4, v6, &v9, (uint64_t)v8, a1);
}

void *static URL.homeDirectory.getter@<X0>(uint64_t *a1@<X8>)
{
  id v2 = NSHomeDirectory();
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  unint64_t v5 = v4;

  unsigned __int8 v8 = 0;
  memset(v7, 0, sizeof(v7));
  return URL.init(filePath:directoryHint:relativeTo:)((uint64_t)v3, v5, &v8, (uint64_t)v7, a1);
}

uint64_t static URL.homeDirectory(forUser:)@<X0>(uint64_t a1@<X8>)
{
  id v2 = (NSString *)String._bridgeToObjectiveCImpl()();
  id v3 = NSHomeDirectoryForUser(v2);
  uint64_t result = swift_unknownObjectRelease();
  if (v3)
  {
    id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v7 = v6;

    unsigned __int8 v11 = 0;
    memset(v10, 0, sizeof(v10));
    uint64_t result = (uint64_t)URL.init(filePath:directoryHint:relativeTo:)((uint64_t)v5, v7, &v11, (uint64_t)v10, &v12);
    uint64_t v8 = v12;
    __int128 v9 = v13;
  }

  else
  {
    uint64_t v8 = 0LL;
    __int128 v9 = 0uLL;
  }

  *(void *)a1 = v8;
  *(_OWORD *)(a1 + 8) = v9;
  return result;
}

void static URL.temporaryDirectory.getter(uint64_t a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v3 = objc_msgSend(v2, sel_temporaryDirectory);

    if (v3)
    {
      URL.init(reference:)(v3, &v9);

      __int128 v4 = v10;
      *(void *)a1 = v9;
      *(_OWORD *)(a1 + 8) = v4;
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    id v5 = NSTemporaryDirectory();
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    unint64_t v8 = v7;

    unsigned __int8 v11 = 0;
    uint64_t v9 = 0LL;
    __int128 v10 = 0uLL;
    URL.init(filePath:directoryHint:relativeTo:)((uint64_t)v6, v8, &v11, (uint64_t)&v9, (uint64_t *)a1);
  }

void static URL.cachesDirectory.getter(uint64_t *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 13, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        id v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        __int128 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }

      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      id v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }

    else
    {
      id v5 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_15;
      }
    }

void static URL.applicationDirectory.getter(uint64_t *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 1, 2);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        id v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        __int128 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }

      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      id v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }

    else
    {
      id v5 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_15;
      }
    }

void static URL.libraryDirectory.getter(uint64_t *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 5, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        id v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        __int128 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }

      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      id v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }

    else
    {
      id v5 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_15;
      }
    }

void static URL.userDirectory.getter(uint64_t *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 7, 2);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        id v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        __int128 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }

      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      id v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }

    else
    {
      id v5 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_15;
      }
    }

void static URL.documentsDirectory.getter(uint64_t *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 9, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        id v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        __int128 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }

      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      id v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }

    else
    {
      id v5 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_15;
      }
    }

void static URL.desktopDirectory.getter(uint64_t *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 12, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        id v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        __int128 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }

      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      id v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }

    else
    {
      id v5 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_15;
      }
    }

void static URL.applicationSupportDirectory.getter(uint64_t *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 14, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        id v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        __int128 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }

      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      id v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }

    else
    {
      id v5 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_15;
      }
    }

void static URL.downloadsDirectory.getter(uint64_t *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 15, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        id v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        __int128 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }

      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      id v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }

    else
    {
      id v5 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_15;
      }
    }

void static URL.moviesDirectory.getter(uint64_t *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 17, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        id v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        __int128 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }

      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      id v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }

    else
    {
      id v5 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_15;
      }
    }

void static URL.musicDirectory.getter(uint64_t *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 18, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        id v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        __int128 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }

      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      id v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }

    else
    {
      id v5 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_15;
      }
    }

void static URL.picturesDirectory.getter(uint64_t *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 19, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        id v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        __int128 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }

      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      id v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }

    else
    {
      id v5 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_15;
      }
    }

void static URL.sharedPublicDirectory.getter(uint64_t *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 21, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        id v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        __int128 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }

      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      id v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }

    else
    {
      id v5 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_15;
      }
    }

void static URL.trashDirectory.getter(uint64_t *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 102, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        id v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        __int128 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }

      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      id v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }

    else
    {
      id v5 = (void *)MEMORY[0x18961AFE8];
      if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
        goto LABEL_15;
      }
    }

void URL.init(for:in:appropriateFor:create:)( uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  unint64_t v8 = *a3;
  id v9 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  if (v8)
  {
    id v10 = v8;
    outlined consume of URL?(v8);
  }

  else
  {
    id v10 = 0LL;
  }

  id v18 = 0LL;
  id v11 = objc_msgSend(v9, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, a1, a2, v10, a4 & 1, &v18);

  id v12 = v18;
  if (v11)
  {
    URL.init(reference:)(v11, &v18);
    id v13 = v18;
    __int128 v16 = v19;
    id v14 = v12;

    *(void *)a5 = v13;
    *(_OWORD *)(a5 + 8) = v16;
  }

  else
  {
    if (v18)
    {
      v18;
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v15 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

BOOL static URL.DirectoryHint.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void URL.DirectoryHint.hash(into:)()
{
}

Swift::Int URL.DirectoryHint.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double static URL._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  *(void *)a2 = v5;
  double result = *(double *)&v6;
  *(_OWORD *)(a2 + 8) = v6;
  return result;
}

uint64_t static URL._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  *(void *)a2 = v5;
  *(_OWORD *)(a2 + 8) = v6;
  return 1LL;
}

double protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance URL( void *a1, uint64_t a2)
{
  *(void *)a2 = v5;
  double result = *(double *)&v6;
  *(_OWORD *)(a2 + 8) = v6;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance URL( void *a1, uint64_t a2)
{
  *(void *)a2 = v5;
  *(_OWORD *)(a2 + 8) = v6;
  return 1LL;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance URL( void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    URL.init(reference:)(a1, &v4);
    __int128 v3 = v5;
    *(void *)a2 = v4;
    *(_OWORD *)(a2 + 8) = v3;
  }

  else
  {
    __break(1u);
  }

uint64_t URL.debugDescription.getter()
{
  id v2 = *(void **)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    id v7 = objc_msgSend(v2, sel_debugDescription);
    id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

    return (uint64_t)v8;
  }

  swift_retain();
  id v4 = v2;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    id v9 = objc_msgSend(v4, sel_description);
    id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    swift_release();
    swift_release();

    return (uint64_t)v8;
  }

  id v48 = v4;
  unint64_t v49 = v1;
  uint64_t v50 = v3;
  URL.scheme.getter();
  if (!v5) {
    goto LABEL_18;
  }
  Swift::String v6 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v6._countAndFlagsBits == 1635017060 && v6._object == (void *)0xE400000000000000LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      goto LABEL_18;
    }
  }

  id v11 = v4;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!v1)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }

    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
  }

  else
  {
    id v13 = objc_msgSend(v11, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    swift_release();
    swift_release();
  }

  uint64_t v14 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v14 < 129)
  {
LABEL_18:
    id v16 = v4;
    swift_retain();
    swift_retain();
    uint64_t result = _foundation_swift_url_feature_enabled();
    if (!(_DWORD)result)
    {
      id v18 = objc_msgSend(v16, sel_relativeString);
      id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      uint64_t v17 = v19;
      swift_release();
      swift_release();

      goto LABEL_28;
    }

    if (v1)
    {
      id v8 = *(id *)(v1 + 16);
      uint64_t v17 = *(void **)(v1 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();

      goto LABEL_28;
    }

    __break(1u);
    goto LABEL_33;
  }

  id v48 = 0LL;
  unint64_t v49 = 0xE000000000000000LL;
  id v15 = v11;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    id v20 = objc_msgSend(v15, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    swift_release();
    swift_release();

    goto LABEL_23;
  }

  if (!v1)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  swift_bridgeObjectRetain();
  swift_release();
  swift_release();

LABEL_23:
  uint64_t v21 = specialized Collection.prefix(_:)(120LL);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  v28._Swift::Int countAndFlagsBits = MEMORY[0x186E1B610](v21, v23, v25, v27);
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29._Swift::Int countAndFlagsBits = 0x202E2E2E20LL;
  v29._unint64_t object = (void *)0xE500000000000000LL;
  String.append(_:)(v29);
  id v30 = v15;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    id v33 = objc_msgSend(v30, sel_relativeString);
    id v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    unint64_t v31 = v34;
    swift_release();
    swift_release();

    goto LABEL_27;
  }

  if (v1)
  {
    id v32 = *(id *)(v1 + 16);
    unint64_t v31 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

LABEL_27:
    unint64_t v35 = specialized BidirectionalCollection.suffix(_:)(8uLL, (uint64_t)v32, v31);
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    swift_bridgeObjectRelease();
    v42._Swift::Int countAndFlagsBits = MEMORY[0x186E1B610](v35, v37, v39, v41);
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v8 = v48;
    uint64_t v17 = (void *)v49;
LABEL_28:
    URL.baseURL.getter((uint64_t *)&v48);
    uint64_t v43 = v48;
    if (v48)
    {
      unint64_t v45 = v49;
      uint64_t v44 = v50;
      id v48 = 0LL;
      unint64_t v49 = 0xE000000000000000LL;
      v46._Swift::Int countAndFlagsBits = (uint64_t)v8;
      v46._unint64_t object = v17;
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v47._Swift::Int countAndFlagsBits = 539831584LL;
      v47._unint64_t object = (void *)0xE400000000000000LL;
      String.append(_:)(v47);
      specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v43, v45, v44);
      outlined consume of URL?(v43);
      swift_release();
      swift_release();

      return (uint64_t)v48;
    }

    else
    {
      swift_release();
      swift_release();
    }

    return (uint64_t)v8;
  }

uint64_t NSURL._toCustomAnyHashable()()
{
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURL()
{
  unint64_t v1 = *v0;
  URL.init(reference:)(v1, &v2);
  lazy protocol witness table accessor for type URL and conformance URL();
  AnyHashable.init<A>(_:)();
}

uint64_t URL.customPlaygroundQuickLook.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = URL.absoluteString.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 32) = 17;
  return result;
}

uint64_t protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance URL@<X0>( uint64_t a1@<X8>)
{
  uint64_t result = URL.absoluteString.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 32) = 17;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.CodingKeys()
{
  if (*v0) {
    return 0x65766974616C6572LL;
  }
  else {
    return 1702060386LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized URL.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

void URL.init(from:)(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<URL.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  id v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    goto LABEL_3;
  }
  LOBYTE(v26) = 1;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v11 = v10;
  LOBYTE(v25[0]) = 0;
  lazy protocol witness table accessor for type URL and conformance URL();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  Swift::String v29 = v26;
  uint64_t v24 = v27;
  v25[0] = v26;
  v25[1] = v27;
  void v25[2] = v28;
  uint64_t v23 = v28;
  URL.init(string:relativeTo:)(v9, v11, v25, (uint64_t *)&v26);
  swift_bridgeObjectRelease();
  id v12 = v26;
  if (!v26)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v17;
    uint64_t v19 = a1[3];
    uint64_t v18 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v19);
    MEMORY[0x186E1CF78](v19, v18);
    uint64_t v20 = v22;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v20,  *MEMORY[0x189619360],  v16);
    swift_willThrow();
    outlined consume of URL?(v29);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return;
  }

  uint64_t v14 = v27;
  id v13 = v28;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  outlined consume of URL?(v29);
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v13;
  swift_retain();
  id v15 = v12;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_release();
  swift_release();
}

void *URL.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.CodingKeys>);
  uint64_t v19 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void **)v1;
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v8 = *(void *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  id v9 = v6;
  swift_retain();
  uint64_t result = (void *)_foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!v7)
    {
      __break(1u);
      return result;
    }

    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
  }

  else
  {
    id v11 = objc_msgSend(v9, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    swift_release();
    swift_release();
  }

  uint64_t v12 = v14[1];
  LOBYTE(v18) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
    return (void *)swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    id v15 = v9;
    uint64_t v16 = v7;
    uint64_t v17 = v8;
    URL.baseURL.getter((uint64_t *)&v18);
    id v13 = v18;
    if (v18)
    {
      LOBYTE(v15) = 0;
      lazy protocol witness table accessor for type URL and conformance URL();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
      return outlined consume of URL?(v13);
    }

    else
    {
      return (void *)(*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v5, v3);
    }
  }

void protocol witness for Decodable.init(from:) in conformance URL(void *a1@<X0>, void *a2@<X8>)
{
}

void *protocol witness for Encodable.encode(to:) in conformance URL(void *a1)
{
  return URL.encode(to:)(a1);
}

void URL.init(fileReferenceLiteralResourceName:)(uint64_t a1@<X8>)
{
  id v2 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  uint64_t v3 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v2, sel_URLForResource_withExtension_, v3, 0);

  swift_unknownObjectRelease();
  if (v4)
  {
    URL.init(reference:)(v4, &v6);

    __int128 v5 = v7;
    *(void *)a1 = v6;
    *(_OWORD *)(a1 + 8) = v5;
  }

  else
  {
    __break(1u);
  }

void *specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( void *(*a1)(void *__return_ptr, void *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    v10[0] = 0LL;
    v10[1] = 0LL;
    return (void *)v10[0];
  }

  if ((a4 & 0x2000000000000000LL) != 0)
  {
    uint64_t v7 = HIBYTE(a4) & 0xF;
    v9[0] = a3;
    v9[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v6 = v9;
  }

  else if ((a3 & 0x1000000000000000LL) != 0)
  {
    uint64_t v6 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v6 = (void *)_StringObject.sharedUTF8.getter();
  }

  uint64_t result = a1(v10, v6, v7);
  if (!v4) {
    return (void *)v10[0];
  }
  return result;
}

void *specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( void *(*a1)(__int128 *__return_ptr, void *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000LL) != 0) {
    return (void *)xmmword_183723F60;
  }
  if ((a4 & 0x2000000000000000LL) != 0)
  {
    uint64_t v7 = HIBYTE(a4) & 0xF;
    v9[0] = a3;
    v9[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v6 = v9;
  }

  else if ((a3 & 0x1000000000000000LL) != 0)
  {
    uint64_t v6 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v6 = (void *)_StringObject.sharedUTF8.getter();
  }

  uint64_t result = a1(&v10, v6, v7);
  if (!v4) {
    return (void *)v10;
  }
  return result;
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }

  else
  {
    uint64_t v5 = MEMORY[0x186E1B838](15LL, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      char v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0LL);
      if (v2 < 0) {
        break;
      }
      uint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x18961AFE8];
      }
    }

    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    return MEMORY[0x18961AFE8];
  }

  return result;
}

uint64_t specialized Set._Variant.insert(_:)(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (unint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      unint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0LL;
    }

    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *char v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *char v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t specialized Set._Variant.insert(_:)(_BYTE *a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }

  uint64_t result = 0LL;
  LOBYTE(a2) = *(_BYTE *)(*(void *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  char v3 = v2;
  Swift::Int v6 = *v2;
  uint64_t v7 = MEMORY[0x186E1CE88](*(void *)(v6 + 40), a2, 1LL);
  unint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  uint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *char v3 = 0x8000000000000000LL;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *char v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v6 + 48);
  if (*(unsigned __int8 *)(v10 + v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      uint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(unsigned __int8 *)(v10 + v9) != a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }

  uint64_t result = 0LL;
  LOBYTE(a2) = *(_BYTE *)(*(void *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(unint64_t *a1, unint64_t a2)
{
  char v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *char v3 = 0x8000000000000000LL;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *char v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v10 + 8 * v9) != a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  char v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *char v3 = 0x8000000000000000LL;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *char v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v10 + 8 * v9) != a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  char v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) == 0)
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v47);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
    {
      uint64_t v13 = swift_retain();
      char v14 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v13, a2);
      swift_release();
      if ((v14 & 1) != 0)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0LL;
      }

      uint64_t v15 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v15;
        if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
          break;
        }
        uint64_t v16 = swift_retain();
        char v17 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v16, a2);
        swift_release();
        if ((v17 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v47[0] = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    unint64_t v21 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v21, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v47[0];
LABEL_58:
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1LL;
  }

  if (v6 < 0) {
    uint64_t v7 = *v2;
  }
  else {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v8 = __CocoaSet.member(for:)();
  swift_release();
  if (v8)
  {
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for _BPlistEncodingFormat.Reference();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    *a1 = v47[0];
    swift_unknownObjectRelease();
    return 0LL;
  }

  uint64_t result = __CocoaSet.count.getter();
  if (__OFADD__(result, 1LL))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }

  uint64_t v18 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
  if (*(void *)(v18 + 24) > *(void *)(v18 + 16))
  {
    swift_retain();
    uint64_t v19 = v18;
LABEL_57:
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *char v3 = v19;
    goto LABEL_58;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<_BPlistEncodingFormat.Reference>);
  uint64_t v22 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v19 = v22;
  if (!*(void *)(v18 + 16))
  {
    swift_retain();
LABEL_56:
    swift_release();
    goto LABEL_57;
  }

  uint64_t v44 = v3;
  unint64_t v45 = a1;
  Swift::String v46 = (void *)(v18 + 56);
  uint64_t v23 = 1LL << *(_BYTE *)(v18 + 32);
  if (v23 < 64) {
    uint64_t v24 = ~(-1LL << v23);
  }
  else {
    uint64_t v24 = -1LL;
  }
  unint64_t v25 = v24 & *(void *)(v18 + 56);
  int64_t v26 = (unint64_t)(v23 + 63) >> 6;
  uint64_t v27 = v22 + 56;
  uint64_t result = swift_retain();
  int64_t v28 = 0LL;
  while (1)
  {
    if (v25)
    {
      unint64_t v30 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      unint64_t v31 = v30 | (v28 << 6);
      goto LABEL_42;
    }

    int64_t v32 = v28 + 1;
    if (__OFADD__(v28, 1LL))
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }

    if (v32 >= v26)
    {
LABEL_51:
      uint64_t v43 = 1LL << *(_BYTE *)(v18 + 32);
      if (v43 > 63) {
        bzero(v46, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
      }
      else {
        *Swift::String v46 = -1LL << v43;
      }
      char v3 = v44;
      a1 = v45;
      *(void *)(v18 + 16) = 0LL;
      goto LABEL_56;
    }

    unint64_t v33 = v46[v32];
    ++v28;
    if (!v33)
    {
      int64_t v28 = v32 + 1;
      if (v32 + 1 >= v26) {
        goto LABEL_51;
      }
      unint64_t v33 = v46[v28];
      if (!v33)
      {
        int64_t v28 = v32 + 2;
        if (v32 + 2 >= v26) {
          goto LABEL_51;
        }
        unint64_t v33 = v46[v28];
        if (!v33)
        {
          int64_t v28 = v32 + 3;
          if (v32 + 3 >= v26) {
            goto LABEL_51;
          }
          unint64_t v33 = v46[v28];
          if (!v33) {
            break;
          }
        }
      }
    }

uint64_t specialized Set._Variant.insert(_:)(_DWORD *a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  if (*(_DWORD *)(v9 + 4 * v8) != (_DWORD)a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(_DWORD *)(v9 + 4 * v8) != (_DWORD)a2);
  }

  uint64_t result = 0LL;
  LODWORD(a2) = *(_DWORD *)(*(void *)(*v2 + 48) + 4 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  char v3 = v2;
  uint64_t v6 = *v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v3;
    *char v3 = 0x8000000000000000LL;
    id v24 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    *char v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1LL;
  }

  id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v6 + 48) + 8 * v9));
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)(a2) && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = ~v8;
      do
      {
        unint64_t v9 = (v9 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
          goto LABEL_15;
        }
        id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v6 + 48) + 8 * v9));
        uint64_t v19 = v18;
        if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(a2) && v19 == v20) {
          goto LABEL_16;
        }
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  int64_t v26 = *(void **)(*(void *)(*v3 + 48LL) + 8 * v9);
  *a1 = v26;
  id v27 = v26;
  return 0LL;
}

uint64_t specialized Set._Variant.insert(_:)( unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v10 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    uint64_t v14 = *(void *)(v10 + 48);
    uint64_t v15 = v14 + 32 * v13;
    BOOL v16 = *(void *)(v15 + 16) == a4 && *(void *)(v15 + 24) == a5;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v17 = (unint64_t *)(*(void *)(*v5 + 48) + 32 * v13);
      unint64_t v18 = v17[1];
      unint64_t v19 = v17[2];
      unint64_t v20 = v17[3];
      *a1 = *v17;
      a1[1] = v18;
      a1[2] = v19;
      a1[3] = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return 0LL;
    }

    uint64_t v22 = ~v12;
    while (1)
    {
      unint64_t v13 = (v13 + 1) & v22;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
        break;
      }
      uint64_t v23 = v14 + 32 * v13;
      BOOL v24 = *(void *)(v23 + 16) == a4 && *(void *)(v23 + 24) == a5;
      if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *v5;
  *uint64_t v5 = 0x8000000000000000LL;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, a5, v13, isUniquelyReferenced_nonNull_native);
  *uint64_t v5 = v27;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  uint64_t result = 1LL;
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease();
    return MEMORY[0x18961AFF8];
  }

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<_BPlistEncodingFormat.Reference>);
  uint64_t v3 = static _SetStorage.convert(_:capacity:)();
  __CocoaSet.makeIterator()();
  uint64_t v4 = __CocoaSet.Iterator.next()();
  if (!v4) {
    goto LABEL_70;
  }
  uint64_t v5 = v4;
  type metadata accessor for _BPlistEncodingFormat.Reference();
  uint64_t v46 = v2;
  while (2)
  {
    v47[0] = v5;
    swift_dynamicCast();
    if (*(void *)(v3 + 24) > *(void *)(v3 + 16)) {
      goto LABEL_7;
    }
    uint64_t v6 = (void *)v2;
    Swift::UInt v7 = static _SetStorage.resize(original:capacity:move:)();
    Swift::UInt v14 = v7;
    if (!*(void *)(v3 + 16)) {
      goto LABEL_6;
    }
    int64_t v15 = 0LL;
    BOOL v16 = (void *)(v3 + 56);
    uint64_t v17 = 1LL << *(_BYTE *)(v3 + 32);
    if (v17 < 64) {
      uint64_t v18 = ~(-1LL << v17);
    }
    else {
      uint64_t v18 = -1LL;
    }
    unint64_t v19 = v18 & *(void *)(v3 + 56);
    int64_t v20 = (unint64_t)(v17 + 63) >> 6;
    Swift::UInt v21 = v7 + 56;
    while (1)
    {
      if (v19)
      {
        unint64_t v23 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        unint64_t v24 = v23 | (v15 << 6);
        goto LABEL_36;
      }

      int64_t v9 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_74;
      }
      if (v9 >= v20) {
        break;
      }
      unint64_t v25 = v16[v9];
      ++v15;
      if (!v25)
      {
        int64_t v15 = v9 + 1;
        if (v9 + 1 >= v20) {
          break;
        }
        unint64_t v25 = v16[v15];
        if (!v25)
        {
          int64_t v15 = v9 + 2;
          if (v9 + 2 >= v20) {
            break;
          }
          unint64_t v25 = v16[v15];
          if (!v25)
          {
            int64_t v15 = v9 + 3;
            if (v9 + 3 >= v20) {
              break;
            }
            unint64_t v25 = v16[v15];
            if (!v25)
            {
              v9 += 4LL;
              if (v9 >= v20) {
                break;
              }
              unint64_t v25 = v16[v9];
              if (!v25)
              {
                while (1)
                {
                  int64_t v15 = v9 + 1;
                  if (__OFADD__(v9, 1LL)) {
                    goto LABEL_75;
                  }
                  if (v15 >= v20) {
                    goto LABEL_68;
                  }
                  unint64_t v25 = v16[v15];
                  ++v9;
                  if (v25) {
                    goto LABEL_35;
                  }
                }
              }

              int64_t v15 = v9;
            }
          }
        }
      }

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

__n128 specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  unint64_t v4 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 56) |= 1LL << v4;
  uint64_t v5 = a2[6] + 40 * v4;
  __n128 result = *(__n128 *)a1;
  __int128 v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a1;
  *(_OWORD *)(v5 + 16) = v7;
  *(void *)(v5 + 32) = *(void *)(a1 + 32);
  ++a2[2];
  return result;
}

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)( unint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  unint64_t v8 = result;
  uint64_t v9 = *v4;
  unint64_t v10 = *(void *)(*v4 + 16);
  unint64_t v11 = *(void *)(*v4 + 24);
  if (v11 > v10 && (a4 & 1) != 0)
  {
    uint64_t v12 = *v4;
    goto LABEL_116;
  }

  if ((a4 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    if (v11 > v10)
    {
      uint64_t v37 = static _SetStorage.copy(original:)();
      uint64_t v12 = v37;
      if (!*(void *)(v9 + 16)) {
        goto LABEL_98;
      }
      __n128 result = v37 + 56;
      uint64_t v38 = v9 + 56;
      unint64_t v39 = (unint64_t)((1LL << *(_BYTE *)(v12 + 32)) + 63) >> 6;
      if (v12 != v9 || result >= v38 + 8 * v39) {
        __n128 result = (unint64_t)memmove((void *)result, (const void *)(v9 + 56), 8 * v39);
      }
      int64_t v40 = 0LL;
      *(void *)(v12 + 16) = *(void *)(v9 + 16);
      uint64_t v41 = 1LL << *(_BYTE *)(v9 + 32);
      uint64_t v42 = -1LL;
      if (v41 < 64) {
        uint64_t v42 = ~(-1LL << v41);
      }
      unint64_t v43 = v42 & *(void *)(v9 + 56);
      int64_t v44 = (unint64_t)(v41 + 63) >> 6;
      while (1)
      {
        if (v43)
        {
          unint64_t v45 = __clz(__rbit64(v43));
          v43 &= v43 - 1;
          unint64_t v46 = v45 | (v40 << 6);
        }

        else
        {
          int64_t v51 = v40 + 1;
          if (__OFADD__(v40, 1LL)) {
            goto LABEL_121;
          }
          if (v51 >= v44) {
            goto LABEL_98;
          }
          unint64_t v52 = *(void *)(v38 + 8 * v51);
          ++v40;
          if (!v52)
          {
            int64_t v40 = v51 + 1;
            if (v51 + 1 >= v44) {
              goto LABEL_98;
            }
            unint64_t v52 = *(void *)(v38 + 8 * v40);
            if (!v52)
            {
              int64_t v40 = v51 + 2;
              if (v51 + 2 >= v44) {
                goto LABEL_98;
              }
              unint64_t v52 = *(void *)(v38 + 8 * v40);
              if (!v52)
              {
                int64_t v40 = v51 + 3;
                if (v51 + 3 >= v44) {
                  goto LABEL_98;
                }
                unint64_t v52 = *(void *)(v38 + 8 * v40);
                if (!v52)
                {
                  int64_t v53 = v51 + 4;
                  if (v53 >= v44) {
                    goto LABEL_98;
                  }
                  unint64_t v52 = *(void *)(v38 + 8 * v53);
                  if (!v52)
                  {
                    while (1)
                    {
                      int64_t v40 = v53 + 1;
                      if (__OFADD__(v53, 1LL)) {
                        goto LABEL_126;
                      }
                      if (v40 >= v44) {
                        break;
                      }
                      unint64_t v52 = *(void *)(v38 + 8 * v40);
                      ++v53;
                      if (v52) {
                        goto LABEL_63;
                      }
                    }

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)( unint64_t result, unint64_t a2, char a3)
{
  unint64_t v4 = v3;
  Swift::UInt v6 = result;
  unint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = *v3;
    goto LABEL_112;
  }

  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
    if (v9 > v8)
    {
      uint64_t v32 = static _SetStorage.copy(original:)();
      unint64_t v10 = v32;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_102;
      }
      __n128 result = v32 + 56;
      unint64_t v33 = v7 + 56;
      unint64_t v34 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34) {
        __n128 result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      }
      int64_t v35 = 0LL;
      *(void *)(v10 + 16) = *(void *)(v7 + 16);
      uint64_t v36 = 1LL << *(_BYTE *)(v7 + 32);
      uint64_t v37 = -1LL;
      if (v36 < 64) {
        uint64_t v37 = ~(-1LL << v36);
      }
      unint64_t v38 = v37 & *(void *)(v7 + 56);
      int64_t v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          unint64_t v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          unint64_t v41 = v40 | (v35 << 6);
        }

        else
        {
          int64_t v42 = v35 + 1;
          if (__OFADD__(v35, 1LL)) {
            goto LABEL_117;
          }
          if (v42 >= v39) {
            goto LABEL_102;
          }
          unint64_t v43 = *(void *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            int64_t v35 = v42 + 1;
            if (v42 + 1 >= v39) {
              goto LABEL_102;
            }
            unint64_t v43 = *(void *)(v33 + 8 * v35);
            if (!v43)
            {
              int64_t v35 = v42 + 2;
              if (v42 + 2 >= v39) {
                goto LABEL_102;
              }
              unint64_t v43 = *(void *)(v33 + 8 * v35);
              if (!v43)
              {
                int64_t v35 = v42 + 3;
                if (v42 + 3 >= v39) {
                  goto LABEL_102;
                }
                unint64_t v43 = *(void *)(v33 + 8 * v35);
                if (!v43)
                {
                  int64_t v44 = v42 + 4;
                  if (v44 >= v39) {
                    goto LABEL_102;
                  }
                  unint64_t v43 = *(void *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      int64_t v35 = v44 + 1;
                      if (__OFADD__(v44, 1LL)) {
                        goto LABEL_121;
                      }
                      if (v35 >= v39) {
                        break;
                      }
                      unint64_t v43 = *(void *)(v33 + 8 * v35);
                      ++v44;
                      if (v43) {
                        goto LABEL_65;
                      }
                    }

{
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  unint64_t v4 = v3;
  Swift::UInt v6 = result;
  unint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = *v3;
    goto LABEL_111;
  }

  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt8>);
    if (v9 > v8)
    {
      uint64_t v32 = static _SetStorage.copy(original:)();
      unint64_t v10 = v32;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_102;
      }
      __n128 result = v32 + 56;
      unint64_t v33 = v7 + 56;
      unint64_t v34 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34) {
        __n128 result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      }
      int64_t v35 = 0LL;
      *(void *)(v10 + 16) = *(void *)(v7 + 16);
      uint64_t v36 = 1LL << *(_BYTE *)(v7 + 32);
      uint64_t v37 = -1LL;
      if (v36 < 64) {
        uint64_t v37 = ~(-1LL << v36);
      }
      unint64_t v38 = v37 & *(void *)(v7 + 56);
      int64_t v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          unint64_t v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          unint64_t v41 = v40 | (v35 << 6);
        }

        else
        {
          int64_t v42 = v35 + 1;
          if (__OFADD__(v35, 1LL)) {
            goto LABEL_116;
          }
          if (v42 >= v39) {
            goto LABEL_102;
          }
          unint64_t v43 = *(void *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            int64_t v35 = v42 + 1;
            if (v42 + 1 >= v39) {
              goto LABEL_102;
            }
            unint64_t v43 = *(void *)(v33 + 8 * v35);
            if (!v43)
            {
              int64_t v35 = v42 + 2;
              if (v42 + 2 >= v39) {
                goto LABEL_102;
              }
              unint64_t v43 = *(void *)(v33 + 8 * v35);
              if (!v43)
              {
                int64_t v35 = v42 + 3;
                if (v42 + 3 >= v39) {
                  goto LABEL_102;
                }
                unint64_t v43 = *(void *)(v33 + 8 * v35);
                if (!v43)
                {
                  int64_t v44 = v42 + 4;
                  if (v44 >= v39) {
                    goto LABEL_102;
                  }
                  unint64_t v43 = *(void *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      int64_t v35 = v44 + 1;
                      if (__OFADD__(v44, 1LL)) {
                        goto LABEL_120;
                      }
                      if (v35 >= v39) {
                        break;
                      }
                      unint64_t v43 = *(void *)(v33 + 8 * v35);
                      ++v44;
                      if (v43) {
                        goto LABEL_65;
                      }
                    }

{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v4 = v3;
  Swift::UInt v6 = result;
  unint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = *v3;
    goto LABEL_111;
  }

  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<Int>);
    if (v9 > v8)
    {
      uint64_t v32 = static _SetStorage.copy(original:)();
      unint64_t v10 = v32;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_102;
      }
      __n128 result = v32 + 56;
      unint64_t v33 = v7 + 56;
      unint64_t v34 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34) {
        __n128 result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      }
      int64_t v35 = 0LL;
      *(void *)(v10 + 16) = *(void *)(v7 + 16);
      uint64_t v36 = 1LL << *(_BYTE *)(v7 + 32);
      uint64_t v37 = -1LL;
      if (v36 < 64) {
        uint64_t v37 = ~(-1LL << v36);
      }
      unint64_t v38 = v37 & *(void *)(v7 + 56);
      int64_t v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          unint64_t v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          unint64_t v41 = v40 | (v35 << 6);
        }

        else
        {
          int64_t v42 = v35 + 1;
          if (__OFADD__(v35, 1LL)) {
            goto LABEL_116;
          }
          if (v42 >= v39) {
            goto LABEL_102;
          }
          unint64_t v43 = *(void *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            int64_t v35 = v42 + 1;
            if (v42 + 1 >= v39) {
              goto LABEL_102;
            }
            unint64_t v43 = *(void *)(v33 + 8 * v35);
            if (!v43)
            {
              int64_t v35 = v42 + 2;
              if (v42 + 2 >= v39) {
                goto LABEL_102;
              }
              unint64_t v43 = *(void *)(v33 + 8 * v35);
              if (!v43)
              {
                int64_t v35 = v42 + 3;
                if (v42 + 3 >= v39) {
                  goto LABEL_102;
                }
                unint64_t v43 = *(void *)(v33 + 8 * v35);
                if (!v43)
                {
                  int64_t v44 = v42 + 4;
                  if (v44 >= v39) {
                    goto LABEL_102;
                  }
                  unint64_t v43 = *(void *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      int64_t v35 = v44 + 1;
                      if (__OFADD__(v44, 1LL)) {
                        goto LABEL_120;
                      }
                      if (v35 >= v39) {
                        break;
                      }
                      unint64_t v43 = *(void *)(v33 + 8 * v35);
                      ++v44;
                      if (v43) {
                        goto LABEL_65;
                      }
                    }

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[72];
  unint64_t v4 = v3;
  Swift::UInt v6 = result;
  unint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = *v3;
    goto LABEL_112;
  }

  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<_BPlistEncodingFormat.Reference>);
    if (v9 > v8)
    {
      unint64_t v33 = static _SetStorage.copy(original:)();
      unint64_t v10 = v33;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_102;
      }
      __n128 result = v33 + 56;
      unint64_t v34 = v7 + 56;
      int64_t v35 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v34 + 8 * v35) {
        __n128 result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v35);
      }
      uint64_t v36 = 0LL;
      *(void *)(v10 + 16) = *(void *)(v7 + 16);
      uint64_t v37 = 1LL << *(_BYTE *)(v7 + 32);
      unint64_t v38 = -1LL;
      if (v37 < 64) {
        unint64_t v38 = ~(-1LL << v37);
      }
      int64_t v39 = v38 & *(void *)(v7 + 56);
      unint64_t v40 = (unint64_t)(v37 + 63) >> 6;
      while (1)
      {
        if (v39)
        {
          unint64_t v41 = __clz(__rbit64(v39));
          v39 &= v39 - 1;
          int64_t v42 = v41 | (v36 << 6);
        }

        else
        {
          unint64_t v43 = v36 + 1;
          if (__OFADD__(v36, 1LL)) {
            goto LABEL_117;
          }
          if (v43 >= v40) {
            goto LABEL_102;
          }
          int64_t v44 = *(void *)(v34 + 8 * v43);
          ++v36;
          if (!v44)
          {
            uint64_t v36 = v43 + 1;
            if (v43 + 1 >= v40) {
              goto LABEL_102;
            }
            int64_t v44 = *(void *)(v34 + 8 * v36);
            if (!v44)
            {
              uint64_t v36 = v43 + 2;
              if (v43 + 2 >= v40) {
                goto LABEL_102;
              }
              int64_t v44 = *(void *)(v34 + 8 * v36);
              if (!v44)
              {
                uint64_t v36 = v43 + 3;
                if (v43 + 3 >= v40) {
                  goto LABEL_102;
                }
                int64_t v44 = *(void *)(v34 + 8 * v36);
                if (!v44)
                {
                  uint64_t v45 = v43 + 4;
                  if (v45 >= v40) {
                    goto LABEL_102;
                  }
                  int64_t v44 = *(void *)(v34 + 8 * v45);
                  if (!v44)
                  {
                    while (1)
                    {
                      uint64_t v36 = v45 + 1;
                      if (__OFADD__(v45, 1LL)) {
                        goto LABEL_121;
                      }
                      if (v36 >= v40) {
                        break;
                      }
                      int64_t v44 = *(void *)(v34 + 8 * v36);
                      ++v45;
                      if (v44) {
                        goto LABEL_65;
                      }
                    }

{
  unint64_t *v3;
  unint64_t *v4;
  Swift::UInt32 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  Swift::UInt32 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  Swift::UInt32 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  Swift::UInt32 v73;
  Swift::UInt32 v74;
  unint64_t v4 = v3;
  Swift::UInt v6 = result;
  unint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = *v3;
    goto LABEL_112;
  }

  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Unicode.Scalar>);
    if (v9 > v8)
    {
      uint64_t v32 = static _SetStorage.copy(original:)();
      unint64_t v10 = v32;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_102;
      }
      __n128 result = v32 + 56;
      unint64_t v33 = v7 + 56;
      unint64_t v34 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34) {
        __n128 result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      }
      int64_t v35 = 0LL;
      *(void *)(v10 + 16) = *(void *)(v7 + 16);
      uint64_t v36 = 1LL << *(_BYTE *)(v7 + 32);
      uint64_t v37 = -1LL;
      if (v36 < 64) {
        uint64_t v37 = ~(-1LL << v36);
      }
      unint64_t v38 = v37 & *(void *)(v7 + 56);
      int64_t v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          unint64_t v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          unint64_t v41 = v40 | (v35 << 6);
        }

        else
        {
          int64_t v42 = v35 + 1;
          if (__OFADD__(v35, 1LL)) {
            goto LABEL_117;
          }
          if (v42 >= v39) {
            goto LABEL_102;
          }
          unint64_t v43 = *(void *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            int64_t v35 = v42 + 1;
            if (v42 + 1 >= v39) {
              goto LABEL_102;
            }
            unint64_t v43 = *(void *)(v33 + 8 * v35);
            if (!v43)
            {
              int64_t v35 = v42 + 2;
              if (v42 + 2 >= v39) {
                goto LABEL_102;
              }
              unint64_t v43 = *(void *)(v33 + 8 * v35);
              if (!v43)
              {
                int64_t v35 = v42 + 3;
                if (v42 + 3 >= v39) {
                  goto LABEL_102;
                }
                unint64_t v43 = *(void *)(v33 + 8 * v35);
                if (!v43)
                {
                  int64_t v44 = v42 + 4;
                  if (v44 >= v39) {
                    goto LABEL_102;
                  }
                  unint64_t v43 = *(void *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      int64_t v35 = v44 + 1;
                      if (__OFADD__(v44, 1LL)) {
                        goto LABEL_121;
                      }
                      if (v35 >= v39) {
                        break;
                      }
                      unint64_t v43 = *(void *)(v33 + 8 * v35);
                      ++v44;
                      if (v43) {
                        goto LABEL_65;
                      }
                    }

{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v4 = v3;
  Swift::UInt v6 = result;
  unint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = *v3;
    goto LABEL_111;
  }

  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectIdentifier>);
    if (v9 > v8)
    {
      uint64_t v32 = static _SetStorage.copy(original:)();
      unint64_t v10 = v32;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_102;
      }
      __n128 result = v32 + 56;
      unint64_t v33 = v7 + 56;
      unint64_t v34 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34) {
        __n128 result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      }
      int64_t v35 = 0LL;
      *(void *)(v10 + 16) = *(void *)(v7 + 16);
      uint64_t v36 = 1LL << *(_BYTE *)(v7 + 32);
      uint64_t v37 = -1LL;
      if (v36 < 64) {
        uint64_t v37 = ~(-1LL << v36);
      }
      unint64_t v38 = v37 & *(void *)(v7 + 56);
      int64_t v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          unint64_t v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          unint64_t v41 = v40 | (v35 << 6);
        }

        else
        {
          int64_t v42 = v35 + 1;
          if (__OFADD__(v35, 1LL)) {
            goto LABEL_116;
          }
          if (v42 >= v39) {
            goto LABEL_102;
          }
          unint64_t v43 = *(void *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            int64_t v35 = v42 + 1;
            if (v42 + 1 >= v39) {
              goto LABEL_102;
            }
            unint64_t v43 = *(void *)(v33 + 8 * v35);
            if (!v43)
            {
              int64_t v35 = v42 + 2;
              if (v42 + 2 >= v39) {
                goto LABEL_102;
              }
              unint64_t v43 = *(void *)(v33 + 8 * v35);
              if (!v43)
              {
                int64_t v35 = v42 + 3;
                if (v42 + 3 >= v39) {
                  goto LABEL_102;
                }
                unint64_t v43 = *(void *)(v33 + 8 * v35);
                if (!v43)
                {
                  int64_t v44 = v42 + 4;
                  if (v44 >= v39) {
                    goto LABEL_102;
                  }
                  unint64_t v43 = *(void *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      int64_t v35 = v44 + 1;
                      if (__OFADD__(v44, 1LL)) {
                        goto LABEL_120;
                      }
                      if (v35 >= v39) {
                        break;
                      }
                      unint64_t v43 = *(void *)(v33 + 8 * v35);
                      ++v44;
                      if (v43) {
                        goto LABEL_65;
                      }
                    }

{
  unint64_t *v3;
  unint64_t *v4;
  Swift::UInt v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  Swift::UInt v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  Swift::UInt v73;
  Swift::UInt v74;
  unint64_t v4 = v3;
  Swift::UInt v6 = result;
  unint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = *v3;
    goto LABEL_112;
  }

  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Date.ComponentsFormatStyle.Field>);
    if (v9 > v8)
    {
      uint64_t v32 = static _SetStorage.copy(original:)();
      unint64_t v10 = v32;
      if (!*(void *)(v7 + 16)) {
        goto LABEL_102;
      }
      __n128 result = v32 + 56;
      unint64_t v33 = v7 + 56;
      unint64_t v34 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34) {
        __n128 result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      }
      int64_t v35 = 0LL;
      *(void *)(v10 + 16) = *(void *)(v7 + 16);
      uint64_t v36 = 1LL << *(_BYTE *)(v7 + 32);
      uint64_t v37 = -1LL;
      if (v36 < 64) {
        uint64_t v37 = ~(-1LL << v36);
      }
      unint64_t v38 = v37 & *(void *)(v7 + 56);
      int64_t v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          unint64_t v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          unint64_t v41 = v40 | (v35 << 6);
        }

        else
        {
          int64_t v42 = v35 + 1;
          if (__OFADD__(v35, 1LL)) {
            goto LABEL_117;
          }
          if (v42 >= v39) {
            goto LABEL_102;
          }
          unint64_t v43 = *(void *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            int64_t v35 = v42 + 1;
            if (v42 + 1 >= v39) {
              goto LABEL_102;
            }
            unint64_t v43 = *(void *)(v33 + 8 * v35);
            if (!v43)
            {
              int64_t v35 = v42 + 2;
              if (v42 + 2 >= v39) {
                goto LABEL_102;
              }
              unint64_t v43 = *(void *)(v33 + 8 * v35);
              if (!v43)
              {
                int64_t v35 = v42 + 3;
                if (v42 + 3 >= v39) {
                  goto LABEL_102;
                }
                unint64_t v43 = *(void *)(v33 + 8 * v35);
                if (!v43)
                {
                  int64_t v44 = v42 + 4;
                  if (v44 >= v39) {
                    goto LABEL_102;
                  }
                  unint64_t v43 = *(void *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      int64_t v35 = v44 + 1;
                      if (__OFADD__(v44, 1LL)) {
                        goto LABEL_121;
                      }
                      if (v35 >= v39) {
                        break;
                      }
                      unint64_t v43 = *(void *)(v33 + 8 * v35);
                      ++v44;
                      if (v43) {
                        goto LABEL_65;
                      }
                    }

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  unint64_t v4 = v3;
  Swift::UInt v6 = (void *)result;
  uint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    uint64_t v10 = *v3;
    goto LABEL_120;
  }

  unint64_t v91 = (void *)result;
  if ((a3 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
    uint64_t v11 = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v10 = v11;
    if (*(void *)(v7 + 16))
    {
      uint64_t v12 = 1LL << *(_BYTE *)(v7 + 32);
      unint64_t v92 = (void *)(v7 + 56);
      if (v12 < 64) {
        uint64_t v13 = ~(-1LL << v12);
      }
      else {
        uint64_t v13 = -1LL;
      }
      unint64_t v14 = v13 & *(void *)(v7 + 56);
      int64_t v94 = (unint64_t)(v12 + 63) >> 6;
      uint64_t v15 = v11 + 56;
      swift_retain();
      int64_t v16 = 0LL;
      while (1)
      {
        if (v14)
        {
          unint64_t v18 = __clz(__rbit64(v14));
          v14 &= v14 - 1;
          unint64_t v19 = v18 | (v16 << 6);
        }

        else
        {
          int64_t v20 = v16 + 1;
          if (__OFADD__(v16, 1LL)) {
            goto LABEL_125;
          }
          if (v20 >= v94)
          {
LABEL_66:
            swift_release();
            uint64_t v50 = 1LL << *(_BYTE *)(v7 + 32);
            Swift::UInt v6 = v91;
            if (v50 > 63) {
              bzero(v92, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
            }
            else {
              *unint64_t v92 = -1LL << v50;
            }
            *(void *)(v7 + 16) = 0LL;
            break;
          }

          unint64_t v21 = v92[v20];
          ++v16;
          if (!v21)
          {
            int64_t v16 = v20 + 1;
            if (v20 + 1 >= v94) {
              goto LABEL_66;
            }
            unint64_t v21 = v92[v16];
            if (!v21)
            {
              int64_t v16 = v20 + 2;
              if (v20 + 2 >= v94) {
                goto LABEL_66;
              }
              unint64_t v21 = v92[v16];
              if (!v21)
              {
                int64_t v16 = v20 + 3;
                if (v20 + 3 >= v94) {
                  goto LABEL_66;
                }
                unint64_t v21 = v92[v16];
                if (!v21)
                {
                  int64_t v22 = v20 + 4;
                  if (v22 >= v94) {
                    goto LABEL_66;
                  }
                  unint64_t v21 = v92[v22];
                  if (!v21)
                  {
                    while (1)
                    {
                      int64_t v16 = v22 + 1;
                      if (__OFADD__(v22, 1LL)) {
                        break;
                      }
                      if (v16 >= v94) {
                        goto LABEL_66;
                      }
                      unint64_t v21 = v92[v16];
                      ++v22;
                      if (v21) {
                        goto LABEL_29;
                      }
                    }

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, char a6)
{
  unint64_t v9 = a3;
  uint64_t v10 = *v6;
  unint64_t v11 = *(void *)(*v6 + 16);
  unint64_t v12 = *(void *)(*v6 + 24);
  if (v12 > v11 && (a6 & 1) != 0)
  {
    uint64_t v13 = *v6;
    goto LABEL_121;
  }

  unint64_t v99 = result;
  unint64_t v100 = a2;
  uint64_t v105 = *v6;
  char v98 = v6;
  if ((a6 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Locale.NumberingSystem>);
    if (v12 > v11)
    {
      uint64_t v39 = static _SetStorage.copy(original:)();
      uint64_t v13 = v39;
      if (!*(void *)(v10 + 16)) {
        goto LABEL_102;
      }
      __n128 result = v39 + 56;
      uint64_t v40 = v10 + 56;
      unint64_t v41 = (unint64_t)((1LL << *(_BYTE *)(v13 + 32)) + 63) >> 6;
      if (v13 != v10 || result >= v40 + 8 * v41) {
        __n128 result = (unint64_t)memmove((void *)result, (const void *)(v10 + 56), 8 * v41);
      }
      int64_t v42 = 0LL;
      *(void *)(v13 + 16) = *(void *)(v10 + 16);
      uint64_t v43 = 1LL << *(_BYTE *)(v10 + 32);
      uint64_t v44 = -1LL;
      if (v43 < 64) {
        uint64_t v44 = ~(-1LL << v43);
      }
      unint64_t v45 = v44 & *(void *)(v10 + 56);
      int64_t v46 = (unint64_t)(v43 + 63) >> 6;
      while (1)
      {
        if (v45)
        {
          unint64_t v47 = __clz(__rbit64(v45));
          v45 &= v45 - 1;
          unint64_t v48 = v47 | (v42 << 6);
        }

        else
        {
          int64_t v55 = v42 + 1;
          if (__OFADD__(v42, 1LL)) {
            goto LABEL_126;
          }
          unint64_t v9 = a3;
          if (v55 >= v46) {
            goto LABEL_102;
          }
          unint64_t v56 = *(void *)(v40 + 8 * v55);
          ++v42;
          if (!v56)
          {
            int64_t v42 = v55 + 1;
            if (v55 + 1 >= v46) {
              goto LABEL_102;
            }
            unint64_t v56 = *(void *)(v40 + 8 * v42);
            if (!v56)
            {
              int64_t v42 = v55 + 2;
              if (v55 + 2 >= v46) {
                goto LABEL_102;
              }
              unint64_t v56 = *(void *)(v40 + 8 * v42);
              if (!v56)
              {
                int64_t v42 = v55 + 3;
                if (v55 + 3 >= v46) {
                  goto LABEL_102;
                }
                unint64_t v56 = *(void *)(v40 + 8 * v42);
                if (!v56)
                {
                  int64_t v57 = v55 + 4;
                  if (v57 >= v46) {
                    goto LABEL_102;
                  }
                  unint64_t v56 = *(void *)(v40 + 8 * v57);
                  if (!v56)
                  {
                    while (1)
                    {
                      int64_t v42 = v57 + 1;
                      if (__OFADD__(v57, 1LL)) {
                        goto LABEL_130;
                      }
                      if (v42 >= v46) {
                        break;
                      }
                      unint64_t v56 = *(void *)(v40 + 8 * v42);
                      ++v57;
                      if (v56) {
                        goto LABEL_65;
                      }
                    }

uint64_t specialized _parseInteger<A, B>(ascii:radix:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  uint64_t result = String.init<A>(_:)();
  uint64_t v8 = result;
  unint64_t v9 = v7;
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = static String._copying(_:)();
    unint64_t v14 = v13;
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v9 = v14;
    if ((v14 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
  }

  else if ((v7 & 0x2000000000000000LL) == 0)
  {
LABEL_3:
    if ((v8 & 0x1000000000000000LL) != 0)
    {
      uint64_t v10 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }

    unint64_t v12 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v10, v11, a5);
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }

  uint64_t v15 = HIBYTE(v9) & 0xF;
  uint64_t v40 = v8;
  uint64_t v41 = v9 & 0xFFFFFFFFFFFFFFLL;
  if (v8 == 43)
  {
    if (v15)
    {
      uint64_t v25 = v15 - 1;
      if (v25)
      {
        uint64_t v17 = 0LL;
        unsigned __int8 v26 = a5 + 48;
        unsigned __int8 v27 = a5 + 55;
        unsigned __int8 v28 = a5 + 87;
        if (a5 > 10)
        {
          unsigned __int8 v26 = 58;
        }

        else
        {
          unsigned __int8 v28 = 97;
          unsigned __int8 v27 = 65;
        }

        uint64_t v29 = (unsigned __int8 *)&v40 + 1;
        do
        {
          unsigned int v30 = *v29;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              unint64_t v12 = 0LL;
              if (v30 < 0x61 || v30 >= v28) {
                goto LABEL_66;
              }
              char v31 = -87;
            }

            else
            {
              char v31 = -55;
            }
          }

          else
          {
            char v31 = -48;
          }

          uint64_t v32 = v17 * a5;
          uint64_t v17 = v32 + (v30 + v31);
          ++v29;
          --v25;
        }

        while (v25);
LABEL_64:
        unint64_t v12 = (unsigned __int8 *)v17;
        goto LABEL_66;
      }

{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  BOOL v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 *v31;
  unsigned int v32;
  char v33;
  unint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  uint64_t *v39;
  unsigned int v40;
  char v41;
  unint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v44 = a1;
  unint64_t v45 = a2;
  int64_t v46 = a3;
  unint64_t v47 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  uint64_t result = String.init<A>(_:)();
  uint64_t v8 = result;
  unint64_t v9 = v7;
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = static String._copying(_:)();
    unint64_t v14 = v13;
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v9 = v14;
    if ((v14 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
  }

  else if ((v7 & 0x2000000000000000LL) == 0)
  {
LABEL_3:
    if ((v8 & 0x1000000000000000LL) != 0)
    {
      uint64_t v10 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }

    unint64_t v12 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v10, v11, a5);
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }

  uint64_t v15 = HIBYTE(v9) & 0xF;
  uint64_t v44 = v8;
  unint64_t v45 = v9 & 0xFFFFFFFFFFFFFFLL;
  if (v8 == 43)
  {
    if (v15)
    {
      unsigned __int8 v27 = v15 - 1;
      if (v27)
      {
        uint64_t v17 = 0LL;
        unsigned __int8 v28 = a5 + 48;
        uint64_t v29 = a5 + 55;
        unsigned int v30 = a5 + 87;
        if (a5 > 10)
        {
          unsigned __int8 v28 = 58;
        }

        else
        {
          unsigned int v30 = 97;
          uint64_t v29 = 65;
        }

        char v31 = (unsigned __int8 *)&v44 + 1;
        do
        {
          uint64_t v32 = *v31;
          if (v32 < 0x30 || v32 >= v28)
          {
            if (v32 < 0x41 || v32 >= v29)
            {
              unint64_t v12 = 0LL;
              if (v32 < 0x61 || v32 >= v30) {
                goto LABEL_67;
              }
              unsigned __int8 v33 = -87;
            }

            else
            {
              unsigned __int8 v33 = -55;
            }
          }

          else
          {
            unsigned __int8 v33 = -48;
          }

          if (!is_mul_ok(v17, a5)) {
            goto LABEL_66;
          }
          unsigned __int8 v34 = v17 * a5;
          unsigned __int8 v35 = v32 + v33;
          unsigned __int8 v26 = __CFADD__(v34, v35);
          uint64_t v17 = v34 + v35;
          if (v26) {
            goto LABEL_66;
          }
          ++v31;
          --v27;
        }

        while (v27);
LABEL_65:
        unint64_t v12 = (unsigned __int8 *)v17;
        goto LABEL_67;
      }

unint64_t specialized _parseInteger<A, B>(ascii:radix:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  unint64_t result = String.init<A>(_:)();
  uint64_t v8 = result;
  unint64_t v9 = v7;
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = static String._copying(_:)();
    unint64_t v16 = v15;
    unint64_t result = swift_bridgeObjectRelease();
    unint64_t v9 = v16;
    if ((v16 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
  }

  else if ((v7 & 0x2000000000000000LL) == 0)
  {
LABEL_3:
    if ((v8 & 0x1000000000000000LL) != 0)
    {
      uint64_t v10 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }

    unint64_t v12 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v10, v11, a5);
    unsigned int v13 = v12;
    uint64_t v14 = ((unint64_t)v12 >> 32) & 1;
    goto LABEL_6;
  }

  uint64_t v17 = HIBYTE(v9) & 0xF;
  uint64_t v46 = v8;
  uint64_t v47 = v9 & 0xFFFFFFFFFFFFFFLL;
  if (v8 == 43)
  {
    if (v17)
    {
      uint64_t v29 = v17 - 1;
      if (v29)
      {
        unsigned int v19 = 0;
        unsigned __int8 v30 = a5 + 48;
        unsigned __int8 v31 = a5 + 55;
        unsigned __int8 v32 = a5 + 87;
        if (a5 > 10)
        {
          unsigned __int8 v30 = 58;
        }

        else
        {
          unsigned __int8 v32 = 97;
          unsigned __int8 v31 = 65;
        }

        unsigned __int8 v33 = (unsigned __int8 *)&v46 + 1;
        do
        {
          unsigned int v34 = *v33;
          if (v34 < 0x30 || v34 >= v30)
          {
            if (v34 < 0x41 || v34 >= v31)
            {
              unsigned int v13 = 0;
              LOBYTE(v14) = 1;
              if (v34 < 0x61 || v34 >= v32) {
                goto LABEL_6;
              }
              char v35 = -87;
            }

            else
            {
              char v35 = -55;
            }
          }

          else
          {
            char v35 = -48;
          }

          unint64_t v36 = v19 * (unint64_t)a5;
          if ((v36 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_67;
          }
          unsigned __int8 v37 = v34 + v35;
          BOOL v28 = __CFADD__((_DWORD)v36, v37);
          unsigned int v19 = v36 + v37;
          if (v28) {
            goto LABEL_67;
          }
          ++v33;
          --v29;
        }

        while (v29);
LABEL_66:
        LOBYTE(v14) = 0;
        unsigned int v13 = v19;
        goto LABEL_6;
      }

      goto LABEL_67;
    }
  }

  else
  {
    if (v8 != 45)
    {
      if (v17)
      {
        unsigned int v19 = 0;
        unsigned __int8 v38 = a5 + 48;
        unsigned __int8 v39 = a5 + 55;
        unsigned __int8 v40 = a5 + 87;
        if (a5 > 10)
        {
          unsigned __int8 v38 = 58;
        }

        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v39 = 65;
        }

        uint64_t v41 = &v46;
        while (1)
        {
          unsigned int v42 = *(unsigned __int8 *)v41;
          if (v42 < 0x30 || v42 >= v38)
          {
            if (v42 < 0x41 || v42 >= v39)
            {
              unsigned int v13 = 0;
              LOBYTE(v14) = 1;
              if (v42 < 0x61 || v42 >= v40) {
                goto LABEL_6;
              }
              char v43 = -87;
            }

            else
            {
              char v43 = -55;
            }
          }

          else
          {
            char v43 = -48;
          }

          unint64_t v44 = v19 * (unint64_t)a5;
          if ((v44 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_67;
          }
          unsigned __int8 v45 = v42 + v43;
          BOOL v28 = __CFADD__((_DWORD)v44, v45);
          unsigned int v19 = v44 + v45;
          if (v28) {
            goto LABEL_67;
          }
          uint64_t v41 = (uint64_t *)((char *)v41 + 1);
          if (!--v17) {
            goto LABEL_66;
          }
        }
      }

      goto LABEL_67;
    }

    if (v17)
    {
      uint64_t v18 = v17 - 1;
      if (v18)
      {
        unsigned int v19 = 0;
        unsigned __int8 v20 = a5 + 48;
        unsigned __int8 v21 = a5 + 55;
        unsigned __int8 v22 = a5 + 87;
        if (a5 > 10)
        {
          unsigned __int8 v20 = 58;
        }

        else
        {
          unsigned __int8 v22 = 97;
          unsigned __int8 v21 = 65;
        }

        char v23 = (unsigned __int8 *)&v46 + 1;
        while (1)
        {
          unsigned int v24 = *v23;
          if (v24 < 0x30 || v24 >= v20)
          {
            if (v24 < 0x41 || v24 >= v21)
            {
              unsigned int v13 = 0;
              LOBYTE(v14) = 1;
              if (v24 < 0x61 || v24 >= v22) {
                goto LABEL_6;
              }
              char v25 = -87;
            }

            else
            {
              char v25 = -55;
            }
          }

          else
          {
            char v25 = -48;
          }

          unint64_t v26 = v19 * (unint64_t)a5;
          if ((v26 & 0xFFFFFFFF00000000LL) != 0) {
            break;
          }
          unsigned __int8 v27 = v24 + v25;
          BOOL v28 = v26 >= v27;
          unsigned int v19 = v26 - v27;
          if (!v28) {
            break;
          }
          ++v23;
          if (!--v18) {
            goto LABEL_66;
          }
        }
      }

unsigned __int8 *specialized closure #1 in _parseInteger<A, B>(ascii:radix:)( unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            unint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0LL;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              if (!is_mul_ok(v9, a3)) {
                return 0LL;
              }
              unint64_t v14 = v9 * a3;
              unsigned __int8 v15 = v11 + v12;
              BOOL v16 = v14 >= v15;
              unint64_t v9 = v14 - v15;
              if (!v16) {
                return 0LL;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_67;
    }

    if (a2)
    {
      unsigned __int8 v26 = a3 + 48;
      unsigned __int8 v27 = a3 + 55;
      unsigned __int8 v28 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v26 = 58;
      }

      else
      {
        unsigned __int8 v28 = 97;
        unsigned __int8 v27 = 65;
      }

      if (result)
      {
        unint64_t v29 = 0LL;
        do
        {
          unsigned int v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              uint64_t v13 = 0LL;
              if (v30 < 0x61 || v30 >= v28) {
                return (unsigned __int8 *)v13;
              }
              char v31 = -87;
            }

            else
            {
              char v31 = -55;
            }
          }

          else
          {
            char v31 = -48;
          }

          if (!is_mul_ok(v29, a3)) {
            return 0LL;
          }
          unint64_t v32 = v29 * a3;
          unsigned __int8 v33 = v30 + v31;
          BOOL v16 = __CFADD__(v32, v33);
          unint64_t v29 = v32 + v33;
          if (v16) {
            return 0LL;
          }
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)v29;
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }

  uint64_t v17 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v18 = a3 + 48;
  unsigned __int8 v19 = a3 + 55;
  unsigned __int8 v20 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v18 = 58;
  }

  else
  {
    unsigned __int8 v20 = 97;
    unsigned __int8 v19 = 65;
  }

  if (!result) {
    return 0LL;
  }
  unint64_t v9 = 0LL;
  unsigned __int8 v21 = result + 1;
  do
  {
    unsigned int v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        uint64_t v13 = 0LL;
        if (v22 < 0x61 || v22 >= v20) {
          return (unsigned __int8 *)v13;
        }
        char v23 = -87;
      }

      else
      {
        char v23 = -55;
      }
    }

    else
    {
      char v23 = -48;
    }

    if (!is_mul_ok(v9, a3)) {
      return 0LL;
    }
    unint64_t v24 = v9 * a3;
    unsigned __int8 v25 = v22 + v23;
    BOOL v16 = __CFADD__(v24, v25);
    unint64_t v9 = v24 + v25;
    if (v16) {
      return 0LL;
    }
    ++v21;
    --v17;
  }

  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = 0LL;
    goto LABEL_8;
  }

  if ((a4 & 0x2000000000000000LL) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v11 = v14;
  }

  else if ((a3 & 0x1000000000000000LL) != 0)
  {
    unsigned int v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unsigned int v11 = (void *)_StringObject.sharedUTF8.getter();
  }

  uint64_t result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n( (uint64_t)v11,  a1,  a2,  a3,  a4,  a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000LL) != 0;
  }

  return result;
}

uint64_t specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(a1, a2, a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
  }

  return result;
}

uint64_t specialized Array._customRemoveLast()()
{
  unint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v0 = v1;
  if (!(_DWORD)result || (v1 & 0x8000000000000000LL) != 0 || (v1 & 0x4000000000000000LL) != 0) {
    specialized _ArrayBuffer._consumeAndCreateNew()(v1);
  }
  uint64_t v3 = v1 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 8 * v5 + 0x20);
    *(void *)(v3 + 16) = v5;
    specialized Array._endMutation()();
    return v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

BOOL _sSKsSQ7ElementRpzrlE9lastIndex2of0C0QzSgAB_tFSbABXEfU_SS8UTF8ViewV_TG5TA_0(unsigned __int8 *a1)
{
  return *a1 == **(unsigned __int8 **)(v1 + 16);
}

id specialized static URL.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  id result = (id)_foundation_swift_url_feature_enabled();
  if (!(_DWORD)result) {
    return objc_msgSend(v2, sel_isEqual_, v5);
  }
  if (!v3)
  {
    __break(1u);
    goto LABEL_27;
  }

  if (!v6)
  {
LABEL_27:
    __break(1u);
    return result;
  }

  BOOL v9 = *(void *)(v3 + 16) == *(void *)(v6 + 16) && *(void *)(v3 + 24) == *(void *)(v6 + 24);
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0LL, (v10 & 1) != 0))
  {
    if (v4)
    {
      uint64_t v12 = *(void *)(v4 + 16);
      uint64_t v11 = *(void *)(v4 + 24);
      swift_bridgeObjectRetain();
      if (!v7)
      {
        if (!v11) {
          return objc_msgSend(v2, sel_isEqual_, v5);
        }
LABEL_22:
        swift_bridgeObjectRelease();
        return 0LL;
      }
    }

    else
    {
      if (!v7) {
        return objc_msgSend(v2, sel_isEqual_, v5);
      }
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
    }

    uint64_t v14 = *(void *)(v7 + 16);
    uint64_t v13 = *(void *)(v7 + 24);
    swift_bridgeObjectRetain();
    if (v11)
    {
      if (v13)
      {
        if (v12 == v14 && v11 == v13)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        else
        {
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id result = 0LL;
          if ((v15 & 1) == 0) {
            return result;
          }
        }

        return objc_msgSend(v2, sel_isEqual_, v5);
      }

      goto LABEL_22;
    }

    if (v13) {
      goto LABEL_22;
    }
    return objc_msgSend(v2, sel_isEqual_, v5);
  }

  return result;
}

BOOL specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, char a5)
{
  unsigned int v5 = a4;
  if ((a5 & 1) == 0)
  {
    if (a1 == a2) {
      return 1LL;
    }
    if ((*(char *)(a3 + a1) & 0x80000000) == 0)
    {
      int v13 = *(unsigned __int8 *)(a3 + a1);
      uint64_t v14 = ~a1 + a2;
      char v15 = (char *)(a1 + a3 + 1);
      while (2)
      {
        switch(v13)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_47:
            if ((a4 & 0xF6) == 0) {
              return 0LL;
            }
            goto LABEL_70;
          case '&':
LABEL_53:
            if ((a4 & 0x76) == 0) {
              return 0LL;
            }
            goto LABEL_70;
          case '+':
            if ((a4 & 0xF7) == 0) {
              return 0LL;
            }
            goto LABEL_70;
          case '-':
          case '.':
            goto LABEL_69;
          case '/':
LABEL_55:
            if (a4 < 0x10u) {
              return 0LL;
            }
            goto LABEL_70;
          default:
            break;
        }

        switch(v13)
        {
          case ':':
            if ((a4 & 0xD2) == 0) {
              return 0LL;
            }
            goto LABEL_70;
          case ';':
            goto LABEL_47;
          case '=':
            goto LABEL_53;
          case '?':
            if (a4 < 0x40u) {
              return 0LL;
            }
            goto LABEL_70;
          case '@':
            goto LABEL_55;
          default:
            if (v13 == 95)
            {
              if (a4 < 2u) {
                return 0LL;
              }
            }

            else if ((v13 - 123) > 0xFFFFFFE5)
            {
LABEL_69:
              if (!a4) {
                return 0LL;
              }
            }

            else
            {
              BOOL result = 0LL;
              if (v13 != 126 || a4 < 2u) {
                return result;
              }
            }

uint64_t specialized StringProtocol.hexToAscii(_:)(unsigned __int8 a1)
{
  if (a1 <= 0xFu) {
    return a0123456789abcd_0[(char)a1];
  }
  _StringGuts.grow(_:)(21LL);
  swift_bridgeObjectRelease();
  v2._Swift::Int countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static URL._cfURL(from:baseURL:)(uint64_t a1)
{
  int v3 = 81920;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
  {
    int64_t v7 = *(void *)(a1 + 32);
    uint64_t i = *(void **)(a1 + 40);
    uint64_t v78 = *(void *)(a1 + 16);
    uint64_t v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    int v8 = &v78;
    uint64_t v9 = StringProtocol._toUTF16Offsets(_:)();
    uint64_t v12 = v11 - v9;
    if (__OFSUB__(v11, v9))
    {
      __break(1u);
      goto LABEL_70;
    }

    int v8 = (uint64_t *)v9;
    uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
    unint64_t v1 = i[2];
    unint64_t v10 = i[3];
    int64_t v7 = v1 + 1;
    if (v1 >= v10 >> 1) {
      goto LABEL_71;
    }
    goto LABEL_7;
  }

  for (uint64_t i = (void *)MEMORY[0x18961AFE8]; (*(_BYTE *)(a1 + 72) & 1) == 0; ++v3)
  {
    unint64_t v1 = *(void *)(a1 + 56);
    int64_t v7 = *(void *)(a1 + 64);
    uint64_t v78 = v5;
    uint64_t v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    int v8 = &v78;
    uint64_t v14 = StringProtocol._toUTF16Offsets(_:)();
    uint64_t v12 = v15 - v14;
    if (!__OFSUB__(v15, v14))
    {
      int v16 = (uint64_t *)v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
        goto LABEL_10;
      }
      goto LABEL_73;
    }

uint64_t (*specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4))()
{
  *(void *)&v41[5] = *MEMORY[0x1895F89C0];
  if ((a3 & 0x2000000000000000LL) != 0) {
    unint64_t v6 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v36 = 4 * v6;
  uint64_t v7 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v7) = 1;
  }
  uint64_t v8 = 4LL << v7;
  uint64_t v33 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v34 = a3 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  uint64_t v9 = 0LL;
  int v32 = 0;
  uint64_t v10 = 0LL;
  unint64_t v11 = 15LL;
  while (1)
  {
    if (v36 == v11 >> 14) {
      goto LABEL_147;
    }
    unint64_t v13 = v11 & 0xC;
    unint64_t v14 = v11;
    if (v13 == v8) {
      unint64_t v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
    }
    unint64_t v15 = v14 >> 16;
    if (v14 >> 16 >= v6) {
      goto LABEL_152;
    }
    if ((a3 & 0x1000000000000000LL) != 0)
    {
      char v17 = String.UTF8View._foreignSubscript(position:)();
      if (v13 == v8) {
        goto LABEL_18;
      }
    }

    else if ((a3 & 0x2000000000000000LL) != 0)
    {
      unint64_t v37 = a2;
      uint64_t v38 = v34;
      char v17 = *((_BYTE *)&v37 + v15);
      if (v13 == v8) {
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v16 = v33;
      if ((a2 & 0x1000000000000000LL) == 0) {
        uint64_t v16 = _StringObject.sharedUTF8.getter();
      }
      char v17 = *(_BYTE *)(v16 + v15);
      if (v13 == v8)
      {
LABEL_18:
        unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
        if ((a3 & 0x1000000000000000LL) == 0) {
          goto LABEL_23;
        }
        goto LABEL_19;
      }
    }

    if ((a3 & 0x1000000000000000LL) == 0)
    {
LABEL_23:
      unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_24;
    }

uint64_t (*specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( Swift::Int isStackAllocationSafe, unint64_t a2, uint64_t a3))()
{
  unint64_t v5 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1895F89C0];
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    uint64_t isStackAllocationSafe = String.UTF8View._foreignCount()();
    uint64_t v6 = isStackAllocationSafe;
    if (isStackAllocationSafe < 0) {
      __break(1u);
    }
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    uint64_t v6 = HIBYTE(a2) & 0xF;
  }

  else
  {
    uint64_t v6 = isStackAllocationSafe & 0xFFFFFFFFFFFFLL;
  }

  if (v6 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    return specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( (uint64_t)v11 - v7,  v5,  a2,  a3);
  }

  else
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v8 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v9, v5, a2, a3);
    MEMORY[0x186E20E60](v9, -1LL, -1LL);
  }

  return v8;
}

uint64_t partial apply for closure #1 in URL.withUnsafeFileSystemRepresentation<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t (*specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6))()
{
  *(void *)&v29[5] = *MEMORY[0x1895F89C0];
  unint64_t v26 = a3 >> 14;
  if (a3 >> 14 == a2 >> 14)
  {
    uint64_t v6 = 0LL;
    return specialized String.init<A, B>(_validating:as:)(0LL, v6, a1);
  }

  uint64_t v11 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v11) = 1;
  }
  uint64_t v12 = 4LL << v11;
  uint64_t v13 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    uint64_t v13 = a4 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v24 = v13;
  uint64_t v25 = v12;
  swift_bridgeObjectRetain();
  uint64_t v14 = 0LL;
  LOBYTE(v15) = 0;
  uint64_t v6 = 0LL;
  unint64_t v16 = a2;
  do
  {
    char v18 = Substring.UTF8View.subscript.getter();
    if ((v16 & 0xC) == v25)
    {
      unint64_t v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(v16, a4, a5);
      if ((a5 & 0x1000000000000000LL) == 0)
      {
LABEL_15:
        unint64_t v16 = (v16 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_19;
      }
    }

    else if ((a5 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_15;
    }

    if (v24 <= v16 >> 16) {
      goto LABEL_115;
    }
    unint64_t v16 = String.UTF8View._foreignIndex(after:)();
LABEL_19:
    if (v18 == 37)
    {
      if (v14 || v26 == v16 >> 14)
      {
LABEL_110:
        swift_bridgeObjectRelease();
        return 0LL;
      }

      char v18 = Substring.UTF8View.subscript.getter();
      if ((v16 & 0xC) == v25)
      {
        unint64_t v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(v16, a4, a5);
        if ((a5 & 0x1000000000000000LL) == 0) {
          goto LABEL_24;
        }
      }

      else if ((a5 & 0x1000000000000000LL) == 0)
      {
LABEL_24:
        unint64_t v16 = (v16 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_31:
        if (v18 == 37) {
          goto LABEL_110;
        }
        uint64_t v14 = 2LL;
        goto LABEL_33;
      }

      if (v24 <= v16 >> 16) {
        goto LABEL_115;
      }
      unint64_t v16 = String.UTF8View._foreignIndex(after:)();
      goto LABEL_31;
    }

    if (!v14)
    {
      *(_BYTE *)(a1 + v6) = v18;
      BOOL v19 = __OFADD__(v6++, 1LL);
      if (v19) {
        goto LABEL_117;
      }
      uint64_t v14 = 0LL;
      continue;
    }

uint64_t (*specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5))()
{
  v15[1] = *MEMORY[0x1895F89C0];
  uint64_t isStackAllocationSafe = specialized Collection.count.getter(a1, a2, a3, a4);
  if (isStackAllocationSafe < 0) {
    __break(1u);
  }
  if (isStackAllocationSafe < 1025
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    return specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( (uint64_t)v15 - v11,  a1,  a2,  a3,  a4,  a5);
  }

  else
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v12 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v13,  a1,  a2,  a3,  a4,  a5);
    MEMORY[0x186E20E60](v13, -1LL, -1LL);
  }

  return v12;
}

uint64_t specialized static StringProtocol.== infix<A>(_:_:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (a1 == a3 && a2 == a4 && v5 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
  }
}

uint64_t specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)( uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  v13[1] = *MEMORY[0x1895F89C0];
  if (a2 < 0) {
    __break(1u);
  }
  uint64_t v6 = (unsigned __int8 *)isStackAllocationSafe;
  if (a2 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    uint64_t v7 = v13;
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v9 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( (uint64_t)v13 - v8,  v6,  a2,  a3,  (uint64_t (*)(void))specialized StringProtocol.hexToAscii(_:));
    if (!v3) {
      return v9;
    }
    swift_willThrow();

    __break(1u);
  }

  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v11 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( (uint64_t)v7,  v6,  a2,  a3,  (uint64_t (*)(void))specialized StringProtocol.hexToAscii(_:));
    if (!v3)
    {
      uint64_t v10 = v11;
      MEMORY[0x186E20E60](v7, -1LL, -1LL);
      return v10;
    }
  }

  uint64_t result = MEMORY[0x186E20E60](v7, -1LL, -1LL);
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( uint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = result;
  *(void *)&void v28[5] = *MEMORY[0x1895F89C0];
  if (!a2 || !a3)
  {
    uint64_t v10 = 0LL;
    return (uint64_t)specialized String.init<A, B>(_validating:as:)(0LL, v10, v6);
  }

  uint64_t v8 = 0LL;
  LOBYTE(v9) = 0;
  uint64_t v10 = 0LL;
  uint64_t v11 = &a2[a3];
  uint64_t v25 = a4 + 56;
  uint64_t v12 = a2;
  do
  {
    int v15 = *v12++;
    int v14 = v15;
    if (v15 == 37)
    {
      uint64_t result = 0LL;
      if (v8 || v12 == v11) {
        return result;
      }
      int v14 = *v12;
      if (v14 == 37) {
        return 0LL;
      }
      uint64_t v12 = a2 + 2;
      uint64_t v8 = 2LL;
    }

    else if (v8 <= 0)
    {
      *(_BYTE *)(v6 + v1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v14;
      BOOL v16 = __OFADD__(v10++, 1LL);
      if (v16) {
        goto LABEL_108;
      }
      goto LABEL_9;
    }

    uint64_t result = 0LL;
    switch(v14)
    {
      case '0':
        __int16 v13 = 0;
        if (v8 == 1) {
          goto LABEL_83;
        }
        if (v8 != 2) {
          goto LABEL_8;
        }
        goto LABEL_7;
      case '1':
        if (v8 == 1)
        {
          __int16 v13 = 1;
          goto LABEL_83;
        }

        if (v8 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v13) = 16;
        goto LABEL_7;
      case '2':
        if (v8 == 1)
        {
          __int16 v13 = 2;
          goto LABEL_83;
        }

        if (v8 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v13) = 32;
        goto LABEL_7;
      case '3':
        if (v8 == 1)
        {
          __int16 v13 = 3;
          goto LABEL_83;
        }

        if (v8 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v13) = 48;
        goto LABEL_7;
      case '4':
        if (v8 == 1)
        {
          __int16 v13 = 4;
          goto LABEL_83;
        }

        if (v8 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v13) = 64;
        goto LABEL_7;
      case '5':
        if (v8 == 1)
        {
          __int16 v13 = 5;
          goto LABEL_83;
        }

        if (v8 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v13) = 80;
        goto LABEL_7;
      case '6':
        if (v8 == 1)
        {
          __int16 v13 = 6;
          goto LABEL_83;
        }

        if (v8 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v13) = 96;
        goto LABEL_7;
      case '7':
        if (v8 == 1)
        {
          __int16 v13 = 7;
          goto LABEL_83;
        }

        if (v8 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v13) = 112;
        goto LABEL_7;
      case '8':
        if (v8 == 1)
        {
          __int16 v13 = 8;
          goto LABEL_83;
        }

        if (v8 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v13) = 0x80;
        goto LABEL_7;
      case '9':
        if (v8 == 1)
        {
          __int16 v13 = 9;
          goto LABEL_83;
        }

        if (v8 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v13) = -112;
        goto LABEL_7;
      case 'A':
      case 'a':
        if (v8 == 1)
        {
          __int16 v13 = 10;
          goto LABEL_83;
        }

        if (v8 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v13) = -96;
        goto LABEL_7;
      case 'B':
      case 'b':
        if (v8 == 1)
        {
          __int16 v13 = 11;
          goto LABEL_83;
        }

        if (v8 == 2)
        {
          LOBYTE(v13) = -80;
          goto LABEL_7;
        }

        goto LABEL_8;
      case 'C':
      case 'c':
        if (v8 == 1)
        {
          __int16 v13 = 12;
          goto LABEL_83;
        }

        if (v8 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v13) = -64;
        goto LABEL_7;
      case 'D':
      case 'd':
        if (v8 == 1)
        {
          __int16 v13 = 13;
          goto LABEL_83;
        }

        if (v8 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v13) = -48;
        goto LABEL_7;
      case 'E':
      case 'e':
        if (v8 == 1)
        {
          __int16 v13 = 14;
          goto LABEL_83;
        }

        if (v8 != 2) {
          goto LABEL_8;
        }
        LOBYTE(v13) = -32;
        goto LABEL_7;
      case 'F':
      case 'f':
        if (v8 == 1)
        {
          __int16 v13 = 15;
LABEL_83:
          __int16 v9 = v13 + v9;
          if ((v9 & 0x100) != 0)
          {
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
          }

          if (!*(void *)(a4 + 16)) {
            goto LABEL_99;
          }
          uint64_t v17 = v5;
          uint64_t result = MEMORY[0x186E1CE88](*(void *)(a4 + 40), v9, 1LL);
          uint64_t v5 = v17;
          uint64_t v18 = -1LL << *(_BYTE *)(a4 + 32);
          unint64_t v19 = result & ~v18;
          if (((*(void *)(v25 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) == 0) {
            goto LABEL_99;
          }
          uint64_t v20 = *(void *)(a4 + 48);
          if (*(unsigned __int8 *)(v20 + v19) != v9)
          {
            uint64_t v21 = ~v18;
            while (1)
            {
              unint64_t v19 = (v19 + 1) & v21;
              if (((*(void *)(v25 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) == 0) {
                break;
              }
            }

uint64_t specialized URL.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702060386 && a2 == 0xE400000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x65766974616C6572LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized URLResourceValues.fileSecurity.setter(void *a1)
{
  BOOL v2 = (void *)*MEMORY[0x189603C10];
  if (a1)
  {
    *((void *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSFileSecurity);
    *(void *)&__int128 v7 = a1;
  }

  else
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
  }

  id v3 = a1;
  id v4 = v2;
  specialized Set._Variant.insert(_:)(v6, v4);

  outlined init with copy of Any?((uint64_t)&v7, (uint64_t)v6);
  specialized Dictionary.subscript.setter((uint64_t)v6, v4);
  return outlined destroy of Any?((uint64_t)&v7);
}

uint64_t specialized URLResourceValues.name.setter(uint64_t a1, uint64_t a2, id *a3)
{
  id v4 = *a3;
  specialized Set._Variant.insert(_:)(&v7, v4);

  if (a2)
  {
    uint64_t v5 = String._bridgeToObjectiveCImpl()();
    *((void *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
    *(void *)&__int128 v7 = v5;
  }

  else
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
  }

  return specialized Dictionary.subscript.setter((uint64_t)&v7, v4);
}

id specialized @nonobjc NSURL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)( uint64_t a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5)
{
  char v6 = v5;
  v16[1] = *(id *)MEMORY[0x1895F89C0];
  v10.super.isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v11 = *a4;
  if (*a4)
  {
    swift_release();
    swift_release();
  }

  v16[0] = 0LL;
  id v12 = objc_msgSend( v6,  sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_,  v10.super.isa,  a3,  v11,  a5,  v16);

  if (v12)
  {
    id v13 = v16[0];
  }

  else
  {
    if (v16[0])
    {
      v16[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v14 = (id)_nilObjCError;
    }

    swift_willThrow();
  }

  return v12;
}

unint64_t lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey;
  if (!lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey)
  {
    type metadata accessor for NSURLResourceKey(255LL);
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSURLResourceKey, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL.CodingKeys, &type metadata for URL.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL.CodingKeys, &type metadata for URL.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL.CodingKeys, &type metadata for URL.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URL.CodingKeys, &type metadata for URL.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type URL.DirectoryHint and conformance URL.DirectoryHint()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.DirectoryHint and conformance URL.DirectoryHint;
  if (!lazy protocol witness table cache variable for type URL.DirectoryHint and conformance URL.DirectoryHint)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for URL.DirectoryHint,  &type metadata for URL.DirectoryHint);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URL.DirectoryHint and conformance URL.DirectoryHint);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for URL(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type URL and conformance URL();
  a1[2] = lazy protocol witness table accessor for type URL and conformance URL();
  a1[3] = lazy protocol witness table accessor for type URL and conformance URL();
  unint64_t result = lazy protocol witness table accessor for type URL and conformance URL();
  a1[4] = result;
  return result;
}

uint64_t sub_18349C8A4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLResourceValues.name : URLResourceValues(a1, MEMORY[0x189603D00], a2);
}

uint64_t sub_18349C8C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for URLResourceValues.name : URLResourceValues(a1, a2, a3, a4, MEMORY[0x189603D00]);
}

uint64_t sub_18349C8DC@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x189603C70], a1);
}

uint64_t sub_18349C8F8(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x189603C70], *a1);
}

uint64_t sub_18349C92C@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x189603CB0], a1);
}

uint64_t sub_18349C948(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x189603CB0], *a1);
}

uint64_t sub_18349C97C@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x189603C60], a1);
}

uint64_t sub_18349C998(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x189603C60], *a1);
}

uint64_t sub_18349C9CC@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x189603C30], a1);
}

uint64_t sub_18349C9E8(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x189603C30], *a1);
}

void *sub_18349CA1C@<X0>(uint64_t a1@<X8>)
{
  return keypath_get_31Tm((void *(*)(uint64_t *__return_ptr))URLResourceValues.creationDate.getter, a1);
}

uint64_t sub_18349CA28(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_32Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))URLResourceValues.creationDate.setter);
}

void *sub_18349CA34@<X0>(uint64_t a1@<X8>)
{
  return keypath_get_31Tm((void *(*)(uint64_t *__return_ptr))URLResourceValues.contentAccessDate.getter, a1);
}

void *keypath_get_31Tm@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  unint64_t result = a1(&v5);
  char v4 = v6;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_18349CA88(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_32Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))URLResourceValues.contentAccessDate.setter);
}

void *sub_18349CA94@<X0>(uint64_t a1@<X8>)
{
  return keypath_get_31Tm( (void *(*)(uint64_t *__return_ptr))URLResourceValues.contentModificationDate.getter,  a1);
}

uint64_t sub_18349CAA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_32Tm( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t *))URLResourceValues.contentModificationDate.setter);
}

uint64_t keypath_set_32Tm( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *))
{
  char v5 = *((_BYTE *)a1 + 8);
  uint64_t v7 = *a1;
  char v8 = v5;
  return a5(&v7);
}

uint64_t sub_18349CAEC(uint64_t a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x189603CC8], *(void *)a1, *(_BYTE *)(a1 + 8));
}

void sub_18349CB24(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  specialized URLResourceValues.fileSecurity.setter(v1);
}

uint64_t sub_18349CB60@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x189603C50], a1);
}

uint64_t sub_18349CB7C(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x189603C50], *a1);
}

uint64_t sub_18349CBB0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLResourceValues.name : URLResourceValues(a1, MEMORY[0x189603E38], a2);
}

uint64_t sub_18349CBCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for URLResourceValues.name : URLResourceValues(a1, a2, a3, a4, MEMORY[0x189603E38]);
}

uint64_t sub_18349CBE8@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x189603D68], a1);
}

uint64_t sub_18349CC04(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x189603D68], *a1);
}

ValueMetadata *type metadata accessor for URLResourceValues()
{
  return &type metadata for URLResourceValues;
}

ValueMetadata *type metadata accessor for URL()
{
  return &type metadata for URL;
}

uint64_t storeEnumTagSinglePayload for URL.DirectoryHint(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_18349CCA4 + 4 * byte_18382DC49[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18349CCD8 + 4 * byte_18382DC44[v4]))();
}

uint64_t sub_18349CCD8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18349CCE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18349CCE8LL);
  }
  return result;
}

uint64_t sub_18349CCF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18349CCFCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_18349CD00(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18349CD08(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for URL.DirectoryHint()
{
  return &type metadata for URL.DirectoryHint;
}

uint64_t storeEnumTagSinglePayload for URL.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_18349CD70 + 4 * byte_18382DC53[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18349CDA4 + 4 * byte_18382DC4E[v4]))();
}

uint64_t sub_18349CDA4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18349CDAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18349CDB4LL);
  }
  return result;
}

uint64_t sub_18349CDC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18349CDC8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_18349CDCC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18349CDD4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for URL.CodingKeys()
{
  return &type metadata for URL.CodingKeys;
}

BOOL specialized closure #1 in Sequence<>.contains(_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PredicateExpressionCodingKeys(a1, a2);
}

BOOL _sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0(unsigned __int8 *a1)
{
  return _sSKsSQ7ElementRpzrlE9lastIndex2of0C0QzSgAB_tFSbABXEfU_SS8UTF8ViewV_TG5TA_0(a1);
}

uint64_t _NSRange.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = a1;
  uint64_t v67 = a4;
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v64 = v7;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v62 = *(void *)(v9 - 8);
  uint64_t v63 = v9;
  MEMORY[0x1895F8858](v9);
  int64_t v60 = (char *)&v51 - v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  id v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v55 = (char *)&v51 - v14;
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v51 - v19;
  uint64_t v61 = v6;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](v21);
  uint64_t v59 = a3;
  uint64_t v65 = a2;
  swift_getAssociatedConformanceWitness();
  uint64_t v56 = type metadata accessor for Range();
  uint64_t v22 = *(void *)(v56 - 8);
  MEMORY[0x1895F8858](v56);
  uint64_t v53 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v24);
  __int16 v26 = (char *)&v51 - v25;
  MEMORY[0x1895F8858](v27);
  unint64_t v58 = (char *)&v51 - v28;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v21, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  dispatch thunk of static FixedWidthInteger.max.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    unint64_t v51 = v26;
    uint64_t v52 = v22;
    uint64_t v31 = TupleTypeMetadata2;
    uint64_t v32 = v54;
    uint64_t v33 = v55;
    uint64_t v34 = &v55[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
    v35(v55, v20, AssociatedTypeWitness);
    v35(v34, v17, AssociatedTypeWitness);
    uint64_t v36 = &v12[*(int *)(v31 + 48)];
    unint64_t v37 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    v37(v12, v33, AssociatedTypeWitness);
    v37(v36, v34, AssociatedTypeWitness);
    uint64_t v38 = v53;
    v35(v53, v12, AssociatedTypeWitness);
    __int16 v39 = *(void (**)(char *, uint64_t))(v32 + 8);
    v39(v36, AssociatedTypeWitness);
    char v40 = &v12[*(int *)(v31 + 48)];
    v35(v12, v33, AssociatedTypeWitness);
    v35(v40, v34, AssociatedTypeWitness);
    uint64_t v41 = v56;
    v35(&v38[*(int *)(v56 + 36)], v40, AssociatedTypeWitness);
    v39(v12, AssociatedTypeWitness);
    unint64_t v43 = v51;
    uint64_t v42 = v52;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v38, v41);
    uint64_t v44 = v63;
    uint64_t v45 = swift_getAssociatedConformanceWitness();
    v68[0] = v64;
    v68[1] = v45;
    MEMORY[0x186E20D4C](MEMORY[0x189618A60], v41, v68);
    uint64_t v46 = (uint64_t)v58;
    uint64_t v47 = v65;
    dispatch thunk of RangeExpression.relative<A>(to:)();
    uint64_t v48 = *(void (**)(char *, uint64_t))(v42 + 8);
    v48(v43, v41);
    uint64_t v61 = specialized numericCast<A, B>(_:)(v46, AssociatedTypeWitness, v61);
    uint64_t v49 = (uint64_t)v60;
    dispatch thunk of Strideable.distance(to:)();
    uint64_t v50 = swift_getAssociatedConformanceWitness();
    specialized numericCast<A, B>(_:)(v49, v44, *(void *)(v50 + 8));
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v49, v44);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v47 - 8) + 8LL))(v66, v47);
    v48((char *)v46, v41);
    return v61;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t Range<>.init(_:)(uint64_t result, uint64_t a2)
{
  if (result == 0x7FFFFFFFFFFFFFFFLL) {
    return 0LL;
  }
  if (!__OFADD__(result, a2)) {
    return result;
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall _NSRange.contains(_:)(Swift::Int a1)
{
  if (a1 >= v1)
  {
    if (__OFSUB__(a1, v1)) {
      __break(1u);
    }
    else {
      LOBYTE(a1) = a1 - v1 < v2;
    }
  }

  else
  {
    LOBYTE(a1) = 0;
  }

  return a1;
}

void _NSRange.hash(into:)(int a1, Swift::UInt a2, Swift::UInt a3)
{
}

BOOL static _NSRange.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

Swift::Int _NSRange.hashValue.getter(Swift::UInt a1, Swift::UInt a2)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _NSRange()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _NSRange()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _NSRange()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t _NSRange.description.getter()
{
  v0._Swift::Int countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._Swift::Int countAndFlagsBits = 8236LL;
  v1._unint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v1);
  v2._Swift::Int countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._Swift::Int countAndFlagsBits = 125LL;
  v3._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 123LL;
}

uint64_t _NSRange.debugDescription.getter(uint64_t a1)
{
  if (a1 == 0x7FFFFFFFFFFFFFFFLL)
  {
    _StringGuts.grow(_:)(16LL);
    swift_bridgeObjectRelease();
    strcpy((char *)v6, "{NSNotFound, ");
    HIWORD(v6[1]) = -4864;
  }

  else
  {
    v6[0] = 123LL;
    v6[1] = 0xE100000000000000LL;
    v1._Swift::Int countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._Swift::Int countAndFlagsBits = 8236LL;
    v2._unint64_t object = (void *)0xE200000000000000LL;
    String.append(_:)(v2);
  }

  v3._Swift::Int countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._Swift::Int countAndFlagsBits = 125LL;
  v4._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return v6[0];
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _NSRange()
{
  return _NSRange.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _NSRange()
{
  return _NSRange.debugDescription.getter(*v0);
}

const __CFCharacterSet *_NSRange.init(_:)(uint64_t a1, unint64_t a2)
{
  v14[8] = *(double *)MEMORY[0x1895F89C0];
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0LL;
  }
  id v3 = objc_msgSend( objc_allocWithZone((Class)NSScanner),  sel_initWithString_,  String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  uint64_t result = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  if (!result)
  {
    __break(1u);
    return result;
  }

  char v5 = result;
  type metadata accessor for __CharacterSetStorage();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v5;
  *(_BYTE *)(inited + 24) = 0;
  -[__CFCharacterSet copy](v5, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSCharacterSet();
  swift_dynamicCast();
  objc_msgSend(v3, sel__deprecated_scanUpToCharactersFromSet_intoString_, v13, 0);

  if (!objc_msgSend(v3, sel_isAtEnd))
  {
    id v13 = 0LL;
    id v7 = objc_msgSend(v3, sel__deprecated_scanLocation);
    if (objc_msgSend(v3, sel_scanInteger_, &v13) && !objc_msgSend(v3, sel_isAtEnd))
    {
      unsigned int v8 = objc_msgSend( v3,  sel__deprecated_scanString_intoString_,  String._bridgeToObjectiveCImpl()(),  0);
      swift_unknownObjectRelease();
      if (!v8)
      {
LABEL_15:
        objc_msgSend(*(id *)(inited + 16), sel_copy);
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        swift_dynamicCast();
        objc_msgSend(v3, sel__deprecated_scanUpToCharactersFromSet_intoString_, *(void *)&v12, 0);

        if (!objc_msgSend(v3, sel_isAtEnd))
        {
          v14[0] = 0.0;
          id v9 = objc_msgSend(v3, sel__deprecated_scanLocation);
          if (objc_msgSend(v3, sel_scanInteger_, v14))
          {
            if ((objc_msgSend(v3, sel_isAtEnd) & 1) != 0
              || (unsigned int v10 = objc_msgSend( v3,  sel__deprecated_scanString_intoString_,  String._bridgeToObjectiveCImpl()(),  0),  swift_unknownObjectRelease(),  !v10))
            {

              swift_release();
            }

            else
            {
              objc_msgSend(v3, sel__deprecated_setScanLocation_, v9);
              double v12 = 0.0;
              unsigned int v11 = objc_msgSend(v3, sel__deprecated_scanDouble_, &v12);

              swift_release();
              if (!v11 || v12 <= -9.22337204e18 || v12 >= 9.22337204e18 || v12 != trunc(v12)) {
                return 0LL;
              }
              *(void *)&v14[0] = (uint64_t)v12;
            }

            return (const __CFCharacterSet *)v13;
          }
        }

        goto LABEL_24;
      }

      objc_msgSend(v3, sel__deprecated_setScanLocation_, v7);
      v14[0] = 0.0;
      if (objc_msgSend(v3, sel__deprecated_scanDouble_, v14)
        && v14[0] > -9.22337204e18
        && v14[0] < 9.22337204e18
        && v14[0] == trunc(v14[0]))
      {
        id v13 = (id)(uint64_t)v14[0];
        goto LABEL_15;
      }
    }

uint64_t _NSRange.upperBound.getter(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall _NSRange.formUnion(_:)(__C::_NSRange a1)
{
  Swift::Int location = *v1;
  Swift::Int v3 = v1[1];
  BOOL v4 = __OFADD__(*v1, v3);
  Swift::Int v5 = *v1 + v3;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (__OFADD__(a1.location, a1.length))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (v5 <= a1.location + a1.length) {
    Swift::Int v5 = a1.location + a1.length;
  }
  if (location >= a1.location) {
    Swift::Int location = a1.location;
  }
  BOOL v4 = __OFSUB__(v5, location);
  Swift::Int v6 = v5 - location;
  if (!v4)
  {
    *Swift::String v1 = location;
    v1[1] = v6;
    return;
  }

__C::_NSRange __swiftcall _NSRange.union(_:)(__C::_NSRange result)
{
  Swift::Int v3 = v1 + v2;
  if (__OFADD__(v1, v2))
  {
    __break(1u);
    goto LABEL_10;
  }

  if (__OFADD__(result.location, result.length))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }

  if (v3 <= result.location + result.length) {
    Swift::Int v3 = result.location + result.length;
  }
  if (v1 < result.location) {
    result.Swift::Int location = v1;
  }
  result.length = v3 - result.location;
  if (__OFSUB__(v3, result.location)) {
    goto LABEL_11;
  }
  return result;
}

__C::_NSRange_optional __swiftcall _NSRange.intersection(_:)(__C::_NSRange a1)
{
  Swift::Int v3 = v1 + v2;
  if (__OFADD__(v1, v2))
  {
    __break(1u);
    goto LABEL_16;
  }

  Swift::Int v4 = a1.location + a1.length;
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  Swift::Int v5 = v1;
  if (v3 >= v4) {
    Swift::Int v6 = a1.location + a1.length;
  }
  else {
    Swift::Int v6 = v1 + v2;
  }
  if (v1 < a1.location || v4 <= v1)
  {
    Swift::Int location = 0LL;
    LOBYTE(Data.Iterator.init(_:at:)(v0, v1) = 1;
    a1.length = 0LL;
    if (a1.location >= v5 && v3 > a1.location)
    {
      a1.length = v6 - a1.location;
      if (__OFSUB__(v6, a1.location))
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }

      LOBYTE(Data.Iterator.init(_:at:)(v0, v1) = 0;
      Swift::Int location = a1.location;
    }

    a1.Swift::Int location = location;
    goto LABEL_19;
  }

  a1.length = v6 - v1;
  if (__OFSUB__(v6, v1))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  LOBYTE(Data.Iterator.init(_:at:)(v0, v1) = 0;
  a1.Swift::Int location = v5;
LABEL_19:
  result.uint64_t value = a1;
  result.is_nil = v1;
  return result;
}

uint64_t _NSRange.init<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v9, result))
  {
    __break(1u);
  }

  else
  {
    uint64_t v10 = result;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(a2, a4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
    return v10;
  }

  return result;
}

uint64_t _NSRange.toRange()(uint64_t result, uint64_t a2)
{
  if (result == 0x7FFFFFFFFFFFFFFFLL) {
    return 0LL;
  }
  BOOL v3 = __OFADD__(result, a2);
  uint64_t v4 = result + a2;
  if (v3)
  {
    __break(1u);
  }

  else if (v4 >= result)
  {
    return result;
  }

  __break(1u);
  return result;
}

uint64_t Range<>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v8 = type metadata accessor for Range();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( a3,  1LL,  1LL,  v8);
  }

  else
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
    if (__OFADD__(a1, a2))
    {
      __break(1u);
    }

    else
    {
      dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
      Range.init(uncheckedBounds:)();
      uint64_t v10 = type metadata accessor for Range();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))( a3,  0LL,  1LL,  v10);
    }
  }

  return result;
}

unint64_t specialized Range<>.init<A>(_:_genericIn:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a1 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0LL;
  }
  uint64_t v4 = (a4 & 0x2000000000000000LL) != 0 ? HIBYTE(a4) & 0xF : a3 & 0xFFFFFFFFFFFFLL;
  uint64_t v5 = String.UTF16View.index(_:offsetBy:limitedBy:)();
  if ((v6 & 1) != 0) {
    return 0LL;
  }
  unint64_t v7 = v5;
  unint64_t result = String.UTF16View.index(_:offsetBy:limitedBy:)();
  if ((v9 & 1) != 0 || result >> 14 > 4 * v4) {
    return 0LL;
  }
  if (result >> 14 >= v7 >> 14) {
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t Range<>.init<A>(_:_genericIn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v11 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  id v13 = (char *)v18 - v12;
  MEMORY[0x186E1C084](a4, a5, v11);
  if (a1 == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_5;
  }
  v18[1] = a3;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Collection.startIndex.getter();
  unint64_t v20 = v21;
  dispatch thunk of Collection.endIndex.getter();
  v18[2] = v19;
  dispatch thunk of BidirectionalCollection.index(_:offsetBy:limitedBy:)();
  if (v23 == 1
    || (unint64_t v14 = v22,
        unint64_t v21 = v22,
        dispatch thunk of Collection.endIndex.getter(),
        unint64_t v19 = v20,
        dispatch thunk of BidirectionalCollection.index(_:offsetBy:limitedBy:)(),
        v23 == 1)
    || (unint64_t v15 = v22, dispatch thunk of Collection.startIndex.getter(), v14 >> 14 < v22 >> 14))
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    return 0LL;
  }

  dispatch thunk of Collection.endIndex.getter();
  unint64_t v17 = v22;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  if (v15 >> 14 > v17 >> 14) {
    return 0LL;
  }
  if (v15 >> 14 >= v14 >> 14) {
    return v14;
  }
  __break(1u);
  return result;
}

unint64_t Range<>.init(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized Range<>.init<A>(_:_genericIn:)(a1, a2, a3, a4);
}

uint64_t Range<>.init<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Range<>.init<A>(_:_genericIn:)(a1, a2, a3, a4, a5);
}

uint64_t _NSRange.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  unint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v15[0] = a1;
  v15[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1837232D0;
  *(void *)(v11 + 32) = 0x6E6F697461636F6CLL;
  *(void *)(v11 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0xE800000000000000LL;
  uint64_t v12 = MEMORY[0x189618740];
  *(void *)(v11 + 48) = a1;
  *(void *)(v11 + 72) = v12;
  *(void *)(v11 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0x6874676E656CLL;
  *(void *)(v11 + 12__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v12;
  *(void *)(v11 + 88) = 0xE600000000000000LL;
  *(void *)(v11 + 96) = a2;
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v10, 1LL, 1LL, v13);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x18961A748], v4);
  type metadata accessor for _NSRange(0LL);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance _NSRange()
{
  return _NSRange.customMirror.getter(*v0, v0[1]);
}

uint64_t _NSRange.customPlaygroundQuickLook.getter@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 32) = 14;
  return result;
}

__n128 protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance _NSRange@<Q0>( __n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[2].n128_u8[0] = 14;
  return result;
}

uint64_t _NSRange.init(from:)(void *a1)
{
  return specialized _NSRange.init(from:)(a1);
}

uint64_t _NSRange.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance _NSRange@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized _NSRange.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _NSRange(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t specialized _NSRange.init(from:)(void *a1)
{
  uint64_t v2 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

unint64_t lazy protocol witness table accessor for type _NSRange and conformance _NSRange()
{
  unint64_t result = lazy protocol witness table cache variable for type _NSRange and conformance _NSRange;
  if (!lazy protocol witness table cache variable for type _NSRange and conformance _NSRange)
  {
    type metadata accessor for _NSRange(255LL);
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _NSRange, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _NSRange and conformance _NSRange);
  }

  return result;
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  __asm { BR              X10 }

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }

Swift::Int sub_18349ED14()
{
  return Hasher._finalize()();
}

Swift::Int sub_18349EDE4()
{
  return Hasher._finalize()();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    uint64_t v3 = 65LL;
  }
  else {
    uint64_t v3 = 83LL;
  }
  if (a2 <= 1) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v4 >= 9) {
    uint64_t v5 = 9LL;
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5 != 1)
  {
    swift_bridgeObjectRetain_n();
    v6._Swift::Int countAndFlagsBits = v3;
    v6._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    if (v5 != 2)
    {
      swift_bridgeObjectRetain();
      v7._Swift::Int countAndFlagsBits = v3;
      v7._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      if (v5 != 3)
      {
        swift_bridgeObjectRetain();
        v8._Swift::Int countAndFlagsBits = v3;
        v8._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v8);
        swift_bridgeObjectRelease();
        if (v5 != 4)
        {
          swift_bridgeObjectRetain();
          v9._Swift::Int countAndFlagsBits = v3;
          v9._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v9);
          swift_bridgeObjectRelease();
          if (v5 != 5)
          {
            swift_bridgeObjectRetain();
            v10._Swift::Int countAndFlagsBits = v3;
            v10._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v10);
            swift_bridgeObjectRelease();
            if (v5 != 6)
            {
              swift_bridgeObjectRetain();
              v11._Swift::Int countAndFlagsBits = v3;
              v11._unint64_t object = (void *)0xE100000000000000LL;
              String.append(_:)(v11);
              swift_bridgeObjectRelease();
              if (v5 != 7)
              {
                swift_bridgeObjectRetain();
                v12._Swift::Int countAndFlagsBits = v3;
                v12._unint64_t object = (void *)0xE100000000000000LL;
                String.append(_:)(v12);
                swift_bridgeObjectRelease();
                if (v5 != 8)
                {
                  swift_bridgeObjectRetain();
                  v13._Swift::Int countAndFlagsBits = v3;
                  v13._unint64_t object = (void *)0xE100000000000000LL;
                  String.append(_:)(v13);
                  swift_bridgeObjectRelease();
                }
              }
            }
          }
        }
      }
    }

    swift_bridgeObjectRelease();
  }

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

uint64_t sub_18349F084()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18349F15C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18349F23C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18349F304()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18349F3A4()
{
  return swift_bridgeObjectRelease();
}

void static Date.FormatStyle.Symbol.Hour.AMPMStyle.abbreviated.getter(void *a1@<X8>)
{
  *a1 = 2LL;
}

void *static Date.FormatStyle.Symbol.Hour.defaultDigits(amPM:)@<X0>(void *result@<X0>, _BYTE *a2@<X8>)
{
  if (*result >= 4uLL)
  {
    unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    *a2 = 0x2000406u >> (8 * *result);
  }

  return result;
}

_BYTE *static Date.FormatStyle.Symbol.TimeZone.genericName(_:)@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  if (*result) {
    char v2 = 7;
  }
  else {
    char v2 = 6;
  }
  *a2 = v2;
  return result;
}

void Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_18349F578(uint64_t a1)
{
  uint64_t v1 = 10LL;
  if (a1 < 10) {
    uint64_t v1 = a1;
  }
  if (v1 <= 1) {
    uint64_t v2 = 1LL;
  }
  else {
    uint64_t v2 = v1;
  }
  return MEMORY[0x186E1B904](121LL, 0xE100000000000000LL, v2);
}

uint64_t Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18349F624 + 4 * byte_18382E1E7[a1]))( 97LL,  0xE100000000000000LL);
}

uint64_t sub_18349F624()
{
  return 1633771873LL;
}

uint64_t sub_18349F634()
{
  return 0x6161616161LL;
}

uint64_t sub_18349F648()
{
  return 98LL;
}

uint64_t sub_18349F650()
{
  return 1650614882LL;
}

uint64_t sub_18349F660()
{
  return 0x6262626262LL;
}

uint64_t sub_18349F674()
{
  return 66LL;
}

uint64_t sub_18349F67C()
{
  return 1111638594LL;
}

uint64_t sub_18349F68C()
{
  return 0x4242424242LL;
}

uint64_t Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18349F6C8 + 4 * byte_18382E1F0[a1]))( 106LL,  0xE100000000000000LL);
}

uint64_t sub_18349F6C8()
{
  return 27242LL;
}

uint64_t sub_18349F6D4()
{
  return 6974058LL;
}

uint64_t sub_18349F6E4()
{
  return 1785358954LL;
}

uint64_t sub_18349F6F4()
{
  return 0x6A6A6A6A6ALL;
}

uint64_t sub_18349F708()
{
  return 0x6A6A6A6A6A6ALL;
}

uint64_t sub_18349F71C()
{
  return 74LL;
}

uint64_t sub_18349F724()
{
  return 19018LL;
}

uint64_t sub_18349F730()
{
  return 67LL;
}

uint64_t sub_18349F738()
{
  return 17219LL;
}

uint64_t sub_18349F744()
{
  return 4408131LL;
}

uint64_t sub_18349F754()
{
  return 1128481603LL;
}

uint64_t sub_18349F764()
{
  return 0x4343434343LL;
}

uint64_t sub_18349F778()
{
  return 0x434343434343LL;
}

uint64_t Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.rawValue.getter(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    uint64_t v2 = 65LL;
  }
  else {
    uint64_t v2 = 83LL;
  }
  if (a1 <= 1) {
    uint64_t v3 = 1LL;
  }
  else {
    uint64_t v3 = a1;
  }
  if (v3 >= 9) {
    uint64_t v4 = 9LL;
  }
  else {
    uint64_t v4 = v3;
  }
  if (v4 != 1)
  {
    swift_bridgeObjectRetain();
    v5._Swift::Int countAndFlagsBits = v2;
    v5._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v5);
    if (v4 != 2)
    {
      v6._Swift::Int countAndFlagsBits = v2;
      v6._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v6);
      if (v4 != 3)
      {
        v7._Swift::Int countAndFlagsBits = v2;
        v7._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v7);
        if (v4 != 4)
        {
          v8._Swift::Int countAndFlagsBits = v2;
          v8._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v8);
          if (v4 != 5)
          {
            v9._Swift::Int countAndFlagsBits = v2;
            v9._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v9);
            if (v4 != 6)
            {
              v10._Swift::Int countAndFlagsBits = v2;
              v10._unint64_t object = (void *)0xE100000000000000LL;
              String.append(_:)(v10);
              if (v4 != 7)
              {
                v11._Swift::Int countAndFlagsBits = v2;
                v11._unint64_t object = (void *)0xE100000000000000LL;
                String.append(_:)(v11);
                if (v4 != 8)
                {
                  v12._Swift::Int countAndFlagsBits = v2;
                  v12._unint64_t object = (void *)0xE100000000000000LL;
                  String.append(_:)(v12);
                }
              }
            }
          }
        }
      }
    }

    swift_bridgeObjectRelease();
  }

  return v2;
}

uint64_t Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18349F8E0 + 4 * byte_18382E1FE[a1]))( 122LL,  0xE100000000000000LL);
}

uint64_t sub_18349F8E0()
{
  return 2054847098LL;
}

uint64_t sub_18349F8F0()
{
  return 90LL;
}

uint64_t sub_18349F8F8()
{
  return 1515870810LL;
}

uint64_t sub_18349F908()
{
  return 0x5A5A5A5A5ALL;
}

uint64_t sub_18349F91C()
{
  return 79LL;
}

uint64_t sub_18349F924()
{
  return 118LL;
}

uint64_t sub_18349F92C()
{
  return 1987475062LL;
}

uint64_t sub_18349F93C()
{
  return 86LL;
}

uint64_t sub_18349F944()
{
  return 22102LL;
}

uint64_t sub_18349F950()
{
  return 5658198LL;
}

uint64_t sub_18349F960()
{
  return 1448498774LL;
}

void static Date.FormatStyle.Symbol.Year.defaultDigits.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 3;
}

_BYTE *static Date.FormatStyle.Symbol.TimeZone.specificName(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void Date.FormatStyle.Symbol.Era.hash(into:)()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int Date.FormatStyle.Symbol.Era.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Era()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Era()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Year.hash(into:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  if (v1 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v2 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v2, v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int Date.FormatStyle.Symbol.Year.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.Year()
{
  uint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Year()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  if (v1 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v2 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v2, v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Year()
{
  uint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.YearForWeekOfYear.hash(into:)()
{
  if (*(_BYTE *)(v0 + 9) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v1 = *(void *)v0;
    char v2 = *(_BYTE *)(v0 + 8);
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = 10LL;
      if (v1 < 10) {
        uint64_t v3 = v1;
      }
      if (v3 <= 1) {
        uint64_t v4 = 1LL;
      }
      else {
        uint64_t v4 = v3;
      }
      MEMORY[0x186E1B904](89LL, 0xE100000000000000LL, v4);
    }

    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

BOOL static Date.FormatStyle.Symbol.YearForWeekOfYear.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static Date.FormatStyle.Symbol.YearForWeekOfYear.== infix(_:_:)( a1,  a2,  (uint64_t (*)(void, void, void, void))specialized == infix<A>(_:_:));
}

Swift::Int Date.FormatStyle.Symbol.YearForWeekOfYear.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      uint64_t v4 = 10LL;
      if (v1 < 10) {
        uint64_t v4 = v1;
      }
      if (v4 <= 1) {
        uint64_t v5 = 1LL;
      }
      else {
        uint64_t v5 = v4;
      }
      MEMORY[0x186E1B904](89LL, 0xE100000000000000LL, v5);
    }

    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      uint64_t v4 = 10LL;
      if (v1 < 10) {
        uint64_t v4 = v1;
      }
      if (v4 <= 1) {
        uint64_t v5 = 1LL;
      }
      else {
        uint64_t v5 = v4;
      }
      MEMORY[0x186E1B904](89LL, 0xE100000000000000LL, v5);
    }

    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void))specialized == infix<A>(_:_:));
}

void Date.FormatStyle.Symbol.CyclicYear.hash(into:)()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int Date.FormatStyle.Symbol.CyclicYear.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.CyclicYear()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.CyclicYear()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Quarter.hash(into:)()
{
  uint64_t v1 = *v0;
  if ((_DWORD)v1 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
}

uint64_t sub_1834A044C()
{
  return swift_bridgeObjectRelease();
}

BOOL static Date.FormatStyle.Symbol.Quarter.== infix(_:_:)(_BYTE *a1, unsigned __int8 *a2)
{
  return static Date.FormatStyle.Symbol.Quarter.== infix(_:_:)(a1, a2, (uint64_t (*)(void))specialized == infix<A>(_:_:));
}

Swift::Int Date.FormatStyle.Symbol.Quarter.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Quarter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Quarter( _BYTE *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Quarter( a1,  a2,  a3,  a4,  (uint64_t (*)(void))specialized == infix<A>(_:_:));
}

void Date.FormatStyle.Symbol.Month.hash(into:)()
{
  uint64_t v1 = *v0;
  if ((_DWORD)v1 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
}

uint64_t sub_1834A06CC()
{
  return swift_bridgeObjectRelease();
}

BOOL static Date.FormatStyle.Symbol.Month.== infix(_:_:)(_BYTE *a1, unsigned __int8 *a2)
{
  return static Date.FormatStyle.Symbol.Quarter.== infix(_:_:)(a1, a2, (uint64_t (*)(void))specialized == infix<A>(_:_:));
}

BOOL static Date.FormatStyle.Symbol.Quarter.== infix(_:_:)( _BYTE *a1, unsigned __int8 *a2, uint64_t (*a3)(void))
{
  int v3 = *a2;
  if (*a1 != 5) {
    return v3 != 5 && (a3() & 1) != 0;
  }
  return v3 == 5;
}

Swift::Int Date.FormatStyle.Symbol.Month.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Month()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Month( _BYTE *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Quarter( a1,  a2,  a3,  a4,  (uint64_t (*)(void))specialized == infix<A>(_:_:));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Quarter( _BYTE *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  int v5 = *a2;
  if (*a1 != 5) {
    return v5 != 5 && (a5() & 1) != 0;
  }
  return v5 == 5;
}

void Date.FormatStyle.Symbol.Week.hash(into:)()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int Date.FormatStyle.Symbol.Week.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Week()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Week()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Day.hash(into:)()
{
  if (*(_BYTE *)(v0 + 9) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v1 = *(void *)v0;
    char v2 = *(_BYTE *)(v0 + 8);
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = 10LL;
      if (v1 < 10) {
        uint64_t v3 = v1;
      }
      if (v3 <= 1) {
        uint64_t v4 = 1LL;
      }
      else {
        uint64_t v4 = v3;
      }
      MEMORY[0x186E1B904](103LL, 0xE100000000000000LL, v4);
    }

    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

BOOL static Date.FormatStyle.Symbol.Day.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static Date.FormatStyle.Symbol.YearForWeekOfYear.== infix(_:_:)( a1,  a2,  (uint64_t (*)(void, void, void, void))specialized == infix<A>(_:_:));
}

BOOL static Date.FormatStyle.Symbol.YearForWeekOfYear.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void))
{
  if ((*(_BYTE *)(a1 + 9) & 1) == 0) {
    return (*(_BYTE *)(a2 + 9) & 1) == 0
  }
        && (a3(*(void *)a1, *(_BYTE *)(a1 + 8) & 1, *(void *)a2, *(_BYTE *)(a2 + 8) & 1) & 1) != 0;
  return (*(_BYTE *)(a2 + 9) & 1) != 0;
}

Swift::Int Date.FormatStyle.Symbol.Day.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      uint64_t v4 = 10LL;
      if (v1 < 10) {
        uint64_t v4 = v1;
      }
      if (v4 <= 1) {
        uint64_t v5 = 1LL;
      }
      else {
        uint64_t v5 = v4;
      }
      MEMORY[0x186E1B904](103LL, 0xE100000000000000LL, v5);
    }

    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Day()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      uint64_t v4 = 10LL;
      if (v1 < 10) {
        uint64_t v4 = v1;
      }
      if (v4 <= 1) {
        uint64_t v5 = 1LL;
      }
      else {
        uint64_t v5 = v4;
      }
      MEMORY[0x186E1B904](103LL, 0xE100000000000000LL, v5);
    }

    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Day( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void))specialized == infix<A>(_:_:));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void))
{
  if ((*(_BYTE *)(a1 + 9) & 1) == 0) {
    return (*(_BYTE *)(a2 + 9) & 1) == 0
  }
        && (a5(*(void *)a1, *(_BYTE *)(a1 + 8) & 1, *(void *)a2, *(_BYTE *)(a2 + 8) & 1) & 1) != 0;
  return *(_BYTE *)(a2 + 9) != 0;
}

void Date.FormatStyle.Symbol.DayOfYear.hash(into:)()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int Date.FormatStyle.Symbol.DayOfYear.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.DayOfYear()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.DayOfYear()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Weekday.hash(into:)()
{
  uint64_t v1 = *v0;
  if ((_DWORD)v1 != 6)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
}

uint64_t sub_1834A124C()
{
  return swift_bridgeObjectRelease();
}

BOOL static Date.FormatStyle.Symbol.Weekday.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 != 6)
  {
    if (v3 == 6) {
      return 0LL;
    }
    specialized == infix<A>(_:_:)(v2);
    return (v4 & 1) != 0;
  }

  return v3 == 6;
}

Swift::Int Date.FormatStyle.Symbol.Weekday.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 != 6)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Weekday()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 != 6)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Weekday( unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 != 6)
  {
    if (v3 == 6) {
      return 0LL;
    }
    specialized == infix<A>(_:_:)(v2);
    return (v4 & 1) != 0;
  }

  return v3 == 6;
}

void Date.FormatStyle.Symbol.DayPeriod.hash(into:)(uint64_t a1)
{
  int v3 = *v1;
  if (v3 == 9)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v3);
  }

BOOL static Date.FormatStyle.Symbol.DayPeriod.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 != 9)
  {
    if (v3 == 9) {
      return 0LL;
    }
    specialized == infix<A>(_:_:)(v2);
    return (v4 & 1) != 0;
  }

  return v3 == 9;
}

Swift::Int Date.FormatStyle.Symbol.DayPeriod.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 9)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  }

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.DayPeriod()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 9)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.DayPeriod(uint64_t a1)
{
  int v3 = *v1;
  if (v3 == 9)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v3);
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.DayPeriod()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 9)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  }

  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.DayPeriod( unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 != 9)
  {
    if (v3 == 9) {
      return 0LL;
    }
    specialized == infix<A>(_:_:)(v2);
    return (v4 & 1) != 0;
  }

  return v3 == 9;
}

void Date.FormatStyle.Symbol.Hour.hash(into:)()
{
  int v1 = *v0;
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int Date.FormatStyle.Symbol.Hour.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.Hour()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Hour()
{
  int v1 = *v0;
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Hour()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Minute.hash(into:)()
{
  if (*v0 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int Date.FormatStyle.Symbol.Minute.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Minute()
{
  if (*v0 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Minute()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Second.hash(into:)()
{
  if (*v0 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int Date.FormatStyle.Symbol.Second.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Second()
{
  if (*v0 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Second()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.SecondFraction.hash(into:)(uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(v1 + 8);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v4 = *(void *)v1;
    char v5 = v3 & 1;
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v4, v5);
  }

uint64_t static Date.FormatStyle.Symbol.SecondFraction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (v2 == 255)
  {
    if (v3 == 255) {
      return 1LL;
    }
  }

  else if (v3 != 255 && (specialized == infix<A>(_:_:)(*(void *)a1, v2 & 1, *(void *)a2, v3 & 1) & 1) != 0)
  {
    return 1LL;
  }

  return 0LL;
}

Swift::Int Date.FormatStyle.Symbol.SecondFraction.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2 & 1);
  }

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SecondFraction()
{
  uint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2 & 1);
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SecondFraction( uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(v1 + 8);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v4 = *(void *)v1;
    char v5 = v3 & 1;
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v4, v5);
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SecondFraction()
{
  uint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2 & 1);
  }

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SecondFraction( uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (v2 == 255)
  {
    if (v3 == 255) {
      return 1LL;
    }
  }

  else if (v3 != 255 && (specialized == infix<A>(_:_:)(*(void *)a1, v2 & 1, *(void *)a2, v3 & 1) & 1) != 0)
  {
    return 1LL;
  }

  return 0LL;
}

void Date.FormatStyle.Symbol.TimeZone.hash(into:)()
{
  int v1 = *v0;
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int Date.FormatStyle.Symbol.TimeZone.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.TimeZone()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.TimeZone()
{
  int v1 = *v0;
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.TimeZone()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.StandaloneQuarter.hash(into:)()
{
  __asm { BR              X10 }

uint64_t sub_1834A23FC()
{
  return swift_bridgeObjectRelease();
}

void static Date.FormatStyle.Symbol.StandaloneQuarter.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_1834A2488@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)sub_1834A24E4 + 4 * byte_18382E244[a2]))( 29041LL,  a1,  113LL);
}

uint64_t sub_1834A24E4(uint64_t a1)
{
  if (a1 == 29041 && v1 == 0xE200000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void Date.FormatStyle.Symbol.StandaloneQuarter.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A25C8()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.StandaloneQuarter()
{
  __asm { BR              X10 }

uint64_t sub_1834A2664()
{
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.StandaloneQuarter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A26F4()
{
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.StandaloneMonth.hash(into:)()
{
  __asm { BR              X10 }

uint64_t sub_1834A278C()
{
  return swift_bridgeObjectRelease();
}

void static Date.FormatStyle.Symbol.StandaloneMonth.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_1834A2818@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)sub_1834A2874 + 4 * byte_18382E262[a2]))( 19532LL,  a1,  76LL);
}

uint64_t sub_1834A2874(uint64_t a1)
{
  if (a1 == 19532 && v1 == 0xE200000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void Date.FormatStyle.Symbol.StandaloneMonth.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A2958()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.StandaloneMonth()
{
  __asm { BR              X10 }

uint64_t sub_1834A29F4()
{
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.StandaloneMonth()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A2A84()
{
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.StandaloneWeekday.hash(into:)()
{
  __asm { BR              X10 }

uint64_t sub_1834A2B1C()
{
  return swift_bridgeObjectRelease();
}

void static Date.FormatStyle.Symbol.StandaloneWeekday.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_1834A2BB0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)sub_1834A2C14 + 4 * byte_18382E280[a2]))( 6513507LL,  a1,  99LL);
}

uint64_t sub_1834A2C14(uint64_t a1)
{
  if (a1 == 6513507 && v1 == 0xE300000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void Date.FormatStyle.Symbol.StandaloneWeekday.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A2D00()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.StandaloneWeekday()
{
  __asm { BR              X10 }

uint64_t sub_1834A2DA4()
{
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.StandaloneWeekday()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A2E3C()
{
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.VerbatimHour.hash(into:)()
{
  __asm { BR              X10 }

uint64_t sub_1834A2EDC()
{
  return swift_bridgeObjectRelease();
}

void static Date.FormatStyle.Symbol.VerbatimHour.== infix(_:_:)(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void Date.FormatStyle.Symbol.VerbatimHour.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A2F84()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.VerbatimHour()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A3038()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.EraOption.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.EraOption( uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE100000000000000LL;
  unint64_t v4 = 0xE400000000000000LL;
  uint64_t v5 = 1195853639LL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x4747474747LL;
    unint64_t v4 = 0xE500000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 71LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.YearOption.init(rawValue:)(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.YearOption( void *a1@<X8>)
{
  *a1 = v3;
  a1[1] = v4;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  char v3 = *(_BYTE *)(a2 + 8);
  Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(*(void *)a1, *(_BYTE *)(a1 + 8));
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v2, v3);
  if (v5 == v9 && v7 == v8) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption@<X0>( uint64_t a1@<X8>)
{
  uint64_t v2 = specialized Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption.init(rawValue:)();
  __int16 v4 = v3;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = HIBYTE(v4) & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    if (v3) {
      uint64_t result = 22873LL;
    }
    else {
      uint64_t result = 89LL;
    }
    if (v3) {
      unint64_t v5 = 0xE200000000000000LL;
    }
    else {
      unint64_t v5 = 0xE100000000000000LL;
    }
  }

  else
  {
    if (v3 >= 10) {
      uint64_t v3 = 10LL;
    }
    if (v3 <= 1) {
      uint64_t v6 = 1LL;
    }
    else {
      uint64_t v6 = v3;
    }
    uint64_t result = MEMORY[0x186E1B904](89LL, 0xE100000000000000LL, v6);
  }

  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(0LL, *(void *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  uint64_t v1 = *(void *)v0;
  if (*(_BYTE *)(v0 + 8) != 1)
  {
    if (v1 >= 10) {
      uint64_t v1 = 10LL;
    }
    if (v1 <= 1) {
      uint64_t v2 = 1LL;
    }
    else {
      uint64_t v2 = v1;
    }
    MEMORY[0x186E1B904](89LL, 0xE100000000000000LL, v2);
  }

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption( uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *(void *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption( uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(void *)a1, *(_BYTE *)(a1 + 8), *(void *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.CyclicYearOption.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption( uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE100000000000000LL;
  unint64_t v4 = 0xE400000000000000LL;
  uint64_t v5 = 1431655765LL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x5555555555LL;
    unint64_t v4 = 0xE500000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 85LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.QuarterOption.init(rawValue:);
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  return ((uint64_t (*)(void))((char *)sub_1834A3B08 + 4 * byte_18382E2AC[*v0]))();
}

void sub_1834A3B08(void *a1@<X8>)
{
  *a1 = 20817LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_1834A3B18(void *a1@<X8>)
{
  *a1 = 5329233LL;
  a1[1] = 0xE300000000000000LL;
}

void sub_1834A3B2C(void *a1@<X8>)
{
  *a1 = 1364283729LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_1834A3B40(void *a1@<X8>)
{
  *a1 = 0x5151515151LL;
  a1[1] = 0xE500000000000000LL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A3C40()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  __asm { BR              X10 }

uint64_t sub_1834A3CD8()
{
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A3D68()
{
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption.init(rawValue:);
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  return ((uint64_t (*)(void))((char *)sub_1834A3E34 + 4 * byte_18382E2C0[*v0]))();
}

void sub_1834A3E34(void *a1@<X8>)
{
  *a1 = 29041LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_1834A3E44(void *a1@<X8>)
{
  *a1 = 7434609LL;
  a1[1] = 0xE300000000000000LL;
}

void sub_1834A3E58(void *a1@<X8>)
{
  *a1 = 1903260017LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_1834A3E6C(void *a1@<X8>)
{
  *a1 = 0x7171717171LL;
  a1[1] = 0xE500000000000000LL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A3F6C()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  __asm { BR              X10 }

uint64_t sub_1834A4004()
{
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A4094()
{
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:);
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  return ((uint64_t (*)(void))((char *)sub_1834A4160 + 4 * byte_18382E2D4[*v0]))();
}

void sub_1834A4160(void *a1@<X8>)
{
  *a1 = 19789LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_1834A4170(void *a1@<X8>)
{
  *a1 = 5066061LL;
  a1[1] = 0xE300000000000000LL;
}

void sub_1834A4184(void *a1@<X8>)
{
  *a1 = 1296911693LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_1834A4198(void *a1@<X8>)
{
  *a1 = 0x4D4D4D4D4DLL;
  a1[1] = 0xE500000000000000LL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A4298()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  __asm { BR              X10 }

uint64_t sub_1834A4330()
{
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A43C0()
{
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption.init(rawValue:);
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  return ((uint64_t (*)(void))((char *)sub_1834A448C + 4 * byte_18382E2E8[*v0]))();
}

void sub_1834A448C(void *a1@<X8>)
{
  *a1 = 19532LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_1834A449C(void *a1@<X8>)
{
  *a1 = 5000268LL;
  a1[1] = 0xE300000000000000LL;
}

void sub_1834A44B0(void *a1@<X8>)
{
  *a1 = 1280068684LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_1834A44C4(void *a1@<X8>)
{
  *a1 = 0x4C4C4C4C4CLL;
  a1[1] = 0xE500000000000000LL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A45C4()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  __asm { BR              X10 }

uint64_t sub_1834A465C()
{
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A46EC()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.WeekOption.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption( uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE100000000000000LL;
  unint64_t v4 = 0xE200000000000000LL;
  uint64_t v5 = 30583LL;
  if (v2 != 1)
  {
    uint64_t v5 = 87LL;
    unint64_t v4 = 0xE100000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 119LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.DayOfYearOption.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption( uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE100000000000000LL;
  unint64_t v4 = 0xE200000000000000LL;
  uint64_t v5 = 17476LL;
  if (v2 != 1)
  {
    uint64_t v5 = 4473924LL;
    unint64_t v4 = 0xE300000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 68LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.DayOption.init(rawValue:)(*a1, a1[1]);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayOption@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    unint64_t v4 = 0xE200000000000000LL;
    uint64_t v5 = 25700LL;
    if (v3 != 1)
    {
      uint64_t v5 = 70LL;
      unint64_t v4 = 0xE100000000000000LL;
    }

    if (v3) {
      uint64_t result = v5;
    }
    else {
      uint64_t result = 100LL;
    }
    if (v3) {
      unint64_t v7 = v4;
    }
    else {
      unint64_t v7 = 0xE100000000000000LL;
    }
  }

  else
  {
    if (v3 >= 10) {
      uint64_t v3 = 10LL;
    }
    if (v3 <= 1) {
      uint64_t v8 = 1LL;
    }
    else {
      uint64_t v8 = v3;
    }
    uint64_t result = MEMORY[0x186E1B904](103LL, 0xE100000000000000LL, v8);
  }

  *a1 = result;
  a1[1] = v7;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(0LL, *(void *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  uint64_t v1 = *(void *)v0;
  if (*(_BYTE *)(v0 + 8) != 1)
  {
    if (v1 >= 10) {
      uint64_t v1 = 10LL;
    }
    if (v1 <= 1) {
      uint64_t v2 = 1LL;
    }
    else {
      uint64_t v2 = v1;
    }
    MEMORY[0x186E1B904](103LL, 0xE100000000000000LL, v2);
  }

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption( uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *(void *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption( uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(void *)a1, *(_BYTE *)(a1 + 8), *(void *)a2, *(_BYTE *)(a2 + 8));
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.WeekdayOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  return ((uint64_t (*)(void))((char *)sub_1834A4EDC + 4 * byte_18382E2FC[*v0]))();
}

void sub_1834A4EDC(void *a1@<X8>)
{
  *a1 = 1162167621LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_1834A4EF0(void *a1@<X8>)
{
  *a1 = 0x4545454545LL;
  a1[1] = 0xE500000000000000LL;
}

void sub_1834A4F08(void *a1@<X8>)
{
  *a1 = 0x454545454545LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_1834A4F20(void *a1@<X8>)
{
  *a1 = 101LL;
  a1[1] = 0xE100000000000000LL;
}

void sub_1834A4F30(void *a1@<X8>)
{
  *a1 = 25957LL;
  a1[1] = 0xE200000000000000LL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  __asm { BR              X10 }

uint64_t sub_1834A5024()
{
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption( uint64_t a1)
{
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption.init(rawValue:);
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  return ((uint64_t (*)(void))((char *)sub_1834A50F4 + 4 * byte_18382E308[*v0]))();
}

void sub_1834A50F4(void *a1@<X8>)
{
  *a1 = 6513507LL;
  a1[1] = 0xE300000000000000LL;
}

void sub_1834A5108(void *a1@<X8>)
{
  *a1 = 1667457891LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_1834A511C(void *a1@<X8>)
{
  *a1 = 0x6363636363LL;
  a1[1] = 0xE500000000000000LL;
}

void sub_1834A5134(void *a1@<X8>)
{
  *a1 = 0x636363636363LL;
  a1[1] = 0xE600000000000000LL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A5234()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  __asm { BR              X10 }

uint64_t sub_1834A52D4()
{
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_1834A536C()
{
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption( uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.HourOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( a1,  a2,  (void (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( a1,  a2,  a3,  (void (*)(void))Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( a1,  a2,  a3,  (void (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  return ((uint64_t (*)(void))((char *)sub_1834A56F8 + 4 * byte_18382E31C[*v0]))();
}

void sub_1834A56F8(void *a1@<X8>)
{
  *a1 = 26728LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_1834A5708(void *a1@<X8>)
{
  *a1 = 72LL;
  a1[1] = v1;
}

void sub_1834A5714(void *a1@<X8>)
{
  *a1 = 18504LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_1834A5724(void *a1@<X8>)
{
  *a1 = 75LL;
  a1[1] = v1;
}

void sub_1834A5730(void *a1@<X8>)
{
  *a1 = 19275LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_1834A5740(void *a1@<X8>)
{
  *a1 = 107LL;
  a1[1] = v1;
}

void sub_1834A574C(void *a1@<X8>)
{
  *a1 = 27499LL;
  a1[1] = 0xE200000000000000LL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption( uint64_t a1)
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption( uint64_t a1)
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption( char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption@<X0>( Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.MinuteOption.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys( v2,  a1,  a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption( uint64_t *a1@<X8>)
{
  uint64_t v2 = 109LL;
  if (*v1) {
    uint64_t v2 = 28013LL;
  }
  unint64_t v3 = 0xE100000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE200000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption( char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption@<X0>( Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.SecondOption.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys( v2,  a1,  a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption( uint64_t *a1@<X8>)
{
  uint64_t v2 = 115LL;
  if (*v1) {
    uint64_t v2 = 29555LL;
  }
  unint64_t v3 = 0xE100000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE200000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.SymbolType.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_1834A5C48()
{
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.init(rawValue:)( *(void *)a1,  *(void *)(a1 + 8));
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.rawValue.getter(*(void *)v1, *(_BYTE *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption( uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *(void *)v1, *(_BYTE *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption( uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(void *)a1, *(_BYTE *)(a1 + 8), *(void *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( a1,  a2,  (void (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( a1,  a2,  a3,  (void (*)(void))Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( a1,  a2,  a3,  (void (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.SymbolType.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.SymbolType.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType( uint64_t a1)
{
  specialized static Date.FormatStyle.Symbol.SymbolType.== infix(_:_:)(*(void *)a1, *(_BYTE *)(a1 + 8));
}

void Date.FormatStyle.Symbol.hash(into:)()
{
  __asm { BR              X10 }

uint64_t sub_1834A6708()
{
  return swift_bridgeObjectRelease();
}

Swift::Int Date.FormatStyle.Symbol.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol()
{
  return Hasher._finalize()();
}

void static Date.FormatStyle.Symbol.Year.twoDigits.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 1LL;
  *(_BYTE *)(a1 + 8) = 3;
}

uint64_t static Date.FormatStyle.Symbol.Year.extended(minimumLength:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = 2;
  return result;
}

void static Date.FormatStyle.Symbol.YearForWeekOfYear.defaultDigits.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 1;
}

void static Date.FormatStyle.Symbol.YearForWeekOfYear.twoDigits.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 1LL;
  *(_WORD *)(a1 + 8) = 1;
}

uint64_t static Date.FormatStyle.Symbol.YearForWeekOfYear.padded(_:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_WORD *)(a2 + 8) = 0;
  return result;
}

void static Date.FormatStyle.Symbol.CyclicYear.abbreviated.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Date.FormatStyle.Symbol.CyclicYear.wide.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static Date.FormatStyle.Symbol.CyclicYear.narrow.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static Date.FormatStyle.Symbol.Month.narrow.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.defaultDigits.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.twoDigits.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.abbreviated.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.wide.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.narrow.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static Date.FormatStyle.Symbol.Day.ordinalOfDayInMonth.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 2LL;
  *(_WORD *)(a1 + 8) = 1;
}

BOOL static Date.FormatStyle.Symbol.DayPeriod.Width.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Date.FormatStyle.Symbol.DayPeriod.Width.hash(into:)()
{
}

Swift::Int Date.FormatStyle.Symbol.DayPeriod.Width.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_BYTE *static Date.FormatStyle.Symbol.DayPeriod.standard(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_BYTE *static Date.FormatStyle.Symbol.DayPeriod.with12s(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result + 3;
  return result;
}

_BYTE *static Date.FormatStyle.Symbol.DayPeriod.conversational(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0x70806u >> (8 * *result);
  return result;
}

void static Date.FormatStyle.Symbol.Hour.AMPMStyle.wide.getter(void *a1@<X8>)
{
  *a1 = 3LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.FormatStyle.Symbol.Hour.AMPMStyle.encode(to:)(void *a1)
{
  return Date.FormatStyle.DateStyle.encode(to:)( a1,  &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
}

uint64_t Date.FormatStyle.Symbol.Hour.AMPMStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys,  a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.Symbol.Hour.AMPMStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle( void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle( a1,  a2,  a3,  &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
}

void *static Date.FormatStyle.Symbol.Hour.twoDigits(amPM:)@<X0>(void *result@<X0>, _BYTE *a2@<X8>)
{
  if (*result >= 4uLL)
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    *a2 = 0x3010507u >> (8 * *result);
  }

  return result;
}

void *static Date.FormatStyle.Symbol.Hour.conversationalDefaultDigits(amPM:)@<X0>( void *result@<X0>, _BYTE *a2@<X8>)
{
  if (*result >= 4uLL)
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    *a2 = 0xA080C06u >> (8 * *result);
  }

  return result;
}

void *static Date.FormatStyle.Symbol.Hour.conversationalTwoDigits(amPM:)@<X0>( void *result@<X0>, _BYTE *a2@<X8>)
{
  if (*result >= 4uLL)
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    *a2 = 0xB090D07u >> (8 * *result);
  }

  return result;
}

void static Date.FormatStyle.Symbol.Hour.defaultDigitsNoAMPM.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void static Date.FormatStyle.Symbol.Hour.twoDigitsNoAMPM.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

void static Date.FormatStyle.Symbol.VerbatimHour.HourCycle.zeroBased.getter(void *a1@<X8>)
{
  *a1 = 0LL;
}

void static Date.FormatStyle.Symbol.VerbatimHour.HourCycle.oneBased.getter(void *a1@<X8>)
{
  *a1 = 1LL;
}

void Date.FormatStyle.Symbol.VerbatimHour.HourCycle.hash(into:)()
{
}

BOOL static Date.FormatStyle.Symbol.VerbatimHour.HourCycle.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.FormatStyle.Symbol.VerbatimHour.HourCycle.encode(to:)(void *a1)
{
  return Date.FormatStyle.DateStyle.encode(to:)( a1,  &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
}

uint64_t Date.FormatStyle.Symbol.VerbatimHour.HourCycle.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys,  a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.Symbol.VerbatimHour.HourCycle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle( void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle( a1,  a2,  a3,  &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.FormatStyle.Symbol.VerbatimHour.Clock.encode(to:)(void *a1)
{
  return Date.FormatStyle.DateStyle.encode(to:)( a1,  &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
}

uint64_t Date.FormatStyle.Symbol.VerbatimHour.Clock.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys,  a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.VerbatimHour.Clock@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.Symbol.VerbatimHour.Clock.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.VerbatimHour.Clock( void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle( a1,  a2,  a3,  &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
}

void *static Date.FormatStyle.Symbol.VerbatimHour.defaultDigits(clock:hourCycle:)@<X0>( void *result@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  uint64_t v3 = *a2;
  if (*result == 1LL)
  {
    if (v3) {
      char v4 = 6;
    }
    else {
      char v4 = 2;
    }
    goto LABEL_7;
  }

  if (!*result)
  {
    char v4 = 4 * (v3 == 0);
LABEL_7:
    *a3 = v4;
    return result;
  }

  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *static Date.FormatStyle.Symbol.VerbatimHour.twoDigits(clock:hourCycle:)@<X0>( void *result@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  uint64_t v3 = *a2;
  if (*result == 1LL)
  {
    if (v3) {
      char v4 = 7;
    }
    else {
      char v4 = 3;
    }
LABEL_9:
    *a3 = v4;
    return result;
  }

  if (!*result)
  {
    if (v3) {
      char v4 = 1;
    }
    else {
      char v4 = 5;
    }
    goto LABEL_9;
  }

  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static Date.FormatStyle.Symbol.SecondFraction.fractional(_:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t static Date.FormatStyle.Symbol.SecondFraction.milliseconds(_:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

BOOL static Date.FormatStyle.Symbol.TimeZone.Width.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Date.FormatStyle.Symbol.TimeZone.Width.hash(into:)()
{
}

Swift::Int Date.FormatStyle.Symbol.TimeZone.Width.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_BYTE *static Date.FormatStyle.Symbol.TimeZone.iso8601(_:)@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  if (*result) {
    char v2 = 4;
  }
  else {
    char v2 = 2;
  }
  *a2 = v2;
  return result;
}

_BYTE *static Date.FormatStyle.Symbol.TimeZone.localizedGMT(_:)@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  if (*result) {
    char v2 = 3;
  }
  else {
    char v2 = 5;
  }
  *a2 = v2;
  return result;
}

_BYTE *static Date.FormatStyle.Symbol.TimeZone.identifier(_:)@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  if (*result) {
    char v2 = 9;
  }
  else {
    char v2 = 8;
  }
  *a2 = v2;
  return result;
}

void static Date.FormatStyle.Symbol.TimeZone.exemplarLocation.getter(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

void static Date.FormatStyle.Symbol.TimeZone.genericLocation.getter(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

void static Date.FormatStyle.Symbol.YearForWeekOfYear.omitted.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 256;
}

void static Date.FormatStyle.Symbol.CyclicYear.omitted.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static Date.FormatStyle.Symbol.Month.omitted.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static Date.FormatStyle.Symbol.DayPeriod.omitted.getter(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

void static Date.FormatStyle.Symbol.Hour.omitted.getter(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

void static Date.FormatStyle.Symbol.SecondFraction.omitted.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = -1;
}

void static Date.FormatStyle.Symbol.TimeZone.omitted.getter(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

void specialized static Date.FormatStyle.Symbol.SymbolType.== infix(_:_:)(uint64_t a1, char a2)
{
  __asm { BR              X11 }

uint64_t sub_1834A76B8@<X0>(char a1@<W8>)
{
  if (v2 >= 8u) {
    return 0LL;
  }
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1195853639LL;
    }
    else {
      uint64_t v3 = 0x4747474747LL;
    }
    if (a1 == 1) {
      unint64_t v4 = 0xE400000000000000LL;
    }
    else {
      unint64_t v4 = 0xE500000000000000LL;
    }
  }

  else
  {
    unint64_t v4 = 0xE100000000000000LL;
    uint64_t v3 = 71LL;
  }

  if (v1)
  {
    if (v1 == 1) {
      uint64_t v6 = 1195853639LL;
    }
    else {
      uint64_t v6 = 0x4747474747LL;
    }
    if (v1 == 1) {
      unint64_t v7 = 0xE400000000000000LL;
    }
    else {
      unint64_t v7 = 0xE500000000000000LL;
    }
  }

  else
  {
    unint64_t v7 = 0xE100000000000000LL;
    uint64_t v6 = 71LL;
  }

  if (v3 == v6 && v4 == v7)
  {
    swift_bridgeObjectRelease_n();
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v8 & 1;
  }

uint64_t specialized static Date.FormatStyle.Symbol.CyclicYear.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3) {
      return 1LL;
    }
  }

  else if (v3 != 3)
  {
    if (*a1)
    {
      if (v2 == 1)
      {
        unint64_t v4 = 0xE400000000000000LL;
        uint64_t v5 = 1431655765LL;
      }

      else
      {
        unint64_t v4 = 0xE500000000000000LL;
        uint64_t v5 = 0x5555555555LL;
      }
    }

    else
    {
      unint64_t v4 = 0xE100000000000000LL;
      uint64_t v5 = 85LL;
    }

    unint64_t v6 = 0xE400000000000000LL;
    uint64_t v7 = 1431655765LL;
    if (v3 != 1)
    {
      uint64_t v7 = 0x5555555555LL;
      unint64_t v6 = 0xE500000000000000LL;
    }

    if (*a2) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 85LL;
    }
    if (*a2) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = 0xE100000000000000LL;
    }
    if (v5 == v8 && v4 == v9)
    {
      swift_bridgeObjectRelease_n();
      return 1LL;
    }

    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0) {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t specialized static Date.FormatStyle.Symbol.Era.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3) {
      return 1LL;
    }
  }

  else if (v3 != 3)
  {
    if (*a1)
    {
      if (v2 == 1)
      {
        unint64_t v4 = 0xE400000000000000LL;
        uint64_t v5 = 1195853639LL;
      }

      else
      {
        unint64_t v4 = 0xE500000000000000LL;
        uint64_t v5 = 0x4747474747LL;
      }
    }

    else
    {
      unint64_t v4 = 0xE100000000000000LL;
      uint64_t v5 = 71LL;
    }

    unint64_t v6 = 0xE400000000000000LL;
    uint64_t v7 = 1195853639LL;
    if (v3 != 1)
    {
      uint64_t v7 = 0x4747474747LL;
      unint64_t v6 = 0xE500000000000000LL;
    }

    if (*a2) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 71LL;
    }
    if (*a2) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = 0xE100000000000000LL;
    }
    if (v5 == v8 && v4 == v9)
    {
      swift_bridgeObjectRelease_n();
      return 1LL;
    }

    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0) {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t specialized static Date.FormatStyle.Symbol.Hour.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 14) {
    return v3 == 14;
  }
  if (v3 == 14) {
    return 0LL;
  }
  uint64_t v5 = Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v2);
  uint64_t v7 = v6;
  if (v5 != Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v3) || v7 != v8)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v10 & 1) != 0;
  }

  swift_bridgeObjectRelease_n();
  return 1LL;
}

uint64_t specialized static Date.FormatStyle.Symbol.Week.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3) {
      return 1LL;
    }
  }

  else if (v3 != 3)
  {
    if (*a1)
    {
      if (v2 == 1)
      {
        unint64_t v4 = 0xE200000000000000LL;
        uint64_t v5 = 30583LL;
      }

      else
      {
        unint64_t v4 = 0xE100000000000000LL;
        uint64_t v5 = 87LL;
      }
    }

    else
    {
      unint64_t v4 = 0xE100000000000000LL;
      uint64_t v5 = 119LL;
    }

    unint64_t v6 = 0xE200000000000000LL;
    uint64_t v7 = 30583LL;
    if (v3 != 1)
    {
      uint64_t v7 = 87LL;
      unint64_t v6 = 0xE100000000000000LL;
    }

    if (*a2) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 119LL;
    }
    if (*a2) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = 0xE100000000000000LL;
    }
    if (v5 == v8 && v4 == v9)
    {
      swift_bridgeObjectRelease_n();
      return 1LL;
    }

    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0) {
      return 1LL;
    }
  }

  return 0LL;
}

BOOL specialized static Date.FormatStyle.Symbol.Year.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (v3 == 255)
  {
    if (v4 != 255) {
      return 0LL;
    }
  }

  else
  {
    if (v4 == 255) {
      return 0LL;
    }
    uint64_t v5 = *(void *)a2;
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(*(void *)a1, v3);
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v5, v4);
    if (v7 != v11 || v9 != v10)
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (v13 & 1) != 0;
    }

    swift_bridgeObjectRelease_n();
  }

  return 1LL;
}

uint64_t specialized static Date.FormatStyle.Symbol.Minute.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2) {
    return v3 == 2;
  }
  if (v3 == 2) {
    return 0LL;
  }
  if ((v2 & 1) != 0) {
    uint64_t v5 = 28013LL;
  }
  else {
    uint64_t v5 = 109LL;
  }
  if ((v2 & 1) != 0) {
    unint64_t v6 = 0xE200000000000000LL;
  }
  else {
    unint64_t v6 = 0xE100000000000000LL;
  }
  if ((v3 & 1) != 0) {
    uint64_t v7 = 28013LL;
  }
  else {
    uint64_t v7 = 109LL;
  }
  if ((v3 & 1) != 0) {
    unint64_t v8 = 0xE200000000000000LL;
  }
  else {
    unint64_t v8 = 0xE100000000000000LL;
  }
  if (v5 != v7 || v6 != v8)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v10 & 1) != 0;
  }

  swift_bridgeObjectRelease_n();
  return 1LL;
}

uint64_t specialized static Date.FormatStyle.Symbol.Second.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2) {
    return v3 == 2;
  }
  if (v3 == 2) {
    return 0LL;
  }
  if ((v2 & 1) != 0) {
    uint64_t v5 = 29555LL;
  }
  else {
    uint64_t v5 = 115LL;
  }
  if ((v2 & 1) != 0) {
    unint64_t v6 = 0xE200000000000000LL;
  }
  else {
    unint64_t v6 = 0xE100000000000000LL;
  }
  if ((v3 & 1) != 0) {
    uint64_t v7 = 29555LL;
  }
  else {
    uint64_t v7 = 115LL;
  }
  if ((v3 & 1) != 0) {
    unint64_t v8 = 0xE200000000000000LL;
  }
  else {
    unint64_t v8 = 0xE100000000000000LL;
  }
  if (v5 != v7 || v6 != v8)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v10 & 1) != 0;
  }

  swift_bridgeObjectRelease_n();
  return 1LL;
}

uint64_t specialized static Date.FormatStyle.Symbol.TimeZone.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 12) {
    return v3 == 12;
  }
  if (v3 == 12) {
    return 0LL;
  }
  uint64_t v5 = Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v2);
  uint64_t v7 = v6;
  if (v5 != Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v3) || v7 != v8)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v10 & 1) != 0;
  }

  swift_bridgeObjectRelease_n();
  return 1LL;
}

uint64_t specialized static Date.FormatStyle.Symbol.DayOfYear.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3) {
      return 1LL;
    }
  }

  else if (v3 != 3)
  {
    if (*a1)
    {
      if (v2 == 1)
      {
        unint64_t v4 = 0xE200000000000000LL;
        uint64_t v5 = 17476LL;
      }

      else
      {
        unint64_t v4 = 0xE300000000000000LL;
        uint64_t v5 = 4473924LL;
      }
    }

    else
    {
      unint64_t v4 = 0xE100000000000000LL;
      uint64_t v5 = 68LL;
    }

    unint64_t v6 = 0xE200000000000000LL;
    uint64_t v7 = 17476LL;
    if (v3 != 1)
    {
      uint64_t v7 = 4473924LL;
      unint64_t v6 = 0xE300000000000000LL;
    }

    if (*a2) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 68LL;
    }
    if (*a2) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = 0xE100000000000000LL;
    }
    if (v5 == v8 && v4 == v9)
    {
      swift_bridgeObjectRelease_n();
      return 1LL;
    }

    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0) {
      return 1LL;
    }
  }

  return 0LL;
}

void specialized static Date.FormatStyle.Symbol.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_1834A8BBC(unsigned __int8 a1)
{
  if (v2 < 8)
  {
    int v3 = a1;
    if (a1)
    {
      if (a1 == 1) {
        uint64_t v4 = 1195853639LL;
      }
      else {
        uint64_t v4 = 0x4747474747LL;
      }
      if (v3 == 1) {
        unint64_t v5 = 0xE400000000000000LL;
      }
      else {
        unint64_t v5 = 0xE500000000000000LL;
      }
    }

    else
    {
      unint64_t v5 = 0xE100000000000000LL;
      uint64_t v4 = 71LL;
    }

    if (v1)
    {
      if (v1 == 1) {
        uint64_t v6 = 1195853639LL;
      }
      else {
        uint64_t v6 = 0x4747474747LL;
      }
      if (v1 == 1) {
        unint64_t v7 = 0xE400000000000000LL;
      }
      else {
        unint64_t v7 = 0xE500000000000000LL;
      }
    }

    else
    {
      unint64_t v7 = 0xE100000000000000LL;
      uint64_t v6 = 71LL;
    }

    if (v4 == v6 && v5 == v7)
    {
      swift_bridgeObjectRelease_n();
      return 1LL;
    }

    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0) {
      return 1LL;
    }
  }

  return 0LL;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys,  &unk_189C94838);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys,  &unk_189C94838);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys,  &unk_189C94838);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys,  &unk_189C94838);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys,  &unk_189C947A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys,  &unk_189C947A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys,  &unk_189C947A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys,  &unk_189C947A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys,  &unk_189C94718);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys,  &unk_189C94718);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys,  &unk_189C94718);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys,  &unk_189C94718);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Era and conformance Date.FormatStyle.Symbol.Era()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Era and conformance Date.FormatStyle.Symbol.Era;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Era and conformance Date.FormatStyle.Symbol.Era)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Era,  &type metadata for Date.FormatStyle.Symbol.Era);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Era and conformance Date.FormatStyle.Symbol.Era);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Year and conformance Date.FormatStyle.Symbol.Year()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Year and conformance Date.FormatStyle.Symbol.Year;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Year and conformance Date.FormatStyle.Symbol.Year)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Year,  &type metadata for Date.FormatStyle.Symbol.Year);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Year and conformance Date.FormatStyle.Symbol.Year);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.YearForWeekOfYear and conformance Date.FormatStyle.Symbol.YearForWeekOfYear()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.YearForWeekOfYear and conformance Date.FormatStyle.Symbol.YearForWeekOfYear;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.YearForWeekOfYear and conformance Date.FormatStyle.Symbol.YearForWeekOfYear)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.YearForWeekOfYear,  &type metadata for Date.FormatStyle.Symbol.YearForWeekOfYear);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.YearForWeekOfYear and conformance Date.FormatStyle.Symbol.YearForWeekOfYear);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.CyclicYear and conformance Date.FormatStyle.Symbol.CyclicYear()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.CyclicYear and conformance Date.FormatStyle.Symbol.CyclicYear;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.CyclicYear and conformance Date.FormatStyle.Symbol.CyclicYear)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.CyclicYear,  &type metadata for Date.FormatStyle.Symbol.CyclicYear);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.CyclicYear and conformance Date.FormatStyle.Symbol.CyclicYear);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Quarter and conformance Date.FormatStyle.Symbol.Quarter()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Quarter and conformance Date.FormatStyle.Symbol.Quarter;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Quarter and conformance Date.FormatStyle.Symbol.Quarter)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Quarter,  &type metadata for Date.FormatStyle.Symbol.Quarter);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Quarter and conformance Date.FormatStyle.Symbol.Quarter);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Month and conformance Date.FormatStyle.Symbol.Month()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Month and conformance Date.FormatStyle.Symbol.Month;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Month and conformance Date.FormatStyle.Symbol.Month)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Month,  &type metadata for Date.FormatStyle.Symbol.Month);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Month and conformance Date.FormatStyle.Symbol.Month);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Week and conformance Date.FormatStyle.Symbol.Week()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Week and conformance Date.FormatStyle.Symbol.Week;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Week and conformance Date.FormatStyle.Symbol.Week)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Week,  &type metadata for Date.FormatStyle.Symbol.Week);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Week and conformance Date.FormatStyle.Symbol.Week);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Day and conformance Date.FormatStyle.Symbol.Day()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Day and conformance Date.FormatStyle.Symbol.Day;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Day and conformance Date.FormatStyle.Symbol.Day)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Day,  &type metadata for Date.FormatStyle.Symbol.Day);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Day and conformance Date.FormatStyle.Symbol.Day);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.DayOfYear and conformance Date.FormatStyle.Symbol.DayOfYear()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayOfYear and conformance Date.FormatStyle.Symbol.DayOfYear;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayOfYear and conformance Date.FormatStyle.Symbol.DayOfYear)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.DayOfYear,  &type metadata for Date.FormatStyle.Symbol.DayOfYear);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayOfYear and conformance Date.FormatStyle.Symbol.DayOfYear);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Weekday and conformance Date.FormatStyle.Symbol.Weekday()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Weekday and conformance Date.FormatStyle.Symbol.Weekday;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Weekday and conformance Date.FormatStyle.Symbol.Weekday)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Weekday,  &type metadata for Date.FormatStyle.Symbol.Weekday);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Weekday and conformance Date.FormatStyle.Symbol.Weekday);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.DayPeriod and conformance Date.FormatStyle.Symbol.DayPeriod()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod and conformance Date.FormatStyle.Symbol.DayPeriod;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod and conformance Date.FormatStyle.Symbol.DayPeriod)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.DayPeriod,  &type metadata for Date.FormatStyle.Symbol.DayPeriod);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod and conformance Date.FormatStyle.Symbol.DayPeriod);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour and conformance Date.FormatStyle.Symbol.Hour()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour and conformance Date.FormatStyle.Symbol.Hour;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour and conformance Date.FormatStyle.Symbol.Hour)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Hour,  &type metadata for Date.FormatStyle.Symbol.Hour);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour and conformance Date.FormatStyle.Symbol.Hour);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Minute and conformance Date.FormatStyle.Symbol.Minute()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Minute and conformance Date.FormatStyle.Symbol.Minute;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Minute and conformance Date.FormatStyle.Symbol.Minute)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Minute,  &type metadata for Date.FormatStyle.Symbol.Minute);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Minute and conformance Date.FormatStyle.Symbol.Minute);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Second and conformance Date.FormatStyle.Symbol.Second()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Second and conformance Date.FormatStyle.Symbol.Second;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Second and conformance Date.FormatStyle.Symbol.Second)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Second,  &type metadata for Date.FormatStyle.Symbol.Second);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Second and conformance Date.FormatStyle.Symbol.Second);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SecondFraction and conformance Date.FormatStyle.Symbol.SecondFraction()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SecondFraction and conformance Date.FormatStyle.Symbol.SecondFraction;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SecondFraction and conformance Date.FormatStyle.Symbol.SecondFraction)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SecondFraction,  &type metadata for Date.FormatStyle.Symbol.SecondFraction);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SecondFraction and conformance Date.FormatStyle.Symbol.SecondFraction);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.TimeZone and conformance Date.FormatStyle.Symbol.TimeZone()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone and conformance Date.FormatStyle.Symbol.TimeZone;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone and conformance Date.FormatStyle.Symbol.TimeZone)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.TimeZone,  &type metadata for Date.FormatStyle.Symbol.TimeZone);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone and conformance Date.FormatStyle.Symbol.TimeZone);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.StandaloneQuarter and conformance Date.FormatStyle.Symbol.StandaloneQuarter()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneQuarter and conformance Date.FormatStyle.Symbol.StandaloneQuarter;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneQuarter and conformance Date.FormatStyle.Symbol.StandaloneQuarter)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.StandaloneQuarter,  &type metadata for Date.FormatStyle.Symbol.StandaloneQuarter);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneQuarter and conformance Date.FormatStyle.Symbol.StandaloneQuarter);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.StandaloneMonth and conformance Date.FormatStyle.Symbol.StandaloneMonth()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneMonth and conformance Date.FormatStyle.Symbol.StandaloneMonth;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneMonth and conformance Date.FormatStyle.Symbol.StandaloneMonth)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.StandaloneMonth,  &type metadata for Date.FormatStyle.Symbol.StandaloneMonth);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneMonth and conformance Date.FormatStyle.Symbol.StandaloneMonth);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.StandaloneWeekday and conformance Date.FormatStyle.Symbol.StandaloneWeekday()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneWeekday and conformance Date.FormatStyle.Symbol.StandaloneWeekday;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneWeekday and conformance Date.FormatStyle.Symbol.StandaloneWeekday)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.StandaloneWeekday,  &type metadata for Date.FormatStyle.Symbol.StandaloneWeekday);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneWeekday and conformance Date.FormatStyle.Symbol.StandaloneWeekday);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour and conformance Date.FormatStyle.Symbol.VerbatimHour()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour and conformance Date.FormatStyle.Symbol.VerbatimHour;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour and conformance Date.FormatStyle.Symbol.VerbatimHour)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour,  &type metadata for Date.FormatStyle.Symbol.VerbatimHour);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour and conformance Date.FormatStyle.Symbol.VerbatimHour);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol and conformance Date.FormatStyle.Symbol()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol and conformance Date.FormatStyle.Symbol;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol and conformance Date.FormatStyle.Symbol)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol,  &type metadata for Date.FormatStyle.Symbol);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol and conformance Date.FormatStyle.Symbol);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.DayPeriod.Width and conformance Date.FormatStyle.Symbol.DayPeriod.Width()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod.Width and conformance Date.FormatStyle.Symbol.DayPeriod.Width;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod.Width and conformance Date.FormatStyle.Symbol.DayPeriod.Width)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.DayPeriod.Width,  &type metadata for Date.FormatStyle.Symbol.DayPeriod.Width);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod.Width and conformance Date.FormatStyle.Symbol.DayPeriod.Width);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.Hour.AMPMStyle,  &type metadata for Date.FormatStyle.Symbol.Hour.AMPMStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle,  &type metadata for Date.FormatStyle.Symbol.VerbatimHour.HourCycle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.VerbatimHour.Clock,  &type metadata for Date.FormatStyle.Symbol.VerbatimHour.Clock);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.TimeZone.Width and conformance Date.FormatStyle.Symbol.TimeZone.Width()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone.Width and conformance Date.FormatStyle.Symbol.TimeZone.Width;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone.Width and conformance Date.FormatStyle.Symbol.TimeZone.Width)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.TimeZone.Width,  &type metadata for Date.FormatStyle.Symbol.TimeZone.Width);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone.Width and conformance Date.FormatStyle.Symbol.TimeZone.Width);
  }

  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol()
{
  return &type metadata for Date.FormatStyle.Symbol;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Era()
{
  return &type metadata for Date.FormatStyle.Symbol.Era;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Year(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Year( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = ~(_BYTE)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Year()
{
  return &type metadata for Date.FormatStyle.Symbol.Year;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.YearForWeekOfYear(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.YearForWeekOfYear( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.YearForWeekOfYear()
{
  return &type metadata for Date.FormatStyle.Symbol.YearForWeekOfYear;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.CyclicYear()
{
  return &type metadata for Date.FormatStyle.Symbol.CyclicYear;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Quarter()
{
  return &type metadata for Date.FormatStyle.Symbol.Quarter;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Quarter(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Month()
{
  return &type metadata for Date.FormatStyle.Symbol.Month;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Week()
{
  return &type metadata for Date.FormatStyle.Symbol.Week;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Day()
{
  return &type metadata for Date.FormatStyle.Symbol.Day;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Era(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Era( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1834AA46C + 4 * byte_18382E563[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1834AA4A0 + 4 * byte_18382E55E[v4]))();
}

uint64_t sub_1834AA4A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AA4A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834AA4B0LL);
  }
  return result;
}

uint64_t sub_1834AA4BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834AA4C4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1834AA4C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AA4D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.DayOfYear()
{
  return &type metadata for Date.FormatStyle.Symbol.DayOfYear;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Weekday(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Weekday( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1834AA5D8 + 4 * byte_18382E56D[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1834AA60C + 4 * byte_18382E568[v4]))();
}

uint64_t sub_1834AA60C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AA614(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834AA61CLL);
  }
  return result;
}

uint64_t sub_1834AA628(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834AA630LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1834AA634(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AA63C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Weekday()
{
  return &type metadata for Date.FormatStyle.Symbol.Weekday;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.DayPeriod(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.DayPeriod( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_1834AA744 + 4 * byte_18382E577[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1834AA778 + 4 * byte_18382E572[v4]))();
}

uint64_t sub_1834AA778(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AA780(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834AA788LL);
  }
  return result;
}

uint64_t sub_1834AA794(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834AA79CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 9;
  return result;
}

uint64_t sub_1834AA7A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AA7A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.DayPeriod()
{
  return &type metadata for Date.FormatStyle.Symbol.DayPeriod;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Hour(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Hour( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF1) {
    return ((uint64_t (*)(void))((char *)&loc_1834AA8B0 + 4 * byte_18382E581[v4]))();
  }
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1834AA8E4 + 4 * byte_18382E57C[v4]))();
}

uint64_t sub_1834AA8E4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AA8EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834AA8F4LL);
  }
  return result;
}

uint64_t sub_1834AA900(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834AA908LL);
  }
  *(_BYTE *)unint64_t result = a2 + 14;
  return result;
}

uint64_t sub_1834AA90C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AA914(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Hour()
{
  return &type metadata for Date.FormatStyle.Symbol.Hour;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Minute()
{
  return &type metadata for Date.FormatStyle.Symbol.Minute;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Minute(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Second()
{
  return &type metadata for Date.FormatStyle.Symbol.Second;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.SecondFraction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SecondFraction( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = ~(_BYTE)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SecondFraction()
{
  return &type metadata for Date.FormatStyle.Symbol.SecondFraction;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.TimeZone(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.TimeZone( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF3) {
    return ((uint64_t (*)(void))((char *)&loc_1834AAB84 + 4 * byte_18382E58B[v4]))();
  }
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1834AABB8 + 4 * byte_18382E586[v4]))();
}

uint64_t sub_1834AABB8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AABC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834AABC8LL);
  }
  return result;
}

uint64_t sub_1834AABD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834AABDCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 12;
  return result;
}

uint64_t sub_1834AABE0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AABE8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.TimeZone()
{
  return &type metadata for Date.FormatStyle.Symbol.TimeZone;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.StandaloneQuarter()
{
  return &type metadata for Date.FormatStyle.Symbol.StandaloneQuarter;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.StandaloneMonth()
{
  return &type metadata for Date.FormatStyle.Symbol.StandaloneMonth;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.StandaloneWeekday()
{
  return &type metadata for Date.FormatStyle.Symbol.StandaloneWeekday;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour()
{
  return &type metadata for Date.FormatStyle.Symbol.VerbatimHour;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.DayPeriod.Width()
{
  return &type metadata for Date.FormatStyle.Symbol.DayPeriod.Width;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle()
{
  return &type metadata for Date.FormatStyle.Symbol.Hour.AMPMStyle;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle()
{
  return &type metadata for Date.FormatStyle.Symbol.VerbatimHour.HourCycle;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.Clock()
{
  return &type metadata for Date.FormatStyle.Symbol.VerbatimHour.Clock;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.TimeZone.Width()
{
  return &type metadata for Date.FormatStyle.Symbol.TimeZone.Width;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.VerbatimHour( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1834AACEC + 4 * byte_18382E595[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1834AAD20 + 4 * byte_18382E590[v4]))();
}

uint64_t sub_1834AAD20(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AAD28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834AAD30LL);
  }
  return result;
}

uint64_t sub_1834AAD3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834AAD44LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_1834AAD48(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AAD50(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_1834AAE78 + 4 * byte_18382E59F[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1834AAEAC + 4 * byte_18382E59A[v4]))();
}

uint64_t sub_1834AAEAC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AAEB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834AAEBCLL);
  }
  return result;
}

uint64_t sub_1834AAEC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834AAED0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 11;
  return result;
}

uint64_t sub_1834AAED4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AAEDC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.TimeZone.Width( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1834AAF64 + 4 * byte_18382E5A9[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1834AAF98 + 4 * byte_18382E5A4[v4]))();
}

uint64_t sub_1834AAF98(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AAFA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834AAFA8LL);
  }
  return result;
}

uint64_t sub_1834AAFB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834AAFBCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1834AAFC0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AAFC8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.HourOption( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_1834AB030 + 4 * byte_18382E5B3[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1834AB064 + 4 * byte_18382E5AE[v4]))();
}

uint64_t sub_1834AB064(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AB06C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834AB074LL);
  }
  return result;
}

uint64_t sub_1834AB080(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834AB088LL);
  }
  *(_BYTE *)unint64_t result = a2 + 13;
  return result;
}

uint64_t sub_1834AB08C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AB094(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.HourOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_1834AB0FC + 4 * byte_18382E5BD[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1834AB130 + 4 * byte_18382E5B8[v4]))();
}

uint64_t sub_1834AB130(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AB138(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834AB140LL);
  }
  return result;
}

uint64_t sub_1834AB14C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834AB154LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_1834AB158(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AB160(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Quarter( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1834AB1C8 + 4 * byte_18382E5C7[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1834AB1FC + 4 * byte_18382E5C2[v4]))();
}

uint64_t sub_1834AB1FC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AB204(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834AB20CLL);
  }
  return result;
}

uint64_t sub_1834AB218(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834AB220LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1834AB224(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AB22C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.StandaloneQuarter( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1834AB2D4 + 4 * byte_18382E5D1[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1834AB308 + 4 * byte_18382E5CC[v4]))();
}

uint64_t sub_1834AB308(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AB310(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834AB318LL);
  }
  return result;
}

uint64_t sub_1834AB324(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834AB32CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1834AB330(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AB338(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.CyclicYearOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.YearOption( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.YearOption( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for Date.FormatStyle.Symbol.SymbolType.YearOption(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for Date.FormatStyle.Symbol.SymbolType.YearOption( uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Minute( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1834AB48C + 4 * byte_18382E5DB[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1834AB4C0 + 4 * byte_18382E5D6[v4]))();
}

uint64_t sub_1834AB4C0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AB4C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834AB4D0LL);
  }
  return result;
}

uint64_t sub_1834AB4DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834AB4E4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1834AB4E8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834AB4F0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x2E && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 46);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 8) >> 3) & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a1 + 8) >> 2) & 1))) ^ 0x3F;
  if (v3 >= 0x2D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x2D)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 46;
    if (a3 >= 0x2E) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0x2E) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(_BYTE *)(result + 8) = 4 * (((-a2 & 0x20) != 0) - 2 * a2);
    }
  }

  return result;
}

uint64_t getEnumTag for Date.FormatStyle.Symbol.SymbolType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8) >> 3;
}

uint64_t destructiveProjectEnumData for Date.FormatStyle.Symbol.SymbolType(uint64_t result)
{
  *(_BYTE *)(result + 8) &= 7u;
  return result;
}

uint64_t destructiveInjectEnumTag for Date.FormatStyle.Symbol.SymbolType(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = *(_BYTE *)(result + 8) & 3 | (8 * a2);
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType;
}

void *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys()
{
  return &unk_189C94718;
}

void *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys()
{
  return &unk_189C947A8;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1834AB658 + 4 * byte_18382E5E0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1834AB678 + 4 * byte_18382E5E5[v4]))();
  }
}

_BYTE *sub_1834AB658(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1834AB678(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1834AB680(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1834AB688(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1834AB690(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1834AB698(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys()
{
  return &unk_189C94838;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType and conformance Date.FormatStyle.Symbol.SymbolType()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType and conformance Date.FormatStyle.Symbol.SymbolType;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType and conformance Date.FormatStyle.Symbol.SymbolType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType,  &type metadata for Date.FormatStyle.Symbol.SymbolType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType and conformance Date.FormatStyle.Symbol.SymbolType);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.CyclicYearOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.CyclicYearOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.CyclicYearOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.CyclicYearOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption,  &type metadata for Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption);
  }

  return result;
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String_optional v7 = String.Iterator.next()();
  uint64_t countAndFlagsBits = v7.value._countAndFlagsBits;
  if (v7.value._object)
  {
    unint64_t object = v7.value._object;
    do
    {
      if (countAndFlagsBits == a3 && object == a4)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0)
        {
          uint64_t v11 = 0LL;
          goto LABEL_10;
        }
      }

      Swift::String_optional v10 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v10.value._countAndFlagsBits;
      unint64_t object = v10.value._object;
    }

    while (v10.value._object);
  }

  uint64_t v11 = 1LL;
LABEL_10:
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption.init(rawValue:)()
{
  Swift::String_optional v1 = String.Iterator.next()();
  uint64_t countAndFlagsBits = v1.value._countAndFlagsBits;
  if (v1.value._object)
  {
    unint64_t object = v1.value._object;
    do
    {
      if (countAndFlagsBits == 89 && object == (void *)0xE100000000000000LL)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          return 0LL;
        }
      }

      Swift::String_optional v4 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
      unint64_t object = v4.value._object;
    }

    while (v4.value._object);
  }

  swift_bridgeObjectRelease();
  if (String.count.getter() == 1) {
    return 0LL;
  }
  if (String.count.getter() == 2) {
    return 1LL;
  }
  return String.count.getter();
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.init(rawValue:)( Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC) {
    return 12LL;
  }
  else {
    return v3;
  }
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.HourOption.init(rawValue:)( Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.HourOption.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xE) {
    return 14LL;
  }
  else {
    return v3;
  }
}

uint64_t specialized Date.FormatStyle.Symbol.SymbolType.YearOption.init(rawValue:)( uint64_t a1, unint64_t a2)
{
  uint64_t v4 = specialized Collection.first.getter(a1, a2);
  if (!v5) {
    goto LABEL_27;
  }
  uint64_t v6 = v4;
  Swift::String_optional v7 = v5;
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v10 = v6 == 114 && v7 == (void *)0xE100000000000000LL;
  if ((v8 & 1) == 0
    && !v10
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && ((v6 != 117 || v7 != (void *)0xE100000000000000LL) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
     || (specialized Sequence.allSatisfy(_:)(a1, a2, v6, v7) & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_27:
    uint64_t v11 = 0LL;
    goto LABEL_28;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (!v10) {
      _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.WeekdayOption.init(rawValue:)( Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.WeekdayOption.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.init(rawValue:)( Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9LL;
  }
  else {
    return v3;
  }
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption.init(rawValue:)( Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8LL;
  }
  else {
    return v3;
  }
}

uint64_t specialized Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.init(rawValue:)( uint64_t a1, unint64_t a2)
{
  uint64_t v4 = specialized Collection.first.getter(a1, a2);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v6 = v4;
  Swift::String_optional v7 = v5;
  if ((specialized Sequence.allSatisfy(_:)(a1, a2, v4, v5) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  if ((v6 != 83 || v7 != (void *)0xE100000000000000LL) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v6 == 65 && v7 == (void *)0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      uint64_t v8 = String.count.getter();
      goto LABEL_9;
    }

    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0) {
      goto LABEL_14;
    }
LABEL_8:
    uint64_t v8 = 0LL;
    goto LABEL_9;
  }

  swift_bridgeObjectRelease();
  uint64_t v8 = String.count.getter();
LABEL_9:
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)( Swift::String string, Swift::OpaquePointer cases)
{
  unint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._unint64_t object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 5) {
    return 5LL;
  }
  else {
    return v5;
  }
}

uint64_t specialized Date.FormatStyle.Symbol.SymbolType.DayOption.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 100 && a2 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 25700 && a2 == 0xE200000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 70 && a2 == 0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    swift_bridgeObjectRetain();
    Swift::String_optional v7 = String.Iterator.next()();
    uint64_t countAndFlagsBits = v7.value._countAndFlagsBits;
    if (v7.value._object)
    {
      unint64_t object = v7.value._object;
      do
      {
        if (countAndFlagsBits == 103 && object == (void *)0xE100000000000000LL)
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v9 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 0LL;
          }
        }

        Swift::String_optional v10 = String.Iterator.next()();
        uint64_t countAndFlagsBits = v10.value._countAndFlagsBits;
        unint64_t object = v10.value._object;
      }

      while (v10.value._object);
    }

    swift_bridgeObjectRelease();
    uint64_t v4 = String.count.getter();
    swift_bridgeObjectRelease();
  }

  return v4;
}

uint64_t NSAttributedString.init<A>(_:including:)( uint64_t *a1, uint64_t a2, Swift::UInt a3, unint64_t a4)
{
  return NSAttributedString.init<A>(_:including:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  id v7;
  uint64_t v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  int v38;
  char v39;
  char v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  _OWORD *v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[2];
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76[48];
  char v77[48];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD v87[3];
  __int128 v88[3];
  _BYTE v89[56];
  uint64_t v90;
  uint64_t v4 = *a1;
  uint64_t v54 = static AttributeScope.scopeDescription.getter(a3, a4);
  swift_bridgeObjectRelease();
  unint64_t v5 = *(_OWORD *)(v4 + 32);
  v87[0] = *(_OWORD *)(v4 + 16);
  v87[1] = v5;
  uint64_t v6 = *(_OWORD *)(v4 + 48);
  v88[1] = v5;
  _OWORD v88[2] = v6;
  v87[2] = v6;
  v88[0] = v87[0];
  outlined init with take of any PredicateExpression<Self.Output == B1>(v88, (uint64_t)v89);
  outlined retain of Locale((uint64_t)v89);
  MEMORY[0x186E1B6D0](v87);
  Swift::String_optional v7 = objc_allocWithZone((Class)&OBJC_CLASS___NSMutableAttributedString);
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v53 = objc_msgSend(v7, sel_initWithString_, v8);
  swift_unknownObjectRelease();
  char v9 = *(_OWORD *)(v4 + 32);
  uint64_t v84 = *(_OWORD *)(v4 + 16);
  Swift::Int v85 = v9;
  uint64_t v86 = *(_OWORD *)(v4 + 48);
  unint64_t result = BigString.startIndex.getter();
  char v12 = v11;
  char v13 = *(void *)(v4 + 64);
  uint64_t v55 = *(void *)(v4 + 72);
  unint64_t v51 = (_OWORD *)v4;
  uint64_t v59 = *(void *)(v4 + 88);
  int64_t v60 = *(void *)(v4 + 80);
  if (v13)
  {
    unint64_t v14 = *(unsigned __int8 *)(v13 + 18);
    unint64_t result = swift_unknownObjectRetain();
  }

  else
  {
    unint64_t v14 = 0LL;
  }

  unint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  unint64_t v17 = 0LL;
  int64_t v57 = v51 + 1;
  uint64_t v67 = (void *)v13;
  unint64_t v68 = v55;
  unint64_t v69 = v60;
  unint64_t v70 = v59;
  unint64_t v71 = v59;
  unint64_t v72 = v14;
  uint64_t v52 = v13 + 24;
  uint64_t v74 = 0LL;
  uint64_t v75 = 0LL;
  unint64_t v73 = 0LL;
  uint64_t v56 = v13;
  while (1)
  {
    if (v13)
    {
      if (v17 == v60)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_unknownObjectRelease();
LABEL_42:
        uint64_t v50 = objc_msgSend( objc_allocWithZone((Class)swift_getObjCClassFromMetadata()),  sel_initWithAttributedString_,  v53);

        return (uint64_t)v50;
      }
    }

    else if (!v17)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_42;
    }

    if (v71 != v59) {
      break;
    }
    uint64_t v90 = v12;
    uint64_t v63 = v15;
    unint64_t v20 = v72;
    unint64_t v21 = v73;
    if (v73)
    {
      unint64_t v22 = (void *)(v73 + 24 * ((v72 >> ((4 * *(_BYTE *)(v73 + 18) + 8) & 0x3C)) & 0xF));
      char v23 = v22[3];
      uint64_t v24 = v22[4];
      uint64_t v25 = v22[5];
      unint64_t v19 = __OFADD__(v16, 1LL);
      __int16 v26 = v16 + 1;
      uint64_t v27 = v19;
      swift_bridgeObjectRetain();
      unint64_t result = swift_bridgeObjectRetain();
      if ((v27 & 1) != 0) {
        goto LABEL_45;
      }
      uint64_t v28 = v25;
      __int16 v29 = v17;
      uint64_t v62 = v26;
      uint64_t v74 = v26;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v65 = v28;
    }

    else
    {
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v20, v13);
      uint64_t v24 = v30;
      uint64_t v32 = v31;
      unint64_t result = swift_unknownObjectRelease();
      unint64_t v19 = __OFADD__(v16, 1LL);
      uint64_t v33 = v16 + 1;
      if (v19) {
        goto LABEL_45;
      }
      uint64_t v65 = v32;
      __int16 v29 = v17;
      uint64_t v62 = v33;
      uint64_t v74 = v33;
      swift_unknownObjectRetain();
      char v23 = specialized Rope._Node.subscript.getter(v20, v13);
    }

    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    unint64_t v19 = __OFADD__(v29, v23);
    uint64_t v34 = v29 + v23;
    if (v19) {
      goto LABEL_46;
    }
    uint64_t v75 = v34;
    if (!v13) {
      goto LABEL_48;
    }
    uint64_t v35 = ((-15LL << ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v13 + 18) | ((unint64_t)*(unsigned __int16 *)(v13 + 16) << ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C));
    unint64_t result = swift_unknownObjectRetain();
    if (v20 >= v35) {
      goto LABEL_48;
    }
    uint64_t v61 = v34;
    if (v21)
    {
      uint64_t v36 = (4 * *(_BYTE *)(v21 + 18) + 8) & 0x3C;
      unint64_t v37 = ((v20 >> v36) & 0xF) + 1;
      if (v37 < *(unsigned __int16 *)(v21 + 16))
      {
        unint64_t v72 = (v37 << v36) | ((-15LL << v36) - 1) & v20;
LABEL_28:
        swift_unknownObjectRelease_n();
        goto LABEL_34;
      }
    }

    uint64_t v38 = *(unsigned __int8 *)(v13 + 18);
    __int16 v39 = (4 * v38 + 8) & 0x3C;
    v66[0] = (v20 >> v39) & 0xF;
    if (v38)
    {
      swift_unknownObjectRetain();
      char v40 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v52, v66, (uint64_t)&v71, v13, v38);
      swift_unknownObjectRelease();
      if ((v40 & 1) != 0) {
        goto LABEL_28;
      }
      uint64_t v42 = *(unsigned __int8 *)(v13 + 18);
    }

    else
    {
      uint64_t v41 = ((v20 >> v39) & 0xF) + 1;
      if (v41 < *(unsigned __int16 *)(v13 + 16))
      {
        unint64_t v72 = (v41 << v39) | ((-15LL << v39) - 1) & v20;
        swift_unknownObjectRelease_n();
        unint64_t v73 = v13;
        goto LABEL_34;
      }

      uint64_t v42 = 0;
    }

    unint64_t v43 = *(unsigned __int16 *)(v13 + 16);
    uint64_t v44 = *(_BYTE *)(v13 + 18);
    swift_unknownObjectRelease_n();
    unint64_t v71 = v59;
    unint64_t v72 = ((-15LL << ((4 * v44 + 8) & 0x3C)) - 1) & v42 | (unint64_t)(v43 << ((4 * v44 + 8) & 0x3C));
    unint64_t v73 = 0LL;
LABEL_34:
    uint64_t v45 = v51[2];
    char v81 = *v57;
    unint64_t v82 = v45;
    BOOL v83 = v51[3];
    BigString.utf8.getter();
    BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v64 = v46;
    outlined release of Locale((uint64_t)v76);
    uint64_t v47 = v51[2];
    uint64_t v78 = *v57;
    uint64_t v79 = v47;
    unint64_t v80 = v51[3];
    BigString.utf16.getter();
    char v12 = v64;
    uint64_t v48 = BigString.UTF16View.distance(from:to:)();
    outlined release of Locale((uint64_t)v77);
    if (!*(void *)(v24 + 16))
    {
      swift_bridgeObjectRelease();
LABEL_39:
      unint64_t result = swift_bridgeObjectRelease();
      uint64_t v18 = v63;
      goto LABEL_6;
    }

    v66[0] = v24;
    v66[1] = v65;
    swift_bridgeObjectRetain();
    uint64_t v49 = specialized Dictionary<>.init(_:attributeTable:options:)(v66, (uint64_t)v54, 0LL);
    if (v58)
    {
      uint64_t v50 = v67;

      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRelease();
      return (uint64_t)v50;
    }

    if (!*(void *)(v49 + 16)) {
      goto LABEL_39;
    }
    type metadata accessor for NSAttributedStringKey(0LL);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    uint64_t v18 = v63;
    objc_msgSend(v53, sel_setAttributes_range_, _NativeDictionary.bridged()(), v63, v48);
    unint64_t result = swift_unknownObjectRelease();
LABEL_6:
    char v13 = v56;
    unint64_t v19 = __OFADD__(v18, v48);
    unint64_t v15 = v18 + v48;
    unint64_t v17 = v61;
    uint64_t v16 = v62;
    if (v19) {
      goto LABEL_47;
    }
  }

  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v6 = *a1;
  uint64_t v4 = NSAttributedString.init<A>(_:including:)(&v6, a2, a3, a4);
  swift_release();
  return v4;
}

void *specialized Collection<>.indices.getter@<X0>( void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  unint64_t v5 = result[8];
  if (v5) {
    uint64_t v6 = result[10];
  }
  else {
    uint64_t v6 = 0LL;
  }
  if (a2 < 0 || v6 < a2) {
    goto LABEL_112;
  }
  uint64_t v8 = a3;
  unint64_t v9 = (unint64_t)result;
  uint64_t v10 = result[11];
  uint64_t v54 = result[9];
  if (v5)
  {
    if (result[10] > a2 && *(_WORD *)(v5 + 16) != 0)
    {
      uint64_t v53 = result[10];
      uint64_t v51 = result[11];
      uint64_t v30 = *(unsigned __int8 *)(v5 + 18);
      if (*(_BYTE *)(v5 + 18))
      {
        swift_unknownObjectRetain_n();
        unint64_t result = (void *)swift_retain();
        uint64_t v14 = a2;
        unint64_t v31 = v5;
        while (1)
        {
          uint64_t v33 = *(unsigned __int16 *)(v31 + 16);
          if (!*(_WORD *)(v31 + 16)) {
            goto LABEL_42;
          }
          uint64_t v34 = *(void *)(v31 + 40);
          BOOL v23 = __OFSUB__(v14, v34);
          uint64_t v35 = v14 - v34;
          if (v23) {
            goto LABEL_107;
          }
          if (__OFADD__(v35, 1LL)) {
            goto LABEL_108;
          }
          if (v35 + 1 < 1)
          {
            uint64_t v33 = 0LL;
            goto LABEL_43;
          }

          if ((_DWORD)v33 == 1) {
            break;
          }
          uint64_t v36 = (uint64_t *)(v31 + 64);
          uint64_t v37 = 1LL;
          while (1)
          {
            uint64_t v38 = *v36;
            v36 += 3;
            uint64_t v14 = v35 - v38;
            if (__OFSUB__(v35, v38))
            {
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
              goto LABEL_106;
            }

            if (__OFADD__(v14, 1LL)) {
              goto LABEL_103;
            }
            if (v14 + 1 < 1) {
              break;
            }
            ++v37;
            uint64_t v35 = v14;
            if (v33 == v37) {
              goto LABEL_42;
            }
          }

          uint64_t v33 = v37;
          uint64_t v14 = v35;
LABEL_43:
          char v32 = (4 * *(_BYTE *)(v31 + 18) + 8) & 0x3C;
          uint64_t v30 = ((-15LL << v32) - 1) & v30 | (v33 << v32);
          uint64_t v13 = *(void *)(v31 + 24 + 24 * v33);
          swift_unknownObjectRetain();
          unint64_t result = (void *)swift_unknownObjectRelease();
          unint64_t v31 = v13;
          if (!*(_BYTE *)(v13 + 18)) {
            goto LABEL_61;
          }
        }

        uint64_t v14 = v35;
LABEL_42:
        if (!v14) {
          goto LABEL_43;
        }
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        goto LABEL_115;
      }

      swift_unknownObjectRetain_n();
      unint64_t result = (void *)swift_retain();
      uint64_t v14 = a2;
      uint64_t v13 = v5;
LABEL_61:
      uint64_t v39 = *(unsigned __int16 *)(v13 + 16);
      if (*(_WORD *)(v13 + 16))
      {
        uint64_t v40 = *(void *)(v13 + 24);
        BOOL v23 = __OFSUB__(v14, v40);
        uint64_t v41 = v14 - v40;
        if (v23) {
          goto LABEL_120;
        }
        if (__OFADD__(v41, 1LL))
        {
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
          goto LABEL_123;
        }

        if (v41 + 1 < 1)
        {
          uint64_t v39 = 0LL;
LABEL_86:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v12 = v30 & 0xFFFFFFFFFFFFF0FFLL | (v39 << 8);
          uint64_t v10 = v51;
          uint64_t v8 = a3;
          goto LABEL_13;
        }

        if ((_DWORD)v39 != 1)
        {
          uint64_t v46 = (uint64_t *)(v13 + 48);
          uint64_t v47 = 1LL;
          while (1)
          {
            uint64_t v48 = *v46;
            v46 += 3;
            uint64_t v14 = v41 - v48;
            if (__OFSUB__(v41, v48)) {
              goto LABEL_113;
            }
            if (__OFADD__(v14, 1LL)) {
              goto LABEL_114;
            }
            if (v14 + 1 < 1) {
              break;
            }
            ++v47;
            uint64_t v41 = v14;
            if (v39 == v47) {
              goto LABEL_85;
            }
          }

          uint64_t v39 = v47;
          uint64_t v14 = v41;
          goto LABEL_86;
        }

        uint64_t v14 = v41;
      }

uint64_t specialized Collection<>.indices.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  if (a1)
  {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 18);
    swift_unknownObjectRetain();
    uint64_t v10 = a2;
    uint64_t v11 = a3;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v9 = 0LL;
  }

  a5[4] = a4;
  a5[5] = v9;
  a5[7] = 0LL;
  a5[8] = 0LL;
  a5[6] = 0LL;
  unint64_t v12 = swift_unknownObjectRetain();
  unint64_t v13 = specialized Rope._endPath.getter(v12);
  uint64_t result = swift_unknownObjectRelease();
  a5[9] = a4;
  a5[10] = v13;
  a5[11] = 0LL;
  a5[12] = v10;
  a5[13] = v11;
  return result;
}

uint64_t specialized Collection<>.indices.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 v2 = v1[5];
  __int128 v3 = v1[6];
  int64x2_t v4 = *((int64x2_t *)v1 + 3);
  *(_OWORD *)(a1 + 64) = v1[4];
  *(_OWORD *)(a1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v2;
  int8x16_t v5 = *((int8x16_t *)v1 + 1);
  *(_OWORD *)a1 = *v1;
  *(int8x16_t *)(a1 + 16) = v5;
  __int128 v6 = v1[3];
  *(_OWORD *)(a1 + 32) = v1[2];
  *(_OWORD *)(a1 + 48) = v6;
  v4.i64[1] = *((void *)v1 + 10);
  v5.i64[0] = -65536LL;
  v5.i64[1] = -65536LL;
  *(_OWORD *)(a1 + 96) = v3;
  *(int8x16_t *)(a1 + 112) = vorrq_s8(vandq_s8((int8x16_t)vshlq_n_s64(v4, 5uLL), v5), (int8x16_t)vdupq_n_s64(4uLL));
  return outlined retain of Locale((uint64_t)v1);
}

uint64_t specialized Collection<>.subscript.getter@<X0>( uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6 = a2[8];
  if (v6) {
    uint64_t v7 = a2[10];
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (a3 < 0) {
    goto LABEL_118;
  }
  uint64_t v8 = a3;
  if (v7 < a3) {
    goto LABEL_118;
  }
  uint64_t v9 = a4;
  uint64_t v11 = result;
  uint64_t v12 = a2[9];
  uint64_t v60 = a2[11];
  if (v6)
  {
    if (a2[10] > a3 && *(_WORD *)(v6 + 16) != 0)
    {
      uint64_t v58 = a3;
      uint64_t v59 = a2[9];
      uint64_t v56 = a4;
      uint64_t v57 = result;
      uint64_t v18 = *(unsigned __int8 *)(v6 + 18);
      if (*(_BYTE *)(v6 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v16 = v58;
        unint64_t v19 = v6;
        while (1)
        {
          uint64_t v21 = *(unsigned __int16 *)(v19 + 16);
          if (!*(_WORD *)(v19 + 16)) {
            goto LABEL_17;
          }
          uint64_t v22 = *(void *)(v19 + 40);
          BOOL v23 = __OFSUB__(v16, v22);
          uint64_t v24 = v16 - v22;
          if (v23) {
            goto LABEL_113;
          }
          if (__OFADD__(v24, 1LL))
          {
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
            goto LABEL_120;
          }

          if (v24 + 1 >= 1) {
            break;
          }
          uint64_t v21 = 0LL;
LABEL_18:
          char v20 = (4 * *(_BYTE *)(v19 + 18) + 8) & 0x3C;
          uint64_t v18 = ((-15LL << v20) - 1) & v18 | (v21 << v20);
          uint64_t v17 = *(void *)(v19 + 24 + 24 * v21);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          unint64_t v19 = v17;
          if (!*(_BYTE *)(v17 + 18)) {
            goto LABEL_33;
          }
        }

        if ((_DWORD)v21 != 1)
        {
          uint64_t v25 = (uint64_t *)(v19 + 64);
          uint64_t v26 = 1LL;
          while (1)
          {
            uint64_t v27 = *v25;
            v25 += 3;
            uint64_t v16 = v24 - v27;
            if (__OFSUB__(v24, v27))
            {
              __break(1u);
LABEL_109:
              __break(1u);
              goto LABEL_110;
            }

            if (__OFADD__(v16, 1LL)) {
              goto LABEL_109;
            }
            if (v16 + 1 < 1) {
              break;
            }
            ++v26;
            uint64_t v24 = v16;
            if (v21 == v26) {
              goto LABEL_17;
            }
          }

          uint64_t v21 = v26;
          uint64_t v16 = v24;
          goto LABEL_18;
        }

        uint64_t v16 = v24;
LABEL_17:
        if (v16) {
          goto LABEL_112;
        }
        goto LABEL_18;
      }

      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v16 = v58;
      uint64_t v17 = v6;
LABEL_33:
      uint64_t v28 = *(unsigned __int16 *)(v17 + 16);
      if (*(_WORD *)(v17 + 16))
      {
        uint64_t v29 = *(void *)(v17 + 24);
        BOOL v23 = __OFSUB__(v16, v29);
        uint64_t v30 = v16 - v29;
        uint64_t v9 = v56;
        if (v23)
        {
LABEL_129:
          __break(1u);
          goto LABEL_130;
        }

        if (__OFADD__(v30, 1LL))
        {
LABEL_130:
          __break(1u);
          goto LABEL_131;
        }

        if (v30 + 1 < 1)
        {
          uint64_t v28 = 0LL;
        }

        else
        {
          if ((_DWORD)v28 == 1)
          {
            uint64_t v16 = v30;
            goto LABEL_46;
          }

          unint64_t v31 = (uint64_t *)(v17 + 48);
          uint64_t v32 = 1LL;
          while (1)
          {
            uint64_t v33 = *v31;
            v31 += 3;
            uint64_t v16 = v30 - v33;
            if (__OFSUB__(v30, v33)) {
              goto LABEL_122;
            }
            if (__OFADD__(v16, 1LL)) {
              goto LABEL_123;
            }
            if (v16 + 1 < 1) {
              break;
            }
            ++v32;
            uint64_t v30 = v16;
            if (v28 == v32) {
              goto LABEL_46;
            }
          }

          uint64_t v28 = v32;
          uint64_t v16 = v30;
        }

uint64_t specialized Collection<>.subscript.getter@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a2) {
    uint64_t v12 = a4;
  }
  else {
    uint64_t v12 = 0LL;
  }
  swift_unknownObjectRetain();
  specialized Rope._endPath.getter(a2);
  uint64_t result = swift_unknownObjectRelease();
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v14 = *(void *)(a1 + 32);
  if (v14 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v15 = *(void *)(a1 + 72);
  if (v12 >= v15)
  {
    *(void *)(a6 + 88) = a3;
    *(void *)(a6 + 96) = a4;
    *(void *)(a6 + 104) = a5;
    __int128 v16 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a6 = *(_OWORD *)a1;
    *(_OWORD *)(a6 + 16) = v16;
    *(void *)(a6 + 32) = v14;
    *(_OWORD *)(a6 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a6 + 56) = *(_OWORD *)(a1 + 56);
    *(void *)(a6 + 72) = v15;
    *(void *)(a6 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = a2;
    return swift_unknownObjectRetain();
  }

unint64_t specialized Collection<>.subscript.getter@<X0>( unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = (*(void *)(v3 + 80) >> 9) & 0x3FFFFFFFFFFFCLL;
  unint64_t v5 = (*(void *)(v3 + 48) >> 9) & 0x3FFFFFFFFFFFCLL;
  if (v4 < v5)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v5 > result >> 14)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v4 >= a2 >> 14)
  {
    __int128 v6 = *(_OWORD *)(v3 + 80);
    *(_OWORD *)(a3 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)(v3 + 64);
    *(_OWORD *)(a3 + 96) = v6;
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(v3 + 96);
    __int128 v7 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)v3;
    *(_OWORD *)(a3 + 32) = v7;
    __int128 v8 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(a3 + 64) = v8;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = a2;
    return outlined retain of Locale(v3);
  }

void *Range<>.init<A, B>(_:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, ValueMetadata *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v46 = a6;
  Description = (void (**)(char *, void, ValueMetadata *))a4[-1].Description;
  MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __n128 v19 = MEMORY[0x1895F8858](v18);
  (*(void (**)(char *, uint64_t, __n128))(v17 + 16))( (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<String.Index>);
  if (swift_dynamicCast())
  {
    __int128 v21 = v47;
    Description[2](v15, a2, a4);
    Range<>.init<A>(_range:in:)(v21, *((unint64_t *)&v21 + 1), (uint64_t)v15, a4, v46, (uint64_t)&v47);
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(a2, a4);
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a3);
  }

  else
  {
    uint64_t v43 = a5;
    uint64_t v44 = v17;
    uint64_t v45 = Description;
    uint64_t v23 = v46;
    uint64_t v24 = a2;
    uint64_t v25 = (void *)AttributedStringProtocol.__guts.getter(a4, v46);
    uint64_t v26 = v25[2];
    uint64_t v42 = v25[3];
    uint64_t v41 = v25[4];
    uint64_t v40 = v25[5];
    uint64_t v39 = v25[6];
    uint64_t v38 = v25[7];
    swift_unknownObjectRetain();
    swift_release();
    (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(v23 + 32))(&v47, a4, v23);
    uint64_t v37 = *((void *)&v47 + 1);
    unint64_t v27 = v47;
    uint64_t v36 = v48;
    uint64_t v35 = v49;
    uint64_t result = (*(void *(**)(unint64_t *__return_ptr, ValueMetadata *, uint64_t))(v23 + 40))( &v57,  a4,  v23);
    if (v57 >> 10 < v27 >> 10)
    {
      __break(1u);
      return result;
    }

    *(void *)&__int128 v47 = v26;
    *((void *)&v47 + 1) = v42;
    uint64_t v48 = v41;
    uint64_t v49 = v40;
    *(void *)&__int128 v50 = v39;
    *((void *)&v50 + 1) = v38;
    *(void *)&__int128 v51 = v27;
    *((void *)&v51 + 1) = v37;
    uint64_t v52 = v36;
    uint64_t v53 = v35;
    unint64_t v54 = v57;
    __int128 v55 = v58;
    uint64_t v56 = v59;
    lazy protocol witness table accessor for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    unint64_t v28 = v57;
    unint64_t v29 = v58;
    uint64_t v30 = v45;
    v45[2](v15, v24, a4);
    Range<>.init<A>(_range:in:)(v28, v29, (uint64_t)v15, a4, v46, (uint64_t)&v47);
    swift_unknownObjectRelease();
    ((void (*)(uint64_t, ValueMetadata *))v30[1])(v24, a4);
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(a1, a3);
  }

  uint64_t v31 = v49;
  if (v49 == 2)
  {
    *(void *)a7 = 0LL;
    *(void *)(a7 + 8) = 0LL;
    *(void *)(a7 + 16) = 0LL;
    *(void *)(a7 + 24) = 2LL;
    __int128 v32 = 0uLL;
    *(_OWORD *)(a7 + 32) = 0u;
  }

  else
  {
    __int128 v33 = v50;
    __int128 v32 = v51;
    uint64_t v34 = v48;
    *(_OWORD *)a7 = v47;
    *(void *)(a7 + 16) = v34;
    *(void *)(a7 + 24) = v31;
    *(_OWORD *)(a7 + 32) = v33;
  }

  *(_OWORD *)(a7 + 48) = v32;
  return result;
}

uint64_t String.init(_:)(_OWORD *a1)
{
  __int128 v1 = a1[3];
  __int128 v15 = a1[2];
  __int128 v16 = v1;
  __int128 v2 = a1[8];
  __int128 v3 = a1[6];
  __int128 v20 = a1[7];
  __int128 v21 = v2;
  __int128 v4 = a1[5];
  __int128 v17 = a1[4];
  __int128 v18 = v4;
  __int128 v19 = v3;
  __int128 v5 = a1[1];
  v14[0] = *a1;
  v14[1] = v5;
  v12[7] = v14[0];
  v12[8] = v5;
  v12[9] = v15;
  v12[10] = v16;
  __int128 v6 = (_OWORD *)v17;
  __int128 v7 = *(_OWORD *)(v17 + 16);
  __int128 v8 = *(_OWORD *)(v17 + 48);
  v13[1] = *(_OWORD *)(v17 + 32);
  void v13[2] = v8;
  v13[0] = v7;
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v14);
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v14);
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v14);
  outlined retain of Locale((uint64_t)v13);
  BigString.subscript.getter();
  outlined release of Locale((uint64_t)v13);
  outlined release of Locale((uint64_t)v11);
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v14);
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v14);
  __int128 v9 = v6[2];
  v12[0] = v6[1];
  v12[1] = v9;
  void v12[2] = v6[3];
  void v12[3] = v11[3];
  v12[4] = v11[4];
  v12[5] = v11[5];
  v12[6] = v11[6];
  swift_unknownObjectRetain();
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v14);
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v14);
  return MEMORY[0x186E1B6C4](v12);
}

unint64_t AttributedString.init<A>(_:including:)@<X0>( void *a1@<X0>, Swift::UInt a2@<X2>, unint64_t a3@<X3>, void *a4@<X8>)
{
  __int128 v7 = static AttributeScope.scopeDescription.getter(a2, a3);
  swift_bridgeObjectRelease();
  unint64_t result = AttributedString.init(_:attributeTable:options:)(a1, (uint64_t)v7, 0LL, &v9);
  if (!v4) {
    *a4 = v9;
  }
  return result;
}

uint64_t Range<>.init<A>(_:in:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  __int128 v8 = (char *)&v18 - v12;
  uint64_t v9 = (void (*)(char *, uint64_t))*((void *)a1 + 4);
  char v10 = a1[64];
  uint64_t v11 = *((void *)a1 + 9);
  LOBYTE(v12) = a1[104];
  if ((v10 & 1) == 0 && (a1[104] & 1) == 0)
  {
    __int128 v19 = (void (*)(char *, uint64_t))*((void *)a1 + 9);
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    dispatch thunk of Collection.startIndex.getter();
    unint64_t v23 = v33[0];
    swift_getAssociatedConformanceWitness();
    dispatch thunk of Collection.index(_:offsetBy:)();
    uint64_t v9 = *(void (**)(char *, uint64_t))(v7 + 8);
    v9(v8, AssociatedTypeWitness);
    unint64_t v7 = *(void *)&v24[0];
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    uint64_t result = dispatch thunk of Collection.startIndex.getter();
    unint64_t v22 = v23;
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }

    a1 = v8;
    dispatch thunk of Collection.index(_:offsetBy:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
    v9(v8, AssociatedTypeWitness);
    uint64_t v12 = v33[0] >> 14;
    if (v33[0] >> 14 >= v7 >> 14) {
      return v7;
    }
    __break(1u);
  }

  uint64_t v14 = *((void *)a1 + 12);
  uint64_t v15 = *((void *)a1 + 7);
  __int128 v16 = *((_OWORD *)a1 + 1);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v16;
  uint64_t v25 = v9;
  __int128 v26 = *(_OWORD *)(a1 + 40);
  uint64_t v27 = v15;
  char v28 = v10;
  uint64_t v29 = v11;
  __int128 v30 = *((_OWORD *)a1 + 5);
  uint64_t v31 = v14;
  char v32 = v12;
  AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)(a2, a3, v33);
  outlined init with take of LocalePreferences?( (uint64_t)v33,  (uint64_t)v24,  &demangling cache variable for type metadata for (start: AttributedString.MarkdownSourcePosition.Offsets, end: AttributedString.MarkdownSourcePosition.Offsets)?);
  if (v28 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
    return 0LL;
  }

  __int128 v19 = v25;
  dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
  dispatch thunk of Collection.startIndex.getter();
  unint64_t v21 = v22;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Collection.index(_:offsetBy:)();
  __int128 v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v8, AssociatedTypeWitness);
  unint64_t v7 = v23;
  dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  unint64_t v20 = v21;
  if (__OFADD__(v19, 1LL)) {
    goto LABEL_12;
  }
  dispatch thunk of Collection.index(_:offsetBy:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v17)(v8, AssociatedTypeWitness);
  if (v22 >> 14 >= v7 >> 14) {
    return v7;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t AttributedString.init<A>(_:including:)@<X0>( void *a1@<X0>, Swift::UInt a2@<X2>, unint64_t a3@<X3>, void *a4@<X8>)
{
  unint64_t v7 = static AttributeScope.scopeDescription.getter(a2, a3);
  swift_bridgeObjectRelease();
  AttributedString.init(_:attributeTable:options:)(a1, (uint64_t)v7, 0LL, &v9);
  uint64_t result = swift_release();
  if (!v4) {
    *a4 = v9;
  }
  return result;
}

void protocol witness for static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute( uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1834AE678()
{
  uint64_t v0 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t static ObjectiveCConvertibleAttributedStringKey<>.objectiveCValue(for:)()
{
  uint64_t v0 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static ObjectiveCConvertibleAttributedStringKey.value(for:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute@<X0>( void *a1@<X0>, char *a2@<X8>)
{
  return specialized static ObjectiveCConvertibleAttributedStringKey<>.value(for:)(a1, a2);
}

uint64_t specialized static ObjectiveCConvertibleAttributedStringKey<>.value(for:)@<X0>( void *a1@<X0>, char *a2@<X8>)
{
  v16._uint64_t countAndFlagsBits = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t result = AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.init(rawValue:)(v16, &v15);
  char v4 = v15;
  if (v15 != 7) {
    goto LABEL_8;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v5, sel_initWithDomain_code_userInfo_, v6, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v8 = objc_msgSend(v7, sel_domain);
  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    a2 = v12;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      __break(1u);
LABEL_8:
      *a2 = v4;
      return result;
    }
  }

  return swift_willThrow();
}

uint64_t static ObjectiveCConvertibleAttributedStringKey<>.value(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  id v8 = (char *)v20 - v7;
  v20[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v20[1] = v9;
  dispatch thunk of RawRepresentable.init(rawValue:)();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v11 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v12 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v8 = (char *)objc_msgSend(v13, sel_domain);
  id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  a2 = v15;

  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && a2 == v16)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    uint64_t AssociatedTypeWitness = v16;
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      __break(1u);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v8, AssociatedTypeWitness);
    }
  }

  return swift_willThrow();
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  void v20[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)&uint64_t v7 = MEMORY[0x1895F8858](v5).n128_u64[0];
  uint64_t v9 = (char *)v20 - v8;
  v20[1] = objc_msgSend(a1, sel_integerValue, v7);
  dispatch thunk of RawRepresentable.init(rawValue:)();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v11 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v12 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v9 = (char *)objc_msgSend(v13, sel_domain);
  id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  a2 = v15;

  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && a2 == v16)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    uint64_t AssociatedTypeWitness = v16;
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      __break(1u);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v9, AssociatedTypeWitness);
    }
  }

  return swift_willThrow();
}

uint64_t String.init(_characters:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  __int128 v2 = *(_OWORD *)(*a1 + 32);
  v6[0] = *(_OWORD *)(*a1 + 16);
  v6[1] = v2;
  __int128 v3 = *(_OWORD *)(a1 + 1);
  void v6[2] = *(_OWORD *)(v1 + 48);
  v6[3] = v3;
  __int128 v4 = *(_OWORD *)(a1 + 5);
  id v6[4] = *(_OWORD *)(a1 + 3);
  v6[5] = v4;
  v6[6] = *(_OWORD *)(a1 + 7);
  swift_unknownObjectRetain();
  swift_release();
  return MEMORY[0x186E1B6C4](v6);
}

id static ObjectiveCConvertibleAttributedStringKey<>.objectiveCValue(for:)()
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, v1);
}

void AttributeContainer.init(_:)(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v99 = a2;
  uint64_t Default = _loadDefaultAttributes()();
  uint64_t v4 = Default;
  int64_t v5 = 0LL;
  char v114 = 0LL;
  __int128 v135 = MEMORY[0x18961AFF0];
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v110 = a1 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & v6;
  uint64_t v10 = (char *)&v126 + 8;
  id v11 = &v134;
  __int128 v104 = @"NSCocoaErrorDomain";
  int64_t v117 = (unint64_t)(v7 + 63) >> 6;
  int64_t v98 = v117 - 1;
  uint64_t v101 = MEMORY[0x18961AFB8] + 8LL;
  uint64_t v100 = MEMORY[0x18961AFC0] + 8LL;
  uint64_t v109 = a1;
  uint64_t v113 = Default;
  char v112 = (char *)&v126 + 8;
  char v111 = &v134;
  while (v9)
  {
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v13 = v12 | (v5 << 6);
LABEL_7:
    uint64_t v14 = *(void *)(a1 + 56);
    *(void *)&__int128 v126 = *(void *)(*(void *)(a1 + 48) + 8 * v13);
    uint64_t v15 = (void *)v126;
    outlined init with copy of Any(v14 + 32 * v13, (uint64_t)v10);
    id v16 = v15;
LABEL_17:
    outlined init with take of LocalePreferences?( (uint64_t)&v126,  (uint64_t)&v133,  &demangling cache variable for type metadata for (key: NSAttributedStringKey, value: Any)?);
    __int128 v19 = v133;
    if (!v133)
    {
      swift_bridgeObjectRelease();
      swift_release();
      *unint64_t v99 = v135;
      return;
    }

    outlined init with take of Any(v11, &v131);
    id v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    if (*(void *)(v4 + 16)
      && (unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20, v21), (v23 & 1) != 0))
    {
      uint64_t v24 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v22);
      uint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      swift_bridgeObjectRelease();
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v28 = type metadata accessor for Optional();
      uint64_t v122 = &v98;
      uint64_t v119 = v28;
      uint64_t v120 = *(void *)(v28 - 8);
      uint64_t v29 = *(void *)(v120 + 64);
      MEMORY[0x1895F8858](v28);
      uint64_t v118 = (char *)&v98 - v30;
      uint64_t v31 = v132;
      char v32 = __swift_project_boxed_opaque_existential_1(&v131, v132);
      uint64_t isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      uint64_t v34 = *(void *)(*(void *)(v31 - 8) + 64LL);
      int64_t v121 = v5;
      uint64_t v115 = v25;
      if ((isClassOrObjCExistentialType & 1) != 0)
      {
        if (v34 != 8) {
          goto LABEL_68;
        }
        uint64_t v35 = *v32;
        swift_unknownObjectRetain();
      }

      else
      {
        __n128 v95 = MEMORY[0x1895F8858](isClassOrObjCExistentialType);
        (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v97 + 16))( (char *)&v98 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v32,  v31,  v95);
        uint64_t v35 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      }

      uint64_t v36 = swift_conformsToProtocol2();
      if (v36) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 0LL;
      }
      if (v36) {
        uint64_t v38 = v26;
      }
      else {
        uint64_t v38 = 0LL;
      }
      if (!v38)
      {
        char v108 = &v98;
        uint64_t v45 = *(void **)(AssociatedTypeWitness - 8);
        MEMORY[0x1895F8858](v36);
        __int128 v47 = (char *)&v98 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        char v107 = &v98;
        *(void *)&__int128 v126 = v35;
        MEMORY[0x1895F8858](v48);
        swift_unknownObjectRetain();
        char v49 = swift_dynamicCast();
        __int128 v50 = (void *)v35;
        char v116 = v45;
        __int128 v51 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v45[7];
        if ((v49 & 1) != 0)
        {
          v51((char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL), 0LL, 1LL, AssociatedTypeWitness);
          uint64_t v52 = (void (*)(char *, char *, uint64_t))v116[4];
          v52(v47, (char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL), AssociatedTypeWitness);
          uint64_t v53 = v118;
          v52(v118, v47, AssociatedTypeWitness);
          swift_unknownObjectRelease();
          goto LABEL_43;
        }

        char v116 = v50;
        v51((char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL), 1LL, 1LL, AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(v120 + 8))((char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL), v119);
        uint64_t v63 = v104;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        id v64 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v65 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v57 = objc_msgSend(v64, sel_initWithDomain_code_userInfo_, v65, 4866, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v66 = objc_msgSend(v57, sel_domain);
        id v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        uint64_t v69 = v68;

        if (v67 != static String._unconditionallyBridgeFromObjectiveC(_:)(v63) || v69 != v70)
        {
          char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a1 = v109;
          uint64_t v4 = v113;
          uint64_t v10 = v112;
          id v11 = v111;
          if ((v93 & 1) == 0) {
            goto LABEL_70;
          }
          goto LABEL_50;
        }

        swift_bridgeObjectRelease_n();
        a1 = v109;
        goto LABEL_41;
      }

      swift_getAssociatedTypeWitness();
      char v116 = (void *)v35;
      uint64_t v39 = swift_dynamicCastUnknownClass();
      if (v39)
      {
        uint64_t v40 = v39;
        uint64_t v41 = swift_getAssociatedTypeWitness();
        char v108 = &v98;
        __n128 v42 = MEMORY[0x1895F8858](v41);
        uint64_t v43 = v40;
        uint64_t v44 = v114;
        (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v37 + 32))(v43, v38, v37, v42);
        if (v44)
        {
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);

          char v114 = 0LL;
          a1 = v109;
          uint64_t v4 = v113;
          uint64_t v10 = v112;
          id v11 = v111;
          goto LABEL_51;
        }

        char v114 = 0LL;
        uint64_t v53 = v118;
        swift_dynamicCast();
        swift_unknownObjectRelease();
        char v116 = *(void **)(AssociatedTypeWitness - 8);
        __int128 v51 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v116[7];
LABEL_43:
        v51(v53, 0LL, 1LL, AssociatedTypeWitness);
        uint64_t v71 = v115;
        unint64_t v72 = v53;
        char v107 = (int64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(v115 + 24))(v26, v115);
        char v108 = (void *)v73;
        char v106 = &v98;
        uint64_t v74 = v116;
        uint64_t v75 = v116[8];
        MEMORY[0x1895F8858](v107);
        unint64_t v102 = (v75 + 15) & 0xFFFFFFFFFFFFFFF0LL;
        int64_t v103 = (char *)&v98 - v102;
        uint64_t v105 = &v98;
        __n128 v77 = MEMORY[0x1895F8858](v76);
        uint64_t v78 = (char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v79 = v120;
        unint64_t v80 = v72;
        uint64_t v81 = v119;
        (*(void (**)(char *, char *, uint64_t, __n128))(v120 + 16))(v78, v80, v119, v77);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v74[6])(v78, 1LL, AssociatedTypeWitness) == 1)
        {
          (*(void (**)(char *, uint64_t))(v79 + 8))(v78, v81);
          uint64_t v130 = 0LL;
          __int128 v128 = 0u;
          __int128 v129 = 0u;
          __int128 v127 = 0u;
          __int128 v126 = 0u;
          uint64_t v4 = v113;
          uint64_t v10 = v112;
          id v11 = v111;
          int64_t v5 = v121;
          uint64_t v82 = v81;
        }

        else
        {
          BOOL v83 = v116;
          uint64_t v84 = v103;
          uint64_t v85 = ((uint64_t (*)(char *, char *, uint64_t))v116[4])(v103, v78, AssociatedTypeWitness);
          uint64_t v105 = &v98;
          __n128 v86 = MEMORY[0x1895F8858](v85);
          uint64_t v87 = (char *)&v98 - v102;
          uint64_t v88 = (void (*)(char *, char *, uint64_t, __n128))v83[2];
          v88((char *)&v98 - v102, v84, AssociatedTypeWitness, v86);
          *((void *)&v124 + 1) = AssociatedTypeWitness;
          *(void *)uint64_t v125 = swift_getAssociatedConformanceWitness();
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v123);
          ((void (*)(uint64_t *, char *, uint64_t))v88)(boxed_opaque_existential_1, v87, AssociatedTypeWitness);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v71 + 32))(&v126, v26, v71);
          *(_OWORD *)&v125[8] = v126;
          v125[24] = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 40))(v26, v71) & 1;
          uint64_t v90 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 48))(v26, v71);
          uint64_t v91 = (void (*)(char *, uint64_t))v83[1];
          v91(v87, AssociatedTypeWitness);
          uint64_t v130 = v90;
          __int128 v128 = *(_OWORD *)v125;
          __int128 v129 = *(_OWORD *)&v125[16];
          __int128 v127 = v124;
          __int128 v126 = v123;
          v91(v84, AssociatedTypeWitness);
          uint64_t v4 = v113;
          uint64_t v10 = v112;
          id v11 = v111;
          int64_t v5 = v121;
          uint64_t v82 = v119;
        }

        specialized AttributedString._AttributeStorage.subscript.setter( (uint64_t)&v126,  (unint64_t)v107,  (unint64_t)v108);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v120 + 8))(v118, v82);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);

        a1 = v109;
      }

      else
      {
        unint64_t v54 = v104;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        id v55 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v56 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v57 = objc_msgSend(v55, sel_initWithDomain_code_userInfo_, v56, 4866, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v58 = objc_msgSend(v57, sel_domain);
        id v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        uint64_t v61 = v60;

        if (v59 != static String._unconditionallyBridgeFromObjectiveC(_:)(v54) || v61 != v62)
        {
          char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v4 = v113;
          uint64_t v10 = v112;
          id v11 = v111;
          if ((v92 & 1) == 0) {
            goto LABEL_69;
          }
          goto LABEL_50;
        }

        swift_bridgeObjectRelease_n();
LABEL_41:
        uint64_t v4 = v113;
        uint64_t v10 = v112;
        id v11 = v111;
LABEL_50:
        swift_willThrow();
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);

        char v114 = 0LL;
LABEL_51:
        int64_t v5 = v121;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
    }
  }

  int64_t v17 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }

  if (v17 >= v117) {
    goto LABEL_16;
  }
  unint64_t v18 = *(void *)(v110 + 8 * v17);
  if (v18)
  {
LABEL_11:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v13 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v5 = v17;
    goto LABEL_7;
  }

  v5 += 2LL;
  if (v17 + 1 >= v117)
  {
    int64_t v5 = v17;
LABEL_16:
    unint64_t v9 = 0LL;
    *(void *)&__int128 v128 = 0LL;
    __int128 v127 = 0u;
    __int128 v126 = 0u;
    goto LABEL_17;
  }

  unint64_t v18 = *(void *)(v110 + 8 * v5);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v5;
    goto LABEL_11;
  }

  int64_t v94 = v17 + 2;
  if (v17 + 2 >= v117) {
    goto LABEL_16;
  }
  unint64_t v18 = *(void *)(v110 + 8 * v94);
  if (v18)
  {
LABEL_54:
    int64_t v17 = v94;
    goto LABEL_11;
  }

  int64_t v5 = v17 + 3;
  if (v17 + 3 >= v117)
  {
    int64_t v5 = v17 + 2;
    goto LABEL_16;
  }

  unint64_t v18 = *(void *)(v110 + 8 * v5);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v94 = v17 + 4;
  if (v17 + 4 >= v117) {
    goto LABEL_16;
  }
  unint64_t v18 = *(void *)(v110 + 8 * v94);
  if (v18) {
    goto LABEL_54;
  }
  while (1)
  {
    int64_t v17 = v94 + 1;
    if (__OFADD__(v94, 1LL)) {
      break;
    }
    if (v17 >= v117)
    {
      int64_t v5 = v98;
      goto LABEL_16;
    }

    unint64_t v18 = *(void *)(v110 + 8 * v17);
    ++v94;
    if (v18) {
      goto LABEL_11;
    }
  }

double AttributeContainer.init<A>(_:including:)@<D0>( uint64_t a1@<X0>, Swift::UInt a2@<X2>, unint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  if (!v4)
  {
    double result = *(double *)&v7;
    *a4 = v7;
  }

  return result;
}

void AttributeContainer.init<A>(_:including:)( uint64_t a1@<X0>, Swift::UInt a2@<X2>, unint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  unint64_t v102 = a4;
  int64_t v5 = static AttributeScope.scopeDescription.getter(a2, a3);
  swift_bridgeObjectRelease();
  int64_t v6 = 0LL;
  __int128 v135 = MEMORY[0x18961AFF0];
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v104 = a1 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v7;
  id v11 = (char *)&v126 + 8;
  unint64_t v12 = &v134;
  int64_t v111 = (unint64_t)(v8 + 63) >> 6;
  int64_t v101 = v111 - 1;
  uint64_t v103 = MEMORY[0x18961AFB8] + 8LL;
  char v107 = v5;
  char v106 = (char *)&v126 + 8;
  uint64_t v105 = &v134;
  uint64_t v108 = a1;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      uint64_t v14 = (v10 - 1) & v10;
      unint64_t v15 = v13 | (v6 << 6);
LABEL_8:
      uint64_t v16 = *(void *)(a1 + 56);
      *(void *)&__int128 v126 = *(void *)(*(void *)(a1 + 48) + 8 * v15);
      int64_t v17 = (void *)v126;
      outlined init with copy of Any(v16 + 32 * v15, (uint64_t)v11);
      id v18 = v17;
      goto LABEL_18;
    }

    int64_t v19 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }

    if (v19 < v111)
    {
      unint64_t v20 = *(void *)(v104 + 8 * v19);
      if (v20) {
        goto LABEL_12;
      }
      v6 += 2LL;
      if (v19 + 1 >= v111)
      {
        int64_t v6 = v19;
      }

      else
      {
        unint64_t v20 = *(void *)(v104 + 8 * v6);
        if (v20) {
          goto LABEL_15;
        }
        int64_t v77 = v19 + 2;
        if (v19 + 2 < v111)
        {
          unint64_t v20 = *(void *)(v104 + 8 * v77);
          if (v20) {
            goto LABEL_44;
          }
          int64_t v6 = v19 + 3;
          if (v19 + 3 >= v111)
          {
            int64_t v6 = v19 + 2;
          }

          else
          {
            unint64_t v20 = *(void *)(v104 + 8 * v6);
            if (v20)
            {
LABEL_15:
              int64_t v19 = v6;
LABEL_12:
              uint64_t v14 = (v20 - 1) & v20;
              unint64_t v15 = __clz(__rbit64(v20)) + (v19 << 6);
              int64_t v6 = v19;
              goto LABEL_8;
            }

            int64_t v77 = v19 + 4;
            if (v19 + 4 < v111)
            {
              unint64_t v20 = *(void *)(v104 + 8 * v77);
              if (!v20)
              {
                while (1)
                {
                  int64_t v19 = v77 + 1;
                  if (__OFADD__(v77, 1LL)) {
                    goto LABEL_73;
                  }
                  if (v19 >= v111)
                  {
                    int64_t v6 = v101;
                    goto LABEL_17;
                  }

                  unint64_t v20 = *(void *)(v104 + 8 * v19);
                  ++v77;
                  if (v20) {
                    goto LABEL_12;
                  }
                }
              }

uint64_t Dictionary<>.init(_:)(__int128 *a1)
{
  __int128 v3 = *a1;
  uint64_t Default = _loadDefaultAttributes()();
  return specialized Dictionary<>.init(_:attributeTable:options:)((uint64_t *)&v3, Default, 1LL);
}

uint64_t Dictionary<>.init<A>(_:including:)(__int128 *a1, uint64_t a2, Swift::UInt a3, unint64_t a4)
{
  return Dictionary<>.init<A>(_:including:)(a1, a2, a3, a4);
}

{
  void *v4;
  __int128 v6;
  int64_t v6 = *a1;
  uint64_t v4 = static AttributeScope.scopeDescription.getter(a3, a4);
  swift_bridgeObjectRelease();
  return specialized Dictionary<>.init(_:attributeTable:options:)((uint64_t *)&v6, (uint64_t)v4, 0LL);
}

{
  void *v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v7 = *a1;
  uint64_t v4 = static AttributeScope.scopeDescription.getter(a3, a4);
  swift_bridgeObjectRelease();
  int64_t v5 = specialized Dictionary<>.init(_:attributeTable:options:)((uint64_t *)&v7, (uint64_t)v4, 0LL);
  swift_release();
  return v5;
}

uint64_t Dictionary<>.init<A>(_:includingOnly:)( __int128 *a1, uint64_t a2, Swift::UInt a3, unint64_t a4)
{
  return Dictionary<>.init<A>(_:including:)(a1, a2, a3, a4);
}

{
  void *v4;
  __int128 v6;
  int64_t v6 = *a1;
  uint64_t v4 = static AttributeScope.scopeDescription.getter(a3, a4);
  swift_bridgeObjectRelease();
  return specialized Dictionary<>.init(_:attributeTable:options:)((uint64_t *)&v6, (uint64_t)v4, 0LL);
}

uint64_t NSAttributedString.init(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t Default = _loadDefaultAttributes()();
  __int128 v2 = *(_OWORD *)(v1 + 32);
  v68[0] = *(_OWORD *)(v1 + 16);
  v68[1] = v2;
  __int128 v69 = *(_OWORD *)(v1 + 48);
  v70[0] = v68[0];
  v70[1] = v2;
  v70[2] = v69;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v70, (uint64_t)v71);
  outlined retain of Locale((uint64_t)v71);
  MEMORY[0x186E1B6D0](v68);
  id v3 = objc_allocWithZone((Class)&OBJC_CLASS___NSMutableAttributedString);
  uint64_t v4 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v41 = objc_msgSend(v3, sel_initWithString_, v4);
  swift_unknownObjectRelease();
  __int128 v5 = *(_OWORD *)(v1 + 32);
  __int128 v65 = *(_OWORD *)(v1 + 16);
  __int128 v66 = v5;
  __int128 v67 = *(_OWORD *)(v1 + 48);
  BigString.startIndex.getter();
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v44 = *(void *)(v1 + 72);
  uint64_t v40 = (_OWORD *)v1;
  uint64_t v47 = *(void *)(v1 + 88);
  uint64_t v48 = *(void *)(v1 + 80);
  if (v6)
  {
    unint64_t v7 = *(unsigned __int8 *)(v6 + 18);
    swift_unknownObjectRetain();
  }

  else
  {
    unint64_t v7 = 0LL;
  }

  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v45 = v40 + 1;
  v51[2] = v6;
  v51[3] = v44;
  _OWORD v51[4] = v48;
  v51[5] = v47;
  uint64_t v52 = v47;
  unint64_t v53 = v7;
  uint64_t v42 = v6 + 24;
  uint64_t v55 = 0LL;
  uint64_t v56 = 0LL;
  uint64_t v54 = 0LL;
  uint64_t v46 = v6;
  while (1)
  {
    if (v6)
    {
      if (v10 == v48)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_unknownObjectRelease();
LABEL_40:
        id v38 = objc_msgSend( objc_allocWithZone((Class)swift_getObjCClassFromMetadata()),  sel_initWithAttributedString_,  v41);

        return (uint64_t)v38;
      }
    }

    else if (!v10)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_40;
    }

    if (v52 != v47) {
      break;
    }
    uint64_t v50 = v8;
    unint64_t v13 = v53;
    uint64_t v14 = v54;
    if (v54)
    {
      unint64_t v15 = (void *)(v54 + 24 * ((v53 >> ((4 * *(_BYTE *)(v54 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v16 = v15[3];
      uint64_t v17 = v15[4];
      uint64_t v18 = v15[5];
      BOOL v12 = __OFADD__(v9, 1LL);
      uint64_t v19 = v9 + 1;
      char v20 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v20 & 1) != 0) {
        goto LABEL_42;
      }
      uint64_t v49 = v19;
      uint64_t v55 = v19;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v13, v6);
      uint64_t v17 = v21;
      uint64_t v18 = v22;
      swift_unknownObjectRelease();
      BOOL v12 = __OFADD__(v9, 1LL);
      uint64_t v23 = v9 + 1;
      if (v12) {
        goto LABEL_42;
      }
      uint64_t v49 = v23;
      uint64_t v55 = v23;
      swift_unknownObjectRetain();
      unint64_t v16 = specialized Rope._Node.subscript.getter(v13, v6);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v12 = __OFADD__(v10, v16);
    v10 += v16;
    if (v12) {
      goto LABEL_43;
    }
    uint64_t v56 = v10;
    if (!v6) {
      goto LABEL_45;
    }
    unint64_t v24 = ((-15LL << ((4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v6 + 18) | ((unint64_t)*(unsigned __int16 *)(v6 + 16) << ((4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C));
    swift_unknownObjectRetain();
    if (v13 >= v24) {
      goto LABEL_45;
    }
    if (v14)
    {
      char v25 = (4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C;
      unint64_t v26 = ((v13 >> v25) & 0xF) + 1;
      if (v26 < *(unsigned __int16 *)(v14 + 16))
      {
        unint64_t v53 = (v26 << v25) | ((-15LL << v25) - 1) & v13;
LABEL_28:
        swift_unknownObjectRelease_n();
        goto LABEL_34;
      }
    }

    int v27 = *(unsigned __int8 *)(v6 + 18);
    char v28 = (4 * v27 + 8) & 0x3C;
    v51[0] = (v13 >> v28) & 0xF;
    if (v27)
    {
      swift_unknownObjectRetain();
      char v29 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v42, v51, (uint64_t)&v52, v6, v27);
      swift_unknownObjectRelease();
      if ((v29 & 1) == 0)
      {
        int v31 = *(unsigned __int8 *)(v6 + 18);
LABEL_33:
        uint64_t v32 = *(unsigned __int16 *)(v6 + 16);
        char v33 = *(_BYTE *)(v6 + 18);
        swift_unknownObjectRelease_n();
        uint64_t v52 = v47;
        unint64_t v53 = ((-15LL << ((4 * v33 + 8) & 0x3C)) - 1) & v31 | (unint64_t)(v32 << ((4 * v33 + 8) & 0x3C));
        uint64_t v54 = 0LL;
        goto LABEL_34;
      }

      goto LABEL_28;
    }

    unint64_t v30 = ((v13 >> v28) & 0xF) + 1;
    if (v30 >= *(unsigned __int16 *)(v6 + 16))
    {
      int v31 = 0;
      goto LABEL_33;
    }

    unint64_t v53 = (v30 << v28) | ((-15LL << v28) - 1) & v13;
    swift_unknownObjectRelease_n();
    uint64_t v54 = v6;
LABEL_34:
    __int128 v34 = v40[2];
    __int128 v62 = *v45;
    __int128 v63 = v34;
    __int128 v64 = v40[3];
    BigString.utf8.getter();
    BigString.UTF8View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v57);
    __int128 v35 = v40[2];
    __int128 v59 = *v45;
    __int128 v60 = v35;
    __int128 v61 = v40[3];
    BigString.utf16.getter();
    uint64_t v36 = BigString.UTF16View.distance(from:to:)();
    outlined release of Locale((uint64_t)v58);
    if (*(void *)(v17 + 16))
    {
      v51[0] = v17;
      v51[1] = v18;
      swift_bridgeObjectRetain();
      uint64_t v37 = specialized Dictionary<>.init(_:attributeTable:options:)(v51, Default, 1LL);
      uint64_t v6 = v46;
      if (*(void *)(v37 + 16))
      {
        type metadata accessor for NSAttributedStringKey(0LL);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
        uint64_t v11 = v50;
        objc_msgSend(v41, sel_setAttributes_range_, _NativeDictionary.bridged()(), v50, v36);
        swift_unknownObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v11 = v50;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v50;
      uint64_t v6 = v46;
    }

    BOOL v12 = __OFADD__(v11, v36);
    uint64_t v8 = v11 + v36;
    uint64_t v9 = v49;
    if (v12) {
      goto LABEL_44;
    }
  }

  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);

  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString;
  if (!lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._IndexConverterFromString,  &type metadata for AttributedString._IndexConverterFromString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString;
  if (!lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._IndexConverterFromString,  &type metadata for AttributedString._IndexConverterFromString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString);
  }

  return result;
}

uint64_t NSAttributedString.init<A>(_:includingOnly:)( uint64_t *a1, uint64_t a2, Swift::UInt a3, unint64_t a4)
{
  return NSAttributedString.init<A>(_:including:)(a1, a2, a3, a4);
}

{
  uint64_t v5;
  __int128 v5 = *a1;
  return NSAttributedString.init<A>(_:including:)(&v5, a2, a3, a4);
}

void AttributedString.init(_:)(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = a1;
  uint64_t Default = _loadDefaultAttributes()();
  AttributedString.init(_:attributeTable:options:)(v3, Default, 1LL, &v5);

  *a2 = v5;
}

unint64_t AttributedString.init(_:attributeTable:options:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v8 = objc_msgSend(a1, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  BigString.init(_:)();
  uint64_t aBlock = 0LL;
  MEMORY[0x186E20E78](&aBlock, 8LL);
  uint64_t v80 = 0LL;
  uint64_t v81 = 0LL;
  uint64_t v82 = 0LL;
  uint64_t v83 = aBlock;
  id v79 = 0LL;
  v78[0] = BigString.startIndex.getter();
  v78[1] = v9;
  _OWORD v78[2] = v10;
  v78[3] = v11;
  v77[0] = v78[0];
  v77[1] = v9;
  void v77[2] = v10;
  v77[3] = v11;
  uint64_t v74 = 0LL;
  uint64_t v75 = MEMORY[0x18961AFF0];
  uint64_t v76 = MEMORY[0x18961AFF8];
  char v73 = 0;
  id v12 = objc_msgSend(a1, sel_length);
  uint64_t v13 = swift_allocObject();
  __int128 v14 = v84[1];
  *(_OWORD *)(v13 + 56) = v84[0];
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  uint64_t v15 = v13;
  *(void *)(v13 + 32) = &v79;
  *(void *)(v13 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v77;
  *(void *)(v13 + 48) = v78;
  *(_OWORD *)(v13 + 72) = v14;
  *(_OWORD *)(v13 + 88) = v84[2];
  *(void *)(v13 + 104) = &v74;
  *(void *)(v13 + 112) = &v80;
  *(void *)(v13 + 12__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = &v73;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = partial apply for closure #1 in AttributedString.init(_:attributeTable:options:);
  *(void *)(v16 + 24) = v15;
  __int128 v69 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  uint64_t v70 = v16;
  uint64_t aBlock = MEMORY[0x1895F87A8];
  uint64_t v66 = 1107296256LL;
  __int128 v67 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  uint64_t v68 = &block_descriptor_21;
  uint64_t v17 = _Block_copy(&aBlock);
  swift_retain();
  outlined retain of Locale((uint64_t)v84);
  swift_release();
  objc_msgSend(a1, sel_enumerateAttributesInRange_options_usingBlock_, 0, v12, 0, v17);
  _Block_release(v17);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  unint64_t result = swift_release();
  if ((v17 & 1) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (v79)
  {
    id v19 = v79;
    swift_willThrow();

    outlined release of Locale((uint64_t)v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    return swift_unknownObjectRelease();
  }

  __int128 v59 = a1;
  __int128 v60 = a4;
  uint64_t v20 = v74;
  if (v74 > 0)
  {
    uint64_t v21 = v75;
    uint64_t v22 = v76;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Rope.append(_:)(v20, v21, v22);
  }

  uint64_t v23 = v80;
  uint64_t v24 = v81;
  uint64_t v25 = v82;
  uint64_t v26 = v83;
  type metadata accessor for AttributedString.Guts();
  swift_allocObject();
  outlined retain of Locale((uint64_t)v84);
  swift_unknownObjectRetain();
  int v27 = (_OWORD *)AttributedString.Guts.init(string:runs:)(v84, v23, v24, v25, v26);
  char v28 = v27;
  __int128 v62 = v27;
  if (v73 != 1)
  {
    swift_retain();
    goto LABEL_15;
  }

  __int128 v29 = v27[2];
  __int128 v101 = v27[1];
  __int128 v102 = v29;
  __int128 v103 = v27[3];
  unint64_t v30 = BigString.startIndex.getter();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  unint64_t result = BigString.endIndex.getter();
  if (result >> 10 < v30 >> 10)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v93 = v30;
  uint64_t v94 = v32;
  uint64_t v95 = v34;
  uint64_t v96 = v36;
  unint64_t v97 = result;
  uint64_t v98 = v37;
  uint64_t v99 = v38;
  uint64_t v100 = v39;
  swift_retain();
  AttributedString.Guts.fixScalarConstrainedAttributes(in:)();
  __int128 v40 = v28[2];
  __int128 v90 = v28[1];
  __int128 v91 = v40;
  __int128 v61 = v28 + 1;
  __int128 v92 = v28[3];
  uint64_t v41 = *((void *)v28 + 2);
  uint64_t v42 = *((void *)v28 + 3);
  uint64_t v43 = *((void *)v28 + 4);
  uint64_t v44 = *((void *)v28 + 5);
  uint64_t v46 = *((void *)v28 + 6);
  uint64_t v45 = *((void *)v28 + 7);
  unint64_t v47 = BigString.startIndex.getter();
  uint64_t v104 = v48;
  uint64_t v64 = v49;
  uint64_t v51 = v50;
  if (v47 >> 10 < (unint64_t)BigString.endIndex.getter() >> 10)
  {
    do
    {
      v89[8] = v41;
      v89[9] = v42;
      v89[10] = v43;
      v89[11] = v44;
      v89[12] = v46;
      v89[13] = v45;
      BigString.utf8.getter();
      v89[0] = v47;
      v89[1] = v104;
      v89[2] = v64;
      v89[3] = v51;
      v89[4] = v47;
      v89[5] = v104;
      v89[6] = v64;
      v89[7] = v51;
      specialized BidirectionalCollection<>._getBlock(for:in:)(2, v89, (unint64_t *)&aBlock);
      unint64_t result = outlined release of Locale((uint64_t)v85);
      uint64_t v63 = v72;
      if (v72 == 2) {
        goto LABEL_20;
      }
      unint64_t v53 = (unint64_t)v69;
      uint64_t v52 = v70;
      uint64_t v54 = v71;
      unint64_t v55 = v47 >> 11;
      uint64_t aBlock = 0LL;
      uint64_t v66 = 0LL;
      unint64_t result = AttributedString.Guts._constrainedAttributes(at:with:)(v55, &aBlock);
      if (v53 >> 11 < v55)
      {
        __break(1u);
        goto LABEL_18;
      }

      unint64_t v56 = result;
      uint64_t v64 = v54;
      uint64_t v104 = v52;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString._InternalRunsSlice.updateEach(with:)(v62, v55, v53 >> 11, v56);
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      __int128 v57 = v61[1];
      __int128 v86 = *v61;
      __int128 v87 = v57;
      __int128 v88 = v61[2];
      uint64_t v41 = v62[2];
      uint64_t v42 = v62[3];
      uint64_t v43 = v62[4];
      uint64_t v44 = v62[5];
      uint64_t v46 = v62[6];
      uint64_t v45 = v62[7];
      BOOL v58 = v53 >> 10 >= (unint64_t)BigString.endIndex.getter() >> 10;
      unint64_t v47 = v53;
      uint64_t v51 = v63;
    }

    while (!v58);
  }

void closure #1 in AttributedString.init(_:attributeTable:options:)( uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, void **a7, unint64_t *a8, uint64_t *a9, uint64_t a10, uint64_t *a11, uint64_t a12, _BYTE *a13)
{
  unint64_t v145 = a8;
  uint64_t v138 = a7;
  uint64_t v156 = a6;
  uint64_t v139 = a4;
  uint64_t v143 = a3;
  uint64_t v14 = a1;
  BOOL v141 = a13;
  uint64_t v140 = a12;
  uint64_t v146 = a11;
  uint64_t v144 = a10;
  uint64_t v142 = a9;
  uint64_t v181 = MEMORY[0x18961AFF0];
  uint64_t v182 = MEMORY[0x18961AFF8];
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v158 = a1 + 64;
  uint64_t v16 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & v15;
  id v19 = (char *)&v174 + 8;
  uint64_t v20 = &v184;
  __int128 v152 = @"NSCocoaErrorDomain";
  int64_t v165 = (unint64_t)(v16 + 63) >> 6;
  int64_t v137 = v165 - 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int64_t v21 = 0LL;
  unsigned int v162 = 0LL;
  uint64_t v149 = MEMORY[0x18961AFB8] + 8LL;
  uint64_t v147 = MEMORY[0x18961AFC0] + 8LL;
  uint64_t v157 = v14;
  id v161 = (char *)&v174 + 8;
  uint64_t v160 = a5;
  uint64_t v159 = &v184;
  while (1)
  {
    if (v18)
    {
      unint64_t v22 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v23 = v22 | (v21 << 6);
LABEL_7:
      uint64_t v24 = *(void *)(v14 + 56);
      *(void *)&__int128 v174 = *(void *)(*(void *)(v14 + 48) + 8 * v23);
      uint64_t v25 = (void *)v174;
      outlined init with copy of Any(v24 + 32 * v23, (uint64_t)v19);
      id v26 = v25;
      goto LABEL_17;
    }

    int64_t v27 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }

    if (v27 < v165)
    {
      unint64_t v28 = *(void *)(v158 + 8 * v27);
      if (v28) {
        goto LABEL_11;
      }
      v21 += 2LL;
      if (v27 + 1 >= v165)
      {
        int64_t v21 = v27;
      }

      else
      {
        unint64_t v28 = *(void *)(v158 + 8 * v21);
        if (v28) {
          goto LABEL_14;
        }
        int64_t v102 = v27 + 2;
        if (v27 + 2 < v165)
        {
          unint64_t v28 = *(void *)(v158 + 8 * v102);
          if (v28) {
            goto LABEL_55;
          }
          int64_t v21 = v27 + 3;
          if (v27 + 3 >= v165)
          {
            int64_t v21 = v27 + 2;
          }

          else
          {
            unint64_t v28 = *(void *)(v158 + 8 * v21);
            if (v28)
            {
LABEL_14:
              int64_t v27 = v21;
LABEL_11:
              unint64_t v18 = (v28 - 1) & v28;
              unint64_t v23 = __clz(__rbit64(v28)) + (v27 << 6);
              int64_t v21 = v27;
              goto LABEL_7;
            }

            int64_t v102 = v27 + 4;
            if (v27 + 4 < v165)
            {
              unint64_t v28 = *(void *)(v158 + 8 * v102);
              if (!v28)
              {
                while (1)
                {
                  int64_t v27 = v102 + 1;
                  if (__OFADD__(v102, 1LL)) {
                    goto LABEL_88;
                  }
                  if (v27 >= v165)
                  {
                    int64_t v21 = v137;
                    goto LABEL_16;
                  }

                  unint64_t v28 = *(void *)(v158 + 8 * v27);
                  ++v102;
                  if (v28) {
                    goto LABEL_11;
                  }
                }
              }

uint64_t String.Index.init<A>(_:within:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  __n128 v6 = MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, __n128))(v5 + 16))((char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
  uint64_t v8 = String.Index.init<A>(_:within:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, a3);
  return v8;
}

uint64_t AttributedString.Index.init<A>(_:within:)@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v10 = (_OWORD *)AttributedStringProtocol.__guts.getter(a3, a4);
  __int128 v11 = v10[1];
  __int128 v12 = v10[3];
  v35[1] = v10[2];
  v35[2] = v12;
  v35[0] = v11;
  __int128 v13 = v10[1];
  v36[1] = v10[2];
  void v36[2] = v12;
  v36[0] = v13;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v36, (uint64_t)v37);
  outlined retain of Locale((uint64_t)v37);
  swift_release();
  unint64_t v14 = BigString.index(from:)(a1);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  outlined release of Locale((uint64_t)v35);
  if (v20 == 2
    || ((*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a4 + 32))(v38, a3, a4),
        unint64_t v21 = v14 >> 10,
        v14 >> 10 < *(void *)&v38[0] >> 10)
    || ((*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a4 + 40))(v38, a3, a4),
        v21 > *(void *)&v38[0] >> 10))
  {
    uint64_t result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a2, a3);
  }

  else
  {
    unint64_t v23 = (_OWORD *)AttributedStringProtocol.__guts.getter(a3, a4);
    __int128 v24 = v23[1];
    __int128 v25 = v23[3];
    v34[1] = v23[2];
    v34[2] = v25;
    v34[0] = v24;
    __int128 v26 = v23[1];
    v38[1] = v23[2];
    v38[2] = v25;
    v38[0] = v26;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v38, (uint64_t)v39);
    outlined retain of Locale((uint64_t)v39);
    swift_release();
    unint64_t v27 = MEMORY[0x186E1AE90](v14, v16, v18, v20);
    unint64_t v29 = v28;
    unint64_t v31 = v30;
    unint64_t v33 = v32;
    outlined release of Locale((uint64_t)v34);
    uint64_t result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a2, a3);
    if (v21 == v27 >> 10)
    {
      *a5 = v27;
      a5[1] = v29;
      a5[2] = v31;
      a5[3] = v33;
      return result;
    }
  }

  *a5 = 0LL;
  a5[1] = 0LL;
  a5[2] = 0LL;
  a5[3] = 2LL;
  return result;
}

unint64_t BigString.index(from:)(unint64_t a1)
{
  unsigned __int16 v1 = a1;
  uint64_t v2 = a1 >> 16;
  if ((a1 & 0xC) == 8)
  {
    BigString.utf16.getter();
    uint64_t v3 = BigString.UTF16View.count.getter();
    outlined release of Locale((uint64_t)&v6);
    if (v3 >= v2)
    {
      BigString.utf16.getter();
      BigString.startIndex.getter();
      unint64_t v4 = BigString.UTF16View.index(_:offsetBy:)();
      outlined release of Locale((uint64_t)v7);
      if (v1 >> 14)
      {
        BigString.utf8.getter();
        unint64_t v4 = BigString.UTF8View.index(_:offsetBy:)();
        outlined release of Locale((uint64_t)v8);
      }
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    unint64_t v4 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
  }

  return v4;
}

uint64_t _NSRange.init<A, B>(_:in:)( uint64_t a1, uint64_t a2, uint64_t a3, ValueMetadata *a4, unint64_t a5, uint64_t a6)
{
  void (*v22)(void *__return_ptr, ValueMetadata *, uint64_t);
  unint64_t v23;
  unint64_t v24;
  void (*v25)(char *, ValueMetadata *);
  uint64_t result;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, ValueMetadata *);
  void v34[8];
  uint64_t v35;
  void (*v36)(uint64_t, ValueMetadata *);
  unint64_t v37;
  uint64_t v38;
  void v39[10];
  void v40[10];
  void v41[8];
  char v42[48];
  char v43[48];
  _BYTE v44[48];
  uint64_t v37 = a5;
  uint64_t v38 = a3;
  Description = (void (*)(uint64_t, ValueMetadata *))a4[-1].Description;
  MEMORY[0x1895F8858](a1);
  __int128 v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v14 = MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)v34 - v15;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, __n128))(v17 + 56))(v40, v18, v17, v14);
  v39[0] = v40[0];
  *(_OWORD *)&v39[1] = *(_OWORD *)&v40[1];
  *(_OWORD *)&void v39[3] = *(_OWORD *)&v40[3];
  *(_OWORD *)&v39[5] = *(_OWORD *)&v40[5];
  *(_OWORD *)&v39[7] = *(_OWORD *)&v40[7];
  v39[9] = v40[9];
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  uint64_t v35 = a1;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  swift_release();
  unint64_t v19 = v41[0];
  v34[5] = v41[2];
  v34[6] = v41[1];
  uint64_t v36 = Description;
  uint64_t v37 = v41[4];
  _OWORD v34[3] = v41[5];
  v34[4] = v41[3];
  v34[1] = v41[7];
  v34[2] = v41[6];
  uint64_t v20 = (void (*)(char *, uint64_t, ValueMetadata *))*((void *)Description + 2);
  uint64_t v21 = a2;
  v20(v16, a2, a4);
  unint64_t v22 = *(void (**)(void *__return_ptr, ValueMetadata *, uint64_t))(a6 + 32);
  v22(v40, a4, a6);
  unint64_t v23 = v40[0];
  v34[7] = v19;
  v20(v12, (uint64_t)v16, a4);
  if (v19 >> 10 < v23 >> 10)
  {
    unint64_t v33 = (void (*)(char *, ValueMetadata *))*((void *)v36 + 1);
    v33(v12, a4);
    uint64_t result = ((uint64_t (*)(char *, ValueMetadata *))v33)(v16, a4);
    goto LABEL_6;
  }

  (*(void (**)(void *__return_ptr, ValueMetadata *, uint64_t))(a6 + 40))(v40, a4, a6);
  __int128 v24 = v40[0] >> 10;
  __int128 v25 = (void (*)(char *, ValueMetadata *))*((void *)v36 + 1);
  v25(v12, a4);
  uint64_t result = ((uint64_t (*)(char *, ValueMetadata *))v25)(v16, a4);
  if (v24 < v37 >> 10)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  unint64_t v27 = (_OWORD *)AttributedStringProtocol.__guts.getter(a4, a6);
  unint64_t v28 = v27[1];
  unint64_t v29 = v27[3];
  *(_OWORD *)&_OWORD v39[2] = v27[2];
  *(_OWORD *)&v39[4] = v29;
  *(_OWORD *)uint64_t v39 = v28;
  unint64_t v30 = v27[1];
  *(_OWORD *)&v40[2] = v27[2];
  *(_OWORD *)&v40[4] = v29;
  *(_OWORD *)uint64_t v40 = v30;
  outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)v40, (uint64_t)v44);
  outlined retain of Locale((uint64_t)v44);
  swift_release();
  BigString.utf16.getter();
  BigString.startIndex.getter();
  uint64_t v36 = (void (*)(uint64_t, ValueMetadata *))v25;
  v22(v41, a4, a6);
  unint64_t v31 = BigString.UTF16View.distance(from:to:)();
  outlined release of Locale((uint64_t)v42);
  BigString.utf16.getter();
  unint64_t v32 = BigString.UTF16View.distance(from:to:)();
  outlined release of Locale((uint64_t)v43);
  BigString.utf16.getter();
  BigString.UTF16View.distance(from:to:)();
  outlined release of Locale((uint64_t)v39);
  outlined release of Locale((uint64_t)v41);
  v36(v21, a4);
  (*(void (**)(uint64_t))(*(void *)(v38 - 8) + 8LL))(v35);
  uint64_t result = v32 - v31;
  if (__OFSUB__(v32, v31)) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t _NSRange.init<A>(_:in:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(result + 40);
  LOBYTE(v6) = *(_BYTE *)(result + 64);
  uint64_t v7 = *(void *)(result + 72);
  uint64_t v9 = *(void *)(result + 88);
  uint64_t v8 = *(void *)(result + 96);
  LOBYTE(v1__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_BYTE *)(result + 104);
  if ((v6 & 1) != 0 || (*(_BYTE *)(result + 104) & 1) != 0) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
  uint64_t v6 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
LABEL_14:
    __break(1u);
  }

  else
  {
    while (1)
    {
      uint64_t v10 = v5;
      if (v6 == v9)
      {
        uint64_t v10 = v5 + v8;
        if (__OFADD__(v5, v8)) {
          break;
        }
      }

      if (!__OFSUB__(v10, v5)) {
        return v5;
      }
      __break(1u);
LABEL_9:
      uint64_t v11 = *(void *)(result + 80);
      uint64_t v12 = *(void *)(result + 32);
      __int128 v13 = *(_OWORD *)(result + 16);
      v14[0] = *(_OWORD *)result;
      v14[1] = v13;
      uint64_t v15 = v12;
      uint64_t v16 = v5;
      __int128 v17 = *(_OWORD *)(result + 48);
      char v18 = v6;
      uint64_t v19 = v7;
      uint64_t v20 = v11;
      uint64_t v21 = v9;
      uint64_t v22 = v8;
      char v23 = v10;
      AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)(a2, a3, v24);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
      uint64_t result = outlined init with take of LocalePreferences?( (uint64_t)v24,  (uint64_t)v14,  &demangling cache variable for type metadata for (start: AttributedString.MarkdownSourcePosition.Offsets, end: AttributedString.MarkdownSourcePosition.Offsets)?);
      if ((v18 & 1) != 0) {
        return 0x7FFFFFFFFFFFFFFFLL;
      }
      uint64_t v5 = *((void *)&v14[0] + 1);
      uint64_t v7 = v15;
      uint64_t v8 = *((void *)&v17 + 1);
      uint64_t v9 = v17;
      uint64_t v6 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_14;
      }
    }
  }

  __break(1u);
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance AttributedString._IndexConverterFromString( uint64_t *a1@<X8>)
{
  *a1 = (*(void *)(v1 + 48) >> 11 << 16) | 4LL;
}

void protocol witness for Collection.endIndex.getter in conformance AttributedString._IndexConverterFromString( uint64_t *a1@<X8>)
{
  *a1 = (*(void *)(v1 + 80) >> 11 << 16) | 4LL;
}

unint64_t protocol witness for Collection.subscript.getter in conformance AttributedString._IndexConverterFromString@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString._IndexConverterFromString@<X0>( uint64_t a1@<X8>)
{
  return specialized Collection<>.indices.getter(a1);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AttributedString._IndexConverterFromString()
{
  return specialized Collection.isEmpty.getter();
}

unint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString._IndexConverterFromString@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = specialized Collection.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  if (a5 < 0)
  {
    __break(1u);
  }

  else
  {
    for (uint64_t i = a5; i; --i)
    {
      Substring.index(after:)();
      unint64_t result = BigString.Index.init(_utf8Offset:)();
    }

    *a6 = result;
    a6[1] = a2;
    a6[2] = a3;
    a6[3] = a4;
  }

  return result;
}

unint64_t specialized Collection.index(_:offsetBy:)(unint64_t result, uint64_t a2)
{
  if (a2 < 0) {
    goto LABEL_14;
  }
  uint64_t v3 = a2;
  unint64_t v4 = result;
  if (!a2) {
    return v4;
  }
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v8 = v2[3];
  uint64_t v12 = v2[5];
  uint64_t v13 = v2[4];
  uint64_t v11 = v8;
  while ((v4 & 0xC) == 8)
  {
    uint64_t v23 = v5;
    uint64_t v24 = v6;
    uint64_t v25 = v7;
    uint64_t v26 = v8;
    uint64_t v27 = v13;
    uint64_t v28 = v12;
    BigString.utf16.getter();
    uint64_t v10 = BigString.UTF16View.count.getter();
    unint64_t result = outlined release of Locale((uint64_t)v14);
    BigString.utf16.getter();
    BigString.startIndex.getter();
    BigString.UTF16View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v15);
    if ((unsigned __int16)v4 >> 14)
    {
      BigString.utf8.getter();
      BigString.UTF8View.index(_:offsetBy:)();
      outlined release of Locale((uint64_t)v16);
    }

    uint64_t v8 = v11;
LABEL_5:
    uint64_t v17 = v5;
    uint64_t v18 = v6;
    uint64_t v19 = v7;
    uint64_t v20 = v8;
    uint64_t v21 = v13;
    uint64_t v22 = v12;
    unint64_t v4 = ((unint64_t)BigString.index(after:)() >> 11 << 16) | 4;
    if (!--v3) {
      return v4;
    }
  }

  uint64_t v29 = v5;
  uint64_t v30 = v6;
  uint64_t v31 = v7;
  uint64_t v32 = v8;
  uint64_t v33 = v13;
  uint64_t v34 = v12;
  unint64_t v9 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
  unint64_t result = BigString.endIndex.getter();
  if (result >> 10 >= v9 >> 10) {
    goto LABEL_5;
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

unint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString._IndexConverterFromString@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  if (a5 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = a5;
    if (a5)
    {
      while ((result ^ a6) >= 0x400)
      {
        Substring.index(after:)();
        unint64_t result = BigString.Index.init(_utf8Offset:)();
        if (!--v7) {
          goto LABEL_5;
        }
      }

      *a7 = 0LL;
      a7[1] = 0LL;
      a7[2] = 0LL;
      a7[3] = 2LL;
    }

    else
    {
LABEL_5:
      *a7 = result;
      a7[1] = a2;
      a7[2] = a3;
      a7[3] = a4;
    }
  }

  return result;
}

unint64_t specialized Collection.index(_:offsetBy:limitedBy:)( unint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0) {
    goto LABEL_15;
  }
  uint64_t v4 = a2;
  unint64_t v5 = result;
  if (!a2) {
    return v5;
  }
  char v6 = v3;
  while (1)
  {
    if ((v5 ^ a3) < 0x4000) {
      return 0LL;
    }
    uint64_t v10 = v6[1];
    uint64_t v11 = v6[2];
    uint64_t v12 = v6[3];
    uint64_t v14 = v6[4];
    uint64_t v13 = v6[5];
    uint64_t v19 = v10;
    uint64_t v20 = *v6;
    uint64_t v17 = v12;
    uint64_t v18 = v11;
    if ((v5 & 0xC) != 8) {
      break;
    }
    uint64_t v30 = *v6;
    uint64_t v31 = v10;
    uint64_t v32 = v11;
    uint64_t v33 = v12;
    uint64_t v7 = v14;
    uint64_t v34 = v14;
    uint64_t v35 = v13;
    uint64_t v8 = v13;
    BigString.utf16.getter();
    uint64_t v15 = BigString.UTF16View.count.getter();
    unint64_t result = outlined release of Locale((uint64_t)v21);
    BigString.utf16.getter();
    BigString.startIndex.getter();
    BigString.UTF16View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v22);
    if ((unsigned __int16)v5 >> 14)
    {
      BigString.utf8.getter();
      BigString.UTF8View.index(_:offsetBy:)();
      outlined release of Locale((uint64_t)v23);
    }

unint64_t protocol witness for Collection.distance(from:to:) in conformance AttributedString._IndexConverterFromString( unint64_t *a1, unint64_t *a2)
{
  return specialized Collection.distance(from:to:)(*a1, *a2);
}

unint64_t specialized Collection.distance(from:to:)( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5 = a5 >> 10;
  if (a5 >> 10 >= result >> 10)
  {
    if (result >> 10 == v5) {
      return 0LL;
    }
    Substring.index(after:)();
    unint64_t result = BigString.Index.init(_utf8Offset:)();
    if (v5 == result >> 10) {
      return 1LL;
    }
    for (uint64_t i = 1LL; ; ++i)
    {
      uint64_t v6 = i + 1;
      if (__OFADD__(i, 1LL)) {
        break;
      }
      Substring.index(after:)();
      unint64_t result = BigString.Index.init(_utf8Offset:)();
      if (v5 == result >> 10) {
        return v6;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t specialized Collection.distance(from:to:)(unint64_t result, unint64_t a2)
{
  unint64_t v3 = a2 >> 14;
  if (a2 >> 14 < result >> 14)
  {
LABEL_16:
    __break(1u);
    return result;
  }

  if (result >> 14 != v3)
  {
    unint64_t v5 = result;
    uint64_t v6 = 0LL;
    __int128 v7 = v2[1];
    __int128 v13 = *v2;
    __int128 v14 = v7;
    __int128 v15 = v2[2];
    while (1)
    {
      uint64_t v4 = v6 + 1;
      if (__OFADD__(v6, 1LL)) {
        break;
      }
      if ((v5 & 0xC) == 8)
      {
        BigString.utf16.getter();
        uint64_t v9 = BigString.UTF16View.count.getter();
        unint64_t result = outlined release of Locale((uint64_t)&v10);
        BigString.utf16.getter();
        BigString.startIndex.getter();
        BigString.UTF16View.index(_:offsetBy:)();
        outlined release of Locale((uint64_t)v11);
        if ((unsigned __int16)v5 >> 14)
        {
          BigString.utf8.getter();
          BigString.UTF8View.index(_:offsetBy:)();
          outlined release of Locale((uint64_t)v12);
        }
      }

      else
      {
        unint64_t v8 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
        unint64_t result = BigString.endIndex.getter();
        if (result >> 10 < v8 >> 10) {
          goto LABEL_14;
        }
      }

      unint64_t result = BigString.index(after:)();
      unint64_t v5 = (result >> 11 << 16) | 4;
      ++v6;
      if (v3 == ((32 * result) & 0xFFFFFFFFFFFF0000LL) >> 14) {
        return v4;
      }
    }

    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  return 0LL;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString._IndexConverterFromString( void *result, void *a2)
{
  unint64_t v2 = *result >> 14;
  if (v2 < *a2 >> 14 || v2 >= a2[1] >> 14) {
    __break(1u);
  }
  return result;
}

{
  unint64_t v2;
  unint64_t v2 = *result >> 14;
  if (v2 < *a2 >> 14 || a2[1] >> 14 < v2) {
    __break(1u);
  }
  return result;
}

{
  if (*result >> 14 < *a2 >> 14 || a2[1] >> 14 < result[1] >> 14) {
    __break(1u);
  }
  return result;
}

unint64_t protocol witness for Collection.index(after:) in conformance AttributedString._IndexConverterFromString@<X0>( unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = BigString.index(from:)(*a1);
  if (v4 == 2)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = BigString.index(after:)();
    *a2 = (result >> 11 << 16) | 4;
  }

  return result;
}

unint64_t protocol witness for Collection.formIndex(after:) in conformance AttributedString._IndexConverterFromString( unint64_t *a1)
{
  __int128 v3 = v1[1];
  __int128 v12 = *v1;
  __int128 v13 = v3;
  __int128 v14 = v1[2];
  unint64_t v4 = *a1;
  uint64_t v5 = *a1 >> 16;
  if ((*a1 & 0xC) == 8)
  {
    BigString.utf16.getter();
    uint64_t v6 = BigString.UTF16View.count.getter();
    unint64_t result = outlined release of Locale((uint64_t)&v9);
    if (v6 >= v5)
    {
      BigString.utf16.getter();
      BigString.startIndex.getter();
      BigString.UTF16View.index(_:offsetBy:)();
      outlined release of Locale((uint64_t)v10);
      if ((unsigned __int16)v4 >> 14)
      {
        BigString.utf8.getter();
        BigString.UTF8View.index(_:offsetBy:)();
        outlined release of Locale((uint64_t)v11);
      }

      goto LABEL_6;
    }

    __break(1u);
  }

  else
  {
    unint64_t v8 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
    unint64_t result = BigString.endIndex.getter();
    if (result >> 10 >= v8 >> 10)
    {
LABEL_6:
      unint64_t result = BigString.index(after:)();
      *a1 = (result >> 11 << 16) | 4;
      return result;
    }
  }

  __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance AttributedString._IndexConverterFromString@<Q0>( uint64_t a1@<X8>)
{
  __int128 v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  unint64_t v4 = ((unint64_t)v3 >> 11 << 16) | 4;
  __int128 v5 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v5;
  __n128 result = *(__n128 *)(v1 + 96);
  *(__n128 *)(a1 + 96) = result;
  *(void *)(a1 + 112) = v4;
  return result;
}

unint64_t protocol witness for Collection.count.getter in conformance AttributedString._IndexConverterFromString()
{
  return specialized Collection.distance(from:to:)( (*(void *)(v0 + 48) >> 11 << 16) | 4LL,  (*(void *)(v0 + 80) >> 11 << 16) | 4LL);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString._IndexConverterFromString()
{
  __int128 v1 = v0[5];
  id v6[4] = v0[4];
  v6[5] = v1;
  v6[6] = v0[6];
  __int128 v2 = v0[1];
  v6[0] = *v0;
  v6[1] = v2;
  __int128 v3 = v0[3];
  void v6[2] = v0[2];
  v6[3] = v3;
  uint64_t v4 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v6);
  outlined release of Locale((uint64_t)v6);
  return v4;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString._IndexConverterFromString( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString._IndexConverterFromString@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

uint64_t Range<>.init<A>(_:in:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, ValueMetadata *a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  if (result == 0x7FFFFFFFFFFFFFFFLL || result < 0 || a2 < 0)
  {
    __n128 result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
  }

  else
  {
    uint64_t v9 = result + a2;
    if (__OFADD__(result, a2))
    {
      __break(1u);
      return result;
    }

    uint64_t v11 = (_OWORD *)AttributedStringProtocol.__guts.getter(a4, a5);
    __int128 v12 = v11[1];
    __int128 v13 = v11[3];
    v35[1] = v11[2];
    v35[2] = v13;
    v35[0] = v12;
    __int128 v14 = v11[1];
    v36[1] = v11[2];
    void v36[2] = v13;
    v36[0] = v14;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v36, (uint64_t)v37);
    outlined retain of Locale((uint64_t)v37);
    swift_release();
    BigString.utf16.getter();
    uint64_t v15 = BigString.UTF16View.count.getter();
    outlined release of Locale((uint64_t)v32);
    if (v15 < v9) {
      goto LABEL_7;
    }
    BigString.utf16.getter();
    BigString.startIndex.getter();
    unint64_t v16 = BigString.UTF16View.index(_:offsetBy:)();
    unint64_t v18 = v17;
    unint64_t v20 = v19;
    unint64_t v22 = v21;
    outlined release of Locale((uint64_t)v33);
    BigString.utf16.getter();
    unint64_t v23 = BigString.UTF16View.index(_:offsetBy:)();
    unint64_t v28 = v24;
    unint64_t v29 = v25;
    unint64_t v30 = v26;
    outlined release of Locale((uint64_t)v34);
    (*(void (**)(void *__return_ptr, ValueMetadata *, uint64_t))(a5 + 32))(v31, a4, a5);
    if (v16 >> 10 >= v31[0] >> 10)
    {
      (*(void (**)(void *__return_ptr, ValueMetadata *, uint64_t))(a5 + 40))(v31, a4, a5);
      outlined release of Locale((uint64_t)v35);
      unint64_t v27 = v31[0] >> 10;
      __n128 result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
      if (v27 >= v23 >> 10)
      {
        *a6 = v16;
        a6[1] = v18;
        a6[2] = v20;
        a6[3] = v22;
        a6[4] = v23;
        a6[5] = v28;
        a6[6] = v30;
        a6[7] = v29;
        return result;
      }
    }

    else
    {
LABEL_7:
      (*((void (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
      __n128 result = outlined release of Locale((uint64_t)v35);
    }
  }

  *a6 = 0LL;
  a6[1] = 0LL;
  a6[2] = 0LL;
  a6[3] = 2LL;
  *((_OWORD *)a6 + 2) = 0u;
  *((_OWORD *)a6 + 3) = 0u;
  return result;
}

uint64_t Range<>.init<A>(_range:in:)@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, ValueMetadata *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v12 = (_OWORD *)AttributedStringProtocol.__guts.getter(a4, a5);
  __int128 v13 = v12[1];
  __int128 v14 = v12[3];
  v37[1] = v12[2];
  v37[2] = v14;
  v37[0] = v13;
  __int128 v15 = v12[1];
  v38[1] = v12[2];
  v38[2] = v14;
  v38[0] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v38, (uint64_t)v39);
  outlined retain of Locale((uint64_t)v39);
  swift_release();
  unint64_t v16 = BigString.index(from:)(a1);
  uint64_t v34 = v17;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined release of Locale((uint64_t)v37);
  if (v21 == 2) {
    goto LABEL_5;
  }
  unint64_t v22 = (_OWORD *)AttributedStringProtocol.__guts.getter(a4, a5);
  __int128 v23 = v22[1];
  __int128 v24 = v22[3];
  v36[1] = v22[2];
  void v36[2] = v24;
  v36[0] = v23;
  __int128 v25 = v22[1];
  v40[1] = v22[2];
  v40[2] = v24;
  v40[0] = v25;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v40, (uint64_t)v41);
  outlined retain of Locale((uint64_t)v41);
  swift_release();
  unint64_t v26 = BigString.index(from:)(a2);
  uint64_t v32 = v28;
  uint64_t v33 = v27;
  uint64_t v30 = v29;
  outlined release of Locale((uint64_t)v36);
  if (v30 == 2
    || ((*(void (**)(void *__return_ptr, ValueMetadata *, uint64_t))(a5 + 32))(v35, a4, a5),
        v16 >> 10 < v35[0] >> 10)
    || ((*(void (**)(void *__return_ptr, ValueMetadata *, uint64_t))(a5 + 40))(v35, a4, a5),
        v35[0] >> 10 < v26 >> 10))
  {
LABEL_5:
    uint64_t result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
    *(void *)a6 = 0LL;
    *(void *)(a6 + 8) = 0LL;
    *(void *)(a6 + 16) = 0LL;
    *(void *)(a6 + 24) = 2LL;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
  }

  else
  {
    uint64_t result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
    *(void *)a6 = v16;
    *(void *)(a6 + 8) = v34;
    *(void *)(a6 + 16) = v19;
    *(void *)(a6 + 24) = v21;
    *(void *)(a6 + 32) = v26;
    *(void *)(a6 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v33;
    *(void *)(a6 + 48) = v32;
    *(void *)(a6 + 56) = v30;
  }

  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance AttributedString._IndexConverterFromAttributedString@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = BigString.Index.init(_utf8Offset:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance AttributedString._IndexConverterFromAttributedString@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = BigString.Index.init(_utf8Offset:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance AttributedString._IndexConverterFromAttributedString( _OWORD *a1, _OWORD *a2))(void, void)
{
  __int128 v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  return destructiveProjectEnumData for PredicateCodableError;
}

unint64_t protocol witness for Collection.subscript.getter in conformance AttributedString._IndexConverterFromAttributedString@<X0>( unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *a1;
  unint64_t v16 = a1[2];
  unint64_t v17 = a1[1];
  unint64_t v5 = a1[4];
  unint64_t v6 = a1[5];
  unint64_t v7 = a1[6];
  unint64_t v14 = a1[7];
  unint64_t v15 = a1[3];
  uint64_t v8 = *v2;
  uint64_t v9 = v2[1];
  uint64_t v11 = v2[2];
  uint64_t v10 = v2[3];
  unint64_t v12 = BigString.Index.init(_utf8Offset:)();
  unint64_t result = BigString.Index.init(_utf8Offset:)();
  if (result >> 10 < v12 >> 10)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v12 >> 10 > v4 >> 10)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (result >> 10 >= v5 >> 10)
  {
    a2[8] = v8;
    a2[9] = v9;
    a2[10] = v11;
    a2[11] = v10;
    *a2 = v4;
    a2[1] = v17;
    a2[2] = v16;
    a2[3] = v15;
    a2[4] = v5;
    a2[5] = v6;
    a2[6] = v7;
    a2[7] = v14;
    return swift_bridgeObjectRetain();
  }

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString._IndexConverterFromAttributedString@<X0>( uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = BigString.Index.init(_utf8Offset:)();
  *(void *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v4;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = BigString.Index.init(_utf8Offset:)();
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v8;
  *(void *)(a1 + 88) = v9;
  return swift_bridgeObjectRetain();
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AttributedString._IndexConverterFromAttributedString()
{
  uint64_t v0 = BigString.Index.init(_utf8Offset:)();
  return (BigString.Index.init(_utf8Offset:)() ^ (unint64_t)v0) < 0x400;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString._IndexConverterFromAttributedString@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:)(*a1, a1[1], a1[2], a1[3], a2, a3);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString._IndexConverterFromAttributedString@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  return specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a1[1], a1[2], a1[3], a2, *a3, a4);
}

unint64_t protocol witness for Collection.distance(from:to:) in conformance AttributedString._IndexConverterFromAttributedString( uint64_t a1, unint64_t *a2)
{
  return specialized Collection.distance(from:to:)( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *a2);
}

uint64_t protocol witness for Collection.index(after:) in conformance AttributedString._IndexConverterFromAttributedString@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = BigString.Index.init(_utf8Offset:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AttributedString._IndexConverterFromAttributedString( uint64_t *a1)
{
  uint64_t result = BigString.Index.init(_utf8Offset:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance AttributedString._IndexConverterFromAttributedString@<Q0>( uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  __n128 v10 = *(__n128 *)(v1 + 1);
  uint64_t v4 = v1[3];
  uint64_t v5 = BigString.Index.init(_utf8Offset:)();
  *(void *)a1 = v3;
  __n128 result = v10;
  *(__n128 *)(a1 + 8) = v10;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  return result;
}

unint64_t protocol witness for Collection.count.getter in conformance AttributedString._IndexConverterFromAttributedString()
{
  unint64_t v0 = BigString.Index.init(_utf8Offset:)();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  unint64_t v7 = BigString.Index.init(_utf8Offset:)();
  return specialized Collection.distance(from:to:)(v0, v2, v4, v6, v7);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString._IndexConverterFromAttributedString()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1], v0[2], v0[3]);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString._IndexConverterFromAttributedString( void *a1, unint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2], v3[3]);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString._IndexConverterFromAttributedString@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV5IndexVqd__Isgyrzo_AJ01_k13ConverterFromiJ0VABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

uint64_t Range<>.init<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  __n128 v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v14 = MEMORY[0x1895F8858](v13);
  (*(void (**)(char *, uint64_t, __n128))(v12 + 16))( (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  if ((swift_dynamicCast() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a4);
    unint64_t v16 = Substring.init<A>(_:)();
    uint64_t v18 = specialized Range<>.init(_range:in:)(&v34, v16, v17);
    char v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, a4);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a4);
    unint64_t v21 = Substring.init<A>(_:)();
    unint64_t v23 = v22;
    uint64_t v29 = a2;
    unint64_t v30 = v21;
    unint64_t v31 = v22;
    uint64_t v32 = v24;
    uint64_t v33 = v25;
    lazy protocol witness table accessor for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    uint64_t v18 = specialized Range<>.init(_range:in:)(&v34, v21, v23);
    char v20 = v26;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v29, a4);
  }

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a3);
  if ((v20 & 1) != 0) {
    return 0LL;
  }
  return v18;
}

uint64_t specialized Dictionary<>.init(_:attributeTable:options:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v57 = a3;
  uint64_t v6 = *a1;
  v56[1] = a1[1];
  uint64_t v77 = MEMORY[0x18961AFF0];
  swift_bridgeObjectRetain();
  int64_t v7 = 0LL;
  uint64_t v8 = v6 + 64;
  uint64_t v9 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v61 = v6;
  uint64_t v60 = a2;
  uint64_t v59 = v6 + 64;
  int64_t v58 = v12;
  while (1)
  {
    while (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
      if (*(void *)(a2 + 16))
      {
LABEL_21:
        uint64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v14);
        uint64_t v19 = *v18;
        uint64_t v20 = v18[1];
        swift_bridgeObjectRetain();
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        if ((v22 & 1) != 0)
        {
          id v66 = v4;
          unint64_t v23 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v21);
          uint64_t v24 = v6;
          uint64_t v25 = *v23;
          uint64_t v26 = v23[1];
          uint64_t v27 = (void *)String._bridgeToObjectiveCImpl()();
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          uint64_t v65 = v56;
          uint64_t v69 = AssociatedTypeWitness;
          uint64_t v67 = *(void *)(AssociatedTypeWitness - 8);
          uint64_t v29 = *(void *)(v67 + 64);
          __n128 v30 = MEMORY[0x1895F8858](AssociatedTypeWitness);
          uint64_t v68 = (void *)((char *)v56 - v31);
          uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v26 + 24))(v25, v26, v30);
          if (*(void *)(v24 + 16) && (unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33), (v35 & 1) != 0))
          {
            outlined init with copy of AttributedString._AttributeValue(*(void *)(v24 + 56) + 72 * v34, (uint64_t)&v71);
          }

          else
          {
            uint64_t v75 = 0LL;
            __int128 v73 = 0u;
            __int128 v74 = 0u;
            __int128 v71 = 0u;
            __int128 v72 = 0u;
          }

          uint64_t v36 = v69;
          swift_bridgeObjectRelease();
          if (!*((void *)&v72 + 1)) {
            goto LABEL_53;
          }
          id v64 = v27;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v71,  (uint64_t)v70);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          uint64_t v37 = v68;
          swift_dynamicCast();
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v71);
          uint64_t v38 = swift_conformsToProtocol2();
          if (v38) {
            uint64_t v39 = v38;
          }
          else {
            uint64_t v39 = 0LL;
          }
          if (v38) {
            uint64_t v40 = v25;
          }
          else {
            uint64_t v40 = 0LL;
          }
          if (!v40)
          {
            uint64_t v4 = v66;
            uint64_t isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
            if ((isClassOrObjCExistentialType & 1) != 0)
            {
              if (v29 != 8) {
                goto LABEL_51;
              }
              uint64_t v49 = v68;
              uint64_t v50 = *v68;
              swift_unknownObjectRetain();
              uint64_t v51 = v67;
            }

            else
            {
              __n128 v52 = MEMORY[0x1895F8858](isClassOrObjCExistentialType);
              unint64_t v53 = (char *)v56 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
              uint64_t v51 = v67;
              id v54 = v68;
              (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v67 + 16))(v53, v68, v69, v52);
              uint64_t v49 = v54;
              uint64_t v50 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
              uint64_t v36 = v69;
            }

            goto LABEL_41;
          }

          uint64_t v63 = v56;
          __n128 v41 = MEMORY[0x1895F8858](v38);
          (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v67 + 16))( (char *)v56 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v37,  v69,  v41);
          uint64_t v42 = swift_getAssociatedTypeWitness();
          __int128 v62 = v56;
          uint64_t v43 = *(void *)(v42 - 8);
          MEMORY[0x1895F8858](v42);
          uint64_t v45 = (char *)v56 - v44;
          uint64_t v36 = v69;
          swift_dynamicCast();
          uint64_t v46 = v66;
          uint64_t v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 24))(v45, v40, v39);
          uint64_t v4 = v46;
          if (!v46)
          {
            uint64_t v50 = v47;
            (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
            uint64_t v51 = v67;
            uint64_t v49 = v68;
LABEL_41:
            (*(void (**)(uint64_t *, uint64_t))(v51 + 8))(v49, v36);
            uint64_t v76[3] = swift_getObjectType();
            v76[0] = v50;
            specialized Dictionary.subscript.setter((uint64_t)v76, v64);
            swift_bridgeObjectRelease();
            goto LABEL_42;
          }

          (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t *, uint64_t))(v67 + 8))(v68, v36);
          swift_bridgeObjectRelease();
          if ((v57 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_willThrow();
            return swift_release();
          }

          uint64_t v4 = 0LL;
LABEL_42:
          uint64_t v6 = v61;
          a2 = v60;
          uint64_t v8 = v59;
          int64_t v12 = v58;
        }

        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }

    if (__OFADD__(v7++, 1LL))
    {
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }

    if (v7 >= v12) {
      goto LABEL_48;
    }
    unint64_t v16 = *(void *)(v8 + 8 * v7);
    if (!v16) {
      break;
    }
LABEL_20:
    unint64_t v11 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
    if (*(void *)(a2 + 16)) {
      goto LABEL_21;
    }
  }

  int64_t v17 = v7 + 1;
  if (v7 + 1 >= v12) {
    goto LABEL_48;
  }
  unint64_t v16 = *(void *)(v8 + 8 * v17);
  if (v16) {
    goto LABEL_19;
  }
  int64_t v17 = v7 + 2;
  if (v7 + 2 >= v12) {
    goto LABEL_48;
  }
  unint64_t v16 = *(void *)(v8 + 8 * v17);
  if (v16) {
    goto LABEL_19;
  }
  int64_t v17 = v7 + 3;
  if (v7 + 3 >= v12) {
    goto LABEL_48;
  }
  unint64_t v16 = *(void *)(v8 + 8 * v17);
  if (v16) {
    goto LABEL_19;
  }
  int64_t v17 = v7 + 4;
  if (v7 + 4 >= v12)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v77;
  }

  unint64_t v16 = *(void *)(v8 + 8 * v17);
  if (v16)
  {
LABEL_19:
    int64_t v7 = v17;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v7 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_48;
    }
    unint64_t v16 = *(void *)(v8 + 8 * v7);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    type metadata accessor for NSAttributedStringKey(255LL);
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSAttributedStringKey, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._IndexConverterFromAttributedString,  &type metadata for AttributedString._IndexConverterFromAttributedString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._IndexConverterFromAttributedString,  &type metadata for AttributedString._IndexConverterFromAttributedString);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString);
  }

  return result;
}

uint64_t specialized Range<>.init(_range:in:)(void *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5 = a1[4];
  unint64_t v6 = (16 * (unsigned __int16)*a1) & 0x4000 | (*a1 >> 11 << 16);
  swift_bridgeObjectRelease();
  if (v6 >> 14 >= a2 >> 14 && a3 >> 14 >= ((32 * v5) & 0xFFFFFFFFFFFF0000LL | (((v5 >> 10) & 1) << 14)) >> 14) {
    return v6 | 4;
  }
  else {
    return 0LL;
  }
}

uint64_t dispatch thunk of static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static ObjectiveCConvertibleAttributedStringKey.value(for:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t destroy for AttributedString._IndexConverterFromAttributedString()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttributedString._IndexConverterFromAttributedString(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AttributedString._IndexConverterFromAttributedString(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttributedString._IndexConverterFromAttributedString(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString._IndexConverterFromAttributedString(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(outlined consume of Data._Representation(v0, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString._IndexConverterFromAttributedString( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString._IndexConverterFromAttributedString()
{
  return &type metadata for AttributedString._IndexConverterFromAttributedString;
}

uint64_t initializeWithCopy for AttributedString._IndexConverterFromString(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 40);
  __int128 v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v3;
  __int128 v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString._IndexConverterFromString(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  __int128 v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 80);
  __int128 v5 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  return a1;
}

uint64_t assignWithTake for AttributedString._IndexConverterFromString(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v4;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString._IndexConverterFromString(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 112)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString._IndexConverterFromString( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 112) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString._IndexConverterFromString()
{
  return &type metadata for AttributedString._IndexConverterFromString;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString._IndexConverterFromString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IndexingIterator<AttributedString._IndexConverterFromString> and conformance IndexingIterator<A>,  &demangling cache variable for type metadata for IndexingIterator<AttributedString._IndexConverterFromString>,  MEMORY[0x189619678]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString._IndexConverterFromAttributedString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IndexingIterator<AttributedString._IndexConverterFromAttributedString> and conformance IndexingIterator<A>,  &demangling cache variable for type metadata for IndexingIterator<AttributedString._IndexConverterFromAttributedString>,  MEMORY[0x189619678]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString._IndexConverterFromAttributedString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type DefaultIndices<AttributedString._IndexConverterFromAttributedString> and conformance DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<AttributedString._IndexConverterFromAttributedString>,  MEMORY[0x189617A28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString._IndexConverterFromAttributedString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Slice<AttributedString._IndexConverterFromAttributedString> and conformance Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString._IndexConverterFromAttributedString>,  MEMORY[0x18961A5E8]);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in AttributedString._IndexConverterFromString()
{
  return MEMORY[0x189617E08];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString._IndexConverterFromString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type DefaultIndices<AttributedString._IndexConverterFromString> and conformance DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<AttributedString._IndexConverterFromString>,  MEMORY[0x189617A28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString._IndexConverterFromString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Slice<AttributedString._IndexConverterFromString> and conformance Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString._IndexConverterFromString>,  MEMORY[0x18961A5E8]);
}

uint64_t sub_1834B5F80()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in AttributedString.init(_:attributeTable:options:)( uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
}

uint64_t sub_1834B5FEC()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

id URLResource.bundle.getter()
{
  return *v0;
}

uint64_t URLResource.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLResource.subdirectory.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLResource.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 40);
  return swift_unknownObjectRetain();
}

__n128 URLResource.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *a1;
  return result;
}

uint64_t (*URLResource.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 URLResource.init(name:subdirectory:locale:bundle:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = a6;
  *(void *)(a7 + 8) = a1;
  *(void *)(a7 + 16) = a2;
  *(void *)(a7 + 24) = a3;
  *(void *)(a7 + 32) = a4;
  __n128 result = *a5;
  *(__n128 *)(a7 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *a5;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URLResource.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1834B6100 + 4 * byte_183830DCC[*v0]))( 1701667182LL,  0xE400000000000000LL);
}

uint64_t sub_1834B6100()
{
  return 0x6365726964627573LL;
}

uint64_t sub_1834B6120()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_1834B6134()
{
  return 0x6150656C646E7562LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URLResource.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized URLResource.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URLResource.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URLResource.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t URLResource.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URLResource.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  int64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void **)v1;
  uint64_t v20 = *(void *)(v1 + 24);
  uint64_t v9 = *(void *)(v1 + 32);
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  __int128 v17 = *(_OWORD *)(v1 + 40);
  uint64_t v10 = a1[3];
  unint64_t v11 = a1;
  uint64_t v13 = v12;
  __swift_project_boxed_opaque_existential_1(v11, v10);
  lazy protocol witness table accessor for type URLResource.CodingKeys and conformance URLResource.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v21) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v13);
  }
  unint64_t v14 = v18;
  LOBYTE(v21) = 1;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  __int128 v21 = v17;
  char v22 = 2;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  id v15 = objc_msgSend(v14, sel_bundlePath);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v15);

  LOBYTE(v21) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type URLResource.CodingKeys and conformance URLResource.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLResource.CodingKeys, &unk_189C94CC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLResource.CodingKeys, &unk_189C94CC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLResource.CodingKeys, &unk_189C94CC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLResource.CodingKeys, &unk_189C94CC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys);
  }

  return result;
}

void URLResource.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URLResource.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URLResource.CodingKeys and conformance URLResource.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  else
  {
    LOBYTE(v4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    LOBYTE(v4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 1;
    swift_bridgeObjectRetain();
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v39 = v13;
    uint64_t v36 = v12;
    uint64_t v38 = v11;
    char v41 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    swift_bridgeObjectRetain();
    uint64_t v37 = 0LL;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __int128 v14 = v40;
    LOBYTE(v4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 3;
    __int128 v34 = v14;
    uint64_t v35 = v14;
    swift_unknownObjectRetain();
    uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v18 = v17;
    id v19 = objc_allocWithZone((Class)&OBJC_CLASS___NSBundle);
    uint64_t v31 = v16;
    id v32 = v19;
    uint64_t v33 = v18;
    id v20 = objc_msgSend(v19, sel_initWithPath_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    uint64_t v21 = v38;
    if (v20)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      id v22 = v20;
      *(void *)a2 = v22;
      *(void *)(a2 + 8) = v9;
      uint64_t v23 = v36;
      *(void *)(a2 + 16) = v21;
      *(void *)(a2 + 24) = v23;
      *(void *)(a2 + 32) = v39;
      *(_OWORD *)(a2 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v34;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v36 = type metadata accessor for DecodingError();
      swift_allocError();
      *(void *)&__int128 v34 = v24;
      uint64_t v26 = a1[3];
      uint64_t v25 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v26);
      MEMORY[0x186E1CF78](v26, v25);
      *(void *)&__int128 v40 = 0LL;
      *((void *)&v40 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(34LL);
      swift_bridgeObjectRelease();
      *(void *)&__int128 v40 = 0xD00000000000001FLL;
      *((void *)&v40 + 1) = 0x80000001839D35E0LL;
      v27._uint64_t countAndFlagsBits = v31;
      v27._unint64_t object = v33;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._uint64_t countAndFlagsBits = 39LL;
      v28._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v28);
      uint64_t v29 = v34;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void))(*(void *)(v36 - 8) + 104LL))(v29, *MEMORY[0x189619360]);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v15 = v37;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      swift_bridgeObjectRelease();
      if (!v15) {
        swift_bridgeObjectRelease();
      }
      swift_unknownObjectRelease();
    }
  }

uint64_t URLResource.hash(into:)(uint64_t a1)
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  _BYTE v42[144];
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  void v61[18];
  _BYTE v62[144];
  _BYTE v63[152];
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  id v5 = *(id *)v1;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v4) & 1) != 0)
  {
    Hasher._combine(_:)(1u);
    return swift_unknownObjectRelease();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v9(v61, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v63) != 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v43);
    Hasher._combine(_:)(1u);
    if (v43[0] == 2)
    {
      uint64_t v10 = 0;
    }

    else
    {
      uint64_t v10 = v43[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v10);
    uint64_t v11 = v44;
    if (v44)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v11 + 16));
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        outlined retain of LocalePreferences?( (uint64_t)v62,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v13 = v11 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v13 += 16LL;
          --v12;
        }

        while (v12);
        swift_bridgeObjectRelease();
        if (!v45)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          if (!v46) {
            goto LABEL_17;
          }
          goto LABEL_24;
        }

Swift::Int URLResource.hashValue.getter()
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  _BYTE v42[144];
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  void v61[18];
  _BYTE v62[144];
  _BYTE v63[144];
  _BYTE v64[72];
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 48);
  Hasher.init(_seed:)();
  id v4 = v1;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v6(ObjectType, v3) & 1) != 0)
  {
    Swift::UInt8 v7 = 1;
LABEL_8:
    Hasher._combine(_:)(v7);
    goto LABEL_59;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v8(v61, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v63) == 1)
  {
    Swift::UInt8 v7 = 0;
    goto LABEL_8;
  }

  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v43);
  Hasher._combine(_:)(1u);
  if (v43[0] == 2)
  {
    uint64_t v9 = 0;
  }

  else
  {
    uint64_t v9 = v43[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v9);
  uint64_t v10 = v44;
  if (!v44)
  {
    Hasher._combine(_:)(0);
    uint64_t v15 = v43;
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v10 + 16));
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v42);
    uint64_t v15 = v42;
LABEL_23:
    outlined retain of LocalePreferences(v15);
    if (!v45) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  outlined retain of LocalePreferences?( (uint64_t)v62,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16LL;
    --v11;
  }

  while (v11);
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v46) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URLResource()
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  void v59[18];
  _BYTE v60[144];
  _BYTE v61[144];
  _BYTE v62[72];
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 48);
  Hasher.init(_seed:)();
  id v4 = v1;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v6(ObjectType, v3) & 1) != 0)
  {
    Swift::UInt8 v7 = 1;
LABEL_8:
    Hasher._combine(_:)(v7);
    goto LABEL_58;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v8(v59, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v61) == 1)
  {
    Swift::UInt8 v7 = 0;
    goto LABEL_8;
  }

  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)&v41);
  Hasher._combine(_:)(1u);
  if (v41 == 2)
  {
    uint64_t v9 = 0;
  }

  else
  {
    uint64_t v9 = v41 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v9);
  uint64_t v10 = v42;
  if (!v42)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v41);
    if (!v43) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v10 + 16));
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11) {
    goto LABEL_22;
  }
  outlined retain of LocalePreferences?( (uint64_t)v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16LL;
    --v11;
  }

  while (v11);
  swift_bridgeObjectRelease();
  if (!v43)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v44) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }

void protocol witness for Decodable.init(from:) in conformance URLResource(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URLResource(void *a1)
{
  return URLResource.encode(to:)(a1);
}

void URL.init(resource:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v56 = 46LL;
  *(void *)&__int128 v57 = 0xE100000000000000LL;
  unint64_t v55 = &v56;
  swift_bridgeObjectRetain();
  specialized BidirectionalCollection.lastIndex(where:)( partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:),  (uint64_t)v54,  v3,  v5);
  char v9 = v8;
  swift_bridgeObjectRelease();
  uint64_t v52 = v6;
  uint64_t v53 = a2;
  swift_bridgeObjectRetain();
  if ((v9 & 1) != 0)
  {
    uint64_t v50 = 0LL;
  }

  else
  {
    uint64_t v10 = String.subscript.getter();
    uint64_t v12 = v11;
    uint64_t v13 = v4;
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    MEMORY[0x186E1B610](v10, v12, v15, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v18 = String.index(after:)();
    unint64_t v19 = specialized Collection.suffix(from:)(v18, v3, v5);
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    uint64_t v26 = v23;
    id v4 = v13;
    MEMORY[0x186E1B610](v19, v21, v26, v25);
    uint64_t v50 = v27;
    swift_bridgeObjectRelease();
  }

  uint64_t v51 = v4;
  id v28 = objc_msgSend(v4, sel_localizations);
  if (!v28) {
    id v28 = (id)_ContiguousArrayBuffer._asCocoaArray()();
  }
  uint64_t v29 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_183720D90;
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v56) = 1;
  id v32 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 416);
  swift_unknownObjectRetain();
  uint64_t v33 = v32(&v56, ObjectType, v7);
  uint64_t v35 = v34;
  swift_unknownObjectRelease();
  *(void *)(v30 + 32) = v33;
  *(void *)(v30 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v35;
  id v36 =  objc_msgSend( v29,  sel_preferredLocalizationsFromArray_forPreferences_,  v28,  _ContiguousArrayBuffer._asCocoaArray()());

  swift_unknownObjectRelease();
  if (!v36)
  {
    uint64_t v40 = MEMORY[0x18961AFE8];
    uint64_t v39 = v51;
    uint64_t v38 = v52;
    if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
      goto LABEL_15;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v41 = 0LL;
    goto LABEL_16;
  }

  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  uint64_t v37 = swift_dynamicCastClass();
  uint64_t v39 = v51;
  uint64_t v38 = v52;
  if (!v37)
  {
    swift_unknownObjectRelease();
    objc_msgSend(v36, sel_copy);
    unint64_t v42 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v40 = specialized _arrayForceCast<A, B>(_:)(v42);

    swift_bridgeObjectRelease();
    if (*(void *)(v40 + 16)) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }

  uint64_t v40 = v37;

  if (!*(void *)(v40 + 16)) {
    goto LABEL_13;
  }
LABEL_15:
  uint64_t v41 = *(void *)(v40 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_16:
  uint64_t v43 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  if (v50)
  {
    uint64_t v44 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (v38) {
      goto LABEL_18;
    }
LABEL_21:
    uint64_t v45 = 0LL;
    if (v41) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }

  uint64_t v44 = 0LL;
  if (!v38) {
    goto LABEL_21;
  }
LABEL_18:
  uint64_t v45 = (void *)String._bridgeToObjectiveCImpl()();
  if (v41)
  {
LABEL_19:
    uint64_t v46 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }

uint64_t specialized static URLResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  __int128 v14 = *(_OWORD *)(a2 + 40);
  __int128 v15 = *(_OWORD *)(a1 + 40);
  type metadata accessor for NSObject();
  if ((static NSObject.== infix(_:_:)() & 1) == 0) {
    goto LABEL_12;
  }
  if (v2 != v6 || v4 != v8)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v11 = 0;
    if ((v10 & 1) == 0) {
      return v11 & 1;
    }
  }

  if (!v5)
  {
    if (!v9)
    {
LABEL_14:
      __int128 v16 = v14;
      __int128 v17 = v15;
      char v11 = specialized static Locale.== infix(_:_:)((uint64_t)&v17, (uint64_t)&v16);
      return v11 & 1;
    }

    goto LABEL_12;
  }

  if (!v9)
  {
LABEL_12:
    char v11 = 0;
    return v11 & 1;
  }

  if (v3 == v7 && v5 == v9) {
    goto LABEL_14;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v11 = 0;
  if ((v12 & 1) != 0) {
    goto LABEL_14;
  }
  return v11 & 1;
}

unint64_t lazy protocol witness table accessor for type URLResource and conformance URLResource()
{
  unint64_t result = lazy protocol witness table cache variable for type URLResource and conformance URLResource;
  if (!lazy protocol witness table cache variable for type URLResource and conformance URLResource)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLResource, &type metadata for URLResource);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLResource and conformance URLResource);
  }

  return result;
}

uint64_t destroy for URLResource(id *a1)
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for URLResource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)(a2 + 40);
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URLResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 48) = v7;
  return a1;
}

uint64_t assignWithTake for URLResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  *(void *)(a1 + 48) = v6;
  return a1;
}

ValueMetadata *type metadata accessor for URLResource()
{
  return &type metadata for URLResource;
}

uint64_t storeEnumTagSinglePayload for URLResource.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1834B85DC + 4 * byte_183830DD5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1834B8610 + 4 * byte_183830DD0[v4]))();
}

uint64_t sub_1834B8610(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834B8618(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834B8620LL);
  }
  return result;
}

uint64_t sub_1834B862C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834B8634LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1834B8638(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834B8640(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for URLResource.CodingKeys()
{
  return &unk_189C94CC8;
}

uint64_t specialized URLResource.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6365726964627573LL && a2 == 0xEC00000079726F74LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x6150656C646E7562LL && a2 == 0xEA00000000006874LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t Locale.LanguageCode.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617C98], a3);
}

uint64_t Locale.Region.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617CA8], a3);
}

double Locale.Components.init(languageCode:script:languageRegion:)@<D0>( _OWORD *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4 = a1[1];
  *(_OWORD *)a4 = *a1;
  *(_OWORD *)(a4 + 16) = v4;
  __int128 v5 = a2[1];
  *(_OWORD *)(a4 + 32) = *a2;
  *(_OWORD *)(a4 + 48) = v5;
  __int128 v6 = a3[1];
  *(_OWORD *)(a4 + 64) = *a3;
  *(_OWORD *)(a4 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v6;
  *(_BYTE *)(a4 + 96) = 16;
  double result = 0.0;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 12__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_WORD *)(a4 + 20__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 1031;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 24__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 304) = 0u;
  *(_OWORD *)(a4 + 32__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0u;
  *(_OWORD *)(a4 + 336) = 0u;
  return result;
}

uint64_t Locale.Weekday.rawValue.getter()
{
  return qword_183832E08[*v0];
}

uint64_t Locale.HourCycle.rawValue.getter()
{
  return qword_183832E40[*v0];
}

uint64_t static Locale.Subdivision.subdivision(for:)@<X0>(uint64_t *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = (void *)a1[1];
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = 2054847098LL;
  v3._unint64_t object = (void *)0xE400000000000000LL;
  String.append(_:)(v3);
  Swift::String v5 = String.lowercased()();
  uint64_t result = v5._countAndFlagsBits;
  a2->_uint64_t countAndFlagsBits = v6;
  a2->_unint64_t object = v7;
  a2[1] = v5;
  return result;
}

uint64_t Locale.Variant.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617C98], a3);
}

uint64_t Locale.Collation.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617C98], a3);
}

uint64_t Locale.Currency.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617C98], a3);
}

uint64_t Locale.NumberingSystem.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617C98], a3);
}

uint64_t Locale.Weekday.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  unint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._unint64_t object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Locale.Weekday.init(rawValue:),  v3);
  uint64_t result = swift_bridgeObjectRelease();
  char v7 = 7;
  if (v5 < 7) {
    char v7 = v5;
  }
  *a2 = v7;
  return result;
}

uint64_t Locale.HourCycle.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  unint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._unint64_t object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Locale.HourCycle.init(rawValue:),  v3);
  uint64_t result = swift_bridgeObjectRelease();
  char v7 = 4;
  if (v5 < 4) {
    char v7 = v5;
  }
  *a2 = v7;
  return result;
}

uint64_t Locale.MeasurementSystem.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617C98], a3);
}

uint64_t Locale.Region.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617CA8], a3);
}

uint64_t Locale.Subdivision.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617C98], a3);
}

uint64_t Locale.LanguageCode.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617C98], a3);
}

uint64_t Locale.Variant.init(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, void *a4@<X8>)
{
  uint64_t result = a3();
  *a4 = a1;
  a4[1] = a2;
  a4[2] = result;
  a4[3] = v8;
  return result;
}

uint64_t Locale.Currency.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617C98], a3);
}

uint64_t Locale.NumberingSystem.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617C98], a3);
}

uint64_t Locale.Script.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, Swift::String *a3@<X8>)
{
  Swift::String v6 = String._capitalized()();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  a3->_uint64_t countAndFlagsBits = a1;
  a3->_unint64_t object = a2;
  a3[1] = v6;
  return result;
}

uint64_t Locale.Weekday.icuIndex.getter()
{
  char v1 = *v0;
  if (one-time initialization token for weekdays != -1) {
    swift_once();
  }
  BOOL v2 = static Locale.Weekday.weekdays;
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized Collection<>.firstIndex(of:)(v1, (uint64_t)v2);
  char v5 = v4;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v5 & 1) != 0) {
    goto LABEL_7;
  }
  uint64_t result = v3 + 1;
  if (__OFADD__(v3, 1LL))
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }

  return result;
}

uint64_t Locale.Weekday.init(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if ((result - 8) < 0xFFFFFFF9)
  {
    char v3 = 7;
LABEL_7:
    *a2 = v3;
    return result;
  }

  unsigned int v4 = result;
  if (one-time initialization token for weekdays != -1) {
    uint64_t result = swift_once();
  }
  if (*((void *)static Locale.Weekday.weekdays + 2) >= (unint64_t)v4)
  {
    char v3 = *((_BYTE *)static Locale.Weekday.weekdays + v4 + 31);
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

{
  unsigned int v2;
  char v4;
  if (result < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_10;
  }

  BOOL v2 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    uint64_t result = swift_once();
    goto LABEL_6;
  }

  if ((result - 8) < 0xFFFFFFF9)
  {
    unsigned int v4 = 7;
LABEL_8:
    *a2 = v4;
    return result;
  }

  if (one-time initialization token for weekdays != -1) {
    goto LABEL_11;
  }
LABEL_6:
  if ((unint64_t)v2 <= *((void *)static Locale.Weekday.weekdays + 2))
  {
    unsigned int v4 = *((_BYTE *)static Locale.Weekday.weekdays + v2 + 31);
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

Foundation::ICUCLDRKey __swiftcall ICUCLDRKey.init(_:)(Foundation::ICUCLDRKey result)
{
  *char v1 = result;
  return result;
}

uint64_t Locale.Components.languageComponents.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = v1[9];
  uint64_t v13 = v1[10];
  uint64_t v12 = v1[11];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v13;
  a1[11] = v12;
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v6, v7);
  return outlined copy of Locale.LanguageCode?(v10, v11);
}

__n128 Locale.Components.languageComponents.setter(__int128 *a1)
{
  __int128 v12 = a1[1];
  __int128 v13 = *a1;
  __int128 v10 = a1[3];
  __int128 v11 = a1[2];
  __n128 v9 = (__n128)a1[4];
  uint64_t v2 = *((void *)a1 + 10);
  uint64_t v8 = *((void *)a1 + 11);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  outlined consume of Locale.LanguageCode?(*(void *)v1, *(void *)(v1 + 8));
  outlined consume of Locale.LanguageCode?(v3, v4);
  outlined consume of Locale.LanguageCode?(v5, v6);
  *(_OWORD *)uint64_t v1 = v13;
  *(_OWORD *)(v1 + 16) = v12;
  *(_OWORD *)(v1 + 32) = v11;
  *(_OWORD *)(v1 + 48) = v10;
  __n128 result = v9;
  *(__n128 *)(v1 + 64) = v9;
  *(void *)(v1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v2;
  *(void *)(v1 + 88) = v8;
  return result;
}

uint64_t (*Locale.Components.languageComponents.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Locale.Components.calendar.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 96);
}

_BYTE *Locale.Components.calendar.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 96) = *result;
  return result;
}

uint64_t (*Locale.Components.calendar.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.collation.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[13];
  uint64_t v3 = v1[14];
  uint64_t v4 = v1[15];
  uint64_t v5 = v1[16];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.collation.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[13], v1[14]);
  __n128 result = v5;
  *(__n128 *)(v1 + 13) = v5;
  v1[15] = v2;
  v1[16] = v3;
  return result;
}

uint64_t (*Locale.Components.collation.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.currency.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[17];
  uint64_t v3 = v1[18];
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.currency.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[17], v1[18]);
  __n128 result = v5;
  *(__n128 *)(v1 + 17) = v5;
  v1[19] = v2;
  v1[20] = v3;
  return result;
}

uint64_t (*Locale.Components.currency.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.numberingSystem.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[21];
  uint64_t v3 = v1[22];
  uint64_t v4 = v1[23];
  uint64_t v5 = v1[24];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.numberingSystem.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[21], v1[22]);
  __n128 result = v5;
  *(__n128 *)(v1 + 21) = v5;
  v1[23] = v2;
  v1[24] = v3;
  return result;
}

uint64_t (*Locale.Components.numberingSystem.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Locale.Components.firstDayOfWeek.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 200);
}

_BYTE *Locale.Components.firstDayOfWeek.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 20__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *result;
  return result;
}

uint64_t (*Locale.Components.firstDayOfWeek.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Locale.Components.hourCycle.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 201);
}

_BYTE *Locale.Components.hourCycle.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 201) = *result;
  return result;
}

uint64_t (*Locale.Components.hourCycle.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.measurementSystem.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[26];
  uint64_t v3 = v1[27];
  uint64_t v4 = v1[28];
  uint64_t v5 = v1[29];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.measurementSystem.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[26], v1[27]);
  __n128 result = v5;
  *((__n128 *)v1 + 13) = v5;
  v1[28] = v2;
  v1[29] = v3;
  return result;
}

uint64_t (*Locale.Components.measurementSystem.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.region.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[30];
  uint64_t v3 = v1[31];
  uint64_t v4 = v1[32];
  uint64_t v5 = v1[33];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.region.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[30], v1[31]);
  __n128 result = v5;
  *((__n128 *)v1 + 15) = v5;
  v1[32] = v2;
  v1[33] = v3;
  return result;
}

uint64_t (*Locale.Components.region.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.subdivision.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[34];
  uint64_t v3 = v1[35];
  uint64_t v4 = v1[36];
  uint64_t v5 = v1[37];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.subdivision.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[34], v1[35]);
  __n128 result = v5;
  *((__n128 *)v1 + 17) = v5;
  v1[36] = v2;
  v1[37] = v3;
  return result;
}

uint64_t (*Locale.Components.subdivision.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 304);
  return swift_unknownObjectRetain();
}

uint64_t Locale.Components.timeZone.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 304) = v2;
  *(void *)(v1 + 312) = v3;
  return result;
}

uint64_t (*Locale.Components.timeZone.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.variant.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[40];
  uint64_t v3 = v1[41];
  uint64_t v4 = v1[42];
  uint64_t v5 = v1[43];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.variant.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[40], v1[41]);
  __n128 result = v5;
  *((__n128 *)v1 + 2__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v5;
  v1[42] = v2;
  v1[43] = v3;
  return result;
}

uint64_t (*Locale.Components.variant.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Locale.Components.hash(into:)(uint64_t a1)
{
  uint64_t v4 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v31 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v35 = *(void *)(v1 + 72);
  Swift::UInt v32 = *(unsigned __int8 *)(v1 + 96);
  uint64_t v15 = *(void *)(v1 + 104);
  uint64_t v23 = *(void *)(v1 + 112);
  uint64_t v24 = *(void *)(v1 + 144);
  uint64_t v16 = *(void *)(v1 + 136);
  uint64_t v17 = *(void *)(v1 + 168);
  uint64_t v25 = *(void *)(v1 + 176);
  int v26 = *(char *)(v1 + 200);
  int v27 = *(char *)(v1 + 201);
  uint64_t v18 = *(void *)(v1 + 208);
  uint64_t v33 = *(void *)(v1 + 216);
  uint64_t v19 = *(void *)(v1 + 240);
  uint64_t v34 = *(void *)(v1 + 248);
  uint64_t v20 = *(void *)(v1 + 272);
  uint64_t v28 = *(void *)(v1 + 280);
  uint64_t v29 = *(void *)(v1 + 304);
  uint64_t v21 = *(void *)(v1 + 312);
  uint64_t v22 = *(void *)(v1 + 320);
  uint64_t v30 = *(void *)(v1 + 328);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v4, v3);
    uint64_t v7 = v31;
    outlined copy of Locale.LanguageCode?(v5, v31);
    outlined copy of Locale.LanguageCode?(v6, v35);
    outlined copy of Locale.LanguageCode?(v4, v3);
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v4, v3);
  }

  else
  {
    Hasher._combine(_:)(0);
    outlined copy of Locale.LanguageCode?(v4, 0LL);
    uint64_t v7 = v31;
    outlined copy of Locale.LanguageCode?(v5, v31);
    outlined copy of Locale.LanguageCode?(v6, v35);
  }

  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v8 = v7;
    outlined consume of Locale.LanguageCode?(v5, v7);
    uint64_t v9 = v35;
    if (v35)
    {
LABEL_6:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of Locale.LanguageCode?(v6, v9);
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    Hasher._combine(_:)(0);
    uint64_t v9 = v35;
    if (v35) {
      goto LABEL_6;
    }
  }

  Hasher._combine(_:)(0);
LABEL_9:
  outlined consume of Locale.LanguageCode?(v4, v3);
  outlined consume of Locale.LanguageCode?(v5, v8);
  outlined consume of Locale.LanguageCode?(v6, v9);
  if ((_DWORD)v32 == 16)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v32);
  }

  if (v23)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v15, v23);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v15, v23);
    if (v24) {
      goto LABEL_14;
    }
LABEL_17:
    Hasher._combine(_:)(0);
    uint64_t v10 = v30;
    if (v25) {
      goto LABEL_15;
    }
    goto LABEL_18;
  }

  Hasher._combine(_:)(0);
  if (!v24) {
    goto LABEL_17;
  }
LABEL_14:
  Hasher._combine(_:)(1u);
  outlined copy of Locale.LanguageCode?(v16, v24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v16, v24);
  uint64_t v10 = v30;
  if (v25)
  {
LABEL_15:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v17, v25);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v17, v25);
    goto LABEL_19;
  }

uint64_t Locale.Components.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1834B9A7C + 4 * byte_183830FD0[a1]))( 0xD000000000000012LL,  0x80000001839D3600LL);
}

uint64_t sub_1834B9A7C()
{
  return 0x7261646E656C6163LL;
}

uint64_t sub_1834B9A94()
{
  return 0x6F6974616C6C6F63LL;
}

uint64_t sub_1834B9AB4()
{
  return 0x79636E6572727563LL;
}

uint64_t sub_1834B9ACC()
{
  return 0x6E697265626D756ELL;
}

uint64_t sub_1834B9AF0()
{
  return 0x7961447473726966LL;
}

uint64_t sub_1834B9B14()
{
  return 0x6C63794372756F68LL;
}

unint64_t sub_1834B9B30()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1834B9B4C()
{
  return 0x6E6F69676572LL;
}

uint64_t sub_1834B9B60()
{
  return 0x7369766964627573LL;
}

uint64_t sub_1834B9B80()
{
  return 0x656E6F5A656D6974LL;
}

uint64_t sub_1834B9B98()
{
  return 0x746E6169726176LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.Components.CodingKeys()
{
  return Locale.Components.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.Components.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Locale.Components.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Locale.Components.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Components.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Components.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Components.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Locale.Components.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v7 = *v1;
  __int128 v43 = v1[1];
  __int128 v44 = v7;
  __int128 v8 = v1[2];
  __int128 v41 = v1[3];
  __int128 v42 = v8;
  __int128 v40 = v1[4];
  uint64_t v10 = *((void *)v1 + 10);
  uint64_t v9 = *((void *)v1 + 11);
  int v53 = *((unsigned __int8 *)v1 + 96);
  uint64_t v39 = *((void *)v1 + 13);
  uint64_t v38 = *((void *)v1 + 14);
  uint64_t v37 = *((void *)v1 + 15);
  uint64_t v36 = *((void *)v1 + 16);
  uint64_t v35 = *((void *)v1 + 17);
  uint64_t v33 = *((void *)v1 + 18);
  __int128 v34 = *(__int128 *)((char *)v1 + 152);
  __int128 v31 = *(__int128 *)((char *)v1 + 168);
  __int128 v32 = *(__int128 *)((char *)v1 + 184);
  int v30 = *((unsigned __int8 *)v1 + 200);
  int v29 = *((unsigned __int8 *)v1 + 201);
  __int128 v27 = v1[13];
  __int128 v28 = v1[14];
  __int128 v25 = v1[15];
  __int128 v26 = v1[16];
  __int128 v23 = v1[17];
  __int128 v24 = v1[18];
  __int128 v22 = v1[19];
  __int128 v20 = v1[20];
  __int128 v21 = v1[21];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v46 = v44;
  __int128 v47 = v43;
  __int128 v48 = v42;
  __int128 v49 = v41;
  __int128 v50 = v40;
  uint64_t v51 = v10;
  uint64_t v52 = v9;
  uint64_t v11 = v6;
  char v54 = 0;
  lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components();
  uint64_t v12 = v45;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v12) {
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  uint64_t v13 = v36;
  uint64_t v14 = v37;
  uint64_t v15 = v38;
  uint64_t v16 = v39;
  uint64_t v17 = v35;
  LOBYTE(v46) = v53;
  char v54 = 1;
  lazy protocol witness table accessor for type Calendar.Identifier and conformance Calendar.Identifier();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  *(void *)&__int128 v46 = v16;
  *((void *)&v46 + 1) = v15;
  *(void *)&__int128 v47 = v14;
  *((void *)&v47 + 1) = v13;
  char v54 = 2;
  lazy protocol witness table accessor for type Locale.Collation and conformance Locale.Collation();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v45 = v4;
  *(void *)&__int128 v46 = v17;
  *((void *)&v46 + 1) = v33;
  __int128 v47 = v34;
  char v54 = 3;
  lazy protocol witness table accessor for type Locale.Currency and conformance Locale.Currency();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  __int128 v46 = v31;
  __int128 v47 = v32;
  char v54 = 4;
  lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v46) = v30;
  char v54 = 5;
  lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v46) = v29;
  char v54 = 6;
  lazy protocol witness table accessor for type Locale.HourCycle and conformance Locale.HourCycle();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  __int128 v46 = v27;
  __int128 v47 = v28;
  char v54 = 7;
  lazy protocol witness table accessor for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  __int128 v46 = v25;
  __int128 v47 = v26;
  char v54 = 8;
  lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  __int128 v46 = v23;
  __int128 v47 = v24;
  char v54 = 9;
  lazy protocol witness table accessor for type Locale.Subdivision and conformance Locale.Subdivision();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  __int128 v46 = v22;
  char v54 = 10;
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  __int128 v46 = v20;
  __int128 v47 = v21;
  char v54 = 11;
  lazy protocol witness table accessor for type Locale.Variant and conformance Locale.Variant();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

Swift::Int Locale.Components.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t *Locale.Components.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Components.CodingKeys>);
  uint64_t v5 = *(void *)(v99 - 8);
  MEMORY[0x1895F8858](v99);
  __int128 v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v170 = v2;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    uint64_t v100 = 0LL;
    uint64_t v101 = 0LL;
    uint64_t v103 = 0LL;
    uint64_t v104 = 0LL;
    uint64_t v102 = 0LL;
    uint64_t v107 = 0LL;
    uint64_t v108 = 0LL;
    uint64_t v105 = 0LL;
    uint64_t v106 = 0LL;
    uint64_t v111 = 0LL;
    uint64_t v112 = 0LL;
    uint64_t v109 = 0LL;
    uint64_t v110 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
LABEL_4:
    outlined consume of Locale.LanguageCode?(v14, v13);
    outlined consume of Locale.LanguageCode?(v12, v11);
    outlined consume of Locale.LanguageCode?(v10, v9);
    outlined consume of Locale.LanguageCode?(v109, v110);
    outlined consume of Locale.LanguageCode?(v105, v106);
    outlined consume of Locale.LanguageCode?(v101, v102);
    swift_unknownObjectRelease();
    return (uint64_t *)outlined consume of Locale.LanguageCode?(0LL, 0LL);
  }

  uint64_t v98 = v5;
  __n128 v93 = a2;
  LOBYTE(v113[0]) = 0;
  lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components();
  uint64_t v8 = v99;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v170 = 0LL;
  __int128 v73 = a1;
  uint64_t v16 = v8;
  uint64_t v17 = v118;
  uint64_t v91 = v119;
  uint64_t v92 = v116;
  uint64_t v18 = v120;
  uint64_t v19 = v121;
  uint64_t v20 = v122;
  uint64_t v21 = v123;
  uint64_t v22 = v124;
  uint64_t v79 = v7;
  uint64_t v23 = v125;
  LOBYTE(v113[0]) = 1;
  uint64_t v97 = v114;
  uint64_t v76 = v115;
  uint64_t v94 = v117;
  outlined copy of Locale.LanguageCode?(v114, v115);
  uint64_t v77 = v17;
  uint64_t v24 = v17;
  uint64_t v25 = v91;
  uint64_t v95 = v19;
  uint64_t v96 = v18;
  outlined copy of Locale.LanguageCode?(v24, v91);
  uint64_t v74 = v20;
  uint64_t v75 = v21;
  __int128 v26 = v79;
  outlined copy of Locale.LanguageCode?(v20, v21);
  lazy protocol witness table accessor for type Calendar.Identifier and conformance Calendar.Identifier();
  uint64_t v27 = v170;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v98 + 8))(v26, v16);
    uint64_t v28 = v76;
    outlined consume of Locale.LanguageCode?(v97, v76);
    uint64_t v29 = v77;
    outlined consume of Locale.LanguageCode?(v77, v25);
    uint64_t v30 = v74;
    uint64_t v31 = v75;
    outlined consume of Locale.LanguageCode?(v74, v75);
    uint64_t v100 = 0LL;
    uint64_t v101 = 0LL;
    uint64_t v103 = 0LL;
    uint64_t v104 = 0LL;
    uint64_t v102 = 0LL;
    uint64_t v107 = 0LL;
    uint64_t v108 = 0LL;
    uint64_t v105 = 0LL;
    uint64_t v106 = 0LL;
    uint64_t v111 = 0LL;
    uint64_t v112 = 0LL;
    uint64_t v109 = 0LL;
    uint64_t v110 = 0LL;
    uint64_t v80 = 0LL;
    uint64_t v81 = 0LL;
    uint64_t v82 = 0LL;
    uint64_t v83 = 0LL;
    uint64_t v85 = 0LL;
    uint64_t v86 = 0LL;
    uint64_t v78 = 0LL;
    uint64_t v84 = 0LL;
    uint64_t v88 = 0LL;
    uint64_t v89 = 0LL;
    uint64_t v87 = 0LL;
    uint64_t v90 = 0LL;
    uint64_t v170 = v27;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
    outlined consume of Locale.LanguageCode?(v97, v28);
    outlined consume of Locale.LanguageCode?(v29, v25);
    outlined consume of Locale.LanguageCode?(v30, v31);
    uint64_t v13 = v87;
    uint64_t v12 = v84;
    uint64_t v11 = v85;
    uint64_t v10 = v82;
    uint64_t v9 = v83;
    uint64_t v14 = v90;
    goto LABEL_4;
  }

  uint64_t v71 = v23;
  uint64_t v72 = v22;
  int v32 = v114;
  LOBYTE(v113[0]) = 2;
  lazy protocol witness table accessor for type Locale.Collation and conformance Locale.Collation();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v70 = v32;
  uint64_t v33 = v114;
  uint64_t v34 = v115;
  uint64_t v35 = v116;
  uint64_t v36 = v117;
  LOBYTE(v113[0]) = 3;
  outlined copy of Locale.LanguageCode?(v114, v115);
  lazy protocol witness table accessor for type Locale.Currency and conformance Locale.Currency();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v88 = v35;
  uint64_t v89 = v36;
  uint64_t v87 = v34;
  uint64_t v90 = v33;
  uint64_t v37 = v114;
  uint64_t v38 = v115;
  uint64_t v39 = v116;
  uint64_t v40 = v117;
  LOBYTE(v113[0]) = 4;
  outlined copy of Locale.LanguageCode?(v114, v115);
  lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v85 = v38;
  uint64_t v86 = v40;
  uint64_t v78 = v39;
  uint64_t v84 = v37;
  uint64_t v41 = v115;
  uint64_t v42 = v116;
  uint64_t v43 = v117;
  LOBYTE(v113[0]) = 5;
  uint64_t v44 = v114;
  outlined copy of Locale.LanguageCode?(v114, v115);
  lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v80 = v42;
  uint64_t v81 = v43;
  uint64_t v82 = v44;
  uint64_t v83 = v41;
  LODWORD(v42) = v114;
  LOBYTE(v113[0]) = 6;
  lazy protocol witness table accessor for type Locale.HourCycle and conformance Locale.HourCycle();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v69 = v114;
  LOBYTE(v113[0]) = 7;
  lazy protocol witness table accessor for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v68 = v42;
  uint64_t v45 = v114;
  uint64_t v46 = v115;
  uint64_t v47 = v117;
  LOBYTE(v113[0]) = 8;
  uint64_t v112 = v116;
  outlined copy of Locale.LanguageCode?(v114, v115);
  lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v170 = 0LL;
  uint64_t v110 = v46;
  uint64_t v111 = v47;
  uint64_t v109 = v45;
  LOBYTE(v113[0]) = 9;
  uint64_t v105 = v114;
  uint64_t v106 = v115;
  uint64_t v107 = v116;
  uint64_t v108 = v117;
  outlined copy of Locale.LanguageCode?(v114, v115);
  lazy protocol witness table accessor for type Locale.Subdivision and conformance Locale.Subdivision();
  uint64_t v48 = v170;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v170 = v48;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v98 + 8))(v79, v99);
    outlined consume of Locale.LanguageCode?(v105, v106);
    outlined consume of Locale.LanguageCode?(v109, v110);
    outlined consume of Locale.LanguageCode?(v82, v83);
    outlined consume of Locale.LanguageCode?(v84, v85);
    outlined consume of Locale.LanguageCode?(v90, v87);
    uint64_t v28 = v76;
    outlined consume of Locale.LanguageCode?(v97, v76);
    uint64_t v29 = v77;
    uint64_t v25 = v91;
    outlined consume of Locale.LanguageCode?(v77, v91);
    uint64_t v30 = v74;
    uint64_t v31 = v75;
    outlined consume of Locale.LanguageCode?(v74, v75);
    uint64_t v100 = 0LL;
    uint64_t v101 = 0LL;
    uint64_t v103 = 0LL;
    uint64_t v104 = 0LL;
    uint64_t v102 = 0LL;
    goto LABEL_8;
  }

  LOBYTE(v113[0]) = 10;
  uint64_t v101 = v114;
  uint64_t v102 = v115;
  uint64_t v103 = v116;
  uint64_t v104 = v117;
  outlined copy of Locale.LanguageCode?(v114, v115);
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  uint64_t v49 = v170;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v170 = v49;
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v98 + 8))(v79, v99);
    outlined consume of Locale.LanguageCode?(v101, v102);
    outlined consume of Locale.LanguageCode?(v105, v106);
    outlined consume of Locale.LanguageCode?(v109, v110);
    outlined consume of Locale.LanguageCode?(v82, v83);
    outlined consume of Locale.LanguageCode?(v84, v85);
    outlined consume of Locale.LanguageCode?(v90, v87);
    uint64_t v28 = v76;
    outlined consume of Locale.LanguageCode?(v97, v76);
    uint64_t v29 = v77;
    uint64_t v25 = v91;
    outlined consume of Locale.LanguageCode?(v77, v91);
    uint64_t v30 = v74;
    uint64_t v31 = v75;
    outlined consume of Locale.LanguageCode?(v74, v75);
    uint64_t v100 = 0LL;
    goto LABEL_8;
  }

  uint64_t v50 = v114;
  uint64_t v51 = v115;
  char v162 = 11;
  lazy protocol witness table accessor for type Locale.Variant and conformance Locale.Variant();
  uint64_t v100 = v50;
  swift_unknownObjectRetain();
  uint64_t v52 = v170;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v170 = v52;
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v98 + 8))(v79, v99);
    swift_unknownObjectRelease();
    outlined consume of Locale.LanguageCode?(v101, v102);
    outlined consume of Locale.LanguageCode?(v105, v106);
    outlined consume of Locale.LanguageCode?(v109, v110);
    outlined consume of Locale.LanguageCode?(v82, v83);
    outlined consume of Locale.LanguageCode?(v84, v85);
    outlined consume of Locale.LanguageCode?(v90, v87);
    uint64_t v28 = v76;
    outlined consume of Locale.LanguageCode?(v97, v76);
    uint64_t v29 = v77;
    uint64_t v25 = v91;
    outlined consume of Locale.LanguageCode?(v77, v91);
    uint64_t v30 = v74;
    uint64_t v31 = v75;
    outlined consume of Locale.LanguageCode?(v74, v75);
    goto LABEL_8;
  }

  (*(void (**)(char *, uint64_t))(v98 + 8))(v79, v99);
  uint64_t v53 = v163;
  uint64_t v54 = v164;
  uint64_t v55 = v165;
  uint64_t v99 = v166;
  outlined copy of Locale.LanguageCode?(v163, v164);
  outlined consume of Locale.LanguageCode?(0LL, 0LL);
  v113[0] = v97;
  v113[1] = v76;
  v113[2] = v92;
  v113[3] = v94;
  v113[4] = v77;
  v113[5] = v91;
  v113[6] = v96;
  v113[7] = v95;
  v113[8] = v74;
  v113[9] = v75;
  v113[10] = v72;
  v113[11] = v71;
  LOBYTE(v113[12]) = v70;
  v113[13] = v90;
  v113[14] = v87;
  v113[15] = v88;
  v113[16] = v89;
  v113[17] = v84;
  v113[18] = v85;
  v113[19] = v78;
  v113[20] = v86;
  v113[21] = v82;
  v113[22] = v83;
  v113[23] = v80;
  v113[24] = v81;
  LOBYTE(v113[25]) = v68;
  BYTE1(v113[25]) = v69;
  v113[26] = v109;
  v113[27] = v110;
  v113[28] = v112;
  v113[29] = v111;
  v113[30] = v105;
  v113[31] = v106;
  v113[32] = v107;
  v113[33] = v108;
  uint64_t v57 = v101;
  uint64_t v56 = v102;
  v113[34] = v101;
  v113[35] = v102;
  v113[36] = v103;
  v113[37] = v104;
  v113[38] = v100;
  uint64_t v66 = v55;
  uint64_t v67 = v51;
  v113[39] = v51;
  v113[40] = v53;
  uint64_t v79 = (char *)v54;
  v113[41] = v54;
  v113[42] = v55;
  v113[43] = v99;
  outlined retain of Locale.Components(v113);
  uint64_t v98 = v53;
  outlined consume of Locale.LanguageCode?(v53, v54);
  swift_unknownObjectRelease();
  outlined consume of Locale.LanguageCode?(v57, v56);
  outlined consume of Locale.LanguageCode?(v105, v106);
  outlined consume of Locale.LanguageCode?(v109, v110);
  outlined consume of Locale.LanguageCode?(v82, v83);
  outlined consume of Locale.LanguageCode?(v84, v85);
  outlined consume of Locale.LanguageCode?(v90, v87);
  uint64_t v58 = v92;
  uint64_t v59 = v94;
  outlined consume of Locale.LanguageCode?(v97, v76);
  uint64_t v61 = v95;
  uint64_t v60 = v96;
  outlined consume of Locale.LanguageCode?(v77, v91);
  uint64_t v62 = v74;
  uint64_t v63 = v75;
  uint64_t v65 = v71;
  uint64_t v64 = v72;
  outlined consume of Locale.LanguageCode?(v74, v75);
  memcpy(v93, v113, 0x160uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  uint64_t v114 = v97;
  uint64_t v115 = v76;
  uint64_t v116 = v58;
  uint64_t v117 = v59;
  uint64_t v118 = v77;
  uint64_t v119 = v91;
  uint64_t v120 = v60;
  uint64_t v121 = v61;
  uint64_t v122 = v62;
  uint64_t v123 = v63;
  uint64_t v124 = v64;
  uint64_t v125 = v65;
  char v126 = v70;
  uint64_t v128 = v90;
  uint64_t v129 = v87;
  uint64_t v130 = v88;
  uint64_t v131 = v89;
  *(_DWORD *)char v127 = v169[0];
  *(_DWORD *)&v127[3] = *(_DWORD *)((char *)v169 + 3);
  uint64_t v132 = v84;
  uint64_t v133 = v85;
  uint64_t v134 = v78;
  uint64_t v135 = v86;
  uint64_t v136 = v82;
  uint64_t v137 = v83;
  uint64_t v138 = v80;
  uint64_t v139 = v81;
  char v140 = v68;
  char v141 = v69;
  int v142 = v167;
  __int16 v143 = v168;
  uint64_t v144 = v109;
  uint64_t v145 = v110;
  uint64_t v146 = v112;
  uint64_t v147 = v111;
  uint64_t v148 = v105;
  uint64_t v149 = v106;
  uint64_t v150 = v107;
  uint64_t v151 = v108;
  uint64_t v152 = v101;
  uint64_t v153 = v102;
  uint64_t v154 = v103;
  uint64_t v155 = v104;
  uint64_t v156 = v100;
  uint64_t v157 = v67;
  uint64_t v158 = v98;
  uint64_t v159 = v79;
  uint64_t v160 = v66;
  uint64_t v161 = v99;
  return outlined release of Locale.Components(&v114);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Locale.Components()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Components()
{
  return Hasher._finalize()();
}

uint64_t *protocol witness for Decodable.init(from:) in conformance Locale.Components@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return Locale.Components.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Components(void *a1)
{
  return Locale.Components.encode(to:)(a1);
}

uint64_t Locale.Subdivision.debugDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Locale.LanguageCode.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x189617C98]);
}

uint64_t (*Locale.LanguageCode.identifier.modify(void *a1))(void *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t Locale.LanguageCode.identifier.modify(void *a1, char a2)
{
  return Locale.LanguageCode.identifier.modify(a1, a2, (uint64_t (*)(void, uint64_t))MEMORY[0x189617C98]);
}

BOOL static Locale.LanguageCode.IdentifierType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Locale.LanguageCode.IdentifierType.hash(into:)()
{
}

Swift::Int Locale.LanguageCode.IdentifierType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for unidentified()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.LanguageCode.unidentified = 6581877LL;
  *(void *)algn_18C5D3FF8 = 0xE300000000000000LL;
  xmmword_18C5D4000 = (__int128)v1;
  return result;
}

uint64_t static Locale.LanguageCode.unidentified.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for unidentified != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_18C5D3FF8;
  __int128 v3 = xmmword_18C5D4000;
  *(void *)a1 = static Locale.LanguageCode.unidentified;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for uncoded()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.LanguageCode.uncoded = 7563629LL;
  *(void *)algn_18C5D4018 = 0xE300000000000000LL;
  xmmword_18C5D4020 = (__int128)v1;
  return result;
}

uint64_t static Locale.LanguageCode.uncoded.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for uncoded != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_18C5D4018;
  __int128 v3 = xmmword_18C5D4020;
  *(void *)a1 = static Locale.LanguageCode.uncoded;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for multiple()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.LanguageCode.multiple = 7107949LL;
  *(void *)algn_18C5D4038 = 0xE300000000000000LL;
  xmmword_18C5D4040 = (__int128)v1;
  return result;
}

uint64_t static Locale.LanguageCode.multiple.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for multiple != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_18C5D4038;
  __int128 v3 = xmmword_18C5D4040;
  *(void *)a1 = static Locale.LanguageCode.multiple;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for unavailable()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.LanguageCode.unavailable = 7895162LL;
  *(void *)algn_18C5D4058 = 0xE300000000000000LL;
  xmmword_18C5D4060 = (__int128)v1;
  return result;
}

uint64_t static Locale.LanguageCode.unavailable.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for unavailable != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_18C5D4058;
  __int128 v3 = xmmword_18C5D4060;
  *(void *)a1 = static Locale.LanguageCode.unavailable;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.LanguageCode.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.LanguageCode.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.LanguageCode.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.LanguageCode.CodingKeys>,  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x189617C98],  (void (*)(void))lazy protocol witness table accessor for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys,  a2);
}

uint64_t Locale.LanguageCode.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

{
  _BYTE v2[24];
  uint64_t v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Locale.LanguageCode()
{
  return String.hash(into:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.LanguageCode@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.LanguageCode(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.LanguageCode@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.LanguageCode( a1,  (uint64_t (*)(void, uint64_t))MEMORY[0x189617C98],  a2);
}

uint64_t Locale.Script.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, Swift::String *a3@<X8>)
{
  Swift::String v6 = String._capitalized()();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  a3->_uint64_t countAndFlagsBits = a1;
  a3->_unint64_t object = a2;
  a3[1] = v6;
  return result;
}

uint64_t (*Locale.Script.identifier.modify(void *a1))()
{
  __int128 v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = v1[1];
  *__int128 v3 = *v1;
  v3[1] = v4;
  swift_bridgeObjectRetain();
  return Locale.Script.identifier.modify;
}

uint64_t static Locale.Script.unknown.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for unknown != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_18C5D4078;
  __int128 v3 = xmmword_18C5D4080;
  *(void *)a1 = static Locale.Script.unknown;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Script.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Script.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Script.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Script.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Script.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys,  a2);
}

uint64_t Locale.Script.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Script@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Script.init(from:)(a1, a2);
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.Script@<X0>( uint64_t *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v4 = *a1;
  __int128 v3 = (void *)a1[1];
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v5 = String._capitalized()();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  a2->_uint64_t countAndFlagsBits = v4;
  a2->_unint64_t object = v3;
  a2[1] = v5;
  return result;
}

void static Locale.Region.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 26482LL;
  a1[1] = 0xE200000000000000LL;
}

uint64_t Locale.Region.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x189617CA8]);
}

uint64_t (*Locale.Region.identifier.modify(void *a1))(void *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.Region.identifier.modify;
}

uint64_t Locale.Region.identifier.modify(void *a1, char a2)
{
  return Locale.LanguageCode.identifier.modify(a1, a2, (uint64_t (*)(void, uint64_t))MEMORY[0x189617CA8]);
}

uint64_t static Locale.Region.unknown.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for unknown != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_18C5D4098;
  __int128 v3 = xmmword_18C5D40A0;
  *(void *)a1 = static Locale.Region.unknown;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Locale.Region.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Region.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Region.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Region.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Region.CodingKeys>,  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x189617CA8],  (void (*)(void))lazy protocol witness table accessor for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys,  a2);
}

uint64_t Locale.Region.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

Swift::Int Locale.LanguageCode.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.LanguageCode()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Region@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Region.init(from:)(a1, a2);
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.Region@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.LanguageCode( a1,  (uint64_t (*)(void, uint64_t))MEMORY[0x189617CA8],  a2);
}

void static Locale.Collation.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 28515LL;
  a1[1] = 0xE200000000000000LL;
}

void static Locale.Collation.legacyKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 0x6F6974616C6C6F63LL;
  a1[1] = 0xE90000000000006ELL;
}

uint64_t Locale.Collation.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617C98], a3);
}

uint64_t key path setter for Locale.Script.identifier : Locale.Script(uint64_t *a1, Swift::String *a2)
{
  uint64_t v4 = *a1;
  __int128 v3 = (void *)a1[1];
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v5 = String._capitalized()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a2[1] = v5;
  uint64_t result = swift_bridgeObjectRelease();
  a2->_uint64_t countAndFlagsBits = v4;
  a2->_unint64_t object = v3;
  return result;
}

uint64_t Locale.Script.identifier.setter(uint64_t a1, void *a2)
{
  Swift::String v5 = String._capitalized()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2[1] = v5;
  uint64_t result = swift_bridgeObjectRelease();
  v2->_uint64_t countAndFlagsBits = a1;
  v2->_unint64_t object = a2;
  return result;
}

uint64_t (*Locale.Collation.identifier.modify(void *a1))()
{
  __int128 v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = v1[1];
  *__int128 v3 = *v1;
  v3[1] = v4;
  swift_bridgeObjectRetain();
  return Locale.Script.identifier.modify;
}

void Locale.Script.identifier.modify(uint64_t **a1, char a2)
{
  __int128 v3 = *a1;
  uint64_t v5 = **a1;
  uint64_t v4 = (void *)(*a1)[1];
  v3[2] = v5;
  Swift::String v6 = (Swift::String *)v3[4];
  void v3[3] = (uint64_t)v4;
  swift_bridgeObjectRetain_n();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    Swift::String v7 = String._capitalized()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6[1] = v7;
    swift_bridgeObjectRelease();
    v6->_uint64_t countAndFlagsBits = v5;
    v6->_unint64_t object = v4;
    swift_bridgeObjectRelease();
  }

  else
  {
    String.init<A>(_:)();
    Swift::String v8 = String._capitalized()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6[1] = v8;
    swift_bridgeObjectRelease();
    v6->_uint64_t countAndFlagsBits = v5;
    v6->_unint64_t object = v4;
  }

  free(v3);
}

uint64_t one-time initialization function for searchRules()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.Collation.searchRules = 0x686372616573LL;
  *(void *)algn_18C5D40B8 = 0xE600000000000000LL;
  xmmword_18C5D40C0 = (__int128)v1;
  return result;
}

uint64_t static Locale.Collation.searchRules.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for searchRules != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_18C5D40B8;
  __int128 v3 = xmmword_18C5D40C0;
  *(void *)a1 = static Locale.Collation.searchRules;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for standard()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.Collation.standard = 0x647261646E617473LL;
  *(void *)algn_18C5D40D8 = 0xE800000000000000LL;
  xmmword_18C5D40E0 = (__int128)v1;
  return result;
}

uint64_t static Locale.Collation.standard.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for standard != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_18C5D40D8;
  __int128 v3 = xmmword_18C5D40E0;
  *(void *)a1 = static Locale.Collation.standard;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Collation.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Collation.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Collation.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Script.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Collation.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys,  a2);
}

uint64_t Locale.Script.init(from:)@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v23 = *(void *)(v25 - 8);
  MEMORY[0x1895F8858](v25);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  uint64_t v22 = a4;
  if (v4)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    a3();
    dispatch thunk of Decoder.container<A>(keyedBy:)();
    LOBYTE(v24[0]) = 0;
    uint64_t v10 = v25;
    uint64_t countAndFlagsBits = KeyedDecodingContainer.decode(_:forKey:)();
    unint64_t object = v17;
    LOBYTE(v24[0]) = 1;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = v18;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v10);
  }

  else
  {
    __swift_project_boxed_opaque_existential_1(v24, v24[3]);
    uint64_t v11 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v13 = v12;
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    v24[0] = v11;
    v24[1] = v13;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    Swift::String v14 = String._capitalized()();
    uint64_t countAndFlagsBits = v14._countAndFlagsBits;
    unint64_t object = v14._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v19 = v22;
  *uint64_t v22 = v11;
  v19[1] = v13;
  void v19[2] = countAndFlagsBits;
  v19[3] = (uint64_t)object;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Locale.Collation.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Collation@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Collation.init(from:)(a1, a2);
}

void static Locale.Currency.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 30051LL;
  a1[1] = 0xE200000000000000LL;
}

void static Locale.Currency.legacyKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 0x79636E6572727563LL;
  a1[1] = 0xE800000000000000LL;
}

uint64_t Locale.Currency.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x189617C98]);
}

uint64_t (*Locale.Currency.identifier.modify(void *a1))(void *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Currency.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Currency.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Currency.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Currency.CodingKeys>,  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x189617C98],  (void (*)(void))lazy protocol witness table accessor for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys,  a2);
}

uint64_t Locale.Currency.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Currency@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Currency.init(from:)(a1, a2);
}

void static Locale.NumberingSystem.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 30062LL;
  a1[1] = 0xE200000000000000LL;
}

void static Locale.NumberingSystem.legacyKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 0x737265626D756ELL;
  a1[1] = 0xE700000000000000LL;
}

uint64_t Locale.NumberingSystem.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x189617C98]);
}

uint64_t (*Locale.NumberingSystem.identifier.modify(void *a1))(void *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t one-time initialization function for latn()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.NumberingSystem.latn = 1853120876LL;
  qword_18C5D40F8 = 0xE400000000000000LL;
  xmmword_18C5D4100 = (__int128)v1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.NumberingSystem.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.NumberingSystem.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.NumberingSystem.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.NumberingSystem.CodingKeys>,  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x189617C98],  (void (*)(void))lazy protocol witness table accessor for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys,  a2);
}

uint64_t Locale.NumberingSystem.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.NumberingSystem@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.NumberingSystem.init(from:)(a1, a2);
}

void static Locale.Weekday.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 30566LL;
  a1[1] = 0xE200000000000000LL;
}

void one-time initialization function for weekdays()
{
  static Locale.Weekday.weekdays = &outlined read-only object #0 of one-time initialization function for weekdays;
}

uint64_t static Locale.Weekday.weekdays.getter()
{
  if (one-time initialization token for weekdays != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Locale.Weekday( char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Locale.Weekday@<X0>( Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Locale.Weekday.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Locale.Weekday(void *a1@<X8>)
{
  *a1 = qword_183832E08[*v1];
  a1[1] = 0xE300000000000000LL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Weekday()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Weekday()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Locale.Weekday()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Locale.Weekday()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Weekday()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

void static Locale.HourCycle.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 25448LL;
  a1[1] = 0xE200000000000000LL;
}

void static Locale.HourCycle.legacyKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 0x7372756F68LL;
  a1[1] = 0xE500000000000000LL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Locale.HourCycle( char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Locale.HourCycle@<X0>( Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Locale.HourCycle.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Locale.HourCycle(void *a1@<X8>)
{
  *a1 = qword_183832E40[*v1];
  a1[1] = 0xE300000000000000LL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.HourCycle()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.HourCycle()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Locale.HourCycle()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Locale.HourCycle()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.HourCycle()
{
  return Hasher._finalize()();
}

void static Locale.MeasurementSystem.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 29549LL;
  a1[1] = 0xE200000000000000LL;
}

void static Locale.MeasurementSystem.legacyKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 0x6572757361656DLL;
  a1[1] = 0xE700000000000000LL;
}

uint64_t Locale.MeasurementSystem.init(stringLiteral:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617C98], a3);
}

uint64_t Locale.MeasurementSystem.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x189617C98]);
}

uint64_t (*Locale.MeasurementSystem.identifier.modify(void *a1))(void *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t one-time initialization function for metric()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.MeasurementSystem.metric = 0x63697274656DLL;
  *(void *)algn_18C5C5CE8 = 0xE600000000000000LL;
  xmmword_18C5C5CF0 = (__int128)v1;
  return result;
}

uint64_t static Locale.MeasurementSystem.metric.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for metric != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_18C5C5CE8;
  __int128 v3 = xmmword_18C5C5CF0;
  *(void *)a1 = static Locale.MeasurementSystem.metric;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for us()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.MeasurementSystem.us = 0x6D65747379737375LL;
  unk_18C5C6130 = 0xE800000000000000LL;
  xmmword_18C5C6138 = (__int128)v1;
  return result;
}

uint64_t static Locale.MeasurementSystem.us.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for us != -1) {
    swift_once();
  }
  uint64_t v2 = unk_18C5C6130;
  __int128 v3 = xmmword_18C5C6138;
  *(void *)a1 = static Locale.MeasurementSystem.us;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for uk()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.MeasurementSystem.uk = 0x6D65747379736B75LL;
  *(void *)algn_18C5D4118 = 0xE800000000000000LL;
  xmmword_18C5D4120 = (__int128)v1;
  return result;
}

uint64_t static Locale.MeasurementSystem.uk.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for uk != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_18C5D4118;
  __int128 v3 = xmmword_18C5D4120;
  *(void *)a1 = static Locale.MeasurementSystem.uk;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Locale.MeasurementSystem.measurementSystems.getter()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_183729E30;
  if (one-time initialization token for metric != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)algn_18C5C5CE8;
  __int128 v2 = xmmword_18C5C5CF0;
  *(void *)(v0 + 32) = static Locale.MeasurementSystem.metric;
  *(void *)(v0 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v1;
  *(_OWORD *)(v0 + 48) = v2;
  uint64_t v3 = one-time initialization token for us;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = unk_18C5C6130;
  __int128 v5 = xmmword_18C5C6138;
  *(void *)(v0 + 64) = static Locale.MeasurementSystem.us;
  *(void *)(v0 + 72) = v4;
  *(_OWORD *)(v0 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v5;
  uint64_t v6 = one-time initialization token for uk;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = *(void *)algn_18C5D4118;
  __int128 v8 = xmmword_18C5D4120;
  *(void *)(v0 + 96) = static Locale.MeasurementSystem.uk;
  *(void *)(v0 + 104) = v7;
  *(_OWORD *)(v0 + 112) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.MeasurementSystem.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.MeasurementSystem.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.MeasurementSystem.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.MeasurementSystem.CodingKeys>,  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x189617C98],  (void (*)(void))lazy protocol witness table accessor for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys,  a2);
}

uint64_t Locale.MeasurementSystem.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.MeasurementSystem@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.MeasurementSystem.init(from:)(a1, a2);
}

void static Locale.Subdivision.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 25715LL;
  a1[1] = 0xE200000000000000LL;
}

uint64_t Locale.Subdivision.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617C98], a3);
}

uint64_t Locale.Subdivision._identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *__int128 v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t Locale.Subdivision.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Locale.Subdivision.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x189617C98]);
}

uint64_t (*Locale.Subdivision.identifier.modify(void *a1))(void *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.Subdivision.CodingKeys()
{
  if (*v0) {
    return 0x6669746E6564695FLL;
  }
  else {
    return 0xD000000000000015LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.Subdivision.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Locale.Subdivision.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Subdivision.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Subdivision.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Subdivision.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Subdivision.CodingKeys>,  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x189617C98],  (void (*)(void))lazy protocol witness table accessor for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys,  a2);
}

uint64_t Locale.Subdivision.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Subdivision@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Subdivision.init(from:)(a1, a2);
}

void static Locale.Variant.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 24950LL;
  a1[1] = 0xE200000000000000LL;
}

uint64_t Locale.Variant.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x189617C98], a3);
}

uint64_t key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a5(*a1, v7);
  uint64_t v10 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a2[2] = v8;
  a2[3] = v10;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t Locale.Variant.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x189617C98]);
}

uint64_t Locale.LanguageCode.identifier.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = a3();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  v3[2] = v6;
  void v3[3] = v8;
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v3 = a1;
  v3[1] = a2;
  return result;
}

uint64_t (*Locale.Variant.identifier.modify(void *a1))(void *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t Locale.LanguageCode.identifier.modify( void *a1, char a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t v4 = a1[1];
  __int128 v5 = (void *)a1[2];
  uint64_t v6 = *a1;
  uint64_t v7 = a3(*a1, v4);
  uint64_t v9 = v8;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    id v5[2] = v7;
    v5[3] = v9;
    swift_bridgeObjectRelease();
    *__int128 v5 = v6;
    v5[1] = v4;
    return swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    id v5[2] = v7;
    v5[3] = v9;
    uint64_t result = swift_bridgeObjectRelease();
    *__int128 v5 = v6;
    v5[1] = v4;
  }

  return result;
}

uint64_t one-time initialization function for posix()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.Variant.posix = 0x7869736F70LL;
  *(void *)algn_18C5D4138 = 0xE500000000000000LL;
  xmmword_18C5D4140 = (__int128)v1;
  return result;
}

uint64_t static Locale.Variant.posix.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for posix != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_18C5D4138;
  __int128 v3 = xmmword_18C5D4140;
  *(void *)a1 = static Locale.Variant.posix;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Locale.LanguageCode.hash(into:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t static Locale.LanguageCode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Variant.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Variant.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Variant.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Variant.CodingKeys>,  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x189617C98],  (void (*)(void))lazy protocol witness table accessor for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys,  a2);
}

uint64_t Locale.LanguageCode.init(from:)@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, void (*a4)(void)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v5)
  {
    uint64_t v23 = a5;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v27();
    dispatch thunk of Decoder.container<A>(keyedBy:)();
    LOBYTE(v26[0]) = 0;
    uint64_t v12 = v25;
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v17 = v16;
    LOBYTE(v26[0]) = 1;
    uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v12);

    a5 = v23;
    uint64_t v21 = v18;
  }

  else
  {
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    uint64_t v21 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v20 = v13;
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    uint64_t v15 = a3(v21, v20);
    uint64_t v17 = v14;
    swift_bridgeObjectRelease();
  }

  *a5 = v21;
  a5[1] = v20;
  a5[2] = v15;
  a5[3] = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Locale.Variant.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

Swift::Int Locale.Collation.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Variant@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Variant.init(from:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Collation()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.LanguageCode@<X0>( void *a1@<X0>, uint64_t (*a2)(void, uint64_t)@<X3>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t result = a2(*a1, v5);
  *a3 = v4;
  a3[1] = v5;
  a3[2] = result;
  a3[3] = v7;
  return result;
}

Swift::Int ICULegacyKey.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ICUCLDRKey()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICULegacyKey()
{
  return Hasher._finalize()();
}

BOOL specialized static Locale.Components.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v87 = *(void *)(a1 + 128);
  uint64_t v88 = *(void *)(a1 + 112);
  uint64_t v85 = *(void *)(a1 + 144);
  uint64_t v86 = *(void *)(a1 + 120);
  uint64_t v82 = *(void *)(a1 + 152);
  uint64_t v83 = *(void *)(a1 + 104);
  uint64_t v84 = *(void *)(a1 + 160);
  uint64_t v74 = *(void *)(a1 + 168);
  uint64_t v81 = *(void *)(a1 + 176);
  uint64_t v77 = *(void *)(a1 + 184);
  uint64_t v78 = *(void *)(a1 + 136);
  uint64_t v79 = *(void *)(a1 + 192);
  int v72 = *(unsigned __int8 *)(a1 + 200);
  int v70 = *(unsigned __int8 *)(a1 + 201);
  uint64_t v68 = *(void *)(a1 + 216);
  uint64_t v65 = *(void *)(a1 + 224);
  uint64_t v66 = *(void *)(a1 + 232);
  uint64_t v62 = *(void *)(a1 + 248);
  uint64_t v57 = *(void *)(a1 + 256);
  uint64_t v59 = *(void *)(a1 + 208);
  uint64_t v60 = *(void *)(a1 + 264);
  uint64_t v46 = *(void *)(a1 + 272);
  uint64_t v54 = *(void *)(a1 + 280);
  uint64_t v49 = *(void *)(a1 + 288);
  uint64_t v51 = *(void *)(a1 + 240);
  uint64_t v52 = *(void *)(a1 + 296);
  uint64_t v44 = *(void *)(a1 + 304);
  uint64_t v3 = *(void *)(a1 + 312);
  __int128 v4 = *(_OWORD *)(a1 + 16);
  v90[0] = *(_OWORD *)a1;
  v90[1] = v4;
  __int128 v5 = *(_OWORD *)(a1 + 48);
  v90[2] = *(_OWORD *)(a1 + 32);
  v90[3] = v5;
  __int128 v6 = *(_OWORD *)(a1 + 80);
  uint64_t v34 = *(void *)(a1 + 320);
  uint64_t v41 = *(void *)(a1 + 328);
  uint64_t v42 = v3;
  uint64_t v37 = *(void *)(a1 + 336);
  uint64_t v39 = *(void *)(a1 + 344);
  v90[4] = *(_OWORD *)(a1 + 64);
  v90[5] = v6;
  __int128 v7 = *(_OWORD *)(a2 + 16);
  v89[0] = *(_OWORD *)a2;
  v89[1] = v7;
  __int128 v8 = *(_OWORD *)(a2 + 48);
  v89[2] = *(_OWORD *)(a2 + 32);
  v89[3] = v8;
  __int128 v9 = *(_OWORD *)(a2 + 80);
  int v10 = *(unsigned __int8 *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 104);
  uint64_t v11 = *(void *)(a2 + 112);
  uint64_t v13 = *(void *)(a2 + 120);
  uint64_t v14 = *(void *)(a2 + 128);
  uint64_t v16 = *(void *)(a2 + 136);
  uint64_t v15 = *(void *)(a2 + 144);
  uint64_t v18 = *(void *)(a2 + 152);
  uint64_t v17 = *(void *)(a2 + 160);
  uint64_t v73 = *(void *)(a2 + 168);
  uint64_t v80 = *(void *)(a2 + 176);
  uint64_t v75 = *(void *)(a2 + 192);
  uint64_t v76 = *(void *)(a2 + 184);
  int v71 = *(unsigned __int8 *)(a2 + 200);
  int v69 = *(unsigned __int8 *)(a2 + 201);
  uint64_t v58 = *(void *)(a2 + 208);
  uint64_t v67 = *(void *)(a2 + 216);
  uint64_t v63 = *(void *)(a2 + 232);
  uint64_t v64 = *(void *)(a2 + 224);
  uint64_t v50 = *(void *)(a2 + 240);
  uint64_t v61 = *(void *)(a2 + 248);
  uint64_t v55 = *(void *)(a2 + 264);
  uint64_t v56 = *(void *)(a2 + 256);
  uint64_t v45 = *(void *)(a2 + 272);
  uint64_t v53 = *(void *)(a2 + 280);
  uint64_t v47 = *(void *)(a2 + 296);
  uint64_t v48 = *(void *)(a2 + 288);
  uint64_t v43 = *(void *)(a2 + 304);
  uint64_t v38 = *(void *)(a2 + 312);
  uint64_t v33 = *(void *)(a2 + 320);
  uint64_t v40 = *(void *)(a2 + 328);
  uint64_t v35 = *(void *)(a2 + 344);
  uint64_t v36 = *(void *)(a2 + 336);
  v89[4] = *(_OWORD *)(a2 + 64);
  v89[5] = v9;
  if (v2 == 16)
  {
    if (v10 != 16) {
      return 0LL;
    }
  }

  else
  {
    BOOL result = 0LL;
    if (v10 == 16 || v2 != v10) {
      return result;
    }
  }

  if (!v88)
  {
    if (!v11)
    {
LABEL_14:
      if (v85)
      {
        if (v15)
        {
          if (v82 != v18 || v84 != v17)
          {
            char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0LL;
            if ((v21 & 1) == 0) {
              return result;
            }
          }

unint64_t lazy protocol witness table accessor for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Components.CodingKeys, &unk_189C95B80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Components.CodingKeys, &unk_189C95B80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Components.CodingKeys, &unk_189C95B80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Components.CodingKeys, &unk_189C95B80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Collation and conformance Locale.Collation()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Collation,  &type metadata for Locale.Collation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Collation,  &type metadata for Locale.Collation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Collation,  &type metadata for Locale.Collation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Collation,  &type metadata for Locale.Collation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Collation,  &type metadata for Locale.Collation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Currency and conformance Locale.Currency()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Currency,  &type metadata for Locale.Currency);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Currency,  &type metadata for Locale.Currency);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Currency,  &type metadata for Locale.Currency);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Currency,  &type metadata for Locale.Currency);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Currency,  &type metadata for Locale.Currency);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.NumberingSystem,  &type metadata for Locale.NumberingSystem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.NumberingSystem,  &type metadata for Locale.NumberingSystem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.NumberingSystem,  &type metadata for Locale.NumberingSystem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.NumberingSystem,  &type metadata for Locale.NumberingSystem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.NumberingSystem,  &type metadata for Locale.NumberingSystem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.HourCycle and conformance Locale.HourCycle()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle;
  if (!lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.HourCycle,  &type metadata for Locale.HourCycle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle;
  if (!lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.HourCycle,  &type metadata for Locale.HourCycle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle;
  if (!lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.HourCycle,  &type metadata for Locale.HourCycle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle;
  if (!lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.HourCycle,  &type metadata for Locale.HourCycle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.MeasurementSystem,  &type metadata for Locale.MeasurementSystem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.MeasurementSystem,  &type metadata for Locale.MeasurementSystem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.MeasurementSystem,  &type metadata for Locale.MeasurementSystem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.MeasurementSystem,  &type metadata for Locale.MeasurementSystem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.MeasurementSystem,  &type metadata for Locale.MeasurementSystem);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Subdivision and conformance Locale.Subdivision()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Subdivision,  &type metadata for Locale.Subdivision);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Subdivision,  &type metadata for Locale.Subdivision);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Subdivision,  &type metadata for Locale.Subdivision);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Subdivision,  &type metadata for Locale.Subdivision);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Subdivision,  &type metadata for Locale.Subdivision);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Variant and conformance Locale.Variant()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Variant, &type metadata for Locale.Variant);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Variant, &type metadata for Locale.Variant);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Variant, &type metadata for Locale.Variant);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Variant, &type metadata for Locale.Variant);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Variant, &type metadata for Locale.Variant);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.LanguageCode.CodingKeys,  &type metadata for Locale.LanguageCode.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.LanguageCode.CodingKeys,  &type metadata for Locale.LanguageCode.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.LanguageCode.CodingKeys,  &type metadata for Locale.LanguageCode.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.LanguageCode.CodingKeys,  &type metadata for Locale.LanguageCode.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Script.CodingKeys,  &type metadata for Locale.Script.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Script.CodingKeys,  &type metadata for Locale.Script.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Script.CodingKeys,  &type metadata for Locale.Script.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Script.CodingKeys,  &type metadata for Locale.Script.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Region.CodingKeys,  &type metadata for Locale.Region.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Region.CodingKeys,  &type metadata for Locale.Region.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Region.CodingKeys,  &type metadata for Locale.Region.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Region.CodingKeys,  &type metadata for Locale.Region.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Collation.CodingKeys,  &type metadata for Locale.Collation.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Collation.CodingKeys,  &type metadata for Locale.Collation.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Collation.CodingKeys,  &type metadata for Locale.Collation.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Collation.CodingKeys,  &type metadata for Locale.Collation.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Currency.CodingKeys,  &type metadata for Locale.Currency.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Currency.CodingKeys,  &type metadata for Locale.Currency.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Currency.CodingKeys,  &type metadata for Locale.Currency.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Currency.CodingKeys,  &type metadata for Locale.Currency.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.NumberingSystem.CodingKeys,  &type metadata for Locale.NumberingSystem.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.NumberingSystem.CodingKeys,  &type metadata for Locale.NumberingSystem.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.NumberingSystem.CodingKeys,  &type metadata for Locale.NumberingSystem.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.NumberingSystem.CodingKeys,  &type metadata for Locale.NumberingSystem.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.MeasurementSystem.CodingKeys,  &type metadata for Locale.MeasurementSystem.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.MeasurementSystem.CodingKeys,  &type metadata for Locale.MeasurementSystem.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.MeasurementSystem.CodingKeys,  &type metadata for Locale.MeasurementSystem.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.MeasurementSystem.CodingKeys,  &type metadata for Locale.MeasurementSystem.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Subdivision.CodingKeys,  &type metadata for Locale.Subdivision.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Subdivision.CodingKeys,  &type metadata for Locale.Subdivision.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Subdivision.CodingKeys,  &type metadata for Locale.Subdivision.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Subdivision.CodingKeys,  &type metadata for Locale.Subdivision.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Variant.CodingKeys,  &type metadata for Locale.Variant.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Variant.CodingKeys,  &type metadata for Locale.Variant.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Variant.CodingKeys,  &type metadata for Locale.Variant.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Variant.CodingKeys,  &type metadata for Locale.Variant.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Components and conformance Locale.Components()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Components and conformance Locale.Components;
  if (!lazy protocol witness table cache variable for type Locale.Components and conformance Locale.Components)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.Components,  &type metadata for Locale.Components);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components and conformance Locale.Components);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.LanguageCode.IdentifierType and conformance Locale.LanguageCode.IdentifierType()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode.IdentifierType and conformance Locale.LanguageCode.IdentifierType;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.IdentifierType and conformance Locale.LanguageCode.IdentifierType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Locale.LanguageCode.IdentifierType,  &type metadata for Locale.LanguageCode.IdentifierType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.IdentifierType and conformance Locale.LanguageCode.IdentifierType);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ICULegacyKey and conformance ICULegacyKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ICULegacyKey and conformance ICULegacyKey;
  if (!lazy protocol witness table cache variable for type ICULegacyKey and conformance ICULegacyKey)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for ICULegacyKey, &type metadata for ICULegacyKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyKey and conformance ICULegacyKey);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ICUCLDRKey and conformance ICUCLDRKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUCLDRKey and conformance ICUCLDRKey;
  if (!lazy protocol witness table cache variable for type ICUCLDRKey and conformance ICUCLDRKey)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for ICUCLDRKey, &type metadata for ICUCLDRKey);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICUCLDRKey and conformance ICUCLDRKey);
  }

  return result;
}

uint64_t sub_1834BF398@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1834BF3A4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t))MEMORY[0x189617C98]);
}

uint64_t sub_1834BF3C0(uint64_t *a1, Swift::String *a2)
{
  return key path setter for Locale.Script.identifier : Locale.Script(a1, a2);
}

uint64_t sub_1834BF3D4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t))MEMORY[0x189617CA8]);
}

uint64_t sub_1834BF3F0(uint64_t *a1, Swift::String *a2)
{
  return key path setter for Locale.Script.identifier : Locale.Script(a1, a2);
}

uint64_t sub_1834BF404(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t))MEMORY[0x189617C98]);
}

uint64_t sub_1834BF420(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t))MEMORY[0x189617C98]);
}

uint64_t sub_1834BF43C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t))MEMORY[0x189617C98]);
}

uint64_t sub_1834BF458(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t))MEMORY[0x189617C98]);
}

uint64_t sub_1834BF474(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t))MEMORY[0x189617C98]);
}

uint64_t destroy for Locale.Components(void *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[9])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[14])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[18])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[27])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[31])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[35])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_unknownObjectRelease();
  uint64_t result = a1[41];
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t initializeWithCopy for Locale.Components(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    __int128 v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    uint64_t v8 = *(void *)(a2 + 72);
    if (v8) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  __int128 v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = *(void *)(a2 + 72);
  if (v8)
  {
LABEL_4:
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v8;
    uint64_t v9 = *(void *)(a2 + 88);
    *(void *)(a1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }

uint64_t assignWithCopy for Locale.Components(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.LanguageCode(a1);
      __int128 v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
    }
  }

  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
  }

  uint64_t v7 = (_OWORD *)(a1 + 32);
  uint64_t v8 = (_OWORD *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v9)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 32);
      __int128 v10 = *(_OWORD *)(a2 + 48);
      *uint64_t v7 = *v8;
      *(_OWORD *)(a1 + 48) = v10;
    }
  }

  else if (v9)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v11 = *(_OWORD *)(a2 + 48);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 48) = v11;
  }

  __int128 v12 = (_OWORD *)(a1 + 64);
  uint64_t v13 = (_OWORD *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v14)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 64);
      __int128 v15 = *(_OWORD *)(a2 + 80);
      *__int128 v12 = *v13;
      *(_OWORD *)(a1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v15;
    }
  }

  else if (v14)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v16 = *(_OWORD *)(a2 + 80);
    *__int128 v12 = *v13;
    *(_OWORD *)(a1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v16;
  }

  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v17 = (_OWORD *)(a1 + 104);
  uint64_t v18 = (_OWORD *)(a2 + 104);
  uint64_t v19 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112))
  {
    if (v19)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 12__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 104);
      __int128 v20 = *(_OWORD *)(a2 + 120);
      *uint64_t v17 = *v18;
      *(_OWORD *)(a1 + 12__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v20;
    }
  }

  else if (v19)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 12__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v21 = *(_OWORD *)(a2 + 120);
    *uint64_t v17 = *v18;
    *(_OWORD *)(a1 + 12__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v21;
  }

  uint64_t v22 = (_OWORD *)(a1 + 136);
  uint64_t v23 = (_OWORD *)(a2 + 136);
  uint64_t v24 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144))
  {
    if (v24)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 16__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 136);
      __int128 v25 = *(_OWORD *)(a2 + 152);
      *uint64_t v22 = *v23;
      *(_OWORD *)(a1 + 152) = v25;
    }
  }

  else if (v24)
  {
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 16__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v26 = *(_OWORD *)(a2 + 152);
    *uint64_t v22 = *v23;
    *(_OWORD *)(a1 + 152) = v26;
  }

  uint64_t v27 = (_OWORD *)(a1 + 168);
  __int128 v28 = (_OWORD *)(a2 + 168);
  uint64_t v29 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176))
  {
    if (v29)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 168);
      __int128 v30 = *(_OWORD *)(a2 + 184);
      *uint64_t v27 = *v28;
      *(_OWORD *)(a1 + 184) = v30;
    }
  }

  else if (v29)
  {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v31 = *(_OWORD *)(a2 + 184);
    *uint64_t v27 = *v28;
    *(_OWORD *)(a1 + 184) = v31;
  }

  *(_BYTE *)(a1 + 20__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  uint64_t v32 = (_OWORD *)(a1 + 208);
  uint64_t v33 = (_OWORD *)(a2 + 208);
  uint64_t v34 = *(void *)(a2 + 216);
  if (*(void *)(a1 + 216))
  {
    if (v34)
    {
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 208);
      __int128 v35 = *(_OWORD *)(a2 + 224);
      *uint64_t v32 = *v33;
      *(_OWORD *)(a1 + 224) = v35;
    }
  }

  else if (v34)
  {
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v36 = *(_OWORD *)(a2 + 224);
    *uint64_t v32 = *v33;
    *(_OWORD *)(a1 + 224) = v36;
  }

  uint64_t v37 = (_OWORD *)(a1 + 240);
  uint64_t v38 = (_OWORD *)(a2 + 240);
  uint64_t v39 = *(void *)(a2 + 248);
  if (*(void *)(a1 + 248))
  {
    if (v39)
    {
      *(void *)(a1 + 24__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 240);
      __int128 v40 = *(_OWORD *)(a2 + 256);
      *uint64_t v37 = *v38;
      *(_OWORD *)(a1 + 256) = v40;
    }
  }

  else if (v39)
  {
    *(void *)(a1 + 24__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v41 = *(_OWORD *)(a2 + 256);
    *uint64_t v37 = *v38;
    *(_OWORD *)(a1 + 256) = v41;
  }

  uint64_t v42 = (_OWORD *)(a1 + 272);
  uint64_t v43 = (_OWORD *)(a2 + 272);
  uint64_t v44 = *(void *)(a2 + 280);
  if (*(void *)(a1 + 280))
  {
    if (v44)
    {
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 28__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 280);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 272);
      __int128 v45 = *(_OWORD *)(a2 + 288);
      *uint64_t v42 = *v43;
      *(_OWORD *)(a1 + 288) = v45;
    }
  }

  else if (v44)
  {
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 28__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 280);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v46 = *(_OWORD *)(a2 + 288);
    *uint64_t v42 = *v43;
    *(_OWORD *)(a1 + 288) = v46;
  }

  uint64_t v47 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 312) = v47;
  uint64_t v48 = (_OWORD *)(a1 + 320);
  uint64_t v49 = (_OWORD *)(a2 + 320);
  uint64_t v50 = *(void *)(a2 + 328);
  if (*(void *)(a1 + 328))
  {
    if (v50)
    {
      *(void *)(a1 + 32__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 320);
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 320);
      __int128 v51 = *(_OWORD *)(a2 + 336);
      *uint64_t v48 = *v49;
      *(_OWORD *)(a1 + 336) = v51;
    }
  }

  else if (v50)
  {
    *(void *)(a1 + 32__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 320);
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v52 = *(_OWORD *)(a2 + 336);
    *uint64_t v48 = *v49;
    *(_OWORD *)(a1 + 336) = v52;
  }

  return a1;
}

void *__swift_memcpy352_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x160uLL);
}

uint64_t assignWithTake for Locale.Components(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }

    outlined destroy of Locale.LanguageCode(a1);
  }

  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_6:
  if (*(void *)(a1 + 40))
  {
    uint64_t v7 = *(void *)(a2 + 40);
    if (v7)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }

    outlined destroy of Locale.LanguageCode(a1 + 32);
  }

  __int128 v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
LABEL_11:
  if (*(void *)(a1 + 72))
  {
    uint64_t v10 = *(void *)(a2 + 72);
    if (v10)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v10;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 88);
      *(void *)(a1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }

    outlined destroy of Locale.LanguageCode(a1 + 64);
  }

  __int128 v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 8__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v12;
LABEL_16:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  if (*(void *)(a1 + 112))
  {
    uint64_t v13 = *(void *)(a2 + 112);
    if (v13)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = v13;
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 128);
      *(void *)(a1 + 12__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = v14;
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }

    outlined destroy of Locale.LanguageCode(a1 + 104);
  }

  __int128 v15 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 12__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v15;
LABEL_21:
  if (*(void *)(a1 + 144))
  {
    uint64_t v16 = *(void *)(a2 + 144);
    if (v16)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = v16;
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 16__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v17;
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }

    outlined destroy of Locale.LanguageCode(a1 + 136);
  }

  __int128 v18 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v18;
LABEL_26:
  if (*(void *)(a1 + 176))
  {
    uint64_t v19 = *(void *)(a2 + 176);
    if (v19)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v19;
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v20;
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }

    outlined destroy of Locale.LanguageCode(a1 + 168);
  }

  __int128 v21 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v21;
LABEL_31:
  *(_WORD *)(a1 + 20__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_WORD *)(a2 + 200);
  if (*(void *)(a1 + 216))
  {
    uint64_t v22 = *(void *)(a2 + 216);
    if (v22)
    {
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = v22;
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void *)(a2 + 232);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = v23;
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }

    outlined destroy of Locale.LanguageCode(a1 + 208);
  }

  __int128 v24 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v24;
LABEL_36:
  if (*(void *)(a1 + 248))
  {
    uint64_t v25 = *(void *)(a2 + 248);
    if (v25)
    {
      *(void *)(a1 + 24__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = v25;
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(a2 + 264);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(void *)(a1 + 264) = v26;
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }

    outlined destroy of Locale.LanguageCode(a1 + 240);
  }

  __int128 v27 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 24__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v27;
LABEL_41:
  if (*(void *)(a1 + 280))
  {
    uint64_t v28 = *(void *)(a2 + 280);
    if (v28)
    {
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 28__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v28;
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(a2 + 296);
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = v29;
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }

    outlined destroy of Locale.LanguageCode(a1 + 272);
  }

  __int128 v30 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v30;
LABEL_46:
  uint64_t v31 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_unknownObjectRelease();
  *(void *)(a1 + 312) = v31;
  if (!*(void *)(a1 + 328))
  {
LABEL_50:
    __int128 v34 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 32__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v34;
    return a1;
  }

  uint64_t v32 = *(void *)(a2 + 328);
  if (!v32)
  {
    outlined destroy of Locale.LanguageCode(a1 + 320);
    goto LABEL_50;
  }

  *(void *)(a1 + 32__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = v32;
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v33;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Locale.Components(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 352)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Locale.Components(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 344) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 28__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 352) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 352) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Locale.Components()
{
  return &type metadata for Locale.Components;
}

ValueMetadata *type metadata accessor for Locale.LanguageCode()
{
  return &type metadata for Locale.LanguageCode;
}

ValueMetadata *type metadata accessor for Locale.LanguageCode.IdentifierType()
{
  return &type metadata for Locale.LanguageCode.IdentifierType;
}

ValueMetadata *type metadata accessor for Locale.Script()
{
  return &type metadata for Locale.Script;
}

ValueMetadata *type metadata accessor for Locale.Region()
{
  return &type metadata for Locale.Region;
}

ValueMetadata *type metadata accessor for Locale.Collation()
{
  return &type metadata for Locale.Collation;
}

ValueMetadata *type metadata accessor for Locale.Currency()
{
  return &type metadata for Locale.Currency;
}

ValueMetadata *type metadata accessor for Locale.NumberingSystem()
{
  return &type metadata for Locale.NumberingSystem;
}

uint64_t storeEnumTagSinglePayload for Locale.Weekday(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1834C0444 + 4 * byte_183830FE1[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1834C0478 + 4 * byte_183830FDC[v4]))();
}

uint64_t sub_1834C0478(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834C0480(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834C0488LL);
  }
  return result;
}

uint64_t sub_1834C0494(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834C049CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1834C04A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834C04A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Locale.Weekday()
{
  return &type metadata for Locale.Weekday;
}

uint64_t storeEnumTagSinglePayload for Locale.HourCycle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1834C0510 + 4 * byte_183830FEB[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1834C0544 + 4 * byte_183830FE6[v4]))();
}

uint64_t sub_1834C0544(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834C054C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834C0554LL);
  }
  return result;
}

uint64_t sub_1834C0560(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834C0568LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1834C056C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834C0574(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Locale.HourCycle()
{
  return &type metadata for Locale.HourCycle;
}

ValueMetadata *type metadata accessor for Locale.MeasurementSystem()
{
  return &type metadata for Locale.MeasurementSystem;
}

ValueMetadata *type metadata accessor for Locale.Subdivision()
{
  return &type metadata for Locale.Subdivision;
}

ValueMetadata *type metadata accessor for Locale.Variant()
{
  return &type metadata for Locale.Variant;
}

ValueMetadata *type metadata accessor for ICULegacyKey()
{
  return &type metadata for ICULegacyKey;
}

ValueMetadata *type metadata accessor for ICUCLDRKey()
{
  return &type metadata for ICUCLDRKey;
}

ValueMetadata *type metadata accessor for Locale.Variant.CodingKeys()
{
  return &type metadata for Locale.Variant.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Subdivision.CodingKeys()
{
  return &type metadata for Locale.Subdivision.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.MeasurementSystem.CodingKeys()
{
  return &type metadata for Locale.MeasurementSystem.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.NumberingSystem.CodingKeys()
{
  return &type metadata for Locale.NumberingSystem.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Currency.CodingKeys()
{
  return &type metadata for Locale.Currency.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Collation.CodingKeys()
{
  return &type metadata for Locale.Collation.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Region.CodingKeys()
{
  return &type metadata for Locale.Region.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Script.CodingKeys()
{
  return &type metadata for Locale.Script.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Locale.LanguageCode.IdentifierType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1834C06AC + 4 * byte_183830FF5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1834C06E0 + 4 * byte_183830FF0[v4]))();
}

uint64_t sub_1834C06E0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834C06E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834C06F0LL);
  }
  return result;
}

uint64_t sub_1834C06FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834C0704LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1834C0708(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834C0710(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Locale.LanguageCode.CodingKeys()
{
  return &type metadata for Locale.LanguageCode.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Locale.Components.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_1834C0778 + 4 * byte_183830FFF[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1834C07AC + 4 * byte_183830FFA[v4]))();
}

uint64_t sub_1834C07AC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834C07B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834C07BCLL);
  }
  return result;
}

uint64_t sub_1834C07C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834C07D0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 11;
  return result;
}

uint64_t sub_1834C07D4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834C07DC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Locale.Components.CodingKeys()
{
  return &unk_189C95B80;
}

uint64_t specialized Locale.Components.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012LL && a2 == 0x80000001839D3600LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x7261646E656C6163LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x6F6974616C6C6F63LL && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x79636E6572727563LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x6E697265626D756ELL && a2 == 0xEF6D657473795367LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0x7961447473726966LL && a2 == 0xEE006B656557664FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else if (a1 == 0x6C63794372756F68LL && a2 == 0xE900000000000065LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6LL;
  }

  else if (a1 == 0xD000000000000011LL && a2 == 0x80000001839D3620LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7LL;
  }

  else if (a1 == 0x6E6F69676572LL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8LL;
  }

  else if (a1 == 0x7369766964627573LL && a2 == 0xEB000000006E6F69LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9LL;
  }

  else if (a1 == 0x656E6F5A656D6974LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10LL;
  }

  else if (a1 == 0x746E6169726176LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 11LL;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      return 11LL;
    }
    else {
      return 12LL;
    }
  }

uint64_t specialized Locale.Subdivision.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015LL && a2 == 0x80000001839D3640LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6669746E6564695FLL && a2 == 0xEB00000000726569LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

__CFString *one-time initialization function for _catInfoKeys()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_183729E10;
  *(void *)(v0 + 32) = @"NSFileHFSCreatorCode";
  *(void *)(v0 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = @"NSFileHFSTypeCode";
  *(void *)(v0 + 48) = @"NSFileBusy";
  *(void *)(v0 + 56) = @"NSFileExtensionHidden";
  *(void *)(v0 + 64) = @"NSFileCreationDate";
  static _FileManagerImpl._catInfoKeys = (_UNKNOWN *)v0;
  __int16 v1 = @"NSFileHFSCreatorCode";
  uint64_t v2 = @"NSFileHFSTypeCode";
  int v3 = @"NSFileBusy";
  uint64_t v4 = @"NSFileExtensionHidden";
  return @"NSFileCreationDate";
}

void closure #1 in static _FileManagerImpl._setAttributes(_:at:followSymLinks:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X11 }

uint64_t sub_1834C18CC@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W4>, const char *a4@<X8>, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t value, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  uint64_t v43 = a1;
  __int16 v44 = a2;
  char v45 = BYTE2(a2);
  char v46 = BYTE3(a2);
  char v47 = BYTE4(a2);
  char v48 = BYTE5(a2);
  uint64_t result = setxattr(v25, a4, &v43, BYTE6(a2), 0, (a3 & 1) == 0);
  if ((_DWORD)result == -1)
  {
    uint64_t v27 = String.init(cString:)();
    unint64_t v29 = v28;
    int v30 = MEMORY[0x186E1B0E8]();
    uint64_t v31 = 4LL;
    switch(v30)
    {
      case 1:
      case 13:
        uint64_t v31 = 513LL;
        goto LABEL_11;
      case 2:
        goto LABEL_11;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_6;
      case 17:
        uint64_t v31 = 516LL;
        goto LABEL_11;
      case 28:
      case 69:
        uint64_t v31 = 640LL;
        goto LABEL_11;
      case 30:
        uint64_t v31 = 642LL;
        goto LABEL_11;
      case 63:
        uint64_t v31 = 514LL;
        goto LABEL_11;
      default:
        if (v30 == 102)
        {
          id v32 = 0LL;
          uint64_t v31 = 512LL;
        }

        else
        {
LABEL_6:
          uint64_t v31 = 512LL;
LABEL_11:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
          {
            unint64_t v49 = 0LL;
            unint64_t v50 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(22LL);
            swift_bridgeObjectRelease();
            unint64_t v49 = 0xD000000000000014LL;
            unint64_t v50 = 0x80000001839C9190LL;
            v42._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v42);
            swift_bridgeObjectRelease();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x1834C2288LL);
          }

          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v33 = (int)POSIXErrorCode.rawValue.getter();
          id v34 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v35 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v32 = objc_msgSend(v34, sel_initWithDomain_code_userInfo_, v35, v33, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v36 = objc_msgSend(v32, sel_domain);
          id v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
          uint64_t v39 = v38;

          if (v37 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v39 == v40)
          {
            swift_bridgeObjectRelease_n();
          }

          else
          {
            char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v41 & 1) == 0)
            {
              __break(1u);
              JUMPOUT(0x1834C1D10LL);
            }
          }
        }

        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v31,  v27,  v29,  v32,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v49,  0LL,  0LL);
        uint64_t result = swift_willThrow();
        break;
    }
  }

  return result;
}

uint64_t closure #1 in static _FileManagerImpl._userAccountNameToNumber(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static _FileManagerImpl._userAccountNameToNumber(_:)((uint64_t (*)(void))MEMORY[0x1895FB660], a1);
}

uint64_t closure #1 in static _FileManagerImpl._groupAccountNameToNumber(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static _FileManagerImpl._userAccountNameToNumber(_:)((uint64_t (*)(void))MEMORY[0x1895FB568], a1);
}

uint64_t closure #1 in static _FileManagerImpl._userAccountNameToNumber(_:)@<X0>( uint64_t (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  if (result) {
    int v4 = *(_DWORD *)(result + 16);
  }
  else {
    int v4 = 0;
  }
  *(_DWORD *)a2 = v4;
  *(_BYTE *)(a2 + 4) = result == 0;
  return result;
}

unint64_t specialized static _FileManagerImpl._fileProtectionValueForPath(_:)(const char *a1)
{
  v5[3] = *MEMORY[0x1895F89C0];
  v5[1] = 0LL;
  id v5[2] = 0LL;
  uint64_t v4 = 0LL;
  v5[0] = 0x4000000000000005LL;
  int v1 = getattrlist(a1, v5, &v4, 8uLL, 1u);
  if (v1) {
    uint64_t v2 = 0LL;
  }
  else {
    uint64_t v2 = HIDWORD(v4);
  }
  return v2 | ((unint64_t)(v1 != 0) << 32);
}

uint64_t specialized static _FileManagerImpl._setCatInfoAttributes(_:path:)( uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a1;
  v105[3] = *MEMORY[0x1895F89C0];
  uint64_t v95 = a1 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v96 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  int64_t v7 = 0LL;
  uint64_t v8 = (void *)&unk_18C490000;
  __int128 v9 = (void *)&unk_18C490000;
  uint64_t v97 = v3;
  while (1)
  {
    do
    {
      if (v6)
      {
        unint64_t v10 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v11 = v10 | (v7 << 6);
      }

      else
      {
        int64_t v12 = v7 + 1;
        if (__OFADD__(v7, 1LL)) {
          goto LABEL_125;
        }
        if (v12 >= v96) {
          goto LABEL_61;
        }
        unint64_t v13 = *(void *)(v95 + 8 * v12);
        ++v7;
        if (!v13)
        {
          int64_t v7 = v12 + 1;
          if (v12 + 1 >= v96) {
            goto LABEL_61;
          }
          unint64_t v13 = *(void *)(v95 + 8 * v7);
          if (!v13)
          {
            int64_t v7 = v12 + 2;
            if (v12 + 2 >= v96) {
              goto LABEL_61;
            }
            unint64_t v13 = *(void *)(v95 + 8 * v7);
            if (!v13)
            {
              int64_t v7 = v12 + 3;
              if (v12 + 3 >= v96) {
                goto LABEL_61;
              }
              unint64_t v13 = *(void *)(v95 + 8 * v7);
              if (!v13)
              {
                int64_t v7 = v12 + 4;
                if (v12 + 4 >= v96) {
                  goto LABEL_61;
                }
                unint64_t v13 = *(void *)(v95 + 8 * v7);
                if (!v13)
                {
                  int64_t v14 = v12 + 5;
                  if (v14 >= v96) {
                    goto LABEL_61;
                  }
                  unint64_t v13 = *(void *)(v95 + 8 * v14);
                  if (!v13)
                  {
                    while (1)
                    {
                      int64_t v7 = v14 + 1;
                      if (__OFADD__(v14, 1LL)) {
                        __break(1u);
                      }
                      if (v7 >= v96) {
                        break;
                      }
                      unint64_t v13 = *(void *)(v95 + 8 * v7);
                      ++v14;
                      if (v13) {
                        goto LABEL_24;
                      }
                    }

uint64_t specialized static _FileManagerImpl._setAttributes(_:at:followSymLinks:)(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v21 = a1 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  uint64_t v23 = v7;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = 16 * i;
    __int128 v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    id v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    uint64_t v2 = *v18;
    unint64_t v1 = v18[1];
    MEMORY[0x1895F8858](v7);
    if ((v16 & 0x1000000000000000LL) == 0)
    {
      if ((v16 & 0x2000000000000000LL) != 0) {
        __asm { BR              X9 }
      }

      if ((v17 & 0x1000000000000000LL) != 0) {
        __asm { BR              X9 }
      }
    }

    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v2, v1);
    _StringGuts._slowWithCString<A>(_:)();
    if (v20) {
      break;
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = outlined consume of Data._Representation(v2, v1);
    uint64_t v3 = v23;
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v8++, 1LL))
    {
      __break(1u);
      JUMPOUT(0x1834C491CLL);
    }

    if (v8 >= v22) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v21 + 8 * v8);
    if (!v12)
    {
      int64_t v13 = v8 + 1;
      if (v8 + 1 >= v22) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v21 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 2;
        if (v8 + 2 >= v22) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v21 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 3;
          if (v8 + 3 >= v22) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v21 + 8 * v13);
          if (!v12)
          {
            while (1)
            {
              int64_t v8 = v13 + 1;
              if (__OFADD__(v13, 1LL)) {
                break;
              }
              if (v8 >= v22) {
                return swift_release();
              }
              unint64_t v12 = *(void *)(v21 + 8 * v8);
              ++v13;
              if (v12) {
                goto LABEL_15;
              }
            }

            __break(1u);
            break;
          }
        }
      }

      int64_t v8 = v13;
    }

void partial apply for closure #1 in static _FileManagerImpl._setAttributes(_:at:followSymLinks:)( uint64_t a1)
{
}

unint64_t *specialized Collection.formIndex(after:)(unint64_t *result)
{
  unint64_t v2 = *result;
  uint64_t v3 = (void *)result[1];
  uint64_t v5 = (__int128 *)result[2];
  uint64_t v4 = (void *)result[3];
  __int128 v6 = *(_OWORD *)(v1 + 176);
  __int128 v191 = *(_OWORD *)(v1 + 160);
  __int128 v192 = v6;
  uint64_t v7 = *(void *)(v1 + 200);
  unint64_t v193 = *(void *)(v1 + 192);
  __int128 v8 = *(_OWORD *)(v1 + 112);
  __int128 v187 = *(_OWORD *)(v1 + 96);
  __int128 v188 = v8;
  __int128 v9 = *(_OWORD *)(v1 + 144);
  __int128 v189 = *(_OWORD *)(v1 + 128);
  __int128 v190 = v9;
  __int128 v10 = *(_OWORD *)(v1 + 48);
  v184[2] = *(_OWORD *)(v1 + 32);
  v184[3] = v10;
  __int128 v11 = *(_OWORD *)(v1 + 80);
  __int128 v185 = *(_OWORD *)(v1 + 64);
  __int128 v186 = v11;
  __int128 v12 = *(_OWORD *)(v1 + 16);
  v184[0] = *(_OWORD *)v1;
  v184[1] = v12;
  uint64_t v183 = v7;
  if (v2 >> 10 < *((void *)&v189 + 1) >> 10 || v2 >> 10 >= *((void *)&v191 + 1) >> 10) {
    goto LABEL_147;
  }
  uint64_t v13 = *(void *)(v7 + 16);
  if (!v13)
  {
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }

  uint64_t v14 = *(void *)&v184[0];
  unint64_t v15 = *(void *)(*(void *)&v184[0] + 64LL);
  uint64_t v16 = *(void *)(*(void *)&v184[0] + 80LL);
  int64_t v17 = v2 >> 11;
  if (v15) {
    uint64_t v18 = *(void *)(*(void *)&v184[0] + 80LL);
  }
  else {
    uint64_t v18 = 0LL;
  }
  if (v18 < v17) {
    goto LABEL_149;
  }
  uint64_t v19 = *(void *)(*(void *)&v184[0] + 72LL);
  uint64_t v20 = *(void *)(*(void *)&v184[0] + 88LL);
  uint64_t v142 = *(void *)&v184[0];
  uint64_t v143 = v20;
  uint64_t v146 = v13;
  char v126 = result;
  unint64_t v127 = *((void *)&v191 + 1);
  unint64_t v128 = *((void *)&v191 + 1) >> 10;
  unint64_t v129 = v2 >> 10;
  __int128 v125 = v192;
  unint64_t v124 = v193;
  uint64_t v135 = v7;
  uint64_t v149 = v4;
  uint64_t v150 = v5;
  uint64_t v151 = (uint64_t *)(v2 >> 11);
  uint64_t v152 = v19;
  if (v15 && v17 < v16 && *(_WORD *)(v15 + 16))
  {
    uint64_t v148 = v3;
    uint64_t v21 = *(unsigned __int8 *)(v15 + 18);
    if (*(_BYTE *)(v15 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v184);
      unint64_t v22 = v15;
      while (1)
      {
        uint64_t v25 = *(unsigned __int16 *)(v22 + 16);
        if (!*(_WORD *)(v22 + 16)) {
          break;
        }
        uint64_t v26 = *(void *)(v22 + 40);
        BOOL v27 = __OFSUB__(v17, v26);
        uint64_t v28 = v17 - v26;
        if (v27) {
          goto LABEL_141;
        }
        if (__OFADD__(v28, 1LL)) {
          goto LABEL_142;
        }
        if (v28 + 1 < 1)
        {
          uint64_t v25 = 0LL;
          goto LABEL_15;
        }

        if ((_DWORD)v25 == 1)
        {
          int64_t v17 = v28;
          break;
        }

        uint64_t v29 = (uint64_t *)(v22 + 64);
        uint64_t v30 = 1LL;
        while (1)
        {
          uint64_t v31 = *v29;
          v29 += 3;
          int64_t v17 = v28 - v31;
          if (__OFSUB__(v28, v31)) {
            goto LABEL_138;
          }
          if (__OFADD__(v17, 1LL))
          {
LABEL_139:
            __break(1u);
            goto LABEL_140;
          }

          if (v17 + 1 < 1) {
            break;
          }
          ++v30;
          uint64_t v28 = v17;
          if (v25 == v30) {
            goto LABEL_14;
          }
        }

        uint64_t v25 = v30;
        int64_t v17 = v28;
LABEL_15:
        char v23 = (4 * *(_BYTE *)(v22 + 18) + 8) & 0x3C;
        uint64_t v21 = ((-15LL << v23) - 1) & v21 | (v25 << v23);
        unint64_t v24 = *(void *)(v22 + 24 + 24 * v25);
        swift_unknownObjectRetain();
        uint64_t result = (unint64_t *)swift_unknownObjectRelease();
        unint64_t v22 = v24;
        if (!*(_BYTE *)(v24 + 18)) {
          goto LABEL_32;
        }
      }

unint64_t *specialized BidirectionalCollection.formIndex(before:)(unint64_t *result)
{
  unint64_t v2 = *result;
  unint64_t v3 = result[1];
  unint64_t v4 = result[2];
  unint64_t v5 = result[3];
  __int128 v6 = *(_OWORD *)(v1 + 176);
  __int128 v169 = *(_OWORD *)(v1 + 160);
  __int128 v170 = v6;
  uint64_t v7 = *(void *)(v1 + 200);
  uint64_t v171 = *(void *)(v1 + 192);
  __int128 v8 = *(_OWORD *)(v1 + 112);
  v166[6] = *(_OWORD *)(v1 + 96);
  v166[7] = v8;
  __int128 v9 = *(_OWORD *)(v1 + 144);
  __int128 v167 = *(_OWORD *)(v1 + 128);
  __int128 v168 = v9;
  __int128 v10 = *(_OWORD *)(v1 + 48);
  v166[2] = *(_OWORD *)(v1 + 32);
  v166[3] = v10;
  __int128 v11 = *(_OWORD *)(v1 + 80);
  v166[4] = *(_OWORD *)(v1 + 64);
  v166[5] = v11;
  __int128 v12 = *(_OWORD *)(v1 + 16);
  v166[0] = *(_OWORD *)v1;
  v166[1] = v12;
  uint64_t v125 = v7;
  uint64_t v165 = v7;
  if (*((void *)&v167 + 1) >> 10 >= v2 >> 10 || *((void *)&v169 + 1) >> 10 < v2 >> 10)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }

  uint64_t v13 = *(void *)(v125 + 16);
  if (!v13)
  {
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }

  uint64_t v14 = *(void *)&v166[0];
  unint64_t v15 = *(void *)(*(void *)&v166[0] + 64LL);
  int64_t v16 = *(void *)(*(void *)&v166[0] + 80LL);
  if (v15) {
    uint64_t v17 = *(void *)(*(void *)&v166[0] + 80LL);
  }
  else {
    uint64_t v17 = 0LL;
  }
  if (v2 < 0x800) {
    goto LABEL_131;
  }
  uint64_t v18 = (v2 >> 11) - 1;
  if (v17 < v18) {
    goto LABEL_131;
  }
  __int128 v112 = v168;
  unint64_t v113 = result;
  unint64_t v111 = v169;
  uint64_t v19 = *(void *)(*(void *)&v166[0] + 72LL);
  uint64_t v132 = *(void *)(*(void *)&v166[0] + 88LL);
  uint64_t v129 = v13;
  unint64_t v119 = v3;
  unint64_t v120 = v2;
  unint64_t v117 = v5;
  unint64_t v118 = v4;
  unint64_t v115 = *((void *)&v167 + 1);
  unint64_t v116 = *((void *)&v167 + 1) >> 10;
  unint64_t v114 = v2 >> 10;
  unint64_t v121 = v2 >> 11;
  uint64_t v135 = v19;
  if (v15 && (uint64_t)(v2 >> 11) <= v16 && *(_WORD *)(v15 + 16))
  {
    uint64_t v110 = *(void *)&v166[0];
    uint64_t v20 = *(unsigned __int8 *)(v15 + 18);
    if (*(_BYTE *)(v15 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v166);
      uint64_t v21 = v18;
      unint64_t v22 = v15;
      while (1)
      {
        uint64_t v25 = *(unsigned __int16 *)(v22 + 16);
        if (!*(_WORD *)(v22 + 16)) {
          break;
        }
        uint64_t v26 = *(void *)(v22 + 40);
        BOOL v27 = __OFSUB__(v21, v26);
        uint64_t v28 = v21 - v26;
        if (v27) {
          goto LABEL_127;
        }
        if (__OFADD__(v28, 1LL)) {
          goto LABEL_128;
        }
        if (v28 + 1 < 1)
        {
          uint64_t v25 = 0LL;
          goto LABEL_16;
        }

        if ((_DWORD)v25 == 1)
        {
          uint64_t v21 = v28;
          break;
        }

        uint64_t v29 = (uint64_t *)(v22 + 64);
        uint64_t v30 = 1LL;
        while (1)
        {
          uint64_t v31 = *v29;
          v29 += 3;
          uint64_t v21 = v28 - v31;
          if (__OFSUB__(v28, v31))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
            goto LABEL_126;
          }

          if (__OFADD__(v21, 1LL)) {
            goto LABEL_124;
          }
          if (v21 + 1 < 1) {
            break;
          }
          ++v30;
          uint64_t v28 = v21;
          if (v25 == v30) {
            goto LABEL_15;
          }
        }

        uint64_t v25 = v30;
        uint64_t v21 = v28;
LABEL_16:
        char v23 = (4 * *(_BYTE *)(v22 + 18) + 8) & 0x3C;
        uint64_t v20 = ((-15LL << v23) - 1) & v20 | (v25 << v23);
        unint64_t v24 = *(void *)(v22 + 24 + 24 * v25);
        swift_unknownObjectRetain();
        uint64_t result = (unint64_t *)swift_unknownObjectRelease();
        unint64_t v22 = v24;
        if (!*(_BYTE *)(v24 + 18)) {
          goto LABEL_33;
        }
      }

_WORD *specialized Rope.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (uint64_t *)v3;
  ++*(void *)(v3 + 24);
  if (*(void *)v3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (_WORD *)specialized Rope._Node.append(_:)(a1, a2, a3);
    if (!result)
    {
      swift_bridgeObjectRelease();
      return (_WORD *)swift_bridgeObjectRelease();
    }

    uint64_t v11 = *(void *)v3;
    unsigned int v12 = *(unsigned __int8 *)(*(void *)v3 + 18LL) + 1;
    if (((v12 >> 8) & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v13 = (uint64_t)result;
      uint64_t v14 = v9;
      uint64_t v19 = v10;
      uint64_t v15 = v4[1];
      uint64_t v16 = v4[2];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
      uint64_t v17 = swift_allocObject();
      *(_WORD *)(v17 + 16) = 0;
      uint64_t result = (_WORD *)(v17 + 16);
      *(_BYTE *)(v17 + 18) = v12;
      if (!__OFADD__(v15, v14))
      {
        if (!__OFADD__(v16, v19))
        {
          specialized closure #1 in static Rope._Node.createInner(children:_:)( result,  v17 + 24,  v11,  v15,  v16,  v13,  v14,  v19);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = (_WORD *)swift_bridgeObjectRelease();
          *unint64_t v4 = v17;
          v4[1] = v15 + v14;
          id v4[2] = v16 + v19;
          return result;
        }

        goto LABEL_12;
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
  uint64_t v18 = swift_allocObject();
  *(_WORD *)(v18 + 16) = 0;
  *(_BYTE *)(v18 + 18) = 0;
  uint64_t v20 = v18;
  uint64_t result = (_WORD *)specialized Rope._Node._appendItem(_:)(a1, a2, a3);
  *(void *)uint64_t v3 = v20;
  *(_OWORD *)(v3 + 8) = 0uLL;
  return result;
}

uint64_t protocol witness for static AttributeScope.decodingConfiguration.getter in conformance _FoundationPlusScope<A>()
{
  return static AttributeScope.decodingConfiguration.getter();
}

uint64_t static AttributeScope.decodingConfiguration.getter@<X0>( Swift::UInt a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = static AttributeScope.scopeDescription.getter(a1, a2);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4;
  return result;
}

uint64_t protocol witness for static DecodingConfigurationProviding.decodingConfiguration.getter in conformance _FoundationPlusScope<A>( uint64_t a1)
{
  return static AttributeScope.decodingConfiguration.getter(a1, &protocol witness table for _FoundationPlusScope<A>);
}

uint64_t specialized Rope.index(before:)( uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v9[0] = result;
  v9[1] = a2;
  void v9[2] = a3;
  if (result != a7) {
    goto LABEL_11;
  }
  if (!a4)
  {
    if (a2) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }

  if (*(unsigned __int8 *)(a4 + 18) >= a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

uint64_t protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes@<X0>( uint64_t *a1@<X8>)
{
  return protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes( (uint64_t (*)(void))specialized static AttributeScope.scopeDescription.getter,  a1);
}

uint64_t specialized static EncodableAttributedStringKey<>.encode(_:to:)(int a1, void *a2)
{
  int v31 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys>);
  uint64_t v26 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  MEMORY[0x1895F8858](v3);
  uint64_t v25 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys>);
  uint64_t v29 = *(void *)(v5 - 8);
  uint64_t v30 = v5;
  MEMORY[0x1895F8858](v5);
  uint64_t v28 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys>);
  uint64_t v23 = *(void *)(v7 - 8);
  uint64_t v24 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys>);
  uint64_t v32 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();
  char v17 = v31;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v17)
  {
    case 11:
      char v37 = 3;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys();
      uint64_t v18 = v25;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v27);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v14);
    case 10:
      char v34 = 1;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v14);
    case 9:
      char v33 = 0;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v14);
  }

  char v36 = 2;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys();
  uint64_t v20 = v28;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  char v35 = v17;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit();
  uint64_t v21 = v30;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v14);
}

void specialized static EncodableAttributedStringKey<>.encode(_:to:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v5 = BYTE4(a3);
  v12[5] = a2;
  v12[9] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys>);
  v12[7] = *(void *)(v6 - 8);
  v12[8] = v6;
  MEMORY[0x1895F8858](v6);
  v12[6] = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys>);
  void v12[3] = *(void *)(v8 - 8);
  v12[4] = v8;
  MEMORY[0x1895F8858](v8);
  void v12[2] = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys>);
  v12[0] = *(void *)(v10 - 8);
  v12[1] = v10;
  MEMORY[0x1895F8858](v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys>);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys>);
  v12[10] = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X10 }

uint64_t sub_1834C74EC()
{
  *(_BYTE *)(v4 - 10__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = 0;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys();
  uint64_t v5 = *(void *)(v4 - 112);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 128) + 8LL))(v0, v5);
}

void *specialized static EncodableAttributedStringKey<>.encode(_:to:)( void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.CodingKeys>);
  uint64_t v18 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  id v12 = a1;
  swift_retain();
  uint64_t result = (void *)_foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!a2)
    {
      __break(1u);
      return result;
    }

    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
  }

  else
  {
    id v14 = objc_msgSend(v12, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    swift_release();
    swift_release();
  }

  LOBYTE(v17) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v9);
    return (void *)swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    v16[0] = v12;
    v16[1] = a2;
    id v16[2] = a3;
    URL.baseURL.getter((uint64_t *)&v17);
    uint64_t v15 = v17;
    if (v17)
    {
      LOBYTE(v16[0]) = 0;
      lazy protocol witness table accessor for type URL and conformance URL();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v9);
      return outlined consume of URL?(v15);
    }

    else
    {
      return (void *)(*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
    }
  }

uint64_t specialized static EncodableAttributedStringKey<>.encode(_:to:)(uint64_t a1, void *a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.MarkdownSourcePosition.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    outlined init with take of LocalePreferences?( a1 + 32,  (uint64_t)v13,  &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    outlined init with take of LocalePreferences?( (uint64_t)v13,  (uint64_t)v11,  &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    char v14 = 4;
    lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?( a1 + 72,  (uint64_t)v12,  &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    outlined init with take of LocalePreferences?( (uint64_t)v12,  (uint64_t)v11,  &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    char v14 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void v9[2];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresentationIntent.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
  lazy protocol witness table accessor for type [PresentationIntent.IntentType] and conformance <A> [A]( &lazy protocol witness table cache variable for type [PresentationIntent.IntentType] and conformance <A> [A],  (uint64_t (*)(void))lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType,  MEMORY[0x189618448]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t specialized static EncodableAttributedStringKey<>.encode(_:to:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    lazy protocol witness table accessor for type Morphology and conformance Morphology();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  }

  else
  {
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t specialized static EncodableAttributedStringKey<>.encode(_:to:)( int a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v14 = a2;
  int v8 = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology.CodingKeys>);
  uint64_t v15 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v8 == 3
    || (LOBYTE(v17) = a1,
        char v16 = 0,
        lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender(),
        KeyedEncodingContainer.encode<A>(_:forKey:)(),
        !v4))
  {
    if (a3 == 14
      || (LOBYTE(v17) = a3,
          char v16 = 1,
          lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase(),
          KeyedEncodingContainer.encode<A>(_:forKey:)(),
          !v4))
    {
      if (BYTE1(a1) == 14
        || (LOBYTE(v17) = BYTE1(a1),
            char v16 = 2,
            lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech(),
            KeyedEncodingContainer.encode<A>(_:forKey:)(),
            !v4))
      {
        if (BYTE2(a1) == 6
          || (LOBYTE(v17) = BYTE2(a1),
              char v16 = 3,
              lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber(),
              KeyedEncodingContainer.encode<A>(_:forKey:)(),
              !v4))
        {
          if (!*(void *)(v14 + 16)
            || (uint64_t v17 = v14,
                char v16 = 4,
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Morphology._CustomPronoun]),
                lazy protocol witness table accessor for type [String : Morphology._CustomPronoun] and conformance <> [A : B]( &lazy protocol witness table cache variable for type [String : Morphology._CustomPronoun] and conformance <> [A : B],  (uint64_t (*)(void))lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun,  MEMORY[0x189617FB0],  MEMORY[0x189617910]),  KeyedEncodingContainer.encode<A>(_:forKey:)(),  !v4))
          {
            if (BYTE1(a3) == 3
              || (LOBYTE(v17) = BYTE1(a3),
                  char v16 = 5,
                  lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson(),
                  KeyedEncodingContainer.encode<A>(_:forKey:)(),
                  !v4))
            {
              if (BYTE2(a3) == 3
                || (LOBYTE(v17) = BYTE2(a3),
                    char v16 = 6,
                    lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType(),
                    KeyedEncodingContainer.encode<A>(_:forKey:)(),
                    !v4))
              {
                if ((a3 & 0xFF000000) == 0x2000000
                  || (LOBYTE(v17) = BYTE3(a3) & 1,
                      char v16 = 7,
                      lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination(),
                      KeyedEncodingContainer.encode<A>(_:forKey:)(),
                      !v4))
                {
                  if ((a3 & 0xFF00000000LL) != 0x200000000LL)
                  {
                    LOBYTE(v17) = BYTE4(a3) & 1;
                    char v16 = 8;
                    lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness();
                    KeyedEncodingContainer.encode<A>(_:forKey:)();
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v11, v9);
}

uint64_t static EncodableAttributedStringKey<>.encode(_:to:)()
{
  return dispatch thunk of Encodable.encode(to:)();
}

void protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LinkAttribute( uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t specialized static DecodableAttributedStringKey<>.decode(from:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  int v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v20);
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v22 = 0;
    lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v9 = v19;
    char v22 = 1;
    lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v10 = v19;
    char v22 = 2;
    lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v11 = v19;
    char v22 = 3;
    lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v21 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Morphology._CustomPronoun]);
    char v22 = 4;
    lazy protocol witness table accessor for type [String : Morphology._CustomPronoun] and conformance <> [A : B]( &lazy protocol witness table cache variable for type [String : Morphology._CustomPronoun] and conformance <> [A : B],  (uint64_t (*)(void))lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun,  MEMORY[0x189617FD8],  MEMORY[0x189617928]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v18 = v11;
    if (v19) {
      uint64_t v13 = v19;
    }
    else {
      uint64_t v13 = MEMORY[0x18961AFF0];
    }
    char v22 = 5;
    lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v17 = v19;
    char v22 = 6;
    lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v16 = v19;
    char v22 = 7;
    lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v15 = v19;
    char v22 = 8;
    lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v14 = v19;
    *(_BYTE *)a2 = v9;
    *(_BYTE *)(a2 + 1) = v18;
    *(_BYTE *)(a2 + 2) = v21;
    *(void *)(a2 + 8) = v13;
    *(_BYTE *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 17) = v17;
    *(_BYTE *)(a2 + 18) = v16;
    *(_BYTE *)(a2 + 19) = v15;
    *(_BYTE *)(a2 + 2__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v14;
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void v20[4];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void v30[4];
  uint64_t v28 = a2;
  int v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys>);
  uint64_t v23 = *(void *)(v21 - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v25 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys>);
  uint64_t v24 = *(void *)(v22 - 8);
  MEMORY[0x1895F8858](v22);
  uint64_t v27 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys>);
  void v20[2] = *(void *)(v5 - 8);
  v20[3] = v5;
  MEMORY[0x1895F8858](v5);
  uint64_t v26 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys>);
  int v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  char v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys>);
  char v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  id v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v30);
  __swift_project_boxed_opaque_existential_1(v30, v30[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();
  uint64_t v13 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    v20[0] = v8;
    v20[1] = v7;
    uint64_t v29 = 0LL;
    char v14 = v10;
    int v15 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v15 + 16) == 1LL) {
      __asm { BR              X10 }
    }

    int v16 = type metadata accessor for DecodingError();
    swift_allocError();
    int v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *int v18 = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v18,  *MEMORY[0x189619358],  v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v9);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  char *v23;
  void v25[5];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void v38[4];
  uint64_t v32 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  int v31 = v4;
  MEMORY[0x1895F8858](v3);
  char v36 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys>);
  uint64_t v29 = *(void *)(v35 - 8);
  MEMORY[0x1895F8858](v35);
  char v34 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys>);
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  MEMORY[0x1895F8858](v7);
  char v33 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys>);
  char v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  id v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys>);
  char v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  int v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v38);
  __swift_project_boxed_opaque_existential_1(v38, v38[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();
  int v17 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    id v25[3] = v12;
    v25[1] = v10;
    void v25[2] = v9;
    _OWORD v25[4] = 0LL;
    uint64_t v26 = v14;
    char v37 = v16;
    int v18 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v19 = v13;
    if (*(void *)(v18 + 16) == 1LL) {
      __asm { BR              X9 }
    }

    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    char v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *char v22 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    uint64_t v23 = v37;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104LL))( v22,  *MEMORY[0x189619358],  v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v19);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  unsigned __int8 v27;
  void v28[4];
  int v29;
  char v30;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.MarkdownSourcePosition.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  int v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v28);
  __swift_project_boxed_opaque_existential_1(v28, v28[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v25) = 0;
    char v9 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v25) = 1;
    char v10 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v25) = 2;
    int v11 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v25) = 3;
    uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v30 = 4;
    uint64_t v24 = lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v21 = *((void *)&v25 + 1);
    char v22 = v25;
    uint64_t v19 = *((void *)&v26 + 1);
    uint64_t v20 = v26;
    uint64_t v29 = v27;
    uint64_t v30 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v13 = v27;
    char v14 = v25;
    int v15 = v26;
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v10;
    int v16 = v23;
    *(void *)(a2 + 16) = v11;
    *(void *)(a2 + 24) = v16;
    int v17 = v21;
    *(void *)(a2 + 32) = v22;
    *(void *)(a2 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v17;
    int v18 = v19;
    *(void *)(a2 + 48) = v20;
    *(void *)(a2 + 56) = v18;
    *(_BYTE *)(a2 + 64) = v29;
    *(_OWORD *)(a2 + 72) = v14;
    *(_OWORD *)(a2 + 88) = v15;
    *(_BYTE *)(a2 + 104) = v13;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

void specialized static DecodableAttributedStringKey<>.decode(from:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<URL.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  int v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v28);
  __swift_project_boxed_opaque_existential_1(v28, v29);
  lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    goto LABEL_3;
  }
  LOBYTE(v25) = 1;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v11 = v10;
  LOBYTE(v24[0]) = 0;
  lazy protocol witness table accessor for type URL and conformance URL();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v31 = v25;
  v24[0] = v25;
  v24[1] = v26;
  uint64_t v23 = v27;
  _OWORD v24[2] = v27;
  URL.init(string:relativeTo:)(v9, v11, v24, (uint64_t *)&v25);
  swift_bridgeObjectRelease();
  id v12 = v25;
  if (!v25)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v17;
    uint64_t v19 = v29;
    uint64_t v18 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    MEMORY[0x186E1CF78](v19, v18);
    uint64_t v20 = v22;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v20,  *MEMORY[0x189619360],  v16);
    swift_willThrow();
    outlined consume of URL?(v31);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    return;
  }

  char v14 = v26;
  uint64_t v13 = v27;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  outlined consume of URL?(v31);
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v13;
  swift_retain();
  id v15 = v12;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  swift_release();
  swift_release();
}

void sub_1834C918C()
{
  *(_BYTE *)(v0 - 148) = 1;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys();
  uint64_t v1 = *(void *)(v0 - 192);
  uint64_t v2 = *(void *)(v0 - 256);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x1834C9154LL);
  }

  uint64_t v3 = *(void *)(v0 - 232);
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v0 - 240) + 8LL))(v1, v3);
  swift_bridgeObjectRelease();
  JUMPOUT(0x1834C9348LL);
}

void sub_1834C91EC()
{
  *(void *)(v5 - 192) = v0;
  *(_BYTE *)(v5 - 148) = 2;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys();
  uint64_t v6 = *(void *)(v5 - 160);
  uint64_t v7 = *(void *)(v5 - 256);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v7)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x1834C9158LL);
  }

  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v8 = *(void *)(v5 - 248);
  uint64_t v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 224) + 8LL))(v4, v3);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v2);
  uint64_t v11 = *(void *)(v5 - 200);
  *(void *)uint64_t v11 = v10;
  *(void *)(v11 + 8) = 0LL;
  *(_DWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 2__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v1;
  JUMPOUT(0x1834C915CLL);
}

void sub_1834C9250()
{
  *(void *)(v3 - 192) = v0;
  *(_BYTE *)(v3 - 148) = 3;
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys();
  uint64_t v4 = *(void *)(v3 - 160);
  uint64_t v5 = *(void *)(v3 - 256);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 248) + 8LL))(v4, v1);
    JUMPOUT(0x1834C915CLL);
  }

  type metadata accessor for NSDecimal(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal,  (uint64_t (*)(uint64_t))type metadata accessor for NSDecimal,  (uint64_t)&protocol conformance descriptor for NSDecimal);
  uint64_t v6 = *(void *)(v3 - 216);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v7 = *(void *)(v3 - 248);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 208) + 8LL))(v2, v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v1);
  JUMPOUT(0x1834C94ACLL);
}

uint64_t specialized static DecodableAttributedStringKey<>.decode(from:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v8);
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v5 = v4;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

{
  uint64_t v2;
  uint64_t Default;
  uint64_t result;
  uint64_t v6;
  void v7[5];
  _BYTE v8[40];
  uint64_t v9;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v8);
  uint64_t Default = _loadDefaultAttributes()();
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v8,  (uint64_t)v7);
  uint64_t v6 = Default;
  AttributedString.init(from:configuration:)(v7, &v6, &v9);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if (!v2) {
    *a2 = v9;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  void v11[4];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresentationIntent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v11);
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
    lazy protocol witness table accessor for type [PresentationIntent.IntentType] and conformance <A> [A]( &lazy protocol witness table cache variable for type [PresentationIntent.IntentType] and conformance <A> [A],  (uint64_t (*)(void))lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType,  MEMORY[0x189618478]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t static DecodableAttributedStringKey<>.decode(from:)(uint64_t a1)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v3);
  return dispatch thunk of Decodable.init(from:)();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute()
{
  return Int.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute( a1,  a2);
}

{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[40];
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v5);
  uint64_t result = Int.init(from:)();
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t static MarkdownDecodableAttributedStringKey<>.decodeMarkdown(from:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute( unsigned __int16 *a1, void *a2)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute( a1,  a2);
}

{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)( *a1 | (*((unsigned __int8 *)a1 + 2) << 16),  *((void *)a1 + 1),  *((unsigned int *)a1 + 4) | ((unint64_t)*((unsigned __int8 *)a1 + 20) << 32),  a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute( uint64_t a1, void *a2)
{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32),  a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v4);
  return InflectionRule.init(from:)(v4, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute()
{
  return Bool.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute( uint64_t a1)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v2);
  return AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.init(from:)(v2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return String.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute( a1,  a2);
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6[40];
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v6);
  uint64_t result = String.init(from:)();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute( a1,  a2,  a3,  a4,  (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute( a1,  a2,  a3,  (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute( a1,  a2,  a3,  a4,  (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute( a1,  a2,  a3,  (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute( a1,  a2,  a3,  a4,  (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute( a1,  a2,  a3,  (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5 = outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( a1,  (uint64_t)v7);
  a4(v5);
  return dispatch thunk of Decodable.init(from:)();
}

uint64_t protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes@<X0>( uint64_t *a1@<X8>)
{
  return protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes( (uint64_t (*)(void))specialized static AttributeScope.scopeDescription.getter,  a1);
}

uint64_t protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes@<X0>( uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute( char *a1, void *a2)
{
  char v2 = *a1;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  char v6 = v2;
  AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.rawValue.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

unint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute@<X0>( uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v4);
  return AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)(v4, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute( uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  v5[0] = _loadDefaultAttributes()();
  v5[1] = v3;
  AttributedString.encode(to:configuration:)(a2, v5);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  return dispatch thunk of Encodable.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v6);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent,  (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent,  (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
  uint64_t result = dispatch thunk of Decodable.init(from:)();
  if (!v2) {
    *a2 = v7;
  }
  return result;
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute( uint64_t *a1, void *a2)
{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)(*a1, a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute( _OWORD *a1, void *a2)
{
  __int128 v2 = a1[5];
  id v6[4] = a1[4];
  v7[0] = v2;
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a1 + 89);
  __int128 v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  __int128 v4 = a1[3];
  void v6[2] = a1[2];
  v6[3] = v4;
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)((uint64_t)v6, a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute( a1,  a2,  a3,  a4,  (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return dispatch thunk of Encodable.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute( a1,  a2,  a3,  (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute( unsigned __int8 *a1, void *a2)
{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)(*a1, a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute( a1,  a2,  a3,  a4,  (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute( a1,  a2,  a3,  (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
}

void protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute( uint64_t a1, void *a2)
{
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute( uint64_t a1, void *a2)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute()
{
  return Range<>.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute( uint64_t a1)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v2);
  lazy protocol witness table accessor for type Date and conformance Date();
  lazy protocol witness table accessor for type Date and conformance Date();
  return Range<>.init(from:)();
}

void *protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute( uint64_t a1, void *a2)
{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)( *(void **)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  a2);
}

uint64_t static MarkdownDecodableAttributedStringKey.markdownName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 24LL))();
}

uint64_t static EncodableAttributedStringKey<>.encode(_:to:)(uint64_t a1, void *a2)
{
  v12[5] = *(id *)MEMORY[0x1895F89C0];
  v12[0] = 0LL;
  id v3 = objc_msgSend((id)objc_opt_self(), sel_archivedDataWithRootObject_requiringSecureCoding_error_, a1, 1, v12);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = v12[0];
    id v6 = v4;
    id v7 = specialized Data.init(referencing:)(v6);
    unint64_t v9 = v8;

    __swift_project_boxed_opaque_existential_1(a2, a2[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, (uint64_t)v12[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation((uint64_t)v7, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }

  else
  {
    if (v12[0])
    {
      v12[0];
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v11 = (id)_nilObjCError;
    }

    return swift_willThrow();
  }

void *static DecodableAttributedStringKey<>.decode(from:)(void *a1)
{
  id v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v1)
  {
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    type metadata accessor for NSKeyedUnarchiver();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(AssociatedTypeWitness, v12, v13);
    id v3 = v5;
    if (v5)
    {
      outlined consume of Data._Representation(v12, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }

    else
    {
      uint64_t v7 = a1[3];
      uint64_t v8 = a1[4];
      id v3 = __swift_project_boxed_opaque_existential_1(a1, v7);
      uint64_t v9 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v11 = v10;
      MEMORY[0x186E1CF78](v7, v8);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 104LL))( v11,  *MEMORY[0x189619360],  v9);
      swift_willThrow();
      outlined consume of Data._Representation(v12, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
  }

  return v3;
}

uint64_t AttributedString.encode(to:)(void *a1)
{
  uint64_t v3 = *v1;
  v5[0] = _loadDefaultAttributes()();
  v5[1] = v3;
  AttributedString.encode(to:configuration:)(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t AttributedString.encode(to:configuration:)(void *a1, uint64_t *a2)
{
  uint64_t v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.AttributeKey>);
  uint64_t v189 = *(void *)(v197 - 8);
  MEMORY[0x1895F8858](v197);
  __int128 v194 = (char *)&v182 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  unint64_t v193 = (char *)&v182 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.CodingKeys>);
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v182 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *v2;
  uint64_t v14 = *(void *)(*v2 + 64);
  if (!v14) {
    goto LABEL_7;
  }
  uint64_t v15 = *(void *)(v13 + 72);
  if (!v15) {
    goto LABEL_7;
  }
  uint64_t v196 = *a2;
  uint64_t v248 = v9;
  *(void *)&__int128 v200 = v10;
  if (v15 != 1)
  {
    uint64_t v22 = 1LL;
    goto LABEL_9;
  }

  uint64_t v16 = *(void *)(v13 + 80);
  unint64_t v17 = *(unsigned __int8 *)(v14 + 18);
  unint64_t v18 = swift_unknownObjectRetain_n();
  specialized Rope._endPath.getter(v18);
  swift_unknownObjectRelease();
  if (!v16) {
    goto LABEL_215;
  }
  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v17, v14);
  uint64_t v20 = v19;
  swift_unknownObjectRelease_n();
  uint64_t v21 = *(void *)(v20 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v21)
  {
LABEL_7:
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __int128 v23 = *(_OWORD *)(v13 + 32);
    v227[0] = *(_OWORD *)(v13 + 16);
    v227[1] = v23;
    __int128 v228 = *(_OWORD *)(v13 + 48);
    v246[1] = v23;
    v246[2] = v228;
    v246[0] = v227[0];
    outlined init with take of any PredicateExpression<Self.Output == B1>(v246, (uint64_t)v247);
    outlined retain of Locale((uint64_t)v247);
    MEMORY[0x186E1B6D0](v227);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v212, v214);
    uint64_t v24 = v201;
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
    uint64_t v201 = v24;
    swift_bridgeObjectRelease();
    uint64_t v25 = v212;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }

  uint64_t v22 = *(void *)(v13 + 64);
  uint64_t v15 = *(void *)(v13 + 72);
LABEL_9:
  uint64_t v221 = 0LL;
  memset(v220, 0, sizeof(v220));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (v22 && v15 > 10)
  {
    lazy protocol witness table accessor for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys();
    dispatch thunk of Encoder.container<A>(keyedBy:)();
    LOBYTE(v212[0]) = 0;
    uint64_t v26 = v248;
    KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
    LOBYTE(v204) = 1;
    KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
    (*(void (**)(char *, uint64_t))(v200 + 8))(v12, v26);
    outlined destroy of Any?((uint64_t)v220, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
    outlined init with take of LocalePreferences?( (uint64_t)v212,  (uint64_t)v220,  &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
  }

  else
  {
    dispatch thunk of Encoder.unkeyedContainer()();
  }

  __int128 v27 = *(_OWORD *)(v13 + 32);
  __int128 v243 = *(_OWORD *)(v13 + 16);
  __int128 v244 = v27;
  __int128 v245 = *(_OWORD *)(v13 + 48);
  uint64_t v28 = BigString.startIndex.getter();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v35 = *(void *)(v13 + 64);
  uint64_t v36 = *(void *)(v13 + 72);
  uint64_t v38 = *(void *)(v13 + 80);
  uint64_t v37 = *(void *)(v13 + 88);
  int v199 = (uint64_t *)v28;
  if (v35)
  {
    unint64_t v39 = *(unsigned __int8 *)(v35 + 18);
    uint64_t v40 = v37;
    swift_unknownObjectRetain();
    uint64_t v37 = v40;
  }

  else
  {
    unint64_t v39 = 0LL;
  }

  uint64_t v41 = 0LL;
  v212[0] = v35;
  v212[1] = v36;
  uint64_t v213 = v38;
  uint64_t v214 = v37;
  uint64_t v183 = &v215;
  uint64_t v184 = 0LL;
  uint64_t v215 = v37;
  unint64_t v216 = v39;
  uint64_t v219 = 0LL;
  uint64_t v188 = MEMORY[0x18961AFF0];
  uint64_t v217 = 0LL;
  uint64_t v218 = 0LL;
  __int128 v191 = (__int128 *)(v13 + 16);
  if (!v35) {
    goto LABEL_19;
  }
  while (2)
  {
    if (v41 == v38)
    {
LABEL_194:
      swift_unknownObjectRelease();
LABEL_195:
      outlined destroy of Any?( (uint64_t)v220,  &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
      goto LABEL_197;
    }

uint64_t AttributedString.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t Default = _loadDefaultAttributes()();
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v8);
  uint64_t v7 = Default;
  AttributedString.init(from:configuration:)(v8, &v7, &v9);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (!v2) {
    *a2 = v9;
  }
  return result;
}

unint64_t AttributedString.init(from:configuration:)@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v154 = a3;
  uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.AttributeKey>);
  uint64_t v156 = *(void *)(v163 - 8);
  MEMORY[0x1895F8858](v163);
  uint64_t v162 = &v146[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v7);
  uint64_t v165 = &v146[-v8];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.CodingKeys>);
  MEMORY[0x1895F8858](v9);
  uint64_t v202 = *a2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  unint64_t v159 = a1;
  if (!v3)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v174, (uint64_t)&v167);
    __swift_project_boxed_opaque_existential_1(&v167, v168[1]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    swift_bridgeObjectRelease();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v181, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v174);
    uint64_t v109 = *(void *)&v174[0];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
    goto LABEL_77;
  }

  uint64_t v175 = 0LL;
  memset(v174, 0, sizeof(v174));
  outlined destroy of Any?( (uint64_t)v174,  &demangling cache variable for type metadata for SingleValueDecodingContainer?);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  uint64_t v10 = 0LL;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v174, (uint64_t)&v167);
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v167, (uint64_t)v179);
  uint64_t v155 = 0LL;
  BigString.init(stringLiteral:)();
  *(void *)&__int128 v167 = 0LL;
  MEMORY[0x186E20E78](&v167, 8LL);
  uint64_t v11 = v167;
  uint64_t v178 = 0LL;
  uint64_t v176 = 0LL;
  uint64_t v177 = 0LL;
  __swift_project_boxed_opaque_existential_1(v179, v180);
  if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
  {
    uint64_t v12 = v159;
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v176;
    if (!v176 || !*(_WORD *)(v176 + 16))
    {
      uint64_t v111 = v12[3];
      uint64_t v112 = v12[4];
      __swift_project_boxed_opaque_existential_1(v12, v111);
      uint64_t v113 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v115 = v114;
      MEMORY[0x186E1CF78](v111, v112);
LABEL_79:
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      uint64_t v116 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v113 - 8) + 104LL);
      uint64_t v117 = v113;
      uint64_t v12 = v159;
      v116(v115, *MEMORY[0x189619360], v117);
      swift_willThrow();
LABEL_86:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v179);
      uint64_t v110 = v12;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
    }

    uint64_t v166 = v10;
    uint64_t v14 = v177;
    uint64_t v15 = v178;
    v201[0] = v171;
    v201[1] = v172;
    v201[2] = v173;
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v201);
    swift_unknownObjectRetain();
    uint64_t v16 = AttributedString.Guts.init(string:runs:)(v201, v13, v14, v15, v11);
    __int128 v17 = *(_OWORD *)(v16 + 32);
    __int128 v198 = *(_OWORD *)(v16 + 16);
    __int128 v199 = v17;
    __int128 v200 = *(_OWORD *)(v16 + 48);
    unint64_t v18 = BigString.startIndex.getter();
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    unint64_t result = BigString.endIndex.getter();
    if (result >> 10 < v18 >> 10) {
      goto LABEL_96;
    }
    uint64_t v161 = v13;
    unint64_t v190 = v18;
    uint64_t v191 = v20;
    uint64_t v192 = v22;
    uint64_t v193 = v24;
    unint64_t v194 = result;
    uint64_t v195 = v26;
    uint64_t v196 = v27;
    uint64_t v197 = v28;
    swift_retain();
    AttributedString.Guts.fixScalarConstrainedAttributes(in:)();
    __int128 v29 = *(_OWORD *)(v16 + 32);
    __int128 v187 = *(_OWORD *)(v16 + 16);
    __int128 v188 = v29;
    uint64_t v162 = (_OWORD *)(v16 + 16);
    uint64_t v163 = v16;
    __int128 v189 = *(_OWORD *)(v16 + 48);
    uint64_t v30 = *(void *)(v16 + 24);
    uint64_t v164 = *(void *)(v16 + 16);
    uint64_t v31 = *(void *)(v16 + 32);
    uint64_t v160 = *(void *)(v16 + 40);
    uint64_t v33 = *(void *)(v16 + 48);
    uint64_t v32 = *(void *)(v16 + 56);
    unint64_t v34 = BigString.startIndex.getter();
    uint64_t v202 = v35;
    uint64_t v165 = v36;
    uint64_t v38 = v37;
    if (v34 >> 10 < (unint64_t)BigString.endIndex.getter() >> 10)
    {
      uint64_t v39 = v164;
      uint64_t v40 = v160;
      do
      {
        v186[8] = v39;
        v186[9] = v30;
        v186[10] = v31;
        v186[11] = v40;
        v186[12] = v33;
        v186[13] = v32;
        BigString.utf8.getter();
        v186[0] = v34;
        v186[1] = v202;
        v186[2] = v165;
        v186[3] = v38;
        v186[4] = v34;
        v186[5] = v202;
        v186[6] = v165;
        v186[7] = v38;
        specialized BidirectionalCollection<>._getBlock(for:in:)(2, v186, (unint64_t *)&v167);
        unint64_t result = outlined release of Locale((uint64_t)v185);
        uint64_t v164 = v170;
        if (v170 == 2) {
          goto LABEL_103;
        }
        unint64_t v41 = v34;
        unint64_t v34 = v169[0];
        uint64_t v42 = v169[1];
        uint64_t v43 = (_BYTE *)v169[2];
        unint64_t v44 = v41 >> 11;
        __int128 v167 = 0uLL;
        uint64_t v45 = (void *)v163;
        unint64_t result = AttributedString.Guts._constrainedAttributes(at:with:)(v41 >> 11, (uint64_t *)&v167);
        if (v34 >> 11 < v44)
        {
          __break(1u);
          goto LABEL_89;
        }

        unint64_t v46 = result;
        uint64_t v165 = v43;
        uint64_t v202 = v42;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString._InternalRunsSlice.updateEach(with:)(v45, v44, v34 >> 11, v46);
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        __int128 v47 = v162[1];
        v185[3] = *v162;
        v185[4] = v47;
        v185[5] = v162[2];
        uint64_t v48 = v45[2];
        uint64_t v30 = v45[3];
        uint64_t v31 = v45[4];
        uint64_t v40 = v45[5];
        uint64_t v33 = v45[6];
        uint64_t v32 = v45[7];
        unint64_t v49 = BigString.endIndex.getter();
        uint64_t v39 = v48;
        uint64_t v38 = v164;
      }

      while (v34 >> 10 < v49 >> 10);
    }

    swift_unknownObjectRelease();
    uint64_t v109 = v163;
    swift_release();
    outlined release of Locale((uint64_t)v201);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v179);
LABEL_77:
    *unint64_t v154 = v109;
    uint64_t v110 = v159;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
  }

  int v147 = 0;
  uint64_t v148 = v155 + 32;
  uint64_t v151 = v168;
  __int128 v152 = &v183;
  uint64_t v150 = &v184;
  uint64_t v149 = v169;
  uint64_t v12 = v159;
  while (1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v179, v180);
    uint64_t v153 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    unint64_t v157 = v50;
    if (v10)
    {
      swift_bridgeObjectRelease();
LABEL_85:
      swift_bridgeObjectRelease();
      goto LABEL_86;
    }

    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v179, v180);
    unint64_t v51 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v158 = v11;
    uint64_t v166 = 0LL;
    if (!v155)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v136 = v12[3];
      uint64_t v137 = v12[4];
      __swift_project_boxed_opaque_existential_1(v12, v136);
      uint64_t v113 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v115 = v138;
      MEMORY[0x186E1CF78](v136, v137);
      goto LABEL_79;
    }

    unint64_t v52 = v51;
    unint64_t v53 = v157;
    if ((v51 & 0x8000000000000000LL) != 0 || v51 >= *(void *)(v155 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v118 = v12[3];
      uint64_t v202 = v12[4];
      __swift_project_boxed_opaque_existential_1(v12, v118);
      *(void *)&__int128 v167 = 0LL;
      *((void *)&v167 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(81LL);
      v119._unint64_t object = (void *)0x80000001839D3760LL;
      v119._uint64_t countAndFlagsBits = 0xD000000000000016LL;
      String.append(_:)(v119);
      *(void *)&v174[0] = v52;
      v120._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v120);
      swift_bridgeObjectRelease();
      v121._uint64_t countAndFlagsBits = 0xD000000000000036LL;
      v121._unint64_t object = (void *)0x80000001839D3780LL;
      String.append(_:)(v121);
      uint64_t v122 = *(void *)(v155 + 16);
      swift_bridgeObjectRelease();
      *(void *)&v174[0] = v122 - 1;
      v123._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v123);
      swift_bridgeObjectRelease();
      v124._uint64_t countAndFlagsBits = 93LL;
      v124._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v124);
      uint64_t v125 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v127 = v126;
      uint64_t v12 = v159;
      MEMORY[0x186E1CF78](v118, v202);
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v125 - 8) + 104LL))( v127,  *MEMORY[0x189619360],  v125);
      swift_bridgeObjectRelease();
      swift_willThrow();
      goto LABEL_86;
    }

    uint64_t v54 = (uint64_t *)(v148 + 16 * v51);
    uint64_t v56 = *v54;
    unint64_t v55 = (_BYTE *)v54[1];
    swift_bridgeObjectRetain();
    uint64_t v165 = v55;
    swift_bridgeObjectRetain();
    if ((v53 & 0x2000000000000000LL) != 0) {
      uint64_t v57 = HIBYTE(v53) & 0xF;
    }
    else {
      uint64_t v57 = v153 & 0xFFFFFFFFFFFFLL;
    }
    if (!v57)
    {
      uint64_t v58 = v176;
      uint64_t v59 = v177;
      uint64_t v60 = v178;
      if (v176)
      {
        unint64_t v61 = *(unsigned __int8 *)(v176 + 18);
        unint64_t v62 = ((-15LL << ((4 * v61 + 8) & 0x3C)) - 1) & v61 | ((unint64_t)*(unsigned __int16 *)(v176 + 16) << ((4 * v61 + 8) & 0x3C));
        swift_unknownObjectRetain();
      }

      else
      {
        unint64_t v61 = 0LL;
        unint64_t v62 = 0LL;
      }

      uint64_t v63 = specialized BidirectionalCollection._distance(from:to:)(v11, v61, 0LL, v11, v62, 0LL, v58, v59, v60, v11);
      swift_unknownObjectRelease();
      if (v63 > 0
        || (__swift_project_boxed_opaque_existential_1(v179, v180),
            (dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v128 = v159;
        uint64_t v129 = v159[3];
        uint64_t v130 = v159[4];
        __swift_project_boxed_opaque_existential_1(v159, v129);
        uint64_t v131 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v133 = v132;
        MEMORY[0x186E1CF78](v129, v130);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        char v134 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v131 - 8) + 104LL);
        uint64_t v135 = v131;
        uint64_t v12 = v128;
        v134(v133, *MEMORY[0x189619360], v135);
        swift_willThrow();
        swift_bridgeObjectRelease();
        goto LABEL_85;
      }

      unint64_t v64 = v159;
      if (*(void *)(v56 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v139 = v64[3];
        uint64_t v140 = v64[4];
        __swift_project_boxed_opaque_existential_1(v64, v139);
        uint64_t v141 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v143 = v142;
        MEMORY[0x186E1CF78](v139, v140);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        uint64_t v144 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v141 - 8) + 104LL);
        uint64_t v145 = v141;
        uint64_t v12 = v159;
        v144(v143, *MEMORY[0x189619360], v145);
        swift_willThrow();
        swift_bridgeObjectRelease();
        goto LABEL_85;
      }
    }

    swift_bridgeObjectRetain();
    BigString.append(contentsOf:)();
    uint64_t v65 = v176;
    if (!v176 || !*(_WORD *)(v176 + 16)) {
      goto LABEL_57;
    }
    unint64_t v66 = ((-15LL << ((4 * *(_BYTE *)(v176 + 18) + 8) & 0x3C)) - 1) & *(unsigned __int8 *)(v176 + 18) | ((unint64_t)*(unsigned __int16 *)(v176 + 16) << ((4 * *(_BYTE *)(v176 + 18) + 8) & 0x3C));
    unint64_t result = swift_unknownObjectRetain();
    *(void *)&__int128 v167 = v11;
    *((void *)&v167 + 1) = v66;
    v168[0] = 0LL;
    unint64_t v67 = *(unsigned __int8 *)(v65 + 18);
    if (v66 <= v67) {
      break;
    }
    char v68 = (4 * v67 + 8) & 0x3C;
    uint64_t v69 = (v66 >> v68) & 0xF;
    *(void *)&v174[0] = v69;
    if ((_DWORD)v67)
    {
      swift_unknownObjectRetain();
      char v70 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v65 + 16,  v65 + 24,  (uint64_t *)v174,  (uint64_t)&v167,  v67);
      unint64_t result = swift_unknownObjectRelease();
      if ((v70 & 1) == 0) {
        goto LABEL_90;
      }
      if ((void)v167 != v11) {
        goto LABEL_91;
      }
      unint64_t v72 = *((void *)&v167 + 1);
      uint64_t v71 = v168[0];
      if (!v168[0])
      {
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v72, v65);
        uint64_t v74 = v73;
        uint64_t v76 = v75;
        swift_unknownObjectRelease_n();
        goto LABEL_41;
      }
    }

    else
    {
      if (!v69) {
        goto LABEL_90;
      }
      unint64_t v72 = ((v69 - 1) << v68) | ((-15LL << v68) - 1) & v66;
      uint64_t v71 = v65;
    }

    unint64_t v77 = v71 + 24 * ((v72 >> ((4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v74 = *(void *)(v77 + 32);
    uint64_t v76 = *(void *)(v77 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
LABEL_41:
    if ((specialized static Dictionary<>.== infix(_:_:)(v74, v56) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_57:
      if ((v157 & 0x1000000000000000LL) != 0) {
        uint64_t v57 = String.UTF8View._foreignCount()();
      }
      swift_bridgeObjectRelease();
      uint64_t v10 = v166;
      if (v65)
      {
        swift_bridgeObjectRetain();
        uint64_t v89 = v165;
        swift_bridgeObjectRetain();
        unint64_t result = specialized Rope._Node.append(_:)(v57, v56, (uint64_t)v89);
        if (result)
        {
          uint64_t v164 = v56;
          uint64_t v92 = v176;
          unsigned int v93 = *(unsigned __int8 *)(v176 + 18) + 1;
          if (((v93 >> 8) & 1) != 0) {
            goto LABEL_97;
          }
          unint64_t v94 = result;
          uint64_t v95 = v90;
          uint64_t v96 = v91;
          uint64_t v97 = v177;
          uint64_t v98 = v178;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
          unint64_t result = swift_allocObject();
          *(_BYTE *)(result + 18) = v93;
          uint64_t v99 = v97 + v95;
          if (__OFADD__(v97, v95)) {
            goto LABEL_98;
          }
          uint64_t v100 = v98 + v96;
          uint64_t v11 = v158;
          if (__OFADD__(v98, v96)) {
            goto LABEL_99;
          }
          uint64_t v101 = result;
          *(void *)(result + 24) = v92;
          *(void *)(result + 32) = v97;
          *(void *)(result + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v98;
          *(void *)(result + 48) = v94;
          *(void *)(result + 56) = v95;
          *(void *)(result + 64) = v96;
          *(_WORD *)(result + 16) = 2;
          uint64_t v10 = v166;
          uint64_t v56 = v164;
          goto LABEL_72;
        }
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
        uint64_t v101 = swift_allocObject();
        *(_WORD *)(v101 + 16) = 0;
        *(_BYTE *)(v101 + 18) = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t result = swift_isUniquelyReferenced_nonNull();
        if ((result & 1) != 0)
        {
          uint64_t v102 = 0LL;
          uint64_t v103 = 0LL;
        }

        else
        {
          uint64_t v104 = specialized Rope._Node.copy()(v101);
          uint64_t v103 = v105;
          uint64_t v102 = v106;
          unint64_t result = swift_unknownObjectRelease();
          uint64_t v101 = v104;
        }

        uint64_t v99 = v103 + 1;
        if (__OFADD__(v103, 1LL)) {
          goto LABEL_100;
        }
        uint64_t v100 = v102 + v57;
        if (__OFADD__(v102, v57)) {
          goto LABEL_101;
        }
        int v107 = *(unsigned __int16 *)(v101 + 16);
        uint64_t v108 = (void *)(v101 + 24LL * *(unsigned __int16 *)(v101 + 16));
        v108[3] = v57;
        v108[4] = v56;
        v108[5] = v165;
        if (v107 == 0xFFFF) {
          goto LABEL_102;
        }
        *(_WORD *)(v101 + 16) = v107 + 1;
LABEL_72:
        uint64_t v176 = v101;
        uint64_t v177 = v99;
        uint64_t v178 = v100;
      }

      if ((v147 & 1) != 0) {
        int v147 = 1;
      }
      else {
        int v147 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v56);
      }
      uint64_t v12 = v159;
      ++v11;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }

    char v78 = specialized static Set.== infix(_:_:)(v76, (uint64_t)v165);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v78 & 1) == 0) {
      goto LABEL_57;
    }
    unint64_t v79 = ((-15LL << ((4 * *(_BYTE *)(v65 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v65 + 18) | ((unint64_t)*(unsigned __int16 *)(v65 + 16) << ((4 * *(_BYTE *)(v65 + 18) + 8) & 0x3C));
    unint64_t result = swift_unknownObjectRetain();
    *(void *)&__int128 v167 = v11;
    *((void *)&v167 + 1) = v79;
    v168[0] = 0LL;
    unint64_t v80 = *(unsigned __int8 *)(v65 + 18);
    if (v79 <= v80) {
      goto LABEL_92;
    }
    char v81 = (4 * v80 + 8) & 0x3C;
    uint64_t v82 = (v79 >> v81) & 0xF;
    *(void *)&v174[0] = v82;
    if ((_DWORD)v80)
    {
      swift_unknownObjectRetain();
      char v83 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v65 + 16,  v65 + 24,  (uint64_t *)v174,  (uint64_t)&v167,  v80);
      unint64_t result = swift_unknownObjectRelease_n();
      if ((v83 & 1) == 0) {
        goto LABEL_93;
      }
      unint64_t v85 = *((void *)&v167 + 1);
      uint64_t v84 = v167;
    }

    else
    {
      unint64_t result = swift_unknownObjectRelease();
      if (!v82) {
        goto LABEL_93;
      }
      unint64_t v85 = ((v82 - 1) << v81) | ((-15LL << v81) - 1) & v79;
      uint64_t v84 = v11;
    }

    uint64_t v12 = v159;
    uint64_t v10 = v166;
    if ((v157 & 0x1000000000000000LL) != 0) {
      uint64_t v57 = String.UTF8View._foreignCount()();
    }
    unint64_t result = swift_bridgeObjectRelease();
    if (v84 != v11) {
      goto LABEL_94;
    }
    unint64_t result = specialized Rope._Node._prepareModify(at:)(v85, (uint64_t)v182);
    *uint64_t v151 = *(_OWORD *)v152;
    uint64_t v86 = v182[1];
    *(void *)&__int128 v167 = v182[0];
    *uint64_t v149 = *(_OWORD *)v150;
    BOOL v87 = __OFADD__(v86, v57);
    uint64_t v88 = v86 + v57;
    if (v87) {
      goto LABEL_95;
    }
    *((void *)&v167 + 1) = v88;
    specialized Rope._Node._finalizeModify(_:)(v174, &v167);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ++v11;
LABEL_54:
    __swift_project_boxed_opaque_existential_1(v179, v180);
    if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0) {
      goto LABEL_6;
    }
  }

uint64_t protocol witness for Decodable.init(from:) in conformance AttributedString@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t Default = _loadDefaultAttributes()();
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v8);
  uint64_t v7 = Default;
  AttributedString.init(from:configuration:)(v8, &v7, &v9);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (!v2) {
    *a2 = v9;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributedString(void *a1)
{
  uint64_t v3 = *v1;
  v5[0] = _loadDefaultAttributes()();
  v5[1] = v3;
  AttributedString.encode(to:configuration:)(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.CodingKeys( char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttributedString.CodingKeys()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributedString.CodingKeys@<X0>( Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of AttributedString.CodingKeys.init(rawValue:),  *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AttributedString.CodingKeys( uint64_t *a1@<X8>)
{
  uint64_t v2 = 1936618866LL;
  if (*v1) {
    uint64_t v2 = 0x7475626972747461LL;
  }
  unint64_t v3 = 0xE400000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xEE00656C62615465LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributedString.CodingKeys()
{
  if (*v0) {
    return 0x7475626972747461LL;
  }
  else {
    return 1936618866LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.CodingKeys@<X0>( Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  unint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._unint64_t object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of AttributedString.CodingKeys.init(rawValue:),  v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.AttributeKey@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0LL;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AttributedString.AttributeKey@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = a1;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.AttributeKey()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.AttributeKey()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance AttributedString( void *a1, uint64_t *a2)
{
  return AttributedString.encode(to:configuration:)(a1, a2);
}

unint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance AttributedString@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return AttributedString.init(from:configuration:)(a1, a2, a3);
}

uint64_t AttributeContainer.encode(to:configuration:)(void *a1, uint64_t *a2)
{
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.AttributeKey>);
  uint64_t v41 = *(void *)(v45 - 8);
  MEMORY[0x1895F8858](v45);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *a2;
  uint64_t v8 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();
  unint64_t v44 = v6;
  uint64_t v9 = (void *)v8;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v10 = v8 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v8 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v15 = 0LL;
  uint64_t v43 = v9;
  uint64_t v42 = v7;
  uint64_t v47 = v10;
  int64_t v46 = v14;
  while (1)
  {
    while (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v17 = v16 | (v15 << 6);
      if (*(void *)(v7 + 16))
      {
LABEL_21:
        uint64_t v21 = (uint64_t *)(v9[6] + 16 * v17);
        uint64_t v23 = *v21;
        uint64_t v22 = v21[1];
        swift_bridgeObjectRetain();
        unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v22);
        if ((v25 & 1) != 0)
        {
          uint64_t v26 = *(void *)(*(void *)(v7 + 56) + 16 * v24);
          uint64_t v27 = swift_conformsToProtocol2();
          if (v27) {
            uint64_t v28 = v26;
          }
          else {
            uint64_t v28 = 0LL;
          }
          if (v27) {
            uint64_t v29 = v27;
          }
          else {
            uint64_t v29 = 0LL;
          }
          if (v28)
          {
            *(void *)&__int128 v51 = v23;
            *((void *)&v51 + 1) = v22;
            *(void *)&__int128 v52 = 0LL;
            BYTE8(v52) = 1;
            KeyedEncodingContainer.superEncoder(forKey:)();
            swift_bridgeObjectRelease();
            uint64_t v30 = *(void *)(v29 + 8);
            uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
            unint64_t v49 = &v41;
            uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
            __n128 v32 = MEMORY[0x1895F8858](AssociatedTypeWitness);
            unint64_t v34 = (char *)&v41 - v33;
            uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v30 + 24))(v28, v30, v32);
            if (v9[2] && (unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36), (v38 & 1) != 0))
            {
              outlined init with copy of AttributedString._AttributeValue(v9[7] + 72 * v37, (uint64_t)&v51);
            }

            else
            {
              uint64_t v55 = 0LL;
              __int128 v53 = 0u;
              __int128 v54 = 0u;
              __int128 v51 = 0u;
              __int128 v52 = 0u;
            }

            swift_bridgeObjectRelease();
            if (!*((void *)&v52 + 1)) {
              goto LABEL_47;
            }
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v51,  (uint64_t)v50);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            swift_dynamicCast();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v51);
            uint64_t v39 = v57;
            (*(void (**)(char *, _BYTE *, uint64_t, uint64_t))(v29 + 16))(v34, v56, v28, v29);
            uint64_t v57 = v39;
            if (v39)
            {
              (*(void (**)(char *, uint64_t))(v48 + 8))(v34, AssociatedTypeWitness);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
              swift_release();
              return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v44, v45);
            }

            (*(void (**)(char *, uint64_t))(v48 + 8))(v34, AssociatedTypeWitness);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
            uint64_t v9 = v43;
            uint64_t v7 = v42;
          }

          else
          {
            swift_bridgeObjectRelease();
          }

          uint64_t v10 = v47;
          int64_t v14 = v46;
        }

        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }

    if (__OFADD__(v15++, 1LL))
    {
      __break(1u);
      goto LABEL_46;
    }

    if (v15 >= v14) {
      goto LABEL_42;
    }
    unint64_t v19 = *(void *)(v10 + 8 * v15);
    if (!v19) {
      break;
    }
LABEL_20:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v15 << 6);
    if (*(void *)(v7 + 16)) {
      goto LABEL_21;
    }
  }

  int64_t v20 = v15 + 1;
  if (v15 + 1 >= v14) {
    goto LABEL_42;
  }
  unint64_t v19 = *(void *)(v10 + 8 * v20);
  if (v19) {
    goto LABEL_19;
  }
  int64_t v20 = v15 + 2;
  if (v15 + 2 >= v14) {
    goto LABEL_42;
  }
  unint64_t v19 = *(void *)(v10 + 8 * v20);
  if (v19) {
    goto LABEL_19;
  }
  int64_t v20 = v15 + 3;
  if (v15 + 3 >= v14) {
    goto LABEL_42;
  }
  unint64_t v19 = *(void *)(v10 + 8 * v20);
  if (v19) {
    goto LABEL_19;
  }
  int64_t v20 = v15 + 4;
  if (v15 + 4 >= v14)
  {
LABEL_42:
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v44, v45);
  }

  unint64_t v19 = *(void *)(v10 + 8 * v20);
  if (v19)
  {
LABEL_19:
    int64_t v15 = v20;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v15 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v15 >= v14) {
      goto LABEL_42;
    }
    unint64_t v19 = *(void *)(v10 + 8 * v15);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }

uint64_t AttributeContainer.init(from:configuration:)@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v61 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.AttributeKey>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *a2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v3)
  {
LABEL_2:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v73 = 0LL;
    uint64_t v58 = v7;
    uint64_t v84 = MEMORY[0x18961AFF0];
    uint64_t v85 = MEMORY[0x18961AFF8];
    uint64_t v64 = v6;
    uint64_t v63 = v9;
    uint64_t v12 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      uint64_t v57 = a1;
      int64_t v14 = (_BYTE *)(v12 + 56);
      uint64_t v65 = v10;
      uint64_t v60 = v12;
      while (1)
      {
        if (*(void *)(v10 + 16))
        {
          uint64_t v16 = *((void *)v14 - 3);
          uint64_t v15 = *((void *)v14 - 2);
          uint64_t v17 = *((void *)v14 - 1);
          char v18 = *v14;
          swift_bridgeObjectRetain_n();
          unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v15);
          if ((v20 & 1) != 0)
          {
            uint64_t v74 = v17;
            uint64_t v21 = *(void *)(*(void *)(v10 + 56) + 16 * v19);
            swift_bridgeObjectRelease();
            uint64_t v22 = swift_conformsToProtocol2();
            if (v22)
            {
              uint64_t v23 = v22;
            }

            else
            {
              uint64_t v21 = 0LL;
              uint64_t v23 = 0LL;
            }

            if (v21)
            {
              uint64_t v70 = *(void *)(v23 + 8);
              char v24 = v18;
              uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
              uint64_t v26 = type metadata accessor for Optional();
              unint64_t v72 = &v57;
              uint64_t v86 = v26;
              uint64_t v75 = *(void *)(v26 - 8);
              uint64_t v27 = *(void *)(v75 + 64);
              MEMORY[0x1895F8858](v26);
              uint64_t v28 = v15;
              uint64_t v30 = (char *)&v57 - v29;
              *(void *)&__int128 v76 = v16;
              *((void *)&v76 + 1) = v28;
              uint64_t v71 = v28;
              *(void *)&__int128 v77 = v74;
              BYTE8(v77) = v24;
              uint64_t v31 = v73;
              KeyedDecodingContainer.superDecoder(forKey:)();
              if (v31)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v58 + 8))(v63, v64);
                a1 = v57;
                goto LABEL_2;
              }

              (*(void (**)(__int128 *, uint64_t, uint64_t))(v23 + 16))(&v79, v21, v23);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
              uint64_t v73 = 0LL;
              uint64_t v32 = AssociatedTypeWitness;
              uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))( v30,  0LL,  1LL,  AssociatedTypeWitness);
              uint64_t v34 = v70;
              unint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 24))(v21, v70);
              unint64_t v69 = v35;
              unint64_t v67 = &v57;
              uint64_t v36 = *(void *)(v33 + 64);
              MEMORY[0x1895F8858](v68);
              unint64_t v62 = (char *)&v57 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
              unint64_t v66 = &v57;
              __n128 v38 = MEMORY[0x1895F8858](v37);
              uint64_t v39 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
              uint64_t v40 = *(void (**)(char *, __n128))(v75 + 16);
              uint64_t v74 = v41;
              v40(v39, v38);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v39, 1LL, v32) == 1)
              {
                uint64_t v42 = v75;
                uint64_t v43 = v86;
                (*(void (**)(char *, uint64_t))(v75 + 8))(v39, v86);
                uint64_t v83 = 0LL;
                __int128 v81 = 0u;
                __int128 v82 = 0u;
                __int128 v79 = 0u;
                __int128 v80 = 0u;
                uint64_t v44 = v42;
              }

              else
              {
                uint64_t v45 = *(uint64_t (**)(void))(v33 + 32);
                unint64_t v59 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0LL;
                int64_t v46 = v62;
                uint64_t v47 = v45();
                unint64_t v66 = &v57;
                __n128 v48 = MEMORY[0x1895F8858](v47);
                unint64_t v49 = (char *)&v57 - v59;
                unint64_t v50 = *(void (**)(char *, char *, uint64_t, __n128))(v33 + 16);
                v50((char *)&v57 - v59, v46, v32, v48);
                *((void *)&v77 + 1) = v32;
                *(void *)char v78 = swift_getAssociatedConformanceWitness();
                boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v76);
                ((void (*)(uint64_t *, char *, uint64_t))v50)(boxed_opaque_existential_1, v49, v32);
                (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v34 + 32))(&v79, v21, v34);
                *(_OWORD *)&v78[8] = v79;
                v78[24] = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 40))(v21, v34) & 1;
                uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 48))(v21, v34);
                __int128 v53 = *(void (**)(char *, uint64_t))(v33 + 8);
                v53(v49, v32);
                uint64_t v83 = v52;
                __int128 v81 = *(_OWORD *)v78;
                __int128 v82 = *(_OWORD *)&v78[16];
                __int128 v79 = v76;
                __int128 v80 = v77;
                v53(v46, v32);
                uint64_t v43 = v86;
                uint64_t v44 = v75;
              }

              specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v79, v68, v69);
              swift_bridgeObjectRelease();
              (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v74, v43);
              swift_bridgeObjectRelease();
              uint64_t v10 = v65;
            }

            else
            {
              swift_bridgeObjectRelease();
              uint64_t v10 = v65;
            }
          }

          else
          {
            swift_bridgeObjectRelease_n();
          }
        }

        v14 += 32;
        if (!--v13)
        {
          swift_bridgeObjectRelease();
          uint64_t v54 = v84;
          uint64_t v55 = v85;
          a1 = v57;
          goto LABEL_21;
        }
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v54 = MEMORY[0x18961AFF0];
    uint64_t v55 = MEMORY[0x18961AFF8];
LABEL_21:
    uint64_t v56 = v61;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v63, v64);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v56 = v54;
    v56[1] = v55;
  }

  return result;
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance AttributeContainer( void *a1, uint64_t *a2)
{
  return AttributeContainer.encode(to:configuration:)(a1, a2);
}

uint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance AttributeContainer@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return AttributeContainer.init(from:configuration:)(a1, a2, a3);
}

uint64_t CodableConfiguration<>.init(wrappedValue:from:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1, a2);
}

uint64_t specialized Rope._Node._appendItem(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if ((_DWORD)result)
  {
    uint64_t v8 = v3[1];
  }

  else
  {
    uint64_t v9 = specialized Rope._Node.copy()(*v3);
    uint64_t v8 = v10;
    uint64_t v12 = v11;
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v3 = v9;
    v3[1] = v8;
    v3[2] = v12;
  }

  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_9;
  }

  v3[1] = v8 + 1;
  uint64_t v13 = v3[2];
  BOOL v14 = __OFADD__(v13, a1);
  uint64_t v15 = v13 + a1;
  if (v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  v3[2] = v15;
  uint64_t v16 = *v3;
  int v17 = *(unsigned __int16 *)(*v3 + 16);
  char v18 = (void *)(*v3 + 24LL * *(unsigned __int16 *)(*v3 + 16));
  void v18[3] = a1;
  v18[4] = a2;
  v18[5] = a3;
  if (v17 != 0xFFFF)
  {
    *(_WORD *)(v16 + 16) = v17 + 1;
    return result;
  }

uint64_t specialized Rope._Node.copy()(uint64_t a1)
{
  char v2 = *(_BYTE *)(a1 + 18);
  unint64_t v3 = a1 + 24;
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
    uint64_t v14 = swift_allocObject();
    *(_BYTE *)(v14 + 18) = 0;
    uint64_t v15 = *(unsigned __int16 *)(a1 + 16);
    *(_WORD *)(v14 + 16) = v15;
    if (v3 < v14 + 24 + 24 * v15 && v14 + 24 < v3 + 24 * v15) {
      goto LABEL_26;
    }
    uint64_t v7 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Item);
    swift_arrayInitWithCopy();
    if ((_DWORD)v15)
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      while (1)
      {
        uint64_t v19 = *(void *)(v7 + v17 + 24);
        BOOL v12 = __OFADD__(v18, v19);
        v18 += v19;
        if (v12) {
          break;
        }
        v17 += 24LL;
        if (24 * v15 == v17) {
          return v7;
        }
      }

      goto LABEL_25;
    }

    return v7;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
  uint64_t v4 = swift_allocObject();
  *(_BYTE *)(v4 + 18) = v2;
  uint64_t v5 = *(unsigned __int16 *)(a1 + 16);
  *(_WORD *)(v4 + 16) = v5;
  if (v3 < v4 + 24 + 24 * v5 && v4 + 24 < v3 + 24 * v5) {
    goto LABEL_26;
  }
  uint64_t v7 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Node);
  swift_arrayInitWithCopy();
  if (!(_DWORD)v5) {
    return v7;
  }
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  while (1)
  {
    uint64_t v11 = *(void *)(v7 + v8 + 32);
    BOOL v12 = __OFADD__(v10, v11);
    v10 += v11;
    if (v12) {
      break;
    }
    uint64_t v13 = *(void *)(v7 + v8 + 40);
    BOOL v12 = __OFADD__(v9, v13);
    v9 += v13;
    if (v12) {
      goto LABEL_24;
    }
    v8 += 24LL;
    if (24 * v5 == v8) {
      return v7;
    }
  }

  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._prepareModify(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  uint64_t v6 = *v2;
  if ((result & 1) == 0)
  {
    uint64_t v6 = specialized Rope._Node.copy()(*v2);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t result = swift_unknownObjectRelease();
    *char v2 = v6;
    v2[1] = v8;
    v2[2] = v10;
  }

  if (((a1 >> ((4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C)) & 0xF) >= *(unsigned __int16 *)(v6 + 16))
  {
    __break(1u);
  }

  else
  {
    if (*(_BYTE *)(v6 + 18))
    {
      swift_unknownObjectRetain();
      specialized Rope._Node._prepareModify(at:)(v17, a1);
      a1 = v17[0];
      uint64_t v11 = v17[1];
      __int128 v16 = v18;
      uint64_t v13 = v19;
      uint64_t v12 = v20;
      uint64_t result = swift_unknownObjectRelease();
      __int128 v14 = v16;
    }

    else
    {
      uint64_t v15 = v6 + 24 + 24 * ((a1 >> ((4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v12 = *(void *)v15;
      __int128 v14 = *(_OWORD *)(v15 + 8);
      uint64_t v13 = 1LL;
      uint64_t v11 = *(void *)v15;
    }

    *(void *)a2 = a1;
    *(void *)(a2 + 8) = v11;
    *(_OWORD *)(a2 + 16) = v14;
    *(void *)(a2 + 32) = v13;
    *(void *)(a2 + 4__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v12;
  }

  return result;
}

void *specialized Rope._Node._finalizeModify(_:)(void *result, void *a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = result;
  uint64_t v6 = *v2;
  uint64_t v7 = (*a2 >> ((4 * *(_BYTE *)(*v2 + 18) + 8) & 0x3C)) & 0xFLL;
  if (*(_BYTE *)(*v2 + 18))
  {
    swift_unknownObjectRetain();
    uint64_t v8 = specialized Rope._Node._finalizeModify(_:)(v27, a2);
    uint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v9 = v27[0];
    uint64_t v10 = v3[1];
    uint64_t v11 = v10 + v27[0];
    if (__OFADD__(v10, v27[0]))
    {
      __break(1u);
    }

    else
    {
      uint64_t v12 = v27[1];
      v3[1] = v11;
      uint64_t v13 = v3[2];
      BOOL v14 = __OFADD__(v13, v12);
      uint64_t v15 = v13 + v12;
      if (!v14)
      {
        v3[2] = v15;
        uint64_t v6 = v8;
        *uint64_t v5 = v9;
        v5[1] = v12;
        return (void *)v6;
      }
    }

    __break(1u);
    goto LABEL_13;
  }

  uint64_t v16 = a2[4];
  BOOL v14 = __OFSUB__(1LL, v16);
  uint64_t v17 = 1 - v16;
  if (v14)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v18 = a2[1];
  uint64_t v19 = a2[5];
  *uint64_t result = v17;
  BOOL v14 = __OFSUB__(v18, v19);
  uint64_t v20 = v18 - v19;
  if (v14)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  result[1] = v20;
  uint64_t v21 = (void *)(v6 + 24LL * v7);
  uint64_t result = (void *)a2[2];
  uint64_t v22 = a2[3];
  v21[3] = v18;
  void v21[4] = result;
  v21[5] = v22;
  uint64_t v23 = v3[1];
  BOOL v14 = __OFADD__(v23, v17);
  uint64_t v24 = v23 + v17;
  if (v14)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  v3[1] = v24;
  uint64_t v25 = v3[2];
  BOOL v14 = __OFADD__(v25, v20);
  uint64_t v26 = v25 + v20;
  if (!v14)
  {
    v3[2] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (void *)v6;
  }

_WORD *specialized closure #1 in static Rope._Node.createInner(children:_:)( _WORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = (unsigned __int16)*result;
  uint64_t v9 = (void *)(a2 + 24LL * (unsigned __int16)*result);
  *uint64_t v9 = a3;
  v9[1] = a4;
  void v9[2] = a5;
  if (v8 == 0xFFFF)
  {
    __break(1u);
  }

  else
  {
    uint64_t v10 = (void *)(a2 + 24LL * (v8 + 1));
    *uint64_t v10 = a6;
    v10[1] = a7;
    void v10[2] = a8;
    if (v8 != 65534)
    {
      *uint64_t result = v8 + 2;
      swift_unknownObjectRetain();
      return (_WORD *)swift_unknownObjectRetain();
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized Rope._Node.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  uint64_t v9 = *v3;
  if ((result & 1) == 0)
  {
    uint64_t v9 = specialized Rope._Node.copy()(*v3);
    uint64_t v11 = v10;
    uint64_t v12 = a3;
    uint64_t v14 = v13;
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v4 = v9;
    v4[1] = v11;
    id v4[2] = v14;
    a3 = v12;
  }

  if (*(_BYTE *)(v9 + 18))
  {
    uint64_t v15 = v4[1];
    uint64_t v16 = v9 + 24LL * *(unsigned __int16 *)(v9 + 16);
    uint64_t v18 = *(void *)(v16 + 8);
    uint64_t v17 = (void *)(v16 + 8);
    uint64_t v19 = v15 - v18;
    if (__OFSUB__(v15, v18))
    {
      __break(1u);
    }

    else
    {
      uint64_t v20 = (void *)(v16 + 16);
      uint64_t v21 = v4[2];
      uint64_t v22 = *(void *)(v16 + 16);
      uint64_t v23 = v21 - v22;
      if (!__OFSUB__(v21, v22))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        uint64_t result = specialized Rope._Node.append(_:)(a1, a2, a3);
        BOOL v26 = __OFADD__(v19, *v17);
        uint64_t v27 = v19 + *v17;
        if (!v26)
        {
          uint64_t v28 = v23 + *v20;
          if (!__OFADD__(v23, *v20))
          {
            uint64_t v29 = result;
            uint64_t v30 = v24;
            uint64_t v31 = v25;
            swift_unknownObjectRelease();
            v4[1] = v27;
            id v4[2] = v28;
            if (!v29)
            {
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              return 0LL;
            }

            uint64_t v32 = (_WORD *)(*v4 + 16);
            uint64_t v33 = *v4 + 24;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            specialized closure #2 in Rope._Node.append(_:)(v32, v33);
            swift_unknownObjectRelease();
            if (*(_WORD *)(*v4 + 16) == 15)
            {
              uint64_t v36 = specialized Rope._Node.split(keeping:)(8LL);
              uint64_t v34 = swift_unknownObjectRetain();
              specialized Rope._Node._appendNode(_:)(v34, v30, v31);
              swift_unknownObjectRelease_n();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              return v36;
            }

            uint64_t v35 = swift_unknownObjectRetain();
            specialized Rope._Node._appendNode(_:)(v35, v30, v31);
            swift_unknownObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            return 0LL;
          }

uint64_t *specialized closure #2 in Rope._Node.append(_:)(_WORD *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int16)*a1;
  uint64_t v5 = a2 + 24 * v4;
  uint64_t v7 = *(void *)(v5 - 24);
  uint64_t v6 = (uint64_t *)(v5 - 24);
  uint64_t result = v6 - 3;
  unint64_t v9 = *(unsigned __int16 *)(v7 + 16) + (unint64_t)*(unsigned __int16 *)(*(v6 - 3) + 16);
  if (v9 <= 0xF)
  {
    uint64_t v10 = v4 - 1;
    specialized static Rope._Node.redistributeChildren(_:_:to:)(result, v6, v9);
    specialized Rope._UnsafeHandle._removeChild(at:)(v10, a1, a2);
    return (uint64_t *)swift_unknownObjectRelease();
  }

  return result;
}

unint64_t specialized BidirectionalCollection._distance(from:to:)( unint64_t result, void *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v199 = result;
  __int128 v200 = a2;
  unint64_t v201 = a3;
  uint64_t v202 = a4;
  unint64_t v6 = a5 >> 10;
  if (result >> 10 < a5 >> 10)
  {
    uint64_t v7 = *(void *)(v5 + 200);
    uint64_t v215 = *(void *)(v5 + 192);
    __int128 v8 = *(_OWORD *)(v5 + 48);
    v206[2] = *(_OWORD *)(v5 + 32);
    _OWORD v206[3] = v8;
    __int128 v9 = *(_OWORD *)(v5 + 112);
    __int128 v209 = *(_OWORD *)(v5 + 96);
    __int128 v210 = v9;
    __int128 v10 = *(_OWORD *)(v5 + 80);
    __int128 v207 = *(_OWORD *)(v5 + 64);
    __int128 v208 = v10;
    __int128 v11 = *(_OWORD *)(v5 + 176);
    __int128 v213 = *(_OWORD *)(v5 + 160);
    __int128 v214 = v11;
    __int128 v12 = *(_OWORD *)(v5 + 144);
    __int128 v211 = *(_OWORD *)(v5 + 128);
    __int128 v212 = v12;
    __int128 v13 = *(_OWORD *)(v5 + 16);
    v206[0] = *(_OWORD *)v5;
    v206[1] = v13;
    uint64_t v205 = v7;
    uint64_t v141 = *(void *)(v7 + 16);
    if (!v141)
    {
LABEL_224:
      __break(1u);
      goto LABEL_225;
    }

    unint64_t v137 = *((void *)&v213 + 1);
    unint64_t v138 = *((void *)&v211 + 1) >> 10;
    unint64_t v14 = *((void *)&v213 + 1) >> 10;
    uint64_t v15 = *(void **)&v206[0];
    uint64_t v151 = 0LL;
    uint64_t v152 = *((void *)&v207 + 1);
    uint64_t v148 = (__int128 *)(*(void *)&v206[0] + 16LL);
    char v134 = (void *)v214;
    unint64_t v135 = a5 >> 10;
    uint64_t v16 = v187;
    uint64_t v166 = (__int128 *)&v176;
    uint64_t v139 = (uint64_t *)(v7 + 40);
    uint64_t v140 = v7;
    uint64_t v132 = v215;
    unint64_t v133 = *((void *)&v214 + 1);
    unint64_t v136 = *((void *)&v213 + 1) >> 10;
    unint64_t v159 = *(void **)&v206[0];
    uint64_t v161 = v187;
    while (2)
    {
      BOOL v17 = __OFADD__(v151++, 1LL);
      if (v17) {
        goto LABEL_203;
      }
      if (result >> 10 < v138 || result >> 10 >= v14) {
        goto LABEL_204;
      }
      unint64_t v18 = v15[8];
      int64_t v19 = v15[10];
      int64_t v20 = result >> 11;
      if (v18) {
        int64_t v21 = v15[10];
      }
      else {
        int64_t v21 = 0LL;
      }
      if (v21 < v20) {
        goto LABEL_205;
      }
      uint64_t v22 = v15[9];
      uint64_t v160 = v15[11];
      unint64_t v147 = result >> 10;
      uint64_t v167 = a4;
      unint64_t v168 = result;
      unint64_t v164 = a3;
      uint64_t v165 = a2;
      uint64_t v163 = v22;
      if (!v18 || v20 >= v19 || !*(_WORD *)(v18 + 16))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)v206);
        unint64_t v35 = specialized Rope._endPath.getter(v18);
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v36 = 0LL;
        int64_t v24 = 0LL;
        if (!v18)
        {
          uint64_t v37 = 0LL;
LABEL_68:
          int64_t v158 = v20 - v24;
          if (__OFSUB__(v20, v24))
          {
LABEL_206:
            __break(1u);
            goto LABEL_207;
          }

          __int128 v45 = v148[1];
          __int128 v219 = *v148;
          __int128 v220 = v45;
          __int128 v221 = v148[2];
          uint64_t result = BigString.utf8.getter();
          if (__OFSUB__(0LL, v24))
          {
LABEL_207:
            __break(1u);
            goto LABEL_208;
          }

          uint64_t v46 = BigString.UTF8View.index(_:offsetBy:)();
          uint64_t v48 = v47;
          uint64_t v144 = v50;
          uint64_t v145 = v49;
          uint64_t result = outlined release of Locale((uint64_t)&v203);
          if (v37 >= v152)
          {
LABEL_208:
            __break(1u);
            goto LABEL_209;
          }

          if (v160 != v15[11])
          {
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            __break(1u);
LABEL_214:
            __break(1u);
LABEL_215:
            __break(1u);
LABEL_216:
            __break(1u);
LABEL_217:
            __break(1u);
LABEL_218:
            __break(1u);
            goto LABEL_219;
          }

          unint64_t v164 = v35;
          uint64_t v142 = v48;
          unint64_t v143 = v46;
          uint64_t v51 = v15[8];
          if (v36)
          {
            unint64_t v52 = v164;
            unint64_t v53 = v36 + 24 * ((v164 >> ((4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v54 = v15[8];
            uint64_t v55 = v37;
            uint64_t v56 = *(void *)(v53 + 40);
            unint64_t v168 = *(void *)(v53 + 32);
            swift_bridgeObjectRetain();
            uint64_t v146 = v56;
            uint64_t v37 = v55;
            uint64_t v57 = v54;
            uint64_t v15 = v159;
            uint64_t result = swift_bridgeObjectRetain();
            uint64_t v58 = v160;
            uint64_t v59 = v160;
          }

          else
          {
            swift_unknownObjectRetain();
            unint64_t v52 = v164;
            specialized Rope._Node.subscript.getter(v164, v51);
            unint64_t v168 = v60;
            uint64_t v146 = v61;
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v57 = v15[8];
            uint64_t v59 = v15[11];
            uint64_t v58 = v160;
          }

          uint64_t v183 = v58;
          unint64_t v184 = v52;
          uint64_t v157 = v37 + 1;
          uint64_t v185 = v36;
LABEL_76:
          if (v58 != v59) {
            goto LABEL_197;
          }
          uint64_t v153 = v59;
          if (v36)
          {
            unint64_t v62 = *(void *)(v36 + 24 * ((v164 >> ((4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }

          else
          {
            swift_unknownObjectRetain();
            unint64_t v62 = specialized Rope._Node.subscript.getter(v164, v57);
          }

          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (__OFADD__(v158, v62)) {
            goto LABEL_198;
          }
          uint64_t v150 = v158 + v62;
          if (v57)
          {
            unint64_t v63 = ((-15LL << ((4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v57 + 18) | ((unint64_t)*(unsigned __int16 *)(v57 + 16) << ((4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C));
            uint64_t result = swift_unknownObjectRetain();
          }

          else
          {
            unint64_t v63 = 0LL;
          }

          unint64_t v64 = v164;
          if (v164 >= v63) {
            goto LABEL_199;
          }
          uint64_t v155 = v36;
          if (v36)
          {
            char v65 = (4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C;
            unint64_t v66 = ((v164 >> v65) & 0xF) + 1;
            if (v66 < *(unsigned __int16 *)(v36 + 16))
            {
              unint64_t v156 = (v66 << v65) | ((-15LL << v65) - 1) & v164;
              unint64_t v184 = v156;
LABEL_108:
              uint64_t result = swift_unknownObjectRelease_n();
              uint64_t v57 = v185;
              goto LABEL_109;
            }
          }

          char v67 = (4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C;
          unint64_t v68 = (v164 >> v67) & 0xF;
          if (*(_BYTE *)(v57 + 18))
          {
            uint64_t v69 = *(void *)(v57 + 24 + 24 * ((v164 >> v67) & 0xF));
            char v70 = (4 * *(_BYTE *)(v69 + 18) + 8) & 0x3C;
            unint64_t v71 = (v164 >> v70) & 0xF;
            if (*(_BYTE *)(v69 + 18))
            {
              uint64_t v72 = *(void *)(v69 + 24 + 24 * ((v164 >> v70) & 0xF));
              int v73 = *(unsigned __int8 *)(v72 + 18);
              char v74 = (4 * v73 + 8) & 0x3C;
              *(void *)&__int128 v174 = (v164 >> v74) & 0xF;
              if (v73)
              {
                uint64_t v165 = (uint64_t *)(v69 + 24);
                uint64_t v167 = v57 + 24;
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                char v75 = specialized closure #1 in Rope._Node.formSuccessor(of:)( v72 + 24,  (uint64_t *)&v174,  (uint64_t)&v183,  v72,  v73);
                uint64_t result = swift_unknownObjectRelease();
                if ((v75 & 1) != 0)
                {
                  unint64_t v156 = v184;
                  unint64_t v64 = v164;
LABEL_99:
                  swift_unknownObjectRelease();
                  uint64_t v15 = v159;
                  uint64_t v16 = v161;
                  goto LABEL_100;
                }
              }

              else
              {
                unint64_t v76 = ((v164 >> v74) & 0xF) + 1;
                if (v76 < *(unsigned __int16 *)(v72 + 16))
                {
                  unint64_t v156 = (v76 << v74) | ((-15LL << v74) - 1) & v164;
                  unint64_t v184 = v156;
                  uint64_t v185 = v72;
                  unint64_t v64 = v164;
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  goto LABEL_99;
                }

                uint64_t v165 = (uint64_t *)(v69 + 24);
                uint64_t v167 = v57 + 24;
                swift_unknownObjectRetain();
                uint64_t result = swift_unknownObjectRetain();
              }

              unint64_t v77 = v71 + 1;
              if (v71 + 1 < *(unsigned __int16 *)(v69 + 16))
              {
                uint64_t v78 = v165[3 * v77];
                int v79 = *(unsigned __int8 *)(v78 + 18);
                uint64_t v15 = v159;
                unint64_t v80 = (v184 & ((-15LL << v70) - 1) | (v77 << v70)) & ((-256LL << (4 * ((v79 + 1) & 0xFu))) | 0xFF);
                unint64_t v184 = v80;
                unint64_t v156 = v80;
                if (v79)
                {
                  uint64_t v81 = (v80 >> ((4 * v79 + 8) & 0x3C)) & 0xF;
                  swift_unknownObjectRetain();
                  uint64_t v82 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v78 + 24, v81, v80);
                  swift_unknownObjectRelease();
                  uint64_t v78 = v82;
                }

                uint64_t v16 = v161;
                uint64_t v36 = v155;
                uint64_t v185 = v78;
                swift_unknownObjectRelease();
                unint64_t v64 = v164;
                goto LABEL_108;
              }

              uint64_t result = swift_unknownObjectRelease();
              uint64_t v15 = v159;
              unint64_t v64 = v164;
            }

            else
            {
              if (v71 + 1 < *(unsigned __int16 *)(v69 + 16))
              {
                unint64_t v156 = ((v71 + 1) << v70) | ((-15LL << v70) - 1) & v164;
                unint64_t v184 = v156;
                uint64_t v185 = v69;
                swift_unknownObjectRetain();
                uint64_t v15 = v159;
                uint64_t v16 = v161;
LABEL_100:
                uint64_t v36 = v155;
                goto LABEL_108;
              }

              uint64_t v167 = v57 + 24;
              uint64_t result = swift_unknownObjectRetain();
              uint64_t v15 = v159;
            }

            unint64_t v84 = v68 + 1;
            if (v68 + 1 < *(unsigned __int16 *)(v57 + 16))
            {
              uint64_t v85 = *(void *)(v167 + 24LL * v84);
              int v86 = *(unsigned __int8 *)(v85 + 18);
              unint64_t v87 = (v184 & ((-15LL << v67) - 1) | (v84 << v67)) & ((-256LL << (4 * ((v86 + 1) & 0xFu))) | 0xFF);
              unint64_t v184 = v87;
              uint64_t v16 = v161;
              unint64_t v156 = v87;
              if (v86)
              {
                uint64_t v88 = (v87 >> ((4 * v86 + 8) & 0x3C)) & 0xF;
                swift_unknownObjectRetain();
                uint64_t v89 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v85 + 24, v88, v87);
                swift_unknownObjectRelease();
                uint64_t v85 = v89;
              }

              uint64_t v36 = v155;
              uint64_t result = swift_unknownObjectRelease_n();
              unint64_t v83 = v168;
              uint64_t v57 = v85;
              goto LABEL_121;
            }

            uint64_t result = swift_unknownObjectRelease();
          }

          else if (v68 + 1 < *(unsigned __int16 *)(v57 + 16))
          {
            uint64_t result = swift_unknownObjectRelease_n();
            unint64_t v156 = ((v68 + 1) << v67) | ((-15LL << v67) - 1) & v64;
            uint64_t v16 = v161;
            uint64_t v36 = v155;
LABEL_109:
            unint64_t v83 = v168;
LABEL_121:
            if (v157 == v152)
            {
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
LABEL_162:
              if (v153 != v15[11]) {
                goto LABEL_210;
              }
              if (v36)
              {
                unint64_t v119 = *(void *)(v36 + 24 * ((v64 >> ((4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C)) & 0xF) + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }

              else
              {
                uint64_t v120 = v159[8];
                swift_unknownObjectRetain();
                unint64_t v119 = specialized Rope._Node.subscript.getter(v64, v120);
                swift_unknownObjectRelease();
              }

              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              unint64_t v121 = v158 + v119;
              if (__OFADD__(v158, v119)) {
                goto LABEL_211;
              }
              __int128 v122 = v148[1];
              __int128 v216 = *v148;
              __int128 v217 = v122;
              __int128 v218 = v148[2];
              BigString.utf8.getter();
              uint64_t result = v143;
              if (__OFSUB__(v121, v143 >> 11)) {
                goto LABEL_212;
              }
              unint64_t v123 = BigString.UTF8View.index(_:offsetBy:)();
              uint64_t v125 = v124;
              unint64_t v127 = v126;
              uint64_t v129 = v128;
              outlined release of Locale((uint64_t)&v204);
              outlined release of AttributedString.Runs((uint64_t)v206);
              unint64_t v130 = v123 >> 10;
              unint64_t v14 = v136;
              if (v136 >= v123 >> 10) {
                uint64_t result = v123;
              }
              else {
                uint64_t result = v137;
              }
              if (result >> 10 >= v147)
              {
                if (v136 >= v130) {
                  a4 = v129;
                }
                else {
                  a4 = v132;
                }
                if (v136 >= v130) {
                  a2 = v125;
                }
                else {
                  a2 = v134;
                }
                unint64_t v199 = result;
                __int128 v200 = a2;
                if (v136 >= v130) {
                  a3 = v127;
                }
                else {
                  a3 = v133;
                }
                unint64_t v201 = a3;
                uint64_t v202 = a4;
                uint64_t v15 = v159;
                if (result >> 10 != v135) {
                  continue;
                }
                return v151;
              }

              goto LABEL_213;
            }

            if (v183 != v15[11]) {
              goto LABEL_200;
            }
            uint64_t v160 = v183;
            uint64_t v149 = v57;
            if (v57)
            {
              unint64_t v92 = v57 + 24 * ((v156 >> ((4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C)) & 0xF);
              uint64_t v93 = *(void *)(v92 + 40);
              uint64_t v167 = *(void *)(v92 + 32);
              swift_bridgeObjectRetain();
              uint64_t v154 = v93;
              swift_bridgeObjectRetain();
            }

            else
            {
              uint64_t v94 = v15[8];
              swift_unknownObjectRetain();
              specialized Rope._Node.subscript.getter(v156, v94);
              uint64_t v167 = v95;
              uint64_t v154 = v96;
              unint64_t v83 = v168;
              swift_unknownObjectRelease();
            }

            swift_bridgeObjectRetain();
            uint64_t v97 = v139;
            uint64_t v98 = v141;
            while (1)
            {
              uint64_t v101 = *(v97 - 1);
              uint64_t v100 = *v97;
              if (*(void *)(v83 + 16))
              {
                swift_bridgeObjectRetain_n();
                unint64_t v102 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v100);
                if ((v103 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue( *(void *)(v83 + 56) + 72 * v102,  (uint64_t)&v194);
                }

                else
                {
                  uint64_t v198 = 0LL;
                  __int128 v196 = 0u;
                  __int128 v197 = 0u;
                  __int128 v194 = 0u;
                  __int128 v195 = 0u;
                }

                swift_bridgeObjectRelease();
              }

              else
              {
                uint64_t v198 = 0LL;
                __int128 v196 = 0u;
                __int128 v197 = 0u;
                __int128 v194 = 0u;
                __int128 v195 = 0u;
                swift_bridgeObjectRetain();
              }

              uint64_t v104 = v167;
              if (*(void *)(v167 + 16))
              {
                swift_bridgeObjectRetain();
                unint64_t v105 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v100);
                if ((v106 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue( *(void *)(v104 + 56) + 72 * v105,  (uint64_t)&v189);
                }

                else
                {
                  uint64_t v193 = 0LL;
                  __int128 v191 = 0u;
                  __int128 v192 = 0u;
                  __int128 v189 = 0u;
                  __int128 v190 = 0u;
                }

                swift_bridgeObjectRelease();
                unint64_t v83 = v168;
              }

              else
              {
                uint64_t v193 = 0LL;
                __int128 v191 = 0u;
                __int128 v192 = 0u;
                __int128 v189 = 0u;
                __int128 v190 = 0u;
              }

              swift_bridgeObjectRelease();
              outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v194,  (uint64_t)&v183,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v189,  (uint64_t)v16,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if (!v186)
              {
                if (v188) {
                  goto LABEL_160;
                }
                outlined destroy of Any?( (uint64_t)&v183,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v189,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v194,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                goto LABEL_130;
              }

              outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v183,  (uint64_t)v182,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if (!v188)
              {
                outlined destroy of AttributedString._AttributeValue((uint64_t)v182);
LABEL_160:
                outlined destroy of Any?( (uint64_t)&v183,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                outlined destroy of Any?( (uint64_t)&v189,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v194,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_161:
                outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                uint64_t v15 = v159;
                uint64_t v36 = v155;
                unint64_t v64 = v164;
                goto LABEL_162;
              }

              __int128 v107 = *((_OWORD *)v16 + 3);
              v180[2] = *((_OWORD *)v16 + 2);
              v180[3] = v107;
              uint64_t v181 = *((void *)v16 + 8);
              __int128 v108 = *((_OWORD *)v16 + 1);
              v180[0] = *(_OWORD *)v16;
              v180[1] = v108;
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v182,  (uint64_t)v179);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v180,  (uint64_t)v178);
              outlined init with copy of (Hashable & Sendable)?( (uint64_t)v179,  (uint64_t)&v174,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined init with copy of (Hashable & Sendable)?( (uint64_t)v178,  (uint64_t)v166,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
              if (v175)
              {
                if (!v177)
                {
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
LABEL_128:
                  char v99 = 0;
                  goto LABEL_129;
                }

                outlined init with take of any PredicateExpression<Self.Output == B1>(&v174, (uint64_t)v171);
                outlined init with take of any PredicateExpression<Self.Output == B1>(v166, (uint64_t)v170);
                uint64_t v109 = v172;
                uint64_t v163 = v173;
                uint64_t v162 = __swift_project_boxed_opaque_existential_1(v171, v172);
                uint64_t v165 = &v132;
                uint64_t v110 = *(void *)(v109 - 8);
                MEMORY[0x1895F8858](v162);
                uint64_t v112 = (char *)&v132 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v170,  (uint64_t)&v169);
                uint64_t v113 = type metadata accessor for Optional();
                uint64_t v114 = *(void *)(v113 - 8);
                MEMORY[0x1895F8858](v113);
                uint64_t v116 = (char *)&v132 - v115;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                int v117 = swift_dynamicCast();
                uint64_t v118 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56);
                if (v117)
                {
                  v118(v116, 0LL, 1LL, v109);
                  (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v112, v116, v109);
                  char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
                  (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v109);
                }

                else
                {
                  v118(v116, 1LL, 1LL, v109);
                  (*(void (**)(char *, uint64_t))(v114 + 8))(v116, v113);
                  char v99 = 0;
                }

                __swift_destroy_boxed_opaque_existential_1((uint64_t)v170);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v171);
                uint64_t v16 = v161;
              }

              else
              {
                if (v177)
                {
                  outlined destroy of Any?( (uint64_t)v166,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                  goto LABEL_128;
                }

                char v99 = 1;
              }

uint64_t *specialized BidirectionalCollection._distance(from:to:)( uint64_t *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *result;
  unint64_t v6 = result[1];
  uint64_t v7 = result[2];
  uint64_t v8 = result[3];
  uint64_t v9 = result[4];
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v82 = a3;
  uint64_t v81 = v10;
  if (v9 >= v10)
  {
    if (v10 >= v9) {
      return 0LL;
    }
    uint64_t v49 = a5;
    uint64_t v11 = 0LL;
    while (1)
    {
      BOOL v13 = __OFSUB__(v11--, 1LL);
      if (v13) {
        goto LABEL_188;
      }
      uint64_t v51 = a3[8];
      if (v51)
      {
        if (v9 != a3[10]) {
          goto LABEL_130;
        }
      }

      else if (v9)
      {
LABEL_130:
        uint64_t v64 = a3[11];
        uint64_t v85 = v5;
        unint64_t v86 = v6;
        uint64_t v87 = v7;
        BOOL v13 = __OFSUB__(v8--, 1LL);
        if (v13) {
          goto LABEL_192;
        }
        if (v5 != v64) {
          goto LABEL_193;
        }
        uint64_t v80 = v5;
        if (v51)
        {
          unint64_t v65 = *(unsigned __int8 *)(v51 + 18);
          uint64_t result = (uint64_t *)swift_unknownObjectRetain();
        }

        else
        {
          unint64_t v65 = 0LL;
        }

        if (v6 <= v65) {
          goto LABEL_194;
        }
        if (v7)
        {
          char v66 = (4 * *(_BYTE *)(v7 + 18) + 8) & 0x3C;
          if (((v6 >> v66) & 0xF) != 0)
          {
            unint64_t v6 = ((((v6 >> v66) & 0xF) - 1) << v66) | ((-15LL << v66) - 1) & v6;
            unint64_t v86 = v6;
            goto LABEL_143;
          }
        }

        int v67 = *(unsigned __int8 *)(v51 + 18);
        char v68 = (4 * v67 + 8) & 0x3C;
        uint64_t v69 = (v6 >> v68) & 0xF;
        uint64_t v84 = v69;
        if (v67)
        {
          swift_unknownObjectRetain();
          char v70 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v51 + 16, v51 + 24, &v84, (uint64_t)&v85, v67);
          uint64_t result = (uint64_t *)swift_unknownObjectRelease();
          if ((v70 & 1) == 0) {
            goto LABEL_199;
          }
          if (v85 != v5) {
            goto LABEL_195;
          }
          unint64_t v6 = v86;
          uint64_t v7 = v87;
          if (v87)
          {
LABEL_143:
            unint64_t v71 = *(void *)(v7 + 24 * ((v6 >> ((4 * *(_BYTE *)(v7 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_147:
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
            BOOL v13 = __OFSUB__(v9, v71);
            v9 -= v71;
            if (v13) {
              goto LABEL_196;
            }
            a3 = v82;
            uint64_t v49 = a5;
            uint64_t v50 = v81;
            goto LABEL_100;
          }
        }

        else
        {
          if (!v69) {
            goto LABEL_199;
          }
          unint64_t v6 = ((v69 - 1) << v68) | ((-15LL << v68) - 1) & v6;
          unint64_t v86 = v6;
          uint64_t v7 = v51;
          if (v51) {
            goto LABEL_143;
          }
        }

        swift_unknownObjectRetain();
        unint64_t v71 = specialized Rope._Node.subscript.getter(v6, v51);
        swift_unknownObjectRelease();
        goto LABEL_147;
      }

      if (v51) {
        uint64_t v52 = a3[10];
      }
      else {
        uint64_t v52 = 0LL;
      }
      if (v49 < 0 || v52 < v49) {
        goto LABEL_197;
      }
      uint64_t v80 = a3[11];
      if (v51)
      {
        uint64_t v53 = a3[9];
        uint64_t v54 = *(unsigned __int8 *)(v51 + 18);
        if (*(_WORD *)(v51 + 16))
        {
          if (*(_BYTE *)(v51 + 18))
          {
            uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
            uint64_t v9 = v49;
            uint64_t v55 = v51;
            while (1)
            {
              uint64_t v58 = *(unsigned __int16 *)(v55 + 16);
              if (!*(_WORD *)(v55 + 16)) {
                goto LABEL_210;
              }
              uint64_t v59 = *(void *)(v55 + 40);
              BOOL v13 = __OFSUB__(v9, v59);
              uint64_t v60 = v9 - v59;
              if (v13) {
                goto LABEL_183;
              }
              if (v60 <= 0)
              {
                uint64_t v56 = 0LL;
              }

              else
              {
                if ((_DWORD)v58 == 1) {
                  goto LABEL_212;
                }
                uint64_t v61 = *(void *)(v55 + 64);
                uint64_t v9 = v60 - v61;
                if (__OFSUB__(v60, v61)) {
                  goto LABEL_186;
                }
                if (v9 < 1)
                {
                  uint64_t v9 = v60;
                  uint64_t v56 = 1LL;
                }

                else
                {
                  if ((_DWORD)v58 == 2) {
                    goto LABEL_212;
                  }
                  unint64_t v62 = (void *)(v55 + 88);
                  uint64_t v56 = 2LL;
                  while (1)
                  {
                    if (v58 == v56)
                    {
                      __break(1u);
LABEL_171:
                      __break(1u);
                      goto LABEL_172;
                    }

                    uint64_t v63 = v9 - *v62;
                    if (__OFSUB__(v9, *v62)) {
                      goto LABEL_171;
                    }
                    if (v63 < 1) {
                      break;
                    }
                    ++v56;
                    v62 += 3;
                    uint64_t v9 = v63;
                    if (v58 == v56) {
                      goto LABEL_212;
                    }
                  }
                }
              }

              char v57 = (4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C;
              uint64_t v54 = ((-15LL << v57) - 1) & v54 | (v56 << v57);
              uint64_t v7 = *(void *)(v55 + 24 + 24 * v56);
              swift_unknownObjectRetain();
              uint64_t result = (uint64_t *)swift_unknownObjectRelease();
              uint64_t v55 = v7;
              if (!*(_BYTE *)(v7 + 18)) {
                goto LABEL_151;
              }
            }
          }

          uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
          uint64_t v54 = 0LL;
          uint64_t v9 = v49;
          uint64_t v7 = v51;
LABEL_151:
          uint64_t v72 = *(unsigned __int16 *)(v7 + 16);
          if (!*(_WORD *)(v7 + 16)) {
            goto LABEL_213;
          }
          uint64_t v73 = *(void *)(v7 + 24);
          BOOL v13 = __OFSUB__(v9, v73);
          uint64_t v74 = v9 - v73;
          if (v13) {
            goto LABEL_206;
          }
          if (v74 <= 0)
          {
            uint64_t v77 = 0LL;
          }

          else
          {
            if ((_DWORD)v72 == 1) {
              goto LABEL_215;
            }
            uint64_t v75 = *(void *)(v7 + 48);
            uint64_t v9 = v74 - v75;
            if (__OFSUB__(v74, v75)) {
              goto LABEL_207;
            }
            if (v9 >= 1)
            {
              if ((_DWORD)v72 == 2) {
                goto LABEL_215;
              }
              unint64_t v76 = (void *)(v7 + 72);
              uint64_t v77 = 2LL;
              while (v72 != v77)
              {
                uint64_t v78 = v9 - *v76;
                if (__OFSUB__(v9, *v76)) {
                  goto LABEL_185;
                }
                if (v78 < 1) {
                  goto LABEL_166;
                }
                ++v77;
                v76 += 3;
                uint64_t v9 = v78;
                if (v72 == v77) {
                  goto LABEL_215;
                }
              }

char *specialized BidirectionalCollection._distance(from:to:)(void *a1, void **a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = a1[3];
  uint64_t result = (char *)*a1;
  uint64_t v7 = (char *)*a2;
  if ((uint64_t)result >= (uint64_t)*a2)
  {
LABEL_19:
    uint64_t v11 = 0LL;
    unint64_t v16 = (char *)v4[1];
    while (1)
    {
      BOOL v12 = __OFSUB__(v11--, 1LL);
      if (v12) {
        break;
      }
      if (result == v16)
      {
        if (v5)
        {
          BOOL v12 = __OFSUB__(v5--, 1LL);
          if (v12) {
            goto LABEL_47;
          }
          char v17 = *(_BYTE *)(a3 + 24);
          uint64_t result = (char *)objc_msgSend(*(id *)(a3 + 16), sel_rangeAtIndex_, v5);
          unint64_t v16 = result;
          char v19 = &result[v18];
          BOOL v20 = __OFADD__(result, v18);
          if ((v17 & 1) != 0)
          {
            if (v20) {
              goto LABEL_51;
            }
          }

          else
          {
            if (v20) {
              goto LABEL_53;
            }
          }

          uint64_t result = v19 - 1;
          if (__OFSUB__(v19, 1LL))
          {
            __break(1u);
            return 0LL;
          }
        }

        else
        {
          uint64_t result = v16;
        }
      }

      else
      {
        BOOL v12 = __OFSUB__(result--, 1LL);
        if (v12) {
          goto LABEL_46;
        }
      }

      if (result == v7) {
        return (char *)v11;
      }
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = (char *)v4[2];
    uint64_t v10 = v4[4];
    while (1)
    {
      uint64_t v11 = v8 + 1;
      if (__OFADD__(v8, 1LL)) {
        break;
      }
      BOOL v12 = __OFADD__(result++, 1LL);
      if (v12) {
        goto LABEL_43;
      }
      if (result == v9)
      {
        uint64_t v13 = v5 + 1;
        if (__OFADD__(v5, 1LL)) {
          goto LABEL_44;
        }
        uint64_t result = v9;
        if (v13 != v10)
        {
          char v14 = *(_BYTE *)(a3 + 24);
          uint64_t result = (char *)objc_msgSend(*(id *)(a3 + 16), sel_rangeAtIndex_, v13);
          uint64_t v9 = &result[v15];
          uint64_t v4 = (void *)__OFADD__(result, v15);
          if ((v14 & 1) != 0)
          {
            uint64_t v5 = v13;
          }

          else
          {
            uint64_t v5 = v13;
            if ((uint64_t)v9 < (uint64_t)result)
            {
              __break(1u);
              goto LABEL_19;
            }
          }
        }
      }

      ++v8;
      if (result == v7) {
        return (char *)v11;
      }
    }

    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }

  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection._distance(from:to:)( uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = a2;
  uint64_t v37 = result;
  unint64_t v38 = a2;
  uint64_t v39 = a3;
  if (a2 < a5)
  {
    uint64_t v13 = 0LL;
    uint64_t v35 = a7 + 24;
    while (1)
    {
      uint64_t v14 = v13 + 1;
      if (__OFADD__(v13, 1LL))
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }

      if (v37 != a10) {
        goto LABEL_50;
      }
      if (!a7
        || v12 >= (((-15LL << ((4 * *(_BYTE *)(a7 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(a7 + 18) | ((unint64_t)*(unsigned __int16 *)(a7 + 16) << ((4 * *(_BYTE *)(a7 + 18) + 8) & 0x3C))))
      {
        goto LABEL_51;
      }

      if (v39
        && (char v15 = (4 * *(_BYTE *)(v39 + 18) + 8) & 0x3C,
            unint64_t v16 = ((v12 >> v15) & 0xF) + 1,
            v16 < *(unsigned __int16 *)(v39 + 16)))
      {
        unint64_t v12 = (v16 << v15) | ((-15LL << v15) - 1) & v12;
        unint64_t v38 = v12;
      }

      else
      {
        char v17 = (4 * *(_BYTE *)(a7 + 18) + 8) & 0x3C;
        uint64_t v18 = (v12 >> v17) & 0xF;
        if (*(_BYTE *)(a7 + 18))
        {
          uint64_t v19 = *(void *)(v35 + 24 * ((v12 >> v17) & 0xF));
          int v20 = *(unsigned __int8 *)(v19 + 18);
          char v21 = (4 * v20 + 8) & 0x3C;
          unint64_t v36 = (v12 >> v21) & 0xF;
          if (v20)
          {
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            char v22 = specialized closure #1 in Rope._Node.formSuccessor(of:)( v19 + 24,  (uint64_t *)&v36,  (uint64_t)&v37,  v19,  v20);
            uint64_t result = swift_unknownObjectRelease();
            if ((v22 & 1) != 0)
            {
              unint64_t v12 = v38;
LABEL_27:
              uint64_t result = swift_unknownObjectRelease();
              goto LABEL_4;
            }
          }

          else
          {
            unint64_t v23 = ((v12 >> v21) & 0xF) + 1;
            if (v23 < *(unsigned __int16 *)(v19 + 16))
            {
              unint64_t v12 = (v23 << v21) | ((-15LL << v21) - 1) & v12;
              unint64_t v38 = v12;
              uint64_t v39 = v19;
              swift_unknownObjectRetain();
              goto LABEL_27;
            }

            uint64_t result = swift_unknownObjectRetain();
          }

          uint64_t v24 = v18 + 1;
          if (v18 + 1 >= (unint64_t)*(unsigned __int16 *)(a7 + 16))
          {
            uint64_t result = swift_unknownObjectRelease();
LABEL_29:
            unint64_t v12 = ((-15LL << ((4 * *(_BYTE *)(a7 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(a7 + 18) | ((unint64_t)*(unsigned __int16 *)(a7 + 16) << ((4 * *(_BYTE *)(a7 + 18) + 8) & 0x3C));
            uint64_t v37 = a10;
            unint64_t v38 = v12;
            uint64_t v39 = 0LL;
            goto LABEL_4;
          }

          uint64_t v25 = *(void *)(v35 + 24LL * v24);
          int v26 = *(unsigned __int8 *)(v25 + 18);
          unint64_t v12 = (v38 & ((-15LL << v17) - 1) | (v24 << v17)) & ((-256LL << (4 * ((v26 + 1) & 0xFu))) | 0xFF);
          unint64_t v38 = v12;
          if (v26)
          {
            uint64_t v27 = (v12 >> ((4 * v26 + 8) & 0x3C)) & 0xF;
            swift_unknownObjectRetain();
            uint64_t v28 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v25 + 24, v27, v12);
            swift_unknownObjectRelease();
            uint64_t v25 = v28;
          }

          uint64_t v39 = v25;
          goto LABEL_27;
        }

        unint64_t v12 = ((v18 + 1) << v17) | ((-15LL << v17) - 1) & v12;
        unint64_t v38 = v12;
        uint64_t v39 = a7;
      }

unint64_t specialized BidirectionalCollection._distance(from:to:)( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v6 = a5 >> 10;
  if (result >> 10 < a5 >> 10)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = *((void *)v5 + 25);
    uint64_t v59 = *((void *)v5 + 24);
    __int128 v9 = v5[11];
    __int128 v57 = v5[10];
    __int128 v58 = v9;
    __int128 v10 = v5[7];
    __int128 v53 = v5[6];
    __int128 v54 = v10;
    __int128 v11 = v5[9];
    __int128 v55 = v5[8];
    __int128 v56 = v11;
    __int128 v12 = v5[3];
    __int128 v49 = v5[2];
    __int128 v50 = v12;
    __int128 v13 = v5[5];
    __int128 v51 = v5[4];
    __int128 v52 = v13;
    __int128 v14 = v5[1];
    __int128 v47 = *v5;
    __int128 v48 = v14;
    uint64_t v15 = *((void *)v5 + 26);
    while (1)
    {
      uint64_t v16 = v7 + 1;
      if (__OFADD__(v7, 1LL)) {
        break;
      }
      __int128 v40 = v57;
      __int128 v41 = v58;
      uint64_t v42 = v59;
      __int128 v36 = v53;
      __int128 v37 = v54;
      __int128 v38 = v55;
      __int128 v39 = v56;
      __int128 v32 = v49;
      __int128 v33 = v50;
      __int128 v34 = v51;
      __int128 v35 = v52;
      __int128 v30 = v47;
      __int128 v31 = v48;
      unint64_t v26 = result;
      uint64_t v27 = a2;
      uint64_t v28 = a3;
      uint64_t v29 = a4;
      outlined retain of AttributedString.Runs((uint64_t)&v47);
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(&v26, v8, v15, (uint64_t *)&v43);
      outlined release of AttributedString.Runs((uint64_t)&v47);
      uint64_t result = v43;
      a2 = v44;
      a3 = v45;
      a4 = v46;
      ++v7;
      if (v6 == v43 >> 10) {
        return v16;
      }
    }

    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }

  if (v6 < result >> 10)
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = *((void *)v5 + 25);
    uint64_t v59 = *((void *)v5 + 24);
    __int128 v18 = v5[11];
    __int128 v57 = v5[10];
    __int128 v58 = v18;
    __int128 v19 = v5[7];
    __int128 v53 = v5[6];
    __int128 v54 = v19;
    __int128 v20 = v5[9];
    __int128 v55 = v5[8];
    __int128 v56 = v20;
    __int128 v21 = v5[3];
    __int128 v49 = v5[2];
    __int128 v50 = v21;
    __int128 v22 = v5[5];
    __int128 v51 = v5[4];
    __int128 v52 = v22;
    __int128 v23 = v5[1];
    __int128 v47 = *v5;
    __int128 v48 = v23;
    uint64_t v24 = *((void *)v5 + 26);
    while (!__OFSUB__(v16--, 1LL))
    {
      __int128 v40 = v57;
      __int128 v41 = v58;
      uint64_t v42 = v59;
      __int128 v36 = v53;
      __int128 v37 = v54;
      __int128 v38 = v55;
      __int128 v39 = v56;
      __int128 v32 = v49;
      __int128 v33 = v50;
      __int128 v34 = v51;
      __int128 v35 = v52;
      __int128 v30 = v47;
      __int128 v31 = v48;
      unint64_t v26 = result;
      uint64_t v27 = a2;
      uint64_t v28 = a3;
      uint64_t v29 = a4;
      outlined retain of AttributedString.Runs((uint64_t)&v47);
      AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)(&v26, v17, v24, &v43);
      outlined release of AttributedString.Runs((uint64_t)&v47);
      uint64_t result = v43;
      a2 = v44;
      a3 = v45;
      a4 = v46;
      if (v6 == v43 >> 10) {
        return v16;
      }
    }

    goto LABEL_14;
  }

  return 0LL;
}

unint64_t type metadata accessor for NSKeyedUnarchiver()
{
  unint64_t result = lazy cache variable for type metadata for NSKeyedUnarchiver;
  if (!lazy cache variable for type metadata for NSKeyedUnarchiver)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSKeyedUnarchiver);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.AttributeKey, &unk_189C95DF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.AttributeKey, &unk_189C95DF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.AttributeKey, &unk_189C95DF8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.CodingKeys, &unk_189C95D80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.CodingKeys, &unk_189C95D80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.CodingKeys, &unk_189C95D80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.CodingKeys, &unk_189C95D80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys);
  }

  return result;
}

uint64_t dispatch thunk of static EncodableAttributedStringKey.encode(_:to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static DecodableAttributedStringKey.decode(from:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static MarkdownDecodableAttributedStringKey.markdownName.getter( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for AttributeScopeCodableConfiguration()
{
  return &type metadata for AttributeScopeCodableConfiguration;
}

uint64_t storeEnumTagSinglePayload for AttributedString.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1834D1DC0 + 4 * byte_183832E71[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1834D1DF4 + 4 * byte_183832E6C[v4]))();
}

uint64_t sub_1834D1DF4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834D1DFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834D1E04LL);
  }
  return result;
}

uint64_t sub_1834D1E10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834D1E18LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1834D1E1C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834D1E24(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AttributedString.CodingKeys()
{
  return &unk_189C95D80;
}

void *type metadata accessor for AttributedString.AttributeKey()
{
  return &unk_189C95DF8;
}

uint64_t lazy protocol witness table accessor for type [PresentationIntent.IntentType] and conformance <A> [A]( unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
    uint64_t v8 = a2();
    uint64_t result = MEMORY[0x186E20D4C](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute()
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.AgreementConceptAttribute()
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute();
}

void *protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.ImageURLAttribute( uint64_t a1, void *a2)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute( a1,  a2);
}

uint64_t dispatch thunk of static MarkdownDecodableAttributedStringKey.decodeMarkdown(from:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of static DecodableAttributedStringKey.decode(from:)(a1, a2, a3);
}

BOOL specialized Sequence.allSatisfy(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v7 = 0LL;
    do
    {
      if ((a2 & 0x1000000000000000LL) != 0)
      {
        UTF32Char v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a2 & 0x2000000000000000LL) == 0 && (a1 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        UTF32Char v8 = _decodeScalar(_:startingAt:)();
      }

      uint64_t v10 = v9;
      int IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(a3 + 16), v8);
      BOOL v12 = IsLongCharacterMember != 0;
      v7 += v10;
      if (IsLongCharacterMember) {
        BOOL v13 = v7 < v4;
      }
      else {
        BOOL v13 = 0;
      }
    }

    while (v13);
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    BOOL v12 = 1LL;
  }

  swift_release();
  return v12;
}

BOOL static NSScanner.NumberRepresentation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void NSScanner.NumberRepresentation.hash(into:)()
{
}

Swift::Int NSScanner.NumberRepresentation.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t NSScanner.currentIndex.getter()
{
  Swift::UInt v1 = v0;
  id v2 = objc_msgSend(v0, sel_string);
  unint64_t v3 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  unint64_t v5 = v4;

  objc_msgSend(v1, sel__deprecated_scanLocation, v3, v5);
  lazy protocol witness table accessor for type String and conformance String();
  unint64_t v6 = StringProtocol._toUTF16Index(_:)();
  unint64_t v7 = v6;
  uint64_t v8 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000LL) == 0) {
    uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v9 = 4 * v8;
  if (4 * v8 != v6 >> 14)
  {
    uint64_t v10 = 0LL;
    do
    {
      uint64_t result = String.Index.samePosition(in:)();
      if ((v12 & 1) == 0) {
        break;
      }
      uint64_t v13 = v10 + 1;
      if (__OFADD__(v10, 1LL))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        return result;
      }

      id v14 = objc_msgSend(v1, sel__deprecated_scanLocation, v3, v5);
      BOOL v15 = __OFADD__(v14, v13);
      uint64_t result = (uint64_t)v14 + v13;
      if (v15) {
        goto LABEL_11;
      }
      unint64_t v7 = StringProtocol._toUTF16Index(_:)();
      ++v10;
    }

    while (v9 != v7 >> 14);
  }

  swift_bridgeObjectRelease();
  return v7;
}

id key path setter for NSScanner.currentIndex : NSScanner(uint64_t a1, id *a2)
{
  id v2 = *a2;
  id v3 = objc_msgSend(*a2, sel_string);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v7 = StringProtocol._toUTF16Offset(_:)();
  swift_bridgeObjectRelease();
  return objc_msgSend(v2, sel__deprecated_setScanLocation_, v7, v4, v6);
}

id NSScanner.currentIndex.setter()
{
  Swift::UInt v1 = v0;
  id v2 = objc_msgSend(v0, sel_string);
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v6 = StringProtocol._toUTF16Offset(_:)();
  swift_bridgeObjectRelease();
  return objc_msgSend(v1, sel__deprecated_setScanLocation_, v6, v3, v5);
}

void (*NSScanner.currentIndex.modify(void *a1))(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[3] = v2;
  id v5 = objc_msgSend(v2, sel_string);
  unint64_t v6 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  unint64_t v8 = v7;

  *uint64_t v4 = v6;
  v4[1] = v8;
  objc_msgSend(v2, sel__deprecated_scanLocation);
  v4[4] = lazy protocol witness table accessor for type String and conformance String();
  unint64_t v9 = StringProtocol._toUTF16Index(_:)();
  unint64_t v10 = v9;
  uint64_t v11 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = v6 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v12 = 4 * v11;
  if (4 * v11 != v9 >> 14)
  {
    uint64_t v13 = 0LL;
    do
    {
      uint64_t result = (void (*)(uint64_t))String.Index.samePosition(in:)();
      if ((v15 & 1) == 0) {
        break;
      }
      uint64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        return result;
      }

      *uint64_t v4 = v6;
      v4[1] = v8;
      uint64_t v17 = (char *)objc_msgSend(v2, sel__deprecated_scanLocation);
      BOOL v18 = __OFADD__(v17, v16);
      uint64_t result = (void (*)(uint64_t))&v17[v16];
      if (v18) {
        goto LABEL_11;
      }
      unint64_t v10 = StringProtocol._toUTF16Index(_:)();
      ++v13;
    }

    while (v12 != v10 >> 14);
  }

  swift_bridgeObjectRelease();
  id v4[2] = v10;
  return NSScanner.currentIndex.modify;
}

void NSScanner.currentIndex.modify(uint64_t a1)
{
  Swift::UInt v1 = *(void **)a1;
  id v2 = objc_msgSend(*(id *)(*(void *)a1 + 24), sel_string);
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  unint64_t v6 = (void *)v1[3];
  *Swift::UInt v1 = v3;
  v1[1] = v5;
  uint64_t v7 = StringProtocol._toUTF16Offset(_:)();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel__deprecated_setScanLocation_, v7);
  free(v1);
}

uint64_t NSScanner.scanInt(representation:)(char *a1)
{
  char v3 = *a1;
  uint64_t result = NSScanner.scanInt64(representation:)(&v3);
  if ((v2 & 1) != 0) {
    return 0LL;
  }
  return result;
}

uint64_t NSScanner.scanInt64(representation:)(char *a1)
{
  v5[1] = *MEMORY[0x1895F89C0];
  char v2 = *a1;
  v5[0] = 0x7FFFFFFFFFFFFFFFLL;
  if ((v2 & 1) != 0)
  {
    unint64_t v4 = -1LL;
    if (objc_msgSend(v1, sel_scanHexLongLong_, &v4))
    {
      if (v4 >= 0x7FFFFFFFFFFFFFFFLL) {
        return 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        return v4;
      }
    }

    else
    {
      return 0LL;
    }
  }

  else if (objc_msgSend(v1, sel_scanLongLong_, v5))
  {
    return v5[0];
  }

  else
  {
    return 0LL;
  }

unint64_t NSScanner.scanInt32(representation:)(char *a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  char v2 = *a1;
  int v7 = 0x7FFFFFFF;
  if ((v2 & 1) != 0)
  {
    unsigned int v6 = -1;
    if (objc_msgSend(v1, sel__deprecated_scanHexInt32_, &v6))
    {
      LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v6;
      if (v6 >= 0x7FFFFFFF) {
        LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0x7FFFFFFF;
      }
      goto LABEL_7;
    }

uint64_t NSScanner.scanUInt64(representation:)(char *a1)
{
  v4[1] = *MEMORY[0x1895F89C0];
  char v2 = *a1;
  v4[0] = -1LL;
  if ((v2 & 1) != 0)
  {
  }

  else if ((objc_msgSend(v1, sel_scanUnsignedLongLong_, v4) & 1) == 0)
  {
    return 0LL;
  }

  return v4[0];
}

unint64_t NSScanner.scanFloat(representation:)(char *a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  char v2 = *a1;
  unsigned int v6 = 2139095039;
  if ((v2 & 1) == 0)
  {
LABEL_5:
    unsigned __int8 v4 = 0;
    uint64_t v3 = v6;
    return v3 | ((unint64_t)v4 << 32);
  }

uint64_t NSScanner.scanDouble(representation:)(char *a1)
{
  v4[1] = *MEMORY[0x1895F89C0];
  char v2 = *a1;
  v4[0] = 0x7FEFFFFFFFFFFFFFLL;
  if ((v2 & 1) != 0)
  {
  }

  else if ((objc_msgSend(v1, sel__deprecated_scanDouble_, v4) & 1) == 0)
  {
    return 0LL;
  }

  return v4[0];
}

void __swiftcall NSScanner.scanDecimal()(NSDecimal_optional *__return_ptr retstr)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  v2[0] = 0LL;
  v2[1] = 0LL;
  int v3 = 0;
  objc_msgSend(v1, sel__deprecated_scanDecimal_, v2);
}

Swift::String_optional __swiftcall NSScanner.scanString(_:)(Swift::String a1)
{
  char v2 = v1;
  id object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  id v4 = objc_msgSend(v1, sel_charactersToBeSkipped);
  id v101 = v1;
  uint64_t v98 = countAndFlagsBits;
  if (!v4)
  {
    id v27 = objc_msgSend(v1, sel_string);
    unint64_t v28 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    unint64_t v30 = v29;

    unint64_t v105 = v28;
    unint64_t v106 = v30;
    objc_msgSend(v2, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v31 = StringProtocol._toUTF16Index(_:)();
    unint64_t v32 = v31;
    uint64_t v33 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000LL) == 0) {
      uint64_t v33 = v28 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v34 = 4 * v33;
    if (4 * v33 != v31 >> 14)
    {
      uint64_t v35 = 0LL;
      do
      {
        __int128 v19 = (char *)String.Index.samePosition(in:)();
        uint64_t v36 = v35 + 1;
        if (__OFADD__(v35, 1LL))
        {
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }

        unint64_t v105 = v28;
        unint64_t v106 = v30;
        __int128 v37 = (char *)objc_msgSend(v2, sel__deprecated_scanLocation);
        BOOL v23 = __OFADD__(v37, v36);
        __int128 v19 = &v37[v36];
        if (v23) {
          goto LABEL_63;
        }
        unint64_t v32 = StringProtocol._toUTF16Index(_:)();
        ++v35;
      }

      while (v34 != v32 >> 14);
    }

    swift_bridgeObjectRelease();
    goto LABEL_32;
  }

  id v5 = v4;
  objc_msgSend(v5, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0LL);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = *(void *)&v104[0];
  *(_BYTE *)(v6 + 24) = 0;

  id v7 = objc_msgSend(v2, sel_string);
  id v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  unint64_t v9 = v8;

  id v10 = objc_msgSend(v2, sel_string);
  unint64_t v11 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  unint64_t v13 = v12;

  unint64_t v105 = v11;
  unint64_t v106 = v13;
  objc_msgSend(v2, sel__deprecated_scanLocation);
  lazy protocol witness table accessor for type String and conformance String();
  unint64_t v14 = StringProtocol._toUTF16Index(_:)();
  unint64_t v15 = v14;
  uint64_t v16 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = v11 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v17 = 4 * v16;
  if (4 * v16 != v14 >> 14)
  {
    uint64_t v18 = 0LL;
    do
    {
      __int128 v19 = (char *)String.Index.samePosition(in:)();
      uint64_t v21 = v18 + 1;
      if (__OFADD__(v18, 1LL))
      {
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }

      unint64_t v105 = v11;
      unint64_t v106 = v13;
      __int128 v22 = (char *)objc_msgSend(v101, sel__deprecated_scanLocation);
      BOOL v23 = __OFADD__(v22, v21);
      __int128 v19 = &v22[v21];
      if (v23) {
        goto LABEL_61;
      }
      unint64_t v15 = StringProtocol._toUTF16Index(_:)();
      ++v18;
    }

    while (v17 != v15 >> 14);
  }

  swift_bridgeObjectRelease();
  unint64_t v24 = specialized Collection.suffix(from:)(v15, (uint64_t)v96, v9);
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();
  if (v26 >> 14 != v24 >> 14)
  {
    swift_retain();
    unint64_t v32 = v24;
    while (1)
    {
      uint64_t v38 = Substring.subscript.getter();
      unint64_t v40 = v39;
      swift_retain();
      LOBYTE(v38) = specialized Sequence.allSatisfy(_:)(v38, v40, v6);
      swift_bridgeObjectRelease();
      if ((v38 & 1) == 0) {
        break;
      }
      unint64_t v32 = Substring.index(after:)();
      if (v26 >> 14 == v32 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_25;
      }
    }

    swift_bridgeObjectRelease();
    swift_release_n();
    char v2 = v101;
LABEL_32:
    uint64_t v47 = v98;
    goto LABEL_33;
  }

  swift_bridgeObjectRelease();
LABEL_25:
  char v2 = v101;
  id v41 = objc_msgSend(v101, sel_string);
  uint64_t v42 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  unint64_t v44 = v43;
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v45 = HIBYTE(v44) & 0xF;
  if ((v44 & 0x2000000000000000LL) == 0) {
    uint64_t v45 = v42;
  }
  uint64_t v46 = v45 << 16;
  uint64_t v47 = v98;
  if ((v44 & 0x1000000000000000LL) == 0 || (v42 & 0x800000000000000LL) != 0) {
    unint64_t v32 = v46 | 7;
  }
  else {
    unint64_t v32 = v46 | 0xB;
  }
LABEL_33:
  id v48 = objc_msgSend(v2, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v48);

  String.count.getter();
  id v49 = objc_msgSend(v2, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v49);

  swift_bridgeObjectRelease();
  unint64_t v50 = String.index(_:offsetBy:limitedBy:)();
  LOBYTE(v48) = v51;
  swift_bridgeObjectRelease();
  unint64_t v52 = v47;
  id v53 = objc_msgSend(v2, sel_string);
  id v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  uint64_t v56 = v55;

  __int128 v19 = (char *)objc_msgSend(v2, sel_caseSensitive);
  if (v50 >> 14 < v32 >> 14)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }

  char v57 = (char)v19;
  uint64_t v97 = v19 ^ 1;
  if (objc_msgSend(v2, sel_locale))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v104, 0, sizeof(v104));
  }

  outlined init with take of Any?((uint64_t)v104, (uint64_t)&v105);
  if (!v107)
  {
    outlined destroy of Any?((uint64_t)&v105);
    goto LABEL_45;
  }

  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_45:
    unint64_t v105 = v52;
    unint64_t v106 = (unint64_t)object;
LABEL_46:
    *(void *)&v104[0] = v54;
    *((void *)&v104[0] + 1) = v56;
    swift_bridgeObjectRetain();
    Substring.init<A>(_:)();
    unint64_t v66 = Substring.subscript.getter();
    unint64_t v68 = v67;
    uint64_t v70 = v69;
    uint64_t v72 = v71;
    swift_bridgeObjectRelease();
    *(void *)&v104[0] = v52;
    *((void *)&v104[0] + 1) = object;
    swift_bridgeObjectRetain();
    unint64_t v73 = Substring.init<A>(_:)();
    if ((v57 & 1) != 0)
    {
      if (v70 != v75 || v72 != v76 || v66 >> 16 != v73 >> 16 || v68 >> 16 != v74 >> 16)
      {
        if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) == 0)
        {
          LOBYTE(v95) = 1;
          char v77 = _stringCompareInternal(_:_:_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v77 & 1) == 0) {
            goto LABEL_58;
          }
          goto LABEL_56;
        }

void NSScanner.scanCharacters(from:)(uint64_t *a1)
{
  char v2 = v1;
  uint64_t v71 = *a1;
  id v3 = objc_msgSend(v1, sel_charactersToBeSkipped);
  id v69 = v1;
  if (v3)
  {
    id v4 = v3;
    objc_msgSend(v4, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0LL);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v72;
    *(_BYTE *)(v5 + 24) = 0;

    id v6 = objc_msgSend(v2, sel_string);
    id v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    unint64_t v70 = v7;

    id v8 = objc_msgSend(v2, sel_string);
    unint64_t v9 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v11 = v10;

    objc_msgSend(v2, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v12 = StringProtocol._toUTF16Index(_:)();
    unint64_t v13 = v12;
    uint64_t v14 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000LL) == 0) {
      uint64_t v14 = v9 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v15 = 4 * v14;
    if (4 * v14 != v12 >> 14)
    {
      uint64_t v16 = 0LL;
      do
      {
        String.Index.samePosition(in:)();
        if ((v17 & 1) == 0) {
          break;
        }
        if (__OFADD__(v16, 1LL))
        {
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }

        if (__OFADD__(objc_msgSend(v69, sel__deprecated_scanLocation, v68), v16 + 1)) {
          goto LABEL_49;
        }
        unint64_t v13 = StringProtocol._toUTF16Index(_:)();
        ++v16;
      }

      while (v15 != v13 >> 14);
    }

    swift_bridgeObjectRelease();
    unint64_t v18 = specialized Collection.suffix(from:)(v13, (uint64_t)v68, v70);
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    if (v20 >> 14 == v18 >> 14)
    {
      swift_bridgeObjectRelease();
LABEL_25:
      char v2 = v69;
      id v34 = objc_msgSend(v69, sel_string, v68);
      uint64_t v35 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      unint64_t v37 = v36;
      swift_release();

      swift_bridgeObjectRelease();
      uint64_t v38 = HIBYTE(v37) & 0xF;
      if ((v37 & 0x2000000000000000LL) == 0) {
        uint64_t v38 = v35;
      }
      uint64_t v39 = v38 << 16;
      if ((v37 & 0x1000000000000000LL) == 0 || (v35 & 0x800000000000000LL) != 0) {
        unint64_t v26 = v39 | 7;
      }
      else {
        unint64_t v26 = v39 | 0xB;
      }
    }

    else
    {
      swift_retain();
      unint64_t v26 = v18;
      while (1)
      {
        uint64_t v31 = Substring.subscript.getter();
        unint64_t v33 = v32;
        swift_retain();
        LOBYTE(v31) = specialized Sequence.allSatisfy(_:)(v31, v33, v5);
        swift_bridgeObjectRelease();
        if ((v31 & 1) == 0) {
          break;
        }
        unint64_t v26 = Substring.index(after:)();
        if (v20 >> 14 == v26 >> 14)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_25;
        }
      }

      swift_bridgeObjectRelease();
      swift_release_n();
      char v2 = v69;
    }
  }

  else
  {
    id v21 = objc_msgSend(v1, sel_string);
    unint64_t v22 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    unint64_t v24 = v23;

    objc_msgSend(v2, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v25 = StringProtocol._toUTF16Index(_:)();
    unint64_t v26 = v25;
    uint64_t v27 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000LL) == 0) {
      uint64_t v27 = v22 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v28 = 4 * v27;
    if (4 * v27 != v25 >> 14)
    {
      uint64_t v29 = 0LL;
      do
      {
        String.Index.samePosition(in:)();
        if ((v30 & 1) == 0) {
          break;
        }
        if (__OFADD__(v29, 1LL))
        {
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }

        if (__OFADD__(objc_msgSend(v2, sel__deprecated_scanLocation), v29 + 1)) {
          goto LABEL_51;
        }
        unint64_t v26 = StringProtocol._toUTF16Index(_:)();
        ++v29;
      }

      while (v28 != v26 >> 14);
    }

    swift_bridgeObjectRelease();
  }

  id v40 = objc_msgSend(v2, sel_string, v68);
  id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  unint64_t v43 = v42;

  unint64_t v44 = specialized Collection.suffix(from:)(v26, (uint64_t)v41, v43);
  unint64_t v46 = v45;
  swift_bridgeObjectRelease();
  if (v46 >> 14 == v44 >> 14)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    char v51 = v69;
    id v52 = objc_msgSend(v69, sel_string);
    uint64_t v53 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    unint64_t v55 = v54;

    swift_bridgeObjectRelease();
    uint64_t v56 = HIBYTE(v55) & 0xF;
    if ((v55 & 0x2000000000000000LL) == 0) {
      uint64_t v56 = v53;
    }
    uint64_t v57 = v56 << 16;
    if ((v55 & 0x1000000000000000LL) == 0 || (v53 & 0x800000000000000LL) != 0) {
      unint64_t v47 = v57 | 7;
    }
    else {
      unint64_t v47 = v57 | 0xB;
    }
  }

  else
  {
    swift_retain();
    unint64_t v47 = v44;
    while (1)
    {
      uint64_t v48 = Substring.subscript.getter();
      unint64_t v50 = v49;
      swift_retain();
      LOBYTE(v48) = specialized Sequence.allSatisfy(_:)(v48, v50, v71);
      swift_bridgeObjectRelease();
      if ((v48 & 1) == 0) {
        break;
      }
      unint64_t v47 = Substring.index(after:)();
      if (v46 >> 14 == v47 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_38;
      }
    }

    swift_bridgeObjectRelease();
    swift_release();
    char v51 = v69;
  }

  if (v26 >> 14 != v47 >> 14)
  {
    id v58 = objc_msgSend(v51, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v58);

    if (v47 >> 14 < v26 >> 14)
    {
LABEL_52:
      __break(1u);
    }

    else
    {
      uint64_t v59 = String.subscript.getter();
      uint64_t v61 = v60;
      uint64_t v63 = v62;
      uint64_t v65 = v64;
      swift_bridgeObjectRelease();
      id v66 = objc_msgSend(v51, (SEL)&selRef_setObservedUbiquityAttributes_ + 6);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v66);

      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v67 = StringProtocol._toUTF16Offset(_:)();
      swift_bridgeObjectRelease();
      objc_msgSend(v51, sel__deprecated_setScanLocation_, v67);
      MEMORY[0x186E1B610](v59, v61, v63, v65);
      swift_bridgeObjectRelease();
    }
  }

Swift::String_optional __swiftcall NSScanner.scanUpToString(_:)(Swift::String a1)
{
  uint64_t v2 = HIBYTE(a1._object) & 0xF;
  id object = (uint64_t (**)(uint64_t, void *))a1._object;
  if (!v2)
  {
LABEL_73:
    uint64_t v90 = 0LL;
    unint64_t v91 = 0LL;
LABEL_76:
    unint64_t v22 = (char *)v90;
    unint64_t v23 = v91;
    goto LABEL_86;
  }

  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  id v4 = objc_msgSend(v1, sel_string);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  unint64_t v111 = v6;
  unint64_t v112 = (unint64_t)v5;

  id v7 = objc_msgSend(v1, sel_charactersToBeSkipped);
  id v115 = v1;
  uint64_t v109 = countAndFlagsBits;
  if (v7)
  {
    id v8 = v7;
    objc_msgSend(v8, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0LL);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = *(void *)&v118[0];
    *(_BYTE *)(v9 + 24) = 0;

    id v10 = objc_msgSend(v1, sel_string);
    id v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    unint64_t v12 = v11;

    id v13 = objc_msgSend(v1, (SEL)&selRef_setObservedUbiquityAttributes_ + 6);
    unint64_t v14 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    unint64_t v16 = v15;

    unint64_t v119 = v14;
    unint64_t v120 = v16;
    objc_msgSend(v1, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v17 = StringProtocol._toUTF16Index(_:)();
    unint64_t v18 = v17;
    uint64_t v19 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000LL) == 0) {
      uint64_t v19 = v14 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v20 = 4 * v19;
    if (4 * v19 != v17 >> 14)
    {
      uint64_t v21 = 0LL;
      while (1)
      {
        unint64_t v22 = (char *)String.Index.samePosition(in:)();
        uint64_t v24 = v21 + 1;
        if (__OFADD__(v21, 1LL)) {
          break;
        }
        unint64_t v119 = v14;
        unint64_t v120 = v16;
        unint64_t v25 = (char *)objc_msgSend(v115, sel__deprecated_scanLocation);
        BOOL v26 = __OFADD__(v25, v24);
        unint64_t v22 = &v25[v24];
        if (v26) {
          goto LABEL_80;
        }
        unint64_t v18 = StringProtocol._toUTF16Index(_:)();
        ++v21;
        if (v20 == v18 >> 14) {
          goto LABEL_13;
        }
      }

char *NSScanner.scanUpToCharacters(from:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v73 = *a1;
  id v3 = objc_msgSend(v1, sel_charactersToBeSkipped);
  id v74 = v1;
  if (!v3)
  {
    id v25 = objc_msgSend(v1, sel_string);
    unint64_t v26 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    unint64_t v28 = v27;

    objc_msgSend(v2, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v29 = StringProtocol._toUTF16Index(_:)();
    unint64_t v30 = v29;
    uint64_t v31 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000LL) == 0) {
      uint64_t v31 = v26 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v32 = 4 * v31;
    if (4 * v31 != v29 >> 14)
    {
      uint64_t v33 = 0LL;
      do
      {
        Swift::String_optional result = (char *)String.Index.samePosition(in:)();
        if ((v34 & 1) == 0) {
          break;
        }
        uint64_t v35 = v33 + 1;
        if (__OFADD__(v33, 1LL))
        {
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }

        unint64_t v36 = (char *)objc_msgSend(v74, sel__deprecated_scanLocation);
        BOOL v21 = __OFADD__(v36, v35);
        Swift::String_optional result = &v36[v35];
        if (v21) {
          goto LABEL_54;
        }
        unint64_t v30 = StringProtocol._toUTF16Index(_:)();
        ++v33;
      }

      while (v32 != v30 >> 14);
    }

    swift_bridgeObjectRelease();
    goto LABEL_32;
  }

  id v4 = v3;
  objc_msgSend(v4, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0LL);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v75;
  *(_BYTE *)(v5 + 24) = 0;

  id v6 = objc_msgSend(v2, sel_string);
  id v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  unint64_t v72 = v7;

  id v8 = objc_msgSend(v2, sel_string);
  unint64_t v9 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  unint64_t v11 = v10;

  objc_msgSend(v2, sel__deprecated_scanLocation);
  lazy protocol witness table accessor for type String and conformance String();
  unint64_t v12 = StringProtocol._toUTF16Index(_:)();
  unint64_t v13 = v12;
  uint64_t v14 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000LL) == 0) {
    uint64_t v14 = v9 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v15 = 4 * v14;
  if (4 * v14 != v12 >> 14)
  {
    uint64_t v16 = 0LL;
    do
    {
      Swift::String_optional result = (char *)String.Index.samePosition(in:)();
      if ((v18 & 1) == 0) {
        break;
      }
      uint64_t v19 = v16 + 1;
      if (__OFADD__(v16, 1LL))
      {
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }

      uint64_t v20 = (char *)objc_msgSend(v74, sel__deprecated_scanLocation);
      BOOL v21 = __OFADD__(v20, v19);
      Swift::String_optional result = &v20[v19];
      if (v21) {
        goto LABEL_52;
      }
      unint64_t v13 = StringProtocol._toUTF16Index(_:)();
      ++v16;
    }

    while (v15 != v13 >> 14);
  }

  swift_bridgeObjectRelease();
  unint64_t v22 = specialized Collection.suffix(from:)(v13, (uint64_t)v70, v72);
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  if (v24 >> 14 != v22 >> 14)
  {
    swift_retain();
    unint64_t v30 = v22;
    while (1)
    {
      uint64_t v37 = Substring.subscript.getter();
      unint64_t v39 = v38;
      swift_retain();
      LOBYTE(v37) = specialized Sequence.allSatisfy(_:)(v37, v39, v5);
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0) {
        break;
      }
      unint64_t v30 = Substring.index(after:)();
      if (v24 >> 14 == v30 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_25;
      }
    }

    swift_bridgeObjectRelease();
    swift_release_n();
LABEL_32:
    uint64_t v40 = v74;
    goto LABEL_33;
  }

  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v40 = v74;
  id v41 = objc_msgSend(v74, sel_string);
  uint64_t v42 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  unint64_t v44 = v43;
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v45 = HIBYTE(v44) & 0xF;
  if ((v44 & 0x2000000000000000LL) == 0) {
    uint64_t v45 = v42;
  }
  uint64_t v46 = v45 << 16;
  if ((v44 & 0x1000000000000000LL) == 0 || (v42 & 0x800000000000000LL) != 0) {
    unint64_t v30 = v46 | 7;
  }
  else {
    unint64_t v30 = v46 | 0xB;
  }
LABEL_33:
  id v47 = objc_msgSend(v40, sel_string);
  uint64_t v48 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  unint64_t v50 = v49;

  swift_bridgeObjectRetain();
  unint64_t v51 = specialized Collection.suffix(from:)(v30, v48, v50);
  unint64_t v53 = v52;
  unint64_t v71 = v50;
  swift_bridgeObjectRelease();
  if (v53 >> 14 == v51 >> 14)
  {
    swift_bridgeObjectRelease();
LABEL_39:
    uint64_t v58 = HIBYTE(v71) & 0xF;
    if ((v71 & 0x2000000000000000LL) == 0) {
      uint64_t v58 = v48;
    }
    uint64_t v59 = v58 << 16;
    if ((v71 & 0x1000000000000000LL) == 0 || (v48 & 0x800000000000000LL) != 0) {
      unint64_t v54 = v59 | 7;
    }
    else {
      unint64_t v54 = v59 | 0xB;
    }
  }

  else
  {
    swift_retain();
    unint64_t v54 = v51;
    while (1)
    {
      uint64_t v55 = Substring.subscript.getter();
      unint64_t v57 = v56;
      swift_retain();
      LOBYTE(v55) = specialized Sequence.allSatisfy(_:)(v55, v57, v73);
      swift_bridgeObjectRelease();
      if ((v55 & 1) != 0) {
        break;
      }
      unint64_t v54 = Substring.index(after:)();
      if (v53 >> 14 == v54 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_39;
      }
    }

    swift_bridgeObjectRelease();
    swift_release();
  }

  if (v30 >> 14 == v54 >> 14)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  id v61 = objc_msgSend(v74, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v61);

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v62 = StringProtocol._toUTF16Offset(_:)();
  swift_bridgeObjectRelease();
  Swift::String_optional result = (char *)objc_msgSend(v74, sel__deprecated_setScanLocation_, v62);
  if (v54 >> 14 >= v30 >> 14)
  {
    uint64_t v63 = String.subscript.getter();
    uint64_t v65 = v64;
    uint64_t v67 = v66;
    uint64_t v69 = v68;
    swift_bridgeObjectRelease();
    uint64_t v60 = MEMORY[0x186E1B610](v63, v65, v67, v69);
    swift_bridgeObjectRelease();
    return (char *)v60;
  }

Swift::String_optional __swiftcall NSScanner.scanCharacter()()
{
  Swift::UInt v1 = v0;
  id v2 = objc_msgSend(v0, sel_charactersToBeSkipped);
  if (v2)
  {
    id v3 = v2;
    objc_msgSend(v3, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0LL);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v58;
    *(_BYTE *)(v4 + 24) = 0;

    id v5 = objc_msgSend(v1, sel_string);
    id v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    unint64_t v7 = v6;

    id v8 = objc_msgSend(v1, sel_string);
    unint64_t v9 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v11 = v10;

    id v57 = v1;
    objc_msgSend(v1, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v12 = StringProtocol._toUTF16Index(_:)();
    unint64_t v13 = v12;
    uint64_t v14 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000LL) == 0) {
      uint64_t v14 = v9 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v15 = 4 * v14;
    if (4 * v14 != v12 >> 14)
    {
      uint64_t v16 = 0LL;
      do
      {
        uint64_t v17 = String.Index.samePosition(in:)();
        uint64_t v19 = v16 + 1;
        if (__OFADD__(v16, 1LL))
        {
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }

        id v20 = objc_msgSend(v1, sel__deprecated_scanLocation, v56);
        BOOL v21 = __OFADD__(v20, v19);
        uint64_t v17 = (uint64_t)v20 + v19;
        if (v21) {
          goto LABEL_39;
        }
        unint64_t v13 = StringProtocol._toUTF16Index(_:)();
        ++v16;
      }

      while (v15 != v13 >> 14);
    }

    swift_bridgeObjectRelease();
    unint64_t v22 = specialized Collection.suffix(from:)(v13, (uint64_t)v56, v7);
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    if (v24 >> 14 == v22 >> 14)
    {
      swift_bridgeObjectRelease();
LABEL_25:
      Swift::UInt v1 = v57;
      id v39 = objc_msgSend(v57, sel_string, v56);
      uint64_t v40 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      unint64_t v42 = v41;
      swift_release();

      swift_bridgeObjectRelease();
      uint64_t v43 = HIBYTE(v42) & 0xF;
      if ((v42 & 0x2000000000000000LL) == 0) {
        uint64_t v43 = v40;
      }
      uint64_t v44 = v43 << 16;
      if ((v42 & 0x1000000000000000LL) == 0 || (v40 & 0x800000000000000LL) != 0) {
        unint64_t v30 = v44 | 7;
      }
      else {
        unint64_t v30 = v44 | 0xB;
      }
    }

    else
    {
      swift_retain();
      unint64_t v30 = v22;
      while (1)
      {
        uint64_t v36 = Substring.subscript.getter();
        unint64_t v38 = v37;
        swift_retain();
        LOBYTE(v36) = specialized Sequence.allSatisfy(_:)(v36, v38, v4);
        swift_bridgeObjectRelease();
        if ((v36 & 1) == 0) {
          break;
        }
        unint64_t v30 = Substring.index(after:)();
        if (v24 >> 14 == v30 >> 14)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_25;
        }
      }

      swift_bridgeObjectRelease();
      swift_release_n();
      Swift::UInt v1 = v57;
    }
  }

  else
  {
    id v25 = objc_msgSend(v0, sel_string);
    unint64_t v26 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    unint64_t v28 = v27;

    objc_msgSend(v1, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v29 = StringProtocol._toUTF16Index(_:)();
    unint64_t v30 = v29;
    uint64_t v31 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000LL) == 0) {
      uint64_t v31 = v26 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v32 = 4 * v31;
    if (4 * v31 != v29 >> 14)
    {
      uint64_t v33 = 0LL;
      do
      {
        uint64_t v17 = String.Index.samePosition(in:)();
        uint64_t v34 = v33 + 1;
        if (__OFADD__(v33, 1LL))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }

        id v35 = objc_msgSend(v1, sel__deprecated_scanLocation);
        BOOL v21 = __OFADD__(v35, v34);
        uint64_t v17 = (uint64_t)v35 + v34;
        if (v21) {
          goto LABEL_41;
        }
        unint64_t v30 = StringProtocol._toUTF16Index(_:)();
        ++v33;
      }

      while (v32 != v30 >> 14);
    }

    swift_bridgeObjectRelease();
  }

  id v45 = objc_msgSend(v1, sel_string, v56);
  unint64_t v46 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  unint64_t v48 = v47;

  uint64_t v49 = HIBYTE(v48) & 0xF;
  if ((v48 & 0x2000000000000000LL) == 0) {
    uint64_t v49 = v46 & 0xFFFFFFFFFFFFLL;
  }
  if (v30 >> 14 == 4 * v49)
  {
    swift_bridgeObjectRelease();
    uint64_t v50 = 0LL;
    unint64_t v51 = 0LL;
  }

  else
  {
    uint64_t v50 = String.subscript.getter();
    unint64_t v51 = v52;
    String.index(after:)();
    swift_bridgeObjectRelease();
    id v53 = objc_msgSend(v1, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v53);

    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v54 = StringProtocol._toUTF16Offset(_:)();
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel__deprecated_setScanLocation_, v54);
  }

  uint64_t v17 = v50;
  char v18 = v51;
LABEL_42:
  result.value._id object = v18;
  result.value._uint64_t countAndFlagsBits = v17;
  return result;
}

unint64_t lazy protocol witness table accessor for type NSScanner.NumberRepresentation and conformance NSScanner.NumberRepresentation()
{
  unint64_t result = lazy protocol witness table cache variable for type NSScanner.NumberRepresentation and conformance NSScanner.NumberRepresentation;
  if (!lazy protocol witness table cache variable for type NSScanner.NumberRepresentation and conformance NSScanner.NumberRepresentation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSScanner.NumberRepresentation,  &type metadata for NSScanner.NumberRepresentation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSScanner.NumberRepresentation and conformance NSScanner.NumberRepresentation);
  }

  return result;
}

uint64_t sub_1834D539C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NSScanner.currentIndex.getter();
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for NSScanner.NumberRepresentation( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1834D5414 + 4 * byte_1838331A5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1834D5448 + 4 * byte_1838331A0[v4]))();
}

uint64_t sub_1834D5448(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834D5450(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834D5458LL);
  }
  return result;
}

uint64_t sub_1834D5464(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834D546CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1834D5470(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834D5478(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NSScanner.NumberRepresentation()
{
  return &type metadata for NSScanner.NumberRepresentation;
}

BOOL static PredicateExpressions.ArithmeticOperator.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PredicateExpressions.ArithmeticOperator.hash(into:)()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.ArithmeticOperator.CodingKeys()
{
  uint64_t v1 = 0x7463617274627573LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x796C7069746C756DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 6579297LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.ArithmeticOperator.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized PredicateExpressions.ArithmeticOperator.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ArithmeticOperator.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ArithmeticOperator.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t PredicateExpressions.ArithmeticOperator.encode(to:)(void *a1)
{
  id v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys>);
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  MEMORY[0x1895F8858](v4);
  BOOL v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ArithmeticOperator.SubtractCodingKeys>);
  uint64_t v19 = *(void *)(v6 - 8);
  uint64_t v20 = v6;
  MEMORY[0x1895F8858](v6);
  id v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ArithmeticOperator.AddCodingKeys>);
  uint64_t v9 = *(void *)(v18 - 8);
  MEMORY[0x1895F8858](v18);
  unint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ArithmeticOperator.CodingKeys>);
  uint64_t v24 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v15)
  {
    if (v15 == 1)
    {
      char v26 = 1;
      lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }

    else
    {
      char v27 = 2;
      lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys();
      uint64_t v16 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }

  else
  {
    char v25 = 0;
    lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.CodingKeys,  &unk_189C96160);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.CodingKeys,  &unk_189C96160);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.CodingKeys,  &unk_189C96160);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.CodingKeys,  &unk_189C96160);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys,  &unk_189C961C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys,  &unk_189C961C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys,  &unk_189C961C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.SubtractCodingKeys,  &unk_189C961A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.SubtractCodingKeys,  &unk_189C961A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.SubtractCodingKeys,  &unk_189C961A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.AddCodingKeys,  &unk_189C96180);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.AddCodingKeys,  &unk_189C96180);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator.AddCodingKeys,  &unk_189C96180);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys);
  }

  return result;
}

Swift::Int PredicateExpressions.ArithmeticOperator.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PredicateExpressions.ArithmeticOperator.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v38 = a2;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys>);
  uint64_t v34 = *(void *)(v37 - 8);
  MEMORY[0x1895F8858](v37);
  uint64_t v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ArithmeticOperator.SubtractCodingKeys>);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  MEMORY[0x1895F8858](v4);
  id v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ArithmeticOperator.AddCodingKeys>);
  uint64_t v6 = *(void *)(v33 - 8);
  MEMORY[0x1895F8858](v33);
  id v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ArithmeticOperator.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys();
  uint64_t v13 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    goto LABEL_7;
  }
  uint64_t v31 = v6;
  uint64_t v32 = v10;
  uint64_t v14 = v39;
  int v15 = v40;
  unint64_t v41 = a1;
  uint64_t v16 = v12;
  uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v18 = v9;
  if (*(void *)(v17 + 16) != 1LL)
  {
    uint64_t v23 = type metadata accessor for DecodingError();
    swift_allocError();
    char v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *char v25 = &type metadata for PredicateExpressions.ArithmeticOperator;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104LL))( v25,  *MEMORY[0x189619358],  v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    uint64_t v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }

  int v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      char v43 = 1;
      lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys();
      uint64_t v20 = v9;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      BOOL v21 = v38;
      uint64_t v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }

    else
    {
      char v44 = 2;
      lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys();
      unint64_t v28 = v15;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      BOOL v21 = v38;
      uint64_t v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }

  else
  {
    char v42 = 0;
    lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    BOOL v21 = v38;
  }

  *BOOL v21 = v19;
  uint64_t v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.ArithmeticOperator@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return PredicateExpressions.ArithmeticOperator.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.ArithmeticOperator( void *a1)
{
  return PredicateExpressions.ArithmeticOperator.encode(to:)(a1);
}

void PredicateExpressions.Arithmetic.op.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t PredicateExpressions.Arithmetic.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 60));
}

uint64_t PredicateExpressions.Arithmetic.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 64));
}

void PredicateExpressions.Arithmetic.init(lhs:rhs:op:)()
{
}

uint64_t sub_1834D5F3C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( &v5[*(int *)(a1 + 64)],  v3,  v1);
  *uint64_t v5 = v6;
  return result;
}

void type metadata accessor for PredicateExpressions.Arithmetic()
{
}

uint64_t PredicateExpressions.Arithmetic.evaluate(_:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v22[1] = a3;
  uint64_t v6 = a2[4];
  uint64_t v7 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v13 = MEMORY[0x1895F8858](v12);
  int v15 = (char *)v22 - v14;
  uint64_t v16 = *a1;
  uint64_t v23 = v3;
  uint64_t v25 = v16;
  uint64_t v17 = v24;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v6 + 16))(&v25, v7, v6, v13);
  if (!v17)
  {
    uint64_t v19 = AssociatedTypeWitness;
    uint64_t v20 = v23;
    uint64_t v25 = v16;
    (*(void (**)(uint64_t *, void))(a2[5] + 16LL))(&v25, a2[3]);
    if (*v20)
    {
      if (*v20 == 1) {
        dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      }
      else {
        dispatch thunk of static Numeric.* infix(_:_:)();
      }
    }

    else
    {
      MEMORY[0x186E1C57C](v15, v11, v19, *(void *)(a2[6] + 8LL));
    }

    BOOL v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v11, v19);
    return ((uint64_t (*)(char *, uint64_t))v21)(v15, v19);
  }

  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Arithmetic<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.Arithmetic.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_Arithmetic<A, B>(lhs:rhs:op:)()
{
}

uint64_t sub_1834D61DC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( &v5[*(int *)(a1 + 64)],  v3,  v1);
  *uint64_t v5 = v6;
  return result;
}

uint64_t PredicateExpressions.Arithmetic.description.getter()
{
  BYTE8(v6) = 0;
  _StringGuts.grow(_:)(42LL);
  v1._id object = (void *)0x80000001839D37F0LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 0x74617265706F202CLL;
  v2._id object = (void *)0xEC000000203A726FLL;
  String.append(_:)(v2);
  *(void *)&__int128 v6 = *v0;
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 0x203A736872202CLL;
  v3._id object = (void *)0xE700000000000000LL;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._uint64_t countAndFlagsBits = 41LL;
  v4._id object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return *(void *)((char *)&v6 + 1);
}

uint64_t PredicateExpressions.Arithmetic<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator,  &type metadata for PredicateExpressions.ArithmeticOperator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator,  &type metadata for PredicateExpressions.ArithmeticOperator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ArithmeticOperator,  &type metadata for PredicateExpressions.ArithmeticOperator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator);
  }

  return result;
}

void PredicateExpressions.Arithmetic<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  void v14[3] = a5;
  void v14[4] = a4;
  v14[8] = a3;
  v14[6] = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  v14[5] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[7] = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v7);
  double v14[9] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[11] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  v14[15] = v13;
  type metadata accessor for PredicateExpressions.Arithmetic();
}

uint64_t sub_1834D65B4(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 128);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 20__DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0LL, 0) = v6;
  *(void *)(v4 - 192) = v8;
  *(void *)(v4 - 128) = v3;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v10 = *(_BYTE **)(v4 - 192);
  uint64_t v11 = &v10[*(int *)(a1 + 60)];
  uint64_t v12 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v4 - 152) + 32LL);
  uint64_t v13 = *(void *)(v4 - 136);
  *(void *)(v4 - 136) = v1;
  v12(v11, v13, v1);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  uint64_t v14 = *(void *)(v4 - 168);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v4 - 160) + 32LL))(&v10[*(int *)(a1 + 64)], v14, v2);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v15 = *(void *)(v4 - 128);
  *uint64_t v10 = *(_BYTE *)(v4 - 65);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  uint64_t v16 = *(void *)(v4 - 200);
  (*(void (**)(void, _BYTE *, uint64_t))(v16 + 16))(*(void *)(v4 - 184), v10, a1);
  __swift_destroy_boxed_opaque_existential_1(v15);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v16 + 8))(v10, a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Arithmetic<A, B>( void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Arithmetic<A, B>);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v10 = *(void *)(v6 + 16);
  uint64_t v9 = *(void *)(v6 + 24);
  v13[0] = v8;
  v13[1] = v7;
  void v13[2] = v10;
  _OWORD v13[3] = v9;
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.Arithmetic<A, B>, a2, v13);
  v12[0] = v8;
  v12[1] = v7;
  void v12[2] = v10;
  void v12[3] = v9;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.Arithmetic<A, B>, a2, v12);
  a1[3] = result;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Arithmetic<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Arithmetic<A, B>( void *a1)
{
  return PredicateExpressions.Arithmetic<>.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for PredicateExpressions.ArithmeticOperator()
{
  return &type metadata for PredicateExpressions.ArithmeticOperator;
}

uint64_t type metadata completion function for PredicateExpressions.Arithmetic()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Arithmetic( unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (v4 <= *(_DWORD *)(v5 + 84)) {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v6 = *(_DWORD *)(v3 + 84);
  }
  if (v6 <= 0xFD) {
    unsigned int v7 = 253;
  }
  else {
    unsigned int v7 = v6;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v8 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = *(void *)(v3 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v7) {
    goto LABEL_27;
  }
  uint64_t v11 = ((v9 + v10 + ((v8 + 1) & ~v8)) & ~v10) + *(void *)(v5 + 64);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((a2 - v7 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)&a1[v11];
      if (!v13) {
        goto LABEL_27;
      }
      goto LABEL_18;
    }

    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)&a1[v11];
      if (!*(_WORD *)&a1[v11]) {
        goto LABEL_27;
      }
      goto LABEL_18;
    }

    if (v15 < 2)
    {
LABEL_27:
      if (v6 > 0xFD)
      {
        uint64_t v19 = (unint64_t)&a1[v8 + 1] & ~v8;
        if (v4 == v7) {
          return (*(uint64_t (**)(uint64_t, void))(v3 + 48))(v19, *(unsigned int *)(v3 + 84));
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v5 + 48))((v19 + v9 + v10) & ~v10);
        }
      }

      else
      {
        unsigned int v18 = *a1;
        if (v18 >= 3) {
          return v18 - 2;
        }
        else {
          return 0LL;
        }
      }
    }
  }

  int v13 = a1[v11];
  if (!a1[v11]) {
    goto LABEL_27;
  }
LABEL_18:
  int v16 = (v13 - 1) << v12;
  if (!(_DWORD)v11) {
    return v7 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_1834D6B0C + 4 * byte_183833240[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Arithmetic( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84)) {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  if (v7 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = v7;
  }
  size_t v9 = ((*(void *)(v5 + 64)
       + *(unsigned __int8 *)(v6 + 80)
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      unsigned int v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        unsigned int v10 = 4u;
      }

      else if (v12 >= 0x100)
      {
        unsigned int v10 = 2;
      }

      else
      {
        unsigned int v10 = v12 > 1;
      }
    }

    else
    {
      unsigned int v10 = 1u;
    }
  }

  else
  {
    unsigned int v10 = 0u;
  }

  if (v8 < a2)
  {
    int v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        int v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }

        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }

        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }

    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X6 }

uint64_t storeEnumTagSinglePayload for PredicateExpressions.ArithmeticOperator( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1834D6E38 + 4 * byte_183833253[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1834D6E6C + 4 * byte_18383324E[v4]))();
}

uint64_t sub_1834D6E6C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834D6E74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834D6E7CLL);
  }
  return result;
}

uint64_t sub_1834D6E88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834D6E90LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1834D6E94(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834D6E9C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PredicateExpressions.ArithmeticOperator.CodingKeys()
{
  return &unk_189C96160;
}

void *type metadata accessor for PredicateExpressions.ArithmeticOperator.AddCodingKeys()
{
  return &unk_189C96180;
}

void *type metadata accessor for PredicateExpressions.ArithmeticOperator.SubtractCodingKeys()
{
  return &unk_189C961A0;
}

void *type metadata accessor for PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys()
{
  return &unk_189C961C0;
}

uint64_t specialized PredicateExpressions.ArithmeticOperator.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6579297 && a2 == 0xE300000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x7463617274627573LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x796C7069746C756DLL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

void _FileManagerImpl.url(for:in:appropriateFor:create:)( uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, char a4@<W3>, Swift::String *a5@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v8 = v5;
  uint64_t v10 = a2;
  uint64_t v107 = *MEMORY[0x1895F89C0];
  int v13 = *a3;
  if (!*a3)
  {
    if (a2 != 8) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }

  if (a2 == 8)
  {
LABEL_9:
    uint64_t v10 = 1032LL;
    goto LABEL_11;
  }

  if (a2 == 1)
  {
    if (a1 == 99)
    {
      uint64_t v14 = MEMORY[0x186E20F44](v8);
      if (v14)
      {
        unsigned int v15 = (void *)v14;
        v104._uint64_t countAndFlagsBits = 0LL;
        swift_retain();
        id v16 = v13;
        swift_retain();
        id v17 = objc_msgSend(v15, sel__URLForReplacingItemAtURL_error_, v16, &v104);

        uint64_t countAndFlagsBits = (void *)v104._countAndFlagsBits;
        if (v17)
        {
          URL.init(reference:)(v17, &v104);
          Swift::String v100 = v104;
          uint64_t v19 = v105;
          id v20 = countAndFlagsBits;
          outlined consume of URL?(v13);

          *a5 = v100;
          a5[1]._uint64_t countAndFlagsBits = v19;
        }

        else
        {
          if (v104._countAndFlagsBits)
          {
            (id)v104._countAndFlagsBits;
          }

          else
          {
            if (one-time initialization token for _nilObjCError != -1) {
              swift_once();
            }
            id v89 = (id)_nilObjCError;
          }

          swift_willThrow();
          outlined consume of URL?(v13);
        }

        return;
      }

void _FileManagerImpl.getRelationship(_:ofDirectoryAt:toItemAt:)(uint64_t *a1, id *a2, id *a3)
{
  uint64_t v280 = *MEMORY[0x1895F89C0];
  id v259 = *a3;
  id v266 = *a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  int v3 = (void *)swift_allocObject();
  uint64_t v4 = (void *)*MEMORY[0x189603BE0];
  v3[4] = *MEMORY[0x189603BE0];
  v270 = v3 + 4;
  uint64_t v5 = (void *)*MEMORY[0x189603DC0];
  uint64_t v6 = (void *)*MEMORY[0x189603C48];
  v3[5] = *MEMORY[0x189603DC0];
  v3[6] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  uint64_t v7 = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = v7 + 56;
  id v257 = v4;
  id v253 = v5;
  id v264 = v6;
  uint64_t v9 = 0LL;
  uint64_t v275 = v7;
  do
  {
    int v11 = (void *)v270[v9];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    Hasher.init(_seed:)();
    id v12 = v11;
    uint64_t v10 = v275;
    String.hash(into:)();
    Swift::Int v13 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v14 = -1LL << *(_BYTE *)(v275 + 32);
    unint64_t v15 = v13 & ~v14;
    unint64_t v16 = v15 >> 6;
    uint64_t v17 = *(void *)(v8 + 8 * (v15 >> 6));
    uint64_t v18 = 1LL << v15;
    if (((1LL << v15) & v17) != 0)
    {
      id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v275 + 48) + 8 * v15));
      uint64_t v21 = v20;
      if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(v11) && v21 == v22) {
        goto LABEL_2;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) != 0) {
        goto LABEL_3;
      }
      uint64_t v14 = ~v14;
      unint64_t v15 = (v15 + 1) & v14;
      unint64_t v16 = v15 >> 6;
      uint64_t v17 = *(void *)(v8 + 8 * (v15 >> 6));
      uint64_t v18 = 1LL << v15;
      uint64_t v10 = v275;
      if ((v17 & (1LL << v15)) != 0)
      {
        id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v275 + 48) + 8 * v15));
        uint64_t v27 = v26;
        if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(v11) && v27 == v28) {
          goto LABEL_2;
        }
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v30 & 1) != 0) {
          goto LABEL_3;
        }
        unint64_t v15 = (v15 + 1) & v14;
        unint64_t v16 = v15 >> 6;
        uint64_t v17 = *(void *)(v8 + 8 * (v15 >> 6));
        uint64_t v18 = 1LL << v15;
        uint64_t v10 = v275;
        if ((v17 & (1LL << v15)) != 0)
        {
          id v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v275 + 48) + 8 * v15));
          uint64_t v33 = v32;
          if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)(v11) && v33 == v34)
          {
LABEL_2:
            swift_bridgeObjectRelease_n();
          }

          else
          {
            while (1)
            {
              char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v35 & 1) != 0) {
                break;
              }
              unint64_t v15 = (v15 + 1) & v14;
              unint64_t v16 = v15 >> 6;
              uint64_t v17 = *(void *)(v8 + 8 * (v15 >> 6));
              uint64_t v18 = 1LL << v15;
              uint64_t v10 = v275;
              if ((v17 & (1LL << v15)) == 0) {
                goto LABEL_28;
              }
              id v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v275 + 48) + 8 * v15));
              uint64_t v38 = v37;
              if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)(v11) && v38 == v39) {
                goto LABEL_2;
              }
            }
          }